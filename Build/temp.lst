
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000cab 	.word	0x00000cab
  10:	00000cad 	.word	0x00000cad
  14:	00000caf 	.word	0x00000caf
  18:	00000cb1 	.word	0x00000cb1
	...
  2c:	00000cb3 	.word	0x00000cb3
  30:	00000cb5 	.word	0x00000cb5
  34:	00000000 	.word	0x00000000
  38:	00000cb7 	.word	0x00000cb7
  3c:	00000cb9 	.word	0x00000cb9
  40:	00000cbb 	.word	0x00000cbb
  44:	00000cbb 	.word	0x00000cbb
  48:	00000cbb 	.word	0x00000cbb
  4c:	00000cbb 	.word	0x00000cbb
  50:	00000cbb 	.word	0x00000cbb
  54:	00000cbb 	.word	0x00000cbb
  58:	00000cbb 	.word	0x00000cbb
  5c:	00000cbb 	.word	0x00000cbb
  60:	00000cbb 	.word	0x00000cbb
  64:	00000cbb 	.word	0x00000cbb
  68:	00000cbb 	.word	0x00000cbb
  6c:	00000cbb 	.word	0x00000cbb
  70:	00000cbb 	.word	0x00000cbb
  74:	00000cbb 	.word	0x00000cbb
  78:	00000cbb 	.word	0x00000cbb
  7c:	00000cbb 	.word	0x00000cbb
  80:	00000cbb 	.word	0x00000cbb
  84:	00000cbb 	.word	0x00000cbb
  88:	00000cbb 	.word	0x00000cbb
  8c:	00000cbb 	.word	0x00000cbb
  90:	00000cbb 	.word	0x00000cbb
  94:	00000cbb 	.word	0x00000cbb
  98:	00000cbb 	.word	0x00000cbb
  9c:	00000cbb 	.word	0x00000cbb
  a0:	00000cbb 	.word	0x00000cbb
  a4:	00000cbb 	.word	0x00000cbb
  a8:	00000cbb 	.word	0x00000cbb
  ac:	00000cbb 	.word	0x00000cbb
  b0:	00000cbb 	.word	0x00000cbb
  b4:	00000cbb 	.word	0x00000cbb
  b8:	00000cbb 	.word	0x00000cbb
  bc:	00000cbb 	.word	0x00000cbb
  c0:	00000cbb 	.word	0x00000cbb
  c4:	00000cbb 	.word	0x00000cbb
  c8:	00000cbb 	.word	0x00000cbb
  cc:	00000cbb 	.word	0x00000cbb
  d0:	00000cbb 	.word	0x00000cbb
  d4:	00000cbb 	.word	0x00000cbb
  d8:	00000cbb 	.word	0x00000cbb
  dc:	00000cbb 	.word	0x00000cbb
  e0:	00000cbb 	.word	0x00000cbb
  e4:	00000cbb 	.word	0x00000cbb
  e8:	00000cbb 	.word	0x00000cbb
  ec:	00000cbb 	.word	0x00000cbb
  f0:	00000cbb 	.word	0x00000cbb
  f4:	00000cbb 	.word	0x00000cbb
  f8:	00000cbb 	.word	0x00000cbb
  fc:	00000cbb 	.word	0x00000cbb
 100:	00000cbb 	.word	0x00000cbb
 104:	00000cbb 	.word	0x00000cbb
 108:	00000cbb 	.word	0x00000cbb
 10c:	00000cbb 	.word	0x00000cbb
 110:	00000cbb 	.word	0x00000cbb
 114:	00000cbb 	.word	0x00000cbb
 118:	00000cbb 	.word	0x00000cbb
 11c:	00000cbb 	.word	0x00000cbb
 120:	00000cbb 	.word	0x00000cbb
 124:	00000cbb 	.word	0x00000cbb
 128:	00000cbb 	.word	0x00000cbb
 12c:	00000cbb 	.word	0x00000cbb
 130:	00000cbb 	.word	0x00000cbb
 134:	00000cbb 	.word	0x00000cbb
 138:	00000cbb 	.word	0x00000cbb
 13c:	00000cbb 	.word	0x00000cbb
 140:	00000cbb 	.word	0x00000cbb
 144:	00000cbb 	.word	0x00000cbb
 148:	00000cbb 	.word	0x00000cbb
 14c:	00000cbb 	.word	0x00000cbb
 150:	00000cbb 	.word	0x00000cbb
 154:	00000cbb 	.word	0x00000cbb
 158:	00000cbb 	.word	0x00000cbb
 15c:	00000cbb 	.word	0x00000cbb
 160:	00000cbb 	.word	0x00000cbb
 164:	00000cbb 	.word	0x00000cbb
 168:	00000cbb 	.word	0x00000cbb
 16c:	00000cbb 	.word	0x00000cbb
 170:	00000cbb 	.word	0x00000cbb
 174:	00000cbb 	.word	0x00000cbb
 178:	00000cbb 	.word	0x00000cbb
 17c:	00000cbb 	.word	0x00000cbb
 180:	00000cbb 	.word	0x00000cbb
 184:	00000cbb 	.word	0x00000cbb
 188:	00000cbb 	.word	0x00000cbb
 18c:	00000cbb 	.word	0x00000cbb
 190:	00000cbb 	.word	0x00000cbb
 194:	00000cbb 	.word	0x00000cbb
 198:	00000cbb 	.word	0x00000cbb
 19c:	00000cbb 	.word	0x00000cbb
 1a0:	00000cbb 	.word	0x00000cbb
 1a4:	00000cbb 	.word	0x00000cbb
 1a8:	00000cbb 	.word	0x00000cbb
 1ac:	00000cbb 	.word	0x00000cbb
 1b0:	00000cbb 	.word	0x00000cbb
 1b4:	00000cbb 	.word	0x00000cbb
 1b8:	00000cbb 	.word	0x00000cbb
 1bc:	00000cbb 	.word	0x00000cbb
 1c0:	00000cbb 	.word	0x00000cbb
 1c4:	00000cbb 	.word	0x00000cbb
 1c8:	00000cbb 	.word	0x00000cbb
 1cc:	00000cbb 	.word	0x00000cbb
 1d0:	00000cbb 	.word	0x00000cbb
 1d4:	00000cbb 	.word	0x00000cbb
 1d8:	00000cbb 	.word	0x00000cbb
 1dc:	00000cbb 	.word	0x00000cbb
 1e0:	00000cbb 	.word	0x00000cbb
 1e4:	00000cbb 	.word	0x00000cbb
 1e8:	00000cbb 	.word	0x00000cbb
 1ec:	00000cbb 	.word	0x00000cbb
 1f0:	00000cbb 	.word	0x00000cbb
 1f4:	00000cbb 	.word	0x00000cbb
 1f8:	00000cbb 	.word	0x00000cbb
 1fc:	00000cbb 	.word	0x00000cbb
 200:	00000cbb 	.word	0x00000cbb
 204:	00000cbb 	.word	0x00000cbb
 208:	00000cbb 	.word	0x00000cbb
 20c:	00000cbb 	.word	0x00000cbb
 210:	00000cbb 	.word	0x00000cbb
 214:	00000cbb 	.word	0x00000cbb
 218:	00000cbb 	.word	0x00000cbb
 21c:	00000cbb 	.word	0x00000cbb
 220:	00000cbb 	.word	0x00000cbb
 224:	00000cbb 	.word	0x00000cbb
 228:	00000cbb 	.word	0x00000cbb
 22c:	00000cbb 	.word	0x00000cbb
 230:	00000cbb 	.word	0x00000cbb
 234:	00000cbb 	.word	0x00000cbb
 238:	00000cbb 	.word	0x00000cbb
 23c:	00000cbb 	.word	0x00000cbb
 240:	00000cbb 	.word	0x00000cbb
 244:	00000cbb 	.word	0x00000cbb
 248:	00000cbb 	.word	0x00000cbb
 24c:	00000cbb 	.word	0x00000cbb
 250:	00000cbb 	.word	0x00000cbb
 254:	00000cbb 	.word	0x00000cbb
 258:	00000cbb 	.word	0x00000cbb
 25c:	00000cbb 	.word	0x00000cbb
 260:	00000cbb 	.word	0x00000cbb
 264:	00000cbb 	.word	0x00000cbb
 268:	00000cbb 	.word	0x00000cbb
 26c:	00000cbb 	.word	0x00000cbb
 270:	00000cbb 	.word	0x00000cbb
 274:	00000cbb 	.word	0x00000cbb
 278:	00000cbb 	.word	0x00000cbb
 27c:	00000cbb 	.word	0x00000cbb
 280:	00000cbb 	.word	0x00000cbb
 284:	00000cbb 	.word	0x00000cbb
 288:	00000cbb 	.word	0x00000cbb
 28c:	00000cbb 	.word	0x00000cbb
 290:	00000cbb 	.word	0x00000cbb
 294:	00000cbb 	.word	0x00000cbb
 298:	00000cbb 	.word	0x00000cbb
 29c:	00000cbb 	.word	0x00000cbb
 2a0:	00000cbb 	.word	0x00000cbb
 2a4:	00000cbb 	.word	0x00000cbb
 2a8:	00000cbb 	.word	0x00000cbb
 2ac:	00000cbb 	.word	0x00000cbb
 2b0:	00000cbb 	.word	0x00000cbb
 2b4:	00000cbb 	.word	0x00000cbb
 2b8:	00000cbb 	.word	0x00000cbb
 2bc:	00000cbb 	.word	0x00000cbb
 2c0:	00000cbb 	.word	0x00000cbb
 2c4:	00000cbb 	.word	0x00000cbb
 2c8:	00000cbb 	.word	0x00000cbb
 2cc:	00000cbb 	.word	0x00000cbb
 2d0:	00000cbb 	.word	0x00000cbb
 2d4:	00000cbb 	.word	0x00000cbb
 2d8:	00000cbb 	.word	0x00000cbb
 2dc:	00000cbb 	.word	0x00000cbb
 2e0:	00000cbb 	.word	0x00000cbb
 2e4:	00000cbb 	.word	0x00000cbb
 2e8:	00000cbb 	.word	0x00000cbb
 2ec:	00000cbb 	.word	0x00000cbb
 2f0:	00000cbb 	.word	0x00000cbb
 2f4:	00000cbb 	.word	0x00000cbb
 2f8:	00000cbb 	.word	0x00000cbb
 2fc:	00000cbb 	.word	0x00000cbb
 300:	00000cbb 	.word	0x00000cbb
 304:	00000cbb 	.word	0x00000cbb
 308:	00000cbb 	.word	0x00000cbb
 30c:	00000cbb 	.word	0x00000cbb

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fb49 	bl	b18 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fc08 	bl	ca0 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff98f4 	.word	0x1fff98f4

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fb53 	bl	c44 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * This configuration is for both CAN controllers.
 * 
 * 
 * @return Always zero
*/
int main( void ) {
     8b0:	b500      	push	{lr}
     8b2:	b089      	sub	sp, #36	; 0x24
    //local data.
    //Transmit message (PDU) 0 (Message ID 0x100) for Can 0 controller.
    uint8 Message0_SDU[3] = { 0xDE, 0xF4, 0xC9 }; //Data payload for message.
     8b4:	4a24      	ldr	r2, [pc, #144]	; (948 <main+0x98>)
     8b6:	ab07      	add	r3, sp, #28
     8b8:	6812      	ldr	r2, [r2, #0]
     8ba:	4611      	mov	r1, r2
     8bc:	8019      	strh	r1, [r3, #0]
     8be:	3302      	adds	r3, #2
     8c0:	0c12      	lsrs	r2, r2, #16
     8c2:	701a      	strb	r2, [r3, #0]
    PduInfoType Message0 = {
     8c4:	ab07      	add	r3, sp, #28
     8c6:	9304      	str	r3, [sp, #16]
     8c8:	2300      	movs	r3, #0
     8ca:	9305      	str	r3, [sp, #20]
     8cc:	2303      	movs	r3, #3
     8ce:	9306      	str	r3, [sp, #24]
        .SduDataPtr = Message0_SDU,
        .MetaDataPtr = NULL_PTR
    };

    //Transmit message (PDU) 1 (Message ID 0x300) for Can 2 controller.
    uint8 Message1_SDU[3] = { 0xAA, 0xBB, 0xCC }; //Data payload for message.
     8d0:	4a1e      	ldr	r2, [pc, #120]	; (94c <main+0x9c>)
     8d2:	ab03      	add	r3, sp, #12
     8d4:	6812      	ldr	r2, [r2, #0]
     8d6:	4611      	mov	r1, r2
     8d8:	8019      	strh	r1, [r3, #0]
     8da:	3302      	adds	r3, #2
     8dc:	0c12      	lsrs	r2, r2, #16
     8de:	701a      	strb	r2, [r3, #0]
    PduInfoType Message1 = {
     8e0:	ab03      	add	r3, sp, #12
     8e2:	9300      	str	r3, [sp, #0]
     8e4:	2300      	movs	r3, #0
     8e6:	9301      	str	r3, [sp, #4]
     8e8:	2303      	movs	r3, #3
     8ea:	9302      	str	r3, [sp, #8]
        .SduLength = 3,
        .SduDataPtr = Message1_SDU,
        .MetaDataPtr = NULL_PTR
    };

    EcuM_Init();    //MCU configuration.
     8ec:	f000 ff02 	bl	16f4 <EcuM_Init>

    //SBC by default is in force normal mode so the CAN transceiver is already active.

    CanIf_SetControllerMode( CanIfFlexCan0 , CAN_CS_STARTED );   //Can 0 controller active in Can Bus.
     8f0:	2101      	movs	r1, #1
     8f2:	2001      	movs	r0, #1
     8f4:	f016 fc1d 	bl	17132 <CanIf_SetControllerMode>
    CanIf_SetControllerMode( CanIfFlexCan2 , CAN_CS_STARTED );   //Can 2 controller active in Can Bus.
     8f8:	2101      	movs	r1, #1
     8fa:	2000      	movs	r0, #0
     8fc:	f016 fc19 	bl	17132 <CanIf_SetControllerMode>

    while( 1u ) {
        //Transmit messages every 5s.
        CanIf_Transmit( CanIfTxPDU_0, &Message0 );   //Writing in Can 0 message buffer 1.
     900:	ab04      	add	r3, sp, #16
     902:	4619      	mov	r1, r3
     904:	2000      	movs	r0, #0
     906:	f016 faed 	bl	16ee4 <CanIf_Transmit>
        CanIf_Transmit( CanIfTxPDU_1, &Message1 );   //Writing in Can 2 message buffer 1.
     90a:	466b      	mov	r3, sp
     90c:	4619      	mov	r1, r3
     90e:	2001      	movs	r0, #1
     910:	f016 fae8 	bl	16ee4 <CanIf_Transmit>

        while( ( CanIf_Can0_bTxFlag == FALSE ) || ( CanIf_Can2_bTxFlag == FALSE ) ); //Waiting until messages are transmitted.
     914:	bf00      	nop
     916:	4b0e      	ldr	r3, [pc, #56]	; (950 <main+0xa0>)
     918:	781b      	ldrb	r3, [r3, #0]
     91a:	f083 0301 	eor.w	r3, r3, #1
     91e:	b2db      	uxtb	r3, r3
     920:	2b00      	cmp	r3, #0
     922:	d1f8      	bne.n	916 <main+0x66>
     924:	4b0b      	ldr	r3, [pc, #44]	; (954 <main+0xa4>)
     926:	781b      	ldrb	r3, [r3, #0]
     928:	f083 0301 	eor.w	r3, r3, #1
     92c:	b2db      	uxtb	r3, r3
     92e:	2b00      	cmp	r3, #0
     930:	d1f1      	bne.n	916 <main+0x66>
        CanIf_Can0_bTxFlag = FALSE;  //Clearing transmit flag.
     932:	4b07      	ldr	r3, [pc, #28]	; (950 <main+0xa0>)
     934:	2200      	movs	r2, #0
     936:	701a      	strb	r2, [r3, #0]
        CanIf_Can2_bTxFlag = FALSE;  //Clearing transmit flag.
     938:	4b06      	ldr	r3, [pc, #24]	; (954 <main+0xa4>)
     93a:	2200      	movs	r2, #0
     93c:	701a      	strb	r2, [r3, #0]

        Delay( 5000 );  //Waiting 5s for next transmission.
     93e:	f241 3088 	movw	r0, #5000	; 0x1388
     942:	f000 fef7 	bl	1734 <Delay>
        CanIf_Transmit( CanIfTxPDU_0, &Message0 );   //Writing in Can 0 message buffer 1.
     946:	e7db      	b.n	900 <main+0x50>
     948:	00017434 	.word	0x00017434
     94c:	00017438 	.word	0x00017438
     950:	1fff8b30 	.word	0x1fff8b30
     954:	1fff8b32 	.word	0x1fff8b32

00000958 <DevAssert>:
    #error "Unsupported architecture!"
#endif

/* Implement default assert macro */
static inline void DevAssert(volatile boolean x)
{
     958:	b082      	sub	sp, #8
     95a:	4603      	mov	r3, r0
     95c:	f88d 3007 	strb.w	r3, [sp, #7]
    if(x) { } else { for(;;) {ASM_KEYWORD(BREAKPOINT_INSTR);} }
     960:	f89d 3007 	ldrb.w	r3, [sp, #7]
     964:	b2db      	uxtb	r3, r3
     966:	2b00      	cmp	r3, #0
     968:	d101      	bne.n	96e <DevAssert+0x16>
     96a:	be00      	bkpt	0x0000
     96c:	e7fd      	b.n	96a <DevAssert+0x12>
}
     96e:	bf00      	nop
     970:	b002      	add	sp, #8
     972:	4770      	bx	lr

00000974 <Adc_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Adc_schm_read_msr(void)
{
     974:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     976:	f3ef 8310 	mrs	r3, PRIMASK
     97a:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     97c:	4623      	mov	r3, r4
}
     97e:	4618      	mov	r0, r3
     980:	f85d 4b04 	ldr.w	r4, [sp], #4
     984:	4770      	bx	lr

00000986 <Can_43_FLEXCAN_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Can_43_FLEXCAN_schm_read_msr(void)
{
     986:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     988:	f3ef 8310 	mrs	r3, PRIMASK
     98c:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     98e:	4623      	mov	r3, r4
}
     990:	4618      	mov	r0, r3
     992:	f85d 4b04 	ldr.w	r4, [sp], #4
     996:	4770      	bx	lr

00000998 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     998:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     99a:	f3ef 8310 	mrs	r3, PRIMASK
     99e:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9a0:	4623      	mov	r3, r4
}
     9a2:	4618      	mov	r0, r3
     9a4:	f85d 4b04 	ldr.w	r4, [sp], #4
     9a8:	4770      	bx	lr

000009aa <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     9aa:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     9ac:	f3ef 8310 	mrs	r3, PRIMASK
     9b0:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9b2:	4623      	mov	r3, r4
}
     9b4:	4618      	mov	r0, r3
     9b6:	f85d 4b04 	ldr.w	r4, [sp], #4
     9ba:	4770      	bx	lr

000009bc <Spi_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Spi_schm_read_msr(void)
{
     9bc:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     9be:	f3ef 8310 	mrs	r3, PRIMASK
     9c2:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9c4:	4623      	mov	r3, r4
}
     9c6:	4618      	mov	r0, r3
     9c8:	f85d 4b04 	ldr.w	r4, [sp], #4
     9cc:	4770      	bx	lr
	...

000009d0 <CDD_UserTxConfirmation_Can_0>:
 * @brief Callback function for the complete transmit of a PDU (registered) from Can0 controller.
 * 
 * @param TxPduId ID (container) of the PDU transmitted.
 * @param result Status of the transmision operation.
 */
void CDD_UserTxConfirmation_Can_0( PduIdType TxPduId, Std_ReturnType result ) {
     9d0:	b082      	sub	sp, #8
     9d2:	4603      	mov	r3, r0
     9d4:	460a      	mov	r2, r1
     9d6:	f8ad 3006 	strh.w	r3, [sp, #6]
     9da:	4613      	mov	r3, r2
     9dc:	f88d 3005 	strb.w	r3, [sp, #5]
    //local data.
    static uint8 Transmit_count = 0;    //Count of transmitted PDUs.
    (void)TxPduId;

    if ( result == E_OK ) { //Message was transmitted successfully.
     9e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
     9e4:	2b00      	cmp	r3, #0
     9e6:	d108      	bne.n	9fa <CDD_UserTxConfirmation_Can_0+0x2a>
        Transmit_count++;
     9e8:	4b05      	ldr	r3, [pc, #20]	; (a00 <CDD_UserTxConfirmation_Can_0+0x30>)
     9ea:	781b      	ldrb	r3, [r3, #0]
     9ec:	3301      	adds	r3, #1
     9ee:	b2da      	uxtb	r2, r3
     9f0:	4b03      	ldr	r3, [pc, #12]	; (a00 <CDD_UserTxConfirmation_Can_0+0x30>)
     9f2:	701a      	strb	r2, [r3, #0]
        CanIf_Can0_bTxFlag = TRUE;
     9f4:	4b03      	ldr	r3, [pc, #12]	; (a04 <CDD_UserTxConfirmation_Can_0+0x34>)
     9f6:	2201      	movs	r2, #1
     9f8:	701a      	strb	r2, [r3, #0]
    }    
}
     9fa:	bf00      	nop
     9fc:	b002      	add	sp, #8
     9fe:	4770      	bx	lr
     a00:	1fff98f0 	.word	0x1fff98f0
     a04:	1fff8b30 	.word	0x1fff8b30

00000a08 <CDD_UserRxIndication_Can_0>:
 * @brief Callback function for the reception of a PDU (registered) of interest for the Can0 controller.
 * 
 * @param RxPduId ID (container) of the PDU received.
 * @param PduInfoPtr Pointer to PDU received (message)
 */
void CDD_UserRxIndication_Can_0( PduIdType RxPduId, const PduInfoType* PduInfoPtr ) {
     a08:	b086      	sub	sp, #24
     a0a:	4603      	mov	r3, r0
     a0c:	9100      	str	r1, [sp, #0]
     a0e:	f8ad 3006 	strh.w	r3, [sp, #6]
    //local data.
    static uint8 counter_RXPDU0 = 0;   //Message rx 0 counter.
    uint8 Data[8];  //Data payload received.

    //Obtaining data received.
    for ( uint8 i = 0; i < PduInfoPtr->SduLength; i++ ) {
     a12:	2300      	movs	r3, #0
     a14:	f88d 3017 	strb.w	r3, [sp, #23]
     a18:	e010      	b.n	a3c <CDD_UserRxIndication_Can_0+0x34>
        Data[i] = PduInfoPtr->SduDataPtr[i];
     a1a:	9b00      	ldr	r3, [sp, #0]
     a1c:	681a      	ldr	r2, [r3, #0]
     a1e:	f89d 3017 	ldrb.w	r3, [sp, #23]
     a22:	441a      	add	r2, r3
     a24:	f89d 3017 	ldrb.w	r3, [sp, #23]
     a28:	7812      	ldrb	r2, [r2, #0]
     a2a:	a906      	add	r1, sp, #24
     a2c:	440b      	add	r3, r1
     a2e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for ( uint8 i = 0; i < PduInfoPtr->SduLength; i++ ) {
     a32:	f89d 3017 	ldrb.w	r3, [sp, #23]
     a36:	3301      	adds	r3, #1
     a38:	f88d 3017 	strb.w	r3, [sp, #23]
     a3c:	f89d 2017 	ldrb.w	r2, [sp, #23]
     a40:	9b00      	ldr	r3, [sp, #0]
     a42:	689b      	ldr	r3, [r3, #8]
     a44:	429a      	cmp	r2, r3
     a46:	d3e8      	bcc.n	a1a <CDD_UserRxIndication_Can_0+0x12>
    }

    //Verifying which message was received.
    switch ( RxPduId ) {
     a48:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d106      	bne.n	a5e <CDD_UserRxIndication_Can_0+0x56>
        case 0: //ID 0x200 received
            counter_RXPDU0++;
     a50:	4b06      	ldr	r3, [pc, #24]	; (a6c <CDD_UserRxIndication_Can_0+0x64>)
     a52:	781b      	ldrb	r3, [r3, #0]
     a54:	3301      	adds	r3, #1
     a56:	b2da      	uxtb	r2, r3
     a58:	4b04      	ldr	r3, [pc, #16]	; (a6c <CDD_UserRxIndication_Can_0+0x64>)
     a5a:	701a      	strb	r2, [r3, #0]
        break;
     a5c:	e000      	b.n	a60 <CDD_UserRxIndication_Can_0+0x58>
        default:
        break;
     a5e:	bf00      	nop
    }
    
    CanIf_Can0_bRxFlag = TRUE;   //Message received.
     a60:	4b03      	ldr	r3, [pc, #12]	; (a70 <CDD_UserRxIndication_Can_0+0x68>)
     a62:	2201      	movs	r2, #1
     a64:	701a      	strb	r2, [r3, #0]
}
     a66:	bf00      	nop
     a68:	b006      	add	sp, #24
     a6a:	4770      	bx	lr
     a6c:	1fff98f1 	.word	0x1fff98f1
     a70:	1fff8b31 	.word	0x1fff8b31

00000a74 <CDD_UserTxConfirmation_Can_2>:
 * @brief Callback function for the complete transmit of a PDU (registered) from Can2 controller.
 * 
 * @param TxPduId ID (container) of the PDU transmitted.
 * @param result Status of the transmision operation.
 */
void CDD_UserTxConfirmation_Can_2( PduIdType TxPduId, Std_ReturnType result ) {
     a74:	b082      	sub	sp, #8
     a76:	4603      	mov	r3, r0
     a78:	460a      	mov	r2, r1
     a7a:	f8ad 3006 	strh.w	r3, [sp, #6]
     a7e:	4613      	mov	r3, r2
     a80:	f88d 3005 	strb.w	r3, [sp, #5]
    //local data.
    static uint8 Transmit_count = 0;    //Count of transmitted PDUs.
    (void)TxPduId;

    if ( result == E_OK ) { //Message was transmitted successfully.
     a84:	f89d 3005 	ldrb.w	r3, [sp, #5]
     a88:	2b00      	cmp	r3, #0
     a8a:	d108      	bne.n	a9e <CDD_UserTxConfirmation_Can_2+0x2a>
        Transmit_count++;
     a8c:	4b05      	ldr	r3, [pc, #20]	; (aa4 <CDD_UserTxConfirmation_Can_2+0x30>)
     a8e:	781b      	ldrb	r3, [r3, #0]
     a90:	3301      	adds	r3, #1
     a92:	b2da      	uxtb	r2, r3
     a94:	4b03      	ldr	r3, [pc, #12]	; (aa4 <CDD_UserTxConfirmation_Can_2+0x30>)
     a96:	701a      	strb	r2, [r3, #0]
        CanIf_Can2_bTxFlag = TRUE;
     a98:	4b03      	ldr	r3, [pc, #12]	; (aa8 <CDD_UserTxConfirmation_Can_2+0x34>)
     a9a:	2201      	movs	r2, #1
     a9c:	701a      	strb	r2, [r3, #0]
    }
}
     a9e:	bf00      	nop
     aa0:	b002      	add	sp, #8
     aa2:	4770      	bx	lr
     aa4:	1fff98f2 	.word	0x1fff98f2
     aa8:	1fff8b32 	.word	0x1fff8b32

00000aac <CDD_UserRxIndication_Can_2>:
 * @brief Callback function for the reception of a PDU (registered) of interest for the Can2 controller.
 * 
 * @param RxPduId ID (container) of the PDU received.
 * @param PduInfoPtr Pointer to PDU received (message)
 */
void CDD_UserRxIndication_Can_2( PduIdType RxPduId, const PduInfoType* PduInfoPtr ) {
     aac:	b086      	sub	sp, #24
     aae:	4603      	mov	r3, r0
     ab0:	9100      	str	r1, [sp, #0]
     ab2:	f8ad 3006 	strh.w	r3, [sp, #6]
    //local data.
    static uint8 counter_RXPDU1 = 0;   //Message rx 1 counter.
    uint8 Data[8];  //Data payload received.

    //Obtaining data received.
    for ( uint8 i = 0; i < PduInfoPtr->SduLength; i++ ) {
     ab6:	2300      	movs	r3, #0
     ab8:	f88d 3017 	strb.w	r3, [sp, #23]
     abc:	e010      	b.n	ae0 <CDD_UserRxIndication_Can_2+0x34>
        Data[i] = PduInfoPtr->SduDataPtr[i];
     abe:	9b00      	ldr	r3, [sp, #0]
     ac0:	681a      	ldr	r2, [r3, #0]
     ac2:	f89d 3017 	ldrb.w	r3, [sp, #23]
     ac6:	441a      	add	r2, r3
     ac8:	f89d 3017 	ldrb.w	r3, [sp, #23]
     acc:	7812      	ldrb	r2, [r2, #0]
     ace:	a906      	add	r1, sp, #24
     ad0:	440b      	add	r3, r1
     ad2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for ( uint8 i = 0; i < PduInfoPtr->SduLength; i++ ) {
     ad6:	f89d 3017 	ldrb.w	r3, [sp, #23]
     ada:	3301      	adds	r3, #1
     adc:	f88d 3017 	strb.w	r3, [sp, #23]
     ae0:	f89d 2017 	ldrb.w	r2, [sp, #23]
     ae4:	9b00      	ldr	r3, [sp, #0]
     ae6:	689b      	ldr	r3, [r3, #8]
     ae8:	429a      	cmp	r2, r3
     aea:	d3e8      	bcc.n	abe <CDD_UserRxIndication_Can_2+0x12>
    }

    //Verifying which message was received.
    switch ( RxPduId ) {
     aec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     af0:	2b01      	cmp	r3, #1
     af2:	d106      	bne.n	b02 <CDD_UserRxIndication_Can_2+0x56>
        case 1: //ID 0x400 received
            counter_RXPDU1++;
     af4:	4b06      	ldr	r3, [pc, #24]	; (b10 <CDD_UserRxIndication_Can_2+0x64>)
     af6:	781b      	ldrb	r3, [r3, #0]
     af8:	3301      	adds	r3, #1
     afa:	b2da      	uxtb	r2, r3
     afc:	4b04      	ldr	r3, [pc, #16]	; (b10 <CDD_UserRxIndication_Can_2+0x64>)
     afe:	701a      	strb	r2, [r3, #0]
        break;
     b00:	e000      	b.n	b04 <CDD_UserRxIndication_Can_2+0x58>
        default:
        break;
     b02:	bf00      	nop
    }
    
    CanIf_Can2_bRxFlag = TRUE;   //Message received.
     b04:	4b03      	ldr	r3, [pc, #12]	; (b14 <CDD_UserRxIndication_Can_2+0x68>)
     b06:	2201      	movs	r2, #1
     b08:	701a      	strb	r2, [r3, #0]
}
     b0a:	bf00      	nop
     b0c:	b006      	add	sp, #24
     b0e:	4770      	bx	lr
     b10:	1fff98f3 	.word	0x1fff98f3
     b14:	1fff8b33 	.word	0x1fff8b33

00000b18 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     b18:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     b1a:	2300      	movs	r3, #0
     b1c:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     b1e:	2300      	movs	r3, #0
     b20:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     b22:	2300      	movs	r3, #0
     b24:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     b26:	2300      	movs	r3, #0
     b28:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     b2a:	4b44      	ldr	r3, [pc, #272]	; (c3c <init_data_bss+0x124>)
     b2c:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     b2e:	4b44      	ldr	r3, [pc, #272]	; (c40 <init_data_bss+0x128>)
     b30:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     b32:	9b05      	ldr	r3, [sp, #20]
     b34:	681b      	ldr	r3, [r3, #0]
     b36:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     b38:	9b05      	ldr	r3, [sp, #20]
     b3a:	3304      	adds	r3, #4
     b3c:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     b3e:	9b05      	ldr	r3, [sp, #20]
     b40:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     b42:	2300      	movs	r3, #0
     b44:	9309      	str	r3, [sp, #36]	; 0x24
     b46:	e03d      	b.n	bc4 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     b48:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b4a:	4613      	mov	r3, r2
     b4c:	005b      	lsls	r3, r3, #1
     b4e:	4413      	add	r3, r2
     b50:	009b      	lsls	r3, r3, #2
     b52:	461a      	mov	r2, r3
     b54:	9b03      	ldr	r3, [sp, #12]
     b56:	4413      	add	r3, r2
     b58:	685b      	ldr	r3, [r3, #4]
     b5a:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     b5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b5e:	4613      	mov	r3, r2
     b60:	005b      	lsls	r3, r3, #1
     b62:	4413      	add	r3, r2
     b64:	009b      	lsls	r3, r3, #2
     b66:	461a      	mov	r2, r3
     b68:	9b03      	ldr	r3, [sp, #12]
     b6a:	4413      	add	r3, r2
     b6c:	681b      	ldr	r3, [r3, #0]
     b6e:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     b70:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b72:	4613      	mov	r3, r2
     b74:	005b      	lsls	r3, r3, #1
     b76:	4413      	add	r3, r2
     b78:	009b      	lsls	r3, r3, #2
     b7a:	461a      	mov	r2, r3
     b7c:	9b03      	ldr	r3, [sp, #12]
     b7e:	4413      	add	r3, r2
     b80:	689b      	ldr	r3, [r3, #8]
     b82:	4619      	mov	r1, r3
     b84:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b86:	4613      	mov	r3, r2
     b88:	005b      	lsls	r3, r3, #1
     b8a:	4413      	add	r3, r2
     b8c:	009b      	lsls	r3, r3, #2
     b8e:	461a      	mov	r2, r3
     b90:	9b03      	ldr	r3, [sp, #12]
     b92:	4413      	add	r3, r2
     b94:	685b      	ldr	r3, [r3, #4]
     b96:	1acb      	subs	r3, r1, r3
     b98:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b9a:	2300      	movs	r3, #0
     b9c:	9308      	str	r3, [sp, #32]
     b9e:	e00a      	b.n	bb6 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     ba0:	9a00      	ldr	r2, [sp, #0]
     ba2:	9b08      	ldr	r3, [sp, #32]
     ba4:	441a      	add	r2, r3
     ba6:	9901      	ldr	r1, [sp, #4]
     ba8:	9b08      	ldr	r3, [sp, #32]
     baa:	440b      	add	r3, r1
     bac:	7812      	ldrb	r2, [r2, #0]
     bae:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     bb0:	9b08      	ldr	r3, [sp, #32]
     bb2:	3301      	adds	r3, #1
     bb4:	9308      	str	r3, [sp, #32]
     bb6:	9a08      	ldr	r2, [sp, #32]
     bb8:	9b06      	ldr	r3, [sp, #24]
     bba:	429a      	cmp	r2, r3
     bbc:	d3f0      	bcc.n	ba0 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
     bc0:	3301      	adds	r3, #1
     bc2:	9309      	str	r3, [sp, #36]	; 0x24
     bc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     bc6:	9b07      	ldr	r3, [sp, #28]
     bc8:	429a      	cmp	r2, r3
     bca:	d3bd      	bcc.n	b48 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     bcc:	9b04      	ldr	r3, [sp, #16]
     bce:	681b      	ldr	r3, [r3, #0]
     bd0:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     bd2:	9b04      	ldr	r3, [sp, #16]
     bd4:	3304      	adds	r3, #4
     bd6:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     bd8:	9b04      	ldr	r3, [sp, #16]
     bda:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     bdc:	2300      	movs	r3, #0
     bde:	9309      	str	r3, [sp, #36]	; 0x24
     be0:	e024      	b.n	c2c <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     be4:	00db      	lsls	r3, r3, #3
     be6:	9a02      	ldr	r2, [sp, #8]
     be8:	4413      	add	r3, r2
     bea:	681b      	ldr	r3, [r3, #0]
     bec:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
     bf0:	00db      	lsls	r3, r3, #3
     bf2:	9a02      	ldr	r2, [sp, #8]
     bf4:	4413      	add	r3, r2
     bf6:	685b      	ldr	r3, [r3, #4]
     bf8:	4619      	mov	r1, r3
     bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
     bfc:	00db      	lsls	r3, r3, #3
     bfe:	9a02      	ldr	r2, [sp, #8]
     c00:	4413      	add	r3, r2
     c02:	681b      	ldr	r3, [r3, #0]
     c04:	1acb      	subs	r3, r1, r3
     c06:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     c08:	2300      	movs	r3, #0
     c0a:	9308      	str	r3, [sp, #32]
     c0c:	e007      	b.n	c1e <init_data_bss+0x106>
        {
            ram[j] = 0U;
     c0e:	9a01      	ldr	r2, [sp, #4]
     c10:	9b08      	ldr	r3, [sp, #32]
     c12:	4413      	add	r3, r2
     c14:	2200      	movs	r2, #0
     c16:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     c18:	9b08      	ldr	r3, [sp, #32]
     c1a:	3301      	adds	r3, #1
     c1c:	9308      	str	r3, [sp, #32]
     c1e:	9a08      	ldr	r2, [sp, #32]
     c20:	9b06      	ldr	r3, [sp, #24]
     c22:	429a      	cmp	r2, r3
     c24:	d3f3      	bcc.n	c0e <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
     c28:	3301      	adds	r3, #1
     c2a:	9309      	str	r3, [sp, #36]	; 0x24
     c2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     c2e:	9b07      	ldr	r3, [sp, #28]
     c30:	429a      	cmp	r2, r3
     c32:	d3d6      	bcc.n	be2 <init_data_bss+0xca>
        }
    }
}
     c34:	bf00      	nop
     c36:	bf00      	nop
     c38:	b00a      	add	sp, #40	; 0x28
     c3a:	4770      	bx	lr
     c3c:	000199ec 	.word	0x000199ec
     c40:	00019a08 	.word	0x00019a08

00000c44 <sys_m4_cache_init>:
{
     c44:	b084      	sub	sp, #16
     c46:	4603      	mov	r3, r0
     c48:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     c4c:	2300      	movs	r3, #0
     c4e:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     c52:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c56:	2b00      	cmp	r3, #0
     c58:	d118      	bne.n	c8c <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     c5a:	4b10      	ldr	r3, [pc, #64]	; (c9c <sys_m4_cache_init+0x58>)
     c5c:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     c60:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     c62:	4b0e      	ldr	r3, [pc, #56]	; (c9c <sys_m4_cache_init+0x58>)
     c64:	681b      	ldr	r3, [r3, #0]
     c66:	4a0d      	ldr	r2, [pc, #52]	; (c9c <sys_m4_cache_init+0x58>)
     c68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     c6c:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     c6e:	bf00      	nop
     c70:	4b0a      	ldr	r3, [pc, #40]	; (c9c <sys_m4_cache_init+0x58>)
     c72:	681b      	ldr	r3, [r3, #0]
     c74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     c78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     c7c:	d0f8      	beq.n	c70 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     c7e:	4b07      	ldr	r3, [pc, #28]	; (c9c <sys_m4_cache_init+0x58>)
     c80:	681b      	ldr	r3, [r3, #0]
     c82:	4a06      	ldr	r2, [pc, #24]	; (c9c <sys_m4_cache_init+0x58>)
     c84:	f043 0301 	orr.w	r3, r3, #1
     c88:	6013      	str	r3, [r2, #0]
     c8a:	e002      	b.n	c92 <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     c8c:	2301      	movs	r3, #1
     c8e:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     c92:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     c96:	4618      	mov	r0, r3
     c98:	b004      	add	sp, #16
     c9a:	4770      	bx	lr
     c9c:	e0082000 	.word	0xe0082000

00000ca0 <startup_go_to_user_mode>:
}
     ca0:	bf00      	nop
     ca2:	4770      	bx	lr

00000ca4 <Sys_GetCoreID>:
    return 0U;
     ca4:	2300      	movs	r3, #0
}
     ca6:	4618      	mov	r0, r3
     ca8:	4770      	bx	lr

00000caa <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     caa:	e7fe      	b.n	caa <HardFault_Handler>

00000cac <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     cac:	e7fe      	b.n	cac <MemManage_Handler>

00000cae <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     cae:	e7fe      	b.n	cae <BusFault_Handler>

00000cb0 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     cb0:	e7fe      	b.n	cb0 <UsageFault_Handler>

00000cb2 <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     cb2:	e7fe      	b.n	cb2 <SVC_Handler>

00000cb4 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     cb4:	e7fe      	b.n	cb4 <DebugMon_Handler>

00000cb6 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     cb6:	e7fe      	b.n	cb6 <PendSV_Handler>

00000cb8 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     cb8:	e7fe      	b.n	cb8 <SysTick_Handler>

00000cba <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     cba:	e7fe      	b.n	cba <undefined_handler>

00000cbc <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
     cbc:	b500      	push	{lr}
     cbe:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
     cc0:	4b26      	ldr	r3, [pc, #152]	; (d5c <_DoInit+0xa0>)
     cc2:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
     cc4:	22a8      	movs	r2, #168	; 0xa8
     cc6:	2100      	movs	r1, #0
     cc8:	9800      	ldr	r0, [sp, #0]
     cca:	f000 fd67 	bl	179c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     cce:	9b00      	ldr	r3, [sp, #0]
     cd0:	2203      	movs	r2, #3
     cd2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
     cd4:	9b00      	ldr	r3, [sp, #0]
     cd6:	2203      	movs	r2, #3
     cd8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
     cda:	9b00      	ldr	r3, [sp, #0]
     cdc:	4a20      	ldr	r2, [pc, #128]	; (d60 <_DoInit+0xa4>)
     cde:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
     ce0:	9b00      	ldr	r3, [sp, #0]
     ce2:	4a20      	ldr	r2, [pc, #128]	; (d64 <_DoInit+0xa8>)
     ce4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
     ce6:	9b00      	ldr	r3, [sp, #0]
     ce8:	f44f 6280 	mov.w	r2, #1024	; 0x400
     cec:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
     cee:	9b00      	ldr	r3, [sp, #0]
     cf0:	2200      	movs	r2, #0
     cf2:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
     cf4:	9b00      	ldr	r3, [sp, #0]
     cf6:	2200      	movs	r2, #0
     cf8:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     cfa:	9b00      	ldr	r3, [sp, #0]
     cfc:	2200      	movs	r2, #0
     cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
     d00:	9b00      	ldr	r3, [sp, #0]
     d02:	4a17      	ldr	r2, [pc, #92]	; (d60 <_DoInit+0xa4>)
     d04:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
     d06:	9b00      	ldr	r3, [sp, #0]
     d08:	4a17      	ldr	r2, [pc, #92]	; (d68 <_DoInit+0xac>)
     d0a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
     d0c:	9b00      	ldr	r3, [sp, #0]
     d0e:	2210      	movs	r2, #16
     d10:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
     d12:	9b00      	ldr	r3, [sp, #0]
     d14:	2200      	movs	r2, #0
     d16:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
     d18:	9b00      	ldr	r3, [sp, #0]
     d1a:	2200      	movs	r2, #0
     d1c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     d1e:	9b00      	ldr	r3, [sp, #0]
     d20:	2200      	movs	r2, #0
     d22:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     d24:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     d28:	2300      	movs	r3, #0
     d2a:	9301      	str	r3, [sp, #4]
     d2c:	e00c      	b.n	d48 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
     d2e:	9b01      	ldr	r3, [sp, #4]
     d30:	f1c3 030f 	rsb	r3, r3, #15
     d34:	4a0d      	ldr	r2, [pc, #52]	; (d6c <_DoInit+0xb0>)
     d36:	5cd1      	ldrb	r1, [r2, r3]
     d38:	9a00      	ldr	r2, [sp, #0]
     d3a:	9b01      	ldr	r3, [sp, #4]
     d3c:	4413      	add	r3, r2
     d3e:	460a      	mov	r2, r1
     d40:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     d42:	9b01      	ldr	r3, [sp, #4]
     d44:	3301      	adds	r3, #1
     d46:	9301      	str	r3, [sp, #4]
     d48:	9b01      	ldr	r3, [sp, #4]
     d4a:	2b0f      	cmp	r3, #15
     d4c:	d9ef      	bls.n	d2e <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     d4e:	f3bf 8f5f 	dmb	sy
}
     d52:	bf00      	nop
     d54:	b003      	add	sp, #12
     d56:	f85d fb04 	ldr.w	pc, [sp], #4
     d5a:	bf00      	nop
     d5c:	1fff9910 	.word	0x1fff9910
     d60:	00017e10 	.word	0x00017e10
     d64:	1fff99b8 	.word	0x1fff99b8
     d68:	1fff9db8 	.word	0x1fff9db8
     d6c:	000199c8 	.word	0x000199c8

00000d70 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     d70:	b500      	push	{lr}
     d72:	b08b      	sub	sp, #44	; 0x2c
     d74:	9003      	str	r0, [sp, #12]
     d76:	9102      	str	r1, [sp, #8]
     d78:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
     d7a:	2300      	movs	r3, #0
     d7c:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
     d7e:	9b03      	ldr	r3, [sp, #12]
     d80:	68db      	ldr	r3, [r3, #12]
     d82:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
     d84:	9b03      	ldr	r3, [sp, #12]
     d86:	691b      	ldr	r3, [r3, #16]
     d88:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
     d8a:	9a06      	ldr	r2, [sp, #24]
     d8c:	9b07      	ldr	r3, [sp, #28]
     d8e:	429a      	cmp	r2, r3
     d90:	d905      	bls.n	d9e <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
     d92:	9a06      	ldr	r2, [sp, #24]
     d94:	9b07      	ldr	r3, [sp, #28]
     d96:	1ad3      	subs	r3, r2, r3
     d98:	3b01      	subs	r3, #1
     d9a:	9309      	str	r3, [sp, #36]	; 0x24
     d9c:	e007      	b.n	dae <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
     d9e:	9b03      	ldr	r3, [sp, #12]
     da0:	689a      	ldr	r2, [r3, #8]
     da2:	9906      	ldr	r1, [sp, #24]
     da4:	9b07      	ldr	r3, [sp, #28]
     da6:	1acb      	subs	r3, r1, r3
     da8:	4413      	add	r3, r2
     daa:	3b01      	subs	r3, #1
     dac:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
     dae:	9b03      	ldr	r3, [sp, #12]
     db0:	689a      	ldr	r2, [r3, #8]
     db2:	9b07      	ldr	r3, [sp, #28]
     db4:	1ad3      	subs	r3, r2, r3
     db6:	9a09      	ldr	r2, [sp, #36]	; 0x24
     db8:	4293      	cmp	r3, r2
     dba:	bf28      	it	cs
     dbc:	4613      	movcs	r3, r2
     dbe:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
     dc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
     dc2:	9b01      	ldr	r3, [sp, #4]
     dc4:	4293      	cmp	r3, r2
     dc6:	bf28      	it	cs
     dc8:	4613      	movcs	r3, r2
     dca:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     dcc:	9b03      	ldr	r3, [sp, #12]
     dce:	685a      	ldr	r2, [r3, #4]
     dd0:	9b07      	ldr	r3, [sp, #28]
     dd2:	4413      	add	r3, r2
     dd4:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
     dd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
     dd8:	9902      	ldr	r1, [sp, #8]
     dda:	9805      	ldr	r0, [sp, #20]
     ddc:	f000 fcd0 	bl	1780 <memcpy>
    NumBytesWritten += NumBytesToWrite;
     de0:	9a08      	ldr	r2, [sp, #32]
     de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     de4:	4413      	add	r3, r2
     de6:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
     de8:	9a02      	ldr	r2, [sp, #8]
     dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
     dec:	4413      	add	r3, r2
     dee:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
     df0:	9a01      	ldr	r2, [sp, #4]
     df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     df4:	1ad3      	subs	r3, r2, r3
     df6:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
     df8:	9a07      	ldr	r2, [sp, #28]
     dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
     dfc:	4413      	add	r3, r2
     dfe:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
     e00:	9b03      	ldr	r3, [sp, #12]
     e02:	689b      	ldr	r3, [r3, #8]
     e04:	9a07      	ldr	r2, [sp, #28]
     e06:	429a      	cmp	r2, r3
     e08:	d101      	bne.n	e0e <_WriteBlocking+0x9e>
      WrOff = 0u;
     e0a:	2300      	movs	r3, #0
     e0c:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     e0e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
     e12:	9b03      	ldr	r3, [sp, #12]
     e14:	9a07      	ldr	r2, [sp, #28]
     e16:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
     e18:	9b01      	ldr	r3, [sp, #4]
     e1a:	2b00      	cmp	r3, #0
     e1c:	d1b2      	bne.n	d84 <_WriteBlocking+0x14>
  return NumBytesWritten;
     e1e:	9b08      	ldr	r3, [sp, #32]
}
     e20:	4618      	mov	r0, r3
     e22:	b00b      	add	sp, #44	; 0x2c
     e24:	f85d fb04 	ldr.w	pc, [sp], #4

00000e28 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     e28:	b500      	push	{lr}
     e2a:	b089      	sub	sp, #36	; 0x24
     e2c:	9003      	str	r0, [sp, #12]
     e2e:	9102      	str	r1, [sp, #8]
     e30:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
     e32:	9b03      	ldr	r3, [sp, #12]
     e34:	68db      	ldr	r3, [r3, #12]
     e36:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
     e38:	9b03      	ldr	r3, [sp, #12]
     e3a:	689a      	ldr	r2, [r3, #8]
     e3c:	9b07      	ldr	r3, [sp, #28]
     e3e:	1ad3      	subs	r3, r2, r3
     e40:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
     e42:	9a06      	ldr	r2, [sp, #24]
     e44:	9b01      	ldr	r3, [sp, #4]
     e46:	429a      	cmp	r2, r3
     e48:	d911      	bls.n	e6e <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     e4a:	9b03      	ldr	r3, [sp, #12]
     e4c:	685a      	ldr	r2, [r3, #4]
     e4e:	9b07      	ldr	r3, [sp, #28]
     e50:	4413      	add	r3, r2
     e52:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
     e54:	9a01      	ldr	r2, [sp, #4]
     e56:	9902      	ldr	r1, [sp, #8]
     e58:	9804      	ldr	r0, [sp, #16]
     e5a:	f000 fc91 	bl	1780 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     e5e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
     e62:	9a07      	ldr	r2, [sp, #28]
     e64:	9b01      	ldr	r3, [sp, #4]
     e66:	441a      	add	r2, r3
     e68:	9b03      	ldr	r3, [sp, #12]
     e6a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
     e6c:	e01f      	b.n	eae <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
     e6e:	9b06      	ldr	r3, [sp, #24]
     e70:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     e72:	9b03      	ldr	r3, [sp, #12]
     e74:	685a      	ldr	r2, [r3, #4]
     e76:	9b07      	ldr	r3, [sp, #28]
     e78:	4413      	add	r3, r2
     e7a:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
     e7c:	9a05      	ldr	r2, [sp, #20]
     e7e:	9902      	ldr	r1, [sp, #8]
     e80:	9804      	ldr	r0, [sp, #16]
     e82:	f000 fc7d 	bl	1780 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
     e86:	9a01      	ldr	r2, [sp, #4]
     e88:	9b06      	ldr	r3, [sp, #24]
     e8a:	1ad3      	subs	r3, r2, r3
     e8c:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
     e8e:	9b03      	ldr	r3, [sp, #12]
     e90:	685b      	ldr	r3, [r3, #4]
     e92:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
     e94:	9a02      	ldr	r2, [sp, #8]
     e96:	9b06      	ldr	r3, [sp, #24]
     e98:	4413      	add	r3, r2
     e9a:	9a05      	ldr	r2, [sp, #20]
     e9c:	4619      	mov	r1, r3
     e9e:	9804      	ldr	r0, [sp, #16]
     ea0:	f000 fc6e 	bl	1780 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     ea4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
     ea8:	9b03      	ldr	r3, [sp, #12]
     eaa:	9a05      	ldr	r2, [sp, #20]
     eac:	60da      	str	r2, [r3, #12]
}
     eae:	bf00      	nop
     eb0:	b009      	add	sp, #36	; 0x24
     eb2:	f85d fb04 	ldr.w	pc, [sp], #4

00000eb6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
     eb6:	b086      	sub	sp, #24
     eb8:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
     eba:	9b01      	ldr	r3, [sp, #4]
     ebc:	691b      	ldr	r3, [r3, #16]
     ebe:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
     ec0:	9b01      	ldr	r3, [sp, #4]
     ec2:	68db      	ldr	r3, [r3, #12]
     ec4:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
     ec6:	9a04      	ldr	r2, [sp, #16]
     ec8:	9b03      	ldr	r3, [sp, #12]
     eca:	429a      	cmp	r2, r3
     ecc:	d808      	bhi.n	ee0 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
     ece:	9b01      	ldr	r3, [sp, #4]
     ed0:	689a      	ldr	r2, [r3, #8]
     ed2:	9b03      	ldr	r3, [sp, #12]
     ed4:	1ad2      	subs	r2, r2, r3
     ed6:	9b04      	ldr	r3, [sp, #16]
     ed8:	4413      	add	r3, r2
     eda:	3b01      	subs	r3, #1
     edc:	9305      	str	r3, [sp, #20]
     ede:	e004      	b.n	eea <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
     ee0:	9a04      	ldr	r2, [sp, #16]
     ee2:	9b03      	ldr	r3, [sp, #12]
     ee4:	1ad3      	subs	r3, r2, r3
     ee6:	3b01      	subs	r3, #1
     ee8:	9305      	str	r3, [sp, #20]
  }
  return r;
     eea:	9b05      	ldr	r3, [sp, #20]
}
     eec:	4618      	mov	r0, r3
     eee:	b006      	add	sp, #24
     ef0:	4770      	bx	lr
	...

00000ef4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     ef4:	b500      	push	{lr}
     ef6:	b089      	sub	sp, #36	; 0x24
     ef8:	9003      	str	r0, [sp, #12]
     efa:	9102      	str	r1, [sp, #8]
     efc:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
     efe:	9b02      	ldr	r3, [sp, #8]
     f00:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
     f02:	9b03      	ldr	r3, [sp, #12]
     f04:	1c5a      	adds	r2, r3, #1
     f06:	4613      	mov	r3, r2
     f08:	005b      	lsls	r3, r3, #1
     f0a:	4413      	add	r3, r2
     f0c:	00db      	lsls	r3, r3, #3
     f0e:	4a20      	ldr	r2, [pc, #128]	; (f90 <SEGGER_RTT_WriteNoLock+0x9c>)
     f10:	4413      	add	r3, r2
     f12:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
     f14:	9b05      	ldr	r3, [sp, #20]
     f16:	695b      	ldr	r3, [r3, #20]
     f18:	2b02      	cmp	r3, #2
     f1a:	d029      	beq.n	f70 <SEGGER_RTT_WriteNoLock+0x7c>
     f1c:	2b02      	cmp	r3, #2
     f1e:	d82e      	bhi.n	f7e <SEGGER_RTT_WriteNoLock+0x8a>
     f20:	2b00      	cmp	r3, #0
     f22:	d002      	beq.n	f2a <SEGGER_RTT_WriteNoLock+0x36>
     f24:	2b01      	cmp	r3, #1
     f26:	d013      	beq.n	f50 <SEGGER_RTT_WriteNoLock+0x5c>
     f28:	e029      	b.n	f7e <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
     f2a:	9805      	ldr	r0, [sp, #20]
     f2c:	f7ff ffc3 	bl	eb6 <_GetAvailWriteSpace>
     f30:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
     f32:	9a04      	ldr	r2, [sp, #16]
     f34:	9b01      	ldr	r3, [sp, #4]
     f36:	429a      	cmp	r2, r3
     f38:	d202      	bcs.n	f40 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
     f3a:	2300      	movs	r3, #0
     f3c:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
     f3e:	e021      	b.n	f84 <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
     f40:	9b01      	ldr	r3, [sp, #4]
     f42:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
     f44:	9a01      	ldr	r2, [sp, #4]
     f46:	9906      	ldr	r1, [sp, #24]
     f48:	9805      	ldr	r0, [sp, #20]
     f4a:	f7ff ff6d 	bl	e28 <_WriteNoCheck>
    break;
     f4e:	e019      	b.n	f84 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
     f50:	9805      	ldr	r0, [sp, #20]
     f52:	f7ff ffb0 	bl	eb6 <_GetAvailWriteSpace>
     f56:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
     f58:	9a01      	ldr	r2, [sp, #4]
     f5a:	9b04      	ldr	r3, [sp, #16]
     f5c:	4293      	cmp	r3, r2
     f5e:	bf28      	it	cs
     f60:	4613      	movcs	r3, r2
     f62:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
     f64:	9a07      	ldr	r2, [sp, #28]
     f66:	9906      	ldr	r1, [sp, #24]
     f68:	9805      	ldr	r0, [sp, #20]
     f6a:	f7ff ff5d 	bl	e28 <_WriteNoCheck>
    break;
     f6e:	e009      	b.n	f84 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
     f70:	9a01      	ldr	r2, [sp, #4]
     f72:	9906      	ldr	r1, [sp, #24]
     f74:	9805      	ldr	r0, [sp, #20]
     f76:	f7ff fefb 	bl	d70 <_WriteBlocking>
     f7a:	9007      	str	r0, [sp, #28]
    break;
     f7c:	e002      	b.n	f84 <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
     f7e:	2300      	movs	r3, #0
     f80:	9307      	str	r3, [sp, #28]
    break;
     f82:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
     f84:	9b07      	ldr	r3, [sp, #28]
}
     f86:	4618      	mov	r0, r3
     f88:	b009      	add	sp, #36	; 0x24
     f8a:	f85d fb04 	ldr.w	pc, [sp], #4
     f8e:	bf00      	nop
     f90:	1fff9910 	.word	0x1fff9910

00000f94 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     f94:	b500      	push	{lr}
     f96:	b089      	sub	sp, #36	; 0x24
     f98:	9003      	str	r0, [sp, #12]
     f9a:	9102      	str	r1, [sp, #8]
     f9c:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
     f9e:	4b0f      	ldr	r3, [pc, #60]	; (fdc <SEGGER_RTT_Write+0x48>)
     fa0:	9307      	str	r3, [sp, #28]
     fa2:	9b07      	ldr	r3, [sp, #28]
     fa4:	781b      	ldrb	r3, [r3, #0]
     fa6:	b2db      	uxtb	r3, r3
     fa8:	2b53      	cmp	r3, #83	; 0x53
     faa:	d001      	beq.n	fb0 <SEGGER_RTT_Write+0x1c>
     fac:	f7ff fe86 	bl	cbc <_DoInit>
  SEGGER_RTT_LOCK();
     fb0:	f3ef 8311 	mrs	r3, BASEPRI
     fb4:	f04f 0120 	mov.w	r1, #32
     fb8:	f381 8811 	msr	BASEPRI, r1
     fbc:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
     fbe:	9a01      	ldr	r2, [sp, #4]
     fc0:	9902      	ldr	r1, [sp, #8]
     fc2:	9803      	ldr	r0, [sp, #12]
     fc4:	f7ff ff96 	bl	ef4 <SEGGER_RTT_WriteNoLock>
     fc8:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
     fca:	9b06      	ldr	r3, [sp, #24]
     fcc:	f383 8811 	msr	BASEPRI, r3
  return Status;
     fd0:	9b05      	ldr	r3, [sp, #20]
}
     fd2:	4618      	mov	r0, r3
     fd4:	b009      	add	sp, #36	; 0x24
     fd6:	f85d fb04 	ldr.w	pc, [sp], #4
     fda:	bf00      	nop
     fdc:	1fff9910 	.word	0x1fff9910

00000fe0 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
     fe0:	b508      	push	{r3, lr}
  _DoInit();
     fe2:	f7ff fe6b 	bl	cbc <_DoInit>
}
     fe6:	bf00      	nop
     fe8:	bd08      	pop	{r3, pc}

00000fea <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
     fea:	b500      	push	{lr}
     fec:	b085      	sub	sp, #20
     fee:	9001      	str	r0, [sp, #4]
     ff0:	460b      	mov	r3, r1
     ff2:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
     ff6:	9b01      	ldr	r3, [sp, #4]
     ff8:	689b      	ldr	r3, [r3, #8]
     ffa:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
     ffc:	9b03      	ldr	r3, [sp, #12]
     ffe:	1c5a      	adds	r2, r3, #1
    1000:	9b01      	ldr	r3, [sp, #4]
    1002:	685b      	ldr	r3, [r3, #4]
    1004:	429a      	cmp	r2, r3
    1006:	d80f      	bhi.n	1028 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
    1008:	9b01      	ldr	r3, [sp, #4]
    100a:	681a      	ldr	r2, [r3, #0]
    100c:	9b03      	ldr	r3, [sp, #12]
    100e:	4413      	add	r3, r2
    1010:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1014:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
    1016:	9b03      	ldr	r3, [sp, #12]
    1018:	1c5a      	adds	r2, r3, #1
    101a:	9b01      	ldr	r3, [sp, #4]
    101c:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
    101e:	9b01      	ldr	r3, [sp, #4]
    1020:	68db      	ldr	r3, [r3, #12]
    1022:	1c5a      	adds	r2, r3, #1
    1024:	9b01      	ldr	r3, [sp, #4]
    1026:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
    1028:	9b01      	ldr	r3, [sp, #4]
    102a:	689a      	ldr	r2, [r3, #8]
    102c:	9b01      	ldr	r3, [sp, #4]
    102e:	685b      	ldr	r3, [r3, #4]
    1030:	429a      	cmp	r2, r3
    1032:	d115      	bne.n	1060 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
    1034:	9b01      	ldr	r3, [sp, #4]
    1036:	6918      	ldr	r0, [r3, #16]
    1038:	9b01      	ldr	r3, [sp, #4]
    103a:	6819      	ldr	r1, [r3, #0]
    103c:	9b01      	ldr	r3, [sp, #4]
    103e:	689b      	ldr	r3, [r3, #8]
    1040:	461a      	mov	r2, r3
    1042:	f7ff ffa7 	bl	f94 <SEGGER_RTT_Write>
    1046:	4602      	mov	r2, r0
    1048:	9b01      	ldr	r3, [sp, #4]
    104a:	689b      	ldr	r3, [r3, #8]
    104c:	429a      	cmp	r2, r3
    104e:	d004      	beq.n	105a <_StoreChar+0x70>
      p->ReturnValue = -1;
    1050:	9b01      	ldr	r3, [sp, #4]
    1052:	f04f 32ff 	mov.w	r2, #4294967295
    1056:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
    1058:	e002      	b.n	1060 <_StoreChar+0x76>
      p->Cnt = 0u;
    105a:	9b01      	ldr	r3, [sp, #4]
    105c:	2200      	movs	r2, #0
    105e:	609a      	str	r2, [r3, #8]
}
    1060:	bf00      	nop
    1062:	b005      	add	sp, #20
    1064:	f85d fb04 	ldr.w	pc, [sp], #4

00001068 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1068:	b500      	push	{lr}
    106a:	b08b      	sub	sp, #44	; 0x2c
    106c:	9003      	str	r0, [sp, #12]
    106e:	9102      	str	r1, [sp, #8]
    1070:	9201      	str	r2, [sp, #4]
    1072:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
    1074:	9b02      	ldr	r3, [sp, #8]
    1076:	9308      	str	r3, [sp, #32]
  Digit = 1u;
    1078:	2301      	movs	r3, #1
    107a:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
    107c:	2301      	movs	r3, #1
    107e:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1080:	e007      	b.n	1092 <_PrintUnsigned+0x2a>
    Number = (Number / Base);
    1082:	9a08      	ldr	r2, [sp, #32]
    1084:	9b01      	ldr	r3, [sp, #4]
    1086:	fbb2 f3f3 	udiv	r3, r2, r3
    108a:	9308      	str	r3, [sp, #32]
    Width++;
    108c:	9b07      	ldr	r3, [sp, #28]
    108e:	3301      	adds	r3, #1
    1090:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1092:	9a08      	ldr	r2, [sp, #32]
    1094:	9b01      	ldr	r3, [sp, #4]
    1096:	429a      	cmp	r2, r3
    1098:	d2f3      	bcs.n	1082 <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
    109a:	9a00      	ldr	r2, [sp, #0]
    109c:	9b07      	ldr	r3, [sp, #28]
    109e:	429a      	cmp	r2, r3
    10a0:	d901      	bls.n	10a6 <_PrintUnsigned+0x3e>
    Width = NumDigits;
    10a2:	9b00      	ldr	r3, [sp, #0]
    10a4:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    10a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    10a8:	f003 0301 	and.w	r3, r3, #1
    10ac:	2b00      	cmp	r3, #0
    10ae:	d128      	bne.n	1102 <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    10b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10b2:	2b00      	cmp	r3, #0
    10b4:	d025      	beq.n	1102 <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    10b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    10b8:	f003 0302 	and.w	r3, r3, #2
    10bc:	2b00      	cmp	r3, #0
    10be:	d006      	beq.n	10ce <_PrintUnsigned+0x66>
    10c0:	9b00      	ldr	r3, [sp, #0]
    10c2:	2b00      	cmp	r3, #0
    10c4:	d103      	bne.n	10ce <_PrintUnsigned+0x66>
        c = '0';
    10c6:	2330      	movs	r3, #48	; 0x30
    10c8:	f88d 301b 	strb.w	r3, [sp, #27]
    10cc:	e002      	b.n	10d4 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    10ce:	2320      	movs	r3, #32
    10d0:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    10d4:	e00c      	b.n	10f0 <_PrintUnsigned+0x88>
        FieldWidth--;
    10d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10d8:	3b01      	subs	r3, #1
    10da:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    10dc:	f89d 301b 	ldrb.w	r3, [sp, #27]
    10e0:	4619      	mov	r1, r3
    10e2:	9803      	ldr	r0, [sp, #12]
    10e4:	f7ff ff81 	bl	fea <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    10e8:	9b03      	ldr	r3, [sp, #12]
    10ea:	68db      	ldr	r3, [r3, #12]
    10ec:	2b00      	cmp	r3, #0
    10ee:	db07      	blt.n	1100 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    10f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10f2:	2b00      	cmp	r3, #0
    10f4:	d005      	beq.n	1102 <_PrintUnsigned+0x9a>
    10f6:	9a07      	ldr	r2, [sp, #28]
    10f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10fa:	429a      	cmp	r2, r3
    10fc:	d3eb      	bcc.n	10d6 <_PrintUnsigned+0x6e>
    10fe:	e000      	b.n	1102 <_PrintUnsigned+0x9a>
          break;
    1100:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    1102:	9b03      	ldr	r3, [sp, #12]
    1104:	68db      	ldr	r3, [r3, #12]
    1106:	2b00      	cmp	r3, #0
    1108:	db55      	blt.n	11b6 <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    110a:	9b00      	ldr	r3, [sp, #0]
    110c:	2b01      	cmp	r3, #1
    110e:	d903      	bls.n	1118 <_PrintUnsigned+0xb0>
        NumDigits--;
    1110:	9b00      	ldr	r3, [sp, #0]
    1112:	3b01      	subs	r3, #1
    1114:	9300      	str	r3, [sp, #0]
    1116:	e009      	b.n	112c <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    1118:	9a02      	ldr	r2, [sp, #8]
    111a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    111c:	fbb2 f3f3 	udiv	r3, r2, r3
    1120:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    1122:	9a05      	ldr	r2, [sp, #20]
    1124:	9b01      	ldr	r3, [sp, #4]
    1126:	429a      	cmp	r2, r3
    1128:	d200      	bcs.n	112c <_PrintUnsigned+0xc4>
          break;
    112a:	e005      	b.n	1138 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    112c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    112e:	9a01      	ldr	r2, [sp, #4]
    1130:	fb02 f303 	mul.w	r3, r2, r3
    1134:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1136:	e7e8      	b.n	110a <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    1138:	9a02      	ldr	r2, [sp, #8]
    113a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    113c:	fbb2 f3f3 	udiv	r3, r2, r3
    1140:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    1142:	9b05      	ldr	r3, [sp, #20]
    1144:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1146:	fb02 f303 	mul.w	r3, r2, r3
    114a:	9a02      	ldr	r2, [sp, #8]
    114c:	1ad3      	subs	r3, r2, r3
    114e:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    1150:	4a1b      	ldr	r2, [pc, #108]	; (11c0 <_PrintUnsigned+0x158>)
    1152:	9b05      	ldr	r3, [sp, #20]
    1154:	4413      	add	r3, r2
    1156:	781b      	ldrb	r3, [r3, #0]
    1158:	4619      	mov	r1, r3
    115a:	9803      	ldr	r0, [sp, #12]
    115c:	f7ff ff45 	bl	fea <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    1160:	9b03      	ldr	r3, [sp, #12]
    1162:	68db      	ldr	r3, [r3, #12]
    1164:	2b00      	cmp	r3, #0
    1166:	db08      	blt.n	117a <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    1168:	9a09      	ldr	r2, [sp, #36]	; 0x24
    116a:	9b01      	ldr	r3, [sp, #4]
    116c:	fbb2 f3f3 	udiv	r3, r2, r3
    1170:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    1172:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1174:	2b00      	cmp	r3, #0
    1176:	d1df      	bne.n	1138 <_PrintUnsigned+0xd0>
    1178:	e000      	b.n	117c <_PrintUnsigned+0x114>
        break;
    117a:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    117c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    117e:	f003 0301 	and.w	r3, r3, #1
    1182:	2b00      	cmp	r3, #0
    1184:	d017      	beq.n	11b6 <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    1186:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1188:	2b00      	cmp	r3, #0
    118a:	d014      	beq.n	11b6 <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    118c:	e00a      	b.n	11a4 <_PrintUnsigned+0x13c>
          FieldWidth--;
    118e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1190:	3b01      	subs	r3, #1
    1192:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    1194:	2120      	movs	r1, #32
    1196:	9803      	ldr	r0, [sp, #12]
    1198:	f7ff ff27 	bl	fea <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    119c:	9b03      	ldr	r3, [sp, #12]
    119e:	68db      	ldr	r3, [r3, #12]
    11a0:	2b00      	cmp	r3, #0
    11a2:	db07      	blt.n	11b4 <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    11a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    11a6:	2b00      	cmp	r3, #0
    11a8:	d005      	beq.n	11b6 <_PrintUnsigned+0x14e>
    11aa:	9a07      	ldr	r2, [sp, #28]
    11ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    11ae:	429a      	cmp	r2, r3
    11b0:	d3ed      	bcc.n	118e <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    11b2:	e000      	b.n	11b6 <_PrintUnsigned+0x14e>
            break;
    11b4:	bf00      	nop
}
    11b6:	bf00      	nop
    11b8:	b00b      	add	sp, #44	; 0x2c
    11ba:	f85d fb04 	ldr.w	pc, [sp], #4
    11be:	bf00      	nop
    11c0:	000199dc 	.word	0x000199dc

000011c4 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    11c4:	b500      	push	{lr}
    11c6:	b089      	sub	sp, #36	; 0x24
    11c8:	9005      	str	r0, [sp, #20]
    11ca:	9104      	str	r1, [sp, #16]
    11cc:	9203      	str	r2, [sp, #12]
    11ce:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    11d0:	9b04      	ldr	r3, [sp, #16]
    11d2:	2b00      	cmp	r3, #0
    11d4:	bfb8      	it	lt
    11d6:	425b      	neglt	r3, r3
    11d8:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    11da:	2301      	movs	r3, #1
    11dc:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    11de:	e007      	b.n	11f0 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    11e0:	9b03      	ldr	r3, [sp, #12]
    11e2:	9a06      	ldr	r2, [sp, #24]
    11e4:	fb92 f3f3 	sdiv	r3, r2, r3
    11e8:	9306      	str	r3, [sp, #24]
    Width++;
    11ea:	9b07      	ldr	r3, [sp, #28]
    11ec:	3301      	adds	r3, #1
    11ee:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    11f0:	9b03      	ldr	r3, [sp, #12]
    11f2:	9a06      	ldr	r2, [sp, #24]
    11f4:	429a      	cmp	r2, r3
    11f6:	daf3      	bge.n	11e0 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    11f8:	9a02      	ldr	r2, [sp, #8]
    11fa:	9b07      	ldr	r3, [sp, #28]
    11fc:	429a      	cmp	r2, r3
    11fe:	d901      	bls.n	1204 <_PrintInt+0x40>
    Width = NumDigits;
    1200:	9b02      	ldr	r3, [sp, #8]
    1202:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    1204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1206:	2b00      	cmp	r3, #0
    1208:	d00a      	beq.n	1220 <_PrintInt+0x5c>
    120a:	9b04      	ldr	r3, [sp, #16]
    120c:	2b00      	cmp	r3, #0
    120e:	db04      	blt.n	121a <_PrintInt+0x56>
    1210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1212:	f003 0304 	and.w	r3, r3, #4
    1216:	2b00      	cmp	r3, #0
    1218:	d002      	beq.n	1220 <_PrintInt+0x5c>
    FieldWidth--;
    121a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    121c:	3b01      	subs	r3, #1
    121e:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    1220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1222:	f003 0302 	and.w	r3, r3, #2
    1226:	2b00      	cmp	r3, #0
    1228:	d002      	beq.n	1230 <_PrintInt+0x6c>
    122a:	9b02      	ldr	r3, [sp, #8]
    122c:	2b00      	cmp	r3, #0
    122e:	d01c      	beq.n	126a <_PrintInt+0xa6>
    1230:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1232:	f003 0301 	and.w	r3, r3, #1
    1236:	2b00      	cmp	r3, #0
    1238:	d117      	bne.n	126a <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    123a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    123c:	2b00      	cmp	r3, #0
    123e:	d014      	beq.n	126a <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1240:	e00a      	b.n	1258 <_PrintInt+0x94>
        FieldWidth--;
    1242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1244:	3b01      	subs	r3, #1
    1246:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    1248:	2120      	movs	r1, #32
    124a:	9805      	ldr	r0, [sp, #20]
    124c:	f7ff fecd 	bl	fea <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1250:	9b05      	ldr	r3, [sp, #20]
    1252:	68db      	ldr	r3, [r3, #12]
    1254:	2b00      	cmp	r3, #0
    1256:	db07      	blt.n	1268 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    125a:	2b00      	cmp	r3, #0
    125c:	d005      	beq.n	126a <_PrintInt+0xa6>
    125e:	9a07      	ldr	r2, [sp, #28]
    1260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1262:	429a      	cmp	r2, r3
    1264:	d3ed      	bcc.n	1242 <_PrintInt+0x7e>
    1266:	e000      	b.n	126a <_PrintInt+0xa6>
          break;
    1268:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    126a:	9b05      	ldr	r3, [sp, #20]
    126c:	68db      	ldr	r3, [r3, #12]
    126e:	2b00      	cmp	r3, #0
    1270:	db4a      	blt.n	1308 <__BSS_SRAM_SIZE+0x68>
    if (v < 0) {
    1272:	9b04      	ldr	r3, [sp, #16]
    1274:	2b00      	cmp	r3, #0
    1276:	da07      	bge.n	1288 <_PrintInt+0xc4>
      v = -v;
    1278:	9b04      	ldr	r3, [sp, #16]
    127a:	425b      	negs	r3, r3
    127c:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    127e:	212d      	movs	r1, #45	; 0x2d
    1280:	9805      	ldr	r0, [sp, #20]
    1282:	f7ff feb2 	bl	fea <_StoreChar>
    1286:	e008      	b.n	129a <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    1288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    128a:	f003 0304 	and.w	r3, r3, #4
    128e:	2b00      	cmp	r3, #0
    1290:	d003      	beq.n	129a <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    1292:	212b      	movs	r1, #43	; 0x2b
    1294:	9805      	ldr	r0, [sp, #20]
    1296:	f7ff fea8 	bl	fea <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    129a:	9b05      	ldr	r3, [sp, #20]
    129c:	68db      	ldr	r3, [r3, #12]
    129e:	2b00      	cmp	r3, #0
    12a0:	db32      	blt.n	1308 <__BSS_SRAM_SIZE+0x68>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    12a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    12a4:	f003 0302 	and.w	r3, r3, #2
    12a8:	2b00      	cmp	r3, #0
    12aa:	d01f      	beq.n	12ec <__BSS_SRAM_SIZE+0x4c>
    12ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    12ae:	f003 0301 	and.w	r3, r3, #1
    12b2:	2b00      	cmp	r3, #0
    12b4:	d11a      	bne.n	12ec <__BSS_SRAM_SIZE+0x4c>
    12b6:	9b02      	ldr	r3, [sp, #8]
    12b8:	2b00      	cmp	r3, #0
    12ba:	d117      	bne.n	12ec <__BSS_SRAM_SIZE+0x4c>
        if (FieldWidth != 0u) {
    12bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    12be:	2b00      	cmp	r3, #0
    12c0:	d014      	beq.n	12ec <__BSS_SRAM_SIZE+0x4c>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    12c2:	e00a      	b.n	12da <__BSS_SRAM_SIZE+0x3a>
            FieldWidth--;
    12c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    12c6:	3b01      	subs	r3, #1
    12c8:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    12ca:	2130      	movs	r1, #48	; 0x30
    12cc:	9805      	ldr	r0, [sp, #20]
    12ce:	f7ff fe8c 	bl	fea <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    12d2:	9b05      	ldr	r3, [sp, #20]
    12d4:	68db      	ldr	r3, [r3, #12]
    12d6:	2b00      	cmp	r3, #0
    12d8:	db07      	blt.n	12ea <__BSS_SRAM_SIZE+0x4a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    12da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    12dc:	2b00      	cmp	r3, #0
    12de:	d005      	beq.n	12ec <__BSS_SRAM_SIZE+0x4c>
    12e0:	9a07      	ldr	r2, [sp, #28]
    12e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    12e4:	429a      	cmp	r2, r3
    12e6:	d3ed      	bcc.n	12c4 <__BSS_SRAM_SIZE+0x24>
    12e8:	e000      	b.n	12ec <__BSS_SRAM_SIZE+0x4c>
              break;
    12ea:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    12ec:	9b05      	ldr	r3, [sp, #20]
    12ee:	68db      	ldr	r3, [r3, #12]
    12f0:	2b00      	cmp	r3, #0
    12f2:	db09      	blt.n	1308 <__BSS_SRAM_SIZE+0x68>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    12f4:	9904      	ldr	r1, [sp, #16]
    12f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    12f8:	9301      	str	r3, [sp, #4]
    12fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    12fc:	9300      	str	r3, [sp, #0]
    12fe:	9b02      	ldr	r3, [sp, #8]
    1300:	9a03      	ldr	r2, [sp, #12]
    1302:	9805      	ldr	r0, [sp, #20]
    1304:	f7ff feb0 	bl	1068 <_PrintUnsigned>
      }
    }
  }
}
    1308:	bf00      	nop
    130a:	b009      	add	sp, #36	; 0x24
    130c:	f85d fb04 	ldr.w	pc, [sp], #4

00001310 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    1310:	b500      	push	{lr}
    1312:	b0a3      	sub	sp, #140	; 0x8c
    1314:	9005      	str	r0, [sp, #20]
    1316:	9104      	str	r1, [sp, #16]
    1318:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    131a:	ab06      	add	r3, sp, #24
    131c:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    131e:	2340      	movs	r3, #64	; 0x40
    1320:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    1322:	2300      	movs	r3, #0
    1324:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    1326:	9b05      	ldr	r3, [sp, #20]
    1328:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    132a:	2300      	movs	r3, #0
    132c:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    132e:	9b04      	ldr	r3, [sp, #16]
    1330:	781b      	ldrb	r3, [r3, #0]
    1332:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    1336:	9b04      	ldr	r3, [sp, #16]
    1338:	3301      	adds	r3, #1
    133a:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    133c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1340:	2b00      	cmp	r3, #0
    1342:	f000 819c 	beq.w	167e <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    1346:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    134a:	2b25      	cmp	r3, #37	; 0x25
    134c:	f040 818b 	bne.w	1666 <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    1350:	2300      	movs	r3, #0
    1352:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    1354:	2301      	movs	r3, #1
    1356:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    1358:	9b04      	ldr	r3, [sp, #16]
    135a:	781b      	ldrb	r3, [r3, #0]
    135c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    1360:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1364:	3b23      	subs	r3, #35	; 0x23
    1366:	2b0d      	cmp	r3, #13
    1368:	d83e      	bhi.n	13e8 <SEGGER_RTT_vprintf+0xd8>
    136a:	a201      	add	r2, pc, #4	; (adr r2, 1370 <SEGGER_RTT_vprintf+0x60>)
    136c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1370:	000013d9 	.word	0x000013d9
    1374:	000013e9 	.word	0x000013e9
    1378:	000013e9 	.word	0x000013e9
    137c:	000013e9 	.word	0x000013e9
    1380:	000013e9 	.word	0x000013e9
    1384:	000013e9 	.word	0x000013e9
    1388:	000013e9 	.word	0x000013e9
    138c:	000013e9 	.word	0x000013e9
    1390:	000013c9 	.word	0x000013c9
    1394:	000013e9 	.word	0x000013e9
    1398:	000013a9 	.word	0x000013a9
    139c:	000013e9 	.word	0x000013e9
    13a0:	000013e9 	.word	0x000013e9
    13a4:	000013b9 	.word	0x000013b9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    13a8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    13aa:	f043 0301 	orr.w	r3, r3, #1
    13ae:	931e      	str	r3, [sp, #120]	; 0x78
    13b0:	9b04      	ldr	r3, [sp, #16]
    13b2:	3301      	adds	r3, #1
    13b4:	9304      	str	r3, [sp, #16]
    13b6:	e01a      	b.n	13ee <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    13b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    13ba:	f043 0302 	orr.w	r3, r3, #2
    13be:	931e      	str	r3, [sp, #120]	; 0x78
    13c0:	9b04      	ldr	r3, [sp, #16]
    13c2:	3301      	adds	r3, #1
    13c4:	9304      	str	r3, [sp, #16]
    13c6:	e012      	b.n	13ee <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    13c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    13ca:	f043 0304 	orr.w	r3, r3, #4
    13ce:	931e      	str	r3, [sp, #120]	; 0x78
    13d0:	9b04      	ldr	r3, [sp, #16]
    13d2:	3301      	adds	r3, #1
    13d4:	9304      	str	r3, [sp, #16]
    13d6:	e00a      	b.n	13ee <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    13d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    13da:	f043 0308 	orr.w	r3, r3, #8
    13de:	931e      	str	r3, [sp, #120]	; 0x78
    13e0:	9b04      	ldr	r3, [sp, #16]
    13e2:	3301      	adds	r3, #1
    13e4:	9304      	str	r3, [sp, #16]
    13e6:	e002      	b.n	13ee <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    13e8:	2300      	movs	r3, #0
    13ea:	9320      	str	r3, [sp, #128]	; 0x80
    13ec:	bf00      	nop
        }
      } while (v);
    13ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
    13f0:	2b00      	cmp	r3, #0
    13f2:	d1b1      	bne.n	1358 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    13f4:	2300      	movs	r3, #0
    13f6:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    13f8:	9b04      	ldr	r3, [sp, #16]
    13fa:	781b      	ldrb	r3, [r3, #0]
    13fc:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    1400:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1404:	2b2f      	cmp	r3, #47	; 0x2f
    1406:	d912      	bls.n	142e <SEGGER_RTT_vprintf+0x11e>
    1408:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    140c:	2b39      	cmp	r3, #57	; 0x39
    140e:	d80e      	bhi.n	142e <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    1410:	9b04      	ldr	r3, [sp, #16]
    1412:	3301      	adds	r3, #1
    1414:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    1416:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    1418:	4613      	mov	r3, r2
    141a:	009b      	lsls	r3, r3, #2
    141c:	4413      	add	r3, r2
    141e:	005b      	lsls	r3, r3, #1
    1420:	461a      	mov	r2, r3
    1422:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1426:	4413      	add	r3, r2
    1428:	3b30      	subs	r3, #48	; 0x30
    142a:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    142c:	e7e4      	b.n	13f8 <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    142e:	2300      	movs	r3, #0
    1430:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    1432:	9b04      	ldr	r3, [sp, #16]
    1434:	781b      	ldrb	r3, [r3, #0]
    1436:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    143a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    143e:	2b2e      	cmp	r3, #46	; 0x2e
    1440:	d11d      	bne.n	147e <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    1442:	9b04      	ldr	r3, [sp, #16]
    1444:	3301      	adds	r3, #1
    1446:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    1448:	9b04      	ldr	r3, [sp, #16]
    144a:	781b      	ldrb	r3, [r3, #0]
    144c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    1450:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1454:	2b2f      	cmp	r3, #47	; 0x2f
    1456:	d912      	bls.n	147e <SEGGER_RTT_vprintf+0x16e>
    1458:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    145c:	2b39      	cmp	r3, #57	; 0x39
    145e:	d80e      	bhi.n	147e <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    1460:	9b04      	ldr	r3, [sp, #16]
    1462:	3301      	adds	r3, #1
    1464:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    1466:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    1468:	4613      	mov	r3, r2
    146a:	009b      	lsls	r3, r3, #2
    146c:	4413      	add	r3, r2
    146e:	005b      	lsls	r3, r3, #1
    1470:	461a      	mov	r2, r3
    1472:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1476:	4413      	add	r3, r2
    1478:	3b30      	subs	r3, #48	; 0x30
    147a:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    147c:	e7e4      	b.n	1448 <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    147e:	9b04      	ldr	r3, [sp, #16]
    1480:	781b      	ldrb	r3, [r3, #0]
    1482:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    1486:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    148a:	2b6c      	cmp	r3, #108	; 0x6c
    148c:	d003      	beq.n	1496 <SEGGER_RTT_vprintf+0x186>
    148e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1492:	2b68      	cmp	r3, #104	; 0x68
    1494:	d107      	bne.n	14a6 <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    1496:	9b04      	ldr	r3, [sp, #16]
    1498:	3301      	adds	r3, #1
    149a:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    149c:	9b04      	ldr	r3, [sp, #16]
    149e:	781b      	ldrb	r3, [r3, #0]
    14a0:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    14a4:	e7ef      	b.n	1486 <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    14a6:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    14aa:	2b25      	cmp	r3, #37	; 0x25
    14ac:	f000 80d0 	beq.w	1650 <SEGGER_RTT_vprintf+0x340>
    14b0:	2b25      	cmp	r3, #37	; 0x25
    14b2:	f2c0 80d3 	blt.w	165c <SEGGER_RTT_vprintf+0x34c>
    14b6:	2b78      	cmp	r3, #120	; 0x78
    14b8:	f300 80d0 	bgt.w	165c <SEGGER_RTT_vprintf+0x34c>
    14bc:	2b58      	cmp	r3, #88	; 0x58
    14be:	f2c0 80cd 	blt.w	165c <SEGGER_RTT_vprintf+0x34c>
    14c2:	3b58      	subs	r3, #88	; 0x58
    14c4:	2b20      	cmp	r3, #32
    14c6:	f200 80c9 	bhi.w	165c <SEGGER_RTT_vprintf+0x34c>
    14ca:	a201      	add	r2, pc, #4	; (adr r2, 14d0 <SEGGER_RTT_vprintf+0x1c0>)
    14cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    14d0:	000015c1 	.word	0x000015c1
    14d4:	0000165d 	.word	0x0000165d
    14d8:	0000165d 	.word	0x0000165d
    14dc:	0000165d 	.word	0x0000165d
    14e0:	0000165d 	.word	0x0000165d
    14e4:	0000165d 	.word	0x0000165d
    14e8:	0000165d 	.word	0x0000165d
    14ec:	0000165d 	.word	0x0000165d
    14f0:	0000165d 	.word	0x0000165d
    14f4:	0000165d 	.word	0x0000165d
    14f8:	0000165d 	.word	0x0000165d
    14fc:	00001555 	.word	0x00001555
    1500:	00001579 	.word	0x00001579
    1504:	0000165d 	.word	0x0000165d
    1508:	0000165d 	.word	0x0000165d
    150c:	0000165d 	.word	0x0000165d
    1510:	0000165d 	.word	0x0000165d
    1514:	0000165d 	.word	0x0000165d
    1518:	0000165d 	.word	0x0000165d
    151c:	0000165d 	.word	0x0000165d
    1520:	0000165d 	.word	0x0000165d
    1524:	0000165d 	.word	0x0000165d
    1528:	0000165d 	.word	0x0000165d
    152c:	0000165d 	.word	0x0000165d
    1530:	0000162d 	.word	0x0000162d
    1534:	0000165d 	.word	0x0000165d
    1538:	0000165d 	.word	0x0000165d
    153c:	000015e5 	.word	0x000015e5
    1540:	0000165d 	.word	0x0000165d
    1544:	0000159d 	.word	0x0000159d
    1548:	0000165d 	.word	0x0000165d
    154c:	0000165d 	.word	0x0000165d
    1550:	000015c1 	.word	0x000015c1
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    1554:	9b03      	ldr	r3, [sp, #12]
    1556:	681b      	ldr	r3, [r3, #0]
    1558:	1d19      	adds	r1, r3, #4
    155a:	9a03      	ldr	r2, [sp, #12]
    155c:	6011      	str	r1, [r2, #0]
    155e:	681b      	ldr	r3, [r3, #0]
    1560:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    1562:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1564:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    1568:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    156c:	ab16      	add	r3, sp, #88	; 0x58
    156e:	4611      	mov	r1, r2
    1570:	4618      	mov	r0, r3
    1572:	f7ff fd3a 	bl	fea <_StoreChar>
        break;
    1576:	e072      	b.n	165e <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    1578:	9b03      	ldr	r3, [sp, #12]
    157a:	681b      	ldr	r3, [r3, #0]
    157c:	1d19      	adds	r1, r3, #4
    157e:	9a03      	ldr	r2, [sp, #12]
    1580:	6011      	str	r1, [r2, #0]
    1582:	681b      	ldr	r3, [r3, #0]
    1584:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    1586:	a816      	add	r0, sp, #88	; 0x58
    1588:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    158a:	9301      	str	r3, [sp, #4]
    158c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    158e:	9300      	str	r3, [sp, #0]
    1590:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1592:	220a      	movs	r2, #10
    1594:	9920      	ldr	r1, [sp, #128]	; 0x80
    1596:	f7ff fe15 	bl	11c4 <_PrintInt>
        break;
    159a:	e060      	b.n	165e <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    159c:	9b03      	ldr	r3, [sp, #12]
    159e:	681b      	ldr	r3, [r3, #0]
    15a0:	1d19      	adds	r1, r3, #4
    15a2:	9a03      	ldr	r2, [sp, #12]
    15a4:	6011      	str	r1, [r2, #0]
    15a6:	681b      	ldr	r3, [r3, #0]
    15a8:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    15aa:	9920      	ldr	r1, [sp, #128]	; 0x80
    15ac:	a816      	add	r0, sp, #88	; 0x58
    15ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    15b0:	9301      	str	r3, [sp, #4]
    15b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    15b4:	9300      	str	r3, [sp, #0]
    15b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    15b8:	220a      	movs	r2, #10
    15ba:	f7ff fd55 	bl	1068 <_PrintUnsigned>
        break;
    15be:	e04e      	b.n	165e <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    15c0:	9b03      	ldr	r3, [sp, #12]
    15c2:	681b      	ldr	r3, [r3, #0]
    15c4:	1d19      	adds	r1, r3, #4
    15c6:	9a03      	ldr	r2, [sp, #12]
    15c8:	6011      	str	r1, [r2, #0]
    15ca:	681b      	ldr	r3, [r3, #0]
    15cc:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    15ce:	9920      	ldr	r1, [sp, #128]	; 0x80
    15d0:	a816      	add	r0, sp, #88	; 0x58
    15d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    15d4:	9301      	str	r3, [sp, #4]
    15d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    15d8:	9300      	str	r3, [sp, #0]
    15da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    15dc:	2210      	movs	r2, #16
    15de:	f7ff fd43 	bl	1068 <_PrintUnsigned>
        break;
    15e2:	e03c      	b.n	165e <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    15e4:	9b03      	ldr	r3, [sp, #12]
    15e6:	681b      	ldr	r3, [r3, #0]
    15e8:	1d19      	adds	r1, r3, #4
    15ea:	9a03      	ldr	r2, [sp, #12]
    15ec:	6011      	str	r1, [r2, #0]
    15ee:	681b      	ldr	r3, [r3, #0]
    15f0:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    15f2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    15f4:	2b00      	cmp	r3, #0
    15f6:	d101      	bne.n	15fc <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    15f8:	4b2c      	ldr	r3, [pc, #176]	; (16ac <SEGGER_RTT_vprintf+0x39c>)
    15fa:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    15fc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    15fe:	781b      	ldrb	r3, [r3, #0]
    1600:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    1604:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1606:	3301      	adds	r3, #1
    1608:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    160a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    160e:	2b00      	cmp	r3, #0
    1610:	d00a      	beq.n	1628 <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    1612:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1616:	ab16      	add	r3, sp, #88	; 0x58
    1618:	4611      	mov	r1, r2
    161a:	4618      	mov	r0, r3
    161c:	f7ff fce5 	bl	fea <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    1620:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1622:	2b00      	cmp	r3, #0
    1624:	daea      	bge.n	15fc <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    1626:	e01a      	b.n	165e <SEGGER_RTT_vprintf+0x34e>
              break;
    1628:	bf00      	nop
        break;
    162a:	e018      	b.n	165e <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    162c:	9b03      	ldr	r3, [sp, #12]
    162e:	681b      	ldr	r3, [r3, #0]
    1630:	1d19      	adds	r1, r3, #4
    1632:	9a03      	ldr	r2, [sp, #12]
    1634:	6011      	str	r1, [r2, #0]
    1636:	681b      	ldr	r3, [r3, #0]
    1638:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    163a:	9920      	ldr	r1, [sp, #128]	; 0x80
    163c:	a816      	add	r0, sp, #88	; 0x58
    163e:	2300      	movs	r3, #0
    1640:	9301      	str	r3, [sp, #4]
    1642:	2308      	movs	r3, #8
    1644:	9300      	str	r3, [sp, #0]
    1646:	2308      	movs	r3, #8
    1648:	2210      	movs	r2, #16
    164a:	f7ff fd0d 	bl	1068 <_PrintUnsigned>
        break;
    164e:	e006      	b.n	165e <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    1650:	ab16      	add	r3, sp, #88	; 0x58
    1652:	2125      	movs	r1, #37	; 0x25
    1654:	4618      	mov	r0, r3
    1656:	f7ff fcc8 	bl	fea <_StoreChar>
        break;
    165a:	e000      	b.n	165e <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    165c:	bf00      	nop
      }
      sFormat++;
    165e:	9b04      	ldr	r3, [sp, #16]
    1660:	3301      	adds	r3, #1
    1662:	9304      	str	r3, [sp, #16]
    1664:	e006      	b.n	1674 <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    1666:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    166a:	ab16      	add	r3, sp, #88	; 0x58
    166c:	4611      	mov	r1, r2
    166e:	4618      	mov	r0, r3
    1670:	f7ff fcbb 	bl	fea <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    1674:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1676:	2b00      	cmp	r3, #0
    1678:	f6bf ae59 	bge.w	132e <SEGGER_RTT_vprintf+0x1e>
    167c:	e000      	b.n	1680 <SEGGER_RTT_vprintf+0x370>
      break;
    167e:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    1680:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1682:	2b00      	cmp	r3, #0
    1684:	dd0c      	ble.n	16a0 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    1686:	9b18      	ldr	r3, [sp, #96]	; 0x60
    1688:	2b00      	cmp	r3, #0
    168a:	d005      	beq.n	1698 <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    168c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    168e:	ab06      	add	r3, sp, #24
    1690:	4619      	mov	r1, r3
    1692:	9805      	ldr	r0, [sp, #20]
    1694:	f7ff fc7e 	bl	f94 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    1698:	9b19      	ldr	r3, [sp, #100]	; 0x64
    169a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    169c:	4413      	add	r3, r2
    169e:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    16a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    16a2:	4618      	mov	r0, r3
    16a4:	b023      	add	sp, #140	; 0x8c
    16a6:	f85d fb04 	ldr.w	pc, [sp], #4
    16aa:	bf00      	nop
    16ac:	00017e1c 	.word	0x00017e1c

000016b0 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    16b0:	b40e      	push	{r1, r2, r3}
    16b2:	b500      	push	{lr}
    16b4:	b084      	sub	sp, #16
    16b6:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    16b8:	ab06      	add	r3, sp, #24
    16ba:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    16bc:	ab02      	add	r3, sp, #8
    16be:	461a      	mov	r2, r3
    16c0:	9905      	ldr	r1, [sp, #20]
    16c2:	9801      	ldr	r0, [sp, #4]
    16c4:	f7ff fe24 	bl	1310 <SEGGER_RTT_vprintf>
    16c8:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    16ca:	9b03      	ldr	r3, [sp, #12]
}
    16cc:	4618      	mov	r0, r3
    16ce:	b004      	add	sp, #16
    16d0:	f85d eb04 	ldr.w	lr, [sp], #4
    16d4:	b003      	add	sp, #12
    16d6:	4770      	bx	lr

000016d8 <MCU_clocks>:
 *  -SIRCDIV1_CLK -->8 Mhz
 *  -SIRCDIV2_CLK -->8 Mhz
 *  -SOSCDIV1_CLK  -->Disabled
 *  -SOSCDIV2_CLK  -->Disabled
 */
void MCU_clocks( void ) {
    16d8:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );//Initializing MCU driver
    16da:	4805      	ldr	r0, [pc, #20]	; (16f0 <MCU_clocks+0x18>)
    16dc:	f004 fa38 	bl	5b50 <Mcu_Init>
    Mcu_SetMode( Run_mode );//MCU on run mode.
    16e0:	2000      	movs	r0, #0
    16e2:	f004 fae9 	bl	5cb8 <Mcu_SetMode>
    Mcu_InitClock( Clocks_conf_0 );//Executing clock configurations established in container.
    16e6:	2000      	movs	r0, #0
    16e8:	f004 fab0 	bl	5c4c <Mcu_InitClock>

    //Configuring Pll clock.
    /*while ( Mcu_GetPllStatus() != MCU_PLL_LOCKED );//Waiting until PLL is locked.
    Mcu_DistributePllClock();//Executing pll clock configuration established in container.*/
}
    16ec:	bf00      	nop
    16ee:	bd08      	pop	{r3, pc}
    16f0:	00019240 	.word	0x00019240

000016f4 <EcuM_Init>:
/**
 * @brief This function initialices the microcontroller and the peripherals
 * 
 * 
 */
void EcuM_Init( void ) {   
    16f4:	b508      	push	{r3, lr}
    MCU_clocks();
    16f6:	f7ff ffef 	bl	16d8 <MCU_clocks>
    OsIf_Init( NULL_PTR );  //Init Osif timer.
    16fa:	2000      	movs	r0, #0
    16fc:	f000 fbd1 	bl	1ea2 <OsIf_Init>
    Platform_Init( NULL_PTR );  //Init platform driver and configuration.
    1700:	2000      	movs	r0, #0
    1702:	f000 fa71 	bl	1be8 <Platform_Init>
    Port_Init( &Port_Config );  //Init port driver and configuration.
    1706:	4807      	ldr	r0, [pc, #28]	; (1724 <EcuM_Init+0x30>)
    1708:	f004 feba 	bl	6480 <Port_Init>
    Spi_Init( &Spi_Config );    //Init spi driver and configuration.
    170c:	4806      	ldr	r0, [pc, #24]	; (1728 <EcuM_Init+0x34>)
    170e:	f008 f8b5 	bl	987c <Spi_Init>
    Can_43_FLEXCAN_Init( &Can_43_FLEXCAN_Config );  //Init FlexCan driver
    1712:	4806      	ldr	r0, [pc, #24]	; (172c <EcuM_Init+0x38>)
    1714:	f008 fdbc 	bl	a290 <Can_43_FLEXCAN_Init>
    CanIf_Init( &CanIf_Config );    //Init CanIf driver.
    1718:	4805      	ldr	r0, [pc, #20]	; (1730 <EcuM_Init+0x3c>)
    171a:	f015 fbd9 	bl	16ed0 <CanIf_Init>
}
    171e:	bf00      	nop
    1720:	bd08      	pop	{r3, pc}
    1722:	bf00      	nop
    1724:	000198a8 	.word	0x000198a8
    1728:	000199a8 	.word	0x000199a8
    172c:	00018d04 	.word	0x00018d04
    1730:	00018b8c 	.word	0x00018b8c

00001734 <Delay>:
/**
 * @brief This function is a delay in ms using the osif timer.
 * 
 * @param ms Delay in ms.
 */
void Delay( uint32 ms ) {
    1734:	b500      	push	{lr}
    1736:	b087      	sub	sp, #28
    1738:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
    173a:	9b01      	ldr	r3, [sp, #4]
    173c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1740:	fb02 f303 	mul.w	r3, r2, r3
    1744:	2101      	movs	r1, #1
    1746:	4618      	mov	r0, r3
    1748:	f000 fc00 	bl	1f4c <OsIf_MicrosToTicks>
    174c:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
    174e:	2001      	movs	r0, #1
    1750:	f000 fbb0 	bl	1eb4 <OsIf_GetCounter>
    1754:	4603      	mov	r3, r0
    1756:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
    1758:	2300      	movs	r3, #0
    175a:	9305      	str	r3, [sp, #20]

    do {
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
    175c:	ab03      	add	r3, sp, #12
    175e:	2101      	movs	r1, #1
    1760:	4618      	mov	r0, r3
    1762:	f000 fbc0 	bl	1ee6 <OsIf_GetElapsed>
    1766:	4602      	mov	r2, r0
    1768:	9b05      	ldr	r3, [sp, #20]
    176a:	4413      	add	r3, r2
    176c:	9305      	str	r3, [sp, #20]
    } while( ElapsedTime < Timeout );
    176e:	9a05      	ldr	r2, [sp, #20]
    1770:	9b04      	ldr	r3, [sp, #16]
    1772:	429a      	cmp	r2, r3
    1774:	d3f2      	bcc.n	175c <Delay+0x28>
    1776:	bf00      	nop
    1778:	bf00      	nop
    177a:	b007      	add	sp, #28
    177c:	f85d fb04 	ldr.w	pc, [sp], #4

00001780 <memcpy>:
    1780:	440a      	add	r2, r1
    1782:	4291      	cmp	r1, r2
    1784:	f100 33ff 	add.w	r3, r0, #4294967295
    1788:	d100      	bne.n	178c <memcpy+0xc>
    178a:	4770      	bx	lr
    178c:	b510      	push	{r4, lr}
    178e:	f811 4b01 	ldrb.w	r4, [r1], #1
    1792:	f803 4f01 	strb.w	r4, [r3, #1]!
    1796:	4291      	cmp	r1, r2
    1798:	d1f9      	bne.n	178e <memcpy+0xe>
    179a:	bd10      	pop	{r4, pc}

0000179c <memset>:
    179c:	4402      	add	r2, r0
    179e:	4603      	mov	r3, r0
    17a0:	4293      	cmp	r3, r2
    17a2:	d100      	bne.n	17a6 <memset+0xa>
    17a4:	4770      	bx	lr
    17a6:	f803 1b01 	strb.w	r1, [r3], #1
    17aa:	e7f9      	b.n	17a0 <memset+0x4>

000017ac <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    17ac:	b500      	push	{lr}
    17ae:	b087      	sub	sp, #28
    17b0:	9003      	str	r0, [sp, #12]
    17b2:	9102      	str	r1, [sp, #8]
    17b4:	9201      	str	r2, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    sint32 dev_irqNumber = (sint32)eIrqNumber;
    17b6:	9b03      	ldr	r3, [sp, #12]
    17b8:	9305      	str	r3, [sp, #20]
    DevAssert((sint32)INT_CTRL_IP_IRQ_MIN <= dev_irqNumber);
    17ba:	9b05      	ldr	r3, [sp, #20]
    17bc:	43db      	mvns	r3, r3
    17be:	0fdb      	lsrs	r3, r3, #31
    17c0:	b2db      	uxtb	r3, r3
    17c2:	4618      	mov	r0, r3
    17c4:	f7ff f8c8 	bl	958 <DevAssert>
    DevAssert(dev_irqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    17c8:	9b05      	ldr	r3, [sp, #20]
    17ca:	2b7a      	cmp	r3, #122	; 0x7a
    17cc:	bfd4      	ite	le
    17ce:	2301      	movle	r3, #1
    17d0:	2300      	movgt	r3, #0
    17d2:	b2db      	uxtb	r3, r3
    17d4:	4618      	mov	r0, r3
    17d6:	f7ff f8bf 	bl	958 <DevAssert>
#if (MCAL_PLATFORM_ARM == MCAL_ARM_MARCH)
#if defined(S32K3XX) || defined(SAF85) || defined(S32R41)
    DevAssert(S32_SCB->VTOR >= (uint32)__RAM_INTERRUPT_START);
#else
    DevAssert(S32_SCB->VTOR >= (uint32)__INT_SRAM_START);
    17da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    17de:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    17e2:	4a14      	ldr	r2, [pc, #80]	; (1834 <IntCtrl_Ip_InstallHandlerPrivileged+0x88>)
    17e4:	4293      	cmp	r3, r2
    17e6:	bf2c      	ite	cs
    17e8:	2301      	movcs	r3, #1
    17ea:	2300      	movcc	r3, #0
    17ec:	b2db      	uxtb	r3, r3
    17ee:	4618      	mov	r0, r3
    17f0:	f7ff f8b2 	bl	958 <DevAssert>

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    17f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    17f8:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    17fc:	9304      	str	r3, [sp, #16]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    17fe:	9b01      	ldr	r3, [sp, #4]
    1800:	2b00      	cmp	r3, #0
    1802:	d007      	beq.n	1814 <IntCtrl_Ip_InstallHandlerPrivileged+0x68>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    1804:	9b03      	ldr	r3, [sp, #12]
    1806:	3310      	adds	r3, #16
    1808:	009b      	lsls	r3, r3, #2
    180a:	9a04      	ldr	r2, [sp, #16]
    180c:	4413      	add	r3, r2
    180e:	681a      	ldr	r2, [r3, #0]
    1810:	9b01      	ldr	r3, [sp, #4]
    1812:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    1814:	9b03      	ldr	r3, [sp, #12]
    1816:	3310      	adds	r3, #16
    1818:	009b      	lsls	r3, r3, #2
    181a:	9a04      	ldr	r2, [sp, #16]
    181c:	4413      	add	r3, r2
    181e:	9a02      	ldr	r2, [sp, #8]
    1820:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    1822:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    1826:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    182a:	bf00      	nop
    182c:	b007      	add	sp, #28
    182e:	f85d fb04 	ldr.w	pc, [sp], #4
    1832:	bf00      	nop
    1834:	1fff8000 	.word	0x1fff8000

00001838 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    1838:	b500      	push	{lr}
    183a:	b083      	sub	sp, #12
    183c:	9001      	str	r0, [sp, #4]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    DevAssert(0 <= (sint32)eIrqNumber);
    183e:	9b01      	ldr	r3, [sp, #4]
    1840:	43db      	mvns	r3, r3
    1842:	0fdb      	lsrs	r3, r3, #31
    1844:	b2db      	uxtb	r3, r3
    1846:	4618      	mov	r0, r3
    1848:	f7ff f886 	bl	958 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    184c:	9b01      	ldr	r3, [sp, #4]
    184e:	2b7a      	cmp	r3, #122	; 0x7a
    1850:	bfd4      	ite	le
    1852:	2301      	movle	r3, #1
    1854:	2300      	movgt	r3, #0
    1856:	b2db      	uxtb	r3, r3
    1858:	4618      	mov	r0, r3
    185a:	f7ff f87d 	bl	958 <DevAssert>
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    185e:	9b01      	ldr	r3, [sp, #4]
    1860:	f003 021f 	and.w	r2, r3, #31
    1864:	4905      	ldr	r1, [pc, #20]	; (187c <IntCtrl_Ip_EnableIrqPrivileged+0x44>)
    1866:	9b01      	ldr	r3, [sp, #4]
    1868:	095b      	lsrs	r3, r3, #5
    186a:	2001      	movs	r0, #1
    186c:	fa00 f202 	lsl.w	r2, r0, r2
    1870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    1874:	bf00      	nop
    1876:	b003      	add	sp, #12
    1878:	f85d fb04 	ldr.w	pc, [sp], #4
    187c:	e000e100 	.word	0xe000e100

00001880 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    1880:	b500      	push	{lr}
    1882:	b083      	sub	sp, #12
    1884:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    DevAssert(0 <= (sint32)eIrqNumber);
    1886:	9b01      	ldr	r3, [sp, #4]
    1888:	43db      	mvns	r3, r3
    188a:	0fdb      	lsrs	r3, r3, #31
    188c:	b2db      	uxtb	r3, r3
    188e:	4618      	mov	r0, r3
    1890:	f7ff f862 	bl	958 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    1894:	9b01      	ldr	r3, [sp, #4]
    1896:	2b7a      	cmp	r3, #122	; 0x7a
    1898:	bfd4      	ite	le
    189a:	2301      	movle	r3, #1
    189c:	2300      	movgt	r3, #0
    189e:	b2db      	uxtb	r3, r3
    18a0:	4618      	mov	r0, r3
    18a2:	f7ff f859 	bl	958 <DevAssert>
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    18a6:	9b01      	ldr	r3, [sp, #4]
    18a8:	f003 021f 	and.w	r2, r3, #31
    18ac:	4906      	ldr	r1, [pc, #24]	; (18c8 <IntCtrl_Ip_DisableIrqPrivileged+0x48>)
    18ae:	9b01      	ldr	r3, [sp, #4]
    18b0:	095b      	lsrs	r3, r3, #5
    18b2:	2001      	movs	r0, #1
    18b4:	fa00 f202 	lsl.w	r2, r0, r2
    18b8:	3320      	adds	r3, #32
    18ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    18be:	bf00      	nop
    18c0:	b003      	add	sp, #12
    18c2:	f85d fb04 	ldr.w	pc, [sp], #4
    18c6:	bf00      	nop
    18c8:	e000e100 	.word	0xe000e100

000018cc <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    18cc:	b500      	push	{lr}
    18ce:	b085      	sub	sp, #20
    18d0:	9001      	str	r0, [sp, #4]
    18d2:	460b      	mov	r3, r1
    18d4:	f88d 3003 	strb.w	r3, [sp, #3]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)

    /* Check IRQ number and priority - dev_irqNumber is used to avoid compiler warning */
    DevAssert((sint32)INT_CTRL_IP_IRQ_MIN <= (sint32)eIrqNumber);
    18d8:	9b01      	ldr	r3, [sp, #4]
    18da:	43db      	mvns	r3, r3
    18dc:	0fdb      	lsrs	r3, r3, #31
    18de:	b2db      	uxtb	r3, r3
    18e0:	4618      	mov	r0, r3
    18e2:	f7ff f839 	bl	958 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    18e6:	9b01      	ldr	r3, [sp, #4]
    18e8:	2b7a      	cmp	r3, #122	; 0x7a
    18ea:	bfd4      	ite	le
    18ec:	2301      	movle	r3, #1
    18ee:	2300      	movgt	r3, #0
    18f0:	b2db      	uxtb	r3, r3
    18f2:	4618      	mov	r0, r3
    18f4:	f7ff f830 	bl	958 <DevAssert>
#if (INT_CTRL_IP_CORTEXM == STD_ON)
    DevAssert(u8Priority < (uint8)(1U << INT_CTRL_IP_NVIC_PRIO_BITS));
    18f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    18fc:	2b0f      	cmp	r3, #15
    18fe:	bf94      	ite	ls
    1900:	2301      	movls	r3, #1
    1902:	2300      	movhi	r3, #0
    1904:	b2db      	uxtb	r3, r3
    1906:	4618      	mov	r0, r3
    1908:	f7ff f826 	bl	958 <DevAssert>
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    190c:	2304      	movs	r3, #4
    190e:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    1912:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1916:	f89d 300f 	ldrb.w	r3, [sp, #15]
    191a:	fa02 f103 	lsl.w	r1, r2, r3
    191e:	4a05      	ldr	r2, [pc, #20]	; (1934 <IntCtrl_Ip_SetPriorityPrivileged+0x68>)
    1920:	9b01      	ldr	r3, [sp, #4]
    1922:	b2c9      	uxtb	r1, r1
    1924:	4413      	add	r3, r2
    1926:	460a      	mov	r2, r1
    1928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    192c:	bf00      	nop
    192e:	b005      	add	sp, #20
    1930:	f85d fb04 	ldr.w	pc, [sp], #4
    1934:	e000e100 	.word	0xe000e100

00001938 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    1938:	b500      	push	{lr}
    193a:	b085      	sub	sp, #20
    193c:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)

    /* Check IRQ number */
    DevAssert(INT_CTRL_IP_IRQ_MIN <= eIrqNumber);
    193e:	9b01      	ldr	r3, [sp, #4]
    1940:	43db      	mvns	r3, r3
    1942:	0fdb      	lsrs	r3, r3, #31
    1944:	b2db      	uxtb	r3, r3
    1946:	4618      	mov	r0, r3
    1948:	f7ff f806 	bl	958 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    194c:	9b01      	ldr	r3, [sp, #4]
    194e:	2b7a      	cmp	r3, #122	; 0x7a
    1950:	bfd4      	ite	le
    1952:	2301      	movle	r3, #1
    1954:	2300      	movgt	r3, #0
    1956:	b2db      	uxtb	r3, r3
    1958:	4618      	mov	r0, r3
    195a:	f7fe fffd 	bl	958 <DevAssert>

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    195e:	2304      	movs	r3, #4
    1960:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    1964:	4a09      	ldr	r2, [pc, #36]	; (198c <IntCtrl_Ip_GetPriorityPrivileged+0x54>)
    1966:	9b01      	ldr	r3, [sp, #4]
    1968:	4413      	add	r3, r2
    196a:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    196e:	b2db      	uxtb	r3, r3
    1970:	461a      	mov	r2, r3
    1972:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1976:	fa42 f303 	asr.w	r3, r2, r3
    197a:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    197e:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    1982:	4618      	mov	r0, r3
    1984:	b005      	add	sp, #20
    1986:	f85d fb04 	ldr.w	pc, [sp], #4
    198a:	bf00      	nop
    198c:	e000e100 	.word	0xe000e100

00001990 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    1990:	b500      	push	{lr}
    1992:	b083      	sub	sp, #12
    1994:	9001      	str	r0, [sp, #4]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number */
    DevAssert(0 <= (sint32)eIrqNumber);
    1996:	9b01      	ldr	r3, [sp, #4]
    1998:	43db      	mvns	r3, r3
    199a:	0fdb      	lsrs	r3, r3, #31
    199c:	b2db      	uxtb	r3, r3
    199e:	4618      	mov	r0, r3
    19a0:	f7fe ffda 	bl	958 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    19a4:	9b01      	ldr	r3, [sp, #4]
    19a6:	2b7a      	cmp	r3, #122	; 0x7a
    19a8:	bfd4      	ite	le
    19aa:	2301      	movle	r3, #1
    19ac:	2300      	movgt	r3, #0
    19ae:	b2db      	uxtb	r3, r3
    19b0:	4618      	mov	r0, r3
    19b2:	f7fe ffd1 	bl	958 <DevAssert>
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    19b6:	9b01      	ldr	r3, [sp, #4]
    19b8:	f003 021f 	and.w	r2, r3, #31
    19bc:	4906      	ldr	r1, [pc, #24]	; (19d8 <IntCtrl_Ip_ClearPendingPrivileged+0x48>)
    19be:	9b01      	ldr	r3, [sp, #4]
    19c0:	095b      	lsrs	r3, r3, #5
    19c2:	2001      	movs	r0, #1
    19c4:	fa00 f202 	lsl.w	r2, r0, r2
    19c8:	3360      	adds	r3, #96	; 0x60
    19ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    19ce:	bf00      	nop
    19d0:	b003      	add	sp, #12
    19d2:	f85d fb04 	ldr.w	pc, [sp], #4
    19d6:	bf00      	nop
    19d8:	e000e100 	.word	0xe000e100

000019dc <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    19dc:	b500      	push	{lr}
    19de:	b085      	sub	sp, #20
    19e0:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_ENABLE_VTOR_CONFIG == STD_ON)
    S32_SCB->VTOR = pIntCtrlCtrlConfig->u32VectorTableAddress;
#endif

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    19e2:	9b01      	ldr	r3, [sp, #4]
    19e4:	2b00      	cmp	r3, #0
    19e6:	bf14      	ite	ne
    19e8:	2301      	movne	r3, #1
    19ea:	2300      	moveq	r3, #0
    19ec:	b2db      	uxtb	r3, r3
    19ee:	4618      	mov	r0, r3
    19f0:	f7fe ffb2 	bl	958 <DevAssert>
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
    19f4:	9b01      	ldr	r3, [sp, #4]
    19f6:	681b      	ldr	r3, [r3, #0]
    19f8:	2b59      	cmp	r3, #89	; 0x59
    19fa:	bf94      	ite	ls
    19fc:	2301      	movls	r3, #1
    19fe:	2300      	movhi	r3, #0
    1a00:	b2db      	uxtb	r3, r3
    1a02:	4618      	mov	r0, r3
    1a04:	f7fe ffa8 	bl	958 <DevAssert>
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1a08:	2300      	movs	r3, #0
    1a0a:	9303      	str	r3, [sp, #12]
    1a0c:	e05d      	b.n	1aca <IntCtrl_Ip_Init+0xee>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1a0e:	9b01      	ldr	r3, [sp, #4]
    1a10:	6859      	ldr	r1, [r3, #4]
    1a12:	9a03      	ldr	r2, [sp, #12]
    1a14:	4613      	mov	r3, r2
    1a16:	005b      	lsls	r3, r3, #1
    1a18:	4413      	add	r3, r2
    1a1a:	009b      	lsls	r3, r3, #2
    1a1c:	440b      	add	r3, r1
    1a1e:	681b      	ldr	r3, [r3, #0]
    1a20:	4618      	mov	r0, r3
    1a22:	f000 f899 	bl	1b58 <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a26:	9b01      	ldr	r3, [sp, #4]
    1a28:	6859      	ldr	r1, [r3, #4]
    1a2a:	9a03      	ldr	r2, [sp, #12]
    1a2c:	4613      	mov	r3, r2
    1a2e:	005b      	lsls	r3, r3, #1
    1a30:	4413      	add	r3, r2
    1a32:	009b      	lsls	r3, r3, #2
    1a34:	440b      	add	r3, r1
    1a36:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1a38:	9b01      	ldr	r3, [sp, #4]
    1a3a:	6859      	ldr	r1, [r3, #4]
    1a3c:	9a03      	ldr	r2, [sp, #12]
    1a3e:	4613      	mov	r3, r2
    1a40:	005b      	lsls	r3, r3, #1
    1a42:	4413      	add	r3, r2
    1a44:	009b      	lsls	r3, r3, #2
    1a46:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a48:	795b      	ldrb	r3, [r3, #5]
    1a4a:	4619      	mov	r1, r3
    1a4c:	f000 f869 	bl	1b22 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a50:	9b01      	ldr	r3, [sp, #4]
    1a52:	6859      	ldr	r1, [r3, #4]
    1a54:	9a03      	ldr	r2, [sp, #12]
    1a56:	4613      	mov	r3, r2
    1a58:	005b      	lsls	r3, r3, #1
    1a5a:	4413      	add	r3, r2
    1a5c:	009b      	lsls	r3, r3, #2
    1a5e:	440b      	add	r3, r1
    1a60:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1a62:	9b01      	ldr	r3, [sp, #4]
    1a64:	6859      	ldr	r1, [r3, #4]
    1a66:	9a03      	ldr	r2, [sp, #12]
    1a68:	4613      	mov	r3, r2
    1a6a:	005b      	lsls	r3, r3, #1
    1a6c:	4413      	add	r3, r2
    1a6e:	009b      	lsls	r3, r3, #2
    1a70:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a72:	689b      	ldr	r3, [r3, #8]
    1a74:	2200      	movs	r2, #0
    1a76:	4619      	mov	r1, r3
    1a78:	f000 f831 	bl	1ade <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1a7c:	9b01      	ldr	r3, [sp, #4]
    1a7e:	6859      	ldr	r1, [r3, #4]
    1a80:	9a03      	ldr	r2, [sp, #12]
    1a82:	4613      	mov	r3, r2
    1a84:	005b      	lsls	r3, r3, #1
    1a86:	4413      	add	r3, r2
    1a88:	009b      	lsls	r3, r3, #2
    1a8a:	440b      	add	r3, r1
    1a8c:	791b      	ldrb	r3, [r3, #4]
    1a8e:	2b00      	cmp	r3, #0
    1a90:	d00c      	beq.n	1aac <IntCtrl_Ip_Init+0xd0>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1a92:	9b01      	ldr	r3, [sp, #4]
    1a94:	6859      	ldr	r1, [r3, #4]
    1a96:	9a03      	ldr	r2, [sp, #12]
    1a98:	4613      	mov	r3, r2
    1a9a:	005b      	lsls	r3, r3, #1
    1a9c:	4413      	add	r3, r2
    1a9e:	009b      	lsls	r3, r3, #2
    1aa0:	440b      	add	r3, r1
    1aa2:	681b      	ldr	r3, [r3, #0]
    1aa4:	4618      	mov	r0, r3
    1aa6:	f000 f828 	bl	1afa <IntCtrl_Ip_EnableIrq>
    1aaa:	e00b      	b.n	1ac4 <IntCtrl_Ip_Init+0xe8>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1aac:	9b01      	ldr	r3, [sp, #4]
    1aae:	6859      	ldr	r1, [r3, #4]
    1ab0:	9a03      	ldr	r2, [sp, #12]
    1ab2:	4613      	mov	r3, r2
    1ab4:	005b      	lsls	r3, r3, #1
    1ab6:	4413      	add	r3, r2
    1ab8:	009b      	lsls	r3, r3, #2
    1aba:	440b      	add	r3, r1
    1abc:	681b      	ldr	r3, [r3, #0]
    1abe:	4618      	mov	r0, r3
    1ac0:	f000 f825 	bl	1b0e <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1ac4:	9b03      	ldr	r3, [sp, #12]
    1ac6:	3301      	adds	r3, #1
    1ac8:	9303      	str	r3, [sp, #12]
    1aca:	9b01      	ldr	r3, [sp, #4]
    1acc:	681b      	ldr	r3, [r3, #0]
    1ace:	9a03      	ldr	r2, [sp, #12]
    1ad0:	429a      	cmp	r2, r3
    1ad2:	d39c      	bcc.n	1a0e <IntCtrl_Ip_Init+0x32>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    1ad4:	2300      	movs	r3, #0
}
    1ad6:	4618      	mov	r0, r3
    1ad8:	b005      	add	sp, #20
    1ada:	f85d fb04 	ldr.w	pc, [sp], #4

00001ade <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1ade:	b500      	push	{lr}
    1ae0:	b085      	sub	sp, #20
    1ae2:	9003      	str	r0, [sp, #12]
    1ae4:	9102      	str	r1, [sp, #8]
    1ae6:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    1ae8:	9a01      	ldr	r2, [sp, #4]
    1aea:	9902      	ldr	r1, [sp, #8]
    1aec:	9803      	ldr	r0, [sp, #12]
    1aee:	f7ff fe5d 	bl	17ac <IntCtrl_Ip_InstallHandlerPrivileged>
}
    1af2:	bf00      	nop
    1af4:	b005      	add	sp, #20
    1af6:	f85d fb04 	ldr.w	pc, [sp], #4

00001afa <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    1afa:	b500      	push	{lr}
    1afc:	b083      	sub	sp, #12
    1afe:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    1b00:	9801      	ldr	r0, [sp, #4]
    1b02:	f7ff fe99 	bl	1838 <IntCtrl_Ip_EnableIrqPrivileged>
}
    1b06:	bf00      	nop
    1b08:	b003      	add	sp, #12
    1b0a:	f85d fb04 	ldr.w	pc, [sp], #4

00001b0e <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    1b0e:	b500      	push	{lr}
    1b10:	b083      	sub	sp, #12
    1b12:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    1b14:	9801      	ldr	r0, [sp, #4]
    1b16:	f7ff feb3 	bl	1880 <IntCtrl_Ip_DisableIrqPrivileged>
}
    1b1a:	bf00      	nop
    1b1c:	b003      	add	sp, #12
    1b1e:	f85d fb04 	ldr.w	pc, [sp], #4

00001b22 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1b22:	b500      	push	{lr}
    1b24:	b083      	sub	sp, #12
    1b26:	9001      	str	r0, [sp, #4]
    1b28:	460b      	mov	r3, r1
    1b2a:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    1b2e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1b32:	4619      	mov	r1, r3
    1b34:	9801      	ldr	r0, [sp, #4]
    1b36:	f7ff fec9 	bl	18cc <IntCtrl_Ip_SetPriorityPrivileged>
}
    1b3a:	bf00      	nop
    1b3c:	b003      	add	sp, #12
    1b3e:	f85d fb04 	ldr.w	pc, [sp], #4

00001b42 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    1b42:	b500      	push	{lr}
    1b44:	b083      	sub	sp, #12
    1b46:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    1b48:	9801      	ldr	r0, [sp, #4]
    1b4a:	f7ff fef5 	bl	1938 <IntCtrl_Ip_GetPriorityPrivileged>
    1b4e:	4603      	mov	r3, r0
}
    1b50:	4618      	mov	r0, r3
    1b52:	b003      	add	sp, #12
    1b54:	f85d fb04 	ldr.w	pc, [sp], #4

00001b58 <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    1b58:	b500      	push	{lr}
    1b5a:	b083      	sub	sp, #12
    1b5c:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    1b5e:	9801      	ldr	r0, [sp, #4]
    1b60:	f7ff ff16 	bl	1990 <IntCtrl_Ip_ClearPendingPrivileged>
}
    1b64:	bf00      	nop
    1b66:	b003      	add	sp, #12
    1b68:	f85d fb04 	ldr.w	pc, [sp], #4

00001b6c <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1b6c:	b500      	push	{lr}
    1b6e:	b083      	sub	sp, #12
    1b70:	9001      	str	r0, [sp, #4]
    1b72:	460b      	mov	r3, r1
    1b74:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    1b78:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1b7c:	2b00      	cmp	r3, #0
    1b7e:	d003      	beq.n	1b88 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    1b80:	9801      	ldr	r0, [sp, #4]
    1b82:	f7ff ffba 	bl	1afa <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    1b86:	e002      	b.n	1b8e <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    1b88:	9801      	ldr	r0, [sp, #4]
    1b8a:	f7ff ffc0 	bl	1b0e <IntCtrl_Ip_DisableIrq>
}
    1b8e:	bf00      	nop
    1b90:	b003      	add	sp, #12
    1b92:	f85d fb04 	ldr.w	pc, [sp], #4

00001b96 <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1b96:	b500      	push	{lr}
    1b98:	b083      	sub	sp, #12
    1b9a:	9001      	str	r0, [sp, #4]
    1b9c:	460b      	mov	r3, r1
    1b9e:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    1ba2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1ba6:	4619      	mov	r1, r3
    1ba8:	9801      	ldr	r0, [sp, #4]
    1baa:	f7ff ffba 	bl	1b22 <IntCtrl_Ip_SetPriority>
}
    1bae:	bf00      	nop
    1bb0:	b003      	add	sp, #12
    1bb2:	f85d fb04 	ldr.w	pc, [sp], #4

00001bb6 <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    1bb6:	b500      	push	{lr}
    1bb8:	b083      	sub	sp, #12
    1bba:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    1bbc:	9801      	ldr	r0, [sp, #4]
    1bbe:	f7ff ffc0 	bl	1b42 <IntCtrl_Ip_GetPriority>
    1bc2:	4603      	mov	r3, r0
}
    1bc4:	4618      	mov	r0, r3
    1bc6:	b003      	add	sp, #12
    1bc8:	f85d fb04 	ldr.w	pc, [sp], #4

00001bcc <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1bcc:	b500      	push	{lr}
    1bce:	b085      	sub	sp, #20
    1bd0:	9003      	str	r0, [sp, #12]
    1bd2:	9102      	str	r1, [sp, #8]
    1bd4:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1bd6:	9a01      	ldr	r2, [sp, #4]
    1bd8:	9902      	ldr	r1, [sp, #8]
    1bda:	9803      	ldr	r0, [sp, #12]
    1bdc:	f7ff ff7f 	bl	1ade <IntCtrl_Ip_InstallHandler>
}
    1be0:	bf00      	nop
    1be2:	b005      	add	sp, #20
    1be4:	f85d fb04 	ldr.w	pc, [sp], #4

00001be8 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    1be8:	b500      	push	{lr}
    1bea:	b085      	sub	sp, #20
    1bec:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    1bee:	2300      	movs	r3, #0
    1bf0:	f88d 300f 	strb.w	r3, [sp, #15]
    (void)pConfig;
#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (NULL_PTR != pConfig)
    1bf4:	9b01      	ldr	r3, [sp, #4]
    1bf6:	2b00      	cmp	r3, #0
    1bf8:	d006      	beq.n	1c08 <Platform_Init+0x20>
    {
        (void)Det_ReportError((uint16)CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_INIT_ID, PLATFORM_E_PARAM_POINTER);
    1bfa:	2301      	movs	r3, #1
    1bfc:	2220      	movs	r2, #32
    1bfe:	2100      	movs	r1, #0
    1c00:	20ff      	movs	r0, #255	; 0xff
    1c02:	f015 f88b 	bl	16d1c <Det_ReportError>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    1c06:	e008      	b.n	1c1a <Platform_Init+0x32>
            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    1c08:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1c0c:	4a05      	ldr	r2, [pc, #20]	; (1c24 <Platform_Init+0x3c>)
    1c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1c12:	681b      	ldr	r3, [r3, #0]
    1c14:	4618      	mov	r0, r3
    1c16:	f000 f917 	bl	1e48 <Platform_Ipw_Init>
}
    1c1a:	bf00      	nop
    1c1c:	b005      	add	sp, #20
    1c1e:	f85d fb04 	ldr.w	pc, [sp], #4
    1c22:	bf00      	nop
    1c24:	0001926c 	.word	0x0001926c

00001c28 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1c28:	b500      	push	{lr}
    1c2a:	b085      	sub	sp, #20
    1c2c:	9001      	str	r0, [sp, #4]
    1c2e:	460b      	mov	r3, r1
    1c30:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1c34:	2300      	movs	r3, #0
    1c36:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    1c3a:	9b01      	ldr	r3, [sp, #4]
    1c3c:	2b7a      	cmp	r3, #122	; 0x7a
    1c3e:	dc02      	bgt.n	1c46 <Platform_SetIrq+0x1e>
    1c40:	9b01      	ldr	r3, [sp, #4]
    1c42:	2b00      	cmp	r3, #0
    1c44:	da09      	bge.n	1c5a <Platform_SetIrq+0x32>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_SET_IRQ_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    1c46:	2302      	movs	r3, #2
    1c48:	2221      	movs	r2, #33	; 0x21
    1c4a:	2100      	movs	r1, #0
    1c4c:	20ff      	movs	r0, #255	; 0xff
    1c4e:	f015 f865 	bl	16d1c <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1c52:	2301      	movs	r3, #1
    1c54:	f88d 300f 	strb.w	r3, [sp, #15]
    1c58:	e005      	b.n	1c66 <Platform_SetIrq+0x3e>
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    1c5a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1c5e:	4619      	mov	r1, r3
    1c60:	9801      	ldr	r0, [sp, #4]
    1c62:	f7ff ff83 	bl	1b6c <Platform_Ipw_SetIrq>
    }
    return RetValue;
    1c66:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1c6a:	4618      	mov	r0, r3
    1c6c:	b005      	add	sp, #20
    1c6e:	f85d fb04 	ldr.w	pc, [sp], #4

00001c72 <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1c72:	b500      	push	{lr}
    1c74:	b085      	sub	sp, #20
    1c76:	9001      	str	r0, [sp, #4]
    1c78:	460b      	mov	r3, r1
    1c7a:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1c7e:	2300      	movs	r3, #0
    1c80:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
#if (INT_CTRL_IP_CORTEXM == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    1c84:	9b01      	ldr	r3, [sp, #4]
    1c86:	2b7a      	cmp	r3, #122	; 0x7a
    1c88:	dc06      	bgt.n	1c98 <Platform_SetIrqPriority+0x26>
    1c8a:	9b01      	ldr	r3, [sp, #4]
    1c8c:	2b00      	cmp	r3, #0
    1c8e:	db03      	blt.n	1c98 <Platform_SetIrqPriority+0x26>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber) || \
    1c90:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1c94:	2b0f      	cmp	r3, #15
    1c96:	d909      	bls.n	1cac <Platform_SetIrqPriority+0x3a>
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber) || \
        (u8Priority >= (uint8)(1U << INT_CTRL_IP_GIC_PRIO_BITS)))
#endif
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_SET_IRQ_PRIO_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    1c98:	2302      	movs	r3, #2
    1c9a:	2222      	movs	r2, #34	; 0x22
    1c9c:	2100      	movs	r1, #0
    1c9e:	20ff      	movs	r0, #255	; 0xff
    1ca0:	f015 f83c 	bl	16d1c <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1ca4:	2301      	movs	r3, #1
    1ca6:	f88d 300f 	strb.w	r3, [sp, #15]
    1caa:	e005      	b.n	1cb8 <Platform_SetIrqPriority+0x46>
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    1cac:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1cb0:	4619      	mov	r1, r3
    1cb2:	9801      	ldr	r0, [sp, #4]
    1cb4:	f7ff ff6f 	bl	1b96 <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    1cb8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1cbc:	4618      	mov	r0, r3
    1cbe:	b005      	add	sp, #20
    1cc0:	f85d fb04 	ldr.w	pc, [sp], #4

00001cc4 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    1cc4:	b500      	push	{lr}
    1cc6:	b085      	sub	sp, #20
    1cc8:	9001      	str	r0, [sp, #4]
    1cca:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1ccc:	2300      	movs	r3, #0
    1cce:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    1cd2:	9b01      	ldr	r3, [sp, #4]
    1cd4:	2b7a      	cmp	r3, #122	; 0x7a
    1cd6:	dc02      	bgt.n	1cde <Platform_GetIrqPriority+0x1a>
    1cd8:	9b01      	ldr	r3, [sp, #4]
    1cda:	2b00      	cmp	r3, #0
    1cdc:	da09      	bge.n	1cf2 <Platform_GetIrqPriority+0x2e>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_GET_IRQ_PRIO_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    1cde:	2302      	movs	r3, #2
    1ce0:	2223      	movs	r2, #35	; 0x23
    1ce2:	2100      	movs	r1, #0
    1ce4:	20ff      	movs	r0, #255	; 0xff
    1ce6:	f015 f819 	bl	16d1c <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1cea:	2301      	movs	r3, #1
    1cec:	f88d 300f 	strb.w	r3, [sp, #15]
    1cf0:	e013      	b.n	1d1a <Platform_GetIrqPriority+0x56>
    }
    else if (u8Priority == NULL_PTR)
    1cf2:	9b00      	ldr	r3, [sp, #0]
    1cf4:	2b00      	cmp	r3, #0
    1cf6:	d109      	bne.n	1d0c <Platform_GetIrqPriority+0x48>
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_GET_IRQ_PRIO_ID, PLATFORM_E_PARAM_POINTER);
    1cf8:	2301      	movs	r3, #1
    1cfa:	2223      	movs	r2, #35	; 0x23
    1cfc:	2100      	movs	r1, #0
    1cfe:	20ff      	movs	r0, #255	; 0xff
    1d00:	f015 f80c 	bl	16d1c <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1d04:	2301      	movs	r3, #1
    1d06:	f88d 300f 	strb.w	r3, [sp, #15]
    1d0a:	e006      	b.n	1d1a <Platform_GetIrqPriority+0x56>
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    1d0c:	9801      	ldr	r0, [sp, #4]
    1d0e:	f7ff ff52 	bl	1bb6 <Platform_Ipw_GetIrqPriority>
    1d12:	4603      	mov	r3, r0
    1d14:	461a      	mov	r2, r3
    1d16:	9b00      	ldr	r3, [sp, #0]
    1d18:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    1d1a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1d1e:	4618      	mov	r0, r3
    1d20:	b005      	add	sp, #20
    1d22:	f85d fb04 	ldr.w	pc, [sp], #4

00001d26 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    1d26:	b500      	push	{lr}
    1d28:	b087      	sub	sp, #28
    1d2a:	9003      	str	r0, [sp, #12]
    1d2c:	9102      	str	r1, [sp, #8]
    1d2e:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1d30:	2300      	movs	r3, #0
    1d32:	f88d 3017 	strb.w	r3, [sp, #23]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    1d36:	9b03      	ldr	r3, [sp, #12]
    1d38:	2b7a      	cmp	r3, #122	; 0x7a
    1d3a:	dc02      	bgt.n	1d42 <Platform_InstallIrqHandler+0x1c>
    1d3c:	9b03      	ldr	r3, [sp, #12]
    1d3e:	2b00      	cmp	r3, #0
    1d40:	da09      	bge.n	1d56 <Platform_InstallIrqHandler+0x30>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_INSTALL_HANDLER_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    1d42:	2302      	movs	r3, #2
    1d44:	2224      	movs	r2, #36	; 0x24
    1d46:	2100      	movs	r1, #0
    1d48:	20ff      	movs	r0, #255	; 0xff
    1d4a:	f014 ffe7 	bl	16d1c <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1d4e:	2301      	movs	r3, #1
    1d50:	f88d 3017 	strb.w	r3, [sp, #23]
    1d54:	e004      	b.n	1d60 <Platform_InstallIrqHandler+0x3a>
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1d56:	9a01      	ldr	r2, [sp, #4]
    1d58:	9902      	ldr	r1, [sp, #8]
    1d5a:	9803      	ldr	r0, [sp, #12]
    1d5c:	f7ff ff36 	bl	1bcc <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    1d60:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    1d64:	4618      	mov	r0, r3
    1d66:	b007      	add	sp, #28
    1d68:	f85d fb04 	ldr.w	pc, [sp], #4

00001d6c <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1d6c:	b500      	push	{lr}
    1d6e:	b085      	sub	sp, #20
    1d70:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1d72:	2300      	movs	r3, #0
    1d74:	9303      	str	r3, [sp, #12]
    1d76:	e05d      	b.n	1e34 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1d78:	9b01      	ldr	r3, [sp, #4]
    1d7a:	6859      	ldr	r1, [r3, #4]
    1d7c:	9a03      	ldr	r2, [sp, #12]
    1d7e:	4613      	mov	r3, r2
    1d80:	005b      	lsls	r3, r3, #1
    1d82:	4413      	add	r3, r2
    1d84:	009b      	lsls	r3, r3, #2
    1d86:	440b      	add	r3, r1
    1d88:	681b      	ldr	r3, [r3, #0]
    1d8a:	4618      	mov	r0, r3
    1d8c:	f7ff fee4 	bl	1b58 <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1d90:	9b01      	ldr	r3, [sp, #4]
    1d92:	6859      	ldr	r1, [r3, #4]
    1d94:	9a03      	ldr	r2, [sp, #12]
    1d96:	4613      	mov	r3, r2
    1d98:	005b      	lsls	r3, r3, #1
    1d9a:	4413      	add	r3, r2
    1d9c:	009b      	lsls	r3, r3, #2
    1d9e:	440b      	add	r3, r1
    1da0:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1da2:	9b01      	ldr	r3, [sp, #4]
    1da4:	6859      	ldr	r1, [r3, #4]
    1da6:	9a03      	ldr	r2, [sp, #12]
    1da8:	4613      	mov	r3, r2
    1daa:	005b      	lsls	r3, r3, #1
    1dac:	4413      	add	r3, r2
    1dae:	009b      	lsls	r3, r3, #2
    1db0:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1db2:	795b      	ldrb	r3, [r3, #5]
    1db4:	4619      	mov	r1, r3
    1db6:	f7ff feb4 	bl	1b22 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1dba:	9b01      	ldr	r3, [sp, #4]
    1dbc:	6859      	ldr	r1, [r3, #4]
    1dbe:	9a03      	ldr	r2, [sp, #12]
    1dc0:	4613      	mov	r3, r2
    1dc2:	005b      	lsls	r3, r3, #1
    1dc4:	4413      	add	r3, r2
    1dc6:	009b      	lsls	r3, r3, #2
    1dc8:	440b      	add	r3, r1
    1dca:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1dcc:	9b01      	ldr	r3, [sp, #4]
    1dce:	6859      	ldr	r1, [r3, #4]
    1dd0:	9a03      	ldr	r2, [sp, #12]
    1dd2:	4613      	mov	r3, r2
    1dd4:	005b      	lsls	r3, r3, #1
    1dd6:	4413      	add	r3, r2
    1dd8:	009b      	lsls	r3, r3, #2
    1dda:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1ddc:	689b      	ldr	r3, [r3, #8]
    1dde:	2200      	movs	r2, #0
    1de0:	4619      	mov	r1, r3
    1de2:	f7ff fe7c 	bl	1ade <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1de6:	9b01      	ldr	r3, [sp, #4]
    1de8:	6859      	ldr	r1, [r3, #4]
    1dea:	9a03      	ldr	r2, [sp, #12]
    1dec:	4613      	mov	r3, r2
    1dee:	005b      	lsls	r3, r3, #1
    1df0:	4413      	add	r3, r2
    1df2:	009b      	lsls	r3, r3, #2
    1df4:	440b      	add	r3, r1
    1df6:	791b      	ldrb	r3, [r3, #4]
    1df8:	2b00      	cmp	r3, #0
    1dfa:	d00c      	beq.n	1e16 <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1dfc:	9b01      	ldr	r3, [sp, #4]
    1dfe:	6859      	ldr	r1, [r3, #4]
    1e00:	9a03      	ldr	r2, [sp, #12]
    1e02:	4613      	mov	r3, r2
    1e04:	005b      	lsls	r3, r3, #1
    1e06:	4413      	add	r3, r2
    1e08:	009b      	lsls	r3, r3, #2
    1e0a:	440b      	add	r3, r1
    1e0c:	681b      	ldr	r3, [r3, #0]
    1e0e:	4618      	mov	r0, r3
    1e10:	f7ff fe73 	bl	1afa <IntCtrl_Ip_EnableIrq>
    1e14:	e00b      	b.n	1e2e <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1e16:	9b01      	ldr	r3, [sp, #4]
    1e18:	6859      	ldr	r1, [r3, #4]
    1e1a:	9a03      	ldr	r2, [sp, #12]
    1e1c:	4613      	mov	r3, r2
    1e1e:	005b      	lsls	r3, r3, #1
    1e20:	4413      	add	r3, r2
    1e22:	009b      	lsls	r3, r3, #2
    1e24:	440b      	add	r3, r1
    1e26:	681b      	ldr	r3, [r3, #0]
    1e28:	4618      	mov	r0, r3
    1e2a:	f7ff fe70 	bl	1b0e <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1e2e:	9b03      	ldr	r3, [sp, #12]
    1e30:	3301      	adds	r3, #1
    1e32:	9303      	str	r3, [sp, #12]
    1e34:	9b01      	ldr	r3, [sp, #4]
    1e36:	681b      	ldr	r3, [r3, #0]
    1e38:	9a03      	ldr	r2, [sp, #12]
    1e3a:	429a      	cmp	r2, r3
    1e3c:	d39c      	bcc.n	1d78 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    1e3e:	2300      	movs	r3, #0
}
    1e40:	4618      	mov	r0, r3
    1e42:	b005      	add	sp, #20
    1e44:	f85d fb04 	ldr.w	pc, [sp], #4

00001e48 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    1e48:	b500      	push	{lr}
    1e4a:	b085      	sub	sp, #20
    1e4c:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    1e4e:	2300      	movs	r3, #0
    1e50:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    1e54:	9b01      	ldr	r3, [sp, #4]
    1e56:	681b      	ldr	r3, [r3, #0]
    1e58:	2b00      	cmp	r3, #0
    1e5a:	d007      	beq.n	1e6c <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    1e5c:	9b01      	ldr	r3, [sp, #4]
    1e5e:	681b      	ldr	r3, [r3, #0]
    1e60:	4618      	mov	r0, r3
    1e62:	f7ff ff83 	bl	1d6c <Platform_Ipw_InitIntCtrl>
    1e66:	4603      	mov	r3, r0
    1e68:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    1e6c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e70:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    1e72:	bf00      	nop
    1e74:	b005      	add	sp, #20
    1e76:	f85d fb04 	ldr.w	pc, [sp], #4

00001e7a <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    1e7a:	2300      	movs	r3, #0
}
    1e7c:	4618      	mov	r0, r3
    1e7e:	4770      	bx	lr

00001e80 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1e80:	b082      	sub	sp, #8
    1e82:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1e84:	2301      	movs	r3, #1
}
    1e86:	4618      	mov	r0, r3
    1e88:	b002      	add	sp, #8
    1e8a:	4770      	bx	lr

00001e8c <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1e8c:	b082      	sub	sp, #8
    1e8e:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1e90:	bf00      	nop
    1e92:	b002      	add	sp, #8
    1e94:	4770      	bx	lr

00001e96 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1e96:	b082      	sub	sp, #8
    1e98:	9001      	str	r0, [sp, #4]
    return Micros;
    1e9a:	9b01      	ldr	r3, [sp, #4]
}
    1e9c:	4618      	mov	r0, r3
    1e9e:	b002      	add	sp, #8
    1ea0:	4770      	bx	lr

00001ea2 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1ea2:	b500      	push	{lr}
    1ea4:	b083      	sub	sp, #12
    1ea6:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1ea8:	f000 f86c 	bl	1f84 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1eac:	bf00      	nop
    1eae:	b003      	add	sp, #12
    1eb0:	f85d fb04 	ldr.w	pc, [sp], #4

00001eb4 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1eb4:	b500      	push	{lr}
    1eb6:	b085      	sub	sp, #20
    1eb8:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1eba:	2300      	movs	r3, #0
    1ebc:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1ebe:	9b01      	ldr	r3, [sp, #4]
    1ec0:	2b00      	cmp	r3, #0
    1ec2:	d003      	beq.n	1ecc <OsIf_GetCounter+0x18>
    1ec4:	9b01      	ldr	r3, [sp, #4]
    1ec6:	2b01      	cmp	r3, #1
    1ec8:	d004      	beq.n	1ed4 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1eca:	e007      	b.n	1edc <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1ecc:	f7ff ffd5 	bl	1e7a <OsIf_Timer_Dummy_GetCounter>
    1ed0:	9003      	str	r0, [sp, #12]
            break;
    1ed2:	e003      	b.n	1edc <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1ed4:	f000 f872 	bl	1fbc <OsIf_Timer_System_GetCounter>
    1ed8:	9003      	str	r0, [sp, #12]
            break;
    1eda:	bf00      	nop
    }

    return Value;
    1edc:	9b03      	ldr	r3, [sp, #12]
}
    1ede:	4618      	mov	r0, r3
    1ee0:	b005      	add	sp, #20
    1ee2:	f85d fb04 	ldr.w	pc, [sp], #4

00001ee6 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1ee6:	b500      	push	{lr}
    1ee8:	b085      	sub	sp, #20
    1eea:	9001      	str	r0, [sp, #4]
    1eec:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1eee:	2300      	movs	r3, #0
    1ef0:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1ef2:	9b00      	ldr	r3, [sp, #0]
    1ef4:	2b00      	cmp	r3, #0
    1ef6:	d003      	beq.n	1f00 <OsIf_GetElapsed+0x1a>
    1ef8:	9b00      	ldr	r3, [sp, #0]
    1efa:	2b01      	cmp	r3, #1
    1efc:	d005      	beq.n	1f0a <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1efe:	e009      	b.n	1f14 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1f00:	9801      	ldr	r0, [sp, #4]
    1f02:	f7ff ffbd 	bl	1e80 <OsIf_Timer_Dummy_GetElapsed>
    1f06:	9003      	str	r0, [sp, #12]
            break;
    1f08:	e004      	b.n	1f14 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1f0a:	9801      	ldr	r0, [sp, #4]
    1f0c:	f000 f864 	bl	1fd8 <OsIf_Timer_System_GetElapsed>
    1f10:	9003      	str	r0, [sp, #12]
            break;
    1f12:	bf00      	nop
    }

    return Value;
    1f14:	9b03      	ldr	r3, [sp, #12]
}
    1f16:	4618      	mov	r0, r3
    1f18:	b005      	add	sp, #20
    1f1a:	f85d fb04 	ldr.w	pc, [sp], #4

00001f1e <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1f1e:	b500      	push	{lr}
    1f20:	b083      	sub	sp, #12
    1f22:	9001      	str	r0, [sp, #4]
    1f24:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1f26:	9b00      	ldr	r3, [sp, #0]
    1f28:	2b00      	cmp	r3, #0
    1f2a:	d003      	beq.n	1f34 <OsIf_SetTimerFrequency+0x16>
    1f2c:	9b00      	ldr	r3, [sp, #0]
    1f2e:	2b01      	cmp	r3, #1
    1f30:	d004      	beq.n	1f3c <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1f32:	e007      	b.n	1f44 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1f34:	9801      	ldr	r0, [sp, #4]
    1f36:	f7ff ffa9 	bl	1e8c <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1f3a:	e003      	b.n	1f44 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1f3c:	9801      	ldr	r0, [sp, #4]
    1f3e:	f000 f85b 	bl	1ff8 <OsIf_Timer_System_SetTimerFrequency>
            break;
    1f42:	bf00      	nop
    }
}
    1f44:	bf00      	nop
    1f46:	b003      	add	sp, #12
    1f48:	f85d fb04 	ldr.w	pc, [sp], #4

00001f4c <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1f4c:	b500      	push	{lr}
    1f4e:	b085      	sub	sp, #20
    1f50:	9001      	str	r0, [sp, #4]
    1f52:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1f54:	2300      	movs	r3, #0
    1f56:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1f58:	9b00      	ldr	r3, [sp, #0]
    1f5a:	2b00      	cmp	r3, #0
    1f5c:	d003      	beq.n	1f66 <OsIf_MicrosToTicks+0x1a>
    1f5e:	9b00      	ldr	r3, [sp, #0]
    1f60:	2b01      	cmp	r3, #1
    1f62:	d005      	beq.n	1f70 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1f64:	e009      	b.n	1f7a <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1f66:	9801      	ldr	r0, [sp, #4]
    1f68:	f7ff ff95 	bl	1e96 <OsIf_Timer_Dummy_MicrosToTicks>
    1f6c:	9003      	str	r0, [sp, #12]
            break;
    1f6e:	e004      	b.n	1f7a <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1f70:	9801      	ldr	r0, [sp, #4]
    1f72:	f000 f84f 	bl	2014 <OsIf_Timer_System_MicrosToTicks>
    1f76:	9003      	str	r0, [sp, #12]
            break;
    1f78:	bf00      	nop
    }

    return Value;
    1f7a:	9b03      	ldr	r3, [sp, #12]
}
    1f7c:	4618      	mov	r0, r3
    1f7e:	b005      	add	sp, #20
    1f80:	f85d fb04 	ldr.w	pc, [sp], #4

00001f84 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1f84:	b500      	push	{lr}
    1f86:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1f88:	2300      	movs	r3, #0
    1f8a:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1f8c:	4a09      	ldr	r2, [pc, #36]	; (1fb4 <OsIf_Timer_System_Init+0x30>)
    1f8e:	9b01      	ldr	r3, [sp, #4]
    1f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1f94:	685a      	ldr	r2, [r3, #4]
    1f96:	4908      	ldr	r1, [pc, #32]	; (1fb8 <OsIf_Timer_System_Init+0x34>)
    1f98:	9b01      	ldr	r3, [sp, #4]
    1f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1f9e:	4a06      	ldr	r2, [pc, #24]	; (1fb8 <OsIf_Timer_System_Init+0x34>)
    1fa0:	9b01      	ldr	r3, [sp, #4]
    1fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1fa6:	4618      	mov	r0, r3
    1fa8:	f000 f868 	bl	207c <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1fac:	bf00      	nop
    1fae:	b003      	add	sp, #12
    1fb0:	f85d fb04 	ldr.w	pc, [sp], #4
    1fb4:	00019264 	.word	0x00019264
    1fb8:	1fff8b34 	.word	0x1fff8b34

00001fbc <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1fbc:	b500      	push	{lr}
    1fbe:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1fc0:	2300      	movs	r3, #0
    1fc2:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1fc4:	2300      	movs	r3, #0
    1fc6:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1fc8:	f000 f86c 	bl	20a4 <OsIf_Timer_System_Internal_GetCounter>
    1fcc:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1fce:	9b01      	ldr	r3, [sp, #4]
}
    1fd0:	4618      	mov	r0, r3
    1fd2:	b003      	add	sp, #12
    1fd4:	f85d fb04 	ldr.w	pc, [sp], #4

00001fd8 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1fd8:	b500      	push	{lr}
    1fda:	b085      	sub	sp, #20
    1fdc:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1fde:	2300      	movs	r3, #0
    1fe0:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1fe2:	2300      	movs	r3, #0
    1fe4:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1fe6:	9801      	ldr	r0, [sp, #4]
    1fe8:	f000 f864 	bl	20b4 <OsIf_Timer_System_Internal_GetElapsed>
    1fec:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1fee:	9b03      	ldr	r3, [sp, #12]
}
    1ff0:	4618      	mov	r0, r3
    1ff2:	b005      	add	sp, #20
    1ff4:	f85d fb04 	ldr.w	pc, [sp], #4

00001ff8 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1ff8:	b084      	sub	sp, #16
    1ffa:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1ffc:	2300      	movs	r3, #0
    1ffe:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    2000:	4903      	ldr	r1, [pc, #12]	; (2010 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    2002:	9b03      	ldr	r3, [sp, #12]
    2004:	9a01      	ldr	r2, [sp, #4]
    2006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    200a:	bf00      	nop
    200c:	b004      	add	sp, #16
    200e:	4770      	bx	lr
    2010:	1fff8b34 	.word	0x1fff8b34

00002014 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    2014:	b5f0      	push	{r4, r5, r6, r7, lr}
    2016:	b087      	sub	sp, #28
    2018:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    201a:	2100      	movs	r1, #0
    201c:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    201e:	2100      	movs	r1, #0
    2020:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    2022:	9901      	ldr	r1, [sp, #4]
    2024:	2000      	movs	r0, #0
    2026:	460e      	mov	r6, r1
    2028:	4607      	mov	r7, r0
    202a:	4812      	ldr	r0, [pc, #72]	; (2074 <OsIf_Timer_System_MicrosToTicks+0x60>)
    202c:	9904      	ldr	r1, [sp, #16]
    202e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    2032:	2000      	movs	r0, #0
    2034:	460c      	mov	r4, r1
    2036:	4605      	mov	r5, r0
    2038:	fb04 f007 	mul.w	r0, r4, r7
    203c:	fb06 f105 	mul.w	r1, r6, r5
    2040:	4401      	add	r1, r0
    2042:	fba6 2304 	umull	r2, r3, r6, r4
    2046:	4419      	add	r1, r3
    2048:	460b      	mov	r3, r1
    204a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    204e:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    2052:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    2056:	4a08      	ldr	r2, [pc, #32]	; (2078 <OsIf_Timer_System_MicrosToTicks+0x64>)
    2058:	f04f 0300 	mov.w	r3, #0
    205c:	f7fe faa2 	bl	5a4 <__aeabi_uldivmod>
    2060:	4602      	mov	r2, r0
    2062:	460b      	mov	r3, r1
    2064:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    2068:	9b02      	ldr	r3, [sp, #8]
    206a:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    206c:	9b05      	ldr	r3, [sp, #20]
}
    206e:	4618      	mov	r0, r3
    2070:	b007      	add	sp, #28
    2072:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2074:	1fff8b34 	.word	0x1fff8b34
    2078:	000f4240 	.word	0x000f4240

0000207c <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    207c:	b082      	sub	sp, #8
    207e:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    2080:	4b07      	ldr	r3, [pc, #28]	; (20a0 <OsIf_Timer_System_Internal_Init+0x24>)
    2082:	2200      	movs	r2, #0
    2084:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    2086:	4b06      	ldr	r3, [pc, #24]	; (20a0 <OsIf_Timer_System_Internal_Init+0x24>)
    2088:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    208c:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    208e:	4b04      	ldr	r3, [pc, #16]	; (20a0 <OsIf_Timer_System_Internal_Init+0x24>)
    2090:	2200      	movs	r2, #0
    2092:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    2094:	4b02      	ldr	r3, [pc, #8]	; (20a0 <OsIf_Timer_System_Internal_Init+0x24>)
    2096:	2205      	movs	r2, #5
    2098:	601a      	str	r2, [r3, #0]
}
    209a:	bf00      	nop
    209c:	b002      	add	sp, #8
    209e:	4770      	bx	lr
    20a0:	e000e010 	.word	0xe000e010

000020a4 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    20a4:	4b02      	ldr	r3, [pc, #8]	; (20b0 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    20a6:	689b      	ldr	r3, [r3, #8]
    20a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    20ac:	4618      	mov	r0, r3
    20ae:	4770      	bx	lr
    20b0:	e000e010 	.word	0xe000e010

000020b4 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    20b4:	b084      	sub	sp, #16
    20b6:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    20b8:	4b10      	ldr	r3, [pc, #64]	; (20fc <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    20ba:	689b      	ldr	r3, [r3, #8]
    20bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    20c0:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    20c2:	2300      	movs	r3, #0
    20c4:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    20c6:	9b01      	ldr	r3, [sp, #4]
    20c8:	681b      	ldr	r3, [r3, #0]
    20ca:	9a02      	ldr	r2, [sp, #8]
    20cc:	429a      	cmp	r2, r3
    20ce:	d909      	bls.n	20e4 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    20d0:	9b01      	ldr	r3, [sp, #4]
    20d2:	681a      	ldr	r2, [r3, #0]
    20d4:	9b02      	ldr	r3, [sp, #8]
    20d6:	1ad3      	subs	r3, r2, r3
    20d8:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    20dc:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    20e0:	9303      	str	r3, [sp, #12]
    20e2:	e004      	b.n	20ee <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    20e4:	9b01      	ldr	r3, [sp, #4]
    20e6:	681a      	ldr	r2, [r3, #0]
    20e8:	9b02      	ldr	r3, [sp, #8]
    20ea:	1ad3      	subs	r3, r2, r3
    20ec:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    20ee:	9b01      	ldr	r3, [sp, #4]
    20f0:	9a02      	ldr	r2, [sp, #8]
    20f2:	601a      	str	r2, [r3, #0]

    return dif;
    20f4:	9b03      	ldr	r3, [sp, #12]
}
    20f6:	4618      	mov	r0, r3
    20f8:	b004      	add	sp, #16
    20fa:	4770      	bx	lr
    20fc:	e000e010 	.word	0xe000e010

00002100 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    2100:	b082      	sub	sp, #8
    2102:	9001      	str	r0, [sp, #4]
    2104:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    2106:	bf00      	nop
    2108:	b002      	add	sp, #8
    210a:	4770      	bx	lr

0000210c <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    210c:	b500      	push	{lr}
    210e:	b085      	sub	sp, #20
    2110:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    2112:	4b24      	ldr	r3, [pc, #144]	; (21a4 <Clock_Ip_UpdateDriverContext+0x98>)
    2114:	2201      	movs	r2, #1
    2116:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2118:	4b23      	ldr	r3, [pc, #140]	; (21a8 <Clock_Ip_UpdateDriverContext+0x9c>)
    211a:	681b      	ldr	r3, [r3, #0]
    211c:	2102      	movs	r1, #2
    211e:	4618      	mov	r0, r3
    2120:	f003 fc32 	bl	5988 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    2124:	2300      	movs	r3, #0
    2126:	f88d 300f 	strb.w	r3, [sp, #15]
    212a:	e015      	b.n	2158 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    212c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2130:	9a01      	ldr	r2, [sp, #4]
    2132:	334a      	adds	r3, #74	; 0x4a
    2134:	00db      	lsls	r3, r3, #3
    2136:	4413      	add	r3, r2
    2138:	6858      	ldr	r0, [r3, #4]
    213a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    213e:	9a01      	ldr	r2, [sp, #4]
    2140:	334a      	adds	r3, #74	; 0x4a
    2142:	00db      	lsls	r3, r3, #3
    2144:	4413      	add	r3, r2
    2146:	689b      	ldr	r3, [r3, #8]
    2148:	4619      	mov	r1, r3
    214a:	f001 fadc 	bl	3706 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    214e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2152:	3301      	adds	r3, #1
    2154:	f88d 300f 	strb.w	r3, [sp, #15]
    2158:	9b01      	ldr	r3, [sp, #4]
    215a:	7bdb      	ldrb	r3, [r3, #15]
    215c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2160:	429a      	cmp	r2, r3
    2162:	d3e3      	bcc.n	212c <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    2164:	f000 f824 	bl	21b0 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2168:	2301      	movs	r3, #1
    216a:	f88d 300f 	strb.w	r3, [sp, #15]
    216e:	e00e      	b.n	218e <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    2170:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2174:	9b01      	ldr	r3, [sp, #4]
    2176:	327e      	adds	r2, #126	; 0x7e
    2178:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    217c:	490b      	ldr	r1, [pc, #44]	; (21ac <Clock_Ip_UpdateDriverContext+0xa0>)
    217e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2182:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2184:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2188:	3301      	adds	r3, #1
    218a:	f88d 300f 	strb.w	r3, [sp, #15]
    218e:	9b01      	ldr	r3, [sp, #4]
    2190:	7cdb      	ldrb	r3, [r3, #19]
    2192:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2196:	429a      	cmp	r2, r3
    2198:	d3ea      	bcc.n	2170 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    219a:	bf00      	nop
    219c:	bf00      	nop
    219e:	b005      	add	sp, #20
    21a0:	f85d fb04 	ldr.w	pc, [sp], #4
    21a4:	1fff8b10 	.word	0x1fff8b10
    21a8:	1fff8b38 	.word	0x1fff8b38
    21ac:	1fff8b44 	.word	0x1fff8b44

000021b0 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    21b0:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    21b2:	4b23      	ldr	r3, [pc, #140]	; (2240 <Clock_Ip_CallEmptyCallbacks+0x90>)
    21b4:	781b      	ldrb	r3, [r3, #0]
    21b6:	f083 0301 	eor.w	r3, r3, #1
    21ba:	b2db      	uxtb	r3, r3
    21bc:	2b00      	cmp	r3, #0
    21be:	d03d      	beq.n	223c <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    21c0:	4b1f      	ldr	r3, [pc, #124]	; (2240 <Clock_Ip_CallEmptyCallbacks+0x90>)
    21c2:	2201      	movs	r2, #1
    21c4:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    21c6:	4b1f      	ldr	r3, [pc, #124]	; (2244 <Clock_Ip_CallEmptyCallbacks+0x94>)
    21c8:	685b      	ldr	r3, [r3, #4]
    21ca:	2100      	movs	r1, #0
    21cc:	2000      	movs	r0, #0
    21ce:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    21d0:	4b1c      	ldr	r3, [pc, #112]	; (2244 <Clock_Ip_CallEmptyCallbacks+0x94>)
    21d2:	689b      	ldr	r3, [r3, #8]
    21d4:	2057      	movs	r0, #87	; 0x57
    21d6:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    21d8:	4b1b      	ldr	r3, [pc, #108]	; (2248 <Clock_Ip_CallEmptyCallbacks+0x98>)
    21da:	681b      	ldr	r3, [r3, #0]
    21dc:	2000      	movs	r0, #0
    21de:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    21e0:	4b1a      	ldr	r3, [pc, #104]	; (224c <Clock_Ip_CallEmptyCallbacks+0x9c>)
    21e2:	681b      	ldr	r3, [r3, #0]
    21e4:	2000      	movs	r0, #0
    21e6:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    21e8:	4b19      	ldr	r3, [pc, #100]	; (2250 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    21ea:	681b      	ldr	r3, [r3, #0]
    21ec:	2000      	movs	r0, #0
    21ee:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    21f0:	4b18      	ldr	r3, [pc, #96]	; (2254 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    21f2:	685b      	ldr	r3, [r3, #4]
    21f4:	2000      	movs	r0, #0
    21f6:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    21f8:	4b16      	ldr	r3, [pc, #88]	; (2254 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    21fa:	689b      	ldr	r3, [r3, #8]
    21fc:	2057      	movs	r0, #87	; 0x57
    21fe:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2200:	4b15      	ldr	r3, [pc, #84]	; (2258 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    2202:	681b      	ldr	r3, [r3, #0]
    2204:	2000      	movs	r0, #0
    2206:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    2208:	4b13      	ldr	r3, [pc, #76]	; (2258 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    220a:	685b      	ldr	r3, [r3, #4]
    220c:	2100      	movs	r1, #0
    220e:	2057      	movs	r0, #87	; 0x57
    2210:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2212:	4b12      	ldr	r3, [pc, #72]	; (225c <Clock_Ip_CallEmptyCallbacks+0xac>)
    2214:	681b      	ldr	r3, [r3, #0]
    2216:	2000      	movs	r0, #0
    2218:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    221a:	4b11      	ldr	r3, [pc, #68]	; (2260 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    221c:	685b      	ldr	r3, [r3, #4]
    221e:	2000      	movs	r0, #0
    2220:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    2222:	4b0f      	ldr	r3, [pc, #60]	; (2260 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2224:	689b      	ldr	r3, [r3, #8]
    2226:	2057      	movs	r0, #87	; 0x57
    2228:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    222a:	4b0e      	ldr	r3, [pc, #56]	; (2264 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    222c:	685b      	ldr	r3, [r3, #4]
    222e:	2000      	movs	r0, #0
    2230:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    2232:	4b0d      	ldr	r3, [pc, #52]	; (2268 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    2234:	681b      	ldr	r3, [r3, #0]
    2236:	2100      	movs	r1, #0
    2238:	2000      	movs	r0, #0
    223a:	4798      	blx	r3
    }
}
    223c:	bf00      	nop
    223e:	bd08      	pop	{r3, pc}
    2240:	1fff8b3c 	.word	0x1fff8b3c
    2244:	000184c0 	.word	0x000184c0
    2248:	000183d4 	.word	0x000183d4
    224c:	00018410 	.word	0x00018410
    2250:	00018418 	.word	0x00018418
    2254:	00018440 	.word	0x00018440
    2258:	0001844c 	.word	0x0001844c
    225c:	00018484 	.word	0x00018484
    2260:	000184d0 	.word	0x000184d0
    2264:	000184fc 	.word	0x000184fc
    2268:	000184f8 	.word	0x000184f8

0000226c <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    226c:	b500      	push	{lr}
    226e:	b085      	sub	sp, #20
    2270:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    2272:	9b01      	ldr	r3, [sp, #4]
    2274:	7adb      	ldrb	r3, [r3, #11]
    2276:	9303      	str	r3, [sp, #12]
    2278:	e01f      	b.n	22ba <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    227a:	9b03      	ldr	r3, [sp, #12]
    227c:	1e5a      	subs	r2, r3, #1
    227e:	9b01      	ldr	r3, [sp, #4]
    2280:	320d      	adds	r2, #13
    2282:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2286:	495a      	ldr	r1, [pc, #360]	; (23f0 <Clock_Ip_ResetClockConfiguration+0x184>)
    2288:	4613      	mov	r3, r2
    228a:	00db      	lsls	r3, r3, #3
    228c:	4413      	add	r3, r2
    228e:	440b      	add	r3, r1
    2290:	3301      	adds	r3, #1
    2292:	781b      	ldrb	r3, [r3, #0]
    2294:	461a      	mov	r2, r3
    2296:	4b57      	ldr	r3, [pc, #348]	; (23f4 <Clock_Ip_ResetClockConfiguration+0x188>)
    2298:	5c9b      	ldrb	r3, [r3, r2]
    229a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    229c:	4a56      	ldr	r2, [pc, #344]	; (23f8 <Clock_Ip_ResetClockConfiguration+0x18c>)
    229e:	9b02      	ldr	r3, [sp, #8]
    22a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    22a4:	9a03      	ldr	r2, [sp, #12]
    22a6:	3a01      	subs	r2, #1
    22a8:	320d      	adds	r2, #13
    22aa:	00d2      	lsls	r2, r2, #3
    22ac:	9901      	ldr	r1, [sp, #4]
    22ae:	440a      	add	r2, r1
    22b0:	4610      	mov	r0, r2
    22b2:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    22b4:	9b03      	ldr	r3, [sp, #12]
    22b6:	3b01      	subs	r3, #1
    22b8:	9303      	str	r3, [sp, #12]
    22ba:	9b03      	ldr	r3, [sp, #12]
    22bc:	2b00      	cmp	r3, #0
    22be:	d1dc      	bne.n	227a <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    22c0:	9b01      	ldr	r3, [sp, #4]
    22c2:	7b9b      	ldrb	r3, [r3, #14]
    22c4:	9303      	str	r3, [sp, #12]
    22c6:	e026      	b.n	2316 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    22c8:	9b03      	ldr	r3, [sp, #12]
    22ca:	3b01      	subs	r3, #1
    22cc:	9a01      	ldr	r2, [sp, #4]
    22ce:	3324      	adds	r3, #36	; 0x24
    22d0:	011b      	lsls	r3, r3, #4
    22d2:	4413      	add	r3, r2
    22d4:	3304      	adds	r3, #4
    22d6:	681a      	ldr	r2, [r3, #0]
    22d8:	4945      	ldr	r1, [pc, #276]	; (23f0 <Clock_Ip_ResetClockConfiguration+0x184>)
    22da:	4613      	mov	r3, r2
    22dc:	00db      	lsls	r3, r3, #3
    22de:	4413      	add	r3, r2
    22e0:	440b      	add	r3, r1
    22e2:	3301      	adds	r3, #1
    22e4:	781b      	ldrb	r3, [r3, #0]
    22e6:	461a      	mov	r2, r3
    22e8:	4b44      	ldr	r3, [pc, #272]	; (23fc <Clock_Ip_ResetClockConfiguration+0x190>)
    22ea:	5c9b      	ldrb	r3, [r3, r2]
    22ec:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    22ee:	4944      	ldr	r1, [pc, #272]	; (2400 <Clock_Ip_ResetClockConfiguration+0x194>)
    22f0:	9a02      	ldr	r2, [sp, #8]
    22f2:	4613      	mov	r3, r2
    22f4:	005b      	lsls	r3, r3, #1
    22f6:	4413      	add	r3, r2
    22f8:	009b      	lsls	r3, r3, #2
    22fa:	440b      	add	r3, r1
    22fc:	681b      	ldr	r3, [r3, #0]
    22fe:	9a03      	ldr	r2, [sp, #12]
    2300:	3a01      	subs	r2, #1
    2302:	3224      	adds	r2, #36	; 0x24
    2304:	0112      	lsls	r2, r2, #4
    2306:	9901      	ldr	r1, [sp, #4]
    2308:	440a      	add	r2, r1
    230a:	3204      	adds	r2, #4
    230c:	4610      	mov	r0, r2
    230e:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2310:	9b03      	ldr	r3, [sp, #12]
    2312:	3b01      	subs	r3, #1
    2314:	9303      	str	r3, [sp, #12]
    2316:	9b03      	ldr	r3, [sp, #12]
    2318:	2b00      	cmp	r3, #0
    231a:	d1d5      	bne.n	22c8 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    231c:	9b01      	ldr	r3, [sp, #4]
    231e:	7a9b      	ldrb	r3, [r3, #10]
    2320:	9303      	str	r3, [sp, #12]
    2322:	e02a      	b.n	237a <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2324:	9b03      	ldr	r3, [sp, #12]
    2326:	1e5a      	subs	r2, r3, #1
    2328:	9901      	ldr	r1, [sp, #4]
    232a:	4613      	mov	r3, r2
    232c:	009b      	lsls	r3, r3, #2
    232e:	4413      	add	r3, r2
    2330:	00db      	lsls	r3, r3, #3
    2332:	440b      	add	r3, r1
    2334:	3340      	adds	r3, #64	; 0x40
    2336:	681a      	ldr	r2, [r3, #0]
    2338:	492d      	ldr	r1, [pc, #180]	; (23f0 <Clock_Ip_ResetClockConfiguration+0x184>)
    233a:	4613      	mov	r3, r2
    233c:	00db      	lsls	r3, r3, #3
    233e:	4413      	add	r3, r2
    2340:	440b      	add	r3, r1
    2342:	3301      	adds	r3, #1
    2344:	781b      	ldrb	r3, [r3, #0]
    2346:	461a      	mov	r2, r3
    2348:	4b2e      	ldr	r3, [pc, #184]	; (2404 <Clock_Ip_ResetClockConfiguration+0x198>)
    234a:	5c9b      	ldrb	r3, [r3, r2]
    234c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    234e:	492e      	ldr	r1, [pc, #184]	; (2408 <Clock_Ip_ResetClockConfiguration+0x19c>)
    2350:	9a02      	ldr	r2, [sp, #8]
    2352:	4613      	mov	r3, r2
    2354:	009b      	lsls	r3, r3, #2
    2356:	4413      	add	r3, r2
    2358:	009b      	lsls	r3, r3, #2
    235a:	440b      	add	r3, r1
    235c:	6819      	ldr	r1, [r3, #0]
    235e:	9b03      	ldr	r3, [sp, #12]
    2360:	1e5a      	subs	r2, r3, #1
    2362:	4613      	mov	r3, r2
    2364:	009b      	lsls	r3, r3, #2
    2366:	4413      	add	r3, r2
    2368:	00db      	lsls	r3, r3, #3
    236a:	3340      	adds	r3, #64	; 0x40
    236c:	9a01      	ldr	r2, [sp, #4]
    236e:	4413      	add	r3, r2
    2370:	4618      	mov	r0, r3
    2372:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2374:	9b03      	ldr	r3, [sp, #12]
    2376:	3b01      	subs	r3, #1
    2378:	9303      	str	r3, [sp, #12]
    237a:	9b03      	ldr	r3, [sp, #12]
    237c:	2b00      	cmp	r3, #0
    237e:	d1d1      	bne.n	2324 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2380:	9b01      	ldr	r3, [sp, #4]
    2382:	7a5b      	ldrb	r3, [r3, #9]
    2384:	9303      	str	r3, [sp, #12]
    2386:	e02b      	b.n	23e0 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2388:	9b03      	ldr	r3, [sp, #12]
    238a:	1e5a      	subs	r2, r3, #1
    238c:	9901      	ldr	r1, [sp, #4]
    238e:	4613      	mov	r3, r2
    2390:	009b      	lsls	r3, r3, #2
    2392:	4413      	add	r3, r2
    2394:	009b      	lsls	r3, r3, #2
    2396:	440b      	add	r3, r1
    2398:	332c      	adds	r3, #44	; 0x2c
    239a:	681a      	ldr	r2, [r3, #0]
    239c:	4914      	ldr	r1, [pc, #80]	; (23f0 <Clock_Ip_ResetClockConfiguration+0x184>)
    239e:	4613      	mov	r3, r2
    23a0:	00db      	lsls	r3, r3, #3
    23a2:	4413      	add	r3, r2
    23a4:	440b      	add	r3, r1
    23a6:	3301      	adds	r3, #1
    23a8:	781b      	ldrb	r3, [r3, #0]
    23aa:	461a      	mov	r2, r3
    23ac:	4b17      	ldr	r3, [pc, #92]	; (240c <Clock_Ip_ResetClockConfiguration+0x1a0>)
    23ae:	5c9b      	ldrb	r3, [r3, r2]
    23b0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    23b2:	4917      	ldr	r1, [pc, #92]	; (2410 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    23b4:	9a02      	ldr	r2, [sp, #8]
    23b6:	4613      	mov	r3, r2
    23b8:	009b      	lsls	r3, r3, #2
    23ba:	4413      	add	r3, r2
    23bc:	009b      	lsls	r3, r3, #2
    23be:	440b      	add	r3, r1
    23c0:	6819      	ldr	r1, [r3, #0]
    23c2:	9b03      	ldr	r3, [sp, #12]
    23c4:	1e5a      	subs	r2, r3, #1
    23c6:	4613      	mov	r3, r2
    23c8:	009b      	lsls	r3, r3, #2
    23ca:	4413      	add	r3, r2
    23cc:	009b      	lsls	r3, r3, #2
    23ce:	3328      	adds	r3, #40	; 0x28
    23d0:	9a01      	ldr	r2, [sp, #4]
    23d2:	4413      	add	r3, r2
    23d4:	3304      	adds	r3, #4
    23d6:	4618      	mov	r0, r3
    23d8:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    23da:	9b03      	ldr	r3, [sp, #12]
    23dc:	3b01      	subs	r3, #1
    23de:	9303      	str	r3, [sp, #12]
    23e0:	9b03      	ldr	r3, [sp, #12]
    23e2:	2b00      	cmp	r3, #0
    23e4:	d1d0      	bne.n	2388 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    23e6:	bf00      	nop
    23e8:	bf00      	nop
    23ea:	b005      	add	sp, #20
    23ec:	f85d fb04 	ldr.w	pc, [sp], #4
    23f0:	00017ec4 	.word	0x00017ec4
    23f4:	00017e94 	.word	0x00017e94
    23f8:	000184fc 	.word	0x000184fc
    23fc:	00017e74 	.word	0x00017e74
    2400:	00018440 	.word	0x00018440
    2404:	00017e84 	.word	0x00017e84
    2408:	000184d0 	.word	0x000184d0
    240c:	00017e44 	.word	0x00017e44
    2410:	00018418 	.word	0x00018418

00002414 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    2414:	b500      	push	{lr}
    2416:	b085      	sub	sp, #20
    2418:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    241a:	2301      	movs	r3, #1
    241c:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    241e:	9801      	ldr	r0, [sp, #4]
    2420:	f000 f818 	bl	2454 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    2424:	4b0a      	ldr	r3, [pc, #40]	; (2450 <Clock_Ip_Init+0x3c>)
    2426:	781b      	ldrb	r3, [r3, #0]
    2428:	2b00      	cmp	r3, #0
    242a:	d00a      	beq.n	2442 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    242c:	f000 fb74 	bl	2b18 <Clock_Ip_GetPllStatus>
    2430:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    2432:	9b02      	ldr	r3, [sp, #8]
    2434:	2b00      	cmp	r3, #0
    2436:	d106      	bne.n	2446 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    2438:	f000 fbf2 	bl	2c20 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    243c:	2300      	movs	r3, #0
    243e:	9303      	str	r3, [sp, #12]
    2440:	e001      	b.n	2446 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    2442:	2300      	movs	r3, #0
    2444:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    2446:	9b03      	ldr	r3, [sp, #12]
}
    2448:	4618      	mov	r0, r3
    244a:	b005      	add	sp, #20
    244c:	f85d fb04 	ldr.w	pc, [sp], #4
    2450:	1fff8b40 	.word	0x1fff8b40

00002454 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    2454:	b510      	push	{r4, lr}
    2456:	b084      	sub	sp, #16
    2458:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    245a:	4a9f      	ldr	r2, [pc, #636]	; (26d8 <Clock_Ip_InitClock+0x284>)
    245c:	9b01      	ldr	r3, [sp, #4]
    245e:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    2460:	2101      	movs	r1, #1
    2462:	9801      	ldr	r0, [sp, #4]
    2464:	f003 fa90 	bl	5988 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2468:	4b9b      	ldr	r3, [pc, #620]	; (26d8 <Clock_Ip_InitClock+0x284>)
    246a:	681b      	ldr	r3, [r3, #0]
    246c:	2b00      	cmp	r3, #0
    246e:	d030      	beq.n	24d2 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2470:	2300      	movs	r3, #0
    2472:	9303      	str	r3, [sp, #12]
    2474:	e027      	b.n	24c6 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2476:	9901      	ldr	r1, [sp, #4]
    2478:	9a03      	ldr	r2, [sp, #12]
    247a:	4613      	mov	r3, r2
    247c:	009b      	lsls	r3, r3, #2
    247e:	4413      	add	r3, r2
    2480:	009b      	lsls	r3, r3, #2
    2482:	440b      	add	r3, r1
    2484:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2488:	681a      	ldr	r2, [r3, #0]
    248a:	4994      	ldr	r1, [pc, #592]	; (26dc <Clock_Ip_InitClock+0x288>)
    248c:	4613      	mov	r3, r2
    248e:	00db      	lsls	r3, r3, #3
    2490:	4413      	add	r3, r2
    2492:	440b      	add	r3, r1
    2494:	3301      	adds	r3, #1
    2496:	781b      	ldrb	r3, [r3, #0]
    2498:	461a      	mov	r2, r3
    249a:	4b91      	ldr	r3, [pc, #580]	; (26e0 <Clock_Ip_InitClock+0x28c>)
    249c:	5c9b      	ldrb	r3, [r3, r2]
    249e:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    24a0:	4a90      	ldr	r2, [pc, #576]	; (26e4 <Clock_Ip_InitClock+0x290>)
    24a2:	9b02      	ldr	r3, [sp, #8]
    24a4:	011b      	lsls	r3, r3, #4
    24a6:	4413      	add	r3, r2
    24a8:	6819      	ldr	r1, [r3, #0]
    24aa:	9a03      	ldr	r2, [sp, #12]
    24ac:	4613      	mov	r3, r2
    24ae:	009b      	lsls	r3, r3, #2
    24b0:	4413      	add	r3, r2
    24b2:	009b      	lsls	r3, r3, #2
    24b4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    24b8:	9a01      	ldr	r2, [sp, #4]
    24ba:	4413      	add	r3, r2
    24bc:	4618      	mov	r0, r3
    24be:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    24c0:	9b03      	ldr	r3, [sp, #12]
    24c2:	3301      	adds	r3, #1
    24c4:	9303      	str	r3, [sp, #12]
    24c6:	9b01      	ldr	r3, [sp, #4]
    24c8:	7c9b      	ldrb	r3, [r3, #18]
    24ca:	461a      	mov	r2, r3
    24cc:	9b03      	ldr	r3, [sp, #12]
    24ce:	4293      	cmp	r3, r2
    24d0:	d3d1      	bcc.n	2476 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    24d2:	9801      	ldr	r0, [sp, #4]
    24d4:	f7ff feca 	bl	226c <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    24d8:	2300      	movs	r3, #0
    24da:	9303      	str	r3, [sp, #12]
    24dc:	e029      	b.n	2532 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    24de:	9901      	ldr	r1, [sp, #4]
    24e0:	9a03      	ldr	r2, [sp, #12]
    24e2:	4613      	mov	r3, r2
    24e4:	005b      	lsls	r3, r3, #1
    24e6:	4413      	add	r3, r2
    24e8:	009b      	lsls	r3, r3, #2
    24ea:	440b      	add	r3, r1
    24ec:	3314      	adds	r3, #20
    24ee:	681a      	ldr	r2, [r3, #0]
    24f0:	497a      	ldr	r1, [pc, #488]	; (26dc <Clock_Ip_InitClock+0x288>)
    24f2:	4613      	mov	r3, r2
    24f4:	00db      	lsls	r3, r3, #3
    24f6:	4413      	add	r3, r2
    24f8:	440b      	add	r3, r1
    24fa:	3301      	adds	r3, #1
    24fc:	781b      	ldrb	r3, [r3, #0]
    24fe:	461a      	mov	r2, r3
    2500:	4b79      	ldr	r3, [pc, #484]	; (26e8 <Clock_Ip_InitClock+0x294>)
    2502:	5c9b      	ldrb	r3, [r3, r2]
    2504:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    2506:	4979      	ldr	r1, [pc, #484]	; (26ec <Clock_Ip_InitClock+0x298>)
    2508:	9a02      	ldr	r2, [sp, #8]
    250a:	4613      	mov	r3, r2
    250c:	005b      	lsls	r3, r3, #1
    250e:	4413      	add	r3, r2
    2510:	009b      	lsls	r3, r3, #2
    2512:	440b      	add	r3, r1
    2514:	6819      	ldr	r1, [r3, #0]
    2516:	9a03      	ldr	r2, [sp, #12]
    2518:	4613      	mov	r3, r2
    251a:	005b      	lsls	r3, r3, #1
    251c:	4413      	add	r3, r2
    251e:	009b      	lsls	r3, r3, #2
    2520:	3310      	adds	r3, #16
    2522:	9a01      	ldr	r2, [sp, #4]
    2524:	4413      	add	r3, r2
    2526:	3304      	adds	r3, #4
    2528:	4618      	mov	r0, r3
    252a:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    252c:	9b03      	ldr	r3, [sp, #12]
    252e:	3301      	adds	r3, #1
    2530:	9303      	str	r3, [sp, #12]
    2532:	9b01      	ldr	r3, [sp, #4]
    2534:	7a1b      	ldrb	r3, [r3, #8]
    2536:	461a      	mov	r2, r3
    2538:	9b03      	ldr	r3, [sp, #12]
    253a:	4293      	cmp	r3, r2
    253c:	d3cf      	bcc.n	24de <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    253e:	2300      	movs	r3, #0
    2540:	9303      	str	r3, [sp, #12]
    2542:	e02a      	b.n	259a <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2544:	9901      	ldr	r1, [sp, #4]
    2546:	9a03      	ldr	r2, [sp, #12]
    2548:	4613      	mov	r3, r2
    254a:	009b      	lsls	r3, r3, #2
    254c:	4413      	add	r3, r2
    254e:	009b      	lsls	r3, r3, #2
    2550:	440b      	add	r3, r1
    2552:	332c      	adds	r3, #44	; 0x2c
    2554:	681a      	ldr	r2, [r3, #0]
    2556:	4961      	ldr	r1, [pc, #388]	; (26dc <Clock_Ip_InitClock+0x288>)
    2558:	4613      	mov	r3, r2
    255a:	00db      	lsls	r3, r3, #3
    255c:	4413      	add	r3, r2
    255e:	440b      	add	r3, r1
    2560:	3301      	adds	r3, #1
    2562:	781b      	ldrb	r3, [r3, #0]
    2564:	461a      	mov	r2, r3
    2566:	4b62      	ldr	r3, [pc, #392]	; (26f0 <Clock_Ip_InitClock+0x29c>)
    2568:	5c9b      	ldrb	r3, [r3, r2]
    256a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    256c:	4961      	ldr	r1, [pc, #388]	; (26f4 <Clock_Ip_InitClock+0x2a0>)
    256e:	9a02      	ldr	r2, [sp, #8]
    2570:	4613      	mov	r3, r2
    2572:	009b      	lsls	r3, r3, #2
    2574:	4413      	add	r3, r2
    2576:	009b      	lsls	r3, r3, #2
    2578:	440b      	add	r3, r1
    257a:	3304      	adds	r3, #4
    257c:	6819      	ldr	r1, [r3, #0]
    257e:	9a03      	ldr	r2, [sp, #12]
    2580:	4613      	mov	r3, r2
    2582:	009b      	lsls	r3, r3, #2
    2584:	4413      	add	r3, r2
    2586:	009b      	lsls	r3, r3, #2
    2588:	3328      	adds	r3, #40	; 0x28
    258a:	9a01      	ldr	r2, [sp, #4]
    258c:	4413      	add	r3, r2
    258e:	3304      	adds	r3, #4
    2590:	4618      	mov	r0, r3
    2592:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2594:	9b03      	ldr	r3, [sp, #12]
    2596:	3301      	adds	r3, #1
    2598:	9303      	str	r3, [sp, #12]
    259a:	9b01      	ldr	r3, [sp, #4]
    259c:	7a5b      	ldrb	r3, [r3, #9]
    259e:	461a      	mov	r2, r3
    25a0:	9b03      	ldr	r3, [sp, #12]
    25a2:	4293      	cmp	r3, r2
    25a4:	d3ce      	bcc.n	2544 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    25a6:	9801      	ldr	r0, [sp, #4]
    25a8:	f7ff fdb0 	bl	210c <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    25ac:	2300      	movs	r3, #0
    25ae:	9303      	str	r3, [sp, #12]
    25b0:	e028      	b.n	2604 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    25b2:	9901      	ldr	r1, [sp, #4]
    25b4:	9a03      	ldr	r2, [sp, #12]
    25b6:	4613      	mov	r3, r2
    25b8:	009b      	lsls	r3, r3, #2
    25ba:	4413      	add	r3, r2
    25bc:	009b      	lsls	r3, r3, #2
    25be:	440b      	add	r3, r1
    25c0:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    25c4:	681a      	ldr	r2, [r3, #0]
    25c6:	4945      	ldr	r1, [pc, #276]	; (26dc <Clock_Ip_InitClock+0x288>)
    25c8:	4613      	mov	r3, r2
    25ca:	00db      	lsls	r3, r3, #3
    25cc:	4413      	add	r3, r2
    25ce:	440b      	add	r3, r1
    25d0:	3301      	adds	r3, #1
    25d2:	781b      	ldrb	r3, [r3, #0]
    25d4:	461a      	mov	r2, r3
    25d6:	4b48      	ldr	r3, [pc, #288]	; (26f8 <Clock_Ip_InitClock+0x2a4>)
    25d8:	5c9b      	ldrb	r3, [r3, r2]
    25da:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    25dc:	4a47      	ldr	r2, [pc, #284]	; (26fc <Clock_Ip_InitClock+0x2a8>)
    25de:	9b02      	ldr	r3, [sp, #8]
    25e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    25e4:	9a03      	ldr	r2, [sp, #12]
    25e6:	4613      	mov	r3, r2
    25e8:	009b      	lsls	r3, r3, #2
    25ea:	4413      	add	r3, r2
    25ec:	009b      	lsls	r3, r3, #2
    25ee:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    25f2:	9a01      	ldr	r2, [sp, #4]
    25f4:	4413      	add	r3, r2
    25f6:	3304      	adds	r3, #4
    25f8:	9903      	ldr	r1, [sp, #12]
    25fa:	4618      	mov	r0, r3
    25fc:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    25fe:	9b03      	ldr	r3, [sp, #12]
    2600:	3301      	adds	r3, #1
    2602:	9303      	str	r3, [sp, #12]
    2604:	9b01      	ldr	r3, [sp, #4]
    2606:	7c5b      	ldrb	r3, [r3, #17]
    2608:	461a      	mov	r2, r3
    260a:	9b03      	ldr	r3, [sp, #12]
    260c:	4293      	cmp	r3, r2
    260e:	d3d0      	bcc.n	25b2 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2610:	2300      	movs	r3, #0
    2612:	9303      	str	r3, [sp, #12]
    2614:	e026      	b.n	2664 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2616:	9901      	ldr	r1, [sp, #4]
    2618:	9a03      	ldr	r2, [sp, #12]
    261a:	4613      	mov	r3, r2
    261c:	005b      	lsls	r3, r3, #1
    261e:	4413      	add	r3, r2
    2620:	009b      	lsls	r3, r3, #2
    2622:	440b      	add	r3, r1
    2624:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2628:	681a      	ldr	r2, [r3, #0]
    262a:	492c      	ldr	r1, [pc, #176]	; (26dc <Clock_Ip_InitClock+0x288>)
    262c:	4613      	mov	r3, r2
    262e:	00db      	lsls	r3, r3, #3
    2630:	4413      	add	r3, r2
    2632:	440b      	add	r3, r1
    2634:	3301      	adds	r3, #1
    2636:	781b      	ldrb	r3, [r3, #0]
    2638:	461a      	mov	r2, r3
    263a:	4b31      	ldr	r3, [pc, #196]	; (2700 <Clock_Ip_InitClock+0x2ac>)
    263c:	5c9b      	ldrb	r3, [r3, r2]
    263e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    2640:	4a30      	ldr	r2, [pc, #192]	; (2704 <Clock_Ip_InitClock+0x2b0>)
    2642:	9b02      	ldr	r3, [sp, #8]
    2644:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    2648:	9a03      	ldr	r2, [sp, #12]
    264a:	4613      	mov	r3, r2
    264c:	005b      	lsls	r3, r3, #1
    264e:	4413      	add	r3, r2
    2650:	009b      	lsls	r3, r3, #2
    2652:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2656:	9a01      	ldr	r2, [sp, #4]
    2658:	4413      	add	r3, r2
    265a:	4618      	mov	r0, r3
    265c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    265e:	9b03      	ldr	r3, [sp, #12]
    2660:	3301      	adds	r3, #1
    2662:	9303      	str	r3, [sp, #12]
    2664:	9b01      	ldr	r3, [sp, #4]
    2666:	7b5b      	ldrb	r3, [r3, #13]
    2668:	461a      	mov	r2, r3
    266a:	9b03      	ldr	r3, [sp, #12]
    266c:	4293      	cmp	r3, r2
    266e:	d3d2      	bcc.n	2616 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2670:	2300      	movs	r3, #0
    2672:	9303      	str	r3, [sp, #12]
    2674:	e026      	b.n	26c4 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    2676:	9901      	ldr	r1, [sp, #4]
    2678:	9a03      	ldr	r2, [sp, #12]
    267a:	4613      	mov	r3, r2
    267c:	005b      	lsls	r3, r3, #1
    267e:	4413      	add	r3, r2
    2680:	009b      	lsls	r3, r3, #2
    2682:	440b      	add	r3, r1
    2684:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2688:	681a      	ldr	r2, [r3, #0]
    268a:	4914      	ldr	r1, [pc, #80]	; (26dc <Clock_Ip_InitClock+0x288>)
    268c:	4613      	mov	r3, r2
    268e:	00db      	lsls	r3, r3, #3
    2690:	4413      	add	r3, r2
    2692:	440b      	add	r3, r1
    2694:	3301      	adds	r3, #1
    2696:	781b      	ldrb	r3, [r3, #0]
    2698:	461a      	mov	r2, r3
    269a:	4b1b      	ldr	r3, [pc, #108]	; (2708 <Clock_Ip_InitClock+0x2b4>)
    269c:	5c9b      	ldrb	r3, [r3, r2]
    269e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    26a0:	4a1a      	ldr	r2, [pc, #104]	; (270c <Clock_Ip_InitClock+0x2b8>)
    26a2:	9b02      	ldr	r3, [sp, #8]
    26a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    26a8:	9a03      	ldr	r2, [sp, #12]
    26aa:	4613      	mov	r3, r2
    26ac:	005b      	lsls	r3, r3, #1
    26ae:	4413      	add	r3, r2
    26b0:	009b      	lsls	r3, r3, #2
    26b2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    26b6:	9a01      	ldr	r2, [sp, #4]
    26b8:	4413      	add	r3, r2
    26ba:	4618      	mov	r0, r3
    26bc:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    26be:	9b03      	ldr	r3, [sp, #12]
    26c0:	3301      	adds	r3, #1
    26c2:	9303      	str	r3, [sp, #12]
    26c4:	9b01      	ldr	r3, [sp, #4]
    26c6:	7b1b      	ldrb	r3, [r3, #12]
    26c8:	461a      	mov	r2, r3
    26ca:	9b03      	ldr	r3, [sp, #12]
    26cc:	4293      	cmp	r3, r2
    26ce:	d3d2      	bcc.n	2676 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    26d0:	2300      	movs	r3, #0
    26d2:	9303      	str	r3, [sp, #12]
    26d4:	e044      	b.n	2760 <Clock_Ip_InitClock+0x30c>
    26d6:	bf00      	nop
    26d8:	1fff8b38 	.word	0x1fff8b38
    26dc:	00017ec4 	.word	0x00017ec4
    26e0:	00017eb4 	.word	0x00017eb4
    26e4:	000184c0 	.word	0x000184c0
    26e8:	00017e54 	.word	0x00017e54
    26ec:	00018484 	.word	0x00018484
    26f0:	00017e44 	.word	0x00017e44
    26f4:	00018418 	.word	0x00018418
    26f8:	00017ea4 	.word	0x00017ea4
    26fc:	000184f8 	.word	0x000184f8
    2700:	00017e34 	.word	0x00017e34
    2704:	00018410 	.word	0x00018410
    2708:	00017e24 	.word	0x00017e24
    270c:	000183d4 	.word	0x000183d4
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2710:	9901      	ldr	r1, [sp, #4]
    2712:	9a03      	ldr	r2, [sp, #12]
    2714:	4613      	mov	r3, r2
    2716:	005b      	lsls	r3, r3, #1
    2718:	4413      	add	r3, r2
    271a:	009b      	lsls	r3, r3, #2
    271c:	440b      	add	r3, r1
    271e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2722:	681a      	ldr	r2, [r3, #0]
    2724:	49ac      	ldr	r1, [pc, #688]	; (29d8 <Clock_Ip_InitClock+0x584>)
    2726:	4613      	mov	r3, r2
    2728:	00db      	lsls	r3, r3, #3
    272a:	4413      	add	r3, r2
    272c:	440b      	add	r3, r1
    272e:	3301      	adds	r3, #1
    2730:	781b      	ldrb	r3, [r3, #0]
    2732:	461a      	mov	r2, r3
    2734:	4ba9      	ldr	r3, [pc, #676]	; (29dc <Clock_Ip_InitClock+0x588>)
    2736:	5c9b      	ldrb	r3, [r3, r2]
    2738:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    273a:	4aa9      	ldr	r2, [pc, #676]	; (29e0 <Clock_Ip_InitClock+0x58c>)
    273c:	9b02      	ldr	r3, [sp, #8]
    273e:	00db      	lsls	r3, r3, #3
    2740:	4413      	add	r3, r2
    2742:	6859      	ldr	r1, [r3, #4]
    2744:	9a03      	ldr	r2, [sp, #12]
    2746:	4613      	mov	r3, r2
    2748:	005b      	lsls	r3, r3, #1
    274a:	4413      	add	r3, r2
    274c:	009b      	lsls	r3, r3, #2
    274e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2752:	9a01      	ldr	r2, [sp, #4]
    2754:	4413      	add	r3, r2
    2756:	4618      	mov	r0, r3
    2758:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    275a:	9b03      	ldr	r3, [sp, #12]
    275c:	3301      	adds	r3, #1
    275e:	9303      	str	r3, [sp, #12]
    2760:	9b01      	ldr	r3, [sp, #4]
    2762:	7b5b      	ldrb	r3, [r3, #13]
    2764:	461a      	mov	r2, r3
    2766:	9b03      	ldr	r3, [sp, #12]
    2768:	4293      	cmp	r3, r2
    276a:	d3d1      	bcc.n	2710 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    276c:	2300      	movs	r3, #0
    276e:	9303      	str	r3, [sp, #12]
    2770:	e029      	b.n	27c6 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    2772:	9901      	ldr	r1, [sp, #4]
    2774:	9a03      	ldr	r2, [sp, #12]
    2776:	4613      	mov	r3, r2
    2778:	009b      	lsls	r3, r3, #2
    277a:	4413      	add	r3, r2
    277c:	00db      	lsls	r3, r3, #3
    277e:	440b      	add	r3, r1
    2780:	3340      	adds	r3, #64	; 0x40
    2782:	681a      	ldr	r2, [r3, #0]
    2784:	4994      	ldr	r1, [pc, #592]	; (29d8 <Clock_Ip_InitClock+0x584>)
    2786:	4613      	mov	r3, r2
    2788:	00db      	lsls	r3, r3, #3
    278a:	4413      	add	r3, r2
    278c:	440b      	add	r3, r1
    278e:	3301      	adds	r3, #1
    2790:	781b      	ldrb	r3, [r3, #0]
    2792:	461a      	mov	r2, r3
    2794:	4b93      	ldr	r3, [pc, #588]	; (29e4 <Clock_Ip_InitClock+0x590>)
    2796:	5c9b      	ldrb	r3, [r3, r2]
    2798:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    279a:	4993      	ldr	r1, [pc, #588]	; (29e8 <Clock_Ip_InitClock+0x594>)
    279c:	9a02      	ldr	r2, [sp, #8]
    279e:	4613      	mov	r3, r2
    27a0:	009b      	lsls	r3, r3, #2
    27a2:	4413      	add	r3, r2
    27a4:	009b      	lsls	r3, r3, #2
    27a6:	440b      	add	r3, r1
    27a8:	3304      	adds	r3, #4
    27aa:	6819      	ldr	r1, [r3, #0]
    27ac:	9a03      	ldr	r2, [sp, #12]
    27ae:	4613      	mov	r3, r2
    27b0:	009b      	lsls	r3, r3, #2
    27b2:	4413      	add	r3, r2
    27b4:	00db      	lsls	r3, r3, #3
    27b6:	3340      	adds	r3, #64	; 0x40
    27b8:	9a01      	ldr	r2, [sp, #4]
    27ba:	4413      	add	r3, r2
    27bc:	4618      	mov	r0, r3
    27be:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    27c0:	9b03      	ldr	r3, [sp, #12]
    27c2:	3301      	adds	r3, #1
    27c4:	9303      	str	r3, [sp, #12]
    27c6:	9b01      	ldr	r3, [sp, #4]
    27c8:	7a9b      	ldrb	r3, [r3, #10]
    27ca:	461a      	mov	r2, r3
    27cc:	9b03      	ldr	r3, [sp, #12]
    27ce:	4293      	cmp	r3, r2
    27d0:	d3cf      	bcc.n	2772 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    27d2:	2300      	movs	r3, #0
    27d4:	9303      	str	r3, [sp, #12]
    27d6:	e029      	b.n	282c <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    27d8:	9901      	ldr	r1, [sp, #4]
    27da:	9a03      	ldr	r2, [sp, #12]
    27dc:	4613      	mov	r3, r2
    27de:	009b      	lsls	r3, r3, #2
    27e0:	4413      	add	r3, r2
    27e2:	009b      	lsls	r3, r3, #2
    27e4:	440b      	add	r3, r1
    27e6:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    27ea:	681a      	ldr	r2, [r3, #0]
    27ec:	497a      	ldr	r1, [pc, #488]	; (29d8 <Clock_Ip_InitClock+0x584>)
    27ee:	4613      	mov	r3, r2
    27f0:	00db      	lsls	r3, r3, #3
    27f2:	4413      	add	r3, r2
    27f4:	440b      	add	r3, r1
    27f6:	3301      	adds	r3, #1
    27f8:	781b      	ldrb	r3, [r3, #0]
    27fa:	461a      	mov	r2, r3
    27fc:	4b7b      	ldr	r3, [pc, #492]	; (29ec <Clock_Ip_InitClock+0x598>)
    27fe:	5c9b      	ldrb	r3, [r3, r2]
    2800:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    2802:	4a7b      	ldr	r2, [pc, #492]	; (29f0 <Clock_Ip_InitClock+0x59c>)
    2804:	9b02      	ldr	r3, [sp, #8]
    2806:	011b      	lsls	r3, r3, #4
    2808:	4413      	add	r3, r2
    280a:	3304      	adds	r3, #4
    280c:	681c      	ldr	r4, [r3, #0]
    280e:	9a03      	ldr	r2, [sp, #12]
    2810:	4613      	mov	r3, r2
    2812:	009b      	lsls	r3, r3, #2
    2814:	4413      	add	r3, r2
    2816:	009b      	lsls	r3, r3, #2
    2818:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    281c:	9a01      	ldr	r2, [sp, #4]
    281e:	4413      	add	r3, r2
    2820:	9903      	ldr	r1, [sp, #12]
    2822:	4618      	mov	r0, r3
    2824:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    2826:	9b03      	ldr	r3, [sp, #12]
    2828:	3301      	adds	r3, #1
    282a:	9303      	str	r3, [sp, #12]
    282c:	9b01      	ldr	r3, [sp, #4]
    282e:	7c9b      	ldrb	r3, [r3, #18]
    2830:	461a      	mov	r2, r3
    2832:	9b03      	ldr	r3, [sp, #12]
    2834:	4293      	cmp	r3, r2
    2836:	d3cf      	bcc.n	27d8 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2838:	2300      	movs	r3, #0
    283a:	9303      	str	r3, [sp, #12]
    283c:	e02a      	b.n	2894 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    283e:	9901      	ldr	r1, [sp, #4]
    2840:	9a03      	ldr	r2, [sp, #12]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	440b      	add	r3, r1
    284c:	332c      	adds	r3, #44	; 0x2c
    284e:	681a      	ldr	r2, [r3, #0]
    2850:	4961      	ldr	r1, [pc, #388]	; (29d8 <Clock_Ip_InitClock+0x584>)
    2852:	4613      	mov	r3, r2
    2854:	00db      	lsls	r3, r3, #3
    2856:	4413      	add	r3, r2
    2858:	440b      	add	r3, r1
    285a:	3301      	adds	r3, #1
    285c:	781b      	ldrb	r3, [r3, #0]
    285e:	461a      	mov	r2, r3
    2860:	4b64      	ldr	r3, [pc, #400]	; (29f4 <Clock_Ip_InitClock+0x5a0>)
    2862:	5c9b      	ldrb	r3, [r3, r2]
    2864:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    2866:	4964      	ldr	r1, [pc, #400]	; (29f8 <Clock_Ip_InitClock+0x5a4>)
    2868:	9a02      	ldr	r2, [sp, #8]
    286a:	4613      	mov	r3, r2
    286c:	009b      	lsls	r3, r3, #2
    286e:	4413      	add	r3, r2
    2870:	009b      	lsls	r3, r3, #2
    2872:	440b      	add	r3, r1
    2874:	3308      	adds	r3, #8
    2876:	6819      	ldr	r1, [r3, #0]
    2878:	9a03      	ldr	r2, [sp, #12]
    287a:	4613      	mov	r3, r2
    287c:	009b      	lsls	r3, r3, #2
    287e:	4413      	add	r3, r2
    2880:	009b      	lsls	r3, r3, #2
    2882:	3328      	adds	r3, #40	; 0x28
    2884:	9a01      	ldr	r2, [sp, #4]
    2886:	4413      	add	r3, r2
    2888:	3304      	adds	r3, #4
    288a:	4618      	mov	r0, r3
    288c:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    288e:	9b03      	ldr	r3, [sp, #12]
    2890:	3301      	adds	r3, #1
    2892:	9303      	str	r3, [sp, #12]
    2894:	9b01      	ldr	r3, [sp, #4]
    2896:	7a5b      	ldrb	r3, [r3, #9]
    2898:	461a      	mov	r2, r3
    289a:	9b03      	ldr	r3, [sp, #12]
    289c:	4293      	cmp	r3, r2
    289e:	d3ce      	bcc.n	283e <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    28a0:	2300      	movs	r3, #0
    28a2:	9303      	str	r3, [sp, #12]
    28a4:	e029      	b.n	28fa <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    28a6:	9901      	ldr	r1, [sp, #4]
    28a8:	9a03      	ldr	r2, [sp, #12]
    28aa:	4613      	mov	r3, r2
    28ac:	009b      	lsls	r3, r3, #2
    28ae:	4413      	add	r3, r2
    28b0:	00db      	lsls	r3, r3, #3
    28b2:	440b      	add	r3, r1
    28b4:	3340      	adds	r3, #64	; 0x40
    28b6:	681a      	ldr	r2, [r3, #0]
    28b8:	4947      	ldr	r1, [pc, #284]	; (29d8 <Clock_Ip_InitClock+0x584>)
    28ba:	4613      	mov	r3, r2
    28bc:	00db      	lsls	r3, r3, #3
    28be:	4413      	add	r3, r2
    28c0:	440b      	add	r3, r1
    28c2:	3301      	adds	r3, #1
    28c4:	781b      	ldrb	r3, [r3, #0]
    28c6:	461a      	mov	r2, r3
    28c8:	4b46      	ldr	r3, [pc, #280]	; (29e4 <Clock_Ip_InitClock+0x590>)
    28ca:	5c9b      	ldrb	r3, [r3, r2]
    28cc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    28ce:	4946      	ldr	r1, [pc, #280]	; (29e8 <Clock_Ip_InitClock+0x594>)
    28d0:	9a02      	ldr	r2, [sp, #8]
    28d2:	4613      	mov	r3, r2
    28d4:	009b      	lsls	r3, r3, #2
    28d6:	4413      	add	r3, r2
    28d8:	009b      	lsls	r3, r3, #2
    28da:	440b      	add	r3, r1
    28dc:	330c      	adds	r3, #12
    28de:	6819      	ldr	r1, [r3, #0]
    28e0:	9a03      	ldr	r2, [sp, #12]
    28e2:	4613      	mov	r3, r2
    28e4:	009b      	lsls	r3, r3, #2
    28e6:	4413      	add	r3, r2
    28e8:	00db      	lsls	r3, r3, #3
    28ea:	3340      	adds	r3, #64	; 0x40
    28ec:	9a01      	ldr	r2, [sp, #4]
    28ee:	4413      	add	r3, r2
    28f0:	4618      	mov	r0, r3
    28f2:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    28f4:	9b03      	ldr	r3, [sp, #12]
    28f6:	3301      	adds	r3, #1
    28f8:	9303      	str	r3, [sp, #12]
    28fa:	9b01      	ldr	r3, [sp, #4]
    28fc:	7a9b      	ldrb	r3, [r3, #10]
    28fe:	461a      	mov	r2, r3
    2900:	9b03      	ldr	r3, [sp, #12]
    2902:	4293      	cmp	r3, r2
    2904:	d3cf      	bcc.n	28a6 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    2906:	2300      	movs	r3, #0
    2908:	9303      	str	r3, [sp, #12]
    290a:	e025      	b.n	2958 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    290c:	9a01      	ldr	r2, [sp, #4]
    290e:	9b03      	ldr	r3, [sp, #12]
    2910:	3324      	adds	r3, #36	; 0x24
    2912:	011b      	lsls	r3, r3, #4
    2914:	4413      	add	r3, r2
    2916:	3304      	adds	r3, #4
    2918:	681a      	ldr	r2, [r3, #0]
    291a:	492f      	ldr	r1, [pc, #188]	; (29d8 <Clock_Ip_InitClock+0x584>)
    291c:	4613      	mov	r3, r2
    291e:	00db      	lsls	r3, r3, #3
    2920:	4413      	add	r3, r2
    2922:	440b      	add	r3, r1
    2924:	3301      	adds	r3, #1
    2926:	781b      	ldrb	r3, [r3, #0]
    2928:	461a      	mov	r2, r3
    292a:	4b34      	ldr	r3, [pc, #208]	; (29fc <Clock_Ip_InitClock+0x5a8>)
    292c:	5c9b      	ldrb	r3, [r3, r2]
    292e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    2930:	4933      	ldr	r1, [pc, #204]	; (2a00 <Clock_Ip_InitClock+0x5ac>)
    2932:	9a02      	ldr	r2, [sp, #8]
    2934:	4613      	mov	r3, r2
    2936:	005b      	lsls	r3, r3, #1
    2938:	4413      	add	r3, r2
    293a:	009b      	lsls	r3, r3, #2
    293c:	440b      	add	r3, r1
    293e:	3304      	adds	r3, #4
    2940:	681b      	ldr	r3, [r3, #0]
    2942:	9a03      	ldr	r2, [sp, #12]
    2944:	3224      	adds	r2, #36	; 0x24
    2946:	0112      	lsls	r2, r2, #4
    2948:	9901      	ldr	r1, [sp, #4]
    294a:	440a      	add	r2, r1
    294c:	3204      	adds	r2, #4
    294e:	4610      	mov	r0, r2
    2950:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    2952:	9b03      	ldr	r3, [sp, #12]
    2954:	3301      	adds	r3, #1
    2956:	9303      	str	r3, [sp, #12]
    2958:	9b01      	ldr	r3, [sp, #4]
    295a:	7b9b      	ldrb	r3, [r3, #14]
    295c:	461a      	mov	r2, r3
    295e:	9b03      	ldr	r3, [sp, #12]
    2960:	4293      	cmp	r3, r2
    2962:	d3d3      	bcc.n	290c <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    2964:	4b27      	ldr	r3, [pc, #156]	; (2a04 <Clock_Ip_InitClock+0x5b0>)
    2966:	2200      	movs	r2, #0
    2968:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    296a:	4b26      	ldr	r3, [pc, #152]	; (2a04 <Clock_Ip_InitClock+0x5b0>)
    296c:	2200      	movs	r2, #0
    296e:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    2970:	4b24      	ldr	r3, [pc, #144]	; (2a04 <Clock_Ip_InitClock+0x5b0>)
    2972:	2201      	movs	r2, #1
    2974:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    2976:	4b23      	ldr	r3, [pc, #140]	; (2a04 <Clock_Ip_InitClock+0x5b0>)
    2978:	2200      	movs	r2, #0
    297a:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    297c:	f000 fa9c 	bl	2eb8 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2980:	2300      	movs	r3, #0
    2982:	9303      	str	r3, [sp, #12]
    2984:	e04c      	b.n	2a20 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    2986:	9a01      	ldr	r2, [sp, #4]
    2988:	9b03      	ldr	r3, [sp, #12]
    298a:	330d      	adds	r3, #13
    298c:	00db      	lsls	r3, r3, #3
    298e:	4413      	add	r3, r2
    2990:	685b      	ldr	r3, [r3, #4]
    2992:	4a1d      	ldr	r2, [pc, #116]	; (2a08 <Clock_Ip_InitClock+0x5b4>)
    2994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2998:	2b03      	cmp	r3, #3
    299a:	d03b      	beq.n	2a14 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    299c:	9b01      	ldr	r3, [sp, #4]
    299e:	9a03      	ldr	r2, [sp, #12]
    29a0:	320d      	adds	r2, #13
    29a2:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    29a6:	490c      	ldr	r1, [pc, #48]	; (29d8 <Clock_Ip_InitClock+0x584>)
    29a8:	4613      	mov	r3, r2
    29aa:	00db      	lsls	r3, r3, #3
    29ac:	4413      	add	r3, r2
    29ae:	440b      	add	r3, r1
    29b0:	3301      	adds	r3, #1
    29b2:	781b      	ldrb	r3, [r3, #0]
    29b4:	461a      	mov	r2, r3
    29b6:	4b15      	ldr	r3, [pc, #84]	; (2a0c <Clock_Ip_InitClock+0x5b8>)
    29b8:	5c9b      	ldrb	r3, [r3, r2]
    29ba:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    29bc:	4a14      	ldr	r2, [pc, #80]	; (2a10 <Clock_Ip_InitClock+0x5bc>)
    29be:	9b02      	ldr	r3, [sp, #8]
    29c0:	00db      	lsls	r3, r3, #3
    29c2:	4413      	add	r3, r2
    29c4:	685b      	ldr	r3, [r3, #4]
    29c6:	9a03      	ldr	r2, [sp, #12]
    29c8:	320d      	adds	r2, #13
    29ca:	00d2      	lsls	r2, r2, #3
    29cc:	9901      	ldr	r1, [sp, #4]
    29ce:	440a      	add	r2, r1
    29d0:	4610      	mov	r0, r2
    29d2:	4798      	blx	r3
    29d4:	e021      	b.n	2a1a <Clock_Ip_InitClock+0x5c6>
    29d6:	bf00      	nop
    29d8:	00017ec4 	.word	0x00017ec4
    29dc:	00017e34 	.word	0x00017e34
    29e0:	00018410 	.word	0x00018410
    29e4:	00017e84 	.word	0x00017e84
    29e8:	000184d0 	.word	0x000184d0
    29ec:	00017eb4 	.word	0x00017eb4
    29f0:	000184c0 	.word	0x000184c0
    29f4:	00017e44 	.word	0x00017e44
    29f8:	00018418 	.word	0x00018418
    29fc:	00017e74 	.word	0x00017e74
    2a00:	00018440 	.word	0x00018440
    2a04:	1fff8b40 	.word	0x1fff8b40
    2a08:	00018310 	.word	0x00018310
    2a0c:	00017e94 	.word	0x00017e94
    2a10:	000184fc 	.word	0x000184fc
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    2a14:	4b3a      	ldr	r3, [pc, #232]	; (2b00 <Clock_Ip_InitClock+0x6ac>)
    2a16:	2201      	movs	r2, #1
    2a18:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2a1a:	9b03      	ldr	r3, [sp, #12]
    2a1c:	3301      	adds	r3, #1
    2a1e:	9303      	str	r3, [sp, #12]
    2a20:	9b01      	ldr	r3, [sp, #4]
    2a22:	7adb      	ldrb	r3, [r3, #11]
    2a24:	461a      	mov	r2, r3
    2a26:	9b03      	ldr	r3, [sp, #12]
    2a28:	4293      	cmp	r3, r2
    2a2a:	d3ac      	bcc.n	2986 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    2a2c:	4b34      	ldr	r3, [pc, #208]	; (2b00 <Clock_Ip_InitClock+0x6ac>)
    2a2e:	781b      	ldrb	r3, [r3, #0]
    2a30:	f083 0301 	eor.w	r3, r3, #1
    2a34:	b2db      	uxtb	r3, r3
    2a36:	2b00      	cmp	r3, #0
    2a38:	d05e      	beq.n	2af8 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2a3a:	2300      	movs	r3, #0
    2a3c:	9303      	str	r3, [sp, #12]
    2a3e:	e01f      	b.n	2a80 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2a40:	9a01      	ldr	r2, [sp, #4]
    2a42:	9b03      	ldr	r3, [sp, #12]
    2a44:	334e      	adds	r3, #78	; 0x4e
    2a46:	00db      	lsls	r3, r3, #3
    2a48:	4413      	add	r3, r2
    2a4a:	685a      	ldr	r2, [r3, #4]
    2a4c:	492d      	ldr	r1, [pc, #180]	; (2b04 <Clock_Ip_InitClock+0x6b0>)
    2a4e:	4613      	mov	r3, r2
    2a50:	00db      	lsls	r3, r3, #3
    2a52:	4413      	add	r3, r2
    2a54:	440b      	add	r3, r1
    2a56:	3301      	adds	r3, #1
    2a58:	781b      	ldrb	r3, [r3, #0]
    2a5a:	461a      	mov	r2, r3
    2a5c:	4b2a      	ldr	r3, [pc, #168]	; (2b08 <Clock_Ip_InitClock+0x6b4>)
    2a5e:	5c9b      	ldrb	r3, [r3, r2]
    2a60:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    2a62:	4a2a      	ldr	r2, [pc, #168]	; (2b0c <Clock_Ip_InitClock+0x6b8>)
    2a64:	9b02      	ldr	r3, [sp, #8]
    2a66:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2a6a:	9a03      	ldr	r2, [sp, #12]
    2a6c:	324e      	adds	r2, #78	; 0x4e
    2a6e:	00d2      	lsls	r2, r2, #3
    2a70:	9901      	ldr	r1, [sp, #4]
    2a72:	440a      	add	r2, r1
    2a74:	3204      	adds	r2, #4
    2a76:	4610      	mov	r0, r2
    2a78:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2a7a:	9b03      	ldr	r3, [sp, #12]
    2a7c:	3301      	adds	r3, #1
    2a7e:	9303      	str	r3, [sp, #12]
    2a80:	9b01      	ldr	r3, [sp, #4]
    2a82:	7c1b      	ldrb	r3, [r3, #16]
    2a84:	461a      	mov	r2, r3
    2a86:	9b03      	ldr	r3, [sp, #12]
    2a88:	4293      	cmp	r3, r2
    2a8a:	d3d9      	bcc.n	2a40 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2a8c:	2300      	movs	r3, #0
    2a8e:	9303      	str	r3, [sp, #12]
    2a90:	e028      	b.n	2ae4 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2a92:	9901      	ldr	r1, [sp, #4]
    2a94:	9a03      	ldr	r2, [sp, #12]
    2a96:	4613      	mov	r3, r2
    2a98:	009b      	lsls	r3, r3, #2
    2a9a:	4413      	add	r3, r2
    2a9c:	009b      	lsls	r3, r3, #2
    2a9e:	440b      	add	r3, r1
    2aa0:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2aa4:	681a      	ldr	r2, [r3, #0]
    2aa6:	4917      	ldr	r1, [pc, #92]	; (2b04 <Clock_Ip_InitClock+0x6b0>)
    2aa8:	4613      	mov	r3, r2
    2aaa:	00db      	lsls	r3, r3, #3
    2aac:	4413      	add	r3, r2
    2aae:	440b      	add	r3, r1
    2ab0:	3301      	adds	r3, #1
    2ab2:	781b      	ldrb	r3, [r3, #0]
    2ab4:	461a      	mov	r2, r3
    2ab6:	4b16      	ldr	r3, [pc, #88]	; (2b10 <Clock_Ip_InitClock+0x6bc>)
    2ab8:	5c9b      	ldrb	r3, [r3, r2]
    2aba:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    2abc:	4a15      	ldr	r2, [pc, #84]	; (2b14 <Clock_Ip_InitClock+0x6c0>)
    2abe:	9b02      	ldr	r3, [sp, #8]
    2ac0:	011b      	lsls	r3, r3, #4
    2ac2:	4413      	add	r3, r2
    2ac4:	330c      	adds	r3, #12
    2ac6:	6819      	ldr	r1, [r3, #0]
    2ac8:	9a03      	ldr	r2, [sp, #12]
    2aca:	4613      	mov	r3, r2
    2acc:	009b      	lsls	r3, r3, #2
    2ace:	4413      	add	r3, r2
    2ad0:	009b      	lsls	r3, r3, #2
    2ad2:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2ad6:	9a01      	ldr	r2, [sp, #4]
    2ad8:	4413      	add	r3, r2
    2ada:	4618      	mov	r0, r3
    2adc:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2ade:	9b03      	ldr	r3, [sp, #12]
    2ae0:	3301      	adds	r3, #1
    2ae2:	9303      	str	r3, [sp, #12]
    2ae4:	9b01      	ldr	r3, [sp, #4]
    2ae6:	7c9b      	ldrb	r3, [r3, #18]
    2ae8:	461a      	mov	r2, r3
    2aea:	9b03      	ldr	r3, [sp, #12]
    2aec:	4293      	cmp	r3, r2
    2aee:	d3d0      	bcc.n	2a92 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2af0:	2104      	movs	r1, #4
    2af2:	9801      	ldr	r0, [sp, #4]
    2af4:	f002 ff48 	bl	5988 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    2af8:	bf00      	nop
    2afa:	b004      	add	sp, #16
    2afc:	bd10      	pop	{r4, pc}
    2afe:	bf00      	nop
    2b00:	1fff8b40 	.word	0x1fff8b40
    2b04:	00017ec4 	.word	0x00017ec4
    2b08:	00017e64 	.word	0x00017e64
    2b0c:	0001844c 	.word	0x0001844c
    2b10:	00017eb4 	.word	0x00017eb4
    2b14:	000184c0 	.word	0x000184c0

00002b18 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    2b18:	b500      	push	{lr}
    2b1a:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    2b1c:	2302      	movs	r3, #2
    2b1e:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2b20:	2300      	movs	r3, #0
    2b22:	9304      	str	r3, [sp, #16]
    2b24:	e02c      	b.n	2b80 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    2b26:	4a36      	ldr	r2, [pc, #216]	; (2c00 <Clock_Ip_GetPllStatus+0xe8>)
    2b28:	9b04      	ldr	r3, [sp, #16]
    2b2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2b2e:	4935      	ldr	r1, [pc, #212]	; (2c04 <Clock_Ip_GetPllStatus+0xec>)
    2b30:	4613      	mov	r3, r2
    2b32:	00db      	lsls	r3, r3, #3
    2b34:	4413      	add	r3, r2
    2b36:	440b      	add	r3, r1
    2b38:	3301      	adds	r3, #1
    2b3a:	781b      	ldrb	r3, [r3, #0]
    2b3c:	461a      	mov	r2, r3
    2b3e:	4b32      	ldr	r3, [pc, #200]	; (2c08 <Clock_Ip_GetPllStatus+0xf0>)
    2b40:	5c9b      	ldrb	r3, [r3, r2]
    2b42:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    2b44:	4931      	ldr	r1, [pc, #196]	; (2c0c <Clock_Ip_GetPllStatus+0xf4>)
    2b46:	9a03      	ldr	r2, [sp, #12]
    2b48:	4613      	mov	r3, r2
    2b4a:	009b      	lsls	r3, r3, #2
    2b4c:	4413      	add	r3, r2
    2b4e:	009b      	lsls	r3, r3, #2
    2b50:	440b      	add	r3, r1
    2b52:	3308      	adds	r3, #8
    2b54:	681b      	ldr	r3, [r3, #0]
    2b56:	492a      	ldr	r1, [pc, #168]	; (2c00 <Clock_Ip_GetPllStatus+0xe8>)
    2b58:	9a04      	ldr	r2, [sp, #16]
    2b5a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2b5e:	4610      	mov	r0, r2
    2b60:	4798      	blx	r3
    2b62:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    2b64:	9b02      	ldr	r3, [sp, #8]
    2b66:	2b01      	cmp	r3, #1
    2b68:	d102      	bne.n	2b70 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    2b6a:	2301      	movs	r3, #1
    2b6c:	9305      	str	r3, [sp, #20]
            break;
    2b6e:	e00d      	b.n	2b8c <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    2b70:	9b02      	ldr	r3, [sp, #8]
    2b72:	2b02      	cmp	r3, #2
    2b74:	d101      	bne.n	2b7a <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    2b76:	2300      	movs	r3, #0
    2b78:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2b7a:	9b04      	ldr	r3, [sp, #16]
    2b7c:	3301      	adds	r3, #1
    2b7e:	9304      	str	r3, [sp, #16]
    2b80:	4b23      	ldr	r3, [pc, #140]	; (2c10 <Clock_Ip_GetPllStatus+0xf8>)
    2b82:	789b      	ldrb	r3, [r3, #2]
    2b84:	461a      	mov	r2, r3
    2b86:	9b04      	ldr	r3, [sp, #16]
    2b88:	4293      	cmp	r3, r2
    2b8a:	d3cc      	bcc.n	2b26 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    2b8c:	9b05      	ldr	r3, [sp, #20]
    2b8e:	2b00      	cmp	r3, #0
    2b90:	d130      	bne.n	2bf4 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2b92:	2300      	movs	r3, #0
    2b94:	9304      	str	r3, [sp, #16]
    2b96:	e027      	b.n	2be8 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    2b98:	4a1e      	ldr	r2, [pc, #120]	; (2c14 <Clock_Ip_GetPllStatus+0xfc>)
    2b9a:	9b04      	ldr	r3, [sp, #16]
    2b9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2ba0:	4918      	ldr	r1, [pc, #96]	; (2c04 <Clock_Ip_GetPllStatus+0xec>)
    2ba2:	4613      	mov	r3, r2
    2ba4:	00db      	lsls	r3, r3, #3
    2ba6:	4413      	add	r3, r2
    2ba8:	440b      	add	r3, r1
    2baa:	3301      	adds	r3, #1
    2bac:	781b      	ldrb	r3, [r3, #0]
    2bae:	461a      	mov	r2, r3
    2bb0:	4b19      	ldr	r3, [pc, #100]	; (2c18 <Clock_Ip_GetPllStatus+0x100>)
    2bb2:	5c9b      	ldrb	r3, [r3, r2]
    2bb4:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    2bb6:	4919      	ldr	r1, [pc, #100]	; (2c1c <Clock_Ip_GetPllStatus+0x104>)
    2bb8:	9a03      	ldr	r2, [sp, #12]
    2bba:	4613      	mov	r3, r2
    2bbc:	005b      	lsls	r3, r3, #1
    2bbe:	4413      	add	r3, r2
    2bc0:	009b      	lsls	r3, r3, #2
    2bc2:	440b      	add	r3, r1
    2bc4:	3308      	adds	r3, #8
    2bc6:	681b      	ldr	r3, [r3, #0]
    2bc8:	4912      	ldr	r1, [pc, #72]	; (2c14 <Clock_Ip_GetPllStatus+0xfc>)
    2bca:	9a04      	ldr	r2, [sp, #16]
    2bcc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2bd0:	4610      	mov	r0, r2
    2bd2:	4798      	blx	r3
    2bd4:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    2bd6:	9b01      	ldr	r3, [sp, #4]
    2bd8:	2b01      	cmp	r3, #1
    2bda:	d102      	bne.n	2be2 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    2bdc:	2301      	movs	r3, #1
    2bde:	9305      	str	r3, [sp, #20]
                break;
    2be0:	e008      	b.n	2bf4 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2be2:	9b04      	ldr	r3, [sp, #16]
    2be4:	3301      	adds	r3, #1
    2be6:	9304      	str	r3, [sp, #16]
    2be8:	4b09      	ldr	r3, [pc, #36]	; (2c10 <Clock_Ip_GetPllStatus+0xf8>)
    2bea:	78db      	ldrb	r3, [r3, #3]
    2bec:	461a      	mov	r2, r3
    2bee:	9b04      	ldr	r3, [sp, #16]
    2bf0:	4293      	cmp	r3, r2
    2bf2:	d3d1      	bcc.n	2b98 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    2bf4:	9b05      	ldr	r3, [sp, #20]
}
    2bf6:	4618      	mov	r0, r3
    2bf8:	b007      	add	sp, #28
    2bfa:	f85d fb04 	ldr.w	pc, [sp], #4
    2bfe:	bf00      	nop
    2c00:	000183cc 	.word	0x000183cc
    2c04:	00017ec4 	.word	0x00017ec4
    2c08:	00017e84 	.word	0x00017e84
    2c0c:	000184d0 	.word	0x000184d0
    2c10:	1fff8b40 	.word	0x1fff8b40
    2c14:	000183d0 	.word	0x000183d0
    2c18:	00017e74 	.word	0x00017e74
    2c1c:	00018440 	.word	0x00018440

00002c20 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    2c20:	b500      	push	{lr}
    2c22:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2c24:	4b55      	ldr	r3, [pc, #340]	; (2d7c <Clock_Ip_DistributePll+0x15c>)
    2c26:	681b      	ldr	r3, [r3, #0]
    2c28:	2b00      	cmp	r3, #0
    2c2a:	f000 80a2 	beq.w	2d72 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2c2e:	2300      	movs	r3, #0
    2c30:	9301      	str	r3, [sp, #4]
    2c32:	e02c      	b.n	2c8e <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    2c34:	4b51      	ldr	r3, [pc, #324]	; (2d7c <Clock_Ip_DistributePll+0x15c>)
    2c36:	681a      	ldr	r2, [r3, #0]
    2c38:	9b01      	ldr	r3, [sp, #4]
    2c3a:	330d      	adds	r3, #13
    2c3c:	00db      	lsls	r3, r3, #3
    2c3e:	4413      	add	r3, r2
    2c40:	685b      	ldr	r3, [r3, #4]
    2c42:	4a4f      	ldr	r2, [pc, #316]	; (2d80 <Clock_Ip_DistributePll+0x160>)
    2c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2c48:	2b03      	cmp	r3, #3
    2c4a:	d11d      	bne.n	2c88 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2c4c:	4b4b      	ldr	r3, [pc, #300]	; (2d7c <Clock_Ip_DistributePll+0x15c>)
    2c4e:	681b      	ldr	r3, [r3, #0]
    2c50:	9a01      	ldr	r2, [sp, #4]
    2c52:	320d      	adds	r2, #13
    2c54:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2c58:	494a      	ldr	r1, [pc, #296]	; (2d84 <Clock_Ip_DistributePll+0x164>)
    2c5a:	4613      	mov	r3, r2
    2c5c:	00db      	lsls	r3, r3, #3
    2c5e:	4413      	add	r3, r2
    2c60:	440b      	add	r3, r1
    2c62:	3301      	adds	r3, #1
    2c64:	781b      	ldrb	r3, [r3, #0]
    2c66:	461a      	mov	r2, r3
    2c68:	4b47      	ldr	r3, [pc, #284]	; (2d88 <Clock_Ip_DistributePll+0x168>)
    2c6a:	5c9b      	ldrb	r3, [r3, r2]
    2c6c:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    2c6e:	4a47      	ldr	r2, [pc, #284]	; (2d8c <Clock_Ip_DistributePll+0x16c>)
    2c70:	9b00      	ldr	r3, [sp, #0]
    2c72:	00db      	lsls	r3, r3, #3
    2c74:	4413      	add	r3, r2
    2c76:	685b      	ldr	r3, [r3, #4]
    2c78:	4a40      	ldr	r2, [pc, #256]	; (2d7c <Clock_Ip_DistributePll+0x15c>)
    2c7a:	6811      	ldr	r1, [r2, #0]
    2c7c:	9a01      	ldr	r2, [sp, #4]
    2c7e:	320d      	adds	r2, #13
    2c80:	00d2      	lsls	r2, r2, #3
    2c82:	440a      	add	r2, r1
    2c84:	4610      	mov	r0, r2
    2c86:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2c88:	9b01      	ldr	r3, [sp, #4]
    2c8a:	3301      	adds	r3, #1
    2c8c:	9301      	str	r3, [sp, #4]
    2c8e:	4b3b      	ldr	r3, [pc, #236]	; (2d7c <Clock_Ip_DistributePll+0x15c>)
    2c90:	681b      	ldr	r3, [r3, #0]
    2c92:	7adb      	ldrb	r3, [r3, #11]
    2c94:	461a      	mov	r2, r3
    2c96:	9b01      	ldr	r3, [sp, #4]
    2c98:	4293      	cmp	r3, r2
    2c9a:	d3cb      	bcc.n	2c34 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    2c9c:	4b3c      	ldr	r3, [pc, #240]	; (2d90 <Clock_Ip_DistributePll+0x170>)
    2c9e:	781b      	ldrb	r3, [r3, #0]
    2ca0:	2b00      	cmp	r3, #0
    2ca2:	d066      	beq.n	2d72 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2ca4:	2300      	movs	r3, #0
    2ca6:	9301      	str	r3, [sp, #4]
    2ca8:	e021      	b.n	2cee <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2caa:	4b34      	ldr	r3, [pc, #208]	; (2d7c <Clock_Ip_DistributePll+0x15c>)
    2cac:	681a      	ldr	r2, [r3, #0]
    2cae:	9b01      	ldr	r3, [sp, #4]
    2cb0:	334e      	adds	r3, #78	; 0x4e
    2cb2:	00db      	lsls	r3, r3, #3
    2cb4:	4413      	add	r3, r2
    2cb6:	685a      	ldr	r2, [r3, #4]
    2cb8:	4932      	ldr	r1, [pc, #200]	; (2d84 <Clock_Ip_DistributePll+0x164>)
    2cba:	4613      	mov	r3, r2
    2cbc:	00db      	lsls	r3, r3, #3
    2cbe:	4413      	add	r3, r2
    2cc0:	440b      	add	r3, r1
    2cc2:	3301      	adds	r3, #1
    2cc4:	781b      	ldrb	r3, [r3, #0]
    2cc6:	461a      	mov	r2, r3
    2cc8:	4b32      	ldr	r3, [pc, #200]	; (2d94 <Clock_Ip_DistributePll+0x174>)
    2cca:	5c9b      	ldrb	r3, [r3, r2]
    2ccc:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    2cce:	4a32      	ldr	r2, [pc, #200]	; (2d98 <Clock_Ip_DistributePll+0x178>)
    2cd0:	9b00      	ldr	r3, [sp, #0]
    2cd2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2cd6:	4a29      	ldr	r2, [pc, #164]	; (2d7c <Clock_Ip_DistributePll+0x15c>)
    2cd8:	6811      	ldr	r1, [r2, #0]
    2cda:	9a01      	ldr	r2, [sp, #4]
    2cdc:	324e      	adds	r2, #78	; 0x4e
    2cde:	00d2      	lsls	r2, r2, #3
    2ce0:	440a      	add	r2, r1
    2ce2:	3204      	adds	r2, #4
    2ce4:	4610      	mov	r0, r2
    2ce6:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2ce8:	9b01      	ldr	r3, [sp, #4]
    2cea:	3301      	adds	r3, #1
    2cec:	9301      	str	r3, [sp, #4]
    2cee:	4b23      	ldr	r3, [pc, #140]	; (2d7c <Clock_Ip_DistributePll+0x15c>)
    2cf0:	681b      	ldr	r3, [r3, #0]
    2cf2:	7c1b      	ldrb	r3, [r3, #16]
    2cf4:	461a      	mov	r2, r3
    2cf6:	9b01      	ldr	r3, [sp, #4]
    2cf8:	4293      	cmp	r3, r2
    2cfa:	d3d6      	bcc.n	2caa <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2cfc:	2300      	movs	r3, #0
    2cfe:	9301      	str	r3, [sp, #4]
    2d00:	e02a      	b.n	2d58 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2d02:	4b1e      	ldr	r3, [pc, #120]	; (2d7c <Clock_Ip_DistributePll+0x15c>)
    2d04:	6819      	ldr	r1, [r3, #0]
    2d06:	9a01      	ldr	r2, [sp, #4]
    2d08:	4613      	mov	r3, r2
    2d0a:	009b      	lsls	r3, r3, #2
    2d0c:	4413      	add	r3, r2
    2d0e:	009b      	lsls	r3, r3, #2
    2d10:	440b      	add	r3, r1
    2d12:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2d16:	681a      	ldr	r2, [r3, #0]
    2d18:	491a      	ldr	r1, [pc, #104]	; (2d84 <Clock_Ip_DistributePll+0x164>)
    2d1a:	4613      	mov	r3, r2
    2d1c:	00db      	lsls	r3, r3, #3
    2d1e:	4413      	add	r3, r2
    2d20:	440b      	add	r3, r1
    2d22:	3301      	adds	r3, #1
    2d24:	781b      	ldrb	r3, [r3, #0]
    2d26:	461a      	mov	r2, r3
    2d28:	4b1c      	ldr	r3, [pc, #112]	; (2d9c <Clock_Ip_DistributePll+0x17c>)
    2d2a:	5c9b      	ldrb	r3, [r3, r2]
    2d2c:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    2d2e:	4a1c      	ldr	r2, [pc, #112]	; (2da0 <Clock_Ip_DistributePll+0x180>)
    2d30:	9b00      	ldr	r3, [sp, #0]
    2d32:	011b      	lsls	r3, r3, #4
    2d34:	4413      	add	r3, r2
    2d36:	330c      	adds	r3, #12
    2d38:	6819      	ldr	r1, [r3, #0]
    2d3a:	4b10      	ldr	r3, [pc, #64]	; (2d7c <Clock_Ip_DistributePll+0x15c>)
    2d3c:	6818      	ldr	r0, [r3, #0]
    2d3e:	9a01      	ldr	r2, [sp, #4]
    2d40:	4613      	mov	r3, r2
    2d42:	009b      	lsls	r3, r3, #2
    2d44:	4413      	add	r3, r2
    2d46:	009b      	lsls	r3, r3, #2
    2d48:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2d4c:	4403      	add	r3, r0
    2d4e:	4618      	mov	r0, r3
    2d50:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2d52:	9b01      	ldr	r3, [sp, #4]
    2d54:	3301      	adds	r3, #1
    2d56:	9301      	str	r3, [sp, #4]
    2d58:	4b08      	ldr	r3, [pc, #32]	; (2d7c <Clock_Ip_DistributePll+0x15c>)
    2d5a:	681b      	ldr	r3, [r3, #0]
    2d5c:	7c9b      	ldrb	r3, [r3, #18]
    2d5e:	461a      	mov	r2, r3
    2d60:	9b01      	ldr	r3, [sp, #4]
    2d62:	4293      	cmp	r3, r2
    2d64:	d3cd      	bcc.n	2d02 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2d66:	4b05      	ldr	r3, [pc, #20]	; (2d7c <Clock_Ip_DistributePll+0x15c>)
    2d68:	681b      	ldr	r3, [r3, #0]
    2d6a:	2104      	movs	r1, #4
    2d6c:	4618      	mov	r0, r3
    2d6e:	f002 fe0b 	bl	5988 <Clock_Ip_Command>
        }
    }
}
    2d72:	bf00      	nop
    2d74:	b003      	add	sp, #12
    2d76:	f85d fb04 	ldr.w	pc, [sp], #4
    2d7a:	bf00      	nop
    2d7c:	1fff8b38 	.word	0x1fff8b38
    2d80:	00018310 	.word	0x00018310
    2d84:	00017ec4 	.word	0x00017ec4
    2d88:	00017e94 	.word	0x00017e94
    2d8c:	000184fc 	.word	0x000184fc
    2d90:	1fff8b40 	.word	0x1fff8b40
    2d94:	00017e64 	.word	0x00017e64
    2d98:	0001844c 	.word	0x0001844c
    2d9c:	00017eb4 	.word	0x00017eb4
    2da0:	000184c0 	.word	0x000184c0

00002da4 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2da4:	b500      	push	{lr}
    2da6:	b085      	sub	sp, #20
    2da8:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2daa:	490c      	ldr	r1, [pc, #48]	; (2ddc <Clock_Ip_DisableClockMonitor+0x38>)
    2dac:	9a01      	ldr	r2, [sp, #4]
    2dae:	4613      	mov	r3, r2
    2db0:	00db      	lsls	r3, r3, #3
    2db2:	4413      	add	r3, r2
    2db4:	440b      	add	r3, r1
    2db6:	3301      	adds	r3, #1
    2db8:	781b      	ldrb	r3, [r3, #0]
    2dba:	461a      	mov	r2, r3
    2dbc:	4b08      	ldr	r3, [pc, #32]	; (2de0 <Clock_Ip_DisableClockMonitor+0x3c>)
    2dbe:	5c9b      	ldrb	r3, [r3, r2]
    2dc0:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2dc2:	4a08      	ldr	r2, [pc, #32]	; (2de4 <Clock_Ip_DisableClockMonitor+0x40>)
    2dc4:	9b03      	ldr	r3, [sp, #12]
    2dc6:	011b      	lsls	r3, r3, #4
    2dc8:	4413      	add	r3, r2
    2dca:	3308      	adds	r3, #8
    2dcc:	681b      	ldr	r3, [r3, #0]
    2dce:	9801      	ldr	r0, [sp, #4]
    2dd0:	4798      	blx	r3
}
    2dd2:	bf00      	nop
    2dd4:	b005      	add	sp, #20
    2dd6:	f85d fb04 	ldr.w	pc, [sp], #4
    2dda:	bf00      	nop
    2ddc:	00017ec4 	.word	0x00017ec4
    2de0:	00017eb4 	.word	0x00017eb4
    2de4:	000184c0 	.word	0x000184c0

00002de8 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2de8:	b082      	sub	sp, #8
    2dea:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2dec:	4a02      	ldr	r2, [pc, #8]	; (2df8 <Clock_Ip_InstallNotificationsCallback+0x10>)
    2dee:	9b01      	ldr	r3, [sp, #4]
    2df0:	6013      	str	r3, [r2, #0]
}
    2df2:	bf00      	nop
    2df4:	b002      	add	sp, #8
    2df6:	4770      	bx	lr
    2df8:	1fff8b14 	.word	0x1fff8b14

00002dfc <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2dfc:	b500      	push	{lr}
    2dfe:	b085      	sub	sp, #20
    2e00:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2e02:	490c      	ldr	r1, [pc, #48]	; (2e34 <Clock_Ip_DisableModuleClock+0x38>)
    2e04:	9a01      	ldr	r2, [sp, #4]
    2e06:	4613      	mov	r3, r2
    2e08:	00db      	lsls	r3, r3, #3
    2e0a:	4413      	add	r3, r2
    2e0c:	440b      	add	r3, r1
    2e0e:	3301      	adds	r3, #1
    2e10:	781b      	ldrb	r3, [r3, #0]
    2e12:	461a      	mov	r2, r3
    2e14:	4b08      	ldr	r3, [pc, #32]	; (2e38 <Clock_Ip_DisableModuleClock+0x3c>)
    2e16:	5c9b      	ldrb	r3, [r3, r2]
    2e18:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2e1a:	4a08      	ldr	r2, [pc, #32]	; (2e3c <Clock_Ip_DisableModuleClock+0x40>)
    2e1c:	9b03      	ldr	r3, [sp, #12]
    2e1e:	00db      	lsls	r3, r3, #3
    2e20:	4413      	add	r3, r2
    2e22:	685b      	ldr	r3, [r3, #4]
    2e24:	2101      	movs	r1, #1
    2e26:	9801      	ldr	r0, [sp, #4]
    2e28:	4798      	blx	r3
}
    2e2a:	bf00      	nop
    2e2c:	b005      	add	sp, #20
    2e2e:	f85d fb04 	ldr.w	pc, [sp], #4
    2e32:	bf00      	nop
    2e34:	00017ec4 	.word	0x00017ec4
    2e38:	00017e64 	.word	0x00017e64
    2e3c:	0001844c 	.word	0x0001844c

00002e40 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2e40:	b500      	push	{lr}
    2e42:	b085      	sub	sp, #20
    2e44:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2e46:	490c      	ldr	r1, [pc, #48]	; (2e78 <Clock_Ip_EnableModuleClock+0x38>)
    2e48:	9a01      	ldr	r2, [sp, #4]
    2e4a:	4613      	mov	r3, r2
    2e4c:	00db      	lsls	r3, r3, #3
    2e4e:	4413      	add	r3, r2
    2e50:	440b      	add	r3, r1
    2e52:	3301      	adds	r3, #1
    2e54:	781b      	ldrb	r3, [r3, #0]
    2e56:	461a      	mov	r2, r3
    2e58:	4b08      	ldr	r3, [pc, #32]	; (2e7c <Clock_Ip_EnableModuleClock+0x3c>)
    2e5a:	5c9b      	ldrb	r3, [r3, r2]
    2e5c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2e5e:	4a08      	ldr	r2, [pc, #32]	; (2e80 <Clock_Ip_EnableModuleClock+0x40>)
    2e60:	9b03      	ldr	r3, [sp, #12]
    2e62:	00db      	lsls	r3, r3, #3
    2e64:	4413      	add	r3, r2
    2e66:	685b      	ldr	r3, [r3, #4]
    2e68:	2100      	movs	r1, #0
    2e6a:	9801      	ldr	r0, [sp, #4]
    2e6c:	4798      	blx	r3
}
    2e6e:	bf00      	nop
    2e70:	b005      	add	sp, #20
    2e72:	f85d fb04 	ldr.w	pc, [sp], #4
    2e76:	bf00      	nop
    2e78:	00017ec4 	.word	0x00017ec4
    2e7c:	00017e64 	.word	0x00017e64
    2e80:	0001844c 	.word	0x0001844c

00002e84 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2e84:	b500      	push	{lr}
    2e86:	b083      	sub	sp, #12
    2e88:	9001      	str	r0, [sp, #4]
    2e8a:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2e8c:	4b08      	ldr	r3, [pc, #32]	; (2eb0 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2e8e:	2200      	movs	r2, #0
    2e90:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2e92:	4b08      	ldr	r3, [pc, #32]	; (2eb4 <Clock_Ip_PowerModeChangeNotification+0x30>)
    2e94:	681b      	ldr	r3, [r3, #0]
    2e96:	2102      	movs	r1, #2
    2e98:	4618      	mov	r0, r3
    2e9a:	f002 fd75 	bl	5988 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2e9e:	9900      	ldr	r1, [sp, #0]
    2ea0:	9801      	ldr	r0, [sp, #4]
    2ea2:	f002 fc51 	bl	5748 <Clock_Ip_ClockPowerModeChangeNotification>
}
    2ea6:	bf00      	nop
    2ea8:	b003      	add	sp, #12
    2eaa:	f85d fb04 	ldr.w	pc, [sp], #4
    2eae:	bf00      	nop
    2eb0:	1fff8b10 	.word	0x1fff8b10
    2eb4:	1fff8b38 	.word	0x1fff8b38

00002eb8 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2eb8:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2eba:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2ebe:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2ec0:	4b06      	ldr	r3, [pc, #24]	; (2edc <Clock_Ip_SetWaitStates+0x24>)
    2ec2:	785b      	ldrb	r3, [r3, #1]
    2ec4:	2b00      	cmp	r3, #0
    2ec6:	d005      	beq.n	2ed4 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2ec8:	9b01      	ldr	r3, [sp, #4]
    2eca:	3b01      	subs	r3, #1
    2ecc:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2ece:	9b01      	ldr	r3, [sp, #4]
    2ed0:	2b00      	cmp	r3, #0
    2ed2:	d1f9      	bne.n	2ec8 <Clock_Ip_SetWaitStates+0x10>
    }
}
    2ed4:	bf00      	nop
    2ed6:	b002      	add	sp, #8
    2ed8:	4770      	bx	lr
    2eda:	bf00      	nop
    2edc:	1fff8b40 	.word	0x1fff8b40

00002ee0 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2ee0:	b500      	push	{lr}
    2ee2:	b083      	sub	sp, #12
    2ee4:	9001      	str	r0, [sp, #4]
    2ee6:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2ee8:	4b04      	ldr	r3, [pc, #16]	; (2efc <Clock_Ip_ReportClockErrors+0x1c>)
    2eea:	681b      	ldr	r3, [r3, #0]
    2eec:	9900      	ldr	r1, [sp, #0]
    2eee:	9801      	ldr	r0, [sp, #4]
    2ef0:	4798      	blx	r3
}
    2ef2:	bf00      	nop
    2ef4:	b003      	add	sp, #12
    2ef6:	f85d fb04 	ldr.w	pc, [sp], #4
    2efa:	bf00      	nop
    2efc:	1fff8b14 	.word	0x1fff8b14

00002f00 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2f00:	b500      	push	{lr}
    2f02:	b085      	sub	sp, #20
    2f04:	9003      	str	r0, [sp, #12]
    2f06:	9102      	str	r1, [sp, #8]
    2f08:	9201      	str	r2, [sp, #4]
    2f0a:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2f0c:	2000      	movs	r0, #0
    2f0e:	f7fe ffd1 	bl	1eb4 <OsIf_GetCounter>
    2f12:	4602      	mov	r2, r0
    2f14:	9b03      	ldr	r3, [sp, #12]
    2f16:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2f18:	9b02      	ldr	r3, [sp, #8]
    2f1a:	2200      	movs	r2, #0
    2f1c:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2f1e:	2100      	movs	r1, #0
    2f20:	9800      	ldr	r0, [sp, #0]
    2f22:	f7ff f813 	bl	1f4c <OsIf_MicrosToTicks>
    2f26:	4602      	mov	r2, r0
    2f28:	9b01      	ldr	r3, [sp, #4]
    2f2a:	601a      	str	r2, [r3, #0]
}
    2f2c:	bf00      	nop
    2f2e:	b005      	add	sp, #20
    2f30:	f85d fb04 	ldr.w	pc, [sp], #4

00002f34 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2f34:	b500      	push	{lr}
    2f36:	b087      	sub	sp, #28
    2f38:	9003      	str	r0, [sp, #12]
    2f3a:	9102      	str	r1, [sp, #8]
    2f3c:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2f3e:	2300      	movs	r3, #0
    2f40:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2f44:	2100      	movs	r1, #0
    2f46:	9803      	ldr	r0, [sp, #12]
    2f48:	f7fe ffcd 	bl	1ee6 <OsIf_GetElapsed>
    2f4c:	4602      	mov	r2, r0
    2f4e:	9b02      	ldr	r3, [sp, #8]
    2f50:	681b      	ldr	r3, [r3, #0]
    2f52:	441a      	add	r2, r3
    2f54:	9b02      	ldr	r3, [sp, #8]
    2f56:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2f58:	9b02      	ldr	r3, [sp, #8]
    2f5a:	681b      	ldr	r3, [r3, #0]
    2f5c:	9a01      	ldr	r2, [sp, #4]
    2f5e:	429a      	cmp	r2, r3
    2f60:	d802      	bhi.n	2f68 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2f62:	2301      	movs	r3, #1
    2f64:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2f68:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2f6c:	4618      	mov	r0, r3
    2f6e:	b007      	add	sp, #28
    2f70:	f85d fb04 	ldr.w	pc, [sp], #4

00002f74 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2f74:	b082      	sub	sp, #8
    2f76:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2f78:	bf00      	nop
    2f7a:	b002      	add	sp, #8
    2f7c:	4770      	bx	lr

00002f7e <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2f7e:	b500      	push	{lr}
    2f80:	b083      	sub	sp, #12
    2f82:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f84:	9b01      	ldr	r3, [sp, #4]
    2f86:	2b00      	cmp	r3, #0
    2f88:	d002      	beq.n	2f90 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    2f8a:	9801      	ldr	r0, [sp, #4]
    2f8c:	f000 f8ad 	bl	30ea <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f90:	bf00      	nop
    2f92:	b003      	add	sp, #12
    2f94:	f85d fb04 	ldr.w	pc, [sp], #4

00002f98 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2f98:	b500      	push	{lr}
    2f9a:	b083      	sub	sp, #12
    2f9c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f9e:	9b01      	ldr	r3, [sp, #4]
    2fa0:	2b00      	cmp	r3, #0
    2fa2:	d002      	beq.n	2faa <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2fa4:	9801      	ldr	r0, [sp, #4]
    2fa6:	f000 f8cd 	bl	3144 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2faa:	bf00      	nop
    2fac:	b003      	add	sp, #12
    2fae:	f85d fb04 	ldr.w	pc, [sp], #4

00002fb2 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2fb2:	b500      	push	{lr}
    2fb4:	b083      	sub	sp, #12
    2fb6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2fb8:	9b01      	ldr	r3, [sp, #4]
    2fba:	2b00      	cmp	r3, #0
    2fbc:	d002      	beq.n	2fc4 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2fbe:	9801      	ldr	r0, [sp, #4]
    2fc0:	f000 f8ee 	bl	31a0 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2fc4:	bf00      	nop
    2fc6:	b003      	add	sp, #12
    2fc8:	f85d fb04 	ldr.w	pc, [sp], #4

00002fcc <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2fcc:	b500      	push	{lr}
    2fce:	b083      	sub	sp, #12
    2fd0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2fd2:	9b01      	ldr	r3, [sp, #4]
    2fd4:	2b00      	cmp	r3, #0
    2fd6:	d002      	beq.n	2fde <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2fd8:	9801      	ldr	r0, [sp, #4]
    2fda:	f000 f8f9 	bl	31d0 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2fde:	bf00      	nop
    2fe0:	b003      	add	sp, #12
    2fe2:	f85d fb04 	ldr.w	pc, [sp], #4

00002fe6 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2fe6:	b500      	push	{lr}
    2fe8:	b083      	sub	sp, #12
    2fea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2fec:	9b01      	ldr	r3, [sp, #4]
    2fee:	2b00      	cmp	r3, #0
    2ff0:	d002      	beq.n	2ff8 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2ff2:	9801      	ldr	r0, [sp, #4]
    2ff4:	f000 f904 	bl	3200 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ff8:	bf00      	nop
    2ffa:	b003      	add	sp, #12
    2ffc:	f85d fb04 	ldr.w	pc, [sp], #4

00003000 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    3000:	b500      	push	{lr}
    3002:	b083      	sub	sp, #12
    3004:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3006:	9b01      	ldr	r3, [sp, #4]
    3008:	2b00      	cmp	r3, #0
    300a:	d002      	beq.n	3012 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    300c:	9801      	ldr	r0, [sp, #4]
    300e:	f000 f90f 	bl	3230 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3012:	bf00      	nop
    3014:	b003      	add	sp, #12
    3016:	f85d fb04 	ldr.w	pc, [sp], #4

0000301a <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    301a:	b500      	push	{lr}
    301c:	b083      	sub	sp, #12
    301e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3020:	9b01      	ldr	r3, [sp, #4]
    3022:	2b00      	cmp	r3, #0
    3024:	d002      	beq.n	302c <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    3026:	9801      	ldr	r0, [sp, #4]
    3028:	f000 f91a 	bl	3260 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    302c:	bf00      	nop
    302e:	b003      	add	sp, #12
    3030:	f85d fb04 	ldr.w	pc, [sp], #4

00003034 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    3034:	b500      	push	{lr}
    3036:	b083      	sub	sp, #12
    3038:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    303a:	9b01      	ldr	r3, [sp, #4]
    303c:	2b00      	cmp	r3, #0
    303e:	d002      	beq.n	3046 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    3040:	9801      	ldr	r0, [sp, #4]
    3042:	f000 f925 	bl	3290 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3046:	bf00      	nop
    3048:	b003      	add	sp, #12
    304a:	f85d fb04 	ldr.w	pc, [sp], #4

0000304e <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    304e:	b500      	push	{lr}
    3050:	b083      	sub	sp, #12
    3052:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3054:	9b01      	ldr	r3, [sp, #4]
    3056:	2b00      	cmp	r3, #0
    3058:	d002      	beq.n	3060 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    305a:	9801      	ldr	r0, [sp, #4]
    305c:	f000 f930 	bl	32c0 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3060:	bf00      	nop
    3062:	b003      	add	sp, #12
    3064:	f85d fb04 	ldr.w	pc, [sp], #4

00003068 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    3068:	b500      	push	{lr}
    306a:	b083      	sub	sp, #12
    306c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    306e:	9b01      	ldr	r3, [sp, #4]
    3070:	2b00      	cmp	r3, #0
    3072:	d002      	beq.n	307a <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    3074:	9801      	ldr	r0, [sp, #4]
    3076:	f000 f93b 	bl	32f0 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    307a:	bf00      	nop
    307c:	b003      	add	sp, #12
    307e:	f85d fb04 	ldr.w	pc, [sp], #4

00003082 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    3082:	b500      	push	{lr}
    3084:	b083      	sub	sp, #12
    3086:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3088:	9b01      	ldr	r3, [sp, #4]
    308a:	2b00      	cmp	r3, #0
    308c:	d002      	beq.n	3094 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    308e:	9801      	ldr	r0, [sp, #4]
    3090:	f000 f946 	bl	3320 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3094:	bf00      	nop
    3096:	b003      	add	sp, #12
    3098:	f85d fb04 	ldr.w	pc, [sp], #4

0000309c <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    309c:	b500      	push	{lr}
    309e:	b083      	sub	sp, #12
    30a0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30a2:	9b01      	ldr	r3, [sp, #4]
    30a4:	2b00      	cmp	r3, #0
    30a6:	d002      	beq.n	30ae <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    30a8:	9801      	ldr	r0, [sp, #4]
    30aa:	f000 f951 	bl	3350 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30ae:	bf00      	nop
    30b0:	b003      	add	sp, #12
    30b2:	f85d fb04 	ldr.w	pc, [sp], #4

000030b6 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    30b6:	b500      	push	{lr}
    30b8:	b083      	sub	sp, #12
    30ba:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30bc:	9b01      	ldr	r3, [sp, #4]
    30be:	2b00      	cmp	r3, #0
    30c0:	d002      	beq.n	30c8 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    30c2:	9801      	ldr	r0, [sp, #4]
    30c4:	f000 f95e 	bl	3384 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30c8:	bf00      	nop
    30ca:	b003      	add	sp, #12
    30cc:	f85d fb04 	ldr.w	pc, [sp], #4

000030d0 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    30d0:	b500      	push	{lr}
    30d2:	b083      	sub	sp, #12
    30d4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30d6:	9b01      	ldr	r3, [sp, #4]
    30d8:	2b00      	cmp	r3, #0
    30da:	d002      	beq.n	30e2 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    30dc:	9801      	ldr	r0, [sp, #4]
    30de:	f000 f98b 	bl	33f8 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30e2:	bf00      	nop
    30e4:	b003      	add	sp, #12
    30e6:	f85d fb04 	ldr.w	pc, [sp], #4

000030ea <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    30ea:	b086      	sub	sp, #24
    30ec:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    30ee:	9b01      	ldr	r3, [sp, #4]
    30f0:	681a      	ldr	r2, [r3, #0]
    30f2:	4911      	ldr	r1, [pc, #68]	; (3138 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    30f4:	4613      	mov	r3, r2
    30f6:	00db      	lsls	r3, r3, #3
    30f8:	4413      	add	r3, r2
    30fa:	440b      	add	r3, r1
    30fc:	781b      	ldrb	r3, [r3, #0]
    30fe:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3100:	9b01      	ldr	r3, [sp, #4]
    3102:	685b      	ldr	r3, [r3, #4]
    3104:	4a0d      	ldr	r2, [pc, #52]	; (313c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    3106:	5cd3      	ldrb	r3, [r2, r3]
    3108:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    310a:	4a0d      	ldr	r2, [pc, #52]	; (3140 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    310c:	9b05      	ldr	r3, [sp, #20]
    310e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3112:	681b      	ldr	r3, [r3, #0]
    3114:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    3116:	9b03      	ldr	r3, [sp, #12]
    3118:	f023 0307 	bic.w	r3, r3, #7
    311c:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    311e:	9a03      	ldr	r2, [sp, #12]
    3120:	9b04      	ldr	r3, [sp, #16]
    3122:	4313      	orrs	r3, r2
    3124:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    3126:	4a06      	ldr	r2, [pc, #24]	; (3140 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3128:	9b05      	ldr	r3, [sp, #20]
    312a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    312e:	9a03      	ldr	r2, [sp, #12]
    3130:	601a      	str	r2, [r3, #0]
}
    3132:	bf00      	nop
    3134:	b006      	add	sp, #24
    3136:	4770      	bx	lr
    3138:	00017ec4 	.word	0x00017ec4
    313c:	000182bc 	.word	0x000182bc
    3140:	00018300 	.word	0x00018300

00003144 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3144:	b086      	sub	sp, #24
    3146:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3148:	9b01      	ldr	r3, [sp, #4]
    314a:	681a      	ldr	r2, [r3, #0]
    314c:	4911      	ldr	r1, [pc, #68]	; (3194 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    314e:	4613      	mov	r3, r2
    3150:	00db      	lsls	r3, r3, #3
    3152:	4413      	add	r3, r2
    3154:	440b      	add	r3, r1
    3156:	781b      	ldrb	r3, [r3, #0]
    3158:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    315a:	9b01      	ldr	r3, [sp, #4]
    315c:	685b      	ldr	r3, [r3, #4]
    315e:	4a0e      	ldr	r2, [pc, #56]	; (3198 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    3160:	5cd3      	ldrb	r3, [r2, r3]
    3162:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    3164:	4a0d      	ldr	r2, [pc, #52]	; (319c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    3166:	9b05      	ldr	r3, [sp, #20]
    3168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    316c:	681b      	ldr	r3, [r3, #0]
    316e:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    3170:	9b03      	ldr	r3, [sp, #12]
    3172:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3176:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    3178:	9b04      	ldr	r3, [sp, #16]
    317a:	021b      	lsls	r3, r3, #8
    317c:	9a03      	ldr	r2, [sp, #12]
    317e:	4313      	orrs	r3, r2
    3180:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    3182:	4a06      	ldr	r2, [pc, #24]	; (319c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    3184:	9b05      	ldr	r3, [sp, #20]
    3186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    318a:	9a03      	ldr	r2, [sp, #12]
    318c:	601a      	str	r2, [r3, #0]
}
    318e:	bf00      	nop
    3190:	b006      	add	sp, #24
    3192:	4770      	bx	lr
    3194:	00017ec4 	.word	0x00017ec4
    3198:	000182bc 	.word	0x000182bc
    319c:	00018300 	.word	0x00018300

000031a0 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    31a0:	b084      	sub	sp, #16
    31a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    31a4:	4b09      	ldr	r3, [pc, #36]	; (31cc <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    31a6:	695b      	ldr	r3, [r3, #20]
    31a8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    31aa:	9b03      	ldr	r3, [sp, #12]
    31ac:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    31b0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    31b2:	9b01      	ldr	r3, [sp, #4]
    31b4:	685b      	ldr	r3, [r3, #4]
    31b6:	3b01      	subs	r3, #1
    31b8:	041b      	lsls	r3, r3, #16
    31ba:	9a03      	ldr	r2, [sp, #12]
    31bc:	4313      	orrs	r3, r2
    31be:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    31c0:	4a02      	ldr	r2, [pc, #8]	; (31cc <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    31c2:	9b03      	ldr	r3, [sp, #12]
    31c4:	6153      	str	r3, [r2, #20]
}
    31c6:	bf00      	nop
    31c8:	b004      	add	sp, #16
    31ca:	4770      	bx	lr
    31cc:	40064000 	.word	0x40064000

000031d0 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    31d0:	b084      	sub	sp, #16
    31d2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    31d4:	4b09      	ldr	r3, [pc, #36]	; (31fc <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    31d6:	695b      	ldr	r3, [r3, #20]
    31d8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    31da:	9b03      	ldr	r3, [sp, #12]
    31dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    31e0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    31e2:	9b01      	ldr	r3, [sp, #4]
    31e4:	685b      	ldr	r3, [r3, #4]
    31e6:	3b01      	subs	r3, #1
    31e8:	011b      	lsls	r3, r3, #4
    31ea:	9a03      	ldr	r2, [sp, #12]
    31ec:	4313      	orrs	r3, r2
    31ee:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    31f0:	4a02      	ldr	r2, [pc, #8]	; (31fc <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    31f2:	9b03      	ldr	r3, [sp, #12]
    31f4:	6153      	str	r3, [r2, #20]
}
    31f6:	bf00      	nop
    31f8:	b004      	add	sp, #16
    31fa:	4770      	bx	lr
    31fc:	40064000 	.word	0x40064000

00003200 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3200:	b084      	sub	sp, #16
    3202:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3204:	4b09      	ldr	r3, [pc, #36]	; (322c <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3206:	695b      	ldr	r3, [r3, #20]
    3208:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    320a:	9b03      	ldr	r3, [sp, #12]
    320c:	f023 030f 	bic.w	r3, r3, #15
    3210:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    3212:	9b01      	ldr	r3, [sp, #4]
    3214:	685b      	ldr	r3, [r3, #4]
    3216:	3b01      	subs	r3, #1
    3218:	9a03      	ldr	r2, [sp, #12]
    321a:	4313      	orrs	r3, r2
    321c:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    321e:	4a03      	ldr	r2, [pc, #12]	; (322c <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3220:	9b03      	ldr	r3, [sp, #12]
    3222:	6153      	str	r3, [r2, #20]
}
    3224:	bf00      	nop
    3226:	b004      	add	sp, #16
    3228:	4770      	bx	lr
    322a:	bf00      	nop
    322c:	40064000 	.word	0x40064000

00003230 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3230:	b084      	sub	sp, #16
    3232:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3234:	4b09      	ldr	r3, [pc, #36]	; (325c <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    3236:	699b      	ldr	r3, [r3, #24]
    3238:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    323a:	9b03      	ldr	r3, [sp, #12]
    323c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3240:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    3242:	9b01      	ldr	r3, [sp, #4]
    3244:	685b      	ldr	r3, [r3, #4]
    3246:	3b01      	subs	r3, #1
    3248:	041b      	lsls	r3, r3, #16
    324a:	9a03      	ldr	r2, [sp, #12]
    324c:	4313      	orrs	r3, r2
    324e:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3250:	4a02      	ldr	r2, [pc, #8]	; (325c <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    3252:	9b03      	ldr	r3, [sp, #12]
    3254:	6193      	str	r3, [r2, #24]
}
    3256:	bf00      	nop
    3258:	b004      	add	sp, #16
    325a:	4770      	bx	lr
    325c:	40064000 	.word	0x40064000

00003260 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3260:	b084      	sub	sp, #16
    3262:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3264:	4b09      	ldr	r3, [pc, #36]	; (328c <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    3266:	699b      	ldr	r3, [r3, #24]
    3268:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    326a:	9b03      	ldr	r3, [sp, #12]
    326c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3270:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    3272:	9b01      	ldr	r3, [sp, #4]
    3274:	685b      	ldr	r3, [r3, #4]
    3276:	3b01      	subs	r3, #1
    3278:	011b      	lsls	r3, r3, #4
    327a:	9a03      	ldr	r2, [sp, #12]
    327c:	4313      	orrs	r3, r2
    327e:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3280:	4a02      	ldr	r2, [pc, #8]	; (328c <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    3282:	9b03      	ldr	r3, [sp, #12]
    3284:	6193      	str	r3, [r2, #24]
}
    3286:	bf00      	nop
    3288:	b004      	add	sp, #16
    328a:	4770      	bx	lr
    328c:	40064000 	.word	0x40064000

00003290 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3290:	b084      	sub	sp, #16
    3292:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3294:	4b09      	ldr	r3, [pc, #36]	; (32bc <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    3296:	699b      	ldr	r3, [r3, #24]
    3298:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    329a:	9b03      	ldr	r3, [sp, #12]
    329c:	f023 030f 	bic.w	r3, r3, #15
    32a0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    32a2:	9b01      	ldr	r3, [sp, #4]
    32a4:	685b      	ldr	r3, [r3, #4]
    32a6:	3b01      	subs	r3, #1
    32a8:	9a03      	ldr	r2, [sp, #12]
    32aa:	4313      	orrs	r3, r2
    32ac:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    32ae:	4a03      	ldr	r2, [pc, #12]	; (32bc <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    32b0:	9b03      	ldr	r3, [sp, #12]
    32b2:	6193      	str	r3, [r2, #24]
}
    32b4:	bf00      	nop
    32b6:	b004      	add	sp, #16
    32b8:	4770      	bx	lr
    32ba:	bf00      	nop
    32bc:	40064000 	.word	0x40064000

000032c0 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    32c0:	b084      	sub	sp, #16
    32c2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    32c4:	4b09      	ldr	r3, [pc, #36]	; (32ec <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    32c6:	69db      	ldr	r3, [r3, #28]
    32c8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    32ca:	9b03      	ldr	r3, [sp, #12]
    32cc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    32d0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    32d2:	9b01      	ldr	r3, [sp, #4]
    32d4:	685b      	ldr	r3, [r3, #4]
    32d6:	3b01      	subs	r3, #1
    32d8:	041b      	lsls	r3, r3, #16
    32da:	9a03      	ldr	r2, [sp, #12]
    32dc:	4313      	orrs	r3, r2
    32de:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    32e0:	4a02      	ldr	r2, [pc, #8]	; (32ec <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    32e2:	9b03      	ldr	r3, [sp, #12]
    32e4:	61d3      	str	r3, [r2, #28]
}
    32e6:	bf00      	nop
    32e8:	b004      	add	sp, #16
    32ea:	4770      	bx	lr
    32ec:	40064000 	.word	0x40064000

000032f0 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    32f0:	b084      	sub	sp, #16
    32f2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    32f4:	4b09      	ldr	r3, [pc, #36]	; (331c <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    32f6:	69db      	ldr	r3, [r3, #28]
    32f8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    32fa:	9b03      	ldr	r3, [sp, #12]
    32fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3300:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    3302:	9b01      	ldr	r3, [sp, #4]
    3304:	685b      	ldr	r3, [r3, #4]
    3306:	3b01      	subs	r3, #1
    3308:	011b      	lsls	r3, r3, #4
    330a:	9a03      	ldr	r2, [sp, #12]
    330c:	4313      	orrs	r3, r2
    330e:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3310:	4a02      	ldr	r2, [pc, #8]	; (331c <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    3312:	9b03      	ldr	r3, [sp, #12]
    3314:	61d3      	str	r3, [r2, #28]
}
    3316:	bf00      	nop
    3318:	b004      	add	sp, #16
    331a:	4770      	bx	lr
    331c:	40064000 	.word	0x40064000

00003320 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3320:	b084      	sub	sp, #16
    3322:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3324:	4b09      	ldr	r3, [pc, #36]	; (334c <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3326:	69db      	ldr	r3, [r3, #28]
    3328:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    332a:	9b03      	ldr	r3, [sp, #12]
    332c:	f023 030f 	bic.w	r3, r3, #15
    3330:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    3332:	9b01      	ldr	r3, [sp, #4]
    3334:	685b      	ldr	r3, [r3, #4]
    3336:	3b01      	subs	r3, #1
    3338:	9a03      	ldr	r2, [sp, #12]
    333a:	4313      	orrs	r3, r2
    333c:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    333e:	4a03      	ldr	r2, [pc, #12]	; (334c <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3340:	9b03      	ldr	r3, [sp, #12]
    3342:	61d3      	str	r3, [r2, #28]
}
    3344:	bf00      	nop
    3346:	b004      	add	sp, #16
    3348:	4770      	bx	lr
    334a:	bf00      	nop
    334c:	40064000 	.word	0x40064000

00003350 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    3350:	b084      	sub	sp, #16
    3352:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3354:	4b0a      	ldr	r3, [pc, #40]	; (3380 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3356:	685b      	ldr	r3, [r3, #4]
    3358:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    335a:	9b03      	ldr	r3, [sp, #12]
    335c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3360:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    3362:	9b01      	ldr	r3, [sp, #4]
    3364:	685b      	ldr	r3, [r3, #4]
    3366:	3b01      	subs	r3, #1
    3368:	021b      	lsls	r3, r3, #8
    336a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    336e:	9a03      	ldr	r2, [sp, #12]
    3370:	4313      	orrs	r3, r2
    3372:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3374:	4a02      	ldr	r2, [pc, #8]	; (3380 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3376:	9b03      	ldr	r3, [sp, #12]
    3378:	6053      	str	r3, [r2, #4]
}
    337a:	bf00      	nop
    337c:	b004      	add	sp, #16
    337e:	4770      	bx	lr
    3380:	40048000 	.word	0x40048000

00003384 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3384:	b084      	sub	sp, #16
    3386:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    3388:	4919      	ldr	r1, [pc, #100]	; (33f0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    338a:	9b01      	ldr	r3, [sp, #4]
    338c:	681a      	ldr	r2, [r3, #0]
    338e:	4819      	ldr	r0, [pc, #100]	; (33f4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3390:	4613      	mov	r3, r2
    3392:	00db      	lsls	r3, r3, #3
    3394:	4413      	add	r3, r2
    3396:	4403      	add	r3, r0
    3398:	3305      	adds	r3, #5
    339a:	781b      	ldrb	r3, [r3, #0]
    339c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    33a0:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    33a2:	9b03      	ldr	r3, [sp, #12]
    33a4:	f023 030f 	bic.w	r3, r3, #15
    33a8:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    33aa:	9b01      	ldr	r3, [sp, #4]
    33ac:	685b      	ldr	r3, [r3, #4]
    33ae:	3b01      	subs	r3, #1
    33b0:	f003 0307 	and.w	r3, r3, #7
    33b4:	9a03      	ldr	r2, [sp, #12]
    33b6:	4313      	orrs	r3, r2
    33b8:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    33ba:	9b01      	ldr	r3, [sp, #4]
    33bc:	7a1b      	ldrb	r3, [r3, #8]
    33be:	3b01      	subs	r3, #1
    33c0:	00db      	lsls	r3, r3, #3
    33c2:	f003 0308 	and.w	r3, r3, #8
    33c6:	9a03      	ldr	r2, [sp, #12]
    33c8:	4313      	orrs	r3, r2
    33ca:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    33cc:	4908      	ldr	r1, [pc, #32]	; (33f0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    33ce:	9b01      	ldr	r3, [sp, #4]
    33d0:	681a      	ldr	r2, [r3, #0]
    33d2:	4808      	ldr	r0, [pc, #32]	; (33f4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    33d4:	4613      	mov	r3, r2
    33d6:	00db      	lsls	r3, r3, #3
    33d8:	4413      	add	r3, r2
    33da:	4403      	add	r3, r0
    33dc:	3305      	adds	r3, #5
    33de:	781b      	ldrb	r3, [r3, #0]
    33e0:	461a      	mov	r2, r3
    33e2:	9b03      	ldr	r3, [sp, #12]
    33e4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    33e8:	bf00      	nop
    33ea:	b004      	add	sp, #16
    33ec:	4770      	bx	lr
    33ee:	bf00      	nop
    33f0:	40065000 	.word	0x40065000
    33f4:	00017ec4 	.word	0x00017ec4

000033f8 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    33f8:	b084      	sub	sp, #16
    33fa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    33fc:	4b10      	ldr	r3, [pc, #64]	; (3440 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    33fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3400:	4a0f      	ldr	r2, [pc, #60]	; (3440 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3406:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    3408:	4b0d      	ldr	r3, [pc, #52]	; (3440 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    340a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    340c:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    340e:	9b03      	ldr	r3, [sp, #12]
    3410:	f023 030f 	bic.w	r3, r3, #15
    3414:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3416:	9b01      	ldr	r3, [sp, #4]
    3418:	685b      	ldr	r3, [r3, #4]
    341a:	3b01      	subs	r3, #1
    341c:	005b      	lsls	r3, r3, #1
    341e:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    3422:	9b01      	ldr	r3, [sp, #4]
    3424:	7a1b      	ldrb	r3, [r3, #8]
    3426:	3b01      	subs	r3, #1
    3428:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    342c:	4313      	orrs	r3, r2
    342e:	9a03      	ldr	r2, [sp, #12]
    3430:	4313      	orrs	r3, r2
    3432:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    3434:	4a02      	ldr	r2, [pc, #8]	; (3440 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3436:	9b03      	ldr	r3, [sp, #12]
    3438:	6693      	str	r3, [r2, #104]	; 0x68
}
    343a:	bf00      	nop
    343c:	b004      	add	sp, #16
    343e:	4770      	bx	lr
    3440:	40048000 	.word	0x40048000

00003444 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    3444:	b082      	sub	sp, #8
    3446:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3448:	bf00      	nop
    344a:	b002      	add	sp, #8
    344c:	4770      	bx	lr
	...

00003450 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    3450:	b082      	sub	sp, #8
    3452:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3454:	bf00      	nop
    3456:	b002      	add	sp, #8
    3458:	4770      	bx	lr

0000345a <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    345a:	b082      	sub	sp, #8
    345c:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    345e:	bf00      	nop
    3460:	b002      	add	sp, #8
    3462:	4770      	bx	lr

00003464 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3464:	b500      	push	{lr}
    3466:	b083      	sub	sp, #12
    3468:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    346a:	9b01      	ldr	r3, [sp, #4]
    346c:	2b00      	cmp	r3, #0
    346e:	d002      	beq.n	3476 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    3470:	9801      	ldr	r0, [sp, #4]
    3472:	f000 f86a 	bl	354a <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3476:	bf00      	nop
    3478:	b003      	add	sp, #12
    347a:	f85d fb04 	ldr.w	pc, [sp], #4

0000347e <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    347e:	b500      	push	{lr}
    3480:	b083      	sub	sp, #12
    3482:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3484:	9b01      	ldr	r3, [sp, #4]
    3486:	2b00      	cmp	r3, #0
    3488:	d002      	beq.n	3490 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    348a:	9801      	ldr	r0, [sp, #4]
    348c:	f000 f884 	bl	3598 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    3490:	bf00      	nop
    3492:	b003      	add	sp, #12
    3494:	f85d fb04 	ldr.w	pc, [sp], #4

00003498 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3498:	b500      	push	{lr}
    349a:	b089      	sub	sp, #36	; 0x24
    349c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    349e:	2300      	movs	r3, #0
    34a0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    34a4:	9b01      	ldr	r3, [sp, #4]
    34a6:	2b00      	cmp	r3, #0
    34a8:	d031      	beq.n	350e <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    34aa:	4b1b      	ldr	r3, [pc, #108]	; (3518 <Clock_Ip_CompleteSOSC+0x80>)
    34ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    34b0:	f003 0301 	and.w	r3, r3, #1
    34b4:	2b00      	cmp	r3, #0
    34b6:	d02a      	beq.n	350e <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    34b8:	aa03      	add	r2, sp, #12
    34ba:	a904      	add	r1, sp, #16
    34bc:	a805      	add	r0, sp, #20
    34be:	f24c 3350 	movw	r3, #50000	; 0xc350
    34c2:	f7ff fd1d 	bl	2f00 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    34c6:	4b14      	ldr	r3, [pc, #80]	; (3518 <Clock_Ip_CompleteSOSC+0x80>)
    34c8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    34cc:	0e1b      	lsrs	r3, r3, #24
    34ce:	f003 0301 	and.w	r3, r3, #1
    34d2:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    34d4:	9a03      	ldr	r2, [sp, #12]
    34d6:	a904      	add	r1, sp, #16
    34d8:	ab05      	add	r3, sp, #20
    34da:	4618      	mov	r0, r3
    34dc:	f7ff fd2a 	bl	2f34 <Clock_Ip_TimeoutExpired>
    34e0:	4603      	mov	r3, r0
    34e2:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    34e6:	9b06      	ldr	r3, [sp, #24]
    34e8:	2b00      	cmp	r3, #0
    34ea:	d106      	bne.n	34fa <Clock_Ip_CompleteSOSC+0x62>
    34ec:	f89d 301f 	ldrb.w	r3, [sp, #31]
    34f0:	f083 0301 	eor.w	r3, r3, #1
    34f4:	b2db      	uxtb	r3, r3
    34f6:	2b00      	cmp	r3, #0
    34f8:	d1e5      	bne.n	34c6 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    34fa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    34fe:	2b00      	cmp	r3, #0
    3500:	d005      	beq.n	350e <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3502:	9b01      	ldr	r3, [sp, #4]
    3504:	681b      	ldr	r3, [r3, #0]
    3506:	4619      	mov	r1, r3
    3508:	2001      	movs	r0, #1
    350a:	f7ff fce9 	bl	2ee0 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    350e:	bf00      	nop
    3510:	b009      	add	sp, #36	; 0x24
    3512:	f85d fb04 	ldr.w	pc, [sp], #4
    3516:	bf00      	nop
    3518:	40064000 	.word	0x40064000

0000351c <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    351c:	b500      	push	{lr}
    351e:	b083      	sub	sp, #12
    3520:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    3522:	9801      	ldr	r0, [sp, #4]
    3524:	f000 f8c0 	bl	36a8 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3528:	bf00      	nop
    352a:	b003      	add	sp, #12
    352c:	f85d fb04 	ldr.w	pc, [sp], #4

00003530 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3530:	b500      	push	{lr}
    3532:	b083      	sub	sp, #12
    3534:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3536:	9b01      	ldr	r3, [sp, #4]
    3538:	2b00      	cmp	r3, #0
    353a:	d002      	beq.n	3542 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    353c:	9801      	ldr	r0, [sp, #4]
    353e:	f000 f8c3 	bl	36c8 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3542:	bf00      	nop
    3544:	b003      	add	sp, #12
    3546:	f85d fb04 	ldr.w	pc, [sp], #4

0000354a <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    354a:	b082      	sub	sp, #8
    354c:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    354e:	4b11      	ldr	r3, [pc, #68]	; (3594 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3550:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3554:	4a0f      	ldr	r2, [pc, #60]	; (3594 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3556:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    355a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    355e:	4b0d      	ldr	r3, [pc, #52]	; (3594 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3560:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3564:	4a0b      	ldr	r2, [pc, #44]	; (3594 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    356a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    356e:	4b09      	ldr	r3, [pc, #36]	; (3594 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3570:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3574:	4a07      	ldr	r2, [pc, #28]	; (3594 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3576:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    357a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    357e:	4b05      	ldr	r3, [pc, #20]	; (3594 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3580:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3584:	4a03      	ldr	r2, [pc, #12]	; (3594 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3586:	f023 0301 	bic.w	r3, r3, #1
    358a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    358e:	bf00      	nop
    3590:	b002      	add	sp, #8
    3592:	4770      	bx	lr
    3594:	40064000 	.word	0x40064000

00003598 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3598:	b082      	sub	sp, #8
    359a:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    359c:	9b01      	ldr	r3, [sp, #4]
    359e:	891b      	ldrh	r3, [r3, #8]
    35a0:	2b01      	cmp	r3, #1
    35a2:	d174      	bne.n	368e <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    35a4:	9b01      	ldr	r3, [sp, #4]
    35a6:	7bdb      	ldrb	r3, [r3, #15]
    35a8:	2b00      	cmp	r3, #0
    35aa:	d002      	beq.n	35b2 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    35ac:	2b01      	cmp	r3, #1
    35ae:	d009      	beq.n	35c4 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    35b0:	e011      	b.n	35d6 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    35b2:	4b39      	ldr	r3, [pc, #228]	; (3698 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    35b8:	4a37      	ldr	r2, [pc, #220]	; (3698 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35ba:	f023 0308 	bic.w	r3, r3, #8
    35be:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    35c2:	e008      	b.n	35d6 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    35c4:	4b34      	ldr	r3, [pc, #208]	; (3698 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    35ca:	4a33      	ldr	r2, [pc, #204]	; (3698 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35cc:	f043 0308 	orr.w	r3, r3, #8
    35d0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    35d4:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    35d6:	4b30      	ldr	r3, [pc, #192]	; (3698 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    35dc:	4a2e      	ldr	r2, [pc, #184]	; (3698 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    35e2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    35e6:	9b01      	ldr	r3, [sp, #4]
    35e8:	685b      	ldr	r3, [r3, #4]
    35ea:	4a2c      	ldr	r2, [pc, #176]	; (369c <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    35ec:	4293      	cmp	r3, r2
    35ee:	d90d      	bls.n	360c <Clock_Ip_SetSOSC_TrustedCall+0x74>
    35f0:	9b01      	ldr	r3, [sp, #4]
    35f2:	685b      	ldr	r3, [r3, #4]
    35f4:	4a2a      	ldr	r2, [pc, #168]	; (36a0 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    35f6:	4293      	cmp	r3, r2
    35f8:	d208      	bcs.n	360c <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    35fa:	4b27      	ldr	r3, [pc, #156]	; (3698 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3600:	4a25      	ldr	r2, [pc, #148]	; (3698 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3602:	f043 0320 	orr.w	r3, r3, #32
    3606:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    360a:	e007      	b.n	361c <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    360c:	4b22      	ldr	r3, [pc, #136]	; (3698 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    360e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3612:	4a21      	ldr	r2, [pc, #132]	; (3698 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3614:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    3618:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    361c:	9b01      	ldr	r3, [sp, #4]
    361e:	7b1b      	ldrb	r3, [r3, #12]
    3620:	2b00      	cmp	r3, #0
    3622:	d108      	bne.n	3636 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    3624:	4b1c      	ldr	r3, [pc, #112]	; (3698 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3626:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    362a:	4a1b      	ldr	r2, [pc, #108]	; (3698 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    362c:	f043 0304 	orr.w	r3, r3, #4
    3630:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3634:	e007      	b.n	3646 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    3636:	4b18      	ldr	r3, [pc, #96]	; (3698 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3638:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    363c:	4a16      	ldr	r2, [pc, #88]	; (3698 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    363e:	f023 0304 	bic.w	r3, r3, #4
    3642:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3646:	9b01      	ldr	r3, [sp, #4]
    3648:	7c1b      	ldrb	r3, [r3, #16]
    364a:	2b02      	cmp	r3, #2
    364c:	d011      	beq.n	3672 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    364e:	2b02      	cmp	r3, #2
    3650:	dc14      	bgt.n	367c <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    3652:	2b00      	cmp	r3, #0
    3654:	d002      	beq.n	365c <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    3656:	2b01      	cmp	r3, #1
    3658:	d005      	beq.n	3666 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    365a:	e00f      	b.n	367c <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    365c:	4b0e      	ldr	r3, [pc, #56]	; (3698 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    365e:	2201      	movs	r2, #1
    3660:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3664:	e014      	b.n	3690 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3666:	4b0c      	ldr	r3, [pc, #48]	; (3698 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3668:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    366c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3670:	e00e      	b.n	3690 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3672:	4b09      	ldr	r3, [pc, #36]	; (3698 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3674:	4a0b      	ldr	r2, [pc, #44]	; (36a4 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    3676:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    367a:	e009      	b.n	3690 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    367c:	4b06      	ldr	r3, [pc, #24]	; (3698 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    367e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3682:	4a05      	ldr	r2, [pc, #20]	; (3698 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3684:	f043 0301 	orr.w	r3, r3, #1
    3688:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    368c:	e000      	b.n	3690 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    368e:	bf00      	nop
}
    3690:	bf00      	nop
    3692:	b002      	add	sp, #8
    3694:	4770      	bx	lr
    3696:	bf00      	nop
    3698:	40064000 	.word	0x40064000
    369c:	003d08ff 	.word	0x003d08ff
    36a0:	007a1200 	.word	0x007a1200
    36a4:	00030001 	.word	0x00030001

000036a8 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    36a8:	b082      	sub	sp, #8
    36aa:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    36ac:	4b05      	ldr	r3, [pc, #20]	; (36c4 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    36ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    36b2:	4a04      	ldr	r2, [pc, #16]	; (36c4 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    36b4:	f023 0301 	bic.w	r3, r3, #1
    36b8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    36bc:	bf00      	nop
    36be:	b002      	add	sp, #8
    36c0:	4770      	bx	lr
    36c2:	bf00      	nop
    36c4:	40064000 	.word	0x40064000

000036c8 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    36c8:	b082      	sub	sp, #8
    36ca:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    36cc:	9b01      	ldr	r3, [sp, #4]
    36ce:	891b      	ldrh	r3, [r3, #8]
    36d0:	2b01      	cmp	r3, #1
    36d2:	d107      	bne.n	36e4 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    36d4:	4b05      	ldr	r3, [pc, #20]	; (36ec <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    36d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    36da:	4a04      	ldr	r2, [pc, #16]	; (36ec <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    36dc:	f043 0301 	orr.w	r3, r3, #1
    36e0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    36e4:	bf00      	nop
    36e6:	b002      	add	sp, #8
    36e8:	4770      	bx	lr
    36ea:	bf00      	nop
    36ec:	40064000 	.word	0x40064000

000036f0 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    36f0:	b082      	sub	sp, #8
    36f2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    36f4:	bf00      	nop
    36f6:	b002      	add	sp, #8
    36f8:	4770      	bx	lr

000036fa <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    36fa:	b082      	sub	sp, #8
    36fc:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    36fe:	2300      	movs	r3, #0
}
    3700:	4618      	mov	r0, r3
    3702:	b002      	add	sp, #8
    3704:	4770      	bx	lr

00003706 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    3706:	b082      	sub	sp, #8
    3708:	9001      	str	r0, [sp, #4]
    370a:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    370c:	bf00      	nop
    370e:	b002      	add	sp, #8
    3710:	4770      	bx	lr
	...

00003714 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    3714:	b082      	sub	sp, #8
    3716:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3718:	bf00      	nop
    371a:	b002      	add	sp, #8
    371c:	4770      	bx	lr

0000371e <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    371e:	b082      	sub	sp, #8
    3720:	9001      	str	r0, [sp, #4]
    3722:	460b      	mov	r3, r1
    3724:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    3728:	bf00      	nop
    372a:	b002      	add	sp, #8
    372c:	4770      	bx	lr

0000372e <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    372e:	b500      	push	{lr}
    3730:	b083      	sub	sp, #12
    3732:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3734:	9b01      	ldr	r3, [sp, #4]
    3736:	2b00      	cmp	r3, #0
    3738:	d002      	beq.n	3740 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    373a:	9801      	ldr	r0, [sp, #4]
    373c:	f000 f8e7 	bl	390e <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3740:	bf00      	nop
    3742:	b003      	add	sp, #12
    3744:	f85d fb04 	ldr.w	pc, [sp], #4

00003748 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3748:	b500      	push	{lr}
    374a:	b085      	sub	sp, #20
    374c:	9001      	str	r0, [sp, #4]
    374e:	460b      	mov	r3, r1
    3750:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3754:	9b01      	ldr	r3, [sp, #4]
    3756:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3758:	f89d 3003 	ldrb.w	r3, [sp, #3]
    375c:	2b00      	cmp	r3, #0
    375e:	d003      	beq.n	3768 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    3760:	2300      	movs	r3, #0
    3762:	f8ad 300c 	strh.w	r3, [sp, #12]
    3766:	e002      	b.n	376e <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3768:	2301      	movs	r3, #1
    376a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    376e:	ab02      	add	r3, sp, #8
    3770:	4618      	mov	r0, r3
    3772:	f7ff ffdc 	bl	372e <Clock_Ip_ClockSetSimLPO1KEnable>
}
    3776:	bf00      	nop
    3778:	b005      	add	sp, #20
    377a:	f85d fb04 	ldr.w	pc, [sp], #4

0000377e <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    377e:	b500      	push	{lr}
    3780:	b083      	sub	sp, #12
    3782:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3784:	9b01      	ldr	r3, [sp, #4]
    3786:	2b00      	cmp	r3, #0
    3788:	d002      	beq.n	3790 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    378a:	9801      	ldr	r0, [sp, #4]
    378c:	f000 f8d6 	bl	393c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3790:	bf00      	nop
    3792:	b003      	add	sp, #12
    3794:	f85d fb04 	ldr.w	pc, [sp], #4

00003798 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3798:	b500      	push	{lr}
    379a:	b085      	sub	sp, #20
    379c:	9001      	str	r0, [sp, #4]
    379e:	460b      	mov	r3, r1
    37a0:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    37a4:	9b01      	ldr	r3, [sp, #4]
    37a6:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    37a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    37ac:	2b00      	cmp	r3, #0
    37ae:	d003      	beq.n	37b8 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    37b0:	2300      	movs	r3, #0
    37b2:	f8ad 300c 	strh.w	r3, [sp, #12]
    37b6:	e002      	b.n	37be <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    37b8:	2301      	movs	r3, #1
    37ba:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    37be:	ab02      	add	r3, sp, #8
    37c0:	4618      	mov	r0, r3
    37c2:	f7ff ffdc 	bl	377e <Clock_Ip_ClockSetSimLPO32KEnable>
}
    37c6:	bf00      	nop
    37c8:	b005      	add	sp, #20
    37ca:	f85d fb04 	ldr.w	pc, [sp], #4

000037ce <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    37ce:	b500      	push	{lr}
    37d0:	b083      	sub	sp, #12
    37d2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37d4:	9b01      	ldr	r3, [sp, #4]
    37d6:	2b00      	cmp	r3, #0
    37d8:	d002      	beq.n	37e0 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    37da:	9801      	ldr	r0, [sp, #4]
    37dc:	f000 f8c6 	bl	396c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37e0:	bf00      	nop
    37e2:	b003      	add	sp, #12
    37e4:	f85d fb04 	ldr.w	pc, [sp], #4

000037e8 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    37e8:	b500      	push	{lr}
    37ea:	b085      	sub	sp, #20
    37ec:	9001      	str	r0, [sp, #4]
    37ee:	460b      	mov	r3, r1
    37f0:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    37f4:	9b01      	ldr	r3, [sp, #4]
    37f6:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    37f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    37fc:	2b00      	cmp	r3, #0
    37fe:	d003      	beq.n	3808 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    3800:	2300      	movs	r3, #0
    3802:	f8ad 300c 	strh.w	r3, [sp, #12]
    3806:	e002      	b.n	380e <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3808:	2301      	movs	r3, #1
    380a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    380e:	ab02      	add	r3, sp, #8
    3810:	4618      	mov	r0, r3
    3812:	f7ff ffdc 	bl	37ce <Clock_Ip_ClockSetSimClkoutEnable>
}
    3816:	bf00      	nop
    3818:	b005      	add	sp, #20
    381a:	f85d fb04 	ldr.w	pc, [sp], #4

0000381e <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    381e:	b500      	push	{lr}
    3820:	b083      	sub	sp, #12
    3822:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3824:	9b01      	ldr	r3, [sp, #4]
    3826:	2b00      	cmp	r3, #0
    3828:	d002      	beq.n	3830 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    382a:	9801      	ldr	r0, [sp, #4]
    382c:	f000 f8b6 	bl	399c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3830:	bf00      	nop
    3832:	b003      	add	sp, #12
    3834:	f85d fb04 	ldr.w	pc, [sp], #4

00003838 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3838:	b500      	push	{lr}
    383a:	b085      	sub	sp, #20
    383c:	9001      	str	r0, [sp, #4]
    383e:	460b      	mov	r3, r1
    3840:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3844:	9b01      	ldr	r3, [sp, #4]
    3846:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3848:	f89d 3003 	ldrb.w	r3, [sp, #3]
    384c:	2b00      	cmp	r3, #0
    384e:	d003      	beq.n	3858 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    3850:	2300      	movs	r3, #0
    3852:	f8ad 300c 	strh.w	r3, [sp, #12]
    3856:	e002      	b.n	385e <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3858:	2301      	movs	r3, #1
    385a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    385e:	ab02      	add	r3, sp, #8
    3860:	4618      	mov	r0, r3
    3862:	f7ff ffdc 	bl	381e <Clock_Ip_ClockSetPccCgcEnable>
}
    3866:	bf00      	nop
    3868:	b005      	add	sp, #20
    386a:	f85d fb04 	ldr.w	pc, [sp], #4

0000386e <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    386e:	b500      	push	{lr}
    3870:	b083      	sub	sp, #12
    3872:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3874:	9b01      	ldr	r3, [sp, #4]
    3876:	2b00      	cmp	r3, #0
    3878:	d002      	beq.n	3880 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    387a:	9801      	ldr	r0, [sp, #4]
    387c:	f000 f8bc 	bl	39f8 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3880:	bf00      	nop
    3882:	b003      	add	sp, #12
    3884:	f85d fb04 	ldr.w	pc, [sp], #4

00003888 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    3888:	b500      	push	{lr}
    388a:	b085      	sub	sp, #20
    388c:	9001      	str	r0, [sp, #4]
    388e:	460b      	mov	r3, r1
    3890:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3894:	9b01      	ldr	r3, [sp, #4]
    3896:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3898:	f89d 3003 	ldrb.w	r3, [sp, #3]
    389c:	2b00      	cmp	r3, #0
    389e:	d003      	beq.n	38a8 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    38a0:	2300      	movs	r3, #0
    38a2:	f8ad 300c 	strh.w	r3, [sp, #12]
    38a6:	e002      	b.n	38ae <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    38a8:	2301      	movs	r3, #1
    38aa:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    38ae:	ab02      	add	r3, sp, #8
    38b0:	4618      	mov	r0, r3
    38b2:	f7ff ffdc 	bl	386e <Clock_Ip_ClockSetSimGate>
}
    38b6:	bf00      	nop
    38b8:	b005      	add	sp, #20
    38ba:	f85d fb04 	ldr.w	pc, [sp], #4

000038be <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    38be:	b500      	push	{lr}
    38c0:	b083      	sub	sp, #12
    38c2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38c4:	9b01      	ldr	r3, [sp, #4]
    38c6:	2b00      	cmp	r3, #0
    38c8:	d002      	beq.n	38d0 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    38ca:	9801      	ldr	r0, [sp, #4]
    38cc:	f000 f8c0 	bl	3a50 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38d0:	bf00      	nop
    38d2:	b003      	add	sp, #12
    38d4:	f85d fb04 	ldr.w	pc, [sp], #4

000038d8 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    38d8:	b500      	push	{lr}
    38da:	b085      	sub	sp, #20
    38dc:	9001      	str	r0, [sp, #4]
    38de:	460b      	mov	r3, r1
    38e0:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    38e4:	9b01      	ldr	r3, [sp, #4]
    38e6:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    38e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    38ec:	2b00      	cmp	r3, #0
    38ee:	d003      	beq.n	38f8 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    38f0:	2300      	movs	r3, #0
    38f2:	f8ad 300c 	strh.w	r3, [sp, #12]
    38f6:	e002      	b.n	38fe <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    38f8:	2301      	movs	r3, #1
    38fa:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    38fe:	ab02      	add	r3, sp, #8
    3900:	4618      	mov	r0, r3
    3902:	f7ff ffdc 	bl	38be <Clock_Ip_ClockSetSimTraceEnable>
}
    3906:	bf00      	nop
    3908:	b005      	add	sp, #20
    390a:	f85d fb04 	ldr.w	pc, [sp], #4

0000390e <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    390e:	b084      	sub	sp, #16
    3910:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3912:	4b09      	ldr	r3, [pc, #36]	; (3938 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3914:	691b      	ldr	r3, [r3, #16]
    3916:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    3918:	9b03      	ldr	r3, [sp, #12]
    391a:	f023 0301 	bic.w	r3, r3, #1
    391e:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3920:	9b01      	ldr	r3, [sp, #4]
    3922:	889b      	ldrh	r3, [r3, #4]
    3924:	461a      	mov	r2, r3
    3926:	9b03      	ldr	r3, [sp, #12]
    3928:	4313      	orrs	r3, r2
    392a:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    392c:	4a02      	ldr	r2, [pc, #8]	; (3938 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    392e:	9b03      	ldr	r3, [sp, #12]
    3930:	6113      	str	r3, [r2, #16]
}
    3932:	bf00      	nop
    3934:	b004      	add	sp, #16
    3936:	4770      	bx	lr
    3938:	40048000 	.word	0x40048000

0000393c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    393c:	b084      	sub	sp, #16
    393e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3940:	4b09      	ldr	r3, [pc, #36]	; (3968 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3942:	691b      	ldr	r3, [r3, #16]
    3944:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    3946:	9b03      	ldr	r3, [sp, #12]
    3948:	f023 0302 	bic.w	r3, r3, #2
    394c:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    394e:	9b01      	ldr	r3, [sp, #4]
    3950:	889b      	ldrh	r3, [r3, #4]
    3952:	005b      	lsls	r3, r3, #1
    3954:	9a03      	ldr	r2, [sp, #12]
    3956:	4313      	orrs	r3, r2
    3958:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    395a:	4a03      	ldr	r2, [pc, #12]	; (3968 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    395c:	9b03      	ldr	r3, [sp, #12]
    395e:	6113      	str	r3, [r2, #16]
}
    3960:	bf00      	nop
    3962:	b004      	add	sp, #16
    3964:	4770      	bx	lr
    3966:	bf00      	nop
    3968:	40048000 	.word	0x40048000

0000396c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    396c:	b084      	sub	sp, #16
    396e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3970:	4b09      	ldr	r3, [pc, #36]	; (3998 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    3972:	685b      	ldr	r3, [r3, #4]
    3974:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    3976:	9b03      	ldr	r3, [sp, #12]
    3978:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    397c:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    397e:	9b01      	ldr	r3, [sp, #4]
    3980:	889b      	ldrh	r3, [r3, #4]
    3982:	02db      	lsls	r3, r3, #11
    3984:	9a03      	ldr	r2, [sp, #12]
    3986:	4313      	orrs	r3, r2
    3988:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    398a:	4a03      	ldr	r2, [pc, #12]	; (3998 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    398c:	9b03      	ldr	r3, [sp, #12]
    398e:	6053      	str	r3, [r2, #4]
}
    3990:	bf00      	nop
    3992:	b004      	add	sp, #16
    3994:	4770      	bx	lr
    3996:	bf00      	nop
    3998:	40048000 	.word	0x40048000

0000399c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    399c:	b084      	sub	sp, #16
    399e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    39a0:	4913      	ldr	r1, [pc, #76]	; (39f0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    39a2:	9b01      	ldr	r3, [sp, #4]
    39a4:	681a      	ldr	r2, [r3, #0]
    39a6:	4813      	ldr	r0, [pc, #76]	; (39f4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    39a8:	4613      	mov	r3, r2
    39aa:	00db      	lsls	r3, r3, #3
    39ac:	4413      	add	r3, r2
    39ae:	4403      	add	r3, r0
    39b0:	3306      	adds	r3, #6
    39b2:	781b      	ldrb	r3, [r3, #0]
    39b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    39b8:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    39ba:	9b03      	ldr	r3, [sp, #12]
    39bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    39c0:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    39c2:	9b01      	ldr	r3, [sp, #4]
    39c4:	889b      	ldrh	r3, [r3, #4]
    39c6:	079b      	lsls	r3, r3, #30
    39c8:	9a03      	ldr	r2, [sp, #12]
    39ca:	4313      	orrs	r3, r2
    39cc:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    39ce:	4908      	ldr	r1, [pc, #32]	; (39f0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    39d0:	9b01      	ldr	r3, [sp, #4]
    39d2:	681a      	ldr	r2, [r3, #0]
    39d4:	4807      	ldr	r0, [pc, #28]	; (39f4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    39d6:	4613      	mov	r3, r2
    39d8:	00db      	lsls	r3, r3, #3
    39da:	4413      	add	r3, r2
    39dc:	4403      	add	r3, r0
    39de:	3306      	adds	r3, #6
    39e0:	781b      	ldrb	r3, [r3, #0]
    39e2:	461a      	mov	r2, r3
    39e4:	9b03      	ldr	r3, [sp, #12]
    39e6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    39ea:	bf00      	nop
    39ec:	b004      	add	sp, #16
    39ee:	4770      	bx	lr
    39f0:	40065000 	.word	0x40065000
    39f4:	00017ec4 	.word	0x00017ec4

000039f8 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    39f8:	b086      	sub	sp, #24
    39fa:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    39fc:	9b01      	ldr	r3, [sp, #4]
    39fe:	889b      	ldrh	r3, [r3, #4]
    3a00:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    3a02:	9b01      	ldr	r3, [sp, #4]
    3a04:	681a      	ldr	r2, [r3, #0]
    3a06:	4910      	ldr	r1, [pc, #64]	; (3a48 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    3a08:	4613      	mov	r3, r2
    3a0a:	00db      	lsls	r3, r3, #3
    3a0c:	4413      	add	r3, r2
    3a0e:	440b      	add	r3, r1
    3a10:	3306      	adds	r3, #6
    3a12:	781b      	ldrb	r3, [r3, #0]
    3a14:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    3a16:	4b0d      	ldr	r3, [pc, #52]	; (3a4c <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3a1a:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    3a1c:	2201      	movs	r2, #1
    3a1e:	9b04      	ldr	r3, [sp, #16]
    3a20:	fa02 f303 	lsl.w	r3, r2, r3
    3a24:	43db      	mvns	r3, r3
    3a26:	9a03      	ldr	r2, [sp, #12]
    3a28:	4013      	ands	r3, r2
    3a2a:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    3a2c:	9a05      	ldr	r2, [sp, #20]
    3a2e:	9b04      	ldr	r3, [sp, #16]
    3a30:	fa02 f303 	lsl.w	r3, r2, r3
    3a34:	9a03      	ldr	r2, [sp, #12]
    3a36:	4313      	orrs	r3, r2
    3a38:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    3a3a:	4a04      	ldr	r2, [pc, #16]	; (3a4c <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3a3c:	9b03      	ldr	r3, [sp, #12]
    3a3e:	6413      	str	r3, [r2, #64]	; 0x40
}
    3a40:	bf00      	nop
    3a42:	b006      	add	sp, #24
    3a44:	4770      	bx	lr
    3a46:	bf00      	nop
    3a48:	00017ec4 	.word	0x00017ec4
    3a4c:	40048000 	.word	0x40048000

00003a50 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3a50:	b084      	sub	sp, #16
    3a52:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    3a54:	4b0a      	ldr	r3, [pc, #40]	; (3a80 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3a56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3a58:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    3a5a:	9b01      	ldr	r3, [sp, #4]
    3a5c:	889b      	ldrh	r3, [r3, #4]
    3a5e:	2b01      	cmp	r3, #1
    3a60:	d104      	bne.n	3a6c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    3a62:	9b03      	ldr	r3, [sp, #12]
    3a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3a68:	9303      	str	r3, [sp, #12]
    3a6a:	e003      	b.n	3a74 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3a6c:	9b03      	ldr	r3, [sp, #12]
    3a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3a72:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    3a74:	4a02      	ldr	r2, [pc, #8]	; (3a80 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3a76:	9b03      	ldr	r3, [sp, #12]
    3a78:	6693      	str	r3, [r2, #104]	; 0x68
}
    3a7a:	bf00      	nop
    3a7c:	b004      	add	sp, #16
    3a7e:	4770      	bx	lr
    3a80:	40048000 	.word	0x40048000

00003a84 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    3a84:	b082      	sub	sp, #8
    3a86:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3a88:	bf00      	nop
    3a8a:	b002      	add	sp, #8
    3a8c:	4770      	bx	lr

00003a8e <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    3a8e:	b082      	sub	sp, #8
    3a90:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3a92:	bf00      	nop
    3a94:	b002      	add	sp, #8
    3a96:	4770      	bx	lr

00003a98 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3a98:	b500      	push	{lr}
    3a9a:	b083      	sub	sp, #12
    3a9c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a9e:	9b01      	ldr	r3, [sp, #4]
    3aa0:	2b00      	cmp	r3, #0
    3aa2:	d002      	beq.n	3aaa <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    3aa4:	9801      	ldr	r0, [sp, #4]
    3aa6:	f000 f8d1 	bl	3c4c <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3aaa:	bf00      	nop
    3aac:	b003      	add	sp, #12
    3aae:	f85d fb04 	ldr.w	pc, [sp], #4

00003ab2 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3ab2:	b500      	push	{lr}
    3ab4:	b083      	sub	sp, #12
    3ab6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ab8:	9b01      	ldr	r3, [sp, #4]
    3aba:	2b00      	cmp	r3, #0
    3abc:	d002      	beq.n	3ac4 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    3abe:	9801      	ldr	r0, [sp, #4]
    3ac0:	f000 f950 	bl	3d64 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ac4:	bf00      	nop
    3ac6:	b003      	add	sp, #12
    3ac8:	f85d fb04 	ldr.w	pc, [sp], #4

00003acc <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    3acc:	b500      	push	{lr}
    3ace:	b083      	sub	sp, #12
    3ad0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    3ad2:	9801      	ldr	r0, [sp, #4]
    3ad4:	f000 f98e 	bl	3df4 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3ad8:	bf00      	nop
    3ada:	b003      	add	sp, #12
    3adc:	f85d fb04 	ldr.w	pc, [sp], #4

00003ae0 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3ae0:	b500      	push	{lr}
    3ae2:	b083      	sub	sp, #12
    3ae4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ae6:	9b01      	ldr	r3, [sp, #4]
    3ae8:	2b00      	cmp	r3, #0
    3aea:	d002      	beq.n	3af2 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    3aec:	9801      	ldr	r0, [sp, #4]
    3aee:	f000 f999 	bl	3e24 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3af2:	bf00      	nop
    3af4:	b003      	add	sp, #12
    3af6:	f85d fb04 	ldr.w	pc, [sp], #4

00003afa <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3afa:	b500      	push	{lr}
    3afc:	b083      	sub	sp, #12
    3afe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b00:	9b01      	ldr	r3, [sp, #4]
    3b02:	2b00      	cmp	r3, #0
    3b04:	d002      	beq.n	3b0c <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    3b06:	9801      	ldr	r0, [sp, #4]
    3b08:	f000 f9b0 	bl	3e6c <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b0c:	bf00      	nop
    3b0e:	b003      	add	sp, #12
    3b10:	f85d fb04 	ldr.w	pc, [sp], #4

00003b14 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    3b14:	b500      	push	{lr}
    3b16:	b083      	sub	sp, #12
    3b18:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    3b1a:	9801      	ldr	r0, [sp, #4]
    3b1c:	f000 f9ba 	bl	3e94 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3b20:	bf00      	nop
    3b22:	b003      	add	sp, #12
    3b24:	f85d fb04 	ldr.w	pc, [sp], #4

00003b28 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3b28:	b500      	push	{lr}
    3b2a:	b083      	sub	sp, #12
    3b2c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b2e:	9b01      	ldr	r3, [sp, #4]
    3b30:	2b00      	cmp	r3, #0
    3b32:	d002      	beq.n	3b3a <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    3b34:	9801      	ldr	r0, [sp, #4]
    3b36:	f000 f9bd 	bl	3eb4 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b3a:	bf00      	nop
    3b3c:	b003      	add	sp, #12
    3b3e:	f85d fb04 	ldr.w	pc, [sp], #4

00003b42 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3b42:	b500      	push	{lr}
    3b44:	b083      	sub	sp, #12
    3b46:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b48:	9b01      	ldr	r3, [sp, #4]
    3b4a:	2b00      	cmp	r3, #0
    3b4c:	d002      	beq.n	3b54 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    3b4e:	9801      	ldr	r0, [sp, #4]
    3b50:	f000 f9d4 	bl	3efc <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b54:	bf00      	nop
    3b56:	b003      	add	sp, #12
    3b58:	f85d fb04 	ldr.w	pc, [sp], #4

00003b5c <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    3b5c:	b500      	push	{lr}
    3b5e:	b083      	sub	sp, #12
    3b60:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    3b62:	9801      	ldr	r0, [sp, #4]
    3b64:	f000 f9de 	bl	3f24 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3b68:	bf00      	nop
    3b6a:	b003      	add	sp, #12
    3b6c:	f85d fb04 	ldr.w	pc, [sp], #4

00003b70 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    3b70:	b500      	push	{lr}
    3b72:	b089      	sub	sp, #36	; 0x24
    3b74:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    3b76:	2300      	movs	r3, #0
    3b78:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    3b7c:	4b20      	ldr	r3, [pc, #128]	; (3c00 <SetInputSouceSytemClock+0x90>)
    3b7e:	695b      	ldr	r3, [r3, #20]
    3b80:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3b82:	9b06      	ldr	r3, [sp, #24]
    3b84:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3b88:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    3b8a:	9b01      	ldr	r3, [sp, #4]
    3b8c:	061b      	lsls	r3, r3, #24
    3b8e:	9a06      	ldr	r2, [sp, #24]
    3b90:	4313      	orrs	r3, r2
    3b92:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    3b94:	4a1a      	ldr	r2, [pc, #104]	; (3c00 <SetInputSouceSytemClock+0x90>)
    3b96:	9b06      	ldr	r3, [sp, #24]
    3b98:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3b9a:	aa02      	add	r2, sp, #8
    3b9c:	a903      	add	r1, sp, #12
    3b9e:	a804      	add	r0, sp, #16
    3ba0:	f24c 3350 	movw	r3, #50000	; 0xc350
    3ba4:	f7ff f9ac 	bl	2f00 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    3ba8:	4b15      	ldr	r3, [pc, #84]	; (3c00 <SetInputSouceSytemClock+0x90>)
    3baa:	691b      	ldr	r3, [r3, #16]
    3bac:	0e1b      	lsrs	r3, r3, #24
    3bae:	f003 030f 	and.w	r3, r3, #15
    3bb2:	9a01      	ldr	r2, [sp, #4]
    3bb4:	429a      	cmp	r2, r3
    3bb6:	bf0c      	ite	eq
    3bb8:	2301      	moveq	r3, #1
    3bba:	2300      	movne	r3, #0
    3bbc:	b2db      	uxtb	r3, r3
    3bbe:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3bc0:	9a02      	ldr	r2, [sp, #8]
    3bc2:	a903      	add	r1, sp, #12
    3bc4:	ab04      	add	r3, sp, #16
    3bc6:	4618      	mov	r0, r3
    3bc8:	f7ff f9b4 	bl	2f34 <Clock_Ip_TimeoutExpired>
    3bcc:	4603      	mov	r3, r0
    3bce:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    3bd2:	9b05      	ldr	r3, [sp, #20]
    3bd4:	2b00      	cmp	r3, #0
    3bd6:	d106      	bne.n	3be6 <SetInputSouceSytemClock+0x76>
    3bd8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3bdc:	f083 0301 	eor.w	r3, r3, #1
    3be0:	b2db      	uxtb	r3, r3
    3be2:	2b00      	cmp	r3, #0
    3be4:	d1e0      	bne.n	3ba8 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    3be6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3bea:	2b00      	cmp	r3, #0
    3bec:	d003      	beq.n	3bf6 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3bee:	2105      	movs	r1, #5
    3bf0:	2001      	movs	r0, #1
    3bf2:	f7ff f975 	bl	2ee0 <Clock_Ip_ReportClockErrors>
    }
}
    3bf6:	bf00      	nop
    3bf8:	b009      	add	sp, #36	; 0x24
    3bfa:	f85d fb04 	ldr.w	pc, [sp], #4
    3bfe:	bf00      	nop
    3c00:	40064000 	.word	0x40064000

00003c04 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3c04:	b500      	push	{lr}
    3c06:	b083      	sub	sp, #12
    3c08:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c0a:	9b01      	ldr	r3, [sp, #4]
    3c0c:	2b00      	cmp	r3, #0
    3c0e:	d002      	beq.n	3c16 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    3c10:	9801      	ldr	r0, [sp, #4]
    3c12:	f000 f997 	bl	3f44 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c16:	bf00      	nop
    3c18:	b003      	add	sp, #12
    3c1a:	f85d fb04 	ldr.w	pc, [sp], #4

00003c1e <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3c1e:	b500      	push	{lr}
    3c20:	b083      	sub	sp, #12
    3c22:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c24:	9b01      	ldr	r3, [sp, #4]
    3c26:	2b00      	cmp	r3, #0
    3c28:	d002      	beq.n	3c30 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    3c2a:	9801      	ldr	r0, [sp, #4]
    3c2c:	f000 fa7e 	bl	412c <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c30:	bf00      	nop
    3c32:	b003      	add	sp, #12
    3c34:	f85d fb04 	ldr.w	pc, [sp], #4

00003c38 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    3c38:	b500      	push	{lr}
    3c3a:	b083      	sub	sp, #12
    3c3c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    3c3e:	9801      	ldr	r0, [sp, #4]
    3c40:	f000 fab8 	bl	41b4 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3c44:	bf00      	nop
    3c46:	b003      	add	sp, #12
    3c48:	f85d fb04 	ldr.w	pc, [sp], #4

00003c4c <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3c4c:	b500      	push	{lr}
    3c4e:	b08b      	sub	sp, #44	; 0x2c
    3c50:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3c52:	2300      	movs	r3, #0
    3c54:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    3c58:	9b01      	ldr	r3, [sp, #4]
    3c5a:	2b00      	cmp	r3, #0
    3c5c:	d10b      	bne.n	3c76 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    3c5e:	2305      	movs	r3, #5
    3c60:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    3c62:	2301      	movs	r3, #1
    3c64:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    3c68:	2301      	movs	r3, #1
    3c6a:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    3c6e:	2301      	movs	r3, #1
    3c70:	f88d 3010 	strb.w	r3, [sp, #16]
    3c74:	e00e      	b.n	3c94 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    3c76:	9b01      	ldr	r3, [sp, #4]
    3c78:	681b      	ldr	r3, [r3, #0]
    3c7a:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    3c7c:	9b01      	ldr	r3, [sp, #4]
    3c7e:	79db      	ldrb	r3, [r3, #7]
    3c80:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    3c84:	9b01      	ldr	r3, [sp, #4]
    3c86:	889b      	ldrh	r3, [r3, #4]
    3c88:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    3c8c:	9b01      	ldr	r3, [sp, #4]
    3c8e:	7a1b      	ldrb	r3, [r3, #8]
    3c90:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3c94:	4b32      	ldr	r3, [pc, #200]	; (3d60 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c9a:	4a31      	ldr	r2, [pc, #196]	; (3d60 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c9c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3ca0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    3ca4:	4b2e      	ldr	r3, [pc, #184]	; (3d60 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3ca6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3caa:	4a2d      	ldr	r2, [pc, #180]	; (3d60 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3cac:	f023 0301 	bic.w	r3, r3, #1
    3cb0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3cb4:	4b2a      	ldr	r3, [pc, #168]	; (3d60 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3cb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3cba:	4a29      	ldr	r2, [pc, #164]	; (3d60 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3cbc:	f023 0304 	bic.w	r3, r3, #4
    3cc0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    3cc4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    3cc8:	2b01      	cmp	r3, #1
    3cca:	d144      	bne.n	3d56 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    3ccc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3cd0:	4a23      	ldr	r2, [pc, #140]	; (3d60 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3cd2:	f003 0301 	and.w	r3, r3, #1
    3cd6:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3cda:	4b21      	ldr	r3, [pc, #132]	; (3d60 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3cdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ce0:	4a1f      	ldr	r2, [pc, #124]	; (3d60 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3ce2:	f043 0301 	orr.w	r3, r3, #1
    3ce6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    3cea:	4b1d      	ldr	r3, [pc, #116]	; (3d60 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3cec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3cf0:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3cf4:	009b      	lsls	r3, r3, #2
    3cf6:	f003 0304 	and.w	r3, r3, #4
    3cfa:	4919      	ldr	r1, [pc, #100]	; (3d60 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3cfc:	4313      	orrs	r3, r2
    3cfe:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3d02:	aa05      	add	r2, sp, #20
    3d04:	a906      	add	r1, sp, #24
    3d06:	a807      	add	r0, sp, #28
    3d08:	f24c 3350 	movw	r3, #50000	; 0xc350
    3d0c:	f7ff f8f8 	bl	2f00 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3d10:	4b13      	ldr	r3, [pc, #76]	; (3d60 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3d12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d16:	0e1b      	lsrs	r3, r3, #24
    3d18:	f003 0301 	and.w	r3, r3, #1
    3d1c:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3d1e:	9a05      	ldr	r2, [sp, #20]
    3d20:	a906      	add	r1, sp, #24
    3d22:	ab07      	add	r3, sp, #28
    3d24:	4618      	mov	r0, r3
    3d26:	f7ff f905 	bl	2f34 <Clock_Ip_TimeoutExpired>
    3d2a:	4603      	mov	r3, r0
    3d2c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3d30:	9b08      	ldr	r3, [sp, #32]
    3d32:	2b00      	cmp	r3, #0
    3d34:	d106      	bne.n	3d44 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    3d36:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3d3a:	f083 0301 	eor.w	r3, r3, #1
    3d3e:	b2db      	uxtb	r3, r3
    3d40:	2b00      	cmp	r3, #0
    3d42:	d1e5      	bne.n	3d10 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    3d44:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3d48:	2b00      	cmp	r3, #0
    3d4a:	d004      	beq.n	3d56 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3d4c:	9b02      	ldr	r3, [sp, #8]
    3d4e:	4619      	mov	r1, r3
    3d50:	2001      	movs	r0, #1
    3d52:	f7ff f8c5 	bl	2ee0 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3d56:	bf00      	nop
    3d58:	b00b      	add	sp, #44	; 0x2c
    3d5a:	f85d fb04 	ldr.w	pc, [sp], #4
    3d5e:	bf00      	nop
    3d60:	40064000 	.word	0x40064000

00003d64 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3d64:	b500      	push	{lr}
    3d66:	b089      	sub	sp, #36	; 0x24
    3d68:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3d6a:	2300      	movs	r3, #0
    3d6c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3d70:	4b1f      	ldr	r3, [pc, #124]	; (3df0 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3d72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d76:	4a1e      	ldr	r2, [pc, #120]	; (3df0 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3d78:	f043 0301 	orr.w	r3, r3, #1
    3d7c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    3d80:	4b1b      	ldr	r3, [pc, #108]	; (3df0 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3d82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d86:	4a1a      	ldr	r2, [pc, #104]	; (3df0 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3d88:	f043 0304 	orr.w	r3, r3, #4
    3d8c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3d90:	aa03      	add	r2, sp, #12
    3d92:	a904      	add	r1, sp, #16
    3d94:	a805      	add	r0, sp, #20
    3d96:	f24c 3350 	movw	r3, #50000	; 0xc350
    3d9a:	f7ff f8b1 	bl	2f00 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3d9e:	4b14      	ldr	r3, [pc, #80]	; (3df0 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3da0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3da4:	0e1b      	lsrs	r3, r3, #24
    3da6:	f003 0301 	and.w	r3, r3, #1
    3daa:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3dac:	9a03      	ldr	r2, [sp, #12]
    3dae:	a904      	add	r1, sp, #16
    3db0:	ab05      	add	r3, sp, #20
    3db2:	4618      	mov	r0, r3
    3db4:	f7ff f8be 	bl	2f34 <Clock_Ip_TimeoutExpired>
    3db8:	4603      	mov	r3, r0
    3dba:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3dbe:	9b06      	ldr	r3, [sp, #24]
    3dc0:	2b00      	cmp	r3, #0
    3dc2:	d106      	bne.n	3dd2 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3dc4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3dc8:	f083 0301 	eor.w	r3, r3, #1
    3dcc:	b2db      	uxtb	r3, r3
    3dce:	2b00      	cmp	r3, #0
    3dd0:	d1e5      	bne.n	3d9e <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3dd2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3dd6:	2b00      	cmp	r3, #0
    3dd8:	d005      	beq.n	3de6 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3dda:	9b01      	ldr	r3, [sp, #4]
    3ddc:	681b      	ldr	r3, [r3, #0]
    3dde:	4619      	mov	r1, r3
    3de0:	2001      	movs	r0, #1
    3de2:	f7ff f87d 	bl	2ee0 <Clock_Ip_ReportClockErrors>
    }
}
    3de6:	bf00      	nop
    3de8:	b009      	add	sp, #36	; 0x24
    3dea:	f85d fb04 	ldr.w	pc, [sp], #4
    3dee:	bf00      	nop
    3df0:	40064000 	.word	0x40064000

00003df4 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3df4:	b082      	sub	sp, #8
    3df6:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3df8:	4b09      	ldr	r3, [pc, #36]	; (3e20 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3dfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3dfe:	4a08      	ldr	r2, [pc, #32]	; (3e20 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3e00:	f023 0301 	bic.w	r3, r3, #1
    3e04:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3e08:	4b05      	ldr	r3, [pc, #20]	; (3e20 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3e0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e0e:	4a04      	ldr	r2, [pc, #16]	; (3e20 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3e10:	f023 0304 	bic.w	r3, r3, #4
    3e14:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3e18:	bf00      	nop
    3e1a:	b002      	add	sp, #8
    3e1c:	4770      	bx	lr
    3e1e:	bf00      	nop
    3e20:	40064000 	.word	0x40064000

00003e24 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3e24:	b082      	sub	sp, #8
    3e26:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3e28:	4b0f      	ldr	r3, [pc, #60]	; (3e68 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3e2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e2e:	4a0e      	ldr	r2, [pc, #56]	; (3e68 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3e30:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3e34:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3e38:	4b0b      	ldr	r3, [pc, #44]	; (3e68 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3e3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e3e:	4a0a      	ldr	r2, [pc, #40]	; (3e68 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3e40:	f023 0304 	bic.w	r3, r3, #4
    3e44:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3e48:	4b07      	ldr	r3, [pc, #28]	; (3e68 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3e4a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3e4e:	9b01      	ldr	r3, [sp, #4]
    3e50:	7a1b      	ldrb	r3, [r3, #8]
    3e52:	009b      	lsls	r3, r3, #2
    3e54:	f003 0304 	and.w	r3, r3, #4
    3e58:	4903      	ldr	r1, [pc, #12]	; (3e68 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3e5a:	4313      	orrs	r3, r2
    3e5c:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3e60:	bf00      	nop
    3e62:	b002      	add	sp, #8
    3e64:	4770      	bx	lr
    3e66:	bf00      	nop
    3e68:	40064000 	.word	0x40064000

00003e6c <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3e6c:	b082      	sub	sp, #8
    3e6e:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3e70:	9b01      	ldr	r3, [sp, #4]
    3e72:	889b      	ldrh	r3, [r3, #4]
    3e74:	2b01      	cmp	r3, #1
    3e76:	d107      	bne.n	3e88 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    3e78:	4b05      	ldr	r3, [pc, #20]	; (3e90 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3e7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e7e:	4a04      	ldr	r2, [pc, #16]	; (3e90 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3e80:	f043 0304 	orr.w	r3, r3, #4
    3e84:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3e88:	bf00      	nop
    3e8a:	b002      	add	sp, #8
    3e8c:	4770      	bx	lr
    3e8e:	bf00      	nop
    3e90:	40064000 	.word	0x40064000

00003e94 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3e94:	b082      	sub	sp, #8
    3e96:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3e98:	4b05      	ldr	r3, [pc, #20]	; (3eb0 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3e9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e9e:	4a04      	ldr	r2, [pc, #16]	; (3eb0 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3ea0:	f023 0304 	bic.w	r3, r3, #4
    3ea4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3ea8:	bf00      	nop
    3eaa:	b002      	add	sp, #8
    3eac:	4770      	bx	lr
    3eae:	bf00      	nop
    3eb0:	40064000 	.word	0x40064000

00003eb4 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3eb4:	b082      	sub	sp, #8
    3eb6:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3eb8:	4b0f      	ldr	r3, [pc, #60]	; (3ef8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3eba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ebe:	4a0e      	ldr	r2, [pc, #56]	; (3ef8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3ec0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3ec4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3ec8:	4b0b      	ldr	r3, [pc, #44]	; (3ef8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3eca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ece:	4a0a      	ldr	r2, [pc, #40]	; (3ef8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3ed0:	f023 0302 	bic.w	r3, r3, #2
    3ed4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3ed8:	4b07      	ldr	r3, [pc, #28]	; (3ef8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3eda:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3ede:	9b01      	ldr	r3, [sp, #4]
    3ee0:	7a5b      	ldrb	r3, [r3, #9]
    3ee2:	005b      	lsls	r3, r3, #1
    3ee4:	f003 0302 	and.w	r3, r3, #2
    3ee8:	4903      	ldr	r1, [pc, #12]	; (3ef8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3eea:	4313      	orrs	r3, r2
    3eec:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3ef0:	bf00      	nop
    3ef2:	b002      	add	sp, #8
    3ef4:	4770      	bx	lr
    3ef6:	bf00      	nop
    3ef8:	40064000 	.word	0x40064000

00003efc <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3efc:	b082      	sub	sp, #8
    3efe:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3f00:	9b01      	ldr	r3, [sp, #4]
    3f02:	889b      	ldrh	r3, [r3, #4]
    3f04:	2b01      	cmp	r3, #1
    3f06:	d107      	bne.n	3f18 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3f08:	4b05      	ldr	r3, [pc, #20]	; (3f20 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3f0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3f0e:	4a04      	ldr	r2, [pc, #16]	; (3f20 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3f10:	f043 0302 	orr.w	r3, r3, #2
    3f14:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3f18:	bf00      	nop
    3f1a:	b002      	add	sp, #8
    3f1c:	4770      	bx	lr
    3f1e:	bf00      	nop
    3f20:	40064000 	.word	0x40064000

00003f24 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3f24:	b082      	sub	sp, #8
    3f26:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3f28:	4b05      	ldr	r3, [pc, #20]	; (3f40 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3f2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3f2e:	4a04      	ldr	r2, [pc, #16]	; (3f40 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3f30:	f023 0302 	bic.w	r3, r3, #2
    3f34:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3f38:	bf00      	nop
    3f3a:	b002      	add	sp, #8
    3f3c:	4770      	bx	lr
    3f3e:	bf00      	nop
    3f40:	40064000 	.word	0x40064000

00003f44 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3f44:	b500      	push	{lr}
    3f46:	b08b      	sub	sp, #44	; 0x2c
    3f48:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3f4a:	9b01      	ldr	r3, [sp, #4]
    3f4c:	681a      	ldr	r2, [r3, #0]
    3f4e:	4975      	ldr	r1, [pc, #468]	; (4124 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3f50:	4613      	mov	r3, r2
    3f52:	00db      	lsls	r3, r3, #3
    3f54:	4413      	add	r3, r2
    3f56:	440b      	add	r3, r1
    3f58:	781b      	ldrb	r3, [r3, #0]
    3f5a:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3f5c:	2300      	movs	r3, #0
    3f5e:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3f62:	2300      	movs	r3, #0
    3f64:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3f68:	4b6f      	ldr	r3, [pc, #444]	; (4128 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3f6e:	4a6e      	ldr	r2, [pc, #440]	; (4128 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f70:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3f74:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3f78:	4b6b      	ldr	r3, [pc, #428]	; (4128 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3f82:	2b00      	cmp	r3, #0
    3f84:	d07d      	beq.n	4082 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3f86:	9b01      	ldr	r3, [sp, #4]
    3f88:	79db      	ldrb	r3, [r3, #7]
    3f8a:	461a      	mov	r2, r3
    3f8c:	4b66      	ldr	r3, [pc, #408]	; (4128 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f8e:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3f92:	f003 0303 	and.w	r3, r3, #3
    3f96:	429a      	cmp	r2, r3
    3f98:	d10b      	bne.n	3fb2 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    3f9a:	9b01      	ldr	r3, [sp, #4]
    3f9c:	799b      	ldrb	r3, [r3, #6]
    3f9e:	461a      	mov	r2, r3
    3fa0:	4b61      	ldr	r3, [pc, #388]	; (4128 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3fa2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3fa6:	08db      	lsrs	r3, r3, #3
    3fa8:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3fac:	429a      	cmp	r2, r3
    3fae:	f000 80b4 	beq.w	411a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3fb2:	4b5d      	ldr	r3, [pc, #372]	; (4128 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3fb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3fb8:	f003 0301 	and.w	r3, r3, #1
    3fbc:	2b00      	cmp	r3, #0
    3fbe:	d105      	bne.n	3fcc <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3fc0:	2301      	movs	r3, #1
    3fc2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3fc6:	2000      	movs	r0, #0
    3fc8:	f7ff fd66 	bl	3a98 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3fcc:	2002      	movs	r0, #2
    3fce:	f7ff fdcf 	bl	3b70 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3fd2:	4b55      	ldr	r3, [pc, #340]	; (4128 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3fd4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3fd8:	4a53      	ldr	r2, [pc, #332]	; (4128 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3fda:	f023 0301 	bic.w	r3, r3, #1
    3fde:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3fe2:	9b01      	ldr	r3, [sp, #4]
    3fe4:	889b      	ldrh	r3, [r3, #4]
    3fe6:	2b01      	cmp	r3, #1
    3fe8:	f040 8097 	bne.w	411a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3fec:	9b01      	ldr	r3, [sp, #4]
    3fee:	79db      	ldrb	r3, [r3, #7]
    3ff0:	4a4d      	ldr	r2, [pc, #308]	; (4128 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ff2:	f003 0303 	and.w	r3, r3, #3
    3ff6:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3ffa:	4b4b      	ldr	r3, [pc, #300]	; (4128 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ffc:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    4000:	9b01      	ldr	r3, [sp, #4]
    4002:	799b      	ldrb	r3, [r3, #6]
    4004:	00db      	lsls	r3, r3, #3
    4006:	f003 0308 	and.w	r3, r3, #8
    400a:	4313      	orrs	r3, r2
    400c:	4a46      	ldr	r2, [pc, #280]	; (4128 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    400e:	f043 0301 	orr.w	r3, r3, #1
    4012:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4016:	aa03      	add	r2, sp, #12
    4018:	a904      	add	r1, sp, #16
    401a:	a805      	add	r0, sp, #20
    401c:	f24c 3350 	movw	r3, #50000	; 0xc350
    4020:	f7fe ff6e 	bl	2f00 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4024:	4b40      	ldr	r3, [pc, #256]	; (4128 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4026:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    402a:	0e1b      	lsrs	r3, r3, #24
    402c:	f003 0301 	and.w	r3, r3, #1
    4030:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4032:	9a03      	ldr	r2, [sp, #12]
    4034:	a904      	add	r1, sp, #16
    4036:	ab05      	add	r3, sp, #20
    4038:	4618      	mov	r0, r3
    403a:	f7fe ff7b 	bl	2f34 <Clock_Ip_TimeoutExpired>
    403e:	4603      	mov	r3, r0
    4040:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4044:	9b06      	ldr	r3, [sp, #24]
    4046:	2b00      	cmp	r3, #0
    4048:	d106      	bne.n	4058 <Clock_Ip_SetFirc_TrustedCall+0x114>
    404a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    404e:	f083 0301 	eor.w	r3, r3, #1
    4052:	b2db      	uxtb	r3, r3
    4054:	2b00      	cmp	r3, #0
    4056:	d1e5      	bne.n	4024 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    4058:	f89d 301f 	ldrb.w	r3, [sp, #31]
    405c:	2b00      	cmp	r3, #0
    405e:	d005      	beq.n	406c <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4060:	9b01      	ldr	r3, [sp, #4]
    4062:	681b      	ldr	r3, [r3, #0]
    4064:	4619      	mov	r1, r3
    4066:	2001      	movs	r0, #1
    4068:	f7fe ff3a 	bl	2ee0 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    406c:	2003      	movs	r0, #3
    406e:	f7ff fd7f 	bl	3b70 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    4072:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4076:	2b00      	cmp	r3, #0
    4078:	d04f      	beq.n	411a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    407a:	2002      	movs	r0, #2
    407c:	f7ff fd26 	bl	3acc <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    4080:	e04b      	b.n	411a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    4082:	4b29      	ldr	r3, [pc, #164]	; (4128 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4084:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4088:	4a27      	ldr	r2, [pc, #156]	; (4128 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    408a:	f023 0301 	bic.w	r3, r3, #1
    408e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    4092:	9b01      	ldr	r3, [sp, #4]
    4094:	889b      	ldrh	r3, [r3, #4]
    4096:	2b01      	cmp	r3, #1
    4098:	d13f      	bne.n	411a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    409a:	9b01      	ldr	r3, [sp, #4]
    409c:	79db      	ldrb	r3, [r3, #7]
    409e:	4a22      	ldr	r2, [pc, #136]	; (4128 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    40a0:	f003 0303 	and.w	r3, r3, #3
    40a4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    40a8:	4b1f      	ldr	r3, [pc, #124]	; (4128 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    40aa:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    40ae:	9b01      	ldr	r3, [sp, #4]
    40b0:	799b      	ldrb	r3, [r3, #6]
    40b2:	00db      	lsls	r3, r3, #3
    40b4:	f003 0308 	and.w	r3, r3, #8
    40b8:	4313      	orrs	r3, r2
    40ba:	4a1b      	ldr	r2, [pc, #108]	; (4128 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    40bc:	f043 0301 	orr.w	r3, r3, #1
    40c0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    40c4:	aa03      	add	r2, sp, #12
    40c6:	a904      	add	r1, sp, #16
    40c8:	a805      	add	r0, sp, #20
    40ca:	f24c 3350 	movw	r3, #50000	; 0xc350
    40ce:	f7fe ff17 	bl	2f00 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    40d2:	4b15      	ldr	r3, [pc, #84]	; (4128 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    40d4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    40d8:	0e1b      	lsrs	r3, r3, #24
    40da:	f003 0301 	and.w	r3, r3, #1
    40de:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    40e0:	9a03      	ldr	r2, [sp, #12]
    40e2:	a904      	add	r1, sp, #16
    40e4:	ab05      	add	r3, sp, #20
    40e6:	4618      	mov	r0, r3
    40e8:	f7fe ff24 	bl	2f34 <Clock_Ip_TimeoutExpired>
    40ec:	4603      	mov	r3, r0
    40ee:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    40f2:	9b06      	ldr	r3, [sp, #24]
    40f4:	2b00      	cmp	r3, #0
    40f6:	d106      	bne.n	4106 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    40f8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    40fc:	f083 0301 	eor.w	r3, r3, #1
    4100:	b2db      	uxtb	r3, r3
    4102:	2b00      	cmp	r3, #0
    4104:	d1e5      	bne.n	40d2 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    4106:	f89d 301f 	ldrb.w	r3, [sp, #31]
    410a:	2b00      	cmp	r3, #0
    410c:	d005      	beq.n	411a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    410e:	9b01      	ldr	r3, [sp, #4]
    4110:	681b      	ldr	r3, [r3, #0]
    4112:	4619      	mov	r1, r3
    4114:	2001      	movs	r0, #1
    4116:	f7fe fee3 	bl	2ee0 <Clock_Ip_ReportClockErrors>
}
    411a:	bf00      	nop
    411c:	b00b      	add	sp, #44	; 0x2c
    411e:	f85d fb04 	ldr.w	pc, [sp], #4
    4122:	bf00      	nop
    4124:	00017ec4 	.word	0x00017ec4
    4128:	40064000 	.word	0x40064000

0000412c <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    412c:	b500      	push	{lr}
    412e:	b089      	sub	sp, #36	; 0x24
    4130:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4132:	2300      	movs	r3, #0
    4134:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    4138:	9b01      	ldr	r3, [sp, #4]
    413a:	889b      	ldrh	r3, [r3, #4]
    413c:	2b01      	cmp	r3, #1
    413e:	d132      	bne.n	41a6 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    4140:	4b1b      	ldr	r3, [pc, #108]	; (41b0 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4142:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4146:	4a1a      	ldr	r2, [pc, #104]	; (41b0 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4148:	f043 0301 	orr.w	r3, r3, #1
    414c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4150:	aa03      	add	r2, sp, #12
    4152:	a904      	add	r1, sp, #16
    4154:	a805      	add	r0, sp, #20
    4156:	f24c 3350 	movw	r3, #50000	; 0xc350
    415a:	f7fe fed1 	bl	2f00 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    415e:	4b14      	ldr	r3, [pc, #80]	; (41b0 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4160:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4164:	0e1b      	lsrs	r3, r3, #24
    4166:	f003 0301 	and.w	r3, r3, #1
    416a:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    416c:	9a03      	ldr	r2, [sp, #12]
    416e:	a904      	add	r1, sp, #16
    4170:	ab05      	add	r3, sp, #20
    4172:	4618      	mov	r0, r3
    4174:	f7fe fede 	bl	2f34 <Clock_Ip_TimeoutExpired>
    4178:	4603      	mov	r3, r0
    417a:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    417e:	9b06      	ldr	r3, [sp, #24]
    4180:	2b00      	cmp	r3, #0
    4182:	d106      	bne.n	4192 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    4184:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4188:	f083 0301 	eor.w	r3, r3, #1
    418c:	b2db      	uxtb	r3, r3
    418e:	2b00      	cmp	r3, #0
    4190:	d1e5      	bne.n	415e <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    4192:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4196:	2b00      	cmp	r3, #0
    4198:	d005      	beq.n	41a6 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    419a:	9b01      	ldr	r3, [sp, #4]
    419c:	681b      	ldr	r3, [r3, #0]
    419e:	4619      	mov	r1, r3
    41a0:	2001      	movs	r0, #1
    41a2:	f7fe fe9d 	bl	2ee0 <Clock_Ip_ReportClockErrors>
        }
    }
}
    41a6:	bf00      	nop
    41a8:	b009      	add	sp, #36	; 0x24
    41aa:	f85d fb04 	ldr.w	pc, [sp], #4
    41ae:	bf00      	nop
    41b0:	40064000 	.word	0x40064000

000041b4 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    41b4:	b082      	sub	sp, #8
    41b6:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    41b8:	4b05      	ldr	r3, [pc, #20]	; (41d0 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    41ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    41be:	4a04      	ldr	r2, [pc, #16]	; (41d0 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    41c0:	f023 0301 	bic.w	r3, r3, #1
    41c4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    41c8:	bf00      	nop
    41ca:	b002      	add	sp, #8
    41cc:	4770      	bx	lr
    41ce:	bf00      	nop
    41d0:	40064000 	.word	0x40064000

000041d4 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    41d4:	b082      	sub	sp, #8
    41d6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    41d8:	bf00      	nop
    41da:	b002      	add	sp, #8
    41dc:	4770      	bx	lr

000041de <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    41de:	b082      	sub	sp, #8
    41e0:	9001      	str	r0, [sp, #4]
    41e2:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    41e4:	bf00      	nop
    41e6:	b002      	add	sp, #8
    41e8:	4770      	bx	lr

000041ea <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    41ea:	b082      	sub	sp, #8
    41ec:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    41ee:	bf00      	nop
    41f0:	b002      	add	sp, #8
    41f2:	4770      	bx	lr

000041f4 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    41f4:	b082      	sub	sp, #8
    41f6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    41f8:	bf00      	nop
    41fa:	b002      	add	sp, #8
    41fc:	4770      	bx	lr

000041fe <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    41fe:	b082      	sub	sp, #8
    4200:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    4202:	2302      	movs	r3, #2
}
    4204:	4618      	mov	r0, r3
    4206:	b002      	add	sp, #8
    4208:	4770      	bx	lr

0000420a <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    420a:	b082      	sub	sp, #8
    420c:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    420e:	bf00      	nop
    4210:	b002      	add	sp, #8
    4212:	4770      	bx	lr

00004214 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    4214:	b500      	push	{lr}
    4216:	b083      	sub	sp, #12
    4218:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    421a:	9b01      	ldr	r3, [sp, #4]
    421c:	2b00      	cmp	r3, #0
    421e:	d002      	beq.n	4226 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    4220:	9801      	ldr	r0, [sp, #4]
    4222:	f000 f870 	bl	4306 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4226:	bf00      	nop
    4228:	b003      	add	sp, #12
    422a:	f85d fb04 	ldr.w	pc, [sp], #4

0000422e <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    422e:	b500      	push	{lr}
    4230:	b083      	sub	sp, #12
    4232:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4234:	9b01      	ldr	r3, [sp, #4]
    4236:	2b00      	cmp	r3, #0
    4238:	d002      	beq.n	4240 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    423a:	9801      	ldr	r0, [sp, #4]
    423c:	f000 f89a 	bl	4374 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4240:	bf00      	nop
    4242:	b003      	add	sp, #12
    4244:	f85d fb04 	ldr.w	pc, [sp], #4

00004248 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    4248:	b500      	push	{lr}
    424a:	b089      	sub	sp, #36	; 0x24
    424c:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    424e:	2301      	movs	r3, #1
    4250:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    4252:	2300      	movs	r3, #0
    4254:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    4258:	4b1e      	ldr	r3, [pc, #120]	; (42d4 <Clock_Ip_CompleteSpll+0x8c>)
    425a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    425e:	f003 0301 	and.w	r3, r3, #1
    4262:	2b00      	cmp	r3, #0
    4264:	d02f      	beq.n	42c6 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4266:	aa02      	add	r2, sp, #8
    4268:	a903      	add	r1, sp, #12
    426a:	a804      	add	r0, sp, #16
    426c:	f24c 3350 	movw	r3, #50000	; 0xc350
    4270:	f7fe fe46 	bl	2f00 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    4274:	4b17      	ldr	r3, [pc, #92]	; (42d4 <Clock_Ip_CompleteSpll+0x8c>)
    4276:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    427a:	0e1b      	lsrs	r3, r3, #24
    427c:	f003 0301 	and.w	r3, r3, #1
    4280:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4282:	9a02      	ldr	r2, [sp, #8]
    4284:	a903      	add	r1, sp, #12
    4286:	ab04      	add	r3, sp, #16
    4288:	4618      	mov	r0, r3
    428a:	f7fe fe53 	bl	2f34 <Clock_Ip_TimeoutExpired>
    428e:	4603      	mov	r3, r0
    4290:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    4294:	9b05      	ldr	r3, [sp, #20]
    4296:	2b00      	cmp	r3, #0
    4298:	d106      	bne.n	42a8 <Clock_Ip_CompleteSpll+0x60>
    429a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    429e:	f083 0301 	eor.w	r3, r3, #1
    42a2:	b2db      	uxtb	r3, r3
    42a4:	2b00      	cmp	r3, #0
    42a6:	d1e5      	bne.n	4274 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    42a8:	f89d 301b 	ldrb.w	r3, [sp, #27]
    42ac:	f083 0301 	eor.w	r3, r3, #1
    42b0:	b2db      	uxtb	r3, r3
    42b2:	2b00      	cmp	r3, #0
    42b4:	d002      	beq.n	42bc <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    42b6:	2302      	movs	r3, #2
    42b8:	9307      	str	r3, [sp, #28]
    42ba:	e006      	b.n	42ca <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    42bc:	9901      	ldr	r1, [sp, #4]
    42be:	2001      	movs	r0, #1
    42c0:	f7fe fe0e 	bl	2ee0 <Clock_Ip_ReportClockErrors>
    42c4:	e001      	b.n	42ca <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    42c6:	2300      	movs	r3, #0
    42c8:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    42ca:	9b07      	ldr	r3, [sp, #28]
}
    42cc:	4618      	mov	r0, r3
    42ce:	b009      	add	sp, #36	; 0x24
    42d0:	f85d fb04 	ldr.w	pc, [sp], #4
    42d4:	40064000 	.word	0x40064000

000042d8 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    42d8:	b500      	push	{lr}
    42da:	b083      	sub	sp, #12
    42dc:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    42de:	9801      	ldr	r0, [sp, #4]
    42e0:	f000 f886 	bl	43f0 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    42e4:	bf00      	nop
    42e6:	b003      	add	sp, #12
    42e8:	f85d fb04 	ldr.w	pc, [sp], #4

000042ec <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    42ec:	b500      	push	{lr}
    42ee:	b083      	sub	sp, #12
    42f0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42f2:	9b01      	ldr	r3, [sp, #4]
    42f4:	2b00      	cmp	r3, #0
    42f6:	d002      	beq.n	42fe <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    42f8:	9801      	ldr	r0, [sp, #4]
    42fa:	f000 f891 	bl	4420 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42fe:	bf00      	nop
    4300:	b003      	add	sp, #12
    4302:	f85d fb04 	ldr.w	pc, [sp], #4

00004306 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4306:	b082      	sub	sp, #8
    4308:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    430a:	4b19      	ldr	r3, [pc, #100]	; (4370 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    430c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4310:	4a17      	ldr	r2, [pc, #92]	; (4370 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4312:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4316:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    431a:	4b15      	ldr	r3, [pc, #84]	; (4370 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    431c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4320:	4a13      	ldr	r2, [pc, #76]	; (4370 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    4326:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    432a:	4b11      	ldr	r3, [pc, #68]	; (4370 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    432c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4330:	4a0f      	ldr	r2, [pc, #60]	; (4370 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4332:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    4336:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    433a:	4b0d      	ldr	r3, [pc, #52]	; (4370 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    433c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4340:	4a0b      	ldr	r2, [pc, #44]	; (4370 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4342:	f023 0301 	bic.w	r3, r3, #1
    4346:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    434a:	4b09      	ldr	r3, [pc, #36]	; (4370 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    434c:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4350:	4a07      	ldr	r2, [pc, #28]	; (4370 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4352:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    4356:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    435a:	4b05      	ldr	r3, [pc, #20]	; (4370 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    435c:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4360:	4a03      	ldr	r2, [pc, #12]	; (4370 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4362:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    4366:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    436a:	bf00      	nop
    436c:	b002      	add	sp, #8
    436e:	4770      	bx	lr
    4370:	40064000 	.word	0x40064000

00004374 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4374:	b082      	sub	sp, #8
    4376:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4378:	9b01      	ldr	r3, [sp, #4]
    437a:	889b      	ldrh	r3, [r3, #4]
    437c:	2b01      	cmp	r3, #1
    437e:	d12f      	bne.n	43e0 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4380:	4b1a      	ldr	r3, [pc, #104]	; (43ec <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4382:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    4386:	9b01      	ldr	r3, [sp, #4]
    4388:	7b5b      	ldrb	r3, [r3, #13]
    438a:	3b01      	subs	r3, #1
    438c:	021b      	lsls	r3, r3, #8
    438e:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    4392:	9b01      	ldr	r3, [sp, #4]
    4394:	7d1b      	ldrb	r3, [r3, #20]
    4396:	3b10      	subs	r3, #16
    4398:	041b      	lsls	r3, r3, #16
    439a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    439e:	430b      	orrs	r3, r1
    43a0:	4912      	ldr	r1, [pc, #72]	; (43ec <Clock_Ip_SetSpll_TrustedCall+0x78>)
    43a2:	4313      	orrs	r3, r2
    43a4:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    43a8:	9b01      	ldr	r3, [sp, #4]
    43aa:	7fdb      	ldrb	r3, [r3, #31]
    43ac:	2b02      	cmp	r3, #2
    43ae:	d011      	beq.n	43d4 <Clock_Ip_SetSpll_TrustedCall+0x60>
    43b0:	2b02      	cmp	r3, #2
    43b2:	dc17      	bgt.n	43e4 <Clock_Ip_SetSpll_TrustedCall+0x70>
    43b4:	2b00      	cmp	r3, #0
    43b6:	d002      	beq.n	43be <Clock_Ip_SetSpll_TrustedCall+0x4a>
    43b8:	2b01      	cmp	r3, #1
    43ba:	d005      	beq.n	43c8 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    43bc:	e012      	b.n	43e4 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    43be:	4b0b      	ldr	r3, [pc, #44]	; (43ec <Clock_Ip_SetSpll_TrustedCall+0x78>)
    43c0:	2200      	movs	r2, #0
    43c2:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    43c6:	e00e      	b.n	43e6 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    43c8:	4b08      	ldr	r3, [pc, #32]	; (43ec <Clock_Ip_SetSpll_TrustedCall+0x78>)
    43ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    43ce:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    43d2:	e008      	b.n	43e6 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    43d4:	4b05      	ldr	r3, [pc, #20]	; (43ec <Clock_Ip_SetSpll_TrustedCall+0x78>)
    43d6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    43da:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    43de:	e002      	b.n	43e6 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    43e0:	bf00      	nop
    43e2:	e000      	b.n	43e6 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    43e4:	bf00      	nop
}
    43e6:	bf00      	nop
    43e8:	b002      	add	sp, #8
    43ea:	4770      	bx	lr
    43ec:	40064000 	.word	0x40064000

000043f0 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    43f0:	b082      	sub	sp, #8
    43f2:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    43f4:	4b09      	ldr	r3, [pc, #36]	; (441c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    43f6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    43fa:	4a08      	ldr	r2, [pc, #32]	; (441c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    43fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4400:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4404:	4b05      	ldr	r3, [pc, #20]	; (441c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4406:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    440a:	4a04      	ldr	r2, [pc, #16]	; (441c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    440c:	f023 0301 	bic.w	r3, r3, #1
    4410:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    4414:	bf00      	nop
    4416:	b002      	add	sp, #8
    4418:	4770      	bx	lr
    441a:	bf00      	nop
    441c:	40064000 	.word	0x40064000

00004420 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4420:	b082      	sub	sp, #8
    4422:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4424:	9b01      	ldr	r3, [sp, #4]
    4426:	889b      	ldrh	r3, [r3, #4]
    4428:	2b01      	cmp	r3, #1
    442a:	d107      	bne.n	443c <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    442c:	4b05      	ldr	r3, [pc, #20]	; (4444 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    442e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4432:	4a04      	ldr	r2, [pc, #16]	; (4444 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4434:	f043 0301 	orr.w	r3, r3, #1
    4438:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    443c:	bf00      	nop
    443e:	b002      	add	sp, #8
    4440:	4770      	bx	lr
    4442:	bf00      	nop
    4444:	40064000 	.word	0x40064000

00004448 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    4448:	b082      	sub	sp, #8
    444a:	9001      	str	r0, [sp, #4]
    444c:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    444e:	bf00      	nop
    4450:	b002      	add	sp, #8
    4452:	4770      	bx	lr

00004454 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    4454:	b082      	sub	sp, #8
    4456:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4458:	bf00      	nop
    445a:	b002      	add	sp, #8
    445c:	4770      	bx	lr

0000445e <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    445e:	b500      	push	{lr}
    4460:	b083      	sub	sp, #12
    4462:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4464:	9b01      	ldr	r3, [sp, #4]
    4466:	2b00      	cmp	r3, #0
    4468:	d002      	beq.n	4470 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    446a:	9801      	ldr	r0, [sp, #4]
    446c:	f000 f8ee 	bl	464c <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4470:	bf00      	nop
    4472:	b003      	add	sp, #12
    4474:	f85d fb04 	ldr.w	pc, [sp], #4

00004478 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4478:	b500      	push	{lr}
    447a:	b083      	sub	sp, #12
    447c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    447e:	9b01      	ldr	r3, [sp, #4]
    4480:	2b00      	cmp	r3, #0
    4482:	d002      	beq.n	448a <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    4484:	9801      	ldr	r0, [sp, #4]
    4486:	f000 f8ff 	bl	4688 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    448a:	bf00      	nop
    448c:	b003      	add	sp, #12
    448e:	f85d fb04 	ldr.w	pc, [sp], #4

00004492 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    4492:	b500      	push	{lr}
    4494:	b083      	sub	sp, #12
    4496:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4498:	9b01      	ldr	r3, [sp, #4]
    449a:	2b00      	cmp	r3, #0
    449c:	d002      	beq.n	44a4 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    449e:	9801      	ldr	r0, [sp, #4]
    44a0:	f000 f912 	bl	46c8 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44a4:	bf00      	nop
    44a6:	b003      	add	sp, #12
    44a8:	f85d fb04 	ldr.w	pc, [sp], #4

000044ac <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    44ac:	b500      	push	{lr}
    44ae:	b083      	sub	sp, #12
    44b0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44b2:	9b01      	ldr	r3, [sp, #4]
    44b4:	2b00      	cmp	r3, #0
    44b6:	d002      	beq.n	44be <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    44b8:	9801      	ldr	r0, [sp, #4]
    44ba:	f000 f925 	bl	4708 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44be:	bf00      	nop
    44c0:	b003      	add	sp, #12
    44c2:	f85d fb04 	ldr.w	pc, [sp], #4

000044c6 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    44c6:	b500      	push	{lr}
    44c8:	b083      	sub	sp, #12
    44ca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44cc:	9b01      	ldr	r3, [sp, #4]
    44ce:	2b00      	cmp	r3, #0
    44d0:	d002      	beq.n	44d8 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    44d2:	9801      	ldr	r0, [sp, #4]
    44d4:	f000 f936 	bl	4744 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44d8:	bf00      	nop
    44da:	b003      	add	sp, #12
    44dc:	f85d fb04 	ldr.w	pc, [sp], #4

000044e0 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    44e0:	b500      	push	{lr}
    44e2:	b083      	sub	sp, #12
    44e4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44e6:	9b01      	ldr	r3, [sp, #4]
    44e8:	2b00      	cmp	r3, #0
    44ea:	d002      	beq.n	44f2 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    44ec:	9801      	ldr	r0, [sp, #4]
    44ee:	f000 f949 	bl	4784 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44f2:	bf00      	nop
    44f4:	b003      	add	sp, #12
    44f6:	f85d fb04 	ldr.w	pc, [sp], #4

000044fa <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    44fa:	b500      	push	{lr}
    44fc:	b083      	sub	sp, #12
    44fe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4500:	9b01      	ldr	r3, [sp, #4]
    4502:	2b00      	cmp	r3, #0
    4504:	d002      	beq.n	450c <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    4506:	9801      	ldr	r0, [sp, #4]
    4508:	f000 f958 	bl	47bc <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    450c:	bf00      	nop
    450e:	b003      	add	sp, #12
    4510:	f85d fb04 	ldr.w	pc, [sp], #4

00004514 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4514:	b500      	push	{lr}
    4516:	b083      	sub	sp, #12
    4518:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    451a:	9b01      	ldr	r3, [sp, #4]
    451c:	2b00      	cmp	r3, #0
    451e:	d002      	beq.n	4526 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    4520:	9801      	ldr	r0, [sp, #4]
    4522:	f000 f969 	bl	47f8 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4526:	bf00      	nop
    4528:	b003      	add	sp, #12
    452a:	f85d fb04 	ldr.w	pc, [sp], #4

0000452e <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    452e:	b500      	push	{lr}
    4530:	b083      	sub	sp, #12
    4532:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4534:	9b01      	ldr	r3, [sp, #4]
    4536:	2b00      	cmp	r3, #0
    4538:	d002      	beq.n	4540 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    453a:	9801      	ldr	r0, [sp, #4]
    453c:	f000 f978 	bl	4830 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4540:	bf00      	nop
    4542:	b003      	add	sp, #12
    4544:	f85d fb04 	ldr.w	pc, [sp], #4

00004548 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4548:	b500      	push	{lr}
    454a:	b083      	sub	sp, #12
    454c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    454e:	9b01      	ldr	r3, [sp, #4]
    4550:	2b00      	cmp	r3, #0
    4552:	d002      	beq.n	455a <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    4554:	9801      	ldr	r0, [sp, #4]
    4556:	f000 f989 	bl	486c <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    455a:	bf00      	nop
    455c:	b003      	add	sp, #12
    455e:	f85d fb04 	ldr.w	pc, [sp], #4

00004562 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4562:	b500      	push	{lr}
    4564:	b083      	sub	sp, #12
    4566:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4568:	9b01      	ldr	r3, [sp, #4]
    456a:	2b00      	cmp	r3, #0
    456c:	d002      	beq.n	4574 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    456e:	9801      	ldr	r0, [sp, #4]
    4570:	f000 f998 	bl	48a4 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4574:	bf00      	nop
    4576:	b003      	add	sp, #12
    4578:	f85d fb04 	ldr.w	pc, [sp], #4

0000457c <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    457c:	b500      	push	{lr}
    457e:	b083      	sub	sp, #12
    4580:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4582:	9b01      	ldr	r3, [sp, #4]
    4584:	2b00      	cmp	r3, #0
    4586:	d002      	beq.n	458e <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    4588:	9801      	ldr	r0, [sp, #4]
    458a:	f000 f9a9 	bl	48e0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    458e:	bf00      	nop
    4590:	b003      	add	sp, #12
    4592:	f85d fb04 	ldr.w	pc, [sp], #4

00004596 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4596:	b500      	push	{lr}
    4598:	b083      	sub	sp, #12
    459a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    459c:	9b01      	ldr	r3, [sp, #4]
    459e:	2b00      	cmp	r3, #0
    45a0:	d002      	beq.n	45a8 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    45a2:	9801      	ldr	r0, [sp, #4]
    45a4:	f000 f9e6 	bl	4974 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    45a8:	bf00      	nop
    45aa:	b003      	add	sp, #12
    45ac:	f85d fb04 	ldr.w	pc, [sp], #4

000045b0 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    45b0:	b500      	push	{lr}
    45b2:	b083      	sub	sp, #12
    45b4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    45b6:	9b01      	ldr	r3, [sp, #4]
    45b8:	2b00      	cmp	r3, #0
    45ba:	d002      	beq.n	45c2 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    45bc:	9801      	ldr	r0, [sp, #4]
    45be:	f000 fa25 	bl	4a0c <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    45c2:	bf00      	nop
    45c4:	b003      	add	sp, #12
    45c6:	f85d fb04 	ldr.w	pc, [sp], #4

000045ca <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    45ca:	b500      	push	{lr}
    45cc:	b083      	sub	sp, #12
    45ce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    45d0:	9b01      	ldr	r3, [sp, #4]
    45d2:	2b00      	cmp	r3, #0
    45d4:	d002      	beq.n	45dc <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    45d6:	9801      	ldr	r0, [sp, #4]
    45d8:	f000 fa2a 	bl	4a30 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    45dc:	bf00      	nop
    45de:	b003      	add	sp, #12
    45e0:	f85d fb04 	ldr.w	pc, [sp], #4

000045e4 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    45e4:	b500      	push	{lr}
    45e6:	b083      	sub	sp, #12
    45e8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    45ea:	9b01      	ldr	r3, [sp, #4]
    45ec:	2b00      	cmp	r3, #0
    45ee:	d002      	beq.n	45f6 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    45f0:	9801      	ldr	r0, [sp, #4]
    45f2:	f000 fa3b 	bl	4a6c <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    45f6:	bf00      	nop
    45f8:	b003      	add	sp, #12
    45fa:	f85d fb04 	ldr.w	pc, [sp], #4

000045fe <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    45fe:	b500      	push	{lr}
    4600:	b083      	sub	sp, #12
    4602:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4604:	9b01      	ldr	r3, [sp, #4]
    4606:	2b00      	cmp	r3, #0
    4608:	d002      	beq.n	4610 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    460a:	9801      	ldr	r0, [sp, #4]
    460c:	f000 fa56 	bl	4abc <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4610:	bf00      	nop
    4612:	b003      	add	sp, #12
    4614:	f85d fb04 	ldr.w	pc, [sp], #4

00004618 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4618:	b500      	push	{lr}
    461a:	b083      	sub	sp, #12
    461c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    461e:	9b01      	ldr	r3, [sp, #4]
    4620:	2b00      	cmp	r3, #0
    4622:	d002      	beq.n	462a <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    4624:	9801      	ldr	r0, [sp, #4]
    4626:	f000 fa79 	bl	4b1c <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    462a:	bf00      	nop
    462c:	b003      	add	sp, #12
    462e:	f85d fb04 	ldr.w	pc, [sp], #4

00004632 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4632:	b500      	push	{lr}
    4634:	b083      	sub	sp, #12
    4636:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4638:	9b01      	ldr	r3, [sp, #4]
    463a:	2b00      	cmp	r3, #0
    463c:	d002      	beq.n	4644 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    463e:	9801      	ldr	r0, [sp, #4]
    4640:	f000 fa8a 	bl	4b58 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4644:	bf00      	nop
    4646:	b003      	add	sp, #12
    4648:	f85d fb04 	ldr.w	pc, [sp], #4

0000464c <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    464c:	b084      	sub	sp, #16
    464e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4650:	4b0b      	ldr	r3, [pc, #44]	; (4680 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    4652:	795b      	ldrb	r3, [r3, #5]
    4654:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    4656:	4b0b      	ldr	r3, [pc, #44]	; (4684 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4658:	695b      	ldr	r3, [r3, #20]
    465a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    465c:	9b02      	ldr	r3, [sp, #8]
    465e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4662:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4664:	9b03      	ldr	r3, [sp, #12]
    4666:	061b      	lsls	r3, r3, #24
    4668:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    466c:	9a02      	ldr	r2, [sp, #8]
    466e:	4313      	orrs	r3, r2
    4670:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    4672:	4a04      	ldr	r2, [pc, #16]	; (4684 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4674:	9b02      	ldr	r3, [sp, #8]
    4676:	6153      	str	r3, [r2, #20]
}
    4678:	bf00      	nop
    467a:	b004      	add	sp, #16
    467c:	4770      	bx	lr
    467e:	bf00      	nop
    4680:	0001822c 	.word	0x0001822c
    4684:	40064000 	.word	0x40064000

00004688 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4688:	b084      	sub	sp, #16
    468a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    468c:	9b01      	ldr	r3, [sp, #4]
    468e:	685b      	ldr	r3, [r3, #4]
    4690:	4a0b      	ldr	r2, [pc, #44]	; (46c0 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    4692:	5cd3      	ldrb	r3, [r2, r3]
    4694:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    4696:	4b0b      	ldr	r3, [pc, #44]	; (46c4 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4698:	695b      	ldr	r3, [r3, #20]
    469a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    469c:	9b02      	ldr	r3, [sp, #8]
    469e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    46a2:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    46a4:	9b03      	ldr	r3, [sp, #12]
    46a6:	061b      	lsls	r3, r3, #24
    46a8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    46ac:	9a02      	ldr	r2, [sp, #8]
    46ae:	4313      	orrs	r3, r2
    46b0:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    46b2:	4a04      	ldr	r2, [pc, #16]	; (46c4 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    46b4:	9b02      	ldr	r3, [sp, #8]
    46b6:	6153      	str	r3, [r2, #20]
}
    46b8:	bf00      	nop
    46ba:	b004      	add	sp, #16
    46bc:	4770      	bx	lr
    46be:	bf00      	nop
    46c0:	0001822c 	.word	0x0001822c
    46c4:	40064000 	.word	0x40064000

000046c8 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46c8:	b084      	sub	sp, #16
    46ca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    46cc:	9b01      	ldr	r3, [sp, #4]
    46ce:	685b      	ldr	r3, [r3, #4]
    46d0:	4a0b      	ldr	r2, [pc, #44]	; (4700 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    46d2:	5cd3      	ldrb	r3, [r2, r3]
    46d4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    46d6:	4b0b      	ldr	r3, [pc, #44]	; (4704 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    46d8:	699b      	ldr	r3, [r3, #24]
    46da:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    46dc:	9b02      	ldr	r3, [sp, #8]
    46de:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    46e2:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    46e4:	9b03      	ldr	r3, [sp, #12]
    46e6:	061b      	lsls	r3, r3, #24
    46e8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    46ec:	9a02      	ldr	r2, [sp, #8]
    46ee:	4313      	orrs	r3, r2
    46f0:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    46f2:	4a04      	ldr	r2, [pc, #16]	; (4704 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    46f4:	9b02      	ldr	r3, [sp, #8]
    46f6:	6193      	str	r3, [r2, #24]
}
    46f8:	bf00      	nop
    46fa:	b004      	add	sp, #16
    46fc:	4770      	bx	lr
    46fe:	bf00      	nop
    4700:	0001822c 	.word	0x0001822c
    4704:	40064000 	.word	0x40064000

00004708 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4708:	b084      	sub	sp, #16
    470a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    470c:	4b0b      	ldr	r3, [pc, #44]	; (473c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    470e:	795b      	ldrb	r3, [r3, #5]
    4710:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    4712:	4b0b      	ldr	r3, [pc, #44]	; (4740 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4714:	69db      	ldr	r3, [r3, #28]
    4716:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4718:	9b02      	ldr	r3, [sp, #8]
    471a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    471e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4720:	9b03      	ldr	r3, [sp, #12]
    4722:	061b      	lsls	r3, r3, #24
    4724:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4728:	9a02      	ldr	r2, [sp, #8]
    472a:	4313      	orrs	r3, r2
    472c:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    472e:	4a04      	ldr	r2, [pc, #16]	; (4740 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4730:	9b02      	ldr	r3, [sp, #8]
    4732:	61d3      	str	r3, [r2, #28]
}
    4734:	bf00      	nop
    4736:	b004      	add	sp, #16
    4738:	4770      	bx	lr
    473a:	bf00      	nop
    473c:	0001822c 	.word	0x0001822c
    4740:	40064000 	.word	0x40064000

00004744 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4744:	b084      	sub	sp, #16
    4746:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4748:	9b01      	ldr	r3, [sp, #4]
    474a:	685b      	ldr	r3, [r3, #4]
    474c:	4a0b      	ldr	r2, [pc, #44]	; (477c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    474e:	5cd3      	ldrb	r3, [r2, r3]
    4750:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    4752:	4b0b      	ldr	r3, [pc, #44]	; (4780 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4754:	69db      	ldr	r3, [r3, #28]
    4756:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4758:	9b02      	ldr	r3, [sp, #8]
    475a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    475e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4760:	9b03      	ldr	r3, [sp, #12]
    4762:	061b      	lsls	r3, r3, #24
    4764:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4768:	9a02      	ldr	r2, [sp, #8]
    476a:	4313      	orrs	r3, r2
    476c:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    476e:	4a04      	ldr	r2, [pc, #16]	; (4780 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4770:	9b02      	ldr	r3, [sp, #8]
    4772:	61d3      	str	r3, [r2, #28]
}
    4774:	bf00      	nop
    4776:	b004      	add	sp, #16
    4778:	4770      	bx	lr
    477a:	bf00      	nop
    477c:	0001822c 	.word	0x0001822c
    4780:	40064000 	.word	0x40064000

00004784 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4784:	b084      	sub	sp, #16
    4786:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4788:	4b0a      	ldr	r3, [pc, #40]	; (47b4 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    478a:	7b9b      	ldrb	r3, [r3, #14]
    478c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    478e:	4b0a      	ldr	r3, [pc, #40]	; (47b8 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4790:	691b      	ldr	r3, [r3, #16]
    4792:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4794:	9b02      	ldr	r3, [sp, #8]
    4796:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    479a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    479c:	9b03      	ldr	r3, [sp, #12]
    479e:	011b      	lsls	r3, r3, #4
    47a0:	9a02      	ldr	r2, [sp, #8]
    47a2:	4313      	orrs	r3, r2
    47a4:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    47a6:	4a04      	ldr	r2, [pc, #16]	; (47b8 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    47a8:	9b02      	ldr	r3, [sp, #8]
    47aa:	6113      	str	r3, [r2, #16]
}
    47ac:	bf00      	nop
    47ae:	b004      	add	sp, #16
    47b0:	4770      	bx	lr
    47b2:	bf00      	nop
    47b4:	000181d4 	.word	0x000181d4
    47b8:	40048000 	.word	0x40048000

000047bc <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    47bc:	b084      	sub	sp, #16
    47be:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47c0:	9b01      	ldr	r3, [sp, #4]
    47c2:	685b      	ldr	r3, [r3, #4]
    47c4:	4a0a      	ldr	r2, [pc, #40]	; (47f0 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    47c6:	5cd3      	ldrb	r3, [r2, r3]
    47c8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    47ca:	4b0a      	ldr	r3, [pc, #40]	; (47f4 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    47cc:	691b      	ldr	r3, [r3, #16]
    47ce:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    47d0:	9b02      	ldr	r3, [sp, #8]
    47d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    47d6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    47d8:	9b03      	ldr	r3, [sp, #12]
    47da:	011b      	lsls	r3, r3, #4
    47dc:	9a02      	ldr	r2, [sp, #8]
    47de:	4313      	orrs	r3, r2
    47e0:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    47e2:	4a04      	ldr	r2, [pc, #16]	; (47f4 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    47e4:	9b02      	ldr	r3, [sp, #8]
    47e6:	6113      	str	r3, [r2, #16]
}
    47e8:	bf00      	nop
    47ea:	b004      	add	sp, #16
    47ec:	4770      	bx	lr
    47ee:	bf00      	nop
    47f0:	000181d4 	.word	0x000181d4
    47f4:	40048000 	.word	0x40048000

000047f8 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    47f8:	b084      	sub	sp, #16
    47fa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47fc:	4b0a      	ldr	r3, [pc, #40]	; (4828 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    47fe:	785b      	ldrb	r3, [r3, #1]
    4800:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4802:	4b0a      	ldr	r3, [pc, #40]	; (482c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4804:	691b      	ldr	r3, [r3, #16]
    4806:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4808:	9b02      	ldr	r3, [sp, #8]
    480a:	f023 030c 	bic.w	r3, r3, #12
    480e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4810:	9b03      	ldr	r3, [sp, #12]
    4812:	009b      	lsls	r3, r3, #2
    4814:	9a02      	ldr	r2, [sp, #8]
    4816:	4313      	orrs	r3, r2
    4818:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    481a:	4a04      	ldr	r2, [pc, #16]	; (482c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    481c:	9b02      	ldr	r3, [sp, #8]
    481e:	6113      	str	r3, [r2, #16]
}
    4820:	bf00      	nop
    4822:	b004      	add	sp, #16
    4824:	4770      	bx	lr
    4826:	bf00      	nop
    4828:	0001828c 	.word	0x0001828c
    482c:	40048000 	.word	0x40048000

00004830 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4830:	b084      	sub	sp, #16
    4832:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4834:	9b01      	ldr	r3, [sp, #4]
    4836:	685b      	ldr	r3, [r3, #4]
    4838:	4a0a      	ldr	r2, [pc, #40]	; (4864 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    483a:	5cd3      	ldrb	r3, [r2, r3]
    483c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    483e:	4b0a      	ldr	r3, [pc, #40]	; (4868 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4840:	691b      	ldr	r3, [r3, #16]
    4842:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4844:	9b02      	ldr	r3, [sp, #8]
    4846:	f023 030c 	bic.w	r3, r3, #12
    484a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    484c:	9b03      	ldr	r3, [sp, #12]
    484e:	009b      	lsls	r3, r3, #2
    4850:	9a02      	ldr	r2, [sp, #8]
    4852:	4313      	orrs	r3, r2
    4854:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4856:	4a04      	ldr	r2, [pc, #16]	; (4868 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4858:	9b02      	ldr	r3, [sp, #8]
    485a:	6113      	str	r3, [r2, #16]
}
    485c:	bf00      	nop
    485e:	b004      	add	sp, #16
    4860:	4770      	bx	lr
    4862:	bf00      	nop
    4864:	0001828c 	.word	0x0001828c
    4868:	40048000 	.word	0x40048000

0000486c <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    486c:	b084      	sub	sp, #16
    486e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4870:	4b0a      	ldr	r3, [pc, #40]	; (489c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    4872:	795b      	ldrb	r3, [r3, #5]
    4874:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    4876:	4b0a      	ldr	r3, [pc, #40]	; (48a0 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4878:	6a1b      	ldr	r3, [r3, #32]
    487a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    487c:	9b02      	ldr	r3, [sp, #8]
    487e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4882:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4884:	9b03      	ldr	r3, [sp, #12]
    4886:	061b      	lsls	r3, r3, #24
    4888:	9a02      	ldr	r2, [sp, #8]
    488a:	4313      	orrs	r3, r2
    488c:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    488e:	4a04      	ldr	r2, [pc, #16]	; (48a0 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4890:	9b02      	ldr	r3, [sp, #8]
    4892:	6213      	str	r3, [r2, #32]
}
    4894:	bf00      	nop
    4896:	b004      	add	sp, #16
    4898:	4770      	bx	lr
    489a:	bf00      	nop
    489c:	0001822c 	.word	0x0001822c
    48a0:	40064000 	.word	0x40064000

000048a4 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    48a4:	b084      	sub	sp, #16
    48a6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    48a8:	9b01      	ldr	r3, [sp, #4]
    48aa:	685b      	ldr	r3, [r3, #4]
    48ac:	4a0a      	ldr	r2, [pc, #40]	; (48d8 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    48ae:	5cd3      	ldrb	r3, [r2, r3]
    48b0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    48b2:	4b0a      	ldr	r3, [pc, #40]	; (48dc <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    48b4:	6a1b      	ldr	r3, [r3, #32]
    48b6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    48b8:	9b02      	ldr	r3, [sp, #8]
    48ba:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    48be:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    48c0:	9b03      	ldr	r3, [sp, #12]
    48c2:	061b      	lsls	r3, r3, #24
    48c4:	9a02      	ldr	r2, [sp, #8]
    48c6:	4313      	orrs	r3, r2
    48c8:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    48ca:	4a04      	ldr	r2, [pc, #16]	; (48dc <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    48cc:	9b02      	ldr	r3, [sp, #8]
    48ce:	6213      	str	r3, [r2, #32]
}
    48d0:	bf00      	nop
    48d2:	b004      	add	sp, #16
    48d4:	4770      	bx	lr
    48d6:	bf00      	nop
    48d8:	0001822c 	.word	0x0001822c
    48dc:	40064000 	.word	0x40064000

000048e0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    48e0:	b086      	sub	sp, #24
    48e2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    48e4:	4b20      	ldr	r3, [pc, #128]	; (4968 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    48e6:	795b      	ldrb	r3, [r3, #5]
    48e8:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    48ea:	9b01      	ldr	r3, [sp, #4]
    48ec:	681a      	ldr	r2, [r3, #0]
    48ee:	491f      	ldr	r1, [pc, #124]	; (496c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    48f0:	4613      	mov	r3, r2
    48f2:	00db      	lsls	r3, r3, #3
    48f4:	4413      	add	r3, r2
    48f6:	440b      	add	r3, r1
    48f8:	781b      	ldrb	r3, [r3, #0]
    48fa:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    48fc:	4b1c      	ldr	r3, [pc, #112]	; (4970 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    48fe:	68db      	ldr	r3, [r3, #12]
    4900:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    4902:	9b03      	ldr	r3, [sp, #12]
    4904:	2b03      	cmp	r3, #3
    4906:	d813      	bhi.n	4930 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4908:	9b03      	ldr	r3, [sp, #12]
    490a:	005b      	lsls	r3, r3, #1
    490c:	3318      	adds	r3, #24
    490e:	2203      	movs	r2, #3
    4910:	fa02 f303 	lsl.w	r3, r2, r3
    4914:	43db      	mvns	r3, r3
    4916:	9a05      	ldr	r2, [sp, #20]
    4918:	4013      	ands	r3, r2
    491a:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    491c:	9b03      	ldr	r3, [sp, #12]
    491e:	005b      	lsls	r3, r3, #1
    4920:	3318      	adds	r3, #24
    4922:	9a04      	ldr	r2, [sp, #16]
    4924:	fa02 f303 	lsl.w	r3, r2, r3
    4928:	9a05      	ldr	r2, [sp, #20]
    492a:	4313      	orrs	r3, r2
    492c:	9305      	str	r3, [sp, #20]
    492e:	e014      	b.n	495a <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4930:	9b03      	ldr	r3, [sp, #12]
    4932:	3b04      	subs	r3, #4
    4934:	005b      	lsls	r3, r3, #1
    4936:	3310      	adds	r3, #16
    4938:	2203      	movs	r2, #3
    493a:	fa02 f303 	lsl.w	r3, r2, r3
    493e:	43db      	mvns	r3, r3
    4940:	9a05      	ldr	r2, [sp, #20]
    4942:	4013      	ands	r3, r2
    4944:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4946:	9b03      	ldr	r3, [sp, #12]
    4948:	3b04      	subs	r3, #4
    494a:	005b      	lsls	r3, r3, #1
    494c:	3310      	adds	r3, #16
    494e:	9a04      	ldr	r2, [sp, #16]
    4950:	fa02 f303 	lsl.w	r3, r2, r3
    4954:	9a05      	ldr	r2, [sp, #20]
    4956:	4313      	orrs	r3, r2
    4958:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    495a:	4a05      	ldr	r2, [pc, #20]	; (4970 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    495c:	9b05      	ldr	r3, [sp, #20]
    495e:	60d3      	str	r3, [r2, #12]
}
    4960:	bf00      	nop
    4962:	b006      	add	sp, #24
    4964:	4770      	bx	lr
    4966:	bf00      	nop
    4968:	000181d4 	.word	0x000181d4
    496c:	00017ec4 	.word	0x00017ec4
    4970:	40048000 	.word	0x40048000

00004974 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4974:	b086      	sub	sp, #24
    4976:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4978:	9b01      	ldr	r3, [sp, #4]
    497a:	685b      	ldr	r3, [r3, #4]
    497c:	4a20      	ldr	r2, [pc, #128]	; (4a00 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    497e:	5cd3      	ldrb	r3, [r2, r3]
    4980:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4982:	9b01      	ldr	r3, [sp, #4]
    4984:	681a      	ldr	r2, [r3, #0]
    4986:	491f      	ldr	r1, [pc, #124]	; (4a04 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    4988:	4613      	mov	r3, r2
    498a:	00db      	lsls	r3, r3, #3
    498c:	4413      	add	r3, r2
    498e:	440b      	add	r3, r1
    4990:	781b      	ldrb	r3, [r3, #0]
    4992:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4994:	4b1c      	ldr	r3, [pc, #112]	; (4a08 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    4996:	68db      	ldr	r3, [r3, #12]
    4998:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    499a:	9b03      	ldr	r3, [sp, #12]
    499c:	2b03      	cmp	r3, #3
    499e:	d813      	bhi.n	49c8 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    49a0:	9b03      	ldr	r3, [sp, #12]
    49a2:	005b      	lsls	r3, r3, #1
    49a4:	3318      	adds	r3, #24
    49a6:	2203      	movs	r2, #3
    49a8:	fa02 f303 	lsl.w	r3, r2, r3
    49ac:	43db      	mvns	r3, r3
    49ae:	9a05      	ldr	r2, [sp, #20]
    49b0:	4013      	ands	r3, r2
    49b2:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    49b4:	9b03      	ldr	r3, [sp, #12]
    49b6:	005b      	lsls	r3, r3, #1
    49b8:	3318      	adds	r3, #24
    49ba:	9a04      	ldr	r2, [sp, #16]
    49bc:	fa02 f303 	lsl.w	r3, r2, r3
    49c0:	9a05      	ldr	r2, [sp, #20]
    49c2:	4313      	orrs	r3, r2
    49c4:	9305      	str	r3, [sp, #20]
    49c6:	e014      	b.n	49f2 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    49c8:	9b03      	ldr	r3, [sp, #12]
    49ca:	3b04      	subs	r3, #4
    49cc:	005b      	lsls	r3, r3, #1
    49ce:	3310      	adds	r3, #16
    49d0:	2203      	movs	r2, #3
    49d2:	fa02 f303 	lsl.w	r3, r2, r3
    49d6:	43db      	mvns	r3, r3
    49d8:	9a05      	ldr	r2, [sp, #20]
    49da:	4013      	ands	r3, r2
    49dc:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    49de:	9b03      	ldr	r3, [sp, #12]
    49e0:	3b04      	subs	r3, #4
    49e2:	005b      	lsls	r3, r3, #1
    49e4:	3310      	adds	r3, #16
    49e6:	9a04      	ldr	r2, [sp, #16]
    49e8:	fa02 f303 	lsl.w	r3, r2, r3
    49ec:	9a05      	ldr	r2, [sp, #20]
    49ee:	4313      	orrs	r3, r2
    49f0:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    49f2:	4a05      	ldr	r2, [pc, #20]	; (4a08 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    49f4:	9b05      	ldr	r3, [sp, #20]
    49f6:	60d3      	str	r3, [r2, #12]
}
    49f8:	bf00      	nop
    49fa:	b006      	add	sp, #24
    49fc:	4770      	bx	lr
    49fe:	bf00      	nop
    4a00:	000181d4 	.word	0x000181d4
    4a04:	00017ec4 	.word	0x00017ec4
    4a08:	40048000 	.word	0x40048000

00004a0c <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4a0c:	b084      	sub	sp, #16
    4a0e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    4a10:	4b06      	ldr	r3, [pc, #24]	; (4a2c <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4a12:	685b      	ldr	r3, [r3, #4]
    4a14:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    4a16:	9b03      	ldr	r3, [sp, #12]
    4a18:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    4a1c:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    4a1e:	4a03      	ldr	r2, [pc, #12]	; (4a2c <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4a20:	9b03      	ldr	r3, [sp, #12]
    4a22:	6053      	str	r3, [r2, #4]
}
    4a24:	bf00      	nop
    4a26:	b004      	add	sp, #16
    4a28:	4770      	bx	lr
    4a2a:	bf00      	nop
    4a2c:	40048000 	.word	0x40048000

00004a30 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4a30:	b084      	sub	sp, #16
    4a32:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4a34:	9b01      	ldr	r3, [sp, #4]
    4a36:	685b      	ldr	r3, [r3, #4]
    4a38:	4a0a      	ldr	r2, [pc, #40]	; (4a64 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    4a3a:	5cd3      	ldrb	r3, [r2, r3]
    4a3c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    4a3e:	4b0a      	ldr	r3, [pc, #40]	; (4a68 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4a40:	685b      	ldr	r3, [r3, #4]
    4a42:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    4a44:	9b02      	ldr	r3, [sp, #8]
    4a46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    4a4a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    4a4c:	9b03      	ldr	r3, [sp, #12]
    4a4e:	011b      	lsls	r3, r3, #4
    4a50:	9a02      	ldr	r2, [sp, #8]
    4a52:	4313      	orrs	r3, r2
    4a54:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    4a56:	4a04      	ldr	r2, [pc, #16]	; (4a68 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4a58:	9b02      	ldr	r3, [sp, #8]
    4a5a:	6053      	str	r3, [r2, #4]
}
    4a5c:	bf00      	nop
    4a5e:	b004      	add	sp, #16
    4a60:	4770      	bx	lr
    4a62:	bf00      	nop
    4a64:	000181d4 	.word	0x000181d4
    4a68:	40048000 	.word	0x40048000

00004a6c <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4a6c:	b084      	sub	sp, #16
    4a6e:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4a70:	9b01      	ldr	r3, [sp, #4]
    4a72:	681a      	ldr	r2, [r3, #0]
    4a74:	490f      	ldr	r1, [pc, #60]	; (4ab4 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    4a76:	4613      	mov	r3, r2
    4a78:	00db      	lsls	r3, r3, #3
    4a7a:	4413      	add	r3, r2
    4a7c:	440b      	add	r3, r1
    4a7e:	3304      	adds	r3, #4
    4a80:	781b      	ldrb	r3, [r3, #0]
    4a82:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    4a84:	4a0c      	ldr	r2, [pc, #48]	; (4ab8 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4a86:	9b03      	ldr	r3, [sp, #12]
    4a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4a8c:	490a      	ldr	r1, [pc, #40]	; (4ab8 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4a8e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    4a92:	9b03      	ldr	r3, [sp, #12]
    4a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    4a98:	4a07      	ldr	r2, [pc, #28]	; (4ab8 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4a9a:	9b03      	ldr	r3, [sp, #12]
    4a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4aa0:	4905      	ldr	r1, [pc, #20]	; (4ab8 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4aa2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    4aa6:	9b03      	ldr	r3, [sp, #12]
    4aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4aac:	bf00      	nop
    4aae:	b004      	add	sp, #16
    4ab0:	4770      	bx	lr
    4ab2:	bf00      	nop
    4ab4:	00017ec4 	.word	0x00017ec4
    4ab8:	40065000 	.word	0x40065000

00004abc <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4abc:	b086      	sub	sp, #24
    4abe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4ac0:	9b01      	ldr	r3, [sp, #4]
    4ac2:	681a      	ldr	r2, [r3, #0]
    4ac4:	4912      	ldr	r1, [pc, #72]	; (4b10 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    4ac6:	4613      	mov	r3, r2
    4ac8:	00db      	lsls	r3, r3, #3
    4aca:	4413      	add	r3, r2
    4acc:	440b      	add	r3, r1
    4ace:	3304      	adds	r3, #4
    4ad0:	781b      	ldrb	r3, [r3, #0]
    4ad2:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4ad4:	9b01      	ldr	r3, [sp, #4]
    4ad6:	685b      	ldr	r3, [r3, #4]
    4ad8:	4a0e      	ldr	r2, [pc, #56]	; (4b14 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    4ada:	5cd3      	ldrb	r3, [r2, r3]
    4adc:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    4ade:	4a0e      	ldr	r2, [pc, #56]	; (4b18 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4ae0:	9b05      	ldr	r3, [sp, #20]
    4ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4ae6:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    4ae8:	9b03      	ldr	r3, [sp, #12]
    4aea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    4aee:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    4af0:	9b04      	ldr	r3, [sp, #16]
    4af2:	061b      	lsls	r3, r3, #24
    4af4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    4af8:	9a03      	ldr	r2, [sp, #12]
    4afa:	4313      	orrs	r3, r2
    4afc:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    4afe:	4906      	ldr	r1, [pc, #24]	; (4b18 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4b00:	9b05      	ldr	r3, [sp, #20]
    4b02:	9a03      	ldr	r2, [sp, #12]
    4b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4b08:	bf00      	nop
    4b0a:	b006      	add	sp, #24
    4b0c:	4770      	bx	lr
    4b0e:	bf00      	nop
    4b10:	00017ec4 	.word	0x00017ec4
    4b14:	0001825c 	.word	0x0001825c
    4b18:	40065000 	.word	0x40065000

00004b1c <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4b1c:	b084      	sub	sp, #16
    4b1e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4b20:	4b0b      	ldr	r3, [pc, #44]	; (4b50 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    4b22:	7f1b      	ldrb	r3, [r3, #28]
    4b24:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    4b26:	4b0b      	ldr	r3, [pc, #44]	; (4b54 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4b28:	685b      	ldr	r3, [r3, #4]
    4b2a:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4b2c:	9b02      	ldr	r3, [sp, #8]
    4b2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4b32:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4b34:	9b03      	ldr	r3, [sp, #12]
    4b36:	031b      	lsls	r3, r3, #12
    4b38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4b3c:	9a02      	ldr	r2, [sp, #8]
    4b3e:	4313      	orrs	r3, r2
    4b40:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4b42:	4a04      	ldr	r2, [pc, #16]	; (4b54 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4b44:	9b02      	ldr	r3, [sp, #8]
    4b46:	6053      	str	r3, [r2, #4]
}
    4b48:	bf00      	nop
    4b4a:	b004      	add	sp, #16
    4b4c:	4770      	bx	lr
    4b4e:	bf00      	nop
    4b50:	000181d4 	.word	0x000181d4
    4b54:	40048000 	.word	0x40048000

00004b58 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4b58:	b084      	sub	sp, #16
    4b5a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4b5c:	9b01      	ldr	r3, [sp, #4]
    4b5e:	685b      	ldr	r3, [r3, #4]
    4b60:	4a0b      	ldr	r2, [pc, #44]	; (4b90 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    4b62:	5cd3      	ldrb	r3, [r2, r3]
    4b64:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    4b66:	4b0b      	ldr	r3, [pc, #44]	; (4b94 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4b68:	685b      	ldr	r3, [r3, #4]
    4b6a:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4b6c:	9b02      	ldr	r3, [sp, #8]
    4b6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4b72:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4b74:	9b03      	ldr	r3, [sp, #12]
    4b76:	031b      	lsls	r3, r3, #12
    4b78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4b7c:	9a02      	ldr	r2, [sp, #8]
    4b7e:	4313      	orrs	r3, r2
    4b80:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4b82:	4a04      	ldr	r2, [pc, #16]	; (4b94 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4b84:	9b02      	ldr	r3, [sp, #8]
    4b86:	6053      	str	r3, [r2, #4]
}
    4b88:	bf00      	nop
    4b8a:	b004      	add	sp, #16
    4b8c:	4770      	bx	lr
    4b8e:	bf00      	nop
    4b90:	000181d4 	.word	0x000181d4
    4b94:	40048000 	.word	0x40048000

00004b98 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    4b98:	b500      	push	{lr}
    4b9a:	b085      	sub	sp, #20
    4b9c:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    4b9e:	2300      	movs	r3, #0
    4ba0:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    4ba4:	9b01      	ldr	r3, [sp, #4]
    4ba6:	2b00      	cmp	r3, #0
    4ba8:	d037      	beq.n	4c1a <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4baa:	2300      	movs	r3, #0
    4bac:	9303      	str	r3, [sp, #12]
    4bae:	e02b      	b.n	4c08 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4bb0:	4b29      	ldr	r3, [pc, #164]	; (4c58 <DisableSafeClock+0xc0>)
    4bb2:	6819      	ldr	r1, [r3, #0]
    4bb4:	9a03      	ldr	r2, [sp, #12]
    4bb6:	4613      	mov	r3, r2
    4bb8:	005b      	lsls	r3, r3, #1
    4bba:	4413      	add	r3, r2
    4bbc:	009b      	lsls	r3, r3, #2
    4bbe:	440b      	add	r3, r1
    4bc0:	3314      	adds	r3, #20
    4bc2:	681b      	ldr	r3, [r3, #0]
    4bc4:	2b05      	cmp	r3, #5
    4bc6:	d11c      	bne.n	4c02 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    4bc8:	2301      	movs	r3, #1
    4bca:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    4bce:	4b22      	ldr	r3, [pc, #136]	; (4c58 <DisableSafeClock+0xc0>)
    4bd0:	6819      	ldr	r1, [r3, #0]
    4bd2:	9a03      	ldr	r2, [sp, #12]
    4bd4:	4613      	mov	r3, r2
    4bd6:	005b      	lsls	r3, r3, #1
    4bd8:	4413      	add	r3, r2
    4bda:	009b      	lsls	r3, r3, #2
    4bdc:	440b      	add	r3, r1
    4bde:	3318      	adds	r3, #24
    4be0:	881b      	ldrh	r3, [r3, #0]
    4be2:	2b00      	cmp	r3, #0
    4be4:	d118      	bne.n	4c18 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4be6:	4b1d      	ldr	r3, [pc, #116]	; (4c5c <DisableSafeClock+0xc4>)
    4be8:	791b      	ldrb	r3, [r3, #4]
    4bea:	4619      	mov	r1, r3
    4bec:	4a1c      	ldr	r2, [pc, #112]	; (4c60 <DisableSafeClock+0xc8>)
    4bee:	460b      	mov	r3, r1
    4bf0:	005b      	lsls	r3, r3, #1
    4bf2:	440b      	add	r3, r1
    4bf4:	009b      	lsls	r3, r3, #2
    4bf6:	4413      	add	r3, r2
    4bf8:	3308      	adds	r3, #8
    4bfa:	681b      	ldr	r3, [r3, #0]
    4bfc:	2005      	movs	r0, #5
    4bfe:	4798      	blx	r3
                }
                break;
    4c00:	e00a      	b.n	4c18 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4c02:	9b03      	ldr	r3, [sp, #12]
    4c04:	3301      	adds	r3, #1
    4c06:	9303      	str	r3, [sp, #12]
    4c08:	4b13      	ldr	r3, [pc, #76]	; (4c58 <DisableSafeClock+0xc0>)
    4c0a:	681b      	ldr	r3, [r3, #0]
    4c0c:	7a1b      	ldrb	r3, [r3, #8]
    4c0e:	461a      	mov	r2, r3
    4c10:	9b03      	ldr	r3, [sp, #12]
    4c12:	4293      	cmp	r3, r2
    4c14:	d3cc      	bcc.n	4bb0 <DisableSafeClock+0x18>
    4c16:	e000      	b.n	4c1a <DisableSafeClock+0x82>
                break;
    4c18:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    4c1a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4c1e:	f083 0301 	eor.w	r3, r3, #1
    4c22:	b2db      	uxtb	r3, r3
    4c24:	2b00      	cmp	r3, #0
    4c26:	d013      	beq.n	4c50 <DisableSafeClock+0xb8>
    4c28:	4b0e      	ldr	r3, [pc, #56]	; (4c64 <DisableSafeClock+0xcc>)
    4c2a:	781b      	ldrb	r3, [r3, #0]
    4c2c:	f083 0301 	eor.w	r3, r3, #1
    4c30:	b2db      	uxtb	r3, r3
    4c32:	2b00      	cmp	r3, #0
    4c34:	d00c      	beq.n	4c50 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4c36:	4b09      	ldr	r3, [pc, #36]	; (4c5c <DisableSafeClock+0xc4>)
    4c38:	791b      	ldrb	r3, [r3, #4]
    4c3a:	4619      	mov	r1, r3
    4c3c:	4a08      	ldr	r2, [pc, #32]	; (4c60 <DisableSafeClock+0xc8>)
    4c3e:	460b      	mov	r3, r1
    4c40:	005b      	lsls	r3, r3, #1
    4c42:	440b      	add	r3, r1
    4c44:	009b      	lsls	r3, r3, #2
    4c46:	4413      	add	r3, r2
    4c48:	3308      	adds	r3, #8
    4c4a:	681b      	ldr	r3, [r3, #0]
    4c4c:	2005      	movs	r0, #5
    4c4e:	4798      	blx	r3
    }
}
    4c50:	bf00      	nop
    4c52:	b005      	add	sp, #20
    4c54:	f85d fb04 	ldr.w	pc, [sp], #4
    4c58:	1fff8b9c 	.word	0x1fff8b9c
    4c5c:	00017e54 	.word	0x00017e54
    4c60:	00018484 	.word	0x00018484
    4c64:	1fff8b18 	.word	0x1fff8b18

00004c68 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    4c68:	4b06      	ldr	r3, [pc, #24]	; (4c84 <SetFircToResetValue_TrustedCall+0x1c>)
    4c6a:	2200      	movs	r2, #0
    4c6c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    4c70:	4b04      	ldr	r3, [pc, #16]	; (4c84 <SetFircToResetValue_TrustedCall+0x1c>)
    4c72:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4c76:	4a03      	ldr	r2, [pc, #12]	; (4c84 <SetFircToResetValue_TrustedCall+0x1c>)
    4c78:	f043 0301 	orr.w	r3, r3, #1
    4c7c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4c80:	bf00      	nop
    4c82:	4770      	bx	lr
    4c84:	40064000 	.word	0x40064000

00004c88 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    4c88:	b084      	sub	sp, #16
    4c8a:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    4c8c:	2303      	movs	r3, #3
    4c8e:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4c90:	2300      	movs	r3, #0
    4c92:	9302      	str	r3, [sp, #8]
    4c94:	e028      	b.n	4ce8 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    4c96:	9b01      	ldr	r3, [sp, #4]
    4c98:	9a02      	ldr	r2, [sp, #8]
    4c9a:	320d      	adds	r2, #13
    4c9c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4ca0:	2b28      	cmp	r3, #40	; 0x28
    4ca2:	d10b      	bne.n	4cbc <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4ca4:	9a01      	ldr	r2, [sp, #4]
    4ca6:	9b02      	ldr	r3, [sp, #8]
    4ca8:	330d      	adds	r3, #13
    4caa:	00db      	lsls	r3, r3, #3
    4cac:	4413      	add	r3, r2
    4cae:	685b      	ldr	r3, [r3, #4]
    4cb0:	4a2b      	ldr	r2, [pc, #172]	; (4d60 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    4cb2:	5cd3      	ldrb	r3, [r2, r3]
    4cb4:	011b      	lsls	r3, r3, #4
    4cb6:	9a03      	ldr	r2, [sp, #12]
    4cb8:	4313      	orrs	r3, r2
    4cba:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    4cbc:	9b01      	ldr	r3, [sp, #4]
    4cbe:	9a02      	ldr	r2, [sp, #8]
    4cc0:	320d      	adds	r2, #13
    4cc2:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4cc6:	2b29      	cmp	r3, #41	; 0x29
    4cc8:	d10b      	bne.n	4ce2 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4cca:	9a01      	ldr	r2, [sp, #4]
    4ccc:	9b02      	ldr	r3, [sp, #8]
    4cce:	330d      	adds	r3, #13
    4cd0:	00db      	lsls	r3, r3, #3
    4cd2:	4413      	add	r3, r2
    4cd4:	685b      	ldr	r3, [r3, #4]
    4cd6:	4a23      	ldr	r2, [pc, #140]	; (4d64 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    4cd8:	5cd3      	ldrb	r3, [r2, r3]
    4cda:	009b      	lsls	r3, r3, #2
    4cdc:	9a03      	ldr	r2, [sp, #12]
    4cde:	4313      	orrs	r3, r2
    4ce0:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4ce2:	9b02      	ldr	r3, [sp, #8]
    4ce4:	3301      	adds	r3, #1
    4ce6:	9302      	str	r3, [sp, #8]
    4ce8:	9b01      	ldr	r3, [sp, #4]
    4cea:	7adb      	ldrb	r3, [r3, #11]
    4cec:	461a      	mov	r2, r3
    4cee:	9b02      	ldr	r3, [sp, #8]
    4cf0:	4293      	cmp	r3, r2
    4cf2:	d3d0      	bcc.n	4c96 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4cf4:	2300      	movs	r3, #0
    4cf6:	9302      	str	r3, [sp, #8]
    4cf8:	e026      	b.n	4d48 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    4cfa:	9a01      	ldr	r2, [sp, #4]
    4cfc:	9b02      	ldr	r3, [sp, #8]
    4cfe:	334e      	adds	r3, #78	; 0x4e
    4d00:	00db      	lsls	r3, r3, #3
    4d02:	4413      	add	r3, r2
    4d04:	685b      	ldr	r3, [r3, #4]
    4d06:	2b12      	cmp	r3, #18
    4d08:	d109      	bne.n	4d1e <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    4d0a:	9a01      	ldr	r2, [sp, #4]
    4d0c:	9b02      	ldr	r3, [sp, #8]
    4d0e:	334e      	adds	r3, #78	; 0x4e
    4d10:	00db      	lsls	r3, r3, #3
    4d12:	4413      	add	r3, r2
    4d14:	891b      	ldrh	r3, [r3, #8]
    4d16:	005b      	lsls	r3, r3, #1
    4d18:	9a03      	ldr	r2, [sp, #12]
    4d1a:	4313      	orrs	r3, r2
    4d1c:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    4d1e:	9a01      	ldr	r2, [sp, #4]
    4d20:	9b02      	ldr	r3, [sp, #8]
    4d22:	334e      	adds	r3, #78	; 0x4e
    4d24:	00db      	lsls	r3, r3, #3
    4d26:	4413      	add	r3, r2
    4d28:	685b      	ldr	r3, [r3, #4]
    4d2a:	2b13      	cmp	r3, #19
    4d2c:	d109      	bne.n	4d42 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    4d2e:	9a01      	ldr	r2, [sp, #4]
    4d30:	9b02      	ldr	r3, [sp, #8]
    4d32:	334e      	adds	r3, #78	; 0x4e
    4d34:	00db      	lsls	r3, r3, #3
    4d36:	4413      	add	r3, r2
    4d38:	891b      	ldrh	r3, [r3, #8]
    4d3a:	461a      	mov	r2, r3
    4d3c:	9b03      	ldr	r3, [sp, #12]
    4d3e:	4313      	orrs	r3, r2
    4d40:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4d42:	9b02      	ldr	r3, [sp, #8]
    4d44:	3301      	adds	r3, #1
    4d46:	9302      	str	r3, [sp, #8]
    4d48:	9b01      	ldr	r3, [sp, #4]
    4d4a:	7c1b      	ldrb	r3, [r3, #16]
    4d4c:	461a      	mov	r2, r3
    4d4e:	9b02      	ldr	r3, [sp, #8]
    4d50:	4293      	cmp	r3, r2
    4d52:	d3d2      	bcc.n	4cfa <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    4d54:	4a04      	ldr	r2, [pc, #16]	; (4d68 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    4d56:	9b03      	ldr	r3, [sp, #12]
    4d58:	6113      	str	r3, [r2, #16]
}
    4d5a:	bf00      	nop
    4d5c:	b004      	add	sp, #16
    4d5e:	4770      	bx	lr
    4d60:	000181d4 	.word	0x000181d4
    4d64:	0001828c 	.word	0x0001828c
    4d68:	40048000 	.word	0x40048000

00004d6c <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    4d6c:	b500      	push	{lr}
    4d6e:	b089      	sub	sp, #36	; 0x24
    4d70:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4d72:	2300      	movs	r3, #0
    4d74:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    4d78:	4a21      	ldr	r2, [pc, #132]	; (4e00 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    4d7a:	9b01      	ldr	r3, [sp, #4]
    4d7c:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    4d7e:	4b21      	ldr	r3, [pc, #132]	; (4e04 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4d80:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4d84:	f003 0301 	and.w	r3, r3, #1
    4d88:	2b00      	cmp	r3, #0
    4d8a:	d12e      	bne.n	4dea <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    4d8c:	4b1e      	ldr	r3, [pc, #120]	; (4e08 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4d8e:	2200      	movs	r2, #0
    4d90:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    4d92:	f7ff ff69 	bl	4c68 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4d96:	aa03      	add	r2, sp, #12
    4d98:	a904      	add	r1, sp, #16
    4d9a:	a805      	add	r0, sp, #20
    4d9c:	f24c 3350 	movw	r3, #50000	; 0xc350
    4da0:	f7fe f8ae 	bl	2f00 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4da4:	4b17      	ldr	r3, [pc, #92]	; (4e04 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4da6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4daa:	0e1b      	lsrs	r3, r3, #24
    4dac:	f003 0301 	and.w	r3, r3, #1
    4db0:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4db2:	9a03      	ldr	r2, [sp, #12]
    4db4:	a904      	add	r1, sp, #16
    4db6:	ab05      	add	r3, sp, #20
    4db8:	4618      	mov	r0, r3
    4dba:	f7fe f8bb 	bl	2f34 <Clock_Ip_TimeoutExpired>
    4dbe:	4603      	mov	r3, r0
    4dc0:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4dc4:	9b06      	ldr	r3, [sp, #24]
    4dc6:	2b00      	cmp	r3, #0
    4dc8:	d106      	bne.n	4dd8 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    4dca:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4dce:	f083 0301 	eor.w	r3, r3, #1
    4dd2:	b2db      	uxtb	r3, r3
    4dd4:	2b00      	cmp	r3, #0
    4dd6:	d1e5      	bne.n	4da4 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4dd8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4ddc:	2b00      	cmp	r3, #0
    4dde:	d007      	beq.n	4df0 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4de0:	2105      	movs	r1, #5
    4de2:	2001      	movs	r0, #1
    4de4:	f7fe f87c 	bl	2ee0 <Clock_Ip_ReportClockErrors>
    4de8:	e002      	b.n	4df0 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4dea:	4b07      	ldr	r3, [pc, #28]	; (4e08 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4dec:	2201      	movs	r2, #1
    4dee:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4df0:	9801      	ldr	r0, [sp, #4]
    4df2:	f7ff ff49 	bl	4c88 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4df6:	bf00      	nop
    4df8:	b009      	add	sp, #36	; 0x24
    4dfa:	f85d fb04 	ldr.w	pc, [sp], #4
    4dfe:	bf00      	nop
    4e00:	1fff8b9c 	.word	0x1fff8b9c
    4e04:	40064000 	.word	0x40064000
    4e08:	1fff8b18 	.word	0x1fff8b18

00004e0c <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4e0c:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4e0e:	2300      	movs	r3, #0
    4e10:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4e12:	4b29      	ldr	r3, [pc, #164]	; (4eb8 <getFircConfig+0xac>)
    4e14:	681b      	ldr	r3, [r3, #0]
    4e16:	2b00      	cmp	r3, #0
    4e18:	d024      	beq.n	4e64 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4e1a:	2300      	movs	r3, #0
    4e1c:	9301      	str	r3, [sp, #4]
    4e1e:	e01a      	b.n	4e56 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4e20:	4b25      	ldr	r3, [pc, #148]	; (4eb8 <getFircConfig+0xac>)
    4e22:	6819      	ldr	r1, [r3, #0]
    4e24:	9a01      	ldr	r2, [sp, #4]
    4e26:	4613      	mov	r3, r2
    4e28:	005b      	lsls	r3, r3, #1
    4e2a:	4413      	add	r3, r2
    4e2c:	009b      	lsls	r3, r3, #2
    4e2e:	440b      	add	r3, r1
    4e30:	3314      	adds	r3, #20
    4e32:	681b      	ldr	r3, [r3, #0]
    4e34:	2b05      	cmp	r3, #5
    4e36:	d10b      	bne.n	4e50 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4e38:	4b1f      	ldr	r3, [pc, #124]	; (4eb8 <getFircConfig+0xac>)
    4e3a:	6819      	ldr	r1, [r3, #0]
    4e3c:	9a01      	ldr	r2, [sp, #4]
    4e3e:	4613      	mov	r3, r2
    4e40:	005b      	lsls	r3, r3, #1
    4e42:	4413      	add	r3, r2
    4e44:	009b      	lsls	r3, r3, #2
    4e46:	3310      	adds	r3, #16
    4e48:	440b      	add	r3, r1
    4e4a:	3304      	adds	r3, #4
    4e4c:	9300      	str	r3, [sp, #0]
                break;
    4e4e:	e009      	b.n	4e64 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4e50:	9b01      	ldr	r3, [sp, #4]
    4e52:	3301      	adds	r3, #1
    4e54:	9301      	str	r3, [sp, #4]
    4e56:	4b18      	ldr	r3, [pc, #96]	; (4eb8 <getFircConfig+0xac>)
    4e58:	681b      	ldr	r3, [r3, #0]
    4e5a:	7a1b      	ldrb	r3, [r3, #8]
    4e5c:	461a      	mov	r2, r3
    4e5e:	9b01      	ldr	r3, [sp, #4]
    4e60:	4293      	cmp	r3, r2
    4e62:	d3dd      	bcc.n	4e20 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4e64:	9b00      	ldr	r3, [sp, #0]
    4e66:	2b00      	cmp	r3, #0
    4e68:	d121      	bne.n	4eae <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4e6a:	4b14      	ldr	r3, [pc, #80]	; (4ebc <getFircConfig+0xb0>)
    4e6c:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4e6e:	4b13      	ldr	r3, [pc, #76]	; (4ebc <getFircConfig+0xb0>)
    4e70:	2205      	movs	r2, #5
    4e72:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4e74:	4b12      	ldr	r3, [pc, #72]	; (4ec0 <getFircConfig+0xb4>)
    4e76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4e7a:	b29b      	uxth	r3, r3
    4e7c:	f003 0301 	and.w	r3, r3, #1
    4e80:	b29a      	uxth	r2, r3
    4e82:	4b0e      	ldr	r3, [pc, #56]	; (4ebc <getFircConfig+0xb0>)
    4e84:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    4e86:	4b0e      	ldr	r3, [pc, #56]	; (4ec0 <getFircConfig+0xb4>)
    4e88:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4e8c:	b2db      	uxtb	r3, r3
    4e8e:	f003 0303 	and.w	r3, r3, #3
    4e92:	b2da      	uxtb	r2, r3
    4e94:	4b09      	ldr	r3, [pc, #36]	; (4ebc <getFircConfig+0xb0>)
    4e96:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4e98:	4b09      	ldr	r3, [pc, #36]	; (4ec0 <getFircConfig+0xb4>)
    4e9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4e9e:	b2db      	uxtb	r3, r3
    4ea0:	10db      	asrs	r3, r3, #3
    4ea2:	b2db      	uxtb	r3, r3
    4ea4:	f003 0301 	and.w	r3, r3, #1
    4ea8:	b2da      	uxtb	r2, r3
    4eaa:	4b04      	ldr	r3, [pc, #16]	; (4ebc <getFircConfig+0xb0>)
    4eac:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4eae:	9b00      	ldr	r3, [sp, #0]
}
    4eb0:	4618      	mov	r0, r3
    4eb2:	b002      	add	sp, #8
    4eb4:	4770      	bx	lr
    4eb6:	bf00      	nop
    4eb8:	1fff8b9c 	.word	0x1fff8b9c
    4ebc:	1fff8c08 	.word	0x1fff8c08
    4ec0:	40064000 	.word	0x40064000

00004ec4 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4ec4:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4ec6:	2300      	movs	r3, #0
    4ec8:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4eca:	4b20      	ldr	r3, [pc, #128]	; (4f4c <getSoscConfig+0x88>)
    4ecc:	681b      	ldr	r3, [r3, #0]
    4ece:	2b00      	cmp	r3, #0
    4ed0:	d024      	beq.n	4f1c <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4ed2:	2300      	movs	r3, #0
    4ed4:	9301      	str	r3, [sp, #4]
    4ed6:	e01a      	b.n	4f0e <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4ed8:	4b1c      	ldr	r3, [pc, #112]	; (4f4c <getSoscConfig+0x88>)
    4eda:	6819      	ldr	r1, [r3, #0]
    4edc:	9a01      	ldr	r2, [sp, #4]
    4ede:	4613      	mov	r3, r2
    4ee0:	009b      	lsls	r3, r3, #2
    4ee2:	4413      	add	r3, r2
    4ee4:	009b      	lsls	r3, r3, #2
    4ee6:	440b      	add	r3, r1
    4ee8:	332c      	adds	r3, #44	; 0x2c
    4eea:	681b      	ldr	r3, [r3, #0]
    4eec:	2b08      	cmp	r3, #8
    4eee:	d10b      	bne.n	4f08 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4ef0:	4b16      	ldr	r3, [pc, #88]	; (4f4c <getSoscConfig+0x88>)
    4ef2:	6819      	ldr	r1, [r3, #0]
    4ef4:	9a01      	ldr	r2, [sp, #4]
    4ef6:	4613      	mov	r3, r2
    4ef8:	009b      	lsls	r3, r3, #2
    4efa:	4413      	add	r3, r2
    4efc:	009b      	lsls	r3, r3, #2
    4efe:	3328      	adds	r3, #40	; 0x28
    4f00:	440b      	add	r3, r1
    4f02:	3304      	adds	r3, #4
    4f04:	9300      	str	r3, [sp, #0]
                break;
    4f06:	e009      	b.n	4f1c <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4f08:	9b01      	ldr	r3, [sp, #4]
    4f0a:	3301      	adds	r3, #1
    4f0c:	9301      	str	r3, [sp, #4]
    4f0e:	4b0f      	ldr	r3, [pc, #60]	; (4f4c <getSoscConfig+0x88>)
    4f10:	681b      	ldr	r3, [r3, #0]
    4f12:	7a5b      	ldrb	r3, [r3, #9]
    4f14:	461a      	mov	r2, r3
    4f16:	9b01      	ldr	r3, [sp, #4]
    4f18:	4293      	cmp	r3, r2
    4f1a:	d3dd      	bcc.n	4ed8 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4f1c:	9b00      	ldr	r3, [sp, #0]
    4f1e:	2b00      	cmp	r3, #0
    4f20:	d110      	bne.n	4f44 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4f22:	4b0b      	ldr	r3, [pc, #44]	; (4f50 <getSoscConfig+0x8c>)
    4f24:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4f26:	4b0a      	ldr	r3, [pc, #40]	; (4f50 <getSoscConfig+0x8c>)
    4f28:	2208      	movs	r2, #8
    4f2a:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4f2c:	4b09      	ldr	r3, [pc, #36]	; (4f54 <getSoscConfig+0x90>)
    4f2e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4f32:	b29b      	uxth	r3, r3
    4f34:	f003 0301 	and.w	r3, r3, #1
    4f38:	b29a      	uxth	r2, r3
    4f3a:	4b05      	ldr	r3, [pc, #20]	; (4f50 <getSoscConfig+0x8c>)
    4f3c:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4f3e:	4b04      	ldr	r3, [pc, #16]	; (4f50 <getSoscConfig+0x8c>)
    4f40:	4a05      	ldr	r2, [pc, #20]	; (4f58 <getSoscConfig+0x94>)
    4f42:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4f44:	9b00      	ldr	r3, [sp, #0]
}
    4f46:	4618      	mov	r0, r3
    4f48:	b002      	add	sp, #8
    4f4a:	4770      	bx	lr
    4f4c:	1fff8b9c 	.word	0x1fff8b9c
    4f50:	1fff8c14 	.word	0x1fff8c14
    4f54:	40064000 	.word	0x40064000
    4f58:	02625a00 	.word	0x02625a00

00004f5c <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4f5c:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4f5e:	2300      	movs	r3, #0
    4f60:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4f62:	4b28      	ldr	r3, [pc, #160]	; (5004 <getSpllConfig+0xa8>)
    4f64:	681b      	ldr	r3, [r3, #0]
    4f66:	2b00      	cmp	r3, #0
    4f68:	d023      	beq.n	4fb2 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4f6a:	2300      	movs	r3, #0
    4f6c:	9301      	str	r3, [sp, #4]
    4f6e:	e019      	b.n	4fa4 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4f70:	4b24      	ldr	r3, [pc, #144]	; (5004 <getSpllConfig+0xa8>)
    4f72:	6819      	ldr	r1, [r3, #0]
    4f74:	9a01      	ldr	r2, [sp, #4]
    4f76:	4613      	mov	r3, r2
    4f78:	009b      	lsls	r3, r3, #2
    4f7a:	4413      	add	r3, r2
    4f7c:	00db      	lsls	r3, r3, #3
    4f7e:	440b      	add	r3, r1
    4f80:	3340      	adds	r3, #64	; 0x40
    4f82:	681b      	ldr	r3, [r3, #0]
    4f84:	2b09      	cmp	r3, #9
    4f86:	d10a      	bne.n	4f9e <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4f88:	4b1e      	ldr	r3, [pc, #120]	; (5004 <getSpllConfig+0xa8>)
    4f8a:	6819      	ldr	r1, [r3, #0]
    4f8c:	9a01      	ldr	r2, [sp, #4]
    4f8e:	4613      	mov	r3, r2
    4f90:	009b      	lsls	r3, r3, #2
    4f92:	4413      	add	r3, r2
    4f94:	00db      	lsls	r3, r3, #3
    4f96:	3340      	adds	r3, #64	; 0x40
    4f98:	440b      	add	r3, r1
    4f9a:	9300      	str	r3, [sp, #0]
                break;
    4f9c:	e009      	b.n	4fb2 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4f9e:	9b01      	ldr	r3, [sp, #4]
    4fa0:	3301      	adds	r3, #1
    4fa2:	9301      	str	r3, [sp, #4]
    4fa4:	4b17      	ldr	r3, [pc, #92]	; (5004 <getSpllConfig+0xa8>)
    4fa6:	681b      	ldr	r3, [r3, #0]
    4fa8:	7a9b      	ldrb	r3, [r3, #10]
    4faa:	461a      	mov	r2, r3
    4fac:	9b01      	ldr	r3, [sp, #4]
    4fae:	4293      	cmp	r3, r2
    4fb0:	d3de      	bcc.n	4f70 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4fb2:	9b00      	ldr	r3, [sp, #0]
    4fb4:	2b00      	cmp	r3, #0
    4fb6:	d121      	bne.n	4ffc <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4fb8:	4b13      	ldr	r3, [pc, #76]	; (5008 <getSpllConfig+0xac>)
    4fba:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4fbc:	4b12      	ldr	r3, [pc, #72]	; (5008 <getSpllConfig+0xac>)
    4fbe:	2209      	movs	r2, #9
    4fc0:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4fc2:	4b12      	ldr	r3, [pc, #72]	; (500c <getSpllConfig+0xb0>)
    4fc4:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4fc8:	b29b      	uxth	r3, r3
    4fca:	f003 0301 	and.w	r3, r3, #1
    4fce:	b29a      	uxth	r2, r3
    4fd0:	4b0d      	ldr	r3, [pc, #52]	; (5008 <getSpllConfig+0xac>)
    4fd2:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4fd4:	4b0d      	ldr	r3, [pc, #52]	; (500c <getSpllConfig+0xb0>)
    4fd6:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4fda:	0a1b      	lsrs	r3, r3, #8
    4fdc:	b2db      	uxtb	r3, r3
    4fde:	f003 0307 	and.w	r3, r3, #7
    4fe2:	b2da      	uxtb	r2, r3
    4fe4:	4b08      	ldr	r3, [pc, #32]	; (5008 <getSpllConfig+0xac>)
    4fe6:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4fe8:	4b08      	ldr	r3, [pc, #32]	; (500c <getSpllConfig+0xb0>)
    4fea:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4fee:	0c1b      	lsrs	r3, r3, #16
    4ff0:	b2db      	uxtb	r3, r3
    4ff2:	f003 031f 	and.w	r3, r3, #31
    4ff6:	b2da      	uxtb	r2, r3
    4ff8:	4b03      	ldr	r3, [pc, #12]	; (5008 <getSpllConfig+0xac>)
    4ffa:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4ffc:	9b00      	ldr	r3, [sp, #0]
}
    4ffe:	4618      	mov	r0, r3
    5000:	b002      	add	sp, #8
    5002:	4770      	bx	lr
    5004:	1fff8b9c 	.word	0x1fff8b9c
    5008:	1fff8c28 	.word	0x1fff8c28
    500c:	40064000 	.word	0x40064000

00005010 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    5010:	b086      	sub	sp, #24
    5012:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    5014:	2300      	movs	r3, #0
    5016:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    5018:	9b01      	ldr	r3, [sp, #4]
    501a:	2b1b      	cmp	r3, #27
    501c:	d00f      	beq.n	503e <getSelectorConfig+0x2e>
    501e:	9b01      	ldr	r3, [sp, #4]
    5020:	2b1b      	cmp	r3, #27
    5022:	d80f      	bhi.n	5044 <getSelectorConfig+0x34>
    5024:	9b01      	ldr	r3, [sp, #4]
    5026:	2b19      	cmp	r3, #25
    5028:	d003      	beq.n	5032 <getSelectorConfig+0x22>
    502a:	9b01      	ldr	r3, [sp, #4]
    502c:	2b1a      	cmp	r3, #26
    502e:	d003      	beq.n	5038 <getSelectorConfig+0x28>
    5030:	e008      	b.n	5044 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    5032:	2300      	movs	r3, #0
    5034:	9304      	str	r3, [sp, #16]
            break;
    5036:	e008      	b.n	504a <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    5038:	2301      	movs	r3, #1
    503a:	9304      	str	r3, [sp, #16]
            break;
    503c:	e005      	b.n	504a <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    503e:	2302      	movs	r3, #2
    5040:	9304      	str	r3, [sp, #16]
            break;
    5042:	e002      	b.n	504a <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    5044:	2300      	movs	r3, #0
    5046:	9304      	str	r3, [sp, #16]
            break;
    5048:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    504a:	4b36      	ldr	r3, [pc, #216]	; (5124 <getSelectorConfig+0x114>)
    504c:	681b      	ldr	r3, [r3, #0]
    504e:	2b00      	cmp	r3, #0
    5050:	d01d      	beq.n	508e <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    5052:	2300      	movs	r3, #0
    5054:	9303      	str	r3, [sp, #12]
    5056:	e013      	b.n	5080 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    5058:	4b32      	ldr	r3, [pc, #200]	; (5124 <getSelectorConfig+0x114>)
    505a:	681b      	ldr	r3, [r3, #0]
    505c:	9a03      	ldr	r2, [sp, #12]
    505e:	320d      	adds	r2, #13
    5060:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    5064:	9a01      	ldr	r2, [sp, #4]
    5066:	429a      	cmp	r2, r3
    5068:	d107      	bne.n	507a <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    506a:	4b2e      	ldr	r3, [pc, #184]	; (5124 <getSelectorConfig+0x114>)
    506c:	681a      	ldr	r2, [r3, #0]
    506e:	9b03      	ldr	r3, [sp, #12]
    5070:	330d      	adds	r3, #13
    5072:	00db      	lsls	r3, r3, #3
    5074:	4413      	add	r3, r2
    5076:	9305      	str	r3, [sp, #20]
                break;
    5078:	e009      	b.n	508e <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    507a:	9b03      	ldr	r3, [sp, #12]
    507c:	3301      	adds	r3, #1
    507e:	9303      	str	r3, [sp, #12]
    5080:	4b28      	ldr	r3, [pc, #160]	; (5124 <getSelectorConfig+0x114>)
    5082:	681b      	ldr	r3, [r3, #0]
    5084:	7adb      	ldrb	r3, [r3, #11]
    5086:	461a      	mov	r2, r3
    5088:	9b03      	ldr	r3, [sp, #12]
    508a:	4293      	cmp	r3, r2
    508c:	d3e4      	bcc.n	5058 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    508e:	9b05      	ldr	r3, [sp, #20]
    5090:	2b00      	cmp	r3, #0
    5092:	d140      	bne.n	5116 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    5094:	9b04      	ldr	r3, [sp, #16]
    5096:	00db      	lsls	r3, r3, #3
    5098:	4a23      	ldr	r2, [pc, #140]	; (5128 <getSelectorConfig+0x118>)
    509a:	4413      	add	r3, r2
    509c:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    509e:	4922      	ldr	r1, [pc, #136]	; (5128 <getSelectorConfig+0x118>)
    50a0:	9b04      	ldr	r3, [sp, #16]
    50a2:	9a01      	ldr	r2, [sp, #4]
    50a4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    50a8:	9b01      	ldr	r3, [sp, #4]
    50aa:	2b1b      	cmp	r3, #27
    50ac:	d025      	beq.n	50fa <getSelectorConfig+0xea>
    50ae:	9b01      	ldr	r3, [sp, #4]
    50b0:	2b1b      	cmp	r3, #27
    50b2:	d832      	bhi.n	511a <getSelectorConfig+0x10a>
    50b4:	9b01      	ldr	r3, [sp, #4]
    50b6:	2b19      	cmp	r3, #25
    50b8:	d003      	beq.n	50c2 <getSelectorConfig+0xb2>
    50ba:	9b01      	ldr	r3, [sp, #4]
    50bc:	2b1a      	cmp	r3, #26
    50be:	d00e      	beq.n	50de <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    50c0:	e02b      	b.n	511a <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    50c2:	4b1a      	ldr	r3, [pc, #104]	; (512c <getSelectorConfig+0x11c>)
    50c4:	695b      	ldr	r3, [r3, #20]
    50c6:	0e1b      	lsrs	r3, r3, #24
    50c8:	f003 030f 	and.w	r3, r3, #15
    50cc:	4a18      	ldr	r2, [pc, #96]	; (5130 <getSelectorConfig+0x120>)
    50ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    50d2:	4915      	ldr	r1, [pc, #84]	; (5128 <getSelectorConfig+0x118>)
    50d4:	9b04      	ldr	r3, [sp, #16]
    50d6:	00db      	lsls	r3, r3, #3
    50d8:	440b      	add	r3, r1
    50da:	605a      	str	r2, [r3, #4]
                break;
    50dc:	e01e      	b.n	511c <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    50de:	4b13      	ldr	r3, [pc, #76]	; (512c <getSelectorConfig+0x11c>)
    50e0:	699b      	ldr	r3, [r3, #24]
    50e2:	0e1b      	lsrs	r3, r3, #24
    50e4:	f003 030f 	and.w	r3, r3, #15
    50e8:	4a11      	ldr	r2, [pc, #68]	; (5130 <getSelectorConfig+0x120>)
    50ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    50ee:	490e      	ldr	r1, [pc, #56]	; (5128 <getSelectorConfig+0x118>)
    50f0:	9b04      	ldr	r3, [sp, #16]
    50f2:	00db      	lsls	r3, r3, #3
    50f4:	440b      	add	r3, r1
    50f6:	605a      	str	r2, [r3, #4]
                break;
    50f8:	e010      	b.n	511c <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    50fa:	4b0c      	ldr	r3, [pc, #48]	; (512c <getSelectorConfig+0x11c>)
    50fc:	69db      	ldr	r3, [r3, #28]
    50fe:	0e1b      	lsrs	r3, r3, #24
    5100:	f003 030f 	and.w	r3, r3, #15
    5104:	4a0a      	ldr	r2, [pc, #40]	; (5130 <getSelectorConfig+0x120>)
    5106:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    510a:	4907      	ldr	r1, [pc, #28]	; (5128 <getSelectorConfig+0x118>)
    510c:	9b04      	ldr	r3, [sp, #16]
    510e:	00db      	lsls	r3, r3, #3
    5110:	440b      	add	r3, r1
    5112:	605a      	str	r2, [r3, #4]
                break;
    5114:	e002      	b.n	511c <getSelectorConfig+0x10c>
        }
    }
    5116:	bf00      	nop
    5118:	e000      	b.n	511c <getSelectorConfig+0x10c>
                break;
    511a:	bf00      	nop

    return ReturnValue;
    511c:	9b05      	ldr	r3, [sp, #20]
}
    511e:	4618      	mov	r0, r3
    5120:	b006      	add	sp, #24
    5122:	4770      	bx	lr
    5124:	1fff8b9c 	.word	0x1fff8b9c
    5128:	1fff8c50 	.word	0x1fff8c50
    512c:	40064000 	.word	0x40064000
    5130:	00018554 	.word	0x00018554

00005134 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    5134:	b086      	sub	sp, #24
    5136:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5138:	2300      	movs	r3, #0
    513a:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    513c:	2300      	movs	r3, #0
    513e:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5140:	9b01      	ldr	r3, [sp, #4]
    5142:	2b1f      	cmp	r3, #31
    5144:	d00f      	beq.n	5166 <getCoreDividerConfig+0x32>
    5146:	9b01      	ldr	r3, [sp, #4]
    5148:	2b1f      	cmp	r3, #31
    514a:	d80f      	bhi.n	516c <getCoreDividerConfig+0x38>
    514c:	9b01      	ldr	r3, [sp, #4]
    514e:	2b1d      	cmp	r3, #29
    5150:	d003      	beq.n	515a <getCoreDividerConfig+0x26>
    5152:	9b01      	ldr	r3, [sp, #4]
    5154:	2b1e      	cmp	r3, #30
    5156:	d003      	beq.n	5160 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5158:	e008      	b.n	516c <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    515a:	2300      	movs	r3, #0
    515c:	9304      	str	r3, [sp, #16]
            break;
    515e:	e006      	b.n	516e <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5160:	2301      	movs	r3, #1
    5162:	9304      	str	r3, [sp, #16]
            break;
    5164:	e003      	b.n	516e <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5166:	2302      	movs	r3, #2
    5168:	9304      	str	r3, [sp, #16]
            break;
    516a:	e000      	b.n	516e <getCoreDividerConfig+0x3a>
                break;
    516c:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    516e:	4b41      	ldr	r3, [pc, #260]	; (5274 <getCoreDividerConfig+0x140>)
    5170:	681b      	ldr	r3, [r3, #0]
    5172:	2b00      	cmp	r3, #0
    5174:	d026      	beq.n	51c4 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5176:	2300      	movs	r3, #0
    5178:	9303      	str	r3, [sp, #12]
    517a:	e01c      	b.n	51b6 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    517c:	4b3d      	ldr	r3, [pc, #244]	; (5274 <getCoreDividerConfig+0x140>)
    517e:	6819      	ldr	r1, [r3, #0]
    5180:	9a03      	ldr	r2, [sp, #12]
    5182:	4613      	mov	r3, r2
    5184:	005b      	lsls	r3, r3, #1
    5186:	4413      	add	r3, r2
    5188:	009b      	lsls	r3, r3, #2
    518a:	440b      	add	r3, r1
    518c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5190:	681b      	ldr	r3, [r3, #0]
    5192:	9a01      	ldr	r2, [sp, #4]
    5194:	429a      	cmp	r2, r3
    5196:	d10b      	bne.n	51b0 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5198:	4b36      	ldr	r3, [pc, #216]	; (5274 <getCoreDividerConfig+0x140>)
    519a:	6819      	ldr	r1, [r3, #0]
    519c:	9a03      	ldr	r2, [sp, #12]
    519e:	4613      	mov	r3, r2
    51a0:	005b      	lsls	r3, r3, #1
    51a2:	4413      	add	r3, r2
    51a4:	009b      	lsls	r3, r3, #2
    51a6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    51aa:	440b      	add	r3, r1
    51ac:	9305      	str	r3, [sp, #20]
                break;
    51ae:	e009      	b.n	51c4 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    51b0:	9b03      	ldr	r3, [sp, #12]
    51b2:	3301      	adds	r3, #1
    51b4:	9303      	str	r3, [sp, #12]
    51b6:	4b2f      	ldr	r3, [pc, #188]	; (5274 <getCoreDividerConfig+0x140>)
    51b8:	681b      	ldr	r3, [r3, #0]
    51ba:	7b1b      	ldrb	r3, [r3, #12]
    51bc:	461a      	mov	r2, r3
    51be:	9b03      	ldr	r3, [sp, #12]
    51c0:	4293      	cmp	r3, r2
    51c2:	d3db      	bcc.n	517c <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    51c4:	9b05      	ldr	r3, [sp, #20]
    51c6:	2b00      	cmp	r3, #0
    51c8:	d14d      	bne.n	5266 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    51ca:	9a04      	ldr	r2, [sp, #16]
    51cc:	4613      	mov	r3, r2
    51ce:	005b      	lsls	r3, r3, #1
    51d0:	4413      	add	r3, r2
    51d2:	009b      	lsls	r3, r3, #2
    51d4:	4a28      	ldr	r2, [pc, #160]	; (5278 <getCoreDividerConfig+0x144>)
    51d6:	4413      	add	r3, r2
    51d8:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    51da:	4927      	ldr	r1, [pc, #156]	; (5278 <getCoreDividerConfig+0x144>)
    51dc:	9a04      	ldr	r2, [sp, #16]
    51de:	4613      	mov	r3, r2
    51e0:	005b      	lsls	r3, r3, #1
    51e2:	4413      	add	r3, r2
    51e4:	009b      	lsls	r3, r3, #2
    51e6:	440b      	add	r3, r1
    51e8:	9a01      	ldr	r2, [sp, #4]
    51ea:	601a      	str	r2, [r3, #0]
        switch(Name)
    51ec:	9b01      	ldr	r3, [sp, #4]
    51ee:	2b1f      	cmp	r3, #31
    51f0:	d029      	beq.n	5246 <getCoreDividerConfig+0x112>
    51f2:	9b01      	ldr	r3, [sp, #4]
    51f4:	2b1f      	cmp	r3, #31
    51f6:	d838      	bhi.n	526a <getCoreDividerConfig+0x136>
    51f8:	9b01      	ldr	r3, [sp, #4]
    51fa:	2b1d      	cmp	r3, #29
    51fc:	d003      	beq.n	5206 <getCoreDividerConfig+0xd2>
    51fe:	9b01      	ldr	r3, [sp, #4]
    5200:	2b1e      	cmp	r3, #30
    5202:	d010      	beq.n	5226 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5204:	e031      	b.n	526a <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    5206:	4b1d      	ldr	r3, [pc, #116]	; (527c <getCoreDividerConfig+0x148>)
    5208:	695b      	ldr	r3, [r3, #20]
    520a:	0c1b      	lsrs	r3, r3, #16
    520c:	f003 030f 	and.w	r3, r3, #15
    5210:	1c59      	adds	r1, r3, #1
    5212:	4819      	ldr	r0, [pc, #100]	; (5278 <getCoreDividerConfig+0x144>)
    5214:	9a04      	ldr	r2, [sp, #16]
    5216:	4613      	mov	r3, r2
    5218:	005b      	lsls	r3, r3, #1
    521a:	4413      	add	r3, r2
    521c:	009b      	lsls	r3, r3, #2
    521e:	4403      	add	r3, r0
    5220:	3304      	adds	r3, #4
    5222:	6019      	str	r1, [r3, #0]
                break;
    5224:	e022      	b.n	526c <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    5226:	4b15      	ldr	r3, [pc, #84]	; (527c <getCoreDividerConfig+0x148>)
    5228:	699b      	ldr	r3, [r3, #24]
    522a:	0c1b      	lsrs	r3, r3, #16
    522c:	f003 030f 	and.w	r3, r3, #15
    5230:	1c59      	adds	r1, r3, #1
    5232:	4811      	ldr	r0, [pc, #68]	; (5278 <getCoreDividerConfig+0x144>)
    5234:	9a04      	ldr	r2, [sp, #16]
    5236:	4613      	mov	r3, r2
    5238:	005b      	lsls	r3, r3, #1
    523a:	4413      	add	r3, r2
    523c:	009b      	lsls	r3, r3, #2
    523e:	4403      	add	r3, r0
    5240:	3304      	adds	r3, #4
    5242:	6019      	str	r1, [r3, #0]
                break;
    5244:	e012      	b.n	526c <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    5246:	4b0d      	ldr	r3, [pc, #52]	; (527c <getCoreDividerConfig+0x148>)
    5248:	69db      	ldr	r3, [r3, #28]
    524a:	0c1b      	lsrs	r3, r3, #16
    524c:	f003 030f 	and.w	r3, r3, #15
    5250:	1c59      	adds	r1, r3, #1
    5252:	4809      	ldr	r0, [pc, #36]	; (5278 <getCoreDividerConfig+0x144>)
    5254:	9a04      	ldr	r2, [sp, #16]
    5256:	4613      	mov	r3, r2
    5258:	005b      	lsls	r3, r3, #1
    525a:	4413      	add	r3, r2
    525c:	009b      	lsls	r3, r3, #2
    525e:	4403      	add	r3, r0
    5260:	3304      	adds	r3, #4
    5262:	6019      	str	r1, [r3, #0]
                break;
    5264:	e002      	b.n	526c <getCoreDividerConfig+0x138>
        }
    }
    5266:	bf00      	nop
    5268:	e000      	b.n	526c <getCoreDividerConfig+0x138>
                break;
    526a:	bf00      	nop

    return ReturnValue;
    526c:	9b05      	ldr	r3, [sp, #20]
}
    526e:	4618      	mov	r0, r3
    5270:	b006      	add	sp, #24
    5272:	4770      	bx	lr
    5274:	1fff8b9c 	.word	0x1fff8b9c
    5278:	1fff8c68 	.word	0x1fff8c68
    527c:	40064000 	.word	0x40064000

00005280 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    5280:	b086      	sub	sp, #24
    5282:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5284:	2300      	movs	r3, #0
    5286:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5288:	2300      	movs	r3, #0
    528a:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    528c:	9b01      	ldr	r3, [sp, #4]
    528e:	2b23      	cmp	r3, #35	; 0x23
    5290:	d00f      	beq.n	52b2 <getBusDividerConfig+0x32>
    5292:	9b01      	ldr	r3, [sp, #4]
    5294:	2b23      	cmp	r3, #35	; 0x23
    5296:	d80f      	bhi.n	52b8 <getBusDividerConfig+0x38>
    5298:	9b01      	ldr	r3, [sp, #4]
    529a:	2b21      	cmp	r3, #33	; 0x21
    529c:	d003      	beq.n	52a6 <getBusDividerConfig+0x26>
    529e:	9b01      	ldr	r3, [sp, #4]
    52a0:	2b22      	cmp	r3, #34	; 0x22
    52a2:	d003      	beq.n	52ac <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    52a4:	e008      	b.n	52b8 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    52a6:	2300      	movs	r3, #0
    52a8:	9304      	str	r3, [sp, #16]
            break;
    52aa:	e006      	b.n	52ba <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    52ac:	2301      	movs	r3, #1
    52ae:	9304      	str	r3, [sp, #16]
            break;
    52b0:	e003      	b.n	52ba <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    52b2:	2302      	movs	r3, #2
    52b4:	9304      	str	r3, [sp, #16]
            break;
    52b6:	e000      	b.n	52ba <getBusDividerConfig+0x3a>
                break;
    52b8:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    52ba:	4b41      	ldr	r3, [pc, #260]	; (53c0 <getBusDividerConfig+0x140>)
    52bc:	681b      	ldr	r3, [r3, #0]
    52be:	2b00      	cmp	r3, #0
    52c0:	d026      	beq.n	5310 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    52c2:	2300      	movs	r3, #0
    52c4:	9303      	str	r3, [sp, #12]
    52c6:	e01c      	b.n	5302 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    52c8:	4b3d      	ldr	r3, [pc, #244]	; (53c0 <getBusDividerConfig+0x140>)
    52ca:	6819      	ldr	r1, [r3, #0]
    52cc:	9a03      	ldr	r2, [sp, #12]
    52ce:	4613      	mov	r3, r2
    52d0:	005b      	lsls	r3, r3, #1
    52d2:	4413      	add	r3, r2
    52d4:	009b      	lsls	r3, r3, #2
    52d6:	440b      	add	r3, r1
    52d8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    52dc:	681b      	ldr	r3, [r3, #0]
    52de:	9a01      	ldr	r2, [sp, #4]
    52e0:	429a      	cmp	r2, r3
    52e2:	d10b      	bne.n	52fc <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    52e4:	4b36      	ldr	r3, [pc, #216]	; (53c0 <getBusDividerConfig+0x140>)
    52e6:	6819      	ldr	r1, [r3, #0]
    52e8:	9a03      	ldr	r2, [sp, #12]
    52ea:	4613      	mov	r3, r2
    52ec:	005b      	lsls	r3, r3, #1
    52ee:	4413      	add	r3, r2
    52f0:	009b      	lsls	r3, r3, #2
    52f2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    52f6:	440b      	add	r3, r1
    52f8:	9305      	str	r3, [sp, #20]
                break;
    52fa:	e009      	b.n	5310 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    52fc:	9b03      	ldr	r3, [sp, #12]
    52fe:	3301      	adds	r3, #1
    5300:	9303      	str	r3, [sp, #12]
    5302:	4b2f      	ldr	r3, [pc, #188]	; (53c0 <getBusDividerConfig+0x140>)
    5304:	681b      	ldr	r3, [r3, #0]
    5306:	7b1b      	ldrb	r3, [r3, #12]
    5308:	461a      	mov	r2, r3
    530a:	9b03      	ldr	r3, [sp, #12]
    530c:	4293      	cmp	r3, r2
    530e:	d3db      	bcc.n	52c8 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5310:	9b05      	ldr	r3, [sp, #20]
    5312:	2b00      	cmp	r3, #0
    5314:	d14d      	bne.n	53b2 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    5316:	9a04      	ldr	r2, [sp, #16]
    5318:	4613      	mov	r3, r2
    531a:	005b      	lsls	r3, r3, #1
    531c:	4413      	add	r3, r2
    531e:	009b      	lsls	r3, r3, #2
    5320:	4a28      	ldr	r2, [pc, #160]	; (53c4 <getBusDividerConfig+0x144>)
    5322:	4413      	add	r3, r2
    5324:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    5326:	4927      	ldr	r1, [pc, #156]	; (53c4 <getBusDividerConfig+0x144>)
    5328:	9a04      	ldr	r2, [sp, #16]
    532a:	4613      	mov	r3, r2
    532c:	005b      	lsls	r3, r3, #1
    532e:	4413      	add	r3, r2
    5330:	009b      	lsls	r3, r3, #2
    5332:	440b      	add	r3, r1
    5334:	9a01      	ldr	r2, [sp, #4]
    5336:	601a      	str	r2, [r3, #0]
        switch(Name)
    5338:	9b01      	ldr	r3, [sp, #4]
    533a:	2b23      	cmp	r3, #35	; 0x23
    533c:	d029      	beq.n	5392 <getBusDividerConfig+0x112>
    533e:	9b01      	ldr	r3, [sp, #4]
    5340:	2b23      	cmp	r3, #35	; 0x23
    5342:	d838      	bhi.n	53b6 <getBusDividerConfig+0x136>
    5344:	9b01      	ldr	r3, [sp, #4]
    5346:	2b21      	cmp	r3, #33	; 0x21
    5348:	d003      	beq.n	5352 <getBusDividerConfig+0xd2>
    534a:	9b01      	ldr	r3, [sp, #4]
    534c:	2b22      	cmp	r3, #34	; 0x22
    534e:	d010      	beq.n	5372 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5350:	e031      	b.n	53b6 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    5352:	4b1d      	ldr	r3, [pc, #116]	; (53c8 <getBusDividerConfig+0x148>)
    5354:	695b      	ldr	r3, [r3, #20]
    5356:	091b      	lsrs	r3, r3, #4
    5358:	f003 030f 	and.w	r3, r3, #15
    535c:	1c59      	adds	r1, r3, #1
    535e:	4819      	ldr	r0, [pc, #100]	; (53c4 <getBusDividerConfig+0x144>)
    5360:	9a04      	ldr	r2, [sp, #16]
    5362:	4613      	mov	r3, r2
    5364:	005b      	lsls	r3, r3, #1
    5366:	4413      	add	r3, r2
    5368:	009b      	lsls	r3, r3, #2
    536a:	4403      	add	r3, r0
    536c:	3304      	adds	r3, #4
    536e:	6019      	str	r1, [r3, #0]
                break;
    5370:	e022      	b.n	53b8 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    5372:	4b15      	ldr	r3, [pc, #84]	; (53c8 <getBusDividerConfig+0x148>)
    5374:	699b      	ldr	r3, [r3, #24]
    5376:	091b      	lsrs	r3, r3, #4
    5378:	f003 030f 	and.w	r3, r3, #15
    537c:	1c59      	adds	r1, r3, #1
    537e:	4811      	ldr	r0, [pc, #68]	; (53c4 <getBusDividerConfig+0x144>)
    5380:	9a04      	ldr	r2, [sp, #16]
    5382:	4613      	mov	r3, r2
    5384:	005b      	lsls	r3, r3, #1
    5386:	4413      	add	r3, r2
    5388:	009b      	lsls	r3, r3, #2
    538a:	4403      	add	r3, r0
    538c:	3304      	adds	r3, #4
    538e:	6019      	str	r1, [r3, #0]
                break;
    5390:	e012      	b.n	53b8 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    5392:	4b0d      	ldr	r3, [pc, #52]	; (53c8 <getBusDividerConfig+0x148>)
    5394:	69db      	ldr	r3, [r3, #28]
    5396:	091b      	lsrs	r3, r3, #4
    5398:	f003 030f 	and.w	r3, r3, #15
    539c:	1c59      	adds	r1, r3, #1
    539e:	4809      	ldr	r0, [pc, #36]	; (53c4 <getBusDividerConfig+0x144>)
    53a0:	9a04      	ldr	r2, [sp, #16]
    53a2:	4613      	mov	r3, r2
    53a4:	005b      	lsls	r3, r3, #1
    53a6:	4413      	add	r3, r2
    53a8:	009b      	lsls	r3, r3, #2
    53aa:	4403      	add	r3, r0
    53ac:	3304      	adds	r3, #4
    53ae:	6019      	str	r1, [r3, #0]
                break;
    53b0:	e002      	b.n	53b8 <getBusDividerConfig+0x138>
        }
    }
    53b2:	bf00      	nop
    53b4:	e000      	b.n	53b8 <getBusDividerConfig+0x138>
                break;
    53b6:	bf00      	nop

    return ReturnValue;
    53b8:	9b05      	ldr	r3, [sp, #20]
}
    53ba:	4618      	mov	r0, r3
    53bc:	b006      	add	sp, #24
    53be:	4770      	bx	lr
    53c0:	1fff8b9c 	.word	0x1fff8b9c
    53c4:	1fff8c8c 	.word	0x1fff8c8c
    53c8:	40064000 	.word	0x40064000

000053cc <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    53cc:	b086      	sub	sp, #24
    53ce:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    53d0:	2300      	movs	r3, #0
    53d2:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    53d4:	2300      	movs	r3, #0
    53d6:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    53d8:	9b01      	ldr	r3, [sp, #4]
    53da:	2b27      	cmp	r3, #39	; 0x27
    53dc:	d00f      	beq.n	53fe <getSlowDividerConfig+0x32>
    53de:	9b01      	ldr	r3, [sp, #4]
    53e0:	2b27      	cmp	r3, #39	; 0x27
    53e2:	d80f      	bhi.n	5404 <getSlowDividerConfig+0x38>
    53e4:	9b01      	ldr	r3, [sp, #4]
    53e6:	2b25      	cmp	r3, #37	; 0x25
    53e8:	d003      	beq.n	53f2 <getSlowDividerConfig+0x26>
    53ea:	9b01      	ldr	r3, [sp, #4]
    53ec:	2b26      	cmp	r3, #38	; 0x26
    53ee:	d003      	beq.n	53f8 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    53f0:	e008      	b.n	5404 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    53f2:	2300      	movs	r3, #0
    53f4:	9304      	str	r3, [sp, #16]
            break;
    53f6:	e006      	b.n	5406 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    53f8:	2301      	movs	r3, #1
    53fa:	9304      	str	r3, [sp, #16]
            break;
    53fc:	e003      	b.n	5406 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    53fe:	2302      	movs	r3, #2
    5400:	9304      	str	r3, [sp, #16]
            break;
    5402:	e000      	b.n	5406 <getSlowDividerConfig+0x3a>
                break;
    5404:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5406:	4b40      	ldr	r3, [pc, #256]	; (5508 <getSlowDividerConfig+0x13c>)
    5408:	681b      	ldr	r3, [r3, #0]
    540a:	2b00      	cmp	r3, #0
    540c:	d026      	beq.n	545c <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    540e:	2300      	movs	r3, #0
    5410:	9303      	str	r3, [sp, #12]
    5412:	e01c      	b.n	544e <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5414:	4b3c      	ldr	r3, [pc, #240]	; (5508 <getSlowDividerConfig+0x13c>)
    5416:	6819      	ldr	r1, [r3, #0]
    5418:	9a03      	ldr	r2, [sp, #12]
    541a:	4613      	mov	r3, r2
    541c:	005b      	lsls	r3, r3, #1
    541e:	4413      	add	r3, r2
    5420:	009b      	lsls	r3, r3, #2
    5422:	440b      	add	r3, r1
    5424:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5428:	681b      	ldr	r3, [r3, #0]
    542a:	9a01      	ldr	r2, [sp, #4]
    542c:	429a      	cmp	r2, r3
    542e:	d10b      	bne.n	5448 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5430:	4b35      	ldr	r3, [pc, #212]	; (5508 <getSlowDividerConfig+0x13c>)
    5432:	6819      	ldr	r1, [r3, #0]
    5434:	9a03      	ldr	r2, [sp, #12]
    5436:	4613      	mov	r3, r2
    5438:	005b      	lsls	r3, r3, #1
    543a:	4413      	add	r3, r2
    543c:	009b      	lsls	r3, r3, #2
    543e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5442:	440b      	add	r3, r1
    5444:	9305      	str	r3, [sp, #20]
                break;
    5446:	e009      	b.n	545c <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5448:	9b03      	ldr	r3, [sp, #12]
    544a:	3301      	adds	r3, #1
    544c:	9303      	str	r3, [sp, #12]
    544e:	4b2e      	ldr	r3, [pc, #184]	; (5508 <getSlowDividerConfig+0x13c>)
    5450:	681b      	ldr	r3, [r3, #0]
    5452:	7b1b      	ldrb	r3, [r3, #12]
    5454:	461a      	mov	r2, r3
    5456:	9b03      	ldr	r3, [sp, #12]
    5458:	4293      	cmp	r3, r2
    545a:	d3db      	bcc.n	5414 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    545c:	9b05      	ldr	r3, [sp, #20]
    545e:	2b00      	cmp	r3, #0
    5460:	d14a      	bne.n	54f8 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    5462:	9a04      	ldr	r2, [sp, #16]
    5464:	4613      	mov	r3, r2
    5466:	005b      	lsls	r3, r3, #1
    5468:	4413      	add	r3, r2
    546a:	009b      	lsls	r3, r3, #2
    546c:	4a27      	ldr	r2, [pc, #156]	; (550c <getSlowDividerConfig+0x140>)
    546e:	4413      	add	r3, r2
    5470:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    5472:	4926      	ldr	r1, [pc, #152]	; (550c <getSlowDividerConfig+0x140>)
    5474:	9a04      	ldr	r2, [sp, #16]
    5476:	4613      	mov	r3, r2
    5478:	005b      	lsls	r3, r3, #1
    547a:	4413      	add	r3, r2
    547c:	009b      	lsls	r3, r3, #2
    547e:	440b      	add	r3, r1
    5480:	9a01      	ldr	r2, [sp, #4]
    5482:	601a      	str	r2, [r3, #0]
        switch(Name)
    5484:	9b01      	ldr	r3, [sp, #4]
    5486:	2b27      	cmp	r3, #39	; 0x27
    5488:	d027      	beq.n	54da <getSlowDividerConfig+0x10e>
    548a:	9b01      	ldr	r3, [sp, #4]
    548c:	2b27      	cmp	r3, #39	; 0x27
    548e:	d835      	bhi.n	54fc <getSlowDividerConfig+0x130>
    5490:	9b01      	ldr	r3, [sp, #4]
    5492:	2b25      	cmp	r3, #37	; 0x25
    5494:	d003      	beq.n	549e <getSlowDividerConfig+0xd2>
    5496:	9b01      	ldr	r3, [sp, #4]
    5498:	2b26      	cmp	r3, #38	; 0x26
    549a:	d00f      	beq.n	54bc <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    549c:	e02e      	b.n	54fc <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    549e:	4b1c      	ldr	r3, [pc, #112]	; (5510 <getSlowDividerConfig+0x144>)
    54a0:	695b      	ldr	r3, [r3, #20]
    54a2:	f003 030f 	and.w	r3, r3, #15
    54a6:	1c59      	adds	r1, r3, #1
    54a8:	4818      	ldr	r0, [pc, #96]	; (550c <getSlowDividerConfig+0x140>)
    54aa:	9a04      	ldr	r2, [sp, #16]
    54ac:	4613      	mov	r3, r2
    54ae:	005b      	lsls	r3, r3, #1
    54b0:	4413      	add	r3, r2
    54b2:	009b      	lsls	r3, r3, #2
    54b4:	4403      	add	r3, r0
    54b6:	3304      	adds	r3, #4
    54b8:	6019      	str	r1, [r3, #0]
                break;
    54ba:	e020      	b.n	54fe <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    54bc:	4b14      	ldr	r3, [pc, #80]	; (5510 <getSlowDividerConfig+0x144>)
    54be:	699b      	ldr	r3, [r3, #24]
    54c0:	f003 030f 	and.w	r3, r3, #15
    54c4:	1c59      	adds	r1, r3, #1
    54c6:	4811      	ldr	r0, [pc, #68]	; (550c <getSlowDividerConfig+0x140>)
    54c8:	9a04      	ldr	r2, [sp, #16]
    54ca:	4613      	mov	r3, r2
    54cc:	005b      	lsls	r3, r3, #1
    54ce:	4413      	add	r3, r2
    54d0:	009b      	lsls	r3, r3, #2
    54d2:	4403      	add	r3, r0
    54d4:	3304      	adds	r3, #4
    54d6:	6019      	str	r1, [r3, #0]
                break;
    54d8:	e011      	b.n	54fe <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    54da:	4b0d      	ldr	r3, [pc, #52]	; (5510 <getSlowDividerConfig+0x144>)
    54dc:	69db      	ldr	r3, [r3, #28]
    54de:	f003 030f 	and.w	r3, r3, #15
    54e2:	1c59      	adds	r1, r3, #1
    54e4:	4809      	ldr	r0, [pc, #36]	; (550c <getSlowDividerConfig+0x140>)
    54e6:	9a04      	ldr	r2, [sp, #16]
    54e8:	4613      	mov	r3, r2
    54ea:	005b      	lsls	r3, r3, #1
    54ec:	4413      	add	r3, r2
    54ee:	009b      	lsls	r3, r3, #2
    54f0:	4403      	add	r3, r0
    54f2:	3304      	adds	r3, #4
    54f4:	6019      	str	r1, [r3, #0]
                break;
    54f6:	e002      	b.n	54fe <getSlowDividerConfig+0x132>
        }
    }
    54f8:	bf00      	nop
    54fa:	e000      	b.n	54fe <getSlowDividerConfig+0x132>
                break;
    54fc:	bf00      	nop

    return ReturnValue;
    54fe:	9b05      	ldr	r3, [sp, #20]
}
    5500:	4618      	mov	r0, r3
    5502:	b006      	add	sp, #24
    5504:	4770      	bx	lr
    5506:	bf00      	nop
    5508:	1fff8b9c 	.word	0x1fff8b9c
    550c:	1fff8cb0 	.word	0x1fff8cb0
    5510:	40064000 	.word	0x40064000

00005514 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    5514:	b500      	push	{lr}
    5516:	b083      	sub	sp, #12
    5518:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    551a:	4b64      	ldr	r3, [pc, #400]	; (56ac <Clock_Ip_ClockInitializeObjects+0x198>)
    551c:	781b      	ldrb	r3, [r3, #0]
    551e:	f083 0301 	eor.w	r3, r3, #1
    5522:	b2db      	uxtb	r3, r3
    5524:	2b00      	cmp	r3, #0
    5526:	d05b      	beq.n	55e0 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    5528:	4b60      	ldr	r3, [pc, #384]	; (56ac <Clock_Ip_ClockInitializeObjects+0x198>)
    552a:	2201      	movs	r2, #1
    552c:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    552e:	4b60      	ldr	r3, [pc, #384]	; (56b0 <Clock_Ip_ClockInitializeObjects+0x19c>)
    5530:	785b      	ldrb	r3, [r3, #1]
    5532:	461a      	mov	r2, r3
    5534:	4613      	mov	r3, r2
    5536:	009b      	lsls	r3, r3, #2
    5538:	4413      	add	r3, r2
    553a:	009b      	lsls	r3, r3, #2
    553c:	4a5d      	ldr	r2, [pc, #372]	; (56b4 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    553e:	4413      	add	r3, r2
    5540:	4a5d      	ldr	r2, [pc, #372]	; (56b8 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    5542:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    5544:	4b5d      	ldr	r3, [pc, #372]	; (56bc <Clock_Ip_ClockInitializeObjects+0x1a8>)
    5546:	785b      	ldrb	r3, [r3, #1]
    5548:	461a      	mov	r2, r3
    554a:	4613      	mov	r3, r2
    554c:	009b      	lsls	r3, r3, #2
    554e:	4413      	add	r3, r2
    5550:	009b      	lsls	r3, r3, #2
    5552:	4a5b      	ldr	r2, [pc, #364]	; (56c0 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    5554:	4413      	add	r3, r2
    5556:	4a5b      	ldr	r2, [pc, #364]	; (56c4 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    5558:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    555a:	4b5b      	ldr	r3, [pc, #364]	; (56c8 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    555c:	791b      	ldrb	r3, [r3, #4]
    555e:	461a      	mov	r2, r3
    5560:	4613      	mov	r3, r2
    5562:	005b      	lsls	r3, r3, #1
    5564:	4413      	add	r3, r2
    5566:	009b      	lsls	r3, r3, #2
    5568:	4a58      	ldr	r2, [pc, #352]	; (56cc <Clock_Ip_ClockInitializeObjects+0x1b8>)
    556a:	4413      	add	r3, r2
    556c:	4a58      	ldr	r2, [pc, #352]	; (56d0 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    556e:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    5570:	4b58      	ldr	r3, [pc, #352]	; (56d4 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5572:	795b      	ldrb	r3, [r3, #5]
    5574:	00db      	lsls	r3, r3, #3
    5576:	4a58      	ldr	r2, [pc, #352]	; (56d8 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5578:	4413      	add	r3, r2
    557a:	4a58      	ldr	r2, [pc, #352]	; (56dc <Clock_Ip_ClockInitializeObjects+0x1c8>)
    557c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    557e:	4b55      	ldr	r3, [pc, #340]	; (56d4 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5580:	79db      	ldrb	r3, [r3, #7]
    5582:	00db      	lsls	r3, r3, #3
    5584:	4a54      	ldr	r2, [pc, #336]	; (56d8 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5586:	4413      	add	r3, r2
    5588:	4a55      	ldr	r2, [pc, #340]	; (56e0 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    558a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    558c:	4b55      	ldr	r3, [pc, #340]	; (56e4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    558e:	799b      	ldrb	r3, [r3, #6]
    5590:	009b      	lsls	r3, r3, #2
    5592:	4a55      	ldr	r2, [pc, #340]	; (56e8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5594:	4413      	add	r3, r2
    5596:	4a55      	ldr	r2, [pc, #340]	; (56ec <Clock_Ip_ClockInitializeObjects+0x1d8>)
    5598:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    559a:	4b52      	ldr	r3, [pc, #328]	; (56e4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    559c:	7a1b      	ldrb	r3, [r3, #8]
    559e:	009b      	lsls	r3, r3, #2
    55a0:	4a51      	ldr	r2, [pc, #324]	; (56e8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    55a2:	4413      	add	r3, r2
    55a4:	4a52      	ldr	r2, [pc, #328]	; (56f0 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    55a6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    55a8:	4b4e      	ldr	r3, [pc, #312]	; (56e4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    55aa:	7a5b      	ldrb	r3, [r3, #9]
    55ac:	009b      	lsls	r3, r3, #2
    55ae:	4a4e      	ldr	r2, [pc, #312]	; (56e8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    55b0:	4413      	add	r3, r2
    55b2:	4a50      	ldr	r2, [pc, #320]	; (56f4 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    55b4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    55b6:	4b4b      	ldr	r3, [pc, #300]	; (56e4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    55b8:	7adb      	ldrb	r3, [r3, #11]
    55ba:	009b      	lsls	r3, r3, #2
    55bc:	4a4a      	ldr	r2, [pc, #296]	; (56e8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    55be:	4413      	add	r3, r2
    55c0:	4a4d      	ldr	r2, [pc, #308]	; (56f8 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    55c2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    55c4:	4b47      	ldr	r3, [pc, #284]	; (56e4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    55c6:	7b1b      	ldrb	r3, [r3, #12]
    55c8:	009b      	lsls	r3, r3, #2
    55ca:	4a47      	ldr	r2, [pc, #284]	; (56e8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    55cc:	4413      	add	r3, r2
    55ce:	4a4b      	ldr	r2, [pc, #300]	; (56fc <Clock_Ip_ClockInitializeObjects+0x1e8>)
    55d0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    55d2:	4b44      	ldr	r3, [pc, #272]	; (56e4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    55d4:	7b9b      	ldrb	r3, [r3, #14]
    55d6:	009b      	lsls	r3, r3, #2
    55d8:	4a43      	ldr	r2, [pc, #268]	; (56e8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    55da:	4413      	add	r3, r2
    55dc:	4a48      	ldr	r2, [pc, #288]	; (5700 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    55de:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    55e0:	4b48      	ldr	r3, [pc, #288]	; (5704 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    55e2:	781b      	ldrb	r3, [r3, #0]
    55e4:	2b00      	cmp	r3, #0
    55e6:	d002      	beq.n	55ee <Clock_Ip_ClockInitializeObjects+0xda>
    55e8:	9b01      	ldr	r3, [sp, #4]
    55ea:	2b00      	cmp	r3, #0
    55ec:	d003      	beq.n	55f6 <Clock_Ip_ClockInitializeObjects+0xe2>
    55ee:	4b46      	ldr	r3, [pc, #280]	; (5708 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    55f0:	781b      	ldrb	r3, [r3, #0]
    55f2:	2b00      	cmp	r3, #0
    55f4:	d056      	beq.n	56a4 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    55f6:	f7ff fc09 	bl	4e0c <getFircConfig>
    55fa:	4603      	mov	r3, r0
    55fc:	4a43      	ldr	r2, [pc, #268]	; (570c <Clock_Ip_ClockInitializeObjects+0x1f8>)
    55fe:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    5600:	f7ff fc60 	bl	4ec4 <getSoscConfig>
    5604:	4603      	mov	r3, r0
    5606:	4a42      	ldr	r2, [pc, #264]	; (5710 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    5608:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    560a:	f7ff fca7 	bl	4f5c <getSpllConfig>
    560e:	4603      	mov	r3, r0
    5610:	4a40      	ldr	r2, [pc, #256]	; (5714 <Clock_Ip_ClockInitializeObjects+0x200>)
    5612:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    5614:	2019      	movs	r0, #25
    5616:	f7ff fcfb 	bl	5010 <getSelectorConfig>
    561a:	4603      	mov	r3, r0
    561c:	4a3e      	ldr	r2, [pc, #248]	; (5718 <Clock_Ip_ClockInitializeObjects+0x204>)
    561e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    5620:	201a      	movs	r0, #26
    5622:	f7ff fcf5 	bl	5010 <getSelectorConfig>
    5626:	4603      	mov	r3, r0
    5628:	4a3c      	ldr	r2, [pc, #240]	; (571c <Clock_Ip_ClockInitializeObjects+0x208>)
    562a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    562c:	201b      	movs	r0, #27
    562e:	f7ff fcef 	bl	5010 <getSelectorConfig>
    5632:	4603      	mov	r3, r0
    5634:	4a3a      	ldr	r2, [pc, #232]	; (5720 <Clock_Ip_ClockInitializeObjects+0x20c>)
    5636:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    5638:	201d      	movs	r0, #29
    563a:	f7ff fd7b 	bl	5134 <getCoreDividerConfig>
    563e:	4603      	mov	r3, r0
    5640:	4a38      	ldr	r2, [pc, #224]	; (5724 <Clock_Ip_ClockInitializeObjects+0x210>)
    5642:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    5644:	201e      	movs	r0, #30
    5646:	f7ff fd75 	bl	5134 <getCoreDividerConfig>
    564a:	4603      	mov	r3, r0
    564c:	4a36      	ldr	r2, [pc, #216]	; (5728 <Clock_Ip_ClockInitializeObjects+0x214>)
    564e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    5650:	201f      	movs	r0, #31
    5652:	f7ff fd6f 	bl	5134 <getCoreDividerConfig>
    5656:	4603      	mov	r3, r0
    5658:	4a34      	ldr	r2, [pc, #208]	; (572c <Clock_Ip_ClockInitializeObjects+0x218>)
    565a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    565c:	2021      	movs	r0, #33	; 0x21
    565e:	f7ff fe0f 	bl	5280 <getBusDividerConfig>
    5662:	4603      	mov	r3, r0
    5664:	4a32      	ldr	r2, [pc, #200]	; (5730 <Clock_Ip_ClockInitializeObjects+0x21c>)
    5666:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    5668:	2022      	movs	r0, #34	; 0x22
    566a:	f7ff fe09 	bl	5280 <getBusDividerConfig>
    566e:	4603      	mov	r3, r0
    5670:	4a30      	ldr	r2, [pc, #192]	; (5734 <Clock_Ip_ClockInitializeObjects+0x220>)
    5672:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    5674:	2023      	movs	r0, #35	; 0x23
    5676:	f7ff fe03 	bl	5280 <getBusDividerConfig>
    567a:	4603      	mov	r3, r0
    567c:	4a2e      	ldr	r2, [pc, #184]	; (5738 <Clock_Ip_ClockInitializeObjects+0x224>)
    567e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    5680:	2025      	movs	r0, #37	; 0x25
    5682:	f7ff fea3 	bl	53cc <getSlowDividerConfig>
    5686:	4603      	mov	r3, r0
    5688:	4a2c      	ldr	r2, [pc, #176]	; (573c <Clock_Ip_ClockInitializeObjects+0x228>)
    568a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    568c:	2026      	movs	r0, #38	; 0x26
    568e:	f7ff fe9d 	bl	53cc <getSlowDividerConfig>
    5692:	4603      	mov	r3, r0
    5694:	4a2a      	ldr	r2, [pc, #168]	; (5740 <Clock_Ip_ClockInitializeObjects+0x22c>)
    5696:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    5698:	2027      	movs	r0, #39	; 0x27
    569a:	f7ff fe97 	bl	53cc <getSlowDividerConfig>
    569e:	4603      	mov	r3, r0
    56a0:	4a28      	ldr	r2, [pc, #160]	; (5744 <Clock_Ip_ClockInitializeObjects+0x230>)
    56a2:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    56a4:	bf00      	nop
    56a6:	b003      	add	sp, #12
    56a8:	f85d fb04 	ldr.w	pc, [sp], #4
    56ac:	1fff8cd4 	.word	0x1fff8cd4
    56b0:	00017e84 	.word	0x00017e84
    56b4:	000184d0 	.word	0x000184d0
    56b8:	1fff8ba0 	.word	0x1fff8ba0
    56bc:	00017e44 	.word	0x00017e44
    56c0:	00018418 	.word	0x00018418
    56c4:	1fff8ba4 	.word	0x1fff8ba4
    56c8:	00017e54 	.word	0x00017e54
    56cc:	00018484 	.word	0x00018484
    56d0:	1fff8ba8 	.word	0x1fff8ba8
    56d4:	00017e94 	.word	0x00017e94
    56d8:	000184fc 	.word	0x000184fc
    56dc:	1fff8bac 	.word	0x1fff8bac
    56e0:	1fff8be8 	.word	0x1fff8be8
    56e4:	00017e24 	.word	0x00017e24
    56e8:	000183d4 	.word	0x000183d4
    56ec:	1fff8bb0 	.word	0x1fff8bb0
    56f0:	1fff8bec 	.word	0x1fff8bec
    56f4:	1fff8bb4 	.word	0x1fff8bb4
    56f8:	1fff8bf0 	.word	0x1fff8bf0
    56fc:	1fff8bb8 	.word	0x1fff8bb8
    5700:	1fff8bf4 	.word	0x1fff8bf4
    5704:	1fff8b19 	.word	0x1fff8b19
    5708:	1fff8b10 	.word	0x1fff8b10
    570c:	1fff8bbc 	.word	0x1fff8bbc
    5710:	1fff8bc0 	.word	0x1fff8bc0
    5714:	1fff8bc4 	.word	0x1fff8bc4
    5718:	1fff8bc8 	.word	0x1fff8bc8
    571c:	1fff8bcc 	.word	0x1fff8bcc
    5720:	1fff8bf8 	.word	0x1fff8bf8
    5724:	1fff8bd0 	.word	0x1fff8bd0
    5728:	1fff8bd4 	.word	0x1fff8bd4
    572c:	1fff8bfc 	.word	0x1fff8bfc
    5730:	1fff8bd8 	.word	0x1fff8bd8
    5734:	1fff8bdc 	.word	0x1fff8bdc
    5738:	1fff8c00 	.word	0x1fff8c00
    573c:	1fff8be0 	.word	0x1fff8be0
    5740:	1fff8be4 	.word	0x1fff8be4
    5744:	1fff8c04 	.word	0x1fff8c04

00005748 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    5748:	b500      	push	{lr}
    574a:	b083      	sub	sp, #12
    574c:	9001      	str	r0, [sp, #4]
    574e:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    5750:	9b01      	ldr	r3, [sp, #4]
    5752:	2b03      	cmp	r3, #3
    5754:	f000 8090 	beq.w	5878 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    5758:	9b01      	ldr	r3, [sp, #4]
    575a:	2b03      	cmp	r3, #3
    575c:	f200 80d3 	bhi.w	5906 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    5760:	9b01      	ldr	r3, [sp, #4]
    5762:	2b00      	cmp	r3, #0
    5764:	d040      	beq.n	57e8 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    5766:	9b01      	ldr	r3, [sp, #4]
    5768:	3b01      	subs	r3, #1
    576a:	2b01      	cmp	r3, #1
    576c:	f200 80cb 	bhi.w	5906 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    5770:	9b00      	ldr	r3, [sp, #0]
    5772:	2b00      	cmp	r3, #0
    5774:	f040 80c9 	bne.w	590a <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    5778:	4b68      	ldr	r3, [pc, #416]	; (591c <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    577a:	2200      	movs	r2, #0
    577c:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    577e:	4b68      	ldr	r3, [pc, #416]	; (5920 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5780:	681b      	ldr	r3, [r3, #0]
    5782:	685b      	ldr	r3, [r3, #4]
    5784:	4a67      	ldr	r2, [pc, #412]	; (5924 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    5786:	6812      	ldr	r2, [r2, #0]
    5788:	4610      	mov	r0, r2
    578a:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    578c:	4b66      	ldr	r3, [pc, #408]	; (5928 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    578e:	681b      	ldr	r3, [r3, #0]
    5790:	681b      	ldr	r3, [r3, #0]
    5792:	4a66      	ldr	r2, [pc, #408]	; (592c <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    5794:	6812      	ldr	r2, [r2, #0]
    5796:	4610      	mov	r0, r2
    5798:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    579a:	4b65      	ldr	r3, [pc, #404]	; (5930 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    579c:	681b      	ldr	r3, [r3, #0]
    579e:	681b      	ldr	r3, [r3, #0]
    57a0:	4a64      	ldr	r2, [pc, #400]	; (5934 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    57a2:	6812      	ldr	r2, [r2, #0]
    57a4:	4610      	mov	r0, r2
    57a6:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    57a8:	4b63      	ldr	r3, [pc, #396]	; (5938 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    57aa:	681b      	ldr	r3, [r3, #0]
    57ac:	681b      	ldr	r3, [r3, #0]
    57ae:	4a63      	ldr	r2, [pc, #396]	; (593c <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    57b0:	6812      	ldr	r2, [r2, #0]
    57b2:	4610      	mov	r0, r2
    57b4:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    57b6:	4b62      	ldr	r3, [pc, #392]	; (5940 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    57b8:	681b      	ldr	r3, [r3, #0]
    57ba:	691b      	ldr	r3, [r3, #16]
    57bc:	4a61      	ldr	r2, [pc, #388]	; (5944 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    57be:	6812      	ldr	r2, [r2, #0]
    57c0:	6812      	ldr	r2, [r2, #0]
    57c2:	4610      	mov	r0, r2
    57c4:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    57c6:	4b60      	ldr	r3, [pc, #384]	; (5948 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    57c8:	681b      	ldr	r3, [r3, #0]
    57ca:	68db      	ldr	r3, [r3, #12]
    57cc:	4a5f      	ldr	r2, [pc, #380]	; (594c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    57ce:	6812      	ldr	r2, [r2, #0]
    57d0:	6812      	ldr	r2, [r2, #0]
    57d2:	4610      	mov	r0, r2
    57d4:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    57d6:	4b5e      	ldr	r3, [pc, #376]	; (5950 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    57d8:	681b      	ldr	r3, [r3, #0]
    57da:	689b      	ldr	r3, [r3, #8]
    57dc:	4a5d      	ldr	r2, [pc, #372]	; (5954 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    57de:	6812      	ldr	r2, [r2, #0]
    57e0:	6812      	ldr	r2, [r2, #0]
    57e2:	4610      	mov	r0, r2
    57e4:	4798      	blx	r3
            }
        }
        break;
    57e6:	e090      	b.n	590a <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    57e8:	9b00      	ldr	r3, [sp, #0]
    57ea:	2b02      	cmp	r3, #2
    57ec:	f040 808f 	bne.w	590e <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    57f0:	4b4a      	ldr	r3, [pc, #296]	; (591c <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    57f2:	2201      	movs	r2, #1
    57f4:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    57f6:	4b56      	ldr	r3, [pc, #344]	; (5950 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    57f8:	681b      	ldr	r3, [r3, #0]
    57fa:	685b      	ldr	r3, [r3, #4]
    57fc:	4a55      	ldr	r2, [pc, #340]	; (5954 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    57fe:	6812      	ldr	r2, [r2, #0]
    5800:	4610      	mov	r0, r2
    5802:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    5804:	4b50      	ldr	r3, [pc, #320]	; (5948 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5806:	681b      	ldr	r3, [r3, #0]
    5808:	691b      	ldr	r3, [r3, #16]
    580a:	4a50      	ldr	r2, [pc, #320]	; (594c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    580c:	6812      	ldr	r2, [r2, #0]
    580e:	4610      	mov	r0, r2
    5810:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5812:	4b4d      	ldr	r3, [pc, #308]	; (5948 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5814:	681b      	ldr	r3, [r3, #0]
    5816:	689b      	ldr	r3, [r3, #8]
    5818:	4a4c      	ldr	r2, [pc, #304]	; (594c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    581a:	6812      	ldr	r2, [r2, #0]
    581c:	4610      	mov	r0, r2
    581e:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5820:	4b47      	ldr	r3, [pc, #284]	; (5940 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5822:	681b      	ldr	r3, [r3, #0]
    5824:	68db      	ldr	r3, [r3, #12]
    5826:	4a47      	ldr	r2, [pc, #284]	; (5944 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5828:	6812      	ldr	r2, [r2, #0]
    582a:	4610      	mov	r0, r2
    582c:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    582e:	4b44      	ldr	r3, [pc, #272]	; (5940 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5830:	681b      	ldr	r3, [r3, #0]
    5832:	689b      	ldr	r3, [r3, #8]
    5834:	4a43      	ldr	r2, [pc, #268]	; (5944 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5836:	6812      	ldr	r2, [r2, #0]
    5838:	6812      	ldr	r2, [r2, #0]
    583a:	4610      	mov	r0, r2
    583c:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    583e:	4b38      	ldr	r3, [pc, #224]	; (5920 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5840:	681b      	ldr	r3, [r3, #0]
    5842:	685b      	ldr	r3, [r3, #4]
    5844:	4a44      	ldr	r2, [pc, #272]	; (5958 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    5846:	6812      	ldr	r2, [r2, #0]
    5848:	4610      	mov	r0, r2
    584a:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    584c:	4b36      	ldr	r3, [pc, #216]	; (5928 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    584e:	681b      	ldr	r3, [r3, #0]
    5850:	681b      	ldr	r3, [r3, #0]
    5852:	4a42      	ldr	r2, [pc, #264]	; (595c <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    5854:	6812      	ldr	r2, [r2, #0]
    5856:	4610      	mov	r0, r2
    5858:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    585a:	4b35      	ldr	r3, [pc, #212]	; (5930 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    585c:	681b      	ldr	r3, [r3, #0]
    585e:	681b      	ldr	r3, [r3, #0]
    5860:	4a3f      	ldr	r2, [pc, #252]	; (5960 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    5862:	6812      	ldr	r2, [r2, #0]
    5864:	4610      	mov	r0, r2
    5866:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    5868:	4b33      	ldr	r3, [pc, #204]	; (5938 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    586a:	681b      	ldr	r3, [r3, #0]
    586c:	681b      	ldr	r3, [r3, #0]
    586e:	4a3d      	ldr	r2, [pc, #244]	; (5964 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    5870:	6812      	ldr	r2, [r2, #0]
    5872:	4610      	mov	r0, r2
    5874:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5876:	e04a      	b.n	590e <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5878:	9b00      	ldr	r3, [sp, #0]
    587a:	2b02      	cmp	r3, #2
    587c:	d149      	bne.n	5912 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    587e:	4b27      	ldr	r3, [pc, #156]	; (591c <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5880:	2201      	movs	r2, #1
    5882:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    5884:	4b32      	ldr	r3, [pc, #200]	; (5950 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5886:	681b      	ldr	r3, [r3, #0]
    5888:	685b      	ldr	r3, [r3, #4]
    588a:	4a32      	ldr	r2, [pc, #200]	; (5954 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    588c:	6812      	ldr	r2, [r2, #0]
    588e:	4610      	mov	r0, r2
    5890:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    5892:	4b2d      	ldr	r3, [pc, #180]	; (5948 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5894:	681b      	ldr	r3, [r3, #0]
    5896:	691b      	ldr	r3, [r3, #16]
    5898:	4a2c      	ldr	r2, [pc, #176]	; (594c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    589a:	6812      	ldr	r2, [r2, #0]
    589c:	4610      	mov	r0, r2
    589e:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    58a0:	4b29      	ldr	r3, [pc, #164]	; (5948 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    58a2:	681b      	ldr	r3, [r3, #0]
    58a4:	689b      	ldr	r3, [r3, #8]
    58a6:	4a29      	ldr	r2, [pc, #164]	; (594c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    58a8:	6812      	ldr	r2, [r2, #0]
    58aa:	4610      	mov	r0, r2
    58ac:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    58ae:	4b24      	ldr	r3, [pc, #144]	; (5940 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    58b0:	681b      	ldr	r3, [r3, #0]
    58b2:	68db      	ldr	r3, [r3, #12]
    58b4:	4a23      	ldr	r2, [pc, #140]	; (5944 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    58b6:	6812      	ldr	r2, [r2, #0]
    58b8:	4610      	mov	r0, r2
    58ba:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    58bc:	4b20      	ldr	r3, [pc, #128]	; (5940 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    58be:	681b      	ldr	r3, [r3, #0]
    58c0:	689b      	ldr	r3, [r3, #8]
    58c2:	4a20      	ldr	r2, [pc, #128]	; (5944 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    58c4:	6812      	ldr	r2, [r2, #0]
    58c6:	6812      	ldr	r2, [r2, #0]
    58c8:	4610      	mov	r0, r2
    58ca:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    58cc:	4b26      	ldr	r3, [pc, #152]	; (5968 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    58ce:	681b      	ldr	r3, [r3, #0]
    58d0:	685b      	ldr	r3, [r3, #4]
    58d2:	4a26      	ldr	r2, [pc, #152]	; (596c <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    58d4:	6812      	ldr	r2, [r2, #0]
    58d6:	4610      	mov	r0, r2
    58d8:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    58da:	4b25      	ldr	r3, [pc, #148]	; (5970 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    58dc:	681b      	ldr	r3, [r3, #0]
    58de:	681b      	ldr	r3, [r3, #0]
    58e0:	4a24      	ldr	r2, [pc, #144]	; (5974 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    58e2:	6812      	ldr	r2, [r2, #0]
    58e4:	4610      	mov	r0, r2
    58e6:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    58e8:	4b23      	ldr	r3, [pc, #140]	; (5978 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    58ea:	681b      	ldr	r3, [r3, #0]
    58ec:	681b      	ldr	r3, [r3, #0]
    58ee:	4a23      	ldr	r2, [pc, #140]	; (597c <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    58f0:	6812      	ldr	r2, [r2, #0]
    58f2:	4610      	mov	r0, r2
    58f4:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    58f6:	4b22      	ldr	r3, [pc, #136]	; (5980 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    58f8:	681b      	ldr	r3, [r3, #0]
    58fa:	681b      	ldr	r3, [r3, #0]
    58fc:	4a21      	ldr	r2, [pc, #132]	; (5984 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    58fe:	6812      	ldr	r2, [r2, #0]
    5900:	4610      	mov	r0, r2
    5902:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5904:	e005      	b.n	5912 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    5906:	bf00      	nop
    5908:	e004      	b.n	5914 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    590a:	bf00      	nop
    590c:	e002      	b.n	5914 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    590e:	bf00      	nop
    5910:	e000      	b.n	5914 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5912:	bf00      	nop
    }

}
    5914:	bf00      	nop
    5916:	b003      	add	sp, #12
    5918:	f85d fb04 	ldr.w	pc, [sp], #4
    591c:	1fff8b19 	.word	0x1fff8b19
    5920:	1fff8bac 	.word	0x1fff8bac
    5924:	1fff8bcc 	.word	0x1fff8bcc
    5928:	1fff8bb0 	.word	0x1fff8bb0
    592c:	1fff8bd4 	.word	0x1fff8bd4
    5930:	1fff8bb4 	.word	0x1fff8bb4
    5934:	1fff8bdc 	.word	0x1fff8bdc
    5938:	1fff8bb8 	.word	0x1fff8bb8
    593c:	1fff8be4 	.word	0x1fff8be4
    5940:	1fff8ba0 	.word	0x1fff8ba0
    5944:	1fff8bc4 	.word	0x1fff8bc4
    5948:	1fff8ba4 	.word	0x1fff8ba4
    594c:	1fff8bc0 	.word	0x1fff8bc0
    5950:	1fff8ba8 	.word	0x1fff8ba8
    5954:	1fff8bbc 	.word	0x1fff8bbc
    5958:	1fff8bc8 	.word	0x1fff8bc8
    595c:	1fff8bd0 	.word	0x1fff8bd0
    5960:	1fff8bd8 	.word	0x1fff8bd8
    5964:	1fff8be0 	.word	0x1fff8be0
    5968:	1fff8be8 	.word	0x1fff8be8
    596c:	1fff8bf8 	.word	0x1fff8bf8
    5970:	1fff8bec 	.word	0x1fff8bec
    5974:	1fff8bfc 	.word	0x1fff8bfc
    5978:	1fff8bf0 	.word	0x1fff8bf0
    597c:	1fff8c00 	.word	0x1fff8c00
    5980:	1fff8bf4 	.word	0x1fff8bf4
    5984:	1fff8c04 	.word	0x1fff8c04

00005988 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    5988:	b500      	push	{lr}
    598a:	b083      	sub	sp, #12
    598c:	9001      	str	r0, [sp, #4]
    598e:	9100      	str	r1, [sp, #0]
    switch(Command)
    5990:	9b00      	ldr	r3, [sp, #0]
    5992:	2b04      	cmp	r3, #4
    5994:	d010      	beq.n	59b8 <Clock_Ip_Command+0x30>
    5996:	9b00      	ldr	r3, [sp, #0]
    5998:	2b04      	cmp	r3, #4
    599a:	d811      	bhi.n	59c0 <Clock_Ip_Command+0x38>
    599c:	9b00      	ldr	r3, [sp, #0]
    599e:	2b01      	cmp	r3, #1
    59a0:	d006      	beq.n	59b0 <Clock_Ip_Command+0x28>
    59a2:	9b00      	ldr	r3, [sp, #0]
    59a4:	2b02      	cmp	r3, #2
    59a6:	d10b      	bne.n	59c0 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    59a8:	9801      	ldr	r0, [sp, #4]
    59aa:	f7ff fdb3 	bl	5514 <Clock_Ip_ClockInitializeObjects>
            break;
    59ae:	e008      	b.n	59c2 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    59b0:	9801      	ldr	r0, [sp, #4]
    59b2:	f7ff f9db 	bl	4d6c <Clock_Ip_SpecificPlatformInitClock>
            break;
    59b6:	e004      	b.n	59c2 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    59b8:	9801      	ldr	r0, [sp, #4]
    59ba:	f7ff f8ed 	bl	4b98 <DisableSafeClock>
            break;
    59be:	e000      	b.n	59c2 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    59c0:	bf00      	nop
    }
}
    59c2:	bf00      	nop
    59c4:	b003      	add	sp, #12
    59c6:	f85d fb04 	ldr.w	pc, [sp], #4
    59ca:	bf00      	nop

000059cc <Mcu_CheckInit>:
/**
* @brief Mcu_CheckInit - checks for Mcu_Init
* @implements Mcu_CheckInit_Activity
*/
static Std_ReturnType Mcu_CheckInit(const Mcu_ConfigType * ConfigPtr)
{
    59cc:	b500      	push	{lr}
    59ce:	b085      	sub	sp, #20
    59d0:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    59d2:	2300      	movs	r3, #0
    59d4:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_PRECOMPILE_SUPPORT == STD_OFF)
    if (NULL_PTR == ConfigPtr)
    59d8:	9b01      	ldr	r3, [sp, #4]
    59da:	2b00      	cmp	r3, #0
    59dc:	d108      	bne.n	59f0 <Mcu_CheckInit+0x24>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    59de:	2301      	movs	r3, #1
    59e0:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INIT_ID, MCU_E_INIT_FAILED);
    59e4:	2311      	movs	r3, #17
    59e6:	2200      	movs	r2, #0
    59e8:	2100      	movs	r1, #0
    59ea:	2065      	movs	r0, #101	; 0x65
    59ec:	f011 f996 	bl	16d1c <Det_ReportError>

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INIT_ID, MCU_E_INIT_FAILED);
    }
#endif /* (MCU_PRECOMPILE_SUPPORT == STD_ON) */

    return CheckStatus;
    59f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    59f4:	4618      	mov	r0, r3
    59f6:	b005      	add	sp, #20
    59f8:	f85d fb04 	ldr.w	pc, [sp], #4

000059fc <Mcu_CheckInitClock>:
/**
* @brief Mcu_CheckInitClock - checks for Mcu_InitClock
* @implements Mcu_CheckInitClock_Activity
*/
static Std_ReturnType Mcu_CheckInitClock(Mcu_ClockType ClockSetting)
{
    59fc:	b500      	push	{lr}
    59fe:	b085      	sub	sp, #20
    5a00:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    5a02:	2300      	movs	r3, #0
    5a04:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ClockSetting >= Mcu_pConfigPtr->NoClkConfigs)
    5a08:	4b0a      	ldr	r3, [pc, #40]	; (5a34 <Mcu_CheckInitClock+0x38>)
    5a0a:	681b      	ldr	r3, [r3, #0]
    5a0c:	68db      	ldr	r3, [r3, #12]
    5a0e:	9a01      	ldr	r2, [sp, #4]
    5a10:	429a      	cmp	r2, r3
    5a12:	d308      	bcc.n	5a26 <Mcu_CheckInitClock+0x2a>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    5a14:	2301      	movs	r3, #1
    5a16:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INITCLOCK_ID, MCU_E_PARAM_CLOCK);
    5a1a:	230b      	movs	r3, #11
    5a1c:	2202      	movs	r2, #2
    5a1e:	2100      	movs	r1, #0
    5a20:	2065      	movs	r0, #101	; 0x65
    5a22:	f011 f97b 	bl	16d1c <Det_ReportError>
    }

    return CheckStatus;
    5a26:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5a2a:	4618      	mov	r0, r3
    5a2c:	b005      	add	sp, #20
    5a2e:	f85d fb04 	ldr.w	pc, [sp], #4
    5a32:	bf00      	nop
    5a34:	1fff8ce0 	.word	0x1fff8ce0

00005a38 <Mcu_CheckSetMode>:
/**
* @brief Mcu_CheckSetMode - checks for Mcu_SetMode
* @implements Mcu_CheckSetMode_Activity
*/
static Std_ReturnType Mcu_CheckSetMode(Power_Ip_ModeType McuMode)
{
    5a38:	b500      	push	{lr}
    5a3a:	b085      	sub	sp, #20
    5a3c:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    5a3e:	2300      	movs	r3, #0
    5a40:	f88d 300f 	strb.w	r3, [sp, #15]

    if (McuMode >= Mcu_pConfigPtr->NoModeConfigs)
    5a44:	4b0a      	ldr	r3, [pc, #40]	; (5a70 <Mcu_CheckSetMode+0x38>)
    5a46:	681b      	ldr	r3, [r3, #0]
    5a48:	689b      	ldr	r3, [r3, #8]
    5a4a:	9a01      	ldr	r2, [sp, #4]
    5a4c:	429a      	cmp	r2, r3
    5a4e:	d308      	bcc.n	5a62 <Mcu_CheckSetMode+0x2a>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    5a50:	2301      	movs	r3, #1
    5a52:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_SETMODE_ID, MCU_E_PARAM_MODE);
    5a56:	230c      	movs	r3, #12
    5a58:	2208      	movs	r2, #8
    5a5a:	2100      	movs	r1, #0
    5a5c:	2065      	movs	r0, #101	; 0x65
    5a5e:	f011 f95d 	bl	16d1c <Det_ReportError>
    }

    return CheckStatus;
    5a62:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5a66:	4618      	mov	r0, r3
    5a68:	b005      	add	sp, #20
    5a6a:	f85d fb04 	ldr.w	pc, [sp], #4
    5a6e:	bf00      	nop
    5a70:	1fff8ce0 	.word	0x1fff8ce0

00005a74 <Mcu_CheckGetVersionInfo>:
/**
* @brief Mcu_CheckGetVersionInfo - checks for Mcu_GetVersionInfo
* @implements Mcu_CheckGetVersionInfo_Activity
*/
static Std_ReturnType Mcu_CheckGetVersionInfo(const Std_VersionInfoType * VersionInfo)
{
    5a74:	b500      	push	{lr}
    5a76:	b085      	sub	sp, #20
    5a78:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    5a7a:	2300      	movs	r3, #0
    5a7c:	f88d 300f 	strb.w	r3, [sp, #15]

    if (NULL_PTR == VersionInfo)
    5a80:	9b01      	ldr	r3, [sp, #4]
    5a82:	2b00      	cmp	r3, #0
    5a84:	d108      	bne.n	5a98 <Mcu_CheckGetVersionInfo+0x24>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    5a86:	2301      	movs	r3, #1
    5a88:	f88d 300f 	strb.w	r3, [sp, #15]

        (void)Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_GETVERSIONINFO_ID, MCU_E_PARAM_POINTER);
    5a8c:	2310      	movs	r3, #16
    5a8e:	2209      	movs	r2, #9
    5a90:	2100      	movs	r1, #0
    5a92:	2065      	movs	r0, #101	; 0x65
    5a94:	f011 f942 	bl	16d1c <Det_ReportError>
    }

    return CheckStatus;
    5a98:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5a9c:	4618      	mov	r0, r3
    5a9e:	b005      	add	sp, #20
    5aa0:	f85d fb04 	ldr.w	pc, [sp], #4

00005aa4 <Mcu_HLDChecksEntry>:
/**
* @brief Mcu_HLDChecksEntry - checks for invalid mode transitions.
* @implements Mcu_HLDChecksEntry_Activity
*/
static Std_ReturnType Mcu_HLDChecksEntry(uint8 McuServiceID)
{
    5aa4:	b500      	push	{lr}
    5aa6:	b085      	sub	sp, #20
    5aa8:	4603      	mov	r3, r0
    5aaa:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    5aae:	2300      	movs	r3, #0
    5ab0:	f88d 300f 	strb.w	r3, [sp, #15]

    if (MCU_INIT_ID == McuServiceID)
    5ab4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5ab8:	2b00      	cmp	r3, #0
    5aba:	d10e      	bne.n	5ada <Mcu_HLDChecksEntry+0x36>
    {
        if (MCU_UNINIT != Mcu_eStatus) /* If "Mcu_Init" was already called (i.e. driver is initialized). */
    5abc:	4b13      	ldr	r3, [pc, #76]	; (5b0c <Mcu_HLDChecksEntry+0x68>)
    5abe:	681b      	ldr	r3, [r3, #0]
    5ac0:	2b03      	cmp	r3, #3
    5ac2:	d01c      	beq.n	5afe <Mcu_HLDChecksEntry+0x5a>
        {
            CheckStatus = (Std_ReturnType)E_NOT_OK;
    5ac4:	2301      	movs	r3, #1
    5ac6:	f88d 300f 	strb.w	r3, [sp, #15]
            (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, McuServiceID, MCU_E_ALREADY_INITIALIZED);
    5aca:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5ace:	2313      	movs	r3, #19
    5ad0:	2100      	movs	r1, #0
    5ad2:	2065      	movs	r0, #101	; 0x65
    5ad4:	f011 f922 	bl	16d1c <Det_ReportError>
    5ad8:	e011      	b.n	5afe <Mcu_HLDChecksEntry+0x5a>
        }
    }
    else
    {
        if (MCU_UNINIT == Mcu_eStatus) /* If "Mcu_Init" was not called (i.e driver is uninitialized). */
    5ada:	4b0c      	ldr	r3, [pc, #48]	; (5b0c <Mcu_HLDChecksEntry+0x68>)
    5adc:	681b      	ldr	r3, [r3, #0]
    5ade:	2b03      	cmp	r3, #3
    5ae0:	d10a      	bne.n	5af8 <Mcu_HLDChecksEntry+0x54>
        {
            CheckStatus = (Std_ReturnType)E_NOT_OK;
    5ae2:	2301      	movs	r3, #1
    5ae4:	f88d 300f 	strb.w	r3, [sp, #15]
            (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, McuServiceID, MCU_E_UNINIT);
    5ae8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5aec:	230f      	movs	r3, #15
    5aee:	2100      	movs	r1, #0
    5af0:	2065      	movs	r0, #101	; 0x65
    5af2:	f011 f913 	bl	16d1c <Det_ReportError>
    5af6:	e002      	b.n	5afe <Mcu_HLDChecksEntry+0x5a>
        }
        else
        {
            Mcu_eStatus = MCU_BUSY;
    5af8:	4b04      	ldr	r3, [pc, #16]	; (5b0c <Mcu_HLDChecksEntry+0x68>)
    5afa:	220a      	movs	r2, #10
    5afc:	601a      	str	r2, [r3, #0]
        }
    }

    return CheckStatus;
    5afe:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5b02:	4618      	mov	r0, r3
    5b04:	b005      	add	sp, #20
    5b06:	f85d fb04 	ldr.w	pc, [sp], #4
    5b0a:	bf00      	nop
    5b0c:	1fff8b1c 	.word	0x1fff8b1c

00005b10 <Mcu_HLDChecksExit>:
* @implements Mcu_HLDChecksExit_Activity
*/
static void Mcu_HLDChecksExit(  Std_ReturnType RetStatus,
                                uint8 McuServiceID
                              )
{
    5b10:	b082      	sub	sp, #8
    5b12:	4603      	mov	r3, r0
    5b14:	460a      	mov	r2, r1
    5b16:	f88d 3007 	strb.w	r3, [sp, #7]
    5b1a:	4613      	mov	r3, r2
    5b1c:	f88d 3006 	strb.w	r3, [sp, #6]
    if (MCU_INIT_ID == McuServiceID)
    5b20:	f89d 3006 	ldrb.w	r3, [sp, #6]
    5b24:	2b00      	cmp	r3, #0
    5b26:	d10b      	bne.n	5b40 <Mcu_HLDChecksExit+0x30>
    {
        if ((Std_ReturnType)E_OK == (Std_ReturnType)RetStatus)
    5b28:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5b2c:	2b00      	cmp	r3, #0
    5b2e:	d103      	bne.n	5b38 <Mcu_HLDChecksExit+0x28>
        {
            Mcu_eStatus = MCU_IDLE;
    5b30:	4b06      	ldr	r3, [pc, #24]	; (5b4c <Mcu_HLDChecksExit+0x3c>)
    5b32:	220c      	movs	r2, #12
    5b34:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Mcu_eStatus = MCU_IDLE;
    }
}
    5b36:	e006      	b.n	5b46 <Mcu_HLDChecksExit+0x36>
            Mcu_eStatus = MCU_UNINIT;
    5b38:	4b04      	ldr	r3, [pc, #16]	; (5b4c <Mcu_HLDChecksExit+0x3c>)
    5b3a:	2203      	movs	r2, #3
    5b3c:	601a      	str	r2, [r3, #0]
}
    5b3e:	e002      	b.n	5b46 <Mcu_HLDChecksExit+0x36>
        Mcu_eStatus = MCU_IDLE;
    5b40:	4b02      	ldr	r3, [pc, #8]	; (5b4c <Mcu_HLDChecksExit+0x3c>)
    5b42:	220c      	movs	r2, #12
    5b44:	601a      	str	r2, [r3, #0]
}
    5b46:	bf00      	nop
    5b48:	b002      	add	sp, #8
    5b4a:	4770      	bx	lr
    5b4c:	1fff8b1c 	.word	0x1fff8b1c

00005b50 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    5b50:	b500      	push	{lr}
    5b52:	b085      	sub	sp, #20
    5b54:	9001      	str	r0, [sp, #4]
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) )
    Std_ReturnType CheckStatus;
#endif /* ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) ) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    CheckStatus = (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INIT_ID);
    5b56:	2000      	movs	r0, #0
    5b58:	f7ff ffa4 	bl	5aa4 <Mcu_HLDChecksEntry>
    5b5c:	4603      	mov	r3, r0
    5b5e:	f88d 300b 	strb.w	r3, [sp, #11]

    if ( (Std_ReturnType)E_OK == CheckStatus )
    5b62:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5b66:	2b00      	cmp	r3, #0
    5b68:	d150      	bne.n	5c0c <Mcu_Init+0xbc>

#if (MCU_PARAM_CHECK == STD_ON)
        /* When PostBuild is used and #(Variants) > 1, the input parameter 'ConfigPtr' is mandatory
         * to be different than NULL_PTR. */
        /* Check the config. In case of error, return immediately. The "Mcu_CheckInit" function will report DET errors. */
        CheckStatus = Mcu_CheckInit(ConfigPtr);
    5b6a:	9801      	ldr	r0, [sp, #4]
    5b6c:	f7ff ff2e 	bl	59cc <Mcu_CheckInit>
    5b70:	4603      	mov	r3, r0
    5b72:	f88d 300b 	strb.w	r3, [sp, #11]

        if ((Std_ReturnType)E_OK == CheckStatus)
    5b76:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5b7a:	2b00      	cmp	r3, #0
    5b7c:	d13d      	bne.n	5bfa <Mcu_Init+0xaa>

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    5b7e:	4a25      	ldr	r2, [pc, #148]	; (5c14 <Mcu_Init+0xc4>)
    5b80:	9b01      	ldr	r3, [sp, #4]
    5b82:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5b84:	2300      	movs	r3, #0
    5b86:	9303      	str	r3, [sp, #12]
    5b88:	e010      	b.n	5bac <Mcu_Init+0x5c>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    5b8a:	4b22      	ldr	r3, [pc, #136]	; (5c14 <Mcu_Init+0xc4>)
    5b8c:	681b      	ldr	r3, [r3, #0]
    5b8e:	6919      	ldr	r1, [r3, #16]
    5b90:	9a03      	ldr	r2, [sp, #12]
    5b92:	4613      	mov	r3, r2
    5b94:	005b      	lsls	r3, r3, #1
    5b96:	4413      	add	r3, r2
    5b98:	009b      	lsls	r3, r3, #2
    5b9a:	440b      	add	r3, r1
    5b9c:	681b      	ldr	r3, [r3, #0]
    5b9e:	9a03      	ldr	r2, [sp, #12]
    5ba0:	b2d1      	uxtb	r1, r2
    5ba2:	4a1d      	ldr	r2, [pc, #116]	; (5c18 <Mcu_Init+0xc8>)
    5ba4:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5ba6:	9b03      	ldr	r3, [sp, #12]
    5ba8:	3301      	adds	r3, #1
    5baa:	9303      	str	r3, [sp, #12]
    5bac:	4b19      	ldr	r3, [pc, #100]	; (5c14 <Mcu_Init+0xc4>)
    5bae:	681b      	ldr	r3, [r3, #0]
    5bb0:	689b      	ldr	r3, [r3, #8]
    5bb2:	9a03      	ldr	r2, [sp, #12]
    5bb4:	429a      	cmp	r2, r3
    5bb6:	d3e8      	bcc.n	5b8a <Mcu_Init+0x3a>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5bb8:	2300      	movs	r3, #0
    5bba:	9303      	str	r3, [sp, #12]
    5bbc:	e010      	b.n	5be0 <Mcu_Init+0x90>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    5bbe:	4b15      	ldr	r3, [pc, #84]	; (5c14 <Mcu_Init+0xc4>)
    5bc0:	681b      	ldr	r3, [r3, #0]
    5bc2:	6959      	ldr	r1, [r3, #20]
    5bc4:	9a03      	ldr	r2, [sp, #12]
    5bc6:	4613      	mov	r3, r2
    5bc8:	01db      	lsls	r3, r3, #7
    5bca:	1a9b      	subs	r3, r3, r2
    5bcc:	00db      	lsls	r3, r3, #3
    5bce:	440b      	add	r3, r1
    5bd0:	681b      	ldr	r3, [r3, #0]
    5bd2:	9a03      	ldr	r2, [sp, #12]
    5bd4:	b2d1      	uxtb	r1, r2
    5bd6:	4a11      	ldr	r2, [pc, #68]	; (5c1c <Mcu_Init+0xcc>)
    5bd8:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5bda:	9b03      	ldr	r3, [sp, #12]
    5bdc:	3301      	adds	r3, #1
    5bde:	9303      	str	r3, [sp, #12]
    5be0:	4b0c      	ldr	r3, [pc, #48]	; (5c14 <Mcu_Init+0xc4>)
    5be2:	681b      	ldr	r3, [r3, #0]
    5be4:	68db      	ldr	r3, [r3, #12]
    5be6:	9a03      	ldr	r2, [sp, #12]
    5be8:	429a      	cmp	r2, r3
    5bea:	d3e8      	bcc.n	5bbe <Mcu_Init+0x6e>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    5bec:	4b09      	ldr	r3, [pc, #36]	; (5c14 <Mcu_Init+0xc4>)
    5bee:	681b      	ldr	r3, [r3, #0]
    5bf0:	699b      	ldr	r3, [r3, #24]
    5bf2:	4618      	mov	r0, r3
    5bf4:	f000 f90c 	bl	5e10 <Mcu_Ipw_Init>
    5bf8:	e002      	b.n	5c00 <Mcu_Init+0xb0>
#if (MCU_PARAM_CHECK == STD_ON)
        }
        else
        {
            /* Clean the init pointer in case of an error. */
            Mcu_pConfigPtr = NULL_PTR;
    5bfa:	4b06      	ldr	r3, [pc, #24]	; (5c14 <Mcu_Init+0xc4>)
    5bfc:	2200      	movs	r2, #0
    5bfe:	601a      	str	r2, [r3, #0]
#endif /* (MCU_PARAM_CHECK == STD_ON) */


#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    5c00:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5c04:	2100      	movs	r1, #0
    5c06:	4618      	mov	r0, r3
    5c08:	f7ff ff82 	bl	5b10 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5c0c:	bf00      	nop
    5c0e:	b005      	add	sp, #20
    5c10:	f85d fb04 	ldr.w	pc, [sp], #4
    5c14:	1fff8ce0 	.word	0x1fff8ce0
    5c18:	1fff8cdc 	.word	0x1fff8cdc
    5c1c:	1fff8cd8 	.word	0x1fff8cd8

00005c20 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    5c20:	b500      	push	{lr}
    5c22:	b085      	sub	sp, #20
    5c24:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    5c26:	2301      	movs	r3, #1
    5c28:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    /* Check if the driver is initialized. */
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INITRAMSECTION_ID) )
    5c2c:	2001      	movs	r0, #1
    5c2e:	f7ff ff39 	bl	5aa4 <Mcu_HLDChecksEntry>
    5c32:	4603      	mov	r3, r0
    5c34:	2b00      	cmp	r3, #0
    5c36:	d103      	bne.n	5c40 <Mcu_InitRamSection+0x20>
        /* To avoid compiler warning. */
        MCU_PARAM_UNUSED(RamSection);
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    5c38:	2101      	movs	r1, #1
    5c3a:	2000      	movs	r0, #0
    5c3c:	f7ff ff68 	bl	5b10 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    5c40:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5c44:	4618      	mov	r0, r3
    5c46:	b005      	add	sp, #20
    5c48:	f85d fb04 	ldr.w	pc, [sp], #4

00005c4c <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    5c4c:	b500      	push	{lr}
    5c4e:	b085      	sub	sp, #20
    5c50:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    5c52:	4a17      	ldr	r2, [pc, #92]	; (5cb0 <Mcu_InitClock+0x64>)
    5c54:	9b01      	ldr	r3, [sp, #4]
    5c56:	4413      	add	r3, r2
    5c58:	781b      	ldrb	r3, [r3, #0]
    5c5a:	f88d 300e 	strb.w	r3, [sp, #14]
    /* Return the success of the clock initalization operation. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) )
    Std_ReturnType ClockStatus = (Std_ReturnType)E_NOT_OK;
    5c5e:	2301      	movs	r3, #1
    5c60:	f88d 300f 	strb.w	r3, [sp, #15]
#else
    Std_ReturnType ClockStatus;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INITCLOCK_ID) )
    5c64:	2002      	movs	r0, #2
    5c66:	f7ff ff1d 	bl	5aa4 <Mcu_HLDChecksEntry>
    5c6a:	4603      	mov	r3, r0
    5c6c:	2b00      	cmp	r3, #0
    5c6e:	d119      	bne.n	5ca4 <Mcu_InitClock+0x58>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
    5c70:	9801      	ldr	r0, [sp, #4]
    5c72:	f7ff fec3 	bl	59fc <Mcu_CheckInitClock>
    5c76:	4603      	mov	r3, r0
    5c78:	2b00      	cmp	r3, #0
    5c7a:	d10f      	bne.n	5c9c <Mcu_InitClock+0x50>
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    5c7c:	4b0d      	ldr	r3, [pc, #52]	; (5cb4 <Mcu_InitClock+0x68>)
    5c7e:	681b      	ldr	r3, [r3, #0]
    5c80:	6959      	ldr	r1, [r3, #20]
    5c82:	f89d 200e 	ldrb.w	r2, [sp, #14]
    5c86:	4613      	mov	r3, r2
    5c88:	01db      	lsls	r3, r3, #7
    5c8a:	1a9b      	subs	r3, r3, r2
    5c8c:	00db      	lsls	r3, r3, #3
    5c8e:	440b      	add	r3, r1
    5c90:	4618      	mov	r0, r3
    5c92:	f000 f8c7 	bl	5e24 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    5c96:	2300      	movs	r3, #0
    5c98:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_PARAM_CHECK == STD_ON)
        }
#endif /* (MCU_PARAM_CHECK == STD_ON) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    5c9c:	2102      	movs	r1, #2
    5c9e:	2000      	movs	r0, #0
    5ca0:	f7ff ff36 	bl	5b10 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    5ca4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5ca8:	4618      	mov	r0, r3
    5caa:	b005      	add	sp, #20
    5cac:	f85d fb04 	ldr.w	pc, [sp], #4
    5cb0:	1fff8cd8 	.word	0x1fff8cd8
    5cb4:	1fff8ce0 	.word	0x1fff8ce0

00005cb8 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    5cb8:	b500      	push	{lr}
    5cba:	b085      	sub	sp, #20
    5cbc:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    5cbe:	4a15      	ldr	r2, [pc, #84]	; (5d14 <Mcu_SetMode+0x5c>)
    5cc0:	9b01      	ldr	r3, [sp, #4]
    5cc2:	4413      	add	r3, r2
    5cc4:	781b      	ldrb	r3, [r3, #0]
    5cc6:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_SETMODE_ID) )
    5cca:	2008      	movs	r0, #8
    5ccc:	f7ff feea 	bl	5aa4 <Mcu_HLDChecksEntry>
    5cd0:	4603      	mov	r3, r0
    5cd2:	2b00      	cmp	r3, #0
    5cd4:	d11a      	bne.n	5d0c <Mcu_SetMode+0x54>
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

#if (MCU_PARAM_CHECK == STD_ON)
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
    5cd6:	9801      	ldr	r0, [sp, #4]
    5cd8:	f7ff feae 	bl	5a38 <Mcu_CheckSetMode>
    5cdc:	4603      	mov	r3, r0
    5cde:	2b00      	cmp	r3, #0
    5ce0:	d110      	bne.n	5d04 <Mcu_SetMode+0x4c>
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    5ce2:	f00e fed3 	bl	14a8c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    5ce6:	4b0c      	ldr	r3, [pc, #48]	; (5d18 <Mcu_SetMode+0x60>)
    5ce8:	681b      	ldr	r3, [r3, #0]
    5cea:	6919      	ldr	r1, [r3, #16]
    5cec:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5cf0:	4613      	mov	r3, r2
    5cf2:	005b      	lsls	r3, r3, #1
    5cf4:	4413      	add	r3, r2
    5cf6:	009b      	lsls	r3, r3, #2
    5cf8:	440b      	add	r3, r1
    5cfa:	4618      	mov	r0, r3
    5cfc:	f000 f89c 	bl	5e38 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    5d00:	f00e fef0 	bl	14ae4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>
        }
#endif /* (MCU_PARAM_CHECK == STD_ON) */


#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    5d04:	2108      	movs	r1, #8
    5d06:	2000      	movs	r0, #0
    5d08:	f7ff ff02 	bl	5b10 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5d0c:	bf00      	nop
    5d0e:	b005      	add	sp, #20
    5d10:	f85d fb04 	ldr.w	pc, [sp], #4
    5d14:	1fff8cdc 	.word	0x1fff8cdc
    5d18:	1fff8ce0 	.word	0x1fff8ce0

00005d1c <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    5d1c:	b500      	push	{lr}
    5d1e:	b083      	sub	sp, #12
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    5d20:	2302      	movs	r3, #2
    5d22:	9301      	str	r3, [sp, #4]
#else
    Mcu_PllStatusType PllStatus;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETPLLSTATUS_ID) )
    5d24:	2004      	movs	r0, #4
    5d26:	f7ff febd 	bl	5aa4 <Mcu_HLDChecksEntry>
    5d2a:	4603      	mov	r3, r0
    5d2c:	2b00      	cmp	r3, #0
    5d2e:	d103      	bne.n	5d38 <Mcu_GetPllStatus+0x1c>
           At this point, the return value can be only MCU_PLL_LOCKED or MCU_PLL_UNLOCKED. */
        PllStatus = Mcu_Ipw_GetPllStatus();
#endif /* (MCU_NO_PLL == STD_OFF) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    5d30:	2104      	movs	r1, #4
    5d32:	2000      	movs	r0, #0
    5d34:	f7ff feec 	bl	5b10 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    5d38:	9b01      	ldr	r3, [sp, #4]
}
    5d3a:	4618      	mov	r0, r3
    5d3c:	b003      	add	sp, #12
    5d3e:	f85d fb04 	ldr.w	pc, [sp], #4

00005d42 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    5d42:	b500      	push	{lr}
    5d44:	b083      	sub	sp, #12
    /* Return value of the function. */
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    Mcu_ResetType ResetReason = MCU_RESET_UNDEFINED;
    5d46:	230e      	movs	r3, #14
    5d48:	9301      	str	r3, [sp, #4]
#else
    Mcu_ResetType ResetReason;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    5d4a:	2005      	movs	r0, #5
    5d4c:	f7ff feaa 	bl	5aa4 <Mcu_HLDChecksEntry>
    5d50:	4603      	mov	r3, r0
    5d52:	2b00      	cmp	r3, #0
    5d54:	d106      	bne.n	5d64 <Mcu_GetResetReason+0x22>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    5d56:	f000 f879 	bl	5e4c <Mcu_Ipw_GetResetReason>
    5d5a:	9001      	str	r0, [sp, #4]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    5d5c:	2105      	movs	r1, #5
    5d5e:	2000      	movs	r0, #0
    5d60:	f7ff fed6 	bl	5b10 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    5d64:	9b01      	ldr	r3, [sp, #4]
}
    5d66:	4618      	mov	r0, r3
    5d68:	b003      	add	sp, #12
    5d6a:	f85d fb04 	ldr.w	pc, [sp], #4

00005d6e <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    5d6e:	b500      	push	{lr}
    5d70:	b083      	sub	sp, #12
    /* Return value of the function. */
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    Mcu_RawResetType RawResetValue = MCU_RAW_RESET_DEFAULT;
    5d72:	f04f 33ff 	mov.w	r3, #4294967295
    5d76:	9301      	str	r3, [sp, #4]
#else
    Mcu_RawResetType RawResetValue;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    5d78:	2006      	movs	r0, #6
    5d7a:	f7ff fe93 	bl	5aa4 <Mcu_HLDChecksEntry>
    5d7e:	4603      	mov	r3, r0
    5d80:	2b00      	cmp	r3, #0
    5d82:	d106      	bne.n	5d92 <Mcu_GetResetRawValue+0x24>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    5d84:	f000 f868 	bl	5e58 <Mcu_Ipw_GetResetRawValue>
    5d88:	9001      	str	r0, [sp, #4]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    5d8a:	2106      	movs	r1, #6
    5d8c:	2000      	movs	r0, #0
    5d8e:	f7ff febf 	bl	5b10 <Mcu_HLDChecksExit>
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    5d92:	9b01      	ldr	r3, [sp, #4]
}
    5d94:	4618      	mov	r0, r3
    5d96:	b003      	add	sp, #12
    5d98:	f85d fb04 	ldr.w	pc, [sp], #4

00005d9c <Mcu_GetVersionInfo>:
* @api
*
* @implements Mcu_GetVersionInfo_Activity
*/
void Mcu_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    5d9c:	b500      	push	{lr}
    5d9e:	b083      	sub	sp, #12
    5da0:	9001      	str	r0, [sp, #4]
#if (MCU_PARAM_CHECK == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckGetVersionInfo(versioninfo) )
    5da2:	9801      	ldr	r0, [sp, #4]
    5da4:	f7ff fe66 	bl	5a74 <Mcu_CheckGetVersionInfo>
    5da8:	4603      	mov	r3, r0
    5daa:	2b00      	cmp	r3, #0
    5dac:	d10e      	bne.n	5dcc <Mcu_GetVersionInfo+0x30>
    {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
        (versioninfo)->vendorID = (uint16)MCU_VENDOR_ID;
    5dae:	9b01      	ldr	r3, [sp, #4]
    5db0:	222b      	movs	r2, #43	; 0x2b
    5db2:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint8)MCU_MODULE_ID;
    5db4:	9b01      	ldr	r3, [sp, #4]
    5db6:	2265      	movs	r2, #101	; 0x65
    5db8:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)MCU_SW_MAJOR_VERSION;
    5dba:	9b01      	ldr	r3, [sp, #4]
    5dbc:	2202      	movs	r2, #2
    5dbe:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)MCU_SW_MINOR_VERSION;
    5dc0:	9b01      	ldr	r3, [sp, #4]
    5dc2:	2200      	movs	r2, #0
    5dc4:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)MCU_SW_PATCH_VERSION;
    5dc6:	9b01      	ldr	r3, [sp, #4]
    5dc8:	2200      	movs	r2, #0
    5dca:	719a      	strb	r2, [r3, #6]
#if (MCU_PARAM_CHECK == STD_ON)
    }
#endif /* (MCU_PARAM_CHECK == STD_ON) */
}
    5dcc:	bf00      	nop
    5dce:	b003      	add	sp, #12
    5dd0:	f85d fb04 	ldr.w	pc, [sp], #4

00005dd4 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5dd4:	b500      	push	{lr}
    5dd6:	b083      	sub	sp, #12
    5dd8:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    5dda:	201a      	movs	r0, #26
    5ddc:	f7ff fe62 	bl	5aa4 <Mcu_HLDChecksEntry>
    5de0:	4603      	mov	r3, r0
    5de2:	2b00      	cmp	r3, #0
    5de4:	d106      	bne.n	5df4 <Mcu_SleepOnExit+0x20>
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    5de6:	9801      	ldr	r0, [sp, #4]
    5de8:	f000 f83c 	bl	5e64 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    5dec:	211a      	movs	r1, #26
    5dee:	2000      	movs	r0, #0
    5df0:	f7ff fe8e 	bl	5b10 <Mcu_HLDChecksExit>
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    5df4:	bf00      	nop
    5df6:	b003      	add	sp, #12
    5df8:	f85d fb04 	ldr.w	pc, [sp], #4

00005dfc <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    5dfc:	b082      	sub	sp, #8
    5dfe:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    5e00:	4b02      	ldr	r3, [pc, #8]	; (5e0c <Mcu_ClkSrcFailureNotification+0x10>)
    5e02:	681b      	ldr	r3, [r3, #0]
    5e04:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    5e06:	bf00      	nop
    5e08:	b002      	add	sp, #8
    5e0a:	4770      	bx	lr
    5e0c:	1fff8ce0 	.word	0x1fff8ce0

00005e10 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    5e10:	b500      	push	{lr}
    5e12:	b083      	sub	sp, #12
    5e14:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    5e16:	9801      	ldr	r0, [sp, #4]
    5e18:	f000 f882 	bl	5f20 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    5e1c:	bf00      	nop
    5e1e:	b003      	add	sp, #12
    5e20:	f85d fb04 	ldr.w	pc, [sp], #4

00005e24 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    5e24:	b500      	push	{lr}
    5e26:	b083      	sub	sp, #12
    5e28:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    5e2a:	9801      	ldr	r0, [sp, #4]
    5e2c:	f7fc fb12 	bl	2454 <Clock_Ip_InitClock>
}
    5e30:	bf00      	nop
    5e32:	b003      	add	sp, #12
    5e34:	f85d fb04 	ldr.w	pc, [sp], #4

00005e38 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    5e38:	b500      	push	{lr}
    5e3a:	b083      	sub	sp, #12
    5e3c:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    5e3e:	9801      	ldr	r0, [sp, #4]
    5e40:	f000 f820 	bl	5e84 <Power_Ip_SetMode>
}
    5e44:	bf00      	nop
    5e46:	b003      	add	sp, #12
    5e48:	f85d fb04 	ldr.w	pc, [sp], #4

00005e4c <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    5e4c:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    5e4e:	f000 f84f 	bl	5ef0 <Power_Ip_GetResetReason>
    5e52:	4603      	mov	r3, r0
}
    5e54:	4618      	mov	r0, r3
    5e56:	bd08      	pop	{r3, pc}

00005e58 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    5e58:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    5e5a:	f000 f857 	bl	5f0c <Power_Ip_GetResetRawValue>
    5e5e:	4603      	mov	r3, r0
}
    5e60:	4618      	mov	r0, r3
    5e62:	bd08      	pop	{r3, pc}

00005e64 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5e64:	b500      	push	{lr}
    5e66:	b083      	sub	sp, #12
    5e68:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    5e6a:	9b01      	ldr	r3, [sp, #4]
    5e6c:	2b00      	cmp	r3, #0
    5e6e:	d102      	bne.n	5e76 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    5e70:	f000 f86c 	bl	5f4c <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    5e74:	e001      	b.n	5e7a <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    5e76:	f000 f86e 	bl	5f56 <Power_Ip_EnableSleepOnExit>
}
    5e7a:	bf00      	nop
    5e7c:	b003      	add	sp, #12
    5e7e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005e84 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5e84:	b500      	push	{lr}
    5e86:	b085      	sub	sp, #20
    5e88:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    5e8a:	9b01      	ldr	r3, [sp, #4]
    5e8c:	685b      	ldr	r3, [r3, #4]
    5e8e:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    5e90:	9802      	ldr	r0, [sp, #8]
    5e92:	f000 f9f5 	bl	6280 <Power_Ip_SMC_ModeCheckEntry>
    5e96:	4603      	mov	r3, r0
    5e98:	2b00      	cmp	r3, #0
    5e9a:	d002      	beq.n	5ea2 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5e9c:	2301      	movs	r3, #1
    5e9e:	9303      	str	r3, [sp, #12]
    5ea0:	e003      	b.n	5eaa <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    5ea2:	9801      	ldr	r0, [sp, #4]
    5ea4:	f000 fa1e 	bl	62e4 <Power_Ip_SMC_ModeConfig>
    5ea8:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    5eaa:	9b03      	ldr	r3, [sp, #12]
    5eac:	2b01      	cmp	r3, #1
    5eae:	d103      	bne.n	5eb8 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5eb0:	21ff      	movs	r1, #255	; 0xff
    5eb2:	2003      	movs	r0, #3
    5eb4:	f000 f8f4 	bl	60a0 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    5eb8:	bf00      	nop
    5eba:	b005      	add	sp, #20
    5ebc:	f85d fb04 	ldr.w	pc, [sp], #4

00005ec0 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    5ec0:	b084      	sub	sp, #16
    5ec2:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    5ec4:	230c      	movs	r3, #12
    5ec6:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    5ec8:	4a08      	ldr	r2, [pc, #32]	; (5eec <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5eca:	9b01      	ldr	r3, [sp, #4]
    5ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5ed0:	2b0e      	cmp	r3, #14
    5ed2:	d805      	bhi.n	5ee0 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    5ed4:	4a05      	ldr	r2, [pc, #20]	; (5eec <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5ed6:	9b01      	ldr	r3, [sp, #4]
    5ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5edc:	9303      	str	r3, [sp, #12]
    5ede:	e001      	b.n	5ee4 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    5ee0:	230c      	movs	r3, #12
    5ee2:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    5ee4:	9b03      	ldr	r3, [sp, #12]
}
    5ee6:	4618      	mov	r0, r3
    5ee8:	b004      	add	sp, #16
    5eea:	4770      	bx	lr
    5eec:	00018570 	.word	0x00018570

00005ef0 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    5ef0:	b500      	push	{lr}
    5ef2:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    5ef4:	f000 f940 	bl	6178 <Power_Ip_RCM_GetResetReason>
    5ef8:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    5efa:	9801      	ldr	r0, [sp, #4]
    5efc:	f7ff ffe0 	bl	5ec0 <Power_Ip_ConvertIntergeToResetType>
    5f00:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    5f02:	9b00      	ldr	r3, [sp, #0]
}
    5f04:	4618      	mov	r0, r3
    5f06:	b003      	add	sp, #12
    5f08:	f85d fb04 	ldr.w	pc, [sp], #4

00005f0c <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    5f0c:	b500      	push	{lr}
    5f0e:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    5f10:	f000 f98a 	bl	6228 <Power_Ip_RCM_GetResetRawValue>
    5f14:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    5f16:	9b01      	ldr	r3, [sp, #4]
}
    5f18:	4618      	mov	r0, r3
    5f1a:	b003      	add	sp, #12
    5f1c:	f85d fb04 	ldr.w	pc, [sp], #4

00005f20 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    5f20:	b500      	push	{lr}
    5f22:	b083      	sub	sp, #12
    5f24:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    5f26:	9b01      	ldr	r3, [sp, #4]
    5f28:	681b      	ldr	r3, [r3, #0]
    5f2a:	4618      	mov	r0, r3
    5f2c:	f000 f90e 	bl	614c <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    5f30:	9b01      	ldr	r3, [sp, #4]
    5f32:	685b      	ldr	r3, [r3, #4]
    5f34:	4618      	mov	r0, r3
    5f36:	f000 f86d 	bl	6014 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    5f3a:	9b01      	ldr	r3, [sp, #4]
    5f3c:	689b      	ldr	r3, [r3, #8]
    5f3e:	4618      	mov	r0, r3
    5f40:	f000 f990 	bl	6264 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    5f44:	bf00      	nop
    5f46:	b003      	add	sp, #12
    5f48:	f85d fb04 	ldr.w	pc, [sp], #4

00005f4c <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    5f4c:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    5f4e:	f000 f811 	bl	5f74 <Power_Ip_CM4_DisableSleepOnExit>
}
    5f52:	bf00      	nop
    5f54:	bd08      	pop	{r3, pc}

00005f56 <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    5f56:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    5f58:	f000 f820 	bl	5f9c <Power_Ip_CM4_EnableSleepOnExit>
}
    5f5c:	bf00      	nop
    5f5e:	bd08      	pop	{r3, pc}

00005f60 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    5f60:	b082      	sub	sp, #8
    5f62:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    5f64:	4a02      	ldr	r2, [pc, #8]	; (5f70 <Power_Ip_InstallNotificationsCallback+0x10>)
    5f66:	9b01      	ldr	r3, [sp, #4]
    5f68:	6013      	str	r3, [r2, #0]
}
    5f6a:	bf00      	nop
    5f6c:	b002      	add	sp, #8
    5f6e:	4770      	bx	lr
    5f70:	1fff8b20 	.word	0x1fff8b20

00005f74 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    5f74:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5f76:	2300      	movs	r3, #0
    5f78:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5f7a:	4b07      	ldr	r3, [pc, #28]	; (5f98 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5f7c:	681b      	ldr	r3, [r3, #0]
    5f7e:	685b      	ldr	r3, [r3, #4]
    5f80:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    5f82:	9b01      	ldr	r3, [sp, #4]
    5f84:	f023 0302 	bic.w	r3, r3, #2
    5f88:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5f8a:	4b03      	ldr	r3, [pc, #12]	; (5f98 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5f8c:	681b      	ldr	r3, [r3, #0]
    5f8e:	9a01      	ldr	r2, [sp, #4]
    5f90:	605a      	str	r2, [r3, #4]
}
    5f92:	bf00      	nop
    5f94:	b002      	add	sp, #8
    5f96:	4770      	bx	lr
    5f98:	1fff8b24 	.word	0x1fff8b24

00005f9c <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    5f9c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5f9e:	2300      	movs	r3, #0
    5fa0:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5fa2:	4b07      	ldr	r3, [pc, #28]	; (5fc0 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5fa4:	681b      	ldr	r3, [r3, #0]
    5fa6:	685b      	ldr	r3, [r3, #4]
    5fa8:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    5faa:	9b01      	ldr	r3, [sp, #4]
    5fac:	f043 0302 	orr.w	r3, r3, #2
    5fb0:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5fb2:	4b03      	ldr	r3, [pc, #12]	; (5fc0 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5fb4:	681b      	ldr	r3, [r3, #0]
    5fb6:	9a01      	ldr	r2, [sp, #4]
    5fb8:	605a      	str	r2, [r3, #4]
}
    5fba:	bf00      	nop
    5fbc:	b002      	add	sp, #8
    5fbe:	4770      	bx	lr
    5fc0:	1fff8b24 	.word	0x1fff8b24

00005fc4 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    5fc4:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5fc6:	2300      	movs	r3, #0
    5fc8:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5fca:	4b07      	ldr	r3, [pc, #28]	; (5fe8 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5fcc:	681b      	ldr	r3, [r3, #0]
    5fce:	685b      	ldr	r3, [r3, #4]
    5fd0:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    5fd2:	9b01      	ldr	r3, [sp, #4]
    5fd4:	f043 0304 	orr.w	r3, r3, #4
    5fd8:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5fda:	4b03      	ldr	r3, [pc, #12]	; (5fe8 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5fdc:	681b      	ldr	r3, [r3, #0]
    5fde:	9a01      	ldr	r2, [sp, #4]
    5fe0:	605a      	str	r2, [r3, #4]
}
    5fe2:	bf00      	nop
    5fe4:	b002      	add	sp, #8
    5fe6:	4770      	bx	lr
    5fe8:	1fff8b24 	.word	0x1fff8b24

00005fec <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    5fec:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5fee:	2300      	movs	r3, #0
    5ff0:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5ff2:	4b07      	ldr	r3, [pc, #28]	; (6010 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5ff4:	681b      	ldr	r3, [r3, #0]
    5ff6:	685b      	ldr	r3, [r3, #4]
    5ff8:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    5ffa:	9b01      	ldr	r3, [sp, #4]
    5ffc:	f023 0304 	bic.w	r3, r3, #4
    6000:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6002:	4b03      	ldr	r3, [pc, #12]	; (6010 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    6004:	681b      	ldr	r3, [r3, #0]
    6006:	9a01      	ldr	r2, [sp, #4]
    6008:	605a      	str	r2, [r3, #4]
}
    600a:	bf00      	nop
    600c:	b002      	add	sp, #8
    600e:	4770      	bx	lr
    6010:	1fff8b24 	.word	0x1fff8b24

00006014 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    6014:	b084      	sub	sp, #16
    6016:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    6018:	4b20      	ldr	r3, [pc, #128]	; (609c <Power_Ip_PMC_PowerInit+0x88>)
    601a:	781b      	ldrb	r3, [r3, #0]
    601c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    6020:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6024:	f003 030f 	and.w	r3, r3, #15
    6028:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    602c:	9b01      	ldr	r3, [sp, #4]
    602e:	781a      	ldrb	r2, [r3, #0]
    6030:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6034:	4313      	orrs	r3, r2
    6036:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    603a:	4a18      	ldr	r2, [pc, #96]	; (609c <Power_Ip_PMC_PowerInit+0x88>)
    603c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6040:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    6042:	4b16      	ldr	r3, [pc, #88]	; (609c <Power_Ip_PMC_PowerInit+0x88>)
    6044:	785b      	ldrb	r3, [r3, #1]
    6046:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    604a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    604e:	f003 031f 	and.w	r3, r3, #31
    6052:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    6056:	9b01      	ldr	r3, [sp, #4]
    6058:	785a      	ldrb	r2, [r3, #1]
    605a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    605e:	4313      	orrs	r3, r2
    6060:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    6064:	4a0d      	ldr	r2, [pc, #52]	; (609c <Power_Ip_PMC_PowerInit+0x88>)
    6066:	f89d 300f 	ldrb.w	r3, [sp, #15]
    606a:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    606c:	4b0b      	ldr	r3, [pc, #44]	; (609c <Power_Ip_PMC_PowerInit+0x88>)
    606e:	789b      	ldrb	r3, [r3, #2]
    6070:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    6074:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6078:	f003 0338 	and.w	r3, r3, #56	; 0x38
    607c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    6080:	9b01      	ldr	r3, [sp, #4]
    6082:	789a      	ldrb	r2, [r3, #2]
    6084:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6088:	4313      	orrs	r3, r2
    608a:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    608e:	4a03      	ldr	r2, [pc, #12]	; (609c <Power_Ip_PMC_PowerInit+0x88>)
    6090:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6094:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    6096:	bf00      	nop
    6098:	b004      	add	sp, #16
    609a:	4770      	bx	lr
    609c:	4007d000 	.word	0x4007d000

000060a0 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    60a0:	b500      	push	{lr}
    60a2:	b083      	sub	sp, #12
    60a4:	9001      	str	r0, [sp, #4]
    60a6:	460b      	mov	r3, r1
    60a8:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    60ac:	4b05      	ldr	r3, [pc, #20]	; (60c4 <Power_Ip_ReportPowerErrors+0x24>)
    60ae:	681b      	ldr	r3, [r3, #0]
    60b0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    60b4:	4611      	mov	r1, r2
    60b6:	9801      	ldr	r0, [sp, #4]
    60b8:	4798      	blx	r3
}
    60ba:	bf00      	nop
    60bc:	b003      	add	sp, #12
    60be:	f85d fb04 	ldr.w	pc, [sp], #4
    60c2:	bf00      	nop
    60c4:	1fff8b20 	.word	0x1fff8b20

000060c8 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    60c8:	b082      	sub	sp, #8
    60ca:	9001      	str	r0, [sp, #4]
    60cc:	460b      	mov	r3, r1
    60ce:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    60d2:	bf00      	nop
    60d4:	b002      	add	sp, #8
    60d6:	4770      	bx	lr

000060d8 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    60d8:	b500      	push	{lr}
    60da:	b085      	sub	sp, #20
    60dc:	9003      	str	r0, [sp, #12]
    60de:	9102      	str	r1, [sp, #8]
    60e0:	9201      	str	r2, [sp, #4]
    60e2:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    60e4:	2000      	movs	r0, #0
    60e6:	f7fb fee5 	bl	1eb4 <OsIf_GetCounter>
    60ea:	4602      	mov	r2, r0
    60ec:	9b03      	ldr	r3, [sp, #12]
    60ee:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    60f0:	9b02      	ldr	r3, [sp, #8]
    60f2:	2200      	movs	r2, #0
    60f4:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    60f6:	2100      	movs	r1, #0
    60f8:	9800      	ldr	r0, [sp, #0]
    60fa:	f7fb ff27 	bl	1f4c <OsIf_MicrosToTicks>
    60fe:	4602      	mov	r2, r0
    6100:	9b01      	ldr	r3, [sp, #4]
    6102:	601a      	str	r2, [r3, #0]
}
    6104:	bf00      	nop
    6106:	b005      	add	sp, #20
    6108:	f85d fb04 	ldr.w	pc, [sp], #4

0000610c <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    610c:	b500      	push	{lr}
    610e:	b087      	sub	sp, #28
    6110:	9003      	str	r0, [sp, #12]
    6112:	9102      	str	r1, [sp, #8]
    6114:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    6116:	2300      	movs	r3, #0
    6118:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    611c:	2100      	movs	r1, #0
    611e:	9803      	ldr	r0, [sp, #12]
    6120:	f7fb fee1 	bl	1ee6 <OsIf_GetElapsed>
    6124:	4602      	mov	r2, r0
    6126:	9b02      	ldr	r3, [sp, #8]
    6128:	681b      	ldr	r3, [r3, #0]
    612a:	441a      	add	r2, r3
    612c:	9b02      	ldr	r3, [sp, #8]
    612e:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    6130:	9b02      	ldr	r3, [sp, #8]
    6132:	681b      	ldr	r3, [r3, #0]
    6134:	9a01      	ldr	r2, [sp, #4]
    6136:	429a      	cmp	r2, r3
    6138:	d802      	bhi.n	6140 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    613a:	2301      	movs	r3, #1
    613c:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    6140:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6144:	4618      	mov	r0, r3
    6146:	b007      	add	sp, #28
    6148:	f85d fb04 	ldr.w	pc, [sp], #4

0000614c <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    614c:	b082      	sub	sp, #8
    614e:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    6150:	9b01      	ldr	r3, [sp, #4]
    6152:	681a      	ldr	r2, [r3, #0]
    6154:	4907      	ldr	r1, [pc, #28]	; (6174 <Power_Ip_RCM_ResetInit+0x28>)
    6156:	f641 7307 	movw	r3, #7943	; 0x1f07
    615a:	4013      	ands	r3, r2
    615c:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    615e:	9b01      	ldr	r3, [sp, #4]
    6160:	685a      	ldr	r2, [r3, #4]
    6162:	4904      	ldr	r1, [pc, #16]	; (6174 <Power_Ip_RCM_ResetInit+0x28>)
    6164:	f642 73ff 	movw	r3, #12287	; 0x2fff
    6168:	4013      	ands	r3, r2
    616a:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    616c:	bf00      	nop
    616e:	b002      	add	sp, #8
    6170:	4770      	bx	lr
    6172:	bf00      	nop
    6174:	4007f000 	.word	0x4007f000

00006178 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    6178:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    617a:	230c      	movs	r3, #12
    617c:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    617e:	2300      	movs	r3, #0
    6180:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    6182:	2300      	movs	r3, #0
    6184:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    6186:	2300      	movs	r3, #0
    6188:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    618a:	4b25      	ldr	r3, [pc, #148]	; (6220 <Power_Ip_RCM_GetResetReason+0xa8>)
    618c:	699a      	ldr	r2, [r3, #24]
    618e:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6192:	4013      	ands	r3, r2
    6194:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    6196:	9b03      	ldr	r3, [sp, #12]
    6198:	2b00      	cmp	r3, #0
    619a:	d008      	beq.n	61ae <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    619c:	4920      	ldr	r1, [pc, #128]	; (6220 <Power_Ip_RCM_GetResetReason+0xa8>)
    619e:	9a03      	ldr	r2, [sp, #12]
    61a0:	f642 73ee 	movw	r3, #12270	; 0x2fee
    61a4:	4013      	ands	r3, r2
    61a6:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    61a8:	4a1e      	ldr	r2, [pc, #120]	; (6224 <Power_Ip_RCM_GetResetReason+0xac>)
    61aa:	9b03      	ldr	r3, [sp, #12]
    61ac:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    61ae:	4b1d      	ldr	r3, [pc, #116]	; (6224 <Power_Ip_RCM_GetResetReason+0xac>)
    61b0:	681b      	ldr	r3, [r3, #0]
    61b2:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    61b4:	9a02      	ldr	r2, [sp, #8]
    61b6:	f642 73ee 	movw	r3, #12270	; 0x2fee
    61ba:	4013      	ands	r3, r2
    61bc:	2b82      	cmp	r3, #130	; 0x82
    61be:	d102      	bne.n	61c6 <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    61c0:	2305      	movs	r3, #5
    61c2:	9307      	str	r3, [sp, #28]
    61c4:	e027      	b.n	6216 <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    61c6:	2300      	movs	r3, #0
    61c8:	9306      	str	r3, [sp, #24]
    61ca:	e021      	b.n	6210 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    61cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    61d0:	9b06      	ldr	r3, [sp, #24]
    61d2:	fa22 f303 	lsr.w	r3, r2, r3
    61d6:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    61d8:	9a01      	ldr	r2, [sp, #4]
    61da:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    61de:	4013      	ands	r3, r2
    61e0:	2b00      	cmp	r3, #0
    61e2:	d012      	beq.n	620a <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    61e4:	9a01      	ldr	r2, [sp, #4]
    61e6:	9b02      	ldr	r3, [sp, #8]
    61e8:	4013      	ands	r3, r2
    61ea:	2b00      	cmp	r3, #0
    61ec:	d00a      	beq.n	6204 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    61ee:	9b05      	ldr	r3, [sp, #20]
    61f0:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    61f2:	9b04      	ldr	r3, [sp, #16]
    61f4:	3301      	adds	r3, #1
    61f6:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    61f8:	9b04      	ldr	r3, [sp, #16]
    61fa:	2b01      	cmp	r3, #1
    61fc:	d902      	bls.n	6204 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    61fe:	230d      	movs	r3, #13
    6200:	9307      	str	r3, [sp, #28]
                        break;
    6202:	e008      	b.n	6216 <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    6204:	9b05      	ldr	r3, [sp, #20]
    6206:	3301      	adds	r3, #1
    6208:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    620a:	9b06      	ldr	r3, [sp, #24]
    620c:	3301      	adds	r3, #1
    620e:	9306      	str	r3, [sp, #24]
    6210:	9b06      	ldr	r3, [sp, #24]
    6212:	2b1f      	cmp	r3, #31
    6214:	d9da      	bls.n	61cc <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    6216:	9b07      	ldr	r3, [sp, #28]
}
    6218:	4618      	mov	r0, r3
    621a:	b008      	add	sp, #32
    621c:	4770      	bx	lr
    621e:	bf00      	nop
    6220:	4007f000 	.word	0x4007f000
    6224:	1fff8ce4 	.word	0x1fff8ce4

00006228 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    6228:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    622a:	4b0c      	ldr	r3, [pc, #48]	; (625c <Power_Ip_RCM_GetResetRawValue+0x34>)
    622c:	699a      	ldr	r2, [r3, #24]
    622e:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6232:	4013      	ands	r3, r2
    6234:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    6236:	9b01      	ldr	r3, [sp, #4]
    6238:	2b00      	cmp	r3, #0
    623a:	d008      	beq.n	624e <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    623c:	4907      	ldr	r1, [pc, #28]	; (625c <Power_Ip_RCM_GetResetRawValue+0x34>)
    623e:	9a01      	ldr	r2, [sp, #4]
    6240:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6244:	4013      	ands	r3, r2
    6246:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    6248:	4a05      	ldr	r2, [pc, #20]	; (6260 <Power_Ip_RCM_GetResetRawValue+0x38>)
    624a:	9b01      	ldr	r3, [sp, #4]
    624c:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    624e:	4b04      	ldr	r3, [pc, #16]	; (6260 <Power_Ip_RCM_GetResetRawValue+0x38>)
    6250:	681b      	ldr	r3, [r3, #0]
    6252:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    6254:	9b00      	ldr	r3, [sp, #0]
}
    6256:	4618      	mov	r0, r3
    6258:	b002      	add	sp, #8
    625a:	4770      	bx	lr
    625c:	4007f000 	.word	0x4007f000
    6260:	1fff8ce4 	.word	0x1fff8ce4

00006264 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    6264:	b082      	sub	sp, #8
    6266:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    6268:	9b01      	ldr	r3, [sp, #4]
    626a:	681b      	ldr	r3, [r3, #0]
    626c:	4a03      	ldr	r2, [pc, #12]	; (627c <Power_Ip_SMC_AllowedModesConfig+0x18>)
    626e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    6272:	6093      	str	r3, [r2, #8]
}
    6274:	bf00      	nop
    6276:	b002      	add	sp, #8
    6278:	4770      	bx	lr
    627a:	bf00      	nop
    627c:	4007e000 	.word	0x4007e000

00006280 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    6280:	b084      	sub	sp, #16
    6282:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    6284:	2301      	movs	r3, #1
    6286:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    6288:	4b15      	ldr	r3, [pc, #84]	; (62e0 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    628a:	695b      	ldr	r3, [r3, #20]
    628c:	b2db      	uxtb	r3, r3
    628e:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    6290:	9b01      	ldr	r3, [sp, #4]
    6292:	2b02      	cmp	r3, #2
    6294:	d012      	beq.n	62bc <Power_Ip_SMC_ModeCheckEntry+0x3c>
    6296:	9b01      	ldr	r3, [sp, #4]
    6298:	2b02      	cmp	r3, #2
    629a:	d818      	bhi.n	62ce <Power_Ip_SMC_ModeCheckEntry+0x4e>
    629c:	9b01      	ldr	r3, [sp, #4]
    629e:	2b00      	cmp	r3, #0
    62a0:	d003      	beq.n	62aa <Power_Ip_SMC_ModeCheckEntry+0x2a>
    62a2:	9b01      	ldr	r3, [sp, #4]
    62a4:	2b01      	cmp	r3, #1
    62a6:	d003      	beq.n	62b0 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    62a8:	e011      	b.n	62ce <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    62aa:	2300      	movs	r3, #0
    62ac:	9303      	str	r3, [sp, #12]
            break;
    62ae:	e013      	b.n	62d8 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    62b0:	9b02      	ldr	r3, [sp, #8]
    62b2:	2b01      	cmp	r3, #1
    62b4:	d10d      	bne.n	62d2 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    62b6:	2300      	movs	r3, #0
    62b8:	9303      	str	r3, [sp, #12]
            break;
    62ba:	e00a      	b.n	62d2 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    62bc:	9b02      	ldr	r3, [sp, #8]
    62be:	2b01      	cmp	r3, #1
    62c0:	d002      	beq.n	62c8 <Power_Ip_SMC_ModeCheckEntry+0x48>
    62c2:	9b02      	ldr	r3, [sp, #8]
    62c4:	2b10      	cmp	r3, #16
    62c6:	d106      	bne.n	62d6 <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    62c8:	2300      	movs	r3, #0
    62ca:	9303      	str	r3, [sp, #12]
            break;
    62cc:	e003      	b.n	62d6 <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    62ce:	bf00      	nop
    62d0:	e002      	b.n	62d8 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    62d2:	bf00      	nop
    62d4:	e000      	b.n	62d8 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    62d6:	bf00      	nop
        }
    }

    return PowerModeCheck;
    62d8:	9b03      	ldr	r3, [sp, #12]
}
    62da:	4618      	mov	r0, r3
    62dc:	b004      	add	sp, #16
    62de:	4770      	bx	lr
    62e0:	4007e000 	.word	0x4007e000

000062e4 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    62e4:	b500      	push	{lr}
    62e6:	b08b      	sub	sp, #44	; 0x2c
    62e8:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    62ea:	2300      	movs	r3, #0
    62ec:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    62ee:	2300      	movs	r3, #0
    62f0:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    62f2:	2300      	movs	r3, #0
    62f4:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    62f8:	9b01      	ldr	r3, [sp, #4]
    62fa:	685b      	ldr	r3, [r3, #4]
    62fc:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    62fe:	9b08      	ldr	r3, [sp, #32]
    6300:	2b02      	cmp	r3, #2
    6302:	d076      	beq.n	63f2 <Power_Ip_SMC_ModeConfig+0x10e>
    6304:	9b08      	ldr	r3, [sp, #32]
    6306:	2b02      	cmp	r3, #2
    6308:	f200 80ab 	bhi.w	6462 <Power_Ip_SMC_ModeConfig+0x17e>
    630c:	9b08      	ldr	r3, [sp, #32]
    630e:	2b00      	cmp	r3, #0
    6310:	d003      	beq.n	631a <Power_Ip_SMC_ModeConfig+0x36>
    6312:	9b08      	ldr	r3, [sp, #32]
    6314:	2b01      	cmp	r3, #1
    6316:	d034      	beq.n	6382 <Power_Ip_SMC_ModeConfig+0x9e>
    6318:	e0a3      	b.n	6462 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    631a:	4b58      	ldr	r3, [pc, #352]	; (647c <Power_Ip_SMC_ModeConfig+0x198>)
    631c:	68db      	ldr	r3, [r3, #12]
    631e:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6320:	9b06      	ldr	r3, [sp, #24]
    6322:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6326:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    6328:	4a54      	ldr	r2, [pc, #336]	; (647c <Power_Ip_SMC_ModeConfig+0x198>)
    632a:	9b06      	ldr	r3, [sp, #24]
    632c:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    632e:	aa02      	add	r2, sp, #8
    6330:	a903      	add	r1, sp, #12
    6332:	a804      	add	r0, sp, #16
    6334:	f24c 3350 	movw	r3, #50000	; 0xc350
    6338:	f7ff fece 	bl	60d8 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    633c:	9a02      	ldr	r2, [sp, #8]
    633e:	a903      	add	r1, sp, #12
    6340:	ab04      	add	r3, sp, #16
    6342:	4618      	mov	r0, r3
    6344:	f7ff fee2 	bl	610c <Power_Ip_TimeoutExpired>
    6348:	4603      	mov	r3, r0
    634a:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    634e:	4b4b      	ldr	r3, [pc, #300]	; (647c <Power_Ip_SMC_ModeConfig+0x198>)
    6350:	695b      	ldr	r3, [r3, #20]
    6352:	f003 0301 	and.w	r3, r3, #1
    6356:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6358:	9b05      	ldr	r3, [sp, #20]
    635a:	2b01      	cmp	r3, #1
    635c:	d006      	beq.n	636c <Power_Ip_SMC_ModeConfig+0x88>
    635e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6362:	f083 0301 	eor.w	r3, r3, #1
    6366:	b2db      	uxtb	r3, r3
    6368:	2b00      	cmp	r3, #0
    636a:	d1e7      	bne.n	633c <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    636c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6370:	2b00      	cmp	r3, #0
    6372:	d079      	beq.n	6468 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6374:	2301      	movs	r3, #1
    6376:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6378:	21ff      	movs	r1, #255	; 0xff
    637a:	2000      	movs	r0, #0
    637c:	f7ff fe90 	bl	60a0 <Power_Ip_ReportPowerErrors>
            }

            break;
    6380:	e072      	b.n	6468 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    6382:	4b3e      	ldr	r3, [pc, #248]	; (647c <Power_Ip_SMC_ModeConfig+0x198>)
    6384:	68db      	ldr	r3, [r3, #12]
    6386:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6388:	9b06      	ldr	r3, [sp, #24]
    638a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    638e:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    6390:	9b06      	ldr	r3, [sp, #24]
    6392:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    6396:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6398:	4a38      	ldr	r2, [pc, #224]	; (647c <Power_Ip_SMC_ModeConfig+0x198>)
    639a:	9b06      	ldr	r3, [sp, #24]
    639c:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    639e:	aa02      	add	r2, sp, #8
    63a0:	a903      	add	r1, sp, #12
    63a2:	a804      	add	r0, sp, #16
    63a4:	f24c 3350 	movw	r3, #50000	; 0xc350
    63a8:	f7ff fe96 	bl	60d8 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    63ac:	9a02      	ldr	r2, [sp, #8]
    63ae:	a903      	add	r1, sp, #12
    63b0:	ab04      	add	r3, sp, #16
    63b2:	4618      	mov	r0, r3
    63b4:	f7ff feaa 	bl	610c <Power_Ip_TimeoutExpired>
    63b8:	4603      	mov	r3, r0
    63ba:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    63be:	4b2f      	ldr	r3, [pc, #188]	; (647c <Power_Ip_SMC_ModeConfig+0x198>)
    63c0:	695b      	ldr	r3, [r3, #20]
    63c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    63c6:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    63c8:	9b05      	ldr	r3, [sp, #20]
    63ca:	2b80      	cmp	r3, #128	; 0x80
    63cc:	d006      	beq.n	63dc <Power_Ip_SMC_ModeConfig+0xf8>
    63ce:	f89d 301f 	ldrb.w	r3, [sp, #31]
    63d2:	f083 0301 	eor.w	r3, r3, #1
    63d6:	b2db      	uxtb	r3, r3
    63d8:	2b00      	cmp	r3, #0
    63da:	d1e7      	bne.n	63ac <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    63dc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    63e0:	2b00      	cmp	r3, #0
    63e2:	d043      	beq.n	646c <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    63e4:	2301      	movs	r3, #1
    63e6:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    63e8:	21ff      	movs	r1, #255	; 0xff
    63ea:	2000      	movs	r0, #0
    63ec:	f7ff fe58 	bl	60a0 <Power_Ip_ReportPowerErrors>
            }

            break;
    63f0:	e03c      	b.n	646c <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    63f2:	4b22      	ldr	r3, [pc, #136]	; (647c <Power_Ip_SMC_ModeConfig+0x198>)
    63f4:	68db      	ldr	r3, [r3, #12]
    63f6:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    63f8:	9b06      	ldr	r3, [sp, #24]
    63fa:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    63fe:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    6400:	9b06      	ldr	r3, [sp, #24]
    6402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6406:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6408:	4a1c      	ldr	r2, [pc, #112]	; (647c <Power_Ip_SMC_ModeConfig+0x198>)
    640a:	9b06      	ldr	r3, [sp, #24]
    640c:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    640e:	aa02      	add	r2, sp, #8
    6410:	a903      	add	r1, sp, #12
    6412:	a804      	add	r0, sp, #16
    6414:	f24c 3350 	movw	r3, #50000	; 0xc350
    6418:	f7ff fe5e 	bl	60d8 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    641c:	9a02      	ldr	r2, [sp, #8]
    641e:	a903      	add	r1, sp, #12
    6420:	ab04      	add	r3, sp, #16
    6422:	4618      	mov	r0, r3
    6424:	f7ff fe72 	bl	610c <Power_Ip_TimeoutExpired>
    6428:	4603      	mov	r3, r0
    642a:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    642e:	4b13      	ldr	r3, [pc, #76]	; (647c <Power_Ip_SMC_ModeConfig+0x198>)
    6430:	695b      	ldr	r3, [r3, #20]
    6432:	f003 0304 	and.w	r3, r3, #4
    6436:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6438:	9b05      	ldr	r3, [sp, #20]
    643a:	2b04      	cmp	r3, #4
    643c:	d006      	beq.n	644c <Power_Ip_SMC_ModeConfig+0x168>
    643e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6442:	f083 0301 	eor.w	r3, r3, #1
    6446:	b2db      	uxtb	r3, r3
    6448:	2b00      	cmp	r3, #0
    644a:	d1e7      	bne.n	641c <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    644c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6450:	2b00      	cmp	r3, #0
    6452:	d00d      	beq.n	6470 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6454:	2301      	movs	r3, #1
    6456:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6458:	21ff      	movs	r1, #255	; 0xff
    645a:	2000      	movs	r0, #0
    645c:	f7ff fe20 	bl	60a0 <Power_Ip_ReportPowerErrors>
            }

            break;
    6460:	e006      	b.n	6470 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6462:	2301      	movs	r3, #1
    6464:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    6466:	e004      	b.n	6472 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6468:	bf00      	nop
    646a:	e002      	b.n	6472 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    646c:	bf00      	nop
    646e:	e000      	b.n	6472 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6470:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    6472:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    6474:	4618      	mov	r0, r3
    6476:	b00b      	add	sp, #44	; 0x2c
    6478:	f85d fb04 	ldr.w	pc, [sp], #4
    647c:	4007e000 	.word	0x4007e000

00006480 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    6480:	b500      	push	{lr}
    6482:	b085      	sub	sp, #20
    6484:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    6486:	9b01      	ldr	r3, [sp, #4]
    6488:	9303      	str	r3, [sp, #12]
#endif /* (STD_ON == PORT_PRECOMPILE_SUPPORT) */

#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;

    CoreId = (uint8)Port_GetCoreID();
    648a:	2300      	movs	r3, #0
    648c:	f88d 300b 	strb.w	r3, [sp, #11]
#if (STD_OFF == PORT_PRECOMPILE_SUPPORT)
    if (NULL_PTR == ConfigPtr)
    6490:	9b01      	ldr	r3, [sp, #4]
    6492:	2b00      	cmp	r3, #0
    6494:	d106      	bne.n	64a4 <Port_Init+0x24>
#else /*(STD_OFF == PORT_PRECOMPILE_SUPPORT) */
    if (NULL_PTR != ConfigPtr)
#endif /* (STD_OFF == PORT_PRECOMPILE_SUPPORT) */
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_INIT_FAILED);
    6496:	230c      	movs	r3, #12
    6498:	2200      	movs	r2, #0
    649a:	2100      	movs	r1, #0
    649c:	207c      	movs	r0, #124	; 0x7c
    649e:	f010 fc3d 	bl	16d1c <Det_ReportError>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
        }
    }
}
    64a2:	e014      	b.n	64ce <Port_Init+0x4e>
        if ((uint32)1 != pLocalConfigPtr->pau8Port_PartitionList[CoreId])
    64a4:	9b03      	ldr	r3, [sp, #12]
    64a6:	69da      	ldr	r2, [r3, #28]
    64a8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    64ac:	4413      	add	r3, r2
    64ae:	781b      	ldrb	r3, [r3, #0]
    64b0:	2b01      	cmp	r3, #1
    64b2:	d006      	beq.n	64c2 <Port_Init+0x42>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
    64b4:	23f0      	movs	r3, #240	; 0xf0
    64b6:	2200      	movs	r2, #0
    64b8:	2100      	movs	r1, #0
    64ba:	207c      	movs	r0, #124	; 0x7c
    64bc:	f010 fc2e 	bl	16d1c <Det_ReportError>
}
    64c0:	e005      	b.n	64ce <Port_Init+0x4e>
            Port_Ipw_Init(pLocalConfigPtr);
    64c2:	9803      	ldr	r0, [sp, #12]
    64c4:	f000 fc64 	bl	6d90 <Port_Ipw_Init>
            Port_pConfigPtr = pLocalConfigPtr;
    64c8:	4a03      	ldr	r2, [pc, #12]	; (64d8 <Port_Init+0x58>)
    64ca:	9b03      	ldr	r3, [sp, #12]
    64cc:	6013      	str	r3, [r2, #0]
}
    64ce:	bf00      	nop
    64d0:	b005      	add	sp, #20
    64d2:	f85d fb04 	ldr.w	pc, [sp], #4
    64d6:	bf00      	nop
    64d8:	1fff8ce8 	.word	0x1fff8ce8

000064dc <Port_SetPinDirection>:
void Port_SetPinDirection
(
    Port_PinType Pin,
    Port_PinDirectionType Direction
)
{
    64dc:	b500      	push	{lr}
    64de:	b085      	sub	sp, #20
    64e0:	9001      	str	r0, [sp, #4]
    64e2:	9100      	str	r1, [sp, #0]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    /* Variable used to store current error status */
    Std_ReturnType ErrStatus;

    /* Check if Port module is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    64e4:	4b11      	ldr	r3, [pc, #68]	; (652c <Port_SetPinDirection+0x50>)
    64e6:	681b      	ldr	r3, [r3, #0]
    64e8:	2b00      	cmp	r3, #0
    64ea:	d106      	bne.n	64fa <Port_SetPinDirection+0x1e>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_UNINIT);
    64ec:	230f      	movs	r3, #15
    64ee:	2201      	movs	r2, #1
    64f0:	2100      	movs	r1, #0
    64f2:	207c      	movs	r0, #124	; 0x7c
    64f4:	f010 fc12 	bl	16d1c <Det_ReportError>
        {
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_DIRECTION_UNCHANGEABLE);
        }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    }
}
    64f8:	e013      	b.n	6522 <Port_SetPinDirection+0x46>
        ErrStatus = Port_Ipw_SetPinDirection(Pin, Direction, Port_pConfigPtr);
    64fa:	4b0c      	ldr	r3, [pc, #48]	; (652c <Port_SetPinDirection+0x50>)
    64fc:	681b      	ldr	r3, [r3, #0]
    64fe:	461a      	mov	r2, r3
    6500:	9900      	ldr	r1, [sp, #0]
    6502:	9801      	ldr	r0, [sp, #4]
    6504:	f000 fcb2 	bl	6e6c <Port_Ipw_SetPinDirection>
    6508:	4603      	mov	r3, r0
    650a:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((Std_ReturnType)E_NOT_OK == ErrStatus)
    650e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6512:	2b01      	cmp	r3, #1
    6514:	d105      	bne.n	6522 <Port_SetPinDirection+0x46>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_DIRECTION_UNCHANGEABLE);
    6516:	230b      	movs	r3, #11
    6518:	2201      	movs	r2, #1
    651a:	2100      	movs	r1, #0
    651c:	207c      	movs	r0, #124	; 0x7c
    651e:	f010 fbfd 	bl	16d1c <Det_ReportError>
}
    6522:	bf00      	nop
    6524:	b005      	add	sp, #20
    6526:	f85d fb04 	ldr.w	pc, [sp], #4
    652a:	bf00      	nop
    652c:	1fff8ce8 	.word	0x1fff8ce8

00006530 <Port_SetPinMode>:
void Port_SetPinMode
(
    Port_PinType Pin,
    Port_PinModeType Mode
)
{
    6530:	b500      	push	{lr}
    6532:	b085      	sub	sp, #20
    6534:	9001      	str	r0, [sp, #4]
    6536:	460b      	mov	r3, r1
    6538:	f88d 3003 	strb.w	r3, [sp, #3]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 u8PinModeError = (uint8)0U;
    653c:	2300      	movs	r3, #0
    653e:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Check if port is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    6542:	4b12      	ldr	r3, [pc, #72]	; (658c <Port_SetPinMode+0x5c>)
    6544:	681b      	ldr	r3, [r3, #0]
    6546:	2b00      	cmp	r3, #0
    6548:	d106      	bne.n	6558 <Port_SetPinMode+0x28>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_UNINIT);
    654a:	230f      	movs	r3, #15
    654c:	2204      	movs	r2, #4
    654e:	2100      	movs	r1, #0
    6550:	207c      	movs	r0, #124	; 0x7c
    6552:	f010 fbe3 	bl	16d1c <Det_ReportError>
        {
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_INVALID_MODE);
        }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    }
}
    6556:	e014      	b.n	6582 <Port_SetPinMode+0x52>
        u8PinModeError = (uint8)Port_Ipw_SetPinMode(Pin, Mode, Port_pConfigPtr);
    6558:	4b0c      	ldr	r3, [pc, #48]	; (658c <Port_SetPinMode+0x5c>)
    655a:	681a      	ldr	r2, [r3, #0]
    655c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6560:	4619      	mov	r1, r3
    6562:	9801      	ldr	r0, [sp, #4]
    6564:	f000 fd7a 	bl	705c <Port_Ipw_SetPinMode>
    6568:	4603      	mov	r3, r0
    656a:	f88d 300f 	strb.w	r3, [sp, #15]
        if (PORT_E_PARAM_INVALID_MODE == u8PinModeError)
    656e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6572:	2b0d      	cmp	r3, #13
    6574:	d105      	bne.n	6582 <Port_SetPinMode+0x52>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_INVALID_MODE);
    6576:	230d      	movs	r3, #13
    6578:	2204      	movs	r2, #4
    657a:	2100      	movs	r1, #0
    657c:	207c      	movs	r0, #124	; 0x7c
    657e:	f010 fbcd 	bl	16d1c <Det_ReportError>
}
    6582:	bf00      	nop
    6584:	b005      	add	sp, #20
    6586:	f85d fb04 	ldr.w	pc, [sp], #4
    658a:	bf00      	nop
    658c:	1fff8ce8 	.word	0x1fff8ce8

00006590 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    6590:	b500      	push	{lr}
    6592:	b083      	sub	sp, #12
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;

    CoreId = (uint8)Port_GetCoreID();
    6594:	2300      	movs	r3, #0
    6596:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check if Port module is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    659a:	4b12      	ldr	r3, [pc, #72]	; (65e4 <Port_RefreshPortDirection+0x54>)
    659c:	681b      	ldr	r3, [r3, #0]
    659e:	2b00      	cmp	r3, #0
    65a0:	d106      	bne.n	65b0 <Port_RefreshPortDirection+0x20>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_UNINIT);
    65a2:	230f      	movs	r3, #15
    65a4:	2202      	movs	r2, #2
    65a6:	2100      	movs	r1, #0
    65a8:	207c      	movs	r0, #124	; 0x7c
    65aa:	f010 fbb7 	bl	16d1c <Det_ReportError>
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    }
}
    65ae:	e014      	b.n	65da <Port_RefreshPortDirection+0x4a>
    else if ((uint32)1 != Port_pConfigPtr->pau8Port_PartitionList[CoreId])
    65b0:	4b0c      	ldr	r3, [pc, #48]	; (65e4 <Port_RefreshPortDirection+0x54>)
    65b2:	681b      	ldr	r3, [r3, #0]
    65b4:	69da      	ldr	r2, [r3, #28]
    65b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    65ba:	4413      	add	r3, r2
    65bc:	781b      	ldrb	r3, [r3, #0]
    65be:	2b01      	cmp	r3, #1
    65c0:	d006      	beq.n	65d0 <Port_RefreshPortDirection+0x40>
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    65c2:	23f0      	movs	r3, #240	; 0xf0
    65c4:	2202      	movs	r2, #2
    65c6:	2100      	movs	r1, #0
    65c8:	207c      	movs	r0, #124	; 0x7c
    65ca:	f010 fba7 	bl	16d1c <Det_ReportError>
}
    65ce:	e004      	b.n	65da <Port_RefreshPortDirection+0x4a>
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    65d0:	4b04      	ldr	r3, [pc, #16]	; (65e4 <Port_RefreshPortDirection+0x54>)
    65d2:	681b      	ldr	r3, [r3, #0]
    65d4:	4618      	mov	r0, r3
    65d6:	f000 febf 	bl	7358 <Port_Ipw_RefreshPortDirection>
}
    65da:	bf00      	nop
    65dc:	b003      	add	sp, #12
    65de:	f85d fb04 	ldr.w	pc, [sp], #4
    65e2:	bf00      	nop
    65e4:	1fff8ce8 	.word	0x1fff8ce8

000065e8 <Port_GetVersionInfo>:
*/
void Port_GetVersionInfo
(
    Std_VersionInfoType * versioninfo
)
{
    65e8:	b500      	push	{lr}
    65ea:	b083      	sub	sp, #12
    65ec:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    if (NULL_PTR == versioninfo)
    65ee:	9b01      	ldr	r3, [sp, #4]
    65f0:	2b00      	cmp	r3, #0
    65f2:	d106      	bne.n	6602 <Port_GetVersionInfo+0x1a>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_GETVERSIONINFO_ID, (uint8)PORT_E_PARAM_POINTER);
    65f4:	2310      	movs	r3, #16
    65f6:	2203      	movs	r2, #3
    65f8:	2100      	movs	r1, #0
    65fa:	207c      	movs	r0, #124	; 0x7c
    65fc:	f010 fb8e 	bl	16d1c <Det_ReportError>
        (versioninfo)->moduleID         = (uint16)PORT_MODULE_ID;
        (versioninfo)->sw_major_version = (uint8)PORT_SW_MAJOR_VERSION;
        (versioninfo)->sw_minor_version = (uint8)PORT_SW_MINOR_VERSION;
        (versioninfo)->sw_patch_version = (uint8)PORT_SW_PATCH_VERSION;
    }
}
    6600:	e00e      	b.n	6620 <Port_GetVersionInfo+0x38>
        (versioninfo)->vendorID         = (uint16)PORT_VENDOR_ID;
    6602:	9b01      	ldr	r3, [sp, #4]
    6604:	222b      	movs	r2, #43	; 0x2b
    6606:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID         = (uint16)PORT_MODULE_ID;
    6608:	9b01      	ldr	r3, [sp, #4]
    660a:	227c      	movs	r2, #124	; 0x7c
    660c:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)PORT_SW_MAJOR_VERSION;
    660e:	9b01      	ldr	r3, [sp, #4]
    6610:	2202      	movs	r2, #2
    6612:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)PORT_SW_MINOR_VERSION;
    6614:	9b01      	ldr	r3, [sp, #4]
    6616:	2200      	movs	r2, #0
    6618:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)PORT_SW_PATCH_VERSION;
    661a:	9b01      	ldr	r3, [sp, #4]
    661c:	2200      	movs	r2, #0
    661e:	719a      	strb	r2, [r3, #6]
}
    6620:	bf00      	nop
    6622:	b003      	add	sp, #12
    6624:	f85d fb04 	ldr.w	pc, [sp], #4

00006628 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    6628:	b086      	sub	sp, #24
    662a:	9003      	str	r0, [sp, #12]
    662c:	9102      	str	r1, [sp, #8]
    662e:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    6630:	23ff      	movs	r3, #255	; 0xff
    6632:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    6634:	9b03      	ldr	r3, [sp, #12]
    6636:	4a39      	ldr	r2, [pc, #228]	; (671c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    6638:	4293      	cmp	r3, r2
    663a:	d151      	bne.n	66e0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    663c:	9b02      	ldr	r3, [sp, #8]
    663e:	2b10      	cmp	r3, #16
    6640:	d867      	bhi.n	6712 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    6642:	a201      	add	r2, pc, #4	; (adr r2, 6648 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    6644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6648:	0000668d 	.word	0x0000668d
    664c:	0000669b 	.word	0x0000669b
    6650:	00006713 	.word	0x00006713
    6654:	00006713 	.word	0x00006713
    6658:	00006713 	.word	0x00006713
    665c:	00006713 	.word	0x00006713
    6660:	00006713 	.word	0x00006713
    6664:	00006713 	.word	0x00006713
    6668:	00006713 	.word	0x00006713
    666c:	00006713 	.word	0x00006713
    6670:	00006713 	.word	0x00006713
    6674:	00006713 	.word	0x00006713
    6678:	00006713 	.word	0x00006713
    667c:	000066a9 	.word	0x000066a9
    6680:	000066b7 	.word	0x000066b7
    6684:	000066c5 	.word	0x000066c5
    6688:	000066d3 	.word	0x000066d3
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    668c:	2301      	movs	r3, #1
    668e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6690:	9a05      	ldr	r2, [sp, #20]
    6692:	9b01      	ldr	r3, [sp, #4]
    6694:	4313      	orrs	r3, r2
    6696:	9305      	str	r3, [sp, #20]
                break;
    6698:	e03c      	b.n	6714 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    669a:	2302      	movs	r3, #2
    669c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    669e:	9a05      	ldr	r2, [sp, #20]
    66a0:	9b01      	ldr	r3, [sp, #4]
    66a2:	4313      	orrs	r3, r2
    66a4:	9305      	str	r3, [sp, #20]
                break;
    66a6:	e035      	b.n	6714 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    66a8:	2304      	movs	r3, #4
    66aa:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    66ac:	9a05      	ldr	r2, [sp, #20]
    66ae:	9b01      	ldr	r3, [sp, #4]
    66b0:	4313      	orrs	r3, r2
    66b2:	9305      	str	r3, [sp, #20]
                break;
    66b4:	e02e      	b.n	6714 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    66b6:	2308      	movs	r3, #8
    66b8:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    66ba:	9a05      	ldr	r2, [sp, #20]
    66bc:	9b01      	ldr	r3, [sp, #4]
    66be:	4313      	orrs	r3, r2
    66c0:	9305      	str	r3, [sp, #20]
                break;
    66c2:	e027      	b.n	6714 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    66c4:	230e      	movs	r3, #14
    66c6:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    66c8:	9a05      	ldr	r2, [sp, #20]
    66ca:	9b01      	ldr	r3, [sp, #4]
    66cc:	4013      	ands	r3, r2
    66ce:	9305      	str	r3, [sp, #20]
                break;
    66d0:	e020      	b.n	6714 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    66d2:	230d      	movs	r3, #13
    66d4:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    66d6:	9a05      	ldr	r2, [sp, #20]
    66d8:	9b01      	ldr	r3, [sp, #4]
    66da:	4013      	ands	r3, r2
    66dc:	9305      	str	r3, [sp, #20]
                break;
    66de:	e019      	b.n	6714 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    66e0:	9b03      	ldr	r3, [sp, #12]
    66e2:	4a0f      	ldr	r2, [pc, #60]	; (6720 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    66e4:	4293      	cmp	r3, r2
    66e6:	d115      	bne.n	6714 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    66e8:	9b02      	ldr	r3, [sp, #8]
    66ea:	2b00      	cmp	r3, #0
    66ec:	d003      	beq.n	66f6 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    66ee:	9b02      	ldr	r3, [sp, #8]
    66f0:	2b01      	cmp	r3, #1
    66f2:	d007      	beq.n	6704 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    66f4:	e00e      	b.n	6714 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    66f6:	230b      	movs	r3, #11
    66f8:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    66fa:	9a05      	ldr	r2, [sp, #20]
    66fc:	9b01      	ldr	r3, [sp, #4]
    66fe:	4013      	ands	r3, r2
    6700:	9305      	str	r3, [sp, #20]
                break;
    6702:	e007      	b.n	6714 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    6704:	2307      	movs	r3, #7
    6706:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6708:	9a05      	ldr	r2, [sp, #20]
    670a:	9b01      	ldr	r3, [sp, #4]
    670c:	4013      	ands	r3, r2
    670e:	9305      	str	r3, [sp, #20]
                break;
    6710:	e000      	b.n	6714 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    6712:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    6714:	9b05      	ldr	r3, [sp, #20]
}
    6716:	4618      	mov	r0, r3
    6718:	b006      	add	sp, #24
    671a:	4770      	bx	lr
    671c:	4004a000 	.word	0x4004a000
    6720:	4004b000 	.word	0x4004b000

00006724 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    6724:	b500      	push	{lr}
    6726:	b089      	sub	sp, #36	; 0x24
    6728:	9003      	str	r0, [sp, #12]
    672a:	9102      	str	r1, [sp, #8]
    672c:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    672e:	9b01      	ldr	r3, [sp, #4]
    6730:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    6732:	9b01      	ldr	r3, [sp, #4]
    6734:	2b08      	cmp	r3, #8
    6736:	d121      	bne.n	677c <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    6738:	4b13      	ldr	r3, [pc, #76]	; (6788 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    673a:	685b      	ldr	r3, [r3, #4]
    673c:	f003 030f 	and.w	r3, r3, #15
    6740:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    6742:	9a06      	ldr	r2, [sp, #24]
    6744:	9902      	ldr	r1, [sp, #8]
    6746:	9803      	ldr	r0, [sp, #12]
    6748:	f7ff ff6e 	bl	6628 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    674c:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    674e:	9b05      	ldr	r3, [sp, #20]
    6750:	2bff      	cmp	r3, #255	; 0xff
    6752:	d011      	beq.n	6778 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    6754:	f00e fc2a 	bl	14fac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    6758:	4b0b      	ldr	r3, [pc, #44]	; (6788 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    675a:	685b      	ldr	r3, [r3, #4]
    675c:	4a0a      	ldr	r2, [pc, #40]	; (6788 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    675e:	f023 030f 	bic.w	r3, r3, #15
    6762:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    6764:	4b08      	ldr	r3, [pc, #32]	; (6788 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6766:	685a      	ldr	r2, [r3, #4]
    6768:	9b05      	ldr	r3, [sp, #20]
    676a:	f003 030f 	and.w	r3, r3, #15
    676e:	4906      	ldr	r1, [pc, #24]	; (6788 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6770:	4313      	orrs	r3, r2
    6772:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    6774:	f00e fc46 	bl	15004 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    6778:	2300      	movs	r3, #0
    677a:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    677c:	9b07      	ldr	r3, [sp, #28]
}
    677e:	4618      	mov	r0, r3
    6780:	b009      	add	sp, #36	; 0x24
    6782:	f85d fb04 	ldr.w	pc, [sp], #4
    6786:	bf00      	nop
    6788:	40048000 	.word	0x40048000

0000678c <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    678c:	b500      	push	{lr}
    678e:	b087      	sub	sp, #28
    6790:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    6792:	2300      	movs	r3, #0
    6794:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    6796:	2300      	movs	r3, #0
    6798:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    679a:	2300      	movs	r3, #0
    679c:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    679e:	9b01      	ldr	r3, [sp, #4]
    67a0:	68db      	ldr	r3, [r3, #12]
    67a2:	2b02      	cmp	r3, #2
    67a4:	d00a      	beq.n	67bc <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    67a6:	9b05      	ldr	r3, [sp, #20]
    67a8:	f043 0302 	orr.w	r3, r3, #2
    67ac:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    67ae:	9b01      	ldr	r3, [sp, #4]
    67b0:	68db      	ldr	r3, [r3, #12]
    67b2:	f003 0301 	and.w	r3, r3, #1
    67b6:	9a05      	ldr	r2, [sp, #20]
    67b8:	4313      	orrs	r3, r2
    67ba:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    67bc:	9b01      	ldr	r3, [sp, #4]
    67be:	699b      	ldr	r3, [r3, #24]
    67c0:	019b      	lsls	r3, r3, #6
    67c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    67c6:	9a05      	ldr	r2, [sp, #20]
    67c8:	4313      	orrs	r3, r2
    67ca:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    67cc:	9b01      	ldr	r3, [sp, #4]
    67ce:	6a1b      	ldr	r3, [r3, #32]
    67d0:	03db      	lsls	r3, r3, #15
    67d2:	b29b      	uxth	r3, r3
    67d4:	9a05      	ldr	r2, [sp, #20]
    67d6:	4313      	orrs	r3, r2
    67d8:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    67da:	9b01      	ldr	r3, [sp, #4]
    67dc:	7f1b      	ldrb	r3, [r3, #28]
    67de:	2b00      	cmp	r3, #0
    67e0:	d001      	beq.n	67e6 <Port_Ci_Port_Ip_PinInit+0x5a>
    67e2:	2310      	movs	r3, #16
    67e4:	e000      	b.n	67e8 <Port_Ci_Port_Ip_PinInit+0x5c>
    67e6:	2300      	movs	r3, #0
    67e8:	9a05      	ldr	r2, [sp, #20]
    67ea:	4313      	orrs	r3, r2
    67ec:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    67ee:	9b01      	ldr	r3, [sp, #4]
    67f0:	691b      	ldr	r3, [r3, #16]
    67f2:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    67f4:	9b01      	ldr	r3, [sp, #4]
    67f6:	6818      	ldr	r0, [r3, #0]
    67f8:	9b01      	ldr	r3, [sp, #4]
    67fa:	689b      	ldr	r3, [r3, #8]
    67fc:	9a04      	ldr	r2, [sp, #16]
    67fe:	4619      	mov	r1, r3
    6800:	f7ff ff90 	bl	6724 <Port_Ci_Port_Ip_ConfigureInterleave>
    6804:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    6806:	9b03      	ldr	r3, [sp, #12]
    6808:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    680a:	9b04      	ldr	r3, [sp, #16]
    680c:	021b      	lsls	r3, r3, #8
    680e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6812:	9a05      	ldr	r2, [sp, #20]
    6814:	4313      	orrs	r3, r2
    6816:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    6818:	f00e fa2e 	bl	14c78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    681c:	9b01      	ldr	r3, [sp, #4]
    681e:	681b      	ldr	r3, [r3, #0]
    6820:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    6824:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    6826:	9b01      	ldr	r3, [sp, #4]
    6828:	689b      	ldr	r3, [r3, #8]
    682a:	2201      	movs	r2, #1
    682c:	fa02 f303 	lsl.w	r3, r2, r3
    6830:	43db      	mvns	r3, r3
    6832:	9a02      	ldr	r2, [sp, #8]
    6834:	4013      	ands	r3, r2
    6836:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    6838:	9b01      	ldr	r3, [sp, #4]
    683a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    683e:	2b00      	cmp	r3, #0
    6840:	d001      	beq.n	6846 <Port_Ci_Port_Ip_PinInit+0xba>
    6842:	2201      	movs	r2, #1
    6844:	e000      	b.n	6848 <Port_Ci_Port_Ip_PinInit+0xbc>
    6846:	2200      	movs	r2, #0
    6848:	9b01      	ldr	r3, [sp, #4]
    684a:	689b      	ldr	r3, [r3, #8]
    684c:	fa02 f303 	lsl.w	r3, r2, r3
    6850:	9a02      	ldr	r2, [sp, #8]
    6852:	4313      	orrs	r3, r2
    6854:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    6856:	9b01      	ldr	r3, [sp, #4]
    6858:	681b      	ldr	r3, [r3, #0]
    685a:	9a02      	ldr	r2, [sp, #8]
    685c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    6860:	f00e fa36 	bl	14cd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    6864:	9b04      	ldr	r3, [sp, #16]
    6866:	2b01      	cmp	r3, #1
    6868:	d16d      	bne.n	6946 <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    686a:	9b01      	ldr	r3, [sp, #4]
    686c:	695b      	ldr	r3, [r3, #20]
    686e:	2b02      	cmp	r3, #2
    6870:	d138      	bne.n	68e4 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    6872:	9b01      	ldr	r3, [sp, #4]
    6874:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6878:	2b01      	cmp	r3, #1
    687a:	d10f      	bne.n	689c <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    687c:	f00e fa4e 	bl	14d1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    6880:	9b01      	ldr	r3, [sp, #4]
    6882:	685b      	ldr	r3, [r3, #4]
    6884:	6859      	ldr	r1, [r3, #4]
    6886:	9b01      	ldr	r3, [sp, #4]
    6888:	689b      	ldr	r3, [r3, #8]
    688a:	2201      	movs	r2, #1
    688c:	409a      	lsls	r2, r3
    688e:	9b01      	ldr	r3, [sp, #4]
    6890:	685b      	ldr	r3, [r3, #4]
    6892:	430a      	orrs	r2, r1
    6894:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    6896:	f00e fa6d 	bl	14d74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    689a:	e013      	b.n	68c4 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    689c:	9b01      	ldr	r3, [sp, #4]
    689e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    68a2:	2b00      	cmp	r3, #0
    68a4:	d10e      	bne.n	68c4 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    68a6:	f00e fa8b 	bl	14dc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    68aa:	9b01      	ldr	r3, [sp, #4]
    68ac:	685b      	ldr	r3, [r3, #4]
    68ae:	6899      	ldr	r1, [r3, #8]
    68b0:	9b01      	ldr	r3, [sp, #4]
    68b2:	689b      	ldr	r3, [r3, #8]
    68b4:	2201      	movs	r2, #1
    68b6:	409a      	lsls	r2, r3
    68b8:	9b01      	ldr	r3, [sp, #4]
    68ba:	685b      	ldr	r3, [r3, #4]
    68bc:	430a      	orrs	r2, r1
    68be:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    68c0:	f00e faaa 	bl	14e18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    68c4:	f00e face 	bl	14e64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    68c8:	9b01      	ldr	r3, [sp, #4]
    68ca:	685b      	ldr	r3, [r3, #4]
    68cc:	6959      	ldr	r1, [r3, #20]
    68ce:	9b01      	ldr	r3, [sp, #4]
    68d0:	689b      	ldr	r3, [r3, #8]
    68d2:	2201      	movs	r2, #1
    68d4:	409a      	lsls	r2, r3
    68d6:	9b01      	ldr	r3, [sp, #4]
    68d8:	685b      	ldr	r3, [r3, #4]
    68da:	430a      	orrs	r2, r1
    68dc:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    68de:	f00e faed 	bl	14ebc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    68e2:	e030      	b.n	6946 <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    68e4:	f00e fabe 	bl	14e64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    68e8:	9b01      	ldr	r3, [sp, #4]
    68ea:	685b      	ldr	r3, [r3, #4]
    68ec:	6959      	ldr	r1, [r3, #20]
    68ee:	9b01      	ldr	r3, [sp, #4]
    68f0:	689b      	ldr	r3, [r3, #8]
    68f2:	2201      	movs	r2, #1
    68f4:	fa02 f303 	lsl.w	r3, r2, r3
    68f8:	43da      	mvns	r2, r3
    68fa:	9b01      	ldr	r3, [sp, #4]
    68fc:	685b      	ldr	r3, [r3, #4]
    68fe:	400a      	ands	r2, r1
    6900:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6902:	f00e fadb 	bl	14ebc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    6906:	f00e faff 	bl	14f08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    690a:	9b01      	ldr	r3, [sp, #4]
    690c:	685b      	ldr	r3, [r3, #4]
    690e:	6999      	ldr	r1, [r3, #24]
    6910:	9b01      	ldr	r3, [sp, #4]
    6912:	689b      	ldr	r3, [r3, #8]
    6914:	2201      	movs	r2, #1
    6916:	fa02 f303 	lsl.w	r3, r2, r3
    691a:	43da      	mvns	r2, r3
    691c:	9b01      	ldr	r3, [sp, #4]
    691e:	685b      	ldr	r3, [r3, #4]
    6920:	400a      	ands	r2, r1
    6922:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    6924:	9b01      	ldr	r3, [sp, #4]
    6926:	695b      	ldr	r3, [r3, #20]
    6928:	2b03      	cmp	r3, #3
    692a:	d10a      	bne.n	6942 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    692c:	9b01      	ldr	r3, [sp, #4]
    692e:	685b      	ldr	r3, [r3, #4]
    6930:	6999      	ldr	r1, [r3, #24]
    6932:	9b01      	ldr	r3, [sp, #4]
    6934:	689b      	ldr	r3, [r3, #8]
    6936:	2201      	movs	r2, #1
    6938:	409a      	lsls	r2, r3
    693a:	9b01      	ldr	r3, [sp, #4]
    693c:	685b      	ldr	r3, [r3, #4]
    693e:	430a      	orrs	r2, r1
    6940:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    6942:	f00e fb0d 	bl	14f60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    6946:	9b01      	ldr	r3, [sp, #4]
    6948:	681b      	ldr	r3, [r3, #0]
    694a:	9a01      	ldr	r2, [sp, #4]
    694c:	6892      	ldr	r2, [r2, #8]
    694e:	9905      	ldr	r1, [sp, #20]
    6950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6954:	bf00      	nop
    6956:	b007      	add	sp, #28
    6958:	f85d fb04 	ldr.w	pc, [sp], #4

0000695c <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    695c:	b500      	push	{lr}
    695e:	b085      	sub	sp, #20
    6960:	9001      	str	r0, [sp, #4]
    6962:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    6964:	2300      	movs	r3, #0
    6966:	9303      	str	r3, [sp, #12]
    6968:	e00d      	b.n	6986 <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    696a:	9a03      	ldr	r2, [sp, #12]
    696c:	4613      	mov	r3, r2
    696e:	009b      	lsls	r3, r3, #2
    6970:	4413      	add	r3, r2
    6972:	00db      	lsls	r3, r3, #3
    6974:	461a      	mov	r2, r3
    6976:	9b00      	ldr	r3, [sp, #0]
    6978:	4413      	add	r3, r2
    697a:	4618      	mov	r0, r3
    697c:	f7ff ff06 	bl	678c <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    6980:	9b03      	ldr	r3, [sp, #12]
    6982:	3301      	adds	r3, #1
    6984:	9303      	str	r3, [sp, #12]
    6986:	9a03      	ldr	r2, [sp, #12]
    6988:	9b01      	ldr	r3, [sp, #4]
    698a:	429a      	cmp	r2, r3
    698c:	d3ed      	bcc.n	696a <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    698e:	2300      	movs	r3, #0
}
    6990:	4618      	mov	r0, r3
    6992:	b005      	add	sp, #20
    6994:	f85d fb04 	ldr.w	pc, [sp], #4

00006998 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    6998:	b500      	push	{lr}
    699a:	b087      	sub	sp, #28
    699c:	9003      	str	r0, [sp, #12]
    699e:	9102      	str	r1, [sp, #8]
    69a0:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    69a2:	9a01      	ldr	r2, [sp, #4]
    69a4:	9902      	ldr	r1, [sp, #8]
    69a6:	9803      	ldr	r0, [sp, #12]
    69a8:	f7ff febc 	bl	6724 <Port_Ci_Port_Ip_ConfigureInterleave>
    69ac:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    69ae:	f00e fb4f 	bl	15050 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    69b2:	9b03      	ldr	r3, [sp, #12]
    69b4:	9a02      	ldr	r2, [sp, #8]
    69b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    69ba:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    69bc:	9b04      	ldr	r3, [sp, #16]
    69be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    69c2:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    69c4:	9b05      	ldr	r3, [sp, #20]
    69c6:	021b      	lsls	r3, r3, #8
    69c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    69cc:	9a04      	ldr	r2, [sp, #16]
    69ce:	4313      	orrs	r3, r2
    69d0:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    69d2:	9b03      	ldr	r3, [sp, #12]
    69d4:	9a02      	ldr	r2, [sp, #8]
    69d6:	9904      	ldr	r1, [sp, #16]
    69d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    69dc:	f00e fb64 	bl	150a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    69e0:	bf00      	nop
    69e2:	b007      	add	sp, #28
    69e4:	f85d fb04 	ldr.w	pc, [sp], #4

000069e8 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    69e8:	b500      	push	{lr}
    69ea:	b083      	sub	sp, #12
    69ec:	9001      	str	r0, [sp, #4]
    69ee:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    69f0:	f00e fb80 	bl	150f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    69f4:	9b01      	ldr	r3, [sp, #4]
    69f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    69fa:	2101      	movs	r1, #1
    69fc:	9b00      	ldr	r3, [sp, #0]
    69fe:	fa01 f303 	lsl.w	r3, r1, r3
    6a02:	431a      	orrs	r2, r3
    6a04:	9b01      	ldr	r3, [sp, #4]
    6a06:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    6a0a:	f00e fb9f 	bl	1514c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    6a0e:	bf00      	nop
    6a10:	b003      	add	sp, #12
    6a12:	f85d fb04 	ldr.w	pc, [sp], #4

00006a16 <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6a16:	b500      	push	{lr}
    6a18:	b083      	sub	sp, #12
    6a1a:	9001      	str	r0, [sp, #4]
    6a1c:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    6a1e:	f00e fbbb 	bl	15198 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    6a22:	9b01      	ldr	r3, [sp, #4]
    6a24:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6a28:	2101      	movs	r1, #1
    6a2a:	9b00      	ldr	r3, [sp, #0]
    6a2c:	fa01 f303 	lsl.w	r3, r1, r3
    6a30:	43db      	mvns	r3, r3
    6a32:	401a      	ands	r2, r3
    6a34:	9b01      	ldr	r3, [sp, #4]
    6a36:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    6a3a:	f00e fbd9 	bl	151f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    6a3e:	bf00      	nop
    6a40:	b003      	add	sp, #12
    6a42:	f85d fb04 	ldr.w	pc, [sp], #4

00006a46 <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    6a46:	b082      	sub	sp, #8
    6a48:	9001      	str	r0, [sp, #4]
    6a4a:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    6a4c:	9b00      	ldr	r3, [sp, #0]
    6a4e:	785b      	ldrb	r3, [r3, #1]
    6a50:	f003 0201 	and.w	r2, r3, #1
    6a54:	9b01      	ldr	r3, [sp, #4]
    6a56:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    6a5a:	9b00      	ldr	r3, [sp, #0]
    6a5c:	789b      	ldrb	r3, [r3, #2]
    6a5e:	f003 021f 	and.w	r2, r3, #31
    6a62:	9b01      	ldr	r3, [sp, #4]
    6a64:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    6a68:	bf00      	nop
    6a6a:	b002      	add	sp, #8
    6a6c:	4770      	bx	lr

00006a6e <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    6a6e:	b086      	sub	sp, #24
    6a70:	9003      	str	r0, [sp, #12]
    6a72:	9301      	str	r3, [sp, #4]
    6a74:	460b      	mov	r3, r1
    6a76:	f8ad 300a 	strh.w	r3, [sp, #10]
    6a7a:	4613      	mov	r3, r2
    6a7c:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    6a80:	2300      	movs	r3, #0
    6a82:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    6a86:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a8a:	f043 0301 	orr.w	r3, r3, #1
    6a8e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    6a92:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a96:	f043 0302 	orr.w	r3, r3, #2
    6a9a:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    6a9e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6aa2:	f043 0310 	orr.w	r3, r3, #16
    6aa6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    6aaa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6ab2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    6ab6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6aba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    6abe:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    6ac2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6ac6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    6aca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    6ace:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    6ad2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6ad6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    6ada:	4013      	ands	r3, r2
    6adc:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    6ae0:	9b01      	ldr	r3, [sp, #4]
    6ae2:	2b00      	cmp	r3, #0
    6ae4:	d003      	beq.n	6aee <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    6ae6:	9b01      	ldr	r3, [sp, #4]
    6ae8:	2b01      	cmp	r3, #1
    6aea:	d00a      	beq.n	6b02 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    6aec:	e013      	b.n	6b16 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    6aee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6af2:	041a      	lsls	r2, r3, #16
    6af4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6af8:	431a      	orrs	r2, r3
    6afa:	9b03      	ldr	r3, [sp, #12]
    6afc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    6b00:	e009      	b.n	6b16 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    6b02:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6b06:	041a      	lsls	r2, r3, #16
    6b08:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b0c:	431a      	orrs	r2, r3
    6b0e:	9b03      	ldr	r3, [sp, #12]
    6b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    6b14:	bf00      	nop
    }
}
    6b16:	bf00      	nop
    6b18:	b006      	add	sp, #24
    6b1a:	4770      	bx	lr

00006b1c <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    6b1c:	b500      	push	{lr}
    6b1e:	b087      	sub	sp, #28
    6b20:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    6b22:	9b01      	ldr	r3, [sp, #4]
    6b24:	885b      	ldrh	r3, [r3, #2]
    6b26:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    6b2a:	9b01      	ldr	r3, [sp, #4]
    6b2c:	689b      	ldr	r3, [r3, #8]
    6b2e:	7a1b      	ldrb	r3, [r3, #8]
    6b30:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    6b34:	9b01      	ldr	r3, [sp, #4]
    6b36:	689b      	ldr	r3, [r3, #8]
    6b38:	681b      	ldr	r3, [r3, #0]
    6b3a:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    6b3c:	9b01      	ldr	r3, [sp, #4]
    6b3e:	689b      	ldr	r3, [r3, #8]
    6b40:	685b      	ldr	r3, [r3, #4]
    6b42:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6b44:	2300      	movs	r3, #0
    6b46:	f8ad 3016 	strh.w	r3, [sp, #22]
    6b4a:	e111      	b.n	6d70 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    6b4c:	9b02      	ldr	r3, [sp, #8]
    6b4e:	2b02      	cmp	r3, #2
    6b50:	d169      	bne.n	6c26 <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    6b52:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6b56:	2b01      	cmp	r3, #1
    6b58:	d11a      	bne.n	6b90 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6b5a:	9b01      	ldr	r3, [sp, #4]
    6b5c:	685a      	ldr	r2, [r3, #4]
    6b5e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b62:	005b      	lsls	r3, r3, #1
    6b64:	4413      	add	r3, r2
    6b66:	881b      	ldrh	r3, [r3, #0]
    6b68:	f003 021f 	and.w	r2, r3, #31
    6b6c:	9b01      	ldr	r3, [sp, #4]
    6b6e:	6859      	ldr	r1, [r3, #4]
    6b70:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b74:	005b      	lsls	r3, r3, #1
    6b76:	440b      	add	r3, r1
    6b78:	881b      	ldrh	r3, [r3, #0]
    6b7a:	095b      	lsrs	r3, r3, #5
    6b7c:	b29b      	uxth	r3, r3
    6b7e:	4619      	mov	r1, r3
    6b80:	4b81      	ldr	r3, [pc, #516]	; (6d88 <Port_Ipw_Init_UnusedPins+0x26c>)
    6b82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6b86:	2101      	movs	r1, #1
    6b88:	fa01 f202 	lsl.w	r2, r1, r2
    6b8c:	605a      	str	r2, [r3, #4]
    6b8e:	e01d      	b.n	6bcc <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    6b90:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6b94:	2b00      	cmp	r3, #0
    6b96:	d119      	bne.n	6bcc <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6b98:	9b01      	ldr	r3, [sp, #4]
    6b9a:	685a      	ldr	r2, [r3, #4]
    6b9c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6ba0:	005b      	lsls	r3, r3, #1
    6ba2:	4413      	add	r3, r2
    6ba4:	881b      	ldrh	r3, [r3, #0]
    6ba6:	f003 021f 	and.w	r2, r3, #31
    6baa:	9b01      	ldr	r3, [sp, #4]
    6bac:	6859      	ldr	r1, [r3, #4]
    6bae:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6bb2:	005b      	lsls	r3, r3, #1
    6bb4:	440b      	add	r3, r1
    6bb6:	881b      	ldrh	r3, [r3, #0]
    6bb8:	095b      	lsrs	r3, r3, #5
    6bba:	b29b      	uxth	r3, r3
    6bbc:	4619      	mov	r1, r3
    6bbe:	4b72      	ldr	r3, [pc, #456]	; (6d88 <Port_Ipw_Init_UnusedPins+0x26c>)
    6bc0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6bc4:	2101      	movs	r1, #1
    6bc6:	fa01 f202 	lsl.w	r2, r1, r2
    6bca:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6bcc:	f00e fb36 	bl	1523c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6bd0:	9b01      	ldr	r3, [sp, #4]
    6bd2:	685a      	ldr	r2, [r3, #4]
    6bd4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6bd8:	005b      	lsls	r3, r3, #1
    6bda:	4413      	add	r3, r2
    6bdc:	881b      	ldrh	r3, [r3, #0]
    6bde:	095b      	lsrs	r3, r3, #5
    6be0:	b29b      	uxth	r3, r3
    6be2:	461a      	mov	r2, r3
    6be4:	4b68      	ldr	r3, [pc, #416]	; (6d88 <Port_Ipw_Init_UnusedPins+0x26c>)
    6be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6bea:	6959      	ldr	r1, [r3, #20]
    6bec:	9b01      	ldr	r3, [sp, #4]
    6bee:	685a      	ldr	r2, [r3, #4]
    6bf0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6bf4:	005b      	lsls	r3, r3, #1
    6bf6:	4413      	add	r3, r2
    6bf8:	881b      	ldrh	r3, [r3, #0]
    6bfa:	f003 031f 	and.w	r3, r3, #31
    6bfe:	2201      	movs	r2, #1
    6c00:	409a      	lsls	r2, r3
    6c02:	9b01      	ldr	r3, [sp, #4]
    6c04:	6858      	ldr	r0, [r3, #4]
    6c06:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c0a:	005b      	lsls	r3, r3, #1
    6c0c:	4403      	add	r3, r0
    6c0e:	881b      	ldrh	r3, [r3, #0]
    6c10:	095b      	lsrs	r3, r3, #5
    6c12:	b29b      	uxth	r3, r3
    6c14:	4618      	mov	r0, r3
    6c16:	4b5c      	ldr	r3, [pc, #368]	; (6d88 <Port_Ipw_Init_UnusedPins+0x26c>)
    6c18:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6c1c:	430a      	orrs	r2, r1
    6c1e:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6c20:	f00e fb38 	bl	15294 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    6c24:	e086      	b.n	6d34 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6c26:	f00e fb09 	bl	1523c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    6c2a:	9b01      	ldr	r3, [sp, #4]
    6c2c:	685a      	ldr	r2, [r3, #4]
    6c2e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c32:	005b      	lsls	r3, r3, #1
    6c34:	4413      	add	r3, r2
    6c36:	881b      	ldrh	r3, [r3, #0]
    6c38:	095b      	lsrs	r3, r3, #5
    6c3a:	b29b      	uxth	r3, r3
    6c3c:	461a      	mov	r2, r3
    6c3e:	4b52      	ldr	r3, [pc, #328]	; (6d88 <Port_Ipw_Init_UnusedPins+0x26c>)
    6c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6c44:	6959      	ldr	r1, [r3, #20]
    6c46:	9b01      	ldr	r3, [sp, #4]
    6c48:	685a      	ldr	r2, [r3, #4]
    6c4a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c4e:	005b      	lsls	r3, r3, #1
    6c50:	4413      	add	r3, r2
    6c52:	881b      	ldrh	r3, [r3, #0]
    6c54:	f003 031f 	and.w	r3, r3, #31
    6c58:	2201      	movs	r2, #1
    6c5a:	fa02 f303 	lsl.w	r3, r2, r3
    6c5e:	43da      	mvns	r2, r3
    6c60:	9b01      	ldr	r3, [sp, #4]
    6c62:	6858      	ldr	r0, [r3, #4]
    6c64:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c68:	005b      	lsls	r3, r3, #1
    6c6a:	4403      	add	r3, r0
    6c6c:	881b      	ldrh	r3, [r3, #0]
    6c6e:	095b      	lsrs	r3, r3, #5
    6c70:	b29b      	uxth	r3, r3
    6c72:	4618      	mov	r0, r3
    6c74:	4b44      	ldr	r3, [pc, #272]	; (6d88 <Port_Ipw_Init_UnusedPins+0x26c>)
    6c76:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6c7a:	400a      	ands	r2, r1
    6c7c:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6c7e:	f00e fb09 	bl	15294 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    6c82:	f00e fb2d 	bl	152e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6c86:	9b01      	ldr	r3, [sp, #4]
    6c88:	685a      	ldr	r2, [r3, #4]
    6c8a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c8e:	005b      	lsls	r3, r3, #1
    6c90:	4413      	add	r3, r2
    6c92:	881b      	ldrh	r3, [r3, #0]
    6c94:	095b      	lsrs	r3, r3, #5
    6c96:	b29b      	uxth	r3, r3
    6c98:	461a      	mov	r2, r3
    6c9a:	4b3b      	ldr	r3, [pc, #236]	; (6d88 <Port_Ipw_Init_UnusedPins+0x26c>)
    6c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6ca0:	6999      	ldr	r1, [r3, #24]
    6ca2:	9b01      	ldr	r3, [sp, #4]
    6ca4:	685a      	ldr	r2, [r3, #4]
    6ca6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6caa:	005b      	lsls	r3, r3, #1
    6cac:	4413      	add	r3, r2
    6cae:	881b      	ldrh	r3, [r3, #0]
    6cb0:	f003 031f 	and.w	r3, r3, #31
    6cb4:	2201      	movs	r2, #1
    6cb6:	fa02 f303 	lsl.w	r3, r2, r3
    6cba:	43da      	mvns	r2, r3
    6cbc:	9b01      	ldr	r3, [sp, #4]
    6cbe:	6858      	ldr	r0, [r3, #4]
    6cc0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6cc4:	005b      	lsls	r3, r3, #1
    6cc6:	4403      	add	r3, r0
    6cc8:	881b      	ldrh	r3, [r3, #0]
    6cca:	095b      	lsrs	r3, r3, #5
    6ccc:	b29b      	uxth	r3, r3
    6cce:	4618      	mov	r0, r3
    6cd0:	4b2d      	ldr	r3, [pc, #180]	; (6d88 <Port_Ipw_Init_UnusedPins+0x26c>)
    6cd2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6cd6:	400a      	ands	r2, r1
    6cd8:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    6cda:	9b02      	ldr	r3, [sp, #8]
    6cdc:	2b03      	cmp	r3, #3
    6cde:	d127      	bne.n	6d30 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6ce0:	9b01      	ldr	r3, [sp, #4]
    6ce2:	685a      	ldr	r2, [r3, #4]
    6ce4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6ce8:	005b      	lsls	r3, r3, #1
    6cea:	4413      	add	r3, r2
    6cec:	881b      	ldrh	r3, [r3, #0]
    6cee:	095b      	lsrs	r3, r3, #5
    6cf0:	b29b      	uxth	r3, r3
    6cf2:	461a      	mov	r2, r3
    6cf4:	4b24      	ldr	r3, [pc, #144]	; (6d88 <Port_Ipw_Init_UnusedPins+0x26c>)
    6cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6cfa:	6999      	ldr	r1, [r3, #24]
    6cfc:	9b01      	ldr	r3, [sp, #4]
    6cfe:	685a      	ldr	r2, [r3, #4]
    6d00:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6d04:	005b      	lsls	r3, r3, #1
    6d06:	4413      	add	r3, r2
    6d08:	881b      	ldrh	r3, [r3, #0]
    6d0a:	f003 031f 	and.w	r3, r3, #31
    6d0e:	2201      	movs	r2, #1
    6d10:	409a      	lsls	r2, r3
    6d12:	9b01      	ldr	r3, [sp, #4]
    6d14:	6858      	ldr	r0, [r3, #4]
    6d16:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6d1a:	005b      	lsls	r3, r3, #1
    6d1c:	4403      	add	r3, r0
    6d1e:	881b      	ldrh	r3, [r3, #0]
    6d20:	095b      	lsrs	r3, r3, #5
    6d22:	b29b      	uxth	r3, r3
    6d24:	4618      	mov	r0, r3
    6d26:	4b18      	ldr	r3, [pc, #96]	; (6d88 <Port_Ipw_Init_UnusedPins+0x26c>)
    6d28:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6d2c:	430a      	orrs	r2, r1
    6d2e:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    6d30:	f00e fb02 	bl	15338 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    6d34:	9b01      	ldr	r3, [sp, #4]
    6d36:	685a      	ldr	r2, [r3, #4]
    6d38:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6d3c:	005b      	lsls	r3, r3, #1
    6d3e:	4413      	add	r3, r2
    6d40:	881b      	ldrh	r3, [r3, #0]
    6d42:	095b      	lsrs	r3, r3, #5
    6d44:	b29b      	uxth	r3, r3
    6d46:	461a      	mov	r2, r3
    6d48:	4b10      	ldr	r3, [pc, #64]	; (6d8c <Port_Ipw_Init_UnusedPins+0x270>)
    6d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6d4e:	9a01      	ldr	r2, [sp, #4]
    6d50:	6851      	ldr	r1, [r2, #4]
    6d52:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6d56:	0052      	lsls	r2, r2, #1
    6d58:	440a      	add	r2, r1
    6d5a:	8812      	ldrh	r2, [r2, #0]
    6d5c:	f002 021f 	and.w	r2, r2, #31
    6d60:	9903      	ldr	r1, [sp, #12]
    6d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6d66:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6d6a:	3301      	adds	r3, #1
    6d6c:	f8ad 3016 	strh.w	r3, [sp, #22]
    6d70:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6d74:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6d78:	429a      	cmp	r2, r3
    6d7a:	f4ff aee7 	bcc.w	6b4c <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    6d7e:	bf00      	nop
    6d80:	bf00      	nop
    6d82:	b007      	add	sp, #28
    6d84:	f85d fb04 	ldr.w	pc, [sp], #4
    6d88:	000185c0 	.word	0x000185c0
    6d8c:	000185ac 	.word	0x000185ac

00006d90 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    6d90:	b500      	push	{lr}
    6d92:	b085      	sub	sp, #20
    6d94:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    6d96:	9b01      	ldr	r3, [sp, #4]
    6d98:	7c1b      	ldrb	r3, [r3, #16]
    6d9a:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6d9e:	2300      	movs	r3, #0
    6da0:	f8ad 300e 	strh.w	r3, [sp, #14]
    6da4:	e035      	b.n	6e12 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    6da6:	9b01      	ldr	r3, [sp, #4]
    6da8:	695a      	ldr	r2, [r3, #20]
    6daa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6dae:	00db      	lsls	r3, r3, #3
    6db0:	4413      	add	r3, r2
    6db2:	781b      	ldrb	r3, [r3, #0]
    6db4:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    6db8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6dbc:	4a29      	ldr	r2, [pc, #164]	; (6e64 <Port_Ipw_Init+0xd4>)
    6dbe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    6dc2:	9b01      	ldr	r3, [sp, #4]
    6dc4:	695a      	ldr	r2, [r3, #20]
    6dc6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6dca:	00db      	lsls	r3, r3, #3
    6dcc:	4413      	add	r3, r2
    6dce:	4619      	mov	r1, r3
    6dd0:	f7ff fe39 	bl	6a46 <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    6dd4:	f00e fc1e 	bl	15614 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    6dd8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6ddc:	4a21      	ldr	r2, [pc, #132]	; (6e64 <Port_Ipw_Init+0xd4>)
    6dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6de2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    6de6:	9b01      	ldr	r3, [sp, #4]
    6de8:	695a      	ldr	r2, [r3, #20]
    6dea:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6dee:	00db      	lsls	r3, r3, #3
    6df0:	4413      	add	r3, r2
    6df2:	685a      	ldr	r2, [r3, #4]
    6df4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6df8:	481a      	ldr	r0, [pc, #104]	; (6e64 <Port_Ipw_Init+0xd4>)
    6dfa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6dfe:	430a      	orrs	r2, r1
    6e00:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    6e04:	f00e fc32 	bl	1566c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6e08:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6e0c:	3301      	adds	r3, #1
    6e0e:	f8ad 300e 	strh.w	r3, [sp, #14]
    6e12:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6e16:	b29b      	uxth	r3, r3
    6e18:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6e1c:	429a      	cmp	r2, r3
    6e1e:	d3c2      	bcc.n	6da6 <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    6e20:	9b01      	ldr	r3, [sp, #4]
    6e22:	6a1b      	ldr	r3, [r3, #32]
    6e24:	4619      	mov	r1, r3
    6e26:	2014      	movs	r0, #20
    6e28:	f7ff fd98 	bl	695c <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    6e2c:	9801      	ldr	r0, [sp, #4]
    6e2e:	f7ff fe75 	bl	6b1c <Port_Ipw_Init_UnusedPins>
     (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
    )
    /* Port_Ipw_au16GpioDirChangeability is only used by Port_Ci_Port_Ip_SetPinDirection, Port_Ci_Port_Ip_Set2PinsDirection
       and Port_Ci_Port_Ip_SetPinMode functions */
    /* Initialize the Array with Change Direction Flags for GPIO */
    for (u16PinIndex = (uint16)0U; u16PinIndex < PAD_16BLOCK_NO_U8; u16PinIndex++)
    6e32:	2300      	movs	r3, #0
    6e34:	f8ad 300e 	strh.w	r3, [sp, #14]
    6e38:	e00a      	b.n	6e50 <Port_Ipw_Init+0xc0>
    {
        Port_Ipw_au16GpioDirChangeability[u16PinIndex] = (uint16)0UL;
    6e3a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6e3e:	4a0a      	ldr	r2, [pc, #40]	; (6e68 <Port_Ipw_Init+0xd8>)
    6e40:	2100      	movs	r1, #0
    6e42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (u16PinIndex = (uint16)0U; u16PinIndex < PAD_16BLOCK_NO_U8; u16PinIndex++)
    6e46:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6e4a:	3301      	adds	r3, #1
    6e4c:	f8ad 300e 	strh.w	r3, [sp, #14]
    6e50:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6e54:	2b09      	cmp	r3, #9
    6e56:	d9f0      	bls.n	6e3a <Port_Ipw_Init+0xaa>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    6e58:	bf00      	nop
    6e5a:	bf00      	nop
    6e5c:	b005      	add	sp, #20
    6e5e:	f85d fb04 	ldr.w	pc, [sp], #4
    6e62:	bf00      	nop
    6e64:	000185ac 	.word	0x000185ac
    6e68:	1fff8cec 	.word	0x1fff8cec

00006e6c <Port_Ipw_SetPinDirection>:
(
    Port_PinType            PinIndex,
    Port_PinDirectionType   eDirection,
    const Port_ConfigType * pConfigPtr
)
{
    6e6c:	b500      	push	{lr}
    6e6e:	b087      	sub	sp, #28
    6e70:	9003      	str	r0, [sp, #12]
    6e72:	9102      	str	r1, [sp, #8]
    6e74:	9201      	str	r2, [sp, #4]
    /* Point to the Port Pin PCR register address */
    uint16 Pin = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    6e76:	9b01      	ldr	r3, [sp, #4]
    6e78:	68d9      	ldr	r1, [r3, #12]
    6e7a:	9a03      	ldr	r2, [sp, #12]
    6e7c:	4613      	mov	r3, r2
    6e7e:	009b      	lsls	r3, r3, #2
    6e80:	4413      	add	r3, r2
    6e82:	009b      	lsls	r3, r3, #2
    6e84:	440b      	add	r3, r1
    6e86:	881b      	ldrh	r3, [r3, #0]
    6e88:	f8ad 3014 	strh.w	r3, [sp, #20]
    /* Return value */
    Std_ReturnType PinDirError             = (Std_ReturnType)E_OK;
    6e8c:	2300      	movs	r3, #0
    6e8e:	f88d 3017 	strb.w	r3, [sp, #23]

#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;
    CoreId = (uint8)Port_GetCoreID();
    6e92:	2300      	movs	r3, #0
    6e94:	f88d 3013 	strb.w	r3, [sp, #19]

    if ((PinIndex >= (Port_PinType)pConfigPtr->u16NumPins))
    6e98:	9b01      	ldr	r3, [sp, #4]
    6e9a:	881b      	ldrh	r3, [r3, #0]
    6e9c:	461a      	mov	r2, r3
    6e9e:	9b03      	ldr	r3, [sp, #12]
    6ea0:	4293      	cmp	r3, r2
    6ea2:	d306      	bcc.n	6eb2 <Port_Ipw_SetPinDirection+0x46>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_PARAM_PIN);
    6ea4:	230a      	movs	r3, #10
    6ea6:	2201      	movs	r2, #1
    6ea8:	2100      	movs	r1, #0
    6eaa:	207c      	movs	r0, #124	; 0x7c
    6eac:	f00f ff36 	bl	16d1c <Det_ReportError>
    6eb0:	e0c9      	b.n	7046 <Port_Ipw_SetPinDirection+0x1da>
    }
    /* Check port pin validity */
    else if ((uint32)1 != (((pConfigPtr->pau32Port_PinToPartitionMap[PinIndex]) & ((uint32)1 << CoreId)) >> CoreId))
    6eb2:	9b01      	ldr	r3, [sp, #4]
    6eb4:	699a      	ldr	r2, [r3, #24]
    6eb6:	9b03      	ldr	r3, [sp, #12]
    6eb8:	009b      	lsls	r3, r3, #2
    6eba:	4413      	add	r3, r2
    6ebc:	681a      	ldr	r2, [r3, #0]
    6ebe:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6ec2:	2101      	movs	r1, #1
    6ec4:	fa01 f303 	lsl.w	r3, r1, r3
    6ec8:	401a      	ands	r2, r3
    6eca:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6ece:	fa22 f303 	lsr.w	r3, r2, r3
    6ed2:	2b01      	cmp	r3, #1
    6ed4:	d006      	beq.n	6ee4 <Port_Ipw_SetPinDirection+0x78>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    6ed6:	23f0      	movs	r3, #240	; 0xf0
    6ed8:	2201      	movs	r2, #1
    6eda:	2100      	movs	r1, #0
    6edc:	207c      	movs	r0, #124	; 0x7c
    6ede:	f00f ff1d 	bl	16d1c <Det_ReportError>
    6ee2:	e0b0      	b.n	7046 <Port_Ipw_SetPinDirection+0x1da>
    }
    else
    {
        /* Bit Offset and Table value for change direction flag word */
        uint8 u8PinDescBitOffset       = (uint8)(Pin & PORT_CI_BIT_OFFSET_MASK_U8);
    6ee4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6ee8:	b2db      	uxtb	r3, r3
    6eea:	f003 030f 	and.w	r3, r3, #15
    6eee:	f88d 3012 	strb.w	r3, [sp, #18]
        /* Number of block 16 */
        uint16 u16PinChangeDirFlagWord  = Port_Ipw_au16GpioDirChangeability[(uint8)(Pin >> 4)];
    6ef2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6ef6:	091b      	lsrs	r3, r3, #4
    6ef8:	b29b      	uxth	r3, r3
    6efa:	b2db      	uxtb	r3, r3
    6efc:	461a      	mov	r2, r3
    6efe:	4b55      	ldr	r3, [pc, #340]	; (7054 <Port_Ipw_SetPinDirection+0x1e8>)
    6f00:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    6f04:	f8ad 3010 	strh.w	r3, [sp, #16]

        /* Check the Direction changeability option */
        if ((TRUE == pConfigPtr->pUsedPadConfig[PinIndex].bDC) || ((uint16)0 != (u16PinChangeDirFlagWord & (uint16)(1UL << u8PinDescBitOffset))))
    6f08:	9b01      	ldr	r3, [sp, #4]
    6f0a:	68d9      	ldr	r1, [r3, #12]
    6f0c:	9a03      	ldr	r2, [sp, #12]
    6f0e:	4613      	mov	r3, r2
    6f10:	009b      	lsls	r3, r3, #2
    6f12:	4413      	add	r3, r2
    6f14:	009b      	lsls	r3, r3, #2
    6f16:	440b      	add	r3, r1
    6f18:	7c5b      	ldrb	r3, [r3, #17]
    6f1a:	2b00      	cmp	r3, #0
    6f1c:	d10c      	bne.n	6f38 <Port_Ipw_SetPinDirection+0xcc>
    6f1e:	f89d 3012 	ldrb.w	r3, [sp, #18]
    6f22:	2201      	movs	r2, #1
    6f24:	fa02 f303 	lsl.w	r3, r2, r3
    6f28:	b29a      	uxth	r2, r3
    6f2a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    6f2e:	4013      	ands	r3, r2
    6f30:	b29b      	uxth	r3, r3
    6f32:	2b00      	cmp	r3, #0
    6f34:	f000 8082 	beq.w	703c <Port_Ipw_SetPinDirection+0x1d0>
        {
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
            /* Configures Port Pin as Output */
            if (PORT_PIN_OUT == eDirection)
    6f38:	9b02      	ldr	r3, [sp, #8]
    6f3a:	2b02      	cmp	r3, #2
    6f3c:	d11d      	bne.n	6f7a <Port_Ipw_SetPinDirection+0x10e>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16();
    6f3e:	f00e fbbb 	bl	156b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PDDR |= (uint32)(1UL << GPIO_CHANNEL_U32(Pin));
    6f42:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f46:	095b      	lsrs	r3, r3, #5
    6f48:	b29b      	uxth	r3, r3
    6f4a:	461a      	mov	r2, r3
    6f4c:	4b42      	ldr	r3, [pc, #264]	; (7058 <Port_Ipw_SetPinDirection+0x1ec>)
    6f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6f52:	6959      	ldr	r1, [r3, #20]
    6f54:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f58:	f003 031f 	and.w	r3, r3, #31
    6f5c:	2201      	movs	r2, #1
    6f5e:	409a      	lsls	r2, r3
    6f60:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f64:	095b      	lsrs	r3, r3, #5
    6f66:	b29b      	uxth	r3, r3
    6f68:	4618      	mov	r0, r3
    6f6a:	4b3b      	ldr	r3, [pc, #236]	; (7058 <Port_Ipw_SetPinDirection+0x1ec>)
    6f6c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6f70:	430a      	orrs	r2, r1
    6f72:	615a      	str	r2, [r3, #20]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16();
    6f74:	f00e fbcc 	bl	15710 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>
            if (PORT_PIN_OUT == eDirection)
    6f78:	e064      	b.n	7044 <Port_Ipw_SetPinDirection+0x1d8>
            }
            /* Configures Port Pin as Input or High-Z*/
            else if ((PORT_PIN_IN == eDirection) || (PORT_PIN_HIGH_Z == eDirection))
    6f7a:	9b02      	ldr	r3, [sp, #8]
    6f7c:	2b01      	cmp	r3, #1
    6f7e:	d002      	beq.n	6f86 <Port_Ipw_SetPinDirection+0x11a>
    6f80:	9b02      	ldr	r3, [sp, #8]
    6f82:	2b03      	cmp	r3, #3
    6f84:	d15e      	bne.n	7044 <Port_Ipw_SetPinDirection+0x1d8>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16();
    6f86:	f00e fb97 	bl	156b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PDDR &= ~((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    6f8a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f8e:	095b      	lsrs	r3, r3, #5
    6f90:	b29b      	uxth	r3, r3
    6f92:	461a      	mov	r2, r3
    6f94:	4b30      	ldr	r3, [pc, #192]	; (7058 <Port_Ipw_SetPinDirection+0x1ec>)
    6f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6f9a:	6959      	ldr	r1, [r3, #20]
    6f9c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6fa0:	f003 031f 	and.w	r3, r3, #31
    6fa4:	2201      	movs	r2, #1
    6fa6:	fa02 f303 	lsl.w	r3, r2, r3
    6faa:	43da      	mvns	r2, r3
    6fac:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6fb0:	095b      	lsrs	r3, r3, #5
    6fb2:	b29b      	uxth	r3, r3
    6fb4:	4618      	mov	r0, r3
    6fb6:	4b28      	ldr	r3, [pc, #160]	; (7058 <Port_Ipw_SetPinDirection+0x1ec>)
    6fb8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6fbc:	400a      	ands	r2, r1
    6fbe:	615a      	str	r2, [r3, #20]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16();
    6fc0:	f00e fba6 	bl	15710 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17();
    6fc4:	f00e fbca 	bl	1575c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PIDR &= ~((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    6fc8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6fcc:	095b      	lsrs	r3, r3, #5
    6fce:	b29b      	uxth	r3, r3
    6fd0:	461a      	mov	r2, r3
    6fd2:	4b21      	ldr	r3, [pc, #132]	; (7058 <Port_Ipw_SetPinDirection+0x1ec>)
    6fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6fd8:	6999      	ldr	r1, [r3, #24]
    6fda:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6fde:	f003 031f 	and.w	r3, r3, #31
    6fe2:	2201      	movs	r2, #1
    6fe4:	fa02 f303 	lsl.w	r3, r2, r3
    6fe8:	43da      	mvns	r2, r3
    6fea:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6fee:	095b      	lsrs	r3, r3, #5
    6ff0:	b29b      	uxth	r3, r3
    6ff2:	4618      	mov	r0, r3
    6ff4:	4b18      	ldr	r3, [pc, #96]	; (7058 <Port_Ipw_SetPinDirection+0x1ec>)
    6ff6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6ffa:	400a      	ands	r2, r1
    6ffc:	619a      	str	r2, [r3, #24]

                /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                if (PORT_PIN_HIGH_Z == eDirection)
    6ffe:	9b02      	ldr	r3, [sp, #8]
    7000:	2b03      	cmp	r3, #3
    7002:	d118      	bne.n	7036 <Port_Ipw_SetPinDirection+0x1ca>
                {
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PIDR |= ((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    7004:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7008:	095b      	lsrs	r3, r3, #5
    700a:	b29b      	uxth	r3, r3
    700c:	461a      	mov	r2, r3
    700e:	4b12      	ldr	r3, [pc, #72]	; (7058 <Port_Ipw_SetPinDirection+0x1ec>)
    7010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7014:	6999      	ldr	r1, [r3, #24]
    7016:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    701a:	f003 031f 	and.w	r3, r3, #31
    701e:	2201      	movs	r2, #1
    7020:	409a      	lsls	r2, r3
    7022:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7026:	095b      	lsrs	r3, r3, #5
    7028:	b29b      	uxth	r3, r3
    702a:	4618      	mov	r0, r3
    702c:	4b0a      	ldr	r3, [pc, #40]	; (7058 <Port_Ipw_SetPinDirection+0x1ec>)
    702e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7032:	430a      	orrs	r2, r1
    7034:	619a      	str	r2, [r3, #24]
                }
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17();
    7036:	f00e fbbd 	bl	157b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>
            if (PORT_PIN_OUT == eDirection)
    703a:	e003      	b.n	7044 <Port_Ipw_SetPinDirection+0x1d8>
#if (STD_ON == PORT_DEV_ERROR_DETECT)
        }
        /* Direction changeability is NOT supported */
        else
        {
            PinDirError = (Std_ReturnType)E_NOT_OK;
    703c:	2301      	movs	r3, #1
    703e:	f88d 3017 	strb.w	r3, [sp, #23]
    7042:	e000      	b.n	7046 <Port_Ipw_SetPinDirection+0x1da>
            if (PORT_PIN_OUT == eDirection)
    7044:	bf00      	nop
        }
    }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

    return PinDirError;
    7046:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    704a:	4618      	mov	r0, r3
    704c:	b007      	add	sp, #28
    704e:	f85d fb04 	ldr.w	pc, [sp], #4
    7052:	bf00      	nop
    7054:	1fff8cec 	.word	0x1fff8cec
    7058:	000185c0 	.word	0x000185c0

0000705c <Port_Ipw_SetPinMode>:
(
    Port_PinType PinIndex,
    Port_PinModeType PinMode,
    const Port_ConfigType * pConfigPtr
)
{
    705c:	b500      	push	{lr}
    705e:	b08b      	sub	sp, #44	; 0x2c
    7060:	9003      	str	r0, [sp, #12]
    7062:	460b      	mov	r3, r1
    7064:	9201      	str	r2, [sp, #4]
    7066:	f88d 300b 	strb.w	r3, [sp, #11]
    Std_ReturnType PinModeError             = (Std_ReturnType)0UL;
    706a:	2300      	movs	r3, #0
    706c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint16 PinPad                           = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    7070:	9b01      	ldr	r3, [sp, #4]
    7072:	68d9      	ldr	r1, [r3, #12]
    7074:	9a03      	ldr	r2, [sp, #12]
    7076:	4613      	mov	r3, r2
    7078:	009b      	lsls	r3, r3, #2
    707a:	4413      	add	r3, r2
    707c:	009b      	lsls	r3, r3, #2
    707e:	440b      	add	r3, r1
    7080:	881b      	ldrh	r3, [r3, #0]
    7082:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    Port_PinModeType PinCfgRegValue         = (Port_PinModeType)PinMode;
    7086:	f89d 300b 	ldrb.w	r3, [sp, #11]
    708a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint16 u16PinDescBitOffset;
    /* Variable used to clear and updated PCR register */
    uint32 u32LocalPCR;
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;
    CoreId = (uint8)Port_GetCoreID();
    708e:	2300      	movs	r3, #0
    7090:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22

    if ((PinIndex >= (Port_PinType)pConfigPtr->u16NumPins))
    7094:	9b01      	ldr	r3, [sp, #4]
    7096:	881b      	ldrh	r3, [r3, #0]
    7098:	461a      	mov	r2, r3
    709a:	9b03      	ldr	r3, [sp, #12]
    709c:	4293      	cmp	r3, r2
    709e:	d306      	bcc.n	70ae <Port_Ipw_SetPinMode+0x52>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_PIN);
    70a0:	230a      	movs	r3, #10
    70a2:	2204      	movs	r2, #4
    70a4:	2100      	movs	r1, #0
    70a6:	207c      	movs	r0, #124	; 0x7c
    70a8:	f00f fe38 	bl	16d1c <Det_ReportError>
    70ac:	e0b3      	b.n	7216 <Port_Ipw_SetPinMode+0x1ba>
    }
    /* Check if this function was called with wrong core */
    else if ((uint32)1 != (((pConfigPtr->pau32Port_PinToPartitionMap[PinIndex]) & ((uint32)1 << CoreId)) >> CoreId))
    70ae:	9b01      	ldr	r3, [sp, #4]
    70b0:	699a      	ldr	r2, [r3, #24]
    70b2:	9b03      	ldr	r3, [sp, #12]
    70b4:	009b      	lsls	r3, r3, #2
    70b6:	4413      	add	r3, r2
    70b8:	681a      	ldr	r2, [r3, #0]
    70ba:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    70be:	2101      	movs	r1, #1
    70c0:	fa01 f303 	lsl.w	r3, r1, r3
    70c4:	401a      	ands	r2, r3
    70c6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    70ca:	fa22 f303 	lsr.w	r3, r2, r3
    70ce:	2b01      	cmp	r3, #1
    70d0:	d006      	beq.n	70e0 <Port_Ipw_SetPinMode+0x84>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_CONFIG);
    70d2:	23f0      	movs	r3, #240	; 0xf0
    70d4:	2204      	movs	r2, #4
    70d6:	2100      	movs	r1, #0
    70d8:	207c      	movs	r0, #124	; 0x7c
    70da:	f00f fe1f 	bl	16d1c <Det_ReportError>
    70de:	e09a      	b.n	7216 <Port_Ipw_SetPinMode+0x1ba>
    }
    /* Check port pin mode Unchangeable */
    else if (FALSE ==  pConfigPtr->pUsedPadConfig[PinIndex].bMC)
    70e0:	9b01      	ldr	r3, [sp, #4]
    70e2:	68d9      	ldr	r1, [r3, #12]
    70e4:	9a03      	ldr	r2, [sp, #12]
    70e6:	4613      	mov	r3, r2
    70e8:	009b      	lsls	r3, r3, #2
    70ea:	4413      	add	r3, r2
    70ec:	009b      	lsls	r3, r3, #2
    70ee:	440b      	add	r3, r1
    70f0:	7c9b      	ldrb	r3, [r3, #18]
    70f2:	f083 0301 	eor.w	r3, r3, #1
    70f6:	b2db      	uxtb	r3, r3
    70f8:	2b00      	cmp	r3, #0
    70fa:	d006      	beq.n	710a <Port_Ipw_SetPinMode+0xae>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_MODE_UNCHANGEABLE);
    70fc:	230e      	movs	r3, #14
    70fe:	2204      	movs	r2, #4
    7100:	2100      	movs	r1, #0
    7102:	207c      	movs	r0, #124	; 0x7c
    7104:	f00f fe0a 	bl	16d1c <Det_ReportError>
    7108:	e085      	b.n	7216 <Port_Ipw_SetPinMode+0x1ba>
    }
    else
    {
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

        if (PAD_MODE_OPTIONS_U8 <= PinMode)
    710a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    710e:	2b07      	cmp	r3, #7
    7110:	d903      	bls.n	711a <Port_Ipw_SetPinMode+0xbe>
        {
            PinModeError = PORT_E_PARAM_INVALID_MODE;
    7112:	230d      	movs	r3, #13
    7114:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    7118:	e07d      	b.n	7216 <Port_Ipw_SetPinMode+0x1ba>
        }
        else
        {
            Port_PinDirectionType ePadDirection = PORT_PIN_DISABLED;
    711a:	2300      	movs	r3, #0
    711c:	9307      	str	r3, [sp, #28]

            /* Bit offset of Pin index inside the pin description matrix */
            u16PinDescBitOffset = PinPad & PORT_MODE_BIT_OFFSET_MASK_U8;
    711e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7122:	f003 030f 	and.w	r3, r3, #15
    7126:	f8ad 301a 	strh.w	r3, [sp, #26]
            /* Selected word inside the pin description matrix */
            u16PinDescWord = (uint16)Port_au16PinDescription[(uint8)PinMode][PinPad >> 4U];
    712a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    712e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7132:	091b      	lsrs	r3, r3, #4
    7134:	b29b      	uxth	r3, r3
    7136:	4618      	mov	r0, r3
    7138:	493a      	ldr	r1, [pc, #232]	; (7224 <Port_Ipw_SetPinMode+0x1c8>)
    713a:	4613      	mov	r3, r2
    713c:	009b      	lsls	r3, r3, #2
    713e:	4413      	add	r3, r2
    7140:	005b      	lsls	r3, r3, #1
    7142:	4403      	add	r3, r0
    7144:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    7148:	f8ad 3018 	strh.w	r3, [sp, #24]

            /* Check if desired mode is valid for selected pin */
            if ((u16PinDescWord & ((uint16)1UL<<u16PinDescBitOffset)) != (uint16)0U)
    714c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    7150:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    7154:	fa42 f303 	asr.w	r3, r2, r3
    7158:	f003 0301 	and.w	r3, r3, #1
    715c:	2b00      	cmp	r3, #0
    715e:	d057      	beq.n	7210 <Port_Ipw_SetPinMode+0x1b4>
            {
                switch(PinMode)
    7160:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7164:	2b01      	cmp	r3, #1
    7166:	d11f      	bne.n	71a8 <Port_Ipw_SetPinMode+0x14c>
                {
                    case PORT_GPIO_MODE:
#if (STD_ON == PORT_DEV_ERROR_DETECT)
                        Port_Ipw_SetGpioDirChangeability(PinPad, TRUE);
    7168:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    716c:	2101      	movs	r1, #1
    716e:	4618      	mov	r0, r3
    7170:	f000 f85c 	bl	722c <Port_Ipw_SetGpioDirChangeability>
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
                        ePadDirection = pConfigPtr->pUsedPadConfig[PinIndex].ePadDir;
    7174:	9b01      	ldr	r3, [sp, #4]
    7176:	68d9      	ldr	r1, [r3, #12]
    7178:	9a03      	ldr	r2, [sp, #12]
    717a:	4613      	mov	r3, r2
    717c:	009b      	lsls	r3, r3, #2
    717e:	4413      	add	r3, r2
    7180:	009b      	lsls	r3, r3, #2
    7182:	440b      	add	r3, r1
    7184:	68db      	ldr	r3, [r3, #12]
    7186:	9307      	str	r3, [sp, #28]
#if (STD_OFF == PORT_SETPINMODE_DOES_NOT_TOUCH_GPIO_LEVEL)
                        if ((PORT_PIN_IN != ePadDirection) && (PORT_PIN_HIGH_Z != ePadDirection))
    7188:	9b07      	ldr	r3, [sp, #28]
    718a:	2b01      	cmp	r3, #1
    718c:	d006      	beq.n	719c <Port_Ipw_SetPinMode+0x140>
    718e:	9b07      	ldr	r3, [sp, #28]
    7190:	2b03      	cmp	r3, #3
    7192:	d003      	beq.n	719c <Port_Ipw_SetPinMode+0x140>
                        {
                            Port_Ipw_SetGpioPadOutput(PinIndex, pConfigPtr);
    7194:	9901      	ldr	r1, [sp, #4]
    7196:	9803      	ldr	r0, [sp, #12]
    7198:	f000 f896 	bl	72c8 <Port_Ipw_SetGpioPadOutput>
                        }
#endif /* (STD_OFF == PORT_SETPINMODE_DOES_NOT_TOUCH_GPIO_LEVEL) */
                        (void)Port_Ipw_SetPinDirection(PinIndex, ePadDirection, pConfigPtr);
    719c:	9a01      	ldr	r2, [sp, #4]
    719e:	9907      	ldr	r1, [sp, #28]
    71a0:	9803      	ldr	r0, [sp, #12]
    71a2:	f7ff fe63 	bl	6e6c <Port_Ipw_SetPinDirection>
                        break;
    71a6:	e006      	b.n	71b6 <Port_Ipw_SetPinMode+0x15a>

                    default:
#if (STD_ON == PORT_DEV_ERROR_DETECT)
                    /* All the ALT modes except GPIO*/
                        Port_Ipw_SetGpioDirChangeability(PinPad,FALSE);
    71a8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    71ac:	2100      	movs	r1, #0
    71ae:	4618      	mov	r0, r3
    71b0:	f000 f83c 	bl	722c <Port_Ipw_SetGpioDirChangeability>
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
                        break;
    71b4:	bf00      	nop
                }
                /* Sets the port pin mode */
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27();
    71b6:	f00e fe05 	bl	15dc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>
                u32LocalPCR  = (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(PinPad)])->PCR[GPIO_CHANNEL_U32(PinPad)];
    71ba:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    71be:	095b      	lsrs	r3, r3, #5
    71c0:	b29b      	uxth	r3, r3
    71c2:	461a      	mov	r2, r3
    71c4:	4b18      	ldr	r3, [pc, #96]	; (7228 <Port_Ipw_SetPinMode+0x1cc>)
    71c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    71ca:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    71ce:	f002 021f 	and.w	r2, r2, #31
    71d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    71d6:	9305      	str	r3, [sp, #20]

                u32LocalPCR &= ~(PORT_CI_PCR_ALT_MODE_U32);
    71d8:	9b05      	ldr	r3, [sp, #20]
    71da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    71de:	9305      	str	r3, [sp, #20]
                u32LocalPCR |= ((uint32)PinCfgRegValue << PORT_CI_PCR_ALT_MODE_OFFSET_U32);
    71e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    71e4:	021b      	lsls	r3, r3, #8
    71e6:	9a05      	ldr	r2, [sp, #20]
    71e8:	4313      	orrs	r3, r2
    71ea:	9305      	str	r3, [sp, #20]

                (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(PinPad)])->PCR[GPIO_CHANNEL_U32(PinPad)] = u32LocalPCR;
    71ec:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    71f0:	095b      	lsrs	r3, r3, #5
    71f2:	b29b      	uxth	r3, r3
    71f4:	461a      	mov	r2, r3
    71f6:	4b0c      	ldr	r3, [pc, #48]	; (7228 <Port_Ipw_SetPinMode+0x1cc>)
    71f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    71fc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    7200:	f002 021f 	and.w	r2, r2, #31
    7204:	9905      	ldr	r1, [sp, #20]
    7206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27();
    720a:	f00e fe07 	bl	15e1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>
    720e:	e002      	b.n	7216 <Port_Ipw_SetPinMode+0x1ba>
            }
            else
            {
                PinModeError = PORT_E_PARAM_INVALID_MODE;
    7210:	230d      	movs	r3, #13
    7212:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

    return PinModeError;
    7216:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    721a:	4618      	mov	r0, r3
    721c:	b00b      	add	sp, #44	; 0x2c
    721e:	f85d fb04 	ldr.w	pc, [sp], #4
    7222:	bf00      	nop
    7224:	00019278 	.word	0x00019278
    7228:	000185ac 	.word	0x000185ac

0000722c <Port_Ipw_SetGpioDirChangeability>:
void Port_Ipw_SetGpioDirChangeability
(
    uint16 PadID,
    boolean bStatus
)
{
    722c:	b500      	push	{lr}
    722e:	b085      	sub	sp, #20
    7230:	4603      	mov	r3, r0
    7232:	460a      	mov	r2, r1
    7234:	f8ad 3006 	strh.w	r3, [sp, #6]
    7238:	4613      	mov	r3, r2
    723a:	f88d 3005 	strb.w	r3, [sp, #5]
    /* Pin description variables */
    uint8 u8PinBitOffset;
    uint16 u16PinDirFlagWord;

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18();
    723e:	f00e fadf 	bl	15800 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>
    /* Bit offset of Pin index inside the pin description matrix */
    u8PinBitOffset      = (uint8)((uint8)PadID & PORT_CI_BIT_OFFSET_MASK_U8);
    7242:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7246:	b2db      	uxtb	r3, r3
    7248:	f003 030f 	and.w	r3, r3, #15
    724c:	f88d 300d 	strb.w	r3, [sp, #13]
    u16PinDirFlagWord   = Port_Ipw_au16GpioDirChangeability[(uint8)((uint8)PadID >> 4)];
    7250:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7254:	b2db      	uxtb	r3, r3
    7256:	091b      	lsrs	r3, r3, #4
    7258:	b2db      	uxtb	r3, r3
    725a:	461a      	mov	r2, r3
    725c:	4b19      	ldr	r3, [pc, #100]	; (72c4 <Port_Ipw_SetGpioDirChangeability+0x98>)
    725e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    7262:	f8ad 300e 	strh.w	r3, [sp, #14]

    if (TRUE == bStatus)
    7266:	f89d 3005 	ldrb.w	r3, [sp, #5]
    726a:	2b00      	cmp	r3, #0
    726c:	d00b      	beq.n	7286 <Port_Ipw_SetGpioDirChangeability+0x5a>
    {
        /* Set the change direction flag */
        u16PinDirFlagWord |= (uint16)(1UL<<u8PinBitOffset);
    726e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7272:	2201      	movs	r2, #1
    7274:	fa02 f303 	lsl.w	r3, r2, r3
    7278:	b29a      	uxth	r2, r3
    727a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    727e:	4313      	orrs	r3, r2
    7280:	f8ad 300e 	strh.w	r3, [sp, #14]
    7284:	e00c      	b.n	72a0 <Port_Ipw_SetGpioDirChangeability+0x74>
    }
    else
    {
        /* Reset the change direction flag */
        u16PinDirFlagWord &= (uint16)(~((uint16)(1UL<<u8PinBitOffset)));
    7286:	f89d 300d 	ldrb.w	r3, [sp, #13]
    728a:	2201      	movs	r2, #1
    728c:	fa02 f303 	lsl.w	r3, r2, r3
    7290:	b29b      	uxth	r3, r3
    7292:	43db      	mvns	r3, r3
    7294:	b29a      	uxth	r2, r3
    7296:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    729a:	4013      	ands	r3, r2
    729c:	f8ad 300e 	strh.w	r3, [sp, #14]
    }
    Port_Ipw_au16GpioDirChangeability[(uint8)((uint8)PadID >> 4)] = u16PinDirFlagWord;
    72a0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    72a4:	b2db      	uxtb	r3, r3
    72a6:	091b      	lsrs	r3, r3, #4
    72a8:	b2db      	uxtb	r3, r3
    72aa:	4619      	mov	r1, r3
    72ac:	4a05      	ldr	r2, [pc, #20]	; (72c4 <Port_Ipw_SetGpioDirChangeability+0x98>)
    72ae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    72b2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    /* Exit critical region */
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18();
    72b6:	f00e facf 	bl	15858 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>
}
    72ba:	bf00      	nop
    72bc:	b005      	add	sp, #20
    72be:	f85d fb04 	ldr.w	pc, [sp], #4
    72c2:	bf00      	nop
    72c4:	1fff8cec 	.word	0x1fff8cec

000072c8 <Port_Ipw_SetGpioPadOutput>:
void Port_Ipw_SetGpioPadOutput
(
    Port_PinType            PinIndex,
    const Port_ConfigType * pConfigPtr
)
{
    72c8:	b084      	sub	sp, #16
    72ca:	9001      	str	r0, [sp, #4]
    72cc:	9100      	str	r1, [sp, #0]
    uint16 Pin = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    72ce:	9b00      	ldr	r3, [sp, #0]
    72d0:	68d9      	ldr	r1, [r3, #12]
    72d2:	9a01      	ldr	r2, [sp, #4]
    72d4:	4613      	mov	r3, r2
    72d6:	009b      	lsls	r3, r3, #2
    72d8:	4413      	add	r3, r2
    72da:	009b      	lsls	r3, r3, #2
    72dc:	440b      	add	r3, r1
    72de:	881b      	ldrh	r3, [r3, #0]
    72e0:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint8 u8LocalPDO = pConfigPtr->pUsedPadConfig[PinIndex].u8PDO;
    72e4:	9b00      	ldr	r3, [sp, #0]
    72e6:	68d9      	ldr	r1, [r3, #12]
    72e8:	9a01      	ldr	r2, [sp, #4]
    72ea:	4613      	mov	r3, r2
    72ec:	009b      	lsls	r3, r3, #2
    72ee:	4413      	add	r3, r2
    72f0:	009b      	lsls	r3, r3, #2
    72f2:	440b      	add	r3, r1
    72f4:	7a1b      	ldrb	r3, [r3, #8]
    72f6:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Set pin to High value */
    if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    72fa:	f89d 300d 	ldrb.w	r3, [sp, #13]
    72fe:	2b01      	cmp	r3, #1
    7300:	d110      	bne.n	7324 <Port_Ipw_SetGpioPadOutput+0x5c>
    {
        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(Pin));
    7302:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7306:	f003 021f 	and.w	r2, r3, #31
    730a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    730e:	095b      	lsrs	r3, r3, #5
    7310:	b29b      	uxth	r3, r3
    7312:	4619      	mov	r1, r3
    7314:	4b0f      	ldr	r3, [pc, #60]	; (7354 <Port_Ipw_SetGpioPadOutput+0x8c>)
    7316:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    731a:	2101      	movs	r1, #1
    731c:	fa01 f202 	lsl.w	r2, r1, r2
    7320:	605a      	str	r2, [r3, #4]
    }
    else
    {
        /* No action to be done */
    }
}
    7322:	e013      	b.n	734c <Port_Ipw_SetGpioPadOutput+0x84>
    else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    7324:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7328:	2b00      	cmp	r3, #0
    732a:	d10f      	bne.n	734c <Port_Ipw_SetGpioPadOutput+0x84>
        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(Pin));
    732c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7330:	f003 021f 	and.w	r2, r3, #31
    7334:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7338:	095b      	lsrs	r3, r3, #5
    733a:	b29b      	uxth	r3, r3
    733c:	4619      	mov	r1, r3
    733e:	4b05      	ldr	r3, [pc, #20]	; (7354 <Port_Ipw_SetGpioPadOutput+0x8c>)
    7340:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    7344:	2101      	movs	r1, #1
    7346:	fa01 f202 	lsl.w	r2, r1, r2
    734a:	609a      	str	r2, [r3, #8]
}
    734c:	bf00      	nop
    734e:	b004      	add	sp, #16
    7350:	4770      	bx	lr
    7352:	bf00      	nop
    7354:	000185c0 	.word	0x000185c0

00007358 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    7358:	b500      	push	{lr}
    735a:	b085      	sub	sp, #20
    735c:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    735e:	9b01      	ldr	r3, [sp, #4]
    7360:	881b      	ldrh	r3, [r3, #0]
    7362:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    7366:	2300      	movs	r3, #0
    7368:	f8ad 300e 	strh.w	r3, [sp, #14]
    736c:	e0d2      	b.n	7514 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    736e:	9b01      	ldr	r3, [sp, #4]
    7370:	68d9      	ldr	r1, [r3, #12]
    7372:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7376:	4613      	mov	r3, r2
    7378:	009b      	lsls	r3, r3, #2
    737a:	4413      	add	r3, r2
    737c:	009b      	lsls	r3, r3, #2
    737e:	440b      	add	r3, r1
    7380:	7c5b      	ldrb	r3, [r3, #17]
    7382:	f083 0301 	eor.w	r3, r3, #1
    7386:	b2db      	uxtb	r3, r3
    7388:	2b00      	cmp	r3, #0
    738a:	f000 80be 	beq.w	750a <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    738e:	9b01      	ldr	r3, [sp, #4]
    7390:	68d9      	ldr	r1, [r3, #12]
    7392:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7396:	4613      	mov	r3, r2
    7398:	009b      	lsls	r3, r3, #2
    739a:	4413      	add	r3, r2
    739c:	009b      	lsls	r3, r3, #2
    739e:	440b      	add	r3, r1
    73a0:	7c1b      	ldrb	r3, [r3, #16]
    73a2:	2b00      	cmp	r3, #0
    73a4:	f000 80b1 	beq.w	750a <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    73a8:	9b01      	ldr	r3, [sp, #4]
    73aa:	68d9      	ldr	r1, [r3, #12]
    73ac:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    73b0:	4613      	mov	r3, r2
    73b2:	009b      	lsls	r3, r3, #2
    73b4:	4413      	add	r3, r2
    73b6:	009b      	lsls	r3, r3, #2
    73b8:	440b      	add	r3, r1
    73ba:	881b      	ldrh	r3, [r3, #0]
    73bc:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    73c0:	9b01      	ldr	r3, [sp, #4]
    73c2:	68d9      	ldr	r1, [r3, #12]
    73c4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    73c8:	4613      	mov	r3, r2
    73ca:	009b      	lsls	r3, r3, #2
    73cc:	4413      	add	r3, r2
    73ce:	009b      	lsls	r3, r3, #2
    73d0:	440b      	add	r3, r1
    73d2:	68db      	ldr	r3, [r3, #12]
    73d4:	2b02      	cmp	r3, #2
    73d6:	d11d      	bne.n	7414 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    73d8:	f00e fa64 	bl	158a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    73dc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73e0:	095b      	lsrs	r3, r3, #5
    73e2:	b29b      	uxth	r3, r3
    73e4:	461a      	mov	r2, r3
    73e6:	4b51      	ldr	r3, [pc, #324]	; (752c <Port_Ipw_RefreshPortDirection+0x1d4>)
    73e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    73ec:	6959      	ldr	r1, [r3, #20]
    73ee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73f2:	f003 031f 	and.w	r3, r3, #31
    73f6:	2201      	movs	r2, #1
    73f8:	409a      	lsls	r2, r3
    73fa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73fe:	095b      	lsrs	r3, r3, #5
    7400:	b29b      	uxth	r3, r3
    7402:	4618      	mov	r0, r3
    7404:	4b49      	ldr	r3, [pc, #292]	; (752c <Port_Ipw_RefreshPortDirection+0x1d4>)
    7406:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    740a:	430a      	orrs	r2, r1
    740c:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    740e:	f00e fa75 	bl	158fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    7412:	e07a      	b.n	750a <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    7414:	9b01      	ldr	r3, [sp, #4]
    7416:	68d9      	ldr	r1, [r3, #12]
    7418:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    741c:	4613      	mov	r3, r2
    741e:	009b      	lsls	r3, r3, #2
    7420:	4413      	add	r3, r2
    7422:	009b      	lsls	r3, r3, #2
    7424:	440b      	add	r3, r1
    7426:	68db      	ldr	r3, [r3, #12]
    7428:	2b01      	cmp	r3, #1
    742a:	d00b      	beq.n	7444 <Port_Ipw_RefreshPortDirection+0xec>
    742c:	9b01      	ldr	r3, [sp, #4]
    742e:	68d9      	ldr	r1, [r3, #12]
    7430:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7434:	4613      	mov	r3, r2
    7436:	009b      	lsls	r3, r3, #2
    7438:	4413      	add	r3, r2
    743a:	009b      	lsls	r3, r3, #2
    743c:	440b      	add	r3, r1
    743e:	68db      	ldr	r3, [r3, #12]
    7440:	2b03      	cmp	r3, #3
    7442:	d162      	bne.n	750a <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    7444:	f00e fa2e 	bl	158a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7448:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    744c:	095b      	lsrs	r3, r3, #5
    744e:	b29b      	uxth	r3, r3
    7450:	461a      	mov	r2, r3
    7452:	4b36      	ldr	r3, [pc, #216]	; (752c <Port_Ipw_RefreshPortDirection+0x1d4>)
    7454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7458:	6959      	ldr	r1, [r3, #20]
    745a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    745e:	f003 031f 	and.w	r3, r3, #31
    7462:	2201      	movs	r2, #1
    7464:	fa02 f303 	lsl.w	r3, r2, r3
    7468:	43da      	mvns	r2, r3
    746a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    746e:	095b      	lsrs	r3, r3, #5
    7470:	b29b      	uxth	r3, r3
    7472:	4618      	mov	r0, r3
    7474:	4b2d      	ldr	r3, [pc, #180]	; (752c <Port_Ipw_RefreshPortDirection+0x1d4>)
    7476:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    747a:	400a      	ands	r2, r1
    747c:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    747e:	f00e fa3d 	bl	158fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    7482:	f00e fa61 	bl	15948 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7486:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    748a:	095b      	lsrs	r3, r3, #5
    748c:	b29b      	uxth	r3, r3
    748e:	461a      	mov	r2, r3
    7490:	4b26      	ldr	r3, [pc, #152]	; (752c <Port_Ipw_RefreshPortDirection+0x1d4>)
    7492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7496:	6999      	ldr	r1, [r3, #24]
    7498:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    749c:	f003 031f 	and.w	r3, r3, #31
    74a0:	2201      	movs	r2, #1
    74a2:	fa02 f303 	lsl.w	r3, r2, r3
    74a6:	43da      	mvns	r2, r3
    74a8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    74ac:	095b      	lsrs	r3, r3, #5
    74ae:	b29b      	uxth	r3, r3
    74b0:	4618      	mov	r0, r3
    74b2:	4b1e      	ldr	r3, [pc, #120]	; (752c <Port_Ipw_RefreshPortDirection+0x1d4>)
    74b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    74b8:	400a      	ands	r2, r1
    74ba:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    74bc:	9b01      	ldr	r3, [sp, #4]
    74be:	68d9      	ldr	r1, [r3, #12]
    74c0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    74c4:	4613      	mov	r3, r2
    74c6:	009b      	lsls	r3, r3, #2
    74c8:	4413      	add	r3, r2
    74ca:	009b      	lsls	r3, r3, #2
    74cc:	440b      	add	r3, r1
    74ce:	68db      	ldr	r3, [r3, #12]
    74d0:	2b03      	cmp	r3, #3
    74d2:	d118      	bne.n	7506 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    74d4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    74d8:	095b      	lsrs	r3, r3, #5
    74da:	b29b      	uxth	r3, r3
    74dc:	461a      	mov	r2, r3
    74de:	4b13      	ldr	r3, [pc, #76]	; (752c <Port_Ipw_RefreshPortDirection+0x1d4>)
    74e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    74e4:	6999      	ldr	r1, [r3, #24]
    74e6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    74ea:	f003 031f 	and.w	r3, r3, #31
    74ee:	2201      	movs	r2, #1
    74f0:	409a      	lsls	r2, r3
    74f2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    74f6:	095b      	lsrs	r3, r3, #5
    74f8:	b29b      	uxth	r3, r3
    74fa:	4618      	mov	r0, r3
    74fc:	4b0b      	ldr	r3, [pc, #44]	; (752c <Port_Ipw_RefreshPortDirection+0x1d4>)
    74fe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7502:	430a      	orrs	r2, r1
    7504:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    7506:	f00e fa4b 	bl	159a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    750a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    750e:	3301      	adds	r3, #1
    7510:	f8ad 300e 	strh.w	r3, [sp, #14]
    7514:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7518:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    751c:	429a      	cmp	r2, r3
    751e:	f4ff af26 	bcc.w	736e <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    7522:	bf00      	nop
    7524:	bf00      	nop
    7526:	b005      	add	sp, #20
    7528:	f85d fb04 	ldr.w	pc, [sp], #4
    752c:	000185c0 	.word	0x000185c0

00007530 <Adc_HwAcc_SetSC2Reg>:
#include "Adc_MemMap.h"

static inline void Adc_HwAcc_SetSC2Reg(ADC_Type * const Base,
                                       const uint32 ClearMask,
                                       const uint32 Value)
{
    7530:	b086      	sub	sp, #24
    7532:	9003      	str	r0, [sp, #12]
    7534:	9102      	str	r1, [sp, #8]
    7536:	9201      	str	r2, [sp, #4]
    /* Clear and set SC2 register based on ClearMask and Value */
    uint32 Sc2Reg = Base->SC2;
    7538:	9b03      	ldr	r3, [sp, #12]
    753a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    753e:	9305      	str	r3, [sp, #20]
    Sc2Reg &= ~(ClearMask);
    7540:	9b02      	ldr	r3, [sp, #8]
    7542:	43db      	mvns	r3, r3
    7544:	9a05      	ldr	r2, [sp, #20]
    7546:	4013      	ands	r3, r2
    7548:	9305      	str	r3, [sp, #20]
    Sc2Reg |= Value;
    754a:	9a05      	ldr	r2, [sp, #20]
    754c:	9b01      	ldr	r3, [sp, #4]
    754e:	4313      	orrs	r3, r2
    7550:	9305      	str	r3, [sp, #20]
    Base->SC2 = Sc2Reg;
    7552:	9b03      	ldr	r3, [sp, #12]
    7554:	9a05      	ldr	r2, [sp, #20]
    7556:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    755a:	bf00      	nop
    755c:	b006      	add	sp, #24
    755e:	4770      	bx	lr

00007560 <Adc_HwAcc_SetClock>:

static inline void Adc_HwAcc_SetClock(ADC_Type * const Base,
                                      const Adc_Ip_ClockSelType ClockDivide,
                                      const Adc_Ip_ClkSourceType InputClock)
{
    7560:	b086      	sub	sp, #24
    7562:	9003      	str	r0, [sp, #12]
    7564:	9102      	str	r1, [sp, #8]
    7566:	9201      	str	r2, [sp, #4]
    /* Update ClockDivide and InputClock values found in CFG1 register */
    uint32 Cfg1Reg = Base->CFG1;
    7568:	9b03      	ldr	r3, [sp, #12]
    756a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    756c:	9305      	str	r3, [sp, #20]
    Cfg1Reg &= ~(ADC_CFG1_ADIV_MASK | ADC_CFG1_ADICLK_MASK);
    756e:	9b05      	ldr	r3, [sp, #20]
    7570:	f023 0363 	bic.w	r3, r3, #99	; 0x63
    7574:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADIV(ClockDivide);
    7576:	9b02      	ldr	r3, [sp, #8]
    7578:	015b      	lsls	r3, r3, #5
    757a:	f003 0360 	and.w	r3, r3, #96	; 0x60
    757e:	9a05      	ldr	r2, [sp, #20]
    7580:	4313      	orrs	r3, r2
    7582:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADICLK(InputClock);
    7584:	9b01      	ldr	r3, [sp, #4]
    7586:	f003 0303 	and.w	r3, r3, #3
    758a:	9a05      	ldr	r2, [sp, #20]
    758c:	4313      	orrs	r3, r2
    758e:	9305      	str	r3, [sp, #20]
    Base->CFG1 = Cfg1Reg;
    7590:	9b03      	ldr	r3, [sp, #12]
    7592:	9a05      	ldr	r2, [sp, #20]
    7594:	641a      	str	r2, [r3, #64]	; 0x40
}
    7596:	bf00      	nop
    7598:	b006      	add	sp, #24
    759a:	4770      	bx	lr

0000759c <Adc_HwAcc_GetClockDivide>:

static inline Adc_Ip_ClockSelType Adc_HwAcc_GetClockDivide(const uint32 Reg)
{
    759c:	b084      	sub	sp, #16
    759e:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve ClockDivide value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClockSelType ReturnValue = ADC_IP_CLK_FULL_BUS;
    75a0:	2300      	movs	r3, #0
    75a2:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADIV_MASK) >> ADC_CFG1_ADIV_SHIFT)
    75a4:	9b01      	ldr	r3, [sp, #4]
    75a6:	095b      	lsrs	r3, r3, #5
    75a8:	f003 0303 	and.w	r3, r3, #3
    75ac:	2b03      	cmp	r3, #3
    75ae:	d00c      	beq.n	75ca <Adc_HwAcc_GetClockDivide+0x2e>
    75b0:	2b03      	cmp	r3, #3
    75b2:	d80d      	bhi.n	75d0 <Adc_HwAcc_GetClockDivide+0x34>
    75b4:	2b01      	cmp	r3, #1
    75b6:	d002      	beq.n	75be <Adc_HwAcc_GetClockDivide+0x22>
    75b8:	2b02      	cmp	r3, #2
    75ba:	d003      	beq.n	75c4 <Adc_HwAcc_GetClockDivide+0x28>
        case 3u:
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
            break;
        default:
            ; /* no-op */
            break;
    75bc:	e008      	b.n	75d0 <Adc_HwAcc_GetClockDivide+0x34>
            ReturnValue = ADC_IP_CLK_HALF_BUS;
    75be:	2301      	movs	r3, #1
    75c0:	9303      	str	r3, [sp, #12]
            break;
    75c2:	e006      	b.n	75d2 <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_QUARTER_BUS;
    75c4:	2302      	movs	r3, #2
    75c6:	9303      	str	r3, [sp, #12]
            break;
    75c8:	e003      	b.n	75d2 <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
    75ca:	2303      	movs	r3, #3
    75cc:	9303      	str	r3, [sp, #12]
            break;
    75ce:	e000      	b.n	75d2 <Adc_HwAcc_GetClockDivide+0x36>
            break;
    75d0:	bf00      	nop
    }
    return ReturnValue;
    75d2:	9b03      	ldr	r3, [sp, #12]
}
    75d4:	4618      	mov	r0, r3
    75d6:	b004      	add	sp, #16
    75d8:	4770      	bx	lr

000075da <Adc_HwAcc_GetInputClock>:

static inline Adc_Ip_ClkSourceType Adc_HwAcc_GetInputClock(const uint32 Reg)
{
    75da:	b084      	sub	sp, #16
    75dc:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve InputClock value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClkSourceType ReturnValue = ADC_IP_CLK_ALT_1;
    75de:	2300      	movs	r3, #0
    75e0:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADICLK_MASK) >> ADC_CFG1_ADICLK_SHIFT)
    75e2:	9b01      	ldr	r3, [sp, #4]
    75e4:	f003 0303 	and.w	r3, r3, #3
    75e8:	2b03      	cmp	r3, #3
    75ea:	d00c      	beq.n	7606 <Adc_HwAcc_GetInputClock+0x2c>
    75ec:	2b03      	cmp	r3, #3
    75ee:	d80d      	bhi.n	760c <Adc_HwAcc_GetInputClock+0x32>
    75f0:	2b01      	cmp	r3, #1
    75f2:	d002      	beq.n	75fa <Adc_HwAcc_GetInputClock+0x20>
    75f4:	2b02      	cmp	r3, #2
    75f6:	d003      	beq.n	7600 <Adc_HwAcc_GetInputClock+0x26>
        case 3u:
            ReturnValue = ADC_IP_CLK_ALT_4;
            break;
        default:
            ; /* no-op */
            break;
    75f8:	e008      	b.n	760c <Adc_HwAcc_GetInputClock+0x32>
            ReturnValue = ADC_IP_CLK_ALT_2;
    75fa:	2301      	movs	r3, #1
    75fc:	9303      	str	r3, [sp, #12]
            break;
    75fe:	e006      	b.n	760e <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_3;
    7600:	2302      	movs	r3, #2
    7602:	9303      	str	r3, [sp, #12]
            break;
    7604:	e003      	b.n	760e <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_4;
    7606:	2303      	movs	r3, #3
    7608:	9303      	str	r3, [sp, #12]
            break;
    760a:	e000      	b.n	760e <Adc_HwAcc_GetInputClock+0x34>
            break;
    760c:	bf00      	nop
    }
    return ReturnValue;
    760e:	9b03      	ldr	r3, [sp, #12]
}
    7610:	4618      	mov	r0, r3
    7612:	b004      	add	sp, #16
    7614:	4770      	bx	lr

00007616 <Adc_HwAcc_SetSampleTime>:

static inline void Adc_HwAcc_SetSampleTime(ADC_Type * const Base,
                                           const uint8 SampleTime)
{
    7616:	b084      	sub	sp, #16
    7618:	9001      	str	r0, [sp, #4]
    761a:	460b      	mov	r3, r1
    761c:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Clip sample time to minimum value */
    uint8 ClippedSampleTime = (uint8)((SampleTime > 0U) ? SampleTime : 1U);
    7620:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7624:	2b00      	cmp	r3, #0
    7626:	d002      	beq.n	762e <Adc_HwAcc_SetSampleTime+0x18>
    7628:	f89d 3003 	ldrb.w	r3, [sp, #3]
    762c:	e000      	b.n	7630 <Adc_HwAcc_SetSampleTime+0x1a>
    762e:	2301      	movs	r3, #1
    7630:	f88d 300f 	strb.w	r3, [sp, #15]
    /* Update SampleTime values found in SC3 register */
    uint32 Cfg2Reg = Base->CFG2;
    7634:	9b01      	ldr	r3, [sp, #4]
    7636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7638:	9302      	str	r3, [sp, #8]
    Cfg2Reg &= ~(ADC_CFG2_SMPLTS_MASK);
    763a:	9b02      	ldr	r3, [sp, #8]
    763c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    7640:	9302      	str	r3, [sp, #8]
    Cfg2Reg |= ADC_CFG2_SMPLTS(ClippedSampleTime);
    7642:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7646:	9a02      	ldr	r2, [sp, #8]
    7648:	4313      	orrs	r3, r2
    764a:	9302      	str	r3, [sp, #8]
    Base->CFG2 = Cfg2Reg;
    764c:	9b01      	ldr	r3, [sp, #4]
    764e:	9a02      	ldr	r2, [sp, #8]
    7650:	645a      	str	r2, [r3, #68]	; 0x44
}
    7652:	bf00      	nop
    7654:	b004      	add	sp, #16
    7656:	4770      	bx	lr

00007658 <Adc_HwAcc_SetAveraging>:

static inline void Adc_HwAcc_SetAveraging(ADC_Type * const Base,
                                          const boolean AvgEn,
                                          const Adc_Ip_AvgSelectType AvgSel)
{
    7658:	b086      	sub	sp, #24
    765a:	9003      	str	r0, [sp, #12]
    765c:	460b      	mov	r3, r1
    765e:	9201      	str	r2, [sp, #4]
    7660:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Update AvgEn and AvgSel values found in SC3 register */
    uint32 Sc3Reg = Base->SC3;
    7664:	9b03      	ldr	r3, [sp, #12]
    7666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    766a:	9305      	str	r3, [sp, #20]
    Sc3Reg &= ~(ADC_SC3_AVGE_MASK | ADC_SC3_AVGS_MASK);
    766c:	9b05      	ldr	r3, [sp, #20]
    766e:	f023 0307 	bic.w	r3, r3, #7
    7672:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGE(AvgEn ? 1u : 0u);
    7674:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7678:	2b00      	cmp	r3, #0
    767a:	d001      	beq.n	7680 <Adc_HwAcc_SetAveraging+0x28>
    767c:	2304      	movs	r3, #4
    767e:	e000      	b.n	7682 <Adc_HwAcc_SetAveraging+0x2a>
    7680:	2300      	movs	r3, #0
    7682:	9a05      	ldr	r2, [sp, #20]
    7684:	4313      	orrs	r3, r2
    7686:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGS(AvgSel);
    7688:	9b01      	ldr	r3, [sp, #4]
    768a:	f003 0303 	and.w	r3, r3, #3
    768e:	9a05      	ldr	r2, [sp, #20]
    7690:	4313      	orrs	r3, r2
    7692:	9305      	str	r3, [sp, #20]
    Base->SC3 = Sc3Reg;
    7694:	9b03      	ldr	r3, [sp, #12]
    7696:	9a05      	ldr	r2, [sp, #20]
    7698:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    769c:	bf00      	nop
    769e:	b006      	add	sp, #24
    76a0:	4770      	bx	lr

000076a2 <Adc_HwAcc_GetAverageSelect>:

static inline Adc_Ip_AvgSelectType Adc_HwAcc_GetAverageSelect(const uint32 Reg)
{
    76a2:	b084      	sub	sp, #16
    76a4:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve AvgSelect value found in SC3 register
     * Note: Reg should be the value of SC3 register
     */
    Adc_Ip_AvgSelectType ReturnValue = ADC_IP_AVG_4_CONV;
    76a6:	2300      	movs	r3, #0
    76a8:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_SC3_AVGS_MASK) >> ADC_SC3_AVGS_SHIFT)
    76aa:	9b01      	ldr	r3, [sp, #4]
    76ac:	f003 0303 	and.w	r3, r3, #3
    76b0:	2b03      	cmp	r3, #3
    76b2:	d00c      	beq.n	76ce <Adc_HwAcc_GetAverageSelect+0x2c>
    76b4:	2b03      	cmp	r3, #3
    76b6:	d80d      	bhi.n	76d4 <Adc_HwAcc_GetAverageSelect+0x32>
    76b8:	2b01      	cmp	r3, #1
    76ba:	d002      	beq.n	76c2 <Adc_HwAcc_GetAverageSelect+0x20>
    76bc:	2b02      	cmp	r3, #2
    76be:	d003      	beq.n	76c8 <Adc_HwAcc_GetAverageSelect+0x26>
        case 3u:
            ReturnValue = ADC_IP_AVG_32_CONV;
            break;
        default:
            ; /* no-op */
            break;
    76c0:	e008      	b.n	76d4 <Adc_HwAcc_GetAverageSelect+0x32>
            ReturnValue = ADC_IP_AVG_8_CONV;
    76c2:	2301      	movs	r3, #1
    76c4:	9303      	str	r3, [sp, #12]
            break;
    76c6:	e006      	b.n	76d6 <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_16_CONV;
    76c8:	2302      	movs	r3, #2
    76ca:	9303      	str	r3, [sp, #12]
            break;
    76cc:	e003      	b.n	76d6 <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_32_CONV;
    76ce:	2303      	movs	r3, #3
    76d0:	9303      	str	r3, [sp, #12]
            break;
    76d2:	e000      	b.n	76d6 <Adc_HwAcc_GetAverageSelect+0x34>
            break;
    76d4:	bf00      	nop
    }
    return ReturnValue;
    76d6:	9b03      	ldr	r3, [sp, #12]
}
    76d8:	4618      	mov	r0, r3
    76da:	b004      	add	sp, #16
    76dc:	4770      	bx	lr

000076de <Adc_HwAcc_SetTriggerMode>:

static inline void Adc_HwAcc_SetTriggerMode(ADC_Type * const Base,
                                            const Adc_Ip_TrigType TriggerMode)
{
    76de:	b084      	sub	sp, #16
    76e0:	9001      	str	r0, [sp, #4]
    76e2:	9100      	str	r1, [sp, #0]
    /* Update TriggerMode value found in SC2 register */
    uint32 Sc2Reg = Base->SC2;
    76e4:	9b01      	ldr	r3, [sp, #4]
    76e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    76ea:	9303      	str	r3, [sp, #12]
    Sc2Reg &= ~(ADC_SC2_ADTRG_MASK);
    76ec:	9b03      	ldr	r3, [sp, #12]
    76ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    76f2:	9303      	str	r3, [sp, #12]
    Sc2Reg |= ADC_SC2_ADTRG(TriggerMode);
    76f4:	9b00      	ldr	r3, [sp, #0]
    76f6:	019b      	lsls	r3, r3, #6
    76f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    76fc:	9a03      	ldr	r2, [sp, #12]
    76fe:	4313      	orrs	r3, r2
    7700:	9303      	str	r3, [sp, #12]
    Base->SC2 = Sc2Reg;
    7702:	9b01      	ldr	r3, [sp, #4]
    7704:	9a03      	ldr	r2, [sp, #12]
    7706:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    770a:	bf00      	nop
    770c:	b004      	add	sp, #16
    770e:	4770      	bx	lr

00007710 <Adc_HwAcc_GetTriggerMode>:

static inline Adc_Ip_TrigType Adc_HwAcc_GetTriggerMode(const uint32 Reg)
{
    7710:	b084      	sub	sp, #16
    7712:	9001      	str	r0, [sp, #4]
    /* Retrieve TriggerMode value found in SC2 register */
    Adc_Ip_TrigType ReturnValue = ADC_IP_TRIGGER_SOFTWARE;
    7714:	2300      	movs	r3, #0
    7716:	9303      	str	r3, [sp, #12]
    if (((Reg & ADC_SC2_ADTRG_MASK) >> ADC_SC2_ADTRG_SHIFT) == 1u)
    7718:	9b01      	ldr	r3, [sp, #4]
    771a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    771e:	2b00      	cmp	r3, #0
    7720:	d001      	beq.n	7726 <Adc_HwAcc_GetTriggerMode+0x16>
    {
        ReturnValue = ADC_IP_TRIGGER_HARDWARE;
    7722:	2301      	movs	r3, #1
    7724:	9303      	str	r3, [sp, #12]
    }
    return ReturnValue;
    7726:	9b03      	ldr	r3, [sp, #12]
}
    7728:	4618      	mov	r0, r3
    772a:	b004      	add	sp, #16
    772c:	4770      	bx	lr

0000772e <Adc_HwAcc_SetChannel>:

static inline void Adc_HwAcc_SetChannel(ADC_Type * const Base,
                                        const uint8 ChnIdx,
                                        const Adc_Ip_InputChannelType InputChannel,
                                        const boolean InterruptEnable)
{
    772e:	b086      	sub	sp, #24
    7730:	9003      	str	r0, [sp, #12]
    7732:	9201      	str	r2, [sp, #4]
    7734:	461a      	mov	r2, r3
    7736:	460b      	mov	r3, r1
    7738:	f88d 300b 	strb.w	r3, [sp, #11]
    773c:	4613      	mov	r3, r2
    773e:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Configure channel by writing all SC1n register fields */
    uint32 Sc1Reg = SC1(Base, ChnIdx);
    7742:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7746:	9b03      	ldr	r3, [sp, #12]
    7748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    774c:	9305      	str	r3, [sp, #20]
    Sc1Reg &= ~(ADC_SC1_ADCH_MASK | ADC_SC1_AIEN_MASK);
    774e:	9b05      	ldr	r3, [sp, #20]
    7750:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    7754:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_ADCH(InputChannel);
    7756:	9b01      	ldr	r3, [sp, #4]
    7758:	f003 031f 	and.w	r3, r3, #31
    775c:	9a05      	ldr	r2, [sp, #20]
    775e:	4313      	orrs	r3, r2
    7760:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_AIEN(InterruptEnable ? 1u : 0u);
    7762:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7766:	2b00      	cmp	r3, #0
    7768:	d001      	beq.n	776e <Adc_HwAcc_SetChannel+0x40>
    776a:	2340      	movs	r3, #64	; 0x40
    776c:	e000      	b.n	7770 <Adc_HwAcc_SetChannel+0x42>
    776e:	2300      	movs	r3, #0
    7770:	9a05      	ldr	r2, [sp, #20]
    7772:	4313      	orrs	r3, r2
    7774:	9305      	str	r3, [sp, #20]
    SC1(Base, ChnIdx) = Sc1Reg;
    7776:	f89d 200b 	ldrb.w	r2, [sp, #11]
    777a:	9b03      	ldr	r3, [sp, #12]
    777c:	9905      	ldr	r1, [sp, #20]
    777e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    7782:	bf00      	nop
    7784:	b006      	add	sp, #24
    7786:	4770      	bx	lr

00007788 <Adc_HwAcc_SetUserGainAndOffset>:

static inline void Adc_HwAcc_SetUserGainAndOffset(ADC_Type * const Base,
                                                  const uint16 UsrGain,
                                                  const uint16 UsrOffset)
{
    7788:	b082      	sub	sp, #8
    778a:	9001      	str	r0, [sp, #4]
    778c:	460b      	mov	r3, r1
    778e:	f8ad 3002 	strh.w	r3, [sp, #2]
    7792:	4613      	mov	r3, r2
    7794:	f8ad 3000 	strh.w	r3, [sp]
     * 2. RegVal <- Sum & 0xF800U
     * 3. if RegVal != 0x0000U then RegVal <- 0xFFFFU
     * 4. Base->G <- RegVal
     */

    Base->USR_OFS = ADC_USR_OFS_USR_OFS(UsrOffset);
    7798:	f8bd 3000 	ldrh.w	r3, [sp]
    779c:	b2da      	uxtb	r2, r3
    779e:	9b01      	ldr	r3, [sp, #4]
    77a0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    Base->UG = ADC_UG_UG(UsrGain);
    77a4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    77a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
    77ac:	9b01      	ldr	r3, [sp, #4]
    77ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
    77b2:	bf00      	nop
    77b4:	b002      	add	sp, #8
    77b6:	4770      	bx	lr

000077b8 <Adc_HwAcc_GetAIEN>:

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
static inline boolean Adc_HwAcc_GetAIEN(const uint32 Reg)
{
    77b8:	b082      	sub	sp, #8
    77ba:	9001      	str	r0, [sp, #4]
    /* Retrive AIEN flag from given SC1 register */
    return (((Reg & ADC_SC1_AIEN_MASK) >> ADC_SC1_AIEN_SHIFT) != 0u) ? TRUE : FALSE;
    77bc:	9b01      	ldr	r3, [sp, #4]
    77be:	099b      	lsrs	r3, r3, #6
    77c0:	f003 0301 	and.w	r3, r3, #1
    77c4:	2b00      	cmp	r3, #0
    77c6:	bf14      	ite	ne
    77c8:	2301      	movne	r3, #1
    77ca:	2300      	moveq	r3, #0
    77cc:	b2db      	uxtb	r3, r3
}
    77ce:	4618      	mov	r0, r3
    77d0:	b002      	add	sp, #8
    77d2:	4770      	bx	lr

000077d4 <Adc_HwAcc_GetCOCO>:
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

static inline boolean Adc_HwAcc_GetCOCO(const uint32 Reg)
{
    77d4:	b082      	sub	sp, #8
    77d6:	9001      	str	r0, [sp, #4]
    /* Retrive COCO flag from given SC1 register */
    return (((Reg & ADC_SC1_COCO_MASK) >> ADC_SC1_COCO_SHIFT) != 0u) ? TRUE : FALSE;
    77d8:	9b01      	ldr	r3, [sp, #4]
    77da:	09db      	lsrs	r3, r3, #7
    77dc:	f003 0301 	and.w	r3, r3, #1
    77e0:	2b00      	cmp	r3, #0
    77e2:	bf14      	ite	ne
    77e4:	2301      	movne	r3, #1
    77e6:	2300      	moveq	r3, #0
    77e8:	b2db      	uxtb	r3, r3
}
    77ea:	4618      	mov	r0, r3
    77ec:	b002      	add	sp, #8
    77ee:	4770      	bx	lr

000077f0 <Adc_HwAcc_GetData>:

static inline uint16 Adc_HwAcc_GetData(const ADC_Type * const Base,
                                       const uint8 ChnIdx)
{
    77f0:	b084      	sub	sp, #16
    77f2:	9001      	str	r0, [sp, #4]
    77f4:	460b      	mov	r3, r1
    77f6:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Retrieve the conversion result of a given channel */
    uint16 Result = (uint16) R(Base, ChnIdx);
    77fa:	f89d 2003 	ldrb.w	r2, [sp, #3]
    77fe:	9b01      	ldr	r3, [sp, #4]
    7800:	3212      	adds	r2, #18
    7802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7806:	f8ad 300e 	strh.w	r3, [sp, #14]
    Result = (uint16) ((Result & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    780a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    780e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    7812:	f8ad 300e 	strh.w	r3, [sp, #14]
    return Result;
    7816:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    781a:	4618      	mov	r0, r3
    781c:	b004      	add	sp, #16
    781e:	4770      	bx	lr

00007820 <ADC_DoCalibration_SetParams>:
*
* END**************************************************************************/
static inline void ADC_DoCalibration_SetParams(ADC_Type * const Base,
                                               const Adc_Ip_ClockConfigType * const Config,
                                               const Adc_Ip_TrigType TriggerMode)
{
    7820:	b500      	push	{lr}
    7822:	b085      	sub	sp, #20
    7824:	9003      	str	r0, [sp, #12]
    7826:	9102      	str	r1, [sp, #8]
    7828:	9201      	str	r2, [sp, #4]
    /* Configure averaging */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    782a:	f009 fc5b 	bl	110e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    782e:	9b02      	ldr	r3, [sp, #8]
    7830:	7a59      	ldrb	r1, [r3, #9]
    7832:	9b02      	ldr	r3, [sp, #8]
    7834:	68db      	ldr	r3, [r3, #12]
    7836:	461a      	mov	r2, r3
    7838:	9803      	ldr	r0, [sp, #12]
    783a:	f7ff ff0d 	bl	7658 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    783e:	f009 fc7d 	bl	1113c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Configure trigger mode */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24();
    7842:	f009 fab5 	bl	10db0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    7846:	9901      	ldr	r1, [sp, #4]
    7848:	9803      	ldr	r0, [sp, #12]
    784a:	f7ff ff48 	bl	76de <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24();
    784e:	f009 fadb 	bl	10e08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>

    /* Configure sample time */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15();
    7852:	f008 ffcb 	bl	107ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    7856:	9b02      	ldr	r3, [sp, #8]
    7858:	7a1b      	ldrb	r3, [r3, #8]
    785a:	4619      	mov	r1, r3
    785c:	9803      	ldr	r0, [sp, #12]
    785e:	f7ff feda 	bl	7616 <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15();
    7862:	f008 ffef 	bl	10844 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>

    /* Configure input clock */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13();
    7866:	f008 ff1d 	bl	106a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    786a:	9b02      	ldr	r3, [sp, #8]
    786c:	6819      	ldr	r1, [r3, #0]
    786e:	9b02      	ldr	r3, [sp, #8]
    7870:	685b      	ldr	r3, [r3, #4]
    7872:	461a      	mov	r2, r3
    7874:	9803      	ldr	r0, [sp, #12]
    7876:	f7ff fe73 	bl	7560 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13();
    787a:	f008 ff3f 	bl	106fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>
}
    787e:	bf00      	nop
    7880:	b005      	add	sp, #20
    7882:	f85d fb04 	ldr.w	pc, [sp], #4

00007886 <Adc_Ip_Init>:
*
* @implements     Adc_Ip_Init_Activity
* END**************************************************************************/
void Adc_Ip_Init(const uint32 Instance,
                 const Adc_Ip_ConfigType * const Config)
{
    7886:	b500      	push	{lr}
    7888:	b087      	sub	sp, #28
    788a:	9001      	str	r0, [sp, #4]
    788c:	9100      	str	r1, [sp, #0]
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
    DevAssert(Config->NumChannels <= ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    788e:	4a67      	ldr	r2, [pc, #412]	; (7a2c <Adc_Ip_Init+0x1a6>)
    7890:	9b01      	ldr	r3, [sp, #4]
    7892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7896:	9302      	str	r3, [sp, #8]
    uint32 SC2Reg = 0u;
    7898:	2300      	movs	r3, #0
    789a:	9305      	str	r3, [sp, #20]
    uint32 SC2ClearMask = 0u;
    789c:	2300      	movs	r3, #0
    789e:	9304      	str	r3, [sp, #16]
    uint8 Index;

    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    78a0:	9b00      	ldr	r3, [sp, #0]
    78a2:	6819      	ldr	r1, [r3, #0]
    78a4:	9b00      	ldr	r3, [sp, #0]
    78a6:	689b      	ldr	r3, [r3, #8]
    78a8:	461a      	mov	r2, r3
    78aa:	9802      	ldr	r0, [sp, #8]
    78ac:	f7ff fe58 	bl	7560 <Adc_HwAcc_SetClock>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    78b0:	9b00      	ldr	r3, [sp, #0]
    78b2:	7b1b      	ldrb	r3, [r3, #12]
    78b4:	4619      	mov	r1, r3
    78b6:	9802      	ldr	r0, [sp, #8]
    78b8:	f7ff fead 	bl	7616 <Adc_HwAcc_SetSampleTime>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    78bc:	9b00      	ldr	r3, [sp, #0]
    78be:	7b59      	ldrb	r1, [r3, #13]
    78c0:	9b00      	ldr	r3, [sp, #0]
    78c2:	691b      	ldr	r3, [r3, #16]
    78c4:	461a      	mov	r2, r3
    78c6:	9802      	ldr	r0, [sp, #8]
    78c8:	f7ff fec6 	bl	7658 <Adc_HwAcc_SetAveraging>

    Adc_Ip_SetResolution(Instance, Config->Resolution);
    78cc:	9b00      	ldr	r3, [sp, #0]
    78ce:	695b      	ldr	r3, [r3, #20]
    78d0:	4619      	mov	r1, r3
    78d2:	9801      	ldr	r0, [sp, #4]
    78d4:	f000 f9ea 	bl	7cac <Adc_Ip_SetResolution>
        ADC_SetSupplyMonitoringEnable(Config->SupplyMonitoringEnable);
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    /* Configure trigger mode */
    SC2ClearMask |= ADC_SC2_ADTRG_MASK;
    78d8:	9b04      	ldr	r3, [sp, #16]
    78da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    78de:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ADTRG(Config->TriggerMode);
    78e0:	9b00      	ldr	r3, [sp, #0]
    78e2:	699b      	ldr	r3, [r3, #24]
    78e4:	019b      	lsls	r3, r3, #6
    78e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    78ea:	9a05      	ldr	r2, [sp, #20]
    78ec:	4313      	orrs	r3, r2
    78ee:	9305      	str	r3, [sp, #20]

    /* Configure DMA enable */
    if (Config->DmaEnable)
    78f0:	9b00      	ldr	r3, [sp, #0]
    78f2:	7f1b      	ldrb	r3, [r3, #28]
    78f4:	2b00      	cmp	r3, #0
    78f6:	d004      	beq.n	7902 <Adc_Ip_Init+0x7c>
    {
        SC2Reg |= ADC_SC2_DMAEN_MASK;
    78f8:	9b05      	ldr	r3, [sp, #20]
    78fa:	f043 0304 	orr.w	r3, r3, #4
    78fe:	9305      	str	r3, [sp, #20]
    7900:	e003      	b.n	790a <Adc_Ip_Init+0x84>
    }
    else
    {
        SC2ClearMask |= ADC_SC2_DMAEN_MASK;
    7902:	9b04      	ldr	r3, [sp, #16]
    7904:	f043 0304 	orr.w	r3, r3, #4
    7908:	9304      	str	r3, [sp, #16]
    }

    /* Configure voltage reference selector */
    SC2ClearMask |= ADC_SC2_REFSEL_MASK;
    790a:	9b04      	ldr	r3, [sp, #16]
    790c:	f043 0303 	orr.w	r3, r3, #3
    7910:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_REFSEL(Config->VoltageRef);
    7912:	9b00      	ldr	r3, [sp, #0]
    7914:	6a1b      	ldr	r3, [r3, #32]
    7916:	f003 0303 	and.w	r3, r3, #3
    791a:	9a05      	ldr	r2, [sp, #20]
    791c:	4313      	orrs	r3, r2
    791e:	9305      	str	r3, [sp, #20]

    /* Configure compare enables and values */
    SC2ClearMask |= ADC_SC2_ACFE_MASK | ADC_SC2_ACFGT_MASK | ADC_SC2_ACREN_MASK;
    7920:	9b04      	ldr	r3, [sp, #16]
    7922:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    7926:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ACFE(Config->CompareEnable ? 1u : 0u);
    7928:	9b00      	ldr	r3, [sp, #0]
    792a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    792e:	2b00      	cmp	r3, #0
    7930:	d001      	beq.n	7936 <Adc_Ip_Init+0xb0>
    7932:	2320      	movs	r3, #32
    7934:	e000      	b.n	7938 <Adc_Ip_Init+0xb2>
    7936:	2300      	movs	r3, #0
    7938:	9a05      	ldr	r2, [sp, #20]
    793a:	4313      	orrs	r3, r2
    793c:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACFGT(Config->CompareGreaterThanEnable ? 1u : 0u);
    793e:	9b00      	ldr	r3, [sp, #0]
    7940:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    7944:	2b00      	cmp	r3, #0
    7946:	d001      	beq.n	794c <Adc_Ip_Init+0xc6>
    7948:	2310      	movs	r3, #16
    794a:	e000      	b.n	794e <Adc_Ip_Init+0xc8>
    794c:	2300      	movs	r3, #0
    794e:	9a05      	ldr	r2, [sp, #20]
    7950:	4313      	orrs	r3, r2
    7952:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACREN(Config->CompareRangeFuncEnable ? 1u : 0u);
    7954:	9b00      	ldr	r3, [sp, #0]
    7956:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    795a:	2b00      	cmp	r3, #0
    795c:	d001      	beq.n	7962 <Adc_Ip_Init+0xdc>
    795e:	2308      	movs	r3, #8
    7960:	e000      	b.n	7964 <Adc_Ip_Init+0xde>
    7962:	2300      	movs	r3, #0
    7964:	9a05      	ldr	r2, [sp, #20]
    7966:	4313      	orrs	r3, r2
    7968:	9305      	str	r3, [sp, #20]
    Base->CV[0u] = ADC_CV_CV(Config->CompVal1);
    796a:	9b00      	ldr	r3, [sp, #0]
    796c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    796e:	461a      	mov	r2, r3
    7970:	9b02      	ldr	r3, [sp, #8]
    7972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Base->CV[1u] = ADC_CV_CV(Config->CompVal2);
    7976:	9b00      	ldr	r3, [sp, #0]
    7978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    797a:	461a      	mov	r2, r3
    797c:	9b02      	ldr	r3, [sp, #8]
    797e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    Adc_HwAcc_SetSC2Reg(Base, SC2ClearMask, SC2Reg);
    7982:	9a05      	ldr	r2, [sp, #20]
    7984:	9904      	ldr	r1, [sp, #16]
    7986:	9802      	ldr	r0, [sp, #8]
    7988:	f7ff fdd2 	bl	7530 <Adc_HwAcc_SetSC2Reg>

    Adc_HwAcc_SetUserGainAndOffset(Base, Config->UsrGain, Config->UsrOffset);
    798c:	9b00      	ldr	r3, [sp, #0]
    798e:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    7990:	9b00      	ldr	r3, [sp, #0]
    7992:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    7994:	461a      	mov	r2, r3
    7996:	9802      	ldr	r0, [sp, #8]
    7998:	f7ff fef6 	bl	7788 <Adc_HwAcc_SetUserGainAndOffset>

    Adc_Ip_SetContinuousMode(Instance, Config->ContinuousConvEnable);
    799c:	9b00      	ldr	r3, [sp, #0]
    799e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    79a2:	4619      	mov	r1, r3
    79a4:	9801      	ldr	r0, [sp, #4]
    79a6:	f000 f955 	bl	7c54 <Adc_Ip_SetContinuousMode>

    if (Config->ChannelConfigs != NULL_PTR)
    79aa:	9b00      	ldr	r3, [sp, #0]
    79ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    79ae:	2b00      	cmp	r3, #0
    79b0:	d01c      	beq.n	79ec <Adc_Ip_Init+0x166>
    {
        for (Index = 0u; Index < Config->NumChannels; Index++)
    79b2:	2300      	movs	r3, #0
    79b4:	f88d 300f 	strb.w	r3, [sp, #15]
    79b8:	e011      	b.n	79de <Adc_Ip_Init+0x158>
        {
            Adc_Ip_ConfigChannel(Instance, &(Config->ChannelConfigs[Index]));
    79ba:	9b00      	ldr	r3, [sp, #0]
    79bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
    79be:	f89d 200f 	ldrb.w	r2, [sp, #15]
    79c2:	4613      	mov	r3, r2
    79c4:	005b      	lsls	r3, r3, #1
    79c6:	4413      	add	r3, r2
    79c8:	009b      	lsls	r3, r3, #2
    79ca:	440b      	add	r3, r1
    79cc:	4619      	mov	r1, r3
    79ce:	9801      	ldr	r0, [sp, #4]
    79d0:	f000 f9c2 	bl	7d58 <Adc_Ip_ConfigChannel>
        for (Index = 0u; Index < Config->NumChannels; Index++)
    79d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    79d8:	3301      	adds	r3, #1
    79da:	f88d 300f 	strb.w	r3, [sp, #15]
    79de:	9b00      	ldr	r3, [sp, #0]
    79e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    79e4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    79e8:	429a      	cmp	r2, r3
    79ea:	d3e6      	bcc.n	79ba <Adc_Ip_Init+0x134>
        }
    }

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_Ip_axState[Instance].ConversionCompleteNotification = Config->ConversionCompleteNotification;
    79ec:	9b00      	ldr	r3, [sp, #0]
    79ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    79f0:	490f      	ldr	r1, [pc, #60]	; (7a30 <Adc_Ip_Init+0x1aa>)
    79f2:	9b01      	ldr	r3, [sp, #4]
    79f4:	204c      	movs	r0, #76	; 0x4c
    79f6:	fb00 f303 	mul.w	r3, r0, r3
    79fa:	440b      	add	r3, r1
    79fc:	3308      	adds	r3, #8
    79fe:	601a      	str	r2, [r3, #0]
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    Adc_Ip_axState[Instance].CalibrationClockDivide = Config->CalibrationClockDivide;
    7a00:	9b00      	ldr	r3, [sp, #0]
    7a02:	685a      	ldr	r2, [r3, #4]
    7a04:	490a      	ldr	r1, [pc, #40]	; (7a30 <Adc_Ip_Init+0x1aa>)
    7a06:	9b01      	ldr	r3, [sp, #4]
    7a08:	204c      	movs	r0, #76	; 0x4c
    7a0a:	fb00 f303 	mul.w	r3, r0, r3
    7a0e:	440b      	add	r3, r1
    7a10:	3304      	adds	r3, #4
    7a12:	601a      	str	r2, [r3, #0]
    Adc_Ip_axState[Instance].Init = TRUE;
    7a14:	4a06      	ldr	r2, [pc, #24]	; (7a30 <Adc_Ip_Init+0x1aa>)
    7a16:	9b01      	ldr	r3, [sp, #4]
    7a18:	214c      	movs	r1, #76	; 0x4c
    7a1a:	fb01 f303 	mul.w	r3, r1, r3
    7a1e:	4413      	add	r3, r2
    7a20:	2201      	movs	r2, #1
    7a22:	701a      	strb	r2, [r3, #0]
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    Adc_Ip_axState[Instance].PretriggerSel = Config->PretriggerSel;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
}
    7a24:	bf00      	nop
    7a26:	b007      	add	sp, #28
    7a28:	f85d fb04 	ldr.w	pc, [sp], #4
    7a2c:	000185d4 	.word	0x000185d4
    7a30:	1fff8d00 	.word	0x1fff8d00

00007a34 <Adc_Ip_DeInit>:
* Description   : This function resets the ADC internal registers to default values.
*
* @implements     Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Adc_Ip_DeInit(const uint32 Instance)
{
    7a34:	b500      	push	{lr}
    7a36:	b0c3      	sub	sp, #268	; 0x10c
    7a38:	ab42      	add	r3, sp, #264	; 0x108
    7a3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    7a3e:	6018      	str	r0, [r3, #0]

    Adc_Ip_ConfigType DefaultConfig;
    Adc_Ip_ChanConfigType ChannelConfigs[ADC_MAX_CHAN_COUNT];
    uint8 Index;

    DefaultConfig.ClockDivide = ADC_IP_CLK_FULL_BUS;
    7a40:	2300      	movs	r3, #0
    7a42:	9332      	str	r3, [sp, #200]	; 0xc8
    DefaultConfig.CalibrationClockDivide = ADC_IP_CLK_EIGHTH_BUS;
    7a44:	2303      	movs	r3, #3
    7a46:	9333      	str	r3, [sp, #204]	; 0xcc
    DefaultConfig.InputClock = ADC_IP_CLK_ALT_1;
    7a48:	2300      	movs	r3, #0
    7a4a:	9334      	str	r3, [sp, #208]	; 0xd0
    DefaultConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    7a4c:	230c      	movs	r3, #12
    7a4e:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
    DefaultConfig.AvgEn = FALSE;
    7a52:	2300      	movs	r3, #0
    7a54:	f88d 30d5 	strb.w	r3, [sp, #213]	; 0xd5
    DefaultConfig.AvgSel = ADC_IP_AVG_4_CONV;
    7a58:	2300      	movs	r3, #0
    7a5a:	9336      	str	r3, [sp, #216]	; 0xd8
    DefaultConfig.Resolution = ADC_IP_RESOLUTION_8BIT;
    7a5c:	2300      	movs	r3, #0
    7a5e:	9337      	str	r3, [sp, #220]	; 0xdc
    DefaultConfig.TriggerMode = ADC_IP_TRIGGER_SOFTWARE;
    7a60:	2300      	movs	r3, #0
    7a62:	9338      	str	r3, [sp, #224]	; 0xe0
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    DefaultConfig.PretriggerSel = ADC_IP_PRETRIGGER_SEL_PDB;
    DefaultConfig.TriggerSel = ADC_IP_TRIGGER_SEL_PDB;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
    DefaultConfig.DmaEnable = FALSE;
    7a64:	2300      	movs	r3, #0
    7a66:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    DefaultConfig.VoltageRef = ADC_IP_VOLTAGEREF_VREF;
    7a6a:	2300      	movs	r3, #0
    7a6c:	933a      	str	r3, [sp, #232]	; 0xe8
    DefaultConfig.ContinuousConvEnable = FALSE;
    7a6e:	2300      	movs	r3, #0
    7a70:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DefaultConfig.SupplyMonitoringEnable = FALSE;
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    DefaultConfig.CompareEnable = FALSE;
    7a74:	2300      	movs	r3, #0
    7a76:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
    DefaultConfig.CompareGreaterThanEnable = FALSE;
    7a7a:	2300      	movs	r3, #0
    7a7c:	f88d 30ee 	strb.w	r3, [sp, #238]	; 0xee
    DefaultConfig.CompareRangeFuncEnable = FALSE;
    7a80:	2300      	movs	r3, #0
    7a82:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
    DefaultConfig.CompVal1 = 0u;
    7a86:	2300      	movs	r3, #0
    7a88:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    DefaultConfig.CompVal2 = 0u;
    7a8c:	2300      	movs	r3, #0
    7a8e:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
    DefaultConfig.UsrGain = ADC_IP_DEFAULT_USER_GAIN;
    7a92:	2304      	movs	r3, #4
    7a94:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
    DefaultConfig.UsrOffset = 0u;
    7a98:	2300      	movs	r3, #0
    7a9a:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    DefaultConfig.NumChannels = ADC_MAX_CHAN_COUNT;
    7a9e:	2310      	movs	r3, #16
    7aa0:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    7aa4:	2300      	movs	r3, #0
    7aa6:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    7aaa:	e02b      	b.n	7b04 <Adc_Ip_DeInit+0xd0>
    {
        ChannelConfigs[Index].ChnIdx = Index;
    7aac:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    7ab0:	ab42      	add	r3, sp, #264	; 0x108
    7ab2:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    7ab6:	4613      	mov	r3, r2
    7ab8:	005b      	lsls	r3, r3, #1
    7aba:	4413      	add	r3, r2
    7abc:	009b      	lsls	r3, r3, #2
    7abe:	440b      	add	r3, r1
    7ac0:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    7ac4:	701a      	strb	r2, [r3, #0]
        ChannelConfigs[Index].Channel = ADC_IP_INPUTCHAN_DISABLED;
    7ac6:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    7aca:	ab42      	add	r3, sp, #264	; 0x108
    7acc:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    7ad0:	4613      	mov	r3, r2
    7ad2:	005b      	lsls	r3, r3, #1
    7ad4:	4413      	add	r3, r2
    7ad6:	009b      	lsls	r3, r3, #2
    7ad8:	440b      	add	r3, r1
    7ada:	3304      	adds	r3, #4
    7adc:	221f      	movs	r2, #31
    7ade:	601a      	str	r2, [r3, #0]
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
        ChannelConfigs[Index].InterruptEnable = FALSE;
    7ae0:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    7ae4:	ab42      	add	r3, sp, #264	; 0x108
    7ae6:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    7aea:	4613      	mov	r3, r2
    7aec:	005b      	lsls	r3, r3, #1
    7aee:	4413      	add	r3, r2
    7af0:	009b      	lsls	r3, r3, #2
    7af2:	440b      	add	r3, r1
    7af4:	3308      	adds	r3, #8
    7af6:	2200      	movs	r2, #0
    7af8:	701a      	strb	r2, [r3, #0]
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    7afa:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    7afe:	3301      	adds	r3, #1
    7b00:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    7b04:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    7b08:	2b0f      	cmp	r3, #15
    7b0a:	d9cf      	bls.n	7aac <Adc_Ip_DeInit+0x78>
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    }
    DefaultConfig.ChannelConfigs = ChannelConfigs;
    7b0c:	ab02      	add	r3, sp, #8
    7b0e:	933f      	str	r3, [sp, #252]	; 0xfc
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    DefaultConfig.ConversionCompleteNotification = NULL_PTR;
    7b10:	2300      	movs	r3, #0
    7b12:	9340      	str	r3, [sp, #256]	; 0x100
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

    Adc_Ip_Init(Instance, &DefaultConfig);
    7b14:	aa32      	add	r2, sp, #200	; 0xc8
    7b16:	ab42      	add	r3, sp, #264	; 0x108
    7b18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    7b1c:	4611      	mov	r1, r2
    7b1e:	6818      	ldr	r0, [r3, #0]
    7b20:	f7ff feb1 	bl	7886 <Adc_Ip_Init>
    {
        ADC_ResetSupplyMonitoringChannel();
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    Adc_Ip_axState[Instance].Init = FALSE;
    7b24:	4a07      	ldr	r2, [pc, #28]	; (7b44 <Adc_Ip_DeInit+0x110>)
    7b26:	ab42      	add	r3, sp, #264	; 0x108
    7b28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    7b2c:	681b      	ldr	r3, [r3, #0]
    7b2e:	214c      	movs	r1, #76	; 0x4c
    7b30:	fb01 f303 	mul.w	r3, r1, r3
    7b34:	4413      	add	r3, r2
    7b36:	2200      	movs	r2, #0
    7b38:	701a      	strb	r2, [r3, #0]
}
    7b3a:	bf00      	nop
    7b3c:	b043      	add	sp, #268	; 0x10c
    7b3e:	f85d fb04 	ldr.w	pc, [sp], #4
    7b42:	bf00      	nop
    7b44:	1fff8d00 	.word	0x1fff8d00

00007b48 <Adc_Ip_SetAveraging>:
* @implements     Adc_Ip_SetAveraging_Activity
* END**************************************************************************/
void Adc_Ip_SetAveraging(const uint32 Instance,
                         const boolean AvgEn,
                         const Adc_Ip_AvgSelectType AvgSel)
{
    7b48:	b500      	push	{lr}
    7b4a:	b087      	sub	sp, #28
    7b4c:	9003      	str	r0, [sp, #12]
    7b4e:	460b      	mov	r3, r1
    7b50:	9201      	str	r2, [sp, #4]
    7b52:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7b56:	4a0a      	ldr	r2, [pc, #40]	; (7b80 <Adc_Ip_SetAveraging+0x38>)
    7b58:	9b03      	ldr	r3, [sp, #12]
    7b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b5e:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27();
    7b60:	f009 fa1c 	bl	10f9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>
    Adc_HwAcc_SetAveraging(Base, AvgEn, AvgSel);
    7b64:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7b68:	9a01      	ldr	r2, [sp, #4]
    7b6a:	4619      	mov	r1, r3
    7b6c:	9805      	ldr	r0, [sp, #20]
    7b6e:	f7ff fd73 	bl	7658 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27();
    7b72:	f009 fa3f 	bl	10ff4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>
}
    7b76:	bf00      	nop
    7b78:	b007      	add	sp, #28
    7b7a:	f85d fb04 	ldr.w	pc, [sp], #4
    7b7e:	bf00      	nop
    7b80:	000185d4 	.word	0x000185d4

00007b84 <Adc_Ip_SetSampleTime>:
*
* @implements     Adc_Ip_SetSampleTime_Activity
* END**************************************************************************/
void Adc_Ip_SetSampleTime(const uint32 Instance,
                          const uint8 SampleTime)
{
    7b84:	b500      	push	{lr}
    7b86:	b085      	sub	sp, #20
    7b88:	9001      	str	r0, [sp, #4]
    7b8a:	460b      	mov	r3, r1
    7b8c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7b90:	4a09      	ldr	r2, [pc, #36]	; (7bb8 <Adc_Ip_SetSampleTime+0x34>)
    7b92:	9b01      	ldr	r3, [sp, #4]
    7b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b98:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16();
    7b9a:	f008 fe79 	bl	10890 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>
    Adc_HwAcc_SetSampleTime(Base, SampleTime);
    7b9e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7ba2:	4619      	mov	r1, r3
    7ba4:	9803      	ldr	r0, [sp, #12]
    7ba6:	f7ff fd36 	bl	7616 <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16();
    7baa:	f008 fe9d 	bl	108e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>
}
    7bae:	bf00      	nop
    7bb0:	b005      	add	sp, #20
    7bb2:	f85d fb04 	ldr.w	pc, [sp], #4
    7bb6:	bf00      	nop
    7bb8:	000185d4 	.word	0x000185d4

00007bbc <Adc_Ip_EnableDma>:
* Description   : This function enables DMA.
*
* @implements     Adc_Ip_EnableDma_Activity
* END**************************************************************************/
void Adc_Ip_EnableDma(const uint32 Instance)
{
    7bbc:	b500      	push	{lr}
    7bbe:	b085      	sub	sp, #20
    7bc0:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7bc2:	4a0a      	ldr	r2, [pc, #40]	; (7bec <Adc_Ip_EnableDma+0x30>)
    7bc4:	9b01      	ldr	r3, [sp, #4]
    7bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bca:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26();
    7bcc:	f009 f994 	bl	10ef8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>
    Base->SC2 |= ADC_SC2_DMAEN_MASK;
    7bd0:	9b03      	ldr	r3, [sp, #12]
    7bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7bd6:	f043 0204 	orr.w	r2, r3, #4
    7bda:	9b03      	ldr	r3, [sp, #12]
    7bdc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26();
    7be0:	f009 f9b6 	bl	10f50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>
}
    7be4:	bf00      	nop
    7be6:	b005      	add	sp, #20
    7be8:	f85d fb04 	ldr.w	pc, [sp], #4
    7bec:	000185d4 	.word	0x000185d4

00007bf0 <Adc_Ip_DisableDma>:
* Description   : This function disables DMA.
*
* @implements     Adc_Ip_DisableDma_Activity
* END**************************************************************************/
void Adc_Ip_DisableDma(const uint32 Instance)
{
    7bf0:	b500      	push	{lr}
    7bf2:	b085      	sub	sp, #20
    7bf4:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7bf6:	4a0a      	ldr	r2, [pc, #40]	; (7c20 <Adc_Ip_DisableDma+0x30>)
    7bf8:	9b01      	ldr	r3, [sp, #4]
    7bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bfe:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22();
    7c00:	f009 f832 	bl	10c68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>
    Base->SC2 &= ~(ADC_SC2_DMAEN_MASK);
    7c04:	9b03      	ldr	r3, [sp, #12]
    7c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7c0a:	f023 0204 	bic.w	r2, r3, #4
    7c0e:	9b03      	ldr	r3, [sp, #12]
    7c10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22();
    7c14:	f009 f854 	bl	10cc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>
}
    7c18:	bf00      	nop
    7c1a:	b005      	add	sp, #20
    7c1c:	f85d fb04 	ldr.w	pc, [sp], #4
    7c20:	000185d4 	.word	0x000185d4

00007c24 <Adc_Ip_SetTriggerMode>:
*
* @implements     Adc_Ip_SetTriggerMode_Activity
* END**************************************************************************/
void Adc_Ip_SetTriggerMode(const uint32 Instance,
                           const Adc_Ip_TrigType TriggerMode)
{
    7c24:	b500      	push	{lr}
    7c26:	b085      	sub	sp, #20
    7c28:	9001      	str	r0, [sp, #4]
    7c2a:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7c2c:	4a08      	ldr	r2, [pc, #32]	; (7c50 <Adc_Ip_SetTriggerMode+0x2c>)
    7c2e:	9b01      	ldr	r3, [sp, #4]
    7c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c34:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23();
    7c36:	f009 f869 	bl	10d0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    7c3a:	9900      	ldr	r1, [sp, #0]
    7c3c:	9803      	ldr	r0, [sp, #12]
    7c3e:	f7ff fd4e 	bl	76de <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23();
    7c42:	f009 f88f 	bl	10d64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>
}
    7c46:	bf00      	nop
    7c48:	b005      	add	sp, #20
    7c4a:	f85d fb04 	ldr.w	pc, [sp], #4
    7c4e:	bf00      	nop
    7c50:	000185d4 	.word	0x000185d4

00007c54 <Adc_Ip_SetContinuousMode>:
*
* @implements     Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Adc_Ip_SetContinuousMode(const uint32 Instance,
                              const boolean ContinuousModeEnable)
{
    7c54:	b500      	push	{lr}
    7c56:	b085      	sub	sp, #20
    7c58:	9001      	str	r0, [sp, #4]
    7c5a:	460b      	mov	r3, r1
    7c5c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7c60:	4a11      	ldr	r2, [pc, #68]	; (7ca8 <Adc_Ip_SetContinuousMode+0x54>)
    7c62:	9b01      	ldr	r3, [sp, #4]
    7c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c68:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30();
    7c6a:	f009 fa8d 	bl	11188 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>
    uint32 Sc3Reg = Base->SC3;
    7c6e:	9b03      	ldr	r3, [sp, #12]
    7c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    7c74:	9302      	str	r3, [sp, #8]
    Sc3Reg &= ~(ADC_SC3_ADCO_MASK);
    7c76:	9b02      	ldr	r3, [sp, #8]
    7c78:	f023 0308 	bic.w	r3, r3, #8
    7c7c:	9302      	str	r3, [sp, #8]
    Sc3Reg |= ADC_SC3_ADCO(ContinuousModeEnable ? 1u : 0u);
    7c7e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7c82:	2b00      	cmp	r3, #0
    7c84:	d001      	beq.n	7c8a <Adc_Ip_SetContinuousMode+0x36>
    7c86:	2308      	movs	r3, #8
    7c88:	e000      	b.n	7c8c <Adc_Ip_SetContinuousMode+0x38>
    7c8a:	2300      	movs	r3, #0
    7c8c:	9a02      	ldr	r2, [sp, #8]
    7c8e:	4313      	orrs	r3, r2
    7c90:	9302      	str	r3, [sp, #8]
    Base->SC3 = Sc3Reg;
    7c92:	9b03      	ldr	r3, [sp, #12]
    7c94:	9a02      	ldr	r2, [sp, #8]
    7c96:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30();
    7c9a:	f009 faa1 	bl	111e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>
}
    7c9e:	bf00      	nop
    7ca0:	b005      	add	sp, #20
    7ca2:	f85d fb04 	ldr.w	pc, [sp], #4
    7ca6:	bf00      	nop
    7ca8:	000185d4 	.word	0x000185d4

00007cac <Adc_Ip_SetResolution>:
*
* @implements     Adc_Ip_SetResolution_Activity
* END**************************************************************************/
void Adc_Ip_SetResolution(const uint32 Instance,
                          const Adc_Ip_ResolutionType Resolution)
{
    7cac:	b500      	push	{lr}
    7cae:	b085      	sub	sp, #20
    7cb0:	9001      	str	r0, [sp, #4]
    7cb2:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7cb4:	4a0e      	ldr	r2, [pc, #56]	; (7cf0 <Adc_Ip_SetResolution+0x44>)
    7cb6:	9b01      	ldr	r3, [sp, #4]
    7cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cbc:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10();
    7cbe:	f008 fab3 	bl	10228 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>
    uint32 Cfg1Reg = Base->CFG1;
    7cc2:	9b03      	ldr	r3, [sp, #12]
    7cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7cc6:	9302      	str	r3, [sp, #8]
    Cfg1Reg &= ~(ADC_CFG1_MODE_MASK);
    7cc8:	9b02      	ldr	r3, [sp, #8]
    7cca:	f023 030c 	bic.w	r3, r3, #12
    7cce:	9302      	str	r3, [sp, #8]
    Cfg1Reg |= ADC_CFG1_MODE(Resolution);
    7cd0:	9b00      	ldr	r3, [sp, #0]
    7cd2:	009b      	lsls	r3, r3, #2
    7cd4:	f003 030c 	and.w	r3, r3, #12
    7cd8:	9a02      	ldr	r2, [sp, #8]
    7cda:	4313      	orrs	r3, r2
    7cdc:	9302      	str	r3, [sp, #8]
    Base->CFG1 = Cfg1Reg;
    7cde:	9b03      	ldr	r3, [sp, #12]
    7ce0:	9a02      	ldr	r2, [sp, #8]
    7ce2:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10();
    7ce4:	f008 facc 	bl	10280 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>
}
    7ce8:	bf00      	nop
    7cea:	b005      	add	sp, #20
    7cec:	f85d fb04 	ldr.w	pc, [sp], #4
    7cf0:	000185d4 	.word	0x000185d4

00007cf4 <Adc_Ip_SetClockMode>:
*
* @implements     Adc_Ip_SetClockMode_Activity
* END**************************************************************************/
void Adc_Ip_SetClockMode(const uint32 Instance,
                         const Adc_Ip_ClockConfigType * const Config)
{
    7cf4:	b500      	push	{lr}
    7cf6:	b085      	sub	sp, #20
    7cf8:	9001      	str	r0, [sp, #4]
    7cfa:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7cfc:	4a15      	ldr	r2, [pc, #84]	; (7d54 <Adc_Ip_SetClockMode+0x60>)
    7cfe:	9b01      	ldr	r3, [sp, #4]
    7d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d04:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11();
    7d06:	f008 fc29 	bl	1055c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    7d0a:	9b00      	ldr	r3, [sp, #0]
    7d0c:	6819      	ldr	r1, [r3, #0]
    7d0e:	9b00      	ldr	r3, [sp, #0]
    7d10:	685b      	ldr	r3, [r3, #4]
    7d12:	461a      	mov	r2, r3
    7d14:	9803      	ldr	r0, [sp, #12]
    7d16:	f7ff fc23 	bl	7560 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11();
    7d1a:	f008 fc4b 	bl	105b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14();
    7d1e:	f008 fd13 	bl	10748 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    7d22:	9b00      	ldr	r3, [sp, #0]
    7d24:	7a1b      	ldrb	r3, [r3, #8]
    7d26:	4619      	mov	r1, r3
    7d28:	9803      	ldr	r0, [sp, #12]
    7d2a:	f7ff fc74 	bl	7616 <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14();
    7d2e:	f008 fd37 	bl	107a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28();
    7d32:	f009 f985 	bl	11040 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    7d36:	9b00      	ldr	r3, [sp, #0]
    7d38:	7a59      	ldrb	r1, [r3, #9]
    7d3a:	9b00      	ldr	r3, [sp, #0]
    7d3c:	68db      	ldr	r3, [r3, #12]
    7d3e:	461a      	mov	r2, r3
    7d40:	9803      	ldr	r0, [sp, #12]
    7d42:	f7ff fc89 	bl	7658 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28();
    7d46:	f009 f9a7 	bl	11098 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>
}
    7d4a:	bf00      	nop
    7d4c:	b005      	add	sp, #20
    7d4e:	f85d fb04 	ldr.w	pc, [sp], #4
    7d52:	bf00      	nop
    7d54:	000185d4 	.word	0x000185d4

00007d58 <Adc_Ip_ConfigChannel>:
*
* @implements     Adc_Ip_ConfigChannel_Activity
* END**************************************************************************/
void Adc_Ip_ConfigChannel(const uint32 Instance,
                          const Adc_Ip_ChanConfigType * const ChanConfig)
{
    7d58:	b510      	push	{r4, lr}
    7d5a:	b084      	sub	sp, #16
    7d5c:	9001      	str	r0, [sp, #4]
    7d5e:	9100      	str	r1, [sp, #0]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)ChanConfig->Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7d60:	4a13      	ldr	r2, [pc, #76]	; (7db0 <Adc_Ip_ConfigChannel+0x58>)
    7d62:	9b01      	ldr	r3, [sp, #4]
    7d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d68:	9303      	str	r3, [sp, #12]
        InputChanDemapped = ADC_IP_INPUTCHAN_INT0;
    }
    else
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    {
        InputChanDemapped = ChanConfig->Channel;
    7d6a:	9b00      	ldr	r3, [sp, #0]
    7d6c:	685b      	ldr	r3, [r3, #4]
    7d6e:	9302      	str	r3, [sp, #8]
    }

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21();
    7d70:	f008 ff28 	bl	10bc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, ChanConfig->InterruptEnable);
    7d74:	9b00      	ldr	r3, [sp, #0]
    7d76:	7819      	ldrb	r1, [r3, #0]
    7d78:	9b00      	ldr	r3, [sp, #0]
    7d7a:	7a1b      	ldrb	r3, [r3, #8]
    7d7c:	9a02      	ldr	r2, [sp, #8]
    7d7e:	9803      	ldr	r0, [sp, #12]
    7d80:	f7ff fcd5 	bl	772e <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, FALSE);
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21();
    7d84:	f008 ff4a 	bl	10c1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>

    /* Also update in state structure */
    Adc_Ip_axState[Instance].ChannelConfig[ChanConfig->ChnIdx] = ChanConfig->Channel;
    7d88:	9b00      	ldr	r3, [sp, #0]
    7d8a:	781b      	ldrb	r3, [r3, #0]
    7d8c:	461c      	mov	r4, r3
    7d8e:	9b00      	ldr	r3, [sp, #0]
    7d90:	6859      	ldr	r1, [r3, #4]
    7d92:	4808      	ldr	r0, [pc, #32]	; (7db4 <Adc_Ip_ConfigChannel+0x5c>)
    7d94:	9a01      	ldr	r2, [sp, #4]
    7d96:	4613      	mov	r3, r2
    7d98:	00db      	lsls	r3, r3, #3
    7d9a:	4413      	add	r3, r2
    7d9c:	005b      	lsls	r3, r3, #1
    7d9e:	4413      	add	r3, r2
    7da0:	4423      	add	r3, r4
    7da2:	3302      	adds	r3, #2
    7da4:	009b      	lsls	r3, r3, #2
    7da6:	4403      	add	r3, r0
    7da8:	6059      	str	r1, [r3, #4]
}
    7daa:	bf00      	nop
    7dac:	b004      	add	sp, #16
    7dae:	bd10      	pop	{r4, pc}
    7db0:	000185d4 	.word	0x000185d4
    7db4:	1fff8d00 	.word	0x1fff8d00

00007db8 <Adc_Ip_SetDisabledChannel>:
* @implements     Adc_Ip_SetDisabledChannel_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_SetDisabledChannel(const uint32 Instance,
                                            const uint8 ControlChanIdx,
                                            const boolean WithTimeout)
{
    7db8:	b500      	push	{lr}
    7dba:	b089      	sub	sp, #36	; 0x24
    7dbc:	9001      	str	r0, [sp, #4]
    7dbe:	460b      	mov	r3, r1
    7dc0:	f88d 3003 	strb.w	r3, [sp, #3]
    7dc4:	4613      	mov	r3, r2
    7dc6:	f88d 3002 	strb.w	r3, [sp, #2]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7dca:	4a24      	ldr	r2, [pc, #144]	; (7e5c <Adc_Ip_SetDisabledChannel+0xa4>)
    7dcc:	9b01      	ldr	r3, [sp, #4]
    7dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7dd2:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    7dd4:	2300      	movs	r3, #0
    7dd6:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    7dd8:	2100      	movs	r1, #0
    7dda:	4821      	ldr	r0, [pc, #132]	; (7e60 <Adc_Ip_SetDisabledChannel+0xa8>)
    7ddc:	f7fa f8b6 	bl	1f4c <OsIf_MicrosToTicks>
    7de0:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    7de2:	2000      	movs	r0, #0
    7de4:	f7fa f866 	bl	1eb4 <OsIf_GetCounter>
    7de8:	4603      	mov	r3, r0
    7dea:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    7dec:	2300      	movs	r3, #0
    7dee:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17();
    7df0:	f008 fda0 	bl	10934 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>
    /* Set input channel select to disabled */
    SC1(Base, ControlChanIdx) |= ADC_SC1_ADCH_MASK;
    7df4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7df8:	9b05      	ldr	r3, [sp, #20]
    7dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7dfe:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7e02:	f043 011f 	orr.w	r1, r3, #31
    7e06:	9b05      	ldr	r3, [sp, #20]
    7e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17();
    7e0c:	f008 fdbe 	bl	1098c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>

    if (WithTimeout == TRUE)
    7e10:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7e14:	2b00      	cmp	r3, #0
    7e16:	d01c      	beq.n	7e52 <Adc_Ip_SetDisabledChannel+0x9a>
    {
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    7e18:	e008      	b.n	7e2c <Adc_Ip_SetDisabledChannel+0x74>
        {
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    7e1a:	ab03      	add	r3, sp, #12
    7e1c:	2100      	movs	r1, #0
    7e1e:	4618      	mov	r0, r3
    7e20:	f7fa f861 	bl	1ee6 <OsIf_GetElapsed>
    7e24:	4602      	mov	r2, r0
    7e26:	9b06      	ldr	r3, [sp, #24]
    7e28:	4413      	add	r3, r2
    7e2a:	9306      	str	r3, [sp, #24]
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    7e2c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7e30:	9b05      	ldr	r3, [sp, #20]
    7e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7e36:	f003 031f 	and.w	r3, r3, #31
    7e3a:	2b1f      	cmp	r3, #31
    7e3c:	d003      	beq.n	7e46 <Adc_Ip_SetDisabledChannel+0x8e>
    7e3e:	9a06      	ldr	r2, [sp, #24]
    7e40:	9b04      	ldr	r3, [sp, #16]
    7e42:	429a      	cmp	r2, r3
    7e44:	d3e9      	bcc.n	7e1a <Adc_Ip_SetDisabledChannel+0x62>
        }
        if (ElapsedTicks >= TimeoutTicks)
    7e46:	9a06      	ldr	r2, [sp, #24]
    7e48:	9b04      	ldr	r3, [sp, #16]
    7e4a:	429a      	cmp	r2, r3
    7e4c:	d301      	bcc.n	7e52 <Adc_Ip_SetDisabledChannel+0x9a>
        {
            Status = ADC_IP_STATUS_TIMEOUT;
    7e4e:	2302      	movs	r3, #2
    7e50:	9307      	str	r3, [sp, #28]
        }
    }

    return Status;
    7e52:	9b07      	ldr	r3, [sp, #28]
}
    7e54:	4618      	mov	r0, r3
    7e56:	b009      	add	sp, #36	; 0x24
    7e58:	f85d fb04 	ldr.w	pc, [sp], #4
    7e5c:	000185d4 	.word	0x000185d4
    7e60:	000186a0 	.word	0x000186a0

00007e64 <Adc_Ip_StartConversion>:
* @implements     Adc_Ip_StartConversion_Activity
* END**************************************************************************/
void Adc_Ip_StartConversion(const uint32 Instance,
                            Adc_Ip_InputChannelType InputChannel,
                            const boolean InterruptEnable)
{
    7e64:	b500      	push	{lr}
    7e66:	b087      	sub	sp, #28
    7e68:	9003      	str	r0, [sp, #12]
    7e6a:	9102      	str	r1, [sp, #8]
    7e6c:	4613      	mov	r3, r2
    7e6e:	f88d 3007 	strb.w	r3, [sp, #7]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7e72:	4a0a      	ldr	r2, [pc, #40]	; (7e9c <Adc_Ip_StartConversion+0x38>)
    7e74:	9b03      	ldr	r3, [sp, #12]
    7e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e7a:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18();
    7e7c:	f008 fdac 	bl	109d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>
    /* Configure SC1A register */
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, InterruptEnable);
    7e80:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7e84:	9a02      	ldr	r2, [sp, #8]
    7e86:	2100      	movs	r1, #0
    7e88:	9805      	ldr	r0, [sp, #20]
    7e8a:	f7ff fc50 	bl	772e <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, FALSE);
    (void)InterruptEnable;
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18();
    7e8e:	f008 fdcf 	bl	10a30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>
}
    7e92:	bf00      	nop
    7e94:	b007      	add	sp, #28
    7e96:	f85d fb04 	ldr.w	pc, [sp], #4
    7e9a:	bf00      	nop
    7e9c:	000185d4 	.word	0x000185d4

00007ea0 <Adc_Ip_GetConvActiveFlag>:
* Description   : Reads and return conversion active flag status.
*
* @implements     Adc_Ip_GetConvActiveFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvActiveFlag(const uint32 Instance)
{
    7ea0:	b084      	sub	sp, #16
    7ea2:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7ea4:	4a0b      	ldr	r2, [pc, #44]	; (7ed4 <Adc_Ip_GetConvActiveFlag+0x34>)
    7ea6:	9b01      	ldr	r3, [sp, #4]
    7ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7eac:	9303      	str	r3, [sp, #12]
    uint32 Sc2Reg = Base->SC2;
    7eae:	9b03      	ldr	r3, [sp, #12]
    7eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7eb4:	9302      	str	r3, [sp, #8]

    Sc2Reg = (Sc2Reg & ADC_SC2_ADACT_MASK) >> ADC_SC2_ADACT_SHIFT;
    7eb6:	9b02      	ldr	r3, [sp, #8]
    7eb8:	09db      	lsrs	r3, r3, #7
    7eba:	f003 0301 	and.w	r3, r3, #1
    7ebe:	9302      	str	r3, [sp, #8]

    return (Sc2Reg != 0u) ? TRUE : FALSE;
    7ec0:	9b02      	ldr	r3, [sp, #8]
    7ec2:	2b00      	cmp	r3, #0
    7ec4:	bf14      	ite	ne
    7ec6:	2301      	movne	r3, #1
    7ec8:	2300      	moveq	r3, #0
    7eca:	b2db      	uxtb	r3, r3
}
    7ecc:	4618      	mov	r0, r3
    7ece:	b004      	add	sp, #16
    7ed0:	4770      	bx	lr
    7ed2:	bf00      	nop
    7ed4:	000185d4 	.word	0x000185d4

00007ed8 <Adc_Ip_GetChanInterrupt>:
*
* @implements     Adc_Ip_GetChanInterrupt_Activity
* END**************************************************************************/
boolean Adc_Ip_GetChanInterrupt(const uint32 Instance,
                                const uint8 ControlChanIdx)
{
    7ed8:	b500      	push	{lr}
    7eda:	b085      	sub	sp, #20
    7edc:	9001      	str	r0, [sp, #4]
    7ede:	460b      	mov	r3, r1
    7ee0:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    7ee4:	4a08      	ldr	r2, [pc, #32]	; (7f08 <Adc_Ip_GetChanInterrupt+0x30>)
    7ee6:	9b01      	ldr	r3, [sp, #4]
    7ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7eec:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7ef4:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetAIEN(Sc1Reg);
    7ef6:	9803      	ldr	r0, [sp, #12]
    7ef8:	f7ff fc5e 	bl	77b8 <Adc_HwAcc_GetAIEN>
    7efc:	4603      	mov	r3, r0
}
    7efe:	4618      	mov	r0, r3
    7f00:	b005      	add	sp, #20
    7f02:	f85d fb04 	ldr.w	pc, [sp], #4
    7f06:	bf00      	nop
    7f08:	000185d4 	.word	0x000185d4

00007f0c <Adc_Ip_GetConvCompleteFlag>:
*
* @implements     Adc_Ip_GetConvCompleteFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvCompleteFlag(const uint32 Instance,
                                   const uint8 ControlChanIdx)
{
    7f0c:	b500      	push	{lr}
    7f0e:	b085      	sub	sp, #20
    7f10:	9001      	str	r0, [sp, #4]
    7f12:	460b      	mov	r3, r1
    7f14:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    7f18:	4a08      	ldr	r2, [pc, #32]	; (7f3c <Adc_Ip_GetConvCompleteFlag+0x30>)
    7f1a:	9b01      	ldr	r3, [sp, #4]
    7f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f20:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7f28:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetCOCO(Sc1Reg);
    7f2a:	9803      	ldr	r0, [sp, #12]
    7f2c:	f7ff fc52 	bl	77d4 <Adc_HwAcc_GetCOCO>
    7f30:	4603      	mov	r3, r0
}
    7f32:	4618      	mov	r0, r3
    7f34:	b005      	add	sp, #20
    7f36:	f85d fb04 	ldr.w	pc, [sp], #4
    7f3a:	bf00      	nop
    7f3c:	000185d4 	.word	0x000185d4

00007f40 <Adc_Ip_GetConvData>:
*
* @implements     Adc_Ip_GetConvData_Activity
* END**************************************************************************/
uint16 Adc_Ip_GetConvData(const uint32 Instance,
                          const uint8 ControlChanIdx)
{
    7f40:	b500      	push	{lr}
    7f42:	b085      	sub	sp, #20
    7f44:	9001      	str	r0, [sp, #4]
    7f46:	460b      	mov	r3, r1
    7f48:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7f4c:	4a07      	ldr	r2, [pc, #28]	; (7f6c <Adc_Ip_GetConvData+0x2c>)
    7f4e:	9b01      	ldr	r3, [sp, #4]
    7f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f54:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetData(Base, ControlChanIdx);
    7f56:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7f5a:	4619      	mov	r1, r3
    7f5c:	9803      	ldr	r0, [sp, #12]
    7f5e:	f7ff fc47 	bl	77f0 <Adc_HwAcc_GetData>
    7f62:	4603      	mov	r3, r0
}
    7f64:	4618      	mov	r0, r3
    7f66:	b005      	add	sp, #20
    7f68:	f85d fb04 	ldr.w	pc, [sp], #4
    7f6c:	000185d4 	.word	0x000185d4

00007f70 <Adc_Ip_DoCalibration>:
* specified frequency (50Mhz) and greater than minimum specified frequency (20Mhz).
*
* @implements     Adc_Ip_DoCalibration_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_DoCalibration(const uint32 Instance)
{
    7f70:	b500      	push	{lr}
    7f72:	b093      	sub	sp, #76	; 0x4c
    7f74:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7f76:	4a59      	ldr	r2, [pc, #356]	; (80dc <Adc_Ip_DoCalibration+0x16c>)
    7f78:	9b01      	ldr	r3, [sp, #4]
    7f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f7e:	930f      	str	r3, [sp, #60]	; 0x3c
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    7f80:	2300      	movs	r3, #0
    7f82:	9311      	str	r3, [sp, #68]	; 0x44
    Adc_Ip_TrigType TriggerMode;
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    7f84:	2100      	movs	r1, #0
    7f86:	4856      	ldr	r0, [pc, #344]	; (80e0 <Adc_Ip_DoCalibration+0x170>)
    7f88:	f7f9 ffe0 	bl	1f4c <OsIf_MicrosToTicks>
    7f8c:	900e      	str	r0, [sp, #56]	; 0x38
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    7f8e:	2000      	movs	r0, #0
    7f90:	f7f9 ff90 	bl	1eb4 <OsIf_GetCounter>
    7f94:	4603      	mov	r3, r0
    7f96:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 ElapsedTicks = 0u;
    7f98:	2300      	movs	r3, #0
    7f9a:	9310      	str	r3, [sp, #64]	; 0x40
    uint32 Reg;
    Adc_Ip_ClockConfigType PreClockConfig;
    Adc_Ip_ClockConfigType CalClockConfig;

    /* Store settings before calibration */
    Reg = Base->SC3;
    7f9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    7fa2:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.AvgEn = ((Reg & ADC_SC3_AVGE_MASK) != 0u) ? TRUE : FALSE;
    7fa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7fa6:	089b      	lsrs	r3, r3, #2
    7fa8:	f003 0301 	and.w	r3, r3, #1
    7fac:	2b00      	cmp	r3, #0
    7fae:	bf14      	ite	ne
    7fb0:	2301      	movne	r3, #1
    7fb2:	2300      	moveq	r3, #0
    7fb4:	b2db      	uxtb	r3, r3
    7fb6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    PreClockConfig.AvgSel = Adc_HwAcc_GetAverageSelect(Reg);
    7fba:	980d      	ldr	r0, [sp, #52]	; 0x34
    7fbc:	f7ff fb71 	bl	76a2 <Adc_HwAcc_GetAverageSelect>
    7fc0:	4603      	mov	r3, r0
    7fc2:	930a      	str	r3, [sp, #40]	; 0x28

    Reg = Base->CFG2;
    7fc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7fc8:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.SampleTime = (uint8) ((Reg & ADC_CFG2_SMPLTS_MASK) >> ADC_CFG2_SMPLTS_SHIFT);
    7fca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7fcc:	b2db      	uxtb	r3, r3
    7fce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    TriggerMode = Adc_HwAcc_GetTriggerMode(Base->SC2);
    7fd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7fd8:	4618      	mov	r0, r3
    7fda:	f7ff fb99 	bl	7710 <Adc_HwAcc_GetTriggerMode>
    7fde:	900c      	str	r0, [sp, #48]	; 0x30

    Reg = Base->CFG1;
    7fe0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7fe4:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.ClockDivide = Adc_HwAcc_GetClockDivide(Reg);
    7fe6:	980d      	ldr	r0, [sp, #52]	; 0x34
    7fe8:	f7ff fad8 	bl	759c <Adc_HwAcc_GetClockDivide>
    7fec:	4603      	mov	r3, r0
    7fee:	9307      	str	r3, [sp, #28]
    PreClockConfig.InputClock = Adc_HwAcc_GetInputClock(Reg);
    7ff0:	980d      	ldr	r0, [sp, #52]	; 0x34
    7ff2:	f7ff faf2 	bl	75da <Adc_HwAcc_GetInputClock>
    7ff6:	4603      	mov	r3, r0
    7ff8:	9308      	str	r3, [sp, #32]

    CalClockConfig.AvgEn = TRUE;
    7ffa:	2301      	movs	r3, #1
    7ffc:	f88d 3015 	strb.w	r3, [sp, #21]
    CalClockConfig.AvgSel = ADC_IP_AVG_32_CONV;
    8000:	2303      	movs	r3, #3
    8002:	9306      	str	r3, [sp, #24]
    CalClockConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    8004:	230c      	movs	r3, #12
    8006:	f88d 3014 	strb.w	r3, [sp, #20]
    CalClockConfig.ClockDivide = Adc_Ip_axState[Instance].CalibrationClockDivide;
    800a:	4a36      	ldr	r2, [pc, #216]	; (80e4 <Adc_Ip_DoCalibration+0x174>)
    800c:	9b01      	ldr	r3, [sp, #4]
    800e:	214c      	movs	r1, #76	; 0x4c
    8010:	fb01 f303 	mul.w	r3, r1, r3
    8014:	4413      	add	r3, r2
    8016:	3304      	adds	r3, #4
    8018:	681b      	ldr	r3, [r3, #0]
    801a:	9303      	str	r3, [sp, #12]
    CalClockConfig.InputClock = PreClockConfig.InputClock;
    801c:	9b08      	ldr	r3, [sp, #32]
    801e:	9304      	str	r3, [sp, #16]

    /* Prepare required settings for calibration. */
    ADC_DoCalibration_SetParams(Base, &CalClockConfig, ADC_IP_TRIGGER_SOFTWARE);
    8020:	ab03      	add	r3, sp, #12
    8022:	2200      	movs	r2, #0
    8024:	4619      	mov	r1, r3
    8026:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8028:	f7ff fbfa 	bl	7820 <ADC_DoCalibration_SetParams>

    Base->CLPS = 0u;
    802c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    802e:	2200      	movs	r2, #0
    8030:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    Base->CLP3 = 0u;
    8034:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8036:	2200      	movs	r2, #0
    8038:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    Base->CLP2 = 0u;
    803c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    803e:	2200      	movs	r2, #0
    8040:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    Base->CLP1 = 0u;
    8044:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8046:	2200      	movs	r2, #0
    8048:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Base->CLP0 = 0u;
    804c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    804e:	2200      	movs	r2, #0
    8050:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    Base->CLPX = 0u;
    8054:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8056:	2200      	movs	r2, #0
    8058:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    Base->CLP9 = 0u;
    805c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    805e:	2200      	movs	r2, #0
    8060:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Start calibration by writing to the calibration field */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    8064:	f009 f83e 	bl	110e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Reg = Base->SC3;
    8068:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    806a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    806e:	930d      	str	r3, [sp, #52]	; 0x34
    Reg &= ~(ADC_SC3_CAL_MASK);
    8070:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    8076:	930d      	str	r3, [sp, #52]	; 0x34
    Reg |= ADC_SC3_CAL(1u);
    8078:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    807a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    807e:	930d      	str	r3, [sp, #52]	; 0x34
    Base->SC3 = Reg;
    8080:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8082:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8084:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    8088:	f009 f858 	bl	1113c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Wait for the calibration to finish */
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    808c:	e008      	b.n	80a0 <Adc_Ip_DoCalibration+0x130>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    808e:	ab0b      	add	r3, sp, #44	; 0x2c
    8090:	2100      	movs	r1, #0
    8092:	4618      	mov	r0, r3
    8094:	f7f9 ff27 	bl	1ee6 <OsIf_GetElapsed>
    8098:	4602      	mov	r2, r0
    809a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    809c:	4413      	add	r3, r2
    809e:	9310      	str	r3, [sp, #64]	; 0x40
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    80a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    80a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    80a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    80aa:	2b00      	cmp	r3, #0
    80ac:	d003      	beq.n	80b6 <Adc_Ip_DoCalibration+0x146>
    80ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
    80b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    80b2:	429a      	cmp	r2, r3
    80b4:	d3eb      	bcc.n	808e <Adc_Ip_DoCalibration+0x11e>
    }
    if (ElapsedTicks >= TimeoutTicks)
    80b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    80b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    80ba:	429a      	cmp	r2, r3
    80bc:	d301      	bcc.n	80c2 <Adc_Ip_DoCalibration+0x152>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    80be:	2302      	movs	r3, #2
    80c0:	9311      	str	r3, [sp, #68]	; 0x44
    }

    /* Revert settings as same as before calibration. */
    ADC_DoCalibration_SetParams(Base, &PreClockConfig, TriggerMode);
    80c2:	ab07      	add	r3, sp, #28
    80c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    80c6:	4619      	mov	r1, r3
    80c8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    80ca:	f7ff fba9 	bl	7820 <ADC_DoCalibration_SetParams>

    /* Clear COCO flag */
    (void) R(Base, 0u);
    80ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    80d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return Status;
    80d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    80d4:	4618      	mov	r0, r3
    80d6:	b013      	add	sp, #76	; 0x4c
    80d8:	f85d fb04 	ldr.w	pc, [sp], #4
    80dc:	000185d4 	.word	0x000185d4
    80e0:	000186a0 	.word	0x000186a0
    80e4:	1fff8d00 	.word	0x1fff8d00

000080e8 <Adc_Ip_ClearLatchedTriggers>:
* has been deactivated.
*
* @implements     Adc_Ip_ClearLatchedTriggers_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_ClearLatchedTriggers(const uint32 Instance)
{
    80e8:	b500      	push	{lr}
    80ea:	b089      	sub	sp, #36	; 0x24
    80ec:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    80ee:	4a1e      	ldr	r2, [pc, #120]	; (8168 <Adc_Ip_ClearLatchedTriggers+0x80>)
    80f0:	9b01      	ldr	r3, [sp, #4]
    80f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80f6:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    80f8:	2300      	movs	r3, #0
    80fa:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    80fc:	2100      	movs	r1, #0
    80fe:	481b      	ldr	r0, [pc, #108]	; (816c <Adc_Ip_ClearLatchedTriggers+0x84>)
    8100:	f7f9 ff24 	bl	1f4c <OsIf_MicrosToTicks>
    8104:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    8106:	2000      	movs	r0, #0
    8108:	f7f9 fed4 	bl	1eb4 <OsIf_GetCounter>
    810c:	4603      	mov	r3, r0
    810e:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    8110:	2300      	movs	r3, #0
    8112:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12();
    8114:	f008 fa74 	bl	10600 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>
    /* Write bit to clear latched triggers */
    Base->CFG1 |= ADC_CFG1_CLRLTRG(0x01u);
    8118:	9b05      	ldr	r3, [sp, #20]
    811a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    811c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    8120:	9b05      	ldr	r3, [sp, #20]
    8122:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12();
    8124:	f008 fa98 	bl	10658 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>

    /* Wait for latched triggers to be cleared */
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8128:	e008      	b.n	813c <Adc_Ip_ClearLatchedTriggers+0x54>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    812a:	ab03      	add	r3, sp, #12
    812c:	2100      	movs	r1, #0
    812e:	4618      	mov	r0, r3
    8130:	f7f9 fed9 	bl	1ee6 <OsIf_GetElapsed>
    8134:	4602      	mov	r2, r0
    8136:	9b06      	ldr	r3, [sp, #24]
    8138:	4413      	add	r3, r2
    813a:	9306      	str	r3, [sp, #24]
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    813c:	9b05      	ldr	r3, [sp, #20]
    813e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8142:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    8146:	2b00      	cmp	r3, #0
    8148:	d003      	beq.n	8152 <Adc_Ip_ClearLatchedTriggers+0x6a>
    814a:	9a06      	ldr	r2, [sp, #24]
    814c:	9b04      	ldr	r3, [sp, #16]
    814e:	429a      	cmp	r2, r3
    8150:	d3eb      	bcc.n	812a <Adc_Ip_ClearLatchedTriggers+0x42>
    }
    if (ElapsedTicks >= TimeoutTicks)
    8152:	9a06      	ldr	r2, [sp, #24]
    8154:	9b04      	ldr	r3, [sp, #16]
    8156:	429a      	cmp	r2, r3
    8158:	d301      	bcc.n	815e <Adc_Ip_ClearLatchedTriggers+0x76>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    815a:	2302      	movs	r3, #2
    815c:	9307      	str	r3, [sp, #28]
    }

    return Status;
    815e:	9b07      	ldr	r3, [sp, #28]
}
    8160:	4618      	mov	r0, r3
    8162:	b009      	add	sp, #36	; 0x24
    8164:	f85d fb04 	ldr.w	pc, [sp], #4
    8168:	000185d4 	.word	0x000185d4
    816c:	000186a0 	.word	0x000186a0

00008170 <Adc_Ip_EnableChannelNotification>:
*
* @implements     Adc_Ip_EnableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_EnableChannelNotification(const uint32 Instance,
                                      const uint8 ControlChanIdx)
{
    8170:	b500      	push	{lr}
    8172:	b085      	sub	sp, #20
    8174:	9001      	str	r0, [sp, #4]
    8176:	460b      	mov	r3, r1
    8178:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    817c:	4a0c      	ldr	r2, [pc, #48]	; (81b0 <Adc_Ip_EnableChannelNotification+0x40>)
    817e:	9b01      	ldr	r3, [sp, #4]
    8180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8184:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19();
    8186:	f008 fc79 	bl	10a7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>
    SC1(Base, ControlChanIdx) |= ADC_SC1_AIEN_MASK;
    818a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    818e:	9b03      	ldr	r3, [sp, #12]
    8190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8194:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8198:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    819c:	9b03      	ldr	r3, [sp, #12]
    819e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19();
    81a2:	f008 fc97 	bl	10ad4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>
}
    81a6:	bf00      	nop
    81a8:	b005      	add	sp, #20
    81aa:	f85d fb04 	ldr.w	pc, [sp], #4
    81ae:	bf00      	nop
    81b0:	000185d4 	.word	0x000185d4

000081b4 <Adc_Ip_DisableChannelNotification>:
*
* @implements     Adc_Ip_DisableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_DisableChannelNotification(const uint32 Instance,
                                       const uint8 ControlChanIdx)
{
    81b4:	b500      	push	{lr}
    81b6:	b085      	sub	sp, #20
    81b8:	9001      	str	r0, [sp, #4]
    81ba:	460b      	mov	r3, r1
    81bc:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    81c0:	4a0c      	ldr	r2, [pc, #48]	; (81f4 <Adc_Ip_DisableChannelNotification+0x40>)
    81c2:	9b01      	ldr	r3, [sp, #4]
    81c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81c8:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20();
    81ca:	f008 fca9 	bl	10b20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>
    SC1(Base, ControlChanIdx) &= ~(ADC_SC1_AIEN_MASK);
    81ce:	f89d 2003 	ldrb.w	r2, [sp, #3]
    81d2:	9b03      	ldr	r3, [sp, #12]
    81d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    81d8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    81dc:	f023 0140 	bic.w	r1, r3, #64	; 0x40
    81e0:	9b03      	ldr	r3, [sp, #12]
    81e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20();
    81e6:	f008 fcc7 	bl	10b78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>
}
    81ea:	bf00      	nop
    81ec:	b005      	add	sp, #20
    81ee:	f85d fb04 	ldr.w	pc, [sp], #4
    81f2:	bf00      	nop
    81f4:	000185d4 	.word	0x000185d4

000081f8 <Adc_Ip_ClearTrigErrReg>:
* Description   : This function clears all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_ClearTrigErrReg_Activity
* END**************************************************************************/
void Adc_Ip_ClearTrigErrReg(const uint32 Instance)
{
    81f8:	b500      	push	{lr}
    81fa:	b085      	sub	sp, #20
    81fc:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    81fe:	4a0a      	ldr	r2, [pc, #40]	; (8228 <Adc_Ip_ClearTrigErrReg+0x30>)
    8200:	9b01      	ldr	r3, [sp, #4]
    8202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8206:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25();
    8208:	f008 fe24 	bl	10e54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>
    Base->SC2 |= ADC_SC2_TRGSTERR_MASK;
    820c:	9b03      	ldr	r3, [sp, #12]
    820e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8212:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
    8216:	9b03      	ldr	r3, [sp, #12]
    8218:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25();
    821c:	f008 fe46 	bl	10eac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>
}
    8220:	bf00      	nop
    8222:	b005      	add	sp, #20
    8224:	f85d fb04 	ldr.w	pc, [sp], #4
    8228:	000185d4 	.word	0x000185d4

0000822c <Adc_Ip_GetTrigErrReg>:
* Description   : This function returns all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_GetTrigErrReg_Activity
* END**************************************************************************/
uint32 Adc_Ip_GetTrigErrReg(const uint32 Instance)
{
    822c:	b084      	sub	sp, #16
    822e:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8230:	4a06      	ldr	r2, [pc, #24]	; (824c <Adc_Ip_GetTrigErrReg+0x20>)
    8232:	9b01      	ldr	r3, [sp, #4]
    8234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8238:	9303      	str	r3, [sp, #12]

    return (Base->SC2 & ADC_SC2_TRGSTERR_MASK) >> ADC_SC2_TRGSTERR_SHIFT;
    823a:	9b03      	ldr	r3, [sp, #12]
    823c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8240:	0e1b      	lsrs	r3, r3, #24
    8242:	f003 030f 	and.w	r3, r3, #15
}
    8246:	4618      	mov	r0, r3
    8248:	b004      	add	sp, #16
    824a:	4770      	bx	lr
    824c:	000185d4 	.word	0x000185d4

00008250 <Adc_Ip_GetDataAddress>:
 *
 * @implements     Adc_Ip_GetDataAddress_Activity
 *END*************************************************************************/
uint32 Adc_Ip_GetDataAddress(const uint32 Instance,
                             const uint8 Index)
{
    8250:	b082      	sub	sp, #8
    8252:	9001      	str	r0, [sp, #4]
    8254:	460b      	mov	r3, r1
    8256:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    return (uint32)&(R(Adc_Ip_apxBase[Instance], Index));
    825a:	4a06      	ldr	r2, [pc, #24]	; (8274 <Adc_Ip_GetDataAddress+0x24>)
    825c:	9b01      	ldr	r3, [sp, #4]
    825e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    8262:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8266:	3312      	adds	r3, #18
    8268:	009b      	lsls	r3, r3, #2
    826a:	4413      	add	r3, r2
}
    826c:	4618      	mov	r0, r3
    826e:	b002      	add	sp, #8
    8270:	4770      	bx	lr
    8272:	bf00      	nop
    8274:	000185d4 	.word	0x000185d4

00008278 <Adc_Ip_GetChanData>:
* @implements     Adc_Ip_GetChanData_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_GetChanData(const uint32 Instance,
                                     const Adc_Ip_InputChannelType Channel,
                                     uint16 * const Result)
{
    8278:	b088      	sub	sp, #32
    827a:	9003      	str	r0, [sp, #12]
    827c:	9102      	str	r1, [sp, #8]
    827e:	9201      	str	r2, [sp, #4]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8280:	4a25      	ldr	r2, [pc, #148]	; (8318 <Adc_Ip_GetChanData+0xa0>)
    8282:	9b03      	ldr	r3, [sp, #12]
    8284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8288:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    828a:	2300      	movs	r3, #0
    828c:	9307      	str	r3, [sp, #28]
    uint16 Temp = 0u;
    828e:	2300      	movs	r3, #0
    8290:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 ControlChanIdx;
    boolean Found = FALSE;
    8294:	2300      	movs	r3, #0
    8296:	f88d 3018 	strb.w	r3, [sp, #24]

    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    829a:	2300      	movs	r3, #0
    829c:	f88d 3019 	strb.w	r3, [sp, #25]
    82a0:	e019      	b.n	82d6 <Adc_Ip_GetChanData+0x5e>
    {
        if (Adc_Ip_axState[Instance].ChannelConfig[ControlChanIdx] == Channel)
    82a2:	f89d 1019 	ldrb.w	r1, [sp, #25]
    82a6:	481d      	ldr	r0, [pc, #116]	; (831c <Adc_Ip_GetChanData+0xa4>)
    82a8:	9a03      	ldr	r2, [sp, #12]
    82aa:	4613      	mov	r3, r2
    82ac:	00db      	lsls	r3, r3, #3
    82ae:	4413      	add	r3, r2
    82b0:	005b      	lsls	r3, r3, #1
    82b2:	4413      	add	r3, r2
    82b4:	440b      	add	r3, r1
    82b6:	3302      	adds	r3, #2
    82b8:	009b      	lsls	r3, r3, #2
    82ba:	4403      	add	r3, r0
    82bc:	685b      	ldr	r3, [r3, #4]
    82be:	9a02      	ldr	r2, [sp, #8]
    82c0:	429a      	cmp	r2, r3
    82c2:	d103      	bne.n	82cc <Adc_Ip_GetChanData+0x54>
        {
            Found = TRUE;
    82c4:	2301      	movs	r3, #1
    82c6:	f88d 3018 	strb.w	r3, [sp, #24]
            break;
    82ca:	e008      	b.n	82de <Adc_Ip_GetChanData+0x66>
    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    82cc:	f89d 3019 	ldrb.w	r3, [sp, #25]
    82d0:	3301      	adds	r3, #1
    82d2:	f88d 3019 	strb.w	r3, [sp, #25]
    82d6:	f89d 3019 	ldrb.w	r3, [sp, #25]
    82da:	2b0f      	cmp	r3, #15
    82dc:	d9e1      	bls.n	82a2 <Adc_Ip_GetChanData+0x2a>
        }
    }

    if (Found == TRUE)
    82de:	f89d 3018 	ldrb.w	r3, [sp, #24]
    82e2:	2b00      	cmp	r3, #0
    82e4:	d00e      	beq.n	8304 <Adc_Ip_GetChanData+0x8c>
    {
        Temp = (uint16) R(Base, ControlChanIdx);
    82e6:	f89d 2019 	ldrb.w	r2, [sp, #25]
    82ea:	9b05      	ldr	r3, [sp, #20]
    82ec:	3212      	adds	r2, #18
    82ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    82f2:	f8ad 301a 	strh.w	r3, [sp, #26]
        Temp = (uint16) ((Temp & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    82f6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    82fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
    82fe:	f8ad 301a 	strh.w	r3, [sp, #26]
    8302:	e001      	b.n	8308 <Adc_Ip_GetChanData+0x90>
    }
    else
    {
        Status = ADC_IP_STATUS_ERROR;
    8304:	2301      	movs	r3, #1
    8306:	9307      	str	r3, [sp, #28]
    }

    *Result = Temp;
    8308:	9b01      	ldr	r3, [sp, #4]
    830a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    830e:	801a      	strh	r2, [r3, #0]

    return Status;
    8310:	9b07      	ldr	r3, [sp, #28]
}
    8312:	4618      	mov	r0, r3
    8314:	b008      	add	sp, #32
    8316:	4770      	bx	lr
    8318:	000185d4 	.word	0x000185d4
    831c:	1fff8d00 	.word	0x1fff8d00

00008320 <Adc_Ip_IRQHandler>:
 * Note          : It's required to read result data in user notification in order to clear the COCO flags and avoid ISR getting invoked repeatedly
 *
 * @implements     Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Adc_Ip_IRQHandler(const uint32 Instance)
{
    8320:	b500      	push	{lr}
    8322:	b085      	sub	sp, #20
    8324:	9001      	str	r0, [sp, #4]
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    uint8 ControlChanIdx;
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    uint32 Sc1Reg;
    boolean ChanIntFlag = FALSE;
    8326:	2300      	movs	r3, #0
    8328:	f88d 300e 	strb.w	r3, [sp, #14]
    boolean ChanCocoFlag = FALSE;
    832c:	2300      	movs	r3, #0
    832e:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Check whether the respective driver is initialized */
    if (TRUE == Adc_Ip_axState[Instance].Init)
    8332:	4a32      	ldr	r2, [pc, #200]	; (83fc <Adc_Ip_IRQHandler+0xdc>)
    8334:	9b01      	ldr	r3, [sp, #4]
    8336:	214c      	movs	r1, #76	; 0x4c
    8338:	fb01 f303 	mul.w	r3, r1, r3
    833c:	4413      	add	r3, r2
    833e:	781b      	ldrb	r3, [r3, #0]
    8340:	2b00      	cmp	r3, #0
    8342:	d040      	beq.n	83c6 <Adc_Ip_IRQHandler+0xa6>
    {
        /* Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop) */
        if (Adc_Ip_axState[Instance].ConversionCompleteNotification != NULL_PTR)
    8344:	4a2d      	ldr	r2, [pc, #180]	; (83fc <Adc_Ip_IRQHandler+0xdc>)
    8346:	9b01      	ldr	r3, [sp, #4]
    8348:	214c      	movs	r1, #76	; 0x4c
    834a:	fb01 f303 	mul.w	r3, r1, r3
    834e:	4413      	add	r3, r2
    8350:	3308      	adds	r3, #8
    8352:	681b      	ldr	r3, [r3, #0]
    8354:	2b00      	cmp	r3, #0
    8356:	d04d      	beq.n	83f4 <Adc_Ip_IRQHandler+0xd4>
        {
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8358:	2300      	movs	r3, #0
    835a:	f88d 300f 	strb.w	r3, [sp, #15]
    835e:	e02d      	b.n	83bc <Adc_Ip_IRQHandler+0x9c>
            {
                Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8360:	4a27      	ldr	r2, [pc, #156]	; (8400 <Adc_Ip_IRQHandler+0xe0>)
    8362:	9b01      	ldr	r3, [sp, #4]
    8364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8368:	f89d 200f 	ldrb.w	r2, [sp, #15]
    836c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8370:	9302      	str	r3, [sp, #8]
                ChanIntFlag = Adc_HwAcc_GetAIEN(Sc1Reg);
    8372:	9802      	ldr	r0, [sp, #8]
    8374:	f7ff fa20 	bl	77b8 <Adc_HwAcc_GetAIEN>
    8378:	4603      	mov	r3, r0
    837a:	f88d 300e 	strb.w	r3, [sp, #14]
                ChanCocoFlag = Adc_HwAcc_GetCOCO(Sc1Reg);
    837e:	9802      	ldr	r0, [sp, #8]
    8380:	f7ff fa28 	bl	77d4 <Adc_HwAcc_GetCOCO>
    8384:	4603      	mov	r3, r0
    8386:	f88d 300d 	strb.w	r3, [sp, #13]
                /* CPR_RTD_00664
                 * Check if the interrupt not spurious (the interrupt is enabled and equivalent conversion has finished)
                 * Ignore spurious ones (return immediately from ISR)
                 */
                if ((TRUE == ChanIntFlag) && (TRUE == ChanCocoFlag))
    838a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    838e:	2b00      	cmp	r3, #0
    8390:	d00f      	beq.n	83b2 <Adc_Ip_IRQHandler+0x92>
    8392:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8396:	2b00      	cmp	r3, #0
    8398:	d00b      	beq.n	83b2 <Adc_Ip_IRQHandler+0x92>
                {
                    /* Call the associated callback.
                     * The COCO flag will be cleared by reading the respective result data register in the callback
                     */
                    Adc_Ip_axState[Instance].ConversionCompleteNotification(ControlChanIdx);
    839a:	4a18      	ldr	r2, [pc, #96]	; (83fc <Adc_Ip_IRQHandler+0xdc>)
    839c:	9b01      	ldr	r3, [sp, #4]
    839e:	214c      	movs	r1, #76	; 0x4c
    83a0:	fb01 f303 	mul.w	r3, r1, r3
    83a4:	4413      	add	r3, r2
    83a6:	3308      	adds	r3, #8
    83a8:	681b      	ldr	r3, [r3, #0]
    83aa:	f89d 200f 	ldrb.w	r2, [sp, #15]
    83ae:	4610      	mov	r0, r2
    83b0:	4798      	blx	r3
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    83b2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    83b6:	3301      	adds	r3, #1
    83b8:	f88d 300f 	strb.w	r3, [sp, #15]
    83bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    83c0:	2b0f      	cmp	r3, #15
    83c2:	d9cd      	bls.n	8360 <Adc_Ip_IRQHandler+0x40>
        {
            /* Do a dummy read to clear the COCO flags */
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
        }
    }
}
    83c4:	e016      	b.n	83f4 <Adc_Ip_IRQHandler+0xd4>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    83c6:	2300      	movs	r3, #0
    83c8:	f88d 300f 	strb.w	r3, [sp, #15]
    83cc:	e00e      	b.n	83ec <Adc_Ip_IRQHandler+0xcc>
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
    83ce:	4a0c      	ldr	r2, [pc, #48]	; (8400 <Adc_Ip_IRQHandler+0xe0>)
    83d0:	9b01      	ldr	r3, [sp, #4]
    83d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83d6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    83da:	4611      	mov	r1, r2
    83dc:	4618      	mov	r0, r3
    83de:	f7ff fa07 	bl	77f0 <Adc_HwAcc_GetData>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    83e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    83e6:	3301      	adds	r3, #1
    83e8:	f88d 300f 	strb.w	r3, [sp, #15]
    83ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    83f0:	2b0f      	cmp	r3, #15
    83f2:	d9ec      	bls.n	83ce <Adc_Ip_IRQHandler+0xae>
}
    83f4:	bf00      	nop
    83f6:	b005      	add	sp, #20
    83f8:	f85d fb04 	ldr.w	pc, [sp], #4
    83fc:	1fff8d00 	.word	0x1fff8d00
    8400:	000185d4 	.word	0x000185d4

00008404 <Adc_0_Isr>:
==================================================================================================*/
#define ADC_START_SEC_CODE
#include "Adc_MemMap.h"

ISR(Adc_0_Isr)
{
    8404:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(0UL);
    8406:	2000      	movs	r0, #0
    8408:	f7ff ff8a 	bl	8320 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    840c:	f3bf 8f4f 	dsb	sy
}
    8410:	bf00      	nop
    8412:	bd08      	pop	{r3, pc}

00008414 <Adc_1_Isr>:

#if (ADC_INSTANCE_COUNT > 1)
ISR(Adc_1_Isr)
{
    8414:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(1UL);
    8416:	2001      	movs	r0, #1
    8418:	f7ff ff82 	bl	8320 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    841c:	f3bf 8f4f 	dsb	sy
}
    8420:	bf00      	nop
    8422:	bd08      	pop	{r3, pc}

00008424 <Lpspi_Ip_ChannelFinished>:
* @param[in]     Instance            Index of the hardware instance.
* @param[in]     ErrorFlag           Save the status of transfer error flags
* @return void
*/
static void Lpspi_Ip_ChannelFinished(uint8 Instance, boolean ErrorFlag)
{
    8424:	b500      	push	{lr}
    8426:	b085      	sub	sp, #20
    8428:	4603      	mov	r3, r0
    842a:	460a      	mov	r2, r1
    842c:	f88d 3007 	strb.w	r3, [sp, #7]
    8430:	4613      	mov	r3, r2
    8432:	f88d 3006 	strb.w	r3, [sp, #6]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    8436:	f89d 3007 	ldrb.w	r3, [sp, #7]
    843a:	4a12      	ldr	r2, [pc, #72]	; (8484 <Lpspi_Ip_ChannelFinished+0x60>)
    843c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8440:	9302      	str	r3, [sp, #8]
    Lpspi_Ip_EventType EventState = LPSPI_IP_EVENT_FAULT;
    8442:	2301      	movs	r3, #1
    8444:	9303      	str	r3, [sp, #12]
    
    if(TRUE == ErrorFlag)
    8446:	f89d 3006 	ldrb.w	r3, [sp, #6]
    844a:	2b00      	cmp	r3, #0
    844c:	d005      	beq.n	845a <Lpspi_Ip_ChannelFinished+0x36>
    {
        State->Status = LPSPI_IP_FAULT;
    844e:	9b02      	ldr	r3, [sp, #8]
    8450:	2203      	movs	r2, #3
    8452:	605a      	str	r2, [r3, #4]
        EventState = LPSPI_IP_EVENT_FAULT;
    8454:	2301      	movs	r3, #1
    8456:	9303      	str	r3, [sp, #12]
    8458:	e004      	b.n	8464 <Lpspi_Ip_ChannelFinished+0x40>
    }
    else
    {
        State->Status = LPSPI_IP_IDLE;
    845a:	9b02      	ldr	r3, [sp, #8]
    845c:	2201      	movs	r2, #1
    845e:	605a      	str	r2, [r3, #4]
        EventState = LPSPI_IP_EVENT_END_TRANSFER;
    8460:	2300      	movs	r3, #0
    8462:	9303      	str	r3, [sp, #12]
    }

    if (NULL_PTR != State->Callback)
    8464:	9b02      	ldr	r3, [sp, #8]
    8466:	691b      	ldr	r3, [r3, #16]
    8468:	2b00      	cmp	r3, #0
    846a:	d006      	beq.n	847a <Lpspi_Ip_ChannelFinished+0x56>
    {
        State->Callback(Instance, EventState);
    846c:	9b02      	ldr	r3, [sp, #8]
    846e:	691b      	ldr	r3, [r3, #16]
    8470:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8474:	9903      	ldr	r1, [sp, #12]
    8476:	4610      	mov	r0, r2
    8478:	4798      	blx	r3
    }
}
    847a:	bf00      	nop
    847c:	b005      	add	sp, #20
    847e:	f85d fb04 	ldr.w	pc, [sp], #4
    8482:	bf00      	nop
    8484:	1fff8dd8 	.word	0x1fff8dd8

00008488 <Lpspi_Ip_TransferProcess>:
*
* @param[in]     Instance      Index of the hardware instance.
* @return void
*/
static void Lpspi_Ip_TransferProcess(uint8 Instance)
{
    8488:	b510      	push	{r4, lr}
    848a:	b092      	sub	sp, #72	; 0x48
    848c:	4603      	mov	r3, r0
    848e:	f88d 300f 	strb.w	r3, [sp, #15]
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    8492:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8496:	4aad      	ldr	r2, [pc, #692]	; (874c <Lpspi_Ip_TransferProcess+0x2c4>)
    8498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    849c:	9310      	str	r3, [sp, #64]	; 0x40
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    849e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    84a2:	4aab      	ldr	r2, [pc, #684]	; (8750 <Lpspi_Ip_TransferProcess+0x2c8>)
    84a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84a8:	930f      	str	r3, [sp, #60]	; 0x3c
    uint32 SrStatusRegister;
    uint8 NumberOfWrites = 0u;
    84aa:	2300      	movs	r3, #0
    84ac:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    uint8 NumberOfReads = 0u;
    84b0:	2300      	movs	r3, #0
    84b2:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    boolean ErrorFlag = FALSE;
    84b6:	2300      	movs	r3, #0
    84b8:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45

    if (LPSPI_IP_BUSY == State->Status)
    84bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    84be:	685b      	ldr	r3, [r3, #4]
    84c0:	2b02      	cmp	r3, #2
    84c2:	f040 821e 	bne.w	8902 <Lpspi_Ip_TransferProcess+0x47a>
    {
        /* Read Status and clear all flags. */
        SrStatusRegister = Base->SR;
    84c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    84c8:	695b      	ldr	r3, [r3, #20]
    84ca:	930e      	str	r3, [sp, #56]	; 0x38
        Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    84cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    84ce:	695b      	ldr	r3, [r3, #20]
    84d0:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    84d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    84d6:	615a      	str	r2, [r3, #20]
        
        if ((SrStatusRegister & (LPSPI_SR_REF_MASK | LPSPI_SR_TEF_MASK)) != 0u)
    84d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    84da:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
    84de:	2b00      	cmp	r3, #0
    84e0:	d003      	beq.n	84ea <Lpspi_Ip_TransferProcess+0x62>
        {
            /* mark error flag */
            ErrorFlag = TRUE;
    84e2:	2301      	movs	r3, #1
    84e4:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    84e8:	e1f6      	b.n	88d8 <Lpspi_Ip_TransferProcess+0x450>
        }
        else
        {
            /* RECEIVE */
            /* Read all Data available in receive HW fifo. */
            NumberOfReads = (uint8)(((Base->FSR) & LPSPI_FSR_RXCOUNT_MASK) >> LPSPI_FSR_RXCOUNT_SHIFT);
    84ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
    84ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    84ee:	0c1b      	lsrs	r3, r3, #16
    84f0:	b2db      	uxtb	r3, r3
    84f2:	f003 0307 	and.w	r3, r3, #7
    84f6:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
            if (NumberOfReads != 0u)
    84fa:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    84fe:	2b00      	cmp	r3, #0
    8500:	f000 80cb 	beq.w	869a <Lpspi_Ip_TransferProcess+0x212>
            {
                if (NumberOfReads > (State->ExpectedFifoReads - State->RxIndex))
    8504:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
    8508:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    850a:	8b1b      	ldrh	r3, [r3, #24]
    850c:	4619      	mov	r1, r3
    850e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8510:	8a9b      	ldrh	r3, [r3, #20]
    8512:	1acb      	subs	r3, r1, r3
    8514:	429a      	cmp	r2, r3
    8516:	dd08      	ble.n	852a <Lpspi_Ip_TransferProcess+0xa2>
                {
                    NumberOfReads = (uint8)(State->ExpectedFifoReads - State->RxIndex);
    8518:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    851a:	8b1b      	ldrh	r3, [r3, #24]
    851c:	b2da      	uxtb	r2, r3
    851e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8520:	8a9b      	ldrh	r3, [r3, #20]
    8522:	b2db      	uxtb	r3, r3
    8524:	1ad3      	subs	r3, r2, r3
    8526:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
                }
                /* If these are the first frames of this channel. Current TXFIFO slot must be plus 1 because the slot of CMD have moved out and
                  CurrentTxFifoSlot was minus 1 when prepare TX channel */
                if (0u == State->RxIndex)
    852a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    852c:	8a9b      	ldrh	r3, [r3, #20]
    852e:	2b00      	cmp	r3, #0
    8530:	d107      	bne.n	8542 <Lpspi_Ip_TransferProcess+0xba>
                {
                    State->CurrentTxFifoSlot += 1u;
    8532:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8538:	3301      	adds	r3, #1
    853a:	b2da      	uxtb	r2, r3
    853c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    853e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    8542:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8546:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    854a:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    854e:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    const LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    8552:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    8556:	4a7d      	ldr	r2, [pc, #500]	; (874c <Lpspi_Ip_TransferProcess+0x2c4>)
    8558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    855c:	930c      	str	r3, [sp, #48]	; 0x30
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    855e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    8562:	4a7b      	ldr	r2, [pc, #492]	; (8750 <Lpspi_Ip_TransferProcess+0x2c8>)
    8564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8568:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 Data = 0u;
    856a:	2300      	movs	r3, #0
    856c:	930a      	str	r3, [sp, #40]	; 0x28
    uint8 Index = 0u;
    856e:	2300      	movs	r3, #0
    8570:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    if (NULL_PTR != State->RxBuffer)
    8574:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8576:	689b      	ldr	r3, [r3, #8]
    8578:	2b00      	cmp	r3, #0
    857a:	d069      	beq.n	8650 <Lpspi_Ip_TransferProcess+0x1c8>
        if (State->ExternalDevice->DeviceParams->FrameSize < 9u)
    857c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    857e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8580:	68db      	ldr	r3, [r3, #12]
    8582:	881b      	ldrh	r3, [r3, #0]
    8584:	2b08      	cmp	r3, #8
    8586:	d81e      	bhi.n	85c6 <Lpspi_Ip_TransferProcess+0x13e>
            for (Index = 0; Index < NumberOfReads; Index++)
    8588:	2300      	movs	r3, #0
    858a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    858e:	e013      	b.n	85b8 <Lpspi_Ip_TransferProcess+0x130>
                Data = Base->RDR;
    8590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8594:	930a      	str	r3, [sp, #40]	; 0x28
                *((uint8*)(&State->RxBuffer[State->RxIndex + Index])) = (uint8)Data;
    8596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8598:	689b      	ldr	r3, [r3, #8]
    859a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    859c:	8a92      	ldrh	r2, [r2, #20]
    859e:	4611      	mov	r1, r2
    85a0:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    85a4:	440a      	add	r2, r1
    85a6:	4413      	add	r3, r2
    85a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    85aa:	b2d2      	uxtb	r2, r2
    85ac:	701a      	strb	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    85ae:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    85b2:	3301      	adds	r3, #1
    85b4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    85b8:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    85bc:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    85c0:	429a      	cmp	r2, r3
    85c2:	d8e5      	bhi.n	8590 <Lpspi_Ip_TransferProcess+0x108>
    85c4:	e055      	b.n	8672 <Lpspi_Ip_TransferProcess+0x1ea>
        else if (State->ExternalDevice->DeviceParams->FrameSize < 17u)
    85c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    85c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    85ca:	68db      	ldr	r3, [r3, #12]
    85cc:	881b      	ldrh	r3, [r3, #0]
    85ce:	2b10      	cmp	r3, #16
    85d0:	d81f      	bhi.n	8612 <Lpspi_Ip_TransferProcess+0x18a>
            for (Index = 0; Index < NumberOfReads; Index++)
    85d2:	2300      	movs	r3, #0
    85d4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    85d8:	e014      	b.n	8604 <Lpspi_Ip_TransferProcess+0x17c>
                Data = Base->RDR;
    85da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    85dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    85de:	930a      	str	r3, [sp, #40]	; 0x28
                *((uint16*)(&State->RxBuffer[2u * (State->RxIndex + Index)])) = (uint16)Data;
    85e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    85e2:	689a      	ldr	r2, [r3, #8]
    85e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    85e6:	8a9b      	ldrh	r3, [r3, #20]
    85e8:	4619      	mov	r1, r3
    85ea:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    85ee:	440b      	add	r3, r1
    85f0:	005b      	lsls	r3, r3, #1
    85f2:	4413      	add	r3, r2
    85f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    85f6:	b292      	uxth	r2, r2
    85f8:	801a      	strh	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    85fa:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    85fe:	3301      	adds	r3, #1
    8600:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    8604:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    8608:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    860c:	429a      	cmp	r2, r3
    860e:	d8e4      	bhi.n	85da <Lpspi_Ip_TransferProcess+0x152>
    8610:	e02f      	b.n	8672 <Lpspi_Ip_TransferProcess+0x1ea>
            for (Index = 0; Index < NumberOfReads; Index++)
    8612:	2300      	movs	r3, #0
    8614:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    8618:	e013      	b.n	8642 <Lpspi_Ip_TransferProcess+0x1ba>
                Data = Base->RDR;
    861a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    861c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    861e:	930a      	str	r3, [sp, #40]	; 0x28
                *((uint32*)(&State->RxBuffer[4u * (State->RxIndex + Index)])) = (uint32)Data;
    8620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8622:	689a      	ldr	r2, [r3, #8]
    8624:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8626:	8a9b      	ldrh	r3, [r3, #20]
    8628:	4619      	mov	r1, r3
    862a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    862e:	440b      	add	r3, r1
    8630:	009b      	lsls	r3, r3, #2
    8632:	4413      	add	r3, r2
    8634:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8636:	601a      	str	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    8638:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    863c:	3301      	adds	r3, #1
    863e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    8642:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    8646:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    864a:	429a      	cmp	r2, r3
    864c:	d8e5      	bhi.n	861a <Lpspi_Ip_TransferProcess+0x192>
    864e:	e010      	b.n	8672 <Lpspi_Ip_TransferProcess+0x1ea>
        for (Index = 0; Index < NumberOfReads; Index++)
    8650:	2300      	movs	r3, #0
    8652:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    8656:	e006      	b.n	8666 <Lpspi_Ip_TransferProcess+0x1de>
            (void)Base->RDR;
    8658:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    865a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        for (Index = 0; Index < NumberOfReads; Index++)
    865c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8660:	3301      	adds	r3, #1
    8662:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    8666:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    866a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    866e:	429a      	cmp	r2, r3
    8670:	d8f2      	bhi.n	8658 <Lpspi_Ip_TransferProcess+0x1d0>
    State->RxIndex += NumberOfReads;
    8672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8674:	8a9a      	ldrh	r2, [r3, #20]
    8676:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    867a:	b29b      	uxth	r3, r3
    867c:	4413      	add	r3, r2
    867e:	b29a      	uxth	r2, r3
    8680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8682:	829a      	strh	r2, [r3, #20]
}
    8684:	bf00      	nop
                }
                /* Read Data from RX FIFO */
                Lpspi_Ip_ReadDataFromFifo(Instance, NumberOfReads);
                /* Update current FIFO slots are available to fill .*/
                State->CurrentTxFifoSlot += NumberOfReads;
    8686:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8688:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    868c:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    8690:	4413      	add	r3, r2
    8692:	b2da      	uxtb	r2, r3
    8694:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            to fill TX FIFO. At that time, another interrupt occurred and preemptive current interrupt, and the time to process that interrupt is longer than the time to transfer all frames 
            in TX FIFO. So TX FIFO will be empty and some frames received in RX FIFO, then the program is returned from that interrupt and fill TX FIFO until full and exist SPI interrupt function. 
            And if there is a interrupt occurred with higher priority of SPI interrupt and the time to process that interrupt is longer than the time to transfer all frames in TX FIFO. 
            So, RX FIFO can be overflow due to SPI interrupt function is not serviced to read RX FIFO.
            State->CurrentTxFifoSlot variable is used to hanlde number of frames are "on bus transfer". They are always less than FIFO size */
            if((State->CurrentTxFifoSlot != 0u) && (State->TxDoneFlag != TRUE))
    869a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    869c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    86a0:	2b00      	cmp	r3, #0
    86a2:	f000 8119 	beq.w	88d8 <Lpspi_Ip_TransferProcess+0x450>
    86a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    86a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    86ac:	f083 0301 	eor.w	r3, r3, #1
    86b0:	b2db      	uxtb	r3, r3
    86b2:	2b00      	cmp	r3, #0
    86b4:	f000 8110 	beq.w	88d8 <Lpspi_Ip_TransferProcess+0x450>
            {
                if(State->ExpectedFifoWrites != State->TxIndex)
    86b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    86ba:	8b5a      	ldrh	r2, [r3, #26]
    86bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    86be:	8adb      	ldrh	r3, [r3, #22]
    86c0:	429a      	cmp	r2, r3
    86c2:	f000 80ca 	beq.w	885a <Lpspi_Ip_TransferProcess+0x3d2>
                {
                    NumberOfWrites = State->CurrentTxFifoSlot;
    86c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    86c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    86cc:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
                    /* Limits to remaining frames. */
                    if (NumberOfWrites > (State->ExpectedFifoWrites - State->TxIndex))
    86d0:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
    86d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    86d6:	8b5b      	ldrh	r3, [r3, #26]
    86d8:	4619      	mov	r1, r3
    86da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    86dc:	8adb      	ldrh	r3, [r3, #22]
    86de:	1acb      	subs	r3, r1, r3
    86e0:	429a      	cmp	r2, r3
    86e2:	dd08      	ble.n	86f6 <Lpspi_Ip_TransferProcess+0x26e>
                    {
                        NumberOfWrites = (uint8)(State->ExpectedFifoWrites - State->TxIndex);
    86e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    86e6:	8b5b      	ldrh	r3, [r3, #26]
    86e8:	b2da      	uxtb	r2, r3
    86ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    86ec:	8adb      	ldrh	r3, [r3, #22]
    86ee:	b2db      	uxtb	r3, r3
    86f0:	1ad3      	subs	r3, r2, r3
    86f2:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    86f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    86fa:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    86fe:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    8702:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    8706:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    870a:	4a10      	ldr	r2, [pc, #64]	; (874c <Lpspi_Ip_TransferProcess+0x2c4>)
    870c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8710:	9308      	str	r3, [sp, #32]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    8712:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    8716:	4a0e      	ldr	r2, [pc, #56]	; (8750 <Lpspi_Ip_TransferProcess+0x2c8>)
    8718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    871c:	9307      	str	r3, [sp, #28]
    uint32 Data = 0u;
    871e:	2300      	movs	r3, #0
    8720:	9306      	str	r3, [sp, #24]
    uint8 Index = 0u;
    8722:	2300      	movs	r3, #0
    8724:	f88d 3017 	strb.w	r3, [sp, #23]
    Data = State->ExternalDevice->DeviceParams->DefaultData;
    8728:	9b07      	ldr	r3, [sp, #28]
    872a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    872c:	68db      	ldr	r3, [r3, #12]
    872e:	685b      	ldr	r3, [r3, #4]
    8730:	9306      	str	r3, [sp, #24]
    if (NULL_PTR != State->TxBuffer)
    8732:	9b07      	ldr	r3, [sp, #28]
    8734:	68db      	ldr	r3, [r3, #12]
    8736:	2b00      	cmp	r3, #0
    8738:	d068      	beq.n	880c <Lpspi_Ip_TransferProcess+0x384>
        if (State->TxFrameSize < 9u)
    873a:	9b07      	ldr	r3, [sp, #28]
    873c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    873e:	2b08      	cmp	r3, #8
    8740:	d822      	bhi.n	8788 <Lpspi_Ip_TransferProcess+0x300>
            for (Index = 0; Index < NumberOfWrites; Index++)
    8742:	2300      	movs	r3, #0
    8744:	f88d 3017 	strb.w	r3, [sp, #23]
    8748:	e017      	b.n	877a <Lpspi_Ip_TransferProcess+0x2f2>
    874a:	bf00      	nop
    874c:	000185dc 	.word	0x000185dc
    8750:	1fff8dd8 	.word	0x1fff8dd8
                Data = *((const uint8*)(&State->TxBuffer[State->TxIndex + Index]));
    8754:	9b07      	ldr	r3, [sp, #28]
    8756:	68db      	ldr	r3, [r3, #12]
    8758:	9a07      	ldr	r2, [sp, #28]
    875a:	8ad2      	ldrh	r2, [r2, #22]
    875c:	4611      	mov	r1, r2
    875e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    8762:	440a      	add	r2, r1
    8764:	4413      	add	r3, r2
    8766:	781b      	ldrb	r3, [r3, #0]
    8768:	9306      	str	r3, [sp, #24]
                Base->TDR = Data;
    876a:	9b08      	ldr	r3, [sp, #32]
    876c:	9a06      	ldr	r2, [sp, #24]
    876e:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    8770:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8774:	3301      	adds	r3, #1
    8776:	f88d 3017 	strb.w	r3, [sp, #23]
    877a:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    877e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8782:	429a      	cmp	r2, r3
    8784:	d8e6      	bhi.n	8754 <Lpspi_Ip_TransferProcess+0x2cc>
    8786:	e053      	b.n	8830 <Lpspi_Ip_TransferProcess+0x3a8>
        else if (State->TxFrameSize < 17u)
    8788:	9b07      	ldr	r3, [sp, #28]
    878a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    878c:	2b10      	cmp	r3, #16
    878e:	d81e      	bhi.n	87ce <Lpspi_Ip_TransferProcess+0x346>
            for (Index = 0; Index < NumberOfWrites; Index++)
    8790:	2300      	movs	r3, #0
    8792:	f88d 3017 	strb.w	r3, [sp, #23]
    8796:	e013      	b.n	87c0 <Lpspi_Ip_TransferProcess+0x338>
                Data = *((const uint16*)(&State->TxBuffer[2u * (State->TxIndex + Index)]));
    8798:	9b07      	ldr	r3, [sp, #28]
    879a:	68da      	ldr	r2, [r3, #12]
    879c:	9b07      	ldr	r3, [sp, #28]
    879e:	8adb      	ldrh	r3, [r3, #22]
    87a0:	4619      	mov	r1, r3
    87a2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    87a6:	440b      	add	r3, r1
    87a8:	005b      	lsls	r3, r3, #1
    87aa:	4413      	add	r3, r2
    87ac:	881b      	ldrh	r3, [r3, #0]
    87ae:	9306      	str	r3, [sp, #24]
                Base->TDR = Data;
    87b0:	9b08      	ldr	r3, [sp, #32]
    87b2:	9a06      	ldr	r2, [sp, #24]
    87b4:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    87b6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    87ba:	3301      	adds	r3, #1
    87bc:	f88d 3017 	strb.w	r3, [sp, #23]
    87c0:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    87c4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    87c8:	429a      	cmp	r2, r3
    87ca:	d8e5      	bhi.n	8798 <Lpspi_Ip_TransferProcess+0x310>
    87cc:	e030      	b.n	8830 <Lpspi_Ip_TransferProcess+0x3a8>
            for (Index = 0; Index < NumberOfWrites; Index++)
    87ce:	2300      	movs	r3, #0
    87d0:	f88d 3017 	strb.w	r3, [sp, #23]
    87d4:	e013      	b.n	87fe <Lpspi_Ip_TransferProcess+0x376>
                Data = *((const uint32*)(&State->TxBuffer[4u * (State->TxIndex + Index)]));
    87d6:	9b07      	ldr	r3, [sp, #28]
    87d8:	68da      	ldr	r2, [r3, #12]
    87da:	9b07      	ldr	r3, [sp, #28]
    87dc:	8adb      	ldrh	r3, [r3, #22]
    87de:	4619      	mov	r1, r3
    87e0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    87e4:	440b      	add	r3, r1
    87e6:	009b      	lsls	r3, r3, #2
    87e8:	4413      	add	r3, r2
    87ea:	681b      	ldr	r3, [r3, #0]
    87ec:	9306      	str	r3, [sp, #24]
                Base->TDR = Data;
    87ee:	9b08      	ldr	r3, [sp, #32]
    87f0:	9a06      	ldr	r2, [sp, #24]
    87f2:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    87f4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    87f8:	3301      	adds	r3, #1
    87fa:	f88d 3017 	strb.w	r3, [sp, #23]
    87fe:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    8802:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8806:	429a      	cmp	r2, r3
    8808:	d8e5      	bhi.n	87d6 <Lpspi_Ip_TransferProcess+0x34e>
    880a:	e011      	b.n	8830 <Lpspi_Ip_TransferProcess+0x3a8>
        for (Index = 0; Index < NumberOfWrites; Index++)
    880c:	2300      	movs	r3, #0
    880e:	f88d 3017 	strb.w	r3, [sp, #23]
    8812:	e007      	b.n	8824 <Lpspi_Ip_TransferProcess+0x39c>
            Base->TDR = Data;
    8814:	9b08      	ldr	r3, [sp, #32]
    8816:	9a06      	ldr	r2, [sp, #24]
    8818:	665a      	str	r2, [r3, #100]	; 0x64
        for (Index = 0; Index < NumberOfWrites; Index++)
    881a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    881e:	3301      	adds	r3, #1
    8820:	f88d 3017 	strb.w	r3, [sp, #23]
    8824:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    8828:	f89d 3017 	ldrb.w	r3, [sp, #23]
    882c:	429a      	cmp	r2, r3
    882e:	d8f1      	bhi.n	8814 <Lpspi_Ip_TransferProcess+0x38c>
    State->TxIndex += NumberOfWrites;
    8830:	9b07      	ldr	r3, [sp, #28]
    8832:	8ada      	ldrh	r2, [r3, #22]
    8834:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    8838:	b29b      	uxth	r3, r3
    883a:	4413      	add	r3, r2
    883c:	b29a      	uxth	r2, r3
    883e:	9b07      	ldr	r3, [sp, #28]
    8840:	82da      	strh	r2, [r3, #22]
}
    8842:	bf00      	nop
                    }
                    /* Push Data into TX FIFO */
                    Lpspi_Ip_PushDataToFifo(Instance, NumberOfWrites);
                    State->CurrentTxFifoSlot -= NumberOfWrites;
    8844:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8846:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    884a:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    884e:	1ad3      	subs	r3, r2, r3
    8850:	b2da      	uxtb	r2, r3
    8852:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    8858:	e03e      	b.n	88d8 <Lpspi_Ip_TransferProcess+0x450>
                }
                else
                {
                    if(TRUE == State->NextTransferConfigAvailable)
    885a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    885c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    8860:	2b00      	cmp	r3, #0
    8862:	d01c      	beq.n	889e <Lpspi_Ip_TransferProcess+0x416>
                    {
                        /* Initialize next transfer */
                        State->ExternalDevice->DeviceParams->DefaultData = State->DefaultDataNext;
    8864:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8868:	68db      	ldr	r3, [r3, #12]
    886a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    886c:	6b52      	ldr	r2, [r2, #52]	; 0x34
    886e:	605a      	str	r2, [r3, #4]
                        State->FirstCmd = FALSE;
    8870:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8872:	2200      	movs	r2, #0
    8874:	775a      	strb	r2, [r3, #29]
                        Lpspi_TransmitTxInit(Instance, State->TxBufferNext, State->FrameSizeNext, State->LsbNext, State->LengthNext);
    8876:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8878:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    887a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    887c:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    887e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8880:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
    8884:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8886:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    8888:	f89d 000f 	ldrb.w	r0, [sp, #15]
    888c:	9300      	str	r3, [sp, #0]
    888e:	4623      	mov	r3, r4
    8890:	f000 fb7a 	bl	8f88 <Lpspi_TransmitTxInit>
                        State->NextTransferConfigAvailable = FALSE;
    8894:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8896:	2200      	movs	r2, #0
    8898:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    889c:	e01c      	b.n	88d8 <Lpspi_Ip_TransferProcess+0x450>
                    }
                    else
                    {
                        State->TxDoneFlag = TRUE;
    889e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    88a0:	2201      	movs	r2, #1
    88a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                        /* Disable TX interrupt */
                        Base->IER &= ~LPSPI_IER_TDIE_MASK;
    88a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    88a8:	699b      	ldr	r3, [r3, #24]
    88aa:	f023 0201 	bic.w	r2, r3, #1
    88ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
    88b0:	619a      	str	r2, [r3, #24]
                        if((FALSE == State->KeepCs) && (0u != (Base->TCR & LPSPI_TCR_CONT_MASK)))
    88b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    88b4:	7f1b      	ldrb	r3, [r3, #28]
    88b6:	f083 0301 	eor.w	r3, r3, #1
    88ba:	b2db      	uxtb	r3, r3
    88bc:	2b00      	cmp	r3, #0
    88be:	d00b      	beq.n	88d8 <Lpspi_Ip_TransferProcess+0x450>
    88c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    88c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    88c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    88c8:	2b00      	cmp	r3, #0
    88ca:	d005      	beq.n	88d8 <Lpspi_Ip_TransferProcess+0x450>
                        {
                            /* Clear CS */
                            Base->TCR &= ~(LPSPI_TCR_CONT_MASK | LPSPI_TCR_CONTC_MASK);
    88cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    88ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    88d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
    88d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    88d6:	661a      	str	r2, [r3, #96]	; 0x60
                }
            }
        }
        
        /* End of transfer */
        if((State->RxIndex == State->ExpectedFifoReads) || (TRUE == ErrorFlag))
    88d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    88da:	8a9a      	ldrh	r2, [r3, #20]
    88dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    88de:	8b1b      	ldrh	r3, [r3, #24]
    88e0:	429a      	cmp	r2, r3
    88e2:	d003      	beq.n	88ec <Lpspi_Ip_TransferProcess+0x464>
    88e4:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
    88e8:	2b00      	cmp	r3, #0
    88ea:	d00a      	beq.n	8902 <Lpspi_Ip_TransferProcess+0x47a>
                Base->TCR |= LPSPI_TCR_RXMSK(1);
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12();
            }
            #endif
            /* Disable interrupts */
            Base->IER = 0u;
    88ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
    88ee:	2200      	movs	r2, #0
    88f0:	619a      	str	r2, [r3, #24]
            Lpspi_Ip_ChannelFinished(Instance, ErrorFlag);
    88f2:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
    88f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    88fa:	4611      	mov	r1, r2
    88fc:	4618      	mov	r0, r3
    88fe:	f7ff fd91 	bl	8424 <Lpspi_Ip_ChannelFinished>
        }
    }
}
    8902:	bf00      	nop
    8904:	b012      	add	sp, #72	; 0x48
    8906:	bd10      	pop	{r4, pc}

00008908 <Lpspi_Ip_Init>:
    OsIf_Trusted_Call1param(Lpspi_Ip_SetUserAccess, Instance);
}
#endif /* LPSPI_IP_ENABLE_USER_MODE_SUPPORT */
/*================================================================================================*/
Lpspi_Ip_StatusType Lpspi_Ip_Init(const Lpspi_Ip_ConfigType *PhyUnitConfigPtr)
{
    8908:	b500      	push	{lr}
    890a:	b087      	sub	sp, #28
    890c:	9001      	str	r0, [sp, #4]
    LPSPI_Type* Base;
    Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    890e:	2300      	movs	r3, #0
    8910:	9305      	str	r3, [sp, #20]
    uint8 Instance = 0u;
    8912:	2300      	movs	r3, #0
    8914:	f88d 3013 	strb.w	r3, [sp, #19]

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(PhyUnitConfigPtr != NULL_PTR);
    #endif
    Instance = PhyUnitConfigPtr->Instance;
    8918:	9b01      	ldr	r3, [sp, #4]
    891a:	781b      	ldrb	r3, [r3, #0]
    891c:	f88d 3013 	strb.w	r3, [sp, #19]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    8920:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8924:	4a23      	ldr	r2, [pc, #140]	; (89b4 <Lpspi_Ip_Init+0xac>)
    8926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    892a:	9303      	str	r3, [sp, #12]
    Base = Lpspi_Ip_apxBases[Instance];
    892c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8930:	4a21      	ldr	r2, [pc, #132]	; (89b8 <Lpspi_Ip_Init+0xb0>)
    8932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8936:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(State == NULL_PTR);
    #endif
    Lpspi_Ip_apxStateStructureArray[Instance] = &Lpspi_Ip_axStateStructure[PhyUnitConfigPtr->StateIndex];
    8938:	9b01      	ldr	r3, [sp, #4]
    893a:	7c1b      	ldrb	r3, [r3, #16]
    893c:	461a      	mov	r2, r3
    893e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8942:	0192      	lsls	r2, r2, #6
    8944:	491d      	ldr	r1, [pc, #116]	; (89bc <Lpspi_Ip_Init+0xb4>)
    8946:	440a      	add	r2, r1
    8948:	491a      	ldr	r1, [pc, #104]	; (89b4 <Lpspi_Ip_Init+0xac>)
    894a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    894e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8952:	4a18      	ldr	r2, [pc, #96]	; (89b4 <Lpspi_Ip_Init+0xac>)
    8954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8958:	9303      	str	r3, [sp, #12]
    State->PhyUnitConfig = PhyUnitConfigPtr;
    895a:	9b03      	ldr	r3, [sp, #12]
    895c:	9a01      	ldr	r2, [sp, #4]
    895e:	621a      	str	r2, [r3, #32]
    /* enable in debug mode to ensure CS will be kept when CPU halts at breakpoint */
    Base->CR = PhyUnitConfigPtr->Cr | LPSPI_CR_DBGEN_MASK;
    8960:	9b01      	ldr	r3, [sp, #4]
    8962:	685b      	ldr	r3, [r3, #4]
    8964:	f043 0208 	orr.w	r2, r3, #8
    8968:	9b02      	ldr	r3, [sp, #8]
    896a:	611a      	str	r2, [r3, #16]
    Base->CFGR1 = PhyUnitConfigPtr->Cfgr1;
    896c:	9b01      	ldr	r3, [sp, #4]
    896e:	689a      	ldr	r2, [r3, #8]
    8970:	9b02      	ldr	r3, [sp, #8]
    8972:	625a      	str	r2, [r3, #36]	; 0x24
    /* Set TX WATER. it will be set again in DMA mode */
    Base->FCR = LPSPI_FCR_TXWATER((uint32)LPSPI_IP_FIFO_SIZE_U8 - (uint32)1u);
    8974:	9b02      	ldr	r3, [sp, #8]
    8976:	2203      	movs	r2, #3
    8978:	659a      	str	r2, [r3, #88]	; 0x58
    #if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
    State->ClockMode = LPSPI_IP_NORMAL_CLOCK;
    #endif
    State->KeepCs = FALSE;
    897a:	9b03      	ldr	r3, [sp, #12]
    897c:	2200      	movs	r2, #0
    897e:	771a      	strb	r2, [r3, #28]
    State->FirstCmd = TRUE;
    8980:	9b03      	ldr	r3, [sp, #12]
    8982:	2201      	movs	r2, #1
    8984:	775a      	strb	r2, [r3, #29]
    #if ((STD_ON == LPSPI_IP_DMA_USED) && (STD_ON == LPSPI_IP_ENABLE_DMAFASTTRANSFER_SUPPORT))
    Lpspi_Ip_TxDmaTcdSGInit(Instance);
    Lpspi_Ip_RxDmaTcdSGInit(Instance);
    #endif
    /* set State to idle */
    State->Status = LPSPI_IP_IDLE;
    8986:	9b03      	ldr	r3, [sp, #12]
    8988:	2201      	movs	r2, #1
    898a:	605a      	str	r2, [r3, #4]
    (void)Lpspi_Ip_UpdateTransferMode(Instance, PhyUnitConfigPtr->TransferMode);
    898c:	9b01      	ldr	r3, [sp, #4]
    898e:	68da      	ldr	r2, [r3, #12]
    8990:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8994:	4611      	mov	r1, r2
    8996:	4618      	mov	r0, r3
    8998:	f000 fd10 	bl	93bc <Lpspi_Ip_UpdateTransferMode>
    
    /* Enable SPI module */
    Base->CR |= LPSPI_CR_MEN_MASK;
    899c:	9b02      	ldr	r3, [sp, #8]
    899e:	691b      	ldr	r3, [r3, #16]
    89a0:	f043 0201 	orr.w	r2, r3, #1
    89a4:	9b02      	ldr	r3, [sp, #8]
    89a6:	611a      	str	r2, [r3, #16]
    return Status;
    89a8:	9b05      	ldr	r3, [sp, #20]
}
    89aa:	4618      	mov	r0, r3
    89ac:	b007      	add	sp, #28
    89ae:	f85d fb04 	ldr.w	pc, [sp], #4
    89b2:	bf00      	nop
    89b4:	1fff8dd8 	.word	0x1fff8dd8
    89b8:	000185dc 	.word	0x000185dc
    89bc:	1fff8d98 	.word	0x1fff8d98

000089c0 <Lpspi_Ip_DeInit>:
/*================================================================================================*/
Lpspi_Ip_StatusType Lpspi_Ip_DeInit(uint8 Instance)
{
    89c0:	b086      	sub	sp, #24
    89c2:	4603      	mov	r3, r0
    89c4:	f88d 3007 	strb.w	r3, [sp, #7]
    LPSPI_Type* Base;
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    89c8:	2300      	movs	r3, #0
    89ca:	9305      	str	r3, [sp, #20]

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    Base = Lpspi_Ip_apxBases[Instance];
    89cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    89d0:	4a11      	ldr	r2, [pc, #68]	; (8a18 <Lpspi_Ip_DeInit+0x58>)
    89d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89d6:	9304      	str	r3, [sp, #16]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    89d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    89dc:	4a0f      	ldr	r2, [pc, #60]	; (8a1c <Lpspi_Ip_DeInit+0x5c>)
    89de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89e2:	9303      	str	r3, [sp, #12]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    if (LPSPI_IP_BUSY == State->Status)
    89e4:	9b03      	ldr	r3, [sp, #12]
    89e6:	685b      	ldr	r3, [r3, #4]
    89e8:	2b02      	cmp	r3, #2
    89ea:	d102      	bne.n	89f2 <Lpspi_Ip_DeInit+0x32>
    {
        Status = LPSPI_IP_STATUS_FAIL;
    89ec:	2301      	movs	r3, #1
    89ee:	9305      	str	r3, [sp, #20]
    89f0:	e00e      	b.n	8a10 <Lpspi_Ip_DeInit+0x50>
    }
    else
    {
        /* Use reset hardware feature. */
        Base->CR |= LPSPI_CR_RST(1u);
    89f2:	9b04      	ldr	r3, [sp, #16]
    89f4:	691b      	ldr	r3, [r3, #16]
    89f6:	f043 0202 	orr.w	r2, r3, #2
    89fa:	9b04      	ldr	r3, [sp, #16]
    89fc:	611a      	str	r2, [r3, #16]
        Base->CR = 0;
    89fe:	9b04      	ldr	r3, [sp, #16]
    8a00:	2200      	movs	r2, #0
    8a02:	611a      	str	r2, [r3, #16]

        Lpspi_Ip_apxStateStructureArray[Instance] = NULL_PTR;
    8a04:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8a08:	4a04      	ldr	r2, [pc, #16]	; (8a1c <Lpspi_Ip_DeInit+0x5c>)
    8a0a:	2100      	movs	r1, #0
    8a0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    return Status;
    8a10:	9b05      	ldr	r3, [sp, #20]
}
    8a12:	4618      	mov	r0, r3
    8a14:	b006      	add	sp, #24
    8a16:	4770      	bx	lr
    8a18:	000185dc 	.word	0x000185dc
    8a1c:	1fff8dd8 	.word	0x1fff8dd8

00008a20 <Lpspi_Ip_SyncTransmit>:
                                            const uint8 *TxBuffer,
                                            uint8 *RxBuffer,
                                            uint16 Length,
                                            uint32 TimeOut
                                         )
{
    8a20:	b510      	push	{r4, lr}
    8a22:	b09a      	sub	sp, #104	; 0x68
    8a24:	9005      	str	r0, [sp, #20]
    8a26:	9104      	str	r1, [sp, #16]
    8a28:	9203      	str	r2, [sp, #12]
    8a2a:	f8ad 300a 	strh.w	r3, [sp, #10]
    LPSPI_Type *Base;
    Lpspi_Ip_StateStructureType *State;
    uint8 NumberOfWrites, NumberOfReads;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    8a2e:	2300      	movs	r3, #0
    8a30:	9318      	str	r3, [sp, #96]	; 0x60
    uint32 TimeoutTicks = OsIf_MicrosToTicks(TimeOut, LPSPI_IP_TIMEOUT_METHOD);
    8a32:	2100      	movs	r1, #0
    8a34:	981c      	ldr	r0, [sp, #112]	; 0x70
    8a36:	f7f9 fa89 	bl	1f4c <OsIf_MicrosToTicks>
    8a3a:	9015      	str	r0, [sp, #84]	; 0x54
    uint32 CurrentTicks = 0u; /* initialize current counter */
    8a3c:	2300      	movs	r3, #0
    8a3e:	9307      	str	r3, [sp, #28]
    uint32 ElapsedTicks = 0u; /* elapsed will give timeout */
    8a40:	2300      	movs	r3, #0
    8a42:	9317      	str	r3, [sp, #92]	; 0x5c
    uint8 Instance = 0u;
    8a44:	2300      	movs	r3, #0
    8a46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    uint32 Cfgr1 = 0u;
    8a4a:	2300      	movs	r3, #0
    8a4c:	9313      	str	r3, [sp, #76]	; 0x4c
    boolean TxDoneFlag = FALSE;
    8a4e:	2300      	movs	r3, #0
    8a50:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
    DevAssert(ExternalDevice != NULL_PTR);
    DevAssert(0u != Length);
    DevAssert(0u != TimeOut);
    Lpspi_Ip_CheckValidParameters(ExternalDevice, Length);
    #endif
    Instance = ExternalDevice->Instance;
    8a54:	9b05      	ldr	r3, [sp, #20]
    8a56:	781b      	ldrb	r3, [r3, #0]
    8a58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    8a5c:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    8a60:	4a92      	ldr	r2, [pc, #584]	; (8cac <Lpspi_Ip_SyncTransmit+0x28c>)
    8a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a66:	9312      	str	r3, [sp, #72]	; 0x48
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(State != NULL_PTR);
    #endif
    
    Base = Lpspi_Ip_apxBases[Instance];    
    8a68:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    8a6c:	4a90      	ldr	r2, [pc, #576]	; (8cb0 <Lpspi_Ip_SyncTransmit+0x290>)
    8a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a72:	9311      	str	r3, [sp, #68]	; 0x44
    SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08();
    8a74:	f00d fc88 	bl	16388 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08>
    if (LPSPI_IP_BUSY == State->Status)
    8a78:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a7a:	685b      	ldr	r3, [r3, #4]
    8a7c:	2b02      	cmp	r3, #2
    8a7e:	d104      	bne.n	8a8a <Lpspi_Ip_SyncTransmit+0x6a>
    {
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08();
    8a80:	f00d fcae 	bl	163e0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08>
        Status = LPSPI_IP_STATUS_FAIL;
    8a84:	2301      	movs	r3, #1
    8a86:	9318      	str	r3, [sp, #96]	; 0x60
    8a88:	e276      	b.n	8f78 <Lpspi_Ip_SyncTransmit+0x558>
        /* Clear some bits which support for half duplex mode at previous transfer */
        Base->CFGR1 &= ~(LPSPI_CFGR1_PCSCFG_MASK | LPSPI_CFGR1_OUTCFG_MASK | LPSPI_CFGR1_PINCFG_MASK);
        #endif
        
        /* Mark the hardware as busy. */
        State->Status = LPSPI_IP_BUSY;
    8a8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a8c:	2202      	movs	r2, #2
    8a8e:	605a      	str	r2, [r3, #4]
        State->ExternalDevice = ExternalDevice;
    8a90:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a92:	9a05      	ldr	r2, [sp, #20]
    8a94:	625a      	str	r2, [r3, #36]	; 0x24
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08();
    8a96:	f00d fca3 	bl	163e0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08>
        
        /* Disable DMA requests and all interrupts */
        Base->DER = 0u;
    8a9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a9c:	2200      	movs	r2, #0
    8a9e:	61da      	str	r2, [r3, #28]
        Base->IER = 0u;
    8aa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8aa2:	2200      	movs	r2, #0
    8aa4:	619a      	str	r2, [r3, #24]
        
        /* Update State structure. */
        State->NextTransferConfigAvailable = State->KeepCs;
    8aa6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8aa8:	7f1a      	ldrb	r2, [r3, #28]
    8aaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8aac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Set clock configuration */
        if(TRUE == State->FirstCmd)
    8ab0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ab2:	7f5b      	ldrb	r3, [r3, #29]
    8ab4:	2b00      	cmp	r3, #0
    8ab6:	d030      	beq.n	8b1a <Lpspi_Ip_SyncTransmit+0xfa>
            /* Makes sure that FIFOs will be empty before start new transfer session. 
            There is maybe a frame in RX shifter register (previous transfer is broken and CS did not de-assert).
            So use reset FIFO do not prevent the potential issue. So reset module by software reset bit should be used here */
            /* Reset FIFOs using CR[RST] bit */
            /* store CFGR1 and restore after all registers are reset */
            Cfgr1 = Base->CFGR1;
    8ab8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8abc:	9313      	str	r3, [sp, #76]	; 0x4c
            Base->CR |= LPSPI_CR_RST_MASK;
    8abe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8ac0:	691b      	ldr	r3, [r3, #16]
    8ac2:	f043 0202 	orr.w	r2, r3, #2
    8ac6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8ac8:	611a      	str	r2, [r3, #16]
            Base->CR &= ~LPSPI_CR_RST_MASK;
    8aca:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8acc:	691b      	ldr	r3, [r3, #16]
    8ace:	f023 0202 	bic.w	r2, r3, #2
    8ad2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8ad4:	611a      	str	r2, [r3, #16]
            /* restore CFGR1 */
            Base->CFGR1 = Cfgr1;
    8ad6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8ad8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8ada:	625a      	str	r2, [r3, #36]	; 0x24
            /* clear all flags */
            Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    8adc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8ade:	695b      	ldr	r3, [r3, #20]
    8ae0:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    8ae4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8ae6:	615a      	str	r2, [r3, #20]

            #if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
            Base->CCR = ExternalDevice->Ccr[State->ClockMode];
            #else
            Base->CCR = ExternalDevice->Ccr;
    8ae8:	9b05      	ldr	r3, [sp, #20]
    8aea:	685a      	ldr	r2, [r3, #4]
    8aec:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8aee:	641a      	str	r2, [r3, #64]	; 0x40
            #endif
                /* Reset current FIFO slots are available to fill at beginning of job (HLD).*/
            State->CurrentTxFifoSlot = LPSPI_IP_FIFO_SIZE_U8;
    8af0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8af2:	2204      	movs	r2, #4
    8af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            Lpspi_TransmitTxInit(Instance, (const uint8*)TxBuffer, State->ExternalDevice->DeviceParams->FrameSize, State->ExternalDevice->DeviceParams->Lsb, Length);
    8af8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8afc:	68db      	ldr	r3, [r3, #12]
    8afe:	881a      	ldrh	r2, [r3, #0]
    8b00:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b04:	68db      	ldr	r3, [r3, #12]
    8b06:	7899      	ldrb	r1, [r3, #2]
    8b08:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    8b0c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8b10:	9300      	str	r3, [sp, #0]
    8b12:	460b      	mov	r3, r1
    8b14:	9904      	ldr	r1, [sp, #16]
    8b16:	f000 fa37 	bl	8f88 <Lpspi_TransmitTxInit>
        }
        Lpspi_TransmitRxInit(Instance, RxBuffer, State->ExternalDevice->DeviceParams->FrameSize, Length);
    8b1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b1e:	68db      	ldr	r3, [r3, #12]
    8b20:	881a      	ldrh	r2, [r3, #0]
    8b22:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8b26:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    8b2a:	9903      	ldr	r1, [sp, #12]
    8b2c:	f000 facc 	bl	90c8 <Lpspi_TransmitRxInit>
        /* initialize current counter */
        CurrentTicks = OsIf_GetCounter(LPSPI_IP_TIMEOUT_METHOD);
    8b30:	2000      	movs	r0, #0
    8b32:	f7f9 f9bf 	bl	1eb4 <OsIf_GetCounter>
    8b36:	4603      	mov	r3, r0
    8b38:	9307      	str	r3, [sp, #28]
        while(State->RxIndex != State->ExpectedFifoReads)
    8b3a:	e202      	b.n	8f42 <Lpspi_Ip_SyncTransmit+0x522>
        {
            /* RECEIVE DATA */
            /* The receiving should be performed first because maybe have a last frame in RX FIFO from previous channel
                , it should be read to clear RXFIFO before start a new write to TXFIFO */
            /* Read all Data available in receive HW fifo. */
            NumberOfReads = (uint8)(((Base->FSR) & LPSPI_FSR_RXCOUNT_MASK) >> LPSPI_FSR_RXCOUNT_SHIFT);
    8b3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    8b40:	0c1b      	lsrs	r3, r3, #16
    8b42:	b2db      	uxtb	r3, r3
    8b44:	f003 0307 	and.w	r3, r3, #7
    8b48:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
            /* Limits to remaining frames. */
            
            if (NumberOfReads != 0u)
    8b4c:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    8b50:	2b00      	cmp	r3, #0
    8b52:	f000 80d2 	beq.w	8cfa <Lpspi_Ip_SyncTransmit+0x2da>
            {
                if (NumberOfReads > (State->ExpectedFifoReads - State->RxIndex))
    8b56:	f89d 2066 	ldrb.w	r2, [sp, #102]	; 0x66
    8b5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8b5c:	8b1b      	ldrh	r3, [r3, #24]
    8b5e:	4619      	mov	r1, r3
    8b60:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8b62:	8a9b      	ldrh	r3, [r3, #20]
    8b64:	1acb      	subs	r3, r1, r3
    8b66:	429a      	cmp	r2, r3
    8b68:	dd08      	ble.n	8b7c <Lpspi_Ip_SyncTransmit+0x15c>
                {
                    NumberOfReads = (uint8)(State->ExpectedFifoReads - State->RxIndex);
    8b6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8b6c:	8b1b      	ldrh	r3, [r3, #24]
    8b6e:	b2da      	uxtb	r2, r3
    8b70:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8b72:	8a9b      	ldrh	r3, [r3, #20]
    8b74:	b2db      	uxtb	r3, r3
    8b76:	1ad3      	subs	r3, r2, r3
    8b78:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
                }
                /* If these are the first frames of this channel. Current TXFIFO slot must be plus 1 because the slot of CMD have moved out */
                if (0u == State->RxIndex)
    8b7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8b7e:	8a9b      	ldrh	r3, [r3, #20]
    8b80:	2b00      	cmp	r3, #0
    8b82:	d107      	bne.n	8b94 <Lpspi_Ip_SyncTransmit+0x174>
                {
                    State->CurrentTxFifoSlot += 1u;
    8b84:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8b86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8b8a:	3301      	adds	r3, #1
    8b8c:	b2da      	uxtb	r2, r3
    8b8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    8b94:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    8b98:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    8b9c:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    8ba0:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    const LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    8ba4:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    8ba8:	4a41      	ldr	r2, [pc, #260]	; (8cb0 <Lpspi_Ip_SyncTransmit+0x290>)
    8baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bae:	930f      	str	r3, [sp, #60]	; 0x3c
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    8bb0:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    8bb4:	4a3d      	ldr	r2, [pc, #244]	; (8cac <Lpspi_Ip_SyncTransmit+0x28c>)
    8bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bba:	930e      	str	r3, [sp, #56]	; 0x38
    uint32 Data = 0u;
    8bbc:	2300      	movs	r3, #0
    8bbe:	930d      	str	r3, [sp, #52]	; 0x34
    uint8 Index = 0u;
    8bc0:	2300      	movs	r3, #0
    8bc2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    if (NULL_PTR != State->RxBuffer)
    8bc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8bc8:	689b      	ldr	r3, [r3, #8]
    8bca:	2b00      	cmp	r3, #0
    8bcc:	d069      	beq.n	8ca2 <Lpspi_Ip_SyncTransmit+0x282>
        if (State->ExternalDevice->DeviceParams->FrameSize < 9u)
    8bce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8bd2:	68db      	ldr	r3, [r3, #12]
    8bd4:	881b      	ldrh	r3, [r3, #0]
    8bd6:	2b08      	cmp	r3, #8
    8bd8:	d81e      	bhi.n	8c18 <Lpspi_Ip_SyncTransmit+0x1f8>
            for (Index = 0; Index < NumberOfReads; Index++)
    8bda:	2300      	movs	r3, #0
    8bdc:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8be0:	e013      	b.n	8c0a <Lpspi_Ip_SyncTransmit+0x1ea>
                Data = Base->RDR;
    8be2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8be6:	930d      	str	r3, [sp, #52]	; 0x34
                *((uint8*)(&State->RxBuffer[State->RxIndex + Index])) = (uint8)Data;
    8be8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8bea:	689b      	ldr	r3, [r3, #8]
    8bec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8bee:	8a92      	ldrh	r2, [r2, #20]
    8bf0:	4611      	mov	r1, r2
    8bf2:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
    8bf6:	440a      	add	r2, r1
    8bf8:	4413      	add	r3, r2
    8bfa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8bfc:	b2d2      	uxtb	r2, r2
    8bfe:	701a      	strb	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    8c00:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8c04:	3301      	adds	r3, #1
    8c06:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8c0a:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    8c0e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8c12:	429a      	cmp	r2, r3
    8c14:	d8e5      	bhi.n	8be2 <Lpspi_Ip_SyncTransmit+0x1c2>
    8c16:	e05a      	b.n	8cce <Lpspi_Ip_SyncTransmit+0x2ae>
        else if (State->ExternalDevice->DeviceParams->FrameSize < 17u)
    8c18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c1c:	68db      	ldr	r3, [r3, #12]
    8c1e:	881b      	ldrh	r3, [r3, #0]
    8c20:	2b10      	cmp	r3, #16
    8c22:	d81f      	bhi.n	8c64 <Lpspi_Ip_SyncTransmit+0x244>
            for (Index = 0; Index < NumberOfReads; Index++)
    8c24:	2300      	movs	r3, #0
    8c26:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8c2a:	e014      	b.n	8c56 <Lpspi_Ip_SyncTransmit+0x236>
                Data = Base->RDR;
    8c2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8c30:	930d      	str	r3, [sp, #52]	; 0x34
                *((uint16*)(&State->RxBuffer[2u * (State->RxIndex + Index)])) = (uint16)Data;
    8c32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8c34:	689a      	ldr	r2, [r3, #8]
    8c36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8c38:	8a9b      	ldrh	r3, [r3, #20]
    8c3a:	4619      	mov	r1, r3
    8c3c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8c40:	440b      	add	r3, r1
    8c42:	005b      	lsls	r3, r3, #1
    8c44:	4413      	add	r3, r2
    8c46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8c48:	b292      	uxth	r2, r2
    8c4a:	801a      	strh	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    8c4c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8c50:	3301      	adds	r3, #1
    8c52:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8c56:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    8c5a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8c5e:	429a      	cmp	r2, r3
    8c60:	d8e4      	bhi.n	8c2c <Lpspi_Ip_SyncTransmit+0x20c>
    8c62:	e034      	b.n	8cce <Lpspi_Ip_SyncTransmit+0x2ae>
            for (Index = 0; Index < NumberOfReads; Index++)
    8c64:	2300      	movs	r3, #0
    8c66:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8c6a:	e013      	b.n	8c94 <Lpspi_Ip_SyncTransmit+0x274>
                Data = Base->RDR;
    8c6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8c70:	930d      	str	r3, [sp, #52]	; 0x34
                *((uint32*)(&State->RxBuffer[4u * (State->RxIndex + Index)])) = (uint32)Data;
    8c72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8c74:	689a      	ldr	r2, [r3, #8]
    8c76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8c78:	8a9b      	ldrh	r3, [r3, #20]
    8c7a:	4619      	mov	r1, r3
    8c7c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8c80:	440b      	add	r3, r1
    8c82:	009b      	lsls	r3, r3, #2
    8c84:	4413      	add	r3, r2
    8c86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8c88:	601a      	str	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    8c8a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8c8e:	3301      	adds	r3, #1
    8c90:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8c94:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    8c98:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8c9c:	429a      	cmp	r2, r3
    8c9e:	d8e5      	bhi.n	8c6c <Lpspi_Ip_SyncTransmit+0x24c>
    8ca0:	e015      	b.n	8cce <Lpspi_Ip_SyncTransmit+0x2ae>
        for (Index = 0; Index < NumberOfReads; Index++)
    8ca2:	2300      	movs	r3, #0
    8ca4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8ca8:	e00b      	b.n	8cc2 <Lpspi_Ip_SyncTransmit+0x2a2>
    8caa:	bf00      	nop
    8cac:	1fff8dd8 	.word	0x1fff8dd8
    8cb0:	000185dc 	.word	0x000185dc
            (void)Base->RDR;
    8cb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        for (Index = 0; Index < NumberOfReads; Index++)
    8cb8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8cbc:	3301      	adds	r3, #1
    8cbe:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8cc2:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    8cc6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8cca:	429a      	cmp	r2, r3
    8ccc:	d8f2      	bhi.n	8cb4 <Lpspi_Ip_SyncTransmit+0x294>
    State->RxIndex += NumberOfReads;
    8cce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8cd0:	8a9a      	ldrh	r2, [r3, #20]
    8cd2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    8cd6:	b29b      	uxth	r3, r3
    8cd8:	4413      	add	r3, r2
    8cda:	b29a      	uxth	r2, r3
    8cdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8cde:	829a      	strh	r2, [r3, #20]
}
    8ce0:	bf00      	nop
                }
                /* Read Data from RX FIFO */
                Lpspi_Ip_ReadDataFromFifo(Instance, NumberOfReads);
                /* Update current FIFO slots are available to fill .*/
                State->CurrentTxFifoSlot += NumberOfReads;
    8ce2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ce4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    8ce8:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    8cec:	4413      	add	r3, r2
    8cee:	b2da      	uxtb	r2, r3
    8cf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                ElapsedTicks = 0u;
    8cf6:	2300      	movs	r3, #0
    8cf8:	9317      	str	r3, [sp, #92]	; 0x5c
            /* After driver code read all frames in RX FIFO, if there are still some frames in TX FIFO, at the time before driver code check number of frames available in TX FIFO 
            to prepare to fill TX FIFO. At that time, interrupt occurred, and the time to process interrupt is longer than the time to transfer all frames in TX FIFO. 
            So TX FIFO will be empty and some frames received in RX FIFO, then the program is returned from interrupt and fill TX FIFO until full. 
            And there is a interrupt occurred after that before read all frames in RX FIFO, and the time to process interrupt is longer than the time to transfer all frames in TX FIFO.
            State->CurrentTxFifoSlot variable is used to hanlde number of frames are "on bus transfer". They are always less than FIFO size */
            if((State->CurrentTxFifoSlot != 0u) && (TxDoneFlag != TRUE))
    8cfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8d00:	2b00      	cmp	r3, #0
    8d02:	f000 810e 	beq.w	8f22 <Lpspi_Ip_SyncTransmit+0x502>
    8d06:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
    8d0a:	f083 0301 	eor.w	r3, r3, #1
    8d0e:	b2db      	uxtb	r3, r3
    8d10:	2b00      	cmp	r3, #0
    8d12:	f000 8106 	beq.w	8f22 <Lpspi_Ip_SyncTransmit+0x502>
            {
                if(State->ExpectedFifoWrites != State->TxIndex)
    8d16:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8d18:	8b5a      	ldrh	r2, [r3, #26]
    8d1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8d1c:	8adb      	ldrh	r3, [r3, #22]
    8d1e:	429a      	cmp	r2, r3
    8d20:	f000 80c7 	beq.w	8eb2 <Lpspi_Ip_SyncTransmit+0x492>
                {
                    NumberOfWrites = State->CurrentTxFifoSlot;
    8d24:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8d2a:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
                    /* Limits to remaining frames. */
                    if (NumberOfWrites > (State->ExpectedFifoWrites - State->TxIndex))
    8d2e:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
    8d32:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8d34:	8b5b      	ldrh	r3, [r3, #26]
    8d36:	4619      	mov	r1, r3
    8d38:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8d3a:	8adb      	ldrh	r3, [r3, #22]
    8d3c:	1acb      	subs	r3, r1, r3
    8d3e:	429a      	cmp	r2, r3
    8d40:	dd08      	ble.n	8d54 <Lpspi_Ip_SyncTransmit+0x334>
                    {
                        NumberOfWrites = (uint8)(State->ExpectedFifoWrites - State->TxIndex);
    8d42:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8d44:	8b5b      	ldrh	r3, [r3, #26]
    8d46:	b2da      	uxtb	r2, r3
    8d48:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8d4a:	8adb      	ldrh	r3, [r3, #22]
    8d4c:	b2db      	uxtb	r3, r3
    8d4e:	1ad3      	subs	r3, r2, r3
    8d50:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    8d54:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    8d58:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    8d5c:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    8d60:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    8d64:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    8d68:	4a85      	ldr	r2, [pc, #532]	; (8f80 <Lpspi_Ip_SyncTransmit+0x560>)
    8d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d6e:	930b      	str	r3, [sp, #44]	; 0x2c
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    8d70:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    8d74:	4a83      	ldr	r2, [pc, #524]	; (8f84 <Lpspi_Ip_SyncTransmit+0x564>)
    8d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d7a:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 Data = 0u;
    8d7c:	2300      	movs	r3, #0
    8d7e:	9309      	str	r3, [sp, #36]	; 0x24
    uint8 Index = 0u;
    8d80:	2300      	movs	r3, #0
    8d82:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Data = State->ExternalDevice->DeviceParams->DefaultData;
    8d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d8a:	68db      	ldr	r3, [r3, #12]
    8d8c:	685b      	ldr	r3, [r3, #4]
    8d8e:	9309      	str	r3, [sp, #36]	; 0x24
    if (NULL_PTR != State->TxBuffer)
    8d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d92:	68db      	ldr	r3, [r3, #12]
    8d94:	2b00      	cmp	r3, #0
    8d96:	d063      	beq.n	8e60 <Lpspi_Ip_SyncTransmit+0x440>
        if (State->TxFrameSize < 9u)
    8d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8d9c:	2b08      	cmp	r3, #8
    8d9e:	d81d      	bhi.n	8ddc <Lpspi_Ip_SyncTransmit+0x3bc>
            for (Index = 0; Index < NumberOfWrites; Index++)
    8da0:	2300      	movs	r3, #0
    8da2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8da6:	e012      	b.n	8dce <Lpspi_Ip_SyncTransmit+0x3ae>
                Data = *((const uint8*)(&State->TxBuffer[State->TxIndex + Index]));
    8da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8daa:	68db      	ldr	r3, [r3, #12]
    8dac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8dae:	8ad2      	ldrh	r2, [r2, #22]
    8db0:	4611      	mov	r1, r2
    8db2:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    8db6:	440a      	add	r2, r1
    8db8:	4413      	add	r3, r2
    8dba:	781b      	ldrb	r3, [r3, #0]
    8dbc:	9309      	str	r3, [sp, #36]	; 0x24
                Base->TDR = Data;
    8dbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8dc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8dc2:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    8dc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8dc8:	3301      	adds	r3, #1
    8dca:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8dce:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    8dd2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8dd6:	429a      	cmp	r2, r3
    8dd8:	d8e6      	bhi.n	8da8 <Lpspi_Ip_SyncTransmit+0x388>
    8dda:	e053      	b.n	8e84 <Lpspi_Ip_SyncTransmit+0x464>
        else if (State->TxFrameSize < 17u)
    8ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8de0:	2b10      	cmp	r3, #16
    8de2:	d81e      	bhi.n	8e22 <Lpspi_Ip_SyncTransmit+0x402>
            for (Index = 0; Index < NumberOfWrites; Index++)
    8de4:	2300      	movs	r3, #0
    8de6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8dea:	e013      	b.n	8e14 <Lpspi_Ip_SyncTransmit+0x3f4>
                Data = *((const uint16*)(&State->TxBuffer[2u * (State->TxIndex + Index)]));
    8dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8dee:	68da      	ldr	r2, [r3, #12]
    8df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8df2:	8adb      	ldrh	r3, [r3, #22]
    8df4:	4619      	mov	r1, r3
    8df6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8dfa:	440b      	add	r3, r1
    8dfc:	005b      	lsls	r3, r3, #1
    8dfe:	4413      	add	r3, r2
    8e00:	881b      	ldrh	r3, [r3, #0]
    8e02:	9309      	str	r3, [sp, #36]	; 0x24
                Base->TDR = Data;
    8e04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8e06:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8e08:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    8e0a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8e0e:	3301      	adds	r3, #1
    8e10:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8e14:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    8e18:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8e1c:	429a      	cmp	r2, r3
    8e1e:	d8e5      	bhi.n	8dec <Lpspi_Ip_SyncTransmit+0x3cc>
    8e20:	e030      	b.n	8e84 <Lpspi_Ip_SyncTransmit+0x464>
            for (Index = 0; Index < NumberOfWrites; Index++)
    8e22:	2300      	movs	r3, #0
    8e24:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8e28:	e013      	b.n	8e52 <Lpspi_Ip_SyncTransmit+0x432>
                Data = *((const uint32*)(&State->TxBuffer[4u * (State->TxIndex + Index)]));
    8e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8e2c:	68da      	ldr	r2, [r3, #12]
    8e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8e30:	8adb      	ldrh	r3, [r3, #22]
    8e32:	4619      	mov	r1, r3
    8e34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8e38:	440b      	add	r3, r1
    8e3a:	009b      	lsls	r3, r3, #2
    8e3c:	4413      	add	r3, r2
    8e3e:	681b      	ldr	r3, [r3, #0]
    8e40:	9309      	str	r3, [sp, #36]	; 0x24
                Base->TDR = Data;
    8e42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8e44:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8e46:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    8e48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8e4c:	3301      	adds	r3, #1
    8e4e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8e52:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    8e56:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8e5a:	429a      	cmp	r2, r3
    8e5c:	d8e5      	bhi.n	8e2a <Lpspi_Ip_SyncTransmit+0x40a>
    8e5e:	e011      	b.n	8e84 <Lpspi_Ip_SyncTransmit+0x464>
        for (Index = 0; Index < NumberOfWrites; Index++)
    8e60:	2300      	movs	r3, #0
    8e62:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8e66:	e007      	b.n	8e78 <Lpspi_Ip_SyncTransmit+0x458>
            Base->TDR = Data;
    8e68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8e6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8e6c:	665a      	str	r2, [r3, #100]	; 0x64
        for (Index = 0; Index < NumberOfWrites; Index++)
    8e6e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8e72:	3301      	adds	r3, #1
    8e74:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8e78:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    8e7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8e80:	429a      	cmp	r2, r3
    8e82:	d8f1      	bhi.n	8e68 <Lpspi_Ip_SyncTransmit+0x448>
    State->TxIndex += NumberOfWrites;
    8e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8e86:	8ada      	ldrh	r2, [r3, #22]
    8e88:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    8e8c:	b29b      	uxth	r3, r3
    8e8e:	4413      	add	r3, r2
    8e90:	b29a      	uxth	r2, r3
    8e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8e94:	82da      	strh	r2, [r3, #22]
}
    8e96:	bf00      	nop
                    }
                    /* Push Data into TX FIFO */
                    Lpspi_Ip_PushDataToFifo(Instance, NumberOfWrites);
                    State->CurrentTxFifoSlot -= NumberOfWrites;
    8e98:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e9a:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    8e9e:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    8ea2:	1ad3      	subs	r3, r2, r3
    8ea4:	b2da      	uxtb	r2, r3
    8ea6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                    ElapsedTicks = 0u;
    8eac:	2300      	movs	r3, #0
    8eae:	9317      	str	r3, [sp, #92]	; 0x5c
    8eb0:	e037      	b.n	8f22 <Lpspi_Ip_SyncTransmit+0x502>
                }
                else
                {
                    if(TRUE == State->NextTransferConfigAvailable)
    8eb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8eb4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    8eb8:	2b00      	cmp	r3, #0
    8eba:	d01c      	beq.n	8ef6 <Lpspi_Ip_SyncTransmit+0x4d6>
                    {
                        /* Initialize next transfer */
                        State->ExternalDevice->DeviceParams->DefaultData = State->DefaultDataNext;
    8ebc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8ec0:	68db      	ldr	r3, [r3, #12]
    8ec2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    8ec4:	6b52      	ldr	r2, [r2, #52]	; 0x34
    8ec6:	605a      	str	r2, [r3, #4]
                        State->FirstCmd = FALSE;
    8ec8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8eca:	2200      	movs	r2, #0
    8ecc:	775a      	strb	r2, [r3, #29]
                        Lpspi_TransmitTxInit(Instance, State->TxBufferNext, State->FrameSizeNext, State->LsbNext, State->LengthNext);
    8ece:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ed0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    8ed2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ed4:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    8ed6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ed8:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
    8edc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ede:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    8ee0:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    8ee4:	9300      	str	r3, [sp, #0]
    8ee6:	4623      	mov	r3, r4
    8ee8:	f000 f84e 	bl	8f88 <Lpspi_TransmitTxInit>
                        State->NextTransferConfigAvailable = FALSE;
    8eec:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8eee:	2200      	movs	r2, #0
    8ef0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    8ef4:	e015      	b.n	8f22 <Lpspi_Ip_SyncTransmit+0x502>
                    }
                    else
                    {
                        TxDoneFlag = TRUE;
    8ef6:	2301      	movs	r3, #1
    8ef8:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
                        if((FALSE == State->KeepCs) && (0u != (Base->TCR & LPSPI_TCR_CONT_MASK)))
    8efc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8efe:	7f1b      	ldrb	r3, [r3, #28]
    8f00:	f083 0301 	eor.w	r3, r3, #1
    8f04:	b2db      	uxtb	r3, r3
    8f06:	2b00      	cmp	r3, #0
    8f08:	d00b      	beq.n	8f22 <Lpspi_Ip_SyncTransmit+0x502>
    8f0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    8f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    8f12:	2b00      	cmp	r3, #0
    8f14:	d005      	beq.n	8f22 <Lpspi_Ip_SyncTransmit+0x502>
                        {
                            /* Clear CS */
                            Base->TCR &= ~(LPSPI_TCR_CONT_MASK | LPSPI_TCR_CONTC_MASK);
    8f16:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    8f1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
    8f1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8f20:	661a      	str	r2, [r3, #96]	; 0x60
                        }
                    }
                }
            }
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, LPSPI_IP_TIMEOUT_METHOD);
    8f22:	ab07      	add	r3, sp, #28
    8f24:	2100      	movs	r1, #0
    8f26:	4618      	mov	r0, r3
    8f28:	f7f8 ffdd 	bl	1ee6 <OsIf_GetElapsed>
    8f2c:	4602      	mov	r2, r0
    8f2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    8f30:	4413      	add	r3, r2
    8f32:	9317      	str	r3, [sp, #92]	; 0x5c
            if (ElapsedTicks >= TimeoutTicks)
    8f34:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    8f36:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8f38:	429a      	cmp	r2, r3
    8f3a:	d302      	bcc.n	8f42 <Lpspi_Ip_SyncTransmit+0x522>
            {
                Status = LPSPI_IP_TIMEOUT;
    8f3c:	2303      	movs	r3, #3
    8f3e:	9318      	str	r3, [sp, #96]	; 0x60
                break;
    8f40:	e006      	b.n	8f50 <Lpspi_Ip_SyncTransmit+0x530>
        while(State->RxIndex != State->ExpectedFifoReads)
    8f42:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8f44:	8a9a      	ldrh	r2, [r3, #20]
    8f46:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8f48:	8b1b      	ldrh	r3, [r3, #24]
    8f4a:	429a      	cmp	r2, r3
    8f4c:	f47f adf6 	bne.w	8b3c <Lpspi_Ip_SyncTransmit+0x11c>
            }
        }
        if ((LPSPI_IP_STATUS_SUCCESS != Status) || (0u == Length))
    8f50:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8f52:	2b00      	cmp	r3, #0
    8f54:	d103      	bne.n	8f5e <Lpspi_Ip_SyncTransmit+0x53e>
    8f56:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8f5a:	2b00      	cmp	r3, #0
    8f5c:	d109      	bne.n	8f72 <Lpspi_Ip_SyncTransmit+0x552>
        {
#if (STD_OFF == LPSPI_IP_DEV_ERROR_DETECT)
            /* Return Fail status if length is 0. Error Detect is enabled, nothing need to be done here */
            if (0u == Length)
    8f5e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8f62:	2b00      	cmp	r3, #0
    8f64:	d101      	bne.n	8f6a <Lpspi_Ip_SyncTransmit+0x54a>
            {
                Status = LPSPI_IP_STATUS_FAIL;
    8f66:	2301      	movs	r3, #1
    8f68:	9318      	str	r3, [sp, #96]	; 0x60
            }
#endif
            State->Status = LPSPI_IP_FAULT;
    8f6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8f6c:	2203      	movs	r2, #3
    8f6e:	605a      	str	r2, [r3, #4]
    8f70:	e002      	b.n	8f78 <Lpspi_Ip_SyncTransmit+0x558>
        }
        else
        {
            State->Status = LPSPI_IP_IDLE;
    8f72:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8f74:	2201      	movs	r2, #1
    8f76:	605a      	str	r2, [r3, #4]
        }
    }
    return Status;
    8f78:	9b18      	ldr	r3, [sp, #96]	; 0x60
}
    8f7a:	4618      	mov	r0, r3
    8f7c:	b01a      	add	sp, #104	; 0x68
    8f7e:	bd10      	pop	{r4, pc}
    8f80:	000185dc 	.word	0x000185dc
    8f84:	1fff8dd8 	.word	0x1fff8dd8

00008f88 <Lpspi_TransmitTxInit>:
                                 const uint8* TxBuffer,
                                 uint16 TxFrameSize,
                                 boolean TxLsb,
                                 uint16 BufLen
                                )
{
    8f88:	b088      	sub	sp, #32
    8f8a:	9100      	str	r1, [sp, #0]
    8f8c:	4611      	mov	r1, r2
    8f8e:	461a      	mov	r2, r3
    8f90:	4603      	mov	r3, r0
    8f92:	f88d 3007 	strb.w	r3, [sp, #7]
    8f96:	460b      	mov	r3, r1
    8f98:	f8ad 3004 	strh.w	r3, [sp, #4]
    8f9c:	4613      	mov	r3, r2
    8f9e:	f88d 3006 	strb.w	r3, [sp, #6]
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    8fa2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8fa6:	4a46      	ldr	r2, [pc, #280]	; (90c0 <Lpspi_TransmitTxInit+0x138>)
    8fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fac:	9307      	str	r3, [sp, #28]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    8fae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8fb2:	4a44      	ldr	r2, [pc, #272]	; (90c4 <Lpspi_TransmitTxInit+0x13c>)
    8fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fb8:	9306      	str	r3, [sp, #24]
    uint32 TransferCommand = 0u;
    8fba:	2300      	movs	r3, #0
    8fbc:	9305      	str	r3, [sp, #20]
    uint8 LsbWriteValue = TxLsb ? 1U : 0U;
    8fbe:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8fc2:	2b00      	cmp	r3, #0
    8fc4:	d001      	beq.n	8fca <Lpspi_TransmitTxInit+0x42>
    8fc6:	2301      	movs	r3, #1
    8fc8:	e000      	b.n	8fcc <Lpspi_TransmitTxInit+0x44>
    8fca:	2300      	movs	r3, #0
    8fcc:	f88d 3013 	strb.w	r3, [sp, #19]

    State->TxFrameSize = TxFrameSize;
    8fd0:	9b06      	ldr	r3, [sp, #24]
    8fd2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8fd6:	851a      	strh	r2, [r3, #40]	; 0x28
    State->TxLsb = TxLsb;
    8fd8:	9b06      	ldr	r3, [sp, #24]
    8fda:	f89d 2006 	ldrb.w	r2, [sp, #6]
    8fde:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    /* Get transfer command */
#if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
    TransferCommand = State->ExternalDevice->Tcr[State->ClockMode] | LPSPI_TCR_FRAMESZ((uint32)TxFrameSize - 1u) | LPSPI_TCR_LSBF(LsbWriteValue);
#else
    TransferCommand = State->ExternalDevice->Tcr | LPSPI_TCR_FRAMESZ((uint32)TxFrameSize - 1u) | LPSPI_TCR_LSBF(LsbWriteValue);
    8fe2:	9b06      	ldr	r3, [sp, #24]
    8fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8fe6:	689a      	ldr	r2, [r3, #8]
    8fe8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8fec:	3b01      	subs	r3, #1
    8fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8ff2:	431a      	orrs	r2, r3
    8ff4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8ff8:	05db      	lsls	r3, r3, #23
    8ffa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    8ffe:	4313      	orrs	r3, r2
    9000:	9305      	str	r3, [sp, #20]
        {
            TransferCommand &= ~LPSPI_TCR_CONT_MASK;
        }
        #endif
        
        if(TRUE == State->FirstCmd)
    9002:	9b06      	ldr	r3, [sp, #24]
    9004:	7f5b      	ldrb	r3, [r3, #29]
    9006:	2b00      	cmp	r3, #0
    9008:	d003      	beq.n	9012 <Lpspi_TransmitTxInit+0x8a>
        {
            /* Set transfer command */
            Base->TCR = TransferCommand;
    900a:	9b07      	ldr	r3, [sp, #28]
    900c:	9a05      	ldr	r2, [sp, #20]
    900e:	661a      	str	r2, [r3, #96]	; 0x60
    9010:	e00d      	b.n	902e <Lpspi_TransmitTxInit+0xa6>
        }
        else
        {
            if (0u != (TransferCommand & LPSPI_TCR_CONT_MASK))
    9012:	9b05      	ldr	r3, [sp, #20]
    9014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    9018:	2b00      	cmp	r3, #0
    901a:	d005      	beq.n	9028 <Lpspi_TransmitTxInit+0xa0>
            {
                Base->TCR = TransferCommand | LPSPI_TCR_CONTC_MASK;
    901c:	9b05      	ldr	r3, [sp, #20]
    901e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
    9022:	9b07      	ldr	r3, [sp, #28]
    9024:	661a      	str	r2, [r3, #96]	; 0x60
    9026:	e002      	b.n	902e <Lpspi_TransmitTxInit+0xa6>
            }
            else
            {
                Base->TCR = TransferCommand;
    9028:	9b07      	ldr	r3, [sp, #28]
    902a:	9a05      	ldr	r2, [sp, #20]
    902c:	661a      	str	r2, [r3, #96]	; 0x60
        #if (STD_ON == LPSPI_IP_HALF_DUPLEX_MODE_SUPPORT)
        if (LPSPI_IP_FULL_DUPLEX == State->ExternalDevice->DeviceParams->TransferType)
        #endif
        {
            /* CMD will take 1 slot in TXFIFO, update current TX FIFO slot. it will be plus 1 when the first frames of channel have recieved */
            State->CurrentTxFifoSlot -= 1u;
    902e:	9b06      	ldr	r3, [sp, #24]
    9030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    9034:	3b01      	subs	r3, #1
    9036:	b2da      	uxtb	r2, r3
    9038:	9b06      	ldr	r3, [sp, #24]
    903a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        }
    }
    
    /* Update State structure. */
    State->TxIndex = 0u;
    903e:	9b06      	ldr	r3, [sp, #24]
    9040:	2200      	movs	r2, #0
    9042:	82da      	strh	r2, [r3, #22]
        (void)TxBuffer;
    }
    else
    #endif
    {
        State->TxBuffer = TxBuffer;
    9044:	9b06      	ldr	r3, [sp, #24]
    9046:	9a00      	ldr	r2, [sp, #0]
    9048:	60da      	str	r2, [r3, #12]
    904a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    904e:	f8ad 3010 	strh.w	r3, [sp, #16]
    9052:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    9056:	f8ad 300e 	strh.w	r3, [sp, #14]
    if (FrameSize < 9u)
    905a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    905e:	2b08      	cmp	r3, #8
    9060:	d804      	bhi.n	906c <Lpspi_TransmitTxInit+0xe4>
        Ret = Length;
    9062:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9066:	f8ad 300c 	strh.w	r3, [sp, #12]
    906a:	e022      	b.n	90b2 <Lpspi_TransmitTxInit+0x12a>
    else if (FrameSize < 17u)
    906c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9070:	2b10      	cmp	r3, #16
    9072:	d80c      	bhi.n	908e <Lpspi_TransmitTxInit+0x106>
        Ret = (uint16)(Length / 2u) + (uint16)(Length % 2U);
    9074:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9078:	085b      	lsrs	r3, r3, #1
    907a:	b29a      	uxth	r2, r3
    907c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9080:	f003 0301 	and.w	r3, r3, #1
    9084:	b29b      	uxth	r3, r3
    9086:	4413      	add	r3, r2
    9088:	f8ad 300c 	strh.w	r3, [sp, #12]
    908c:	e011      	b.n	90b2 <Lpspi_TransmitTxInit+0x12a>
        Ret = (uint16)(Length / 4u) + (uint16)(((Length % 4U) == 0U) ? 0U : 1U);
    908e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9092:	089b      	lsrs	r3, r3, #2
    9094:	b29a      	uxth	r2, r3
    9096:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    909a:	f003 0303 	and.w	r3, r3, #3
    909e:	b29b      	uxth	r3, r3
    90a0:	2b00      	cmp	r3, #0
    90a2:	bf14      	ite	ne
    90a4:	2301      	movne	r3, #1
    90a6:	2300      	moveq	r3, #0
    90a8:	b2db      	uxtb	r3, r3
    90aa:	b29b      	uxth	r3, r3
    90ac:	4413      	add	r3, r2
    90ae:	f8ad 300c 	strh.w	r3, [sp, #12]
    return Ret;
    90b2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    }

    State->ExpectedFifoWrites = Lpspi_Ip_GetWordsFromLength(BufLen, TxFrameSize);
    90b6:	9b06      	ldr	r3, [sp, #24]
    90b8:	835a      	strh	r2, [r3, #26]
}
    90ba:	bf00      	nop
    90bc:	b008      	add	sp, #32
    90be:	4770      	bx	lr
    90c0:	000185dc 	.word	0x000185dc
    90c4:	1fff8dd8 	.word	0x1fff8dd8

000090c8 <Lpspi_TransmitRxInit>:
static void Lpspi_TransmitRxInit(uint8 Instance,
                                      uint8* RxBuffer,
                                      uint16 RxFrameSize,
                                      uint16 BufLen
                                     )
{
    90c8:	b088      	sub	sp, #32
    90ca:	9102      	str	r1, [sp, #8]
    90cc:	4611      	mov	r1, r2
    90ce:	461a      	mov	r2, r3
    90d0:	4603      	mov	r3, r0
    90d2:	f88d 300f 	strb.w	r3, [sp, #15]
    90d6:	460b      	mov	r3, r1
    90d8:	f8ad 300c 	strh.w	r3, [sp, #12]
    90dc:	4613      	mov	r3, r2
    90de:	f8ad 3006 	strh.w	r3, [sp, #6]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    90e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    90e6:	4a22      	ldr	r2, [pc, #136]	; (9170 <Lpspi_TransmitRxInit+0xa8>)
    90e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90ec:	9307      	str	r3, [sp, #28]
    
    /* Update State structure. */
    State->RxIndex = 0u;
    90ee:	9b07      	ldr	r3, [sp, #28]
    90f0:	2200      	movs	r2, #0
    90f2:	829a      	strh	r2, [r3, #20]
        (void)RxBuffer; 
    }
    else
    #endif        
    {
        State->RxBuffer = RxBuffer; 
    90f4:	9b07      	ldr	r3, [sp, #28]
    90f6:	9a02      	ldr	r2, [sp, #8]
    90f8:	609a      	str	r2, [r3, #8]
    90fa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    90fe:	f8ad 301a 	strh.w	r3, [sp, #26]
    9102:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9106:	f8ad 3018 	strh.w	r3, [sp, #24]
    if (FrameSize < 9u)
    910a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    910e:	2b08      	cmp	r3, #8
    9110:	d804      	bhi.n	911c <Lpspi_TransmitRxInit+0x54>
        Ret = Length;
    9112:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9116:	f8ad 3016 	strh.w	r3, [sp, #22]
    911a:	e022      	b.n	9162 <Lpspi_TransmitRxInit+0x9a>
    else if (FrameSize < 17u)
    911c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    9120:	2b10      	cmp	r3, #16
    9122:	d80c      	bhi.n	913e <Lpspi_TransmitRxInit+0x76>
        Ret = (uint16)(Length / 2u) + (uint16)(Length % 2U);
    9124:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9128:	085b      	lsrs	r3, r3, #1
    912a:	b29a      	uxth	r2, r3
    912c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9130:	f003 0301 	and.w	r3, r3, #1
    9134:	b29b      	uxth	r3, r3
    9136:	4413      	add	r3, r2
    9138:	f8ad 3016 	strh.w	r3, [sp, #22]
    913c:	e011      	b.n	9162 <Lpspi_TransmitRxInit+0x9a>
        Ret = (uint16)(Length / 4u) + (uint16)(((Length % 4U) == 0U) ? 0U : 1U);
    913e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9142:	089b      	lsrs	r3, r3, #2
    9144:	b29a      	uxth	r2, r3
    9146:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    914a:	f003 0303 	and.w	r3, r3, #3
    914e:	b29b      	uxth	r3, r3
    9150:	2b00      	cmp	r3, #0
    9152:	bf14      	ite	ne
    9154:	2301      	movne	r3, #1
    9156:	2300      	moveq	r3, #0
    9158:	b2db      	uxtb	r3, r3
    915a:	b29b      	uxth	r3, r3
    915c:	4413      	add	r3, r2
    915e:	f8ad 3016 	strh.w	r3, [sp, #22]
    return Ret;
    9162:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    }

    State->ExpectedFifoReads = Lpspi_Ip_GetWordsFromLength(BufLen, RxFrameSize);
    9166:	9b07      	ldr	r3, [sp, #28]
    9168:	831a      	strh	r2, [r3, #24]
}
    916a:	bf00      	nop
    916c:	b008      	add	sp, #32
    916e:	4770      	bx	lr
    9170:	1fff8dd8 	.word	0x1fff8dd8

00009174 <Lpspi_Ip_AsyncTransmit>:
                                            const uint8 *TxBuffer,
                                            uint8 *RxBuffer,
                                            uint16 Length,
                                            Lpspi_Ip_CallbackType EndCallback
                                          )
{
    9174:	b500      	push	{lr}
    9176:	b08b      	sub	sp, #44	; 0x2c
    9178:	9005      	str	r0, [sp, #20]
    917a:	9104      	str	r1, [sp, #16]
    917c:	9203      	str	r2, [sp, #12]
    917e:	f8ad 300a 	strh.w	r3, [sp, #10]
    LPSPI_Type* Base;
    Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    9182:	2300      	movs	r3, #0
    9184:	9309      	str	r3, [sp, #36]	; 0x24
    uint8 Instance = 0u;
    9186:	2300      	movs	r3, #0
    9188:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(ExternalDevice != NULL_PTR);
    DevAssert(0u != Length);
    Lpspi_Ip_CheckValidParameters(ExternalDevice, Length);
    #endif
    Instance = ExternalDevice->Instance;
    918c:	9b05      	ldr	r3, [sp, #20]
    918e:	781b      	ldrb	r3, [r3, #0]
    9190:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    9194:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9198:	4a3d      	ldr	r2, [pc, #244]	; (9290 <Lpspi_Ip_AsyncTransmit+0x11c>)
    919a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    919e:	9307      	str	r3, [sp, #28]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(State != NULL_PTR);
    #endif
    
    Base = Lpspi_Ip_apxBases[Instance];
    91a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    91a4:	4a3b      	ldr	r2, [pc, #236]	; (9294 <Lpspi_Ip_AsyncTransmit+0x120>)
    91a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91aa:	9306      	str	r3, [sp, #24]
    SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09();
    91ac:	f00d f93e 	bl	1642c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09>
    if (LPSPI_IP_BUSY == State->Status)
    91b0:	9b07      	ldr	r3, [sp, #28]
    91b2:	685b      	ldr	r3, [r3, #4]
    91b4:	2b02      	cmp	r3, #2
    91b6:	d104      	bne.n	91c2 <Lpspi_Ip_AsyncTransmit+0x4e>
    {
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09();
    91b8:	f00d f964 	bl	16484 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09>
        Status = LPSPI_IP_STATUS_FAIL;
    91bc:	2301      	movs	r3, #1
    91be:	9309      	str	r3, [sp, #36]	; 0x24
    91c0:	e061      	b.n	9286 <Lpspi_Ip_AsyncTransmit+0x112>
        #if (STD_ON == LPSPI_IP_HALF_DUPLEX_MODE_SUPPORT)
        /* Clear some bits which support for half duplex mode at previous transfer */
        Base->CFGR1 &= ~(LPSPI_CFGR1_PCSCFG_MASK | LPSPI_CFGR1_OUTCFG_MASK | LPSPI_CFGR1_PINCFG_MASK);
        #endif
        /* Mark the hardware as busy. */
        State->Status = LPSPI_IP_BUSY;
    91c2:	9b07      	ldr	r3, [sp, #28]
    91c4:	2202      	movs	r2, #2
    91c6:	605a      	str	r2, [r3, #4]
        State->ExternalDevice = ExternalDevice;
    91c8:	9b07      	ldr	r3, [sp, #28]
    91ca:	9a05      	ldr	r2, [sp, #20]
    91cc:	625a      	str	r2, [r3, #36]	; 0x24
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09();
    91ce:	f00d f959 	bl	16484 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09>
        
        /* Update State structure. */
        State->Callback = EndCallback;
    91d2:	9b07      	ldr	r3, [sp, #28]
    91d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    91d6:	611a      	str	r2, [r3, #16]
        State->NextTransferConfigAvailable = State->KeepCs;
    91d8:	9b07      	ldr	r3, [sp, #28]
    91da:	7f1a      	ldrb	r2, [r3, #28]
    91dc:	9b07      	ldr	r3, [sp, #28]
    91de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Reset TX done flag */
        State->TxDoneFlag = FALSE;
    91e2:	9b07      	ldr	r3, [sp, #28]
    91e4:	2200      	movs	r2, #0
    91e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        
        /* Set clock configuration */
        if(TRUE == State->FirstCmd)
    91ea:	9b07      	ldr	r3, [sp, #28]
    91ec:	7f5b      	ldrb	r3, [r3, #29]
    91ee:	2b00      	cmp	r3, #0
    91f0:	d028      	beq.n	9244 <Lpspi_Ip_AsyncTransmit+0xd0>
        {
            SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11();
    91f2:	f00d f9bf 	bl	16574 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11>
            /* Make sure that FIFOs will be empty before start new transfer session */
            Base->CR |= LPSPI_CR_RTF_MASK|LPSPI_CR_RRF_MASK;
    91f6:	9b06      	ldr	r3, [sp, #24]
    91f8:	691b      	ldr	r3, [r3, #16]
    91fa:	f443 7240 	orr.w	r2, r3, #768	; 0x300
    91fe:	9b06      	ldr	r3, [sp, #24]
    9200:	611a      	str	r2, [r3, #16]
            /* clear all flags */
            Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    9202:	9b06      	ldr	r3, [sp, #24]
    9204:	695b      	ldr	r3, [r3, #20]
    9206:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    920a:	9b06      	ldr	r3, [sp, #24]
    920c:	615a      	str	r2, [r3, #20]
            #endif
            {
                #if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
                Base->CCR = ExternalDevice->Ccr[State->ClockMode];
                #else
                Base->CCR = ExternalDevice->Ccr;
    920e:	9b05      	ldr	r3, [sp, #20]
    9210:	685a      	ldr	r2, [r3, #4]
    9212:	9b06      	ldr	r3, [sp, #24]
    9214:	641a      	str	r2, [r3, #64]	; 0x40
                #endif
            }
            /* Update current FIFO slots are available to fill .*/
            State->CurrentTxFifoSlot = LPSPI_IP_FIFO_SIZE_U8;
    9216:	9b07      	ldr	r3, [sp, #28]
    9218:	2204      	movs	r2, #4
    921a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            /* In setting up Transmit command register, the RXMSK is also cleared */
            Lpspi_TransmitTxInit(Instance, (const uint8*)TxBuffer, State->ExternalDevice->DeviceParams->FrameSize, State->ExternalDevice->DeviceParams->Lsb, Length);
    921e:	9b07      	ldr	r3, [sp, #28]
    9220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9222:	68db      	ldr	r3, [r3, #12]
    9224:	881a      	ldrh	r2, [r3, #0]
    9226:	9b07      	ldr	r3, [sp, #28]
    9228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    922a:	68db      	ldr	r3, [r3, #12]
    922c:	7899      	ldrb	r1, [r3, #2]
    922e:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    9232:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    9236:	9300      	str	r3, [sp, #0]
    9238:	460b      	mov	r3, r1
    923a:	9904      	ldr	r1, [sp, #16]
    923c:	f7ff fea4 	bl	8f88 <Lpspi_TransmitTxInit>
            SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11();
    9240:	f00d f9c4 	bl	165cc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11>
        }
        Lpspi_TransmitRxInit(Instance, RxBuffer, State->ExternalDevice->DeviceParams->FrameSize, Length);
    9244:	9b07      	ldr	r3, [sp, #28]
    9246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9248:	68db      	ldr	r3, [r3, #12]
    924a:	881a      	ldrh	r2, [r3, #0]
    924c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    9250:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    9254:	9903      	ldr	r1, [sp, #12]
    9256:	f7ff ff37 	bl	90c8 <Lpspi_TransmitRxInit>
            }
            else
            #endif
            {
                /* Set TX water */
                Base->FCR = LPSPI_FCR_TXWATER((uint32)LPSPI_IP_FIFO_SIZE_U8 - (uint32)1u);
    925a:	9b06      	ldr	r3, [sp, #24]
    925c:	2203      	movs	r2, #3
    925e:	659a      	str	r2, [r3, #88]	; 0x58
            }
            
            /* Disable DMA requests */
            Base->DER = 0u;
    9260:	9b06      	ldr	r3, [sp, #24]
    9262:	2200      	movs	r2, #0
    9264:	61da      	str	r2, [r3, #28]
            switch (State->TransferMode)
    9266:	9b07      	ldr	r3, [sp, #28]
    9268:	681b      	ldr	r3, [r3, #0]
    926a:	2b00      	cmp	r3, #0
    926c:	d002      	beq.n	9274 <Lpspi_Ip_AsyncTransmit+0x100>
    926e:	2b01      	cmp	r3, #1
    9270:	d004      	beq.n	927c <Lpspi_Ip_AsyncTransmit+0x108>
                case LPSPI_IP_INTERRUPT:
                    Base->IER = LPSPI_IER_RDIE_MASK | LPSPI_IER_TDIE_MASK | LPSPI_IER_REIE_MASK | LPSPI_IER_TEIE_MASK;
                    break;
                default:
                    /* Nothing to do */
                    break;
    9272:	e008      	b.n	9286 <Lpspi_Ip_AsyncTransmit+0x112>
                    Base->IER = 0u;
    9274:	9b06      	ldr	r3, [sp, #24]
    9276:	2200      	movs	r2, #0
    9278:	619a      	str	r2, [r3, #24]
                    break;
    927a:	e004      	b.n	9286 <Lpspi_Ip_AsyncTransmit+0x112>
                    Base->IER = LPSPI_IER_RDIE_MASK | LPSPI_IER_TDIE_MASK | LPSPI_IER_REIE_MASK | LPSPI_IER_TEIE_MASK;
    927c:	9b06      	ldr	r3, [sp, #24]
    927e:	f641 0203 	movw	r2, #6147	; 0x1803
    9282:	619a      	str	r2, [r3, #24]
                    break;
    9284:	bf00      	nop
            /* Enable DMA request. */
            Base->DER = LPSPI_DER_RDDE_MASK | LPSPI_DER_TDDE_MASK;
        }
        #endif
    }
    return Status;
    9286:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    9288:	4618      	mov	r0, r3
    928a:	b00b      	add	sp, #44	; 0x2c
    928c:	f85d fb04 	ldr.w	pc, [sp], #4
    9290:	1fff8dd8 	.word	0x1fff8dd8
    9294:	000185dc 	.word	0x000185dc

00009298 <Lpspi_Ip_ManageBuffers>:
}
#endif
#endif

void Lpspi_Ip_ManageBuffers(uint8 Instance)
{
    9298:	b500      	push	{lr}
    929a:	b085      	sub	sp, #20
    929c:	4603      	mov	r3, r0
    929e:	f88d 3007 	strb.w	r3, [sp, #7]
    #endif

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    Base = Lpspi_Ip_apxBases[Instance];
    92a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    92a6:	4a14      	ldr	r2, [pc, #80]	; (92f8 <Lpspi_Ip_ManageBuffers+0x60>)
    92a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92ac:	9303      	str	r3, [sp, #12]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    92ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    92b2:	4a12      	ldr	r2, [pc, #72]	; (92fc <Lpspi_Ip_ManageBuffers+0x64>)
    92b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92b8:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    if (LPSPI_IP_POLLING == State->TransferMode)
    92ba:	9b02      	ldr	r3, [sp, #8]
    92bc:	681b      	ldr	r3, [r3, #0]
    92be:	2b00      	cmp	r3, #0
    92c0:	d115      	bne.n	92ee <Lpspi_Ip_ManageBuffers+0x56>
                - Receive: Both TDF (push CDM) and DRF (receive data) are set.
               In half duplex Slave mode:
                - Transmit: TDF is set only, RDF will never be set by RX FIFO have masked.
                - Receive: Both TDF and RDF are set. But only process for RDF to receive data. In this case, State->CurrentTxFifoSlot will be set to 0 */
            if(
                (0u != (Base->SR & LPSPI_SR_RDF_MASK)) ||
    92c2:	9b03      	ldr	r3, [sp, #12]
    92c4:	695b      	ldr	r3, [r3, #20]
    92c6:	f003 0302 	and.w	r3, r3, #2
            if(
    92ca:	2b00      	cmp	r3, #0
    92cc:	d10a      	bne.n	92e4 <Lpspi_Ip_ManageBuffers+0x4c>
                ((0u != (Base->SR & LPSPI_SR_TDF_MASK)) && (0u!= State->CurrentTxFifoSlot))
    92ce:	9b03      	ldr	r3, [sp, #12]
    92d0:	695b      	ldr	r3, [r3, #20]
    92d2:	f003 0301 	and.w	r3, r3, #1
                (0u != (Base->SR & LPSPI_SR_RDF_MASK)) ||
    92d6:	2b00      	cmp	r3, #0
    92d8:	d009      	beq.n	92ee <Lpspi_Ip_ManageBuffers+0x56>
                ((0u != (Base->SR & LPSPI_SR_TDF_MASK)) && (0u!= State->CurrentTxFifoSlot))
    92da:	9b02      	ldr	r3, [sp, #8]
    92dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    92e0:	2b00      	cmp	r3, #0
    92e2:	d004      	beq.n	92ee <Lpspi_Ip_ManageBuffers+0x56>
                    Lpspi_Ip_TransferProcessHalfDuplex(Instance);
                }
                else
                #endif
                {
                    Lpspi_Ip_TransferProcess(Instance); 
    92e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    92e8:	4618      	mov	r0, r3
    92ea:	f7ff f8cd 	bl	8488 <Lpspi_Ip_TransferProcess>
                Lpspi_Ip_IrqTxDmaHandler(Instance);
            }
        }
        #endif
    }
}
    92ee:	bf00      	nop
    92f0:	b005      	add	sp, #20
    92f2:	f85d fb04 	ldr.w	pc, [sp], #4
    92f6:	bf00      	nop
    92f8:	000185dc 	.word	0x000185dc
    92fc:	1fff8dd8 	.word	0x1fff8dd8

00009300 <Lpspi_Ip_UpdateFrameSize>:
/*================================================================================================*/
Lpspi_Ip_StatusType Lpspi_Ip_UpdateFrameSize(const Lpspi_Ip_ExternalDeviceType *ExternalDevice, uint16 FrameSize)
{
    9300:	b084      	sub	sp, #16
    9302:	9001      	str	r0, [sp, #4]
    9304:	460b      	mov	r3, r1
    9306:	f8ad 3002 	strh.w	r3, [sp, #2]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    930a:	2300      	movs	r3, #0
    930c:	9303      	str	r3, [sp, #12]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != ExternalDevice);
    DevAssert(LPSPI_IP_FRAMESIZE_MAX_U16 >= FrameSize);
    DevAssert(LPSPI_IP_FRAMESIZE_MIN_U16 <= FrameSize);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[ExternalDevice->Instance];
    930e:	9b01      	ldr	r3, [sp, #4]
    9310:	781b      	ldrb	r3, [r3, #0]
    9312:	461a      	mov	r2, r3
    9314:	4b09      	ldr	r3, [pc, #36]	; (933c <Lpspi_Ip_UpdateFrameSize+0x3c>)
    9316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    931a:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Frame size can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    931c:	9b02      	ldr	r3, [sp, #8]
    931e:	685b      	ldr	r3, [r3, #4]
    9320:	2b02      	cmp	r3, #2
    9322:	d005      	beq.n	9330 <Lpspi_Ip_UpdateFrameSize+0x30>
    {
        ExternalDevice->DeviceParams->FrameSize = FrameSize;
    9324:	9b01      	ldr	r3, [sp, #4]
    9326:	68db      	ldr	r3, [r3, #12]
    9328:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    932c:	801a      	strh	r2, [r3, #0]
    932e:	e001      	b.n	9334 <Lpspi_Ip_UpdateFrameSize+0x34>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    9330:	2301      	movs	r3, #1
    9332:	9303      	str	r3, [sp, #12]
    }
    return Status;
    9334:	9b03      	ldr	r3, [sp, #12]
}
    9336:	4618      	mov	r0, r3
    9338:	b004      	add	sp, #16
    933a:	4770      	bx	lr
    933c:	1fff8dd8 	.word	0x1fff8dd8

00009340 <Lpspi_Ip_UpdateLsb>:

Lpspi_Ip_StatusType Lpspi_Ip_UpdateLsb(const Lpspi_Ip_ExternalDeviceType *ExternalDevice, boolean Lsb)
{
    9340:	b084      	sub	sp, #16
    9342:	9001      	str	r0, [sp, #4]
    9344:	460b      	mov	r3, r1
    9346:	f88d 3003 	strb.w	r3, [sp, #3]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    934a:	2300      	movs	r3, #0
    934c:	9303      	str	r3, [sp, #12]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != ExternalDevice);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[ExternalDevice->Instance];
    934e:	9b01      	ldr	r3, [sp, #4]
    9350:	781b      	ldrb	r3, [r3, #0]
    9352:	461a      	mov	r2, r3
    9354:	4b09      	ldr	r3, [pc, #36]	; (937c <Lpspi_Ip_UpdateLsb+0x3c>)
    9356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    935a:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Bite order can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    935c:	9b02      	ldr	r3, [sp, #8]
    935e:	685b      	ldr	r3, [r3, #4]
    9360:	2b02      	cmp	r3, #2
    9362:	d005      	beq.n	9370 <Lpspi_Ip_UpdateLsb+0x30>
    {
        ExternalDevice->DeviceParams->Lsb = Lsb;
    9364:	9b01      	ldr	r3, [sp, #4]
    9366:	68db      	ldr	r3, [r3, #12]
    9368:	f89d 2003 	ldrb.w	r2, [sp, #3]
    936c:	709a      	strb	r2, [r3, #2]
    936e:	e001      	b.n	9374 <Lpspi_Ip_UpdateLsb+0x34>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    9370:	2301      	movs	r3, #1
    9372:	9303      	str	r3, [sp, #12]
    }
    return Status;
    9374:	9b03      	ldr	r3, [sp, #12]
}
    9376:	4618      	mov	r0, r3
    9378:	b004      	add	sp, #16
    937a:	4770      	bx	lr
    937c:	1fff8dd8 	.word	0x1fff8dd8

00009380 <Lpspi_Ip_UpdateDefaultTransmitData>:

Lpspi_Ip_StatusType Lpspi_Ip_UpdateDefaultTransmitData(const Lpspi_Ip_ExternalDeviceType *ExternalDevice, uint32 DefaultData)
{
    9380:	b084      	sub	sp, #16
    9382:	9001      	str	r0, [sp, #4]
    9384:	9100      	str	r1, [sp, #0]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    9386:	2300      	movs	r3, #0
    9388:	9303      	str	r3, [sp, #12]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != ExternalDevice);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[ExternalDevice->Instance];
    938a:	9b01      	ldr	r3, [sp, #4]
    938c:	781b      	ldrb	r3, [r3, #0]
    938e:	461a      	mov	r2, r3
    9390:	4b09      	ldr	r3, [pc, #36]	; (93b8 <Lpspi_Ip_UpdateDefaultTransmitData+0x38>)
    9392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9396:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Bite order can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    9398:	9b02      	ldr	r3, [sp, #8]
    939a:	685b      	ldr	r3, [r3, #4]
    939c:	2b02      	cmp	r3, #2
    939e:	d004      	beq.n	93aa <Lpspi_Ip_UpdateDefaultTransmitData+0x2a>
    {
        ExternalDevice->DeviceParams->DefaultData = DefaultData;
    93a0:	9b01      	ldr	r3, [sp, #4]
    93a2:	68db      	ldr	r3, [r3, #12]
    93a4:	9a00      	ldr	r2, [sp, #0]
    93a6:	605a      	str	r2, [r3, #4]
    93a8:	e001      	b.n	93ae <Lpspi_Ip_UpdateDefaultTransmitData+0x2e>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    93aa:	2301      	movs	r3, #1
    93ac:	9303      	str	r3, [sp, #12]
    }
    return Status;
    93ae:	9b03      	ldr	r3, [sp, #12]
}
    93b0:	4618      	mov	r0, r3
    93b2:	b004      	add	sp, #16
    93b4:	4770      	bx	lr
    93b6:	bf00      	nop
    93b8:	1fff8dd8 	.word	0x1fff8dd8

000093bc <Lpspi_Ip_UpdateTransferMode>:

Lpspi_Ip_StatusType Lpspi_Ip_UpdateTransferMode(uint8 Instance, Lpspi_Ip_ModeType Mode)
{
    93bc:	b084      	sub	sp, #16
    93be:	4603      	mov	r3, r0
    93c0:	9100      	str	r1, [sp, #0]
    93c2:	f88d 3007 	strb.w	r3, [sp, #7]
    Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    93c6:	2300      	movs	r3, #0
    93c8:	9303      	str	r3, [sp, #12]

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    93ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    93ce:	4a09      	ldr	r2, [pc, #36]	; (93f4 <Lpspi_Ip_UpdateTransferMode+0x38>)
    93d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93d4:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Transfer mode can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    93d6:	9b02      	ldr	r3, [sp, #8]
    93d8:	685b      	ldr	r3, [r3, #4]
    93da:	2b02      	cmp	r3, #2
    93dc:	d003      	beq.n	93e6 <Lpspi_Ip_UpdateTransferMode+0x2a>
    {
        State->TransferMode = Mode;
    93de:	9b02      	ldr	r3, [sp, #8]
    93e0:	9a00      	ldr	r2, [sp, #0]
    93e2:	601a      	str	r2, [r3, #0]
    93e4:	e001      	b.n	93ea <Lpspi_Ip_UpdateTransferMode+0x2e>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    93e6:	2301      	movs	r3, #1
    93e8:	9303      	str	r3, [sp, #12]
    }
    return Status;
    93ea:	9b03      	ldr	r3, [sp, #12]
}
    93ec:	4618      	mov	r0, r3
    93ee:	b004      	add	sp, #16
    93f0:	4770      	bx	lr
    93f2:	bf00      	nop
    93f4:	1fff8dd8 	.word	0x1fff8dd8

000093f8 <Lpspi_Ip_Cancel>:

void Lpspi_Ip_Cancel(uint8 Instance)
{
    93f8:	b500      	push	{lr}
    93fa:	b087      	sub	sp, #28
    93fc:	4603      	mov	r3, r0
    93fe:	f88d 3007 	strb.w	r3, [sp, #7]
    LPSPI_Type* Base;
    Lpspi_Ip_StateStructureType* State;
    uint32 Cfgr1 = 0u;
    9402:	2300      	movs	r3, #0
    9404:	9305      	str	r3, [sp, #20]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    Base = Lpspi_Ip_apxBases[Instance];
    9406:	f89d 3007 	ldrb.w	r3, [sp, #7]
    940a:	4a18      	ldr	r2, [pc, #96]	; (946c <Lpspi_Ip_Cancel+0x74>)
    940c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9410:	9304      	str	r3, [sp, #16]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    9412:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9416:	4a16      	ldr	r2, [pc, #88]	; (9470 <Lpspi_Ip_Cancel+0x78>)
    9418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    941c:	9303      	str	r3, [sp, #12]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10();
    941e:	f00d f857 	bl	164d0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10>
    if (LPSPI_IP_BUSY == State->Status)
    9422:	9b03      	ldr	r3, [sp, #12]
    9424:	685b      	ldr	r3, [r3, #4]
    9426:	2b02      	cmp	r3, #2
    9428:	d11a      	bne.n	9460 <Lpspi_Ip_Cancel+0x68>
    {
        /* Mask Rx to discard received data */
        Base->TCR |= LPSPI_TCR_RXMSK(1);
    942a:	9b04      	ldr	r3, [sp, #16]
    942c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    942e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
    9432:	9b04      	ldr	r3, [sp, #16]
    9434:	661a      	str	r2, [r3, #96]	; 0x60
        /* store CFGR1 and restore after all registers are reset */
        Cfgr1 = Base->CFGR1;
    9436:	9b04      	ldr	r3, [sp, #16]
    9438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    943a:	9305      	str	r3, [sp, #20]
        /* Disable interrupts and DMA requests. */
        /* Clear FIFO */
        /* RTF and RRF will not clear shifter, so RST must be used to ensure old Data in shifter will also be cleared. */
        Base->CR |= LPSPI_CR_RST_MASK;
    943c:	9b04      	ldr	r3, [sp, #16]
    943e:	691b      	ldr	r3, [r3, #16]
    9440:	f043 0202 	orr.w	r2, r3, #2
    9444:	9b04      	ldr	r3, [sp, #16]
    9446:	611a      	str	r2, [r3, #16]
        Base->CR &= ~LPSPI_CR_RST_MASK;
    9448:	9b04      	ldr	r3, [sp, #16]
    944a:	691b      	ldr	r3, [r3, #16]
    944c:	f023 0202 	bic.w	r2, r3, #2
    9450:	9b04      	ldr	r3, [sp, #16]
    9452:	611a      	str	r2, [r3, #16]
        /* restore CFGR1 */
        Base->CFGR1 = Cfgr1;
    9454:	9b04      	ldr	r3, [sp, #16]
    9456:	9a05      	ldr	r2, [sp, #20]
    9458:	625a      	str	r2, [r3, #36]	; 0x24
            (void)Dma_Ip_SetLogicChannelCommand(State->PhyUnitConfig->RxDmaChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
            (void)Dma_Ip_SetLogicChannelCommand(State->PhyUnitConfig->TxDmaChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
        #endif
        /* set State to idle */
        State->Status = LPSPI_IP_IDLE;
    945a:	9b03      	ldr	r3, [sp, #12]
    945c:	2201      	movs	r2, #1
    945e:	605a      	str	r2, [r3, #4]
    }
    SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10();
    9460:	f00d f862 	bl	16528 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10>
}
    9464:	bf00      	nop
    9466:	b007      	add	sp, #28
    9468:	f85d fb04 	ldr.w	pc, [sp], #4
    946c:	000185dc 	.word	0x000185dc
    9470:	1fff8dd8 	.word	0x1fff8dd8

00009474 <Lpspi_Ip_IrqHandler>:
* @param[in]     Instance            Instance of the hardware unit.
*
* @implements Lpspi_Ip_IrqHandler_Activity
*/
void Lpspi_Ip_IrqHandler(uint8 Instance)
{
    9474:	b500      	push	{lr}
    9476:	b087      	sub	sp, #28
    9478:	4603      	mov	r3, r0
    947a:	f88d 3007 	strb.w	r3, [sp, #7]
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    947e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9482:	4a18      	ldr	r2, [pc, #96]	; (94e4 <Lpspi_Ip_IrqHandler+0x70>)
    9484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9488:	9305      	str	r3, [sp, #20]
    const Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    948a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    948e:	4a16      	ldr	r2, [pc, #88]	; (94e8 <Lpspi_Ip_IrqHandler+0x74>)
    9490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9494:	9304      	str	r3, [sp, #16]
    uint32 IrqFlags = 0u;
    9496:	2300      	movs	r3, #0
    9498:	9303      	str	r3, [sp, #12]

    if (NULL_PTR != State)
    949a:	9b04      	ldr	r3, [sp, #16]
    949c:	2b00      	cmp	r3, #0
    949e:	d016      	beq.n	94ce <Lpspi_Ip_IrqHandler+0x5a>
    {
        /* the driver has been initialized */
        IrqFlags = Base->SR & (LPSPI_SR_TDF_MASK | LPSPI_SR_RDF_MASK | LPSPI_SR_TEF_MASK | LPSPI_SR_REF_MASK);
    94a0:	9b05      	ldr	r3, [sp, #20]
    94a2:	695a      	ldr	r2, [r3, #20]
    94a4:	f641 0303 	movw	r3, #6147	; 0x1803
    94a8:	4013      	ands	r3, r2
    94aa:	9303      	str	r3, [sp, #12]
        IrqFlags &= Base->IER & (LPSPI_IER_TDIE_MASK | LPSPI_IER_RDIE_MASK | LPSPI_IER_TEIE_MASK | LPSPI_IER_REIE_MASK);
    94ac:	9b05      	ldr	r3, [sp, #20]
    94ae:	699a      	ldr	r2, [r3, #24]
    94b0:	f641 0303 	movw	r3, #6147	; 0x1803
    94b4:	4013      	ands	r3, r2
    94b6:	9a03      	ldr	r2, [sp, #12]
    94b8:	4013      	ands	r3, r2
    94ba:	9303      	str	r3, [sp, #12]
        if (0u != IrqFlags)
    94bc:	9b03      	ldr	r3, [sp, #12]
    94be:	2b00      	cmp	r3, #0
    94c0:	d00b      	beq.n	94da <Lpspi_Ip_IrqHandler+0x66>
                Lpspi_Ip_TransferProcessHalfDuplex(Instance);    
            }
            else
            #endif
            {
                Lpspi_Ip_TransferProcess(Instance); 
    94c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    94c6:	4618      	mov	r0, r3
    94c8:	f7fe ffde 	bl	8488 <Lpspi_Ip_TransferProcess>
    {
        /* the driver has not been initialized */
        /* clear all flags */
        Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    }
}
    94cc:	e005      	b.n	94da <Lpspi_Ip_IrqHandler+0x66>
        Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    94ce:	9b05      	ldr	r3, [sp, #20]
    94d0:	695b      	ldr	r3, [r3, #20]
    94d2:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    94d6:	9b05      	ldr	r3, [sp, #20]
    94d8:	615a      	str	r2, [r3, #20]
}
    94da:	bf00      	nop
    94dc:	b007      	add	sp, #28
    94de:	f85d fb04 	ldr.w	pc, [sp], #4
    94e2:	bf00      	nop
    94e4:	000185dc 	.word	0x000185dc
    94e8:	1fff8dd8 	.word	0x1fff8dd8

000094ec <Lpspi_Ip_GetStatus>:
* @param[in]        Instance - SPI peripheral instance number.
*
* @return           Lpspi_Ip_HwStatusType
*/
Lpspi_Ip_HwStatusType Lpspi_Ip_GetStatus(uint8 Instance)
{
    94ec:	b084      	sub	sp, #16
    94ee:	4603      	mov	r3, r0
    94f0:	f88d 3007 	strb.w	r3, [sp, #7]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_HwStatusType Status = LPSPI_IP_UNINIT;
    94f4:	2300      	movs	r3, #0
    94f6:	9303      	str	r3, [sp, #12]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    94f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    94fc:	4a06      	ldr	r2, [pc, #24]	; (9518 <Lpspi_Ip_GetStatus+0x2c>)
    94fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9502:	9302      	str	r3, [sp, #8]
    if (State != NULL_PTR)
    9504:	9b02      	ldr	r3, [sp, #8]
    9506:	2b00      	cmp	r3, #0
    9508:	d002      	beq.n	9510 <Lpspi_Ip_GetStatus+0x24>
    {
        Status = State->Status;
    950a:	9b02      	ldr	r3, [sp, #8]
    950c:	685b      	ldr	r3, [r3, #4]
    950e:	9303      	str	r3, [sp, #12]
    }
    
    return Status;
    9510:	9b03      	ldr	r3, [sp, #12]
}
    9512:	4618      	mov	r0, r3
    9514:	b004      	add	sp, #16
    9516:	4770      	bx	lr
    9518:	1fff8dd8 	.word	0x1fff8dd8

0000951c <Spi_CheckInit>:
static inline Std_ReturnType Spi_CheckInit
    ( 
        const Spi_ConfigType *ConfigPtr,
        uint32 SpiCoreID
    )
{
    951c:	b086      	sub	sp, #24
    951e:	9001      	str	r0, [sp, #4]
    9520:	9100      	str	r1, [sp, #0]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    9522:	2300      	movs	r3, #0
    9524:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 Sequence;
#endif

#if (SPI_PRECOMPILE_SUPPORT == STD_OFF)
    /* Configuration sizes must be checked for Post Build & Link Time configurations */
    Channel  = (uint32)(ConfigPtr->SpiMaxChannel);
    9528:	9b01      	ldr	r3, [sp, #4]
    952a:	789b      	ldrb	r3, [r3, #2]
    952c:	9304      	str	r3, [sp, #16]
    Job      = (uint32)(ConfigPtr->SpiMaxJob);
    952e:	9b01      	ldr	r3, [sp, #4]
    9530:	889b      	ldrh	r3, [r3, #4]
    9532:	9303      	str	r3, [sp, #12]
    Sequence = (uint32)(ConfigPtr->SpiMaxSequence);
    9534:	9b01      	ldr	r3, [sp, #4]
    9536:	799b      	ldrb	r3, [r3, #6]
    9538:	9302      	str	r3, [sp, #8]

    if ((Channel >= SPI_MAX_CHANNEL) || (Job >= SPI_MAX_JOB) || (Sequence >= SPI_MAX_SEQUENCE))
    953a:	9b04      	ldr	r3, [sp, #16]
    953c:	2b01      	cmp	r3, #1
    953e:	d805      	bhi.n	954c <Spi_CheckInit+0x30>
    9540:	9b03      	ldr	r3, [sp, #12]
    9542:	2b00      	cmp	r3, #0
    9544:	d102      	bne.n	954c <Spi_CheckInit+0x30>
    9546:	9b02      	ldr	r3, [sp, #8]
    9548:	2b00      	cmp	r3, #0
    954a:	d002      	beq.n	9552 <Spi_CheckInit+0x36>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    954c:	2301      	movs	r3, #1
    954e:	f88d 3017 	strb.w	r3, [sp, #23]
#if (SPI_DEV_ERROR_DETECT == STD_ON)
        /* Call Det_ReportError */
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_INIT_ID,SPI_E_CONFIG_OUT_OF_RANGE);
#endif
    }
    if (SpiCoreID != ConfigPtr->SpiCoreUse)
    9552:	9b01      	ldr	r3, [sp, #4]
    9554:	689b      	ldr	r3, [r3, #8]
    9556:	9a00      	ldr	r2, [sp, #0]
    9558:	429a      	cmp	r2, r3
    955a:	d002      	beq.n	9562 <Spi_CheckInit+0x46>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    955c:	2301      	movs	r3, #1
    955e:	f88d 3017 	strb.w	r3, [sp, #23]
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_INIT_ID,SPI_E_INVALID_POINTER);
#endif
    }
#endif /* (SPI_PRECOMPILE_SUPPORT == STD_OFF) */

    return CheckStatus;
    9562:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    9566:	4618      	mov	r0, r3
    9568:	b006      	add	sp, #24
    956a:	4770      	bx	lr

0000956c <Spi_SyncJobsTranfer>:
static Std_ReturnType Spi_SyncJobsTranfer
    (
        const Spi_SequenceConfigType *SequenceConfig,
        uint32 SpiCoreID
    )
{
    956c:	b500      	push	{lr}
    956e:	b089      	sub	sp, #36	; 0x24
    9570:	9001      	str	r0, [sp, #4]
    9572:	9100      	str	r1, [sp, #0]
    Spi_JobType JobsCount;
    const Spi_JobType *JobIndexList;
    Spi_JobType Job;
    Spi_JobStateType *JobState;
    const Spi_JobConfigType *JobConfig;
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    9574:	2300      	movs	r3, #0
    9576:	f88d 3017 	strb.w	r3, [sp, #23]
    
    /* Get the number of jobs in the sequence */
    JobsCount = SequenceConfig->NumJobs;
    957a:	9b01      	ldr	r3, [sp, #4]
    957c:	881b      	ldrh	r3, [r3, #0]
    957e:	f8ad 301e 	strh.w	r3, [sp, #30]
    JobIndexList = SequenceConfig->JobIndexList;
    9582:	9b01      	ldr	r3, [sp, #4]
    9584:	689b      	ldr	r3, [r3, #8]
    9586:	9306      	str	r3, [sp, #24]
    while (0u < JobsCount)
    9588:	e072      	b.n	9670 <Spi_SyncJobsTranfer+0x104>
    {
        /* Get the job id */
        Job = *JobIndexList;
    958a:	9b06      	ldr	r3, [sp, #24]
    958c:	881b      	ldrh	r3, [r3, #0]
    958e:	f8ad 3014 	strh.w	r3, [sp, #20]
        /* Set the job status as pending */
        JobState = &Spi_axSpiJobState[Job];
    9592:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9596:	009b      	lsls	r3, r3, #2
    9598:	4a3a      	ldr	r2, [pc, #232]	; (9684 <Spi_SyncJobsTranfer+0x118>)
    959a:	4413      	add	r3, r2
    959c:	9304      	str	r3, [sp, #16]
        JobState->Result = SPI_JOB_PENDING;
    959e:	9b04      	ldr	r3, [sp, #16]
    95a0:	2201      	movs	r2, #1
    95a2:	601a      	str	r2, [r3, #0]
        JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    95a4:	4a38      	ldr	r2, [pc, #224]	; (9688 <Spi_SyncJobsTranfer+0x11c>)
    95a6:	9b00      	ldr	r3, [sp, #0]
    95a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95ac:	691a      	ldr	r2, [r3, #16]
    95ae:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    95b2:	009b      	lsls	r3, r3, #2
    95b4:	4413      	add	r3, r2
    95b6:	681b      	ldr	r3, [r3, #0]
    95b8:	9303      	str	r3, [sp, #12]
        
        /* start job notification to assert the non-cs pin,
        when non-cs pin is used as chipselect*/
        if (NULL_PTR != JobConfig->StartNotification)
    95ba:	9b03      	ldr	r3, [sp, #12]
    95bc:	68db      	ldr	r3, [r3, #12]
    95be:	2b00      	cmp	r3, #0
    95c0:	d002      	beq.n	95c8 <Spi_SyncJobsTranfer+0x5c>
        {
            JobConfig->StartNotification();
    95c2:	9b03      	ldr	r3, [sp, #12]
    95c4:	68db      	ldr	r3, [r3, #12]
    95c6:	4798      	blx	r3
        else
        {
            /* Do nothing */
        }
        /* Mark HWUnit as busy */
        Spi_axSpiHwUnitQueueArray[JobConfig->HWUnit].Status = SPI_BUSY;
    95c8:	9b03      	ldr	r3, [sp, #12]
    95ca:	7f1b      	ldrb	r3, [r3, #28]
    95cc:	4619      	mov	r1, r3
    95ce:	4b2f      	ldr	r3, [pc, #188]	; (968c <Spi_SyncJobsTranfer+0x120>)
    95d0:	2202      	movs	r2, #2
    95d2:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        
        Status = Spi_Ipw_SyncTransmit(JobConfig, SpiCoreID);
    95d6:	9900      	ldr	r1, [sp, #0]
    95d8:	9803      	ldr	r0, [sp, #12]
    95da:	f000 fc5f 	bl	9e9c <Spi_Ipw_SyncTransmit>
    95de:	4603      	mov	r3, r0
    95e0:	f88d 3017 	strb.w	r3, [sp, #23]
        
        /* release HWUnit */
        Spi_axSpiHwUnitQueueArray[JobConfig->HWUnit].Status = SPI_IDLE;
    95e4:	9b03      	ldr	r3, [sp, #12]
    95e6:	7f1b      	ldrb	r3, [r3, #28]
    95e8:	4619      	mov	r1, r3
    95ea:	4b28      	ldr	r3, [pc, #160]	; (968c <Spi_SyncJobsTranfer+0x120>)
    95ec:	2201      	movs	r2, #1
    95ee:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        
        if ((Std_ReturnType)E_OK == Status)
    95f2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    95f6:	2b00      	cmp	r3, #0
    95f8:	d10a      	bne.n	9610 <Spi_SyncJobsTranfer+0xa4>
        {
            /* Job is done set the status as OK */
            JobState->Result = SPI_JOB_OK;
    95fa:	9b04      	ldr	r3, [sp, #16]
    95fc:	2200      	movs	r2, #0
    95fe:	601a      	str	r2, [r3, #0]
            /* Perform job EndNotification (if there is one) */
            if (NULL_PTR != JobConfig->EndNotification)
    9600:	9b03      	ldr	r3, [sp, #12]
    9602:	689b      	ldr	r3, [r3, #8]
    9604:	2b00      	cmp	r3, #0
    9606:	d02b      	beq.n	9660 <Spi_SyncJobsTranfer+0xf4>
            {
                JobConfig->EndNotification();
    9608:	9b03      	ldr	r3, [sp, #12]
    960a:	689b      	ldr	r3, [r3, #8]
    960c:	4798      	blx	r3
    960e:	e027      	b.n	9660 <Spi_SyncJobsTranfer+0xf4>
            /* transmission failed */
            /* set the remaining job status (including the current one) as FAILED */
            do
            {
                /* Set the job status as FAILED */
                Spi_axSpiJobState[*JobIndexList].Result = SPI_JOB_FAILED;
    9610:	9b06      	ldr	r3, [sp, #24]
    9612:	881b      	ldrh	r3, [r3, #0]
    9614:	4619      	mov	r1, r3
    9616:	4b1b      	ldr	r3, [pc, #108]	; (9684 <Spi_SyncJobsTranfer+0x118>)
    9618:	2202      	movs	r2, #2
    961a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                /* Update pointer position for JobConfig */
                JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[*JobIndexList].JobCfg;
    961e:	4a1a      	ldr	r2, [pc, #104]	; (9688 <Spi_SyncJobsTranfer+0x11c>)
    9620:	9b00      	ldr	r3, [sp, #0]
    9622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9626:	691a      	ldr	r2, [r3, #16]
    9628:	9b06      	ldr	r3, [sp, #24]
    962a:	881b      	ldrh	r3, [r3, #0]
    962c:	009b      	lsls	r3, r3, #2
    962e:	4413      	add	r3, r2
    9630:	681b      	ldr	r3, [r3, #0]
    9632:	9303      	str	r3, [sp, #12]
                /* Perform job EndNotification (if there is one) */
                if (NULL_PTR != JobConfig->EndNotification)
    9634:	9b03      	ldr	r3, [sp, #12]
    9636:	689b      	ldr	r3, [r3, #8]
    9638:	2b00      	cmp	r3, #0
    963a:	d002      	beq.n	9642 <Spi_SyncJobsTranfer+0xd6>
                {
                    JobConfig->EndNotification();
    963c:	9b03      	ldr	r3, [sp, #12]
    963e:	689b      	ldr	r3, [r3, #8]
    9640:	4798      	blx	r3
                }
                else
                {
                    /* Do nothing */
                }
                JobIndexList++;
    9642:	9b06      	ldr	r3, [sp, #24]
    9644:	3302      	adds	r3, #2
    9646:	9306      	str	r3, [sp, #24]
                JobsCount--;
    9648:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    964c:	3b01      	subs	r3, #1
    964e:	f8ad 301e 	strh.w	r3, [sp, #30]
            } while (0u < JobsCount);
    9652:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    9656:	2b00      	cmp	r3, #0
    9658:	d1da      	bne.n	9610 <Spi_SyncJobsTranfer+0xa4>
            JobsCount = 1u;  /* needed to end correctly the outer loop */
    965a:	2301      	movs	r3, #1
    965c:	f8ad 301e 	strh.w	r3, [sp, #30]
        }
        /* iterate to next job in sequence */
        JobIndexList++;
    9660:	9b06      	ldr	r3, [sp, #24]
    9662:	3302      	adds	r3, #2
    9664:	9306      	str	r3, [sp, #24]
        JobsCount--;
    9666:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    966a:	3b01      	subs	r3, #1
    966c:	f8ad 301e 	strh.w	r3, [sp, #30]
    while (0u < JobsCount)
    9670:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    9674:	2b00      	cmp	r3, #0
    9676:	d188      	bne.n	958a <Spi_SyncJobsTranfer+0x1e>
    } /* while (JobsCount > 0u) */
    return Status;
    9678:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    967c:	4618      	mov	r0, r3
    967e:	b009      	add	sp, #36	; 0x24
    9680:	f85d fb04 	ldr.w	pc, [sp], #4
    9684:	1fff8df4 	.word	0x1fff8df4
    9688:	1fff8dec 	.word	0x1fff8dec
    968c:	1fff8de4 	.word	0x1fff8de4

00009690 <Spi_InitChannelsJobsSeqsState>:
*/
static void Spi_InitChannelsJobsSeqsState
    (
        uint32 SpiCoreID      
    )
{
    9690:	b088      	sub	sp, #32
    9692:	9001      	str	r0, [sp, #4]
#endif
    const Spi_ChannelConfigType *ChannelConfig;
    const Spi_JobConfigType *JobConfig;
    const Spi_SequenceConfigType *SequenceConfig;
    
    for (Channel = 0u;
    9694:	2300      	movs	r3, #0
    9696:	9307      	str	r3, [sp, #28]
    9698:	e034      	b.n	9704 <Spi_InitChannelsJobsSeqsState+0x74>
        Channel <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxChannel);
        Channel++)
    {
        ChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[Channel].ChannelCfg;
    969a:	4a4a      	ldr	r2, [pc, #296]	; (97c4 <Spi_InitChannelsJobsSeqsState+0x134>)
    969c:	9b01      	ldr	r3, [sp, #4]
    969e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96a2:	68da      	ldr	r2, [r3, #12]
    96a4:	9b07      	ldr	r3, [sp, #28]
    96a6:	009b      	lsls	r3, r3, #2
    96a8:	4413      	add	r3, r2
    96aa:	681b      	ldr	r3, [r3, #0]
    96ac:	9302      	str	r3, [sp, #8]
        /* Check which channel has assigned for current core */
        if((NULL_PTR != ChannelConfig) && (SpiCoreID == ChannelConfig->SpiCoreUse))
    96ae:	9b02      	ldr	r3, [sp, #8]
    96b0:	2b00      	cmp	r3, #0
    96b2:	d024      	beq.n	96fe <Spi_InitChannelsJobsSeqsState+0x6e>
    96b4:	9b02      	ldr	r3, [sp, #8]
    96b6:	695b      	ldr	r3, [r3, #20]
    96b8:	9a01      	ldr	r2, [sp, #4]
    96ba:	429a      	cmp	r2, r3
    96bc:	d11f      	bne.n	96fe <Spi_InitChannelsJobsSeqsState+0x6e>
        {
            /* Check if configured buffers are External (EB) */
            if (EB == ChannelConfig->BufferType)
    96be:	9b02      	ldr	r3, [sp, #8]
    96c0:	681b      	ldr	r3, [r3, #0]
    96c2:	2b01      	cmp	r3, #1
    96c4:	d10e      	bne.n	96e4 <Spi_InitChannelsJobsSeqsState+0x54>
            {
                /* Initialize all buffers */
                ChannelConfig->BufferDescriptor->ExternalBufferTX = NULL_PTR;
    96c6:	9b02      	ldr	r3, [sp, #8]
    96c8:	691b      	ldr	r3, [r3, #16]
    96ca:	2200      	movs	r2, #0
    96cc:	601a      	str	r2, [r3, #0]
                ChannelConfig->BufferDescriptor->BufferRX = NULL_PTR;
    96ce:	9b02      	ldr	r3, [sp, #8]
    96d0:	691b      	ldr	r3, [r3, #16]
    96d2:	2200      	movs	r2, #0
    96d4:	609a      	str	r2, [r3, #8]
    
                /* Channel length is zero for unconfigured external buffers */
                Spi_axSpiChannelState[Channel].Length = (Spi_NumberOfDataType) 0;
    96d6:	4a3c      	ldr	r2, [pc, #240]	; (97c8 <Spi_InitChannelsJobsSeqsState+0x138>)
    96d8:	9b07      	ldr	r3, [sp, #28]
    96da:	009b      	lsls	r3, r3, #2
    96dc:	4413      	add	r3, r2
    96de:	2200      	movs	r2, #0
    96e0:	805a      	strh	r2, [r3, #2]
    96e2:	e007      	b.n	96f4 <Spi_InitChannelsJobsSeqsState+0x64>
            }
            else
            {
                /* Setup channel length according to configuration */
                Spi_axSpiChannelState[Channel].Length = ChannelConfig->Length;
    96e4:	9b02      	ldr	r3, [sp, #8]
    96e6:	8999      	ldrh	r1, [r3, #12]
    96e8:	4a37      	ldr	r2, [pc, #220]	; (97c8 <Spi_InitChannelsJobsSeqsState+0x138>)
    96ea:	9b07      	ldr	r3, [sp, #28]
    96ec:	009b      	lsls	r3, r3, #2
    96ee:	4413      	add	r3, r2
    96f0:	460a      	mov	r2, r1
    96f2:	805a      	strh	r2, [r3, #2]
            }
            Spi_axSpiChannelState[Channel].Flags = SPI_CHANNEL_FLAG_TX_DEFAULT_U8;
    96f4:	4a34      	ldr	r2, [pc, #208]	; (97c8 <Spi_InitChannelsJobsSeqsState+0x138>)
    96f6:	9b07      	ldr	r3, [sp, #28]
    96f8:	2101      	movs	r1, #1
    96fa:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        Channel++)
    96fe:	9b07      	ldr	r3, [sp, #28]
    9700:	3301      	adds	r3, #1
    9702:	9307      	str	r3, [sp, #28]
        Channel <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxChannel);
    9704:	4a2f      	ldr	r2, [pc, #188]	; (97c4 <Spi_InitChannelsJobsSeqsState+0x134>)
    9706:	9b01      	ldr	r3, [sp, #4]
    9708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    970c:	789b      	ldrb	r3, [r3, #2]
    970e:	461a      	mov	r2, r3
    for (Channel = 0u;
    9710:	9b07      	ldr	r3, [sp, #28]
    9712:	4293      	cmp	r3, r2
    9714:	d9c1      	bls.n	969a <Spi_InitChannelsJobsSeqsState+0xa>
        }
    }
    
    /* initialize job results */
    for (Job = 0u;
    9716:	2300      	movs	r3, #0
    9718:	9306      	str	r3, [sp, #24]
    971a:	e019      	b.n	9750 <Spi_InitChannelsJobsSeqsState+0xc0>
        Job <= (uint32)( Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxJob);
        Job++)
    {
        JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    971c:	4a29      	ldr	r2, [pc, #164]	; (97c4 <Spi_InitChannelsJobsSeqsState+0x134>)
    971e:	9b01      	ldr	r3, [sp, #4]
    9720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9724:	691a      	ldr	r2, [r3, #16]
    9726:	9b06      	ldr	r3, [sp, #24]
    9728:	009b      	lsls	r3, r3, #2
    972a:	4413      	add	r3, r2
    972c:	681b      	ldr	r3, [r3, #0]
    972e:	9303      	str	r3, [sp, #12]
        if((NULL_PTR != JobConfig) && (SpiCoreID == JobConfig->SpiCoreUse))
    9730:	9b03      	ldr	r3, [sp, #12]
    9732:	2b00      	cmp	r3, #0
    9734:	d009      	beq.n	974a <Spi_InitChannelsJobsSeqsState+0xba>
    9736:	9b03      	ldr	r3, [sp, #12]
    9738:	695b      	ldr	r3, [r3, #20]
    973a:	9a01      	ldr	r2, [sp, #4]
    973c:	429a      	cmp	r2, r3
    973e:	d104      	bne.n	974a <Spi_InitChannelsJobsSeqsState+0xba>
        {
            Spi_axSpiJobState[Job].Result = SPI_JOB_OK;
    9740:	4a22      	ldr	r2, [pc, #136]	; (97cc <Spi_InitChannelsJobsSeqsState+0x13c>)
    9742:	9b06      	ldr	r3, [sp, #24]
    9744:	2100      	movs	r1, #0
    9746:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        Job++)
    974a:	9b06      	ldr	r3, [sp, #24]
    974c:	3301      	adds	r3, #1
    974e:	9306      	str	r3, [sp, #24]
        Job <= (uint32)( Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxJob);
    9750:	4a1c      	ldr	r2, [pc, #112]	; (97c4 <Spi_InitChannelsJobsSeqsState+0x134>)
    9752:	9b01      	ldr	r3, [sp, #4]
    9754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9758:	889b      	ldrh	r3, [r3, #4]
    975a:	461a      	mov	r2, r3
    for (Job = 0u;
    975c:	9b06      	ldr	r3, [sp, #24]
    975e:	4293      	cmp	r3, r2
    9760:	d9dc      	bls.n	971c <Spi_InitChannelsJobsSeqsState+0x8c>
            Spi_axSpiJobState[Job].AsyncCrtSequenceState = NULL_PTR;
        #endif
        }
    }
    
    for (Sequence = 0u;
    9762:	2300      	movs	r3, #0
    9764:	9305      	str	r3, [sp, #20]
    9766:	e01f      	b.n	97a8 <Spi_InitChannelsJobsSeqsState+0x118>
        Sequence <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxSequence);
        Sequence++)
    {
        SequenceConfig = Spi_apxSpiConfigPtr[SpiCoreID]->SequenceConfig[Sequence].SeqConfig;
    9768:	4a16      	ldr	r2, [pc, #88]	; (97c4 <Spi_InitChannelsJobsSeqsState+0x134>)
    976a:	9b01      	ldr	r3, [sp, #4]
    976c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9770:	695a      	ldr	r2, [r3, #20]
    9772:	9b05      	ldr	r3, [sp, #20]
    9774:	009b      	lsls	r3, r3, #2
    9776:	4413      	add	r3, r2
    9778:	681b      	ldr	r3, [r3, #0]
    977a:	9304      	str	r3, [sp, #16]
        if ((NULL_PTR != SequenceConfig) && (SpiCoreID == SequenceConfig->SpiCoreUse))
    977c:	9b04      	ldr	r3, [sp, #16]
    977e:	2b00      	cmp	r3, #0
    9780:	d00f      	beq.n	97a2 <Spi_InitChannelsJobsSeqsState+0x112>
    9782:	9b04      	ldr	r3, [sp, #16]
    9784:	685b      	ldr	r3, [r3, #4]
    9786:	9a01      	ldr	r2, [sp, #4]
    9788:	429a      	cmp	r2, r3
    978a:	d10a      	bne.n	97a2 <Spi_InitChannelsJobsSeqsState+0x112>
            SequenceConfig = Spi_apxSpiConfigPtr[SpiCoreID]->SequenceConfig[Sequence].SeqConfig;
            Spi_axSpiSequenceState[Sequence].Sequence = SequenceConfig;
            #endif
    
            /* initialize sequence results */
            Spi_axSpiSequenceState[Sequence].Result = SPI_SEQ_OK;
    978c:	4a10      	ldr	r2, [pc, #64]	; (97d0 <Spi_InitChannelsJobsSeqsState+0x140>)
    978e:	9b05      	ldr	r3, [sp, #20]
    9790:	2100      	movs	r1, #0
    9792:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* SPI135: Spi_SyncTransmit() must fail if an other sync transmission
                    is ongoing.*/
            /* mark all HW units as used by the sync transmission, in order to
                force the mutual exclusion of Spi_SyncTransmit() calls */
    
            Spi_au32SpiSeqUsedHWUnits[Sequence] = 0xFFFFFFFFU;
    9796:	4a0f      	ldr	r2, [pc, #60]	; (97d4 <Spi_InitChannelsJobsSeqsState+0x144>)
    9798:	9b05      	ldr	r3, [sp, #20]
    979a:	f04f 31ff 	mov.w	r1, #4294967295
    979e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        Sequence++)
    97a2:	9b05      	ldr	r3, [sp, #20]
    97a4:	3301      	adds	r3, #1
    97a6:	9305      	str	r3, [sp, #20]
        Sequence <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxSequence);
    97a8:	4a06      	ldr	r2, [pc, #24]	; (97c4 <Spi_InitChannelsJobsSeqsState+0x134>)
    97aa:	9b01      	ldr	r3, [sp, #4]
    97ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97b0:	799b      	ldrb	r3, [r3, #6]
    97b2:	461a      	mov	r2, r3
    for (Sequence = 0u;
    97b4:	9b05      	ldr	r3, [sp, #20]
    97b6:	4293      	cmp	r3, r2
    97b8:	d9d6      	bls.n	9768 <Spi_InitChannelsJobsSeqsState+0xd8>
        else
        {
            /* Do nothing */
        }
    }
}
    97ba:	bf00      	nop
    97bc:	bf00      	nop
    97be:	b008      	add	sp, #32
    97c0:	4770      	bx	lr
    97c2:	bf00      	nop
    97c4:	1fff8dec 	.word	0x1fff8dec
    97c8:	1fff8df8 	.word	0x1fff8df8
    97cc:	1fff8df4 	.word	0x1fff8df4
    97d0:	1fff8df0 	.word	0x1fff8df0
    97d4:	1fff8e00 	.word	0x1fff8e00

000097d8 <Spi_GetStatusAsyncCheckHwBusy>:
*/
static Spi_StatusType Spi_GetStatusAsyncCheckHwBusy
    (
        uint32 SpiCoreID
    )
{
    97d8:	b084      	sub	sp, #16
    97da:	9001      	str	r0, [sp, #4]
    Spi_StatusType StatusFlag = SPI_IDLE;
    97dc:	2301      	movs	r3, #1
    97de:	9303      	str	r3, [sp, #12]
    Spi_HWUnitType HWUnit;
    
    for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    97e0:	2300      	movs	r3, #0
    97e2:	f88d 300b 	strb.w	r3, [sp, #11]
    97e6:	e028      	b.n	983a <Spi_GetStatusAsyncCheckHwBusy+0x62>
    {
        if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    97e8:	4a18      	ldr	r2, [pc, #96]	; (984c <Spi_GetStatusAsyncCheckHwBusy+0x74>)
    97ea:	9b01      	ldr	r3, [sp, #4]
    97ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97f0:	69da      	ldr	r2, [r3, #28]
    97f2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    97f6:	009b      	lsls	r3, r3, #2
    97f8:	4413      	add	r3, r2
    97fa:	681b      	ldr	r3, [r3, #0]
    97fc:	2b00      	cmp	r3, #0
    97fe:	d017      	beq.n	9830 <Spi_GetStatusAsyncCheckHwBusy+0x58>
            (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    9800:	4a12      	ldr	r2, [pc, #72]	; (984c <Spi_GetStatusAsyncCheckHwBusy+0x74>)
    9802:	9b01      	ldr	r3, [sp, #4]
    9804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9808:	69da      	ldr	r2, [r3, #28]
    980a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    980e:	009b      	lsls	r3, r3, #2
    9810:	4413      	add	r3, r2
    9812:	681b      	ldr	r3, [r3, #0]
    9814:	689b      	ldr	r3, [r3, #8]
        if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    9816:	9a01      	ldr	r2, [sp, #4]
    9818:	429a      	cmp	r2, r3
    981a:	d109      	bne.n	9830 <Spi_GetStatusAsyncCheckHwBusy+0x58>
           )
        {
            if (SPI_BUSY == Spi_axSpiHwUnitQueueArray[HWUnit].Status)
    981c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9820:	4a0b      	ldr	r2, [pc, #44]	; (9850 <Spi_GetStatusAsyncCheckHwBusy+0x78>)
    9822:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    9826:	2b02      	cmp	r3, #2
    9828:	d102      	bne.n	9830 <Spi_GetStatusAsyncCheckHwBusy+0x58>
            {
                StatusFlag = SPI_BUSY;
    982a:	2302      	movs	r3, #2
    982c:	9303      	str	r3, [sp, #12]
                break;
    982e:	e008      	b.n	9842 <Spi_GetStatusAsyncCheckHwBusy+0x6a>
    for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9830:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9834:	3301      	adds	r3, #1
    9836:	f88d 300b 	strb.w	r3, [sp, #11]
    983a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    983e:	2b00      	cmp	r3, #0
    9840:	d0d2      	beq.n	97e8 <Spi_GetStatusAsyncCheckHwBusy+0x10>
        else
        {
            /* Do nothing */
        }
    }
    return StatusFlag;
    9842:	9b03      	ldr	r3, [sp, #12]
}
    9844:	4618      	mov	r0, r3
    9846:	b004      	add	sp, #16
    9848:	4770      	bx	lr
    984a:	bf00      	nop
    984c:	1fff8dec 	.word	0x1fff8dec
    9850:	1fff8de4 	.word	0x1fff8de4

00009854 <Spi_GetVersionInfo>:
/** @implements Spi_GetVersionInfo_Activity */
void Spi_GetVersionInfo 
    (
        Std_VersionInfoType *versioninfo
    )
{
    9854:	b082      	sub	sp, #8
    9856:	9001      	str	r0, [sp, #4]
        (void)Det_ReportError((uint16)SPI_MODULE_ID,(uint8)0,SPI_GETVERSIONINFO_ID,SPI_E_PARAM_POINTER);
    }
    else
    {
#endif /* SPI_DEV_ERROR_DETECT == STD_ON */
    versioninfo->vendorID = (uint16)SPI_VENDOR_ID;
    9858:	9b01      	ldr	r3, [sp, #4]
    985a:	222b      	movs	r2, #43	; 0x2b
    985c:	801a      	strh	r2, [r3, #0]
    versioninfo->moduleID = (uint8)SPI_MODULE_ID;
    985e:	9b01      	ldr	r3, [sp, #4]
    9860:	2253      	movs	r2, #83	; 0x53
    9862:	805a      	strh	r2, [r3, #2]
    versioninfo->sw_major_version = (uint8)SPI_SW_MAJOR_VERSION;
    9864:	9b01      	ldr	r3, [sp, #4]
    9866:	2202      	movs	r2, #2
    9868:	711a      	strb	r2, [r3, #4]
    versioninfo->sw_minor_version = (uint8)SPI_SW_MINOR_VERSION;
    986a:	9b01      	ldr	r3, [sp, #4]
    986c:	2200      	movs	r2, #0
    986e:	715a      	strb	r2, [r3, #5]
    versioninfo->sw_patch_version = (uint8)SPI_SW_PATCH_VERSION;
    9870:	9b01      	ldr	r3, [sp, #4]
    9872:	2200      	movs	r2, #0
    9874:	719a      	strb	r2, [r3, #6]
#if(SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif /* SPI_DEV_ERROR_DETECT == STD_ON */
}
    9876:	bf00      	nop
    9878:	b002      	add	sp, #8
    987a:	4770      	bx	lr

0000987c <Spi_Init>:
/** @implements Spi_Init_Activity */
void Spi_Init
    (
        const Spi_ConfigType *ConfigPtr
    )
{
    987c:	b500      	push	{lr}
    987e:	b085      	sub	sp, #20
    9880:	9001      	str	r0, [sp, #4]
    Spi_HWUnitType HWUnit;
    uint32 SpiCoreID;
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    9882:	2300      	movs	r3, #0
    9884:	f88d 300e 	strb.w	r3, [sp, #14]

    SpiCoreID = Spi_GetCoreID;
    9888:	2300      	movs	r3, #0
    988a:	9302      	str	r3, [sp, #8]
    CheckStatus = Spi_InitCheckDemError(SpiCoreID, ConfigPtr);
    if ((Std_ReturnType)E_OK == CheckStatus) 
    {
#endif /*(SPI_DEV_ERROR_DETECT == STD_ON)*/

    CheckStatus = Spi_CheckInit(ConfigPtr, SpiCoreID);
    988c:	9902      	ldr	r1, [sp, #8]
    988e:	9801      	ldr	r0, [sp, #4]
    9890:	f7ff fe44 	bl	951c <Spi_CheckInit>
    9894:	4603      	mov	r3, r0
    9896:	f88d 300e 	strb.w	r3, [sp, #14]

    if((Std_ReturnType)E_OK == CheckStatus )
    989a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    989e:	2b00      	cmp	r3, #0
    98a0:	d144      	bne.n	992c <Spi_Init+0xb0>
    {
    #if (SPI_PRECOMPILE_SUPPORT == STD_OFF)
        Spi_apxSpiConfigPtr[SpiCoreID] = ConfigPtr;
    98a2:	4924      	ldr	r1, [pc, #144]	; (9934 <Spi_Init+0xb8>)
    98a4:	9b02      	ldr	r3, [sp, #8]
    98a6:	9a01      	ldr	r2, [sp, #4]
    98a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    #else /* (SPI_CONFIG_VARIANT == SPI_VARIANT_PRECOMPILE) */
        Spi_apxSpiConfigPtr[SpiCoreID] = Spi_PBCfgVariantPredefined[SpiCoreID];
    #endif /* (SPI_PRECOMPILE_SUPPORT == STD_OFF) */
    /* Initiate Channels, Jobs, Sequences state */
    Spi_InitChannelsJobsSeqsState(SpiCoreID);
    98ac:	9802      	ldr	r0, [sp, #8]
    98ae:	f7ff feef 	bl	9690 <Spi_InitChannelsJobsSeqsState>
        
        /* initialize all physical HWUnits */
        for (HWUnit = (Spi_HWUnitType) 0;
    98b2:	2300      	movs	r3, #0
    98b4:	f88d 300f 	strb.w	r3, [sp, #15]
    98b8:	e034      	b.n	9924 <Spi_Init+0xa8>
            HWUnit < (Spi_HWUnitType) SPI_MAX_HWUNIT;
            HWUnit++)
        {
            if((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    98ba:	4a1e      	ldr	r2, [pc, #120]	; (9934 <Spi_Init+0xb8>)
    98bc:	9b02      	ldr	r3, [sp, #8]
    98be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98c2:	69da      	ldr	r2, [r3, #28]
    98c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    98c8:	009b      	lsls	r3, r3, #2
    98ca:	4413      	add	r3, r2
    98cc:	681b      	ldr	r3, [r3, #0]
    98ce:	2b00      	cmp	r3, #0
    98d0:	d023      	beq.n	991a <Spi_Init+0x9e>
               (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    98d2:	4a18      	ldr	r2, [pc, #96]	; (9934 <Spi_Init+0xb8>)
    98d4:	9b02      	ldr	r3, [sp, #8]
    98d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98da:	69da      	ldr	r2, [r3, #28]
    98dc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    98e0:	009b      	lsls	r3, r3, #2
    98e2:	4413      	add	r3, r2
    98e4:	681b      	ldr	r3, [r3, #0]
    98e6:	689b      	ldr	r3, [r3, #8]
            if((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    98e8:	9a02      	ldr	r2, [sp, #8]
    98ea:	429a      	cmp	r2, r3
    98ec:	d115      	bne.n	991a <Spi_Init+0x9e>
              )
            {
                Spi_Ipw_Init(HWUnit, Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig);
    98ee:	4a11      	ldr	r2, [pc, #68]	; (9934 <Spi_Init+0xb8>)
    98f0:	9b02      	ldr	r3, [sp, #8]
    98f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98f6:	69da      	ldr	r2, [r3, #28]
    98f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    98fc:	009b      	lsls	r3, r3, #2
    98fe:	4413      	add	r3, r2
    9900:	681a      	ldr	r2, [r3, #0]
    9902:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9906:	4611      	mov	r1, r2
    9908:	4618      	mov	r0, r3
    990a:	f000 fa8c 	bl	9e26 <Spi_Ipw_Init>

#if ((SPI_LEVEL_DELIVERED == SPI_LEVEL1) || (SPI_LEVEL_DELIVERED == SPI_LEVEL2))
                /* initialize the Job lists => no scheduled job for the unit */
                Spi_InitJobsList(HWUnit);
#endif
                Spi_axSpiHwUnitQueueArray[HWUnit].Status = SPI_IDLE;
    990e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9912:	4a09      	ldr	r2, [pc, #36]	; (9938 <Spi_Init+0xbc>)
    9914:	2101      	movs	r1, #1
    9916:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
            HWUnit++)
    991a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    991e:	3301      	adds	r3, #1
    9920:	f88d 300f 	strb.w	r3, [sp, #15]
        for (HWUnit = (Spi_HWUnitType) 0;
    9924:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9928:	2b00      	cmp	r3, #0
    992a:	d0c6      	beq.n	98ba <Spi_Init+0x3e>
    }

#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif /*(SPI_DEV_ERROR_DETECT == STD_ON)*/
}
    992c:	bf00      	nop
    992e:	b005      	add	sp, #20
    9930:	f85d fb04 	ldr.w	pc, [sp], #4
    9934:	1fff8dec 	.word	0x1fff8dec
    9938:	1fff8de4 	.word	0x1fff8de4

0000993c <Spi_DeInit>:
*       if SPI_DEV_ERROR_DETECT is STD_ON.
*
* @implements Spi_DeInit_Activity
*/
Std_ReturnType Spi_DeInit(void)
{
    993c:	b500      	push	{lr}
    993e:	b083      	sub	sp, #12
    Std_ReturnType TempExit = (Std_ReturnType)E_OK;
    9940:	2300      	movs	r3, #0
    9942:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_HWUnitType HWUnit;
    uint32 SpiCoreID;

    SpiCoreID = Spi_GetCoreID;
    9946:	2300      	movs	r3, #0
    9948:	9300      	str	r3, [sp, #0]
    }
    else
    {
#endif
        /* Check if Spi Status is Busy */
        if (SPI_BUSY == Spi_GetStatus())
    994a:	f000 f8b1 	bl	9ab0 <Spi_GetStatus>
    994e:	4603      	mov	r3, r0
    9950:	2b02      	cmp	r3, #2
    9952:	d103      	bne.n	995c <Spi_DeInit+0x20>
        {
            TempExit = E_NOT_OK;
    9954:	2301      	movs	r3, #1
    9956:	f88d 3007 	strb.w	r3, [sp, #7]
    995a:	e037      	b.n	99cc <Spi_DeInit+0x90>
        }
        else
        {
            /* De-initialize all physical HWUnits */
            for (HWUnit = (Spi_HWUnitType) 0;
    995c:	2300      	movs	r3, #0
    995e:	f88d 3006 	strb.w	r3, [sp, #6]
    9962:	e02a      	b.n	99ba <Spi_DeInit+0x7e>
                 HWUnit < (Spi_HWUnitType) SPI_MAX_HWUNIT;
                 HWUnit++)
            {
                if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    9964:	4a1c      	ldr	r2, [pc, #112]	; (99d8 <Spi_DeInit+0x9c>)
    9966:	9b00      	ldr	r3, [sp, #0]
    9968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    996c:	69da      	ldr	r2, [r3, #28]
    996e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9972:	009b      	lsls	r3, r3, #2
    9974:	4413      	add	r3, r2
    9976:	681b      	ldr	r3, [r3, #0]
    9978:	2b00      	cmp	r3, #0
    997a:	d019      	beq.n	99b0 <Spi_DeInit+0x74>
                    (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    997c:	4a16      	ldr	r2, [pc, #88]	; (99d8 <Spi_DeInit+0x9c>)
    997e:	9b00      	ldr	r3, [sp, #0]
    9980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9984:	69da      	ldr	r2, [r3, #28]
    9986:	f89d 3006 	ldrb.w	r3, [sp, #6]
    998a:	009b      	lsls	r3, r3, #2
    998c:	4413      	add	r3, r2
    998e:	681b      	ldr	r3, [r3, #0]
    9990:	689b      	ldr	r3, [r3, #8]
                if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    9992:	9a00      	ldr	r2, [sp, #0]
    9994:	429a      	cmp	r2, r3
    9996:	d10b      	bne.n	99b0 <Spi_DeInit+0x74>
                   )
                {
                    Spi_Ipw_DeInit(HWUnit, SpiCoreID);
    9998:	f89d 3006 	ldrb.w	r3, [sp, #6]
    999c:	9900      	ldr	r1, [sp, #0]
    999e:	4618      	mov	r0, r3
    99a0:	f000 fa54 	bl	9e4c <Spi_Ipw_DeInit>
    
                    Spi_axSpiHwUnitQueueArray[HWUnit].Status = SPI_UNINIT;
    99a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    99a8:	4a0c      	ldr	r2, [pc, #48]	; (99dc <Spi_DeInit+0xa0>)
    99aa:	2100      	movs	r1, #0
    99ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
                 HWUnit++)
    99b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    99b4:	3301      	adds	r3, #1
    99b6:	f88d 3006 	strb.w	r3, [sp, #6]
            for (HWUnit = (Spi_HWUnitType) 0;
    99ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
    99be:	2b00      	cmp	r3, #0
    99c0:	d0d0      	beq.n	9964 <Spi_DeInit+0x28>
                {
                    /* Do nothing */
                }
            }
            /* Reset configuration pointer */
            Spi_apxSpiConfigPtr[SpiCoreID] = NULL_PTR;
    99c2:	4a05      	ldr	r2, [pc, #20]	; (99d8 <Spi_DeInit+0x9c>)
    99c4:	9b00      	ldr	r3, [sp, #0]
    99c6:	2100      	movs	r1, #0
    99c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif

    return TempExit;
    99cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
}
    99d0:	4618      	mov	r0, r3
    99d2:	b003      	add	sp, #12
    99d4:	f85d fb04 	ldr.w	pc, [sp], #4
    99d8:	1fff8dec 	.word	0x1fff8dec
    99dc:	1fff8de4 	.word	0x1fff8de4

000099e0 <Spi_SetupEB>:
        Spi_ChannelType Channel,
        const Spi_DataBufferType  *SrcDataBufferPtr,
        Spi_DataBufferType *DesDataBufferPtr,
        Spi_NumberOfDataType Length
    )
{
    99e0:	b500      	push	{lr}
    99e2:	b089      	sub	sp, #36	; 0x24
    99e4:	9102      	str	r1, [sp, #8]
    99e6:	9201      	str	r2, [sp, #4]
    99e8:	461a      	mov	r2, r3
    99ea:	4603      	mov	r3, r0
    99ec:	f88d 300f 	strb.w	r3, [sp, #15]
    99f0:	4613      	mov	r3, r2
    99f2:	f8ad 300c 	strh.w	r3, [sp, #12]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    99f6:	2300      	movs	r3, #0
    99f8:	f88d 301f 	strb.w	r3, [sp, #31]
    Spi_ChannelStateType *ChannelState;
    const Spi_ChannelConfigType *ChannelConfig;
    uint32 SpiCoreID;

    /* get current coreID */
    SpiCoreID = Spi_GetCoreID;
    99fc:	2300      	movs	r3, #0
    99fe:	9306      	str	r3, [sp, #24]
        Status = (Std_ReturnType)E_NOT_OK;
    }
    else
    {
#endif
        ChannelState = &Spi_axSpiChannelState[Channel];
    9a00:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9a04:	009b      	lsls	r3, r3, #2
    9a06:	4a28      	ldr	r2, [pc, #160]	; (9aa8 <Spi_SetupEB+0xc8>)
    9a08:	4413      	add	r3, r2
    9a0a:	9305      	str	r3, [sp, #20]
        ChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[Channel].ChannelCfg;
    9a0c:	4a27      	ldr	r2, [pc, #156]	; (9aac <Spi_SetupEB+0xcc>)
    9a0e:	9b06      	ldr	r3, [sp, #24]
    9a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a14:	68da      	ldr	r2, [r3, #12]
    9a16:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9a1a:	009b      	lsls	r3, r3, #2
    9a1c:	4413      	add	r3, r2
    9a1e:	681b      	ldr	r3, [r3, #0]
    9a20:	9304      	str	r3, [sp, #16]
        /* exit early if this is the wrong buffer type */
        if (IB == ChannelConfig->BufferType)
    9a22:	9b04      	ldr	r3, [sp, #16]
    9a24:	681b      	ldr	r3, [r3, #0]
    9a26:	2b00      	cmp	r3, #0
    9a28:	d103      	bne.n	9a32 <Spi_SetupEB+0x52>
        {
            /* Call Det_ReportError */
#if (SPI_DEV_ERROR_DETECT == STD_ON)
            (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_SETUPEB_ID,SPI_E_PARAM_CHANNEL);
#endif
            Status = (Std_ReturnType)E_NOT_OK;
    9a2a:	2301      	movs	r3, #1
    9a2c:	f88d 301f 	strb.w	r3, [sp, #31]
    9a30:	e033      	b.n	9a9a <Spi_SetupEB+0xba>
            /* Length and Framesize - aren't compatible */
            /* If 8 < Framesize =< 16: Length must be divisible by 2 */
            /* If 16 < Framesize =< 32: Length must be divisible by 4 */
            Status = Spi_SetupEbCheckLength(ChannelConfig, Length);
#endif
            SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05();
    9a32:	f00c fbb3 	bl	1619c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05>
            /* save the new parameters */
            ChannelConfig->BufferDescriptor->ExternalBufferTX = SrcDataBufferPtr;
    9a36:	9b04      	ldr	r3, [sp, #16]
    9a38:	691b      	ldr	r3, [r3, #16]
    9a3a:	9a02      	ldr	r2, [sp, #8]
    9a3c:	601a      	str	r2, [r3, #0]
            ChannelConfig->BufferDescriptor->BufferRX = DesDataBufferPtr;
    9a3e:	9b04      	ldr	r3, [sp, #16]
    9a40:	691b      	ldr	r3, [r3, #16]
    9a42:	9a01      	ldr	r2, [sp, #4]
    9a44:	609a      	str	r2, [r3, #8]

            ChannelState->Length = Length;
    9a46:	9b05      	ldr	r3, [sp, #20]
    9a48:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9a4c:	805a      	strh	r2, [r3, #2]

            /* if source data pointer is zero, transmit default value */
            if (NULL_PTR == SrcDataBufferPtr)
    9a4e:	9b02      	ldr	r3, [sp, #8]
    9a50:	2b00      	cmp	r3, #0
    9a52:	d107      	bne.n	9a64 <Spi_SetupEB+0x84>
            {
                ChannelState->Flags |= SPI_CHANNEL_FLAG_TX_DEFAULT_U8;
    9a54:	9b05      	ldr	r3, [sp, #20]
    9a56:	781b      	ldrb	r3, [r3, #0]
    9a58:	f043 0301 	orr.w	r3, r3, #1
    9a5c:	b2da      	uxtb	r2, r3
    9a5e:	9b05      	ldr	r3, [sp, #20]
    9a60:	701a      	strb	r2, [r3, #0]
    9a62:	e006      	b.n	9a72 <Spi_SetupEB+0x92>
            }
            else
            {
                ChannelState->Flags &= (uint8) (~SPI_CHANNEL_FLAG_TX_DEFAULT_U8);
    9a64:	9b05      	ldr	r3, [sp, #20]
    9a66:	781b      	ldrb	r3, [r3, #0]
    9a68:	f023 0301 	bic.w	r3, r3, #1
    9a6c:	b2da      	uxtb	r2, r3
    9a6e:	9b05      	ldr	r3, [sp, #20]
    9a70:	701a      	strb	r2, [r3, #0]
            }

            /* if destination data pointer is zero, discard receiving data */
            if (NULL_PTR == DesDataBufferPtr)
    9a72:	9b01      	ldr	r3, [sp, #4]
    9a74:	2b00      	cmp	r3, #0
    9a76:	d107      	bne.n	9a88 <Spi_SetupEB+0xa8>
            {
                ChannelState->Flags |= SPI_CHANNEL_FLAG_RX_DISCARD_U8;
    9a78:	9b05      	ldr	r3, [sp, #20]
    9a7a:	781b      	ldrb	r3, [r3, #0]
    9a7c:	f043 0302 	orr.w	r3, r3, #2
    9a80:	b2da      	uxtb	r2, r3
    9a82:	9b05      	ldr	r3, [sp, #20]
    9a84:	701a      	strb	r2, [r3, #0]
    9a86:	e006      	b.n	9a96 <Spi_SetupEB+0xb6>
            }
            else
            {
                ChannelState->Flags &= (uint8) (~SPI_CHANNEL_FLAG_RX_DISCARD_U8);
    9a88:	9b05      	ldr	r3, [sp, #20]
    9a8a:	781b      	ldrb	r3, [r3, #0]
    9a8c:	f023 0302 	bic.w	r3, r3, #2
    9a90:	b2da      	uxtb	r2, r3
    9a92:	9b05      	ldr	r3, [sp, #20]
    9a94:	701a      	strb	r2, [r3, #0]
            }
            SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05();
    9a96:	f00c fbad 	bl	161f4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05>
        }
#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif

    return Status;
    9a9a:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    9a9e:	4618      	mov	r0, r3
    9aa0:	b009      	add	sp, #36	; 0x24
    9aa2:	f85d fb04 	ldr.w	pc, [sp], #4
    9aa6:	bf00      	nop
    9aa8:	1fff8df8 	.word	0x1fff8df8
    9aac:	1fff8dec 	.word	0x1fff8dec

00009ab0 <Spi_GetStatus>:
*       if SPI_DEV_ERROR_DETECT is STD_ON.
*
* @implements Spi_GetStatus_Activity
*/
Spi_StatusType Spi_GetStatus(void)
{
    9ab0:	b500      	push	{lr}
    9ab2:	b085      	sub	sp, #20
    Spi_StatusType StatusFlag = SPI_IDLE;
    9ab4:	2301      	movs	r3, #1
    9ab6:	9303      	str	r3, [sp, #12]
    Spi_HWUnitType HWUnit;
    uint32 SpiCoreID;
    
    /* Get current coreID */
    SpiCoreID = Spi_GetCoreID;
    9ab8:	2300      	movs	r3, #0
    9aba:	9301      	str	r3, [sp, #4]

    if (NULL_PTR == Spi_apxSpiConfigPtr[SpiCoreID])
    9abc:	4a22      	ldr	r2, [pc, #136]	; (9b48 <Spi_GetStatus+0x98>)
    9abe:	9b01      	ldr	r3, [sp, #4]
    9ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ac4:	2b00      	cmp	r3, #0
    9ac6:	d102      	bne.n	9ace <Spi_GetStatus+0x1e>
        /* If Development Error Detection is enabled, report error if not */
        /* initialized */
        /* Call Det_ReportError */
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_GETSTATUS_ID,SPI_E_UNINIT);
#endif
        StatusFlag = SPI_UNINIT;
    9ac8:	2300      	movs	r3, #0
    9aca:	9303      	str	r3, [sp, #12]
    9acc:	e037      	b.n	9b3e <Spi_GetStatus+0x8e>
    }
    else
    {
        /* The SPI Handler Driver software module shall be busy when any
           HWUnit is busy */
        for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9ace:	2300      	movs	r3, #0
    9ad0:	f88d 300b 	strb.w	r3, [sp, #11]
    9ad4:	e028      	b.n	9b28 <Spi_GetStatus+0x78>
        {
            if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    9ad6:	4a1c      	ldr	r2, [pc, #112]	; (9b48 <Spi_GetStatus+0x98>)
    9ad8:	9b01      	ldr	r3, [sp, #4]
    9ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ade:	69da      	ldr	r2, [r3, #28]
    9ae0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9ae4:	009b      	lsls	r3, r3, #2
    9ae6:	4413      	add	r3, r2
    9ae8:	681b      	ldr	r3, [r3, #0]
    9aea:	2b00      	cmp	r3, #0
    9aec:	d017      	beq.n	9b1e <Spi_GetStatus+0x6e>
                (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    9aee:	4a16      	ldr	r2, [pc, #88]	; (9b48 <Spi_GetStatus+0x98>)
    9af0:	9b01      	ldr	r3, [sp, #4]
    9af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9af6:	69da      	ldr	r2, [r3, #28]
    9af8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9afc:	009b      	lsls	r3, r3, #2
    9afe:	4413      	add	r3, r2
    9b00:	681b      	ldr	r3, [r3, #0]
    9b02:	689b      	ldr	r3, [r3, #8]
            if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    9b04:	9a01      	ldr	r2, [sp, #4]
    9b06:	429a      	cmp	r2, r3
    9b08:	d109      	bne.n	9b1e <Spi_GetStatus+0x6e>
               )
            {
                if (1u == Spi_au32SpiBusySyncHWUnitsStatus[HWUnit])
    9b0a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9b0e:	4a0f      	ldr	r2, [pc, #60]	; (9b4c <Spi_GetStatus+0x9c>)
    9b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b14:	2b01      	cmp	r3, #1
    9b16:	d102      	bne.n	9b1e <Spi_GetStatus+0x6e>
                {
                    StatusFlag = SPI_BUSY;
    9b18:	2302      	movs	r3, #2
    9b1a:	9303      	str	r3, [sp, #12]
                    break;
    9b1c:	e008      	b.n	9b30 <Spi_GetStatus+0x80>
        for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9b1e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9b22:	3301      	adds	r3, #1
    9b24:	f88d 300b 	strb.w	r3, [sp, #11]
    9b28:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9b2c:	2b00      	cmp	r3, #0
    9b2e:	d0d2      	beq.n	9ad6 <Spi_GetStatus+0x26>
            {
                /* Do nothing */
            }
        }
        /* check for busy HWUnit in async transmissions */
        if (SPI_BUSY != StatusFlag)
    9b30:	9b03      	ldr	r3, [sp, #12]
    9b32:	2b02      	cmp	r3, #2
    9b34:	d003      	beq.n	9b3e <Spi_GetStatus+0x8e>
        {
            /* Note: Checking for IsSync attribute for HWUnit is not really needed
                 It is preferable to skip this check in order to have a more compact code
            */
            StatusFlag = Spi_GetStatusAsyncCheckHwBusy(SpiCoreID);
    9b36:	9801      	ldr	r0, [sp, #4]
    9b38:	f7ff fe4e 	bl	97d8 <Spi_GetStatusAsyncCheckHwBusy>
    9b3c:	9003      	str	r0, [sp, #12]
        else
        {
            /* Do notthing */
        }
    }
    return StatusFlag;
    9b3e:	9b03      	ldr	r3, [sp, #12]
}
    9b40:	4618      	mov	r0, r3
    9b42:	b005      	add	sp, #20
    9b44:	f85d fb04 	ldr.w	pc, [sp], #4
    9b48:	1fff8dec 	.word	0x1fff8dec
    9b4c:	1fff8e04 	.word	0x1fff8e04

00009b50 <Spi_GetJobResult>:
/** @implements Spi_GetJobResult_Activity */
Spi_JobResultType Spi_GetJobResult
    (
        Spi_JobType Job
    )
{
    9b50:	b084      	sub	sp, #16
    9b52:	4603      	mov	r3, r0
    9b54:	f8ad 3006 	strh.w	r3, [sp, #6]
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_GETJOBRESULT_ID,SPI_E_PARAM_CONFIG);
    }
    else
    {
#endif
        JobResult = Spi_axSpiJobState[Job].Result;
    9b58:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9b5c:	4a03      	ldr	r2, [pc, #12]	; (9b6c <Spi_GetJobResult+0x1c>)
    9b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b62:	9303      	str	r3, [sp, #12]
#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif

    return JobResult;
    9b64:	9b03      	ldr	r3, [sp, #12]
}
    9b66:	4618      	mov	r0, r3
    9b68:	b004      	add	sp, #16
    9b6a:	4770      	bx	lr
    9b6c:	1fff8df4 	.word	0x1fff8df4

00009b70 <Spi_GetSequenceResult>:
/** @implements Spi_GetSequenceResult_Activity */
Spi_SeqResultType Spi_GetSequenceResult
    (
        Spi_SequenceType Sequence
    )
{
    9b70:	b084      	sub	sp, #16
    9b72:	4603      	mov	r3, r0
    9b74:	f88d 3007 	strb.w	r3, [sp, #7]
            (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_GETSEQUENCERESULT_ID,SPI_E_PARAM_CONFIG);
        }
        else
        {
#endif
           SequenceResult = Spi_axSpiSequenceState[Sequence].Result;
    9b78:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9b7c:	4a03      	ldr	r2, [pc, #12]	; (9b8c <Spi_GetSequenceResult+0x1c>)
    9b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b82:	9303      	str	r3, [sp, #12]
#if (SPI_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif

    return SequenceResult;
    9b84:	9b03      	ldr	r3, [sp, #12]
}
    9b86:	4618      	mov	r0, r3
    9b88:	b004      	add	sp, #16
    9b8a:	4770      	bx	lr
    9b8c:	1fff8df0 	.word	0x1fff8df0

00009b90 <Spi_SyncTransmit>:
/** @implements Spi_SyncTransmit_Activity */
Std_ReturnType Spi_SyncTransmit
    (
        Spi_SequenceType Sequence
    )
{
    9b90:	b500      	push	{lr}
    9b92:	b08b      	sub	sp, #44	; 0x2c
    9b94:	4603      	mov	r3, r0
    9b96:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_SequenceStateType *SequenceState;
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    9b9a:	2300      	movs	r3, #0
    9b9c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    Spi_JobType Job;
    const Spi_JobConfigType *JobConfig;
    uint32 SpiCoreID;

    /* Get current coreID */
    SpiCoreID = Spi_GetCoreID;
    9ba0:	2300      	movs	r3, #0
    9ba2:	9308      	str	r3, [sp, #32]
        Status = Spi_SynctransmitCheckJobsIsValid(SequenceConfig, SpiCoreID);

        if ((Std_ReturnType)E_NOT_OK != Status)
        {
#endif /* (SPI_DEV_ERROR_DETECT == STD_ON) */
            SequenceConfig = Spi_apxSpiConfigPtr[SpiCoreID]->SequenceConfig[Sequence].SeqConfig;
    9ba4:	4a60      	ldr	r2, [pc, #384]	; (9d28 <Spi_SyncTransmit+0x198>)
    9ba6:	9b08      	ldr	r3, [sp, #32]
    9ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bac:	695a      	ldr	r2, [r3, #20]
    9bae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9bb2:	009b      	lsls	r3, r3, #2
    9bb4:	4413      	add	r3, r2
    9bb6:	681b      	ldr	r3, [r3, #0]
    9bb8:	9307      	str	r3, [sp, #28]
            /* Get the number of jobs in the sequence */
            NumJobsInSequence = SequenceConfig->NumJobs;
    9bba:	9b07      	ldr	r3, [sp, #28]
    9bbc:	881b      	ldrh	r3, [r3, #0]
    9bbe:	f8ad 301a 	strh.w	r3, [sp, #26]

            SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06();
    9bc2:	f00c fb3d 	bl	16240 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06>
            /* check if there are HW units already running */
            for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9bc6:	2300      	movs	r3, #0
    9bc8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    9bcc:	e017      	b.n	9bfe <Spi_SyncTransmit+0x6e>
            {
                if (0u != ((Spi_au32SpiBusySyncHWUnitsStatus[HWUnit] << HWUnit) & Spi_au32SpiSeqUsedHWUnits[Sequence]))
    9bce:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9bd2:	4a56      	ldr	r2, [pc, #344]	; (9d2c <Spi_SyncTransmit+0x19c>)
    9bd4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    9bd8:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9bdc:	409a      	lsls	r2, r3
    9bde:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9be2:	4953      	ldr	r1, [pc, #332]	; (9d30 <Spi_SyncTransmit+0x1a0>)
    9be4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    9be8:	4013      	ands	r3, r2
    9bea:	2b00      	cmp	r3, #0
    9bec:	d002      	beq.n	9bf4 <Spi_SyncTransmit+0x64>
                {
                    Status = (Std_ReturnType)E_NOT_OK;
    9bee:	2301      	movs	r3, #1
    9bf0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
            for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9bf4:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9bf8:	3301      	adds	r3, #1
    9bfa:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    9bfe:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9c02:	2b00      	cmp	r3, #0
    9c04:	d0e3      	beq.n	9bce <Spi_SyncTransmit+0x3e>
                {
                    /* Do notthing */
                }
            }
            
            if ((Std_ReturnType)E_NOT_OK != Status)
    9c06:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9c0a:	2b01      	cmp	r3, #1
    9c0c:	f000 8083 	beq.w	9d16 <Spi_SyncTransmit+0x186>
            {
                /* Set the sequence as pending */
                SequenceState = &Spi_axSpiSequenceState[Sequence];
    9c10:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c14:	009b      	lsls	r3, r3, #2
    9c16:	4a47      	ldr	r2, [pc, #284]	; (9d34 <Spi_SyncTransmit+0x1a4>)
    9c18:	4413      	add	r3, r2
    9c1a:	9305      	str	r3, [sp, #20]
                SequenceState->Result = SPI_SEQ_PENDING;
    9c1c:	9b05      	ldr	r3, [sp, #20]
    9c1e:	2201      	movs	r2, #1
    9c20:	601a      	str	r2, [r3, #0]
                /* set used HW units as busy */
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    9c22:	2300      	movs	r3, #0
    9c24:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    9c28:	e022      	b.n	9c70 <Spi_SyncTransmit+0xe0>
                {
                    /* Get the job id */
                    Job = SequenceConfig->JobIndexList[JobIndex];
    9c2a:	9b07      	ldr	r3, [sp, #28]
    9c2c:	689a      	ldr	r2, [r3, #8]
    9c2e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9c32:	005b      	lsls	r3, r3, #1
    9c34:	4413      	add	r3, r2
    9c36:	881b      	ldrh	r3, [r3, #0]
    9c38:	f8ad 3012 	strh.w	r3, [sp, #18]
                    JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    9c3c:	4a3a      	ldr	r2, [pc, #232]	; (9d28 <Spi_SyncTransmit+0x198>)
    9c3e:	9b08      	ldr	r3, [sp, #32]
    9c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c44:	691a      	ldr	r2, [r3, #16]
    9c46:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    9c4a:	009b      	lsls	r3, r3, #2
    9c4c:	4413      	add	r3, r2
    9c4e:	681b      	ldr	r3, [r3, #0]
    9c50:	9303      	str	r3, [sp, #12]
                    /* Logical Spi HWUnit */
                    HWUnit = JobConfig->HWUnit;
    9c52:	9b03      	ldr	r3, [sp, #12]
    9c54:	7f1b      	ldrb	r3, [r3, #28]
    9c56:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    Spi_au32SpiBusySyncHWUnitsStatus[HWUnit] = 1u;
    9c5a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9c5e:	4a33      	ldr	r2, [pc, #204]	; (9d2c <Spi_SyncTransmit+0x19c>)
    9c60:	2101      	movs	r1, #1
    9c62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    9c66:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9c6a:	3301      	adds	r3, #1
    9c6c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    9c70:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    9c74:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9c78:	429a      	cmp	r2, r3
    9c7a:	d3d6      	bcc.n	9c2a <Spi_SyncTransmit+0x9a>
                }
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06();
    9c7c:	f00c fb0c 	bl	16298 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06>
                /* Transmit Jobs */
                Status = Spi_SyncJobsTranfer(SequenceConfig, SpiCoreID);
    9c80:	9908      	ldr	r1, [sp, #32]
    9c82:	9807      	ldr	r0, [sp, #28]
    9c84:	f7ff fc72 	bl	956c <Spi_SyncJobsTranfer>
    9c88:	4603      	mov	r3, r0
    9c8a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                
                if ((Std_ReturnType)E_OK == Status)
    9c8e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9c92:	2b00      	cmp	r3, #0
    9c94:	d103      	bne.n	9c9e <Spi_SyncTransmit+0x10e>
                {
                    /* Set the sequence as OK */
                    SequenceState->Result = SPI_SEQ_OK;
    9c96:	9b05      	ldr	r3, [sp, #20]
    9c98:	2200      	movs	r2, #0
    9c9a:	601a      	str	r2, [r3, #0]
    9c9c:	e002      	b.n	9ca4 <Spi_SyncTransmit+0x114>
#endif
                }
                else
                {
                    /* Set the sequence as FAILED */
                    SequenceState->Result = SPI_SEQ_FAILED;
    9c9e:	9b05      	ldr	r3, [sp, #20]
    9ca0:	2202      	movs	r2, #2
    9ca2:	601a      	str	r2, [r3, #0]
                    /* Report to DEM */
                    Spi_DemReportStatus(SpiCoreID, DEM_EVENT_STATUS_FAILED);
#endif
                }
                
                SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07();
    9ca4:	f00c fb1e 	bl	162e4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07>
                /* set used HW units as idle */
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    9ca8:	2300      	movs	r3, #0
    9caa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    9cae:	e022      	b.n	9cf6 <Spi_SyncTransmit+0x166>
                {
                    /* Get the job id */
                    Job = SequenceConfig->JobIndexList[JobIndex];
    9cb0:	9b07      	ldr	r3, [sp, #28]
    9cb2:	689a      	ldr	r2, [r3, #8]
    9cb4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9cb8:	005b      	lsls	r3, r3, #1
    9cba:	4413      	add	r3, r2
    9cbc:	881b      	ldrh	r3, [r3, #0]
    9cbe:	f8ad 3012 	strh.w	r3, [sp, #18]
                    JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    9cc2:	4a19      	ldr	r2, [pc, #100]	; (9d28 <Spi_SyncTransmit+0x198>)
    9cc4:	9b08      	ldr	r3, [sp, #32]
    9cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cca:	691a      	ldr	r2, [r3, #16]
    9ccc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    9cd0:	009b      	lsls	r3, r3, #2
    9cd2:	4413      	add	r3, r2
    9cd4:	681b      	ldr	r3, [r3, #0]
    9cd6:	9303      	str	r3, [sp, #12]
                    /* Logical Spi HWUnit */
                    HWUnit = JobConfig->HWUnit;
    9cd8:	9b03      	ldr	r3, [sp, #12]
    9cda:	7f1b      	ldrb	r3, [r3, #28]
    9cdc:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    Spi_au32SpiBusySyncHWUnitsStatus[HWUnit] = 0u;
    9ce0:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9ce4:	4a11      	ldr	r2, [pc, #68]	; (9d2c <Spi_SyncTransmit+0x19c>)
    9ce6:	2100      	movs	r1, #0
    9ce8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    9cec:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9cf0:	3301      	adds	r3, #1
    9cf2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    9cf6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    9cfa:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9cfe:	429a      	cmp	r2, r3
    9d00:	d3d6      	bcc.n	9cb0 <Spi_SyncTransmit+0x120>
                }
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07();
    9d02:	f00c fb1b 	bl	1633c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07>
                
                /* End Sequence Notification */
                if (NULL_PTR != SequenceConfig->EndNotification)
    9d06:	9b07      	ldr	r3, [sp, #28]
    9d08:	68db      	ldr	r3, [r3, #12]
    9d0a:	2b00      	cmp	r3, #0
    9d0c:	d005      	beq.n	9d1a <Spi_SyncTransmit+0x18a>
                {
                    SequenceConfig->EndNotification();
    9d0e:	9b07      	ldr	r3, [sp, #28]
    9d10:	68db      	ldr	r3, [r3, #12]
    9d12:	4798      	blx	r3
    9d14:	e001      	b.n	9d1a <Spi_SyncTransmit+0x18a>
                    /* Do nothing */
                }
            }
            else
            {
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06();
    9d16:	f00c fabf 	bl	16298 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06>
            /* Do nothing */
        }
    }
#endif

    return Status;
    9d1a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    9d1e:	4618      	mov	r0, r3
    9d20:	b00b      	add	sp, #44	; 0x2c
    9d22:	f85d fb04 	ldr.w	pc, [sp], #4
    9d26:	bf00      	nop
    9d28:	1fff8dec 	.word	0x1fff8dec
    9d2c:	1fff8e04 	.word	0x1fff8e04
    9d30:	1fff8e00 	.word	0x1fff8e00
    9d34:	1fff8df0 	.word	0x1fff8df0

00009d38 <Spi_GetHWUnitStatus>:
/** @implements Spi_GetHWUnitStatus_Activity */
Spi_StatusType Spi_GetHWUnitStatus
    (
        Spi_HWUnitType HWUnit
    )
{
    9d38:	b084      	sub	sp, #16
    9d3a:	4603      	mov	r3, r0
    9d3c:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_StatusType Status = SPI_UNINIT;
    9d40:	2300      	movs	r3, #0
    9d42:	9303      	str	r3, [sp, #12]
        /* Do nothing */
    }
    else
    {
#endif
        Status = Spi_axSpiHwUnitQueueArray[HWUnit].Status;
    9d44:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9d48:	4a03      	ldr	r2, [pc, #12]	; (9d58 <Spi_GetHWUnitStatus+0x20>)
    9d4a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    9d4e:	9303      	str	r3, [sp, #12]

#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return Status;
    9d50:	9b03      	ldr	r3, [sp, #12]
}
    9d52:	4618      	mov	r0, r3
    9d54:	b004      	add	sp, #16
    9d56:	4770      	bx	lr
    9d58:	1fff8de4 	.word	0x1fff8de4

00009d5c <Spi_Cancel>:
*       undefined state due to cancelling a sequence transmission.
*
*/
/**  @implements Spi_Cancel_Activity */
void Spi_Cancel(Spi_SequenceType Sequence)
{
    9d5c:	b082      	sub	sp, #8
    9d5e:	4603      	mov	r3, r0
    9d60:	f88d 3007 	strb.w	r3, [sp, #7]
        }
        else
        {
#endif
            /* Set sequence state to Cancel */
            Spi_axSpiSequenceState[Sequence].Result = SPI_SEQ_CANCELLED;
    9d64:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9d68:	4a03      	ldr	r2, [pc, #12]	; (9d78 <Spi_Cancel+0x1c>)
    9d6a:	2103      	movs	r1, #3
    9d6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            #endif
#if (SPI_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif
}
    9d70:	bf00      	nop
    9d72:	b002      	add	sp, #8
    9d74:	4770      	bx	lr
    9d76:	bf00      	nop
    9d78:	1fff8df0 	.word	0x1fff8df0

00009d7c <Spi_MainFunction_Handling>:
                /*Do nothing */
            }
        }
    }
#endif /* #if ( (SPI_LEVEL_DELIVERED == SPI_LEVEL1) || (SPI_LEVEL_DELIVERED == SPI_LEVEL2) ) */
}
    9d7c:	bf00      	nop
    9d7e:	4770      	bx	lr

00009d80 <Spi_Ipw_SyncTransmitProcess>:
        const Spi_JobConfigType *JobConfig,
        const Spi_ChannelConfigType *ChannelConfig,
        Spi_DataBufferType *RxBuffer,
        const Spi_DataBufferType *TxBuffer
    )
{
    9d80:	b500      	push	{lr}
    9d82:	b08d      	sub	sp, #52	; 0x34
    9d84:	9005      	str	r0, [sp, #20]
    9d86:	9104      	str	r1, [sp, #16]
    9d88:	9203      	str	r2, [sp, #12]
    9d8a:	9302      	str	r3, [sp, #8]
    Lpspi_Ip_StatusType Lpspi_spiStatus = LPSPI_IP_STATUS_SUCCESS;
    9d8c:	2300      	movs	r3, #0
    9d8e:	930b      	str	r3, [sp, #44]	; 0x2c
    const Lpspi_Ip_ExternalDeviceType* LpspiExternalDevice;
#if (SPI_IPW_SPI_FLEXIO_ENABLE == STD_ON)
    Flexio_Spi_Ip_StatusType Flexio_spiStatus = FLEXIO_SPI_IP_STATUS_SUCCESS;
    const Flexio_Spi_Ip_ExternalDeviceType* Flexio_SpiExternalDevice;
#endif
    Std_ReturnType Ipw_Status = (Std_ReturnType)E_OK;
    9d90:	2300      	movs	r3, #0
    9d92:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    Spi_NumberOfDataType NumberOfBytes;
    Spi_Ipw_SupportedIpsType IpType = JobConfig->ExternalDeviceConfig->ExDeviceConfig->IpType;
    9d96:	9b05      	ldr	r3, [sp, #20]
    9d98:	6a1b      	ldr	r3, [r3, #32]
    9d9a:	681b      	ldr	r3, [r3, #0]
    9d9c:	681b      	ldr	r3, [r3, #0]
    9d9e:	9309      	str	r3, [sp, #36]	; 0x24
        HalfDuplexMode = LPSPI_IP_FULL_DUPLEX;
        HalfDuplexModeSupport = FALSE;
    }
#endif
    
    NumberOfBytes = ChannelConfig->ChannelState->Length;
    9da0:	9b04      	ldr	r3, [sp, #16]
    9da2:	699b      	ldr	r3, [r3, #24]
    9da4:	885b      	ldrh	r3, [r3, #2]
    9da6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    if (SPI_OVER_LPSPI == IpType)
    9daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9dac:	2b00      	cmp	r3, #0
    9dae:	d12e      	bne.n	9e0e <Spi_Ipw_SyncTransmitProcess+0x8e>
    {
        LpspiExternalDevice = JobConfig->ExternalDeviceConfig->ExDeviceConfig->ExternalDeviceConfig.LpspiExternalDeviceConfig;
    9db0:	9b05      	ldr	r3, [sp, #20]
    9db2:	6a1b      	ldr	r3, [r3, #32]
    9db4:	681b      	ldr	r3, [r3, #0]
    9db6:	689b      	ldr	r3, [r3, #8]
    9db8:	9307      	str	r3, [sp, #28]
        Lpspi_spiStatus = Lpspi_Ip_UpdateDefaultTransmitData(LpspiExternalDevice, ChannelConfig->DefaultTransmitValue);
    9dba:	9b04      	ldr	r3, [sp, #16]
    9dbc:	689b      	ldr	r3, [r3, #8]
    9dbe:	4619      	mov	r1, r3
    9dc0:	9807      	ldr	r0, [sp, #28]
    9dc2:	f7ff fadd 	bl	9380 <Lpspi_Ip_UpdateDefaultTransmitData>
    9dc6:	900b      	str	r0, [sp, #44]	; 0x2c
        if (LPSPI_IP_STATUS_SUCCESS == Lpspi_spiStatus)
    9dc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9dca:	2b00      	cmp	r3, #0
    9dcc:	d11f      	bne.n	9e0e <Spi_Ipw_SyncTransmitProcess+0x8e>
        {
            Lpspi_spiStatus = Lpspi_Ip_UpdateFrameSize(LpspiExternalDevice, ChannelConfig->FrameSize);
    9dce:	9b04      	ldr	r3, [sp, #16]
    9dd0:	791b      	ldrb	r3, [r3, #4]
    9dd2:	b29b      	uxth	r3, r3
    9dd4:	4619      	mov	r1, r3
    9dd6:	9807      	ldr	r0, [sp, #28]
    9dd8:	f7ff fa92 	bl	9300 <Lpspi_Ip_UpdateFrameSize>
    9ddc:	900b      	str	r0, [sp, #44]	; 0x2c
            if (LPSPI_IP_STATUS_SUCCESS == Lpspi_spiStatus)
    9dde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9de0:	2b00      	cmp	r3, #0
    9de2:	d114      	bne.n	9e0e <Spi_Ipw_SyncTransmitProcess+0x8e>
            {
                Lpspi_spiStatus = Lpspi_Ip_UpdateLsb(LpspiExternalDevice, ChannelConfig->Lsb);
    9de4:	9b04      	ldr	r3, [sp, #16]
    9de6:	795b      	ldrb	r3, [r3, #5]
    9de8:	4619      	mov	r1, r3
    9dea:	9807      	ldr	r0, [sp, #28]
    9dec:	f7ff faa8 	bl	9340 <Lpspi_Ip_UpdateLsb>
    9df0:	900b      	str	r0, [sp, #44]	; 0x2c
                if (LPSPI_IP_STATUS_SUCCESS == Lpspi_spiStatus)
    9df2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9df4:	2b00      	cmp	r3, #0
    9df6:	d10a      	bne.n	9e0e <Spi_Ipw_SyncTransmitProcess+0x8e>
                        Lpspi_spiStatus = Lpspi_Ip_SyncTransmitHalfDuplex(LpspiExternalDevice, Buffer, NumberOfBytes, HalfDuplexMode, SPI_TIMEOUT_COUNTER_U32);
                    }
                    else
                    #endif
                    {
                        Lpspi_spiStatus = Lpspi_Ip_SyncTransmit(LpspiExternalDevice, (const uint8*)TxBuffer, RxBuffer, NumberOfBytes, SPI_TIMEOUT_COUNTER_U32);
    9df8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    9dfc:	f24c 3250 	movw	r2, #50000	; 0xc350
    9e00:	9200      	str	r2, [sp, #0]
    9e02:	9a03      	ldr	r2, [sp, #12]
    9e04:	9902      	ldr	r1, [sp, #8]
    9e06:	9807      	ldr	r0, [sp, #28]
    9e08:	f7fe fe0a 	bl	8a20 <Lpspi_Ip_SyncTransmit>
    9e0c:	900b      	str	r0, [sp, #44]	; 0x2c
            }
        }
    }
    if( (LPSPI_IP_STATUS_SUCCESS != Lpspi_spiStatus) || (FLEXIO_SPI_IP_STATUS_SUCCESS != Flexio_spiStatus))
#else
    if(LPSPI_IP_STATUS_SUCCESS != Lpspi_spiStatus)
    9e0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9e10:	2b00      	cmp	r3, #0
    9e12:	d002      	beq.n	9e1a <Spi_Ipw_SyncTransmitProcess+0x9a>
#endif /*(SPI_IPW_SPI_FLEXIO_ENABLE == STD_ON)*/
    {
        Ipw_Status = (Std_ReturnType)E_NOT_OK;
    9e14:	2301      	movs	r3, #1
    9e16:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    }
    return Ipw_Status;
    9e1a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
}
    9e1e:	4618      	mov	r0, r3
    9e20:	b00d      	add	sp, #52	; 0x34
    9e22:	f85d fb04 	ldr.w	pc, [sp], #4

00009e26 <Spi_Ipw_Init>:
/*==================================================================================================
*                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* Spi_Ipw_Init */
void Spi_Ipw_Init(const Spi_HWUnitType HWUnitId, const Spi_HWUnitConfigType *HWUnit)
{
    9e26:	b500      	push	{lr}
    9e28:	b083      	sub	sp, #12
    9e2a:	4603      	mov	r3, r0
    9e2c:	9100      	str	r1, [sp, #0]
    9e2e:	f88d 3007 	strb.w	r3, [sp, #7]
    if (SPI_OVER_LPSPI == HWUnit->IpType)
    9e32:	9b00      	ldr	r3, [sp, #0]
    9e34:	681b      	ldr	r3, [r3, #0]
    9e36:	2b00      	cmp	r3, #0
    9e38:	d104      	bne.n	9e44 <Spi_Ipw_Init+0x1e>
    #if ((SPI_LEVEL_DELIVERED == SPI_LEVEL1) || (SPI_LEVEL_DELIVERED == SPI_LEVEL2))
        Spi_Ipw_au8LpspiHWUnitMapping[HWUnit->Instance] = HWUnitId;
    #else
        (void)HWUnitId;
    #endif
        (void)Lpspi_Ip_Init(HWUnit->IpConfig.LpspiIpConfig);
    9e3a:	9b00      	ldr	r3, [sp, #0]
    9e3c:	68db      	ldr	r3, [r3, #12]
    9e3e:	4618      	mov	r0, r3
    9e40:	f7fe fd62 	bl	8908 <Lpspi_Ip_Init>
        (void)HWUnitId;
    #endif
        (void)Flexio_Spi_Ip_Init(HWUnit->IpConfig.FlexioSpiIpConfig);
    }
#endif
}
    9e44:	bf00      	nop
    9e46:	b003      	add	sp, #12
    9e48:	f85d fb04 	ldr.w	pc, [sp], #4

00009e4c <Spi_Ipw_DeInit>:

/* Spi_Ipw_DeInit */
void Spi_Ipw_DeInit(Spi_HWUnitType HWUnit, uint32 SpiCoreID)
{
    9e4c:	b500      	push	{lr}
    9e4e:	b083      	sub	sp, #12
    9e50:	4603      	mov	r3, r0
    9e52:	9100      	str	r1, [sp, #0]
    9e54:	f88d 3007 	strb.w	r3, [sp, #7]
    if (SPI_OVER_LPSPI == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->IpType)
    9e58:	4a0f      	ldr	r2, [pc, #60]	; (9e98 <Spi_Ipw_DeInit+0x4c>)
    9e5a:	9b00      	ldr	r3, [sp, #0]
    9e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e60:	69da      	ldr	r2, [r3, #28]
    9e62:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e66:	009b      	lsls	r3, r3, #2
    9e68:	4413      	add	r3, r2
    9e6a:	681b      	ldr	r3, [r3, #0]
    9e6c:	681b      	ldr	r3, [r3, #0]
    9e6e:	2b00      	cmp	r3, #0
    9e70:	d10d      	bne.n	9e8e <Spi_Ipw_DeInit+0x42>
    {
        (void)Lpspi_Ip_DeInit(Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->Instance);
    9e72:	4a09      	ldr	r2, [pc, #36]	; (9e98 <Spi_Ipw_DeInit+0x4c>)
    9e74:	9b00      	ldr	r3, [sp, #0]
    9e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e7a:	69da      	ldr	r2, [r3, #28]
    9e7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e80:	009b      	lsls	r3, r3, #2
    9e82:	4413      	add	r3, r2
    9e84:	681b      	ldr	r3, [r3, #0]
    9e86:	791b      	ldrb	r3, [r3, #4]
    9e88:	4618      	mov	r0, r3
    9e8a:	f7fe fd99 	bl	89c0 <Lpspi_Ip_DeInit>
    else
    {
        (void)Flexio_Spi_Ip_DeInit(Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->Instance);
    }
#endif
}
    9e8e:	bf00      	nop
    9e90:	b003      	add	sp, #12
    9e92:	f85d fb04 	ldr.w	pc, [sp], #4
    9e96:	bf00      	nop
    9e98:	1fff8dec 	.word	0x1fff8dec

00009e9c <Spi_Ipw_SyncTransmit>:

/* Spi_Ipw_SyncTransmit */
#if ( (SPI_LEVEL_DELIVERED == SPI_LEVEL2) || (SPI_LEVEL_DELIVERED == SPI_LEVEL0) )
Std_ReturnType Spi_Ipw_SyncTransmit(const Spi_JobConfigType *JobConfig, uint32 SpiCoreID)
{
    9e9c:	b500      	push	{lr}
    9e9e:	b08b      	sub	sp, #44	; 0x2c
    9ea0:	9001      	str	r0, [sp, #4]
    9ea2:	9100      	str	r1, [sp, #0]

    Std_ReturnType Ipw_Status = (Std_ReturnType)E_OK;
    9ea4:	2300      	movs	r3, #0
    9ea6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    const Spi_ChannelConfigType *ChannelConfig;
    const Spi_ChannelConfigType *NextChannelConfig;
    Spi_ChannelType ChannelID;
    Spi_ChannelType NumChannelsInJob;
    Spi_ChannelType ChannelIndex;
    Spi_Ipw_SupportedIpsType IpType = JobConfig->ExternalDeviceConfig->ExDeviceConfig->IpType;
    9eaa:	9b01      	ldr	r3, [sp, #4]
    9eac:	6a1b      	ldr	r3, [r3, #32]
    9eae:	681b      	ldr	r3, [r3, #0]
    9eb0:	681b      	ldr	r3, [r3, #0]
    9eb2:	9306      	str	r3, [sp, #24]
    
    NumChannelsInJob = JobConfig->NumChannels;
    9eb4:	9b01      	ldr	r3, [sp, #4]
    9eb6:	781b      	ldrb	r3, [r3, #0]
    9eb8:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChannelIndex = (Spi_ChannelType)0; ChannelIndex < NumChannelsInJob; ChannelIndex++)
    9ebc:	2300      	movs	r3, #0
    9ebe:	f88d 301f 	strb.w	r3, [sp, #31]
    9ec2:	e0e6      	b.n	a092 <Spi_Ipw_SyncTransmit+0x1f6>
    {
        ChannelID = JobConfig->ChannelIndexList[ChannelIndex];
    9ec4:	9b01      	ldr	r3, [sp, #4]
    9ec6:	685a      	ldr	r2, [r3, #4]
    9ec8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9ecc:	4413      	add	r3, r2
    9ece:	781b      	ldrb	r3, [r3, #0]
    9ed0:	f88d 3016 	strb.w	r3, [sp, #22]
        ChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[ChannelID].ChannelCfg;
    9ed4:	4a75      	ldr	r2, [pc, #468]	; (a0ac <Spi_Ipw_SyncTransmit+0x210>)
    9ed6:	9b00      	ldr	r3, [sp, #0]
    9ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9edc:	68da      	ldr	r2, [r3, #12]
    9ede:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9ee2:	009b      	lsls	r3, r3, #2
    9ee4:	4413      	add	r3, r2
    9ee6:	681b      	ldr	r3, [r3, #0]
    9ee8:	9304      	str	r3, [sp, #16]
        RxBuffer = ChannelConfig->BufferDescriptor->BufferRX;
    9eea:	9b04      	ldr	r3, [sp, #16]
    9eec:	691b      	ldr	r3, [r3, #16]
    9eee:	689b      	ldr	r3, [r3, #8]
    9ef0:	9303      	str	r3, [sp, #12]
        if(0u != (ChannelConfig->ChannelState->Flags & SPI_CHANNEL_FLAG_TX_DEFAULT_U8))
    9ef2:	9b04      	ldr	r3, [sp, #16]
    9ef4:	699b      	ldr	r3, [r3, #24]
    9ef6:	781b      	ldrb	r3, [r3, #0]
    9ef8:	f003 0301 	and.w	r3, r3, #1
    9efc:	2b00      	cmp	r3, #0
    9efe:	d002      	beq.n	9f06 <Spi_Ipw_SyncTransmit+0x6a>
        {
            TxBuffer = NULL_PTR;
    9f00:	2300      	movs	r3, #0
    9f02:	9308      	str	r3, [sp, #32]
    9f04:	e00c      	b.n	9f20 <Spi_Ipw_SyncTransmit+0x84>
        }
        else
        {
            if(EB == ChannelConfig->BufferType)
    9f06:	9b04      	ldr	r3, [sp, #16]
    9f08:	681b      	ldr	r3, [r3, #0]
    9f0a:	2b01      	cmp	r3, #1
    9f0c:	d104      	bne.n	9f18 <Spi_Ipw_SyncTransmit+0x7c>
            {
                TxBuffer = ChannelConfig->BufferDescriptor->ExternalBufferTX;
    9f0e:	9b04      	ldr	r3, [sp, #16]
    9f10:	691b      	ldr	r3, [r3, #16]
    9f12:	681b      	ldr	r3, [r3, #0]
    9f14:	9308      	str	r3, [sp, #32]
    9f16:	e003      	b.n	9f20 <Spi_Ipw_SyncTransmit+0x84>
            }
            else
            {
                TxBuffer = (const uint8*)(ChannelConfig->BufferDescriptor->InternalBufferTX);
    9f18:	9b04      	ldr	r3, [sp, #16]
    9f1a:	691b      	ldr	r3, [r3, #16]
    9f1c:	685b      	ldr	r3, [r3, #4]
    9f1e:	9308      	str	r3, [sp, #32]
            }
        }
        
        if (SPI_OVER_LPSPI == IpType)
    9f20:	9b06      	ldr	r3, [sp, #24]
    9f22:	2b00      	cmp	r3, #0
    9f24:	f040 80a7 	bne.w	a076 <Spi_Ipw_SyncTransmit+0x1da>
        {
            if(ChannelIndex == (NumChannelsInJob - 1u))
    9f28:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9f2c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9f30:	3b01      	subs	r3, #1
    9f32:	429a      	cmp	r2, r3
    9f34:	d10a      	bne.n	9f4c <Spi_Ipw_SyncTransmit+0xb0>
            {
                /* Clear CS after current channel */
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->KeepCs = FALSE;
    9f36:	9b01      	ldr	r3, [sp, #4]
    9f38:	6a1b      	ldr	r3, [r3, #32]
    9f3a:	681b      	ldr	r3, [r3, #0]
    9f3c:	791b      	ldrb	r3, [r3, #4]
    9f3e:	461a      	mov	r2, r3
    9f40:	4b5b      	ldr	r3, [pc, #364]	; (a0b0 <Spi_Ipw_SyncTransmit+0x214>)
    9f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9f46:	2200      	movs	r2, #0
    9f48:	771a      	strb	r2, [r3, #28]
    9f4a:	e07b      	b.n	a044 <Spi_Ipw_SyncTransmit+0x1a8>
            }
            else
            {
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->KeepCs = TRUE;
    9f4c:	9b01      	ldr	r3, [sp, #4]
    9f4e:	6a1b      	ldr	r3, [r3, #32]
    9f50:	681b      	ldr	r3, [r3, #0]
    9f52:	791b      	ldrb	r3, [r3, #4]
    9f54:	461a      	mov	r2, r3
    9f56:	4b56      	ldr	r3, [pc, #344]	; (a0b0 <Spi_Ipw_SyncTransmit+0x214>)
    9f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9f5c:	2201      	movs	r2, #1
    9f5e:	771a      	strb	r2, [r3, #28]
                MCAL_DATA_SYNC_BARRIER();
    9f60:	f3bf 8f4f 	dsb	sy
                /* update data for next transfer */
                NextChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[JobConfig->ChannelIndexList[ChannelIndex + 1u]].ChannelCfg;
    9f64:	4a51      	ldr	r2, [pc, #324]	; (a0ac <Spi_Ipw_SyncTransmit+0x210>)
    9f66:	9b00      	ldr	r3, [sp, #0]
    9f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f6c:	68da      	ldr	r2, [r3, #12]
    9f6e:	9b01      	ldr	r3, [sp, #4]
    9f70:	6859      	ldr	r1, [r3, #4]
    9f72:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9f76:	3301      	adds	r3, #1
    9f78:	440b      	add	r3, r1
    9f7a:	781b      	ldrb	r3, [r3, #0]
    9f7c:	009b      	lsls	r3, r3, #2
    9f7e:	4413      	add	r3, r2
    9f80:	681b      	ldr	r3, [r3, #0]
    9f82:	9302      	str	r3, [sp, #8]
                MCAL_DATA_SYNC_BARRIER();
    9f84:	f3bf 8f4f 	dsb	sy
                if(0u != (NextChannelConfig->ChannelState->Flags & SPI_CHANNEL_FLAG_TX_DEFAULT_U8))
    9f88:	9b02      	ldr	r3, [sp, #8]
    9f8a:	699b      	ldr	r3, [r3, #24]
    9f8c:	781b      	ldrb	r3, [r3, #0]
    9f8e:	f003 0301 	and.w	r3, r3, #1
    9f92:	2b00      	cmp	r3, #0
    9f94:	d00a      	beq.n	9fac <Spi_Ipw_SyncTransmit+0x110>
                {
                    Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->TxBufferNext = NULL_PTR;
    9f96:	9b01      	ldr	r3, [sp, #4]
    9f98:	6a1b      	ldr	r3, [r3, #32]
    9f9a:	681b      	ldr	r3, [r3, #0]
    9f9c:	791b      	ldrb	r3, [r3, #4]
    9f9e:	461a      	mov	r2, r3
    9fa0:	4b43      	ldr	r3, [pc, #268]	; (a0b0 <Spi_Ipw_SyncTransmit+0x214>)
    9fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9fa6:	2200      	movs	r2, #0
    9fa8:	62da      	str	r2, [r3, #44]	; 0x2c
    9faa:	e01c      	b.n	9fe6 <Spi_Ipw_SyncTransmit+0x14a>
                }
                else
                {
                    if(EB == NextChannelConfig->BufferType)
    9fac:	9b02      	ldr	r3, [sp, #8]
    9fae:	681b      	ldr	r3, [r3, #0]
    9fb0:	2b01      	cmp	r3, #1
    9fb2:	d10c      	bne.n	9fce <Spi_Ipw_SyncTransmit+0x132>
                    {
                        Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->TxBufferNext = NextChannelConfig->BufferDescriptor->ExternalBufferTX;
    9fb4:	9b02      	ldr	r3, [sp, #8]
    9fb6:	691a      	ldr	r2, [r3, #16]
    9fb8:	9b01      	ldr	r3, [sp, #4]
    9fba:	6a1b      	ldr	r3, [r3, #32]
    9fbc:	681b      	ldr	r3, [r3, #0]
    9fbe:	791b      	ldrb	r3, [r3, #4]
    9fc0:	4619      	mov	r1, r3
    9fc2:	4b3b      	ldr	r3, [pc, #236]	; (a0b0 <Spi_Ipw_SyncTransmit+0x214>)
    9fc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    9fc8:	6812      	ldr	r2, [r2, #0]
    9fca:	62da      	str	r2, [r3, #44]	; 0x2c
    9fcc:	e00b      	b.n	9fe6 <Spi_Ipw_SyncTransmit+0x14a>
                    }
                    else
                    {
                        Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->TxBufferNext = NextChannelConfig->BufferDescriptor->InternalBufferTX;
    9fce:	9b02      	ldr	r3, [sp, #8]
    9fd0:	691a      	ldr	r2, [r3, #16]
    9fd2:	9b01      	ldr	r3, [sp, #4]
    9fd4:	6a1b      	ldr	r3, [r3, #32]
    9fd6:	681b      	ldr	r3, [r3, #0]
    9fd8:	791b      	ldrb	r3, [r3, #4]
    9fda:	4619      	mov	r1, r3
    9fdc:	4b34      	ldr	r3, [pc, #208]	; (a0b0 <Spi_Ipw_SyncTransmit+0x214>)
    9fde:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    9fe2:	6852      	ldr	r2, [r2, #4]
    9fe4:	62da      	str	r2, [r3, #44]	; 0x2c
                    }
                }
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->FrameSizeNext = NextChannelConfig->FrameSize;
    9fe6:	9b02      	ldr	r3, [sp, #8]
    9fe8:	791a      	ldrb	r2, [r3, #4]
    9fea:	9b01      	ldr	r3, [sp, #4]
    9fec:	6a1b      	ldr	r3, [r3, #32]
    9fee:	681b      	ldr	r3, [r3, #0]
    9ff0:	791b      	ldrb	r3, [r3, #4]
    9ff2:	4619      	mov	r1, r3
    9ff4:	4b2e      	ldr	r3, [pc, #184]	; (a0b0 <Spi_Ipw_SyncTransmit+0x214>)
    9ff6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    9ffa:	b292      	uxth	r2, r2
    9ffc:	861a      	strh	r2, [r3, #48]	; 0x30
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->LsbNext = NextChannelConfig->Lsb;
    9ffe:	9b01      	ldr	r3, [sp, #4]
    a000:	6a1b      	ldr	r3, [r3, #32]
    a002:	681b      	ldr	r3, [r3, #0]
    a004:	791b      	ldrb	r3, [r3, #4]
    a006:	461a      	mov	r2, r3
    a008:	4b29      	ldr	r3, [pc, #164]	; (a0b0 <Spi_Ipw_SyncTransmit+0x214>)
    a00a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a00e:	9a02      	ldr	r2, [sp, #8]
    a010:	7952      	ldrb	r2, [r2, #5]
    a012:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->DefaultDataNext = NextChannelConfig->DefaultTransmitValue;
    a016:	9b01      	ldr	r3, [sp, #4]
    a018:	6a1b      	ldr	r3, [r3, #32]
    a01a:	681b      	ldr	r3, [r3, #0]
    a01c:	791b      	ldrb	r3, [r3, #4]
    a01e:	461a      	mov	r2, r3
    a020:	4b23      	ldr	r3, [pc, #140]	; (a0b0 <Spi_Ipw_SyncTransmit+0x214>)
    a022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a026:	9a02      	ldr	r2, [sp, #8]
    a028:	6892      	ldr	r2, [r2, #8]
    a02a:	635a      	str	r2, [r3, #52]	; 0x34
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->LengthNext = NextChannelConfig->ChannelState->Length;
    a02c:	9b02      	ldr	r3, [sp, #8]
    a02e:	699a      	ldr	r2, [r3, #24]
    a030:	9b01      	ldr	r3, [sp, #4]
    a032:	6a1b      	ldr	r3, [r3, #32]
    a034:	681b      	ldr	r3, [r3, #0]
    a036:	791b      	ldrb	r3, [r3, #4]
    a038:	4619      	mov	r1, r3
    a03a:	4b1d      	ldr	r3, [pc, #116]	; (a0b0 <Spi_Ipw_SyncTransmit+0x214>)
    a03c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    a040:	8852      	ldrh	r2, [r2, #2]
    a042:	871a      	strh	r2, [r3, #56]	; 0x38
                    Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->NextChannelIsRX = FALSE;
                }
                #endif
            }
            
            if(0u == ChannelIndex)
    a044:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a048:	2b00      	cmp	r3, #0
    a04a:	d10a      	bne.n	a062 <Spi_Ipw_SyncTransmit+0x1c6>
            {
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->FirstCmd = TRUE;
    a04c:	9b01      	ldr	r3, [sp, #4]
    a04e:	6a1b      	ldr	r3, [r3, #32]
    a050:	681b      	ldr	r3, [r3, #0]
    a052:	791b      	ldrb	r3, [r3, #4]
    a054:	461a      	mov	r2, r3
    a056:	4b16      	ldr	r3, [pc, #88]	; (a0b0 <Spi_Ipw_SyncTransmit+0x214>)
    a058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a05c:	2201      	movs	r2, #1
    a05e:	775a      	strb	r2, [r3, #29]
    a060:	e009      	b.n	a076 <Spi_Ipw_SyncTransmit+0x1da>
            }
            else
            {
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->FirstCmd = FALSE;
    a062:	9b01      	ldr	r3, [sp, #4]
    a064:	6a1b      	ldr	r3, [r3, #32]
    a066:	681b      	ldr	r3, [r3, #0]
    a068:	791b      	ldrb	r3, [r3, #4]
    a06a:	461a      	mov	r2, r3
    a06c:	4b10      	ldr	r3, [pc, #64]	; (a0b0 <Spi_Ipw_SyncTransmit+0x214>)
    a06e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a072:	2200      	movs	r2, #0
    a074:	775a      	strb	r2, [r3, #29]
            }
        }
        Ipw_Status = Spi_Ipw_SyncTransmitProcess(JobConfig, ChannelConfig, RxBuffer, (const uint8*)TxBuffer);
    a076:	9b08      	ldr	r3, [sp, #32]
    a078:	9a03      	ldr	r2, [sp, #12]
    a07a:	9904      	ldr	r1, [sp, #16]
    a07c:	9801      	ldr	r0, [sp, #4]
    a07e:	f7ff fe7f 	bl	9d80 <Spi_Ipw_SyncTransmitProcess>
    a082:	4603      	mov	r3, r0
    a084:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    for (ChannelIndex = (Spi_ChannelType)0; ChannelIndex < NumChannelsInJob; ChannelIndex++)
    a088:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a08c:	3301      	adds	r3, #1
    a08e:	f88d 301f 	strb.w	r3, [sp, #31]
    a092:	f89d 201f 	ldrb.w	r2, [sp, #31]
    a096:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a09a:	429a      	cmp	r2, r3
    a09c:	f4ff af12 	bcc.w	9ec4 <Spi_Ipw_SyncTransmit+0x28>
    }
    return Ipw_Status;
    a0a0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    a0a4:	4618      	mov	r0, r3
    a0a6:	b00b      	add	sp, #44	; 0x2c
    a0a8:	f85d fb04 	ldr.w	pc, [sp], #4
    a0ac:	1fff8dec 	.word	0x1fff8dec
    a0b0:	1fff8dd8 	.word	0x1fff8dd8

0000a0b4 <Can_IsControllersBusy>:
        }
    }
#endif /* CAN_43_FLEXCAN_MAINFUNCTION_MULTIPLE_READ == STD_ON */

static boolean Can_IsControllersBusy(uint32 u32CoreId)
{
    a0b4:	b084      	sub	sp, #16
    a0b6:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    a0b8:	2300      	movs	r3, #0
    a0ba:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    a0be:	2300      	movs	r3, #0
    a0c0:	f88d 300e 	strb.w	r3, [sp, #14]

    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a0c4:	2300      	movs	r3, #0
    a0c6:	f88d 300e 	strb.w	r3, [sp, #14]
    a0ca:	e01b      	b.n	a104 <Can_IsControllersBusy+0x50>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a0cc:	4a12      	ldr	r2, [pc, #72]	; (a118 <Can_IsControllersBusy+0x64>)
    a0ce:	9b01      	ldr	r3, [sp, #4]
    a0d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0d4:	695a      	ldr	r2, [r3, #20]
    a0d6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0da:	009b      	lsls	r3, r3, #2
    a0dc:	4413      	add	r3, r2
    a0de:	681b      	ldr	r3, [r3, #0]
    a0e0:	2b00      	cmp	r3, #0
    a0e2:	d00a      	beq.n	a0fa <Can_IsControllersBusy+0x46>
        {
            if (CAN_CS_UNINIT != Can_eControllerState[u8ControllerID])
    a0e4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0e8:	4a0c      	ldr	r2, [pc, #48]	; (a11c <Can_IsControllersBusy+0x68>)
    a0ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0ee:	2b00      	cmp	r3, #0
    a0f0:	d003      	beq.n	a0fa <Can_IsControllersBusy+0x46>
                *   The function Can_Init shall raise the error CAN_E_TRANSITION if the CAN
                *   controllers are not in state UNINIT.
                */
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_TRANSITION);
            #endif
                bCtrlBusy = TRUE;
    a0f2:	2301      	movs	r3, #1
    a0f4:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    a0f8:	e008      	b.n	a10c <Can_IsControllersBusy+0x58>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a0fa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0fe:	3301      	adds	r3, #1
    a100:	f88d 300e 	strb.w	r3, [sp, #14]
    a104:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a108:	2b01      	cmp	r3, #1
    a10a:	d9df      	bls.n	a0cc <Can_IsControllersBusy+0x18>
            }
        }
    }

    return bCtrlBusy;
    a10c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a110:	4618      	mov	r0, r3
    a112:	b004      	add	sp, #16
    a114:	4770      	bx	lr
    a116:	bf00      	nop
    a118:	1fff8e14 	.word	0x1fff8e14
    a11c:	1fff8e0c 	.word	0x1fff8e0c

0000a120 <Can_InitControllers>:

static void Can_InitControllers(uint32 u32CoreId)
{
    a120:	b500      	push	{lr}
    a122:	b085      	sub	sp, #20
    a124:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    a126:	2300      	movs	r3, #0
    a128:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    a12c:	2300      	movs	r3, #0
    a12e:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a132:	2300      	movs	r3, #0
    a134:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a136:	2300      	movs	r3, #0
    a138:	f88d 300e 	strb.w	r3, [sp, #14]
    a13c:	e035      	b.n	a1aa <Can_InitControllers+0x8a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a13e:	4a30      	ldr	r2, [pc, #192]	; (a200 <Can_InitControllers+0xe0>)
    a140:	9b01      	ldr	r3, [sp, #4]
    a142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a146:	695a      	ldr	r2, [r3, #20]
    a148:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a14c:	009b      	lsls	r3, r3, #2
    a14e:	4413      	add	r3, r2
    a150:	681b      	ldr	r3, [r3, #0]
    a152:	2b00      	cmp	r3, #0
    a154:	d024      	beq.n	a1a0 <Can_InitControllers+0x80>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a156:	4a2a      	ldr	r2, [pc, #168]	; (a200 <Can_InitControllers+0xe0>)
    a158:	9b01      	ldr	r3, [sp, #4]
    a15a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a15e:	695a      	ldr	r2, [r3, #20]
    a160:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a164:	009b      	lsls	r3, r3, #2
    a166:	4413      	add	r3, r2
    a168:	681b      	ldr	r3, [r3, #0]
    a16a:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    a16c:	9b02      	ldr	r3, [sp, #8]
    a16e:	7a1b      	ldrb	r3, [r3, #8]
    a170:	2b00      	cmp	r3, #0
    a172:	d015      	beq.n	a1a0 <Can_InitControllers+0x80>
                */
            #if ((CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) || (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON))
                Can_au16BaudrateIDConfig[u8ControllerID] = Can_pController->Can_u16DefaultBaudrateID;
            #endif
                /* Reset interrupt level to default value after re-init */
                Can_au8DisableInterruptLevel[u8ControllerID] = 0U;
    a174:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a178:	4a22      	ldr	r2, [pc, #136]	; (a204 <Can_InitControllers+0xe4>)
    a17a:	2100      	movs	r1, #0
    a17c:	54d1      	strb	r1, [r2, r3]
            #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
                Can_apxCtrlConfigIcomIndex[u8ControllerID] = NULL_PTR;
            #endif
                /* Init the controller */
                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_Init(Can_pController))
    a17e:	9802      	ldr	r0, [sp, #8]
    a180:	f000 ff82 	bl	b088 <Can_43_FLEXCAN_Ipw_Init>
    a184:	4603      	mov	r3, r0
    a186:	2b00      	cmp	r3, #0
    a188:	d106      	bne.n	a198 <Can_InitControllers+0x78>
                {
                    Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    a18a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a18e:	4a1e      	ldr	r2, [pc, #120]	; (a208 <Can_InitControllers+0xe8>)
    a190:	2102      	movs	r1, #2
    a192:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    a196:	e003      	b.n	a1a0 <Can_InitControllers+0x80>
                else
                {
                    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_INIT_FAILED);
                    #endif
                    bCtrlBusy = TRUE;
    a198:	2301      	movs	r3, #1
    a19a:	f88d 300f 	strb.w	r3, [sp, #15]
                    break;
    a19e:	e008      	b.n	a1b2 <Can_InitControllers+0x92>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a1a0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a1a4:	3301      	adds	r3, #1
    a1a6:	f88d 300e 	strb.w	r3, [sp, #14]
    a1aa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a1ae:	2b01      	cmp	r3, #1
    a1b0:	d9c5      	bls.n	a13e <Can_InitControllers+0x1e>
    }
    /*
    *  [SWS_Can_00246] After initializing all controllers inside the HW Unit, the function Can_Init
    *   shall change the module state to CAN_READY.
    */
    if (TRUE == bCtrlBusy)
    a1b2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a1b6:	2b00      	cmp	r3, #0
    a1b8:	d01e      	beq.n	a1f8 <Can_InitControllers+0xd8>
    {
        /* Init failed due to one or more controllers failed, reset status of all  core's current controllers */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a1ba:	2300      	movs	r3, #0
    a1bc:	f88d 300e 	strb.w	r3, [sp, #14]
    a1c0:	e016      	b.n	a1f0 <Can_InitControllers+0xd0>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a1c2:	4a0f      	ldr	r2, [pc, #60]	; (a200 <Can_InitControllers+0xe0>)
    a1c4:	9b01      	ldr	r3, [sp, #4]
    a1c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1ca:	695a      	ldr	r2, [r3, #20]
    a1cc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a1d0:	009b      	lsls	r3, r3, #2
    a1d2:	4413      	add	r3, r2
    a1d4:	681b      	ldr	r3, [r3, #0]
    a1d6:	2b00      	cmp	r3, #0
    a1d8:	d005      	beq.n	a1e6 <Can_InitControllers+0xc6>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    a1da:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a1de:	4a0a      	ldr	r2, [pc, #40]	; (a208 <Can_InitControllers+0xe8>)
    a1e0:	2100      	movs	r1, #0
    a1e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a1e6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a1ea:	3301      	adds	r3, #1
    a1ec:	f88d 300e 	strb.w	r3, [sp, #14]
    a1f0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a1f4:	2b01      	cmp	r3, #1
    a1f6:	d9e4      	bls.n	a1c2 <Can_InitControllers+0xa2>
    else
    {
        Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_READY;
    }
#endif
}
    a1f8:	bf00      	nop
    a1fa:	b005      	add	sp, #20
    a1fc:	f85d fb04 	ldr.w	pc, [sp], #4
    a200:	1fff8e14 	.word	0x1fff8e14
    a204:	1fff8e08 	.word	0x1fff8e08
    a208:	1fff8e0c 	.word	0x1fff8e0c

0000a20c <Can_DeInitControllers>:
    return bResult;
}
#endif

static void Can_DeInitControllers(uint32 u32CoreId)
{
    a20c:	b500      	push	{lr}
    a20e:	b085      	sub	sp, #20
    a210:	9001      	str	r0, [sp, #4]
    uint8 u8ControllerID = 0U;
    a212:	2300      	movs	r3, #0
    a214:	f88d 300f 	strb.w	r3, [sp, #15]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a218:	2300      	movs	r3, #0
    a21a:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a21c:	2300      	movs	r3, #0
    a21e:	f88d 300f 	strb.w	r3, [sp, #15]
    a222:	e028      	b.n	a276 <Can_DeInitControllers+0x6a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a224:	4a18      	ldr	r2, [pc, #96]	; (a288 <Can_DeInitControllers+0x7c>)
    a226:	9b01      	ldr	r3, [sp, #4]
    a228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a22c:	695a      	ldr	r2, [r3, #20]
    a22e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a232:	009b      	lsls	r3, r3, #2
    a234:	4413      	add	r3, r2
    a236:	681b      	ldr	r3, [r3, #0]
    a238:	2b00      	cmp	r3, #0
    a23a:	d017      	beq.n	a26c <Can_DeInitControllers+0x60>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a23c:	4a12      	ldr	r2, [pc, #72]	; (a288 <Can_DeInitControllers+0x7c>)
    a23e:	9b01      	ldr	r3, [sp, #4]
    a240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a244:	695a      	ldr	r2, [r3, #20]
    a246:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a24a:	009b      	lsls	r3, r3, #2
    a24c:	4413      	add	r3, r2
    a24e:	681b      	ldr	r3, [r3, #0]
    a250:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    a252:	9b02      	ldr	r3, [sp, #8]
    a254:	7a1b      	ldrb	r3, [r3, #8]
    a256:	2b00      	cmp	r3, #0
    a258:	d008      	beq.n	a26c <Can_DeInitControllers+0x60>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    a25a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a25e:	4a0b      	ldr	r2, [pc, #44]	; (a28c <Can_DeInitControllers+0x80>)
    a260:	2100      	movs	r1, #0
    a262:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                Can_43_FLEXCAN_Ipw_DeInit(Can_pController);
    a266:	9802      	ldr	r0, [sp, #8]
    a268:	f001 f81a 	bl	b2a0 <Can_43_FLEXCAN_Ipw_DeInit>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a26c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a270:	3301      	adds	r3, #1
    a272:	f88d 300f 	strb.w	r3, [sp, #15]
    a276:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a27a:	2b01      	cmp	r3, #1
    a27c:	d9d2      	bls.n	a224 <Can_DeInitControllers+0x18>
            }
        }
    }
}
    a27e:	bf00      	nop
    a280:	bf00      	nop
    a282:	b005      	add	sp, #20
    a284:	f85d fb04 	ldr.w	pc, [sp], #4
    a288:	1fff8e14 	.word	0x1fff8e14
    a28c:	1fff8e0c 	.word	0x1fff8e0c

0000a290 <Can_43_FLEXCAN_Init>:
* @api
*/

/* implements     Can_Init_Activity */
void Can_43_FLEXCAN_Init(const Can_43_FLEXCAN_ConfigType * Config)
{
    a290:	b500      	push	{lr}
    a292:	b085      	sub	sp, #20
    a294:	9001      	str	r0, [sp, #4]
    uint32 u32CoreId = 0U;
    a296:	2300      	movs	r3, #0
    a298:	9303      	str	r3, [sp, #12]
    boolean bCtrlBusy = FALSE;
    a29a:	2300      	movs	r3, #0
    a29c:	f88d 300b 	strb.w	r3, [sp, #11]
#if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
    boolean bValidCoreID = FALSE;
#endif

    u32CoreId = Can_GetCoreID();
    a2a0:	2300      	movs	r3, #0
    a2a2:	9303      	str	r3, [sp, #12]
        #if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
            if (u32CoreId == Config->Can_u32CoreID)
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Copy pointer to current Can Driver configuration. */
                Can_apxConfig[u32CoreId] = Config;
    a2a4:	490c      	ldr	r1, [pc, #48]	; (a2d8 <Can_43_FLEXCAN_Init+0x48>)
    a2a6:	9b03      	ldr	r3, [sp, #12]
    a2a8:	9a01      	ldr	r2, [sp, #4]
    a2aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (TRUE == bValidCoreID)
            {
#endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Fault Injection point to allow to test SWS_Can_00408 */
                MCAL_FAULT_INJECTION_POINT(CAN_FIP_1_CHANGE_DRIVER_TO_UNINITIALIZED);
                bCtrlBusy = Can_IsControllersBusy(u32CoreId);
    a2ae:	9803      	ldr	r0, [sp, #12]
    a2b0:	f7ff ff00 	bl	a0b4 <Can_IsControllersBusy>
    a2b4:	4603      	mov	r3, r0
    a2b6:	f88d 300b 	strb.w	r3, [sp, #11]
                if (FALSE == bCtrlBusy)
    a2ba:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a2be:	f083 0301 	eor.w	r3, r3, #1
    a2c2:	b2db      	uxtb	r3, r3
    a2c4:	2b00      	cmp	r3, #0
    a2c6:	d002      	beq.n	a2ce <Can_43_FLEXCAN_Init+0x3e>
                {
                    Can_InitControllers(u32CoreId);
    a2c8:	9803      	ldr	r0, [sp, #12]
    a2ca:	f7ff ff29 	bl	a120 <Can_InitControllers>

#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif /* (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) */
}
    a2ce:	bf00      	nop
    a2d0:	b005      	add	sp, #20
    a2d2:	f85d fb04 	ldr.w	pc, [sp], #4
    a2d6:	bf00      	nop
    a2d8:	1fff8e14 	.word	0x1fff8e14

0000a2dc <Can_43_FLEXCAN_DeInit>:
* @post           Can_DeInit shall de-initialize all the controllers and set the driver in UNINIT state.
*
*/
/* implements     Can_DeInit_Activity */
void Can_43_FLEXCAN_DeInit(void)
{
    a2dc:	b500      	push	{lr}
    a2de:	b083      	sub	sp, #12
    /* Variable for indexing the controllers. */
    uint8 u8ControllerID = 0U;
    a2e0:	2300      	movs	r3, #0
    a2e2:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean bCtrlBusy = FALSE;
    a2e6:	2300      	movs	r3, #0
    a2e8:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 u32CoreId = 0U;
    a2ec:	2300      	movs	r3, #0
    a2ee:	9300      	str	r3, [sp, #0]

    u32CoreId = Can_GetCoreID();
    a2f0:	2300      	movs	r3, #0
    a2f2:	9300      	str	r3, [sp, #0]
    }
    else
    {
#endif
        /* Loop through all Can controllers configured based CanControllerId parameter. */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a2f4:	2300      	movs	r3, #0
    a2f6:	f88d 3007 	strb.w	r3, [sp, #7]
    a2fa:	e01b      	b.n	a334 <Can_43_FLEXCAN_DeInit+0x58>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a2fc:	4a19      	ldr	r2, [pc, #100]	; (a364 <Can_43_FLEXCAN_DeInit+0x88>)
    a2fe:	9b00      	ldr	r3, [sp, #0]
    a300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a304:	695a      	ldr	r2, [r3, #20]
    a306:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a30a:	009b      	lsls	r3, r3, #2
    a30c:	4413      	add	r3, r2
    a30e:	681b      	ldr	r3, [r3, #0]
    a310:	2b00      	cmp	r3, #0
    a312:	d00a      	beq.n	a32a <Can_43_FLEXCAN_DeInit+0x4e>
            {
                if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    a314:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a318:	4a13      	ldr	r2, [pc, #76]	; (a368 <Can_43_FLEXCAN_DeInit+0x8c>)
    a31a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a31e:	2b01      	cmp	r3, #1
    a320:	d103      	bne.n	a32a <Can_43_FLEXCAN_DeInit+0x4e>
                    *   if any of the CAN controllers is in state STARTED.
                    */
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_DEINIT, (uint8)CAN_43_FLEXCAN_E_TRANSITION);
                #endif
                    /* Controller is busy */
                    bCtrlBusy =  TRUE;
    a322:	2301      	movs	r3, #1
    a324:	f88d 3006 	strb.w	r3, [sp, #6]
                    /* Skipping the loop if any of Can Controller is in state STARTED */
                    break;
    a328:	e008      	b.n	a33c <Can_43_FLEXCAN_DeInit+0x60>
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a32a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a32e:	3301      	adds	r3, #1
    a330:	f88d 3007 	strb.w	r3, [sp, #7]
    a334:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a338:	2b01      	cmp	r3, #1
    a33a:	d9df      	bls.n	a2fc <Can_43_FLEXCAN_DeInit+0x20>
                }
            }
        }
        /* All Controllers are not busy */
        if (FALSE == bCtrlBusy)
    a33c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a340:	f083 0301 	eor.w	r3, r3, #1
    a344:	b2db      	uxtb	r3, r3
    a346:	2b00      	cmp	r3, #0
    a348:	d007      	beq.n	a35a <Can_43_FLEXCAN_DeInit+0x7e>
            *   [SWS_Can_91010] The function Can_DeInit shall change the module state to
            *   CAN_UNINIT before de-initializing all controllers inside the HW unit
            */
            Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_UNINIT;
        #endif
            Can_DeInitControllers(u32CoreId);
    a34a:	9800      	ldr	r0, [sp, #0]
    a34c:	f7ff ff5e 	bl	a20c <Can_DeInitControllers>
            Can_apxConfig[u32CoreId] = NULL_PTR;
    a350:	4a04      	ldr	r2, [pc, #16]	; (a364 <Can_43_FLEXCAN_DeInit+0x88>)
    a352:	9b00      	ldr	r3, [sp, #0]
    a354:	2100      	movs	r1, #0
    a356:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
}
    a35a:	bf00      	nop
    a35c:	b003      	add	sp, #12
    a35e:	f85d fb04 	ldr.w	pc, [sp], #4
    a362:	bf00      	nop
    a364:	1fff8e14 	.word	0x1fff8e14
    a368:	1fff8e0c 	.word	0x1fff8e0c

0000a36c <Can_43_FLEXCAN_SetControllerMode>:
*
* @api
*/
/* implements     Can_SetControllerMode_Activity */
Std_ReturnType Can_43_FLEXCAN_SetControllerMode(uint8 Controller, Can_ControllerStateType Transition)
{
    a36c:	b500      	push	{lr}
    a36e:	b087      	sub	sp, #28
    a370:	4603      	mov	r3, r0
    a372:	9100      	str	r1, [sp, #0]
    a374:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a378:	2301      	movs	r3, #1
    a37a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a37e:	2300      	movs	r3, #0
    a380:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a382:	2300      	movs	r3, #0
    a384:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a386:	2300      	movs	r3, #0
    a388:	9304      	str	r3, [sp, #16]
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    if (TRUE == Can_ValidateController(u32CoreId, Controller, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE))
    {
#endif
                Can_pController = (const Can_43_FLEXCAN_ControllerConfigType *)(Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    a38a:	4a47      	ldr	r2, [pc, #284]	; (a4a8 <Can_43_FLEXCAN_SetControllerMode+0x13c>)
    a38c:	9b04      	ldr	r3, [sp, #16]
    a38e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a392:	695a      	ldr	r2, [r3, #20]
    a394:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a398:	009b      	lsls	r3, r3, #2
    a39a:	4413      	add	r3, r2
    a39c:	681b      	ldr	r3, [r3, #0]
    a39e:	9303      	str	r3, [sp, #12]
                /*
                *   [SWS_Can_00017] The function Can_SetControllerMode shall perform software
                *   triggered state transitions of the CAN controller State machine.
                */
                switch (Transition)
    a3a0:	9b00      	ldr	r3, [sp, #0]
    a3a2:	2b03      	cmp	r3, #3
    a3a4:	d05d      	beq.n	a462 <Can_43_FLEXCAN_SetControllerMode+0xf6>
    a3a6:	9b00      	ldr	r3, [sp, #0]
    a3a8:	2b03      	cmp	r3, #3
    a3aa:	d874      	bhi.n	a496 <Can_43_FLEXCAN_SetControllerMode+0x12a>
    a3ac:	9b00      	ldr	r3, [sp, #0]
    a3ae:	2b01      	cmp	r3, #1
    a3b0:	d003      	beq.n	a3ba <Can_43_FLEXCAN_SetControllerMode+0x4e>
    a3b2:	9b00      	ldr	r3, [sp, #0]
    a3b4:	2b02      	cmp	r3, #2
    a3b6:	d01d      	beq.n	a3f4 <Can_43_FLEXCAN_SetControllerMode+0x88>
                        *   has been requested, the function Can_SetControllerMode shall raise the error CAN_E_TRANSITION and
                        *   return E_NOT_OK
                        */
                        (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_TRANSITION);
                    #endif
                        break;
    a3b8:	e06d      	b.n	a496 <Can_43_FLEXCAN_SetControllerMode+0x12a>
                        if (CAN_CS_STOPPED == Can_eControllerState[Controller])
    a3ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3be:	4a3b      	ldr	r2, [pc, #236]	; (a4ac <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a3c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3c4:	2b02      	cmp	r3, #2
    a3c6:	d168      	bne.n	a49a <Can_43_FLEXCAN_SetControllerMode+0x12e>
                            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStartMode(Can_pController))
    a3c8:	9803      	ldr	r0, [sp, #12]
    a3ca:	f000 ffa3 	bl	b314 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>
    a3ce:	4603      	mov	r3, r0
    a3d0:	2b00      	cmp	r3, #0
    a3d2:	d162      	bne.n	a49a <Can_43_FLEXCAN_SetControllerMode+0x12e>
                                Can_eControllerState[Controller] = CAN_CS_STARTED;
    a3d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3d8:	4a34      	ldr	r2, [pc, #208]	; (a4ac <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a3da:	2101      	movs	r1, #1
    a3dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STARTED);
    a3e0:	9b03      	ldr	r3, [sp, #12]
    a3e2:	781b      	ldrb	r3, [r3, #0]
    a3e4:	2101      	movs	r1, #1
    a3e6:	4618      	mov	r0, r3
    a3e8:	f00c fe94 	bl	17114 <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    a3ec:	2300      	movs	r3, #0
    a3ee:	f88d 3017 	strb.w	r3, [sp, #23]
                        break;
    a3f2:	e052      	b.n	a49a <Can_43_FLEXCAN_SetControllerMode+0x12e>
                        switch (Can_eControllerState[Controller])
    a3f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3f8:	4a2c      	ldr	r2, [pc, #176]	; (a4ac <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a3fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3fe:	2b01      	cmp	r3, #1
    a400:	d005      	beq.n	a40e <Can_43_FLEXCAN_SetControllerMode+0xa2>
    a402:	2b00      	cmp	r3, #0
    a404:	d029      	beq.n	a45a <Can_43_FLEXCAN_SetControllerMode+0xee>
    a406:	3b02      	subs	r3, #2
    a408:	2b01      	cmp	r3, #1
    a40a:	d826      	bhi.n	a45a <Can_43_FLEXCAN_SetControllerMode+0xee>
    a40c:	e015      	b.n	a43a <Can_43_FLEXCAN_SetControllerMode+0xce>
                                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    a40e:	9803      	ldr	r0, [sp, #12]
    a410:	f000 fff2 	bl	b3f8 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    a414:	4603      	mov	r3, r0
    a416:	2b00      	cmp	r3, #0
    a418:	d121      	bne.n	a45e <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                    Can_eControllerState[Controller] = CAN_CS_STOPPED;
    a41a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a41e:	4a23      	ldr	r2, [pc, #140]	; (a4ac <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a420:	2102      	movs	r1, #2
    a422:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                    CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    a426:	9b03      	ldr	r3, [sp, #12]
    a428:	781b      	ldrb	r3, [r3, #0]
    a42a:	2102      	movs	r1, #2
    a42c:	4618      	mov	r0, r3
    a42e:	f00c fe71 	bl	17114 <CanIf_ControllerModeIndication>
                                    eRetVal = E_OK;
    a432:	2300      	movs	r3, #0
    a434:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    a438:	e011      	b.n	a45e <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                Can_eControllerState[Controller] = CAN_CS_STOPPED;
    a43a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a43e:	4a1b      	ldr	r2, [pc, #108]	; (a4ac <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a440:	2102      	movs	r1, #2
    a442:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    a446:	9b03      	ldr	r3, [sp, #12]
    a448:	781b      	ldrb	r3, [r3, #0]
    a44a:	2102      	movs	r1, #2
    a44c:	4618      	mov	r0, r3
    a44e:	f00c fe61 	bl	17114 <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    a452:	2300      	movs	r3, #0
    a454:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    a458:	e002      	b.n	a460 <Can_43_FLEXCAN_SetControllerMode+0xf4>
                                break;
    a45a:	bf00      	nop
    a45c:	e01e      	b.n	a49c <Can_43_FLEXCAN_SetControllerMode+0x130>
                                break;
    a45e:	bf00      	nop
                        break;
    a460:	e01c      	b.n	a49c <Can_43_FLEXCAN_SetControllerMode+0x130>
                        switch (Can_eControllerState[Controller])
    a462:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a466:	4a11      	ldr	r2, [pc, #68]	; (a4ac <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a46c:	3b02      	subs	r3, #2
    a46e:	2b01      	cmp	r3, #1
    a470:	d80f      	bhi.n	a492 <Can_43_FLEXCAN_SetControllerMode+0x126>
                                Can_eControllerState[Controller] = CAN_CS_SLEEP;
    a472:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a476:	4a0d      	ldr	r2, [pc, #52]	; (a4ac <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a478:	2103      	movs	r1, #3
    a47a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_SLEEP);
    a47e:	9b03      	ldr	r3, [sp, #12]
    a480:	781b      	ldrb	r3, [r3, #0]
    a482:	2103      	movs	r1, #3
    a484:	4618      	mov	r0, r3
    a486:	f00c fe45 	bl	17114 <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    a48a:	2300      	movs	r3, #0
    a48c:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    a490:	e000      	b.n	a494 <Can_43_FLEXCAN_SetControllerMode+0x128>
                                break;
    a492:	bf00      	nop
                        break;
    a494:	e002      	b.n	a49c <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    a496:	bf00      	nop
    a498:	e000      	b.n	a49c <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    a49a:	bf00      	nop
                    }
                }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eRetVal;
    a49c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a4a0:	4618      	mov	r0, r3
    a4a2:	b007      	add	sp, #28
    a4a4:	f85d fb04 	ldr.w	pc, [sp], #4
    a4a8:	1fff8e14 	.word	0x1fff8e14
    a4ac:	1fff8e0c 	.word	0x1fff8e0c

0000a4b0 <Can_43_FLEXCAN_DisableControllerInterrupts>:
*
* @api
*/
/* implements     Can_DisableControllerInterrupts_Activity */
void Can_43_FLEXCAN_DisableControllerInterrupts(uint8 Controller)
{
    a4b0:	b500      	push	{lr}
    a4b2:	b085      	sub	sp, #20
    a4b4:	4603      	mov	r3, r0
    a4b6:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    a4ba:	2300      	movs	r3, #0
    a4bc:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a4be:	2300      	movs	r3, #0
    a4c0:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    a4c2:	2300      	movs	r3, #0
    a4c4:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    a4c6:	4a10      	ldr	r2, [pc, #64]	; (a508 <Can_43_FLEXCAN_DisableControllerInterrupts+0x58>)
    a4c8:	9b03      	ldr	r3, [sp, #12]
    a4ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4ce:	695a      	ldr	r2, [r3, #20]
    a4d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a4d4:	009b      	lsls	r3, r3, #2
    a4d6:	4413      	add	r3, r2
    a4d8:	681b      	ldr	r3, [r3, #0]
    a4da:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    a4dc:	f009 fc1c 	bl	13d18 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_au8DisableInterruptLevel[Controller] += 1U;
    a4e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a4e4:	4a09      	ldr	r2, [pc, #36]	; (a50c <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    a4e6:	5cd2      	ldrb	r2, [r2, r3]
    a4e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a4ec:	3201      	adds	r2, #1
    a4ee:	b2d1      	uxtb	r1, r2
    a4f0:	4a06      	ldr	r2, [pc, #24]	; (a50c <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    a4f2:	54d1      	strb	r1, [r2, r3]
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    a4f4:	f009 fc3c 	bl	13d70 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(Can_pController);
    a4f8:	9802      	ldr	r0, [sp, #8]
    a4fa:	f000 fffb 	bl	b4f4 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    a4fe:	bf00      	nop
    a500:	b005      	add	sp, #20
    a502:	f85d fb04 	ldr.w	pc, [sp], #4
    a506:	bf00      	nop
    a508:	1fff8e14 	.word	0x1fff8e14
    a50c:	1fff8e08 	.word	0x1fff8e08

0000a510 <Can_43_FLEXCAN_EnableControllerInterrupts>:
*
* @api
*/
/* implements     Can_EnableControllerInterrupts_Activity */
void Can_43_FLEXCAN_EnableControllerInterrupts(uint8 Controller)
{
    a510:	b500      	push	{lr}
    a512:	b085      	sub	sp, #20
    a514:	4603      	mov	r3, r0
    a516:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    a51a:	2300      	movs	r3, #0
    a51c:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a51e:	2300      	movs	r3, #0
    a520:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    a522:	2300      	movs	r3, #0
    a524:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    a526:	4a16      	ldr	r2, [pc, #88]	; (a580 <Can_43_FLEXCAN_EnableControllerInterrupts+0x70>)
    a528:	9b03      	ldr	r3, [sp, #12]
    a52a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a52e:	695a      	ldr	r2, [r3, #20]
    a530:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a534:	009b      	lsls	r3, r3, #2
    a536:	4413      	add	r3, r2
    a538:	681b      	ldr	r3, [r3, #0]
    a53a:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    a53c:	f009 fc3e 	bl	13dbc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>
                if (Can_au8DisableInterruptLevel[Controller] > 0U)
    a540:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a544:	4a0f      	ldr	r2, [pc, #60]	; (a584 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    a546:	5cd3      	ldrb	r3, [r2, r3]
    a548:	2b00      	cmp	r3, #0
    a54a:	d009      	beq.n	a560 <Can_43_FLEXCAN_EnableControllerInterrupts+0x50>
                {
                    Can_au8DisableInterruptLevel[Controller] -= 1U;
    a54c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a550:	4a0c      	ldr	r2, [pc, #48]	; (a584 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    a552:	5cd2      	ldrb	r2, [r2, r3]
    a554:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a558:	3a01      	subs	r2, #1
    a55a:	b2d1      	uxtb	r1, r2
    a55c:	4a09      	ldr	r2, [pc, #36]	; (a584 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    a55e:	54d1      	strb	r1, [r2, r3]
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    a560:	f009 fc58 	bl	13e14 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>

                if (0U == Can_au8DisableInterruptLevel[Controller])
    a564:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a568:	4a06      	ldr	r2, [pc, #24]	; (a584 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    a56a:	5cd3      	ldrb	r3, [r2, r3]
    a56c:	2b00      	cmp	r3, #0
    a56e:	d102      	bne.n	a576 <Can_43_FLEXCAN_EnableControllerInterrupts+0x66>
                {
                    Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(Can_pController);
    a570:	9802      	ldr	r0, [sp, #8]
    a572:	f000 ffe9 	bl	b548 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    a576:	bf00      	nop
    a578:	b005      	add	sp, #20
    a57a:	f85d fb04 	ldr.w	pc, [sp], #4
    a57e:	bf00      	nop
    a580:	1fff8e14 	.word	0x1fff8e14
    a584:	1fff8e08 	.word	0x1fff8e08

0000a588 <Can_43_FLEXCAN_GetControllerErrorState>:
Std_ReturnType Can_43_FLEXCAN_GetControllerErrorState
(
    uint8 ControllerId,
    Can_ErrorStateType * ErrorStatePtr
)
{
    a588:	b500      	push	{lr}
    a58a:	b087      	sub	sp, #28
    a58c:	4603      	mov	r3, r0
    a58e:	9100      	str	r1, [sp, #0]
    a590:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a594:	2301      	movs	r3, #1
    a596:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 errorState = 0U;
    a59a:	2300      	movs	r3, #0
    a59c:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 u32CoreId = 0U;
    a5a0:	2300      	movs	r3, #0
    a5a2:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a5a4:	2300      	movs	r3, #0
    a5a6:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a5a8:	2300      	movs	r3, #0
    a5aa:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_ERROR_STATE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    a5ac:	4a18      	ldr	r2, [pc, #96]	; (a610 <Can_43_FLEXCAN_GetControllerErrorState+0x88>)
    a5ae:	9b04      	ldr	r3, [sp, #16]
    a5b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5b4:	695a      	ldr	r2, [r3, #20]
    a5b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a5ba:	009b      	lsls	r3, r3, #2
    a5bc:	4413      	add	r3, r2
    a5be:	681b      	ldr	r3, [r3, #0]
    a5c0:	9303      	str	r3, [sp, #12]
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerErrorState(Can_pController, &errorState);
    a5c2:	f10d 030b 	add.w	r3, sp, #11
    a5c6:	4619      	mov	r1, r3
    a5c8:	9803      	ldr	r0, [sp, #12]
    a5ca:	f000 ffe9 	bl	b5a0 <Can_43_FLEXCAN_Ipw_GetControllerErrorState>
    a5ce:	4603      	mov	r3, r0
    a5d0:	f88d 3017 	strb.w	r3, [sp, #23]
                    if(eRetVal == (Std_ReturnType)E_OK)
    a5d4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a5d8:	2b00      	cmp	r3, #0
    a5da:	d112      	bne.n	a602 <Can_43_FLEXCAN_GetControllerErrorState+0x7a>
                    {
                        switch (errorState)
    a5dc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a5e0:	2b00      	cmp	r3, #0
    a5e2:	d002      	beq.n	a5ea <Can_43_FLEXCAN_GetControllerErrorState+0x62>
    a5e4:	2b01      	cmp	r3, #1
    a5e6:	d004      	beq.n	a5f2 <Can_43_FLEXCAN_GetControllerErrorState+0x6a>
    a5e8:	e007      	b.n	a5fa <Can_43_FLEXCAN_GetControllerErrorState+0x72>
                        {
                            case 0x00U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_ACTIVE;
    a5ea:	9b00      	ldr	r3, [sp, #0]
    a5ec:	2200      	movs	r2, #0
    a5ee:	601a      	str	r2, [r3, #0]
                                break;
    a5f0:	e008      	b.n	a604 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            case 0x01U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_PASSIVE;
    a5f2:	9b00      	ldr	r3, [sp, #0]
    a5f4:	2201      	movs	r2, #1
    a5f6:	601a      	str	r2, [r3, #0]
                                break;
    a5f8:	e004      	b.n	a604 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            default:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_BUSOFF;
    a5fa:	9b00      	ldr	r3, [sp, #0]
    a5fc:	2202      	movs	r2, #2
    a5fe:	601a      	str	r2, [r3, #0]
                                break;
    a600:	e000      	b.n	a604 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                        }
                    }
    a602:	bf00      	nop
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                }
    }
#endif
    return eRetVal;
    a604:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a608:	4618      	mov	r0, r3
    a60a:	b007      	add	sp, #28
    a60c:	f85d fb04 	ldr.w	pc, [sp], #4
    a610:	1fff8e14 	.word	0x1fff8e14

0000a614 <Can_43_FLEXCAN_GetControllerMode>:
Std_ReturnType Can_43_FLEXCAN_GetControllerMode
(
    uint8 Controller,
    Can_ControllerStateType * ControllerModePtr
)
{
    a614:	b084      	sub	sp, #16
    a616:	4603      	mov	r3, r0
    a618:	9100      	str	r1, [sp, #0]
    a61a:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a61e:	2301      	movs	r3, #1
    a620:	f88d 300f 	strb.w	r3, [sp, #15]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    *ControllerModePtr = Can_eControllerState[Controller];
    a624:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a628:	4a06      	ldr	r2, [pc, #24]	; (a644 <Can_43_FLEXCAN_GetControllerMode+0x30>)
    a62a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    a62e:	9b00      	ldr	r3, [sp, #0]
    a630:	601a      	str	r2, [r3, #0]
                    eRetVal = E_OK;
    a632:	2300      	movs	r3, #0
    a634:	f88d 300f 	strb.w	r3, [sp, #15]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    a638:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a63c:	4618      	mov	r0, r3
    a63e:	b004      	add	sp, #16
    a640:	4770      	bx	lr
    a642:	bf00      	nop
    a644:	1fff8e0c 	.word	0x1fff8e0c

0000a648 <Can_43_FLEXCAN_GetControllerRxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerRxErrorCounter
(
    uint8 ControllerId,
    uint8 * RxErrorCounterPtr
)
{
    a648:	b500      	push	{lr}
    a64a:	b087      	sub	sp, #28
    a64c:	4603      	mov	r3, r0
    a64e:	9100      	str	r1, [sp, #0]
    a650:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a654:	2301      	movs	r3, #1
    a656:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a65a:	2300      	movs	r3, #0
    a65c:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a65e:	2300      	movs	r3, #0
    a660:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a662:	2300      	movs	r3, #0
    a664:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_RX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    a666:	4a0c      	ldr	r2, [pc, #48]	; (a698 <Can_43_FLEXCAN_GetControllerRxErrorCounter+0x50>)
    a668:	9b04      	ldr	r3, [sp, #16]
    a66a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a66e:	695a      	ldr	r2, [r3, #20]
    a670:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a674:	009b      	lsls	r3, r3, #2
    a676:	4413      	add	r3, r2
    a678:	681b      	ldr	r3, [r3, #0]
    a67a:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00515]: When the API Can_GetControllerRxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Rx error counter
                    *   register of Can Controller and shall return the Rx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(Can_pController, RxErrorCounterPtr);
    a67c:	9900      	ldr	r1, [sp, #0]
    a67e:	9803      	ldr	r0, [sp, #12]
    a680:	f000 ffb9 	bl	b5f6 <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>
    a684:	4603      	mov	r3, r0
    a686:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    a68a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a68e:	4618      	mov	r0, r3
    a690:	b007      	add	sp, #28
    a692:	f85d fb04 	ldr.w	pc, [sp], #4
    a696:	bf00      	nop
    a698:	1fff8e14 	.word	0x1fff8e14

0000a69c <Can_43_FLEXCAN_GetControllerTxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerTxErrorCounter
(
    uint8 ControllerId,
    uint8 * TxErrorCounterPtr
)
{
    a69c:	b500      	push	{lr}
    a69e:	b087      	sub	sp, #28
    a6a0:	4603      	mov	r3, r0
    a6a2:	9100      	str	r1, [sp, #0]
    a6a4:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a6a8:	2301      	movs	r3, #1
    a6aa:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a6ae:	2300      	movs	r3, #0
    a6b0:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a6b2:	2300      	movs	r3, #0
    a6b4:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a6b6:	2300      	movs	r3, #0
    a6b8:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_TX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    a6ba:	4a0c      	ldr	r2, [pc, #48]	; (a6ec <Can_43_FLEXCAN_GetControllerTxErrorCounter+0x50>)
    a6bc:	9b04      	ldr	r3, [sp, #16]
    a6be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6c2:	695a      	ldr	r2, [r3, #20]
    a6c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a6c8:	009b      	lsls	r3, r3, #2
    a6ca:	4413      	add	r3, r2
    a6cc:	681b      	ldr	r3, [r3, #0]
    a6ce:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00520]: When the API Can_GetControllerTxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Tx error counter
                    *   register of Can Controller and shall return the Tx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(Can_pController, TxErrorCounterPtr);
    a6d0:	9900      	ldr	r1, [sp, #0]
    a6d2:	9803      	ldr	r0, [sp, #12]
    a6d4:	f000 ff7d 	bl	b5d2 <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>
    a6d8:	4603      	mov	r3, r0
    a6da:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    a6de:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a6e2:	4618      	mov	r0, r3
    a6e4:	b007      	add	sp, #28
    a6e6:	f85d fb04 	ldr.w	pc, [sp], #4
    a6ea:	bf00      	nop
    a6ec:	1fff8e14 	.word	0x1fff8e14

0000a6f0 <Can_43_FLEXCAN_Write>:
Std_ReturnType Can_43_FLEXCAN_Write
(
    Can_HwHandleType Hth,
    const Can_PduType * PduInfo
)
{
    a6f0:	b500      	push	{lr}
    a6f2:	b089      	sub	sp, #36	; 0x24
    a6f4:	4603      	mov	r3, r0
    a6f6:	9100      	str	r1, [sp, #0]
    a6f8:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType eRetVal = E_NOT_OK;
    a6fc:	2301      	movs	r3, #1
    a6fe:	f88d 301f 	strb.w	r3, [sp, #31]
    uint8 u8ControllerID = 0U;
    a702:	2300      	movs	r3, #0
    a704:	f88d 301e 	strb.w	r3, [sp, #30]
    uint32 u32CoreId = 0U;
    a708:	2300      	movs	r3, #0
    a70a:	9306      	str	r3, [sp, #24]
    Can_HwHandleType HwObjectID = 0U;
    a70c:	2300      	movs	r3, #0
    a70e:	f8ad 3016 	strh.w	r3, [sp, #22]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a712:	2300      	movs	r3, #0
    a714:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    a716:	2300      	movs	r3, #0
    a718:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a71a:	2300      	movs	r3, #0
    a71c:	9306      	str	r3, [sp, #24]
    HwObjectID = Hth;
    a71e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a722:	f8ad 3016 	strh.w	r3, [sp, #22]
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_WRITE, CAN_43_FLEXCAN_E_PARAM_POINTER);
            }
            else
            {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pHwObjIDToCtrlIDMap[HwObjectID];
    a726:	4a1d      	ldr	r2, [pc, #116]	; (a79c <Can_43_FLEXCAN_Write+0xac>)
    a728:	9b06      	ldr	r3, [sp, #24]
    a72a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a72e:	68da      	ldr	r2, [r3, #12]
    a730:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    a734:	4413      	add	r3, r2
    a736:	781b      	ldrb	r3, [r3, #0]
    a738:	f88d 301e 	strb.w	r3, [sp, #30]
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a73c:	4a17      	ldr	r2, [pc, #92]	; (a79c <Can_43_FLEXCAN_Write+0xac>)
    a73e:	9b06      	ldr	r3, [sp, #24]
    a740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a744:	695a      	ldr	r2, [r3, #20]
    a746:	f89d 301e 	ldrb.w	r3, [sp, #30]
    a74a:	009b      	lsls	r3, r3, #2
    a74c:	4413      	add	r3, r2
    a74e:	681b      	ldr	r3, [r3, #0]
    a750:	9304      	str	r3, [sp, #16]
                if (NULL_PTR != Can_pController)
    a752:	9b04      	ldr	r3, [sp, #16]
    a754:	2b00      	cmp	r3, #0
    a756:	d01b      	beq.n	a790 <Can_43_FLEXCAN_Write+0xa0>
                {
                    Can_pHwObject = &((Can_apxConfig[u32CoreId])->Can_pHwObjectConfig[HwObjectID]);
    a758:	4a10      	ldr	r2, [pc, #64]	; (a79c <Can_43_FLEXCAN_Write+0xac>)
    a75a:	9b06      	ldr	r3, [sp, #24]
    a75c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a760:	6919      	ldr	r1, [r3, #16]
    a762:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    a766:	4613      	mov	r3, r2
    a768:	00db      	lsls	r3, r3, #3
    a76a:	4413      	add	r3, r2
    a76c:	009b      	lsls	r3, r3, #2
    a76e:	440b      	add	r3, r1
    a770:	9303      	str	r3, [sp, #12]
                #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    if ((TRUE == Can_ValidatePdu(Can_pController, Can_pHwObject, PduInfo)) && (CAN_CS_STARTED == Can_eControllerState[u8ControllerID]))
                #else
                    /* avoid unexpected behaviour when accessing to RAM */
                    if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    a772:	f89d 301e 	ldrb.w	r3, [sp, #30]
    a776:	4a0a      	ldr	r2, [pc, #40]	; (a7a0 <Can_43_FLEXCAN_Write+0xb0>)
    a778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a77c:	2b01      	cmp	r3, #1
    a77e:	d107      	bne.n	a790 <Can_43_FLEXCAN_Write+0xa0>
                            eRetVal = CAN_BUSY;
                        }
                        else
                        {
                    #endif
                            eRetVal = Can_43_FLEXCAN_Ipw_Write(Can_pController, Can_pHwObject, PduInfo);
    a780:	9a00      	ldr	r2, [sp, #0]
    a782:	9903      	ldr	r1, [sp, #12]
    a784:	9804      	ldr	r0, [sp, #16]
    a786:	f000 ff48 	bl	b61a <Can_43_FLEXCAN_Ipw_Write>
    a78a:	4603      	mov	r3, r0
    a78c:	f88d 301f 	strb.w	r3, [sp, #31]
                }
            #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
            }
    }
#endif
    return eRetVal;
    a790:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    a794:	4618      	mov	r0, r3
    a796:	b009      	add	sp, #36	; 0x24
    a798:	f85d fb04 	ldr.w	pc, [sp], #4
    a79c:	1fff8e14 	.word	0x1fff8e14
    a7a0:	1fff8e0c 	.word	0x1fff8e0c

0000a7a4 <Can_43_FLEXCAN_MainFunction_Write>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON */
    }
    a7a4:	bf00      	nop
    a7a6:	4770      	bx	lr

0000a7a8 <Can_43_FLEXCAN_MainFunction_Read>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON */
    }
    a7a8:	bf00      	nop
    a7aa:	4770      	bx	lr

0000a7ac <Can_43_FLEXCAN_MainFunction_BusOff>:
            }
            u8ControllerID++;
        }
    }
#endif /* CAN_43_FLEXCAN_BUSOFF_POLLING_SUPPORT == STD_ON */
}
    a7ac:	bf00      	nop
    a7ae:	4770      	bx	lr

0000a7b0 <Can_43_FLEXCAN_MainFunction_Mode>:
*
* @api
*/
/* implements     Can_MainFunction_Mode_Activity */
void Can_43_FLEXCAN_MainFunction_Mode(void)
{
    a7b0:	b500      	push	{lr}
    a7b2:	b085      	sub	sp, #20
    uint8 u8ControllerID = 0U;
    a7b4:	2300      	movs	r3, #0
    a7b6:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32CoreId = 0U;
    a7ba:	2300      	movs	r3, #0
    a7bc:	9302      	str	r3, [sp, #8]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a7be:	2300      	movs	r3, #0
    a7c0:	9301      	str	r3, [sp, #4]

    u32CoreId = Can_GetCoreID();
    a7c2:	2300      	movs	r3, #0
    a7c4:	9302      	str	r3, [sp, #8]
    if (NULL_PTR != (Can_apxConfig[u32CoreId]))
    a7c6:	4a17      	ldr	r2, [pc, #92]	; (a824 <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    a7c8:	9b02      	ldr	r3, [sp, #8]
    a7ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7ce:	2b00      	cmp	r3, #0
    a7d0:	d024      	beq.n	a81c <Can_43_FLEXCAN_MainFunction_Mode+0x6c>
    {
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    a7d2:	e01f      	b.n	a814 <Can_43_FLEXCAN_MainFunction_Mode+0x64>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a7d4:	4a13      	ldr	r2, [pc, #76]	; (a824 <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    a7d6:	9b02      	ldr	r3, [sp, #8]
    a7d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7dc:	695a      	ldr	r2, [r3, #20]
    a7de:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a7e2:	009b      	lsls	r3, r3, #2
    a7e4:	4413      	add	r3, r2
    a7e6:	681b      	ldr	r3, [r3, #0]
    a7e8:	9301      	str	r3, [sp, #4]
            if (NULL_PTR != Can_pController)
    a7ea:	9b01      	ldr	r3, [sp, #4]
    a7ec:	2b00      	cmp	r3, #0
    a7ee:	d00c      	beq.n	a80a <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
            {
                if (TRUE == Can_pController->Can_bActivation)
    a7f0:	9b01      	ldr	r3, [sp, #4]
    a7f2:	7a1b      	ldrb	r3, [r3, #8]
    a7f4:	2b00      	cmp	r3, #0
    a7f6:	d008      	beq.n	a80a <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
                {
                    Can_43_FLEXCAN_Ipw_MainFunction_Mode(Can_pController, &Can_eControllerState[u8ControllerID]);
    a7f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a7fc:	009b      	lsls	r3, r3, #2
    a7fe:	4a0a      	ldr	r2, [pc, #40]	; (a828 <Can_43_FLEXCAN_MainFunction_Mode+0x78>)
    a800:	4413      	add	r3, r2
    a802:	4619      	mov	r1, r3
    a804:	9801      	ldr	r0, [sp, #4]
    a806:	f001 f808 	bl	b81a <Can_43_FLEXCAN_Ipw_MainFunction_Mode>
                }
            }
            u8ControllerID++;
    a80a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a80e:	3301      	adds	r3, #1
    a810:	f88d 300f 	strb.w	r3, [sp, #15]
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    a814:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a818:	2b01      	cmp	r3, #1
    a81a:	d9db      	bls.n	a7d4 <Can_43_FLEXCAN_MainFunction_Mode+0x24>
        }
    }
}
    a81c:	bf00      	nop
    a81e:	b005      	add	sp, #20
    a820:	f85d fb04 	ldr.w	pc, [sp], #4
    a824:	1fff8e14 	.word	0x1fff8e14
    a828:	1fff8e0c 	.word	0x1fff8e0c

0000a82c <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>:
(
    uint8 u8CtrlOffset,
    uint8 u8MbIdx,
    Can_43_FLEXCAN_MbType mbType
)
{
    a82c:	b500      	push	{lr}
    a82e:	b087      	sub	sp, #28
    a830:	4603      	mov	r3, r0
    a832:	9200      	str	r2, [sp, #0]
    a834:	f88d 3007 	strb.w	r3, [sp, #7]
    a838:	460b      	mov	r3, r1
    a83a:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 u8ControllerID = 0U;
    a83e:	2300      	movs	r3, #0
    a840:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a844:	2300      	movs	r3, #0
    a846:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a848:	2300      	movs	r3, #0
    a84a:	9303      	str	r3, [sp, #12]

    MCAL_FAULT_INJECTION_POINT(CAN_FIP_2_CHANGE_DRIVER_TO_UNINITIALIZED);
    u32CoreId = Can_GetCoreID();
    a84c:	2300      	movs	r3, #0
    a84e:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    a850:	4a16      	ldr	r2, [pc, #88]	; (a8ac <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    a852:	9b04      	ldr	r3, [sp, #16]
    a854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a858:	2b00      	cmp	r3, #0
    a85a:	d022      	beq.n	a8a2 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    a85c:	4a13      	ldr	r2, [pc, #76]	; (a8ac <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    a85e:	9b04      	ldr	r3, [sp, #16]
    a860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a864:	689a      	ldr	r2, [r3, #8]
    a866:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a86a:	4413      	add	r3, r2
    a86c:	781b      	ldrb	r3, [r3, #0]
    a86e:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a872:	4a0e      	ldr	r2, [pc, #56]	; (a8ac <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    a874:	9b04      	ldr	r3, [sp, #16]
    a876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a87a:	695a      	ldr	r2, [r3, #20]
    a87c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a880:	009b      	lsls	r3, r3, #2
    a882:	4413      	add	r3, r2
    a884:	681b      	ldr	r3, [r3, #0]
    a886:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    a888:	9b03      	ldr	r3, [sp, #12]
    a88a:	2b00      	cmp	r3, #0
    a88c:	d009      	beq.n	a8a2 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
        {
            Can_43_FLEXCAN_Ipw_ProcessHwObject(Can_pController, (Can_apxConfig[u32CoreId]), u8MbIdx, mbType);
    a88e:	4a07      	ldr	r2, [pc, #28]	; (a8ac <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    a890:	9b04      	ldr	r3, [sp, #16]
    a892:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    a896:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a89a:	9b00      	ldr	r3, [sp, #0]
    a89c:	9803      	ldr	r0, [sp, #12]
    a89e:	f000 fff2 	bl	b886 <Can_43_FLEXCAN_Ipw_ProcessHwObject>
        }

    }
}
    a8a2:	bf00      	nop
    a8a4:	b007      	add	sp, #28
    a8a6:	f85d fb04 	ldr.w	pc, [sp], #4
    a8aa:	bf00      	nop
    a8ac:	1fff8e14 	.word	0x1fff8e14

0000a8b0 <Can_43_FLEXCAN_ProcessBusOffInterrupt>:
*/
void Can_43_FLEXCAN_ProcessBusOffInterrupt
(
    uint8 u8CtrlOffset
)
{
    a8b0:	b500      	push	{lr}
    a8b2:	b087      	sub	sp, #28
    a8b4:	4603      	mov	r3, r0
    a8b6:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 u8ControllerID = 0U;
    a8ba:	2300      	movs	r3, #0
    a8bc:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a8c0:	2300      	movs	r3, #0
    a8c2:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a8c4:	2300      	movs	r3, #0
    a8c6:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a8c8:	2300      	movs	r3, #0
    a8ca:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    a8cc:	4a19      	ldr	r2, [pc, #100]	; (a934 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    a8ce:	9b04      	ldr	r3, [sp, #16]
    a8d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8d4:	2b00      	cmp	r3, #0
    a8d6:	d029      	beq.n	a92c <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    a8d8:	4a16      	ldr	r2, [pc, #88]	; (a934 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    a8da:	9b04      	ldr	r3, [sp, #16]
    a8dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8e0:	689a      	ldr	r2, [r3, #8]
    a8e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a8e6:	4413      	add	r3, r2
    a8e8:	781b      	ldrb	r3, [r3, #0]
    a8ea:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a8ee:	4a11      	ldr	r2, [pc, #68]	; (a934 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    a8f0:	9b04      	ldr	r3, [sp, #16]
    a8f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8f6:	695a      	ldr	r2, [r3, #20]
    a8f8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a8fc:	009b      	lsls	r3, r3, #2
    a8fe:	4413      	add	r3, r2
    a900:	681b      	ldr	r3, [r3, #0]
    a902:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    a904:	9b03      	ldr	r3, [sp, #12]
    a906:	2b00      	cmp	r3, #0
    a908:	d010      	beq.n	a92c <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
        {
            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    a90a:	9803      	ldr	r0, [sp, #12]
    a90c:	f000 fd74 	bl	b3f8 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    a910:	4603      	mov	r3, r0
    a912:	2b00      	cmp	r3, #0
    a914:	d10a      	bne.n	a92c <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    a916:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a91a:	4a07      	ldr	r2, [pc, #28]	; (a938 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x88>)
    a91c:	2102      	movs	r1, #2
    a91e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                CanIf_ControllerBusOff(Can_pController->Can_u8AbstControllerID);
    a922:	9b03      	ldr	r3, [sp, #12]
    a924:	781b      	ldrb	r3, [r3, #0]
    a926:	4618      	mov	r0, r3
    a928:	f00c fbfc 	bl	17124 <CanIf_ControllerBusOff>
            }
        }
    }
}
    a92c:	bf00      	nop
    a92e:	b007      	add	sp, #28
    a930:	f85d fb04 	ldr.w	pc, [sp], #4
    a934:	1fff8e14 	.word	0x1fff8e14
    a938:	1fff8e0c 	.word	0x1fff8e0c

0000a93c <Can_Ipw_ParseData>:
    PduInfoType * CanIf_PduInfo,
    Flexcan_Ip_MsgBuffType * pReceivedDataBuffer,
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig
)
{
    a93c:	b500      	push	{lr}
    a93e:	b085      	sub	sp, #20
    a940:	9003      	str	r0, [sp, #12]
    a942:	9102      	str	r1, [sp, #8]
    a944:	9201      	str	r2, [sp, #4]
    a946:	9300      	str	r3, [sp, #0]
    CanIf_Mailbox->CanId = pReceivedDataBuffer->msgId;
    a948:	9b01      	ldr	r3, [sp, #4]
    a94a:	685a      	ldr	r2, [r3, #4]
    a94c:	9b03      	ldr	r3, [sp, #12]
    a94e:	601a      	str	r2, [r3, #0]
    * convert the ID to a standardized format since the Upper layer (CANIF) does not know
    * whether the received CAN frame is a Standard CAN frame or Extended CAN frame.
    * In case of an Extended CAN frame, MSB of a received CAN frame ID needs to be
    * made as ‘1’ to mark the received CAN frame as Extended.⌋
    */
    if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_IDE_MASK) != 0U)
    a950:	9b01      	ldr	r3, [sp, #4]
    a952:	681b      	ldr	r3, [r3, #0]
    a954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    a958:	2b00      	cmp	r3, #0
    a95a:	d005      	beq.n	a968 <Can_Ipw_ParseData+0x2c>
    {
        CanIf_Mailbox->CanId |= (uint32)0x80000000U;
    a95c:	9b03      	ldr	r3, [sp, #12]
    a95e:	681b      	ldr	r3, [r3, #0]
    a960:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    a964:	9b03      	ldr	r3, [sp, #12]
    a966:	601a      	str	r2, [r3, #0]
    }

    if (CAN_RX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    a968:	9b06      	ldr	r3, [sp, #24]
    a96a:	699b      	ldr	r3, [r3, #24]
    a96c:	2b00      	cmp	r3, #0
    a96e:	d10c      	bne.n	a98a <Can_Ipw_ParseData+0x4e>
    {
        /* Check if Mb Overrun */
        if ((uint32)(0x06000000U) == (pReceivedDataBuffer->cs & CAN_IPW_CS_CODE_MASK))
    a970:	9b01      	ldr	r3, [sp, #4]
    a972:	681b      	ldr	r3, [r3, #0]
    a974:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    a978:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    a97c:	d105      	bne.n	a98a <Can_Ipw_ParseData+0x4e>
        {
            (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    a97e:	2301      	movs	r3, #1
    a980:	2208      	movs	r2, #8
    a982:	2100      	movs	r1, #0
    a984:	2050      	movs	r0, #80	; 0x50
    a986:	f00c fa2d 	bl	16de4 <Det_ReportRuntimeError>
        }
    }

    /* when legacy fifo enabled, FD must be disabled */
    if (CAN_RX_LEGACY_FIFO != Can_pHwObjectConfig->Can_eReceiveType)
    a98a:	9b06      	ldr	r3, [sp, #24]
    a98c:	699b      	ldr	r3, [r3, #24]
    a98e:	2b01      	cmp	r3, #1
    a990:	d009      	beq.n	a9a6 <Can_Ipw_ParseData+0x6a>
    {
        /*
        * [SWS_Can_00501] ⌈ CanDrv shall indicate whether the received message is a
        * conventional CAN frame or a CAN FD frame as described in Can_IdType.⌋
        */
        if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_EDL_MASK) != 0U)
    a992:	9b01      	ldr	r3, [sp, #4]
    a994:	681b      	ldr	r3, [r3, #0]
    a996:	2b00      	cmp	r3, #0
    a998:	da05      	bge.n	a9a6 <Can_Ipw_ParseData+0x6a>
        {
            CanIf_Mailbox->CanId |= (uint32)0x40000000U;
    a99a:	9b03      	ldr	r3, [sp, #12]
    a99c:	681b      	ldr	r3, [r3, #0]
    a99e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a9a2:	9b03      	ldr	r3, [sp, #12]
    a9a4:	601a      	str	r2, [r3, #0]
        }
    }

    if (Can_pHwObjectConfig->Can_u8PayloadLength <= pReceivedDataBuffer->dataLen)
    a9a6:	9b06      	ldr	r3, [sp, #24]
    a9a8:	7c1a      	ldrb	r2, [r3, #16]
    a9aa:	9b01      	ldr	r3, [sp, #4]
    a9ac:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    a9b0:	429a      	cmp	r2, r3
    a9b2:	d805      	bhi.n	a9c0 <Can_Ipw_ParseData+0x84>
    {
        CanIf_PduInfo->SduLength = Can_pHwObjectConfig->Can_u8PayloadLength;
    a9b4:	9b06      	ldr	r3, [sp, #24]
    a9b6:	7c1b      	ldrb	r3, [r3, #16]
    a9b8:	461a      	mov	r2, r3
    a9ba:	9b02      	ldr	r3, [sp, #8]
    a9bc:	609a      	str	r2, [r3, #8]
    a9be:	e005      	b.n	a9cc <Can_Ipw_ParseData+0x90>
    }
    else
    {
        CanIf_PduInfo->SduLength = pReceivedDataBuffer->dataLen;
    a9c0:	9b01      	ldr	r3, [sp, #4]
    a9c2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    a9c6:	461a      	mov	r2, r3
    a9c8:	9b02      	ldr	r3, [sp, #8]
    a9ca:	609a      	str	r2, [r3, #8]
                                                      CanIf_PduInfo->SduLength, \
                                                      &pReceivedDataBuffer->data[0]) \
                                                     )
    {
#endif
    CanIf_Mailbox->Hoh = Can_pHwObjectConfig->Can_HwObjectID;
    a9cc:	9b06      	ldr	r3, [sp, #24]
    a9ce:	881a      	ldrh	r2, [r3, #0]
    a9d0:	9b03      	ldr	r3, [sp, #12]
    a9d2:	809a      	strh	r2, [r3, #4]
    CanIf_Mailbox->ControllerId = Can_pControllerConfig->Can_u8AbstControllerID;
    a9d4:	9b00      	ldr	r3, [sp, #0]
    a9d6:	781a      	ldrb	r2, [r3, #0]
    a9d8:	9b03      	ldr	r3, [sp, #12]
    a9da:	719a      	strb	r2, [r3, #6]
    CanIf_PduInfo->SduDataPtr = &pReceivedDataBuffer->data[0];
    a9dc:	9b01      	ldr	r3, [sp, #4]
    a9de:	f103 0208 	add.w	r2, r3, #8
    a9e2:	9b02      	ldr	r3, [sp, #8]
    a9e4:	601a      	str	r2, [r3, #0]
    CanIf_RxIndication(CanIf_Mailbox, CanIf_PduInfo);
    a9e6:	9902      	ldr	r1, [sp, #8]
    a9e8:	9803      	ldr	r0, [sp, #12]
    a9ea:	f00c fb29 	bl	17040 <CanIf_RxIndication>
#if (CAN_43_FLEXCAN_LPDU_CALLOUT_SUPPORT == STD_ON)
    }
#endif
}
    a9ee:	bf00      	nop
    a9f0:	b005      	add	sp, #20
    a9f2:	f85d fb04 	ldr.w	pc, [sp], #4

0000a9f6 <Can_Ipw_InitLegacyFifoFilter>:

static void Can_Ipw_InitLegacyFifoFilter(const Can_43_FLEXCAN_ControllerConfigType * Can_pController, const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject)
{
    a9f6:	b500      	push	{lr}
    a9f8:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
    a9fc:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa00:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    aa04:	6018      	str	r0, [r3, #0]
    aa06:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa0a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aa0e:	6019      	str	r1, [r3, #0]
    uint8 u8FilterIdx=0U;
    aa10:	2300      	movs	r3, #0
    aa12:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    uint8 u8HwFilterCount = 0U;
    aa16:	2300      	movs	r3, #0
    aa18:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
    uint32 u32HwFilterMask = (uint32)0x00000000U;
    aa1c:	2300      	movs	r3, #0
    aa1e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    /* The max FIFO id filter affected by Rx individual masks*/
    uint8 u8FiFoFilterIndvCount = 0U;
    aa22:	2300      	movs	r3, #0
    aa24:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    Flexcan_Ip_RxFifoIdElementFormatType eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    aa28:	2300      	movs	r3, #0
    aa2a:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
    /* Need to alocate a filter array with elemnets no as defined in HwObject */
    Flexcan_Ip_IdTableType RxFifoFilters[128];

    if (((Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U) <= 32U)
    aa2e:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa32:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aa36:	681b      	ldr	r3, [r3, #0]
    aa38:	7c9b      	ldrb	r3, [r3, #18]
    aa3a:	089b      	lsrs	r3, r3, #2
    aa3c:	b2db      	uxtb	r3, r3
    aa3e:	3306      	adds	r3, #6
    aa40:	2b20      	cmp	r3, #32
    aa42:	d80b      	bhi.n	aa5c <Can_Ipw_InitLegacyFifoFilter+0x66>
    {
        u8FiFoFilterIndvCount = (Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U;
    aa44:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa48:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aa4c:	681b      	ldr	r3, [r3, #0]
    aa4e:	7c9b      	ldrb	r3, [r3, #18]
    aa50:	089b      	lsrs	r3, r3, #2
    aa52:	b2db      	uxtb	r3, r3
    aa54:	3306      	adds	r3, #6
    aa56:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    aa5a:	e002      	b.n	aa62 <Can_Ipw_InitLegacyFifoFilter+0x6c>
    }
    else
    {
        u8FiFoFilterIndvCount = 32U;
    aa5c:	2320      	movs	r3, #32
    aa5e:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    }
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    aa62:	2300      	movs	r3, #0
    aa64:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    aa68:	e169      	b.n	ad3e <Can_Ipw_InitLegacyFifoFilter+0x348>
    {
            if (CAN_LEGACY_FIFO_FORMAT_A == Can_pController->Can_eLegacyAcceptanceMode)
    aa6a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa6e:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    aa72:	681b      	ldr	r3, [r3, #0]
    aa74:	691b      	ldr	r3, [r3, #16]
    aa76:	2b00      	cmp	r3, #0
    aa78:	d13a      	bne.n	aaf0 <Can_Ipw_InitLegacyFifoFilter+0xfa>
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount;
    aa7a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa7e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aa82:	681b      	ldr	r3, [r3, #0]
    aa84:	7c9b      	ldrb	r3, [r3, #18]
    aa86:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC0000000U;
    aa8a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    aa8e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    aa92:	2300      	movs	r3, #0
    aa94:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    aa98:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa9c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aaa0:	681b      	ldr	r3, [r3, #0]
    aaa2:	689b      	ldr	r3, [r3, #8]
    aaa4:	2b00      	cmp	r3, #0
    aaa6:	d011      	beq.n	aacc <Can_Ipw_InitLegacyFifoFilter+0xd6>
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_EXT_SHIFT;
    aaa8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aaac:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aab0:	681b      	ldr	r3, [r3, #0]
    aab2:	695a      	ldr	r2, [r3, #20]
    aab4:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    aab8:	00db      	lsls	r3, r3, #3
    aaba:	4413      	add	r3, r2
    aabc:	685b      	ldr	r3, [r3, #4]
    aabe:	005b      	lsls	r3, r3, #1
    aac0:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    aac4:	4313      	orrs	r3, r2
    aac6:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    aaca:	e126      	b.n	ad1a <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_STD_SHIFT;
    aacc:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aad0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aad4:	681b      	ldr	r3, [r3, #0]
    aad6:	695a      	ldr	r2, [r3, #20]
    aad8:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    aadc:	00db      	lsls	r3, r3, #3
    aade:	4413      	add	r3, r2
    aae0:	685b      	ldr	r3, [r3, #4]
    aae2:	04db      	lsls	r3, r3, #19
    aae4:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    aae8:	4313      	orrs	r3, r2
    aaea:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    aaee:	e114      	b.n	ad1a <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else if (CAN_LEGACY_FIFO_FORMAT_B == Can_pController->Can_eLegacyAcceptanceMode)
    aaf0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aaf4:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    aaf8:	681b      	ldr	r3, [r3, #0]
    aafa:	691b      	ldr	r3, [r3, #16]
    aafc:	2b01      	cmp	r3, #1
    aafe:	d160      	bne.n	abc2 <Can_Ipw_InitLegacyFifoFilter+0x1cc>
            {
                u8HwFilterCount = Can_pHwObject->Can_u8HwFilterCount * 2U ;
    ab00:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab04:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab08:	681b      	ldr	r3, [r3, #0]
    ab0a:	7c9b      	ldrb	r3, [r3, #18]
    ab0c:	005b      	lsls	r3, r3, #1
    ab0e:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC000C000U;
    ab12:	f04f 23c0 	mov.w	r3, #3221274624	; 0xc000c000
    ab16:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_B;
    ab1a:	2301      	movs	r3, #1
    ab1c:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    ab20:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab24:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab28:	681b      	ldr	r3, [r3, #0]
    ab2a:	689b      	ldr	r3, [r3, #8]
    ab2c:	2b00      	cmp	r3, #0
    ab2e:	d024      	beq.n	ab7a <Can_Ipw_InitLegacyFifoFilter+0x184>
                {
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT1;
    ab30:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab34:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab38:	681b      	ldr	r3, [r3, #0]
    ab3a:	695a      	ldr	r2, [r3, #20]
    ab3c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ab40:	011b      	lsls	r3, r3, #4
    ab42:	4413      	add	r3, r2
    ab44:	685b      	ldr	r3, [r3, #4]
    ab46:	0bdb      	lsrs	r3, r3, #15
    ab48:	041b      	lsls	r3, r3, #16
    ab4a:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ab4e:	4313      	orrs	r3, r2
    ab50:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT2;
    ab54:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab58:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab5c:	681b      	ldr	r3, [r3, #0]
    ab5e:	695a      	ldr	r2, [r3, #20]
    ab60:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ab64:	011b      	lsls	r3, r3, #4
    ab66:	3308      	adds	r3, #8
    ab68:	4413      	add	r3, r2
    ab6a:	685b      	ldr	r3, [r3, #4]
    ab6c:	0bdb      	lsrs	r3, r3, #15
    ab6e:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ab72:	4313      	orrs	r3, r2
    ab74:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    ab78:	e0cf      	b.n	ad1a <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT1;
    ab7a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab7e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab82:	681b      	ldr	r3, [r3, #0]
    ab84:	695a      	ldr	r2, [r3, #20]
    ab86:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ab8a:	011b      	lsls	r3, r3, #4
    ab8c:	4413      	add	r3, r2
    ab8e:	685b      	ldr	r3, [r3, #4]
    ab90:	04db      	lsls	r3, r3, #19
    ab92:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ab96:	4313      	orrs	r3, r2
    ab98:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT2;
    ab9c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aba0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aba4:	681b      	ldr	r3, [r3, #0]
    aba6:	695a      	ldr	r2, [r3, #20]
    aba8:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    abac:	011b      	lsls	r3, r3, #4
    abae:	3308      	adds	r3, #8
    abb0:	4413      	add	r3, r2
    abb2:	685b      	ldr	r3, [r3, #4]
    abb4:	00db      	lsls	r3, r3, #3
    abb6:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    abba:	4313      	orrs	r3, r2
    abbc:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    abc0:	e0ab      	b.n	ad1a <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else /*CAN_LEGACY_FIFO_FORMAT_C == Can_pController->Can_eLegacyAcceptanceMode */
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount * 4U ;
    abc2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    abc6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    abca:	681b      	ldr	r3, [r3, #0]
    abcc:	7c9b      	ldrb	r3, [r3, #18]
    abce:	009b      	lsls	r3, r3, #2
    abd0:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0x00000000U;
    abd4:	2300      	movs	r3, #0
    abd6:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_C;
    abda:	2302      	movs	r3, #2
    abdc:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    abe0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    abe4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    abe8:	681b      	ldr	r3, [r3, #0]
    abea:	689b      	ldr	r3, [r3, #8]
    abec:	2b00      	cmp	r3, #0
    abee:	d04a      	beq.n	ac86 <Can_Ipw_InitLegacyFifoFilter+0x290>
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    abf0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    abf4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    abf8:	681b      	ldr	r3, [r3, #0]
    abfa:	695a      	ldr	r2, [r3, #20]
    abfc:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ac00:	015b      	lsls	r3, r3, #5
    ac02:	4413      	add	r3, r2
    ac04:	685b      	ldr	r3, [r3, #4]
    ac06:	0d5b      	lsrs	r3, r3, #21
    ac08:	061b      	lsls	r3, r3, #24
    ac0a:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ac0e:	4313      	orrs	r3, r2
    ac10:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    ac14:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ac18:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ac1c:	681b      	ldr	r3, [r3, #0]
    ac1e:	695a      	ldr	r2, [r3, #20]
    ac20:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ac24:	015b      	lsls	r3, r3, #5
    ac26:	3308      	adds	r3, #8
    ac28:	4413      	add	r3, r2
    ac2a:	685b      	ldr	r3, [r3, #4]
    ac2c:	0d5b      	lsrs	r3, r3, #21
    ac2e:	041b      	lsls	r3, r3, #16
    ac30:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ac34:	4313      	orrs	r3, r2
    ac36:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    ac3a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ac3e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ac42:	681b      	ldr	r3, [r3, #0]
    ac44:	695a      	ldr	r2, [r3, #20]
    ac46:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ac4a:	015b      	lsls	r3, r3, #5
    ac4c:	3310      	adds	r3, #16
    ac4e:	4413      	add	r3, r2
    ac50:	685b      	ldr	r3, [r3, #4]
    ac52:	0d5b      	lsrs	r3, r3, #21
    ac54:	021b      	lsls	r3, r3, #8
    ac56:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ac5a:	4313      	orrs	r3, r2
    ac5c:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    ac60:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ac64:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ac68:	681b      	ldr	r3, [r3, #0]
    ac6a:	695a      	ldr	r2, [r3, #20]
    ac6c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ac70:	015b      	lsls	r3, r3, #5
    ac72:	3318      	adds	r3, #24
    ac74:	4413      	add	r3, r2
    ac76:	685b      	ldr	r3, [r3, #4]
    ac78:	0d5b      	lsrs	r3, r3, #21
    ac7a:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ac7e:	4313      	orrs	r3, r2
    ac80:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    ac84:	e049      	b.n	ad1a <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    ac86:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ac8a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ac8e:	681b      	ldr	r3, [r3, #0]
    ac90:	695a      	ldr	r2, [r3, #20]
    ac92:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ac96:	015b      	lsls	r3, r3, #5
    ac98:	4413      	add	r3, r2
    ac9a:	685b      	ldr	r3, [r3, #4]
    ac9c:	08db      	lsrs	r3, r3, #3
    ac9e:	061b      	lsls	r3, r3, #24
    aca0:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    aca4:	4313      	orrs	r3, r2
    aca6:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    acaa:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    acae:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    acb2:	681b      	ldr	r3, [r3, #0]
    acb4:	695a      	ldr	r2, [r3, #20]
    acb6:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    acba:	015b      	lsls	r3, r3, #5
    acbc:	3308      	adds	r3, #8
    acbe:	4413      	add	r3, r2
    acc0:	685b      	ldr	r3, [r3, #4]
    acc2:	08db      	lsrs	r3, r3, #3
    acc4:	041b      	lsls	r3, r3, #16
    acc6:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    acca:	4313      	orrs	r3, r2
    accc:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    acd0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    acd4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    acd8:	681b      	ldr	r3, [r3, #0]
    acda:	695a      	ldr	r2, [r3, #20]
    acdc:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ace0:	015b      	lsls	r3, r3, #5
    ace2:	3310      	adds	r3, #16
    ace4:	4413      	add	r3, r2
    ace6:	685b      	ldr	r3, [r3, #4]
    ace8:	08db      	lsrs	r3, r3, #3
    acea:	021b      	lsls	r3, r3, #8
    acec:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    acf0:	4313      	orrs	r3, r2
    acf2:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    acf6:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    acfa:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    acfe:	681b      	ldr	r3, [r3, #0]
    ad00:	695a      	ldr	r2, [r3, #20]
    ad02:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ad06:	015b      	lsls	r3, r3, #5
    ad08:	3318      	adds	r3, #24
    ad0a:	4413      	add	r3, r2
    ad0c:	685b      	ldr	r3, [r3, #4]
    ad0e:	08db      	lsrs	r3, r3, #3
    ad10:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ad14:	4313      	orrs	r3, r2
    ad16:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                }
            }
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, u8FilterIdx, u32HwFilterMask);
    ad1a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ad1e:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    ad22:	681b      	ldr	r3, [r3, #0]
    ad24:	789b      	ldrb	r3, [r3, #2]
    ad26:	f89d 1417 	ldrb.w	r1, [sp, #1047]	; 0x417
    ad2a:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ad2e:	4618      	mov	r0, r3
    ad30:	f002 fd22 	bl	d778 <FlexCAN_Ip_SetRxIndividualMask_Privileged>
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    ad34:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ad38:	3301      	adds	r3, #1
    ad3a:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    ad3e:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    ad42:	f89d 340f 	ldrb.w	r3, [sp, #1039]	; 0x40f
    ad46:	429a      	cmp	r2, r3
    ad48:	d20a      	bcs.n	ad60 <Can_Ipw_InitLegacyFifoFilter+0x36a>
    ad4a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ad4e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ad52:	681b      	ldr	r3, [r3, #0]
    ad54:	7c9b      	ldrb	r3, [r3, #18]
    ad56:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    ad5a:	429a      	cmp	r2, r3
    ad5c:	f4ff ae85 	bcc.w	aa6a <Can_Ipw_InitLegacyFifoFilter+0x74>
    }

    (void)FlexCAN_Ip_SetRxFifoGlobalMask(Can_pController->Can_u8ControllerOffset, Can_pController->Can_u32LegacyGlobalMask);
    ad60:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ad64:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    ad68:	681b      	ldr	r3, [r3, #0]
    ad6a:	789a      	ldrb	r2, [r3, #2]
    ad6c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ad70:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    ad74:	681b      	ldr	r3, [r3, #0]
    ad76:	68db      	ldr	r3, [r3, #12]
    ad78:	4619      	mov	r1, r3
    ad7a:	4610      	mov	r0, r2
    ad7c:	f002 fd4a 	bl	d814 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>
    
    if (u8HwFilterCount != 0U)
    ad80:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    ad84:	2b00      	cmp	r3, #0
    ad86:	d054      	beq.n	ae32 <Can_Ipw_InitLegacyFifoFilter+0x43c>
    {
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    ad88:	2300      	movs	r3, #0
    ad8a:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    ad8e:	e03e      	b.n	ae0e <Can_Ipw_InitLegacyFifoFilter+0x418>
        {
            RxFifoFilters[u8FilterIdx].id = Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterCode;
    ad90:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ad94:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ad98:	681b      	ldr	r3, [r3, #0]
    ad9a:	695a      	ldr	r2, [r3, #20]
    ad9c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ada0:	00db      	lsls	r3, r3, #3
    ada2:	441a      	add	r2, r3
    ada4:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ada8:	6812      	ldr	r2, [r2, #0]
    adaa:	f50d 6183 	add.w	r1, sp, #1048	; 0x418
    adae:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
    adb2:	00db      	lsls	r3, r3, #3
    adb4:	440b      	add	r3, r1
    adb6:	605a      	str	r2, [r3, #4]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    adb8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    adbc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    adc0:	681b      	ldr	r3, [r3, #0]
    adc2:	689b      	ldr	r3, [r3, #8]
    adc4:	2b00      	cmp	r3, #0
    adc6:	d00a      	beq.n	adde <Can_Ipw_InitLegacyFifoFilter+0x3e8>
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = TRUE;
    adc8:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    adcc:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    add0:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    add4:	00db      	lsls	r3, r3, #3
    add6:	4413      	add	r3, r2
    add8:	2201      	movs	r2, #1
    adda:	705a      	strb	r2, [r3, #1]
    addc:	e009      	b.n	adf2 <Can_Ipw_InitLegacyFifoFilter+0x3fc>
            }
            else
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = FALSE;
    adde:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ade2:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    ade6:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    adea:	00db      	lsls	r3, r3, #3
    adec:	4413      	add	r3, r2
    adee:	2200      	movs	r2, #0
    adf0:	705a      	strb	r2, [r3, #1]
            }
            RxFifoFilters[u8FilterIdx].isRemoteFrame = FALSE;
    adf2:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    adf6:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    adfa:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
    adfe:	2100      	movs	r1, #0
    ae00:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    ae04:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ae08:	3301      	adds	r3, #1
    ae0a:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    ae0e:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    ae12:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    ae16:	429a      	cmp	r2, r3
    ae18:	d3ba      	bcc.n	ad90 <Can_Ipw_InitLegacyFifoFilter+0x39a>
        }

        (void)FlexCAN_Ip_ConfigRxFifo(Can_pController->Can_u8ControllerOffset, eElementFormat, RxFifoFilters);
    ae1a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ae1e:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    ae22:	681b      	ldr	r3, [r3, #0]
    ae24:	789b      	ldrb	r3, [r3, #2]
    ae26:	aa02      	add	r2, sp, #8
    ae28:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    ae2c:	4618      	mov	r0, r3
    ae2e:	f002 f886 	bl	cf3e <FlexCAN_Ip_ConfigRxFifo_Privileged>
    }
    
}
    ae32:	bf00      	nop
    ae34:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    ae38:	f85d fb04 	ldr.w	pc, [sp], #4

0000ae3c <Can_Ipw_InitBaudrate>:

#endif /* (CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON) */

/* Init baudrate for controller */
static void Can_Ipw_InitBaudrate(const Can_43_FLEXCAN_ControllerConfigType * ControllerConfig)
{
    ae3c:	b510      	push	{r4, lr}
    ae3e:	b084      	sub	sp, #16
    ae40:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
    uint16 BaudRateConfigID = Can_au16ControllerBaudRateSel[ControllerConfig->Can_u8ControllerID];
#else
    uint16 BaudRateConfigID = ControllerConfig->Can_u16DefaultBaudrateID;
    ae42:	9b01      	ldr	r3, [sp, #4]
    ae44:	8b9b      	ldrh	r3, [r3, #28]
    ae46:	f8ad 300e 	strh.w	r3, [sp, #14]
        FlexCANTimeSeg.phaseSeg1  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg1;
        FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg2;
        FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8ResyncJumpWidth;
        (void)FlexCAN_Ip_SetBitrate(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, FALSE);
#endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
        if (TRUE == ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bFDFrame)
    ae4a:	9b01      	ldr	r3, [sp, #4]
    ae4c:	6a1a      	ldr	r2, [r3, #32]
    ae4e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ae52:	2116      	movs	r1, #22
    ae54:	fb01 f303 	mul.w	r3, r1, r3
    ae58:	4413      	add	r3, r2
    ae5a:	785b      	ldrb	r3, [r3, #1]
    ae5c:	2b00      	cmp	r3, #0
    ae5e:	d016      	beq.n	ae8e <Can_Ipw_InitBaudrate+0x52>
            FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg2;
            FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8ResyncJumpWidth;

            (void)FlexCAN_Ip_SetBitrateCbt(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bBitRateSwitch);
    #endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
            (void)FlexCAN_Ip_SetTDCOffset(ControllerConfig->Can_u8ControllerOffset, \
    ae60:	9b01      	ldr	r3, [sp, #4]
    ae62:	7898      	ldrb	r0, [r3, #2]
    ae64:	9b01      	ldr	r3, [sp, #4]
    ae66:	6a1a      	ldr	r2, [r3, #32]
    ae68:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ae6c:	2116      	movs	r1, #22
    ae6e:	fb01 f303 	mul.w	r3, r1, r3
    ae72:	4413      	add	r3, r2
    ae74:	7cd9      	ldrb	r1, [r3, #19]
    ae76:	9b01      	ldr	r3, [sp, #4]
    ae78:	6a1a      	ldr	r2, [r3, #32]
    ae7a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ae7e:	2416      	movs	r4, #22
    ae80:	fb04 f303 	mul.w	r3, r4, r3
    ae84:	4413      	add	r3, r2
    ae86:	7d1b      	ldrb	r3, [r3, #20]
    ae88:	461a      	mov	r2, r3
    ae8a:	f003 f83d 	bl	df08 <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bTrcvDelayEnable, \
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(ControllerConfig->Can_u8ControllerOffset, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TxArbitrationStartDelay);
    ae8e:	9b01      	ldr	r3, [sp, #4]
    ae90:	7898      	ldrb	r0, [r3, #2]
    ae92:	9b01      	ldr	r3, [sp, #4]
    ae94:	6a1a      	ldr	r2, [r3, #32]
    ae96:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ae9a:	2116      	movs	r1, #22
    ae9c:	fb01 f303 	mul.w	r3, r1, r3
    aea0:	4413      	add	r3, r2
    aea2:	7c9b      	ldrb	r3, [r3, #18]
    aea4:	4619      	mov	r1, r3
    aea6:	f003 f883 	bl	dfb0 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
}
    aeaa:	bf00      	nop
    aeac:	b004      	add	sp, #16
    aeae:	bd10      	pop	{r4, pc}

0000aeb0 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    aeb0:	b500      	push	{lr}
    aeb2:	b087      	sub	sp, #28
    aeb4:	9003      	str	r0, [sp, #12]
    aeb6:	9102      	str	r1, [sp, #8]
    aeb8:	4613      	mov	r3, r2
    aeba:	f88d 3007 	strb.w	r3, [sp, #7]
        Can_HwHandleType u8HwObjectID = 0U;
    aebe:	2300      	movs	r3, #0
    aec0:	f8ad 3016 	strh.w	r3, [sp, #22]

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    aec4:	9b03      	ldr	r3, [sp, #12]
    aec6:	785b      	ldrb	r3, [r3, #1]
    aec8:	461a      	mov	r2, r3
    aeca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aece:	491c      	ldr	r1, [pc, #112]	; (af40 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x90>)
    aed0:	0152      	lsls	r2, r2, #5
    aed2:	4413      	add	r3, r2
    aed4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    aed8:	f8ad 3016 	strh.w	r3, [sp, #22]
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    aedc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    aee0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    aee4:	4293      	cmp	r3, r2
    aee6:	d027      	beq.n	af38 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
    aee8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    aeec:	4613      	mov	r3, r2
    aeee:	00db      	lsls	r3, r3, #3
    aef0:	4413      	add	r3, r2
    aef2:	009b      	lsls	r3, r3, #2
    aef4:	461a      	mov	r2, r3
    aef6:	9b02      	ldr	r3, [sp, #8]
    aef8:	4413      	add	r3, r2
    aefa:	7b1b      	ldrb	r3, [r3, #12]
    aefc:	f083 0301 	eor.w	r3, r3, #1
    af00:	b2db      	uxtb	r3, r3
    af02:	2b00      	cmp	r3, #0
    af04:	d018      	beq.n	af38 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
        {
            if (CAN_TX_NORMAL == Can_pHwObjectConfig[u8HwObjectID].Can_eReceiveType)
    af06:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    af0a:	4613      	mov	r3, r2
    af0c:	00db      	lsls	r3, r3, #3
    af0e:	4413      	add	r3, r2
    af10:	009b      	lsls	r3, r3, #2
    af12:	461a      	mov	r2, r3
    af14:	9b02      	ldr	r3, [sp, #8]
    af16:	4413      	add	r3, r2
    af18:	699b      	ldr	r3, [r3, #24]
    af1a:	2b03      	cmp	r3, #3
    af1c:	d10c      	bne.n	af38 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
            {
                CanIf_TxConfirmation(Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx]);
    af1e:	9b03      	ldr	r3, [sp, #12]
    af20:	785b      	ldrb	r3, [r3, #1]
    af22:	461a      	mov	r2, r3
    af24:	f89d 3007 	ldrb.w	r3, [sp, #7]
    af28:	4906      	ldr	r1, [pc, #24]	; (af44 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x94>)
    af2a:	0152      	lsls	r2, r2, #5
    af2c:	4413      	add	r3, r2
    af2e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    af32:	4618      	mov	r0, r3
    af34:	f00c f850 	bl	16fd8 <CanIf_TxConfirmation>
            }
        }
    }
    af38:	bf00      	nop
    af3a:	b007      	add	sp, #28
    af3c:	f85d fb04 	ldr.w	pc, [sp], #4
    af40:	1fff92d8 	.word	0x1fff92d8
    af44:	1fff9258 	.word	0x1fff9258

0000af48 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    af48:	b500      	push	{lr}
    af4a:	b08f      	sub	sp, #60	; 0x3c
    af4c:	9005      	str	r0, [sp, #20]
    af4e:	9104      	str	r1, [sp, #16]
    af50:	4613      	mov	r3, r2
    af52:	f88d 300f 	strb.w	r3, [sp, #15]
        Can_HwHandleType u8HwObjectID = 0U;
    af56:	2300      	movs	r3, #0
    af58:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        Can_HwType CanIf_Mailbox;
        PduInfoType CanIf_PduInfo;
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    af5c:	2300      	movs	r3, #0
    af5e:	930c      	str	r3, [sp, #48]	; 0x30
        Flexcan_Ip_MsgBuffType * pReceivedDataBuffer = NULL_PTR;
    af60:	2300      	movs	r3, #0
    af62:	930b      	str	r3, [sp, #44]	; 0x2c

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    af64:	9b05      	ldr	r3, [sp, #20]
    af66:	785b      	ldrb	r3, [r3, #1]
    af68:	461a      	mov	r2, r3
    af6a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    af6e:	4944      	ldr	r1, [pc, #272]	; (b080 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x138>)
    af70:	0152      	lsls	r2, r2, #5
    af72:	4413      	add	r3, r2
    af74:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    af78:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    af7c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    af80:	f64f 72ff 	movw	r2, #65535	; 0xffff
    af84:	4293      	cmp	r3, r2
    af86:	d076      	beq.n	b076 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
    af88:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    af8c:	4613      	mov	r3, r2
    af8e:	00db      	lsls	r3, r3, #3
    af90:	4413      	add	r3, r2
    af92:	009b      	lsls	r3, r3, #2
    af94:	461a      	mov	r2, r3
    af96:	9b04      	ldr	r3, [sp, #16]
    af98:	4413      	add	r3, r2
    af9a:	7b1b      	ldrb	r3, [r3, #12]
    af9c:	f083 0301 	eor.w	r3, r3, #1
    afa0:	b2db      	uxtb	r3, r3
    afa2:	2b00      	cmp	r3, #0
    afa4:	d067      	beq.n	b076 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
        {
            Can_pHwObject = &Can_pHwObjectConfig[u8HwObjectID];
    afa6:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    afaa:	4613      	mov	r3, r2
    afac:	00db      	lsls	r3, r3, #3
    afae:	4413      	add	r3, r2
    afb0:	009b      	lsls	r3, r3, #2
    afb2:	461a      	mov	r2, r3
    afb4:	9b04      	ldr	r3, [sp, #16]
    afb6:	4413      	add	r3, r2
    afb8:	930c      	str	r3, [sp, #48]	; 0x30

            if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    afba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    afbc:	699b      	ldr	r3, [r3, #24]
    afbe:	2b00      	cmp	r3, #0
    afc0:	d11d      	bne.n	affe <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xb6>
            {
                pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    afc2:	9b05      	ldr	r3, [sp, #20]
    afc4:	785b      	ldrb	r3, [r3, #1]
    afc6:	461a      	mov	r2, r3
    afc8:	4b2e      	ldr	r3, [pc, #184]	; (b084 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x13c>)
    afca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    afce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    afd0:	7f1b      	ldrb	r3, [r3, #28]
    afd2:	011b      	lsls	r3, r3, #4
    afd4:	4413      	add	r3, r2
    afd6:	681b      	ldr	r3, [r3, #0]
    afd8:	930b      	str	r3, [sp, #44]	; 0x2c
                Can_Ipw_ParseData(&CanIf_Mailbox, \
    afda:	a906      	add	r1, sp, #24
    afdc:	a809      	add	r0, sp, #36	; 0x24
    afde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    afe0:	9300      	str	r3, [sp, #0]
    afe2:	9b05      	ldr	r3, [sp, #20]
    afe4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    afe6:	f7ff fca9 	bl	a93c <Can_Ipw_ParseData>
                                  pReceivedDataBuffer, \
                                  Can_pControllerConfig, \
                                  Can_pHwObject \
                                 );
                /* ready to receive in next time */
                (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    afea:	9b05      	ldr	r3, [sp, #20]
    afec:	7898      	ldrb	r0, [r3, #2]
    afee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    aff0:	7f19      	ldrb	r1, [r3, #28]
    aff2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    aff4:	7b1b      	ldrb	r3, [r3, #12]
    aff6:	2200      	movs	r2, #0
    aff8:	f001 fe70 	bl	ccdc <FlexCAN_Ip_Receive>
            else
            {
                /* prevent misra */
            }
        }
    }
    affc:	e03b      	b.n	b076 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
            else if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    affe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b000:	699b      	ldr	r3, [r3, #24]
    b002:	2b01      	cmp	r3, #1
    b004:	d137      	bne.n	b076 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                if ((uint8)7U == u8MbIdx)
    b006:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b00a:	2b07      	cmp	r3, #7
    b00c:	d10d      	bne.n	b02a <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xe2>
                    (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    b00e:	2301      	movs	r3, #1
    b010:	2208      	movs	r2, #8
    b012:	2100      	movs	r1, #0
    b014:	2050      	movs	r0, #80	; 0x50
    b016:	f00b fee5 	bl	16de4 <Det_ReportRuntimeError>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoOvfNotif)
    b01a:	9b05      	ldr	r3, [sp, #20]
    b01c:	699b      	ldr	r3, [r3, #24]
    b01e:	2b00      	cmp	r3, #0
    b020:	d029      	beq.n	b076 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                        Can_pControllerConfig->Can_pLegacyFiFoOvfNotif();
    b022:	9b05      	ldr	r3, [sp, #20]
    b024:	699b      	ldr	r3, [r3, #24]
    b026:	4798      	blx	r3
    }
    b028:	e025      	b.n	b076 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                else if ((uint8)6U == u8MbIdx)
    b02a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b02e:	2b06      	cmp	r3, #6
    b030:	d107      	bne.n	b042 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xfa>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoWarnNotif)
    b032:	9b05      	ldr	r3, [sp, #20]
    b034:	695b      	ldr	r3, [r3, #20]
    b036:	2b00      	cmp	r3, #0
    b038:	d01d      	beq.n	b076 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                        Can_pControllerConfig->Can_pLegacyFiFoWarnNotif();
    b03a:	9b05      	ldr	r3, [sp, #20]
    b03c:	695b      	ldr	r3, [r3, #20]
    b03e:	4798      	blx	r3
    }
    b040:	e019      	b.n	b076 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                    pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    b042:	9b05      	ldr	r3, [sp, #20]
    b044:	785b      	ldrb	r3, [r3, #1]
    b046:	461a      	mov	r2, r3
    b048:	4b0e      	ldr	r3, [pc, #56]	; (b084 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x13c>)
    b04a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    b04e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b050:	7f1b      	ldrb	r3, [r3, #28]
    b052:	011b      	lsls	r3, r3, #4
    b054:	4413      	add	r3, r2
    b056:	681b      	ldr	r3, [r3, #0]
    b058:	930b      	str	r3, [sp, #44]	; 0x2c
                    Can_Ipw_ParseData(&CanIf_Mailbox, \
    b05a:	a906      	add	r1, sp, #24
    b05c:	a809      	add	r0, sp, #36	; 0x24
    b05e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b060:	9300      	str	r3, [sp, #0]
    b062:	9b05      	ldr	r3, [sp, #20]
    b064:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b066:	f7ff fc69 	bl	a93c <Can_Ipw_ParseData>
                    (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    b06a:	9b05      	ldr	r3, [sp, #20]
    b06c:	789b      	ldrb	r3, [r3, #2]
    b06e:	2100      	movs	r1, #0
    b070:	4618      	mov	r0, r3
    b072:	f001 ff31 	bl	ced8 <FlexCAN_Ip_RxFifo>
    }
    b076:	bf00      	nop
    b078:	b00f      	add	sp, #60	; 0x3c
    b07a:	f85d fb04 	ldr.w	pc, [sp], #4
    b07e:	bf00      	nop
    b080:	1fff92d8 	.word	0x1fff92d8
    b084:	000185e8 	.word	0x000185e8

0000b088 <Can_43_FLEXCAN_Ipw_Init>:
#endif /* (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON) */
/*==================================================================================================
*                                       GLOBAL FUNCTIONS
==================================================================================================*/
Std_ReturnType Can_43_FLEXCAN_Ipw_Init(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b088:	b510      	push	{r4, lr}
    b08a:	b084      	sub	sp, #16
    b08c:	9001      	str	r0, [sp, #4]
    Std_ReturnType eRetVal = (Std_ReturnType)FLEXCAN_STATUS_ERROR;
    b08e:	2301      	movs	r3, #1
    b090:	f88d 300c 	strb.w	r3, [sp, #12]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    /* The Index of Hoh in a group that refer to a controller */
    uint8 u8HwObjRefIdx = 0U;
    b094:	2300      	movs	r3, #0
    b096:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ObjIdx = 0U;
    b09a:	2300      	movs	r3, #0
    b09c:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    b0a0:	2300      	movs	r3, #0
    b0a2:	9302      	str	r3, [sp, #8]
    uint8 u8HwBufferCount = 0U;
    b0a4:	2300      	movs	r3, #0
    b0a6:	f88d 300d 	strb.w	r3, [sp, #13]
    {
        Can_Ipw_u32Seconds = 0U;
    }
#endif
    /* @violates @ref Can_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    eRetVal = (Std_ReturnType)Call_Can_FlexCan_Init(Can_pControllerConfig->Can_u8ControllerOffset, Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);
    b0aa:	9b01      	ldr	r3, [sp, #4]
    b0ac:	7898      	ldrb	r0, [r3, #2]
    b0ae:	9b01      	ldr	r3, [sp, #4]
    b0b0:	785b      	ldrb	r3, [r3, #1]
    b0b2:	461a      	mov	r2, r3
    b0b4:	4b77      	ldr	r3, [pc, #476]	; (b294 <Can_43_FLEXCAN_Ipw_Init+0x20c>)
    b0b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    b0ba:	9b01      	ldr	r3, [sp, #4]
    b0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b0be:	681b      	ldr	r3, [r3, #0]
    b0c0:	461a      	mov	r2, r3
    b0c2:	f001 fcff 	bl	cac4 <FlexCAN_Ip_Init_Privileged>
    b0c6:	4603      	mov	r3, r0
    b0c8:	f88d 300c 	strb.w	r3, [sp, #12]
    
    /* by defaut, enable interrupt when setcontroller to start */
    Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    b0cc:	9b01      	ldr	r3, [sp, #4]
    b0ce:	785b      	ldrb	r3, [r3, #1]
    b0d0:	461a      	mov	r2, r3
    b0d2:	4b71      	ldr	r3, [pc, #452]	; (b298 <Can_43_FLEXCAN_Ipw_Init+0x210>)
    b0d4:	2101      	movs	r1, #1
    b0d6:	5499      	strb	r1, [r3, r2]
    if ((Std_ReturnType)FLEXCAN_STATUS_SUCCESS == eRetVal)
    b0d8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    b0dc:	2b00      	cmp	r3, #0
    b0de:	d13b      	bne.n	b158 <Can_43_FLEXCAN_Ipw_Init+0xd0>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b0e0:	9b01      	ldr	r3, [sp, #4]
    b0e2:	789b      	ldrb	r3, [r3, #2]
    b0e4:	4618      	mov	r0, r3
    b0e6:	f003 f821 	bl	e12c <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* If the FlexCAN_Init retuns SUCCESS then the module is already in freezemode, and FlexCAN_Ip_SetTDCOffset and FlexCAN_Ip_SetTxArbitrationStartDelay will always retun success */
        if (Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bFDFrame)
    b0ea:	9b01      	ldr	r3, [sp, #4]
    b0ec:	6a1a      	ldr	r2, [r3, #32]
    b0ee:	9b01      	ldr	r3, [sp, #4]
    b0f0:	8b9b      	ldrh	r3, [r3, #28]
    b0f2:	4619      	mov	r1, r3
    b0f4:	2316      	movs	r3, #22
    b0f6:	fb01 f303 	mul.w	r3, r1, r3
    b0fa:	4413      	add	r3, r2
    b0fc:	785b      	ldrb	r3, [r3, #1]
    b0fe:	2b00      	cmp	r3, #0
    b100:	d018      	beq.n	b134 <Can_43_FLEXCAN_Ipw_Init+0xac>
        {
            (void)FlexCAN_Ip_SetTDCOffset(Can_pControllerConfig->Can_u8ControllerOffset, \
    b102:	9b01      	ldr	r3, [sp, #4]
    b104:	7898      	ldrb	r0, [r3, #2]
    b106:	9b01      	ldr	r3, [sp, #4]
    b108:	6a1a      	ldr	r2, [r3, #32]
    b10a:	9b01      	ldr	r3, [sp, #4]
    b10c:	8b9b      	ldrh	r3, [r3, #28]
    b10e:	4619      	mov	r1, r3
    b110:	2316      	movs	r3, #22
    b112:	fb01 f303 	mul.w	r3, r1, r3
    b116:	4413      	add	r3, r2
    b118:	7cd9      	ldrb	r1, [r3, #19]
    b11a:	9b01      	ldr	r3, [sp, #4]
    b11c:	6a1a      	ldr	r2, [r3, #32]
    b11e:	9b01      	ldr	r3, [sp, #4]
    b120:	8b9b      	ldrh	r3, [r3, #28]
    b122:	461c      	mov	r4, r3
    b124:	2316      	movs	r3, #22
    b126:	fb04 f303 	mul.w	r3, r4, r3
    b12a:	4413      	add	r3, r2
    b12c:	7d1b      	ldrb	r3, [r3, #20]
    b12e:	461a      	mov	r2, r3
    b130:	f002 feea 	bl	df08 <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bTrcvDelayEnable, \
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(Can_pControllerConfig->Can_u8ControllerOffset, \
    b134:	9b01      	ldr	r3, [sp, #4]
    b136:	7898      	ldrb	r0, [r3, #2]
    b138:	9b01      	ldr	r3, [sp, #4]
    b13a:	6a1a      	ldr	r2, [r3, #32]
    b13c:	9b01      	ldr	r3, [sp, #4]
    b13e:	8b9b      	ldrh	r3, [r3, #28]
    b140:	4619      	mov	r1, r3
    b142:	2316      	movs	r3, #22
    b144:	fb01 f303 	mul.w	r3, r1, r3
    b148:	4413      	add	r3, r2
    b14a:	7c9b      	ldrb	r3, [r3, #18]
    b14c:	4619      	mov	r1, r3
    b14e:	f002 ff2f 	bl	dfb0 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
                                                    Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TxArbitrationStartDelay);
        
        /* Init all Rx objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    b152:	9801      	ldr	r0, [sp, #4]
    b154:	f000 fb0a 	bl	b76c <Can_Ipw_InitRx>
    }

#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    b158:	2300      	movs	r3, #0
    b15a:	f88d 300d 	strb.w	r3, [sp, #13]
    b15e:	e010      	b.n	b182 <Can_43_FLEXCAN_Ipw_Init+0xfa>
    {
        Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8HwBufferCount] = CAN_43_FLEXCAN_HWOBJ_UNMAPPED;
    b160:	9b01      	ldr	r3, [sp, #4]
    b162:	785b      	ldrb	r3, [r3, #1]
    b164:	461a      	mov	r2, r3
    b166:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b16a:	494c      	ldr	r1, [pc, #304]	; (b29c <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b16c:	0152      	lsls	r2, r2, #5
    b16e:	4413      	add	r3, r2
    b170:	f64f 72ff 	movw	r2, #65535	; 0xffff
    b174:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    b178:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b17c:	3301      	adds	r3, #1
    b17e:	f88d 300d 	strb.w	r3, [sp, #13]
    b182:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b186:	2b1f      	cmp	r3, #31
    b188:	d9ea      	bls.n	b160 <Can_43_FLEXCAN_Ipw_Init+0xd8>
    }
    /* Map MB index to hardware object ID */
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b18a:	2300      	movs	r3, #0
    b18c:	f88d 300f 	strb.w	r3, [sp, #15]
    b190:	e06b      	b.n	b26a <Can_43_FLEXCAN_Ipw_Init+0x1e2>
    {
        Can_pHwObject = Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    b192:	9b01      	ldr	r3, [sp, #4]
    b194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b196:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b19a:	009b      	lsls	r3, r3, #2
    b19c:	4413      	add	r3, r2
    b19e:	681b      	ldr	r3, [r3, #0]
    b1a0:	9302      	str	r3, [sp, #8]
        switch (Can_pHwObject->Can_eReceiveType)
    b1a2:	9b02      	ldr	r3, [sp, #8]
    b1a4:	699b      	ldr	r3, [r3, #24]
    b1a6:	2b03      	cmp	r3, #3
    b1a8:	d006      	beq.n	b1b8 <Can_43_FLEXCAN_Ipw_Init+0x130>
    b1aa:	2b03      	cmp	r3, #3
    b1ac:	d857      	bhi.n	b25e <Can_43_FLEXCAN_Ipw_Init+0x1d6>
    b1ae:	2b00      	cmp	r3, #0
    b1b0:	d023      	beq.n	b1fa <Can_43_FLEXCAN_Ipw_Init+0x172>
    b1b2:	2b01      	cmp	r3, #1
    b1b4:	d02f      	beq.n	b216 <Can_43_FLEXCAN_Ipw_Init+0x18e>
                break;
            }
            default:
            {
                /* don't map for enhance fifo object because of out of message buffer memory */
                break;
    b1b6:	e052      	b.n	b25e <Can_43_FLEXCAN_Ipw_Init+0x1d6>
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    b1b8:	2300      	movs	r3, #0
    b1ba:	f88d 300e 	strb.w	r3, [sp, #14]
    b1be:	e015      	b.n	b1ec <Can_43_FLEXCAN_Ipw_Init+0x164>
                    Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex + u8ObjIdx] = Can_pHwObject->Can_HwObjectID;
    b1c0:	9b01      	ldr	r3, [sp, #4]
    b1c2:	785b      	ldrb	r3, [r3, #1]
    b1c4:	461c      	mov	r4, r3
    b1c6:	9b02      	ldr	r3, [sp, #8]
    b1c8:	7f1b      	ldrb	r3, [r3, #28]
    b1ca:	461a      	mov	r2, r3
    b1cc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b1d0:	4413      	add	r3, r2
    b1d2:	9a02      	ldr	r2, [sp, #8]
    b1d4:	8810      	ldrh	r0, [r2, #0]
    b1d6:	4931      	ldr	r1, [pc, #196]	; (b29c <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b1d8:	0162      	lsls	r2, r4, #5
    b1da:	4413      	add	r3, r2
    b1dc:	4602      	mov	r2, r0
    b1de:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    b1e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b1e6:	3301      	adds	r3, #1
    b1e8:	f88d 300e 	strb.w	r3, [sp, #14]
    b1ec:	9b02      	ldr	r3, [sp, #8]
    b1ee:	7b9b      	ldrb	r3, [r3, #14]
    b1f0:	f89d 200e 	ldrb.w	r2, [sp, #14]
    b1f4:	429a      	cmp	r2, r3
    b1f6:	d3e3      	bcc.n	b1c0 <Can_43_FLEXCAN_Ipw_Init+0x138>
                break;
    b1f8:	e032      	b.n	b260 <Can_43_FLEXCAN_Ipw_Init+0x1d8>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    b1fa:	9b01      	ldr	r3, [sp, #4]
    b1fc:	785b      	ldrb	r3, [r3, #1]
    b1fe:	461c      	mov	r4, r3
    b200:	9b02      	ldr	r3, [sp, #8]
    b202:	7f1b      	ldrb	r3, [r3, #28]
    b204:	4618      	mov	r0, r3
    b206:	9b02      	ldr	r3, [sp, #8]
    b208:	8819      	ldrh	r1, [r3, #0]
    b20a:	4a24      	ldr	r2, [pc, #144]	; (b29c <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b20c:	0163      	lsls	r3, r4, #5
    b20e:	4403      	add	r3, r0
    b210:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                break;
    b214:	e024      	b.n	b260 <Can_43_FLEXCAN_Ipw_Init+0x1d8>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    b216:	9b01      	ldr	r3, [sp, #4]
    b218:	785b      	ldrb	r3, [r3, #1]
    b21a:	461c      	mov	r4, r3
    b21c:	9b02      	ldr	r3, [sp, #8]
    b21e:	7f1b      	ldrb	r3, [r3, #28]
    b220:	4618      	mov	r0, r3
    b222:	9b02      	ldr	r3, [sp, #8]
    b224:	8819      	ldrh	r1, [r3, #0]
    b226:	4a1d      	ldr	r2, [pc, #116]	; (b29c <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b228:	0163      	lsls	r3, r4, #5
    b22a:	4403      	add	r3, r0
    b22c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][6U] = Can_pHwObject->Can_HwObjectID;
    b230:	9b01      	ldr	r3, [sp, #4]
    b232:	785b      	ldrb	r3, [r3, #1]
    b234:	4618      	mov	r0, r3
    b236:	9b02      	ldr	r3, [sp, #8]
    b238:	8819      	ldrh	r1, [r3, #0]
    b23a:	4a18      	ldr	r2, [pc, #96]	; (b29c <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b23c:	0183      	lsls	r3, r0, #6
    b23e:	4413      	add	r3, r2
    b240:	330c      	adds	r3, #12
    b242:	460a      	mov	r2, r1
    b244:	801a      	strh	r2, [r3, #0]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][7U] = Can_pHwObject->Can_HwObjectID;
    b246:	9b01      	ldr	r3, [sp, #4]
    b248:	785b      	ldrb	r3, [r3, #1]
    b24a:	4618      	mov	r0, r3
    b24c:	9b02      	ldr	r3, [sp, #8]
    b24e:	8819      	ldrh	r1, [r3, #0]
    b250:	4a12      	ldr	r2, [pc, #72]	; (b29c <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b252:	0183      	lsls	r3, r0, #6
    b254:	4413      	add	r3, r2
    b256:	330e      	adds	r3, #14
    b258:	460a      	mov	r2, r1
    b25a:	801a      	strh	r2, [r3, #0]
                break;
    b25c:	e000      	b.n	b260 <Can_43_FLEXCAN_Ipw_Init+0x1d8>
                break;
    b25e:	bf00      	nop
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b260:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b264:	3301      	adds	r3, #1
    b266:	f88d 300f 	strb.w	r3, [sp, #15]
    b26a:	9b01      	ldr	r3, [sp, #4]
    b26c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    b270:	f89d 200f 	ldrb.w	r2, [sp, #15]
    b274:	429a      	cmp	r2, r3
    b276:	d38c      	bcc.n	b192 <Can_43_FLEXCAN_Ipw_Init+0x10a>
            }
        }
    }
#endif /* MB_INTERRUPT_SUPPORT */
    eRetVal = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    b278:	9b01      	ldr	r3, [sp, #4]
    b27a:	789b      	ldrb	r3, [r3, #2]
    b27c:	4618      	mov	r0, r3
    b27e:	f002 fca5 	bl	dbcc <FlexCAN_Ip_SetStopMode_Privileged>
    b282:	4603      	mov	r3, r0
    b284:	f88d 300c 	strb.w	r3, [sp, #12]

    return (Std_ReturnType)eRetVal;
    b288:	f89d 300c 	ldrb.w	r3, [sp, #12]
}
    b28c:	4618      	mov	r0, r3
    b28e:	b004      	add	sp, #16
    b290:	bd10      	pop	{r4, pc}
    b292:	bf00      	nop
    b294:	000185e8 	.word	0x000185e8
    b298:	1fff9358 	.word	0x1fff9358
    b29c:	1fff92d8 	.word	0x1fff92d8

0000b2a0 <Can_43_FLEXCAN_Ipw_DeInit>:

/**
*   @brief      De-Initialize Controller
*/
void Can_43_FLEXCAN_Ipw_DeInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b2a0:	b500      	push	{lr}
    b2a2:	b083      	sub	sp, #12
    b2a4:	9001      	str	r0, [sp, #4]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    (void)FlexCAN_Ip_Deinit(Can_pControllerConfig->Can_u8ControllerOffset);
    b2a6:	9b01      	ldr	r3, [sp, #4]
    b2a8:	789b      	ldrb	r3, [r3, #2]
    b2aa:	4618      	mov	r0, r3
    b2ac:	f002 fafa 	bl	d8a4 <FlexCAN_Ip_Deinit_Privileged>
}
    b2b0:	bf00      	nop
    b2b2:	b003      	add	sp, #12
    b2b4:	f85d fb04 	ldr.w	pc, [sp], #4

0000b2b8 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>:

/**
*   @brief      Set Error Initialization and set Controller to start Mode.
*/
static Std_ReturnType Can_43_FLEXCAN_Ipw_SetControlerErrorInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b2b8:	b500      	push	{lr}
    b2ba:	b085      	sub	sp, #20
    b2bc:	9001      	str	r0, [sp, #4]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_SUCCESS;
    b2be:	2300      	movs	r3, #0
    b2c0:	9303      	str	r3, [sp, #12]

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    b2c2:	9b01      	ldr	r3, [sp, #4]
    b2c4:	785b      	ldrb	r3, [r3, #1]
    b2c6:	461a      	mov	r2, r3
    b2c8:	4b11      	ldr	r3, [pc, #68]	; (b310 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x58>)
    b2ca:	5c9b      	ldrb	r3, [r3, r2]
    b2cc:	2b00      	cmp	r3, #0
    b2ce:	d012      	beq.n	b2f6 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x3e>
    {
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    b2d0:	9b01      	ldr	r3, [sp, #4]
    b2d2:	7a5b      	ldrb	r3, [r3, #9]
    b2d4:	f083 0301 	eor.w	r3, r3, #1
    b2d8:	b2db      	uxtb	r3, r3
    b2da:	2b00      	cmp	r3, #0
    b2dc:	d006      	beq.n	b2ec <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x34>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    b2de:	9b01      	ldr	r3, [sp, #4]
    b2e0:	789b      	ldrb	r3, [r3, #2]
    b2e2:	2201      	movs	r2, #1
    b2e4:	2104      	movs	r1, #4
    b2e6:	4618      	mov	r0, r3
    b2e8:	f002 ff4c 	bl	e184 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b2ec:	9b01      	ldr	r3, [sp, #4]
    b2ee:	789b      	ldrb	r3, [r3, #2]
    b2f0:	4618      	mov	r0, r3
    b2f2:	f002 feed 	bl	e0d0 <FlexCAN_Ip_EnableInterrupts_Privileged>
    }
    eRetVal = FlexCAN_Ip_SetStartMode(Can_pControllerConfig->Can_u8ControllerOffset);
    b2f6:	9b01      	ldr	r3, [sp, #4]
    b2f8:	789b      	ldrb	r3, [r3, #2]
    b2fa:	4618      	mov	r0, r3
    b2fc:	f002 fc46 	bl	db8c <FlexCAN_Ip_SetStartMode_Privileged>
    b300:	9003      	str	r0, [sp, #12]

    return (Std_ReturnType)eRetVal;
    b302:	9b03      	ldr	r3, [sp, #12]
    b304:	b2db      	uxtb	r3, r3
}
    b306:	4618      	mov	r0, r3
    b308:	b005      	add	sp, #20
    b30a:	f85d fb04 	ldr.w	pc, [sp], #4
    b30e:	bf00      	nop
    b310:	1fff9358 	.word	0x1fff9358

0000b314 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>:

/**
*   @brief      Set Controller to participate the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStartMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b314:	b500      	push	{lr}
    b316:	b087      	sub	sp, #28
    b318:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    uint8 u8HwObjRefIdx = 0U;
    b31a:	2300      	movs	r3, #0
    b31c:	f88d 3017 	strb.w	r3, [sp, #23]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    b320:	2300      	movs	r3, #0
    b322:	9303      	str	r3, [sp, #12]
        {
            Can_Ipw_u32CurrentCompareVal = Stm_Ip_GetCompareValue(CAN_43_FLEXCAN_TS_STM_INSTANCE, CAN_43_FLEXCAN_TS_STM_CHANNEL);
        }
    }
#endif
    eRetVal = FlexCAN_Ip_Init(Can_pControllerConfig->Can_u8ControllerOffset, \
    b324:	9b01      	ldr	r3, [sp, #4]
    b326:	7898      	ldrb	r0, [r3, #2]
    b328:	9b01      	ldr	r3, [sp, #4]
    b32a:	785b      	ldrb	r3, [r3, #1]
    b32c:	461a      	mov	r2, r3
    b32e:	4b31      	ldr	r3, [pc, #196]	; (b3f4 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xe0>)
    b330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    b334:	9b01      	ldr	r3, [sp, #4]
    b336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b338:	681b      	ldr	r3, [r3, #0]
    b33a:	461a      	mov	r2, r3
    b33c:	f001 fbc2 	bl	cac4 <FlexCAN_Ip_Init_Privileged>
    b340:	9004      	str	r0, [sp, #16]
                                                    Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], \
                                                    Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);

    if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    b342:	9b04      	ldr	r3, [sp, #16]
    b344:	2b00      	cmp	r3, #0
    b346:	d14f      	bne.n	b3e8 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xd4>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b348:	9b01      	ldr	r3, [sp, #4]
    b34a:	789b      	ldrb	r3, [r3, #2]
    b34c:	4618      	mov	r0, r3
    b34e:	f002 feed 	bl	e12c <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* Re-Init baudrate */
        Can_Ipw_InitBaudrate(Can_pControllerConfig);
    b352:	9801      	ldr	r0, [sp, #4]
    b354:	f7ff fd72 	bl	ae3c <Can_Ipw_InitBaudrate>

        /* Re-Init all Rx Objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    b358:	9801      	ldr	r0, [sp, #4]
    b35a:	f000 fa07 	bl	b76c <Can_Ipw_InitRx>
            Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][MbIdx] = FALSE;
        }
    #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */

    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b35e:	2300      	movs	r3, #0
    b360:	f88d 3017 	strb.w	r3, [sp, #23]
    b364:	e02f      	b.n	b3c6 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xb2>
        {
            Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    b366:	9b01      	ldr	r3, [sp, #4]
    b368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b36a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b36e:	009b      	lsls	r3, r3, #2
    b370:	4413      	add	r3, r2
    b372:	681b      	ldr	r3, [r3, #0]
    b374:	9303      	str	r3, [sp, #12]

            if (FALSE == Can_pHwObject->Can_bHwObjectUsesPolling)
    b376:	9b03      	ldr	r3, [sp, #12]
    b378:	7b1b      	ldrb	r3, [r3, #12]
    b37a:	f083 0301 	eor.w	r3, r3, #1
    b37e:	b2db      	uxtb	r3, r3
    b380:	2b00      	cmp	r3, #0
    b382:	d018      	beq.n	b3b6 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa2>
            {
                switch (Can_pHwObject->Can_eReceiveType)
    b384:	9b03      	ldr	r3, [sp, #12]
    b386:	699b      	ldr	r3, [r3, #24]
    b388:	2b00      	cmp	r3, #0
    b38a:	d003      	beq.n	b394 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x80>
    b38c:	3b01      	subs	r3, #1
    b38e:	2b01      	cmp	r3, #1
    b390:	d813      	bhi.n	b3ba <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa6>
    b392:	e009      	b.n	b3a8 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x94>
                {
                    case CAN_RX_NORMAL:
                    {
                        (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    b394:	9b01      	ldr	r3, [sp, #4]
    b396:	7898      	ldrb	r0, [r3, #2]
    b398:	9b03      	ldr	r3, [sp, #12]
    b39a:	7f19      	ldrb	r1, [r3, #28]
    b39c:	9b03      	ldr	r3, [sp, #12]
    b39e:	7b1b      	ldrb	r3, [r3, #12]
    b3a0:	2200      	movs	r2, #0
    b3a2:	f001 fc9b 	bl	ccdc <FlexCAN_Ip_Receive>
                                                 Can_pHwObject->Can_u8HwBufferIndex, \
                                                 NULL_PTR, \
                                                 Can_pHwObject->Can_bHwObjectUsesPolling \
                                                );
                        break;
    b3a6:	e009      	b.n	b3bc <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa8>
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, Can_pControllerConfig->pDmaDstAddr);
                        }
                        else
                    #endif
                        {
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    b3a8:	9b01      	ldr	r3, [sp, #4]
    b3aa:	789b      	ldrb	r3, [r3, #2]
    b3ac:	2100      	movs	r1, #0
    b3ae:	4618      	mov	r0, r3
    b3b0:	f001 fd92 	bl	ced8 <FlexCAN_Ip_RxFifo>
                        }
                        break;
    b3b4:	e002      	b.n	b3bc <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa8>
                    {
                        /* nothing to do(TX object) */
                        break;
                    }
                }
            }
    b3b6:	bf00      	nop
    b3b8:	e000      	b.n	b3bc <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa8>
                        break;
    b3ba:	bf00      	nop
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b3bc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b3c0:	3301      	adds	r3, #1
    b3c2:	f88d 3017 	strb.w	r3, [sp, #23]
    b3c6:	9b01      	ldr	r3, [sp, #4]
    b3c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    b3cc:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b3d0:	429a      	cmp	r2, r3
    b3d2:	d3c8      	bcc.n	b366 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x52>
        }
    #endif /* CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON */
        eRetVal = ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControlerErrorInit(Can_pControllerConfig)) ? (FLEXCAN_STATUS_SUCCESS) : (FLEXCAN_STATUS_ERROR);
    b3d4:	9801      	ldr	r0, [sp, #4]
    b3d6:	f7ff ff6f 	bl	b2b8 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>
    b3da:	4603      	mov	r3, r0
    b3dc:	2b00      	cmp	r3, #0
    b3de:	bf14      	ite	ne
    b3e0:	2301      	movne	r3, #1
    b3e2:	2300      	moveq	r3, #0
    b3e4:	b2db      	uxtb	r3, r3
    b3e6:	9304      	str	r3, [sp, #16]
    }
    return (Std_ReturnType)eRetVal;
    b3e8:	9b04      	ldr	r3, [sp, #16]
    b3ea:	b2db      	uxtb	r3, r3
}
    b3ec:	4618      	mov	r0, r3
    b3ee:	b007      	add	sp, #28
    b3f0:	f85d fb04 	ldr.w	pc, [sp], #4
    b3f4:	000185e8 	.word	0x000185e8

0000b3f8 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>:

/**
*   @brief      Set Controller to stop participating the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStopMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b3f8:	b500      	push	{lr}
    b3fa:	b085      	sub	sp, #20
    b3fc:	9001      	str	r0, [sp, #4]
    * that are not allowed in the new state. ⌋
    * [SWS_Can_00426] ⌈ Disabling of CAN interrupts shall not be executed, when CAN
    * interrupts have been disabled by function Can_DisableControllerInterrupts.⌋
    */
    Std_ReturnType eReturnValue;
    uint8 u8HwObjRefIdx = 0U;
    b3fe:	2300      	movs	r3, #0
    b400:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    uint8 u8Idx = 0U;
    b404:	2300      	movs	r3, #0
    b406:	f88d 300d 	strb.w	r3, [sp, #13]

    if (FLEXCAN_STATUS_SUCCESS == FlexCAN_Ip_EnterFreezeMode(Can_pControllerConfig->Can_u8ControllerOffset))
    b40a:	9b01      	ldr	r3, [sp, #4]
    b40c:	789b      	ldrb	r3, [r3, #2]
    b40e:	4618      	mov	r0, r3
    b410:	f002 f986 	bl	d720 <FlexCAN_Ip_EnterFreezeMode_Privileged>
    b414:	4603      	mov	r3, r0
    b416:	2b00      	cmp	r3, #0
    b418:	d160      	bne.n	b4dc <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xe4>
    {
    #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_ConfigPN(Can_pControllerConfig->Can_u8ControllerOffset, FALSE, NULL_PTR);
    #endif

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    b41a:	9b01      	ldr	r3, [sp, #4]
    b41c:	785b      	ldrb	r3, [r3, #1]
    b41e:	461a      	mov	r2, r3
    b420:	4b33      	ldr	r3, [pc, #204]	; (b4f0 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xf8>)
    b422:	5c9b      	ldrb	r3, [r3, r2]
    b424:	2b00      	cmp	r3, #0
    b426:	d012      	beq.n	b44e <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
    {
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b428:	9b01      	ldr	r3, [sp, #4]
    b42a:	789b      	ldrb	r3, [r3, #2]
    b42c:	4618      	mov	r0, r3
    b42e:	f002 fe7d 	bl	e12c <FlexCAN_Ip_DisableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    b432:	9b01      	ldr	r3, [sp, #4]
    b434:	7a5b      	ldrb	r3, [r3, #9]
    b436:	f083 0301 	eor.w	r3, r3, #1
    b43a:	b2db      	uxtb	r3, r3
    b43c:	2b00      	cmp	r3, #0
    b43e:	d006      	beq.n	b44e <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    b440:	9b01      	ldr	r3, [sp, #4]
    b442:	789b      	ldrb	r3, [r3, #2]
    b444:	2200      	movs	r2, #0
    b446:	2104      	movs	r1, #4
    b448:	4618      	mov	r0, r3
    b44a:	f002 fe9b 	bl	e184 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b44e:	2300      	movs	r3, #0
    b450:	f88d 300e 	strb.w	r3, [sp, #14]
    b454:	e032      	b.n	b4bc <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xc4>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    b456:	9b01      	ldr	r3, [sp, #4]
    b458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b45a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b45e:	009b      	lsls	r3, r3, #2
    b460:	4413      	add	r3, r2
    b462:	681b      	ldr	r3, [r3, #0]
    b464:	9302      	str	r3, [sp, #8]

        if (CAN_TX_NORMAL == Can_pHwObject->Can_eReceiveType)
    b466:	9b02      	ldr	r3, [sp, #8]
    b468:	699b      	ldr	r3, [r3, #24]
    b46a:	2b03      	cmp	r3, #3
    b46c:	d119      	bne.n	b4a2 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xaa>
        {
            u8Idx = 0U;
    b46e:	2300      	movs	r3, #0
    b470:	f88d 300d 	strb.w	r3, [sp, #13]
            do
            {
                (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex + u8Idx);
    b474:	9b01      	ldr	r3, [sp, #4]
    b476:	7898      	ldrb	r0, [r3, #2]
    b478:	9b02      	ldr	r3, [sp, #8]
    b47a:	7f1a      	ldrb	r2, [r3, #28]
    b47c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b480:	4413      	add	r3, r2
    b482:	b2db      	uxtb	r3, r3
    b484:	4619      	mov	r1, r3
    b486:	f002 ff03 	bl	e290 <FlexCAN_Ip_AbortTransfer>
                u8Idx++;
    b48a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b48e:	3301      	adds	r3, #1
    b490:	f88d 300d 	strb.w	r3, [sp, #13]
            }while (u8Idx < Can_pHwObject->Can_u8ObjectCount);
    b494:	9b02      	ldr	r3, [sp, #8]
    b496:	7b9b      	ldrb	r3, [r3, #14]
    b498:	f89d 200d 	ldrb.w	r2, [sp, #13]
    b49c:	429a      	cmp	r2, r3
    b49e:	d3e9      	bcc.n	b474 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x7c>
    b4a0:	e007      	b.n	b4b2 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xba>
        }
        else
        {
            (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex);
    b4a2:	9b01      	ldr	r3, [sp, #4]
    b4a4:	789a      	ldrb	r2, [r3, #2]
    b4a6:	9b02      	ldr	r3, [sp, #8]
    b4a8:	7f1b      	ldrb	r3, [r3, #28]
    b4aa:	4619      	mov	r1, r3
    b4ac:	4610      	mov	r0, r2
    b4ae:	f002 feef 	bl	e290 <FlexCAN_Ip_AbortTransfer>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b4b2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b4b6:	3301      	adds	r3, #1
    b4b8:	f88d 300e 	strb.w	r3, [sp, #14]
    b4bc:	9b01      	ldr	r3, [sp, #4]
    b4be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    b4c2:	f89d 200e 	ldrb.w	r2, [sp, #14]
    b4c6:	429a      	cmp	r2, r3
    b4c8:	d3c5      	bcc.n	b456 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x5e>
        }
    }
    eReturnValue = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    b4ca:	9b01      	ldr	r3, [sp, #4]
    b4cc:	789b      	ldrb	r3, [r3, #2]
    b4ce:	4618      	mov	r0, r3
    b4d0:	f002 fb7c 	bl	dbcc <FlexCAN_Ip_SetStopMode_Privileged>
    b4d4:	4603      	mov	r3, r0
    b4d6:	f88d 300f 	strb.w	r3, [sp, #15]
    b4da:	e002      	b.n	b4e2 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xea>
    }
    else
    {
        eReturnValue = E_NOT_OK;
    b4dc:	2301      	movs	r3, #1
    b4de:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return eReturnValue;
    b4e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    b4e6:	4618      	mov	r0, r3
    b4e8:	b005      	add	sp, #20
    b4ea:	f85d fb04 	ldr.w	pc, [sp], #4
    b4ee:	bf00      	nop
    b4f0:	1fff9358 	.word	0x1fff9358

0000b4f4 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>:
/**
*   @brief      Disable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b4f4:	b500      	push	{lr}
    b4f6:	b083      	sub	sp, #12
    b4f8:	9001      	str	r0, [sp, #4]
    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    b4fa:	9b01      	ldr	r3, [sp, #4]
    b4fc:	785b      	ldrb	r3, [r3, #1]
    b4fe:	461a      	mov	r2, r3
    b500:	4b10      	ldr	r3, [pc, #64]	; (b544 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    b502:	5c9b      	ldrb	r3, [r3, r2]
    b504:	2b00      	cmp	r3, #0
    b506:	d018      	beq.n	b53a <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b508:	9b01      	ldr	r3, [sp, #4]
    b50a:	789b      	ldrb	r3, [r3, #2]
    b50c:	4618      	mov	r0, r3
    b50e:	f002 fe0d 	bl	e12c <FlexCAN_Ip_DisableInterrupts_Privileged>
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = FALSE;
    b512:	9b01      	ldr	r3, [sp, #4]
    b514:	785b      	ldrb	r3, [r3, #1]
    b516:	461a      	mov	r2, r3
    b518:	4b0a      	ldr	r3, [pc, #40]	; (b544 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    b51a:	2100      	movs	r1, #0
    b51c:	5499      	strb	r1, [r3, r2]
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    b51e:	9b01      	ldr	r3, [sp, #4]
    b520:	7a5b      	ldrb	r3, [r3, #9]
    b522:	f083 0301 	eor.w	r3, r3, #1
    b526:	b2db      	uxtb	r3, r3
    b528:	2b00      	cmp	r3, #0
    b52a:	d006      	beq.n	b53a <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    b52c:	9b01      	ldr	r3, [sp, #4]
    b52e:	789b      	ldrb	r3, [r3, #2]
    b530:	2200      	movs	r2, #0
    b532:	2104      	movs	r1, #4
    b534:	4618      	mov	r0, r3
    b536:	f002 fe25 	bl	e184 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
}
    b53a:	bf00      	nop
    b53c:	b003      	add	sp, #12
    b53e:	f85d fb04 	ldr.w	pc, [sp], #4
    b542:	bf00      	nop
    b544:	1fff9358 	.word	0x1fff9358

0000b548 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>:

/**
*   @brief      Enable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b548:	b500      	push	{lr}
    b54a:	b083      	sub	sp, #12
    b54c:	9001      	str	r0, [sp, #4]
    /*
    * [SWS_Can_00208] ⌈ The function Can_EnableControllerInterrupts shall perform no
    * action when Can_DisableControllerInterrupts has not been called before.⌋
    */
    if (FALSE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    b54e:	9b01      	ldr	r3, [sp, #4]
    b550:	785b      	ldrb	r3, [r3, #1]
    b552:	461a      	mov	r2, r3
    b554:	4b11      	ldr	r3, [pc, #68]	; (b59c <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    b556:	5c9b      	ldrb	r3, [r3, r2]
    b558:	f083 0301 	eor.w	r3, r3, #1
    b55c:	b2db      	uxtb	r3, r3
    b55e:	2b00      	cmp	r3, #0
    b560:	d018      	beq.n	b594 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x4c>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b562:	9b01      	ldr	r3, [sp, #4]
    b564:	789b      	ldrb	r3, [r3, #2]
    b566:	4618      	mov	r0, r3
    b568:	f002 fdb2 	bl	e0d0 <FlexCAN_Ip_EnableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    b56c:	9b01      	ldr	r3, [sp, #4]
    b56e:	7a5b      	ldrb	r3, [r3, #9]
    b570:	f083 0301 	eor.w	r3, r3, #1
    b574:	b2db      	uxtb	r3, r3
    b576:	2b00      	cmp	r3, #0
    b578:	d006      	beq.n	b588 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x40>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    b57a:	9b01      	ldr	r3, [sp, #4]
    b57c:	789b      	ldrb	r3, [r3, #2]
    b57e:	2201      	movs	r2, #1
    b580:	2104      	movs	r1, #4
    b582:	4618      	mov	r0, r3
    b584:	f002 fdfe 	bl	e184 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        /* update status */
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    b588:	9b01      	ldr	r3, [sp, #4]
    b58a:	785b      	ldrb	r3, [r3, #1]
    b58c:	461a      	mov	r2, r3
    b58e:	4b03      	ldr	r3, [pc, #12]	; (b59c <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    b590:	2101      	movs	r1, #1
    b592:	5499      	strb	r1, [r3, r2]
    }
}
    b594:	bf00      	nop
    b596:	b003      	add	sp, #12
    b598:	f85d fb04 	ldr.w	pc, [sp], #4
    b59c:	1fff9358 	.word	0x1fff9358

0000b5a0 <Can_43_FLEXCAN_Ipw_GetControllerErrorState>:

/**
*   @brief      Get Controller Error State
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerErrorState(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    b5a0:	b500      	push	{lr}
    b5a2:	b085      	sub	sp, #20
    b5a4:	9001      	str	r0, [sp, #4]
    b5a6:	9100      	str	r1, [sp, #0]
    uint32 Error = 0U;
    b5a8:	2300      	movs	r3, #0
    b5aa:	9303      	str	r3, [sp, #12]

    Error = FlexCAN_Ip_GetErrorStatus(Can_pControllerConfig->Can_u8ControllerOffset);
    b5ac:	9b01      	ldr	r3, [sp, #4]
    b5ae:	789b      	ldrb	r3, [r3, #2]
    b5b0:	4618      	mov	r0, r3
    b5b2:	f001 fe81 	bl	d2b8 <FlexCAN_Ip_GetErrorStatus>
    b5b6:	9003      	str	r0, [sp, #12]

    *pValue = (uint8)((Error & FLEXCAN_ESR1_FLTCONF_MASK)>>FLEXCAN_ESR1_FLTCONF_SHIFT);
    b5b8:	9b03      	ldr	r3, [sp, #12]
    b5ba:	091b      	lsrs	r3, r3, #4
    b5bc:	b2db      	uxtb	r3, r3
    b5be:	f003 0303 	and.w	r3, r3, #3
    b5c2:	b2da      	uxtb	r2, r3
    b5c4:	9b00      	ldr	r3, [sp, #0]
    b5c6:	701a      	strb	r2, [r3, #0]
    return E_OK;
    b5c8:	2300      	movs	r3, #0
}
    b5ca:	4618      	mov	r0, r3
    b5cc:	b005      	add	sp, #20
    b5ce:	f85d fb04 	ldr.w	pc, [sp], #4

0000b5d2 <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>:

/**
*   @brief      Get Controller Tx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    b5d2:	b500      	push	{lr}
    b5d4:	b083      	sub	sp, #12
    b5d6:	9001      	str	r0, [sp, #4]
    b5d8:	9100      	str	r1, [sp, #0]
     *pValue = FlexCAN_Ip_GetControllerTxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    b5da:	9b01      	ldr	r3, [sp, #4]
    b5dc:	789b      	ldrb	r3, [r3, #2]
    b5de:	4618      	mov	r0, r3
    b5e0:	f001 fe7c 	bl	d2dc <FlexCAN_Ip_GetControllerTxErrorCounter>
    b5e4:	4603      	mov	r3, r0
    b5e6:	461a      	mov	r2, r3
    b5e8:	9b00      	ldr	r3, [sp, #0]
    b5ea:	701a      	strb	r2, [r3, #0]
     return E_OK;
    b5ec:	2300      	movs	r3, #0
}
    b5ee:	4618      	mov	r0, r3
    b5f0:	b003      	add	sp, #12
    b5f2:	f85d fb04 	ldr.w	pc, [sp], #4

0000b5f6 <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>:

/**
*   @brief      Get Controller Rx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    b5f6:	b500      	push	{lr}
    b5f8:	b083      	sub	sp, #12
    b5fa:	9001      	str	r0, [sp, #4]
    b5fc:	9100      	str	r1, [sp, #0]

    *pValue = FlexCAN_Ip_GetControllerRxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    b5fe:	9b01      	ldr	r3, [sp, #4]
    b600:	789b      	ldrb	r3, [r3, #2]
    b602:	4618      	mov	r0, r3
    b604:	f001 fe7c 	bl	d300 <FlexCAN_Ip_GetControllerRxErrorCounter>
    b608:	4603      	mov	r3, r0
    b60a:	461a      	mov	r2, r3
    b60c:	9b00      	ldr	r3, [sp, #0]
    b60e:	701a      	strb	r2, [r3, #0]
    return E_OK;
    b610:	2300      	movs	r3, #0
}
    b612:	4618      	mov	r0, r3
    b614:	b003      	add	sp, #12
    b616:	f85d fb04 	ldr.w	pc, [sp], #4

0000b61a <Can_43_FLEXCAN_Ipw_Write>:
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
    const Can_PduType * PduInfo
)
{
    b61a:	b510      	push	{r4, lr}
    b61c:	b08c      	sub	sp, #48	; 0x30
    b61e:	9005      	str	r0, [sp, #20]
    b620:	9104      	str	r1, [sp, #16]
    b622:	9203      	str	r2, [sp, #12]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    b624:	2301      	movs	r3, #1
    b626:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_DataInfoType DataInfo;
    uint8 u8ObjIdx = 0U;
    b628:	2300      	movs	r3, #0
    b62a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
#if (CAN_43_FLEXCAN_TRIGGER_TRANSMIT_USED == STD_ON)
    PduInfoType CanIf_PduInfo;
    uint8 Data[64U];
#endif

    DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    b62e:	2300      	movs	r3, #0
    b630:	9306      	str	r3, [sp, #24]
    DataInfo.data_length = 0U;
    b632:	2300      	movs	r3, #0
    b634:	9307      	str	r3, [sp, #28]
    DataInfo.fd_padding = 0U;
    b636:	2300      	movs	r3, #0
    b638:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    DataInfo.fd_enable = FALSE;
    b63c:	2300      	movs	r3, #0
    b63e:	f88d 3020 	strb.w	r3, [sp, #32]
    DataInfo.enable_brs = FALSE;
    b642:	2300      	movs	r3, #0
    b644:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    DataInfo.is_remote = FALSE;
    b648:	2300      	movs	r3, #0
    b64a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    DataInfo.is_polling = FALSE;
    b64e:	2300      	movs	r3, #0
    b650:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if (CAN_TX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    b654:	9b04      	ldr	r3, [sp, #16]
    b656:	699b      	ldr	r3, [r3, #24]
    b658:	2b03      	cmp	r3, #3
    b65a:	d173      	bne.n	b744 <Can_43_FLEXCAN_Ipw_Write+0x12a>
    {
        DataInfo.msg_id_type = ((PduInfo->id & CAN_43_FLEXCAN_EXTENDED_ID_U32) != 0U) ? FLEXCAN_MSG_ID_EXT : FLEXCAN_MSG_ID_STD;
    b65c:	9b03      	ldr	r3, [sp, #12]
    b65e:	681b      	ldr	r3, [r3, #0]
    b660:	0fdb      	lsrs	r3, r3, #31
    b662:	9306      	str	r3, [sp, #24]
        if (Can_pHwObjectConfig->Can_u8PayloadLength <=  PduInfo->length)
    b664:	9b04      	ldr	r3, [sp, #16]
    b666:	7c1a      	ldrb	r2, [r3, #16]
    b668:	9b03      	ldr	r3, [sp, #12]
    b66a:	799b      	ldrb	r3, [r3, #6]
    b66c:	429a      	cmp	r2, r3
    b66e:	d803      	bhi.n	b678 <Can_43_FLEXCAN_Ipw_Write+0x5e>
        {
            DataInfo.data_length = Can_pHwObjectConfig->Can_u8PayloadLength;
    b670:	9b04      	ldr	r3, [sp, #16]
    b672:	7c1b      	ldrb	r3, [r3, #16]
    b674:	9307      	str	r3, [sp, #28]
    b676:	e002      	b.n	b67e <Can_43_FLEXCAN_Ipw_Write+0x64>
        }
        else
        {
            DataInfo.data_length = PduInfo->length;
    b678:	9b03      	ldr	r3, [sp, #12]
    b67a:	799b      	ldrb	r3, [r3, #6]
    b67c:	9307      	str	r3, [sp, #28]
        }
#if (CAN_43_FLEXCAN_FEATURE_HAS_FD == STD_ON)
        DataInfo.fd_padding = Can_pHwObjectConfig->Can_u8PaddingValue;
    b67e:	9b04      	ldr	r3, [sp, #16]
    b680:	7c5b      	ldrb	r3, [r3, #17]
    b682:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        DataInfo.fd_enable = ((PduInfo->id & CAN_43_FLEXCAN_FD_FRAME_U32) != 0U) ? TRUE : FALSE;
    b686:	9b03      	ldr	r3, [sp, #12]
    b688:	681b      	ldr	r3, [r3, #0]
    b68a:	0f9b      	lsrs	r3, r3, #30
    b68c:	f003 0301 	and.w	r3, r3, #1
    b690:	2b00      	cmp	r3, #0
    b692:	bf14      	ite	ne
    b694:	2301      	movne	r3, #1
    b696:	2300      	moveq	r3, #0
    b698:	b2db      	uxtb	r3, r3
    b69a:	f88d 3020 	strb.w	r3, [sp, #32]
    #if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
            DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID]].Can_bBitRateSwitch;
    #else
        DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bBitRateSwitch;
    b69e:	9b05      	ldr	r3, [sp, #20]
    b6a0:	6a1a      	ldr	r2, [r3, #32]
    b6a2:	9b05      	ldr	r3, [sp, #20]
    b6a4:	8b9b      	ldrh	r3, [r3, #28]
    b6a6:	4619      	mov	r1, r3
    b6a8:	2316      	movs	r3, #22
    b6aa:	fb01 f303 	mul.w	r3, r1, r3
    b6ae:	4413      	add	r3, r2
    b6b0:	781b      	ldrb	r3, [r3, #0]
    b6b2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    #endif
#endif
        DataInfo.is_remote = FALSE;
    b6b6:	2300      	movs	r3, #0
    b6b8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
        DataInfo.is_polling = Can_pHwObjectConfig->Can_bHwObjectUsesPolling;
    b6bc:	9b04      	ldr	r3, [sp, #16]
    b6be:	7b1b      	ldrb	r3, [r3, #12]
    b6c0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        do
        {
            eRetVal = FlexCAN_Ip_GetTransferStatus(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx);
    b6c4:	9b05      	ldr	r3, [sp, #20]
    b6c6:	7898      	ldrb	r0, [r3, #2]
    b6c8:	9b04      	ldr	r3, [sp, #16]
    b6ca:	7f1a      	ldrb	r2, [r3, #28]
    b6cc:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    b6d0:	4413      	add	r3, r2
    b6d2:	b2db      	uxtb	r3, r3
    b6d4:	4619      	mov	r1, r3
    b6d6:	f001 fcdd 	bl	d094 <FlexCAN_Ip_GetTransferStatus>
    b6da:	900b      	str	r0, [sp, #44]	; 0x2c
            if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    b6dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b6de:	2b00      	cmp	r3, #0
    b6e0:	d122      	bne.n	b728 <Can_43_FLEXCAN_Ipw_Write+0x10e>
            {
                #if ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))
                Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = PduInfo->swPduHandle;
    b6e2:	9b05      	ldr	r3, [sp, #20]
    b6e4:	785b      	ldrb	r3, [r3, #1]
    b6e6:	461c      	mov	r4, r3
    b6e8:	9b04      	ldr	r3, [sp, #16]
    b6ea:	7f1b      	ldrb	r3, [r3, #28]
    b6ec:	461a      	mov	r2, r3
    b6ee:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    b6f2:	4413      	add	r3, r2
    b6f4:	9a03      	ldr	r2, [sp, #12]
    b6f6:	8890      	ldrh	r0, [r2, #4]
    b6f8:	491b      	ldr	r1, [pc, #108]	; (b768 <Can_43_FLEXCAN_Ipw_Write+0x14e>)
    b6fa:	0162      	lsls	r2, r4, #5
    b6fc:	4413      	add	r3, r2
    b6fe:	4602      	mov	r2, r0
    b700:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                    }
                }
                else
                {
            #endif
                    eRetVal = FlexCAN_Ip_Send(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx, &DataInfo, PduInfo->id, PduInfo->sdu);
    b704:	9b05      	ldr	r3, [sp, #20]
    b706:	7898      	ldrb	r0, [r3, #2]
    b708:	9b04      	ldr	r3, [sp, #16]
    b70a:	7f1a      	ldrb	r2, [r3, #28]
    b70c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    b710:	4413      	add	r3, r2
    b712:	b2d9      	uxtb	r1, r3
    b714:	9b03      	ldr	r3, [sp, #12]
    b716:	681c      	ldr	r4, [r3, #0]
    b718:	9b03      	ldr	r3, [sp, #12]
    b71a:	689b      	ldr	r3, [r3, #8]
    b71c:	aa06      	add	r2, sp, #24
    b71e:	9300      	str	r3, [sp, #0]
    b720:	4623      	mov	r3, r4
    b722:	f001 fa4b 	bl	cbbc <FlexCAN_Ip_Send>
    b726:	900b      	str	r0, [sp, #44]	; 0x2c
                /* Revert to FALSE due to the MB was not transmitted successfully */
                Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = FALSE;
            }
            #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */
            }
            u8ObjIdx++;
    b728:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    b72c:	3301      	adds	r3, #1
    b72e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        } while ((u8ObjIdx < Can_pHwObjectConfig->Can_u8ObjectCount) && (FLEXCAN_STATUS_BUSY == eRetVal));
    b732:	9b04      	ldr	r3, [sp, #16]
    b734:	7b9b      	ldrb	r3, [r3, #14]
    b736:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    b73a:	429a      	cmp	r2, r3
    b73c:	d202      	bcs.n	b744 <Can_43_FLEXCAN_Ipw_Write+0x12a>
    b73e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b740:	2b02      	cmp	r3, #2
    b742:	d0bf      	beq.n	b6c4 <Can_43_FLEXCAN_Ipw_Write+0xaa>
    }

    if ((FLEXCAN_STATUS_SUCCESS != eRetVal) && (FLEXCAN_STATUS_BUSY != eRetVal))
    b744:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b746:	2b00      	cmp	r3, #0
    b748:	d004      	beq.n	b754 <Can_43_FLEXCAN_Ipw_Write+0x13a>
    b74a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b74c:	2b02      	cmp	r3, #2
    b74e:	d001      	beq.n	b754 <Can_43_FLEXCAN_Ipw_Write+0x13a>
    {
        eRetVal = FLEXCAN_STATUS_ERROR;
    b750:	2301      	movs	r3, #1
    b752:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    return ((FLEXCAN_STATUS_BUSY == eRetVal) ? ((Std_ReturnType)CAN_BUSY) : ((Std_ReturnType)eRetVal));
    b754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b756:	2b02      	cmp	r3, #2
    b758:	d002      	beq.n	b760 <Can_43_FLEXCAN_Ipw_Write+0x146>
    b75a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b75c:	b2db      	uxtb	r3, r3
    b75e:	e000      	b.n	b762 <Can_43_FLEXCAN_Ipw_Write+0x148>
    b760:	2302      	movs	r3, #2
}
    b762:	4618      	mov	r0, r3
    b764:	b00c      	add	sp, #48	; 0x30
    b766:	bd10      	pop	{r4, pc}
    b768:	1fff9258 	.word	0x1fff9258

0000b76c <Can_Ipw_InitRx>:

static void Can_Ipw_InitRx(const Can_43_FLEXCAN_ControllerConfigType * Can_pController)
{
    b76c:	b500      	push	{lr}
    b76e:	b089      	sub	sp, #36	; 0x24
    b770:	9001      	str	r0, [sp, #4]
    uint8 u8HwObjRefIdx = 0U;
    b772:	2300      	movs	r3, #0
    b774:	f88d 301f 	strb.w	r3, [sp, #31]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    Flexcan_Ip_DataInfoType DataInfo;

    /* This function just is called only if controller is in freeze mode */
    /* Always enable individual mask , Already in freeze mode */
    (void)FlexCAN_Ip_SetRxMaskType(Can_pController->Can_u8ControllerOffset, FLEXCAN_RX_MASK_INDIVIDUAL);
    b778:	9b01      	ldr	r3, [sp, #4]
    b77a:	789b      	ldrb	r3, [r3, #2]
    b77c:	2101      	movs	r1, #1
    b77e:	4618      	mov	r0, r3
    b780:	f002 fa42 	bl	dc08 <FlexCAN_Ip_SetRxMaskType_Privileged>

    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b784:	2300      	movs	r3, #0
    b786:	f88d 301f 	strb.w	r3, [sp, #31]
    b78a:	e03a      	b.n	b802 <Can_Ipw_InitRx+0x96>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pController->Can_ppHwObject[u8HwObjRefIdx];
    b78c:	9b01      	ldr	r3, [sp, #4]
    b78e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b790:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b794:	009b      	lsls	r3, r3, #2
    b796:	4413      	add	r3, r2
    b798:	681b      	ldr	r3, [r3, #0]
    b79a:	9306      	str	r3, [sp, #24]

        if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    b79c:	9b06      	ldr	r3, [sp, #24]
    b79e:	699b      	ldr	r3, [r3, #24]
    b7a0:	2b00      	cmp	r3, #0
    b7a2:	d121      	bne.n	b7e8 <Can_Ipw_InitRx+0x7c>
        {
            DataInfo.fd_enable = FALSE;
    b7a4:	2300      	movs	r3, #0
    b7a6:	f88d 3010 	strb.w	r3, [sp, #16]
            DataInfo.data_length = 0U;
    b7aa:	2300      	movs	r3, #0
    b7ac:	9303      	str	r3, [sp, #12]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    b7ae:	9b06      	ldr	r3, [sp, #24]
    b7b0:	689b      	ldr	r3, [r3, #8]
    b7b2:	2b00      	cmp	r3, #0
    b7b4:	d002      	beq.n	b7bc <Can_Ipw_InitRx+0x50>
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_EXT;
    b7b6:	2301      	movs	r3, #1
    b7b8:	9302      	str	r3, [sp, #8]
    b7ba:	e001      	b.n	b7c0 <Can_Ipw_InitRx+0x54>
            }
            else
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    b7bc:	2300      	movs	r3, #0
    b7be:	9302      	str	r3, [sp, #8]
            }
            (void)FlexCAN_Ip_ConfigRxMb(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, &DataInfo, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterCode);
    b7c0:	9b01      	ldr	r3, [sp, #4]
    b7c2:	7898      	ldrb	r0, [r3, #2]
    b7c4:	9b06      	ldr	r3, [sp, #24]
    b7c6:	7f19      	ldrb	r1, [r3, #28]
    b7c8:	9b06      	ldr	r3, [sp, #24]
    b7ca:	695b      	ldr	r3, [r3, #20]
    b7cc:	681b      	ldr	r3, [r3, #0]
    b7ce:	aa02      	add	r2, sp, #8
    b7d0:	f001 fa40 	bl	cc54 <FlexCAN_Ip_ConfigRxMb>
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterMask);
    b7d4:	9b01      	ldr	r3, [sp, #4]
    b7d6:	7898      	ldrb	r0, [r3, #2]
    b7d8:	9b06      	ldr	r3, [sp, #24]
    b7da:	7f19      	ldrb	r1, [r3, #28]
    b7dc:	9b06      	ldr	r3, [sp, #24]
    b7de:	695b      	ldr	r3, [r3, #20]
    b7e0:	685b      	ldr	r3, [r3, #4]
    b7e2:	461a      	mov	r2, r3
    b7e4:	f001 ffc8 	bl	d778 <FlexCAN_Ip_SetRxIndividualMask_Privileged>
        }

        if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    b7e8:	9b06      	ldr	r3, [sp, #24]
    b7ea:	699b      	ldr	r3, [r3, #24]
    b7ec:	2b01      	cmp	r3, #1
    b7ee:	d103      	bne.n	b7f8 <Can_Ipw_InitRx+0x8c>
        {
            Can_Ipw_InitLegacyFifoFilter(Can_pController, Can_pHwObject);
    b7f0:	9906      	ldr	r1, [sp, #24]
    b7f2:	9801      	ldr	r0, [sp, #4]
    b7f4:	f7ff f8ff 	bl	a9f6 <Can_Ipw_InitLegacyFifoFilter>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b7f8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b7fc:	3301      	adds	r3, #1
    b7fe:	f88d 301f 	strb.w	r3, [sp, #31]
    b802:	9b01      	ldr	r3, [sp, #4]
    b804:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    b808:	f89d 201f 	ldrb.w	r2, [sp, #31]
    b80c:	429a      	cmp	r2, r3
    b80e:	d3bd      	bcc.n	b78c <Can_Ipw_InitRx+0x20>
        }
    }
}
    b810:	bf00      	nop
    b812:	bf00      	nop
    b814:	b009      	add	sp, #36	; 0x24
    b816:	f85d fb04 	ldr.w	pc, [sp], #4

0000b81a <Can_43_FLEXCAN_Ipw_MainFunction_Mode>:
void Can_43_FLEXCAN_Ipw_MainFunction_Mode
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    Can_ControllerStateType * Can_pControllerState
)
{
    b81a:	b500      	push	{lr}
    b81c:	b083      	sub	sp, #12
    b81e:	9001      	str	r0, [sp, #4]
    b820:	9100      	str	r1, [sp, #0]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    if (CAN_CS_STARTED == *Can_pControllerState)
    b822:	9b00      	ldr	r3, [sp, #0]
    b824:	681b      	ldr	r3, [r3, #0]
    b826:	2b01      	cmp	r3, #1
    b828:	d114      	bne.n	b854 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x3a>
    {
        if (FALSE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    b82a:	9b01      	ldr	r3, [sp, #4]
    b82c:	789b      	ldrb	r3, [r3, #2]
    b82e:	4618      	mov	r0, r3
    b830:	f002 f994 	bl	db5c <FlexCAN_Ip_GetStartMode_Privileged>
    b834:	4603      	mov	r3, r0
    b836:	f083 0301 	eor.w	r3, r3, #1
    b83a:	b2db      	uxtb	r3, r3
    b83c:	2b00      	cmp	r3, #0
    b83e:	d01e      	beq.n	b87e <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        {
            *Can_pControllerState = CAN_CS_STOPPED;
    b840:	9b00      	ldr	r3, [sp, #0]
    b842:	2202      	movs	r2, #2
    b844:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STOPPED);
    b846:	9b01      	ldr	r3, [sp, #4]
    b848:	781b      	ldrb	r3, [r3, #0]
    b84a:	2102      	movs	r1, #2
    b84c:	4618      	mov	r0, r3
    b84e:	f00b fc61 	bl	17114 <CanIf_ControllerModeIndication>
    }
    else
    {
        /* nothing to do */
    }
}
    b852:	e014      	b.n	b87e <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
    else if (CAN_CS_STOPPED == *Can_pControllerState)
    b854:	9b00      	ldr	r3, [sp, #0]
    b856:	681b      	ldr	r3, [r3, #0]
    b858:	2b02      	cmp	r3, #2
    b85a:	d110      	bne.n	b87e <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        if (TRUE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    b85c:	9b01      	ldr	r3, [sp, #4]
    b85e:	789b      	ldrb	r3, [r3, #2]
    b860:	4618      	mov	r0, r3
    b862:	f002 f97b 	bl	db5c <FlexCAN_Ip_GetStartMode_Privileged>
    b866:	4603      	mov	r3, r0
    b868:	2b00      	cmp	r3, #0
    b86a:	d008      	beq.n	b87e <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
            *Can_pControllerState = CAN_CS_STARTED;
    b86c:	9b00      	ldr	r3, [sp, #0]
    b86e:	2201      	movs	r2, #1
    b870:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STARTED);
    b872:	9b01      	ldr	r3, [sp, #4]
    b874:	781b      	ldrb	r3, [r3, #0]
    b876:	2101      	movs	r1, #1
    b878:	4618      	mov	r0, r3
    b87a:	f00b fc4b 	bl	17114 <CanIf_ControllerModeIndication>
}
    b87e:	bf00      	nop
    b880:	b003      	add	sp, #12
    b882:	f85d fb04 	ldr.w	pc, [sp], #4

0000b886 <Can_43_FLEXCAN_Ipw_ProcessHwObject>:
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_ConfigType * Can_pConfig,
        uint8 u8MbIdx,
        Can_43_FLEXCAN_MbType mbType
    )
    {
    b886:	b500      	push	{lr}
    b888:	b085      	sub	sp, #20
    b88a:	9003      	str	r0, [sp, #12]
    b88c:	9102      	str	r1, [sp, #8]
    b88e:	9300      	str	r3, [sp, #0]
    b890:	4613      	mov	r3, r2
    b892:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (mbType)
    b896:	9b00      	ldr	r3, [sp, #0]
    b898:	2b03      	cmp	r3, #3
    b89a:	d009      	beq.n	b8b0 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x2a>
    b89c:	9b00      	ldr	r3, [sp, #0]
    b89e:	2b03      	cmp	r3, #3
    b8a0:	d821      	bhi.n	b8e6 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
    b8a2:	9b00      	ldr	r3, [sp, #0]
    b8a4:	2b00      	cmp	r3, #0
    b8a6:	d00c      	beq.n	b8c2 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x3c>
    b8a8:	9b00      	ldr	r3, [sp, #0]
    b8aa:	2b01      	cmp	r3, #1
    b8ac:	d012      	beq.n	b8d4 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x4e>
                break;
            }
            default:
            {
                /* prevent misra */
                break;
    b8ae:	e01a      	b.n	b8e6 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
                Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    b8b0:	9b02      	ldr	r3, [sp, #8]
    b8b2:	691b      	ldr	r3, [r3, #16]
    b8b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    b8b8:	4619      	mov	r1, r3
    b8ba:	9803      	ldr	r0, [sp, #12]
    b8bc:	f7ff faf8 	bl	aeb0 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>
                break;
    b8c0:	e012      	b.n	b8e8 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    b8c2:	9b02      	ldr	r3, [sp, #8]
    b8c4:	691b      	ldr	r3, [r3, #16]
    b8c6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    b8ca:	4619      	mov	r1, r3
    b8cc:	9803      	ldr	r0, [sp, #12]
    b8ce:	f7ff fb3b 	bl	af48 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    b8d2:	e009      	b.n	b8e8 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                    Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    b8d4:	9b02      	ldr	r3, [sp, #8]
    b8d6:	691b      	ldr	r3, [r3, #16]
    b8d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    b8dc:	4619      	mov	r1, r3
    b8de:	9803      	ldr	r0, [sp, #12]
    b8e0:	f7ff fb32 	bl	af48 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    b8e4:	e000      	b.n	b8e8 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                break;
    b8e6:	bf00      	nop
            }
        }
    }
    b8e8:	bf00      	nop
    b8ea:	b005      	add	sp, #20
    b8ec:	f85d fb04 	ldr.w	pc, [sp], #4

0000b8f0 <Can_43_FLEXCAN_CommonIrqCallback>:
void Can_43_FLEXCAN_CommonIrqCallback(uint8 u8Instance,
                           Flexcan_Ip_EventType event,
                           uint32 u32buffIdx,
                           const Flexcan_Ip_StateType *driverState
                          )
{
    b8f0:	b500      	push	{lr}
    b8f2:	b085      	sub	sp, #20
    b8f4:	9102      	str	r1, [sp, #8]
    b8f6:	9201      	str	r2, [sp, #4]
    b8f8:	9300      	str	r3, [sp, #0]
    b8fa:	4603      	mov	r3, r0
    b8fc:	f88d 300f 	strb.w	r3, [sp, #15]
    else
    {
#endif /* CAN_43_FLEXCAN_FEATURE_HAS_ENHANCED_RX_FIFO */
    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        /* This callback is just used for interrupt buffter */
        if (FALSE == (driverState->mbs[u32buffIdx].isPolling))
    b900:	9a00      	ldr	r2, [sp, #0]
    b902:	9b01      	ldr	r3, [sp, #4]
    b904:	011b      	lsls	r3, r3, #4
    b906:	4413      	add	r3, r2
    b908:	3308      	adds	r3, #8
    b90a:	781b      	ldrb	r3, [r3, #0]
    b90c:	f083 0301 	eor.w	r3, r3, #1
    b910:	b2db      	uxtb	r3, r3
    b912:	2b00      	cmp	r3, #0
    b914:	d03b      	beq.n	b98e <Can_43_FLEXCAN_CommonIrqCallback+0x9e>
    b916:	9b02      	ldr	r3, [sp, #8]
    b918:	2b04      	cmp	r3, #4
    b91a:	d83a      	bhi.n	b992 <Can_43_FLEXCAN_CommonIrqCallback+0xa2>
    b91c:	a201      	add	r2, pc, #4	; (adr r2, b924 <Can_43_FLEXCAN_CommonIrqCallback+0x34>)
    b91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b922:	bf00      	nop
    b924:	0000b94b 	.word	0x0000b94b
    b928:	0000b95d 	.word	0x0000b95d
    b92c:	0000b96f 	.word	0x0000b96f
    b930:	0000b97f 	.word	0x0000b97f
    b934:	0000b939 	.word	0x0000b939
        {
            switch (event)
            {
                case FLEXCAN_EVENT_TX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_TX_NORMAL);
    b938:	9b01      	ldr	r3, [sp, #4]
    b93a:	b2d9      	uxtb	r1, r3
    b93c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b940:	2203      	movs	r2, #3
    b942:	4618      	mov	r0, r3
    b944:	f7fe ff72 	bl	a82c <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b948:	e024      	b.n	b994 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_NORMAL);
    b94a:	9b01      	ldr	r3, [sp, #4]
    b94c:	b2d9      	uxtb	r1, r3
    b94e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b952:	2200      	movs	r2, #0
    b954:	4618      	mov	r0, r3
    b956:	f7fe ff69 	bl	a82c <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b95a:	e01b      	b.n	b994 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_LEGACY_FIFO);
    b95c:	9b01      	ldr	r3, [sp, #4]
    b95e:	b2d9      	uxtb	r1, r3
    b960:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b964:	2201      	movs	r2, #1
    b966:	4618      	mov	r0, r3
    b968:	f7fe ff60 	bl	a82c <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b96c:	e012      	b.n	b994 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_WARNING:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 6U, CAN_RX_LEGACY_FIFO);
    b96e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b972:	2201      	movs	r2, #1
    b974:	2106      	movs	r1, #6
    b976:	4618      	mov	r0, r3
    b978:	f7fe ff58 	bl	a82c <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b97c:	e00a      	b.n	b994 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_OVERFLOW:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 7U, CAN_RX_LEGACY_FIFO);
    b97e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b982:	2201      	movs	r2, #1
    b984:	2107      	movs	r1, #7
    b986:	4618      	mov	r0, r3
    b988:	f7fe ff50 	bl	a82c <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b98c:	e002      	b.n	b994 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                {
                    /* nothing to do */
                    break;
                }
            }
        }
    b98e:	bf00      	nop
    b990:	e000      	b.n	b994 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                    break;
    b992:	bf00      	nop
        Can_43_FLEXCAN_ProcessPNInterrupt(u8Instance);
    }
#endif /* (CAN_43_FLEXCAN_FEATURE_HAS_PRETENDED_NETWORKING == STD_ON) */
    (void)u32buffIdx;
    (void)driverState;
}
    b994:	bf00      	nop
    b996:	b005      	add	sp, #20
    b998:	f85d fb04 	ldr.w	pc, [sp], #4

0000b99c <Can_43_FLEXCAN_ErrorIrqCallback>:
void Can_43_FLEXCAN_ErrorIrqCallback(uint8 u8Instance,
                          Flexcan_Ip_EventType event,
                          uint32 u32ErrStatus,
                          const Flexcan_Ip_StateType *driverState
                         )
{
    b99c:	b500      	push	{lr}
    b99e:	b085      	sub	sp, #20
    b9a0:	9102      	str	r1, [sp, #8]
    b9a2:	9201      	str	r2, [sp, #4]
    b9a4:	9300      	str	r3, [sp, #0]
    b9a6:	4603      	mov	r3, r0
    b9a8:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) driverState; /* not used yet */
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON)
    (void) u32ErrStatus; /* prevent compiler warning */
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON) */

    switch (event)
    b9ac:	9b02      	ldr	r3, [sp, #8]
    b9ae:	2b07      	cmp	r3, #7
    b9b0:	d105      	bne.n	b9be <Can_43_FLEXCAN_ErrorIrqCallback+0x22>
        }
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON) */
        /* this function is called for both interrupt & polling */
        case FLEXCAN_EVENT_BUSOFF:
        {
            Can_43_FLEXCAN_ProcessBusOffInterrupt(u8Instance);
    b9b2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b9b6:	4618      	mov	r0, r3
    b9b8:	f7fe ff7a 	bl	a8b0 <Can_43_FLEXCAN_ProcessBusOffInterrupt>
            break;
    b9bc:	e000      	b.n	b9c0 <Can_43_FLEXCAN_ErrorIrqCallback+0x24>
        }
        default:
        {
            /* nothing to do */
            break;
    b9be:	bf00      	nop
        }
    }
}
    b9c0:	bf00      	nop
    b9c2:	b005      	add	sp, #20
    b9c4:	f85d fb04 	ldr.w	pc, [sp], #4

0000b9c8 <FlexCAN_SetRxFifoGlobalMask>:
 *
 * @param[in]   base  The FlexCAN base address
 * @param[in]   Mask     Sets mask
 */
static inline void FlexCAN_SetRxFifoGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    b9c8:	b082      	sub	sp, #8
    b9ca:	9001      	str	r0, [sp, #4]
    b9cc:	9100      	str	r1, [sp, #0]
    (base->RXFGMASK) = Mask;
    b9ce:	9b01      	ldr	r3, [sp, #4]
    b9d0:	9a00      	ldr	r2, [sp, #0]
    b9d2:	649a      	str	r2, [r3, #72]	; 0x48
}
    b9d4:	bf00      	nop
    b9d6:	b002      	add	sp, #8
    b9d8:	4770      	bx	lr

0000b9da <FlexCAN_SetTDCOffset>:
 */
static inline void FlexCAN_SetTDCOffset(FLEXCAN_Type * base,
                                        boolean enable,
                                        uint8 offset
                                       )
{
    b9da:	b084      	sub	sp, #16
    b9dc:	9001      	str	r0, [sp, #4]
    b9de:	460b      	mov	r3, r1
    b9e0:	f88d 3003 	strb.w	r3, [sp, #3]
    b9e4:	4613      	mov	r3, r2
    b9e6:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 tmp;

    tmp = base->FDCTRL;
    b9ea:	9b01      	ldr	r3, [sp, #4]
    b9ec:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    b9f0:	9303      	str	r3, [sp, #12]
    tmp &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    b9f2:	9b03      	ldr	r3, [sp, #12]
    b9f4:	f423 431f 	bic.w	r3, r3, #40704	; 0x9f00
    b9f8:	9303      	str	r3, [sp, #12]

    if (enable)
    b9fa:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b9fe:	2b00      	cmp	r3, #0
    ba00:	d00b      	beq.n	ba1a <FlexCAN_SetTDCOffset+0x40>
    {
        tmp = tmp | FLEXCAN_FDCTRL_TDCEN_MASK;
    ba02:	9b03      	ldr	r3, [sp, #12]
    ba04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    ba08:	9303      	str	r3, [sp, #12]
        tmp = tmp | FLEXCAN_FDCTRL_TDCOFF(offset);
    ba0a:	f89d 3002 	ldrb.w	r3, [sp, #2]
    ba0e:	021b      	lsls	r3, r3, #8
    ba10:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    ba14:	9a03      	ldr	r2, [sp, #12]
    ba16:	4313      	orrs	r3, r2
    ba18:	9303      	str	r3, [sp, #12]
    }

    base->FDCTRL = tmp;
    ba1a:	9b01      	ldr	r3, [sp, #4]
    ba1c:	9a03      	ldr	r2, [sp, #12]
    ba1e:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    ba22:	bf00      	nop
    ba24:	b004      	add	sp, #16
    ba26:	4770      	bx	lr

0000ba28 <FlexCAN_IsEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsEnabled(const FLEXCAN_Type * pBase)
{
    ba28:	b082      	sub	sp, #8
    ba2a:	9001      	str	r0, [sp, #4]
    return (((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U) ? FALSE : TRUE;
    ba2c:	9b01      	ldr	r3, [sp, #4]
    ba2e:	681b      	ldr	r3, [r3, #0]
    ba30:	43db      	mvns	r3, r3
    ba32:	0fdb      	lsrs	r3, r3, #31
    ba34:	b2db      	uxtb	r3, r3
}
    ba36:	4618      	mov	r0, r3
    ba38:	b002      	add	sp, #8
    ba3a:	4770      	bx	lr

0000ba3c <FlexCAN_SetFDEnabled>:
 */
static inline void FlexCAN_SetFDEnabled(FLEXCAN_Type * base,
                                        boolean enableFD,
                                        boolean enableBRS
                                       )
{
    ba3c:	b082      	sub	sp, #8
    ba3e:	9001      	str	r0, [sp, #4]
    ba40:	460b      	mov	r3, r1
    ba42:	f88d 3003 	strb.w	r3, [sp, #3]
    ba46:	4613      	mov	r3, r2
    ba48:	f88d 3002 	strb.w	r3, [sp, #2]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FDEN_MASK) | FLEXCAN_MCR_FDEN(enableFD ? 1UL : 0UL);
    ba4c:	9b01      	ldr	r3, [sp, #4]
    ba4e:	681b      	ldr	r3, [r3, #0]
    ba50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    ba54:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ba58:	2a00      	cmp	r2, #0
    ba5a:	d002      	beq.n	ba62 <FlexCAN_SetFDEnabled+0x26>
    ba5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    ba60:	e000      	b.n	ba64 <FlexCAN_SetFDEnabled+0x28>
    ba62:	2200      	movs	r2, #0
    ba64:	431a      	orrs	r2, r3
    ba66:	9b01      	ldr	r3, [sp, #4]
    ba68:	601a      	str	r2, [r3, #0]

    /* Enable BitRate Switch support from BRS_TX_MB field or ignore it */
    base->FDCTRL = (base->FDCTRL & ~FLEXCAN_FDCTRL_FDRATE_MASK) | FLEXCAN_FDCTRL_FDRATE(enableBRS ? 1UL : 0UL);
    ba6a:	9b01      	ldr	r3, [sp, #4]
    ba6c:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    ba70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    ba74:	f89d 2002 	ldrb.w	r2, [sp, #2]
    ba78:	2a00      	cmp	r2, #0
    ba7a:	d002      	beq.n	ba82 <FlexCAN_SetFDEnabled+0x46>
    ba7c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    ba80:	e000      	b.n	ba84 <FlexCAN_SetFDEnabled+0x48>
    ba82:	2200      	movs	r2, #0
    ba84:	431a      	orrs	r2, r3
    ba86:	9b01      	ldr	r3, [sp, #4]
    ba88:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00

    /* Disable Transmission Delay Compensation by default */
    base->FDCTRL &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    ba8c:	9b01      	ldr	r3, [sp, #4]
    ba8e:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    ba92:	f423 421f 	bic.w	r2, r3, #40704	; 0x9f00
    ba96:	9b01      	ldr	r3, [sp, #4]
    ba98:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    ba9c:	bf00      	nop
    ba9e:	b002      	add	sp, #8
    baa0:	4770      	bx	lr

0000baa2 <FlexCAN_SetListenOnlyMode>:
 *
 * @param   base    The FlexCAN base address
 * @param   enable  TRUE to enable; FALSE to disable
 */
static inline void FlexCAN_SetListenOnlyMode(FLEXCAN_Type * base, boolean enableListenOnly)
{
    baa2:	b082      	sub	sp, #8
    baa4:	9001      	str	r0, [sp, #4]
    baa6:	460b      	mov	r3, r1
    baa8:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(enableListenOnly ? 1UL : 0UL);
    baac:	9b01      	ldr	r3, [sp, #4]
    baae:	685b      	ldr	r3, [r3, #4]
    bab0:	f023 0308 	bic.w	r3, r3, #8
    bab4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bab8:	2a00      	cmp	r2, #0
    baba:	d001      	beq.n	bac0 <FlexCAN_SetListenOnlyMode+0x1e>
    babc:	2208      	movs	r2, #8
    babe:	e000      	b.n	bac2 <FlexCAN_SetListenOnlyMode+0x20>
    bac0:	2200      	movs	r2, #0
    bac2:	431a      	orrs	r2, r3
    bac4:	9b01      	ldr	r3, [sp, #4]
    bac6:	605a      	str	r2, [r3, #4]
}
    bac8:	bf00      	nop
    baca:	b002      	add	sp, #8
    bacc:	4770      	bx	lr

0000bace <FlexCAN_UnlockRxMsgBuff>:
 * @brief Unlocks the FlexCAN Rx message buffer.
 *
 * @param   base     The FlexCAN base address
 */
static inline void FlexCAN_UnlockRxMsgBuff(const FLEXCAN_Type * base)
{
    bace:	b082      	sub	sp, #8
    bad0:	9001      	str	r0, [sp, #4]
    /* Unlock the mailbox by reading the free running timer */
    (void)base->TIMER;
    bad2:	9b01      	ldr	r3, [sp, #4]
    bad4:	689b      	ldr	r3, [r3, #8]
}
    bad6:	bf00      	nop
    bad8:	b002      	add	sp, #8
    bada:	4770      	bx	lr

0000badc <FlexCAN_ClearMsgBuffIntStatusFlag>:
 *
 * @param   base        The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 */
static inline void FlexCAN_ClearMsgBuffIntStatusFlag(FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    badc:	b084      	sub	sp, #16
    bade:	9001      	str	r0, [sp, #4]
    bae0:	9100      	str	r1, [sp, #0]
    uint32 flag = ((uint32)1U << (msgBuffIdx % 32U));
    bae2:	9b00      	ldr	r3, [sp, #0]
    bae4:	f003 031f 	and.w	r3, r3, #31
    bae8:	2201      	movs	r2, #1
    baea:	fa02 f303 	lsl.w	r3, r2, r3
    baee:	9303      	str	r3, [sp, #12]

    /* Clear the corresponding message buffer interrupt flag*/
    if (msgBuffIdx < 32U)
    baf0:	9b00      	ldr	r3, [sp, #0]
    baf2:	2b1f      	cmp	r3, #31
    baf4:	d802      	bhi.n	bafc <FlexCAN_ClearMsgBuffIntStatusFlag+0x20>
    {
        (base->IFLAG1) = (flag);
    baf6:	9b01      	ldr	r3, [sp, #4]
    baf8:	9a03      	ldr	r2, [sp, #12]
    bafa:	631a      	str	r2, [r3, #48]	; 0x30
    else
    {
        (base->IFLAG4) = (flag);
    }
#endif
}
    bafc:	bf00      	nop
    bafe:	b004      	add	sp, #16
    bb00:	4770      	bx	lr

0000bb02 <FlexCAN_GetBuffStatusFlag>:
 * @param   base                The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 * @return  flag        The value of interrupt flag of the message buffer.
 */
static inline uint8 FlexCAN_GetBuffStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    bb02:	b084      	sub	sp, #16
    bb04:	9001      	str	r0, [sp, #4]
    bb06:	9100      	str	r1, [sp, #0]
    uint32 flag = 0U;
    bb08:	2300      	movs	r3, #0
    bb0a:	9303      	str	r3, [sp, #12]

    if (msgBuffIdx < 32U)
    bb0c:	9b00      	ldr	r3, [sp, #0]
    bb0e:	2b1f      	cmp	r3, #31
    bb10:	d80e      	bhi.n	bb30 <FlexCAN_GetBuffStatusFlag+0x2e>
    {
        flag = ((base->IFLAG1 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    bb12:	9b01      	ldr	r3, [sp, #4]
    bb14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    bb16:	9b00      	ldr	r3, [sp, #0]
    bb18:	f003 031f 	and.w	r3, r3, #31
    bb1c:	2101      	movs	r1, #1
    bb1e:	fa01 f303 	lsl.w	r3, r1, r3
    bb22:	401a      	ands	r2, r3
    bb24:	9b00      	ldr	r3, [sp, #0]
    bb26:	f003 031f 	and.w	r3, r3, #31
    bb2a:	fa22 f303 	lsr.w	r3, r2, r3
    bb2e:	9303      	str	r3, [sp, #12]
    {
        flag = ((base->IFLAG4 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    }
#endif

    return (uint8)flag;
    bb30:	9b03      	ldr	r3, [sp, #12]
    bb32:	b2db      	uxtb	r3, r3
}
    bb34:	4618      	mov	r0, r3
    bb36:	b004      	add	sp, #16
    bb38:	4770      	bx	lr

0000bb3a <FlexCAN_SetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetFDTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bb3a:	b082      	sub	sp, #8
    bb3c:	9001      	str	r0, [sp, #4]
    bb3e:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* Set FlexCAN time segments*/
    (base->FDCBT) = ((base->FDCBT) & ~((FLEXCAN_FDCBT_FPROPSEG_MASK | FLEXCAN_FDCBT_FPSEG2_MASK |
    bb40:	9b01      	ldr	r3, [sp, #4]
    bb42:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    bb46:	4b15      	ldr	r3, [pc, #84]	; (bb9c <FlexCAN_SetFDTimeSegments+0x62>)
    bb48:	4013      	ands	r3, r2
    bb4a:	9a01      	ldr	r2, [sp, #4]
    bb4c:	f8c2 3c04 	str.w	r3, [r2, #3076]	; 0xc04
                                        FLEXCAN_FDCBT_FPSEG1_MASK | FLEXCAN_FDCBT_FPRESDIV_MASK
                                       ) | FLEXCAN_FDCBT_FRJW_MASK
                                      )
                    );

    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    bb50:	9b01      	ldr	r3, [sp, #4]
    bb52:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    bb56:	9b00      	ldr	r3, [sp, #0]
    bb58:	681b      	ldr	r3, [r3, #0]
    bb5a:	029b      	lsls	r3, r3, #10
    bb5c:	f403 41f8 	and.w	r1, r3, #31744	; 0x7c00
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    bb60:	9b00      	ldr	r3, [sp, #0]
    bb62:	689b      	ldr	r3, [r3, #8]
    bb64:	f003 0307 	and.w	r3, r3, #7
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    bb68:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    bb6a:	9b00      	ldr	r3, [sp, #0]
    bb6c:	685b      	ldr	r3, [r3, #4]
    bb6e:	015b      	lsls	r3, r3, #5
    bb70:	b2db      	uxtb	r3, r3
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    bb72:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    bb74:	9b00      	ldr	r3, [sp, #0]
    bb76:	68db      	ldr	r3, [r3, #12]
    bb78:	0518      	lsls	r0, r3, #20
    bb7a:	4b09      	ldr	r3, [pc, #36]	; (bba0 <FlexCAN_SetFDTimeSegments+0x66>)
    bb7c:	4003      	ands	r3, r0
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    bb7e:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FRJW(timeSeg->rJumpwidth)
    bb80:	9b00      	ldr	r3, [sp, #0]
    bb82:	691b      	ldr	r3, [r3, #16]
    bb84:	041b      	lsls	r3, r3, #16
    bb86:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    bb8a:	430b      	orrs	r3, r1
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    bb8c:	431a      	orrs	r2, r3
    bb8e:	9b01      	ldr	r3, [sp, #4]
    bb90:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
                                     )
                    );
}
    bb94:	bf00      	nop
    bb96:	b002      	add	sp, #8
    bb98:	4770      	bx	lr
    bb9a:	bf00      	nop
    bb9c:	c0088318 	.word	0xc0088318
    bba0:	3ff00000 	.word	0x3ff00000

0000bba4 <FlexCAN_SetTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bba4:	b082      	sub	sp, #8
    bba6:	9001      	str	r0, [sp, #4]
    bba8:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    (base->CTRL1) = ((base->CTRL1) & ~((FLEXCAN_CTRL1_PROPSEG_MASK | FLEXCAN_CTRL1_PSEG2_MASK |
    bbaa:	9b01      	ldr	r3, [sp, #4]
    bbac:	685a      	ldr	r2, [r3, #4]
    bbae:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    bbb2:	4013      	ands	r3, r2
    bbb4:	9a01      	ldr	r2, [sp, #4]
    bbb6:	6053      	str	r3, [r2, #4]
                                        FLEXCAN_CTRL1_PSEG1_MASK | FLEXCAN_CTRL1_PRESDIV_MASK
                                       ) | FLEXCAN_CTRL1_RJW_MASK
                                      )
                    );

    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    bbb8:	9b01      	ldr	r3, [sp, #4]
    bbba:	685a      	ldr	r2, [r3, #4]
    bbbc:	9b00      	ldr	r3, [sp, #0]
    bbbe:	681b      	ldr	r3, [r3, #0]
    bbc0:	f003 0107 	and.w	r1, r3, #7
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    bbc4:	9b00      	ldr	r3, [sp, #0]
    bbc6:	689b      	ldr	r3, [r3, #8]
    bbc8:	041b      	lsls	r3, r3, #16
    bbca:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    bbce:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    bbd0:	9b00      	ldr	r3, [sp, #0]
    bbd2:	685b      	ldr	r3, [r3, #4]
    bbd4:	04db      	lsls	r3, r3, #19
    bbd6:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    bbda:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    bbdc:	9b00      	ldr	r3, [sp, #0]
    bbde:	68db      	ldr	r3, [r3, #12]
    bbe0:	061b      	lsls	r3, r3, #24
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    bbe2:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_RJW(timeSeg->rJumpwidth)
    bbe4:	9b00      	ldr	r3, [sp, #0]
    bbe6:	691b      	ldr	r3, [r3, #16]
    bbe8:	059b      	lsls	r3, r3, #22
    bbea:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    bbee:	430b      	orrs	r3, r1
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    bbf0:	431a      	orrs	r2, r3
    bbf2:	9b01      	ldr	r3, [sp, #4]
    bbf4:	605a      	str	r2, [r3, #4]
                                     )
                    );
}
    bbf6:	bf00      	nop
    bbf8:	b002      	add	sp, #8
    bbfa:	4770      	bx	lr

0000bbfc <FlexCAN_SetExtendedTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetExtendedTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bbfc:	b082      	sub	sp, #8
    bbfe:	9001      	str	r0, [sp, #4]
    bc00:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* If extended bit time definitions are enabled, use CBT register */
    (base->CBT) = ((base->CBT) & ~((FLEXCAN_CBT_EPROPSEG_MASK | FLEXCAN_CBT_EPSEG2_MASK |
    bc02:	9b01      	ldr	r3, [sp, #4]
    bc04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bc06:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
    bc0a:	9b01      	ldr	r3, [sp, #4]
    bc0c:	651a      	str	r2, [r3, #80]	; 0x50
                                    FLEXCAN_CBT_EPSEG1_MASK | FLEXCAN_CBT_EPRESDIV_MASK
                                   ) | FLEXCAN_CBT_ERJW_MASK
                                  )
                  );

    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    bc0e:	9b01      	ldr	r3, [sp, #4]
    bc10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    bc12:	9b00      	ldr	r3, [sp, #0]
    bc14:	681b      	ldr	r3, [r3, #0]
    bc16:	029b      	lsls	r3, r3, #10
    bc18:	b299      	uxth	r1, r3
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    bc1a:	9b00      	ldr	r3, [sp, #0]
    bc1c:	689b      	ldr	r3, [r3, #8]
    bc1e:	f003 031f 	and.w	r3, r3, #31
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    bc22:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    bc24:	9b00      	ldr	r3, [sp, #0]
    bc26:	685b      	ldr	r3, [r3, #4]
    bc28:	015b      	lsls	r3, r3, #5
    bc2a:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    bc2e:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    bc30:	9b00      	ldr	r3, [sp, #0]
    bc32:	68db      	ldr	r3, [r3, #12]
    bc34:	0558      	lsls	r0, r3, #21
    bc36:	4b07      	ldr	r3, [pc, #28]	; (bc54 <FlexCAN_SetExtendedTimeSegments+0x58>)
    bc38:	4003      	ands	r3, r0
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    bc3a:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_ERJW(timeSeg->rJumpwidth)
    bc3c:	9b00      	ldr	r3, [sp, #0]
    bc3e:	691b      	ldr	r3, [r3, #16]
    bc40:	041b      	lsls	r3, r3, #16
    bc42:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    bc46:	430b      	orrs	r3, r1
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    bc48:	431a      	orrs	r2, r3
    bc4a:	9b01      	ldr	r3, [sp, #4]
    bc4c:	651a      	str	r2, [r3, #80]	; 0x50
                                 )
                  );
}
    bc4e:	bf00      	nop
    bc50:	b002      	add	sp, #8
    bc52:	4770      	bx	lr
    bc54:	7fe00000 	.word	0x7fe00000

0000bc58 <FlexCAN_GetExtendedTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetExtendedTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bc58:	b082      	sub	sp, #8
    bc5a:	9001      	str	r0, [sp, #4]
    bc5c:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CBT) & FLEXCAN_CBT_EPRESDIV_MASK) >> FLEXCAN_CBT_EPRESDIV_SHIFT;
    bc5e:	9b01      	ldr	r3, [sp, #4]
    bc60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bc62:	0d5b      	lsrs	r3, r3, #21
    bc64:	f3c3 0209 	ubfx	r2, r3, #0, #10
    bc68:	9b00      	ldr	r3, [sp, #0]
    bc6a:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CBT) & FLEXCAN_CBT_EPROPSEG_MASK) >> FLEXCAN_CBT_EPROPSEG_SHIFT;
    bc6c:	9b01      	ldr	r3, [sp, #4]
    bc6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bc70:	0a9b      	lsrs	r3, r3, #10
    bc72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    bc76:	9b00      	ldr	r3, [sp, #0]
    bc78:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CBT) & FLEXCAN_CBT_EPSEG1_MASK) >> FLEXCAN_CBT_EPSEG1_SHIFT;
    bc7a:	9b01      	ldr	r3, [sp, #4]
    bc7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bc7e:	095b      	lsrs	r3, r3, #5
    bc80:	f003 021f 	and.w	r2, r3, #31
    bc84:	9b00      	ldr	r3, [sp, #0]
    bc86:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CBT) & FLEXCAN_CBT_EPSEG2_MASK) >> FLEXCAN_CBT_EPSEG2_SHIFT;
    bc88:	9b01      	ldr	r3, [sp, #4]
    bc8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bc8c:	f003 021f 	and.w	r2, r3, #31
    bc90:	9b00      	ldr	r3, [sp, #0]
    bc92:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CBT) & FLEXCAN_CBT_ERJW_MASK) >> FLEXCAN_CBT_ERJW_SHIFT;
    bc94:	9b01      	ldr	r3, [sp, #4]
    bc96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bc98:	0c1b      	lsrs	r3, r3, #16
    bc9a:	f003 021f 	and.w	r2, r3, #31
    bc9e:	9b00      	ldr	r3, [sp, #0]
    bca0:	611a      	str	r2, [r3, #16]
}
    bca2:	bf00      	nop
    bca4:	b002      	add	sp, #8
    bca6:	4770      	bx	lr

0000bca8 <FlexCAN_GetTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bca8:	b082      	sub	sp, #8
    bcaa:	9001      	str	r0, [sp, #4]
    bcac:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CTRL1) & FLEXCAN_CTRL1_PRESDIV_MASK) >> FLEXCAN_CTRL1_PRESDIV_SHIFT;
    bcae:	9b01      	ldr	r3, [sp, #4]
    bcb0:	685b      	ldr	r3, [r3, #4]
    bcb2:	0e1b      	lsrs	r3, r3, #24
    bcb4:	b2da      	uxtb	r2, r3
    bcb6:	9b00      	ldr	r3, [sp, #0]
    bcb8:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CTRL1) & FLEXCAN_CTRL1_PROPSEG_MASK) >> FLEXCAN_CTRL1_PROPSEG_SHIFT;
    bcba:	9b01      	ldr	r3, [sp, #4]
    bcbc:	685b      	ldr	r3, [r3, #4]
    bcbe:	f003 0207 	and.w	r2, r3, #7
    bcc2:	9b00      	ldr	r3, [sp, #0]
    bcc4:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG1_MASK) >> FLEXCAN_CTRL1_PSEG1_SHIFT;
    bcc6:	9b01      	ldr	r3, [sp, #4]
    bcc8:	685b      	ldr	r3, [r3, #4]
    bcca:	0cdb      	lsrs	r3, r3, #19
    bccc:	f003 0207 	and.w	r2, r3, #7
    bcd0:	9b00      	ldr	r3, [sp, #0]
    bcd2:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG2_MASK) >> FLEXCAN_CTRL1_PSEG2_SHIFT;
    bcd4:	9b01      	ldr	r3, [sp, #4]
    bcd6:	685b      	ldr	r3, [r3, #4]
    bcd8:	0c1b      	lsrs	r3, r3, #16
    bcda:	f003 0207 	and.w	r2, r3, #7
    bcde:	9b00      	ldr	r3, [sp, #0]
    bce0:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CTRL1) & FLEXCAN_CTRL1_RJW_MASK) >> FLEXCAN_CTRL1_RJW_SHIFT;
    bce2:	9b01      	ldr	r3, [sp, #4]
    bce4:	685b      	ldr	r3, [r3, #4]
    bce6:	0d9b      	lsrs	r3, r3, #22
    bce8:	f003 0203 	and.w	r2, r3, #3
    bcec:	9b00      	ldr	r3, [sp, #0]
    bcee:	611a      	str	r2, [r3, #16]
}
    bcf0:	bf00      	nop
    bcf2:	b002      	add	sp, #8
    bcf4:	4770      	bx	lr

0000bcf6 <FlexCAN_GetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetFDTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bcf6:	b082      	sub	sp, #8
    bcf8:	9001      	str	r0, [sp, #4]
    bcfa:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->FDCBT) & FLEXCAN_FDCBT_FPRESDIV_MASK) >> FLEXCAN_FDCBT_FPRESDIV_SHIFT;
    bcfc:	9b01      	ldr	r3, [sp, #4]
    bcfe:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bd02:	0d1b      	lsrs	r3, r3, #20
    bd04:	f3c3 0209 	ubfx	r2, r3, #0, #10
    bd08:	9b00      	ldr	r3, [sp, #0]
    bd0a:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->FDCBT) & FLEXCAN_FDCBT_FPROPSEG_MASK) >> FLEXCAN_FDCBT_FPROPSEG_SHIFT;
    bd0c:	9b01      	ldr	r3, [sp, #4]
    bd0e:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bd12:	0a9b      	lsrs	r3, r3, #10
    bd14:	f003 021f 	and.w	r2, r3, #31
    bd18:	9b00      	ldr	r3, [sp, #0]
    bd1a:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG1_MASK) >> FLEXCAN_FDCBT_FPSEG1_SHIFT;
    bd1c:	9b01      	ldr	r3, [sp, #4]
    bd1e:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bd22:	095b      	lsrs	r3, r3, #5
    bd24:	f003 0207 	and.w	r2, r3, #7
    bd28:	9b00      	ldr	r3, [sp, #0]
    bd2a:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG2_MASK) >> FLEXCAN_FDCBT_FPSEG2_SHIFT;
    bd2c:	9b01      	ldr	r3, [sp, #4]
    bd2e:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bd32:	f003 0207 	and.w	r2, r3, #7
    bd36:	9b00      	ldr	r3, [sp, #0]
    bd38:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->FDCBT) & FLEXCAN_FDCBT_FRJW_MASK) >> FLEXCAN_FDCBT_FRJW_SHIFT;
    bd3a:	9b01      	ldr	r3, [sp, #4]
    bd3c:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bd40:	0c1b      	lsrs	r3, r3, #16
    bd42:	f003 0207 	and.w	r2, r3, #7
    bd46:	9b00      	ldr	r3, [sp, #0]
    bd48:	611a      	str	r2, [r3, #16]
}
    bd4a:	bf00      	nop
    bd4c:	b002      	add	sp, #8
    bd4e:	4770      	bx	lr

0000bd50 <FlexCAN_IsExCbtEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsExCbtEnabled(const FLEXCAN_Type * pBase)
{
    bd50:	b082      	sub	sp, #8
    bd52:	9001      	str	r0, [sp, #4]
    return (0U == ((pBase->CBT & FLEXCAN_CBT_BTF_MASK) >> FLEXCAN_CBT_BTF_SHIFT)) ? FALSE : TRUE;
    bd54:	9b01      	ldr	r3, [sp, #4]
    bd56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bd58:	0fdb      	lsrs	r3, r3, #31
    bd5a:	b2db      	uxtb	r3, r3
}
    bd5c:	4618      	mov	r0, r3
    bd5e:	b002      	add	sp, #8
    bd60:	4770      	bx	lr

0000bd62 <FlexCAN_EnableExtCbt>:
 *
 * @param   base    The FlexCAN base address
 * @param   enableCBT Enable/Disable use of Extent Time Segments
 */
static inline void FlexCAN_EnableExtCbt(FLEXCAN_Type * base, boolean enableCBT)
{   /* Enable the use of extended bit time definitions */
    bd62:	b082      	sub	sp, #8
    bd64:	9001      	str	r0, [sp, #4]
    bd66:	460b      	mov	r3, r1
    bd68:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CBT = (base->CBT & ~FLEXCAN_CBT_BTF_MASK) | FLEXCAN_CBT_BTF(enableCBT ? 1UL : 0UL);
    bd6c:	9b01      	ldr	r3, [sp, #4]
    bd6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bd70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    bd74:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bd78:	2a00      	cmp	r2, #0
    bd7a:	d002      	beq.n	bd82 <FlexCAN_EnableExtCbt+0x20>
    bd7c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    bd80:	e000      	b.n	bd84 <FlexCAN_EnableExtCbt+0x22>
    bd82:	2200      	movs	r2, #0
    bd84:	431a      	orrs	r2, r3
    bd86:	9b01      	ldr	r3, [sp, #4]
    bd88:	651a      	str	r2, [r3, #80]	; 0x50
}
    bd8a:	bf00      	nop
    bd8c:	b002      	add	sp, #8
    bd8e:	4770      	bx	lr

0000bd90 <FlexCAN_SetSelfReception>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Enable/Disable Self Reception
 */
static inline void FlexCAN_SetSelfReception(FLEXCAN_Type * base, boolean enable)
{
    bd90:	b082      	sub	sp, #8
    bd92:	9001      	str	r0, [sp, #4]
    bd94:	460b      	mov	r3, r1
    bd96:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    bd9a:	9b01      	ldr	r3, [sp, #4]
    bd9c:	681b      	ldr	r3, [r3, #0]
    bd9e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    bda2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bda6:	2a00      	cmp	r2, #0
    bda8:	d001      	beq.n	bdae <FlexCAN_SetSelfReception+0x1e>
    bdaa:	2200      	movs	r2, #0
    bdac:	e001      	b.n	bdb2 <FlexCAN_SetSelfReception+0x22>
    bdae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    bdb2:	431a      	orrs	r2, r3
    bdb4:	9b01      	ldr	r3, [sp, #4]
    bdb6:	601a      	str	r2, [r3, #0]
}
    bdb8:	bf00      	nop
    bdba:	b002      	add	sp, #8
    bdbc:	4770      	bx	lr

0000bdbe <FlexCAN_IsFDEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsFDEnabled(const FLEXCAN_Type * base)
{
    bdbe:	b082      	sub	sp, #8
    bdc0:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    bdc2:	9b01      	ldr	r3, [sp, #4]
    bdc4:	681b      	ldr	r3, [r3, #0]
    bdc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    bdca:	2b00      	cmp	r3, #0
    bdcc:	bf14      	ite	ne
    bdce:	2301      	movne	r3, #1
    bdd0:	2300      	moveq	r3, #0
    bdd2:	b2db      	uxtb	r3, r3
}
    bdd4:	4618      	mov	r0, r3
    bdd6:	b002      	add	sp, #8
    bdd8:	4770      	bx	lr

0000bdda <FlexCAN_IsListenOnlyModeEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsListenOnlyModeEnabled(const FLEXCAN_Type * base)
{
    bdda:	b082      	sub	sp, #8
    bddc:	9001      	str	r0, [sp, #4]
    return (((base->CTRL1 & (FLEXCAN_CTRL1_LOM_MASK)) != 0U) ? TRUE : FALSE);
    bdde:	9b01      	ldr	r3, [sp, #4]
    bde0:	685b      	ldr	r3, [r3, #4]
    bde2:	f003 0308 	and.w	r3, r3, #8
    bde6:	2b00      	cmp	r3, #0
    bde8:	bf14      	ite	ne
    bdea:	2301      	movne	r3, #1
    bdec:	2300      	moveq	r3, #0
    bdee:	b2db      	uxtb	r3, r3
}
    bdf0:	4618      	mov	r0, r3
    bdf2:	b002      	add	sp, #8
    bdf4:	4770      	bx	lr

0000bdf6 <RxFifoOcuppiedLastMsgBuff>:
 *
 * @param   x    Number of Configured RxFIFO Filters
 * @return  number of last MB occupied by RxFIFO
 */
static inline uint32 RxFifoOcuppiedLastMsgBuff(uint8 x)
{
    bdf6:	b082      	sub	sp, #8
    bdf8:	4603      	mov	r3, r0
    bdfa:	f88d 3007 	strb.w	r3, [sp, #7]
    return 5U + (((((uint32)x) + 1U) * 8U) / 4U);
    bdfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    be02:	3301      	adds	r3, #1
    be04:	00db      	lsls	r3, r3, #3
    be06:	089b      	lsrs	r3, r3, #2
    be08:	3305      	adds	r3, #5
}
    be0a:	4618      	mov	r0, r3
    be0c:	b002      	add	sp, #8
    be0e:	4770      	bx	lr

0000be10 <FlexCAN_SetClkSrc>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Specifies if The CAN engine clock source is the oscillator clock(FALSE) or peripheral clock(TRUE).
 */
static inline void FlexCAN_SetClkSrc(FLEXCAN_Type * base, boolean enable)
{
    be10:	b082      	sub	sp, #8
    be12:	9001      	str	r0, [sp, #4]
    be14:	460b      	mov	r3, r1
    be16:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_CLKSRC_MASK) | FLEXCAN_CTRL1_CLKSRC(enable ? 1UL : 0UL);
    be1a:	9b01      	ldr	r3, [sp, #4]
    be1c:	685b      	ldr	r3, [r3, #4]
    be1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    be22:	f89d 2003 	ldrb.w	r2, [sp, #3]
    be26:	2a00      	cmp	r2, #0
    be28:	d002      	beq.n	be30 <FlexCAN_SetClkSrc+0x20>
    be2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    be2e:	e000      	b.n	be32 <FlexCAN_SetClkSrc+0x22>
    be30:	2200      	movs	r2, #0
    be32:	431a      	orrs	r2, r3
    be34:	9b01      	ldr	r3, [sp, #4]
    be36:	605a      	str	r2, [r3, #4]
}
    be38:	bf00      	nop
    be3a:	b002      	add	sp, #8
    be3c:	4770      	bx	lr

0000be3e <FlexCAN_GetMsgBuffIntStatusFlag>:
 * @param   base  The FlexCAN base address
 * @param   msgBuffIdx       Index of the message buffer
 * @return  the individual Message Buffer interrupt flag (0 and 1 are the flag value)
 */
static inline uint8 FlexCAN_GetMsgBuffIntStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    be3e:	b084      	sub	sp, #16
    be40:	9001      	str	r0, [sp, #4]
    be42:	9100      	str	r1, [sp, #0]
    /* TODO: This need to be protected multithread access*/
    uint8 flag = 0;
    be44:	2300      	movs	r3, #0
    be46:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 mask;

    if (msgBuffIdx < 32U)
    be4a:	9b00      	ldr	r3, [sp, #0]
    be4c:	2b1f      	cmp	r3, #31
    be4e:	d810      	bhi.n	be72 <FlexCAN_GetMsgBuffIntStatusFlag+0x34>
    {
        mask = base->IMASK1 & FLEXCAN_IMASK1_BUF31TO0M_MASK;
    be50:	9b01      	ldr	r3, [sp, #4]
    be52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    be54:	9302      	str	r3, [sp, #8]
        flag = (uint8)(((base->IFLAG1 & mask) >> (msgBuffIdx % 32U)) & 1U);
    be56:	9b01      	ldr	r3, [sp, #4]
    be58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    be5a:	9b02      	ldr	r3, [sp, #8]
    be5c:	401a      	ands	r2, r3
    be5e:	9b00      	ldr	r3, [sp, #0]
    be60:	f003 031f 	and.w	r3, r3, #31
    be64:	fa22 f303 	lsr.w	r3, r2, r3
    be68:	b2db      	uxtb	r3, r3
    be6a:	f003 0301 	and.w	r3, r3, #1
    be6e:	f88d 300f 	strb.w	r3, [sp, #15]
        mask = base->IMASK4 & FLEXCAN_IMASK4_BUF127TO96M_MASK;
        flag = (uint8)(((base->IFLAG4 & mask) >> (msgBuffIdx % 32U)) & 1U);
    }
#endif

    return flag;
    be72:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    be76:	4618      	mov	r0, r3
    be78:	b004      	add	sp, #16
    be7a:	4770      	bx	lr

0000be7c <FlexCAN_SetRxMsgBuffGlobalMask>:
 *
 * @param   base  The FlexCAN base address
 * @param   Mask  Mask Value
 */
static inline void FlexCAN_SetRxMsgBuffGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    be7c:	b082      	sub	sp, #8
    be7e:	9001      	str	r0, [sp, #4]
    be80:	9100      	str	r1, [sp, #0]
    (base->RXMGMASK) = Mask;
    be82:	9b01      	ldr	r3, [sp, #4]
    be84:	9a00      	ldr	r2, [sp, #0]
    be86:	611a      	str	r2, [r3, #16]
}
    be88:	bf00      	nop
    be8a:	b002      	add	sp, #8
    be8c:	4770      	bx	lr

0000be8e <FlexCAN_SetRxIndividualMask>:
 */
static inline void FlexCAN_SetRxIndividualMask(FLEXCAN_Type * base,
                                               uint32 msgBuffIdx,
                                               uint32 mask
                                              )
{
    be8e:	b084      	sub	sp, #16
    be90:	9003      	str	r0, [sp, #12]
    be92:	9102      	str	r1, [sp, #8]
    be94:	9201      	str	r2, [sp, #4]
    base->RXIMR[msgBuffIdx] = mask;
    be96:	9b03      	ldr	r3, [sp, #12]
    be98:	9a02      	ldr	r2, [sp, #8]
    be9a:	f502 7208 	add.w	r2, r2, #544	; 0x220
    be9e:	9901      	ldr	r1, [sp, #4]
    bea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    bea4:	bf00      	nop
    bea6:	b004      	add	sp, #16
    bea8:	4770      	bx	lr

0000beaa <FlexCAN_SetTxArbitrationStartDelay>:
 *
 * @param   base  The FlexCAN base address
 * @param   tasd  The Tx arbitration start delay value
 */
static inline void FlexCAN_SetTxArbitrationStartDelay(FLEXCAN_Type * base, uint8 tasd)
{
    beaa:	b082      	sub	sp, #8
    beac:	9001      	str	r0, [sp, #4]
    beae:	460b      	mov	r3, r1
    beb0:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_TASD_MASK) | FLEXCAN_CTRL2_TASD(tasd);
    beb4:	9b01      	ldr	r3, [sp, #4]
    beb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    beb8:	f423 0278 	bic.w	r2, r3, #16252928	; 0xf80000
    bebc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bec0:	04db      	lsls	r3, r3, #19
    bec2:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
    bec6:	431a      	orrs	r2, r3
    bec8:	9b01      	ldr	r3, [sp, #4]
    beca:	635a      	str	r2, [r3, #52]	; 0x34
}
    becc:	bf00      	nop
    bece:	b002      	add	sp, #8
    bed0:	4770      	bx	lr

0000bed2 <FlexCAN_SetRxMaskType>:
 *
 * @param   base  The FlexCAN base address
 * @param   type         The FlexCAN Rx mask type
 */
static inline void FlexCAN_SetRxMaskType(FLEXCAN_Type * base, Flexcan_Ip_RxMaskType type)
{
    bed2:	b082      	sub	sp, #8
    bed4:	9001      	str	r0, [sp, #4]
    bed6:	9100      	str	r1, [sp, #0]
    /* Set RX masking type (RX global mask or RX individual mask)*/
    if (FLEXCAN_RX_MASK_GLOBAL == type)
    bed8:	9b00      	ldr	r3, [sp, #0]
    beda:	2b00      	cmp	r3, #0
    bedc:	d106      	bne.n	beec <FlexCAN_SetRxMaskType+0x1a>
    {
        /* Enable Global RX masking */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(0U);
    bede:	9b01      	ldr	r3, [sp, #4]
    bee0:	681b      	ldr	r3, [r3, #0]
    bee2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
    bee6:	9b01      	ldr	r3, [sp, #4]
    bee8:	601a      	str	r2, [r3, #0]
    else
    {
        /* Enable Individual Rx Masking and Queue */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    }
}
    beea:	e005      	b.n	bef8 <FlexCAN_SetRxMaskType+0x26>
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    beec:	9b01      	ldr	r3, [sp, #4]
    beee:	681b      	ldr	r3, [r3, #0]
    bef0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    bef4:	9b01      	ldr	r3, [sp, #4]
    bef6:	601a      	str	r2, [r3, #0]
}
    bef8:	bf00      	nop
    befa:	b002      	add	sp, #8
    befc:	4770      	bx	lr

0000befe <FlexCAN_SetRegDefaultVal>:
 * @brief Will set Flexcan Peripheral Register to default val.
 *
 * @param   base    The FlexCAN base address
 */
static inline void FlexCAN_SetRegDefaultVal(FLEXCAN_Type * base)
{
    befe:	b500      	push	{lr}
    bf00:	b083      	sub	sp, #12
    bf02:	9001      	str	r0, [sp, #4]
        base->ERFCR = FLEXCAN_IP_ERFCR_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    bf04:	9801      	ldr	r0, [sp, #4]
    bf06:	f002 ff85 	bl	ee14 <FlexCAN_IsFDAvailable>
    bf0a:	4603      	mov	r3, r0
    bf0c:	2b00      	cmp	r3, #0
    bf0e:	d007      	beq.n	bf20 <FlexCAN_SetRegDefaultVal+0x22>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    bf10:	9b01      	ldr	r3, [sp, #4]
    bf12:	2200      	movs	r2, #0
    bf14:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    bf18:	9b01      	ldr	r3, [sp, #4]
    bf1a:	4a12      	ldr	r2, [pc, #72]	; (bf64 <FlexCAN_SetRegDefaultVal+0x66>)
    bf1c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    {
        base->IFLAG2 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
        base->IMASK2 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */
    base->IFLAG1 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
    bf20:	9b01      	ldr	r3, [sp, #4]
    bf22:	f04f 32ff 	mov.w	r2, #4294967295
    bf26:	631a      	str	r2, [r3, #48]	; 0x30
    base->IMASK1 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    bf28:	9b01      	ldr	r3, [sp, #4]
    bf2a:	2200      	movs	r2, #0
    bf2c:	629a      	str	r2, [r3, #40]	; 0x28
    base->CBT = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    bf2e:	9b01      	ldr	r3, [sp, #4]
    bf30:	2200      	movs	r2, #0
    bf32:	651a      	str	r2, [r3, #80]	; 0x50
    base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    bf34:	9b01      	ldr	r3, [sp, #4]
    bf36:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    bf3a:	635a      	str	r2, [r3, #52]	; 0x34
    base->ESR1 = FLEXCAN_IP_ESR1_DEFAULT_VALUE_U32;
    bf3c:	9b01      	ldr	r3, [sp, #4]
    bf3e:	4a0a      	ldr	r2, [pc, #40]	; (bf68 <FlexCAN_SetRegDefaultVal+0x6a>)
    bf40:	621a      	str	r2, [r3, #32]
    base->ECR = FLEXCAN_IP_ECR_DEFAULT_VALUE_U32;
    bf42:	9b01      	ldr	r3, [sp, #4]
    bf44:	2200      	movs	r2, #0
    bf46:	61da      	str	r2, [r3, #28]
    base->TIMER = FLEXCAN_IP_TIMER_DEFAULT_VALUE_U32;
    bf48:	9b01      	ldr	r3, [sp, #4]
    bf4a:	2200      	movs	r2, #0
    bf4c:	609a      	str	r2, [r3, #8]
    base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    bf4e:	9b01      	ldr	r3, [sp, #4]
    bf50:	2200      	movs	r2, #0
    bf52:	605a      	str	r2, [r3, #4]
    base->EPRS  = FLEXCAN_IP_EPRS_DEFAULT_VALUE_U32;
    base->ENCBT = FLEXCAN_IP_ENCBT_DEFAULT_VALUE_U32;
    base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
    base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
    base->MCR = FLEXCAN_IP_MCR_DEFAULT_VALUE_U32;
    bf54:	9b01      	ldr	r3, [sp, #4]
    bf56:	4a05      	ldr	r2, [pc, #20]	; (bf6c <FlexCAN_SetRegDefaultVal+0x6e>)
    bf58:	601a      	str	r2, [r3, #0]
}
    bf5a:	bf00      	nop
    bf5c:	b003      	add	sp, #12
    bf5e:	f85d fb04 	ldr.w	pc, [sp], #4
    bf62:	bf00      	nop
    bf64:	80004100 	.word	0x80004100
    bf68:	0003b006 	.word	0x0003b006
    bf6c:	d890000f 	.word	0xd890000f

0000bf70 <FlexCAN_InitRxFifo>:
 * Description   : Initialize fifo and dma if requested.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitRxFifo(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    bf70:	b500      	push	{lr}
    bf72:	b085      	sub	sp, #20
    bf74:	9001      	str	r0, [sp, #4]
    bf76:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    bf78:	2300      	movs	r3, #0
    bf7a:	9303      	str	r3, [sp, #12]

    /* Enable RxFIFO feature, if requested. This might fail if the FD mode is enabled. */
    if (Flexcan_Ip_pData->is_rx_fifo_needed)
    bf7c:	9b00      	ldr	r3, [sp, #0]
    bf7e:	7a1b      	ldrb	r3, [r3, #8]
    bf80:	2b00      	cmp	r3, #0
    bf82:	d006      	beq.n	bf92 <FlexCAN_InitRxFifo+0x22>
    {
        eResult = FlexCAN_EnableRxFifo(pBase, (uint32)Flexcan_Ip_pData->num_id_filters);
    bf84:	9b00      	ldr	r3, [sp, #0]
    bf86:	685b      	ldr	r3, [r3, #4]
    bf88:	4619      	mov	r1, r3
    bf8a:	9801      	ldr	r0, [sp, #4]
    bf8c:	f002 fefe 	bl	ed8c <FlexCAN_EnableRxFifo>
    bf90:	9003      	str	r0, [sp, #12]
        FlexCAN_SetRxFifoDMA(pBase, FALSE);
    }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    return eResult;
    bf92:	9b03      	ldr	r3, [sp, #12]
}
    bf94:	4618      	mov	r0, r3
    bf96:	b005      	add	sp, #20
    bf98:	f85d fb04 	ldr.w	pc, [sp], #4

0000bf9c <FlexCAN_InitCtroll>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitCtroll(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    bf9c:	b500      	push	{lr}
    bf9e:	b085      	sub	sp, #20
    bfa0:	9001      	str	r0, [sp, #4]
    bfa2:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    bfa4:	2300      	movs	r3, #0
    bfa6:	9303      	str	r3, [sp, #12]
    /* Disable the self reception feature if FlexCAN is not in loopback mode. */
    if (Flexcan_Ip_pData->flexcanMode != FLEXCAN_LOOPBACK_MODE)
    bfa8:	9b00      	ldr	r3, [sp, #0]
    bfaa:	68db      	ldr	r3, [r3, #12]
    bfac:	2b02      	cmp	r3, #2
    bfae:	d003      	beq.n	bfb8 <FlexCAN_InitCtroll+0x1c>
    {
        FlexCAN_SetSelfReception(pBase, FALSE);
    bfb0:	2100      	movs	r1, #0
    bfb2:	9801      	ldr	r0, [sp, #4]
    bfb4:	f7ff feec 	bl	bd90 <FlexCAN_SetSelfReception>
    }

    /* Init legacy fifo, enhanced fifo if requested. */
    eResult = FlexCAN_InitRxFifo(pBase, Flexcan_Ip_pData);
    bfb8:	9900      	ldr	r1, [sp, #0]
    bfba:	9801      	ldr	r0, [sp, #4]
    bfbc:	f7ff ffd8 	bl	bf70 <FlexCAN_InitRxFifo>
    bfc0:	9003      	str	r0, [sp, #12]
    if (eResult != FLEXCAN_STATUS_SUCCESS)
    bfc2:	9b03      	ldr	r3, [sp, #12]
    bfc4:	2b00      	cmp	r3, #0
    bfc6:	d006      	beq.n	bfd6 <FlexCAN_InitCtroll+0x3a>
    {
        /* To enter Disable Mode requires FreezMode first */
        (void)FlexCAN_EnterFreezeMode(pBase);
    bfc8:	9801      	ldr	r0, [sp, #4]
    bfca:	f002 fd03 	bl	e9d4 <FlexCAN_EnterFreezeMode>
        (void)FlexCAN_Disable(pBase);
    bfce:	9801      	ldr	r0, [sp, #4]
    bfd0:	f002 fdca 	bl	eb68 <FlexCAN_Disable>
    bfd4:	e00b      	b.n	bfee <FlexCAN_InitCtroll+0x52>
    }
    else
    {
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set payload size. */
        FlexCAN_SetPayloadSize(pBase, &Flexcan_Ip_pData->payload);
    bfd6:	9b00      	ldr	r3, [sp, #0]
    bfd8:	3314      	adds	r3, #20
    bfda:	4619      	mov	r1, r3
    bfdc:	9801      	ldr	r0, [sp, #4]
    bfde:	f002 ff3b 	bl	ee58 <FlexCAN_SetPayloadSize>
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
            (void)FlexCAN_Disable(pBase);
        }
    #else
        (void)FlexCAN_SetMaxMsgBuffNum(pBase, Flexcan_Ip_pData->max_num_mb);
    bfe2:	9b00      	ldr	r3, [sp, #0]
    bfe4:	681b      	ldr	r3, [r3, #0]
    bfe6:	4619      	mov	r1, r3
    bfe8:	9801      	ldr	r0, [sp, #4]
    bfea:	f003 fab7 	bl	f55c <FlexCAN_SetMaxMsgBuffNum>
    #endif /* FLEXCAN_IP_DEV_ERROR_DETECT */
    }
    return eResult;
    bfee:	9b03      	ldr	r3, [sp, #12]
}
    bff0:	4618      	mov	r0, r3
    bff2:	b005      	add	sp, #20
    bff4:	f85d fb04 	ldr.w	pc, [sp], #4

0000bff8 <FlexCAN_InitController>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitController(uint8 Instance, FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    bff8:	b500      	push	{lr}
    bffa:	b087      	sub	sp, #28
    bffc:	4603      	mov	r3, r0
    bffe:	9102      	str	r1, [sp, #8]
    c000:	9201      	str	r2, [sp, #4]
    c002:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    c006:	2300      	movs	r3, #0
    c008:	9305      	str	r3, [sp, #20]

    if (FlexCAN_IsEnabled(pBase))
    c00a:	9802      	ldr	r0, [sp, #8]
    c00c:	f7ff fd0c 	bl	ba28 <FlexCAN_IsEnabled>
    c010:	4603      	mov	r3, r0
    c012:	2b00      	cmp	r3, #0
    c014:	d00a      	beq.n	c02c <FlexCAN_InitController+0x34>
    {
        /* To enter Disable Mode requires FreezMode first */
        eResult = FlexCAN_EnterFreezeMode(pBase);
    c016:	9802      	ldr	r0, [sp, #8]
    c018:	f002 fcdc 	bl	e9d4 <FlexCAN_EnterFreezeMode>
    c01c:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == eResult)
    c01e:	9b05      	ldr	r3, [sp, #20]
    c020:	2b00      	cmp	r3, #0
    c022:	d103      	bne.n	c02c <FlexCAN_InitController+0x34>
        {
            eResult = FlexCAN_Disable(pBase);
    c024:	9802      	ldr	r0, [sp, #8]
    c026:	f002 fd9f 	bl	eb68 <FlexCAN_Disable>
    c02a:	9005      	str	r0, [sp, #20]
        }
    }

    if (FLEXCAN_STATUS_SUCCESS == eResult)
    c02c:	9b05      	ldr	r3, [sp, #20]
    c02e:	2b00      	cmp	r3, #0
    c030:	d137      	bne.n	c0a2 <FlexCAN_InitController+0xaa>
    {
    #if (FLEXCAN_IP_FEATURE_HAS_PE_CLKSRC_SELECT == STD_ON)
        /* Select a source clock for the FlexCAN engine */
        FlexCAN_SetClkSrc(pBase, Flexcan_Ip_pData->is_pe_clock);
    c032:	9b01      	ldr	r3, [sp, #4]
    c034:	7e5b      	ldrb	r3, [r3, #25]
    c036:	4619      	mov	r1, r3
    c038:	9802      	ldr	r0, [sp, #8]
    c03a:	f7ff fee9 	bl	be10 <FlexCAN_SetClkSrc>
    #endif
        /* Enable FlexCAN Module need to perform SoftReset & ClearRam */
        pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    c03e:	9b02      	ldr	r3, [sp, #8]
    c040:	681b      	ldr	r3, [r3, #0]
    c042:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    c046:	9b02      	ldr	r3, [sp, #8]
    c048:	601a      	str	r2, [r3, #0]
        /* Initialize FLEXCAN device */
        eResult = FlexCAN_Init(pBase);
    c04a:	9802      	ldr	r0, [sp, #8]
    c04c:	f002 fe28 	bl	eca0 <FlexCAN_Init>
    c050:	9005      	str	r0, [sp, #20]
        if (eResult != FLEXCAN_STATUS_SUCCESS)
    c052:	9b05      	ldr	r3, [sp, #20]
    c054:	2b00      	cmp	r3, #0
    c056:	d006      	beq.n	c066 <FlexCAN_InitController+0x6e>
        {
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
    c058:	9802      	ldr	r0, [sp, #8]
    c05a:	f002 fcbb 	bl	e9d4 <FlexCAN_EnterFreezeMode>
            (void)FlexCAN_Disable(pBase);
    c05e:	9802      	ldr	r0, [sp, #8]
    c060:	f002 fd82 	bl	eb68 <FlexCAN_Disable>
    c064:	e01d      	b.n	c0a2 <FlexCAN_InitController+0xaa>
            /* Disable the Protection again because is enabled by soft reset */
            FlexCAN_DisableMemErrorDetection(pBase);
        #endif

        #if defined(CAN_FEATURE_S32K1XX)
            if (TRUE == FlexCAN_IsFDAvailable(pBase))
    c066:	9802      	ldr	r0, [sp, #8]
    c068:	f002 fed4 	bl	ee14 <FlexCAN_IsFDAvailable>
    c06c:	4603      	mov	r3, r0
    c06e:	2b00      	cmp	r3, #0
    c070:	d007      	beq.n	c082 <FlexCAN_InitController+0x8a>
            {
        #endif /* defined(CAN_FEATURE_S32K1XX) */
                /* Enable/Disable FD and check FD was set as expected. Setting FD as enabled
                 * might fail if the current CAN instance does not support FD. */
                FlexCAN_SetFDEnabled(pBase, Flexcan_Ip_pData->fd_enable, Flexcan_Ip_pData->bitRateSwitch);
    c072:	9b01      	ldr	r3, [sp, #4]
    c074:	7e19      	ldrb	r1, [r3, #24]
    c076:	9b01      	ldr	r3, [sp, #4]
    c078:	7edb      	ldrb	r3, [r3, #27]
    c07a:	461a      	mov	r2, r3
    c07c:	9802      	ldr	r0, [sp, #8]
    c07e:	f7ff fcdd 	bl	ba3c <FlexCAN_SetFDEnabled>
                }*/
        #if defined(CAN_FEATURE_S32K1XX)
            }
        #endif /* defined(CAN_FEATURE_S32K1XX) */
            /* configure depends on controller options. */
            FlexCAN_ConfigCtrlOptions(pBase, Flexcan_Ip_pData->ctrlOptions);
    c082:	9b01      	ldr	r3, [sp, #4]
    c084:	691b      	ldr	r3, [r3, #16]
    c086:	4619      	mov	r1, r3
    c088:	9802      	ldr	r0, [sp, #8]
    c08a:	f003 fdeb 	bl	fc64 <FlexCAN_ConfigCtrlOptions>
            /* reset Imask buffers */
            FlexCAN_ResetImaskBuff(Instance);
    c08e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c092:	4618      	mov	r0, r3
    c094:	f003 fe56 	bl	fd44 <FlexCAN_ResetImaskBuff>
            eResult = FlexCAN_InitCtroll(pBase, Flexcan_Ip_pData);
    c098:	9901      	ldr	r1, [sp, #4]
    c09a:	9802      	ldr	r0, [sp, #8]
    c09c:	f7ff ff7e 	bl	bf9c <FlexCAN_InitCtroll>
    c0a0:	9005      	str	r0, [sp, #20]
        }
    }
    return eResult;
    c0a2:	9b05      	ldr	r3, [sp, #20]
}
    c0a4:	4618      	mov	r0, r3
    c0a6:	b007      	add	sp, #28
    c0a8:	f85d fb04 	ldr.w	pc, [sp], #4

0000c0ac <FlexCAN_InitBaudrate>:
 * Description   : Init baudrate for given controller.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_InitBaudrate(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    c0ac:	b500      	push	{lr}
    c0ae:	b083      	sub	sp, #12
    c0b0:	9001      	str	r0, [sp, #4]
    c0b2:	9100      	str	r1, [sp, #0]
    /* Enable the use of extended bit time definitions */
    FlexCAN_EnableExtCbt(pBase, Flexcan_Ip_pData->fd_enable);
    c0b4:	9b00      	ldr	r3, [sp, #0]
    c0b6:	7e1b      	ldrb	r3, [r3, #24]
    c0b8:	4619      	mov	r1, r3
    c0ba:	9801      	ldr	r0, [sp, #4]
    c0bc:	f7ff fe51 	bl	bd62 <FlexCAN_EnableExtCbt>
        /* Disable Enhanced CBT time segments */
        pBase->CTRL2 &= ~FLEXCAN_CTRL2_BTE_MASK;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set bit rate. */
        if (Flexcan_Ip_pData->fd_enable)
    c0c0:	9b00      	ldr	r3, [sp, #0]
    c0c2:	7e1b      	ldrb	r3, [r3, #24]
    c0c4:	2b00      	cmp	r3, #0
    c0c6:	d00c      	beq.n	c0e2 <FlexCAN_InitBaudrate+0x36>
        {
            /* Write Normal bit time configuration to CBT register */
            FlexCAN_SetExtendedTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    c0c8:	9b00      	ldr	r3, [sp, #0]
    c0ca:	331c      	adds	r3, #28
    c0cc:	4619      	mov	r1, r3
    c0ce:	9801      	ldr	r0, [sp, #4]
    c0d0:	f7ff fd94 	bl	bbfc <FlexCAN_SetExtendedTimeSegments>
            /* Write Data bit time configuration to FDCBT register */
            FlexCAN_SetFDTimeSegments(pBase, &Flexcan_Ip_pData->bitrate_cbt);
    c0d4:	9b00      	ldr	r3, [sp, #0]
    c0d6:	3330      	adds	r3, #48	; 0x30
    c0d8:	4619      	mov	r1, r3
    c0da:	9801      	ldr	r0, [sp, #4]
    c0dc:	f7ff fd2d 	bl	bb3a <FlexCAN_SetFDTimeSegments>
            /* Write Normal bit time configuration to CTRL1 register */
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
        }
#endif
    }
}
    c0e0:	e005      	b.n	c0ee <FlexCAN_InitBaudrate+0x42>
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    c0e2:	9b00      	ldr	r3, [sp, #0]
    c0e4:	331c      	adds	r3, #28
    c0e6:	4619      	mov	r1, r3
    c0e8:	9801      	ldr	r0, [sp, #4]
    c0ea:	f7ff fd5b 	bl	bba4 <FlexCAN_SetTimeSegments>
}
    c0ee:	bf00      	nop
    c0f0:	b003      	add	sp, #12
    c0f2:	f85d fb04 	ldr.w	pc, [sp], #4

0000c0f6 <FlexCAN_ProccessLegacyRxFIFO>:
 * Description   : This function will process the enhanced RxFIFO in blocking mode.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_ProccessLegacyRxFIFO(uint8 u8Instance, uint32 u32TimeoutMs)
{
    c0f6:	b500      	push	{lr}
    c0f8:	b08d      	sub	sp, #52	; 0x34
    c0fa:	4603      	mov	r3, r0
    c0fc:	9102      	str	r1, [sp, #8]
    c0fe:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    c102:	2300      	movs	r3, #0
    c104:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    c106:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c10a:	4a46      	ldr	r2, [pc, #280]	; (c224 <FlexCAN_ProccessLegacyRxFIFO+0x12e>)
    c10c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c110:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    c112:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c116:	4a44      	ldr	r2, [pc, #272]	; (c228 <FlexCAN_ProccessLegacyRxFIFO+0x132>)
    c118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c11c:	9307      	str	r3, [sp, #28]
    uint32 timeStart = 0U;
    c11e:	2300      	movs	r3, #0
    c120:	9305      	str	r3, [sp, #20]
    uint32 timeElapsed = 0U;
    c122:	2300      	movs	r3, #0
    c124:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c126:	9b02      	ldr	r3, [sp, #8]
    c128:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c12c:	fb02 f303 	mul.w	r3, r2, r3
    c130:	2100      	movs	r1, #0
    c132:	4618      	mov	r0, r3
    c134:	f7f5 ff0a 	bl	1f4c <OsIf_MicrosToTicks>
    c138:	9006      	str	r0, [sp, #24]
    uint32 u32intType = 0U;
    c13a:	2300      	movs	r3, #0
    c13c:	9309      	str	r3, [sp, #36]	; 0x24

        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c13e:	2000      	movs	r0, #0
    c140:	f7f5 feb8 	bl	1eb4 <OsIf_GetCounter>
    c144:	4603      	mov	r3, r0
    c146:	9305      	str	r3, [sp, #20]

        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c148:	e02a      	b.n	c1a0 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
        {
            if (FLEXCAN_RXFIFO_USING_POLLING == pState->transferType)
    c14a:	9b08      	ldr	r3, [sp, #32]
    c14c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    c150:	2b01      	cmp	r3, #1
    c152:	d115      	bne.n	c180 <FlexCAN_ProccessLegacyRxFIFO+0x8a>
            {
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    c154:	2307      	movs	r3, #7
    c156:	9309      	str	r3, [sp, #36]	; 0x24
    c158:	e00f      	b.n	c17a <FlexCAN_ProccessLegacyRxFIFO+0x84>
                     u32intType >= FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE; \
                     u32intType--)
                {
                    if (FlexCAN_GetBuffStatusFlag(pBase, u32intType) != 0U)
    c15a:	9909      	ldr	r1, [sp, #36]	; 0x24
    c15c:	9807      	ldr	r0, [sp, #28]
    c15e:	f7ff fcd0 	bl	bb02 <FlexCAN_GetBuffStatusFlag>
    c162:	4603      	mov	r3, r0
    c164:	2b00      	cmp	r3, #0
    c166:	d005      	beq.n	c174 <FlexCAN_ProccessLegacyRxFIFO+0x7e>
                    {
                        FlexCAN_IRQHandlerRxFIFO(u8Instance, u32intType);
    c168:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c16c:	9909      	ldr	r1, [sp, #36]	; 0x24
    c16e:	4618      	mov	r0, r3
    c170:	f000 fb06 	bl	c780 <FlexCAN_IRQHandlerRxFIFO>
                     u32intType--)
    c174:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c176:	3b01      	subs	r3, #1
    c178:	9309      	str	r3, [sp, #36]	; 0x24
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    c17a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c17c:	2b04      	cmp	r3, #4
    c17e:	d8ec      	bhi.n	c15a <FlexCAN_ProccessLegacyRxFIFO+0x64>
                    }
                }
            }

            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c180:	ab05      	add	r3, sp, #20
    c182:	2100      	movs	r1, #0
    c184:	4618      	mov	r0, r3
    c186:	f7f5 feae 	bl	1ee6 <OsIf_GetElapsed>
    c18a:	4602      	mov	r2, r0
    c18c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c18e:	4413      	add	r3, r2
    c190:	930a      	str	r3, [sp, #40]	; 0x28
            if (timeElapsed >= mS2Ticks)
    c192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c194:	9b06      	ldr	r3, [sp, #24]
    c196:	429a      	cmp	r2, r3
    c198:	d302      	bcc.n	c1a0 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
            {
                eResult = FLEXCAN_STATUS_TIMEOUT;
    c19a:	2303      	movs	r3, #3
    c19c:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    c19e:	e003      	b.n	c1a8 <FlexCAN_ProccessLegacyRxFIFO+0xb2>
        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c1a0:	9b08      	ldr	r3, [sp, #32]
    c1a2:	685b      	ldr	r3, [r3, #4]
    c1a4:	2b01      	cmp	r3, #1
    c1a6:	d0d0      	beq.n	c14a <FlexCAN_ProccessLegacyRxFIFO+0x54>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == eResult) && (FLEXCAN_RXFIFO_USING_POLLING != pState->transferType))
    c1a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c1aa:	2b03      	cmp	r3, #3
    c1ac:	d125      	bne.n	c1fa <FlexCAN_ProccessLegacyRxFIFO+0x104>
    c1ae:	9b08      	ldr	r3, [sp, #32]
    c1b0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    c1b4:	2b01      	cmp	r3, #1
    c1b6:	d020      	beq.n	c1fa <FlexCAN_ProccessLegacyRxFIFO+0x104>
        {
            /* Disable RX FIFO interrupts*/
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, pState->isIntActive);
    c1b8:	9b08      	ldr	r3, [sp, #32]
    c1ba:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c1be:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c1c2:	9300      	str	r3, [sp, #0]
    c1c4:	2300      	movs	r3, #0
    c1c6:	2205      	movs	r2, #5
    c1c8:	9807      	ldr	r0, [sp, #28]
    c1ca:	f002 feef 	bl	efac <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, pState->isIntActive);
    c1ce:	9b08      	ldr	r3, [sp, #32]
    c1d0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c1d4:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c1d8:	9300      	str	r3, [sp, #0]
    c1da:	2300      	movs	r3, #0
    c1dc:	2206      	movs	r2, #6
    c1de:	9807      	ldr	r0, [sp, #28]
    c1e0:	f002 fee4 	bl	efac <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, pState->isIntActive);
    c1e4:	9b08      	ldr	r3, [sp, #32]
    c1e6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c1ea:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c1ee:	9300      	str	r3, [sp, #0]
    c1f0:	2300      	movs	r3, #0
    c1f2:	2207      	movs	r2, #7
    c1f4:	9807      	ldr	r0, [sp, #28]
    c1f6:	f002 fed9 	bl	efac <FlexCAN_SetMsgBuffIntCmd>
                (void)Dma_Ip_SetLogicChannelCommand(pState->rxFifoDMAChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
            }
#endif
        }

        switch (pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c1fa:	9b08      	ldr	r3, [sp, #32]
    c1fc:	685b      	ldr	r3, [r3, #4]
    c1fe:	2b00      	cmp	r3, #0
    c200:	d005      	beq.n	c20e <FlexCAN_ProccessLegacyRxFIFO+0x118>
    c202:	2b01      	cmp	r3, #1
    c204:	d106      	bne.n	c214 <FlexCAN_ProccessLegacyRxFIFO+0x11e>
        {
            case FLEXCAN_MB_RX_BUSY:
                pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    c206:	9b08      	ldr	r3, [sp, #32]
    c208:	2200      	movs	r2, #0
    c20a:	605a      	str	r2, [r3, #4]
                break;
    c20c:	e005      	b.n	c21a <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_IDLE:
                eResult = FLEXCAN_STATUS_SUCCESS;
    c20e:	2300      	movs	r3, #0
    c210:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    c212:	e002      	b.n	c21a <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_DMA_ERROR:
                eResult = FLEXCAN_STATUS_ERROR;
                break;
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
            default:
                eResult = FLEXCAN_STATUS_ERROR;
    c214:	2301      	movs	r3, #1
    c216:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    c218:	bf00      	nop
        }

    return eResult;
    c21a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    c21c:	4618      	mov	r0, r3
    c21e:	b00d      	add	sp, #52	; 0x34
    c220:	f85d fb04 	ldr.w	pc, [sp], #4
    c224:	1fff935c 	.word	0x1fff935c
    c228:	000185f0 	.word	0x000185f0

0000c22c <FlexCAN_StartRxMessageBufferData>:
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageBufferData(uint8 instance,
                                                              uint8 mb_idx,
                                                              Flexcan_Ip_MsgBuffType * data,
                                                              boolean isPolling
                                                             )
{
    c22c:	b084      	sub	sp, #16
    c22e:	9200      	str	r2, [sp, #0]
    c230:	461a      	mov	r2, r3
    c232:	4603      	mov	r3, r0
    c234:	f88d 3007 	strb.w	r3, [sp, #7]
    c238:	460b      	mov	r3, r1
    c23a:	f88d 3006 	strb.w	r3, [sp, #6]
    c23e:	4613      	mov	r3, r2
    c240:	f88d 3005 	strb.w	r3, [sp, #5]

    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    c244:	2300      	movs	r3, #0
    c246:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    c248:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c24c:	4a15      	ldr	r2, [pc, #84]	; (c2a4 <FlexCAN_StartRxMessageBufferData+0x78>)
    c24e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c252:	9302      	str	r3, [sp, #8]
    }
    else
    {
#endif
        /* Start receiving mailbox */
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    c254:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c258:	9a02      	ldr	r2, [sp, #8]
    c25a:	011b      	lsls	r3, r3, #4
    c25c:	4413      	add	r3, r2
    c25e:	3304      	adds	r3, #4
    c260:	681b      	ldr	r3, [r3, #0]
    c262:	2b00      	cmp	r3, #0
    c264:	d002      	beq.n	c26c <FlexCAN_StartRxMessageBufferData+0x40>
        {
            result = FLEXCAN_STATUS_BUSY;
    c266:	2302      	movs	r3, #2
    c268:	9303      	str	r3, [sp, #12]
    c26a:	e017      	b.n	c29c <FlexCAN_StartRxMessageBufferData+0x70>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_RX_BUSY;
    c26c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c270:	9a02      	ldr	r2, [sp, #8]
    c272:	011b      	lsls	r3, r3, #4
    c274:	4413      	add	r3, r2
    c276:	3304      	adds	r3, #4
    c278:	2201      	movs	r2, #1
    c27a:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].pMBmessage = data;
    c27c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c280:	9a02      	ldr	r2, [sp, #8]
    c282:	011b      	lsls	r3, r3, #4
    c284:	4413      	add	r3, r2
    c286:	9a00      	ldr	r2, [sp, #0]
    c288:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = isPolling;
    c28a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c28e:	9a02      	ldr	r2, [sp, #8]
    c290:	011b      	lsls	r3, r3, #4
    c292:	4413      	add	r3, r2
    c294:	3308      	adds	r3, #8
    c296:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c29a:	701a      	strb	r2, [r3, #0]
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    c29c:	9b03      	ldr	r3, [sp, #12]
}
    c29e:	4618      	mov	r0, r3
    c2a0:	b004      	add	sp, #16
    c2a2:	4770      	bx	lr
    c2a4:	1fff935c 	.word	0x1fff935c

0000c2a8 <FlexCAN_StartSendData>:
                                                   uint8 mb_idx,
                                                   const Flexcan_Ip_DataInfoType * tx_info,
                                                   uint32 msg_id,
                                                   const uint8 * mb_data
                                                  )
{
    c2a8:	b500      	push	{lr}
    c2aa:	b08f      	sub	sp, #60	; 0x3c
    c2ac:	9204      	str	r2, [sp, #16]
    c2ae:	9303      	str	r3, [sp, #12]
    c2b0:	4603      	mov	r3, r0
    c2b2:	f88d 3017 	strb.w	r3, [sp, #23]
    c2b6:	460b      	mov	r3, r1
    c2b8:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    c2bc:	2300      	movs	r3, #0
    c2be:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[Flexcan_Ip_u8Instance];
    c2c0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c2c4:	4a38      	ldr	r2, [pc, #224]	; (c3a8 <FlexCAN_StartSendData+0x100>)
    c2c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2ca:	930c      	str	r3, [sp, #48]	; 0x30
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    c2cc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c2d0:	4a36      	ldr	r2, [pc, #216]	; (c3ac <FlexCAN_StartSendData+0x104>)
    c2d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2d6:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    c2d8:	2300      	movs	r3, #0
    c2da:	930a      	str	r3, [sp, #40]	; 0x28
        eResult = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
    else
    {
#endif
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    c2dc:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c2e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c2e2:	011b      	lsls	r3, r3, #4
    c2e4:	4413      	add	r3, r2
    c2e6:	3304      	adds	r3, #4
    c2e8:	681b      	ldr	r3, [r3, #0]
    c2ea:	2b00      	cmp	r3, #0
    c2ec:	d002      	beq.n	c2f4 <FlexCAN_StartSendData+0x4c>
        {
            eResult = FLEXCAN_STATUS_BUSY;
    c2ee:	2302      	movs	r3, #2
    c2f0:	930d      	str	r3, [sp, #52]	; 0x34
    c2f2:	e053      	b.n	c39c <FlexCAN_StartSendData+0xf4>
        }
        else
        {
            /* Clear message buffer flag */
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c2f4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c2f8:	4619      	mov	r1, r3
    c2fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c2fc:	f7ff fbee 	bl	badc <FlexCAN_ClearMsgBuffIntStatusFlag>

            state->mbs[mb_idx].state = FLEXCAN_MB_TX_BUSY;
    c300:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c304:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c306:	011b      	lsls	r3, r3, #4
    c308:	4413      	add	r3, r2
    c30a:	3304      	adds	r3, #4
    c30c:	2202      	movs	r2, #2
    c30e:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].time_stamp = 0U;
    c310:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c314:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c316:	011b      	lsls	r3, r3, #4
    c318:	4413      	add	r3, r2
    c31a:	330c      	adds	r3, #12
    c31c:	2200      	movs	r2, #0
    c31e:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = tx_info->is_polling;
    c320:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c324:	9a04      	ldr	r2, [sp, #16]
    c326:	7b11      	ldrb	r1, [r2, #12]
    c328:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c32a:	011b      	lsls	r3, r3, #4
    c32c:	4413      	add	r3, r2
    c32e:	3308      	adds	r3, #8
    c330:	460a      	mov	r2, r1
    c332:	701a      	strb	r2, [r3, #0]
            state->mbs[mb_idx].isRemote = tx_info->is_remote;
    c334:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c338:	9a04      	ldr	r2, [sp, #16]
    c33a:	7ad1      	ldrb	r1, [r2, #11]
    c33c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c33e:	011b      	lsls	r3, r3, #4
    c340:	4413      	add	r3, r2
    c342:	3309      	adds	r3, #9
    c344:	460a      	mov	r2, r1
    c346:	701a      	strb	r2, [r3, #0]

            cs.dataLen = tx_info->data_length;
    c348:	9b04      	ldr	r3, [sp, #16]
    c34a:	685b      	ldr	r3, [r3, #4]
    c34c:	9308      	str	r3, [sp, #32]

            cs.msgIdType = tx_info->msg_id_type;
    c34e:	9b04      	ldr	r3, [sp, #16]
    c350:	681b      	ldr	r3, [r3, #0]
    c352:	9307      	str	r3, [sp, #28]

        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            cs.fd_enable = tx_info->fd_enable;
    c354:	9b04      	ldr	r3, [sp, #16]
    c356:	7a1b      	ldrb	r3, [r3, #8]
    c358:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            cs.fd_padding = tx_info->fd_padding;
    c35c:	9b04      	ldr	r3, [sp, #16]
    c35e:	7a5b      	ldrb	r3, [r3, #9]
    c360:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
            cs.enable_brs = tx_info->enable_brs;
    c364:	9b04      	ldr	r3, [sp, #16]
    c366:	7a9b      	ldrb	r3, [r3, #10]
    c368:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        #endif

            if (tx_info->is_remote)
    c36c:	9b04      	ldr	r3, [sp, #16]
    c36e:	7adb      	ldrb	r3, [r3, #11]
    c370:	2b00      	cmp	r3, #0
    c372:	d002      	beq.n	c37a <FlexCAN_StartSendData+0xd2>
            {
                cs.code = (uint32)FLEXCAN_TX_REMOTE;
    c374:	231c      	movs	r3, #28
    c376:	9306      	str	r3, [sp, #24]
    c378:	e001      	b.n	c37e <FlexCAN_StartSendData+0xd6>
            }
            else
            {
                cs.code = (uint32)FLEXCAN_TX_DATA;
    c37a:	230c      	movs	r3, #12
    c37c:	9306      	str	r3, [sp, #24]
            }
            pMbAddr = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    c37e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c382:	4619      	mov	r1, r3
    c384:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c386:	f002 fa89 	bl	e89c <FlexCAN_GetMsgBuffRegion>
    c38a:	900a      	str	r0, [sp, #40]	; 0x28
            FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, FALSE);
    c38c:	a906      	add	r1, sp, #24
    c38e:	2300      	movs	r3, #0
    c390:	9300      	str	r3, [sp, #0]
    c392:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c394:	9a03      	ldr	r2, [sp, #12]
    c396:	980a      	ldr	r0, [sp, #40]	; 0x28
    c398:	f002 ffd2 	bl	f340 <FlexCAN_SetTxMsgBuff>
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    c39c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    c39e:	4618      	mov	r0, r3
    c3a0:	b00f      	add	sp, #60	; 0x3c
    c3a2:	f85d fb04 	ldr.w	pc, [sp], #4
    c3a6:	bf00      	nop
    c3a8:	1fff935c 	.word	0x1fff935c
    c3ac:	000185f0 	.word	0x000185f0

0000c3b0 <FlexCAN_StartRxMessageFifoData>:
 * receiving data and enabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageFifoData(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    c3b0:	b500      	push	{lr}
    c3b2:	b089      	sub	sp, #36	; 0x24
    c3b4:	4603      	mov	r3, r0
    c3b6:	9102      	str	r1, [sp, #8]
    c3b8:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = NULL_PTR;
    c3bc:	2300      	movs	r3, #0
    c3be:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StateType * state = NULL_PTR;
    c3c0:	2300      	movs	r3, #0
    c3c2:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    c3c4:	2300      	movs	r3, #0
    c3c6:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base = Flexcan_Ip_apxBase[instance];
    c3c8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c3cc:	4a26      	ldr	r2, [pc, #152]	; (c468 <FlexCAN_StartRxMessageFifoData+0xb8>)
    c3ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3d2:	9306      	str	r3, [sp, #24]
    state = Flexcan_Ip_apxState[instance];
    c3d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c3d8:	4a24      	ldr	r2, [pc, #144]	; (c46c <FlexCAN_StartRxMessageFifoData+0xbc>)
    c3da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3de:	9305      	str	r3, [sp, #20]
    #endif
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    /* Start receiving fifo */
    if (state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state == FLEXCAN_MB_RX_BUSY)
    c3e0:	9b05      	ldr	r3, [sp, #20]
    c3e2:	685b      	ldr	r3, [r3, #4]
    c3e4:	2b01      	cmp	r3, #1
    c3e6:	d102      	bne.n	c3ee <FlexCAN_StartRxMessageFifoData+0x3e>
    {
        eResult = FLEXCAN_STATUS_BUSY;
    c3e8:	2302      	movs	r3, #2
    c3ea:	9307      	str	r3, [sp, #28]
    c3ec:	e036      	b.n	c45c <FlexCAN_StartRxMessageFifoData+0xac>
    }
    else
    {
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_RX_BUSY;
    c3ee:	9b05      	ldr	r3, [sp, #20]
    c3f0:	2201      	movs	r2, #1
    c3f2:	605a      	str	r2, [r3, #4]
    if (FLEXCAN_RXFIFO_USING_POLLING == state->transferType)
    c3f4:	9b05      	ldr	r3, [sp, #20]
    c3f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    c3fa:	2b01      	cmp	r3, #1
    c3fc:	d102      	bne.n	c404 <FlexCAN_StartRxMessageFifoData+0x54>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    c3fe:	9b05      	ldr	r3, [sp, #20]
    c400:	2201      	movs	r2, #1
    c402:	721a      	strb	r2, [r3, #8]
    }

    /* This will get filled by the interrupt handler */
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = data;
    c404:	9b05      	ldr	r3, [sp, #20]
    c406:	9a02      	ldr	r2, [sp, #8]
    c408:	601a      	str	r2, [r3, #0]

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    c40a:	9b05      	ldr	r3, [sp, #20]
    c40c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    c410:	2b00      	cmp	r3, #0
    c412:	d123      	bne.n	c45c <FlexCAN_StartRxMessageFifoData+0xac>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = FALSE;
    c414:	9b05      	ldr	r3, [sp, #20]
    c416:	2200      	movs	r2, #0
    c418:	721a      	strb	r2, [r3, #8]
        /* Enable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, TRUE, state->isIntActive);
    c41a:	9b05      	ldr	r3, [sp, #20]
    c41c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c420:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c424:	9300      	str	r3, [sp, #0]
    c426:	2301      	movs	r3, #1
    c428:	2206      	movs	r2, #6
    c42a:	9806      	ldr	r0, [sp, #24]
    c42c:	f002 fdbe 	bl	efac <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, TRUE, state->isIntActive);
    c430:	9b05      	ldr	r3, [sp, #20]
    c432:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c436:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c43a:	9300      	str	r3, [sp, #0]
    c43c:	2301      	movs	r3, #1
    c43e:	2207      	movs	r2, #7
    c440:	9806      	ldr	r0, [sp, #24]
    c442:	f002 fdb3 	bl	efac <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, TRUE, state->isIntActive);
    c446:	9b05      	ldr	r3, [sp, #20]
    c448:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c44c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c450:	9300      	str	r3, [sp, #0]
    c452:	2301      	movs	r3, #1
    c454:	2205      	movs	r2, #5
    c456:	9806      	ldr	r0, [sp, #24]
    c458:	f002 fda8 	bl	efac <FlexCAN_SetMsgBuffIntCmd>
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    c45c:	9b07      	ldr	r3, [sp, #28]
}
    c45e:	4618      	mov	r0, r3
    c460:	b009      	add	sp, #36	; 0x24
    c462:	f85d fb04 	ldr.w	pc, [sp], #4
    c466:	bf00      	nop
    c468:	000185f0 	.word	0x000185f0
    c46c:	1fff935c 	.word	0x1fff935c

0000c470 <FlexCAN_IRQHandlerRxMB>:
 *
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerRxMB(uint8 instance, uint32 mb_idx)
{
    c470:	b510      	push	{r4, lr}
    c472:	b09e      	sub	sp, #120	; 0x78
    c474:	4603      	mov	r3, r0
    c476:	9102      	str	r1, [sp, #8]
    c478:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    c47c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c480:	4a70      	ldr	r2, [pc, #448]	; (c644 <FlexCAN_IRQHandlerRxMB+0x1d4>)
    c482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c486:	931c      	str	r3, [sp, #112]	; 0x70
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    c488:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c48c:	4a6e      	ldr	r2, [pc, #440]	; (c648 <FlexCAN_IRQHandlerRxMB+0x1d8>)
    c48e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c492:	931b      	str	r3, [sp, #108]	; 0x6c
    Flexcan_Ip_MsgBuffType data;
    boolean bCurrentIntStat = FALSE;
    c494:	2300      	movs	r3, #0
    c496:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[mb_idx].pMBmessage  */
    if (NULL_PTR == state->mbs[mb_idx].pMBmessage)
    c49a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c49c:	9b02      	ldr	r3, [sp, #8]
    c49e:	011b      	lsls	r3, r3, #4
    c4a0:	4413      	add	r3, r2
    c4a2:	681b      	ldr	r3, [r3, #0]
    c4a4:	2b00      	cmp	r3, #0
    c4a6:	d105      	bne.n	c4b4 <FlexCAN_IRQHandlerRxMB+0x44>
    {
        state->mbs[mb_idx].pMBmessage = &data;
    c4a8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c4aa:	9b02      	ldr	r3, [sp, #8]
    c4ac:	011b      	lsls	r3, r3, #4
    c4ae:	4413      	add	r3, r2
    c4b0:	aa05      	add	r2, sp, #20
    c4b2:	601a      	str	r2, [r3, #0]
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    boolean bIsCriticalSectionNeeded = FALSE;
    c4b4:	2300      	movs	r3, #0
    c4b6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77

    /* Expectation: the sequence will not be interrupted when it already in interupt context */
    if (TRUE == state->mbs[mb_idx].isPolling)
    c4ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c4bc:	9b02      	ldr	r3, [sp, #8]
    c4be:	011b      	lsls	r3, r3, #4
    c4c0:	4413      	add	r3, r2
    c4c2:	3308      	adds	r3, #8
    c4c4:	781b      	ldrb	r3, [r3, #0]
    c4c6:	2b00      	cmp	r3, #0
    c4c8:	d008      	beq.n	c4dc <FlexCAN_IRQHandlerRxMB+0x6c>
        if ((state->bIsLegacyFifoEn ||  state->bIsEnhancedFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #else
        if ((state->bIsLegacyFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    #elif defined (ERR_IPV_FLEXCAN_E050246)
        if (state->bIsLegacyFifoEn)
    c4ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c4cc:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    c4d0:	2b00      	cmp	r3, #0
    c4d2:	d003      	beq.n	c4dc <FlexCAN_IRQHandlerRxMB+0x6c>
    #endif
        {
            bIsCriticalSectionNeeded = TRUE;
    c4d4:	2301      	movs	r3, #1
    c4d6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
            /* Disable all IRQs */
            OsIf_SuspendAllInterrupts();
    c4da:	b672      	cpsid	i
        }
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    /* Lock RX message buffer and RX FIFO*/
    FlexCAN_LockRxMsgBuff(base, mb_idx);
    c4dc:	9902      	ldr	r1, [sp, #8]
    c4de:	981c      	ldr	r0, [sp, #112]	; 0x70
    c4e0:	f002 fd55 	bl	ef8e <FlexCAN_LockRxMsgBuff>

    /* Get RX MB field values*/
    FlexCAN_GetMsgBuff(base, mb_idx, state->mbs[mb_idx].pMBmessage);
    c4e4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c4e6:	9b02      	ldr	r3, [sp, #8]
    c4e8:	011b      	lsls	r3, r3, #4
    c4ea:	4413      	add	r3, r2
    c4ec:	681b      	ldr	r3, [r3, #0]
    c4ee:	461a      	mov	r2, r3
    c4f0:	9902      	ldr	r1, [sp, #8]
    c4f2:	981c      	ldr	r0, [sp, #112]	; 0x70
    c4f4:	f002 fe7a 	bl	f1ec <FlexCAN_GetMsgBuff>

    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c4f8:	9902      	ldr	r1, [sp, #8]
    c4fa:	981c      	ldr	r0, [sp, #112]	; 0x70
    c4fc:	f7ff faee 	bl	badc <FlexCAN_ClearMsgBuffIntStatusFlag>

#if defined (ERR_IPV_FLEXCAN_E050246)
    /* the CODE field is updated with an incorrect value when MBx is locked by software for more than 20 CAN bit times and FIFO enable.
    When the CODE field is corrupted, it's probably updated with any value that is invalid. Except EMPTY, FULL and OVERRUN other values can not make MB unlocked and move-in process. */
    if ((state->bIsLegacyFifoEn) && \
    c500:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c502:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    c506:	2b00      	cmp	r3, #0
    c508:	d032      	beq.n	c570 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    c50a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c50c:	9b02      	ldr	r3, [sp, #8]
    c50e:	011b      	lsls	r3, r3, #4
    c510:	4413      	add	r3, r2
    c512:	681b      	ldr	r3, [r3, #0]
    c514:	681b      	ldr	r3, [r3, #0]
    c516:	0e1b      	lsrs	r3, r3, #24
    c518:	f003 030f 	and.w	r3, r3, #15
    if ((state->bIsLegacyFifoEn) && \
    c51c:	2b02      	cmp	r3, #2
    c51e:	d027      	beq.n	c570 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    c520:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c522:	9b02      	ldr	r3, [sp, #8]
    c524:	011b      	lsls	r3, r3, #4
    c526:	4413      	add	r3, r2
    c528:	681b      	ldr	r3, [r3, #0]
    c52a:	681b      	ldr	r3, [r3, #0]
    c52c:	0e1b      	lsrs	r3, r3, #24
    c52e:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    c532:	2b04      	cmp	r3, #4
    c534:	d01c      	beq.n	c570 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_OVERRUN != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)))
    c536:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c538:	9b02      	ldr	r3, [sp, #8]
    c53a:	011b      	lsls	r3, r3, #4
    c53c:	4413      	add	r3, r2
    c53e:	681b      	ldr	r3, [r3, #0]
    c540:	681b      	ldr	r3, [r3, #0]
    c542:	0e1b      	lsrs	r3, r3, #24
    c544:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    c548:	2b06      	cmp	r3, #6
    c54a:	d011      	beq.n	c570 <FlexCAN_IRQHandlerRxMB+0x100>
    {
        /* Update the cs code for next sequence move in MB.
        A CPU write into the C/S word also unlocks the MB */
        volatile uint32 *flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    c54c:	9902      	ldr	r1, [sp, #8]
    c54e:	981c      	ldr	r0, [sp, #112]	; 0x70
    c550:	f002 f9a4 	bl	e89c <FlexCAN_GetMsgBuffRegion>
    c554:	9019      	str	r0, [sp, #100]	; 0x64
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    c556:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c558:	681b      	ldr	r3, [r3, #0]
    c55a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    c55e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c560:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (((uint32)FLEXCAN_RX_EMPTY) << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    c562:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c564:	681b      	ldr	r3, [r3, #0]
    c566:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
    c56a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c56c:	601a      	str	r2, [r3, #0]
    {
    c56e:	e002      	b.n	c576 <FlexCAN_IRQHandlerRxMB+0x106>
    }
    else
#endif
    {
    /* Unlock RX message buffer and RX FIFO*/
    FlexCAN_UnlockRxMsgBuff(base);
    c570:	981c      	ldr	r0, [sp, #112]	; 0x70
    c572:	f7ff faac 	bl	bace <FlexCAN_UnlockRxMsgBuff>
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    /* To ensure that interrupts are resumed when they are suspended */
    if (TRUE == bIsCriticalSectionNeeded)
    c576:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
    c57a:	2b00      	cmp	r3, #0
    c57c:	d000      	beq.n	c580 <FlexCAN_IRQHandlerRxMB+0x110>
    {
        /* Enable all IRQs */
        OsIf_ResumeAllInterrupts();
    c57e:	b662      	cpsie	i
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    c580:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c582:	9b02      	ldr	r3, [sp, #8]
    c584:	011b      	lsls	r3, r3, #4
    c586:	4413      	add	r3, r2
    c588:	3304      	adds	r3, #4
    c58a:	2200      	movs	r2, #0
    c58c:	601a      	str	r2, [r3, #0]

    bCurrentIntStat = state->mbs[mb_idx].isPolling;
    c58e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c590:	9b02      	ldr	r3, [sp, #8]
    c592:	011b      	lsls	r3, r3, #4
    c594:	4413      	add	r3, r2
    c596:	3308      	adds	r3, #8
    c598:	781b      	ldrb	r3, [r3, #0]
    c59a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* Invoke callback */
    if (state->callback != NULL_PTR)
    c59e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c5a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c5a4:	2b00      	cmp	r3, #0
    c5a6:	d008      	beq.n	c5ba <FlexCAN_IRQHandlerRxMB+0x14a>
    {
        state->callback(instance, FLEXCAN_EVENT_RX_COMPLETE, mb_idx, state);
    c5a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c5aa:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c5ae:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c5b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c5b4:	9a02      	ldr	r2, [sp, #8]
    c5b6:	2100      	movs	r1, #0
    c5b8:	47a0      	blx	r4
    }

    if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state) && (FALSE == state->mbs[mb_idx].isPolling))
    c5ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c5bc:	9b02      	ldr	r3, [sp, #8]
    c5be:	011b      	lsls	r3, r3, #4
    c5c0:	4413      	add	r3, r2
    c5c2:	3304      	adds	r3, #4
    c5c4:	681b      	ldr	r3, [r3, #0]
    c5c6:	2b00      	cmp	r3, #0
    c5c8:	d11e      	bne.n	c608 <FlexCAN_IRQHandlerRxMB+0x198>
    c5ca:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c5cc:	9b02      	ldr	r3, [sp, #8]
    c5ce:	011b      	lsls	r3, r3, #4
    c5d0:	4413      	add	r3, r2
    c5d2:	3308      	adds	r3, #8
    c5d4:	781b      	ldrb	r3, [r3, #0]
    c5d6:	f083 0301 	eor.w	r3, r3, #1
    c5da:	b2db      	uxtb	r3, r3
    c5dc:	2b00      	cmp	r3, #0
    c5de:	d013      	beq.n	c608 <FlexCAN_IRQHandlerRxMB+0x198>
    {
        /* callback is not called, need to reset to default value */
        state->mbs[mb_idx].isPolling = TRUE;
    c5e0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c5e2:	9b02      	ldr	r3, [sp, #8]
    c5e4:	011b      	lsls	r3, r3, #4
    c5e6:	4413      	add	r3, r2
    c5e8:	3308      	adds	r3, #8
    c5ea:	2201      	movs	r2, #1
    c5ec:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    c5ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c5f0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c5f4:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c5f8:	9300      	str	r3, [sp, #0]
    c5fa:	2300      	movs	r3, #0
    c5fc:	9a02      	ldr	r2, [sp, #8]
    c5fe:	981c      	ldr	r0, [sp, #112]	; 0x70
    c600:	f002 fcd4 	bl	efac <FlexCAN_SetMsgBuffIntCmd>
    c604:	bf00      	nop
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    c606:	e019      	b.n	c63c <FlexCAN_IRQHandlerRxMB+0x1cc>
    else if ((FALSE == bCurrentIntStat) && (TRUE == state->mbs[mb_idx].isPolling))
    c608:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
    c60c:	f083 0301 	eor.w	r3, r3, #1
    c610:	b2db      	uxtb	r3, r3
    c612:	2b00      	cmp	r3, #0
    c614:	d012      	beq.n	c63c <FlexCAN_IRQHandlerRxMB+0x1cc>
    c616:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c618:	9b02      	ldr	r3, [sp, #8]
    c61a:	011b      	lsls	r3, r3, #4
    c61c:	4413      	add	r3, r2
    c61e:	3308      	adds	r3, #8
    c620:	781b      	ldrb	r3, [r3, #0]
    c622:	2b00      	cmp	r3, #0
    c624:	d00a      	beq.n	c63c <FlexCAN_IRQHandlerRxMB+0x1cc>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    c626:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c628:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c62c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c630:	9300      	str	r3, [sp, #0]
    c632:	2300      	movs	r3, #0
    c634:	9a02      	ldr	r2, [sp, #8]
    c636:	981c      	ldr	r0, [sp, #112]	; 0x70
    c638:	f002 fcb8 	bl	efac <FlexCAN_SetMsgBuffIntCmd>
}
    c63c:	bf00      	nop
    c63e:	b01e      	add	sp, #120	; 0x78
    c640:	bd10      	pop	{r4, pc}
    c642:	bf00      	nop
    c644:	000185f0 	.word	0x000185f0
    c648:	1fff935c 	.word	0x1fff935c

0000c64c <FlexCAN_IRQHandlerTxMB>:
 * note: just using in interrupt mode
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerTxMB(uint8 u8Instance, uint32 u32MbIdx)
{
    c64c:	b510      	push	{r4, lr}
    c64e:	b09a      	sub	sp, #104	; 0x68
    c650:	4603      	mov	r3, r0
    c652:	9102      	str	r1, [sp, #8]
    c654:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    c658:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c65c:	4a46      	ldr	r2, [pc, #280]	; (c778 <FlexCAN_IRQHandlerTxMB+0x12c>)
    c65e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c662:	9319      	str	r3, [sp, #100]	; 0x64
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    c664:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c668:	4a44      	ldr	r2, [pc, #272]	; (c77c <FlexCAN_IRQHandlerTxMB+0x130>)
    c66a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c66e:	9318      	str	r3, [sp, #96]	; 0x60
    Flexcan_Ip_MsgBuffType mb;
    mb.cs = 0U;
    c670:	2300      	movs	r3, #0
    c672:	9304      	str	r3, [sp, #16]
    mb.time_stamp = 0U;
    c674:	2300      	movs	r3, #0
    c676:	9317      	str	r3, [sp, #92]	; 0x5c
    if (pState->mbs[u32MbIdx].isRemote)
    c678:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c67a:	9b02      	ldr	r3, [sp, #8]
    c67c:	011b      	lsls	r3, r3, #4
    c67e:	4413      	add	r3, r2
    c680:	3309      	adds	r3, #9
    c682:	781b      	ldrb	r3, [r3, #0]
    c684:	2b00      	cmp	r3, #0
    c686:	d01e      	beq.n	c6c6 <FlexCAN_IRQHandlerTxMB+0x7a>
    {
        FlexCAN_LockRxMsgBuff(pBase, u32MbIdx);
    c688:	9902      	ldr	r1, [sp, #8]
    c68a:	9819      	ldr	r0, [sp, #100]	; 0x64
    c68c:	f002 fc7f 	bl	ef8e <FlexCAN_LockRxMsgBuff>
        FlexCAN_GetMsgBuff(pBase, u32MbIdx, &mb);
    c690:	ab04      	add	r3, sp, #16
    c692:	461a      	mov	r2, r3
    c694:	9902      	ldr	r1, [sp, #8]
    c696:	9819      	ldr	r0, [sp, #100]	; 0x64
    c698:	f002 fda8 	bl	f1ec <FlexCAN_GetMsgBuff>
        FlexCAN_UnlockRxMsgBuff(pBase);
    c69c:	9819      	ldr	r0, [sp, #100]	; 0x64
    c69e:	f7ff fa16 	bl	bace <FlexCAN_UnlockRxMsgBuff>
        pState->mbs[u32MbIdx].time_stamp = mb.time_stamp;
    c6a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    c6a4:	9918      	ldr	r1, [sp, #96]	; 0x60
    c6a6:	9b02      	ldr	r3, [sp, #8]
    c6a8:	011b      	lsls	r3, r3, #4
    c6aa:	440b      	add	r3, r1
    c6ac:	330c      	adds	r3, #12
    c6ae:	601a      	str	r2, [r3, #0]
        /* If the frame was a remote frame, clear the flag only if the response was
        * not received yet. If the response was received, leave the flag set in order
        * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
        if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    c6b0:	9b04      	ldr	r3, [sp, #16]
    c6b2:	0e1b      	lsrs	r3, r3, #24
    c6b4:	f003 030f 	and.w	r3, r3, #15
    c6b8:	2b04      	cmp	r3, #4
    c6ba:	d116      	bne.n	c6ea <FlexCAN_IRQHandlerTxMB+0x9e>
        {
            FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    c6bc:	9902      	ldr	r1, [sp, #8]
    c6be:	9819      	ldr	r0, [sp, #100]	; 0x64
    c6c0:	f7ff fa0c 	bl	badc <FlexCAN_ClearMsgBuffIntStatusFlag>
    c6c4:	e011      	b.n	c6ea <FlexCAN_IRQHandlerTxMB+0x9e>
        }
    }
    else
    {
        pState->mbs[u32MbIdx].time_stamp = FlexCAN_GetMsgBuffTimestamp(pBase, u32MbIdx);
    c6c6:	9902      	ldr	r1, [sp, #8]
    c6c8:	9819      	ldr	r0, [sp, #100]	; 0x64
    c6ca:	f002 fd7b 	bl	f1c4 <FlexCAN_GetMsgBuffTimestamp>
    c6ce:	4601      	mov	r1, r0
    c6d0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c6d2:	9b02      	ldr	r3, [sp, #8]
    c6d4:	011b      	lsls	r3, r3, #4
    c6d6:	4413      	add	r3, r2
    c6d8:	330c      	adds	r3, #12
    c6da:	6019      	str	r1, [r3, #0]
        FlexCAN_UnlockRxMsgBuff(pBase);
    c6dc:	9819      	ldr	r0, [sp, #100]	; 0x64
    c6de:	f7ff f9f6 	bl	bace <FlexCAN_UnlockRxMsgBuff>
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    c6e2:	9902      	ldr	r1, [sp, #8]
    c6e4:	9819      	ldr	r0, [sp, #100]	; 0x64
    c6e6:	f7ff f9f9 	bl	badc <FlexCAN_ClearMsgBuffIntStatusFlag>
    }

    pState->mbs[u32MbIdx].state = FLEXCAN_MB_IDLE;
    c6ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c6ec:	9b02      	ldr	r3, [sp, #8]
    c6ee:	011b      	lsls	r3, r3, #4
    c6f0:	4413      	add	r3, r2
    c6f2:	3304      	adds	r3, #4
    c6f4:	2200      	movs	r2, #0
    c6f6:	601a      	str	r2, [r3, #0]

    /* Invoke callback */
    if (pState->callback != NULL_PTR)
    c6f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c6fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c6fe:	2b00      	cmp	r3, #0
    c700:	d008      	beq.n	c714 <FlexCAN_IRQHandlerTxMB+0xc8>
    {
        pState->callback(u8Instance, FLEXCAN_EVENT_TX_COMPLETE, u32MbIdx, pState);
    c702:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c704:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c708:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c70c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c70e:	9a02      	ldr	r2, [sp, #8]
    c710:	2104      	movs	r1, #4
    c712:	47a0      	blx	r4
    }

    if (FLEXCAN_MB_IDLE == pState->mbs[u32MbIdx].state)
    c714:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c716:	9b02      	ldr	r3, [sp, #8]
    c718:	011b      	lsls	r3, r3, #4
    c71a:	4413      	add	r3, r2
    c71c:	3304      	adds	r3, #4
    c71e:	681b      	ldr	r3, [r3, #0]
    c720:	2b00      	cmp	r3, #0
    c722:	d112      	bne.n	c74a <FlexCAN_IRQHandlerTxMB+0xfe>
    {
        /* callback is not called, need to reset to default value */
        pState->mbs[u32MbIdx].isPolling = TRUE;
    c724:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c726:	9b02      	ldr	r3, [sp, #8]
    c728:	011b      	lsls	r3, r3, #4
    c72a:	4413      	add	r3, r2
    c72c:	3308      	adds	r3, #8
    c72e:	2201      	movs	r2, #1
    c730:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    c732:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c734:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c738:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c73c:	9300      	str	r3, [sp, #0]
    c73e:	2300      	movs	r3, #0
    c740:	9a02      	ldr	r2, [sp, #8]
    c742:	9819      	ldr	r0, [sp, #100]	; 0x64
    c744:	f002 fc32 	bl	efac <FlexCAN_SetMsgBuffIntCmd>
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    c748:	e012      	b.n	c770 <FlexCAN_IRQHandlerTxMB+0x124>
    else if (TRUE == pState->mbs[u32MbIdx].isPolling)
    c74a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c74c:	9b02      	ldr	r3, [sp, #8]
    c74e:	011b      	lsls	r3, r3, #4
    c750:	4413      	add	r3, r2
    c752:	3308      	adds	r3, #8
    c754:	781b      	ldrb	r3, [r3, #0]
    c756:	2b00      	cmp	r3, #0
    c758:	d00a      	beq.n	c770 <FlexCAN_IRQHandlerTxMB+0x124>
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    c75a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c75c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c760:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c764:	9300      	str	r3, [sp, #0]
    c766:	2300      	movs	r3, #0
    c768:	9a02      	ldr	r2, [sp, #8]
    c76a:	9819      	ldr	r0, [sp, #100]	; 0x64
    c76c:	f002 fc1e 	bl	efac <FlexCAN_SetMsgBuffIntCmd>
}
    c770:	bf00      	nop
    c772:	b01a      	add	sp, #104	; 0x68
    c774:	bd10      	pop	{r4, pc}
    c776:	bf00      	nop
    c778:	000185f0 	.word	0x000185f0
    c77c:	1fff935c 	.word	0x1fff935c

0000c780 <FlexCAN_IRQHandlerRxFIFO>:
 * Function Name : FlexCAN_IRQHandlerRxFIFO
 * Description   : Process IRQHandler in case of RxFIFO mode selection for CAN interface.
 *
 *END**************************************************************************/
static inline void FlexCAN_IRQHandlerRxFIFO(uint8 instance, uint32 mb_idx)
{
    c780:	b510      	push	{r4, lr}
    c782:	b098      	sub	sp, #96	; 0x60
    c784:	4603      	mov	r3, r0
    c786:	9100      	str	r1, [sp, #0]
    c788:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    c78c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c790:	4a3c      	ldr	r2, [pc, #240]	; (c884 <FlexCAN_IRQHandlerRxFIFO+0x104>)
    c792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c796:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    c798:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c79c:	4a3a      	ldr	r2, [pc, #232]	; (c888 <FlexCAN_IRQHandlerRxFIFO+0x108>)
    c79e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7a2:	9316      	str	r3, [sp, #88]	; 0x58
    Flexcan_Ip_MsgBuffType data;

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage  */
    if (NULL_PTR == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage)
    c7a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7a6:	681b      	ldr	r3, [r3, #0]
    c7a8:	2b00      	cmp	r3, #0
    c7aa:	d102      	bne.n	c7b2 <FlexCAN_IRQHandlerRxFIFO+0x32>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = &data;
    c7ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7ae:	aa02      	add	r2, sp, #8
    c7b0:	601a      	str	r2, [r3, #0]
    }
    switch (mb_idx)
    c7b2:	9b00      	ldr	r3, [sp, #0]
    c7b4:	2b07      	cmp	r3, #7
    c7b6:	d048      	beq.n	c84a <FlexCAN_IRQHandlerRxFIFO+0xca>
    c7b8:	9b00      	ldr	r3, [sp, #0]
    c7ba:	2b07      	cmp	r3, #7
    c7bc:	d858      	bhi.n	c870 <FlexCAN_IRQHandlerRxFIFO+0xf0>
    c7be:	9b00      	ldr	r3, [sp, #0]
    c7c0:	2b05      	cmp	r3, #5
    c7c2:	d003      	beq.n	c7cc <FlexCAN_IRQHandlerRxFIFO+0x4c>
    c7c4:	9b00      	ldr	r3, [sp, #0]
    c7c6:	2b06      	cmp	r3, #6
    c7c8:	d02c      	beq.n	c824 <FlexCAN_IRQHandlerRxFIFO+0xa4>
            }

            break;
        default:
            /* Do Nothing */
            break;
    c7ca:	e051      	b.n	c870 <FlexCAN_IRQHandlerRxFIFO+0xf0>
            if (FLEXCAN_MB_RX_BUSY == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c7cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7ce:	685b      	ldr	r3, [r3, #4]
    c7d0:	2b01      	cmp	r3, #1
    c7d2:	d14f      	bne.n	c874 <FlexCAN_IRQHandlerRxFIFO+0xf4>
                FlexCAN_ReadRxFifo(base, state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage);
    c7d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7d6:	681b      	ldr	r3, [r3, #0]
    c7d8:	4619      	mov	r1, r3
    c7da:	9817      	ldr	r0, [sp, #92]	; 0x5c
    c7dc:	f003 f98d 	bl	fafa <FlexCAN_ReadRxFifo>
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c7e0:	9900      	ldr	r1, [sp, #0]
    c7e2:	9817      	ldr	r0, [sp, #92]	; 0x5c
    c7e4:	f7ff f97a 	bl	badc <FlexCAN_ClearMsgBuffIntStatusFlag>
                state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    c7e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7ea:	2200      	movs	r2, #0
    c7ec:	605a      	str	r2, [r3, #4]
                if (state->callback != NULL_PTR)
    c7ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c7f4:	2b00      	cmp	r3, #0
    c7f6:	d008      	beq.n	c80a <FlexCAN_IRQHandlerRxFIFO+0x8a>
                    state->callback(instance, FLEXCAN_EVENT_RXFIFO_COMPLETE, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    c7f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7fa:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c7fe:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c802:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c804:	2200      	movs	r2, #0
    c806:	2101      	movs	r1, #1
    c808:	47a0      	blx	r4
                if (FLEXCAN_MB_IDLE == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c80a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c80c:	685b      	ldr	r3, [r3, #4]
    c80e:	2b00      	cmp	r3, #0
    c810:	d130      	bne.n	c874 <FlexCAN_IRQHandlerRxFIFO+0xf4>
                    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    c812:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c814:	2201      	movs	r2, #1
    c816:	721a      	strb	r2, [r3, #8]
                    FlexCAN_CompleteRxMessageFifoData(instance);
    c818:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c81c:	4618      	mov	r0, r3
    c81e:	f000 fc61 	bl	d0e4 <FlexCAN_CompleteRxMessageFifoData>
            break;
    c822:	e027      	b.n	c874 <FlexCAN_IRQHandlerRxFIFO+0xf4>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c824:	9900      	ldr	r1, [sp, #0]
    c826:	9817      	ldr	r0, [sp, #92]	; 0x5c
    c828:	f7ff f958 	bl	badc <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    c82c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c82e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c832:	2b00      	cmp	r3, #0
    c834:	d020      	beq.n	c878 <FlexCAN_IRQHandlerRxFIFO+0xf8>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_WARNING, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    c836:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c838:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c83c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c840:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c842:	2200      	movs	r2, #0
    c844:	2102      	movs	r1, #2
    c846:	47a0      	blx	r4
            break;
    c848:	e016      	b.n	c878 <FlexCAN_IRQHandlerRxFIFO+0xf8>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c84a:	9900      	ldr	r1, [sp, #0]
    c84c:	9817      	ldr	r0, [sp, #92]	; 0x5c
    c84e:	f7ff f945 	bl	badc <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    c852:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c854:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c858:	2b00      	cmp	r3, #0
    c85a:	d00f      	beq.n	c87c <FlexCAN_IRQHandlerRxFIFO+0xfc>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_OVERFLOW, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    c85c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c85e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c862:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c866:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c868:	2200      	movs	r2, #0
    c86a:	2103      	movs	r1, #3
    c86c:	47a0      	blx	r4
            break;
    c86e:	e005      	b.n	c87c <FlexCAN_IRQHandlerRxFIFO+0xfc>
            break;
    c870:	bf00      	nop
    c872:	e004      	b.n	c87e <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    c874:	bf00      	nop
    c876:	e002      	b.n	c87e <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    c878:	bf00      	nop
    c87a:	e000      	b.n	c87e <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    c87c:	bf00      	nop
    }
}
    c87e:	bf00      	nop
    c880:	b018      	add	sp, #96	; 0x60
    c882:	bd10      	pop	{r4, pc}
    c884:	000185f0 	.word	0x000185f0
    c888:	1fff935c 	.word	0x1fff935c

0000c88c <FlexCAN_AbortTxTransfer>:
 * Description   : Abort transfer for Tx buffer.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_AbortTxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    c88c:	b500      	push	{lr}
    c88e:	b08b      	sub	sp, #44	; 0x2c
    c890:	4603      	mov	r3, r0
    c892:	460a      	mov	r2, r1
    c894:	f88d 3007 	strb.w	r3, [sp, #7]
    c898:	4613      	mov	r3, r2
    c89a:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    c89e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c8a2:	4a3c      	ldr	r2, [pc, #240]	; (c994 <FlexCAN_AbortTxTransfer+0x108>)
    c8a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8a8:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    c8aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c8ae:	4a3a      	ldr	r2, [pc, #232]	; (c998 <FlexCAN_AbortTxTransfer+0x10c>)
    c8b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8b4:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    c8b6:	2300      	movs	r3, #0
    c8b8:	9309      	str	r3, [sp, #36]	; 0x24

    uint32 timeStart = 0U;
    c8ba:	2300      	movs	r3, #0
    c8bc:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    c8be:	2300      	movs	r3, #0
    c8c0:	9308      	str	r3, [sp, #32]
    uint32 flexcan_mb_config = 0;
    c8c2:	2300      	movs	r3, #0
    c8c4:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = 0U;
    c8c6:	2300      	movs	r3, #0
    c8c8:	9304      	str	r3, [sp, #16]
    volatile uint32 * flexcan_mb = NULL_PTR;
    c8ca:	2300      	movs	r3, #0
    c8cc:	9303      	str	r3, [sp, #12]

    flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    c8ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c8d2:	4619      	mov	r1, r3
    c8d4:	9807      	ldr	r0, [sp, #28]
    c8d6:	f001 ffe1 	bl	e89c <FlexCAN_GetMsgBuffRegion>
    c8da:	9003      	str	r0, [sp, #12]
    flexcan_mb_config = * flexcan_mb;
    c8dc:	9b03      	ldr	r3, [sp, #12]
    c8de:	681b      	ldr	r3, [r3, #0]
    c8e0:	9305      	str	r3, [sp, #20]
    /* Reset the code */
    flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    c8e2:	9b05      	ldr	r3, [sp, #20]
    c8e4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    c8e8:	9305      	str	r3, [sp, #20]
    flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    c8ea:	9b05      	ldr	r3, [sp, #20]
    c8ec:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    c8f0:	9305      	str	r3, [sp, #20]
    *flexcan_mb = flexcan_mb_config;
    c8f2:	9b03      	ldr	r3, [sp, #12]
    c8f4:	9a05      	ldr	r2, [sp, #20]
    c8f6:	601a      	str	r2, [r3, #0]

    /* Wait to finish abort operation */
    uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c8f8:	2100      	movs	r1, #0
    c8fa:	4828      	ldr	r0, [pc, #160]	; (c99c <FlexCAN_AbortTxTransfer+0x110>)
    c8fc:	f7f5 fb26 	bl	1f4c <OsIf_MicrosToTicks>
    c900:	9004      	str	r0, [sp, #16]
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c902:	2000      	movs	r0, #0
    c904:	f7f5 fad6 	bl	1eb4 <OsIf_GetCounter>
    c908:	4603      	mov	r3, r0
    c90a:	9302      	str	r3, [sp, #8]
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    c90c:	e00f      	b.n	c92e <FlexCAN_AbortTxTransfer+0xa2>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c90e:	ab02      	add	r3, sp, #8
    c910:	2100      	movs	r1, #0
    c912:	4618      	mov	r0, r3
    c914:	f7f5 fae7 	bl	1ee6 <OsIf_GetElapsed>
    c918:	4602      	mov	r2, r0
    c91a:	9b08      	ldr	r3, [sp, #32]
    c91c:	4413      	add	r3, r2
    c91e:	9308      	str	r3, [sp, #32]
        if (timeElapsed >= uS2Ticks)
    c920:	9a08      	ldr	r2, [sp, #32]
    c922:	9b04      	ldr	r3, [sp, #16]
    c924:	429a      	cmp	r2, r3
    c926:	d302      	bcc.n	c92e <FlexCAN_AbortTxTransfer+0xa2>
        {
            result = FLEXCAN_STATUS_TIMEOUT;
    c928:	2303      	movs	r3, #3
    c92a:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    c92c:	e008      	b.n	c940 <FlexCAN_AbortTxTransfer+0xb4>
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    c92e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c932:	4619      	mov	r1, r3
    c934:	9807      	ldr	r0, [sp, #28]
    c936:	f7ff f8e4 	bl	bb02 <FlexCAN_GetBuffStatusFlag>
    c93a:	4603      	mov	r3, r0
    c93c:	2b00      	cmp	r3, #0
    c93e:	d0e6      	beq.n	c90e <FlexCAN_AbortTxTransfer+0x82>
        }
    }
    if (result != FLEXCAN_STATUS_TIMEOUT)
    c940:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c942:	2b03      	cmp	r3, #3
    c944:	d012      	beq.n	c96c <FlexCAN_AbortTxTransfer+0xe0>
    {
        flexcan_mb_config = *flexcan_mb;
    c946:	9b03      	ldr	r3, [sp, #12]
    c948:	681b      	ldr	r3, [r3, #0]
    c94a:	9305      	str	r3, [sp, #20]
        /* Check if the MBs have been safely Inactivated */
        if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    c94c:	9b05      	ldr	r3, [sp, #20]
    c94e:	0e1b      	lsrs	r3, r3, #24
    c950:	f003 030f 	and.w	r3, r3, #15
    c954:	2b08      	cmp	r3, #8
    c956:	d101      	bne.n	c95c <FlexCAN_AbortTxTransfer+0xd0>
        {
            /* Transmission have occurred */
            result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    c958:	2305      	movs	r3, #5
    c95a:	9309      	str	r3, [sp, #36]	; 0x24
        }

        if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    c95c:	9b05      	ldr	r3, [sp, #20]
    c95e:	0e1b      	lsrs	r3, r3, #24
    c960:	f003 030f 	and.w	r3, r3, #15
    c964:	2b09      	cmp	r3, #9
    c966:	d101      	bne.n	c96c <FlexCAN_AbortTxTransfer+0xe0>
        {
            /* Transmission have been aborted */
            result = FLEXCAN_STATUS_SUCCESS;
    c968:	2300      	movs	r3, #0
    c96a:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    c96c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c970:	4619      	mov	r1, r3
    c972:	9807      	ldr	r0, [sp, #28]
    c974:	f7ff f8b2 	bl	badc <FlexCAN_ClearMsgBuffIntStatusFlag>
    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    c978:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c97c:	9a06      	ldr	r2, [sp, #24]
    c97e:	011b      	lsls	r3, r3, #4
    c980:	4413      	add	r3, r2
    c982:	3304      	adds	r3, #4
    c984:	2200      	movs	r2, #0
    c986:	601a      	str	r2, [r3, #0]

    return result;
    c988:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    c98a:	4618      	mov	r0, r3
    c98c:	b00b      	add	sp, #44	; 0x2c
    c98e:	f85d fb04 	ldr.w	pc, [sp], #4
    c992:	bf00      	nop
    c994:	000185f0 	.word	0x000185f0
    c998:	1fff935c 	.word	0x1fff935c
    c99c:	000f4240 	.word	0x000f4240

0000c9a0 <FlexCAN_AbortRxTransfer>:
 * Description   : Abort transfer for Rx normal or legacy fifo if enabled.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static void FlexCAN_AbortRxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    c9a0:	b500      	push	{lr}
    c9a2:	b089      	sub	sp, #36	; 0x24
    c9a4:	4603      	mov	r3, r0
    c9a6:	460a      	mov	r2, r1
    c9a8:	f88d 3007 	strb.w	r3, [sp, #7]
    c9ac:	4613      	mov	r3, r2
    c9ae:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    c9b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c9b6:	4a41      	ldr	r2, [pc, #260]	; (cabc <FlexCAN_AbortRxTransfer+0x11c>)
    c9b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9bc:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    c9be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c9c2:	4a3f      	ldr	r2, [pc, #252]	; (cac0 <FlexCAN_AbortRxTransfer+0x120>)
    c9c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9c8:	9306      	str	r3, [sp, #24]
    uint8 val1 = 0U;
    c9ca:	2300      	movs	r3, #0
    c9cc:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 val2 = 0U;
    c9d0:	2300      	movs	r3, #0
    c9d2:	9304      	str	r3, [sp, #16]
    uint32 flexcan_mb_config = 0;
    c9d4:	2300      	movs	r3, #0
    c9d6:	9303      	str	r3, [sp, #12]
    volatile uint32 * flexcan_mb = NULL_PTR;
    c9d8:	2300      	movs	r3, #0
    c9da:	9302      	str	r3, [sp, #8]

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    c9dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c9e0:	9a06      	ldr	r2, [sp, #24]
    c9e2:	011b      	lsls	r3, r3, #4
    c9e4:	4413      	add	r3, r2
    c9e6:	3304      	adds	r3, #4
    c9e8:	2200      	movs	r2, #0
    c9ea:	601a      	str	r2, [r3, #0]
    /* Check if fifo enabled */
    if (TRUE == state->bIsLegacyFifoEn)
    c9ec:	9b06      	ldr	r3, [sp, #24]
    c9ee:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    c9f2:	2b00      	cmp	r3, #0
    c9f4:	d03c      	beq.n	ca70 <FlexCAN_AbortRxTransfer+0xd0>
    {
        /* Get the number of RX FIFO Filters*/
        val1 = (uint8)(((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    c9f6:	9b07      	ldr	r3, [sp, #28]
    c9f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c9fa:	0e1b      	lsrs	r3, r3, #24
    c9fc:	b2db      	uxtb	r3, r3
    c9fe:	f003 030f 	and.w	r3, r3, #15
    ca02:	f88d 3017 	strb.w	r3, [sp, #23]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        val2 = RxFifoOcuppiedLastMsgBuff(val1);
    ca06:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ca0a:	4618      	mov	r0, r3
    ca0c:	f7ff f9f3 	bl	bdf6 <RxFifoOcuppiedLastMsgBuff>
    ca10:	9004      	str	r0, [sp, #16]
        if (mb_idx > val2)
    ca12:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ca16:	9a04      	ldr	r2, [sp, #16]
    ca18:	429a      	cmp	r2, r3
    ca1a:	d21b      	bcs.n	ca54 <FlexCAN_AbortRxTransfer+0xb4>
        {
            /* This operation is not allowed for MB that are part of RxFIFO */
            flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    ca1c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ca20:	4619      	mov	r1, r3
    ca22:	9807      	ldr	r0, [sp, #28]
    ca24:	f001 ff3a 	bl	e89c <FlexCAN_GetMsgBuffRegion>
    ca28:	9002      	str	r0, [sp, #8]
            flexcan_mb_config = * flexcan_mb;
    ca2a:	9b02      	ldr	r3, [sp, #8]
    ca2c:	681b      	ldr	r3, [r3, #0]
    ca2e:	9303      	str	r3, [sp, #12]
            /* Reset the code and unlock the MB */
            flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    ca30:	9b03      	ldr	r3, [sp, #12]
    ca32:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    ca36:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
            *flexcan_mb = flexcan_mb_config;
    ca38:	9b02      	ldr	r3, [sp, #8]
    ca3a:	9a03      	ldr	r2, [sp, #12]
    ca3c:	601a      	str	r2, [r3, #0]
            /* Reconfigure The MB as left by RxMBconfig */
            flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    ca3e:	9b03      	ldr	r3, [sp, #12]
    ca40:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    ca44:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    ca46:	9b03      	ldr	r3, [sp, #12]
    ca48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    ca4c:	9303      	str	r3, [sp, #12]
            *flexcan_mb = flexcan_mb_config;
    ca4e:	9b02      	ldr	r3, [sp, #8]
    ca50:	9a03      	ldr	r2, [sp, #12]
    ca52:	601a      	str	r2, [r3, #0]
        }
        if (FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    ca54:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ca58:	2b00      	cmp	r3, #0
    ca5a:	d125      	bne.n	caa8 <FlexCAN_AbortRxTransfer+0x108>
        {
            FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, state->isIntActive);
    ca5c:	9b06      	ldr	r3, [sp, #24]
    ca5e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    ca62:	f89d 1007 	ldrb.w	r1, [sp, #7]
    ca66:	2205      	movs	r2, #5
    ca68:	9807      	ldr	r0, [sp, #28]
    ca6a:	f002 faf5 	bl	f058 <FLEXCAN_ClearMsgBuffIntCmd>
    ca6e:	e01b      	b.n	caa8 <FlexCAN_AbortRxTransfer+0x108>
        }
    }
    else
    {
        /* This operation is not allowed for MB that are part of RxFIFO */
        flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    ca70:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ca74:	4619      	mov	r1, r3
    ca76:	9807      	ldr	r0, [sp, #28]
    ca78:	f001 ff10 	bl	e89c <FlexCAN_GetMsgBuffRegion>
    ca7c:	9002      	str	r0, [sp, #8]
        flexcan_mb_config = * flexcan_mb;
    ca7e:	9b02      	ldr	r3, [sp, #8]
    ca80:	681b      	ldr	r3, [r3, #0]
    ca82:	9303      	str	r3, [sp, #12]
        /* Reset the code and unlock the MB */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    ca84:	9b03      	ldr	r3, [sp, #12]
    ca86:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    ca8a:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
        *flexcan_mb = flexcan_mb_config;
    ca8c:	9b02      	ldr	r3, [sp, #8]
    ca8e:	9a03      	ldr	r2, [sp, #12]
    ca90:	601a      	str	r2, [r3, #0]
        /* Reconfigure The MB as left by RxMBconfig */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    ca92:	9b03      	ldr	r3, [sp, #12]
    ca94:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    ca98:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    ca9a:	9b03      	ldr	r3, [sp, #12]
    ca9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    caa0:	9303      	str	r3, [sp, #12]
        *flexcan_mb = flexcan_mb_config;
    caa2:	9b02      	ldr	r3, [sp, #8]
    caa4:	9a03      	ldr	r2, [sp, #12]
    caa6:	601a      	str	r2, [r3, #0]
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    caa8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    caac:	4619      	mov	r1, r3
    caae:	9807      	ldr	r0, [sp, #28]
    cab0:	f7ff f814 	bl	badc <FlexCAN_ClearMsgBuffIntStatusFlag>
}
    cab4:	bf00      	nop
    cab6:	b009      	add	sp, #36	; 0x24
    cab8:	f85d fb04 	ldr.w	pc, [sp], #4
    cabc:	000185f0 	.word	0x000185f0
    cac0:	1fff935c 	.word	0x1fff935c

0000cac4 <FlexCAN_Ip_Init_Privileged>:
/* implements FlexCAN_Ip_Init_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Init_Privileged(uint8 Flexcan_Ip_u8Instance,
                                                 Flexcan_Ip_StateType * Flexcan_Ip_pState,
                                                 const Flexcan_Ip_ConfigType * Flexcan_Ip_pData
                                                )
{
    cac4:	b500      	push	{lr}
    cac6:	b089      	sub	sp, #36	; 0x24
    cac8:	4603      	mov	r3, r0
    caca:	9102      	str	r1, [sp, #8]
    cacc:	9201      	str	r2, [sp, #4]
    cace:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    cad2:	2300      	movs	r3, #0
    cad4:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    cad6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cada:	4a36      	ldr	r2, [pc, #216]	; (cbb4 <FlexCAN_Ip_Init_Privileged+0xf0>)
    cadc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cae0:	9305      	str	r3, [sp, #20]
    {
        OsIf_Trusted_Call1param(FlexCAN_SetUserAccessAllowed, pBase);
    }
#endif

    eResult = FlexCAN_InitController(Flexcan_Ip_u8Instance, pBase, Flexcan_Ip_pData);
    cae2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cae6:	9a01      	ldr	r2, [sp, #4]
    cae8:	9905      	ldr	r1, [sp, #20]
    caea:	4618      	mov	r0, r3
    caec:	f7ff fa84 	bl	bff8 <FlexCAN_InitController>
    caf0:	9006      	str	r0, [sp, #24]
    if (FLEXCAN_STATUS_SUCCESS == eResult)
    caf2:	9b06      	ldr	r3, [sp, #24]
    caf4:	2b00      	cmp	r3, #0
    caf6:	d158      	bne.n	cbaa <FlexCAN_Ip_Init_Privileged+0xe6>
    {
        /* Init Baudrate */
        FlexCAN_InitBaudrate(pBase, Flexcan_Ip_pData);
    caf8:	9901      	ldr	r1, [sp, #4]
    cafa:	9805      	ldr	r0, [sp, #20]
    cafc:	f7ff fad6 	bl	c0ac <FlexCAN_InitBaudrate>
        /* Select mode */
        FlexCAN_SetOperationMode(pBase, Flexcan_Ip_pData->flexcanMode);
    cb00:	9b01      	ldr	r3, [sp, #4]
    cb02:	68db      	ldr	r3, [r3, #12]
    cb04:	4619      	mov	r1, r3
    cb06:	9805      	ldr	r0, [sp, #20]
    cb08:	f002 fdb8 	bl	f67c <FlexCAN_SetOperationMode>

#if (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON)
        FlexCAN_ConfigTimestamp(Flexcan_Ip_u8Instance, pBase, (const Flexcan_Ip_TimeStampConfigType *)(&Flexcan_Ip_pData->time_stamp));
#endif   /* (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON) */

        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    cb0c:	2300      	movs	r3, #0
    cb0e:	9307      	str	r3, [sp, #28]
    cb10:	e01d      	b.n	cb4e <FlexCAN_Ip_Init_Privileged+0x8a>
        {
            /* Check if blocking need to be any more present in sync\async discussions */
            /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
            Flexcan_Ip_pState->mbs[i].isPolling = TRUE;
    cb12:	9a02      	ldr	r2, [sp, #8]
    cb14:	9b07      	ldr	r3, [sp, #28]
    cb16:	011b      	lsls	r3, r3, #4
    cb18:	4413      	add	r3, r2
    cb1a:	3308      	adds	r3, #8
    cb1c:	2201      	movs	r2, #1
    cb1e:	701a      	strb	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].pMBmessage = NULL_PTR;
    cb20:	9a02      	ldr	r2, [sp, #8]
    cb22:	9b07      	ldr	r3, [sp, #28]
    cb24:	011b      	lsls	r3, r3, #4
    cb26:	4413      	add	r3, r2
    cb28:	2200      	movs	r2, #0
    cb2a:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].state = FLEXCAN_MB_IDLE;
    cb2c:	9a02      	ldr	r2, [sp, #8]
    cb2e:	9b07      	ldr	r3, [sp, #28]
    cb30:	011b      	lsls	r3, r3, #4
    cb32:	4413      	add	r3, r2
    cb34:	3304      	adds	r3, #4
    cb36:	2200      	movs	r2, #0
    cb38:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].time_stamp = 0U;
    cb3a:	9a02      	ldr	r2, [sp, #8]
    cb3c:	9b07      	ldr	r3, [sp, #28]
    cb3e:	011b      	lsls	r3, r3, #4
    cb40:	4413      	add	r3, r2
    cb42:	330c      	adds	r3, #12
    cb44:	2200      	movs	r2, #0
    cb46:	601a      	str	r2, [r3, #0]
        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    cb48:	9b07      	ldr	r3, [sp, #28]
    cb4a:	3301      	adds	r3, #1
    cb4c:	9307      	str	r3, [sp, #28]
    cb4e:	9b07      	ldr	r3, [sp, #28]
    cb50:	2b1f      	cmp	r3, #31
    cb52:	d9de      	bls.n	cb12 <FlexCAN_Ip_Init_Privileged+0x4e>
        /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
        Flexcan_Ip_pState->enhancedFifoOutput.isPolling = TRUE;
        Flexcan_Ip_pState->enhancedFifoOutput.state = FLEXCAN_MB_IDLE;
#endif

        Flexcan_Ip_pState->transferType = Flexcan_Ip_pData->transfer_type;
    cb54:	9b01      	ldr	r3, [sp, #4]
    cb56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    cb58:	9b02      	ldr	r3, [sp, #8]
    cb5a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        Flexcan_Ip_pState->u32NumOfMbTransferByDMA = Flexcan_Ip_pData->num_enhanced_watermark;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

        /* Clear Callbacks in case of autovariables garbage */
        Flexcan_Ip_pState->callback = Flexcan_Ip_pData->Callback;
    cb5e:	9b01      	ldr	r3, [sp, #4]
    cb60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    cb62:	9b02      	ldr	r3, [sp, #8]
    cb64:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        Flexcan_Ip_pState->callbackParam = NULL_PTR;
    cb68:	9b02      	ldr	r3, [sp, #8]
    cb6a:	2200      	movs	r2, #0
    cb6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
        Flexcan_Ip_pState->error_callback = Flexcan_Ip_pData->ErrorCallback;
    cb70:	9b01      	ldr	r3, [sp, #4]
    cb72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    cb74:	9b02      	ldr	r3, [sp, #8]
    cb76:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        Flexcan_Ip_pState->errorCallbackParam = NULL_PTR;
    cb7a:	9b02      	ldr	r3, [sp, #8]
    cb7c:	2200      	movs	r2, #0
    cb7e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
        Flexcan_Ip_pState->bIsLegacyFifoEn = Flexcan_Ip_pData->is_rx_fifo_needed;
    cb82:	9b01      	ldr	r3, [sp, #4]
    cb84:	7a1a      	ldrb	r2, [r3, #8]
    cb86:	9b02      	ldr	r3, [sp, #8]
    cb88:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
        Flexcan_Ip_pState->bIsEnhancedFifoEn = Flexcan_Ip_pData->is_enhanced_rx_fifo_needed;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
        Flexcan_Ip_pState->u32MaxMbNum = Flexcan_Ip_pData->max_num_mb;
    cb8c:	9b01      	ldr	r3, [sp, #4]
    cb8e:	681a      	ldr	r2, [r3, #0]
    cb90:	9b02      	ldr	r3, [sp, #8]
    cb92:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
        Flexcan_Ip_pState->isIntActive = TRUE;
    cb96:	9b02      	ldr	r3, [sp, #8]
    cb98:	2201      	movs	r2, #1
    cb9a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        /* Save runtime structure pointers so irq handler can point to the correct state structure */
        Flexcan_Ip_apxState[Flexcan_Ip_u8Instance] = Flexcan_Ip_pState;
    cb9e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cba2:	4905      	ldr	r1, [pc, #20]	; (cbb8 <FlexCAN_Ip_Init_Privileged+0xf4>)
    cba4:	9a02      	ldr	r2, [sp, #8]
    cba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    return eResult;
    cbaa:	9b06      	ldr	r3, [sp, #24]
}
    cbac:	4618      	mov	r0, r3
    cbae:	b009      	add	sp, #36	; 0x24
    cbb0:	f85d fb04 	ldr.w	pc, [sp], #4
    cbb4:	000185f0 	.word	0x000185f0
    cbb8:	1fff935c 	.word	0x1fff935c

0000cbbc <FlexCAN_Ip_Send>:
                                      uint8 mb_idx,
                                      const Flexcan_Ip_DataInfoType * tx_info,
                                      uint32 msg_id,
                                      const uint8 * mb_data
                                     )
{
    cbbc:	b500      	push	{lr}
    cbbe:	b08b      	sub	sp, #44	; 0x2c
    cbc0:	9204      	str	r2, [sp, #16]
    cbc2:	9303      	str	r3, [sp, #12]
    cbc4:	4603      	mov	r3, r0
    cbc6:	f88d 3017 	strb.w	r3, [sp, #23]
    cbca:	460b      	mov	r3, r1
    cbcc:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    cbd0:	2301      	movs	r3, #1
    cbd2:	9309      	str	r3, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    cbd4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cbd8:	4a1c      	ldr	r2, [pc, #112]	; (cc4c <FlexCAN_Ip_Send+0x90>)
    cbda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbde:	9308      	str	r3, [sp, #32]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    cbe0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cbe4:	4a1a      	ldr	r2, [pc, #104]	; (cc50 <FlexCAN_Ip_Send+0x94>)
    cbe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbea:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif
    if (!FlexCAN_IsListenOnlyModeEnabled(base))
    cbec:	9808      	ldr	r0, [sp, #32]
    cbee:	f7ff f8f4 	bl	bdda <FlexCAN_IsListenOnlyModeEnabled>
    cbf2:	4603      	mov	r3, r0
    cbf4:	f083 0301 	eor.w	r3, r3, #1
    cbf8:	b2db      	uxtb	r3, r3
    cbfa:	2b00      	cmp	r3, #0
    cbfc:	d021      	beq.n	cc42 <FlexCAN_Ip_Send+0x86>
    {
        result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    cbfe:	f89d 1016 	ldrb.w	r1, [sp, #22]
    cc02:	f89d 0017 	ldrb.w	r0, [sp, #23]
    cc06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cc08:	9300      	str	r3, [sp, #0]
    cc0a:	9b03      	ldr	r3, [sp, #12]
    cc0c:	9a04      	ldr	r2, [sp, #16]
    cc0e:	f7ff fb4b 	bl	c2a8 <FlexCAN_StartSendData>
    cc12:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        if ((FLEXCAN_STATUS_SUCCESS ==  result) && (FALSE == tx_info->is_polling))
    cc14:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cc16:	2b00      	cmp	r3, #0
    cc18:	d113      	bne.n	cc42 <FlexCAN_Ip_Send+0x86>
    cc1a:	9b04      	ldr	r3, [sp, #16]
    cc1c:	7b1b      	ldrb	r3, [r3, #12]
    cc1e:	f083 0301 	eor.w	r3, r3, #1
    cc22:	b2db      	uxtb	r3, r3
    cc24:	2b00      	cmp	r3, #0
    cc26:	d00c      	beq.n	cc42 <FlexCAN_Ip_Send+0x86>
        {
            /* Enable message buffer interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    cc28:	f89d 2016 	ldrb.w	r2, [sp, #22]
    cc2c:	9b07      	ldr	r3, [sp, #28]
    cc2e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    cc32:	f89d 1017 	ldrb.w	r1, [sp, #23]
    cc36:	9300      	str	r3, [sp, #0]
    cc38:	2301      	movs	r3, #1
    cc3a:	9808      	ldr	r0, [sp, #32]
    cc3c:	f002 f9b6 	bl	efac <FlexCAN_SetMsgBuffIntCmd>
    cc40:	9009      	str	r0, [sp, #36]	; 0x24
        }
#endif
    }
    return result;
    cc42:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    cc44:	4618      	mov	r0, r3
    cc46:	b00b      	add	sp, #44	; 0x2c
    cc48:	f85d fb04 	ldr.w	pc, [sp], #4
    cc4c:	000185f0 	.word	0x000185f0
    cc50:	1fff935c 	.word	0x1fff935c

0000cc54 <FlexCAN_Ip_ConfigRxMb>:
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxMb(uint8 instance,
                                            uint8 mb_idx,
                                            const Flexcan_Ip_DataInfoType * rx_info,
                                            uint32 msg_id
                                           )
{
    cc54:	b500      	push	{lr}
    cc56:	b08b      	sub	sp, #44	; 0x2c
    cc58:	9202      	str	r2, [sp, #8]
    cc5a:	9301      	str	r3, [sp, #4]
    cc5c:	4603      	mov	r3, r0
    cc5e:	f88d 300f 	strb.w	r3, [sp, #15]
    cc62:	460b      	mov	r3, r1
    cc64:	f88d 300e 	strb.w	r3, [sp, #14]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    cc68:	2300      	movs	r3, #0
    cc6a:	9309      	str	r3, [sp, #36]	; 0x24
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    cc6c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc70:	4a19      	ldr	r2, [pc, #100]	; (ccd8 <FlexCAN_Ip_ConfigRxMb+0x84>)
    cc72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc76:	9308      	str	r3, [sp, #32]
    }
    else
    {
#endif
        /* Clear the message buffer flag if previous remained triggered */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    cc78:	f89d 300e 	ldrb.w	r3, [sp, #14]
    cc7c:	4619      	mov	r1, r3
    cc7e:	9808      	ldr	r0, [sp, #32]
    cc80:	f7fe ff2c 	bl	badc <FlexCAN_ClearMsgBuffIntStatusFlag>

        cs.dataLen = rx_info->data_length;
    cc84:	9b02      	ldr	r3, [sp, #8]
    cc86:	685b      	ldr	r3, [r3, #4]
    cc88:	9306      	str	r3, [sp, #24]
        cs.msgIdType = rx_info->msg_id_type;
    cc8a:	9b02      	ldr	r3, [sp, #8]
    cc8c:	681b      	ldr	r3, [r3, #0]
    cc8e:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = rx_info->fd_enable;
    cc90:	9b02      	ldr	r3, [sp, #8]
    cc92:	7a1b      	ldrb	r3, [r3, #8]
    cc94:	f88d 301c 	strb.w	r3, [sp, #28]
    #endif

        /* Initialize rx mb*/
        cs.code = (uint32)FLEXCAN_RX_NOT_USED;
    cc98:	230f      	movs	r3, #15
    cc9a:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    cc9c:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cca0:	aa04      	add	r2, sp, #16
    cca2:	9b01      	ldr	r3, [sp, #4]
    cca4:	9808      	ldr	r0, [sp, #32]
    cca6:	f002 fa25 	bl	f0f4 <FlexCAN_SetRxMsgBuff>

        /* Initialize receive MB*/
        cs.code = (uint32)FLEXCAN_RX_INACTIVE;
    ccaa:	2300      	movs	r3, #0
    ccac:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    ccae:	f89d 100e 	ldrb.w	r1, [sp, #14]
    ccb2:	aa04      	add	r2, sp, #16
    ccb4:	9b01      	ldr	r3, [sp, #4]
    ccb6:	9808      	ldr	r0, [sp, #32]
    ccb8:	f002 fa1c 	bl	f0f4 <FlexCAN_SetRxMsgBuff>

        /* Set up FlexCAN message buffer fields for receiving data*/
        cs.code = (uint32)FLEXCAN_RX_EMPTY;
    ccbc:	2304      	movs	r3, #4
    ccbe:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    ccc0:	f89d 100e 	ldrb.w	r1, [sp, #14]
    ccc4:	aa04      	add	r2, sp, #16
    ccc6:	9b01      	ldr	r3, [sp, #4]
    ccc8:	9808      	ldr	r0, [sp, #32]
    ccca:	f002 fa13 	bl	f0f4 <FlexCAN_SetRxMsgBuff>
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    ccce:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    ccd0:	4618      	mov	r0, r3
    ccd2:	b00b      	add	sp, #44	; 0x2c
    ccd4:	f85d fb04 	ldr.w	pc, [sp], #4
    ccd8:	000185f0 	.word	0x000185f0

0000ccdc <FlexCAN_Ip_Receive>:
Flexcan_Ip_StatusType FlexCAN_Ip_Receive(uint8 instance,
                                         uint8 mb_idx,
                                         Flexcan_Ip_MsgBuffType * data,
                                         boolean isPolling
                                        )
{
    ccdc:	b500      	push	{lr}
    ccde:	b089      	sub	sp, #36	; 0x24
    cce0:	9202      	str	r2, [sp, #8]
    cce2:	461a      	mov	r2, r3
    cce4:	4603      	mov	r3, r0
    cce6:	f88d 300f 	strb.w	r3, [sp, #15]
    ccea:	460b      	mov	r3, r1
    ccec:	f88d 300e 	strb.w	r3, [sp, #14]
    ccf0:	4613      	mov	r3, r2
    ccf2:	f88d 300d 	strb.w	r3, [sp, #13]

    Flexcan_Ip_StatusType result;
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    ccf6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ccfa:	4a18      	ldr	r2, [pc, #96]	; (cd5c <FlexCAN_Ip_Receive+0x80>)
    ccfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd00:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    cd02:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cd06:	4a16      	ldr	r2, [pc, #88]	; (cd60 <FlexCAN_Ip_Receive+0x84>)
    cd08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd0c:	9305      	str	r3, [sp, #20]
#endif
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    #endif

    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    cd0e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cd12:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cd16:	f89d 000f 	ldrb.w	r0, [sp, #15]
    cd1a:	9a02      	ldr	r2, [sp, #8]
    cd1c:	f7ff fa86 	bl	c22c <FlexCAN_StartRxMessageBufferData>
    cd20:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    cd22:	9b07      	ldr	r3, [sp, #28]
    cd24:	2b00      	cmp	r3, #0
    cd26:	d113      	bne.n	cd50 <FlexCAN_Ip_Receive+0x74>
    cd28:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cd2c:	f083 0301 	eor.w	r3, r3, #1
    cd30:	b2db      	uxtb	r3, r3
    cd32:	2b00      	cmp	r3, #0
    cd34:	d00c      	beq.n	cd50 <FlexCAN_Ip_Receive+0x74>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    cd36:	f89d 200e 	ldrb.w	r2, [sp, #14]
    cd3a:	9b05      	ldr	r3, [sp, #20]
    cd3c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    cd40:	f89d 100f 	ldrb.w	r1, [sp, #15]
    cd44:	9300      	str	r3, [sp, #0]
    cd46:	2301      	movs	r3, #1
    cd48:	9806      	ldr	r0, [sp, #24]
    cd4a:	f002 f92f 	bl	efac <FlexCAN_SetMsgBuffIntCmd>
    cd4e:	9007      	str	r0, [sp, #28]
    }
#endif
    return result;
    cd50:	9b07      	ldr	r3, [sp, #28]
}
    cd52:	4618      	mov	r0, r3
    cd54:	b009      	add	sp, #36	; 0x24
    cd56:	f85d fb04 	ldr.w	pc, [sp], #4
    cd5a:	bf00      	nop
    cd5c:	000185f0 	.word	0x000185f0
    cd60:	1fff935c 	.word	0x1fff935c

0000cd64 <FlexCAN_Ip_ReceiveBlocking>:
                                                 uint8 mb_idx,
                                                 Flexcan_Ip_MsgBuffType * data,
                                                 boolean isPolling,
                                                 uint32 u32TimeoutMs
                                                )
{
    cd64:	b500      	push	{lr}
    cd66:	b08b      	sub	sp, #44	; 0x2c
    cd68:	9202      	str	r2, [sp, #8]
    cd6a:	461a      	mov	r2, r3
    cd6c:	4603      	mov	r3, r0
    cd6e:	f88d 300f 	strb.w	r3, [sp, #15]
    cd72:	460b      	mov	r3, r1
    cd74:	f88d 300e 	strb.w	r3, [sp, #14]
    cd78:	4613      	mov	r3, r2
    cd7a:	f88d 300d 	strb.w	r3, [sp, #13]
    Flexcan_Ip_StatusType result;
    uint32 timeStart = 0U;
    cd7e:	2300      	movs	r3, #0
    cd80:	9304      	str	r3, [sp, #16]
    uint32 timeElapsed = 0U;
    cd82:	2300      	movs	r3, #0
    cd84:	9308      	str	r3, [sp, #32]
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    cd86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cd88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cd8c:	fb02 f303 	mul.w	r3, r2, r3
    cd90:	2100      	movs	r1, #0
    cd92:	4618      	mov	r0, r3
    cd94:	f7f5 f8da 	bl	1f4c <OsIf_MicrosToTicks>
    cd98:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    cd9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cd9e:	4a4c      	ldr	r2, [pc, #304]	; (ced0 <FlexCAN_Ip_ReceiveBlocking+0x16c>)
    cda0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cda4:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    cda6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cdaa:	4a4a      	ldr	r2, [pc, #296]	; (ced4 <FlexCAN_Ip_ReceiveBlocking+0x170>)
    cdac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cdb0:	9305      	str	r3, [sp, #20]
#else
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    cdb2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cdb6:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cdba:	f89d 000f 	ldrb.w	r0, [sp, #15]
    cdbe:	9a02      	ldr	r2, [sp, #8]
    cdc0:	f7ff fa34 	bl	c22c <FlexCAN_StartRxMessageBufferData>
    cdc4:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    cdc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cdc8:	2b00      	cmp	r3, #0
    cdca:	d113      	bne.n	cdf4 <FlexCAN_Ip_ReceiveBlocking+0x90>
    cdcc:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cdd0:	f083 0301 	eor.w	r3, r3, #1
    cdd4:	b2db      	uxtb	r3, r3
    cdd6:	2b00      	cmp	r3, #0
    cdd8:	d00c      	beq.n	cdf4 <FlexCAN_Ip_ReceiveBlocking+0x90>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    cdda:	f89d 200e 	ldrb.w	r2, [sp, #14]
    cdde:	9b06      	ldr	r3, [sp, #24]
    cde0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    cde4:	f89d 100f 	ldrb.w	r1, [sp, #15]
    cde8:	9300      	str	r3, [sp, #0]
    cdea:	2301      	movs	r3, #1
    cdec:	9805      	ldr	r0, [sp, #20]
    cdee:	f002 f8dd 	bl	efac <FlexCAN_SetMsgBuffIntCmd>
    cdf2:	9009      	str	r0, [sp, #36]	; 0x24
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    cdf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cdf6:	2b00      	cmp	r3, #0
    cdf8:	d133      	bne.n	ce62 <FlexCAN_Ip_ReceiveBlocking+0xfe>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    cdfa:	2000      	movs	r0, #0
    cdfc:	f7f5 f85a 	bl	1eb4 <OsIf_GetCounter>
    ce00:	4603      	mov	r3, r0
    ce02:	9304      	str	r3, [sp, #16]
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    ce04:	e024      	b.n	ce50 <FlexCAN_Ip_ReceiveBlocking+0xec>
        {
            if (TRUE == isPolling)
    ce06:	f89d 300d 	ldrb.w	r3, [sp, #13]
    ce0a:	2b00      	cmp	r3, #0
    ce0c:	d010      	beq.n	ce30 <FlexCAN_Ip_ReceiveBlocking+0xcc>
            {
                if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    ce0e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ce12:	4619      	mov	r1, r3
    ce14:	9805      	ldr	r0, [sp, #20]
    ce16:	f7fe fe74 	bl	bb02 <FlexCAN_GetBuffStatusFlag>
    ce1a:	4603      	mov	r3, r0
    ce1c:	2b00      	cmp	r3, #0
    ce1e:	d007      	beq.n	ce30 <FlexCAN_Ip_ReceiveBlocking+0xcc>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    ce20:	f89d 200e 	ldrb.w	r2, [sp, #14]
    ce24:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ce28:	4611      	mov	r1, r2
    ce2a:	4618      	mov	r0, r3
    ce2c:	f7ff fb20 	bl	c470 <FlexCAN_IRQHandlerRxMB>
                }
            }
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ce30:	ab04      	add	r3, sp, #16
    ce32:	2100      	movs	r1, #0
    ce34:	4618      	mov	r0, r3
    ce36:	f7f5 f856 	bl	1ee6 <OsIf_GetElapsed>
    ce3a:	4602      	mov	r2, r0
    ce3c:	9b08      	ldr	r3, [sp, #32]
    ce3e:	4413      	add	r3, r2
    ce40:	9308      	str	r3, [sp, #32]
            if (timeElapsed >= mS2Ticks)
    ce42:	9a08      	ldr	r2, [sp, #32]
    ce44:	9b07      	ldr	r3, [sp, #28]
    ce46:	429a      	cmp	r2, r3
    ce48:	d302      	bcc.n	ce50 <FlexCAN_Ip_ReceiveBlocking+0xec>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    ce4a:	2303      	movs	r3, #3
    ce4c:	9309      	str	r3, [sp, #36]	; 0x24
                break;
    ce4e:	e008      	b.n	ce62 <FlexCAN_Ip_ReceiveBlocking+0xfe>
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    ce50:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ce54:	9a06      	ldr	r2, [sp, #24]
    ce56:	011b      	lsls	r3, r3, #4
    ce58:	4413      	add	r3, r2
    ce5a:	3304      	adds	r3, #4
    ce5c:	681b      	ldr	r3, [r3, #0]
    ce5e:	2b01      	cmp	r3, #1
    ce60:	d0d1      	beq.n	ce06 <FlexCAN_Ip_ReceiveBlocking+0xa2>
            }
        }
    }

    if ((FLEXCAN_STATUS_TIMEOUT == result) && (FALSE == isPolling))
    ce62:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ce64:	2b03      	cmp	r3, #3
    ce66:	d112      	bne.n	ce8e <FlexCAN_Ip_ReceiveBlocking+0x12a>
    ce68:	f89d 300d 	ldrb.w	r3, [sp, #13]
    ce6c:	f083 0301 	eor.w	r3, r3, #1
    ce70:	b2db      	uxtb	r3, r3
    ce72:	2b00      	cmp	r3, #0
    ce74:	d00b      	beq.n	ce8e <FlexCAN_Ip_ReceiveBlocking+0x12a>
    {
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        /* Disable Mb interrupt*/
       (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    ce76:	f89d 200e 	ldrb.w	r2, [sp, #14]
    ce7a:	9b06      	ldr	r3, [sp, #24]
    ce7c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    ce80:	f89d 100f 	ldrb.w	r1, [sp, #15]
    ce84:	9300      	str	r3, [sp, #0]
    ce86:	2300      	movs	r3, #0
    ce88:	9805      	ldr	r0, [sp, #20]
    ce8a:	f002 f88f 	bl	efac <FlexCAN_SetMsgBuffIntCmd>
#endif
    }

    if ((FLEXCAN_STATUS_BUFF_OUT_OF_RANGE != result) && (FLEXCAN_STATUS_BUSY != result))
    ce8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ce90:	2b04      	cmp	r3, #4
    ce92:	d018      	beq.n	cec6 <FlexCAN_Ip_ReceiveBlocking+0x162>
    ce94:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ce96:	2b02      	cmp	r3, #2
    ce98:	d015      	beq.n	cec6 <FlexCAN_Ip_ReceiveBlocking+0x162>
    {
        if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state))
    ce9a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ce9e:	9a06      	ldr	r2, [sp, #24]
    cea0:	011b      	lsls	r3, r3, #4
    cea2:	4413      	add	r3, r2
    cea4:	3304      	adds	r3, #4
    cea6:	681b      	ldr	r3, [r3, #0]
    cea8:	2b00      	cmp	r3, #0
    ceaa:	d102      	bne.n	ceb2 <FlexCAN_Ip_ReceiveBlocking+0x14e>
        {
            result = FLEXCAN_STATUS_SUCCESS;
    ceac:	2300      	movs	r3, #0
    ceae:	9309      	str	r3, [sp, #36]	; 0x24
    ceb0:	e009      	b.n	cec6 <FlexCAN_Ip_ReceiveBlocking+0x162>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    ceb2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ceb6:	9a06      	ldr	r2, [sp, #24]
    ceb8:	011b      	lsls	r3, r3, #4
    ceba:	4413      	add	r3, r2
    cebc:	3304      	adds	r3, #4
    cebe:	2200      	movs	r2, #0
    cec0:	601a      	str	r2, [r3, #0]
            result = FLEXCAN_STATUS_TIMEOUT;
    cec2:	2303      	movs	r3, #3
    cec4:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    return result;
    cec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    cec8:	4618      	mov	r0, r3
    ceca:	b00b      	add	sp, #44	; 0x2c
    cecc:	f85d fb04 	ldr.w	pc, [sp], #4
    ced0:	1fff935c 	.word	0x1fff935c
    ced4:	000185f0 	.word	0x000185f0

0000ced8 <FlexCAN_Ip_RxFifo>:
 * after the frame was received and read into the specified buffer.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_RxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifo(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    ced8:	b500      	push	{lr}
    ceda:	b085      	sub	sp, #20
    cedc:	4603      	mov	r3, r0
    cede:	9100      	str	r1, [sp, #0]
    cee0:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    cee4:	2300      	movs	r3, #0
    cee6:	9303      	str	r3, [sp, #12]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    cee8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ceec:	9900      	ldr	r1, [sp, #0]
    ceee:	4618      	mov	r0, r3
    cef0:	f7ff fa5e 	bl	c3b0 <FlexCAN_StartRxMessageFifoData>
    cef4:	9003      	str	r0, [sp, #12]
    }
    return result;
    cef6:	9b03      	ldr	r3, [sp, #12]
}
    cef8:	4618      	mov	r0, r3
    cefa:	b005      	add	sp, #20
    cefc:	f85d fb04 	ldr.w	pc, [sp], #4

0000cf00 <FlexCAN_Ip_RxFifoBlocking>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_RxFifoBlocking_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifoBlocking(uint8 instance, Flexcan_Ip_MsgBuffType *data, uint32 timeout)
{
    cf00:	b500      	push	{lr}
    cf02:	b087      	sub	sp, #28
    cf04:	4603      	mov	r3, r0
    cf06:	9102      	str	r1, [sp, #8]
    cf08:	9201      	str	r2, [sp, #4]
    cf0a:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    cf0e:	2300      	movs	r3, #0
    cf10:	9305      	str	r3, [sp, #20]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    cf12:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cf16:	9902      	ldr	r1, [sp, #8]
    cf18:	4618      	mov	r0, r3
    cf1a:	f7ff fa49 	bl	c3b0 <FlexCAN_StartRxMessageFifoData>
    cf1e:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == result)
    cf20:	9b05      	ldr	r3, [sp, #20]
    cf22:	2b00      	cmp	r3, #0
    cf24:	d106      	bne.n	cf34 <FlexCAN_Ip_RxFifoBlocking+0x34>
        {
            result = FlexCAN_ProccessLegacyRxFIFO(instance, timeout);
    cf26:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cf2a:	9901      	ldr	r1, [sp, #4]
    cf2c:	4618      	mov	r0, r3
    cf2e:	f7ff f8e2 	bl	c0f6 <FlexCAN_ProccessLegacyRxFIFO>
    cf32:	9005      	str	r0, [sp, #20]
        }
    }
    return result;
    cf34:	9b05      	ldr	r3, [sp, #20]
}
    cf36:	4618      	mov	r0, r3
    cf38:	b007      	add	sp, #28
    cf3a:	f85d fb04 	ldr.w	pc, [sp], #4

0000cf3e <FlexCAN_Ip_ConfigRxFifo_Privileged>:
/* implements FlexCAN_Ip_ConfigRxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxFifo_Privileged(uint8 instance,
                                                         Flexcan_Ip_RxFifoIdElementFormatType id_format,
                                                         const Flexcan_Ip_IdTableType * id_filter_table
                                                        )
{
    cf3e:	b500      	push	{lr}
    cf40:	b089      	sub	sp, #36	; 0x24
    cf42:	4603      	mov	r3, r0
    cf44:	9102      	str	r1, [sp, #8]
    cf46:	9201      	str	r2, [sp, #4]
    cf48:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    cf4c:	2300      	movs	r3, #0
    cf4e:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    cf50:	2300      	movs	r3, #0
    cf52:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    cf54:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cf58:	4a1c      	ldr	r2, [pc, #112]	; (cfcc <FlexCAN_Ip_ConfigRxFifo_Privileged+0x8e>)
    cf5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf5e:	9305      	str	r3, [sp, #20]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    cf60:	9805      	ldr	r0, [sp, #20]
    cf62:	f7fe fd61 	bl	ba28 <FlexCAN_IsEnabled>
    cf66:	4603      	mov	r3, r0
    cf68:	2b00      	cmp	r3, #0
    cf6a:	bf14      	ite	ne
    cf6c:	2301      	movne	r3, #1
    cf6e:	2300      	moveq	r3, #0
    cf70:	b2db      	uxtb	r3, r3
    cf72:	f083 0301 	eor.w	r3, r3, #1
    cf76:	b2db      	uxtb	r3, r3
    cf78:	f88d 3013 	strb.w	r3, [sp, #19]
    cf7c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    cf80:	f003 0301 	and.w	r3, r3, #1
    cf84:	f88d 3013 	strb.w	r3, [sp, #19]

    if (TRUE == disabled)
    cf88:	f89d 3013 	ldrb.w	r3, [sp, #19]
    cf8c:	2b00      	cmp	r3, #0
    cf8e:	d003      	beq.n	cf98 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x5a>
    {
        result = FlexCAN_Enable(pBase);
    cf90:	9805      	ldr	r0, [sp, #20]
    cf92:	f001 fd6b 	bl	ea6c <FlexCAN_Enable>
    cf96:	9007      	str	r0, [sp, #28]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    cf98:	9b07      	ldr	r3, [sp, #28]
    cf9a:	2b00      	cmp	r3, #0
    cf9c:	d104      	bne.n	cfa8 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x6a>
    {
        /* Initialize rx fifo*/
        FlexCAN_SetRxFifoFilter(pBase, id_format, id_filter_table);
    cf9e:	9a01      	ldr	r2, [sp, #4]
    cfa0:	9902      	ldr	r1, [sp, #8]
    cfa2:	9805      	ldr	r0, [sp, #20]
    cfa4:	f002 fba5 	bl	f6f2 <FlexCAN_SetRxFifoFilter>
    }

    if (TRUE == disabled)
    cfa8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    cfac:	2b00      	cmp	r3, #0
    cfae:	d008      	beq.n	cfc2 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
    {
        status = FlexCAN_Disable(pBase);
    cfb0:	9805      	ldr	r0, [sp, #20]
    cfb2:	f001 fdd9 	bl	eb68 <FlexCAN_Disable>
    cfb6:	9006      	str	r0, [sp, #24]
        if (FLEXCAN_STATUS_SUCCESS != status)
    cfb8:	9b06      	ldr	r3, [sp, #24]
    cfba:	2b00      	cmp	r3, #0
    cfbc:	d001      	beq.n	cfc2 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
        {
            result = status;
    cfbe:	9b06      	ldr	r3, [sp, #24]
    cfc0:	9307      	str	r3, [sp, #28]
        }
    }

    return result;
    cfc2:	9b07      	ldr	r3, [sp, #28]
}
    cfc4:	4618      	mov	r0, r3
    cfc6:	b009      	add	sp, #36	; 0x24
    cfc8:	f85d fb04 	ldr.w	pc, [sp], #4
    cfcc:	000185f0 	.word	0x000185f0

0000cfd0 <FlexCAN_Ip_ConfigRemoteResponseMb>:
                                                        uint8 mb_idx,
                                                        const Flexcan_Ip_DataInfoType *tx_info,
                                                        uint32 msg_id,
                                                        const uint8 *mb_data
                                                       )
{
    cfd0:	b500      	push	{lr}
    cfd2:	b08f      	sub	sp, #60	; 0x3c
    cfd4:	9204      	str	r2, [sp, #16]
    cfd6:	9303      	str	r3, [sp, #12]
    cfd8:	4603      	mov	r3, r0
    cfda:	f88d 3017 	strb.w	r3, [sp, #23]
    cfde:	460b      	mov	r3, r1
    cfe0:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    cfe4:	2300      	movs	r3, #0
    cfe6:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    cfe8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cfec:	4a27      	ldr	r2, [pc, #156]	; (d08c <FlexCAN_Ip_ConfigRemoteResponseMb+0xbc>)
    cfee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cff2:	930c      	str	r3, [sp, #48]	; 0x30
    const Flexcan_Ip_StateType * const state = Flexcan_Ip_apxState[instance];
    cff4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cff8:	4a25      	ldr	r2, [pc, #148]	; (d090 <FlexCAN_Ip_ConfigRemoteResponseMb+0xc0>)
    cffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cffe:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    d000:	2300      	movs	r3, #0
    d002:	930a      	str	r3, [sp, #40]	; 0x28
    if (TRUE == FlexCAN_IsMbOutOfRange(pBase, mb_idx, state->bIsLegacyFifoEn, state->u32MaxMbNum))
    {
        result = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    d004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d006:	2b00      	cmp	r3, #0
    d008:	d13a      	bne.n	d080 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
    {
        /* Initialize transmit mb*/
        cs.dataLen = tx_info->data_length;
    d00a:	9b04      	ldr	r3, [sp, #16]
    d00c:	685b      	ldr	r3, [r3, #4]
    d00e:	9308      	str	r3, [sp, #32]
        cs.msgIdType = tx_info->msg_id_type;
    d010:	9b04      	ldr	r3, [sp, #16]
    d012:	681b      	ldr	r3, [r3, #0]
    d014:	9307      	str	r3, [sp, #28]
        cs.code = (uint32)FLEXCAN_RX_RANSWER;
    d016:	230a      	movs	r3, #10
    d018:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = FALSE;
    d01a:	2300      	movs	r3, #0
    d01c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        cs.enable_brs = FALSE;
    d020:	2300      	movs	r3, #0
    d022:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        cs.fd_padding = 0x00U;
    d026:	2300      	movs	r3, #0
    d028:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
#endif
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    d02c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d030:	4619      	mov	r1, r3
    d032:	980c      	ldr	r0, [sp, #48]	; 0x30
    d034:	f7fe fd52 	bl	badc <FlexCAN_ClearMsgBuffIntStatusFlag>
        pMbAddr = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    d038:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d03c:	4619      	mov	r1, r3
    d03e:	980c      	ldr	r0, [sp, #48]	; 0x30
    d040:	f001 fc2c 	bl	e89c <FlexCAN_GetMsgBuffRegion>
    d044:	900a      	str	r0, [sp, #40]	; 0x28
        FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, tx_info->is_remote);
    d046:	9b04      	ldr	r3, [sp, #16]
    d048:	7adb      	ldrb	r3, [r3, #11]
    d04a:	a906      	add	r1, sp, #24
    d04c:	9300      	str	r3, [sp, #0]
    d04e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d050:	9a03      	ldr	r2, [sp, #12]
    d052:	980a      	ldr	r0, [sp, #40]	; 0x28
    d054:	f002 f974 	bl	f340 <FlexCAN_SetTxMsgBuff>
        if (FALSE == tx_info->is_polling)
    d058:	9b04      	ldr	r3, [sp, #16]
    d05a:	7b1b      	ldrb	r3, [r3, #12]
    d05c:	f083 0301 	eor.w	r3, r3, #1
    d060:	b2db      	uxtb	r3, r3
    d062:	2b00      	cmp	r3, #0
    d064:	d00c      	beq.n	d080 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
        {
            /* Enable MB interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(pBase, instance, mb_idx, TRUE, state->isIntActive);
    d066:	f89d 2016 	ldrb.w	r2, [sp, #22]
    d06a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d06c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    d070:	f89d 1017 	ldrb.w	r1, [sp, #23]
    d074:	9300      	str	r3, [sp, #0]
    d076:	2301      	movs	r3, #1
    d078:	980c      	ldr	r0, [sp, #48]	; 0x30
    d07a:	f001 ff97 	bl	efac <FlexCAN_SetMsgBuffIntCmd>
    d07e:	900d      	str	r0, [sp, #52]	; 0x34
        }
    }
    return result;
    d080:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    d082:	4618      	mov	r0, r3
    d084:	b00f      	add	sp, #60	; 0x3c
    d086:	f85d fb04 	ldr.w	pc, [sp], #4
    d08a:	bf00      	nop
    d08c:	000185f0 	.word	0x000185f0
    d090:	1fff935c 	.word	0x1fff935c

0000d094 <FlexCAN_Ip_GetTransferStatus>:
 * or complete (success). In case Enhanced Rx Fifo, mb_idx will be 255.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetTransferStatus_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_GetTransferStatus(uint8 instance, uint8 mb_idx)
{
    d094:	b084      	sub	sp, #16
    d096:	4603      	mov	r3, r0
    d098:	460a      	mov	r2, r1
    d09a:	f88d 3007 	strb.w	r3, [sp, #7]
    d09e:	4613      	mov	r3, r2
    d0a0:	f88d 3006 	strb.w	r3, [sp, #6]

    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d0a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d0a8:	4a0d      	ldr	r2, [pc, #52]	; (d0e0 <FlexCAN_Ip_GetTransferStatus+0x4c>)
    d0aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0ae:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_ERROR;
    d0b0:	2301      	movs	r3, #1
    d0b2:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
#endif

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    d0b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d0b8:	2b1f      	cmp	r3, #31
    d0ba:	d80d      	bhi.n	d0d8 <FlexCAN_Ip_GetTransferStatus+0x44>
    {
        if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    d0bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d0c0:	9a02      	ldr	r2, [sp, #8]
    d0c2:	011b      	lsls	r3, r3, #4
    d0c4:	4413      	add	r3, r2
    d0c6:	3304      	adds	r3, #4
    d0c8:	681b      	ldr	r3, [r3, #0]
    d0ca:	2b00      	cmp	r3, #0
    d0cc:	d102      	bne.n	d0d4 <FlexCAN_Ip_GetTransferStatus+0x40>
        {
            status = FLEXCAN_STATUS_SUCCESS;
    d0ce:	2300      	movs	r3, #0
    d0d0:	9303      	str	r3, [sp, #12]
    d0d2:	e001      	b.n	d0d8 <FlexCAN_Ip_GetTransferStatus+0x44>
            status = FLEXCAN_STATUS_ERROR;
        }
#endif
        else
        {
            status = FLEXCAN_STATUS_BUSY;
    d0d4:	2302      	movs	r3, #2
    d0d6:	9303      	str	r3, [sp, #12]
            status = FLEXCAN_STATUS_BUSY;
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return status;
    d0d8:	9b03      	ldr	r3, [sp, #12]
}
    d0da:	4618      	mov	r0, r3
    d0dc:	b004      	add	sp, #16
    d0de:	4770      	bx	lr
    d0e0:	1fff935c 	.word	0x1fff935c

0000d0e4 <FlexCAN_CompleteRxMessageFifoData>:
 * data and disabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_CompleteRxMessageFifoData(uint8 instance)
{
    d0e4:	b500      	push	{lr}
    d0e6:	b087      	sub	sp, #28
    d0e8:	4603      	mov	r3, r0
    d0ea:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d0ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d0f2:	4a1d      	ldr	r2, [pc, #116]	; (d168 <FlexCAN_CompleteRxMessageFifoData+0x84>)
    d0f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0f8:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d0fa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d0fe:	4a1b      	ldr	r2, [pc, #108]	; (d16c <FlexCAN_CompleteRxMessageFifoData+0x88>)
    d100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d104:	9304      	str	r3, [sp, #16]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    d106:	9b04      	ldr	r3, [sp, #16]
    d108:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    d10c:	2b00      	cmp	r3, #0
    d10e:	d120      	bne.n	d152 <FlexCAN_CompleteRxMessageFifoData+0x6e>
    {
        /* Disable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, state->isIntActive);
    d110:	9b04      	ldr	r3, [sp, #16]
    d112:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    d116:	f89d 100f 	ldrb.w	r1, [sp, #15]
    d11a:	9300      	str	r3, [sp, #0]
    d11c:	2300      	movs	r3, #0
    d11e:	2205      	movs	r2, #5
    d120:	9805      	ldr	r0, [sp, #20]
    d122:	f001 ff43 	bl	efac <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, state->isIntActive);
    d126:	9b04      	ldr	r3, [sp, #16]
    d128:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    d12c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    d130:	9300      	str	r3, [sp, #0]
    d132:	2300      	movs	r3, #0
    d134:	2206      	movs	r2, #6
    d136:	9805      	ldr	r0, [sp, #20]
    d138:	f001 ff38 	bl	efac <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, state->isIntActive);
    d13c:	9b04      	ldr	r3, [sp, #16]
    d13e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    d142:	f89d 100f 	ldrb.w	r1, [sp, #15]
    d146:	9300      	str	r3, [sp, #0]
    d148:	2300      	movs	r3, #0
    d14a:	2207      	movs	r2, #7
    d14c:	9805      	ldr	r0, [sp, #20]
    d14e:	f001 ff2d 	bl	efac <FlexCAN_SetMsgBuffIntCmd>
    {
        /* do nothing when transferType is POLLING */
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    /* Clear fifo message*/
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = NULL_PTR;
    d152:	9b04      	ldr	r3, [sp, #16]
    d154:	2200      	movs	r2, #0
    d156:	601a      	str	r2, [r3, #0]
            state->callback(instance, FLEXCAN_EVENT_DMA_ERROR, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
        }
    }

#else
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    d158:	9b04      	ldr	r3, [sp, #16]
    d15a:	2200      	movs	r2, #0
    d15c:	605a      	str	r2, [r3, #4]
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
}
    d15e:	bf00      	nop
    d160:	b007      	add	sp, #28
    d162:	f85d fb04 	ldr.w	pc, [sp], #4
    d166:	bf00      	nop
    d168:	000185f0 	.word	0x000185f0
    d16c:	1fff935c 	.word	0x1fff935c

0000d170 <FlexCAN_IRQHandler>:
    uint32 endMbIdx
    #if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    ,boolean bEnhancedFifoExisted
    #endif
)
{
    d170:	b500      	push	{lr}
    d172:	b08b      	sub	sp, #44	; 0x2c
    d174:	4603      	mov	r3, r0
    d176:	9102      	str	r1, [sp, #8]
    d178:	9201      	str	r2, [sp, #4]
    d17a:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32MbHandle = 0U;
    d17e:	2300      	movs	r3, #0
    d180:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 flag_reg = 0;
    d182:	2300      	movs	r3, #0
    d184:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d186:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d18a:	4a3f      	ldr	r2, [pc, #252]	; (d288 <FlexCAN_IRQHandler+0x118>)
    d18c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d190:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d192:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d196:	4a3d      	ldr	r2, [pc, #244]	; (d28c <FlexCAN_IRQHandler+0x11c>)
    d198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d19c:	9305      	str	r3, [sp, #20]

    /* Get the interrupts that are enabled and ready */
    uint32 mb_idx = endMbIdx;
    d19e:	9b01      	ldr	r3, [sp, #4]
    d1a0:	9307      	str	r3, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(endMbIdx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM);
#endif
    /* Check if instance initialized */
    if (NULL_PTR != state)
    d1a2:	9b05      	ldr	r3, [sp, #20]
    d1a4:	2b00      	cmp	r3, #0
    d1a6:	d05c      	beq.n	d262 <FlexCAN_IRQHandler+0xf2>
    {
        flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    d1a8:	9907      	ldr	r1, [sp, #28]
    d1aa:	9806      	ldr	r0, [sp, #24]
    d1ac:	f7fe fe47 	bl	be3e <FlexCAN_GetMsgBuffIntStatusFlag>
    d1b0:	4603      	mov	r3, r0
    d1b2:	9308      	str	r3, [sp, #32]

        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    d1b4:	e008      	b.n	d1c8 <FlexCAN_IRQHandler+0x58>
        {
            mb_idx--;
    d1b6:	9b07      	ldr	r3, [sp, #28]
    d1b8:	3b01      	subs	r3, #1
    d1ba:	9307      	str	r3, [sp, #28]
            flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    d1bc:	9907      	ldr	r1, [sp, #28]
    d1be:	9806      	ldr	r0, [sp, #24]
    d1c0:	f7fe fe3d 	bl	be3e <FlexCAN_GetMsgBuffIntStatusFlag>
    d1c4:	4603      	mov	r3, r0
    d1c6:	9308      	str	r3, [sp, #32]
        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    d1c8:	9b08      	ldr	r3, [sp, #32]
    d1ca:	2b00      	cmp	r3, #0
    d1cc:	d103      	bne.n	d1d6 <FlexCAN_IRQHandler+0x66>
    d1ce:	9a07      	ldr	r2, [sp, #28]
    d1d0:	9b02      	ldr	r3, [sp, #8]
    d1d2:	429a      	cmp	r2, r3
    d1d4:	d8ef      	bhi.n	d1b6 <FlexCAN_IRQHandler+0x46>
        }

        /* Check Tx/Rx interrupt flag and clear the interrupt */
        if (flag_reg != 0U)
    d1d6:	9b08      	ldr	r3, [sp, #32]
    d1d8:	2b00      	cmp	r3, #0
    d1da:	d050      	beq.n	d27e <FlexCAN_IRQHandler+0x10e>
        {
            /* For legacy fifo, mb handler is FLEXCAN_IP_MB_HANDLE_RXFIFO(0) */
            u32MbHandle = mb_idx;
    d1dc:	9b07      	ldr	r3, [sp, #28]
    d1de:	9309      	str	r3, [sp, #36]	; 0x24

            if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    d1e0:	9b05      	ldr	r3, [sp, #20]
    d1e2:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    d1e6:	2b00      	cmp	r3, #0
    d1e8:	d00b      	beq.n	d202 <FlexCAN_IRQHandler+0x92>
    d1ea:	9b07      	ldr	r3, [sp, #28]
    d1ec:	2b07      	cmp	r3, #7
    d1ee:	d808      	bhi.n	d202 <FlexCAN_IRQHandler+0x92>
            {
                FlexCAN_IRQHandlerRxFIFO(instance, mb_idx);
    d1f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d1f4:	9907      	ldr	r1, [sp, #28]
    d1f6:	4618      	mov	r0, r3
    d1f8:	f7ff fac2 	bl	c780 <FlexCAN_IRQHandlerRxFIFO>
                u32MbHandle = (uint32)FLEXCAN_IP_MB_HANDLE_RXFIFO;
    d1fc:	2300      	movs	r3, #0
    d1fe:	9309      	str	r3, [sp, #36]	; 0x24
    d200:	e00d      	b.n	d21e <FlexCAN_IRQHandler+0xae>
            }
            else
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[u32MbHandle].state)
    d202:	9a05      	ldr	r2, [sp, #20]
    d204:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d206:	011b      	lsls	r3, r3, #4
    d208:	4413      	add	r3, r2
    d20a:	3304      	adds	r3, #4
    d20c:	681b      	ldr	r3, [r3, #0]
    d20e:	2b01      	cmp	r3, #1
    d210:	d105      	bne.n	d21e <FlexCAN_IRQHandler+0xae>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    d212:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d216:	9907      	ldr	r1, [sp, #28]
    d218:	4618      	mov	r0, r3
    d21a:	f7ff f929 	bl	c470 <FlexCAN_IRQHandlerRxMB>
                }
            }

            /* Check mailbox completed transmission */
            if (FLEXCAN_MB_TX_BUSY == state->mbs[u32MbHandle].state)
    d21e:	9a05      	ldr	r2, [sp, #20]
    d220:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d222:	011b      	lsls	r3, r3, #4
    d224:	4413      	add	r3, r2
    d226:	3304      	adds	r3, #4
    d228:	681b      	ldr	r3, [r3, #0]
    d22a:	2b02      	cmp	r3, #2
    d22c:	d105      	bne.n	d23a <FlexCAN_IRQHandler+0xca>
            {
                FlexCAN_IRQHandlerTxMB(instance, mb_idx);
    d22e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d232:	9907      	ldr	r1, [sp, #28]
    d234:	4618      	mov	r0, r3
    d236:	f7ff fa09 	bl	c64c <FlexCAN_IRQHandlerTxMB>
            }

            /* Check for spurious interrupt */
            if (FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx) != 0U)
    d23a:	9907      	ldr	r1, [sp, #28]
    d23c:	9806      	ldr	r0, [sp, #24]
    d23e:	f7fe fdfe 	bl	be3e <FlexCAN_GetMsgBuffIntStatusFlag>
    d242:	4603      	mov	r3, r0
    d244:	2b00      	cmp	r3, #0
    d246:	d01a      	beq.n	d27e <FlexCAN_IRQHandler+0x10e>
            {
                if (state->mbs[u32MbHandle].state == FLEXCAN_MB_IDLE)
    d248:	9a05      	ldr	r2, [sp, #20]
    d24a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d24c:	011b      	lsls	r3, r3, #4
    d24e:	4413      	add	r3, r2
    d250:	3304      	adds	r3, #4
    d252:	681b      	ldr	r3, [r3, #0]
    d254:	2b00      	cmp	r3, #0
    d256:	d112      	bne.n	d27e <FlexCAN_IRQHandler+0x10e>
                {
                    /* In case of desynchronized status of the MB to avoid trapping in ISR
                    * clear the MB flag */
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    d258:	9907      	ldr	r1, [sp, #28]
    d25a:	9806      	ldr	r0, [sp, #24]
    d25c:	f7fe fc3e 	bl	badc <FlexCAN_ClearMsgBuffIntStatusFlag>
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_UNDERFLOW);
        }
    #endif /* End of (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    }
}
    d260:	e00d      	b.n	d27e <FlexCAN_IRQHandler+0x10e>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    d262:	9b02      	ldr	r3, [sp, #8]
    d264:	9307      	str	r3, [sp, #28]
    d266:	e006      	b.n	d276 <FlexCAN_IRQHandler+0x106>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    d268:	9907      	ldr	r1, [sp, #28]
    d26a:	9806      	ldr	r0, [sp, #24]
    d26c:	f7fe fc36 	bl	badc <FlexCAN_ClearMsgBuffIntStatusFlag>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    d270:	9b07      	ldr	r3, [sp, #28]
    d272:	3301      	adds	r3, #1
    d274:	9307      	str	r3, [sp, #28]
    d276:	9a07      	ldr	r2, [sp, #28]
    d278:	9b01      	ldr	r3, [sp, #4]
    d27a:	429a      	cmp	r2, r3
    d27c:	d9f4      	bls.n	d268 <FlexCAN_IRQHandler+0xf8>
}
    d27e:	bf00      	nop
    d280:	b00b      	add	sp, #44	; 0x2c
    d282:	f85d fb04 	ldr.w	pc, [sp], #4
    d286:	bf00      	nop
    d288:	000185f0 	.word	0x000185f0
    d28c:	1fff935c 	.word	0x1fff935c

0000d290 <FlexCAN_Ip_ClearErrorStatus>:
 *                 transmission of a CAN frame.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearErrorStatus_Activity */
void FlexCAN_Ip_ClearErrorStatus(uint8 instance, uint32 error)
{
    d290:	b084      	sub	sp, #16
    d292:	4603      	mov	r3, r0
    d294:	9100      	str	r1, [sp, #0]
    d296:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d29a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d29e:	4a05      	ldr	r2, [pc, #20]	; (d2b4 <FlexCAN_Ip_ClearErrorStatus+0x24>)
    d2a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2a4:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base->ESR1 = error;
    d2a6:	9b03      	ldr	r3, [sp, #12]
    d2a8:	9a00      	ldr	r2, [sp, #0]
    d2aa:	621a      	str	r2, [r3, #32]
}
    d2ac:	bf00      	nop
    d2ae:	b004      	add	sp, #16
    d2b0:	4770      	bx	lr
    d2b2:	bf00      	nop
    d2b4:	000185f0 	.word	0x000185f0

0000d2b8 <FlexCAN_Ip_GetErrorStatus>:
 *                 transmission of a CAN frame and some general status of the device.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetErrorStatus_Activity */
uint32 FlexCAN_Ip_GetErrorStatus(uint8 instance)
{
    d2b8:	b084      	sub	sp, #16
    d2ba:	4603      	mov	r3, r0
    d2bc:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d2c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d2c4:	4a04      	ldr	r2, [pc, #16]	; (d2d8 <FlexCAN_Ip_GetErrorStatus+0x20>)
    d2c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2ca:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint32)(base->ESR1);
    d2cc:	9b03      	ldr	r3, [sp, #12]
    d2ce:	6a1b      	ldr	r3, [r3, #32]
}
    d2d0:	4618      	mov	r0, r3
    d2d2:	b004      	add	sp, #16
    d2d4:	4770      	bx	lr
    d2d6:	bf00      	nop
    d2d8:	000185f0 	.word	0x000185f0

0000d2dc <FlexCAN_Ip_GetControllerTxErrorCounter>:
 *                 transmitted messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerTxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerTxErrorCounter(uint8 instance)
{
    d2dc:	b084      	sub	sp, #16
    d2de:	4603      	mov	r3, r0
    d2e0:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d2e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d2e8:	4a04      	ldr	r2, [pc, #16]	; (d2fc <FlexCAN_Ip_GetControllerTxErrorCounter+0x20>)
    d2ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2ee:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_TXERRCNT_MASK) >> FLEXCAN_ECR_TXERRCNT_SHIFT);
    d2f0:	9b03      	ldr	r3, [sp, #12]
    d2f2:	69db      	ldr	r3, [r3, #28]
    d2f4:	b2db      	uxtb	r3, r3
}
    d2f6:	4618      	mov	r0, r3
    d2f8:	b004      	add	sp, #16
    d2fa:	4770      	bx	lr
    d2fc:	000185f0 	.word	0x000185f0

0000d300 <FlexCAN_Ip_GetControllerRxErrorCounter>:
 *                 received messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerRxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerRxErrorCounter(uint8 instance)
{
    d300:	b084      	sub	sp, #16
    d302:	4603      	mov	r3, r0
    d304:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d308:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d30c:	4a05      	ldr	r2, [pc, #20]	; (d324 <FlexCAN_Ip_GetControllerRxErrorCounter+0x24>)
    d30e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d312:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_RXERRCNT_MASK) >> FLEXCAN_ECR_RXERRCNT_SHIFT);
    d314:	9b03      	ldr	r3, [sp, #12]
    d316:	69db      	ldr	r3, [r3, #28]
    d318:	0a1b      	lsrs	r3, r3, #8
    d31a:	b2db      	uxtb	r3, r3
}
    d31c:	4618      	mov	r0, r3
    d31e:	b004      	add	sp, #16
    d320:	4770      	bx	lr
    d322:	bf00      	nop
    d324:	000185f0 	.word	0x000185f0

0000d328 <FlexCAN_Error_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements  CAN_X_ERROR_ISR_Activity */
void FlexCAN_Error_IRQHandler(uint8 instance)
{
    d328:	b510      	push	{r4, lr}
    d32a:	b086      	sub	sp, #24
    d32c:	4603      	mov	r3, r0
    d32e:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    d332:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d336:	4a29      	ldr	r2, [pc, #164]	; (d3dc <FlexCAN_Error_IRQHandler+0xb4>)
    d338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d33c:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d33e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d342:	4a27      	ldr	r2, [pc, #156]	; (d3e0 <FlexCAN_Error_IRQHandler+0xb8>)
    d344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d348:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    d34a:	2300      	movs	r3, #0
    d34c:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check if the instance initialized */
    if (NULL_PTR != state)
    d34e:	9b03      	ldr	r3, [sp, #12]
    d350:	2b00      	cmp	r3, #0
    d352:	d03d      	beq.n	d3d0 <FlexCAN_Error_IRQHandler+0xa8>
    {
        /* Get error status to get value updated */
        u32ErrStatus = pBase->ESR1;
    d354:	9b04      	ldr	r3, [sp, #16]
    d356:	6a1b      	ldr	r3, [r3, #32]
    d358:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_MASK))) && ((uint32)0U != (pBase->CTRL1 & ((uint32)FLEXCAN_CTRL1_ERRMSK_MASK))))
    d35a:	9b05      	ldr	r3, [sp, #20]
    d35c:	f003 0302 	and.w	r3, r3, #2
    d360:	2b00      	cmp	r3, #0
    d362:	d019      	beq.n	d398 <FlexCAN_Error_IRQHandler+0x70>
    d364:	9b04      	ldr	r3, [sp, #16]
    d366:	685b      	ldr	r3, [r3, #4]
    d368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    d36c:	2b00      	cmp	r3, #0
    d36e:	d013      	beq.n	d398 <FlexCAN_Error_IRQHandler+0x70>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_MASK;
    d370:	9b04      	ldr	r3, [sp, #16]
    d372:	2202      	movs	r2, #2
    d374:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d376:	9b03      	ldr	r3, [sp, #12]
    d378:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d37c:	2b00      	cmp	r3, #0
    d37e:	d00b      	beq.n	d398 <FlexCAN_Error_IRQHandler+0x70>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR, u32ErrStatus, state);
    d380:	9b03      	ldr	r3, [sp, #12]
    d382:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d386:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d38a:	9b03      	ldr	r3, [sp, #12]
    d38c:	9a05      	ldr	r2, [sp, #20]
    d38e:	2105      	movs	r1, #5
    d390:	47a0      	blx	r4
            #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = pBase->ESR1;
    d392:	9b04      	ldr	r3, [sp, #16]
    d394:	6a1b      	ldr	r3, [r3, #32]
    d396:	9305      	str	r3, [sp, #20]
            }
        }

    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Check if this is spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_FAST_MASK))) && ((uint32)0U != (pBase->CTRL2 & ((uint32)FLEXCAN_CTRL2_ERRMSK_FAST_MASK))))
    d398:	9b05      	ldr	r3, [sp, #20]
    d39a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    d39e:	2b00      	cmp	r3, #0
    d3a0:	d019      	beq.n	d3d6 <FlexCAN_Error_IRQHandler+0xae>
    d3a2:	9b04      	ldr	r3, [sp, #16]
    d3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d3a6:	2b00      	cmp	r3, #0
    d3a8:	da15      	bge.n	d3d6 <FlexCAN_Error_IRQHandler+0xae>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_FAST_MASK;
    d3aa:	9b04      	ldr	r3, [sp, #16]
    d3ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    d3b0:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d3b2:	9b03      	ldr	r3, [sp, #12]
    d3b4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d3b8:	2b00      	cmp	r3, #0
    d3ba:	d00c      	beq.n	d3d6 <FlexCAN_Error_IRQHandler+0xae>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR_FAST, u32ErrStatus, state);
    d3bc:	9b03      	ldr	r3, [sp, #12]
    d3be:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d3c2:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d3c6:	9b03      	ldr	r3, [sp, #12]
    d3c8:	9a05      	ldr	r2, [sp, #20]
    d3ca:	2106      	movs	r1, #6
    d3cc:	47a0      	blx	r4
    }
    else
    {
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    }
}
    d3ce:	e002      	b.n	d3d6 <FlexCAN_Error_IRQHandler+0xae>
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    d3d0:	9b04      	ldr	r3, [sp, #16]
    d3d2:	4a04      	ldr	r2, [pc, #16]	; (d3e4 <FlexCAN_Error_IRQHandler+0xbc>)
    d3d4:	621a      	str	r2, [r3, #32]
}
    d3d6:	bf00      	nop
    d3d8:	b006      	add	sp, #24
    d3da:	bd10      	pop	{r4, pc}
    d3dc:	000185f0 	.word	0x000185f0
    d3e0:	1fff935c 	.word	0x1fff935c
    d3e4:	00300002 	.word	0x00300002

0000d3e8 <FlexCAN_BusOff_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements CAN_X_BUSOFF_ISR_Activity */
void FlexCAN_BusOff_IRQHandler(uint8 instance)
{
    d3e8:	b510      	push	{r4, lr}
    d3ea:	b086      	sub	sp, #24
    d3ec:	4603      	mov	r3, r0
    d3ee:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d3f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d3f6:	4a3a      	ldr	r2, [pc, #232]	; (d4e0 <FlexCAN_BusOff_IRQHandler+0xf8>)
    d3f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3fc:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d3fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d402:	4a38      	ldr	r2, [pc, #224]	; (d4e4 <FlexCAN_BusOff_IRQHandler+0xfc>)
    d404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d408:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    d40a:	2300      	movs	r3, #0
    d40c:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check If Driver initialized */
    if (NULL_PTR != state)
    d40e:	9b03      	ldr	r3, [sp, #12]
    d410:	2b00      	cmp	r3, #0
    d412:	d05f      	beq.n	d4d4 <FlexCAN_BusOff_IRQHandler+0xec>
    {
        /* Get error status to get value updated */
        u32ErrStatus = base->ESR1;
    d414:	9b04      	ldr	r3, [sp, #16]
    d416:	6a1b      	ldr	r3, [r3, #32]
    d418:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_TWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_TWRNMSK_MASK))))
    d41a:	9b05      	ldr	r3, [sp, #20]
    d41c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    d420:	2b00      	cmp	r3, #0
    d422:	d01a      	beq.n	d45a <FlexCAN_BusOff_IRQHandler+0x72>
    d424:	9b04      	ldr	r3, [sp, #16]
    d426:	685b      	ldr	r3, [r3, #4]
    d428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    d42c:	2b00      	cmp	r3, #0
    d42e:	d014      	beq.n	d45a <FlexCAN_BusOff_IRQHandler+0x72>
        {
            base->ESR1 = FLEXCAN_ESR1_TWRNINT_MASK;
    d430:	9b04      	ldr	r3, [sp, #16]
    d432:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    d436:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d438:	9b03      	ldr	r3, [sp, #12]
    d43a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d43e:	2b00      	cmp	r3, #0
    d440:	d00b      	beq.n	d45a <FlexCAN_BusOff_IRQHandler+0x72>
            {
                state->error_callback(instance, FLEXCAN_EVENT_TX_WARNING, u32ErrStatus, state);
    d442:	9b03      	ldr	r3, [sp, #12]
    d444:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d448:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d44c:	9b03      	ldr	r3, [sp, #12]
    d44e:	9a05      	ldr	r2, [sp, #20]
    d450:	2109      	movs	r1, #9
    d452:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    d454:	9b04      	ldr	r3, [sp, #16]
    d456:	6a1b      	ldr	r3, [r3, #32]
    d458:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_RWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_RWRNMSK_MASK))))
    d45a:	9b05      	ldr	r3, [sp, #20]
    d45c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    d460:	2b00      	cmp	r3, #0
    d462:	d01a      	beq.n	d49a <FlexCAN_BusOff_IRQHandler+0xb2>
    d464:	9b04      	ldr	r3, [sp, #16]
    d466:	685b      	ldr	r3, [r3, #4]
    d468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    d46c:	2b00      	cmp	r3, #0
    d46e:	d014      	beq.n	d49a <FlexCAN_BusOff_IRQHandler+0xb2>
        {
            base->ESR1 = FLEXCAN_ESR1_RWRNINT_MASK;
    d470:	9b04      	ldr	r3, [sp, #16]
    d472:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    d476:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d478:	9b03      	ldr	r3, [sp, #12]
    d47a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d47e:	2b00      	cmp	r3, #0
    d480:	d00b      	beq.n	d49a <FlexCAN_BusOff_IRQHandler+0xb2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_RX_WARNING, u32ErrStatus, state);
    d482:	9b03      	ldr	r3, [sp, #12]
    d484:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d488:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d48c:	9b03      	ldr	r3, [sp, #12]
    d48e:	9a05      	ldr	r2, [sp, #20]
    d490:	2108      	movs	r1, #8
    d492:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    d494:	9b04      	ldr	r3, [sp, #16]
    d496:	6a1b      	ldr	r3, [r3, #32]
    d498:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_BOFFINT_MASK))) && ((uint32)0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_BOFFMSK_MASK))))
    d49a:	9b05      	ldr	r3, [sp, #20]
    d49c:	f003 0304 	and.w	r3, r3, #4
    d4a0:	2b00      	cmp	r3, #0
    d4a2:	d01a      	beq.n	d4da <FlexCAN_BusOff_IRQHandler+0xf2>
    d4a4:	9b04      	ldr	r3, [sp, #16]
    d4a6:	685b      	ldr	r3, [r3, #4]
    d4a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    d4ac:	2b00      	cmp	r3, #0
    d4ae:	d014      	beq.n	d4da <FlexCAN_BusOff_IRQHandler+0xf2>
        {
            base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    d4b0:	9b04      	ldr	r3, [sp, #16]
    d4b2:	2204      	movs	r2, #4
    d4b4:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d4b6:	9b03      	ldr	r3, [sp, #12]
    d4b8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d4bc:	2b00      	cmp	r3, #0
    d4be:	d00c      	beq.n	d4da <FlexCAN_BusOff_IRQHandler+0xf2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    d4c0:	9b03      	ldr	r3, [sp, #12]
    d4c2:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d4c6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d4ca:	9b03      	ldr	r3, [sp, #12]
    d4cc:	9a05      	ldr	r2, [sp, #20]
    d4ce:	2107      	movs	r1, #7
    d4d0:	47a0      	blx	r4
    }
    else
    {
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    }
}
    d4d2:	e002      	b.n	d4da <FlexCAN_BusOff_IRQHandler+0xf2>
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    d4d4:	9b04      	ldr	r3, [sp, #16]
    d4d6:	4a04      	ldr	r2, [pc, #16]	; (d4e8 <FlexCAN_BusOff_IRQHandler+0x100>)
    d4d8:	621a      	str	r2, [r3, #32]
}
    d4da:	bf00      	nop
    d4dc:	b006      	add	sp, #24
    d4de:	bd10      	pop	{r4, pc}
    d4e0:	000185f0 	.word	0x000185f0
    d4e4:	1fff935c 	.word	0x1fff935c
    d4e8:	000b0004 	.word	0x000b0004

0000d4ec <FlexCAN_Ip_SendBlocking>:
                                              const Flexcan_Ip_DataInfoType * tx_info,
                                              uint32 msg_id,
                                              const uint8 * mb_data,
                                              uint32 timeout_ms
                                             )
{
    d4ec:	b500      	push	{lr}
    d4ee:	b091      	sub	sp, #68	; 0x44
    d4f0:	9204      	str	r2, [sp, #16]
    d4f2:	9303      	str	r3, [sp, #12]
    d4f4:	4603      	mov	r3, r0
    d4f6:	f88d 3017 	strb.w	r3, [sp, #23]
    d4fa:	460b      	mov	r3, r1
    d4fc:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d500:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d504:	4a5f      	ldr	r2, [pc, #380]	; (d684 <FlexCAN_Ip_SendBlocking+0x198>)
    d506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d50a:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d50c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d510:	4a5d      	ldr	r2, [pc, #372]	; (d688 <FlexCAN_Ip_SendBlocking+0x19c>)
    d512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d516:	930c      	str	r3, [sp, #48]	; 0x30

    uint32 timeStart = 0U;
    d518:	2300      	movs	r3, #0
    d51a:	9307      	str	r3, [sp, #28]
    uint32 timeElapsed = 0U;
    d51c:	2300      	movs	r3, #0
    d51e:	930e      	str	r3, [sp, #56]	; 0x38
    uint32 mS2Ticks = OsIf_MicrosToTicks((timeout_ms * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d520:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d522:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d526:	fb02 f303 	mul.w	r3, r2, r3
    d52a:	2100      	movs	r1, #0
    d52c:	4618      	mov	r0, r3
    d52e:	f7f4 fd0d 	bl	1f4c <OsIf_MicrosToTicks>
    d532:	900b      	str	r0, [sp, #44]	; 0x2c
    uint32 uS2Ticks = 0U;
    d534:	2300      	movs	r3, #0
    d536:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 flexcan_mb_config = 0;
    d538:	2300      	movs	r3, #0
    d53a:	9309      	str	r3, [sp, #36]	; 0x24

    volatile uint32 * flexcan_mb = NULL_PTR;
    d53c:	2300      	movs	r3, #0
    d53e:	9308      	str	r3, [sp, #32]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif

    result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    d540:	f89d 1016 	ldrb.w	r1, [sp, #22]
    d544:	f89d 0017 	ldrb.w	r0, [sp, #23]
    d548:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d54a:	9300      	str	r3, [sp, #0]
    d54c:	9b03      	ldr	r3, [sp, #12]
    d54e:	9a04      	ldr	r2, [sp, #16]
    d550:	f7fe feaa 	bl	c2a8 <FlexCAN_StartSendData>
    d554:	900f      	str	r0, [sp, #60]	; 0x3c

    if (FLEXCAN_STATUS_SUCCESS == result)
    d556:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d558:	2b00      	cmp	r3, #0
    d55a:	f040 808d 	bne.w	d678 <FlexCAN_Ip_SendBlocking+0x18c>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d55e:	2000      	movs	r0, #0
    d560:	f7f4 fca8 	bl	1eb4 <OsIf_GetCounter>
    d564:	4603      	mov	r3, r0
    d566:	9307      	str	r3, [sp, #28]
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    d568:	e00f      	b.n	d58a <FlexCAN_Ip_SendBlocking+0x9e>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d56a:	ab07      	add	r3, sp, #28
    d56c:	2100      	movs	r1, #0
    d56e:	4618      	mov	r0, r3
    d570:	f7f4 fcb9 	bl	1ee6 <OsIf_GetElapsed>
    d574:	4602      	mov	r2, r0
    d576:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d578:	4413      	add	r3, r2
    d57a:	930e      	str	r3, [sp, #56]	; 0x38
            if (timeElapsed >= mS2Ticks)
    d57c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d57e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d580:	429a      	cmp	r2, r3
    d582:	d302      	bcc.n	d58a <FlexCAN_Ip_SendBlocking+0x9e>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    d584:	2303      	movs	r3, #3
    d586:	930f      	str	r3, [sp, #60]	; 0x3c
                break;
    d588:	e008      	b.n	d59c <FlexCAN_Ip_SendBlocking+0xb0>
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    d58a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d58e:	4619      	mov	r1, r3
    d590:	980d      	ldr	r0, [sp, #52]	; 0x34
    d592:	f7fe fab6 	bl	bb02 <FlexCAN_GetBuffStatusFlag>
    d596:	4603      	mov	r3, r0
    d598:	2b01      	cmp	r3, #1
    d59a:	d1e6      	bne.n	d56a <FlexCAN_Ip_SendBlocking+0x7e>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == result) && (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE))
    d59c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d59e:	2b03      	cmp	r3, #3
    d5a0:	d15c      	bne.n	d65c <FlexCAN_Ip_SendBlocking+0x170>
    d5a2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d5a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d5a8:	011b      	lsls	r3, r3, #4
    d5aa:	4413      	add	r3, r2
    d5ac:	3304      	adds	r3, #4
    d5ae:	681b      	ldr	r3, [r3, #0]
    d5b0:	2b00      	cmp	r3, #0
    d5b2:	d053      	beq.n	d65c <FlexCAN_Ip_SendBlocking+0x170>
        {
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    d5b4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d5b8:	4619      	mov	r1, r3
    d5ba:	980d      	ldr	r0, [sp, #52]	; 0x34
    d5bc:	f7fe fa8e 	bl	badc <FlexCAN_ClearMsgBuffIntStatusFlag>
                flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    d5c0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d5c4:	4619      	mov	r1, r3
    d5c6:	980d      	ldr	r0, [sp, #52]	; 0x34
    d5c8:	f001 f968 	bl	e89c <FlexCAN_GetMsgBuffRegion>
    d5cc:	9008      	str	r0, [sp, #32]
                flexcan_mb_config = * flexcan_mb;
    d5ce:	9b08      	ldr	r3, [sp, #32]
    d5d0:	681b      	ldr	r3, [r3, #0]
    d5d2:	9309      	str	r3, [sp, #36]	; 0x24
                /* Reset the code */
                flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    d5d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d5d6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    d5da:	9309      	str	r3, [sp, #36]	; 0x24
                flexcan_mb_config |= ((uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    d5dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d5de:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    d5e2:	9309      	str	r3, [sp, #36]	; 0x24
                *flexcan_mb = flexcan_mb_config;
    d5e4:	9b08      	ldr	r3, [sp, #32]
    d5e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d5e8:	601a      	str	r2, [r3, #0]

                /* Wait to finish abort operation */
                uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d5ea:	2100      	movs	r1, #0
    d5ec:	4827      	ldr	r0, [pc, #156]	; (d68c <FlexCAN_Ip_SendBlocking+0x1a0>)
    d5ee:	f7f4 fcad 	bl	1f4c <OsIf_MicrosToTicks>
    d5f2:	900a      	str	r0, [sp, #40]	; 0x28
                timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d5f4:	2000      	movs	r0, #0
    d5f6:	f7f4 fc5d 	bl	1eb4 <OsIf_GetCounter>
    d5fa:	4603      	mov	r3, r0
    d5fc:	9307      	str	r3, [sp, #28]
                 timeElapsed = 0U;
    d5fe:	2300      	movs	r3, #0
    d600:	930e      	str	r3, [sp, #56]	; 0x38
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    d602:	e00f      	b.n	d624 <FlexCAN_Ip_SendBlocking+0x138>
                {
                    timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d604:	ab07      	add	r3, sp, #28
    d606:	2100      	movs	r1, #0
    d608:	4618      	mov	r0, r3
    d60a:	f7f4 fc6c 	bl	1ee6 <OsIf_GetElapsed>
    d60e:	4602      	mov	r2, r0
    d610:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d612:	4413      	add	r3, r2
    d614:	930e      	str	r3, [sp, #56]	; 0x38
                    if (timeElapsed >= uS2Ticks)
    d616:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d61a:	429a      	cmp	r2, r3
    d61c:	d302      	bcc.n	d624 <FlexCAN_Ip_SendBlocking+0x138>
                    {
                        result = FLEXCAN_STATUS_TIMEOUT;
    d61e:	2303      	movs	r3, #3
    d620:	930f      	str	r3, [sp, #60]	; 0x3c
                        break;
    d622:	e008      	b.n	d636 <FlexCAN_Ip_SendBlocking+0x14a>
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    d624:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d628:	4619      	mov	r1, r3
    d62a:	980d      	ldr	r0, [sp, #52]	; 0x34
    d62c:	f7fe fa69 	bl	bb02 <FlexCAN_GetBuffStatusFlag>
    d630:	4603      	mov	r3, r0
    d632:	2b00      	cmp	r3, #0
    d634:	d0e6      	beq.n	d604 <FlexCAN_Ip_SendBlocking+0x118>
                    }
                }

                flexcan_mb_config = *flexcan_mb;
    d636:	9b08      	ldr	r3, [sp, #32]
    d638:	681b      	ldr	r3, [r3, #0]
    d63a:	9309      	str	r3, [sp, #36]	; 0x24
                /* Check if the MBs have been safely Inactivated */
                if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    d63c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d63e:	0e1b      	lsrs	r3, r3, #24
    d640:	f003 030f 	and.w	r3, r3, #15
    d644:	2b08      	cmp	r3, #8
    d646:	d101      	bne.n	d64c <FlexCAN_Ip_SendBlocking+0x160>
                {
                    /* Transmission have occurred */
                    result = FLEXCAN_STATUS_SUCCESS;
    d648:	2300      	movs	r3, #0
    d64a:	930f      	str	r3, [sp, #60]	; 0x3c
                }

                if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    d64c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d64e:	0e1b      	lsrs	r3, r3, #24
    d650:	f003 030f 	and.w	r3, r3, #15
    d654:	2b09      	cmp	r3, #9
    d656:	d101      	bne.n	d65c <FlexCAN_Ip_SendBlocking+0x170>
                {
                    /* Transmission have been aborted */
                    result = FLEXCAN_STATUS_TIMEOUT;
    d658:	2303      	movs	r3, #3
    d65a:	930f      	str	r3, [sp, #60]	; 0x3c
                }
        }

        /* Clear message buffer flag */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    d65c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d660:	4619      	mov	r1, r3
    d662:	980d      	ldr	r0, [sp, #52]	; 0x34
    d664:	f7fe fa3a 	bl	badc <FlexCAN_ClearMsgBuffIntStatusFlag>

        state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    d668:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d66c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d66e:	011b      	lsls	r3, r3, #4
    d670:	4413      	add	r3, r2
    d672:	3304      	adds	r3, #4
    d674:	2200      	movs	r2, #0
    d676:	601a      	str	r2, [r3, #0]
    }
    return result;
    d678:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
}
    d67a:	4618      	mov	r0, r3
    d67c:	b011      	add	sp, #68	; 0x44
    d67e:	f85d fb04 	ldr.w	pc, [sp], #4
    d682:	bf00      	nop
    d684:	000185f0 	.word	0x000185f0
    d688:	1fff935c 	.word	0x1fff935c
    d68c:	000f4240 	.word	0x000f4240

0000d690 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_SetRxMbGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMbGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    d690:	b500      	push	{lr}
    d692:	b087      	sub	sp, #28
    d694:	4603      	mov	r3, r0
    d696:	9100      	str	r1, [sp, #0]
    d698:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    d69c:	2300      	movs	r3, #0
    d69e:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    d6a0:	2300      	movs	r3, #0
    d6a2:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    d6a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d6a8:	4a1c      	ldr	r2, [pc, #112]	; (d71c <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x8c>)
    d6aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6ae:	9303      	str	r3, [sp, #12]
#endif

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    d6b0:	9803      	ldr	r0, [sp, #12]
    d6b2:	f7fe f9b9 	bl	ba28 <FlexCAN_IsEnabled>
    d6b6:	4603      	mov	r3, r0
    d6b8:	2b00      	cmp	r3, #0
    d6ba:	bf14      	ite	ne
    d6bc:	2301      	movne	r3, #1
    d6be:	2300      	moveq	r3, #0
    d6c0:	b2db      	uxtb	r3, r3
    d6c2:	f083 0301 	eor.w	r3, r3, #1
    d6c6:	b2db      	uxtb	r3, r3
    d6c8:	f88d 300b 	strb.w	r3, [sp, #11]
    d6cc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d6d0:	f003 0301 	and.w	r3, r3, #1
    d6d4:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    d6d8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d6dc:	2b00      	cmp	r3, #0
    d6de:	d003      	beq.n	d6e8 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    d6e0:	9803      	ldr	r0, [sp, #12]
    d6e2:	f001 f9c3 	bl	ea6c <FlexCAN_Enable>
    d6e6:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    d6e8:	9b05      	ldr	r3, [sp, #20]
    d6ea:	2b00      	cmp	r3, #0
    d6ec:	d103      	bne.n	d6f6 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxMsgBuffGlobalMask(pBase, mask);
    d6ee:	9900      	ldr	r1, [sp, #0]
    d6f0:	9803      	ldr	r0, [sp, #12]
    d6f2:	f7fe fbc3 	bl	be7c <FlexCAN_SetRxMsgBuffGlobalMask>
    }

    if (TRUE == disabled)
    d6f6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d6fa:	2b00      	cmp	r3, #0
    d6fc:	d008      	beq.n	d710 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    d6fe:	9803      	ldr	r0, [sp, #12]
    d700:	f001 fa32 	bl	eb68 <FlexCAN_Disable>
    d704:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    d706:	9b04      	ldr	r3, [sp, #16]
    d708:	2b00      	cmp	r3, #0
    d70a:	d001      	beq.n	d710 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
        {
            result = status;
    d70c:	9b04      	ldr	r3, [sp, #16]
    d70e:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    d710:	9b05      	ldr	r3, [sp, #20]
}
    d712:	4618      	mov	r0, r3
    d714:	b007      	add	sp, #28
    d716:	f85d fb04 	ldr.w	pc, [sp], #4
    d71a:	bf00      	nop
    d71c:	000185f0 	.word	0x000185f0

0000d720 <FlexCAN_Ip_EnterFreezeMode_Privileged>:
 * Description   : Enter Driver In freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnterFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnterFreezeMode_Privileged(uint8 instance)
{
    d720:	b500      	push	{lr}
    d722:	b085      	sub	sp, #20
    d724:	4603      	mov	r3, r0
    d726:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d72a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d72e:	4a06      	ldr	r2, [pc, #24]	; (d748 <FlexCAN_Ip_EnterFreezeMode_Privileged+0x28>)
    d730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d734:	9303      	str	r3, [sp, #12]
        return FlexCAN_EnterFreezeMode(base);
    d736:	9803      	ldr	r0, [sp, #12]
    d738:	f001 f94c 	bl	e9d4 <FlexCAN_EnterFreezeMode>
    d73c:	4603      	mov	r3, r0
}
    d73e:	4618      	mov	r0, r3
    d740:	b005      	add	sp, #20
    d742:	f85d fb04 	ldr.w	pc, [sp], #4
    d746:	bf00      	nop
    d748:	000185f0 	.word	0x000185f0

0000d74c <FlexCAN_Ip_ExitFreezeMode_Privileged>:
 * Description   : Exit Driver from freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ExitFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ExitFreezeMode_Privileged(uint8 instance)
{
    d74c:	b500      	push	{lr}
    d74e:	b085      	sub	sp, #20
    d750:	4603      	mov	r3, r0
    d752:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d756:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d75a:	4a06      	ldr	r2, [pc, #24]	; (d774 <FlexCAN_Ip_ExitFreezeMode_Privileged+0x28>)
    d75c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d760:	9303      	str	r3, [sp, #12]
        return FlexCAN_ExitFreezeMode(base);
    d762:	9803      	ldr	r0, [sp, #12]
    d764:	f001 f9be 	bl	eae4 <FlexCAN_ExitFreezeMode>
    d768:	4603      	mov	r3, r0
}
    d76a:	4618      	mov	r0, r3
    d76c:	b005      	add	sp, #20
    d76e:	f85d fb04 	ldr.w	pc, [sp], #4
    d772:	bf00      	nop
    d774:	000185f0 	.word	0x000185f0

0000d778 <FlexCAN_Ip_SetRxIndividualMask_Privileged>:
 * Description   : Set Rx individual mask as absolute value provided by mask parameter
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxIndividualMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxIndividualMask_Privileged(uint8 instance, uint8 mb_idx, uint32 mask)
{
    d778:	b500      	push	{lr}
    d77a:	b087      	sub	sp, #28
    d77c:	4603      	mov	r3, r0
    d77e:	9200      	str	r2, [sp, #0]
    d780:	f88d 3007 	strb.w	r3, [sp, #7]
    d784:	460b      	mov	r3, r1
    d786:	f88d 3006 	strb.w	r3, [sp, #6]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    d78a:	2300      	movs	r3, #0
    d78c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    d78e:	2300      	movs	r3, #0
    d790:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    d792:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d796:	4a1e      	ldr	r2, [pc, #120]	; (d810 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x98>)
    d798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d79c:	9303      	str	r3, [sp, #12]
    }
    else
    {
#endif

    boolean disabled = !FlexCAN_IsEnabled(pBase);
    d79e:	9803      	ldr	r0, [sp, #12]
    d7a0:	f7fe f942 	bl	ba28 <FlexCAN_IsEnabled>
    d7a4:	4603      	mov	r3, r0
    d7a6:	2b00      	cmp	r3, #0
    d7a8:	bf14      	ite	ne
    d7aa:	2301      	movne	r3, #1
    d7ac:	2300      	moveq	r3, #0
    d7ae:	b2db      	uxtb	r3, r3
    d7b0:	f083 0301 	eor.w	r3, r3, #1
    d7b4:	b2db      	uxtb	r3, r3
    d7b6:	f88d 300b 	strb.w	r3, [sp, #11]
    d7ba:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d7be:	f003 0301 	and.w	r3, r3, #1
    d7c2:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    d7c6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d7ca:	2b00      	cmp	r3, #0
    d7cc:	d003      	beq.n	d7d6 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    d7ce:	9803      	ldr	r0, [sp, #12]
    d7d0:	f001 f94c 	bl	ea6c <FlexCAN_Enable>
    d7d4:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    d7d6:	9b05      	ldr	r3, [sp, #20]
    d7d8:	2b00      	cmp	r3, #0
    d7da:	d106      	bne.n	d7ea <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x72>
    {
        FlexCAN_SetRxIndividualMask(pBase, mb_idx, mask);
    d7dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d7e0:	9a00      	ldr	r2, [sp, #0]
    d7e2:	4619      	mov	r1, r3
    d7e4:	9803      	ldr	r0, [sp, #12]
    d7e6:	f7fe fb52 	bl	be8e <FlexCAN_SetRxIndividualMask>
    }

    if (TRUE == disabled)
    d7ea:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d7ee:	2b00      	cmp	r3, #0
    d7f0:	d008      	beq.n	d804 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    d7f2:	9803      	ldr	r0, [sp, #12]
    d7f4:	f001 f9b8 	bl	eb68 <FlexCAN_Disable>
    d7f8:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    d7fa:	9b04      	ldr	r3, [sp, #16]
    d7fc:	2b00      	cmp	r3, #0
    d7fe:	d001      	beq.n	d804 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
        {
            result = status;
    d800:	9b04      	ldr	r3, [sp, #16]
    d802:	9305      	str	r3, [sp, #20]
        }
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    d804:	9b05      	ldr	r3, [sp, #20]
}
    d806:	4618      	mov	r0, r3
    d808:	b007      	add	sp, #28
    d80a:	f85d fb04 	ldr.w	pc, [sp], #4
    d80e:	bf00      	nop
    d810:	000185f0 	.word	0x000185f0

0000d814 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>:
 * Description   : Set RxFifo Global Mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxFifoGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxFifoGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    d814:	b500      	push	{lr}
    d816:	b087      	sub	sp, #28
    d818:	4603      	mov	r3, r0
    d81a:	9100      	str	r1, [sp, #0]
    d81c:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    d820:	2300      	movs	r3, #0
    d822:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    d824:	2300      	movs	r3, #0
    d826:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    d828:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d82c:	4a1c      	ldr	r2, [pc, #112]	; (d8a0 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x8c>)
    d82e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d832:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    d834:	9803      	ldr	r0, [sp, #12]
    d836:	f7fe f8f7 	bl	ba28 <FlexCAN_IsEnabled>
    d83a:	4603      	mov	r3, r0
    d83c:	2b00      	cmp	r3, #0
    d83e:	bf14      	ite	ne
    d840:	2301      	movne	r3, #1
    d842:	2300      	moveq	r3, #0
    d844:	b2db      	uxtb	r3, r3
    d846:	f083 0301 	eor.w	r3, r3, #1
    d84a:	b2db      	uxtb	r3, r3
    d84c:	f88d 300b 	strb.w	r3, [sp, #11]
    d850:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d854:	f003 0301 	and.w	r3, r3, #1
    d858:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    d85c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d860:	2b00      	cmp	r3, #0
    d862:	d003      	beq.n	d86c <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    d864:	9803      	ldr	r0, [sp, #12]
    d866:	f001 f901 	bl	ea6c <FlexCAN_Enable>
    d86a:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    d86c:	9b05      	ldr	r3, [sp, #20]
    d86e:	2b00      	cmp	r3, #0
    d870:	d103      	bne.n	d87a <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxFifoGlobalMask(pBase, mask);
    d872:	9900      	ldr	r1, [sp, #0]
    d874:	9803      	ldr	r0, [sp, #12]
    d876:	f7fe f8a7 	bl	b9c8 <FlexCAN_SetRxFifoGlobalMask>
    }

    if (TRUE == disabled)
    d87a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d87e:	2b00      	cmp	r3, #0
    d880:	d008      	beq.n	d894 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    d882:	9803      	ldr	r0, [sp, #12]
    d884:	f001 f970 	bl	eb68 <FlexCAN_Disable>
    d888:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    d88a:	9b04      	ldr	r3, [sp, #16]
    d88c:	2b00      	cmp	r3, #0
    d88e:	d001      	beq.n	d894 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
        {
            result = status;
    d890:	9b04      	ldr	r3, [sp, #16]
    d892:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    d894:	9b05      	ldr	r3, [sp, #20]
}
    d896:	4618      	mov	r0, r3
    d898:	b007      	add	sp, #28
    d89a:	f85d fb04 	ldr.w	pc, [sp], #4
    d89e:	bf00      	nop
    d8a0:	000185f0 	.word	0x000185f0

0000d8a4 <FlexCAN_Ip_Deinit_Privileged>:
 * This function will disable all FlexCAN interrupts, and disable the FlexCAN.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_Deinit_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Deinit_Privileged(uint8 instance)
{
    d8a4:	b500      	push	{lr}
    d8a6:	b085      	sub	sp, #20
    d8a8:	4603      	mov	r3, r0
    d8aa:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d8ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d8b2:	4a0e      	ldr	r2, [pc, #56]	; (d8ec <FlexCAN_Ip_Deinit_Privileged+0x48>)
    d8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8b8:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Enter Freeze Mode Required before to enter Disabled Mode */
    result = FlexCAN_EnterFreezeMode(base);
    d8ba:	9803      	ldr	r0, [sp, #12]
    d8bc:	f001 f88a 	bl	e9d4 <FlexCAN_EnterFreezeMode>
    d8c0:	9002      	str	r0, [sp, #8]
    if (FLEXCAN_STATUS_SUCCESS == result)
    d8c2:	9b02      	ldr	r3, [sp, #8]
    d8c4:	2b00      	cmp	r3, #0
    d8c6:	d10b      	bne.n	d8e0 <FlexCAN_Ip_Deinit_Privileged+0x3c>
    {
        /* Reset registers */
        FlexCAN_SetRegDefaultVal(base);
    d8c8:	9803      	ldr	r0, [sp, #12]
    d8ca:	f7fe fb18 	bl	befe <FlexCAN_SetRegDefaultVal>
        /* wait for disable */
        (void)FlexCAN_Disable(base);
    d8ce:	9803      	ldr	r0, [sp, #12]
    d8d0:	f001 f94a 	bl	eb68 <FlexCAN_Disable>
        /* Clear state pointer that is checked by FLEXCAN_DRV_Init */
        Flexcan_Ip_apxState[instance] = NULL_PTR;
    d8d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d8d8:	4a05      	ldr	r2, [pc, #20]	; (d8f0 <FlexCAN_Ip_Deinit_Privileged+0x4c>)
    d8da:	2100      	movs	r1, #0
    d8dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OsIf_Trusted_Call1param(FlexCAN_ClrUserAccessAllowed, base);
        }
    #endif
    }

    return result;
    d8e0:	9b02      	ldr	r3, [sp, #8]
}
    d8e2:	4618      	mov	r0, r3
    d8e4:	b005      	add	sp, #20
    d8e6:	f85d fb04 	ldr.w	pc, [sp], #4
    d8ea:	bf00      	nop
    d8ec:	000185f0 	.word	0x000185f0
    d8f0:	1fff935c 	.word	0x1fff935c

0000d8f4 <FlexCAN_Ip_MainFunctionRead>:
 * This function read the messages received as pulling or if the Interrupts are disabled.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionRead_Activity */
void FlexCAN_Ip_MainFunctionRead(uint8 instance, uint8 mb_idx)
{
    d8f4:	b500      	push	{lr}
    d8f6:	b085      	sub	sp, #20
    d8f8:	4603      	mov	r3, r0
    d8fa:	460a      	mov	r2, r1
    d8fc:	f88d 3007 	strb.w	r3, [sp, #7]
    d900:	4613      	mov	r3, r2
    d902:	f88d 3006 	strb.w	r3, [sp, #6]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d906:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d90a:	4a22      	ldr	r2, [pc, #136]	; (d994 <FlexCAN_Ip_MainFunctionRead+0xa0>)
    d90c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d910:	9303      	str	r3, [sp, #12]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d912:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d916:	4a20      	ldr	r2, [pc, #128]	; (d998 <FlexCAN_Ip_MainFunctionRead+0xa4>)
    d918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d91c:	9302      	str	r3, [sp, #8]
        }
    }
    else
    {
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
        if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    d91e:	9b02      	ldr	r3, [sp, #8]
    d920:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    d924:	2b00      	cmp	r3, #0
    d926:	d015      	beq.n	d954 <FlexCAN_Ip_MainFunctionRead+0x60>
    d928:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d92c:	2b07      	cmp	r3, #7
    d92e:	d811      	bhi.n	d954 <FlexCAN_Ip_MainFunctionRead+0x60>
        {
            /* just process available legacy fifo event only */
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    d930:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d934:	2b00      	cmp	r3, #0
    d936:	d128      	bne.n	d98a <FlexCAN_Ip_MainFunctionRead+0x96>
            {
                if (FlexCAN_GetBuffStatusFlag(base, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE) != 0U)
    d938:	2105      	movs	r1, #5
    d93a:	9803      	ldr	r0, [sp, #12]
    d93c:	f7fe f8e1 	bl	bb02 <FlexCAN_GetBuffStatusFlag>
    d940:	4603      	mov	r3, r0
    d942:	2b00      	cmp	r3, #0
    d944:	d021      	beq.n	d98a <FlexCAN_Ip_MainFunctionRead+0x96>
                {
                    FlexCAN_IRQHandlerRxFIFO(instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE);
    d946:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d94a:	2105      	movs	r1, #5
    d94c:	4618      	mov	r0, r3
    d94e:	f7fe ff17 	bl	c780 <FlexCAN_IRQHandlerRxFIFO>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    d952:	e01a      	b.n	d98a <FlexCAN_Ip_MainFunctionRead+0x96>
                }
            }
        }
        else
        {
            if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    d954:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d958:	4619      	mov	r1, r3
    d95a:	9803      	ldr	r0, [sp, #12]
    d95c:	f7fe f8d1 	bl	bb02 <FlexCAN_GetBuffStatusFlag>
    d960:	4603      	mov	r3, r0
    d962:	2b00      	cmp	r3, #0
    d964:	d012      	beq.n	d98c <FlexCAN_Ip_MainFunctionRead+0x98>
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    d966:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d96a:	9a02      	ldr	r2, [sp, #8]
    d96c:	011b      	lsls	r3, r3, #4
    d96e:	4413      	add	r3, r2
    d970:	3304      	adds	r3, #4
    d972:	681b      	ldr	r3, [r3, #0]
    d974:	2b01      	cmp	r3, #1
    d976:	d109      	bne.n	d98c <FlexCAN_Ip_MainFunctionRead+0x98>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    d978:	f89d 2006 	ldrb.w	r2, [sp, #6]
    d97c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d980:	4611      	mov	r1, r2
    d982:	4618      	mov	r0, r3
    d984:	f7fe fd74 	bl	c470 <FlexCAN_IRQHandlerRxMB>
            }
        }
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
}
    d988:	e000      	b.n	d98c <FlexCAN_Ip_MainFunctionRead+0x98>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    d98a:	bf00      	nop
}
    d98c:	bf00      	nop
    d98e:	b005      	add	sp, #20
    d990:	f85d fb04 	ldr.w	pc, [sp], #4
    d994:	000185f0 	.word	0x000185f0
    d998:	1fff935c 	.word	0x1fff935c

0000d99c <FlexCAN_Ip_MainFunctionBusOff_Privileged>:
 * This function check the bus off event.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionBusOff_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_MainFunctionBusOff_Privileged(uint8 instance)
{
    d99c:	b510      	push	{r4, lr}
    d99e:	b086      	sub	sp, #24
    d9a0:	4603      	mov	r3, r0
    d9a2:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    d9a6:	2301      	movs	r3, #1
    d9a8:	9305      	str	r3, [sp, #20]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d9aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d9ae:	4a15      	ldr	r2, [pc, #84]	; (da04 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x68>)
    d9b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9b4:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d9b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d9ba:	4a13      	ldr	r2, [pc, #76]	; (da08 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x6c>)
    d9bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9c0:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    d9c2:	2300      	movs	r3, #0
    d9c4:	9302      	str	r3, [sp, #8]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Get error status */
    u32ErrStatus = base->ESR1;
    d9c6:	9b04      	ldr	r3, [sp, #16]
    d9c8:	6a1b      	ldr	r3, [r3, #32]
    d9ca:	9302      	str	r3, [sp, #8]

    if (0U != (u32ErrStatus & FLEXCAN_ESR1_BOFFINT_MASK))
    d9cc:	9b02      	ldr	r3, [sp, #8]
    d9ce:	f003 0304 	and.w	r3, r3, #4
    d9d2:	2b00      	cmp	r3, #0
    d9d4:	d012      	beq.n	d9fc <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x60>
    {
        /* Invoke callback */
        if (state->error_callback != NULL_PTR)
    d9d6:	9b03      	ldr	r3, [sp, #12]
    d9d8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d9dc:	2b00      	cmp	r3, #0
    d9de:	d008      	beq.n	d9f2 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x56>
        {
            state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    d9e0:	9b03      	ldr	r3, [sp, #12]
    d9e2:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d9e6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d9ea:	9b03      	ldr	r3, [sp, #12]
    d9ec:	9a02      	ldr	r2, [sp, #8]
    d9ee:	2107      	movs	r1, #7
    d9f0:	47a0      	blx	r4
        }
        /* Clear BusOff Status Flag */
        base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    d9f2:	9b04      	ldr	r3, [sp, #16]
    d9f4:	2204      	movs	r2, #4
    d9f6:	621a      	str	r2, [r3, #32]
        eRetVal = FLEXCAN_STATUS_SUCCESS;
    d9f8:	2300      	movs	r3, #0
    d9fa:	9305      	str	r3, [sp, #20]
    }
    return eRetVal;
    d9fc:	9b05      	ldr	r3, [sp, #20]
}
    d9fe:	4618      	mov	r0, r3
    da00:	b006      	add	sp, #24
    da02:	bd10      	pop	{r4, pc}
    da04:	000185f0 	.word	0x000185f0
    da08:	1fff935c 	.word	0x1fff935c

0000da0c <FlexCAN_Ip_MainFunctionWrite>:
 * This function check the message if have been sent.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionWrite_Activity */
void FlexCAN_Ip_MainFunctionWrite(uint8 instance, uint8 mb_idx)
{
    da0c:	b510      	push	{r4, lr}
    da0e:	b098      	sub	sp, #96	; 0x60
    da10:	4603      	mov	r3, r0
    da12:	460a      	mov	r2, r1
    da14:	f88d 3007 	strb.w	r3, [sp, #7]
    da18:	4613      	mov	r3, r2
    da1a:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    da1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    da22:	4a3f      	ldr	r2, [pc, #252]	; (db20 <FlexCAN_Ip_MainFunctionWrite+0x114>)
    da24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da28:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    da2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    da2e:	4a3d      	ldr	r2, [pc, #244]	; (db24 <FlexCAN_Ip_MainFunctionWrite+0x118>)
    da30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da34:	9316      	str	r3, [sp, #88]	; 0x58

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    da36:	f89d 3006 	ldrb.w	r3, [sp, #6]
    da3a:	4619      	mov	r1, r3
    da3c:	9817      	ldr	r0, [sp, #92]	; 0x5c
    da3e:	f7fe f860 	bl	bb02 <FlexCAN_GetBuffStatusFlag>
    da42:	4603      	mov	r3, r0
    da44:	2b00      	cmp	r3, #0
    da46:	d068      	beq.n	db1a <FlexCAN_Ip_MainFunctionWrite+0x10e>
    {
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    da48:	f89d 3006 	ldrb.w	r3, [sp, #6]
    da4c:	9a16      	ldr	r2, [sp, #88]	; 0x58
    da4e:	011b      	lsls	r3, r3, #4
    da50:	4413      	add	r3, r2
    da52:	3304      	adds	r3, #4
    da54:	681b      	ldr	r3, [r3, #0]
    da56:	2b02      	cmp	r3, #2
    da58:	d15f      	bne.n	db1a <FlexCAN_Ip_MainFunctionWrite+0x10e>
        {
            if (state->mbs[mb_idx].isRemote)
    da5a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    da5e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    da60:	011b      	lsls	r3, r3, #4
    da62:	4413      	add	r3, r2
    da64:	3309      	adds	r3, #9
    da66:	781b      	ldrb	r3, [r3, #0]
    da68:	2b00      	cmp	r3, #0
    da6a:	d028      	beq.n	dabe <FlexCAN_Ip_MainFunctionWrite+0xb2>
            {
                Flexcan_Ip_MsgBuffType mb;
                mb.cs = 0U;
    da6c:	2300      	movs	r3, #0
    da6e:	9302      	str	r3, [sp, #8]
                mb.time_stamp = 0U;
    da70:	2300      	movs	r3, #0
    da72:	9315      	str	r3, [sp, #84]	; 0x54
                FlexCAN_LockRxMsgBuff(base, mb_idx);
    da74:	f89d 3006 	ldrb.w	r3, [sp, #6]
    da78:	4619      	mov	r1, r3
    da7a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    da7c:	f001 fa87 	bl	ef8e <FlexCAN_LockRxMsgBuff>
                FlexCAN_GetMsgBuff(base, mb_idx, &mb);
    da80:	f89d 3006 	ldrb.w	r3, [sp, #6]
    da84:	aa02      	add	r2, sp, #8
    da86:	4619      	mov	r1, r3
    da88:	9817      	ldr	r0, [sp, #92]	; 0x5c
    da8a:	f001 fbaf 	bl	f1ec <FlexCAN_GetMsgBuff>
                FlexCAN_UnlockRxMsgBuff(base);
    da8e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    da90:	f7fe f81d 	bl	bace <FlexCAN_UnlockRxMsgBuff>
                state->mbs[mb_idx].time_stamp = mb.time_stamp;
    da94:	f89d 3006 	ldrb.w	r3, [sp, #6]
    da98:	9a15      	ldr	r2, [sp, #84]	; 0x54
    da9a:	9916      	ldr	r1, [sp, #88]	; 0x58
    da9c:	011b      	lsls	r3, r3, #4
    da9e:	440b      	add	r3, r1
    daa0:	330c      	adds	r3, #12
    daa2:	601a      	str	r2, [r3, #0]
                /* If the frame was a remote frame, clear the flag only if the response was
                * not received yet. If the response was received, leave the flag set in order
                * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
                if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    daa4:	9b02      	ldr	r3, [sp, #8]
    daa6:	0e1b      	lsrs	r3, r3, #24
    daa8:	f003 030f 	and.w	r3, r3, #15
    daac:	2b04      	cmp	r3, #4
    daae:	d11d      	bne.n	daec <FlexCAN_Ip_MainFunctionWrite+0xe0>
                {
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    dab0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dab4:	4619      	mov	r1, r3
    dab6:	9817      	ldr	r0, [sp, #92]	; 0x5c
    dab8:	f7fe f810 	bl	badc <FlexCAN_ClearMsgBuffIntStatusFlag>
    dabc:	e016      	b.n	daec <FlexCAN_Ip_MainFunctionWrite+0xe0>
                }
            }
            else
            {
                state->mbs[mb_idx].time_stamp = FlexCAN_GetMsgBuffTimestamp(base, mb_idx);
    dabe:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dac2:	f89d 4006 	ldrb.w	r4, [sp, #6]
    dac6:	4619      	mov	r1, r3
    dac8:	9817      	ldr	r0, [sp, #92]	; 0x5c
    daca:	f001 fb7b 	bl	f1c4 <FlexCAN_GetMsgBuffTimestamp>
    dace:	4601      	mov	r1, r0
    dad0:	9a16      	ldr	r2, [sp, #88]	; 0x58
    dad2:	0123      	lsls	r3, r4, #4
    dad4:	4413      	add	r3, r2
    dad6:	330c      	adds	r3, #12
    dad8:	6019      	str	r1, [r3, #0]
                FlexCAN_UnlockRxMsgBuff(base);
    dada:	9817      	ldr	r0, [sp, #92]	; 0x5c
    dadc:	f7fd fff7 	bl	bace <FlexCAN_UnlockRxMsgBuff>
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    dae0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dae4:	4619      	mov	r1, r3
    dae6:	9817      	ldr	r0, [sp, #92]	; 0x5c
    dae8:	f7fd fff8 	bl	badc <FlexCAN_ClearMsgBuffIntStatusFlag>
            }

            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    daec:	f89d 3006 	ldrb.w	r3, [sp, #6]
    daf0:	9a16      	ldr	r2, [sp, #88]	; 0x58
    daf2:	011b      	lsls	r3, r3, #4
    daf4:	4413      	add	r3, r2
    daf6:	3304      	adds	r3, #4
    daf8:	2200      	movs	r2, #0
    dafa:	601a      	str	r2, [r3, #0]

            /* Invoke callback */
            if (state->callback != NULL_PTR)
    dafc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    dafe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    db02:	2b00      	cmp	r3, #0
    db04:	d009      	beq.n	db1a <FlexCAN_Ip_MainFunctionWrite+0x10e>
            {
                state->callback(instance, FLEXCAN_EVENT_TX_COMPLETE, mb_idx, state);
    db06:	9b16      	ldr	r3, [sp, #88]	; 0x58
    db08:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    db0c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    db10:	f89d 0007 	ldrb.w	r0, [sp, #7]
    db14:	9b16      	ldr	r3, [sp, #88]	; 0x58
    db16:	2104      	movs	r1, #4
    db18:	47a0      	blx	r4
            }
        }
    }
}
    db1a:	bf00      	nop
    db1c:	b018      	add	sp, #96	; 0x60
    db1e:	bd10      	pop	{r4, pc}
    db20:	000185f0 	.word	0x000185f0
    db24:	1fff935c 	.word	0x1fff935c

0000db28 <FlexCAN_Ip_GetStopMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STOPPED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStopMode_Activity */
boolean FlexCAN_Ip_GetStopMode_Privileged(uint8 instance)
{
    db28:	b084      	sub	sp, #16
    db2a:	4603      	mov	r3, r0
    db2c:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    db30:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db34:	4a08      	ldr	r2, [pc, #32]	; (db58 <FlexCAN_Ip_GetStopMode_Privileged+0x30>)
    db36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db3a:	9303      	str	r3, [sp, #12]
    return ((FLEXCAN_MCR_LPMACK_MASK == (base->MCR & FLEXCAN_MCR_LPMACK_MASK)) ? TRUE : FALSE);
    db3c:	9b03      	ldr	r3, [sp, #12]
    db3e:	681b      	ldr	r3, [r3, #0]
    db40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    db44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    db48:	bf0c      	ite	eq
    db4a:	2301      	moveq	r3, #1
    db4c:	2300      	movne	r3, #0
    db4e:	b2db      	uxtb	r3, r3
}
    db50:	4618      	mov	r0, r3
    db52:	b004      	add	sp, #16
    db54:	4770      	bx	lr
    db56:	bf00      	nop
    db58:	000185f0 	.word	0x000185f0

0000db5c <FlexCAN_Ip_GetStartMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STARTED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStartMode_Activity */
boolean FlexCAN_Ip_GetStartMode_Privileged(uint8 instance)
{
    db5c:	b084      	sub	sp, #16
    db5e:	4603      	mov	r3, r0
    db60:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    db64:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db68:	4a07      	ldr	r2, [pc, #28]	; (db88 <FlexCAN_Ip_GetStartMode_Privileged+0x2c>)
    db6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db6e:	9303      	str	r3, [sp, #12]
    return ((0U == (base->MCR & (FLEXCAN_MCR_LPMACK_MASK | FLEXCAN_MCR_FRZACK_MASK))) ? TRUE : FALSE);
    db70:	9b03      	ldr	r3, [sp, #12]
    db72:	681b      	ldr	r3, [r3, #0]
    db74:	f003 7388 	and.w	r3, r3, #17825792	; 0x1100000
    db78:	2b00      	cmp	r3, #0
    db7a:	bf0c      	ite	eq
    db7c:	2301      	moveq	r3, #1
    db7e:	2300      	movne	r3, #0
    db80:	b2db      	uxtb	r3, r3
}
    db82:	4618      	mov	r0, r3
    db84:	b004      	add	sp, #16
    db86:	4770      	bx	lr
    db88:	000185f0 	.word	0x000185f0

0000db8c <FlexCAN_Ip_SetStartMode_Privileged>:
 * Description   : Set the FlexCAN instance in START mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStartMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStartMode_Privileged(uint8 instance)
{
    db8c:	b500      	push	{lr}
    db8e:	b085      	sub	sp, #20
    db90:	4603      	mov	r3, r0
    db92:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    db96:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db9a:	4a0b      	ldr	r2, [pc, #44]	; (dbc8 <FlexCAN_Ip_SetStartMode_Privileged+0x3c>)
    db9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dba0:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    dba2:	f006 faf7 	bl	14194 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>
    /* Enable Flexcan Module */
    pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    dba6:	9b03      	ldr	r3, [sp, #12]
    dba8:	681b      	ldr	r3, [r3, #0]
    dbaa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    dbae:	9b03      	ldr	r3, [sp, #12]
    dbb0:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    dbb2:	f006 fb1b 	bl	141ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>

    return (FlexCAN_ExitFreezeMode(pBase));
    dbb6:	9803      	ldr	r0, [sp, #12]
    dbb8:	f000 ff94 	bl	eae4 <FlexCAN_ExitFreezeMode>
    dbbc:	4603      	mov	r3, r0
}
    dbbe:	4618      	mov	r0, r3
    dbc0:	b005      	add	sp, #20
    dbc2:	f85d fb04 	ldr.w	pc, [sp], #4
    dbc6:	bf00      	nop
    dbc8:	000185f0 	.word	0x000185f0

0000dbcc <FlexCAN_Ip_SetStopMode_Privileged>:
 * Description   : Set the FlexCAN instance in STOP mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStopMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStopMode_Privileged(uint8 instance)
{
    dbcc:	b500      	push	{lr}
    dbce:	b085      	sub	sp, #20
    dbd0:	4603      	mov	r3, r0
    dbd2:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dbd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dbda:	4a0a      	ldr	r2, [pc, #40]	; (dc04 <FlexCAN_Ip_SetStopMode_Privileged+0x38>)
    dbdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbe0:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status;
    status = FlexCAN_EnterFreezeMode(pBase);
    dbe2:	9802      	ldr	r0, [sp, #8]
    dbe4:	f000 fef6 	bl	e9d4 <FlexCAN_EnterFreezeMode>
    dbe8:	9003      	str	r0, [sp, #12]
    if (FLEXCAN_STATUS_SUCCESS == status)
    dbea:	9b03      	ldr	r3, [sp, #12]
    dbec:	2b00      	cmp	r3, #0
    dbee:	d103      	bne.n	dbf8 <FlexCAN_Ip_SetStopMode_Privileged+0x2c>

        /* TODO: reset MB status */

        /* TODO: disable all interrupt */

        status = FlexCAN_Disable(pBase);
    dbf0:	9802      	ldr	r0, [sp, #8]
    dbf2:	f000 ffb9 	bl	eb68 <FlexCAN_Disable>
    dbf6:	9003      	str	r0, [sp, #12]
    }
    return status;
    dbf8:	9b03      	ldr	r3, [sp, #12]
}
    dbfa:	4618      	mov	r0, r3
    dbfc:	b005      	add	sp, #20
    dbfe:	f85d fb04 	ldr.w	pc, [sp], #4
    dc02:	bf00      	nop
    dc04:	000185f0 	.word	0x000185f0

0000dc08 <FlexCAN_Ip_SetRxMaskType_Privileged>:
 * mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxMaskType_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMaskType_Privileged(uint8 instance, Flexcan_Ip_RxMaskType type)
{
    dc08:	b500      	push	{lr}
    dc0a:	b087      	sub	sp, #28
    dc0c:	4603      	mov	r3, r0
    dc0e:	9100      	str	r1, [sp, #0]
    dc10:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    dc14:	2300      	movs	r3, #0
    dc16:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    dc18:	2300      	movs	r3, #0
    dc1a:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dc1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dc20:	4a1e      	ldr	r2, [pc, #120]	; (dc9c <FlexCAN_Ip_SetRxMaskType_Privileged+0x94>)
    dc22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc26:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    dc28:	9803      	ldr	r0, [sp, #12]
    dc2a:	f7fd fefd 	bl	ba28 <FlexCAN_IsEnabled>
    dc2e:	4603      	mov	r3, r0
    dc30:	2b00      	cmp	r3, #0
    dc32:	bf14      	ite	ne
    dc34:	2301      	movne	r3, #1
    dc36:	2300      	moveq	r3, #0
    dc38:	b2db      	uxtb	r3, r3
    dc3a:	f083 0301 	eor.w	r3, r3, #1
    dc3e:	b2db      	uxtb	r3, r3
    dc40:	f88d 300b 	strb.w	r3, [sp, #11]
    dc44:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dc48:	f003 0301 	and.w	r3, r3, #1
    dc4c:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    dc50:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dc54:	2b00      	cmp	r3, #0
    dc56:	d003      	beq.n	dc60 <FlexCAN_Ip_SetRxMaskType_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    dc58:	9803      	ldr	r0, [sp, #12]
    dc5a:	f000 ff07 	bl	ea6c <FlexCAN_Enable>
    dc5e:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    dc60:	9b05      	ldr	r3, [sp, #20]
    dc62:	2b00      	cmp	r3, #0
    dc64:	d107      	bne.n	dc76 <FlexCAN_Ip_SetRxMaskType_Privileged+0x6e>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    dc66:	f006 fae7 	bl	14238 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
        FlexCAN_SetRxMaskType(pBase, type);
    dc6a:	9900      	ldr	r1, [sp, #0]
    dc6c:	9803      	ldr	r0, [sp, #12]
    dc6e:	f7fe f930 	bl	bed2 <FlexCAN_SetRxMaskType>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    dc72:	f006 fb0d 	bl	14290 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
    }

    if (TRUE == disabled)
    dc76:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dc7a:	2b00      	cmp	r3, #0
    dc7c:	d008      	beq.n	dc90 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
    {
        status = FlexCAN_Disable(pBase);
    dc7e:	9803      	ldr	r0, [sp, #12]
    dc80:	f000 ff72 	bl	eb68 <FlexCAN_Disable>
    dc84:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    dc86:	9b04      	ldr	r3, [sp, #16]
    dc88:	2b00      	cmp	r3, #0
    dc8a:	d001      	beq.n	dc90 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
        {
            result = status;
    dc8c:	9b04      	ldr	r3, [sp, #16]
    dc8e:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    dc90:	9b05      	ldr	r3, [sp, #20]
}
    dc92:	4618      	mov	r0, r3
    dc94:	b007      	add	sp, #28
    dc96:	f85d fb04 	ldr.w	pc, [sp], #4
    dc9a:	bf00      	nop
    dc9c:	000185f0 	.word	0x000185f0

0000dca0 <FlexCAN_Ip_SetBitrate_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrate_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrate_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean enhExt)
{
    dca0:	b500      	push	{lr}
    dca2:	b087      	sub	sp, #28
    dca4:	4603      	mov	r3, r0
    dca6:	9100      	str	r1, [sp, #0]
    dca8:	f88d 3007 	strb.w	r3, [sp, #7]
    dcac:	4613      	mov	r3, r2
    dcae:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    dcb2:	2300      	movs	r3, #0
    dcb4:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    dcb6:	2300      	movs	r3, #0
    dcb8:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dcba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dcbe:	4a1c      	ldr	r2, [pc, #112]	; (dd30 <FlexCAN_Ip_SetBitrate_Privileged+0x90>)
    dcc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcc4:	9303      	str	r3, [sp, #12]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    dcc6:	9b03      	ldr	r3, [sp, #12]
    dcc8:	681b      	ldr	r3, [r3, #0]
    dcca:	0fdb      	lsrs	r3, r3, #31
    dccc:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_OFF)
    (void)enhExt;
#endif
    if (TRUE == disabled)
    dcd0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dcd4:	2b00      	cmp	r3, #0
    dcd6:	d003      	beq.n	dce0 <FlexCAN_Ip_SetBitrate_Privileged+0x40>
    {
        result = FlexCAN_Enable(pBase);
    dcd8:	9803      	ldr	r0, [sp, #12]
    dcda:	f000 fec7 	bl	ea6c <FlexCAN_Enable>
    dcde:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    dce0:	9b05      	ldr	r3, [sp, #20]
    dce2:	2b00      	cmp	r3, #0
    dce4:	d112      	bne.n	dd0c <FlexCAN_Ip_SetBitrate_Privileged+0x6c>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    dce6:	f006 fc93 	bl	14610 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
            FlexCAN_SetEnhancedNominalTimeSegments(pBase, bitrate);
        }
        else
#endif
        {
            if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    dcea:	9803      	ldr	r0, [sp, #12]
    dcec:	f7fe f830 	bl	bd50 <FlexCAN_IsExCbtEnabled>
    dcf0:	4603      	mov	r3, r0
    dcf2:	2b00      	cmp	r3, #0
    dcf4:	d004      	beq.n	dd00 <FlexCAN_Ip_SetBitrate_Privileged+0x60>
            {
                FlexCAN_SetExtendedTimeSegments(pBase, bitrate);
    dcf6:	9900      	ldr	r1, [sp, #0]
    dcf8:	9803      	ldr	r0, [sp, #12]
    dcfa:	f7fd ff7f 	bl	bbfc <FlexCAN_SetExtendedTimeSegments>
    dcfe:	e003      	b.n	dd08 <FlexCAN_Ip_SetBitrate_Privileged+0x68>
            }
            else
            {
                FlexCAN_SetTimeSegments(pBase, bitrate);
    dd00:	9900      	ldr	r1, [sp, #0]
    dd02:	9803      	ldr	r0, [sp, #12]
    dd04:	f7fd ff4e 	bl	bba4 <FlexCAN_SetTimeSegments>
            }
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    dd08:	f006 fcae 	bl	14668 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
    }

    if (TRUE == disabled)
    dd0c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dd10:	2b00      	cmp	r3, #0
    dd12:	d008      	beq.n	dd26 <FlexCAN_Ip_SetBitrate_Privileged+0x86>
    {
        status = FlexCAN_Disable(pBase);
    dd14:	9803      	ldr	r0, [sp, #12]
    dd16:	f000 ff27 	bl	eb68 <FlexCAN_Disable>
    dd1a:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    dd1c:	9b04      	ldr	r3, [sp, #16]
    dd1e:	2b00      	cmp	r3, #0
    dd20:	d001      	beq.n	dd26 <FlexCAN_Ip_SetBitrate_Privileged+0x86>
        {
            result = status;
    dd22:	9b04      	ldr	r3, [sp, #16]
    dd24:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    dd26:	9b05      	ldr	r3, [sp, #20]
}
    dd28:	4618      	mov	r0, r3
    dd2a:	b007      	add	sp, #28
    dd2c:	f85d fb04 	ldr.w	pc, [sp], #4
    dd30:	000185f0 	.word	0x000185f0

0000dd34 <FlexCAN_Ip_GetBitrate>:
 * or the arbitration phase of FD frames.
 *
 *END**************************************************************************/
 /* implements   FlexCAN_Ip_GetBitrate_Activity */
boolean FlexCAN_Ip_GetBitrate(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    dd34:	b500      	push	{lr}
    dd36:	b085      	sub	sp, #20
    dd38:	4603      	mov	r3, r0
    dd3a:	9100      	str	r1, [sp, #0]
    dd3c:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dd40:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dd44:	4a0d      	ldr	r2, [pc, #52]	; (dd7c <FlexCAN_Ip_GetBitrate+0x48>)
    dd46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd4a:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    dd4c:	2300      	movs	r3, #0
    dd4e:	f88d 300b 	strb.w	r3, [sp, #11]
        FlexCAN_GetEnhancedNominalTimeSegments(pBase, bitrate);
    }
    else
#endif
    {
        if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    dd52:	9803      	ldr	r0, [sp, #12]
    dd54:	f7fd fffc 	bl	bd50 <FlexCAN_IsExCbtEnabled>
    dd58:	4603      	mov	r3, r0
    dd5a:	2b00      	cmp	r3, #0
    dd5c:	d004      	beq.n	dd68 <FlexCAN_Ip_GetBitrate+0x34>
        {
            /* Get the Extended time segments*/
            FlexCAN_GetExtendedTimeSegments(pBase, bitrate);
    dd5e:	9900      	ldr	r1, [sp, #0]
    dd60:	9803      	ldr	r0, [sp, #12]
    dd62:	f7fd ff79 	bl	bc58 <FlexCAN_GetExtendedTimeSegments>
    dd66:	e003      	b.n	dd70 <FlexCAN_Ip_GetBitrate+0x3c>
        }
        else
        {
            /* Get the time segments*/
            FlexCAN_GetTimeSegments(pBase, bitrate);
    dd68:	9900      	ldr	r1, [sp, #0]
    dd6a:	9803      	ldr	r0, [sp, #12]
    dd6c:	f7fd ff9c 	bl	bca8 <FlexCAN_GetTimeSegments>
        }
    }
    return enhCbt;
    dd70:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    dd74:	4618      	mov	r0, r3
    dd76:	b005      	add	sp, #20
    dd78:	f85d fb04 	ldr.w	pc, [sp], #4
    dd7c:	000185f0 	.word	0x000185f0

0000dd80 <FlexCAN_Ip_ClearTDCFail>:
 * Description   : This function clear the TDC Fail flag.
 *
 *END**************************************************************************/
/* implements   FlexCAN_Ip_ClearTDCFail_Activity */
void FlexCAN_Ip_ClearTDCFail(uint8 u8Instance)
{
    dd80:	b500      	push	{lr}
    dd82:	b085      	sub	sp, #20
    dd84:	4603      	mov	r3, r0
    dd86:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    dd8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dd8e:	4a0a      	ldr	r2, [pc, #40]	; (ddb8 <FlexCAN_Ip_ClearTDCFail+0x38>)
    dd90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd94:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    dd96:	f006 faa1 	bl	142dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
        pBase->ETDC |=  FLEXCAN_ETDC_ETDCFAIL_MASK;
    }
    else
#endif
    {
        pBase->FDCTRL |= FLEXCAN_FDCTRL_TDCFAIL_MASK;
    dd9a:	9b03      	ldr	r3, [sp, #12]
    dd9c:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    dda0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    dda4:	9b03      	ldr	r3, [sp, #12]
    dda6:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    ddaa:	f006 fac3 	bl	14334 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
}
    ddae:	bf00      	nop
    ddb0:	b005      	add	sp, #20
    ddb2:	f85d fb04 	ldr.w	pc, [sp], #4
    ddb6:	bf00      	nop
    ddb8:	000185f0 	.word	0x000185f0

0000ddbc <FlexCAN_Ip_GetTDCFail>:
 *
 *END**************************************************************************/

/* implements    FlexCAN_Ip_GetTDCFail_Activity */
boolean FlexCAN_Ip_GetTDCFail(uint8 u8Instance)
{
    ddbc:	b084      	sub	sp, #16
    ddbe:	4603      	mov	r3, r0
    ddc0:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean value=FALSE;
    ddc4:	2300      	movs	r3, #0
    ddc6:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    ddca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ddce:	4a0a      	ldr	r2, [pc, #40]	; (ddf8 <FlexCAN_Ip_GetTDCFail+0x3c>)
    ddd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddd4:	9302      	str	r3, [sp, #8]
        value = ((pBase->ETDC & FLEXCAN_ETDC_ETDCFAIL_MASK) == FLEXCAN_ETDC_ETDCFAIL_MASK) ? TRUE : FALSE;
    }
    else
#endif
    {
        value = ((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCFAIL_MASK) == FLEXCAN_FDCTRL_TDCFAIL_MASK) ? TRUE : FALSE;
    ddd6:	9b02      	ldr	r3, [sp, #8]
    ddd8:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    dddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    dde0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    dde4:	bf0c      	ite	eq
    dde6:	2301      	moveq	r3, #1
    dde8:	2300      	movne	r3, #0
    ddea:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    ddee:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    ddf2:	4618      	mov	r0, r3
    ddf4:	b004      	add	sp, #16
    ddf6:	4770      	bx	lr
    ddf8:	000185f0 	.word	0x000185f0

0000ddfc <FlexCAN_Ip_GetTDCValue>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_GetTDCValue_Activity */
uint8 FlexCAN_Ip_GetTDCValue(uint8 u8Instance)
{
    ddfc:	b084      	sub	sp, #16
    ddfe:	4603      	mov	r3, r0
    de00:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 value = 0;
    de04:	2300      	movs	r3, #0
    de06:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    de0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    de0e:	4a08      	ldr	r2, [pc, #32]	; (de30 <FlexCAN_Ip_GetTDCValue+0x34>)
    de10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de14:	9302      	str	r3, [sp, #8]
        value = (uint8)((pBase->ETDC& FLEXCAN_ETDC_ETDCVAL_MASK) >> FLEXCAN_ETDC_ETDCVAL_SHIFT);
    }
    else
#endif
    {
        value = (uint8)((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCVAL_MASK) >> FLEXCAN_FDCTRL_TDCVAL_SHIFT);
    de16:	9b02      	ldr	r3, [sp, #8]
    de18:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    de1c:	b2db      	uxtb	r3, r3
    de1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    de22:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    de26:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    de2a:	4618      	mov	r0, r3
    de2c:	b004      	add	sp, #16
    de2e:	4770      	bx	lr
    de30:	000185f0 	.word	0x000185f0

0000de34 <FlexCAN_Ip_SetBitrateCbt_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrateCbt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrateCbt_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean bitRateSwitch)
{
    de34:	b500      	push	{lr}
    de36:	b087      	sub	sp, #28
    de38:	4603      	mov	r3, r0
    de3a:	9100      	str	r1, [sp, #0]
    de3c:	f88d 3007 	strb.w	r3, [sp, #7]
    de40:	4613      	mov	r3, r2
    de42:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    de46:	2300      	movs	r3, #0
    de48:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    de4a:	2300      	movs	r3, #0
    de4c:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    de4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    de52:	4a1e      	ldr	r2, [pc, #120]	; (decc <FlexCAN_Ip_SetBitrateCbt_Privileged+0x98>)
    de54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de58:	9303      	str	r3, [sp, #12]
    boolean fd_enable = FlexCAN_IsFDEnabled(pBase);
    de5a:	9803      	ldr	r0, [sp, #12]
    de5c:	f7fd ffaf 	bl	bdbe <FlexCAN_IsFDEnabled>
    de60:	4603      	mov	r3, r0
    de62:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    de66:	9b03      	ldr	r3, [sp, #12]
    de68:	681b      	ldr	r3, [r3, #0]
    de6a:	0fdb      	lsrs	r3, r3, #31
    de6c:	f88d 300a 	strb.w	r3, [sp, #10]

    if (TRUE == disabled)
    de70:	f89d 300a 	ldrb.w	r3, [sp, #10]
    de74:	2b00      	cmp	r3, #0
    de76:	d003      	beq.n	de80 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x4c>
    {
        result = FlexCAN_Enable(pBase);
    de78:	9803      	ldr	r0, [sp, #12]
    de7a:	f000 fdf7 	bl	ea6c <FlexCAN_Enable>
    de7e:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    de80:	9b05      	ldr	r3, [sp, #20]
    de82:	2b00      	cmp	r3, #0
    de84:	d10f      	bne.n	dea6 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x72>
    {
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_ON)
        boolean enhCbt = FlexCAN_IsEnhCbtEnabled(pBase);
#endif
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    de86:	f006 fc15 	bl	146b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
        FlexCAN_SetFDEnabled(pBase, fd_enable, bitRateSwitch);
    de8a:	f89d 2006 	ldrb.w	r2, [sp, #6]
    de8e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    de92:	4619      	mov	r1, r3
    de94:	9803      	ldr	r0, [sp, #12]
    de96:	f7fd fdd1 	bl	ba3c <FlexCAN_SetFDEnabled>
        }
        else
#endif
        {
            /* Set time segments*/
            FlexCAN_SetFDTimeSegments(pBase, bitrate);
    de9a:	9900      	ldr	r1, [sp, #0]
    de9c:	9803      	ldr	r0, [sp, #12]
    de9e:	f7fd fe4c 	bl	bb3a <FlexCAN_SetFDTimeSegments>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    dea2:	f006 fc33 	bl	1470c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
    }

    if (TRUE == disabled)
    dea6:	f89d 300a 	ldrb.w	r3, [sp, #10]
    deaa:	2b00      	cmp	r3, #0
    deac:	d008      	beq.n	dec0 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    deae:	9803      	ldr	r0, [sp, #12]
    deb0:	f000 fe5a 	bl	eb68 <FlexCAN_Disable>
    deb4:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    deb6:	9b04      	ldr	r3, [sp, #16]
    deb8:	2b00      	cmp	r3, #0
    deba:	d001      	beq.n	dec0 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
        {
            result = status;
    debc:	9b04      	ldr	r3, [sp, #16]
    debe:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    dec0:	9b05      	ldr	r3, [sp, #20]
}
    dec2:	4618      	mov	r0, r3
    dec4:	b007      	add	sp, #28
    dec6:	f85d fb04 	ldr.w	pc, [sp], #4
    deca:	bf00      	nop
    decc:	000185f0 	.word	0x000185f0

0000ded0 <FlexCAN_Ip_GetBitrateFD>:
 * of FD frames.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBitrateFD_Activity */
boolean FlexCAN_Ip_GetBitrateFD(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    ded0:	b500      	push	{lr}
    ded2:	b085      	sub	sp, #20
    ded4:	4603      	mov	r3, r0
    ded6:	9100      	str	r1, [sp, #0]
    ded8:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dedc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dee0:	4a08      	ldr	r2, [pc, #32]	; (df04 <FlexCAN_Ip_GetBitrateFD+0x34>)
    dee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dee6:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    dee8:	2300      	movs	r3, #0
    deea:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    else
#endif
    {
        /* Get the time segments*/
        FlexCAN_GetFDTimeSegments(pBase, bitrate);
    deee:	9900      	ldr	r1, [sp, #0]
    def0:	9803      	ldr	r0, [sp, #12]
    def2:	f7fd ff00 	bl	bcf6 <FlexCAN_GetFDTimeSegments>
    }
    return enhCbt;
    def6:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    defa:	4618      	mov	r0, r3
    defc:	b005      	add	sp, #20
    defe:	f85d fb04 	ldr.w	pc, [sp], #4
    df02:	bf00      	nop
    df04:	000185f0 	.word	0x000185f0

0000df08 <FlexCAN_Ip_SetTDCOffset_Privileged>:
 * the Transceiver Delay Compensation Offset.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTDCOffset_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTDCOffset_Privileged(uint8 instance, boolean enable, uint8 offset)
{
    df08:	b500      	push	{lr}
    df0a:	b087      	sub	sp, #28
    df0c:	4603      	mov	r3, r0
    df0e:	f88d 3007 	strb.w	r3, [sp, #7]
    df12:	460b      	mov	r3, r1
    df14:	f88d 3006 	strb.w	r3, [sp, #6]
    df18:	4613      	mov	r3, r2
    df1a:	f88d 3005 	strb.w	r3, [sp, #5]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    df1e:	2300      	movs	r3, #0
    df20:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    df22:	2300      	movs	r3, #0
    df24:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    df26:	f89d 3007 	ldrb.w	r3, [sp, #7]
    df2a:	4a20      	ldr	r2, [pc, #128]	; (dfac <FlexCAN_Ip_SetTDCOffset_Privileged+0xa4>)
    df2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df30:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    df32:	9803      	ldr	r0, [sp, #12]
    df34:	f7fd fd78 	bl	ba28 <FlexCAN_IsEnabled>
    df38:	4603      	mov	r3, r0
    df3a:	2b00      	cmp	r3, #0
    df3c:	bf14      	ite	ne
    df3e:	2301      	movne	r3, #1
    df40:	2300      	moveq	r3, #0
    df42:	b2db      	uxtb	r3, r3
    df44:	f083 0301 	eor.w	r3, r3, #1
    df48:	b2db      	uxtb	r3, r3
    df4a:	f88d 300b 	strb.w	r3, [sp, #11]
    df4e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    df52:	f003 0301 	and.w	r3, r3, #1
    df56:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    df5a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    df5e:	2b00      	cmp	r3, #0
    df60:	d003      	beq.n	df6a <FlexCAN_Ip_SetTDCOffset_Privileged+0x62>
    {
        result = FlexCAN_Enable(pBase);
    df62:	9803      	ldr	r0, [sp, #12]
    df64:	f000 fd82 	bl	ea6c <FlexCAN_Enable>
    df68:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    df6a:	9b05      	ldr	r3, [sp, #20]
    df6c:	2b00      	cmp	r3, #0
    df6e:	d10b      	bne.n	df88 <FlexCAN_Ip_SetTDCOffset_Privileged+0x80>
    {
        /* Check if enhaced CBT is Enabled */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    df70:	f006 fbf2 	bl	14758 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        }
        else
#endif
        {
            /* Enable/Disable TDC and set the TDC Offset */
            FlexCAN_SetTDCOffset(pBase, enable, offset);
    df74:	f89d 2005 	ldrb.w	r2, [sp, #5]
    df78:	f89d 3006 	ldrb.w	r3, [sp, #6]
    df7c:	4619      	mov	r1, r3
    df7e:	9803      	ldr	r0, [sp, #12]
    df80:	f7fd fd2b 	bl	b9da <FlexCAN_SetTDCOffset>
        }
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    df84:	f006 fc14 	bl	147b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        /* Check if enhaced CBT is Enabled */
    }

    if (TRUE == disabled)
    df88:	f89d 300b 	ldrb.w	r3, [sp, #11]
    df8c:	2b00      	cmp	r3, #0
    df8e:	d008      	beq.n	dfa2 <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
    {
        status = FlexCAN_Disable(pBase);
    df90:	9803      	ldr	r0, [sp, #12]
    df92:	f000 fde9 	bl	eb68 <FlexCAN_Disable>
    df96:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    df98:	9b04      	ldr	r3, [sp, #16]
    df9a:	2b00      	cmp	r3, #0
    df9c:	d001      	beq.n	dfa2 <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
        {
            result = status;
    df9e:	9b04      	ldr	r3, [sp, #16]
    dfa0:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    dfa2:	9b05      	ldr	r3, [sp, #20]
}
    dfa4:	4618      	mov	r0, r3
    dfa6:	b007      	add	sp, #28
    dfa8:	f85d fb04 	ldr.w	pc, [sp], #4
    dfac:	000185f0 	.word	0x000185f0

0000dfb0 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>:
 * be delayed from the first bit of CRC field on CAN bus.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTxArbitrationStartDelay_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged(uint8 instance,  uint8 value)
{
    dfb0:	b500      	push	{lr}
    dfb2:	b087      	sub	sp, #28
    dfb4:	4603      	mov	r3, r0
    dfb6:	460a      	mov	r2, r1
    dfb8:	f88d 3007 	strb.w	r3, [sp, #7]
    dfbc:	4613      	mov	r3, r2
    dfbe:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    dfc2:	2300      	movs	r3, #0
    dfc4:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    dfc6:	2300      	movs	r3, #0
    dfc8:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dfca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dfce:	4a1f      	ldr	r2, [pc, #124]	; (e04c <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x9c>)
    dfd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfd4:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    dfd6:	9803      	ldr	r0, [sp, #12]
    dfd8:	f7fd fd26 	bl	ba28 <FlexCAN_IsEnabled>
    dfdc:	4603      	mov	r3, r0
    dfde:	2b00      	cmp	r3, #0
    dfe0:	bf14      	ite	ne
    dfe2:	2301      	movne	r3, #1
    dfe4:	2300      	moveq	r3, #0
    dfe6:	b2db      	uxtb	r3, r3
    dfe8:	f083 0301 	eor.w	r3, r3, #1
    dfec:	b2db      	uxtb	r3, r3
    dfee:	f88d 300b 	strb.w	r3, [sp, #11]
    dff2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dff6:	f003 0301 	and.w	r3, r3, #1
    dffa:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    dffe:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e002:	2b00      	cmp	r3, #0
    e004:	d003      	beq.n	e00e <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    e006:	9803      	ldr	r0, [sp, #12]
    e008:	f000 fd30 	bl	ea6c <FlexCAN_Enable>
    e00c:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    e00e:	9b05      	ldr	r3, [sp, #20]
    e010:	2b00      	cmp	r3, #0
    e012:	d109      	bne.n	e028 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    e014:	f006 fbf2 	bl	147fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
        FlexCAN_SetTxArbitrationStartDelay(pBase, value);
    e018:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e01c:	4619      	mov	r1, r3
    e01e:	9803      	ldr	r0, [sp, #12]
    e020:	f7fd ff43 	bl	beaa <FlexCAN_SetTxArbitrationStartDelay>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    e024:	f006 fc16 	bl	14854 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
    }

    if (TRUE == disabled)
    e028:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e02c:	2b00      	cmp	r3, #0
    e02e:	d008      	beq.n	e042 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    e030:	9803      	ldr	r0, [sp, #12]
    e032:	f000 fd99 	bl	eb68 <FlexCAN_Disable>
    e036:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    e038:	9b04      	ldr	r3, [sp, #16]
    e03a:	2b00      	cmp	r3, #0
    e03c:	d001      	beq.n	e042 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
        {
            result = status;
    e03e:	9b04      	ldr	r3, [sp, #16]
    e040:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    e042:	9b05      	ldr	r3, [sp, #20]
}
    e044:	4618      	mov	r0, r3
    e046:	b007      	add	sp, #28
    e048:	f85d fb04 	ldr.w	pc, [sp], #4
    e04c:	000185f0 	.word	0x000185f0

0000e050 <FlexCAN_Ip_GetBuffStatusFlag>:
 * In case of a complete operation this flag is set.
 * In case msgBuff is 255 will return Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBuffStatusFlag_Activity */
boolean FlexCAN_Ip_GetBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    e050:	b500      	push	{lr}
    e052:	b085      	sub	sp, #20
    e054:	4603      	mov	r3, r0
    e056:	460a      	mov	r2, r1
    e058:	f88d 3007 	strb.w	r3, [sp, #7]
    e05c:	4613      	mov	r3, r2
    e05e:	f88d 3006 	strb.w	r3, [sp, #6]
    boolean returnResult;
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    e062:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e066:	4a0b      	ldr	r2, [pc, #44]	; (e094 <FlexCAN_Ip_GetBuffStatusFlag+0x44>)
    e068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e06c:	9303      	str	r3, [sp, #12]
        returnResult = ((1U == FlexCAN_GetEnhancedRxFIFOStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW)) ? TRUE : FALSE);
    }
    else
#endif
    {
        returnResult = ((1U == FlexCAN_GetBuffStatusFlag(pBase, msgBuffIdx)) ? TRUE : FALSE);
    e06e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e072:	4619      	mov	r1, r3
    e074:	9803      	ldr	r0, [sp, #12]
    e076:	f7fd fd44 	bl	bb02 <FlexCAN_GetBuffStatusFlag>
    e07a:	4603      	mov	r3, r0
    e07c:	2b01      	cmp	r3, #1
    e07e:	bf0c      	ite	eq
    e080:	2301      	moveq	r3, #1
    e082:	2300      	movne	r3, #0
    e084:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    return returnResult;
    e088:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    e08c:	4618      	mov	r0, r3
    e08e:	b005      	add	sp, #20
    e090:	f85d fb04 	ldr.w	pc, [sp], #4
    e094:	000185f0 	.word	0x000185f0

0000e098 <FlexCAN_Ip_ClearBuffStatusFlag>:
 * Description   : Clear FlexCAN Message Buffer Status Flag.
 * In case msgBuff is 255 will clear Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearBuffStatusFlag_Activity */
void FlexCAN_Ip_ClearBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    e098:	b500      	push	{lr}
    e09a:	b085      	sub	sp, #20
    e09c:	4603      	mov	r3, r0
    e09e:	460a      	mov	r2, r1
    e0a0:	f88d 3007 	strb.w	r3, [sp, #7]
    e0a4:	4613      	mov	r3, r2
    e0a6:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    e0aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e0ae:	4a07      	ldr	r2, [pc, #28]	; (e0cc <FlexCAN_Ip_ClearBuffStatusFlag+0x34>)
    e0b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0b4:	9303      	str	r3, [sp, #12]
        FlexCAN_ClearEnhancedRxFifoIntStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
    }
    else
#endif
    {
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, msgBuffIdx);
    e0b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e0ba:	4619      	mov	r1, r3
    e0bc:	9803      	ldr	r0, [sp, #12]
    e0be:	f7fd fd0d 	bl	badc <FlexCAN_ClearMsgBuffIntStatusFlag>
    }
}
    e0c2:	bf00      	nop
    e0c4:	b005      	add	sp, #20
    e0c6:	f85d fb04 	ldr.w	pc, [sp], #4
    e0ca:	bf00      	nop
    e0cc:	000185f0 	.word	0x000185f0

0000e0d0 <FlexCAN_Ip_EnableInterrupts_Privileged>:
 * Description   : Enable all mb interrupts configured.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnableInterrupts_Privileged(uint8 u8Instance)
{
    e0d0:	b500      	push	{lr}
    e0d2:	b087      	sub	sp, #28
    e0d4:	4603      	mov	r3, r0
    e0d6:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    e0da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e0de:	4a11      	ldr	r2, [pc, #68]	; (e124 <FlexCAN_Ip_EnableInterrupts_Privileged+0x54>)
    e0e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0e4:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    e0e6:	2301      	movs	r3, #1
    e0e8:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    e0ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e0ee:	4a0e      	ldr	r2, [pc, #56]	; (e128 <FlexCAN_Ip_EnableInterrupts_Privileged+0x58>)
    e0f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0f4:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    e0f6:	9804      	ldr	r0, [sp, #16]
    e0f8:	f7fd fc96 	bl	ba28 <FlexCAN_IsEnabled>
    e0fc:	4603      	mov	r3, r0
    e0fe:	2b00      	cmp	r3, #0
    e100:	d00b      	beq.n	e11a <FlexCAN_Ip_EnableInterrupts_Privileged+0x4a>
    {
        FlexCAN_EnableInterrupts(pBase, u8Instance);
    e102:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e106:	4619      	mov	r1, r3
    e108:	9804      	ldr	r0, [sp, #16]
    e10a:	f000 ffe1 	bl	f0d0 <FlexCAN_EnableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, TRUE);
            }
        }
    #endif
        state->isIntActive = TRUE;
    e10e:	9b03      	ldr	r3, [sp, #12]
    e110:	2201      	movs	r2, #1
    e112:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    e116:	2300      	movs	r3, #0
    e118:	9305      	str	r3, [sp, #20]
    }

    return result;
    e11a:	9b05      	ldr	r3, [sp, #20]
}
    e11c:	4618      	mov	r0, r3
    e11e:	b007      	add	sp, #28
    e120:	f85d fb04 	ldr.w	pc, [sp], #4
    e124:	000185f0 	.word	0x000185f0
    e128:	1fff935c 	.word	0x1fff935c

0000e12c <FlexCAN_Ip_DisableInterrupts_Privileged>:
 * Description   : Enable all interrupts configured.
 *
 *END**************************************************************************/
 /* implements FlexCAN_Ip_DisableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_DisableInterrupts_Privileged(uint8 u8Instance)
{
    e12c:	b500      	push	{lr}
    e12e:	b087      	sub	sp, #28
    e130:	4603      	mov	r3, r0
    e132:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    e136:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e13a:	4a10      	ldr	r2, [pc, #64]	; (e17c <FlexCAN_Ip_DisableInterrupts_Privileged+0x50>)
    e13c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e140:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    e142:	2301      	movs	r3, #1
    e144:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    e146:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e14a:	4a0d      	ldr	r2, [pc, #52]	; (e180 <FlexCAN_Ip_DisableInterrupts_Privileged+0x54>)
    e14c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e150:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    e152:	9804      	ldr	r0, [sp, #16]
    e154:	f7fd fc68 	bl	ba28 <FlexCAN_IsEnabled>
    e158:	4603      	mov	r3, r0
    e15a:	2b00      	cmp	r3, #0
    e15c:	d008      	beq.n	e170 <FlexCAN_Ip_DisableInterrupts_Privileged+0x44>
    {
        FlexCAN_DisableInterrupts(pBase);
    e15e:	9804      	ldr	r0, [sp, #16]
    e160:	f000 ffae 	bl	f0c0 <FlexCAN_DisableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, FALSE);
            }
        }
#endif
        state->isIntActive = FALSE;
    e164:	9b03      	ldr	r3, [sp, #12]
    e166:	2200      	movs	r2, #0
    e168:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    e16c:	2300      	movs	r3, #0
    e16e:	9305      	str	r3, [sp, #20]
    }

    return result;
    e170:	9b05      	ldr	r3, [sp, #20]
}
    e172:	4618      	mov	r0, r3
    e174:	b007      	add	sp, #28
    e176:	f85d fb04 	ldr.w	pc, [sp], #4
    e17a:	bf00      	nop
    e17c:	000185f0 	.word	0x000185f0
    e180:	1fff935c 	.word	0x1fff935c

0000e184 <FlexCAN_Ip_SetErrorInt_Privileged>:
 * Description   : Enable\Disable Error or BusOff Interrupt
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetErrorInt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetErrorInt_Privileged(uint8 u8Instance, Flexcan_Ip_ErrorIntType type, boolean enable)
{
    e184:	b500      	push	{lr}
    e186:	b087      	sub	sp, #28
    e188:	4603      	mov	r3, r0
    e18a:	9100      	str	r1, [sp, #0]
    e18c:	f88d 3007 	strb.w	r3, [sp, #7]
    e190:	4613      	mov	r3, r2
    e192:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e196:	2300      	movs	r3, #0
    e198:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    e19a:	2300      	movs	r3, #0
    e19c:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    e19e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e1a2:	4a3a      	ldr	r2, [pc, #232]	; (e28c <FlexCAN_Ip_SetErrorInt_Privileged+0x108>)
    e1a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1a8:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    e1aa:	9803      	ldr	r0, [sp, #12]
    e1ac:	f7fd fc3c 	bl	ba28 <FlexCAN_IsEnabled>
    e1b0:	4603      	mov	r3, r0
    e1b2:	2b00      	cmp	r3, #0
    e1b4:	bf14      	ite	ne
    e1b6:	2301      	movne	r3, #1
    e1b8:	2300      	moveq	r3, #0
    e1ba:	b2db      	uxtb	r3, r3
    e1bc:	f083 0301 	eor.w	r3, r3, #1
    e1c0:	b2db      	uxtb	r3, r3
    e1c2:	f88d 300b 	strb.w	r3, [sp, #11]
    e1c6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e1ca:	f003 0301 	and.w	r3, r3, #1
    e1ce:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    e1d2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e1d6:	2b00      	cmp	r3, #0
    e1d8:	d003      	beq.n	e1e2 <FlexCAN_Ip_SetErrorInt_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    e1da:	9803      	ldr	r0, [sp, #12]
    e1dc:	f000 fc46 	bl	ea6c <FlexCAN_Enable>
    e1e0:	9005      	str	r0, [sp, #20]
    }

    if (FLEXCAN_STATUS_SUCCESS == result)
    e1e2:	9b05      	ldr	r3, [sp, #20]
    e1e4:	2b00      	cmp	r3, #0
    e1e6:	d13c      	bne.n	e262 <FlexCAN_Ip_SetErrorInt_Privileged+0xde>
    e1e8:	9b00      	ldr	r3, [sp, #0]
    e1ea:	2b04      	cmp	r3, #4
    e1ec:	d83b      	bhi.n	e266 <FlexCAN_Ip_SetErrorInt_Privileged+0xe2>
    e1ee:	a201      	add	r2, pc, #4	; (adr r2, e1f4 <FlexCAN_Ip_SetErrorInt_Privileged+0x70>)
    e1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e1f4:	0000e23f 	.word	0x0000e23f
    e1f8:	0000e251 	.word	0x0000e251
    e1fc:	0000e21b 	.word	0x0000e21b
    e200:	0000e22d 	.word	0x0000e22d
    e204:	0000e209 	.word	0x0000e209
    {
        switch (type)
        {
            case FLEXCAN_IP_INT_BUSOFF:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_BUSOFF, enable);
    e208:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e20c:	461a      	mov	r2, r3
    e20e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    e212:	9803      	ldr	r0, [sp, #12]
    e214:	f000 fce8 	bl	ebe8 <FlexCAN_SetErrIntCmd>
                break;
    e218:	e026      	b.n	e268 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR, enable);
    e21a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e21e:	461a      	mov	r2, r3
    e220:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    e224:	9803      	ldr	r0, [sp, #12]
    e226:	f000 fcdf 	bl	ebe8 <FlexCAN_SetErrIntCmd>
                break;
    e22a:	e01d      	b.n	e268 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR_FAST :
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR_FAST, enable);
    e22c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e230:	461a      	mov	r2, r3
    e232:	f244 0101 	movw	r1, #16385	; 0x4001
    e236:	9803      	ldr	r0, [sp, #12]
    e238:	f000 fcd6 	bl	ebe8 <FlexCAN_SetErrIntCmd>
                break;
    e23c:	e014      	b.n	e268 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_RX_WARNING, enable);
    e23e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e242:	461a      	mov	r2, r3
    e244:	f44f 6180 	mov.w	r1, #1024	; 0x400
    e248:	9803      	ldr	r0, [sp, #12]
    e24a:	f000 fccd 	bl	ebe8 <FlexCAN_SetErrIntCmd>
                }
                break;
    e24e:	e00b      	b.n	e268 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_TX_WARNING, enable);
    e250:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e254:	461a      	mov	r2, r3
    e256:	f44f 6100 	mov.w	r1, #2048	; 0x800
    e25a:	9803      	ldr	r0, [sp, #12]
    e25c:	f000 fcc4 	bl	ebe8 <FlexCAN_SetErrIntCmd>
                }
                break;
    e260:	e002      	b.n	e268 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    /* Should not get here */
                #endif
                break;
            }
        }
    }
    e262:	bf00      	nop
    e264:	e000      	b.n	e268 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                break;
    e266:	bf00      	nop

    if (TRUE == disabled)
    e268:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e26c:	2b00      	cmp	r3, #0
    e26e:	d008      	beq.n	e282 <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
    {
        status = FlexCAN_Disable(pBase);
    e270:	9803      	ldr	r0, [sp, #12]
    e272:	f000 fc79 	bl	eb68 <FlexCAN_Disable>
    e276:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    e278:	9b04      	ldr	r3, [sp, #16]
    e27a:	2b00      	cmp	r3, #0
    e27c:	d001      	beq.n	e282 <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
        {
            result = status;
    e27e:	9b04      	ldr	r3, [sp, #16]
    e280:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    e282:	9b05      	ldr	r3, [sp, #20]
}
    e284:	4618      	mov	r0, r3
    e286:	b007      	add	sp, #28
    e288:	f85d fb04 	ldr.w	pc, [sp], #4
    e28c:	000185f0 	.word	0x000185f0

0000e290 <FlexCAN_Ip_AbortTransfer>:
 * receiver.
 *
 *END**************************************************************************/
/* implements    FlexCAN_Ip_AbortTransfer_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_AbortTransfer(uint8 u8Instance, uint8 mb_idx)
{
    e290:	b500      	push	{lr}
    e292:	b087      	sub	sp, #28
    e294:	4603      	mov	r3, r0
    e296:	460a      	mov	r2, r1
    e298:	f88d 3007 	strb.w	r3, [sp, #7]
    e29c:	4613      	mov	r3, r2
    e29e:	f88d 3006 	strb.w	r3, [sp, #6]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
        DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
    #endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    e2a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e2a6:	4a27      	ldr	r2, [pc, #156]	; (e344 <FlexCAN_Ip_AbortTransfer+0xb4>)
    e2a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2ac:	9304      	str	r3, [sp, #16]
#if ((FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON))
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
#else
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    e2ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e2b2:	4a25      	ldr	r2, [pc, #148]	; (e348 <FlexCAN_Ip_AbortTransfer+0xb8>)
    e2b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2b8:	9303      	str	r3, [sp, #12]
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON) */
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e2ba:	2300      	movs	r3, #0
    e2bc:	9305      	str	r3, [sp, #20]

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    e2be:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e2c2:	2b1f      	cmp	r3, #31
    e2c4:	d838      	bhi.n	e338 <FlexCAN_Ip_AbortTransfer+0xa8>
    {

    if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    e2c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e2ca:	9a03      	ldr	r2, [sp, #12]
    e2cc:	011b      	lsls	r3, r3, #4
    e2ce:	4413      	add	r3, r2
    e2d0:	3304      	adds	r3, #4
    e2d2:	681b      	ldr	r3, [r3, #0]
    e2d4:	2b00      	cmp	r3, #0
    e2d6:	d102      	bne.n	e2de <FlexCAN_Ip_AbortTransfer+0x4e>
    {
        result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    e2d8:	2305      	movs	r3, #5
    e2da:	9305      	str	r3, [sp, #20]
    e2dc:	e02c      	b.n	e338 <FlexCAN_Ip_AbortTransfer+0xa8>
    }
    else
    {
        FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, mb_idx, state->isIntActive);
    e2de:	f89d 2006 	ldrb.w	r2, [sp, #6]
    e2e2:	9b03      	ldr	r3, [sp, #12]
    e2e4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    e2e8:	f89d 1007 	ldrb.w	r1, [sp, #7]
    e2ec:	9804      	ldr	r0, [sp, #16]
    e2ee:	f000 feb3 	bl	f058 <FLEXCAN_ClearMsgBuffIntCmd>
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    e2f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e2f6:	9a03      	ldr	r2, [sp, #12]
    e2f8:	011b      	lsls	r3, r3, #4
    e2fa:	4413      	add	r3, r2
    e2fc:	3304      	adds	r3, #4
    e2fe:	681b      	ldr	r3, [r3, #0]
    e300:	2b02      	cmp	r3, #2
    e302:	d108      	bne.n	e316 <FlexCAN_Ip_AbortTransfer+0x86>
        {
            result = FlexCAN_AbortTxTransfer(u8Instance, mb_idx);
    e304:	f89d 2006 	ldrb.w	r2, [sp, #6]
    e308:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e30c:	4611      	mov	r1, r2
    e30e:	4618      	mov	r0, r3
    e310:	f7fe fabc 	bl	c88c <FlexCAN_AbortTxTransfer>
    e314:	9005      	str	r0, [sp, #20]
        }

        if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    e316:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e31a:	9a03      	ldr	r2, [sp, #12]
    e31c:	011b      	lsls	r3, r3, #4
    e31e:	4413      	add	r3, r2
    e320:	3304      	adds	r3, #4
    e322:	681b      	ldr	r3, [r3, #0]
    e324:	2b01      	cmp	r3, #1
    e326:	d107      	bne.n	e338 <FlexCAN_Ip_AbortTransfer+0xa8>
        {
            FlexCAN_AbortRxTransfer(u8Instance, mb_idx);
    e328:	f89d 2006 	ldrb.w	r2, [sp, #6]
    e32c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e330:	4611      	mov	r1, r2
    e332:	4618      	mov	r0, r3
    e334:	f7fe fb34 	bl	c9a0 <FlexCAN_AbortRxTransfer>
        }
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
#endif /* if FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return result;
    e338:	9b05      	ldr	r3, [sp, #20]
}
    e33a:	4618      	mov	r0, r3
    e33c:	b007      	add	sp, #28
    e33e:	f85d fb04 	ldr.w	pc, [sp], #4
    e342:	bf00      	nop
    e344:	000185f0 	.word	0x000185f0
    e348:	1fff935c 	.word	0x1fff935c

0000e34c <FlexCAN_Ip_SetRxMb14Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb14Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb14Mask_Privileged(uint8 instance, uint32 mask)
{
    e34c:	b500      	push	{lr}
    e34e:	b087      	sub	sp, #28
    e350:	4603      	mov	r3, r0
    e352:	9100      	str	r1, [sp, #0]
    e354:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e358:	2300      	movs	r3, #0
    e35a:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    e35c:	2300      	movs	r3, #0
    e35e:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    e360:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e364:	4a1b      	ldr	r2, [pc, #108]	; (e3d4 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x88>)
    e366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e36a:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    e36c:	9803      	ldr	r0, [sp, #12]
    e36e:	f7fd fb5b 	bl	ba28 <FlexCAN_IsEnabled>
    e372:	4603      	mov	r3, r0
    e374:	2b00      	cmp	r3, #0
    e376:	bf14      	ite	ne
    e378:	2301      	movne	r3, #1
    e37a:	2300      	moveq	r3, #0
    e37c:	b2db      	uxtb	r3, r3
    e37e:	f083 0301 	eor.w	r3, r3, #1
    e382:	b2db      	uxtb	r3, r3
    e384:	f88d 300b 	strb.w	r3, [sp, #11]
    e388:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e38c:	f003 0301 	and.w	r3, r3, #1
    e390:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    e394:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e398:	2b00      	cmp	r3, #0
    e39a:	d003      	beq.n	e3a4 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    e39c:	9803      	ldr	r0, [sp, #12]
    e39e:	f000 fb65 	bl	ea6c <FlexCAN_Enable>
    e3a2:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    e3a4:	9b05      	ldr	r3, [sp, #20]
    e3a6:	2b00      	cmp	r3, #0
    e3a8:	d102      	bne.n	e3b0 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x64>
    {
        pBase->RX14MASK = mask;
    e3aa:	9b03      	ldr	r3, [sp, #12]
    e3ac:	9a00      	ldr	r2, [sp, #0]
    e3ae:	615a      	str	r2, [r3, #20]
    }
    if (TRUE == disabled)
    e3b0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e3b4:	2b00      	cmp	r3, #0
    e3b6:	d008      	beq.n	e3ca <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    e3b8:	9803      	ldr	r0, [sp, #12]
    e3ba:	f000 fbd5 	bl	eb68 <FlexCAN_Disable>
    e3be:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    e3c0:	9b04      	ldr	r3, [sp, #16]
    e3c2:	2b00      	cmp	r3, #0
    e3c4:	d001      	beq.n	e3ca <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
        {
            result = status;
    e3c6:	9b04      	ldr	r3, [sp, #16]
    e3c8:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    e3ca:	9b05      	ldr	r3, [sp, #20]
}
    e3cc:	4618      	mov	r0, r3
    e3ce:	b007      	add	sp, #28
    e3d0:	f85d fb04 	ldr.w	pc, [sp], #4
    e3d4:	000185f0 	.word	0x000185f0

0000e3d8 <FlexCAN_Ip_SetRxMb15Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb15Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb15Mask_Privileged(uint8 instance, uint32 mask)
{
    e3d8:	b500      	push	{lr}
    e3da:	b087      	sub	sp, #28
    e3dc:	4603      	mov	r3, r0
    e3de:	9100      	str	r1, [sp, #0]
    e3e0:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e3e4:	2300      	movs	r3, #0
    e3e6:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    e3e8:	2300      	movs	r3, #0
    e3ea:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    e3ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e3f0:	4a1b      	ldr	r2, [pc, #108]	; (e460 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x88>)
    e3f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3f6:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    e3f8:	9803      	ldr	r0, [sp, #12]
    e3fa:	f7fd fb15 	bl	ba28 <FlexCAN_IsEnabled>
    e3fe:	4603      	mov	r3, r0
    e400:	2b00      	cmp	r3, #0
    e402:	bf14      	ite	ne
    e404:	2301      	movne	r3, #1
    e406:	2300      	moveq	r3, #0
    e408:	b2db      	uxtb	r3, r3
    e40a:	f083 0301 	eor.w	r3, r3, #1
    e40e:	b2db      	uxtb	r3, r3
    e410:	f88d 300b 	strb.w	r3, [sp, #11]
    e414:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e418:	f003 0301 	and.w	r3, r3, #1
    e41c:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    e420:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e424:	2b00      	cmp	r3, #0
    e426:	d003      	beq.n	e430 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    e428:	9803      	ldr	r0, [sp, #12]
    e42a:	f000 fb1f 	bl	ea6c <FlexCAN_Enable>
    e42e:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    e430:	9b05      	ldr	r3, [sp, #20]
    e432:	2b00      	cmp	r3, #0
    e434:	d102      	bne.n	e43c <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x64>
    {
        pBase->RX15MASK = mask;
    e436:	9b03      	ldr	r3, [sp, #12]
    e438:	9a00      	ldr	r2, [sp, #0]
    e43a:	619a      	str	r2, [r3, #24]
    }

    if (TRUE == disabled)
    e43c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e440:	2b00      	cmp	r3, #0
    e442:	d008      	beq.n	e456 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    e444:	9803      	ldr	r0, [sp, #12]
    e446:	f000 fb8f 	bl	eb68 <FlexCAN_Disable>
    e44a:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    e44c:	9b04      	ldr	r3, [sp, #16]
    e44e:	2b00      	cmp	r3, #0
    e450:	d001      	beq.n	e456 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
        {
            result = status;
    e452:	9b04      	ldr	r3, [sp, #16]
    e454:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    e456:	9b05      	ldr	r3, [sp, #20]
}
    e458:	4618      	mov	r0, r3
    e45a:	b007      	add	sp, #28
    e45c:	f85d fb04 	ldr.w	pc, [sp], #4
    e460:	000185f0 	.word	0x000185f0

0000e464 <FlexCAN_Ip_SetListenOnlyMode_Privileged>:
 * This function will enable or disable Listen Only mode.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_SetListenOnlyMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetListenOnlyMode_Privileged(uint8 instance, const boolean enable)
{
    e464:	b500      	push	{lr}
    e466:	b087      	sub	sp, #28
    e468:	4603      	mov	r3, r0
    e46a:	460a      	mov	r2, r1
    e46c:	f88d 3007 	strb.w	r3, [sp, #7]
    e470:	4613      	mov	r3, r2
    e472:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e476:	2300      	movs	r3, #0
    e478:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    e47a:	2300      	movs	r3, #0
    e47c:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    e47e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e482:	4a1f      	ldr	r2, [pc, #124]	; (e500 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x9c>)
    e484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e488:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    e48a:	9803      	ldr	r0, [sp, #12]
    e48c:	f7fd facc 	bl	ba28 <FlexCAN_IsEnabled>
    e490:	4603      	mov	r3, r0
    e492:	2b00      	cmp	r3, #0
    e494:	bf14      	ite	ne
    e496:	2301      	movne	r3, #1
    e498:	2300      	moveq	r3, #0
    e49a:	b2db      	uxtb	r3, r3
    e49c:	f083 0301 	eor.w	r3, r3, #1
    e4a0:	b2db      	uxtb	r3, r3
    e4a2:	f88d 300b 	strb.w	r3, [sp, #11]
    e4a6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e4aa:	f003 0301 	and.w	r3, r3, #1
    e4ae:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    e4b2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e4b6:	2b00      	cmp	r3, #0
    e4b8:	d003      	beq.n	e4c2 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    e4ba:	9803      	ldr	r0, [sp, #12]
    e4bc:	f000 fad6 	bl	ea6c <FlexCAN_Enable>
    e4c0:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    e4c2:	9b05      	ldr	r3, [sp, #20]
    e4c4:	2b00      	cmp	r3, #0
    e4c6:	d109      	bne.n	e4dc <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    e4c8:	f005 ff5a 	bl	14380 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
        FlexCAN_SetListenOnlyMode(pBase, enable);
    e4cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e4d0:	4619      	mov	r1, r3
    e4d2:	9803      	ldr	r0, [sp, #12]
    e4d4:	f7fd fae5 	bl	baa2 <FlexCAN_SetListenOnlyMode>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    e4d8:	f005 ff7e 	bl	143d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
    }

    if (TRUE == disabled)
    e4dc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e4e0:	2b00      	cmp	r3, #0
    e4e2:	d008      	beq.n	e4f6 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    e4e4:	9803      	ldr	r0, [sp, #12]
    e4e6:	f000 fb3f 	bl	eb68 <FlexCAN_Disable>
    e4ea:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    e4ec:	9b04      	ldr	r3, [sp, #16]
    e4ee:	2b00      	cmp	r3, #0
    e4f0:	d001      	beq.n	e4f6 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
        {
            result = status;
    e4f2:	9b04      	ldr	r3, [sp, #16]
    e4f4:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    e4f6:	9b05      	ldr	r3, [sp, #20]
}
    e4f8:	4618      	mov	r0, r3
    e4fa:	b007      	add	sp, #28
    e4fc:	f85d fb04 	ldr.w	pc, [sp], #4
    e500:	000185f0 	.word	0x000185f0

0000e504 <FlexCAN_Ip_GetListenOnlyMode>:
 * Description   : Check if Listen Only mode is ENABLE.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_GetListenOnlyMode_Activity */
boolean FlexCAN_Ip_GetListenOnlyMode(uint8 instance)
{
    e504:	b500      	push	{lr}
    e506:	b085      	sub	sp, #20
    e508:	4603      	mov	r3, r0
    e50a:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    e50e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e512:	4a06      	ldr	r2, [pc, #24]	; (e52c <FlexCAN_Ip_GetListenOnlyMode+0x28>)
    e514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e518:	9303      	str	r3, [sp, #12]
    return FlexCAN_IsListenOnlyModeEnabled(base);
    e51a:	9803      	ldr	r0, [sp, #12]
    e51c:	f7fd fc5d 	bl	bdda <FlexCAN_IsListenOnlyModeEnabled>
    e520:	4603      	mov	r3, r0
}
    e522:	4618      	mov	r0, r3
    e524:	b005      	add	sp, #20
    e526:	f85d fb04 	ldr.w	pc, [sp], #4
    e52a:	bf00      	nop
    e52c:	000185f0 	.word	0x000185f0

0000e530 <FlexCAN_Ip_ManualBusOffRecovery>:
 * Description   : Recover manually from bus-off if possible.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_ManualBusOffRecovery_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ManualBusOffRecovery(uint8 Instance)
{
    e530:	b500      	push	{lr}
    e532:	b089      	sub	sp, #36	; 0x24
    e534:	4603      	mov	r3, r0
    e536:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * Base = Flexcan_Ip_apxBase[Instance];
    e53a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e53e:	4a27      	ldr	r2, [pc, #156]	; (e5dc <FlexCAN_Ip_ManualBusOffRecovery+0xac>)
    e540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e544:	9305      	str	r3, [sp, #20]
    uint32 timeStart = 0U;
    e546:	2300      	movs	r3, #0
    e548:	9303      	str	r3, [sp, #12]
    uint32 timeElapsed = 0U;
    e54a:	2300      	movs	r3, #0
    e54c:	9307      	str	r3, [sp, #28]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e54e:	2100      	movs	r1, #0
    e550:	4823      	ldr	r0, [pc, #140]	; (e5e0 <FlexCAN_Ip_ManualBusOffRecovery+0xb0>)
    e552:	f7f3 fcfb 	bl	1f4c <OsIf_MicrosToTicks>
    e556:	9004      	str	r0, [sp, #16]
    Flexcan_Ip_StatusType RetVal = FLEXCAN_STATUS_ERROR;
    e558:	2301      	movs	r3, #1
    e55a:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Recover from bus-off when Automatic recovering from Bus Off state disabled. */
    if ((Base->CTRL1 & FLEXCAN_CTRL1_BOFFREC_MASK) != 0U)
    e55c:	9b05      	ldr	r3, [sp, #20]
    e55e:	685b      	ldr	r3, [r3, #4]
    e560:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e564:	2b00      	cmp	r3, #0
    e566:	d033      	beq.n	e5d0 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
    {
        RetVal = FLEXCAN_STATUS_SUCCESS;
    e568:	2300      	movs	r3, #0
    e56a:	9306      	str	r3, [sp, #24]
        /* return success if the controller is not in bus-off */
        if ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    e56c:	9b05      	ldr	r3, [sp, #20]
    e56e:	6a1b      	ldr	r3, [r3, #32]
    e570:	f003 0320 	and.w	r3, r3, #32
    e574:	2b00      	cmp	r3, #0
    e576:	d02b      	beq.n	e5d0 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
        {
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    e578:	f006 fa36 	bl	149e8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* negate to recover from bus-off */
            Base->CTRL1 &= ~FLEXCAN_CTRL1_BOFFREC_MASK;
    e57c:	9b05      	ldr	r3, [sp, #20]
    e57e:	685b      	ldr	r3, [r3, #4]
    e580:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    e584:	9b05      	ldr	r3, [sp, #20]
    e586:	605a      	str	r2, [r3, #4]
            /* re-assert to disable bus-off auto reocvery */
            Base->CTRL1 |= FLEXCAN_CTRL1_BOFFREC_MASK;
    e588:	9b05      	ldr	r3, [sp, #20]
    e58a:	685b      	ldr	r3, [r3, #4]
    e58c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    e590:	9b05      	ldr	r3, [sp, #20]
    e592:	605a      	str	r2, [r3, #4]
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    e594:	f006 fa54 	bl	14a40 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* Wait till exit bus-off */
            timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e598:	2000      	movs	r0, #0
    e59a:	f7f3 fc8b 	bl	1eb4 <OsIf_GetCounter>
    e59e:	4603      	mov	r3, r0
    e5a0:	9303      	str	r3, [sp, #12]

            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    e5a2:	e00f      	b.n	e5c4 <FlexCAN_Ip_ManualBusOffRecovery+0x94>
            {
                timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e5a4:	ab03      	add	r3, sp, #12
    e5a6:	2100      	movs	r1, #0
    e5a8:	4618      	mov	r0, r3
    e5aa:	f7f3 fc9c 	bl	1ee6 <OsIf_GetElapsed>
    e5ae:	4602      	mov	r2, r0
    e5b0:	9b07      	ldr	r3, [sp, #28]
    e5b2:	4413      	add	r3, r2
    e5b4:	9307      	str	r3, [sp, #28]
                if (timeElapsed >= uS2Ticks)
    e5b6:	9a07      	ldr	r2, [sp, #28]
    e5b8:	9b04      	ldr	r3, [sp, #16]
    e5ba:	429a      	cmp	r2, r3
    e5bc:	d302      	bcc.n	e5c4 <FlexCAN_Ip_ManualBusOffRecovery+0x94>
                {
                    RetVal = FLEXCAN_STATUS_TIMEOUT;
    e5be:	2303      	movs	r3, #3
    e5c0:	9306      	str	r3, [sp, #24]
                    break;
    e5c2:	e005      	b.n	e5d0 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    e5c4:	9b05      	ldr	r3, [sp, #20]
    e5c6:	6a1b      	ldr	r3, [r3, #32]
    e5c8:	f003 0320 	and.w	r3, r3, #32
    e5cc:	2b00      	cmp	r3, #0
    e5ce:	d1e9      	bne.n	e5a4 <FlexCAN_Ip_ManualBusOffRecovery+0x74>
                }
            }
        }
    }

    return RetVal;
    e5d0:	9b06      	ldr	r3, [sp, #24]
}
    e5d2:	4618      	mov	r0, r3
    e5d4:	b009      	add	sp, #36	; 0x24
    e5d6:	f85d fb04 	ldr.w	pc, [sp], #4
    e5da:	bf00      	nop
    e5dc:	000185f0 	.word	0x000185f0
    e5e0:	000f4240 	.word	0x000f4240

0000e5e4 <FlexCAN_SetSelfReception>:
{
    e5e4:	b082      	sub	sp, #8
    e5e6:	9001      	str	r0, [sp, #4]
    e5e8:	460b      	mov	r3, r1
    e5ea:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    e5ee:	9b01      	ldr	r3, [sp, #4]
    e5f0:	681b      	ldr	r3, [r3, #0]
    e5f2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    e5f6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e5fa:	2a00      	cmp	r2, #0
    e5fc:	d001      	beq.n	e602 <FlexCAN_SetSelfReception+0x1e>
    e5fe:	2200      	movs	r2, #0
    e600:	e001      	b.n	e606 <FlexCAN_SetSelfReception+0x22>
    e602:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e606:	431a      	orrs	r2, r3
    e608:	9b01      	ldr	r3, [sp, #4]
    e60a:	601a      	str	r2, [r3, #0]
}
    e60c:	bf00      	nop
    e60e:	b002      	add	sp, #8
    e610:	4770      	bx	lr

0000e612 <FlexCAN_IsFDEnabled>:
{
    e612:	b082      	sub	sp, #8
    e614:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    e616:	9b01      	ldr	r3, [sp, #4]
    e618:	681b      	ldr	r3, [r3, #0]
    e61a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    e61e:	2b00      	cmp	r3, #0
    e620:	bf14      	ite	ne
    e622:	2301      	movne	r3, #1
    e624:	2300      	moveq	r3, #0
    e626:	b2db      	uxtb	r3, r3
}
    e628:	4618      	mov	r0, r3
    e62a:	b002      	add	sp, #8
    e62c:	4770      	bx	lr

0000e62e <FlexCAN_SetIsoCan>:
{
    e62e:	b082      	sub	sp, #8
    e630:	9001      	str	r0, [sp, #4]
    e632:	460b      	mov	r3, r1
    e634:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ISOCANFDEN_MASK) | FLEXCAN_CTRL2_ISOCANFDEN(enable ? 1UL : 0UL);
    e638:	9b01      	ldr	r3, [sp, #4]
    e63a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e63c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    e640:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e644:	2a00      	cmp	r2, #0
    e646:	d002      	beq.n	e64e <FlexCAN_SetIsoCan+0x20>
    e648:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e64c:	e000      	b.n	e650 <FlexCAN_SetIsoCan+0x22>
    e64e:	2200      	movs	r2, #0
    e650:	431a      	orrs	r2, r3
    e652:	9b01      	ldr	r3, [sp, #4]
    e654:	635a      	str	r2, [r3, #52]	; 0x34
}
    e656:	bf00      	nop
    e658:	b002      	add	sp, #8
    e65a:	4770      	bx	lr

0000e65c <FlexCAN_SetEntireFrameArbitrationFieldComparison>:
{
    e65c:	b082      	sub	sp, #8
    e65e:	9001      	str	r0, [sp, #4]
    e660:	460b      	mov	r3, r1
    e662:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EACEN_MASK) | FLEXCAN_CTRL2_EACEN(enable ? 1UL : 0UL);
    e666:	9b01      	ldr	r3, [sp, #4]
    e668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e66a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    e66e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e672:	2a00      	cmp	r2, #0
    e674:	d002      	beq.n	e67c <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x20>
    e676:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    e67a:	e000      	b.n	e67e <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x22>
    e67c:	2200      	movs	r2, #0
    e67e:	431a      	orrs	r2, r3
    e680:	9b01      	ldr	r3, [sp, #4]
    e682:	635a      	str	r2, [r3, #52]	; 0x34
}
    e684:	bf00      	nop
    e686:	b002      	add	sp, #8
    e688:	4770      	bx	lr

0000e68a <FlexCAN_SetProtocolException>:
{
    e68a:	b082      	sub	sp, #8
    e68c:	9001      	str	r0, [sp, #4]
    e68e:	460b      	mov	r3, r1
    e690:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_PREXCEN_MASK) | FLEXCAN_CTRL2_PREXCEN(enable ? 1UL : 0UL);
    e694:	9b01      	ldr	r3, [sp, #4]
    e696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e698:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    e69c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e6a0:	2a00      	cmp	r2, #0
    e6a2:	d002      	beq.n	e6aa <FlexCAN_SetProtocolException+0x20>
    e6a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    e6a8:	e000      	b.n	e6ac <FlexCAN_SetProtocolException+0x22>
    e6aa:	2200      	movs	r2, #0
    e6ac:	431a      	orrs	r2, r3
    e6ae:	9b01      	ldr	r3, [sp, #4]
    e6b0:	635a      	str	r2, [r3, #52]	; 0x34
}
    e6b2:	bf00      	nop
    e6b4:	b002      	add	sp, #8
    e6b6:	4770      	bx	lr

0000e6b8 <FlexCAN_SetRemoteReqStore>:
{
    e6b8:	b082      	sub	sp, #8
    e6ba:	9001      	str	r0, [sp, #4]
    e6bc:	460b      	mov	r3, r1
    e6be:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RRS_MASK) | FLEXCAN_CTRL2_RRS(enable ? 1UL : 0UL);
    e6c2:	9b01      	ldr	r3, [sp, #4]
    e6c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e6c6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    e6ca:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e6ce:	2a00      	cmp	r2, #0
    e6d0:	d002      	beq.n	e6d8 <FlexCAN_SetRemoteReqStore+0x20>
    e6d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e6d6:	e000      	b.n	e6da <FlexCAN_SetRemoteReqStore+0x22>
    e6d8:	2200      	movs	r2, #0
    e6da:	431a      	orrs	r2, r3
    e6dc:	9b01      	ldr	r3, [sp, #4]
    e6de:	635a      	str	r2, [r3, #52]	; 0x34
}
    e6e0:	bf00      	nop
    e6e2:	b002      	add	sp, #8
    e6e4:	4770      	bx	lr

0000e6e6 <FlexCAN_SetBusOffAutorecovery>:
{
    e6e6:	b082      	sub	sp, #8
    e6e8:	9001      	str	r0, [sp, #4]
    e6ea:	460b      	mov	r3, r1
    e6ec:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_BOFFREC_MASK) | FLEXCAN_CTRL1_BOFFREC(enable ? 0UL : 1UL);
    e6f0:	9b01      	ldr	r3, [sp, #4]
    e6f2:	685b      	ldr	r3, [r3, #4]
    e6f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    e6f8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e6fc:	2a00      	cmp	r2, #0
    e6fe:	d001      	beq.n	e704 <FlexCAN_SetBusOffAutorecovery+0x1e>
    e700:	2200      	movs	r2, #0
    e702:	e000      	b.n	e706 <FlexCAN_SetBusOffAutorecovery+0x20>
    e704:	2240      	movs	r2, #64	; 0x40
    e706:	431a      	orrs	r2, r3
    e708:	9b01      	ldr	r3, [sp, #4]
    e70a:	605a      	str	r2, [r3, #4]
}
    e70c:	bf00      	nop
    e70e:	b002      	add	sp, #8
    e710:	4770      	bx	lr

0000e712 <FlexCAN_SetEdgeFilter>:
{
    e712:	b082      	sub	sp, #8
    e714:	9001      	str	r0, [sp, #4]
    e716:	460b      	mov	r3, r1
    e718:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EDFLTDIS_MASK) | FLEXCAN_CTRL2_EDFLTDIS(enable ? 0UL : 1UL);
    e71c:	9b01      	ldr	r3, [sp, #4]
    e71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e720:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    e724:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e728:	2a00      	cmp	r2, #0
    e72a:	d001      	beq.n	e730 <FlexCAN_SetEdgeFilter+0x1e>
    e72c:	2200      	movs	r2, #0
    e72e:	e001      	b.n	e734 <FlexCAN_SetEdgeFilter+0x22>
    e730:	f44f 6200 	mov.w	r2, #2048	; 0x800
    e734:	431a      	orrs	r2, r3
    e736:	9b01      	ldr	r3, [sp, #4]
    e738:	635a      	str	r2, [r3, #52]	; 0x34
}
    e73a:	bf00      	nop
    e73c:	b002      	add	sp, #8
    e73e:	4770      	bx	lr

0000e740 <FlexCAN_CanBitSampling>:
{
    e740:	b082      	sub	sp, #8
    e742:	9001      	str	r0, [sp, #4]
    e744:	460b      	mov	r3, r1
    e746:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_SMP_MASK) | FLEXCAN_CTRL1_SMP(enable ? 1UL : 0UL);
    e74a:	9b01      	ldr	r3, [sp, #4]
    e74c:	685b      	ldr	r3, [r3, #4]
    e74e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    e752:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e756:	2a00      	cmp	r2, #0
    e758:	d001      	beq.n	e75e <FlexCAN_CanBitSampling+0x1e>
    e75a:	2280      	movs	r2, #128	; 0x80
    e75c:	e000      	b.n	e760 <FlexCAN_CanBitSampling+0x20>
    e75e:	2200      	movs	r2, #0
    e760:	431a      	orrs	r2, r3
    e762:	9b01      	ldr	r3, [sp, #4]
    e764:	605a      	str	r2, [r3, #4]
}
    e766:	bf00      	nop
    e768:	b002      	add	sp, #8
    e76a:	4770      	bx	lr

0000e76c <FlexCAN_ComputeDLCValue>:
 * Function Name: FLEXCAN_ComputeDLCValue
 * Description  : Computes the DLC field value, given a payload size (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_ComputeDLCValue(uint8 payloadSize)
{
    e76c:	b084      	sub	sp, #16
    e76e:	4603      	mov	r3, r0
    e770:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 ret = 0xFFU;                   /* 0,  1,  2,  3,  4,  5,  6,  7,  8, */
    e774:	23ff      	movs	r3, #255	; 0xff
    e776:	9303      	str	r3, [sp, #12]
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES
                                          };

    if (payloadSize <= 64U)
    e778:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e77c:	2b40      	cmp	r3, #64	; 0x40
    e77e:	d804      	bhi.n	e78a <FlexCAN_ComputeDLCValue+0x1e>
    {
        ret = payload_code[payloadSize];
    e780:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e784:	4a03      	ldr	r2, [pc, #12]	; (e794 <FlexCAN_ComputeDLCValue+0x28>)
    e786:	5cd3      	ldrb	r3, [r2, r3]
    e788:	9303      	str	r3, [sp, #12]
    else
    {
        /* The argument is not a valid payload size will return 0xFF*/
    }

    return (uint8)ret;
    e78a:	9b03      	ldr	r3, [sp, #12]
    e78c:	b2db      	uxtb	r3, r3
}
    e78e:	4618      	mov	r0, r3
    e790:	b004      	add	sp, #16
    e792:	4770      	bx	lr
    e794:	000185fc 	.word	0x000185fc

0000e798 <FlexCAN_ClearRAM>:
 * Function Name : FLEXCAN_ClearRAM
 * Description   : Clears FlexCAN memory positions that require initialization.
 *
 *END**************************************************************************/
static void FlexCAN_ClearRAM(FLEXCAN_Type * base)
{
    e798:	b500      	push	{lr}
    e79a:	b087      	sub	sp, #28
    e79c:	9001      	str	r0, [sp, #4]
    uint32 databyte;
    uint32 RAM_size   = FlexCAN_GetMaxMbNum(base) * 4U;
    e79e:	9801      	ldr	r0, [sp, #4]
    e7a0:	f000 f8f6 	bl	e990 <FlexCAN_GetMaxMbNum>
    e7a4:	4603      	mov	r3, r0
    e7a6:	009b      	lsls	r3, r3, #2
    e7a8:	9304      	str	r3, [sp, #16]
    uint32 RXIMR_size = FlexCAN_GetMaxMbNum(base);
    e7aa:	9801      	ldr	r0, [sp, #4]
    e7ac:	f000 f8f0 	bl	e990 <FlexCAN_GetMaxMbNum>
    e7b0:	9003      	str	r0, [sp, #12]
    /* Address of base + ram offset to point to MB start address */
    volatile uint32 * RAM = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    e7b2:	9b01      	ldr	r3, [sp, #4]
    e7b4:	3380      	adds	r3, #128	; 0x80
    e7b6:	9302      	str	r3, [sp, #8]
    /* Clear MB region */
    for (databyte = 0U; databyte < RAM_size; databyte++)
    e7b8:	2300      	movs	r3, #0
    e7ba:	9305      	str	r3, [sp, #20]
    e7bc:	e008      	b.n	e7d0 <FlexCAN_ClearRAM+0x38>
    {
        RAM[databyte] = 0x0U;
    e7be:	9b05      	ldr	r3, [sp, #20]
    e7c0:	009b      	lsls	r3, r3, #2
    e7c2:	9a02      	ldr	r2, [sp, #8]
    e7c4:	4413      	add	r3, r2
    e7c6:	2200      	movs	r2, #0
    e7c8:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RAM_size; databyte++)
    e7ca:	9b05      	ldr	r3, [sp, #20]
    e7cc:	3301      	adds	r3, #1
    e7ce:	9305      	str	r3, [sp, #20]
    e7d0:	9a05      	ldr	r2, [sp, #20]
    e7d2:	9b04      	ldr	r3, [sp, #16]
    e7d4:	429a      	cmp	r2, r3
    e7d6:	d3f2      	bcc.n	e7be <FlexCAN_ClearRAM+0x26>
    }
    RAM = (volatile uint32 *)base->RXIMR;
    e7d8:	9b01      	ldr	r3, [sp, #4]
    e7da:	f503 6308 	add.w	r3, r3, #2176	; 0x880
    e7de:	9302      	str	r3, [sp, #8]
    /* Clear RXIMR region */
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    e7e0:	2300      	movs	r3, #0
    e7e2:	9305      	str	r3, [sp, #20]
    e7e4:	e008      	b.n	e7f8 <FlexCAN_ClearRAM+0x60>
    {
        RAM[databyte] = 0x0U;
    e7e6:	9b05      	ldr	r3, [sp, #20]
    e7e8:	009b      	lsls	r3, r3, #2
    e7ea:	9a02      	ldr	r2, [sp, #8]
    e7ec:	4413      	add	r3, r2
    e7ee:	2200      	movs	r2, #0
    e7f0:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    e7f2:	9b05      	ldr	r3, [sp, #20]
    e7f4:	3301      	adds	r3, #1
    e7f6:	9305      	str	r3, [sp, #20]
    e7f8:	9a05      	ldr	r2, [sp, #20]
    e7fa:	9b03      	ldr	r3, [sp, #12]
    e7fc:	429a      	cmp	r2, r3
    e7fe:	d3f2      	bcc.n	e7e6 <FlexCAN_ClearRAM+0x4e>
    }
#endif
    /* Clear WRMFRZ bit in CTRL2 Register to restrict write access to memory */
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_WRMFRZ_MASK) | FLEXCAN_CTRL2_WRMFRZ(0U);
#endif /* if FLEXCAN_IP_FEATURE_HAS_MEM_ERR_DET */
}
    e800:	bf00      	nop
    e802:	bf00      	nop
    e804:	b007      	add	sp, #28
    e806:	f85d fb04 	ldr.w	pc, [sp], #4

0000e80a <FlexCAN_ComputePayloadSize>:
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#else
static uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
{
    e80a:	b084      	sub	sp, #16
    e80c:	4603      	mov	r3, r0
    e80e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ret = 8U;
    e812:	2308      	movs	r3, #8
    e814:	f88d 300f 	strb.w	r3, [sp, #15]

    if (dlcValue <= 8U)
    e818:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e81c:	2b08      	cmp	r3, #8
    e81e:	d804      	bhi.n	e82a <FlexCAN_ComputePayloadSize+0x20>
    {
        ret = dlcValue;
    e820:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e824:	f88d 300f 	strb.w	r3, [sp, #15]
    e828:	e033      	b.n	e892 <FlexCAN_ComputePayloadSize+0x88>
    }
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    else
    {
        switch (dlcValue)
    e82a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e82e:	3b09      	subs	r3, #9
    e830:	2b06      	cmp	r3, #6
    e832:	d82d      	bhi.n	e890 <FlexCAN_ComputePayloadSize+0x86>
    e834:	a201      	add	r2, pc, #4	; (adr r2, e83c <FlexCAN_ComputePayloadSize+0x32>)
    e836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e83a:	bf00      	nop
    e83c:	0000e859 	.word	0x0000e859
    e840:	0000e861 	.word	0x0000e861
    e844:	0000e869 	.word	0x0000e869
    e848:	0000e871 	.word	0x0000e871
    e84c:	0000e879 	.word	0x0000e879
    e850:	0000e881 	.word	0x0000e881
    e854:	0000e889 	.word	0x0000e889
        {
            case FLEXCAN_IP_DLC_VALUE_12_BYTES:
                ret = 12U;
    e858:	230c      	movs	r3, #12
    e85a:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e85e:	e018      	b.n	e892 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_16_BYTES:
                ret = 16U;
    e860:	2310      	movs	r3, #16
    e862:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e866:	e014      	b.n	e892 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_20_BYTES:
                ret = 20U;
    e868:	2314      	movs	r3, #20
    e86a:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e86e:	e010      	b.n	e892 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_24_BYTES:
                ret = 24U;
    e870:	2318      	movs	r3, #24
    e872:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e876:	e00c      	b.n	e892 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_32_BYTES:
                ret = 32U;
    e878:	2320      	movs	r3, #32
    e87a:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e87e:	e008      	b.n	e892 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_48_BYTES:
                ret = 48U;
    e880:	2330      	movs	r3, #48	; 0x30
    e882:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e886:	e004      	b.n	e892 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_64_BYTES:
                ret = 64U;
    e888:	2340      	movs	r3, #64	; 0x40
    e88a:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e88e:	e000      	b.n	e892 <FlexCAN_ComputePayloadSize+0x88>
            default:
                /* The argument is not a valid DLC size */
                break;
    e890:	bf00      	nop
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    return ret;
    e892:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    e896:	4618      	mov	r0, r3
    e898:	b004      	add	sp, #16
    e89a:	4770      	bx	lr

0000e89c <FlexCAN_GetMsgBuffRegion>:
 * Function Name : FLEXCAN_GetMsgBuffRegion
 * Description   : Returns the start of a MB area, based on its index.
 *
 *END**************************************************************************/
volatile uint32 * FlexCAN_GetMsgBuffRegion(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    e89c:	b500      	push	{lr}
    e89e:	b08b      	sub	sp, #44	; 0x2c
    e8a0:	9001      	str	r0, [sp, #4]
    e8a2:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    e8a4:	2308      	movs	r3, #8
    e8a6:	f88d 3020 	strb.w	r3, [sp, #32]
    uint8 mb_size = 0U;
    e8aa:	2300      	movs	r3, #0
    e8ac:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ramBlockSize = 512U;
    e8b0:	f44f 7300 	mov.w	r3, #512	; 0x200
    e8b4:	9307      	str	r3, [sp, #28]
    uint16 ramBlockOffset = 0;
    e8b6:	2300      	movs	r3, #0
    e8b8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    uint8 msgBuffIdxBackup = (uint8)msgBuffIdx;
    e8bc:	9b00      	ldr	r3, [sp, #0]
    e8be:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint8 i=0U;
    e8c2:	2300      	movs	r3, #0
    e8c4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    uint8 maxMbNum=0U;
    e8c8:	2300      	movs	r3, #0
    e8ca:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    uint32 mb_index=0U;
    e8ce:	2300      	movs	r3, #0
    e8d0:	9306      	str	r3, [sp, #24]
    uint8 payload_size=0U;
    e8d2:	2300      	movs	r3, #0
    e8d4:	f88d 3017 	strb.w	r3, [sp, #23]
    volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    e8d8:	9b01      	ldr	r3, [sp, #4]
    e8da:	3380      	adds	r3, #128	; 0x80
    e8dc:	9304      	str	r3, [sp, #16]
    volatile uint32 * pAddressRet = NULL_PTR;
    e8de:	2300      	movs	r3, #0
    e8e0:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY == STD_ON)
    volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    e8e2:	2300      	movs	r3, #0
    e8e4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    e8e8:	e02d      	b.n	e946 <FlexCAN_GetMsgBuffRegion+0xaa>
    {
        payload_size = FlexCAN_GetPayloadSize(base, i);
    e8ea:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e8ee:	4619      	mov	r1, r3
    e8f0:	9801      	ldr	r0, [sp, #4]
    e8f2:	f000 fad1 	bl	ee98 <FlexCAN_GetPayloadSize>
    e8f6:	4603      	mov	r3, r0
    e8f8:	f88d 3017 	strb.w	r3, [sp, #23]
        mb_size = (uint8)(payload_size + arbitration_field_size);
    e8fc:	f89d 2017 	ldrb.w	r2, [sp, #23]
    e900:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e904:	4413      	add	r3, r2
    e906:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        maxMbNum = (uint8)(ramBlockSize / mb_size);
    e90a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    e90e:	9a07      	ldr	r2, [sp, #28]
    e910:	fbb2 f3f3 	udiv	r3, r2, r3
    e914:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        if (maxMbNum > msgBuffIdxBackup)
    e918:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    e91c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    e920:	429a      	cmp	r2, r3
    e922:	d815      	bhi.n	e950 <FlexCAN_GetMsgBuffRegion+0xb4>
        {
            break;
        }
        ramBlockOffset += 128U;
    e924:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    e928:	3380      	adds	r3, #128	; 0x80
    e92a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        msgBuffIdxBackup -= maxMbNum;
    e92e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    e932:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e936:	1ad3      	subs	r3, r2, r3
    e938:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    e93c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e940:	3301      	adds	r3, #1
    e942:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    e946:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e94a:	2b00      	cmp	r3, #0
    e94c:	d0cd      	beq.n	e8ea <FlexCAN_GetMsgBuffRegion+0x4e>
    e94e:	e000      	b.n	e952 <FlexCAN_GetMsgBuffRegion+0xb6>
            break;
    e950:	bf00      	nop
    }
    else
#endif
    {
        /* Multiply the MB index by the MB size (in words) */
        mb_index = (uint32)ramBlockOffset + (((uint32)msgBuffIdxBackup % (uint32)maxMbNum) * ((uint32)mb_size >> 2U));
    e952:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    e956:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    e95a:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    e95e:	fbb3 f0f2 	udiv	r0, r3, r2
    e962:	fb00 f202 	mul.w	r2, r0, r2
    e966:	1a9b      	subs	r3, r3, r2
    e968:	b2db      	uxtb	r3, r3
    e96a:	461a      	mov	r2, r3
    e96c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    e970:	089b      	lsrs	r3, r3, #2
    e972:	b2db      	uxtb	r3, r3
    e974:	fb02 f303 	mul.w	r3, r2, r3
    e978:	440b      	add	r3, r1
    e97a:	9306      	str	r3, [sp, #24]
        pAddressRet = &(RAM[mb_index]);
    e97c:	9b06      	ldr	r3, [sp, #24]
    e97e:	009b      	lsls	r3, r3, #2
    e980:	9a04      	ldr	r2, [sp, #16]
    e982:	4413      	add	r3, r2
    e984:	9303      	str	r3, [sp, #12]
    }

    return pAddressRet;
    e986:	9b03      	ldr	r3, [sp, #12]
}
    e988:	4618      	mov	r0, r3
    e98a:	b00b      	add	sp, #44	; 0x2c
    e98c:	f85d fb04 	ldr.w	pc, [sp], #4

0000e990 <FlexCAN_GetMaxMbNum>:
 * Function Name : FlexCAN_GetMaxMbNum
 * Description   : Computes the maximum RAM size occupied by MBs.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMaxMbNum(const FLEXCAN_Type * base)
{
    e990:	b084      	sub	sp, #16
    e992:	9001      	str	r0, [sp, #4]
    uint32 i, ret = 0u;
    e994:	2300      	movs	r3, #0
    e996:	9302      	str	r3, [sp, #8]
    static FLEXCAN_Type * const flexcanBase[] = IP_FLEXCAN_BASE_PTRS;
    static const uint32 maxMbNum[] = FLEXCAN_IP_FEATURE_MAX_MB_NUM_ARRAY;

    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    e998:	2300      	movs	r3, #0
    e99a:	9303      	str	r3, [sp, #12]
    e99c:	e00e      	b.n	e9bc <FlexCAN_GetMaxMbNum+0x2c>
    {
        if (base == flexcanBase[i])
    e99e:	4a0b      	ldr	r2, [pc, #44]	; (e9cc <FlexCAN_GetMaxMbNum+0x3c>)
    e9a0:	9b03      	ldr	r3, [sp, #12]
    e9a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9a6:	9a01      	ldr	r2, [sp, #4]
    e9a8:	429a      	cmp	r2, r3
    e9aa:	d104      	bne.n	e9b6 <FlexCAN_GetMaxMbNum+0x26>
        {
            ret = maxMbNum[i];
    e9ac:	4a08      	ldr	r2, [pc, #32]	; (e9d0 <FlexCAN_GetMaxMbNum+0x40>)
    e9ae:	9b03      	ldr	r3, [sp, #12]
    e9b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9b4:	9302      	str	r3, [sp, #8]
    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    e9b6:	9b03      	ldr	r3, [sp, #12]
    e9b8:	3301      	adds	r3, #1
    e9ba:	9303      	str	r3, [sp, #12]
    e9bc:	9b03      	ldr	r3, [sp, #12]
    e9be:	2b02      	cmp	r3, #2
    e9c0:	d9ed      	bls.n	e99e <FlexCAN_GetMaxMbNum+0xe>
        }
    }
    return ret;
    e9c2:	9b02      	ldr	r3, [sp, #8]
}
    e9c4:	4618      	mov	r0, r3
    e9c6:	b004      	add	sp, #16
    e9c8:	4770      	bx	lr
    e9ca:	bf00      	nop
    e9cc:	00018640 	.word	0x00018640
    e9d0:	0001864c 	.word	0x0001864c

0000e9d4 <FlexCAN_EnterFreezeMode>:
 * Function Name : FLEXCAN_EnterFreezeMode
 * Description   : Enter the freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnterFreezeMode(FLEXCAN_Type * base)
{
    e9d4:	b500      	push	{lr}
    e9d6:	b087      	sub	sp, #28
    e9d8:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    e9da:	2300      	movs	r3, #0
    e9dc:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    e9de:	2300      	movs	r3, #0
    e9e0:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e9e2:	2100      	movs	r1, #0
    e9e4:	4820      	ldr	r0, [pc, #128]	; (ea68 <FlexCAN_EnterFreezeMode+0x94>)
    e9e6:	f7f3 fab1 	bl	1f4c <OsIf_MicrosToTicks>
    e9ea:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    e9ec:	2300      	movs	r3, #0
    e9ee:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    e9f0:	f005 fa36 	bl	13e60 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(1U);
    e9f4:	9b01      	ldr	r3, [sp, #4]
    e9f6:	681b      	ldr	r3, [r3, #0]
    e9f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    e9fc:	9b01      	ldr	r3, [sp, #4]
    e9fe:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(1U);
    ea00:	9b01      	ldr	r3, [sp, #4]
    ea02:	681b      	ldr	r3, [r3, #0]
    ea04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
    ea08:	9b01      	ldr	r3, [sp, #4]
    ea0a:	601a      	str	r2, [r3, #0]
    if (((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U)
    ea0c:	9b01      	ldr	r3, [sp, #4]
    ea0e:	681b      	ldr	r3, [r3, #0]
    ea10:	2b00      	cmp	r3, #0
    ea12:	da05      	bge.n	ea20 <FlexCAN_EnterFreezeMode+0x4c>
    {
        base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    ea14:	9b01      	ldr	r3, [sp, #4]
    ea16:	681b      	ldr	r3, [r3, #0]
    ea18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    ea1c:	9b01      	ldr	r3, [sp, #4]
    ea1e:	601a      	str	r2, [r3, #0]
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    ea20:	f005 fa4a 	bl	13eb8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ea24:	2000      	movs	r0, #0
    ea26:	f7f3 fa45 	bl	1eb4 <OsIf_GetCounter>
    ea2a:	4603      	mov	r3, r0
    ea2c:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    ea2e:	e00f      	b.n	ea50 <FlexCAN_EnterFreezeMode+0x7c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ea30:	ab02      	add	r3, sp, #8
    ea32:	2100      	movs	r1, #0
    ea34:	4618      	mov	r0, r3
    ea36:	f7f3 fa56 	bl	1ee6 <OsIf_GetElapsed>
    ea3a:	4602      	mov	r2, r0
    ea3c:	9b05      	ldr	r3, [sp, #20]
    ea3e:	4413      	add	r3, r2
    ea40:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    ea42:	9a05      	ldr	r2, [sp, #20]
    ea44:	9b03      	ldr	r3, [sp, #12]
    ea46:	429a      	cmp	r2, r3
    ea48:	d302      	bcc.n	ea50 <FlexCAN_EnterFreezeMode+0x7c>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    ea4a:	2303      	movs	r3, #3
    ea4c:	9304      	str	r3, [sp, #16]
            break;
    ea4e:	e005      	b.n	ea5c <FlexCAN_EnterFreezeMode+0x88>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    ea50:	9b01      	ldr	r3, [sp, #4]
    ea52:	681b      	ldr	r3, [r3, #0]
    ea54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    ea58:	2b00      	cmp	r3, #0
    ea5a:	d0e9      	beq.n	ea30 <FlexCAN_EnterFreezeMode+0x5c>
        }
    }

    return returnResult;
    ea5c:	9b04      	ldr	r3, [sp, #16]
}
    ea5e:	4618      	mov	r0, r3
    ea60:	b007      	add	sp, #28
    ea62:	f85d fb04 	ldr.w	pc, [sp], #4
    ea66:	bf00      	nop
    ea68:	000f4240 	.word	0x000f4240

0000ea6c <FlexCAN_Enable>:
 * Function Name : FlexCAN_Enable
 * Description   : Enable the clock for FlexCAN Module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Enable(FLEXCAN_Type * base)
{
    ea6c:	b500      	push	{lr}
    ea6e:	b087      	sub	sp, #28
    ea70:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    ea72:	2300      	movs	r3, #0
    ea74:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    ea76:	2300      	movs	r3, #0
    ea78:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ea7a:	2100      	movs	r1, #0
    ea7c:	4818      	ldr	r0, [pc, #96]	; (eae0 <FlexCAN_Enable+0x74>)
    ea7e:	f7f3 fa65 	bl	1f4c <OsIf_MicrosToTicks>
    ea82:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    ea84:	2300      	movs	r3, #0
    ea86:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    ea88:	f005 fa3c 	bl	13f04 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>

    /* Enable Module */
    base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    ea8c:	9b01      	ldr	r3, [sp, #4]
    ea8e:	681b      	ldr	r3, [r3, #0]
    ea90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    ea94:	9b01      	ldr	r3, [sp, #4]
    ea96:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    ea98:	f005 fa60 	bl	13f5c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ea9c:	2000      	movs	r0, #0
    ea9e:	f7f3 fa09 	bl	1eb4 <OsIf_GetCounter>
    eaa2:	4603      	mov	r3, r0
    eaa4:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    eaa6:	e00f      	b.n	eac8 <FlexCAN_Enable+0x5c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    eaa8:	ab02      	add	r3, sp, #8
    eaaa:	2100      	movs	r1, #0
    eaac:	4618      	mov	r0, r3
    eaae:	f7f3 fa1a 	bl	1ee6 <OsIf_GetElapsed>
    eab2:	4602      	mov	r2, r0
    eab4:	9b05      	ldr	r3, [sp, #20]
    eab6:	4413      	add	r3, r2
    eab8:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    eaba:	9a05      	ldr	r2, [sp, #20]
    eabc:	9b03      	ldr	r3, [sp, #12]
    eabe:	429a      	cmp	r2, r3
    eac0:	d302      	bcc.n	eac8 <FlexCAN_Enable+0x5c>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    eac2:	2303      	movs	r3, #3
    eac4:	9304      	str	r3, [sp, #16]
            break;
    eac6:	e005      	b.n	ead4 <FlexCAN_Enable+0x68>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    eac8:	9b01      	ldr	r3, [sp, #4]
    eaca:	681b      	ldr	r3, [r3, #0]
    eacc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    ead0:	2b00      	cmp	r3, #0
    ead2:	d0e9      	beq.n	eaa8 <FlexCAN_Enable+0x3c>
        }
    }
    return returnValue;
    ead4:	9b04      	ldr	r3, [sp, #16]
}
    ead6:	4618      	mov	r0, r3
    ead8:	b007      	add	sp, #28
    eada:	f85d fb04 	ldr.w	pc, [sp], #4
    eade:	bf00      	nop
    eae0:	000f4240 	.word	0x000f4240

0000eae4 <FlexCAN_ExitFreezeMode>:
 * Function Name : FLEXCAN_ExitFreezeMode
 * Description   : Exit of freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_ExitFreezeMode(FLEXCAN_Type * base)
{
    eae4:	b500      	push	{lr}
    eae6:	b087      	sub	sp, #28
    eae8:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    eaea:	2300      	movs	r3, #0
    eaec:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    eaee:	2300      	movs	r3, #0
    eaf0:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    eaf2:	2100      	movs	r1, #0
    eaf4:	481b      	ldr	r0, [pc, #108]	; (eb64 <FlexCAN_ExitFreezeMode+0x80>)
    eaf6:	f7f3 fa29 	bl	1f4c <OsIf_MicrosToTicks>
    eafa:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    eafc:	2300      	movs	r3, #0
    eafe:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    eb00:	f005 fa52 	bl	13fa8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(0U);
    eb04:	9b01      	ldr	r3, [sp, #4]
    eb06:	681b      	ldr	r3, [r3, #0]
    eb08:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
    eb0c:	9b01      	ldr	r3, [sp, #4]
    eb0e:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(0U);
    eb10:	9b01      	ldr	r3, [sp, #4]
    eb12:	681b      	ldr	r3, [r3, #0]
    eb14:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    eb18:	9b01      	ldr	r3, [sp, #4]
    eb1a:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    eb1c:	f005 fa70 	bl	14000 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    /* Wait till exit freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    eb20:	2000      	movs	r0, #0
    eb22:	f7f3 f9c7 	bl	1eb4 <OsIf_GetCounter>
    eb26:	4603      	mov	r3, r0
    eb28:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    eb2a:	e00f      	b.n	eb4c <FlexCAN_ExitFreezeMode+0x68>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    eb2c:	ab02      	add	r3, sp, #8
    eb2e:	2100      	movs	r1, #0
    eb30:	4618      	mov	r0, r3
    eb32:	f7f3 f9d8 	bl	1ee6 <OsIf_GetElapsed>
    eb36:	4602      	mov	r2, r0
    eb38:	9b05      	ldr	r3, [sp, #20]
    eb3a:	4413      	add	r3, r2
    eb3c:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    eb3e:	9a05      	ldr	r2, [sp, #20]
    eb40:	9b03      	ldr	r3, [sp, #12]
    eb42:	429a      	cmp	r2, r3
    eb44:	d302      	bcc.n	eb4c <FlexCAN_ExitFreezeMode+0x68>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    eb46:	2303      	movs	r3, #3
    eb48:	9304      	str	r3, [sp, #16]
            break;
    eb4a:	e005      	b.n	eb58 <FlexCAN_ExitFreezeMode+0x74>
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    eb4c:	9b01      	ldr	r3, [sp, #4]
    eb4e:	681b      	ldr	r3, [r3, #0]
    eb50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    eb54:	2b00      	cmp	r3, #0
    eb56:	d1e9      	bne.n	eb2c <FlexCAN_ExitFreezeMode+0x48>
        }
    }
    return returnValue;
    eb58:	9b04      	ldr	r3, [sp, #16]
}
    eb5a:	4618      	mov	r0, r3
    eb5c:	b007      	add	sp, #28
    eb5e:	f85d fb04 	ldr.w	pc, [sp], #4
    eb62:	bf00      	nop
    eb64:	000f4240 	.word	0x000f4240

0000eb68 <FlexCAN_Disable>:
 * Description   : Disable FlexCAN module.
 * This function will disable FlexCAN module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Disable(FLEXCAN_Type * base)
{
    eb68:	b500      	push	{lr}
    eb6a:	b087      	sub	sp, #28
    eb6c:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    eb6e:	2300      	movs	r3, #0
    eb70:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    eb72:	2300      	movs	r3, #0
    eb74:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    eb76:	2100      	movs	r1, #0
    eb78:	481a      	ldr	r0, [pc, #104]	; (ebe4 <FlexCAN_Disable+0x7c>)
    eb7a:	f7f3 f9e7 	bl	1f4c <OsIf_MicrosToTicks>
    eb7e:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    eb80:	2300      	movs	r3, #0
    eb82:	9304      	str	r3, [sp, #16]

    /* To access the memory mapped registers */
    /* Enter disable mode (hard reset). */
    if (0U == ((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT))
    eb84:	9b01      	ldr	r3, [sp, #4]
    eb86:	681b      	ldr	r3, [r3, #0]
    eb88:	2b00      	cmp	r3, #0
    eb8a:	db25      	blt.n	ebd8 <FlexCAN_Disable+0x70>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    eb8c:	f005 fa5e 	bl	1404c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Clock disable (module) */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MDIS_MASK) | FLEXCAN_MCR_MDIS(1U);
    eb90:	9b01      	ldr	r3, [sp, #4]
    eb92:	681b      	ldr	r3, [r3, #0]
    eb94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    eb98:	9b01      	ldr	r3, [sp, #4]
    eb9a:	601a      	str	r2, [r3, #0]
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    eb9c:	f005 fa82 	bl	140a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Wait until disable mode acknowledged */
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    eba0:	2000      	movs	r0, #0
    eba2:	f7f3 f987 	bl	1eb4 <OsIf_GetCounter>
    eba6:	4603      	mov	r3, r0
    eba8:	9302      	str	r3, [sp, #8]
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    ebaa:	e00f      	b.n	ebcc <FlexCAN_Disable+0x64>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ebac:	ab02      	add	r3, sp, #8
    ebae:	2100      	movs	r1, #0
    ebb0:	4618      	mov	r0, r3
    ebb2:	f7f3 f998 	bl	1ee6 <OsIf_GetElapsed>
    ebb6:	4602      	mov	r2, r0
    ebb8:	9b05      	ldr	r3, [sp, #20]
    ebba:	4413      	add	r3, r2
    ebbc:	9305      	str	r3, [sp, #20]
            if (timeElapsed >= uS2Ticks)
    ebbe:	9a05      	ldr	r2, [sp, #20]
    ebc0:	9b03      	ldr	r3, [sp, #12]
    ebc2:	429a      	cmp	r2, r3
    ebc4:	d302      	bcc.n	ebcc <FlexCAN_Disable+0x64>
            {
                returnResult = FLEXCAN_STATUS_TIMEOUT;
    ebc6:	2303      	movs	r3, #3
    ebc8:	9304      	str	r3, [sp, #16]
                break;
    ebca:	e005      	b.n	ebd8 <FlexCAN_Disable+0x70>
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    ebcc:	9b01      	ldr	r3, [sp, #4]
    ebce:	681b      	ldr	r3, [r3, #0]
    ebd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    ebd4:	2b00      	cmp	r3, #0
    ebd6:	d0e9      	beq.n	ebac <FlexCAN_Disable+0x44>
            }
        }
    }
    return returnResult;
    ebd8:	9b04      	ldr	r3, [sp, #16]
}
    ebda:	4618      	mov	r0, r3
    ebdc:	b007      	add	sp, #28
    ebde:	f85d fb04 	ldr.w	pc, [sp], #4
    ebe2:	bf00      	nop
    ebe4:	000f4240 	.word	0x000f4240

0000ebe8 <FlexCAN_SetErrIntCmd>:
 * Description   : Enable the error interrupts.
 * This function will enable Error interrupt.
 *
 *END**************************************************************************/
void FlexCAN_SetErrIntCmd(FLEXCAN_Type * base, flexcan_int_type_t errType, boolean enable)
{
    ebe8:	b500      	push	{lr}
    ebea:	b087      	sub	sp, #28
    ebec:	9003      	str	r0, [sp, #12]
    ebee:	9102      	str	r1, [sp, #8]
    ebf0:	4613      	mov	r3, r2
    ebf2:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 temp = (uint32)errType;
    ebf6:	9b02      	ldr	r3, [sp, #8]
    ebf8:	9305      	str	r3, [sp, #20]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    ebfa:	f005 fa79 	bl	140f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
    if (enable)
    ebfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ec02:	2b00      	cmp	r3, #0
    ec04:	d020      	beq.n	ec48 <FlexCAN_SetErrIntCmd+0x60>
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    ec06:	9b02      	ldr	r3, [sp, #8]
    ec08:	f244 0201 	movw	r2, #16385	; 0x4001
    ec0c:	4293      	cmp	r3, r2
    ec0e:	d106      	bne.n	ec1e <FlexCAN_SetErrIntCmd+0x36>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(1U);
    ec10:	9b03      	ldr	r3, [sp, #12]
    ec12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ec14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    ec18:	9b03      	ldr	r3, [sp, #12]
    ec1a:	635a      	str	r2, [r3, #52]	; 0x34
    ec1c:	e03a      	b.n	ec94 <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            if ((FLEXCAN_INT_RX_WARNING == errType) || (FLEXCAN_INT_TX_WARNING == errType))
    ec1e:	9b02      	ldr	r3, [sp, #8]
    ec20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    ec24:	d003      	beq.n	ec2e <FlexCAN_SetErrIntCmd+0x46>
    ec26:	9b02      	ldr	r3, [sp, #8]
    ec28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    ec2c:	d105      	bne.n	ec3a <FlexCAN_SetErrIntCmd+0x52>
            {
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(1U);
    ec2e:	9b03      	ldr	r3, [sp, #12]
    ec30:	681b      	ldr	r3, [r3, #0]
    ec32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    ec36:	9b03      	ldr	r3, [sp, #12]
    ec38:	601a      	str	r2, [r3, #0]
            }
            (base->CTRL1) = ((base->CTRL1) | (temp));
    ec3a:	9b03      	ldr	r3, [sp, #12]
    ec3c:	685a      	ldr	r2, [r3, #4]
    ec3e:	9b05      	ldr	r3, [sp, #20]
    ec40:	431a      	orrs	r2, r3
    ec42:	9b03      	ldr	r3, [sp, #12]
    ec44:	605a      	str	r2, [r3, #4]
    ec46:	e025      	b.n	ec94 <FlexCAN_SetErrIntCmd+0xac>
        }
    }
    else
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    ec48:	9b02      	ldr	r3, [sp, #8]
    ec4a:	f244 0201 	movw	r2, #16385	; 0x4001
    ec4e:	4293      	cmp	r3, r2
    ec50:	d106      	bne.n	ec60 <FlexCAN_SetErrIntCmd+0x78>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(0U);
    ec52:	9b03      	ldr	r3, [sp, #12]
    ec54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ec56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    ec5a:	9b03      	ldr	r3, [sp, #12]
    ec5c:	635a      	str	r2, [r3, #52]	; 0x34
    ec5e:	e019      	b.n	ec94 <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            (base->CTRL1) = ((base->CTRL1) & ~(temp));
    ec60:	9b03      	ldr	r3, [sp, #12]
    ec62:	685a      	ldr	r2, [r3, #4]
    ec64:	9b05      	ldr	r3, [sp, #20]
    ec66:	43db      	mvns	r3, r3
    ec68:	401a      	ands	r2, r3
    ec6a:	9b03      	ldr	r3, [sp, #12]
    ec6c:	605a      	str	r2, [r3, #4]
            temp = base->CTRL1;
    ec6e:	9b03      	ldr	r3, [sp, #12]
    ec70:	685b      	ldr	r3, [r3, #4]
    ec72:	9305      	str	r3, [sp, #20]
            if ((0U == (temp & (uint32)FLEXCAN_INT_RX_WARNING)) && (0U == (temp & (uint32)FLEXCAN_INT_TX_WARNING)))
    ec74:	9b05      	ldr	r3, [sp, #20]
    ec76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    ec7a:	2b00      	cmp	r3, #0
    ec7c:	d10a      	bne.n	ec94 <FlexCAN_SetErrIntCmd+0xac>
    ec7e:	9b05      	ldr	r3, [sp, #20]
    ec80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    ec84:	2b00      	cmp	r3, #0
    ec86:	d105      	bne.n	ec94 <FlexCAN_SetErrIntCmd+0xac>
            {
                /* If WRNEN disabled then both FLEXCAN_INT_RX_WARNING and FLEXCAN_INT_TX_WARNING will be disabled */
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(0U);
    ec88:	9b03      	ldr	r3, [sp, #12]
    ec8a:	681b      	ldr	r3, [r3, #0]
    ec8c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
    ec90:	9b03      	ldr	r3, [sp, #12]
    ec92:	601a      	str	r2, [r3, #0]
            }
        }
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    ec94:	f005 fa58 	bl	14148 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
}
    ec98:	bf00      	nop
    ec9a:	b007      	add	sp, #28
    ec9c:	f85d fb04 	ldr.w	pc, [sp], #4

0000eca0 <FlexCAN_Init>:
 * buffers, initialize all message buffers as inactive, enable RX FIFO
 * if needed, mask all mask bits, and disable all MB interrupts.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Init(FLEXCAN_Type * base)
{
    eca0:	b500      	push	{lr}
    eca2:	b087      	sub	sp, #28
    eca4:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    eca6:	2300      	movs	r3, #0
    eca8:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    ecaa:	2300      	movs	r3, #0
    ecac:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ecae:	2100      	movs	r1, #0
    ecb0:	4833      	ldr	r0, [pc, #204]	; (ed80 <FlexCAN_Init+0xe0>)
    ecb2:	f7f3 f94b 	bl	1f4c <OsIf_MicrosToTicks>
    ecb6:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    ecb8:	2300      	movs	r3, #0
    ecba:	9304      	str	r3, [sp, #16]

    /* Reset the FLEXCAN */
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SOFTRST_MASK) | FLEXCAN_MCR_SOFTRST(1U);
    ecbc:	9b01      	ldr	r3, [sp, #4]
    ecbe:	681b      	ldr	r3, [r3, #0]
    ecc0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
    ecc4:	9b01      	ldr	r3, [sp, #4]
    ecc6:	601a      	str	r2, [r3, #0]
    /* Wait for reset cycle to complete */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ecc8:	2000      	movs	r0, #0
    ecca:	f7f3 f8f3 	bl	1eb4 <OsIf_GetCounter>
    ecce:	4603      	mov	r3, r0
    ecd0:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    ecd2:	e00f      	b.n	ecf4 <FlexCAN_Init+0x54>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ecd4:	ab02      	add	r3, sp, #8
    ecd6:	2100      	movs	r1, #0
    ecd8:	4618      	mov	r0, r3
    ecda:	f7f3 f904 	bl	1ee6 <OsIf_GetElapsed>
    ecde:	4602      	mov	r2, r0
    ece0:	9b05      	ldr	r3, [sp, #20]
    ece2:	4413      	add	r3, r2
    ece4:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    ece6:	9a05      	ldr	r2, [sp, #20]
    ece8:	9b03      	ldr	r3, [sp, #12]
    ecea:	429a      	cmp	r2, r3
    ecec:	d302      	bcc.n	ecf4 <FlexCAN_Init+0x54>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    ecee:	2303      	movs	r3, #3
    ecf0:	9304      	str	r3, [sp, #16]
            break;
    ecf2:	e005      	b.n	ed00 <FlexCAN_Init+0x60>
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    ecf4:	9b01      	ldr	r3, [sp, #4]
    ecf6:	681b      	ldr	r3, [r3, #0]
    ecf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    ecfc:	2b00      	cmp	r3, #0
    ecfe:	d1e9      	bne.n	ecd4 <FlexCAN_Init+0x34>
        }
    }
    if (FLEXCAN_STATUS_SUCCESS == returnResult)
    ed00:	9b04      	ldr	r3, [sp, #16]
    ed02:	2b00      	cmp	r3, #0
    ed04:	d136      	bne.n	ed74 <FlexCAN_Init+0xd4>
    {
        /* Avoid Abort Transmission, use Inactive MB */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_AEN_MASK) | FLEXCAN_MCR_AEN(1U);
    ed06:	9b01      	ldr	r3, [sp, #4]
    ed08:	681b      	ldr	r3, [r3, #0]
    ed0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    ed0e:	9b01      	ldr	r3, [sp, #4]
    ed10:	601a      	str	r2, [r3, #0]
        /* Clear FlexCAN memory */
        FlexCAN_ClearRAM(base);
    ed12:	9801      	ldr	r0, [sp, #4]
    ed14:	f7ff fd40 	bl	e798 <FlexCAN_ClearRAM>
        /* Rx global mask*/
        (base->RXMGMASK) = (uint32)(FLEXCAN_RXMGMASK_MG_MASK);
    ed18:	9b01      	ldr	r3, [sp, #4]
    ed1a:	f04f 32ff 	mov.w	r2, #4294967295
    ed1e:	611a      	str	r2, [r3, #16]
        /* Rx reg 14 mask*/
        (base->RX14MASK) =  (uint32)(FLEXCAN_RX14MASK_RX14M_MASK);
    ed20:	9b01      	ldr	r3, [sp, #4]
    ed22:	f04f 32ff 	mov.w	r2, #4294967295
    ed26:	615a      	str	r2, [r3, #20]
        /* Rx reg 15 mask*/
        (base->RX15MASK) = (uint32)(FLEXCAN_RX15MASK_RX15M_MASK);
    ed28:	9b01      	ldr	r3, [sp, #4]
    ed2a:	f04f 32ff 	mov.w	r2, #4294967295
    ed2e:	619a      	str	r2, [r3, #24]
        /* Disable all MB interrupts */
        (base->IMASK1) = 0x0;
    ed30:	9b01      	ldr	r3, [sp, #4]
    ed32:	2200      	movs	r2, #0
    ed34:	629a      	str	r2, [r3, #40]	; 0x28
        /* Clear all MB interrupt flags */
        (base->IFLAG1) = FLEXCAN_IMASK1_BUF31TO0M_MASK;
    ed36:	9b01      	ldr	r3, [sp, #4]
    ed38:	f04f 32ff 	mov.w	r2, #4294967295
    ed3c:	631a      	str	r2, [r3, #48]	; 0x30
            (base->IMASK4) = 0x0;
            (base->IFLAG4) = FLEXCAN_IMASK4_BUF127TO96M_MASK;
        }
#endif
        /* Clear all error interrupt flags */
        (base->ESR1) = FLEXCAN_IP_ALL_INT;
    ed3e:	9b01      	ldr	r3, [sp, #4]
    ed40:	4a10      	ldr	r2, [pc, #64]	; (ed84 <FlexCAN_Init+0xe4>)
    ed42:	621a      	str	r2, [r3, #32]
        /* clear registers which are not effected by soft reset */
        base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    ed44:	9b01      	ldr	r3, [sp, #4]
    ed46:	2200      	movs	r2, #0
    ed48:	605a      	str	r2, [r3, #4]
        base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    ed4a:	9b01      	ldr	r3, [sp, #4]
    ed4c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    ed50:	635a      	str	r2, [r3, #52]	; 0x34
        base->CBT   = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    ed52:	9b01      	ldr	r3, [sp, #4]
    ed54:	2200      	movs	r2, #0
    ed56:	651a      	str	r2, [r3, #80]	; 0x50
        base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
        base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    ed58:	9801      	ldr	r0, [sp, #4]
    ed5a:	f000 f85b 	bl	ee14 <FlexCAN_IsFDAvailable>
    ed5e:	4603      	mov	r3, r0
    ed60:	2b00      	cmp	r3, #0
    ed62:	d007      	beq.n	ed74 <FlexCAN_Init+0xd4>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    ed64:	9b01      	ldr	r3, [sp, #4]
    ed66:	2200      	movs	r2, #0
    ed68:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    ed6c:	9b01      	ldr	r3, [sp, #4]
    ed6e:	4a06      	ldr	r2, [pc, #24]	; (ed88 <FlexCAN_Init+0xe8>)
    ed70:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    #if defined(CAN_FEATURE_S32K1XX)
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
#endif /* (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON) */
    }
    return returnResult;
    ed74:	9b04      	ldr	r3, [sp, #16]
}
    ed76:	4618      	mov	r0, r3
    ed78:	b007      	add	sp, #28
    ed7a:	f85d fb04 	ldr.w	pc, [sp], #4
    ed7e:	bf00      	nop
    ed80:	000f4240 	.word	0x000f4240
    ed84:	003b0006 	.word	0x003b0006
    ed88:	80004100 	.word	0x80004100

0000ed8c <FlexCAN_EnableRxFifo>:
 * This function will enable the Rx FIFO feature.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnableRxFifo(FLEXCAN_Type * base,
                                         uint32 numOfFilters)
{
    ed8c:	b500      	push	{lr}
    ed8e:	b087      	sub	sp, #28
    ed90:	9001      	str	r0, [sp, #4]
    ed92:	9100      	str	r1, [sp, #0]
    uint32 i;
    uint16 noOfMbx = (uint16)FlexCAN_GetMaxMbNum(base);
    ed94:	9801      	ldr	r0, [sp, #4]
    ed96:	f7ff fdfb 	bl	e990 <FlexCAN_GetMaxMbNum>
    ed9a:	4603      	mov	r3, r0
    ed9c:	f8ad 300e 	strh.w	r3, [sp, #14]
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    eda0:	2300      	movs	r3, #0
    eda2:	9304      	str	r3, [sp, #16]

    /* RxFIFO cannot be enabled if FD is enabled */
    if (((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U)
    eda4:	9b01      	ldr	r3, [sp, #4]
    eda6:	681b      	ldr	r3, [r3, #0]
    eda8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    edac:	2b00      	cmp	r3, #0
    edae:	d001      	beq.n	edb4 <FlexCAN_EnableRxFifo+0x28>
    {
        stat = FLEXCAN_STATUS_ERROR;
    edb0:	2301      	movs	r3, #1
    edb2:	9304      	str	r3, [sp, #16]
    }
    if (FLEXCAN_STATUS_SUCCESS == stat)
    edb4:	9b04      	ldr	r3, [sp, #16]
    edb6:	2b00      	cmp	r3, #0
    edb8:	d127      	bne.n	ee0a <FlexCAN_EnableRxFifo+0x7e>
    {
        /* Enable RX FIFO */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_RFEN_MASK) | FLEXCAN_MCR_RFEN(1U);
    edba:	9b01      	ldr	r3, [sp, #4]
    edbc:	681b      	ldr	r3, [r3, #0]
    edbe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
    edc2:	9b01      	ldr	r3, [sp, #4]
    edc4:	601a      	str	r2, [r3, #0]
        /* Set the number of the RX FIFO filters needed */
        base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RFFN_MASK) | ((numOfFilters << FLEXCAN_CTRL2_RFFN_SHIFT) & FLEXCAN_CTRL2_RFFN_MASK);
    edc6:	9b01      	ldr	r3, [sp, #4]
    edc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    edca:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    edce:	9b00      	ldr	r3, [sp, #0]
    edd0:	061b      	lsls	r3, r3, #24
    edd2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    edd6:	431a      	orrs	r2, r3
    edd8:	9b01      	ldr	r3, [sp, #4]
    edda:	635a      	str	r2, [r3, #52]	; 0x34
        /* RX FIFO global mask, take in consideration all filter fields*/
        (base->RXFGMASK) = FLEXCAN_RXFGMASK_FGM_MASK;
    eddc:	9b01      	ldr	r3, [sp, #4]
    edde:	f04f 32ff 	mov.w	r2, #4294967295
    ede2:	649a      	str	r2, [r3, #72]	; 0x48

        for (i = 0U; i < noOfMbx; i++)
    ede4:	2300      	movs	r3, #0
    ede6:	9305      	str	r3, [sp, #20]
    ede8:	e00a      	b.n	ee00 <FlexCAN_EnableRxFifo+0x74>
        {
            /* RX individual mask */
            base->RXIMR[i] = (FLEXCAN_RXIMR_MI_MASK << FLEXCAN_IP_ID_EXT_SHIFT) & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    edea:	9b01      	ldr	r3, [sp, #4]
    edec:	9a05      	ldr	r2, [sp, #20]
    edee:	f502 7208 	add.w	r2, r2, #544	; 0x220
    edf2:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    edf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = 0U; i < noOfMbx; i++)
    edfa:	9b05      	ldr	r3, [sp, #20]
    edfc:	3301      	adds	r3, #1
    edfe:	9305      	str	r3, [sp, #20]
    ee00:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ee04:	9a05      	ldr	r2, [sp, #20]
    ee06:	429a      	cmp	r2, r3
    ee08:	d3ef      	bcc.n	edea <FlexCAN_EnableRxFifo+0x5e>
        }
    }
    return stat;
    ee0a:	9b04      	ldr	r3, [sp, #16]
}
    ee0c:	4618      	mov	r0, r3
    ee0e:	b007      	add	sp, #28
    ee10:	f85d fb04 	ldr.w	pc, [sp], #4

0000ee14 <FlexCAN_IsFDAvailable>:
 * Description   : Checks if FlexCAN has FD Support.
 * This function is private.
 *
 *END**************************************************************************/
boolean FlexCAN_IsFDAvailable(const FLEXCAN_Type * base)
{
    ee14:	b084      	sub	sp, #16
    ee16:	9001      	str	r0, [sp, #4]
    uint32 i=0U;
    ee18:	2300      	movs	r3, #0
    ee1a:	9303      	str	r3, [sp, #12]
    static FLEXCAN_Type * const flexcanBase[] = CAN_BASE_PTRS_HAS_FD;
    boolean returnValue = FALSE;
    ee1c:	2300      	movs	r3, #0
    ee1e:	f88d 300b 	strb.w	r3, [sp, #11]
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    ee22:	2300      	movs	r3, #0
    ee24:	9303      	str	r3, [sp, #12]
    ee26:	e00d      	b.n	ee44 <FlexCAN_IsFDAvailable+0x30>
    {
        if (base == flexcanBase[i])
    ee28:	4a0a      	ldr	r2, [pc, #40]	; (ee54 <FlexCAN_IsFDAvailable+0x40>)
    ee2a:	9b03      	ldr	r3, [sp, #12]
    ee2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee30:	9a01      	ldr	r2, [sp, #4]
    ee32:	429a      	cmp	r2, r3
    ee34:	d103      	bne.n	ee3e <FlexCAN_IsFDAvailable+0x2a>
        {
            returnValue = TRUE;
    ee36:	2301      	movs	r3, #1
    ee38:	f88d 300b 	strb.w	r3, [sp, #11]
            break;
    ee3c:	e005      	b.n	ee4a <FlexCAN_IsFDAvailable+0x36>
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    ee3e:	9b03      	ldr	r3, [sp, #12]
    ee40:	3301      	adds	r3, #1
    ee42:	9303      	str	r3, [sp, #12]
    ee44:	9b03      	ldr	r3, [sp, #12]
    ee46:	2b00      	cmp	r3, #0
    ee48:	d0ee      	beq.n	ee28 <FlexCAN_IsFDAvailable+0x14>
        }
    }

    return returnValue;
    ee4a:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    ee4e:	4618      	mov	r0, r3
    ee50:	b004      	add	sp, #16
    ee52:	4770      	bx	lr
    ee54:	00018658 	.word	0x00018658

0000ee58 <FlexCAN_SetPayloadSize>:
 * Description   : Sets the payload size of the MBs.
 *
 *END**************************************************************************/
void FlexCAN_SetPayloadSize(FLEXCAN_Type * base,
                            const Flexcan_Ip_PayloadSizeType * payloadSize)
{
    ee58:	b500      	push	{lr}
    ee5a:	b085      	sub	sp, #20
    ee5c:	9001      	str	r0, [sp, #4]
    ee5e:	9100      	str	r1, [sp, #0]
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
    DevAssert(FlexCAN_IsFDEnabled(base) || (FLEXCAN_PAYLOAD_SIZE_8 == payloadSize->payloadBlock3));
    #endif
#endif
    /* If FD is not enabled, only 8 bytes payload is supported */
    if (FlexCAN_IsFDEnabled(base))
    ee60:	9801      	ldr	r0, [sp, #4]
    ee62:	f7ff fbd6 	bl	e612 <FlexCAN_IsFDEnabled>
    ee66:	4603      	mov	r3, r0
    ee68:	2b00      	cmp	r3, #0
    ee6a:	d011      	beq.n	ee90 <FlexCAN_SetPayloadSize+0x38>
    {
        tmp = base->FDCTRL;
    ee6c:	9b01      	ldr	r3, [sp, #4]
    ee6e:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    ee72:	9303      	str	r3, [sp, #12]
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR0_MASK);
    ee74:	9b03      	ldr	r3, [sp, #12]
    ee76:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    ee7a:	9303      	str	r3, [sp, #12]
        tmp |= ((uint32)payloadSize->payloadBlock0) << FLEXCAN_FDCTRL_MBDSR0_SHIFT;
    ee7c:	9b00      	ldr	r3, [sp, #0]
    ee7e:	681b      	ldr	r3, [r3, #0]
    ee80:	041b      	lsls	r3, r3, #16
    ee82:	9a03      	ldr	r2, [sp, #12]
    ee84:	4313      	orrs	r3, r2
    ee86:	9303      	str	r3, [sp, #12]
#endif
#if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR3_MASK);
        tmp |= ((uint32)payloadSize->payloadBlock3) << FLEXCAN_FDCTRL_MBDSR3_SHIFT;
#endif
        base->FDCTRL = tmp;
    ee88:	9b01      	ldr	r3, [sp, #4]
    ee8a:	9a03      	ldr	r2, [sp, #12]
    ee8c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
}
    ee90:	bf00      	nop
    ee92:	b005      	add	sp, #20
    ee94:	f85d fb04 	ldr.w	pc, [sp], #4

0000ee98 <FlexCAN_GetPayloadSize>:
 * Function Name : FLEXCAN_GetPayloadSize
 * Description   : Returns the payload size of the MBs (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_GetPayloadSize(const FLEXCAN_Type * base, uint8 mbdsrIdx)
{
    ee98:	b500      	push	{lr}
    ee9a:	b085      	sub	sp, #20
    ee9c:	9001      	str	r0, [sp, #4]
    ee9e:	460b      	mov	r3, r1
    eea0:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 payloadSize = 0U;
    eea4:	2300      	movs	r3, #0
    eea6:	9303      	str	r3, [sp, #12]

#if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    eea8:	9801      	ldr	r0, [sp, #4]
    eeaa:	f7ff ffb3 	bl	ee14 <FlexCAN_IsFDAvailable>
    eeae:	4603      	mov	r3, r0
    eeb0:	2b00      	cmp	r3, #0
    eeb2:	d019      	beq.n	eee8 <FlexCAN_GetPayloadSize+0x50>
    {
#endif /* defined(CAN_FEATURE_S32K1XX) */
    switch (mbdsrIdx)
    eeb4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    eeb8:	2b00      	cmp	r3, #0
    eeba:	d10a      	bne.n	eed2 <FlexCAN_GetPayloadSize+0x3a>
    {
        case 0 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    eebc:	9b01      	ldr	r3, [sp, #4]
    eebe:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    eec2:	0c1b      	lsrs	r3, r3, #16
    eec4:	f003 0303 	and.w	r3, r3, #3
    eec8:	2208      	movs	r2, #8
    eeca:	fa02 f303 	lsl.w	r3, r2, r3
    eece:	9303      	str	r3, [sp, #12]
    eed0:	e00c      	b.n	eeec <FlexCAN_GetPayloadSize+0x54>
        case 2 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR2_MASK) >> FLEXCAN_FDCTRL_MBDSR2_SHIFT); } break;
    #endif
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        case 3 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR3_MASK) >> FLEXCAN_FDCTRL_MBDSR3_SHIFT); } break;
    #endif
        default :{  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    eed2:	9b01      	ldr	r3, [sp, #4]
    eed4:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    eed8:	0c1b      	lsrs	r3, r3, #16
    eeda:	f003 0303 	and.w	r3, r3, #3
    eede:	2208      	movs	r2, #8
    eee0:	fa02 f303 	lsl.w	r3, r2, r3
    eee4:	9303      	str	r3, [sp, #12]
    eee6:	e001      	b.n	eeec <FlexCAN_GetPayloadSize+0x54>
    }
    #if defined(CAN_FEATURE_S32K1XX)
    }
    else
    {
        payloadSize = 8U;
    eee8:	2308      	movs	r3, #8
    eeea:	9303      	str	r3, [sp, #12]
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
    return (uint8)payloadSize;
    eeec:	9b03      	ldr	r3, [sp, #12]
    eeee:	b2db      	uxtb	r3, r3
}
    eef0:	4618      	mov	r0, r3
    eef2:	b005      	add	sp, #20
    eef4:	f85d fb04 	ldr.w	pc, [sp], #4

0000eef8 <FlexCAN_GetMbPayloadSize>:



uint8 FlexCAN_GetMbPayloadSize(const FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    eef8:	b500      	push	{lr}
    eefa:	b087      	sub	sp, #28
    eefc:	9001      	str	r0, [sp, #4]
    eefe:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    ef00:	2308      	movs	r3, #8
    ef02:	f88d 3014 	strb.w	r3, [sp, #20]
    uint32 ramBlockSize = 512U;
    ef06:	f44f 7300 	mov.w	r3, #512	; 0x200
    ef0a:	9304      	str	r3, [sp, #16]
    uint8 can_real_payload = 8U;
    ef0c:	2308      	movs	r3, #8
    ef0e:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 maxMbBlockNum = 0U;
    ef12:	2300      	movs	r3, #0
    ef14:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8 i=0U;
    ef18:	2300      	movs	r3, #0
    ef1a:	f88d 3015 	strb.w	r3, [sp, #21]
    uint8 mb_size = 0U;
    ef1e:	2300      	movs	r3, #0
    ef20:	f88d 300f 	strb.w	r3, [sp, #15]

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    ef24:	2300      	movs	r3, #0
    ef26:	f88d 3015 	strb.w	r3, [sp, #21]
    ef2a:	e024      	b.n	ef76 <FlexCAN_GetMbPayloadSize+0x7e>
    {
        /* Check that the number of MBs is supported based on the payload size*/
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        can_real_payload = FlexCAN_GetPayloadSize(base, i);
    ef2c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    ef30:	4619      	mov	r1, r3
    ef32:	9801      	ldr	r0, [sp, #4]
    ef34:	f7ff ffb0 	bl	ee98 <FlexCAN_GetPayloadSize>
    ef38:	4603      	mov	r3, r0
    ef3a:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* Else can_real_payload will remain as 8 payload size */
        mb_size = (uint8)(can_real_payload + arbitration_field_size);
    ef3e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ef42:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ef46:	4413      	add	r3, r2
    ef48:	f88d 300f 	strb.w	r3, [sp, #15]
        maxMbBlockNum += (uint8)(ramBlockSize / mb_size);
    ef4c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ef50:	9a04      	ldr	r2, [sp, #16]
    ef52:	fbb2 f3f3 	udiv	r3, r2, r3
    ef56:	b2da      	uxtb	r2, r3
    ef58:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ef5c:	4413      	add	r3, r2
    ef5e:	f88d 3016 	strb.w	r3, [sp, #22]
        if (maxMbBlockNum > maxMsgBuffNum)
    ef62:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ef66:	9a00      	ldr	r2, [sp, #0]
    ef68:	429a      	cmp	r2, r3
    ef6a:	d309      	bcc.n	ef80 <FlexCAN_GetMbPayloadSize+0x88>
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    ef6c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    ef70:	3301      	adds	r3, #1
    ef72:	f88d 3015 	strb.w	r3, [sp, #21]
    ef76:	f89d 3015 	ldrb.w	r3, [sp, #21]
    ef7a:	2b00      	cmp	r3, #0
    ef7c:	d0d6      	beq.n	ef2c <FlexCAN_GetMbPayloadSize+0x34>
    ef7e:	e000      	b.n	ef82 <FlexCAN_GetMbPayloadSize+0x8a>
        {
            break;
    ef80:	bf00      	nop
    {
        can_real_payload = 64U;
    }
 #endif

    return can_real_payload;
    ef82:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    ef86:	4618      	mov	r0, r3
    ef88:	b007      	add	sp, #28
    ef8a:	f85d fb04 	ldr.w	pc, [sp], #4

0000ef8e <FlexCAN_LockRxMsgBuff>:
 * Description   : Lock the RX message buffer.
 * This function will lock the RX message buffer.
 *
 *END**************************************************************************/
void FlexCAN_LockRxMsgBuff(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    ef8e:	b500      	push	{lr}
    ef90:	b085      	sub	sp, #20
    ef92:	9001      	str	r0, [sp, #4]
    ef94:	9100      	str	r1, [sp, #0]
    volatile const uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    ef96:	9900      	ldr	r1, [sp, #0]
    ef98:	9801      	ldr	r0, [sp, #4]
    ef9a:	f7ff fc7f 	bl	e89c <FlexCAN_GetMsgBuffRegion>
    ef9e:	9003      	str	r0, [sp, #12]

    /* Lock the mailbox by reading it */
    (void)*flexcan_mb;
    efa0:	9b03      	ldr	r3, [sp, #12]
    efa2:	681b      	ldr	r3, [r3, #0]
}
    efa4:	bf00      	nop
    efa6:	b005      	add	sp, #20
    efa8:	f85d fb04 	ldr.w	pc, [sp], #4

0000efac <FlexCAN_SetMsgBuffIntCmd>:
                                               uint8 u8Instance,
                                               uint32 msgBuffIdx,
                                               boolean enable,
                                               boolean bIsIntActive
                                              )
{
    efac:	b500      	push	{lr}
    efae:	b087      	sub	sp, #28
    efb0:	9003      	str	r0, [sp, #12]
    efb2:	9201      	str	r2, [sp, #4]
    efb4:	461a      	mov	r2, r3
    efb6:	460b      	mov	r3, r1
    efb8:	f88d 300b 	strb.w	r3, [sp, #11]
    efbc:	4613      	mov	r3, r2
    efbe:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp;
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    efc2:	2300      	movs	r3, #0
    efc4:	9305      	str	r3, [sp, #20]

        /* Enable the corresponding message buffer Interrupt */
        temp = 1UL << (msgBuffIdx % 32U);
    efc6:	9b01      	ldr	r3, [sp, #4]
    efc8:	f003 031f 	and.w	r3, r3, #31
    efcc:	2201      	movs	r2, #1
    efce:	fa02 f303 	lsl.w	r3, r2, r3
    efd2:	9304      	str	r3, [sp, #16]
        if (msgBuffIdx < 32U)
    efd4:	9b01      	ldr	r3, [sp, #4]
    efd6:	2b1f      	cmp	r3, #31
    efd8:	d837      	bhi.n	f04a <FlexCAN_SetMsgBuffIntCmd+0x9e>
        {
            if (enable)
    efda:	f89d 300a 	ldrb.w	r3, [sp, #10]
    efde:	2b00      	cmp	r3, #0
    efe0:	d01b      	beq.n	f01a <FlexCAN_SetMsgBuffIntCmd+0x6e>
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    efe2:	f005 fc5d 	bl	148a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) | (temp));
    efe6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    efea:	4a1a      	ldr	r2, [pc, #104]	; (f054 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    efec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    eff0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    eff4:	9a04      	ldr	r2, [sp, #16]
    eff6:	430a      	orrs	r2, r1
    eff8:	4916      	ldr	r1, [pc, #88]	; (f054 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    effa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (TRUE == bIsIntActive)
    effe:	f89d 3020 	ldrb.w	r3, [sp, #32]
    f002:	2b00      	cmp	r3, #0
    f004:	d006      	beq.n	f014 <FlexCAN_SetMsgBuffIntCmd+0x68>
                {
                    base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    f006:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f00a:	4a12      	ldr	r2, [pc, #72]	; (f054 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    f00c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    f010:	9b03      	ldr	r3, [sp, #12]
    f012:	629a      	str	r2, [r3, #40]	; 0x28
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    f014:	f005 fc70 	bl	148f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
    f018:	e017      	b.n	f04a <FlexCAN_SetMsgBuffIntCmd+0x9e>
            }
            else
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    f01a:	f005 fc41 	bl	148a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) & ~(temp));
    f01e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f022:	4a0c      	ldr	r2, [pc, #48]	; (f054 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    f024:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    f028:	9b04      	ldr	r3, [sp, #16]
    f02a:	43da      	mvns	r2, r3
    f02c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f030:	400a      	ands	r2, r1
    f032:	4908      	ldr	r1, [pc, #32]	; (f054 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    f034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    f038:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f03c:	4a05      	ldr	r2, [pc, #20]	; (f054 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    f03e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    f042:	9b03      	ldr	r3, [sp, #12]
    f044:	629a      	str	r2, [r3, #40]	; 0x28
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    f046:	f005 fc57 	bl	148f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
            }
        }
#endif /* if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */

    return stat;
    f04a:	9b05      	ldr	r3, [sp, #20]
}
    f04c:	4618      	mov	r0, r3
    f04e:	b007      	add	sp, #28
    f050:	f85d fb04 	ldr.w	pc, [sp], #4
    f054:	1fff9368 	.word	0x1fff9368

0000f058 <FLEXCAN_ClearMsgBuffIntCmd>:
void FLEXCAN_ClearMsgBuffIntCmd(FLEXCAN_Type * pBase,
                                uint8 u8Instance,
                                uint32 mb_idx,
                                boolean bIsIntActive
                               )
{
    f058:	b500      	push	{lr}
    f05a:	b087      	sub	sp, #28
    f05c:	9003      	str	r0, [sp, #12]
    f05e:	9201      	str	r2, [sp, #4]
    f060:	461a      	mov	r2, r3
    f062:	460b      	mov	r3, r1
    f064:	f88d 300b 	strb.w	r3, [sp, #11]
    f068:	4613      	mov	r3, r2
    f06a:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp = (1UL << (mb_idx % 32U));
    f06e:	9b01      	ldr	r3, [sp, #4]
    f070:	f003 031f 	and.w	r3, r3, #31
    f074:	2201      	movs	r2, #1
    f076:	fa02 f303 	lsl.w	r3, r2, r3
    f07a:	9305      	str	r3, [sp, #20]

 /* Stop the running transfer. */
    if (mb_idx < 32U)
    f07c:	9b01      	ldr	r3, [sp, #4]
    f07e:	2b1f      	cmp	r3, #31
    f080:	d818      	bhi.n	f0b4 <FLEXCAN_ClearMsgBuffIntCmd+0x5c>
    {
          /* Start critical section: implementation depends on integrator */
          SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    f082:	f005 f9cf 	bl	14424 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
          FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = (pBase->IMASK1 & (~temp));
    f086:	9b03      	ldr	r3, [sp, #12]
    f088:	6a99      	ldr	r1, [r3, #40]	; 0x28
    f08a:	9b05      	ldr	r3, [sp, #20]
    f08c:	43da      	mvns	r2, r3
    f08e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f092:	400a      	ands	r2, r1
    f094:	4909      	ldr	r1, [pc, #36]	; (f0bc <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    f096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          if (TRUE == bIsIntActive)
    f09a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f09e:	2b00      	cmp	r3, #0
    f0a0:	d006      	beq.n	f0b0 <FLEXCAN_ClearMsgBuffIntCmd+0x58>
          {
              pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    f0a2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f0a6:	4a05      	ldr	r2, [pc, #20]	; (f0bc <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    f0a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    f0ac:	9b03      	ldr	r3, [sp, #12]
    f0ae:	629a      	str	r2, [r3, #40]	; 0x28
          }
          /* End critical section: implementation depends on integrator */
          SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    f0b0:	f005 f9e4 	bl	1447c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    }
#endif /* #if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */
}
    f0b4:	bf00      	nop
    f0b6:	b007      	add	sp, #28
    f0b8:	f85d fb04 	ldr.w	pc, [sp], #4
    f0bc:	1fff9368 	.word	0x1fff9368

0000f0c0 <FlexCAN_DisableInterrupts>:


void FlexCAN_DisableInterrupts(FLEXCAN_Type * pBase)
{
    f0c0:	b082      	sub	sp, #8
    f0c2:	9001      	str	r0, [sp, #4]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = 0U;
    f0c4:	9b01      	ldr	r3, [sp, #4]
    f0c6:	2200      	movs	r2, #0
    f0c8:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = 0U;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    f0ca:	bf00      	nop
    f0cc:	b002      	add	sp, #8
    f0ce:	4770      	bx	lr

0000f0d0 <FlexCAN_EnableInterrupts>:

void FlexCAN_EnableInterrupts(FLEXCAN_Type * pBase, uint8 u8Instance)
{
    f0d0:	b082      	sub	sp, #8
    f0d2:	9001      	str	r0, [sp, #4]
    f0d4:	460b      	mov	r3, r1
    f0d6:	f88d 3003 	strb.w	r3, [sp, #3]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    f0da:	f89d 3003 	ldrb.w	r3, [sp, #3]
    f0de:	4a04      	ldr	r2, [pc, #16]	; (f0f0 <FlexCAN_EnableInterrupts+0x20>)
    f0e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    f0e4:	9b01      	ldr	r3, [sp, #4]
    f0e6:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = FlexCAN_Ip_au32ImaskBuff[u8Instance][3U];
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    f0e8:	bf00      	nop
    f0ea:	b002      	add	sp, #8
    f0ec:	4770      	bx	lr
    f0ee:	bf00      	nop
    f0f0:	1fff9368 	.word	0x1fff9368

0000f0f4 <FlexCAN_SetRxMsgBuff>:
void FlexCAN_SetRxMsgBuff(const FLEXCAN_Type * base,
                          uint32 msgBuffIdx,
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId
                         )
{
    f0f4:	b500      	push	{lr}
    f0f6:	b087      	sub	sp, #28
    f0f8:	9003      	str	r0, [sp, #12]
    f0fa:	9102      	str	r1, [sp, #8]
    f0fc:	9201      	str	r2, [sp, #4]
    f0fe:	9300      	str	r3, [sp, #0]
    volatile uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    f100:	9902      	ldr	r1, [sp, #8]
    f102:	9803      	ldr	r0, [sp, #12]
    f104:	f7ff fbca 	bl	e89c <FlexCAN_GetMsgBuffRegion>
    f108:	9005      	str	r0, [sp, #20]
    volatile uint32 * flexcan_mb_id = &flexcan_mb[1];
    f10a:	9b05      	ldr	r3, [sp, #20]
    f10c:	3304      	adds	r3, #4
    f10e:	9304      	str	r3, [sp, #16]
    DevAssert(cs != NULL_PTR);
#endif


    /* Clean up the arbitration field area */
    *flexcan_mb = 0;
    f110:	9b05      	ldr	r3, [sp, #20]
    f112:	2200      	movs	r2, #0
    f114:	601a      	str	r2, [r3, #0]
    *flexcan_mb_id = 0;
    f116:	9b04      	ldr	r3, [sp, #16]
    f118:	2200      	movs	r2, #0
    f11a:	601a      	str	r2, [r3, #0]

    /* Set the ID according the format structure */
    if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    f11c:	9b01      	ldr	r3, [sp, #4]
    f11e:	685b      	ldr	r3, [r3, #4]
    f120:	2b01      	cmp	r3, #1
    f122:	d119      	bne.n	f158 <FlexCAN_SetRxMsgBuff+0x64>
    {
        /* Set IDE */
        *flexcan_mb |= FLEXCAN_IP_CS_IDE_MASK;
    f124:	9b05      	ldr	r3, [sp, #20]
    f126:	681b      	ldr	r3, [r3, #0]
    f128:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    f12c:	9b05      	ldr	r3, [sp, #20]
    f12e:	601a      	str	r2, [r3, #0]

        /* Clear SRR bit */
        *flexcan_mb &= ~FLEXCAN_IP_CS_SRR_MASK;
    f130:	9b05      	ldr	r3, [sp, #20]
    f132:	681b      	ldr	r3, [r3, #0]
    f134:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
    f138:	9b05      	ldr	r3, [sp, #20]
    f13a:	601a      	str	r2, [r3, #0]

        /* ID [28-0] */
        *flexcan_mb_id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    f13c:	9b04      	ldr	r3, [sp, #16]
    f13e:	681b      	ldr	r3, [r3, #0]
    f140:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    f144:	9b04      	ldr	r3, [sp, #16]
    f146:	601a      	str	r2, [r3, #0]
        *flexcan_mb_id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    f148:	9b04      	ldr	r3, [sp, #16]
    f14a:	681a      	ldr	r2, [r3, #0]
    f14c:	9b00      	ldr	r3, [sp, #0]
    f14e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    f152:	431a      	orrs	r2, r3
    f154:	9b04      	ldr	r3, [sp, #16]
    f156:	601a      	str	r2, [r3, #0]
    }

    if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    f158:	9b01      	ldr	r3, [sp, #4]
    f15a:	685b      	ldr	r3, [r3, #4]
    f15c:	2b00      	cmp	r3, #0
    f15e:	d116      	bne.n	f18e <FlexCAN_SetRxMsgBuff+0x9a>
    {
        /* Make sure IDE and SRR are not set */
        *flexcan_mb &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    f160:	9b05      	ldr	r3, [sp, #20]
    f162:	681b      	ldr	r3, [r3, #0]
    f164:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
    f168:	9b05      	ldr	r3, [sp, #20]
    f16a:	601a      	str	r2, [r3, #0]

        /* ID[28-18] */
        *flexcan_mb_id &= ~FLEXCAN_IP_ID_STD_MASK;
    f16c:	9b04      	ldr	r3, [sp, #16]
    f16e:	681b      	ldr	r3, [r3, #0]
    f170:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    f174:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    f178:	9a04      	ldr	r2, [sp, #16]
    f17a:	6013      	str	r3, [r2, #0]
        *flexcan_mb_id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    f17c:	9b04      	ldr	r3, [sp, #16]
    f17e:	681a      	ldr	r2, [r3, #0]
    f180:	9b00      	ldr	r3, [sp, #0]
    f182:	0499      	lsls	r1, r3, #18
    f184:	4b0e      	ldr	r3, [pc, #56]	; (f1c0 <FlexCAN_SetRxMsgBuff+0xcc>)
    f186:	400b      	ands	r3, r1
    f188:	431a      	orrs	r2, r3
    f18a:	9b04      	ldr	r3, [sp, #16]
    f18c:	601a      	str	r2, [r3, #0]
    }

    /* Set MB CODE */
    if ((uint32)FLEXCAN_RX_NOT_USED != cs->code)
    f18e:	9b01      	ldr	r3, [sp, #4]
    f190:	681b      	ldr	r3, [r3, #0]
    f192:	2b0f      	cmp	r3, #15
    f194:	d00f      	beq.n	f1b6 <FlexCAN_SetRxMsgBuff+0xc2>
    {
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    f196:	9b05      	ldr	r3, [sp, #20]
    f198:	681b      	ldr	r3, [r3, #0]
    f19a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    f19e:	9b05      	ldr	r3, [sp, #20]
    f1a0:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    f1a2:	9b05      	ldr	r3, [sp, #20]
    f1a4:	681a      	ldr	r2, [r3, #0]
    f1a6:	9b01      	ldr	r3, [sp, #4]
    f1a8:	681b      	ldr	r3, [r3, #0]
    f1aa:	061b      	lsls	r3, r3, #24
    f1ac:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    f1b0:	431a      	orrs	r2, r3
    f1b2:	9b05      	ldr	r3, [sp, #20]
    f1b4:	601a      	str	r2, [r3, #0]
    }
}
    f1b6:	bf00      	nop
    f1b8:	b007      	add	sp, #28
    f1ba:	f85d fb04 	ldr.w	pc, [sp], #4
    f1be:	bf00      	nop
    f1c0:	1ffc0000 	.word	0x1ffc0000

0000f1c4 <FlexCAN_GetMsgBuffTimestamp>:
 * Function Name : FlexCAN_GetMsgBuffTimestamp
 * Description   : Get a message buffer timestamp value.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMsgBuffTimestamp(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    f1c4:	b500      	push	{lr}
    f1c6:	b085      	sub	sp, #20
    f1c8:	9001      	str	r0, [sp, #4]
    f1ca:	9100      	str	r1, [sp, #0]
    uint32 TimeStamp = 0U;
    f1cc:	2300      	movs	r3, #0
    f1ce:	9303      	str	r3, [sp, #12]
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    f1d0:	9900      	ldr	r1, [sp, #0]
    f1d2:	9801      	ldr	r0, [sp, #4]
    f1d4:	f7ff fb62 	bl	e89c <FlexCAN_GetMsgBuffRegion>
    f1d8:	9002      	str	r0, [sp, #8]
        TimeStamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        TimeStamp = (uint32)((*Flexcan_Mb & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    f1da:	9b02      	ldr	r3, [sp, #8]
    f1dc:	681b      	ldr	r3, [r3, #0]
    f1de:	b29b      	uxth	r3, r3
    f1e0:	9303      	str	r3, [sp, #12]
    }
    return TimeStamp;
    f1e2:	9b03      	ldr	r3, [sp, #12]
}
    f1e4:	4618      	mov	r0, r3
    f1e6:	b005      	add	sp, #20
    f1e8:	f85d fb04 	ldr.w	pc, [sp], #4

0000f1ec <FlexCAN_GetMsgBuff>:
 *END**************************************************************************/
void FlexCAN_GetMsgBuff(const FLEXCAN_Type * base,
                        uint32 msgBuffIdx,
                        Flexcan_Ip_MsgBuffType * msgBuff
                       )
{
    f1ec:	b500      	push	{lr}
    f1ee:	b08d      	sub	sp, #52	; 0x34
    f1f0:	9003      	str	r0, [sp, #12]
    f1f2:	9102      	str	r1, [sp, #8]
    f1f4:	9201      	str	r2, [sp, #4]

    uint8 i;
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    f1f6:	9902      	ldr	r1, [sp, #8]
    f1f8:	9803      	ldr	r0, [sp, #12]
    f1fa:	f7ff fb4f 	bl	e89c <FlexCAN_GetMsgBuffRegion>
    f1fe:	900a      	str	r0, [sp, #40]	; 0x28
    volatile const uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    f200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f202:	3304      	adds	r3, #4
    f204:	9309      	str	r3, [sp, #36]	; 0x24
    volatile const uint8 * Flexcan_Mb_Data = (volatile const uint8 *)(&Flexcan_Mb[2]);
    f206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f208:	3308      	adds	r3, #8
    f20a:	9308      	str	r3, [sp, #32]
    volatile const uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    f20c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f20e:	3308      	adds	r3, #8
    f210:	9307      	str	r3, [sp, #28]
    uint32 * MsgBuff_Data_32 = NULL_PTR;
    f212:	2300      	movs	r3, #0
    f214:	9306      	str	r3, [sp, #24]
    uint32 MbWord;

    uint8 Flexcan_Mb_Dlc_Value = (uint8)(((*Flexcan_Mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    f216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f218:	681b      	ldr	r3, [r3, #0]
    f21a:	0c1b      	lsrs	r3, r3, #16
    f21c:	b2db      	uxtb	r3, r3
    f21e:	f003 030f 	and.w	r3, r3, #15
    f222:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Payload_Size = FlexCAN_ComputePayloadSize(Flexcan_Mb_Dlc_Value);
    f226:	f89d 3017 	ldrb.w	r3, [sp, #23]
    f22a:	4618      	mov	r0, r3
    f22c:	f7ff faed 	bl	e80a <FlexCAN_ComputePayloadSize>
    f230:	4603      	mov	r3, r0
    f232:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(msgBuff != NULL_PTR);
#endif
    /* Asign after NULL Check */
    MsgBuff_Data_32 = (uint32 *)(msgBuff->data);
    f236:	9b01      	ldr	r3, [sp, #4]
    f238:	3308      	adds	r3, #8
    f23a:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    /* Payload Size is based on MBDSR for 1 MBDSR corresponds 32 * 8Bytes MBs  */
    if (Payload_Size > FlexCAN_GetMbPayloadSize(base, msgBuffIdx))
    f23c:	9902      	ldr	r1, [sp, #8]
    f23e:	9803      	ldr	r0, [sp, #12]
    f240:	f7ff fe5a 	bl	eef8 <FlexCAN_GetMbPayloadSize>
    f244:	4603      	mov	r3, r0
    f246:	461a      	mov	r2, r3
    f248:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    f24c:	4293      	cmp	r3, r2
    f24e:	d906      	bls.n	f25e <FlexCAN_GetMsgBuff+0x72>
    {
        Payload_Size = FlexCAN_GetMbPayloadSize(base, msgBuffIdx);
    f250:	9902      	ldr	r1, [sp, #8]
    f252:	9803      	ldr	r0, [sp, #12]
    f254:	f7ff fe50 	bl	eef8 <FlexCAN_GetMbPayloadSize>
    f258:	4603      	mov	r3, r0
    f25a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    msgBuff->dataLen = Payload_Size;
    f25e:	9b01      	ldr	r3, [sp, #4]
    f260:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    f264:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Get a MB field values */
    msgBuff->cs = *Flexcan_Mb;
    f268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f26a:	681a      	ldr	r2, [r3, #0]
    f26c:	9b01      	ldr	r3, [sp, #4]
    f26e:	601a      	str	r2, [r3, #0]
    if ((msgBuff->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    f270:	9b01      	ldr	r3, [sp, #4]
    f272:	681b      	ldr	r3, [r3, #0]
    f274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    f278:	2b00      	cmp	r3, #0
    f27a:	d004      	beq.n	f286 <FlexCAN_GetMsgBuff+0x9a>
    {
        msgBuff->msgId = (*Flexcan_Mb_Id);
    f27c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f27e:	681a      	ldr	r2, [r3, #0]
    f280:	9b01      	ldr	r3, [sp, #4]
    f282:	605a      	str	r2, [r3, #4]
    f284:	e004      	b.n	f290 <FlexCAN_GetMsgBuff+0xa4>
    }
    else
    {
        msgBuff->msgId = (*Flexcan_Mb_Id) >> FLEXCAN_IP_ID_STD_SHIFT;
    f286:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f288:	681b      	ldr	r3, [r3, #0]
    f28a:	0c9a      	lsrs	r2, r3, #18
    f28c:	9b01      	ldr	r3, [sp, #4]
    f28e:	605a      	str	r2, [r3, #4]
        msgBuff->time_stamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        msgBuff->time_stamp = (uint32)((msgBuff->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    f290:	9b01      	ldr	r3, [sp, #4]
    f292:	681b      	ldr	r3, [r3, #0]
    f294:	b29a      	uxth	r2, r3
    f296:	9b01      	ldr	r3, [sp, #4]
    f298:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, MsgBuff_Data_32[i >> 2U]);
        }
    }

#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    f29a:	2300      	movs	r3, #0
    f29c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    f2a0:	e025      	b.n	f2ee <FlexCAN_GetMsgBuff+0x102>
    {
        MbWord = Flexcan_Mb_Data_32[i >> 2U];
    f2a2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f2a6:	089b      	lsrs	r3, r3, #2
    f2a8:	b2db      	uxtb	r3, r3
    f2aa:	009b      	lsls	r3, r3, #2
    f2ac:	9a07      	ldr	r2, [sp, #28]
    f2ae:	4413      	add	r3, r2
    f2b0:	681b      	ldr	r3, [r3, #0]
    f2b2:	9304      	str	r3, [sp, #16]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (MsgBuff_Data_32[i >> 2U]));
    f2b4:	9b04      	ldr	r3, [sp, #16]
    f2b6:	0e1a      	lsrs	r2, r3, #24
    f2b8:	9b04      	ldr	r3, [sp, #16]
    f2ba:	0a1b      	lsrs	r3, r3, #8
    f2bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    f2c0:	431a      	orrs	r2, r3
    f2c2:	9b04      	ldr	r3, [sp, #16]
    f2c4:	021b      	lsls	r3, r3, #8
    f2c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    f2ca:	ea42 0103 	orr.w	r1, r2, r3
    f2ce:	9b04      	ldr	r3, [sp, #16]
    f2d0:	061a      	lsls	r2, r3, #24
    f2d2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f2d6:	089b      	lsrs	r3, r3, #2
    f2d8:	b2db      	uxtb	r3, r3
    f2da:	009b      	lsls	r3, r3, #2
    f2dc:	9806      	ldr	r0, [sp, #24]
    f2de:	4403      	add	r3, r0
    f2e0:	430a      	orrs	r2, r1
    f2e2:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    f2e4:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f2e8:	3304      	adds	r3, #4
    f2ea:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    f2ee:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    f2f2:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    f2f6:	f023 0303 	bic.w	r3, r3, #3
    f2fa:	429a      	cmp	r2, r3
    f2fc:	d3d1      	bcc.n	f2a2 <FlexCAN_GetMsgBuff+0xb6>
    }

#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (; i < Payload_Size; i++)
    f2fe:	e014      	b.n	f32a <FlexCAN_GetMsgBuff+0x13e>
    {   /* Max allowed value for index is 63 */
        msgBuff->data[i] = Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(i)];
    f300:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f304:	f083 0303 	eor.w	r3, r3, #3
    f308:	b2db      	uxtb	r3, r3
    f30a:	461a      	mov	r2, r3
    f30c:	9b08      	ldr	r3, [sp, #32]
    f30e:	441a      	add	r2, r3
    f310:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f314:	7812      	ldrb	r2, [r2, #0]
    f316:	b2d1      	uxtb	r1, r2
    f318:	9a01      	ldr	r2, [sp, #4]
    f31a:	4413      	add	r3, r2
    f31c:	460a      	mov	r2, r1
    f31e:	721a      	strb	r2, [r3, #8]
    for (; i < Payload_Size; i++)
    f320:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f324:	3301      	adds	r3, #1
    f326:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    f32a:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    f32e:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    f332:	429a      	cmp	r2, r3
    f334:	d3e4      	bcc.n	f300 <FlexCAN_GetMsgBuff+0x114>
    }
}
    f336:	bf00      	nop
    f338:	bf00      	nop
    f33a:	b00d      	add	sp, #52	; 0x34
    f33c:	f85d fb04 	ldr.w	pc, [sp], #4

0000f340 <FlexCAN_SetTxMsgBuff>:
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId,
                          const uint8 * msgData,
                          const boolean isRemote
                         )
{
    f340:	b500      	push	{lr}
    f342:	b08d      	sub	sp, #52	; 0x34
    f344:	9003      	str	r0, [sp, #12]
    f346:	9102      	str	r1, [sp, #8]
    f348:	9201      	str	r2, [sp, #4]
    f34a:	9300      	str	r3, [sp, #0]
    uint32 Flexcan_Mb_Config = 0;
    f34c:	2300      	movs	r3, #0
    f34e:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 DataByte;
    uint8 Dlc_Value;
    uint8 Payload_Size;
    volatile uint32 * Flexcan_Mb = pMbAddr;
    f350:	9b03      	ldr	r3, [sp, #12]
    f352:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    f354:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f356:	3304      	adds	r3, #4
    f358:	9308      	str	r3, [sp, #32]
    volatile uint8 * Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    f35a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f35c:	3308      	adds	r3, #8
    f35e:	9307      	str	r3, [sp, #28]
    volatile uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    f360:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f362:	3308      	adds	r3, #8
    f364:	9306      	str	r3, [sp, #24]
    const uint32 * MsgData_32 = (const uint32*)msgData;
    f366:	9b00      	ldr	r3, [sp, #0]
    f368:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(cs != NULL_PTR);
    #endif

        /* Clean up the arbitration field area and set TxMB Inactive */
        *Flexcan_Mb = (uint32)((((uint32)FLEXCAN_TX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    f36a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f36c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    f370:	601a      	str	r2, [r3, #0]
        *Flexcan_Mb_Id = 0;
    f372:	9b08      	ldr	r3, [sp, #32]
    f374:	2200      	movs	r2, #0
    f376:	601a      	str	r2, [r3, #0]

        /* Compute the value of the DLC field */
        Dlc_Value = FlexCAN_ComputeDLCValue((uint8)cs->dataLen);
    f378:	9b02      	ldr	r3, [sp, #8]
    f37a:	689b      	ldr	r3, [r3, #8]
    f37c:	b2db      	uxtb	r3, r3
    f37e:	4618      	mov	r0, r3
    f380:	f7ff f9f4 	bl	e76c <FlexCAN_ComputeDLCValue>
    f384:	4603      	mov	r3, r0
    f386:	f88d 3013 	strb.w	r3, [sp, #19]
        /* Copy user's buffer into the message buffer data area */
        if (msgData != NULL_PTR)
    f38a:	9b00      	ldr	r3, [sp, #0]
    f38c:	2b00      	cmp	r3, #0
    f38e:	d065      	beq.n	f45c <FlexCAN_SetTxMsgBuff+0x11c>
        {
#if (defined(S32K116) || defined (S32K118))
            (void)MsgData_32;
            DataByte = FlexCAN_DataTransferTxMsgBuff(Flexcan_Mb_Data_32, cs, msgData);
#else
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    f390:	2300      	movs	r3, #0
    f392:	930a      	str	r3, [sp, #40]	; 0x28
    f394:	e02c      	b.n	f3f0 <FlexCAN_SetTxMsgBuff+0xb0>
            {
                FLEXCAN_IP_SWAP_BYTES_IN_WORD((MsgData_32[DataByte >> 2U]), (Flexcan_Mb_Data_32[DataByte >> 2U]));
    f396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f398:	089b      	lsrs	r3, r3, #2
    f39a:	009b      	lsls	r3, r3, #2
    f39c:	9a05      	ldr	r2, [sp, #20]
    f39e:	4413      	add	r3, r2
    f3a0:	681b      	ldr	r3, [r3, #0]
    f3a2:	0e1a      	lsrs	r2, r3, #24
    f3a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f3a6:	089b      	lsrs	r3, r3, #2
    f3a8:	009b      	lsls	r3, r3, #2
    f3aa:	9905      	ldr	r1, [sp, #20]
    f3ac:	440b      	add	r3, r1
    f3ae:	681b      	ldr	r3, [r3, #0]
    f3b0:	0a1b      	lsrs	r3, r3, #8
    f3b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    f3b6:	431a      	orrs	r2, r3
    f3b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f3ba:	089b      	lsrs	r3, r3, #2
    f3bc:	009b      	lsls	r3, r3, #2
    f3be:	9905      	ldr	r1, [sp, #20]
    f3c0:	440b      	add	r3, r1
    f3c2:	681b      	ldr	r3, [r3, #0]
    f3c4:	021b      	lsls	r3, r3, #8
    f3c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    f3ca:	ea42 0103 	orr.w	r1, r2, r3
    f3ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f3d0:	089b      	lsrs	r3, r3, #2
    f3d2:	009b      	lsls	r3, r3, #2
    f3d4:	9a05      	ldr	r2, [sp, #20]
    f3d6:	4413      	add	r3, r2
    f3d8:	681b      	ldr	r3, [r3, #0]
    f3da:	061a      	lsls	r2, r3, #24
    f3dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f3de:	089b      	lsrs	r3, r3, #2
    f3e0:	009b      	lsls	r3, r3, #2
    f3e2:	9806      	ldr	r0, [sp, #24]
    f3e4:	4403      	add	r3, r0
    f3e6:	430a      	orrs	r2, r1
    f3e8:	601a      	str	r2, [r3, #0]
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    f3ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f3ec:	3304      	adds	r3, #4
    f3ee:	930a      	str	r3, [sp, #40]	; 0x28
    f3f0:	9b02      	ldr	r3, [sp, #8]
    f3f2:	689b      	ldr	r3, [r3, #8]
    f3f4:	f023 0303 	bic.w	r3, r3, #3
    f3f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f3fa:	429a      	cmp	r2, r3
    f3fc:	d3cb      	bcc.n	f396 <FlexCAN_SetTxMsgBuff+0x56>
            }
#endif /* (defined(S32K116) || defined (S32K118)) */
            for ( ; DataByte < cs->dataLen; DataByte++)
    f3fe:	e00c      	b.n	f41a <FlexCAN_SetTxMsgBuff+0xda>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] =  msgData[DataByte];
    f400:	9a00      	ldr	r2, [sp, #0]
    f402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f404:	441a      	add	r2, r3
    f406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f408:	f083 0303 	eor.w	r3, r3, #3
    f40c:	9907      	ldr	r1, [sp, #28]
    f40e:	440b      	add	r3, r1
    f410:	7812      	ldrb	r2, [r2, #0]
    f412:	701a      	strb	r2, [r3, #0]
            for ( ; DataByte < cs->dataLen; DataByte++)
    f414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f416:	3301      	adds	r3, #1
    f418:	930a      	str	r3, [sp, #40]	; 0x28
    f41a:	9b02      	ldr	r3, [sp, #8]
    f41c:	689b      	ldr	r3, [r3, #8]
    f41e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f420:	429a      	cmp	r2, r3
    f422:	d3ed      	bcc.n	f400 <FlexCAN_SetTxMsgBuff+0xc0>
            }
        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            Payload_Size = FlexCAN_ComputePayloadSize(Dlc_Value);
    f424:	f89d 3013 	ldrb.w	r3, [sp, #19]
    f428:	4618      	mov	r0, r3
    f42a:	f7ff f9ee 	bl	e80a <FlexCAN_ComputePayloadSize>
    f42e:	4603      	mov	r3, r0
    f430:	f88d 3012 	strb.w	r3, [sp, #18]
            /* Add padding, if needed */
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    f434:	9b02      	ldr	r3, [sp, #8]
    f436:	689b      	ldr	r3, [r3, #8]
    f438:	930a      	str	r3, [sp, #40]	; 0x28
    f43a:	e00a      	b.n	f452 <FlexCAN_SetTxMsgBuff+0x112>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] = cs->fd_padding;
    f43c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f43e:	f083 0303 	eor.w	r3, r3, #3
    f442:	9a07      	ldr	r2, [sp, #28]
    f444:	4413      	add	r3, r2
    f446:	9a02      	ldr	r2, [sp, #8]
    f448:	7b52      	ldrb	r2, [r2, #13]
    f44a:	701a      	strb	r2, [r3, #0]
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    f44c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f44e:	3301      	adds	r3, #1
    f450:	930a      	str	r3, [sp, #40]	; 0x28
    f452:	f89d 3012 	ldrb.w	r3, [sp, #18]
    f456:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f458:	429a      	cmp	r2, r3
    f45a:	d3ef      	bcc.n	f43c <FlexCAN_SetTxMsgBuff+0xfc>
            }
        #endif /* FLEXCAN_IP_FEATURE_HAS_FD */
        }
        /* Set the ID according the format structure */
        if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    f45c:	9b02      	ldr	r3, [sp, #8]
    f45e:	685b      	ldr	r3, [r3, #4]
    f460:	2b01      	cmp	r3, #1
    f462:	d111      	bne.n	f488 <FlexCAN_SetTxMsgBuff+0x148>
        {
            /* ID [28-0] */
            *Flexcan_Mb_Id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    f464:	9b08      	ldr	r3, [sp, #32]
    f466:	681b      	ldr	r3, [r3, #0]
    f468:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    f46c:	9b08      	ldr	r3, [sp, #32]
    f46e:	601a      	str	r2, [r3, #0]
            *Flexcan_Mb_Id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    f470:	9b08      	ldr	r3, [sp, #32]
    f472:	681a      	ldr	r2, [r3, #0]
    f474:	9b01      	ldr	r3, [sp, #4]
    f476:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    f47a:	431a      	orrs	r2, r3
    f47c:	9b08      	ldr	r3, [sp, #32]
    f47e:	601a      	str	r2, [r3, #0]
            /* Set IDE and SRR bit*/
            Flexcan_Mb_Config |= (FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    f480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f482:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
    f486:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    f488:	9b02      	ldr	r3, [sp, #8]
    f48a:	685b      	ldr	r3, [r3, #4]
    f48c:	2b00      	cmp	r3, #0
    f48e:	d114      	bne.n	f4ba <FlexCAN_SetTxMsgBuff+0x17a>
        {
            /* ID[28-18] */
            *Flexcan_Mb_Id &= ~FLEXCAN_IP_ID_STD_MASK;
    f490:	9b08      	ldr	r3, [sp, #32]
    f492:	681b      	ldr	r3, [r3, #0]
    f494:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    f498:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    f49c:	9a08      	ldr	r2, [sp, #32]
    f49e:	6013      	str	r3, [r2, #0]
            *Flexcan_Mb_Id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    f4a0:	9b08      	ldr	r3, [sp, #32]
    f4a2:	681a      	ldr	r2, [r3, #0]
    f4a4:	9b01      	ldr	r3, [sp, #4]
    f4a6:	0499      	lsls	r1, r3, #18
    f4a8:	4b2b      	ldr	r3, [pc, #172]	; (f558 <FlexCAN_SetTxMsgBuff+0x218>)
    f4aa:	400b      	ands	r3, r1
    f4ac:	431a      	orrs	r2, r3
    f4ae:	9b08      	ldr	r3, [sp, #32]
    f4b0:	601a      	str	r2, [r3, #0]
            /* make sure IDE and SRR are not set */
            Flexcan_Mb_Config &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    f4b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f4b4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
    f4b8:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        /* Set the length of data in bytes */
        Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_DLC_MASK;
    f4ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f4bc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    f4c0:	930b      	str	r3, [sp, #44]	; 0x2c
        Flexcan_Mb_Config |= ((uint32)Dlc_Value << FLEXCAN_IP_CS_DLC_SHIFT) & FLEXCAN_IP_CS_DLC_MASK;
    f4c2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    f4c6:	041b      	lsls	r3, r3, #16
    f4c8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    f4cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f4ce:	4313      	orrs	r3, r2
    f4d0:	930b      	str	r3, [sp, #44]	; 0x2c
        /* Set MB CODE */
        if (cs->code != (uint32)FLEXCAN_TX_NOT_USED)
    f4d2:	9b02      	ldr	r3, [sp, #8]
    f4d4:	681b      	ldr	r3, [r3, #0]
    f4d6:	2b0f      	cmp	r3, #15
    f4d8:	d03a      	beq.n	f550 <FlexCAN_SetTxMsgBuff+0x210>
        {
            if ((uint32)FLEXCAN_TX_REMOTE == cs->code)
    f4da:	9b02      	ldr	r3, [sp, #8]
    f4dc:	681b      	ldr	r3, [r3, #0]
    f4de:	2b1c      	cmp	r3, #28
    f4e0:	d104      	bne.n	f4ec <FlexCAN_SetTxMsgBuff+0x1ac>
            {
                /* Set RTR bit */
                Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    f4e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f4e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f4e8:	930b      	str	r3, [sp, #44]	; 0x2c
    f4ea:	e007      	b.n	f4fc <FlexCAN_SetTxMsgBuff+0x1bc>
            }
            else
            {
                if (TRUE == isRemote)
    f4ec:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    f4f0:	2b00      	cmp	r3, #0
    f4f2:	d003      	beq.n	f4fc <FlexCAN_SetTxMsgBuff+0x1bc>
                {
                    /* Set RTR bit */
                    Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    f4f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f4f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f4fa:	930b      	str	r3, [sp, #44]	; 0x2c
                }
            }
            /* Reset the code */
            Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_CODE_MASK;
    f4fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f4fe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    f502:	930b      	str	r3, [sp, #44]	; 0x2c
            /* Set the code */
            if (cs->fd_enable)
    f504:	9b02      	ldr	r3, [sp, #8]
    f506:	7b1b      	ldrb	r3, [r3, #12]
    f508:	2b00      	cmp	r3, #0
    f50a:	d00e      	beq.n	f52a <FlexCAN_SetTxMsgBuff+0x1ea>
            {
                Flexcan_Mb_Config |= ((cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK) | FLEXCAN_IP_MB_EDL_MASK;
    f50c:	9b02      	ldr	r3, [sp, #8]
    f50e:	681b      	ldr	r3, [r3, #0]
    f510:	061b      	lsls	r3, r3, #24
    f512:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
    f516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f518:	4313      	orrs	r3, r2
    f51a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    f51e:	930b      	str	r3, [sp, #44]	; 0x2c
                /* In case of FD frame not supported RTR */
                Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_RTR_MASK;
    f520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f522:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    f526:	930b      	str	r3, [sp, #44]	; 0x2c
    f528:	e007      	b.n	f53a <FlexCAN_SetTxMsgBuff+0x1fa>
            }
            else
            {
                Flexcan_Mb_Config |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    f52a:	9b02      	ldr	r3, [sp, #8]
    f52c:	681b      	ldr	r3, [r3, #0]
    f52e:	061b      	lsls	r3, r3, #24
    f530:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    f534:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f536:	4313      	orrs	r3, r2
    f538:	930b      	str	r3, [sp, #44]	; 0x2c
            }

            if (cs->enable_brs)
    f53a:	9b02      	ldr	r3, [sp, #8]
    f53c:	7b9b      	ldrb	r3, [r3, #14]
    f53e:	2b00      	cmp	r3, #0
    f540:	d003      	beq.n	f54a <FlexCAN_SetTxMsgBuff+0x20a>
            {
                Flexcan_Mb_Config |= FLEXCAN_IP_MB_BRS_MASK;
    f542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f544:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    f548:	930b      	str	r3, [sp, #44]	; 0x2c
            }
            *Flexcan_Mb = Flexcan_Mb_Config;
    f54a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f54c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f54e:	601a      	str	r2, [r3, #0]
        }
}
    f550:	bf00      	nop
    f552:	b00d      	add	sp, #52	; 0x34
    f554:	f85d fb04 	ldr.w	pc, [sp], #4
    f558:	1ffc0000 	.word	0x1ffc0000

0000f55c <FlexCAN_SetMaxMsgBuffNum>:
 * Description   : Set the number of the last Message Buffers.
 * This function will define the number of the last Message Buffers
 *
 *END***************************************************************************/
Flexcan_Ip_StatusType FlexCAN_SetMaxMsgBuffNum(FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    f55c:	b500      	push	{lr}
    f55e:	b08f      	sub	sp, #60	; 0x3c
    f560:	9001      	str	r0, [sp, #4]
    f562:	9100      	str	r1, [sp, #0]
    uint32 MsgBuffIdx;
    uint32 DataByte;
    const volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    f564:	9b01      	ldr	r3, [sp, #4]
    f566:	3380      	adds	r3, #128	; 0x80
    f568:	930a      	str	r3, [sp, #40]	; 0x28
#if (STD_ON == FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY)
    const volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */
    const volatile uint32 * ValEndMbPointer = NULL_PTR;
    f56a:	2300      	movs	r3, #0
    f56c:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 *Flexcan_Mb = NULL_PTR;
    f56e:	2300      	movs	r3, #0
    f570:	9308      	str	r3, [sp, #32]
    volatile uint32 *Flexcan_Mb_Id   = NULL_PTR ;
    f572:	2300      	movs	r3, #0
    f574:	9307      	str	r3, [sp, #28]
    volatile uint8  *Flexcan_Mb_Data = NULL_PTR;
    f576:	2300      	movs	r3, #0
    f578:	9306      	str	r3, [sp, #24]
    uint8 Arbitration_Field_Size = 8U;
    f57a:	2308      	movs	r3, #8
    f57c:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, maxMsgBuffNum - (uint32)1U);
    f580:	9b00      	ldr	r3, [sp, #0]
    f582:	3b01      	subs	r3, #1
    f584:	4619      	mov	r1, r3
    f586:	9801      	ldr	r0, [sp, #4]
    f588:	f7ff fcb6 	bl	eef8 <FlexCAN_GetMbPayloadSize>
    f58c:	4603      	mov	r3, r0
    f58e:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_PtrSizeType ValEndMb = 0U;
    f592:	2300      	movs	r3, #0
    f594:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_PtrSizeType ValEndRam = 0U;
    f596:	2300      	movs	r3, #0
    f598:	9303      	str	r3, [sp, #12]
    Flexcan_Ip_StatusType Status = FLEXCAN_STATUS_SUCCESS;
    f59a:	2300      	movs	r3, #0
    f59c:	930b      	str	r3, [sp, #44]	; 0x2c

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(maxMsgBuffNum>0U);
    #endif

    ValEndMbPointer = FlexCAN_GetMsgBuffRegion(base, (maxMsgBuffNum - (uint32)1U));
    f59e:	9b00      	ldr	r3, [sp, #0]
    f5a0:	3b01      	subs	r3, #1
    f5a2:	4619      	mov	r1, r3
    f5a4:	9801      	ldr	r0, [sp, #4]
    f5a6:	f7ff f979 	bl	e89c <FlexCAN_GetMsgBuffRegion>
    f5aa:	9009      	str	r0, [sp, #36]	; 0x24

    ValEndMb = (Flexcan_Ip_PtrSizeType)ValEndMbPointer + Can_Real_Payload + Arbitration_Field_Size;
    f5ac:	f89d 2016 	ldrb.w	r2, [sp, #22]
    f5b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f5b2:	441a      	add	r2, r3
    f5b4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    f5b8:	4413      	add	r3, r2
    f5ba:	9304      	str	r3, [sp, #16]
    else
    {
        ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    }
#else
    ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    f5bc:	9801      	ldr	r0, [sp, #4]
    f5be:	f7ff f9e7 	bl	e990 <FlexCAN_GetMaxMbNum>
    f5c2:	4603      	mov	r3, r0
    f5c4:	011b      	lsls	r3, r3, #4
    f5c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f5c8:	4413      	add	r3, r2
    f5ca:	9303      	str	r3, [sp, #12]
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */

    if ((ValEndMb > ValEndRam) || (maxMsgBuffNum > FlexCAN_GetMaxMbNum(base)))
    f5cc:	9a04      	ldr	r2, [sp, #16]
    f5ce:	9b03      	ldr	r3, [sp, #12]
    f5d0:	429a      	cmp	r2, r3
    f5d2:	d806      	bhi.n	f5e2 <FlexCAN_SetMaxMsgBuffNum+0x86>
    f5d4:	9801      	ldr	r0, [sp, #4]
    f5d6:	f7ff f9db 	bl	e990 <FlexCAN_GetMaxMbNum>
    f5da:	4602      	mov	r2, r0
    f5dc:	9b00      	ldr	r3, [sp, #0]
    f5de:	4293      	cmp	r3, r2
    f5e0:	d901      	bls.n	f5e6 <FlexCAN_SetMaxMsgBuffNum+0x8a>
    {
        Status = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    f5e2:	2304      	movs	r3, #4
    f5e4:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    if (FLEXCAN_STATUS_SUCCESS == Status)
    f5e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f5e8:	2b00      	cmp	r3, #0
    f5ea:	d142      	bne.n	f672 <FlexCAN_SetMaxMsgBuffNum+0x116>
    {
        /* Set the maximum number of MBs*/
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MAXMB_MASK) | (((maxMsgBuffNum-1U) << FLEXCAN_MCR_MAXMB_SHIFT) & FLEXCAN_MCR_MAXMB_MASK);
    f5ec:	9b01      	ldr	r3, [sp, #4]
    f5ee:	681b      	ldr	r3, [r3, #0]
    f5f0:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
    f5f4:	9b00      	ldr	r3, [sp, #0]
    f5f6:	3b01      	subs	r3, #1
    f5f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f5fc:	431a      	orrs	r2, r3
    f5fe:	9b01      	ldr	r3, [sp, #4]
    f600:	601a      	str	r2, [r3, #0]
        if (!(((base->MCR & FLEXCAN_MCR_RFEN_MASK) >> FLEXCAN_MCR_RFEN_SHIFT) != 0U))
    f602:	9b01      	ldr	r3, [sp, #4]
    f604:	681b      	ldr	r3, [r3, #0]
    f606:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    f60a:	2b00      	cmp	r3, #0
    f60c:	d131      	bne.n	f672 <FlexCAN_SetMaxMsgBuffNum+0x116>
        {
            /* Initialize all message buffers as inactive */
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    f60e:	2300      	movs	r3, #0
    f610:	930d      	str	r3, [sp, #52]	; 0x34
    f612:	e02a      	b.n	f66a <FlexCAN_SetMaxMsgBuffNum+0x10e>
            {
                Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, MsgBuffIdx);
    f614:	990d      	ldr	r1, [sp, #52]	; 0x34
    f616:	9801      	ldr	r0, [sp, #4]
    f618:	f7ff f940 	bl	e89c <FlexCAN_GetMsgBuffRegion>
    f61c:	9008      	str	r0, [sp, #32]
                Flexcan_Mb_Id   = &Flexcan_Mb[1];
    f61e:	9b08      	ldr	r3, [sp, #32]
    f620:	3304      	adds	r3, #4
    f622:	9307      	str	r3, [sp, #28]
                Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    f624:	9b08      	ldr	r3, [sp, #32]
    f626:	3308      	adds	r3, #8
    f628:	9306      	str	r3, [sp, #24]
                *Flexcan_Mb = 0x0U;
    f62a:	9b08      	ldr	r3, [sp, #32]
    f62c:	2200      	movs	r2, #0
    f62e:	601a      	str	r2, [r3, #0]
                *Flexcan_Mb_Id = 0x0U;
    f630:	9b07      	ldr	r3, [sp, #28]
    f632:	2200      	movs	r2, #0
    f634:	601a      	str	r2, [r3, #0]
                Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, MsgBuffIdx);
    f636:	990d      	ldr	r1, [sp, #52]	; 0x34
    f638:	9801      	ldr	r0, [sp, #4]
    f63a:	f7ff fc5d 	bl	eef8 <FlexCAN_GetMbPayloadSize>
    f63e:	4603      	mov	r3, r0
    f640:	f88d 3016 	strb.w	r3, [sp, #22]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    f644:	2300      	movs	r3, #0
    f646:	930c      	str	r3, [sp, #48]	; 0x30
    f648:	e007      	b.n	f65a <FlexCAN_SetMaxMsgBuffNum+0xfe>
                {
                   Flexcan_Mb_Data[DataByte] = 0x0U;
    f64a:	9a06      	ldr	r2, [sp, #24]
    f64c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f64e:	4413      	add	r3, r2
    f650:	2200      	movs	r2, #0
    f652:	701a      	strb	r2, [r3, #0]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    f654:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f656:	3301      	adds	r3, #1
    f658:	930c      	str	r3, [sp, #48]	; 0x30
    f65a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    f65e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f660:	429a      	cmp	r2, r3
    f662:	d3f2      	bcc.n	f64a <FlexCAN_SetMaxMsgBuffNum+0xee>
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    f664:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f666:	3301      	adds	r3, #1
    f668:	930d      	str	r3, [sp, #52]	; 0x34
    f66a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f66c:	9b00      	ldr	r3, [sp, #0]
    f66e:	429a      	cmp	r2, r3
    f670:	d3d0      	bcc.n	f614 <FlexCAN_SetMaxMsgBuffNum+0xb8>
                }
            }
        }
    }
    return Status;
    f672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    f674:	4618      	mov	r0, r3
    f676:	b00f      	add	sp, #60	; 0x3c
    f678:	f85d fb04 	ldr.w	pc, [sp], #4

0000f67c <FlexCAN_SetOperationMode>:
 * Description   : Enable a FlexCAN operation mode.
 * This function will enable one of the modes listed in flexcan_operation_modes_t.
 *
 *END**************************************************************************/
void FlexCAN_SetOperationMode(FLEXCAN_Type * base, Flexcan_Ip_ModesType mode)
{
    f67c:	b500      	push	{lr}
    f67e:	b083      	sub	sp, #12
    f680:	9001      	str	r0, [sp, #4]
    f682:	9100      	str	r1, [sp, #0]
    switch (mode)
    f684:	9b00      	ldr	r3, [sp, #0]
    f686:	2b02      	cmp	r3, #2
    f688:	d01d      	beq.n	f6c6 <FlexCAN_SetOperationMode+0x4a>
    f68a:	9b00      	ldr	r3, [sp, #0]
    f68c:	2b02      	cmp	r3, #2
    f68e:	d82b      	bhi.n	f6e8 <FlexCAN_SetOperationMode+0x6c>
    f690:	9b00      	ldr	r3, [sp, #0]
    f692:	2b00      	cmp	r3, #0
    f694:	d003      	beq.n	f69e <FlexCAN_SetOperationMode+0x22>
    f696:	9b00      	ldr	r3, [sp, #0]
    f698:	2b01      	cmp	r3, #1
    f69a:	d00d      	beq.n	f6b8 <FlexCAN_SetOperationMode+0x3c>
            /* Enable Self Reception */
            FlexCAN_SetSelfReception(base, TRUE);
            break;
        default:
            /* Should not get here */
            break;
    f69c:	e024      	b.n	f6e8 <FlexCAN_SetOperationMode+0x6c>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    f69e:	9b01      	ldr	r3, [sp, #4]
    f6a0:	685b      	ldr	r3, [r3, #4]
    f6a2:	f023 0208 	bic.w	r2, r3, #8
    f6a6:	9b01      	ldr	r3, [sp, #4]
    f6a8:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(0U);
    f6aa:	9b01      	ldr	r3, [sp, #4]
    f6ac:	685b      	ldr	r3, [r3, #4]
    f6ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    f6b2:	9b01      	ldr	r3, [sp, #4]
    f6b4:	605a      	str	r2, [r3, #4]
            break;
    f6b6:	e018      	b.n	f6ea <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(1U);
    f6b8:	9b01      	ldr	r3, [sp, #4]
    f6ba:	685b      	ldr	r3, [r3, #4]
    f6bc:	f043 0208 	orr.w	r2, r3, #8
    f6c0:	9b01      	ldr	r3, [sp, #4]
    f6c2:	605a      	str	r2, [r3, #4]
            break;
    f6c4:	e011      	b.n	f6ea <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(1U);
    f6c6:	9b01      	ldr	r3, [sp, #4]
    f6c8:	685b      	ldr	r3, [r3, #4]
    f6ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    f6ce:	9b01      	ldr	r3, [sp, #4]
    f6d0:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    f6d2:	9b01      	ldr	r3, [sp, #4]
    f6d4:	685b      	ldr	r3, [r3, #4]
    f6d6:	f023 0208 	bic.w	r2, r3, #8
    f6da:	9b01      	ldr	r3, [sp, #4]
    f6dc:	605a      	str	r2, [r3, #4]
            FlexCAN_SetSelfReception(base, TRUE);
    f6de:	2101      	movs	r1, #1
    f6e0:	9801      	ldr	r0, [sp, #4]
    f6e2:	f7fe ff7f 	bl	e5e4 <FlexCAN_SetSelfReception>
            break;
    f6e6:	e000      	b.n	f6ea <FlexCAN_SetOperationMode+0x6e>
            break;
    f6e8:	bf00      	nop
    }
}
    f6ea:	bf00      	nop
    f6ec:	b003      	add	sp, #12
    f6ee:	f85d fb04 	ldr.w	pc, [sp], #4

0000f6f2 <FlexCAN_SetRxFifoFilter>:
 *END**************************************************************************/
void FlexCAN_SetRxFifoFilter(FLEXCAN_Type * base,
                             Flexcan_Ip_RxFifoIdElementFormatType idFormat,
                             const Flexcan_Ip_IdTableType * idFilterTable
                            )
{
    f6f2:	b500      	push	{lr}
    f6f4:	b08d      	sub	sp, #52	; 0x34
    f6f6:	9003      	str	r0, [sp, #12]
    f6f8:	9102      	str	r1, [sp, #8]
    f6fa:	9201      	str	r2, [sp, #4]

    /* Set RX FIFO ID filter table elements*/
    uint32 i, j, NumOfFilters;
    uint32 Val1 = 0UL, Val2 = 0UL, Val = 0UL;
    f6fc:	2300      	movs	r3, #0
    f6fe:	9309      	str	r3, [sp, #36]	; 0x24
    f700:	2300      	movs	r3, #0
    f702:	9308      	str	r3, [sp, #32]
    f704:	2300      	movs	r3, #0
    f706:	9307      	str	r3, [sp, #28]
    volatile uint32 * FilterTable = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_RX_FIFO_FILTER_TABLE_OFFSET);
    f708:	9b03      	ldr	r3, [sp, #12]
    f70a:	33e0      	adds	r3, #224	; 0xe0
    f70c:	9306      	str	r3, [sp, #24]

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert((idFilterTable != NULL_PTR) || (FLEXCAN_RX_FIFO_ID_FORMAT_D == idFormat));
    #endif

    NumOfFilters = (((base->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    f70e:	9b03      	ldr	r3, [sp, #12]
    f710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f712:	0e1b      	lsrs	r3, r3, #24
    f714:	f003 030f 	and.w	r3, r3, #15
    f718:	9305      	str	r3, [sp, #20]
    f71a:	9b02      	ldr	r3, [sp, #8]
    f71c:	2b03      	cmp	r3, #3
    f71e:	f200 81e7 	bhi.w	faf0 <FlexCAN_SetRxFifoFilter+0x3fe>
    f722:	a201      	add	r2, pc, #4	; (adr r2, f728 <FlexCAN_SetRxFifoFilter+0x36>)
    f724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f728:	0000f739 	.word	0x0000f739
    f72c:	0000f7d3 	.word	0x0000f7d3
    f730:	0000f90d 	.word	0x0000f90d
    f734:	0000fadb 	.word	0x0000fadb
    switch (idFormat)
    {
        case (FLEXCAN_RX_FIFO_ID_FORMAT_A):
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f738:	f004 ff18 	bl	1456c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            /* One full ID (standard and extended) per ID Filter Table element.*/
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    f73c:	9b03      	ldr	r3, [sp, #12]
    f73e:	681b      	ldr	r3, [r3, #0]
    f740:	f423 7240 	bic.w	r2, r3, #768	; 0x300
            (base->MCR) =
    f744:	9b03      	ldr	r3, [sp, #12]
    f746:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_A)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f748:	f004 ff3c 	bl	145c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f74c:	2300      	movs	r3, #0
    f74e:	930b      	str	r3, [sp, #44]	; 0x2c
    f750:	e038      	b.n	f7c4 <FlexCAN_SetRxFifoFilter+0xd2>
            {
                Val = 0UL;
    f752:	2300      	movs	r3, #0
    f754:	9307      	str	r3, [sp, #28]

                if (idFilterTable[i].isRemoteFrame)
    f756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f758:	00db      	lsls	r3, r3, #3
    f75a:	9a01      	ldr	r2, [sp, #4]
    f75c:	4413      	add	r3, r2
    f75e:	781b      	ldrb	r3, [r3, #0]
    f760:	2b00      	cmp	r3, #0
    f762:	d002      	beq.n	f76a <FlexCAN_SetRxFifoFilter+0x78>
                {
                    Val = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    f764:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    f768:	9307      	str	r3, [sp, #28]
                }

                if (idFilterTable[i].isExtendedFrame)
    f76a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f76c:	00db      	lsls	r3, r3, #3
    f76e:	9a01      	ldr	r2, [sp, #4]
    f770:	4413      	add	r3, r2
    f772:	785b      	ldrb	r3, [r3, #1]
    f774:	2b00      	cmp	r3, #0
    f776:	d013      	beq.n	f7a0 <FlexCAN_SetRxFifoFilter+0xae>
                {
                    Val |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    f778:	9b07      	ldr	r3, [sp, #28]
    f77a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    f77e:	9307      	str	r3, [sp, #28]
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_SHIFT) &
    f780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f782:	00db      	lsls	r3, r3, #3
    f784:	9a01      	ldr	r2, [sp, #4]
    f786:	4413      	add	r3, r2
    f788:	685b      	ldr	r3, [r3, #4]
    f78a:	005b      	lsls	r3, r3, #1
    f78c:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
    f790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f792:	009b      	lsls	r3, r3, #2
    f794:	9a06      	ldr	r2, [sp, #24]
    f796:	4413      	add	r3, r2
    f798:	9a07      	ldr	r2, [sp, #28]
    f79a:	440a      	add	r2, r1
    f79c:	601a      	str	r2, [r3, #0]
    f79e:	e00e      	b.n	f7be <FlexCAN_SetRxFifoFilter+0xcc>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_MASK
                                           );
                }
                else
                {
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_SHIFT) &
    f7a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f7a2:	00db      	lsls	r3, r3, #3
    f7a4:	9a01      	ldr	r2, [sp, #4]
    f7a6:	4413      	add	r3, r2
    f7a8:	685b      	ldr	r3, [r3, #4]
    f7aa:	04da      	lsls	r2, r3, #19
    f7ac:	4b9d      	ldr	r3, [pc, #628]	; (fa24 <FlexCAN_SetRxFifoFilter+0x332>)
    f7ae:	4013      	ands	r3, r2
    f7b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f7b2:	0092      	lsls	r2, r2, #2
    f7b4:	9906      	ldr	r1, [sp, #24]
    f7b6:	440a      	add	r2, r1
    f7b8:	9907      	ldr	r1, [sp, #28]
    f7ba:	440b      	add	r3, r1
    f7bc:	6013      	str	r3, [r2, #0]
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f7be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f7c0:	3301      	adds	r3, #1
    f7c2:	930b      	str	r3, [sp, #44]	; 0x2c
    f7c4:	9b05      	ldr	r3, [sp, #20]
    f7c6:	3301      	adds	r3, #1
    f7c8:	00db      	lsls	r3, r3, #3
    f7ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f7cc:	429a      	cmp	r2, r3
    f7ce:	d3c0      	bcc.n	f752 <FlexCAN_SetRxFifoFilter+0x60>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_MASK
                                           );
                }
            }
            break;
    f7d0:	e18f      	b.n	faf2 <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_B):
            /* Two full standard IDs or two partial 14-bit (standard and extended) IDs*/
            /* per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f7d2:	f004 fecb 	bl	1456c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) | ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_B)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
    f7d6:	9b03      	ldr	r3, [sp, #12]
    f7d8:	681b      	ldr	r3, [r3, #0]
    f7da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    f7de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
            (base->MCR) =
    f7e2:	9b03      	ldr	r3, [sp, #12]
    f7e4:	601a      	str	r2, [r3, #0]
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f7e6:	f004 feed 	bl	145c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    f7ea:	2300      	movs	r3, #0
    f7ec:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f7ee:	2300      	movs	r3, #0
    f7f0:	930b      	str	r3, [sp, #44]	; 0x2c
    f7f2:	e083      	b.n	f8fc <FlexCAN_SetRxFifoFilter+0x20a>
            {
                Val1 = 0U;
    f7f4:	2300      	movs	r3, #0
    f7f6:	9309      	str	r3, [sp, #36]	; 0x24
                Val2 = 0U;
    f7f8:	2300      	movs	r3, #0
    f7fa:	9308      	str	r3, [sp, #32]

                if (idFilterTable[j].isRemoteFrame)
    f7fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f7fe:	00db      	lsls	r3, r3, #3
    f800:	9a01      	ldr	r2, [sp, #4]
    f802:	4413      	add	r3, r2
    f804:	781b      	ldrb	r3, [r3, #0]
    f806:	2b00      	cmp	r3, #0
    f808:	d002      	beq.n	f810 <FlexCAN_SetRxFifoFilter+0x11e>
                {
                    Val1 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    f80a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    f80e:	9309      	str	r3, [sp, #36]	; 0x24
                }

                if (idFilterTable[j + 1U].isRemoteFrame)
    f810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f812:	3301      	adds	r3, #1
    f814:	00db      	lsls	r3, r3, #3
    f816:	9a01      	ldr	r2, [sp, #4]
    f818:	4413      	add	r3, r2
    f81a:	781b      	ldrb	r3, [r3, #0]
    f81c:	2b00      	cmp	r3, #0
    f81e:	d002      	beq.n	f826 <FlexCAN_SetRxFifoFilter+0x134>
                {
                    Val2 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_RTR_SHIFT;
    f820:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    f824:	9308      	str	r3, [sp, #32]
                }

                if (idFilterTable[j].isExtendedFrame)
    f826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f828:	00db      	lsls	r3, r3, #3
    f82a:	9a01      	ldr	r2, [sp, #4]
    f82c:	4413      	add	r3, r2
    f82e:	785b      	ldrb	r3, [r3, #1]
    f830:	2b00      	cmp	r3, #0
    f832:	d014      	beq.n	f85e <FlexCAN_SetRxFifoFilter+0x16c>
                {
                    Val1 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    f834:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f836:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    f83a:	9309      	str	r3, [sp, #36]	; 0x24

                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    f83c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f83e:	00db      	lsls	r3, r3, #3
    f840:	9a01      	ldr	r2, [sp, #4]
    f842:	4413      	add	r3, r2
    f844:	685b      	ldr	r3, [r3, #4]
    f846:	0bdb      	lsrs	r3, r3, #15
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT1
    f848:	041a      	lsls	r2, r3, #16
    f84a:	4b77      	ldr	r3, [pc, #476]	; (fa28 <FlexCAN_SetRxFifoFilter+0x336>)
    f84c:	4013      	ands	r3, r2
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    f84e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f850:	0092      	lsls	r2, r2, #2
    f852:	9906      	ldr	r1, [sp, #24]
    f854:	440a      	add	r2, r1
    f856:	9909      	ldr	r1, [sp, #36]	; 0x24
    f858:	440b      	add	r3, r1
    f85a:	6013      	str	r3, [r2, #0]
    f85c:	e00e      	b.n	f87c <FlexCAN_SetRxFifoFilter+0x18a>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + ((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    f85e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f860:	00db      	lsls	r3, r3, #3
    f862:	9a01      	ldr	r2, [sp, #4]
    f864:	4413      	add	r3, r2
    f866:	685b      	ldr	r3, [r3, #4]
    f868:	04da      	lsls	r2, r3, #19
    f86a:	4b6e      	ldr	r3, [pc, #440]	; (fa24 <FlexCAN_SetRxFifoFilter+0x332>)
    f86c:	4013      	ands	r3, r2
    f86e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f870:	0092      	lsls	r2, r2, #2
    f872:	9906      	ldr	r1, [sp, #24]
    f874:	440a      	add	r2, r1
    f876:	9909      	ldr	r1, [sp, #36]	; 0x24
    f878:	440b      	add	r3, r1
    f87a:	6013      	str	r3, [r2, #0]
                                              FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT1
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    f87c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f87e:	3301      	adds	r3, #1
    f880:	00db      	lsls	r3, r3, #3
    f882:	9a01      	ldr	r2, [sp, #4]
    f884:	4413      	add	r3, r2
    f886:	785b      	ldrb	r3, [r3, #1]
    f888:	2b00      	cmp	r3, #0
    f88a:	d01a      	beq.n	f8c2 <FlexCAN_SetRxFifoFilter+0x1d0>
                {
                    Val2 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_IDE_SHIFT;
    f88c:	9b08      	ldr	r3, [sp, #32]
    f88e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    f892:	9308      	str	r3, [sp, #32]

                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    f894:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f896:	009b      	lsls	r3, r3, #2
    f898:	9a06      	ldr	r2, [sp, #24]
    f89a:	4413      	add	r3, r2
    f89c:	6819      	ldr	r1, [r3, #0]
    f89e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f8a0:	3301      	adds	r3, #1
    f8a2:	00db      	lsls	r3, r3, #3
    f8a4:	9a01      	ldr	r2, [sp, #4]
    f8a6:	4413      	add	r3, r2
    f8a8:	685b      	ldr	r3, [r3, #4]
    f8aa:	0bdb      	lsrs	r3, r3, #15
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT2
    f8ac:	f3c3 020d 	ubfx	r2, r3, #0, #14
                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    f8b0:	9b08      	ldr	r3, [sp, #32]
    f8b2:	441a      	add	r2, r3
    f8b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8b6:	009b      	lsls	r3, r3, #2
    f8b8:	9806      	ldr	r0, [sp, #24]
    f8ba:	4403      	add	r3, r0
    f8bc:	430a      	orrs	r2, r1
    f8be:	601a      	str	r2, [r3, #0]
    f8c0:	e016      	b.n	f8f0 <FlexCAN_SetRxFifoFilter+0x1fe>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val2 + ((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    f8c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8c4:	009b      	lsls	r3, r3, #2
    f8c6:	9a06      	ldr	r2, [sp, #24]
    f8c8:	4413      	add	r3, r2
    f8ca:	6819      	ldr	r1, [r3, #0]
    f8cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f8ce:	3301      	adds	r3, #1
    f8d0:	00db      	lsls	r3, r3, #3
    f8d2:	9a01      	ldr	r2, [sp, #4]
    f8d4:	4413      	add	r3, r2
    f8d6:	685b      	ldr	r3, [r3, #4]
    f8d8:	00da      	lsls	r2, r3, #3
    f8da:	f643 73f8 	movw	r3, #16376	; 0x3ff8
    f8de:	4013      	ands	r3, r2
    f8e0:	9a08      	ldr	r2, [sp, #32]
    f8e2:	441a      	add	r2, r3
    f8e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8e6:	009b      	lsls	r3, r3, #2
    f8e8:	9806      	ldr	r0, [sp, #24]
    f8ea:	4403      	add	r3, r0
    f8ec:	430a      	orrs	r2, r1
    f8ee:	601a      	str	r2, [r3, #0]
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT2
                                             );
                }

                j = j + 2U;
    f8f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f8f2:	3302      	adds	r3, #2
    f8f4:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f8f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8f8:	3301      	adds	r3, #1
    f8fa:	930b      	str	r3, [sp, #44]	; 0x2c
    f8fc:	9b05      	ldr	r3, [sp, #20]
    f8fe:	3301      	adds	r3, #1
    f900:	00db      	lsls	r3, r3, #3
    f902:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f904:	429a      	cmp	r2, r3
    f906:	f4ff af75 	bcc.w	f7f4 <FlexCAN_SetRxFifoFilter+0x102>
            }
            break;
    f90a:	e0f2      	b.n	faf2 <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_C):
            /* Four partial 8-bit Standard IDs per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f90c:	f004 fe2e 	bl	1456c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    f910:	9b03      	ldr	r3, [sp, #12]
    f912:	681b      	ldr	r3, [r3, #0]
    f914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    f918:	f443 7200 	orr.w	r2, r3, #512	; 0x200
            (base->MCR) =
    f91c:	9b03      	ldr	r3, [sp, #12]
    f91e:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_C)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f920:	f004 fe50 	bl	145c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    f924:	2300      	movs	r3, #0
    f926:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f928:	2300      	movs	r3, #0
    f92a:	930b      	str	r3, [sp, #44]	; 0x2c
    f92c:	e0cd      	b.n	faca <FlexCAN_SetRxFifoFilter+0x3d8>
            {
                if (idFilterTable[j].isExtendedFrame)
    f92e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f930:	00db      	lsls	r3, r3, #3
    f932:	9a01      	ldr	r2, [sp, #4]
    f934:	4413      	add	r3, r2
    f936:	785b      	ldrb	r3, [r3, #1]
    f938:	2b00      	cmp	r3, #0
    f93a:	d00e      	beq.n	f95a <FlexCAN_SetRxFifoFilter+0x268>
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f93c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f93e:	00db      	lsls	r3, r3, #3
    f940:	9a01      	ldr	r2, [sp, #4]
    f942:	4413      	add	r3, r2
    f944:	685b      	ldr	r3, [r3, #4]
    f946:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    f948:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f94a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f94c:	009b      	lsls	r3, r3, #2
    f94e:	9a06      	ldr	r2, [sp, #24]
    f950:	4413      	add	r3, r2
    f952:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f954:	440a      	add	r2, r1
    f956:	601a      	str	r2, [r3, #0]
    f958:	e00d      	b.n	f976 <FlexCAN_SetRxFifoFilter+0x284>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f95a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f95c:	00db      	lsls	r3, r3, #3
    f95e:	9a01      	ldr	r2, [sp, #4]
    f960:	4413      	add	r3, r2
    f962:	685b      	ldr	r3, [r3, #4]
    f964:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    f966:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f96a:	009b      	lsls	r3, r3, #2
    f96c:	9a06      	ldr	r2, [sp, #24]
    f96e:	4413      	add	r3, r2
    f970:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f972:	440a      	add	r2, r1
    f974:	601a      	str	r2, [r3, #0]
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    f976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f978:	3301      	adds	r3, #1
    f97a:	00db      	lsls	r3, r3, #3
    f97c:	9a01      	ldr	r2, [sp, #4]
    f97e:	4413      	add	r3, r2
    f980:	785b      	ldrb	r3, [r3, #1]
    f982:	2b00      	cmp	r3, #0
    f984:	d017      	beq.n	f9b6 <FlexCAN_SetRxFifoFilter+0x2c4>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f988:	009b      	lsls	r3, r3, #2
    f98a:	9a06      	ldr	r2, [sp, #24]
    f98c:	4413      	add	r3, r2
    f98e:	6819      	ldr	r1, [r3, #0]
    f990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f992:	3301      	adds	r3, #1
    f994:	00db      	lsls	r3, r3, #3
    f996:	9a01      	ldr	r2, [sp, #4]
    f998:	4413      	add	r3, r2
    f99a:	685b      	ldr	r3, [r3, #4]
    f99c:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    f99e:	041b      	lsls	r3, r3, #16
    f9a0:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f9a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f9a6:	441a      	add	r2, r3
    f9a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f9aa:	009b      	lsls	r3, r3, #2
    f9ac:	9806      	ldr	r0, [sp, #24]
    f9ae:	4403      	add	r3, r0
    f9b0:	430a      	orrs	r2, r1
    f9b2:	601a      	str	r2, [r3, #0]
    f9b4:	e016      	b.n	f9e4 <FlexCAN_SetRxFifoFilter+0x2f2>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f9b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f9b8:	009b      	lsls	r3, r3, #2
    f9ba:	9a06      	ldr	r2, [sp, #24]
    f9bc:	4413      	add	r3, r2
    f9be:	6819      	ldr	r1, [r3, #0]
    f9c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f9c2:	3301      	adds	r3, #1
    f9c4:	00db      	lsls	r3, r3, #3
    f9c6:	9a01      	ldr	r2, [sp, #4]
    f9c8:	4413      	add	r3, r2
    f9ca:	685b      	ldr	r3, [r3, #4]
    f9cc:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    f9ce:	041b      	lsls	r3, r3, #16
    f9d0:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f9d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f9d6:	441a      	add	r2, r3
    f9d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f9da:	009b      	lsls	r3, r3, #2
    f9dc:	9806      	ldr	r0, [sp, #24]
    f9de:	4403      	add	r3, r0
    f9e0:	430a      	orrs	r2, r1
    f9e2:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 2U].isExtendedFrame)
    f9e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f9e6:	3302      	adds	r3, #2
    f9e8:	00db      	lsls	r3, r3, #3
    f9ea:	9a01      	ldr	r2, [sp, #4]
    f9ec:	4413      	add	r3, r2
    f9ee:	785b      	ldrb	r3, [r3, #1]
    f9f0:	2b00      	cmp	r3, #0
    f9f2:	d01b      	beq.n	fa2c <FlexCAN_SetRxFifoFilter+0x33a>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f9f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f9f6:	009b      	lsls	r3, r3, #2
    f9f8:	9a06      	ldr	r2, [sp, #24]
    f9fa:	4413      	add	r3, r2
    f9fc:	6819      	ldr	r1, [r3, #0]
    f9fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fa00:	3302      	adds	r3, #2
    fa02:	00db      	lsls	r3, r3, #3
    fa04:	9a01      	ldr	r2, [sp, #4]
    fa06:	4413      	add	r3, r2
    fa08:	685b      	ldr	r3, [r3, #4]
    fa0a:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    fa0c:	021b      	lsls	r3, r3, #8
    fa0e:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    fa10:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fa12:	441a      	add	r2, r3
    fa14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa16:	009b      	lsls	r3, r3, #2
    fa18:	9806      	ldr	r0, [sp, #24]
    fa1a:	4403      	add	r3, r0
    fa1c:	430a      	orrs	r2, r1
    fa1e:	601a      	str	r2, [r3, #0]
    fa20:	e01a      	b.n	fa58 <FlexCAN_SetRxFifoFilter+0x366>
    fa22:	bf00      	nop
    fa24:	3ff80000 	.word	0x3ff80000
    fa28:	3fff0000 	.word	0x3fff0000
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    fa2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa2e:	009b      	lsls	r3, r3, #2
    fa30:	9a06      	ldr	r2, [sp, #24]
    fa32:	4413      	add	r3, r2
    fa34:	6819      	ldr	r1, [r3, #0]
    fa36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fa38:	3302      	adds	r3, #2
    fa3a:	00db      	lsls	r3, r3, #3
    fa3c:	9a01      	ldr	r2, [sp, #4]
    fa3e:	4413      	add	r3, r2
    fa40:	685b      	ldr	r3, [r3, #4]
    fa42:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    fa44:	021b      	lsls	r3, r3, #8
    fa46:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    fa48:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fa4a:	441a      	add	r2, r3
    fa4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa4e:	009b      	lsls	r3, r3, #2
    fa50:	9806      	ldr	r0, [sp, #24]
    fa52:	4403      	add	r3, r0
    fa54:	430a      	orrs	r2, r1
    fa56:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 3U].isExtendedFrame)
    fa58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fa5a:	3303      	adds	r3, #3
    fa5c:	00db      	lsls	r3, r3, #3
    fa5e:	9a01      	ldr	r2, [sp, #4]
    fa60:	4413      	add	r3, r2
    fa62:	785b      	ldrb	r3, [r3, #1]
    fa64:	2b00      	cmp	r3, #0
    fa66:	d015      	beq.n	fa94 <FlexCAN_SetRxFifoFilter+0x3a2>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    fa68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa6a:	009b      	lsls	r3, r3, #2
    fa6c:	9a06      	ldr	r2, [sp, #24]
    fa6e:	4413      	add	r3, r2
    fa70:	6819      	ldr	r1, [r3, #0]
    fa72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fa74:	3303      	adds	r3, #3
    fa76:	00db      	lsls	r3, r3, #3
    fa78:	9a01      	ldr	r2, [sp, #4]
    fa7a:	4413      	add	r3, r2
    fa7c:	685b      	ldr	r3, [r3, #4]
    fa7e:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    fa80:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    fa82:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fa84:	441a      	add	r2, r3
    fa86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa88:	009b      	lsls	r3, r3, #2
    fa8a:	9806      	ldr	r0, [sp, #24]
    fa8c:	4403      	add	r3, r0
    fa8e:	430a      	orrs	r2, r1
    fa90:	601a      	str	r2, [r3, #0]
    fa92:	e014      	b.n	fabe <FlexCAN_SetRxFifoFilter+0x3cc>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 +
    fa94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa96:	009b      	lsls	r3, r3, #2
    fa98:	9a06      	ldr	r2, [sp, #24]
    fa9a:	4413      	add	r3, r2
    fa9c:	6819      	ldr	r1, [r3, #0]
                                      (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    fa9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    faa0:	3303      	adds	r3, #3
    faa2:	00db      	lsls	r3, r3, #3
    faa4:	9a01      	ldr	r2, [sp, #4]
    faa6:	4413      	add	r3, r2
    faa8:	685b      	ldr	r3, [r3, #4]
    faaa:	08db      	lsrs	r3, r3, #3
                                        FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                       ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    faac:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 +
    faae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fab0:	441a      	add	r2, r3
    fab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fab4:	009b      	lsls	r3, r3, #2
    fab6:	9806      	ldr	r0, [sp, #24]
    fab8:	4403      	add	r3, r0
    faba:	430a      	orrs	r2, r1
    fabc:	601a      	str	r2, [r3, #0]
                                      );
                }

                j = j + 4U;
    fabe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fac0:	3304      	adds	r3, #4
    fac2:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    fac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fac6:	3301      	adds	r3, #1
    fac8:	930b      	str	r3, [sp, #44]	; 0x2c
    faca:	9b05      	ldr	r3, [sp, #20]
    facc:	3301      	adds	r3, #1
    face:	00db      	lsls	r3, r3, #3
    fad0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    fad2:	429a      	cmp	r2, r3
    fad4:	f4ff af2b 	bcc.w	f92e <FlexCAN_SetRxFifoFilter+0x23c>
            }
            break;
    fad8:	e00b      	b.n	faf2 <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_D):
            /* All frames rejected.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    fada:	f004 fd47 	bl	1456c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    fade:	9b03      	ldr	r3, [sp, #12]
    fae0:	681b      	ldr	r3, [r3, #0]
    fae2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
            (base->MCR) =
    fae6:	9b03      	ldr	r3, [sp, #12]
    fae8:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_D)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    faea:	f004 fd6b 	bl	145c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            break;
    faee:	e000      	b.n	faf2 <FlexCAN_SetRxFifoFilter+0x400>
        default:
            /* Should not get here */
            break;
    faf0:	bf00      	nop
    }
}
    faf2:	bf00      	nop
    faf4:	b00d      	add	sp, #52	; 0x34
    faf6:	f85d fb04 	ldr.w	pc, [sp], #4

0000fafa <FlexCAN_ReadRxFifo>:
 * Description   : Read Rx FIFO data.
 * This function will copy MB[0] data field into user's buffer.
 *
 *END**************************************************************************/
void FlexCAN_ReadRxFifo(const FLEXCAN_Type * base, Flexcan_Ip_MsgBuffType * rxFifo)
{
    fafa:	b500      	push	{lr}
    fafc:	b08b      	sub	sp, #44	; 0x2c
    fafe:	9001      	str	r0, [sp, #4]
    fb00:	9100      	str	r1, [sp, #0]
    uint32 x;
    uint8 Index;
    const uint8 * p;
    #endif

    volatile const uint32 * flexcan_mb = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    fb02:	9b01      	ldr	r3, [sp, #4]
    fb04:	3380      	adds	r3, #128	; 0x80
    fb06:	9307      	str	r3, [sp, #28]
    volatile const uint32 * flexcan_mb_id = &flexcan_mb[1];
    fb08:	9b07      	ldr	r3, [sp, #28]
    fb0a:	3304      	adds	r3, #4
    fb0c:	9306      	str	r3, [sp, #24]
    volatile const uint32 * flexcan_mb_data_32 = &flexcan_mb[2];
    fb0e:	9b07      	ldr	r3, [sp, #28]
    fb10:	3308      	adds	r3, #8
    fb12:	9305      	str	r3, [sp, #20]
    uint32 * msgData_32 = NULL_PTR;
    fb14:	2300      	movs	r3, #0
    fb16:	9304      	str	r3, [sp, #16]
    uint8 flexcan_mb_dlc_value = (uint8)(((*flexcan_mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    fb18:	9b07      	ldr	r3, [sp, #28]
    fb1a:	681b      	ldr	r3, [r3, #0]
    fb1c:	0c1b      	lsrs	r3, r3, #16
    fb1e:	b2db      	uxtb	r3, r3
    fb20:	f003 030f 	and.w	r3, r3, #15
    fb24:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 can_real_payload = FlexCAN_ComputePayloadSize(flexcan_mb_dlc_value);
    fb28:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fb2c:	4618      	mov	r0, r3
    fb2e:	f7fe fe6c 	bl	e80a <FlexCAN_ComputePayloadSize>
    fb32:	4603      	mov	r3, r0
    fb34:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(rxFifo != NULL_PTR);
    #endif
    msgData_32 = (uint32 *)(rxFifo->data);
    fb38:	9b00      	ldr	r3, [sp, #0]
    fb3a:	3308      	adds	r3, #8
    fb3c:	9304      	str	r3, [sp, #16]
       Check if the length of received data packet bigger than the maximum length accepted,
       then processing flow shall continue with the maximum length defined by configuration.
       Legacy FIFO just support in normal mode.
    */
    /* no need to check if FD enabled or not because this function just is invoked when legacy fifo enabled only ! */
    if (can_real_payload > 8U)
    fb3e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    fb42:	2b08      	cmp	r3, #8
    fb44:	d902      	bls.n	fb4c <FlexCAN_ReadRxFifo+0x52>
    {
        can_real_payload = 8U;
    fb46:	2308      	movs	r3, #8
    fb48:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    }

    rxFifo->dataLen = can_real_payload;
    fb4c:	9b00      	ldr	r3, [sp, #0]
    fb4e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    fb52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    rxFifo->cs = *flexcan_mb;
    fb56:	9b07      	ldr	r3, [sp, #28]
    fb58:	681a      	ldr	r2, [r3, #0]
    fb5a:	9b00      	ldr	r3, [sp, #0]
    fb5c:	601a      	str	r2, [r3, #0]
    if ((rxFifo->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    fb5e:	9b00      	ldr	r3, [sp, #0]
    fb60:	681b      	ldr	r3, [r3, #0]
    fb62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    fb66:	2b00      	cmp	r3, #0
    fb68:	d004      	beq.n	fb74 <FlexCAN_ReadRxFifo+0x7a>
    {
        rxFifo->msgId = *flexcan_mb_id;
    fb6a:	9b06      	ldr	r3, [sp, #24]
    fb6c:	681a      	ldr	r2, [r3, #0]
    fb6e:	9b00      	ldr	r3, [sp, #0]
    fb70:	605a      	str	r2, [r3, #4]
    fb72:	e004      	b.n	fb7e <FlexCAN_ReadRxFifo+0x84>
    }
    else
    {
        rxFifo->msgId = (*flexcan_mb_id) >> FLEXCAN_IP_ID_STD_SHIFT;
    fb74:	9b06      	ldr	r3, [sp, #24]
    fb76:	681b      	ldr	r3, [r3, #0]
    fb78:	0c9a      	lsrs	r2, r3, #18
    fb7a:	9b00      	ldr	r3, [sp, #0]
    fb7c:	605a      	str	r2, [r3, #4]
    }
    /* Extract the IDHIT */
    rxFifo->id_hit = (uint8)base->RXFIR;
    fb7e:	9b01      	ldr	r3, [sp, #4]
    fb80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    fb82:	b2da      	uxtb	r2, r3
    fb84:	9b00      	ldr	r3, [sp, #0]
    fb86:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    /* Extract the Time Stamp */
    rxFifo->time_stamp = (uint32)((rxFifo->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    fb8a:	9b00      	ldr	r3, [sp, #0]
    fb8c:	681b      	ldr	r3, [r3, #0]
    fb8e:	b29a      	uxth	r2, r3
    fb90:	9b00      	ldr	r3, [sp, #0]
    fb92:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, msgData_32[DataByte >> 2U]);
        }
    }
#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
      /* Copy MB[0] data field into user's buffer */
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    fb94:	2300      	movs	r3, #0
    fb96:	9309      	str	r3, [sp, #36]	; 0x24
    fb98:	e01f      	b.n	fbda <FlexCAN_ReadRxFifo+0xe0>
    {
        MbWord = flexcan_mb_data_32[DataByte >> 2U];
    fb9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fb9c:	089b      	lsrs	r3, r3, #2
    fb9e:	009b      	lsls	r3, r3, #2
    fba0:	9a05      	ldr	r2, [sp, #20]
    fba2:	4413      	add	r3, r2
    fba4:	681b      	ldr	r3, [r3, #0]
    fba6:	9302      	str	r3, [sp, #8]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (msgData_32[DataByte >> 2U]));
    fba8:	9b02      	ldr	r3, [sp, #8]
    fbaa:	0e1a      	lsrs	r2, r3, #24
    fbac:	9b02      	ldr	r3, [sp, #8]
    fbae:	0a1b      	lsrs	r3, r3, #8
    fbb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    fbb4:	431a      	orrs	r2, r3
    fbb6:	9b02      	ldr	r3, [sp, #8]
    fbb8:	021b      	lsls	r3, r3, #8
    fbba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    fbbe:	ea42 0103 	orr.w	r1, r2, r3
    fbc2:	9b02      	ldr	r3, [sp, #8]
    fbc4:	061a      	lsls	r2, r3, #24
    fbc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fbc8:	089b      	lsrs	r3, r3, #2
    fbca:	009b      	lsls	r3, r3, #2
    fbcc:	9804      	ldr	r0, [sp, #16]
    fbce:	4403      	add	r3, r0
    fbd0:	430a      	orrs	r2, r1
    fbd2:	601a      	str	r2, [r3, #0]
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    fbd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fbd6:	3304      	adds	r3, #4
    fbd8:	9309      	str	r3, [sp, #36]	; 0x24
    fbda:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    fbde:	9a09      	ldr	r2, [sp, #36]	; 0x24
    fbe0:	429a      	cmp	r2, r3
    fbe2:	d3da      	bcc.n	fb9a <FlexCAN_ReadRxFifo+0xa0>
    }
#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
}
    fbe4:	bf00      	nop
    fbe6:	bf00      	nop
    fbe8:	b00b      	add	sp, #44	; 0x2c
    fbea:	f85d fb04 	ldr.w	pc, [sp], #4

0000fbee <FlexCAN_IsMbOutOfRange>:
    const FLEXCAN_Type * pBase,
    uint8 u8MbIndex,
    boolean bIsLegacyFifoEn,
    uint32 u32MaxMbNum
)
{
    fbee:	b088      	sub	sp, #32
    fbf0:	9003      	str	r0, [sp, #12]
    fbf2:	9301      	str	r3, [sp, #4]
    fbf4:	460b      	mov	r3, r1
    fbf6:	f88d 300b 	strb.w	r3, [sp, #11]
    fbfa:	4613      	mov	r3, r2
    fbfc:	f88d 300a 	strb.w	r3, [sp, #10]
    boolean ReturnValue = FALSE;
    fc00:	2300      	movs	r3, #0
    fc02:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32NumOfFiFoElement = 0U;
    fc06:	2300      	movs	r3, #0
    fc08:	9306      	str	r3, [sp, #24]
    uint32 u32NumOfMbOccupiedByFiFo = 0U;
    fc0a:	2300      	movs	r3, #0
    fc0c:	9305      	str	r3, [sp, #20]

    if (u8MbIndex >= (uint8)u32MaxMbNum)
    fc0e:	9b01      	ldr	r3, [sp, #4]
    fc10:	b2db      	uxtb	r3, r3
    fc12:	f89d 200b 	ldrb.w	r2, [sp, #11]
    fc16:	429a      	cmp	r2, r3
    fc18:	d303      	bcc.n	fc22 <FlexCAN_IsMbOutOfRange+0x34>
    {
       ReturnValue = TRUE;
    fc1a:	2301      	movs	r3, #1
    fc1c:	f88d 301f 	strb.w	r3, [sp, #31]
    fc20:	e01b      	b.n	fc5a <FlexCAN_IsMbOutOfRange+0x6c>
    }
    /* Check if RX FIFO is enabled*/
    else if (TRUE == bIsLegacyFifoEn)
    fc22:	f89d 300a 	ldrb.w	r3, [sp, #10]
    fc26:	2b00      	cmp	r3, #0
    fc28:	d014      	beq.n	fc54 <FlexCAN_IsMbOutOfRange+0x66>
    {
        /* Get the number of RX FIFO Filters*/
        u32NumOfFiFoElement = (((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    fc2a:	9b03      	ldr	r3, [sp, #12]
    fc2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    fc2e:	0e1b      	lsrs	r3, r3, #24
    fc30:	f003 030f 	and.w	r3, r3, #15
    fc34:	9306      	str	r3, [sp, #24]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        u32NumOfMbOccupiedByFiFo = 5U + ((((u32NumOfFiFoElement) + 1U) * 8U) / 4U);
    fc36:	9b06      	ldr	r3, [sp, #24]
    fc38:	3301      	adds	r3, #1
    fc3a:	00db      	lsls	r3, r3, #3
    fc3c:	089b      	lsrs	r3, r3, #2
    fc3e:	3305      	adds	r3, #5
    fc40:	9305      	str	r3, [sp, #20]
        if (u8MbIndex <= u32NumOfMbOccupiedByFiFo)
    fc42:	f89d 300b 	ldrb.w	r3, [sp, #11]
    fc46:	9a05      	ldr	r2, [sp, #20]
    fc48:	429a      	cmp	r2, r3
    fc4a:	d306      	bcc.n	fc5a <FlexCAN_IsMbOutOfRange+0x6c>
        {
            ReturnValue = TRUE;
    fc4c:	2301      	movs	r3, #1
    fc4e:	f88d 301f 	strb.w	r3, [sp, #31]
    fc52:	e002      	b.n	fc5a <FlexCAN_IsMbOutOfRange+0x6c>
        }
    }
    else
    {
        ReturnValue = FALSE;
    fc54:	2300      	movs	r3, #0
    fc56:	f88d 301f 	strb.w	r3, [sp, #31]
    }

    return ReturnValue;
    fc5a:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    fc5e:	4618      	mov	r0, r3
    fc60:	b008      	add	sp, #32
    fc62:	4770      	bx	lr

0000fc64 <FlexCAN_ConfigCtrlOptions>:
 * Description   : configure controller depending on options
 * note: should be call after FD configuration.
 *
 *END**************************************************************************/
void FlexCAN_ConfigCtrlOptions(FLEXCAN_Type * pBase, uint32 u32Options)
{
    fc64:	b500      	push	{lr}
    fc66:	b083      	sub	sp, #12
    fc68:	9001      	str	r0, [sp, #4]
    fc6a:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON)
    /* If the FD feature is enabled, in order to be ISO-compliant. */
    if ((u32Options & FLEXCAN_IP_ISO_U32) != 0U)
    fc6c:	9b00      	ldr	r3, [sp, #0]
    fc6e:	f003 0320 	and.w	r3, r3, #32
    fc72:	2b00      	cmp	r3, #0
    fc74:	d004      	beq.n	fc80 <FlexCAN_ConfigCtrlOptions+0x1c>
    {
        FlexCAN_SetIsoCan(pBase, TRUE);
    fc76:	2101      	movs	r1, #1
    fc78:	9801      	ldr	r0, [sp, #4]
    fc7a:	f7fe fcd8 	bl	e62e <FlexCAN_SetIsoCan>
    fc7e:	e003      	b.n	fc88 <FlexCAN_ConfigCtrlOptions+0x24>
    }
    else
    {
        /* This maybe don't have sense if the Deinit returns the state of registers at init values */
        FlexCAN_SetIsoCan(pBase, FALSE);
    fc80:	2100      	movs	r1, #0
    fc82:	9801      	ldr	r0, [sp, #4]
    fc84:	f7fe fcd3 	bl	e62e <FlexCAN_SetIsoCan>
    }
#endif /*(FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON) */
    /* Set Entire Frame Arbitration Field Comparison. */
    if ((u32Options & FLEXCAN_IP_EACEN_U32) != 0U)
    fc88:	9b00      	ldr	r3, [sp, #0]
    fc8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    fc8e:	2b00      	cmp	r3, #0
    fc90:	d004      	beq.n	fc9c <FlexCAN_ConfigCtrlOptions+0x38>
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, TRUE);
    fc92:	2101      	movs	r1, #1
    fc94:	9801      	ldr	r0, [sp, #4]
    fc96:	f7fe fce1 	bl	e65c <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    fc9a:	e003      	b.n	fca4 <FlexCAN_ConfigCtrlOptions+0x40>
    }
    else
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, FALSE);
    fc9c:	2100      	movs	r1, #0
    fc9e:	9801      	ldr	r0, [sp, #4]
    fca0:	f7fe fcdc 	bl	e65c <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    }
#if (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)
    /* Set protocol Exception */
    if ((u32Options & FLEXCAN_IP_PROTOCOL_EXCEPTION_U32) != 0U)
    fca4:	9b00      	ldr	r3, [sp, #0]
    fca6:	f003 0308 	and.w	r3, r3, #8
    fcaa:	2b00      	cmp	r3, #0
    fcac:	d004      	beq.n	fcb8 <FlexCAN_ConfigCtrlOptions+0x54>
    {
        FlexCAN_SetProtocolException(pBase, TRUE);
    fcae:	2101      	movs	r1, #1
    fcb0:	9801      	ldr	r0, [sp, #4]
    fcb2:	f7fe fcea 	bl	e68a <FlexCAN_SetProtocolException>
    fcb6:	e003      	b.n	fcc0 <FlexCAN_ConfigCtrlOptions+0x5c>
    }
    else
    {
        FlexCAN_SetProtocolException(pBase, FALSE);
    fcb8:	2100      	movs	r1, #0
    fcba:	9801      	ldr	r0, [sp, #4]
    fcbc:	f7fe fce5 	bl	e68a <FlexCAN_SetProtocolException>
    }
#endif /* Endif  (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)  */
    /* Set CAN Bit Sampling */
    if (((u32Options & FLEXCAN_IP_THREE_SAMPLES_U32) != 0U) && (0U == (pBase->MCR & FLEXCAN_MCR_FDEN_MASK)))
    fcc0:	9b00      	ldr	r3, [sp, #0]
    fcc2:	f003 0302 	and.w	r3, r3, #2
    fcc6:	2b00      	cmp	r3, #0
    fcc8:	d00a      	beq.n	fce0 <FlexCAN_ConfigCtrlOptions+0x7c>
    fcca:	9b01      	ldr	r3, [sp, #4]
    fccc:	681b      	ldr	r3, [r3, #0]
    fcce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    fcd2:	2b00      	cmp	r3, #0
    fcd4:	d104      	bne.n	fce0 <FlexCAN_ConfigCtrlOptions+0x7c>
    {
        FlexCAN_CanBitSampling(pBase, TRUE);
    fcd6:	2101      	movs	r1, #1
    fcd8:	9801      	ldr	r0, [sp, #4]
    fcda:	f7fe fd31 	bl	e740 <FlexCAN_CanBitSampling>
    fcde:	e003      	b.n	fce8 <FlexCAN_ConfigCtrlOptions+0x84>
    }
    else
    {
        FlexCAN_CanBitSampling(pBase, FALSE);
    fce0:	2100      	movs	r1, #0
    fce2:	9801      	ldr	r0, [sp, #4]
    fce4:	f7fe fd2c 	bl	e740 <FlexCAN_CanBitSampling>
    }

    /* Set AutoBusOff Recovery */
    if ((u32Options & FLEXCAN_IP_BUSOFF_RECOVERY_U32) != 0U)
    fce8:	9b00      	ldr	r3, [sp, #0]
    fcea:	f003 0304 	and.w	r3, r3, #4
    fcee:	2b00      	cmp	r3, #0
    fcf0:	d004      	beq.n	fcfc <FlexCAN_ConfigCtrlOptions+0x98>
    {
        FlexCAN_SetBusOffAutorecovery(pBase, TRUE);
    fcf2:	2101      	movs	r1, #1
    fcf4:	9801      	ldr	r0, [sp, #4]
    fcf6:	f7fe fcf6 	bl	e6e6 <FlexCAN_SetBusOffAutorecovery>
    fcfa:	e003      	b.n	fd04 <FlexCAN_ConfigCtrlOptions+0xa0>
    }
    else
    {
        FlexCAN_SetBusOffAutorecovery(pBase, FALSE);
    fcfc:	2100      	movs	r1, #0
    fcfe:	9801      	ldr	r0, [sp, #4]
    fd00:	f7fe fcf1 	bl	e6e6 <FlexCAN_SetBusOffAutorecovery>
    }
    /* Set Remote Request Store for received of Remote Request Frames */
    if ((u32Options & FLEXCAN_IP_REM_STORE_U32) != 0U)
    fd04:	9b00      	ldr	r3, [sp, #0]
    fd06:	f003 0301 	and.w	r3, r3, #1
    fd0a:	2b00      	cmp	r3, #0
    fd0c:	d004      	beq.n	fd18 <FlexCAN_ConfigCtrlOptions+0xb4>
    {
        FlexCAN_SetRemoteReqStore(pBase, TRUE);
    fd0e:	2101      	movs	r1, #1
    fd10:	9801      	ldr	r0, [sp, #4]
    fd12:	f7fe fcd1 	bl	e6b8 <FlexCAN_SetRemoteReqStore>
    fd16:	e003      	b.n	fd20 <FlexCAN_ConfigCtrlOptions+0xbc>
    }
    else
    {
        FlexCAN_SetRemoteReqStore(pBase, FALSE);
    fd18:	2100      	movs	r1, #0
    fd1a:	9801      	ldr	r0, [sp, #4]
    fd1c:	f7fe fccc 	bl	e6b8 <FlexCAN_SetRemoteReqStore>
    }
#if (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)
    /* Set Edge Filter */
    if ((u32Options & FLEXCAN_IP_EDGE_FILTER_U32) != 0U)
    fd20:	9b00      	ldr	r3, [sp, #0]
    fd22:	f003 0310 	and.w	r3, r3, #16
    fd26:	2b00      	cmp	r3, #0
    fd28:	d004      	beq.n	fd34 <FlexCAN_ConfigCtrlOptions+0xd0>
    {
        FlexCAN_SetEdgeFilter(pBase, TRUE);
    fd2a:	2101      	movs	r1, #1
    fd2c:	9801      	ldr	r0, [sp, #4]
    fd2e:	f7fe fcf0 	bl	e712 <FlexCAN_SetEdgeFilter>
    else
    {
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    }
#endif /* End of (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)  */
}
    fd32:	e003      	b.n	fd3c <FlexCAN_ConfigCtrlOptions+0xd8>
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    fd34:	2100      	movs	r1, #0
    fd36:	9801      	ldr	r0, [sp, #4]
    fd38:	f7fe fceb 	bl	e712 <FlexCAN_SetEdgeFilter>
}
    fd3c:	bf00      	nop
    fd3e:	b003      	add	sp, #12
    fd40:	f85d fb04 	ldr.w	pc, [sp], #4

0000fd44 <FlexCAN_ResetImaskBuff>:
 * Function Name : FlexCAN_ResetImaskBuff (uses in FlexCAN_Ip_Init function only)
 * Description   : Reset Imask Buffers.
 *
 *END**************************************************************************/
void FlexCAN_ResetImaskBuff(uint8 Instance)
{
    fd44:	b084      	sub	sp, #16
    fd46:	4603      	mov	r3, r0
    fd48:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ImaskCnt = 0U;
    fd4c:	2300      	movs	r3, #0
    fd4e:	f88d 300f 	strb.w	r3, [sp, #15]

    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    fd52:	2300      	movs	r3, #0
    fd54:	f88d 300f 	strb.w	r3, [sp, #15]
    fd58:	e00d      	b.n	fd76 <FlexCAN_ResetImaskBuff+0x32>
    {
        FlexCAN_Ip_au32ImaskBuff[Instance][ImaskCnt] = 0U;
    fd5a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    fd5e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fd62:	4909      	ldr	r1, [pc, #36]	; (fd88 <FlexCAN_ResetImaskBuff+0x44>)
    fd64:	4413      	add	r3, r2
    fd66:	2200      	movs	r2, #0
    fd68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    fd6c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fd70:	3301      	adds	r3, #1
    fd72:	f88d 300f 	strb.w	r3, [sp, #15]
    fd76:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fd7a:	2b00      	cmp	r3, #0
    fd7c:	d0ed      	beq.n	fd5a <FlexCAN_ResetImaskBuff+0x16>
    }
}
    fd7e:	bf00      	nop
    fd80:	bf00      	nop
    fd82:	b004      	add	sp, #16
    fd84:	4770      	bx	lr
    fd86:	bf00      	nop
    fd88:	1fff9368 	.word	0x1fff9368

0000fd8c <CAN0_ORED_IRQHandler>:

#else

/* Implementation of CAN0 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN0_ORED_IRQHandler)
{
    fd8c:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(0U);
    fd8e:	2000      	movs	r0, #0
    fd90:	f7fd fb2a 	bl	d3e8 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    fd94:	f3bf 8f4f 	dsb	sy
}
    fd98:	bf00      	nop
    fd9a:	bd08      	pop	{r3, pc}

0000fd9c <CAN0_Error_IRQHandler>:

/* Implementation of CAN0 handler named in startup code for processing of Errors reporting. */
ISR(CAN0_Error_IRQHandler)
{
    fd9c:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(0U);
    fd9e:	2000      	movs	r0, #0
    fda0:	f7fd fac2 	bl	d328 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    fda4:	f3bf 8f4f 	dsb	sy
}
    fda8:	bf00      	nop
    fdaa:	bd08      	pop	{r3, pc}

0000fdac <CAN0_ORED_0_15_MB_IRQHandler>:
}
#endif
/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN0_ORED_0_15_MB_IRQHandler)
{
    fdac:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 0U, 15U);
    fdae:	220f      	movs	r2, #15
    fdb0:	2100      	movs	r1, #0
    fdb2:	2000      	movs	r0, #0
    fdb4:	f7fd f9dc 	bl	d170 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fdb8:	f3bf 8f4f 	dsb	sy
}
    fdbc:	bf00      	nop
    fdbe:	bd08      	pop	{r3, pc}

0000fdc0 <CAN0_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN0_ORED_16_31_MB_IRQHandler)
{
    fdc0:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 16U, 31U);
    fdc2:	221f      	movs	r2, #31
    fdc4:	2110      	movs	r1, #16
    fdc6:	2000      	movs	r0, #0
    fdc8:	f7fd f9d2 	bl	d170 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fdcc:	f3bf 8f4f 	dsb	sy
}
    fdd0:	bf00      	nop
    fdd2:	bd08      	pop	{r3, pc}

0000fdd4 <CAN1_ORED_IRQHandler>:
#endif /* (defined(S32K142W) || defined(S32K144W) || defined(S32M243) || defined(S32M244)) */

#if (FLEXCAN_INSTANCE_COUNT > 1U)
/* Implementation of CAN1 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN1_ORED_IRQHandler)
{
    fdd4:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(1U);
    fdd6:	2001      	movs	r0, #1
    fdd8:	f7fd fb06 	bl	d3e8 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    fddc:	f3bf 8f4f 	dsb	sy
}
    fde0:	bf00      	nop
    fde2:	bd08      	pop	{r3, pc}

0000fde4 <CAN1_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN1_Error_IRQHandler)
{
    fde4:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(1U);
    fde6:	2001      	movs	r0, #1
    fde8:	f7fd fa9e 	bl	d328 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    fdec:	f3bf 8f4f 	dsb	sy
}
    fdf0:	bf00      	nop
    fdf2:	bd08      	pop	{r3, pc}

0000fdf4 <CAN1_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN1_ORED_0_15_MB_IRQHandler)
{
    fdf4:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 0U, 15U);
    fdf6:	220f      	movs	r2, #15
    fdf8:	2100      	movs	r1, #0
    fdfa:	2001      	movs	r0, #1
    fdfc:	f7fd f9b8 	bl	d170 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fe00:	f3bf 8f4f 	dsb	sy
}
    fe04:	bf00      	nop
    fe06:	bd08      	pop	{r3, pc}

0000fe08 <CAN1_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN1_ORED_16_31_MB_IRQHandler)
{
    fe08:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 16U, 31U);
    fe0a:	221f      	movs	r2, #31
    fe0c:	2110      	movs	r1, #16
    fe0e:	2001      	movs	r0, #1
    fe10:	f7fd f9ae 	bl	d170 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fe14:	f3bf 8f4f 	dsb	sy
}
    fe18:	bf00      	nop
    fe1a:	bd08      	pop	{r3, pc}

0000fe1c <CAN2_ORED_IRQHandler>:
#endif /* (FLEXCAN_INSTANCE_COUNT > 1U) */

#if (FLEXCAN_INSTANCE_COUNT > 2U)
/* Implementation of CAN2 handler named in startup code for processing of Errors and Bus Off reporting. */
ISR(CAN2_ORED_IRQHandler)
{
    fe1c:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(2U);
    fe1e:	2002      	movs	r0, #2
    fe20:	f7fd fae2 	bl	d3e8 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    fe24:	f3bf 8f4f 	dsb	sy
}
    fe28:	bf00      	nop
    fe2a:	bd08      	pop	{r3, pc}

0000fe2c <CAN2_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN2_Error_IRQHandler)
{
    fe2c:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(2U);
    fe2e:	2002      	movs	r0, #2
    fe30:	f7fd fa7a 	bl	d328 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    fe34:	f3bf 8f4f 	dsb	sy
}
    fe38:	bf00      	nop
    fe3a:	bd08      	pop	{r3, pc}

0000fe3c <CAN2_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN2 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN2_ORED_0_15_MB_IRQHandler)
{
    fe3c:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(2U, 0U, 15U);
    fe3e:	220f      	movs	r2, #15
    fe40:	2100      	movs	r1, #0
    fe42:	2002      	movs	r0, #2
    fe44:	f7fd f994 	bl	d170 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fe48:	f3bf 8f4f 	dsb	sy
}
    fe4c:	bf00      	nop
    fe4e:	bd08      	pop	{r3, pc}

0000fe50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    fe50:	b500      	push	{lr}
    fe52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe54:	f7f0 ff26 	bl	ca4 <Sys_GetCoreID>
    fe58:	4603      	mov	r3, r0
    fe5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId])
    fe5c:	4a10      	ldr	r2, [pc, #64]	; (fea0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    fe5e:	9b01      	ldr	r3, [sp, #4]
    fe60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe64:	2b00      	cmp	r3, #0
    fe66:	d10d      	bne.n	fe84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fe68:	f7f0 fd84 	bl	974 <Adc_schm_read_msr>
    fe6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fe6e:	9b00      	ldr	r3, [sp, #0]
    fe70:	f003 0301 	and.w	r3, r3, #1
    fe74:	2b00      	cmp	r3, #0
    fe76:	d100      	bne.n	fe7a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fe78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    fe7a:	490a      	ldr	r1, [pc, #40]	; (fea4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x54>)
    fe7c:	9b01      	ldr	r3, [sp, #4]
    fe7e:	9a00      	ldr	r2, [sp, #0]
    fe80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]++;
    fe84:	4a06      	ldr	r2, [pc, #24]	; (fea0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    fe86:	9b01      	ldr	r3, [sp, #4]
    fe88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe8c:	1c5a      	adds	r2, r3, #1
    fe8e:	4904      	ldr	r1, [pc, #16]	; (fea0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    fe90:	9b01      	ldr	r3, [sp, #4]
    fe92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fe96:	bf00      	nop
    fe98:	b003      	add	sp, #12
    fe9a:	f85d fb04 	ldr.w	pc, [sp], #4
    fe9e:	bf00      	nop
    fea0:	1fff9378 	.word	0x1fff9378
    fea4:	1fff9374 	.word	0x1fff9374

0000fea8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    fea8:	b500      	push	{lr}
    feaa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    feac:	f7f0 fefa 	bl	ca4 <Sys_GetCoreID>
    feb0:	4603      	mov	r3, r0
    feb2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]--;
    feb4:	4a0d      	ldr	r2, [pc, #52]	; (feec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    feb6:	9b01      	ldr	r3, [sp, #4]
    feb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    febc:	1e5a      	subs	r2, r3, #1
    febe:	490b      	ldr	r1, [pc, #44]	; (feec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    fec0:	9b01      	ldr	r3, [sp, #4]
    fec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    fec6:	4a0a      	ldr	r2, [pc, #40]	; (fef0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x48>)
    fec8:	9b01      	ldr	r3, [sp, #4]
    feca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fece:	f003 0301 	and.w	r3, r3, #1
    fed2:	2b00      	cmp	r3, #0
    fed4:	d106      	bne.n	fee4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    fed6:	4a05      	ldr	r2, [pc, #20]	; (feec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    fed8:	9b01      	ldr	r3, [sp, #4]
    feda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fede:	2b00      	cmp	r3, #0
    fee0:	d100      	bne.n	fee4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fee2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fee4:	bf00      	nop
    fee6:	b003      	add	sp, #12
    fee8:	f85d fb04 	ldr.w	pc, [sp], #4
    feec:	1fff9378 	.word	0x1fff9378
    fef0:	1fff9374 	.word	0x1fff9374

0000fef4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    fef4:	b500      	push	{lr}
    fef6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fef8:	f7f0 fed4 	bl	ca4 <Sys_GetCoreID>
    fefc:	4603      	mov	r3, r0
    fefe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId])
    ff00:	4a10      	ldr	r2, [pc, #64]	; (ff44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    ff02:	9b01      	ldr	r3, [sp, #4]
    ff04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff08:	2b00      	cmp	r3, #0
    ff0a:	d10d      	bne.n	ff28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ff0c:	f7f0 fd32 	bl	974 <Adc_schm_read_msr>
    ff10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ff12:	9b00      	ldr	r3, [sp, #0]
    ff14:	f003 0301 	and.w	r3, r3, #1
    ff18:	2b00      	cmp	r3, #0
    ff1a:	d100      	bne.n	ff1e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ff1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    ff1e:	490a      	ldr	r1, [pc, #40]	; (ff48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x54>)
    ff20:	9b01      	ldr	r3, [sp, #4]
    ff22:	9a00      	ldr	r2, [sp, #0]
    ff24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]++;
    ff28:	4a06      	ldr	r2, [pc, #24]	; (ff44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    ff2a:	9b01      	ldr	r3, [sp, #4]
    ff2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff30:	1c5a      	adds	r2, r3, #1
    ff32:	4904      	ldr	r1, [pc, #16]	; (ff44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    ff34:	9b01      	ldr	r3, [sp, #4]
    ff36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ff3a:	bf00      	nop
    ff3c:	b003      	add	sp, #12
    ff3e:	f85d fb04 	ldr.w	pc, [sp], #4
    ff42:	bf00      	nop
    ff44:	1fff9380 	.word	0x1fff9380
    ff48:	1fff937c 	.word	0x1fff937c

0000ff4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    ff4c:	b500      	push	{lr}
    ff4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff50:	f7f0 fea8 	bl	ca4 <Sys_GetCoreID>
    ff54:	4603      	mov	r3, r0
    ff56:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]--;
    ff58:	4a0d      	ldr	r2, [pc, #52]	; (ff90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    ff5a:	9b01      	ldr	r3, [sp, #4]
    ff5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff60:	1e5a      	subs	r2, r3, #1
    ff62:	490b      	ldr	r1, [pc, #44]	; (ff90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    ff64:	9b01      	ldr	r3, [sp, #4]
    ff66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    ff6a:	4a0a      	ldr	r2, [pc, #40]	; (ff94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x48>)
    ff6c:	9b01      	ldr	r3, [sp, #4]
    ff6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff72:	f003 0301 	and.w	r3, r3, #1
    ff76:	2b00      	cmp	r3, #0
    ff78:	d106      	bne.n	ff88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    ff7a:	4a05      	ldr	r2, [pc, #20]	; (ff90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    ff7c:	9b01      	ldr	r3, [sp, #4]
    ff7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff82:	2b00      	cmp	r3, #0
    ff84:	d100      	bne.n	ff88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ff86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ff88:	bf00      	nop
    ff8a:	b003      	add	sp, #12
    ff8c:	f85d fb04 	ldr.w	pc, [sp], #4
    ff90:	1fff9380 	.word	0x1fff9380
    ff94:	1fff937c 	.word	0x1fff937c

0000ff98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    ff98:	b500      	push	{lr}
    ff9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff9c:	f7f0 fe82 	bl	ca4 <Sys_GetCoreID>
    ffa0:	4603      	mov	r3, r0
    ffa2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId])
    ffa4:	4a10      	ldr	r2, [pc, #64]	; (ffe8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    ffa6:	9b01      	ldr	r3, [sp, #4]
    ffa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffac:	2b00      	cmp	r3, #0
    ffae:	d10d      	bne.n	ffcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ffb0:	f7f0 fce0 	bl	974 <Adc_schm_read_msr>
    ffb4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ffb6:	9b00      	ldr	r3, [sp, #0]
    ffb8:	f003 0301 	and.w	r3, r3, #1
    ffbc:	2b00      	cmp	r3, #0
    ffbe:	d100      	bne.n	ffc2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ffc0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    ffc2:	490a      	ldr	r1, [pc, #40]	; (ffec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x54>)
    ffc4:	9b01      	ldr	r3, [sp, #4]
    ffc6:	9a00      	ldr	r2, [sp, #0]
    ffc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]++;
    ffcc:	4a06      	ldr	r2, [pc, #24]	; (ffe8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    ffce:	9b01      	ldr	r3, [sp, #4]
    ffd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffd4:	1c5a      	adds	r2, r3, #1
    ffd6:	4904      	ldr	r1, [pc, #16]	; (ffe8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    ffd8:	9b01      	ldr	r3, [sp, #4]
    ffda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ffde:	bf00      	nop
    ffe0:	b003      	add	sp, #12
    ffe2:	f85d fb04 	ldr.w	pc, [sp], #4
    ffe6:	bf00      	nop
    ffe8:	1fff9388 	.word	0x1fff9388
    ffec:	1fff9384 	.word	0x1fff9384

0000fff0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    fff0:	b500      	push	{lr}
    fff2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fff4:	f7f0 fe56 	bl	ca4 <Sys_GetCoreID>
    fff8:	4603      	mov	r3, r0
    fffa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]--;
    fffc:	4a0d      	ldr	r2, [pc, #52]	; (10034 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    fffe:	9b01      	ldr	r3, [sp, #4]
   10000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10004:	1e5a      	subs	r2, r3, #1
   10006:	490b      	ldr	r1, [pc, #44]	; (10034 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
   10008:	9b01      	ldr	r3, [sp, #4]
   1000a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   1000e:	4a0a      	ldr	r2, [pc, #40]	; (10038 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x48>)
   10010:	9b01      	ldr	r3, [sp, #4]
   10012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10016:	f003 0301 	and.w	r3, r3, #1
   1001a:	2b00      	cmp	r3, #0
   1001c:	d106      	bne.n	1002c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
   1001e:	4a05      	ldr	r2, [pc, #20]	; (10034 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
   10020:	9b01      	ldr	r3, [sp, #4]
   10022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10026:	2b00      	cmp	r3, #0
   10028:	d100      	bne.n	1002c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1002a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1002c:	bf00      	nop
   1002e:	b003      	add	sp, #12
   10030:	f85d fb04 	ldr.w	pc, [sp], #4
   10034:	1fff9388 	.word	0x1fff9388
   10038:	1fff9384 	.word	0x1fff9384

0001003c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
   1003c:	b500      	push	{lr}
   1003e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10040:	f7f0 fe30 	bl	ca4 <Sys_GetCoreID>
   10044:	4603      	mov	r3, r0
   10046:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId])
   10048:	4a10      	ldr	r2, [pc, #64]	; (1008c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
   1004a:	9b01      	ldr	r3, [sp, #4]
   1004c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10050:	2b00      	cmp	r3, #0
   10052:	d10d      	bne.n	10070 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10054:	f7f0 fc8e 	bl	974 <Adc_schm_read_msr>
   10058:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1005a:	9b00      	ldr	r3, [sp, #0]
   1005c:	f003 0301 	and.w	r3, r3, #1
   10060:	2b00      	cmp	r3, #0
   10062:	d100      	bne.n	10066 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10064:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   10066:	490a      	ldr	r1, [pc, #40]	; (10090 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x54>)
   10068:	9b01      	ldr	r3, [sp, #4]
   1006a:	9a00      	ldr	r2, [sp, #0]
   1006c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]++;
   10070:	4a06      	ldr	r2, [pc, #24]	; (1008c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
   10072:	9b01      	ldr	r3, [sp, #4]
   10074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10078:	1c5a      	adds	r2, r3, #1
   1007a:	4904      	ldr	r1, [pc, #16]	; (1008c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
   1007c:	9b01      	ldr	r3, [sp, #4]
   1007e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10082:	bf00      	nop
   10084:	b003      	add	sp, #12
   10086:	f85d fb04 	ldr.w	pc, [sp], #4
   1008a:	bf00      	nop
   1008c:	1fff9390 	.word	0x1fff9390
   10090:	1fff938c 	.word	0x1fff938c

00010094 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
   10094:	b500      	push	{lr}
   10096:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10098:	f7f0 fe04 	bl	ca4 <Sys_GetCoreID>
   1009c:	4603      	mov	r3, r0
   1009e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]--;
   100a0:	4a0d      	ldr	r2, [pc, #52]	; (100d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
   100a2:	9b01      	ldr	r3, [sp, #4]
   100a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100a8:	1e5a      	subs	r2, r3, #1
   100aa:	490b      	ldr	r1, [pc, #44]	; (100d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
   100ac:	9b01      	ldr	r3, [sp, #4]
   100ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   100b2:	4a0a      	ldr	r2, [pc, #40]	; (100dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x48>)
   100b4:	9b01      	ldr	r3, [sp, #4]
   100b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100ba:	f003 0301 	and.w	r3, r3, #1
   100be:	2b00      	cmp	r3, #0
   100c0:	d106      	bne.n	100d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
   100c2:	4a05      	ldr	r2, [pc, #20]	; (100d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
   100c4:	9b01      	ldr	r3, [sp, #4]
   100c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100ca:	2b00      	cmp	r3, #0
   100cc:	d100      	bne.n	100d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   100ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   100d0:	bf00      	nop
   100d2:	b003      	add	sp, #12
   100d4:	f85d fb04 	ldr.w	pc, [sp], #4
   100d8:	1fff9390 	.word	0x1fff9390
   100dc:	1fff938c 	.word	0x1fff938c

000100e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
   100e0:	b500      	push	{lr}
   100e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   100e4:	f7f0 fdde 	bl	ca4 <Sys_GetCoreID>
   100e8:	4603      	mov	r3, r0
   100ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId])
   100ec:	4a10      	ldr	r2, [pc, #64]	; (10130 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   100ee:	9b01      	ldr	r3, [sp, #4]
   100f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100f4:	2b00      	cmp	r3, #0
   100f6:	d10d      	bne.n	10114 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   100f8:	f7f0 fc3c 	bl	974 <Adc_schm_read_msr>
   100fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   100fe:	9b00      	ldr	r3, [sp, #0]
   10100:	f003 0301 	and.w	r3, r3, #1
   10104:	2b00      	cmp	r3, #0
   10106:	d100      	bne.n	1010a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10108:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   1010a:	490a      	ldr	r1, [pc, #40]	; (10134 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x54>)
   1010c:	9b01      	ldr	r3, [sp, #4]
   1010e:	9a00      	ldr	r2, [sp, #0]
   10110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]++;
   10114:	4a06      	ldr	r2, [pc, #24]	; (10130 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   10116:	9b01      	ldr	r3, [sp, #4]
   10118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1011c:	1c5a      	adds	r2, r3, #1
   1011e:	4904      	ldr	r1, [pc, #16]	; (10130 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   10120:	9b01      	ldr	r3, [sp, #4]
   10122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10126:	bf00      	nop
   10128:	b003      	add	sp, #12
   1012a:	f85d fb04 	ldr.w	pc, [sp], #4
   1012e:	bf00      	nop
   10130:	1fff9398 	.word	0x1fff9398
   10134:	1fff9394 	.word	0x1fff9394

00010138 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
   10138:	b500      	push	{lr}
   1013a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1013c:	f7f0 fdb2 	bl	ca4 <Sys_GetCoreID>
   10140:	4603      	mov	r3, r0
   10142:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]--;
   10144:	4a0d      	ldr	r2, [pc, #52]	; (1017c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   10146:	9b01      	ldr	r3, [sp, #4]
   10148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1014c:	1e5a      	subs	r2, r3, #1
   1014e:	490b      	ldr	r1, [pc, #44]	; (1017c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   10150:	9b01      	ldr	r3, [sp, #4]
   10152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   10156:	4a0a      	ldr	r2, [pc, #40]	; (10180 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x48>)
   10158:	9b01      	ldr	r3, [sp, #4]
   1015a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1015e:	f003 0301 	and.w	r3, r3, #1
   10162:	2b00      	cmp	r3, #0
   10164:	d106      	bne.n	10174 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
   10166:	4a05      	ldr	r2, [pc, #20]	; (1017c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   10168:	9b01      	ldr	r3, [sp, #4]
   1016a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1016e:	2b00      	cmp	r3, #0
   10170:	d100      	bne.n	10174 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10172:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10174:	bf00      	nop
   10176:	b003      	add	sp, #12
   10178:	f85d fb04 	ldr.w	pc, [sp], #4
   1017c:	1fff9398 	.word	0x1fff9398
   10180:	1fff9394 	.word	0x1fff9394

00010184 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
   10184:	b500      	push	{lr}
   10186:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10188:	f7f0 fd8c 	bl	ca4 <Sys_GetCoreID>
   1018c:	4603      	mov	r3, r0
   1018e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId])
   10190:	4a10      	ldr	r2, [pc, #64]	; (101d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   10192:	9b01      	ldr	r3, [sp, #4]
   10194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10198:	2b00      	cmp	r3, #0
   1019a:	d10d      	bne.n	101b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1019c:	f7f0 fbea 	bl	974 <Adc_schm_read_msr>
   101a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   101a2:	9b00      	ldr	r3, [sp, #0]
   101a4:	f003 0301 	and.w	r3, r3, #1
   101a8:	2b00      	cmp	r3, #0
   101aa:	d100      	bne.n	101ae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   101ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   101ae:	490a      	ldr	r1, [pc, #40]	; (101d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x54>)
   101b0:	9b01      	ldr	r3, [sp, #4]
   101b2:	9a00      	ldr	r2, [sp, #0]
   101b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]++;
   101b8:	4a06      	ldr	r2, [pc, #24]	; (101d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   101ba:	9b01      	ldr	r3, [sp, #4]
   101bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101c0:	1c5a      	adds	r2, r3, #1
   101c2:	4904      	ldr	r1, [pc, #16]	; (101d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   101c4:	9b01      	ldr	r3, [sp, #4]
   101c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   101ca:	bf00      	nop
   101cc:	b003      	add	sp, #12
   101ce:	f85d fb04 	ldr.w	pc, [sp], #4
   101d2:	bf00      	nop
   101d4:	1fff93a0 	.word	0x1fff93a0
   101d8:	1fff939c 	.word	0x1fff939c

000101dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
   101dc:	b500      	push	{lr}
   101de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   101e0:	f7f0 fd60 	bl	ca4 <Sys_GetCoreID>
   101e4:	4603      	mov	r3, r0
   101e6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]--;
   101e8:	4a0d      	ldr	r2, [pc, #52]	; (10220 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   101ea:	9b01      	ldr	r3, [sp, #4]
   101ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101f0:	1e5a      	subs	r2, r3, #1
   101f2:	490b      	ldr	r1, [pc, #44]	; (10220 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   101f4:	9b01      	ldr	r3, [sp, #4]
   101f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   101fa:	4a0a      	ldr	r2, [pc, #40]	; (10224 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x48>)
   101fc:	9b01      	ldr	r3, [sp, #4]
   101fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10202:	f003 0301 	and.w	r3, r3, #1
   10206:	2b00      	cmp	r3, #0
   10208:	d106      	bne.n	10218 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
   1020a:	4a05      	ldr	r2, [pc, #20]	; (10220 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   1020c:	9b01      	ldr	r3, [sp, #4]
   1020e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10212:	2b00      	cmp	r3, #0
   10214:	d100      	bne.n	10218 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10216:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10218:	bf00      	nop
   1021a:	b003      	add	sp, #12
   1021c:	f85d fb04 	ldr.w	pc, [sp], #4
   10220:	1fff93a0 	.word	0x1fff93a0
   10224:	1fff939c 	.word	0x1fff939c

00010228 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
   10228:	b500      	push	{lr}
   1022a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1022c:	f7f0 fd3a 	bl	ca4 <Sys_GetCoreID>
   10230:	4603      	mov	r3, r0
   10232:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId])
   10234:	4a10      	ldr	r2, [pc, #64]	; (10278 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   10236:	9b01      	ldr	r3, [sp, #4]
   10238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1023c:	2b00      	cmp	r3, #0
   1023e:	d10d      	bne.n	1025c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10240:	f7f0 fb98 	bl	974 <Adc_schm_read_msr>
   10244:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10246:	9b00      	ldr	r3, [sp, #0]
   10248:	f003 0301 	and.w	r3, r3, #1
   1024c:	2b00      	cmp	r3, #0
   1024e:	d100      	bne.n	10252 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10250:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   10252:	490a      	ldr	r1, [pc, #40]	; (1027c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x54>)
   10254:	9b01      	ldr	r3, [sp, #4]
   10256:	9a00      	ldr	r2, [sp, #0]
   10258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]++;
   1025c:	4a06      	ldr	r2, [pc, #24]	; (10278 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   1025e:	9b01      	ldr	r3, [sp, #4]
   10260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10264:	1c5a      	adds	r2, r3, #1
   10266:	4904      	ldr	r1, [pc, #16]	; (10278 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   10268:	9b01      	ldr	r3, [sp, #4]
   1026a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1026e:	bf00      	nop
   10270:	b003      	add	sp, #12
   10272:	f85d fb04 	ldr.w	pc, [sp], #4
   10276:	bf00      	nop
   10278:	1fff93a8 	.word	0x1fff93a8
   1027c:	1fff93a4 	.word	0x1fff93a4

00010280 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
   10280:	b500      	push	{lr}
   10282:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10284:	f7f0 fd0e 	bl	ca4 <Sys_GetCoreID>
   10288:	4603      	mov	r3, r0
   1028a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]--;
   1028c:	4a0d      	ldr	r2, [pc, #52]	; (102c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   1028e:	9b01      	ldr	r3, [sp, #4]
   10290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10294:	1e5a      	subs	r2, r3, #1
   10296:	490b      	ldr	r1, [pc, #44]	; (102c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   10298:	9b01      	ldr	r3, [sp, #4]
   1029a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   1029e:	4a0a      	ldr	r2, [pc, #40]	; (102c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x48>)
   102a0:	9b01      	ldr	r3, [sp, #4]
   102a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102a6:	f003 0301 	and.w	r3, r3, #1
   102aa:	2b00      	cmp	r3, #0
   102ac:	d106      	bne.n	102bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
   102ae:	4a05      	ldr	r2, [pc, #20]	; (102c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   102b0:	9b01      	ldr	r3, [sp, #4]
   102b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102b6:	2b00      	cmp	r3, #0
   102b8:	d100      	bne.n	102bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   102ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   102bc:	bf00      	nop
   102be:	b003      	add	sp, #12
   102c0:	f85d fb04 	ldr.w	pc, [sp], #4
   102c4:	1fff93a8 	.word	0x1fff93a8
   102c8:	1fff93a4 	.word	0x1fff93a4

000102cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
   102cc:	b500      	push	{lr}
   102ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   102d0:	f7f0 fce8 	bl	ca4 <Sys_GetCoreID>
   102d4:	4603      	mov	r3, r0
   102d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId])
   102d8:	4a10      	ldr	r2, [pc, #64]	; (1031c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   102da:	9b01      	ldr	r3, [sp, #4]
   102dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102e0:	2b00      	cmp	r3, #0
   102e2:	d10d      	bne.n	10300 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   102e4:	f7f0 fb46 	bl	974 <Adc_schm_read_msr>
   102e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   102ea:	9b00      	ldr	r3, [sp, #0]
   102ec:	f003 0301 	and.w	r3, r3, #1
   102f0:	2b00      	cmp	r3, #0
   102f2:	d100      	bne.n	102f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   102f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_100[u32CoreId] = msr;
   102f6:	490a      	ldr	r1, [pc, #40]	; (10320 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x54>)
   102f8:	9b01      	ldr	r3, [sp, #4]
   102fa:	9a00      	ldr	r2, [sp, #0]
   102fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]++;
   10300:	4a06      	ldr	r2, [pc, #24]	; (1031c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   10302:	9b01      	ldr	r3, [sp, #4]
   10304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10308:	1c5a      	adds	r2, r3, #1
   1030a:	4904      	ldr	r1, [pc, #16]	; (1031c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   1030c:	9b01      	ldr	r3, [sp, #4]
   1030e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10312:	bf00      	nop
   10314:	b003      	add	sp, #12
   10316:	f85d fb04 	ldr.w	pc, [sp], #4
   1031a:	bf00      	nop
   1031c:	1fff93b0 	.word	0x1fff93b0
   10320:	1fff93ac 	.word	0x1fff93ac

00010324 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
   10324:	b500      	push	{lr}
   10326:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10328:	f7f0 fcbc 	bl	ca4 <Sys_GetCoreID>
   1032c:	4603      	mov	r3, r0
   1032e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]--;
   10330:	4a0d      	ldr	r2, [pc, #52]	; (10368 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   10332:	9b01      	ldr	r3, [sp, #4]
   10334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10338:	1e5a      	subs	r2, r3, #1
   1033a:	490b      	ldr	r1, [pc, #44]	; (10368 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   1033c:	9b01      	ldr	r3, [sp, #4]
   1033e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_100[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]))         /*if interrupts were enabled*/
   10342:	4a0a      	ldr	r2, [pc, #40]	; (1036c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x48>)
   10344:	9b01      	ldr	r3, [sp, #4]
   10346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1034a:	f003 0301 	and.w	r3, r3, #1
   1034e:	2b00      	cmp	r3, #0
   10350:	d106      	bne.n	10360 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
   10352:	4a05      	ldr	r2, [pc, #20]	; (10368 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   10354:	9b01      	ldr	r3, [sp, #4]
   10356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1035a:	2b00      	cmp	r3, #0
   1035c:	d100      	bne.n	10360 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1035e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10360:	bf00      	nop
   10362:	b003      	add	sp, #12
   10364:	f85d fb04 	ldr.w	pc, [sp], #4
   10368:	1fff93b0 	.word	0x1fff93b0
   1036c:	1fff93ac 	.word	0x1fff93ac

00010370 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
   10370:	b500      	push	{lr}
   10372:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10374:	f7f0 fc96 	bl	ca4 <Sys_GetCoreID>
   10378:	4603      	mov	r3, r0
   1037a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId])
   1037c:	4a10      	ldr	r2, [pc, #64]	; (103c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   1037e:	9b01      	ldr	r3, [sp, #4]
   10380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10384:	2b00      	cmp	r3, #0
   10386:	d10d      	bne.n	103a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10388:	f7f0 faf4 	bl	974 <Adc_schm_read_msr>
   1038c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1038e:	9b00      	ldr	r3, [sp, #0]
   10390:	f003 0301 	and.w	r3, r3, #1
   10394:	2b00      	cmp	r3, #0
   10396:	d100      	bne.n	1039a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10398:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_101[u32CoreId] = msr;
   1039a:	490a      	ldr	r1, [pc, #40]	; (103c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x54>)
   1039c:	9b01      	ldr	r3, [sp, #4]
   1039e:	9a00      	ldr	r2, [sp, #0]
   103a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]++;
   103a4:	4a06      	ldr	r2, [pc, #24]	; (103c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   103a6:	9b01      	ldr	r3, [sp, #4]
   103a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103ac:	1c5a      	adds	r2, r3, #1
   103ae:	4904      	ldr	r1, [pc, #16]	; (103c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   103b0:	9b01      	ldr	r3, [sp, #4]
   103b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   103b6:	bf00      	nop
   103b8:	b003      	add	sp, #12
   103ba:	f85d fb04 	ldr.w	pc, [sp], #4
   103be:	bf00      	nop
   103c0:	1fff93b8 	.word	0x1fff93b8
   103c4:	1fff93b4 	.word	0x1fff93b4

000103c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
   103c8:	b500      	push	{lr}
   103ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   103cc:	f7f0 fc6a 	bl	ca4 <Sys_GetCoreID>
   103d0:	4603      	mov	r3, r0
   103d2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]--;
   103d4:	4a0d      	ldr	r2, [pc, #52]	; (1040c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   103d6:	9b01      	ldr	r3, [sp, #4]
   103d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103dc:	1e5a      	subs	r2, r3, #1
   103de:	490b      	ldr	r1, [pc, #44]	; (1040c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   103e0:	9b01      	ldr	r3, [sp, #4]
   103e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_101[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]))         /*if interrupts were enabled*/
   103e6:	4a0a      	ldr	r2, [pc, #40]	; (10410 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x48>)
   103e8:	9b01      	ldr	r3, [sp, #4]
   103ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103ee:	f003 0301 	and.w	r3, r3, #1
   103f2:	2b00      	cmp	r3, #0
   103f4:	d106      	bne.n	10404 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
   103f6:	4a05      	ldr	r2, [pc, #20]	; (1040c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   103f8:	9b01      	ldr	r3, [sp, #4]
   103fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103fe:	2b00      	cmp	r3, #0
   10400:	d100      	bne.n	10404 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10402:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10404:	bf00      	nop
   10406:	b003      	add	sp, #12
   10408:	f85d fb04 	ldr.w	pc, [sp], #4
   1040c:	1fff93b8 	.word	0x1fff93b8
   10410:	1fff93b4 	.word	0x1fff93b4

00010414 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
   10414:	b500      	push	{lr}
   10416:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10418:	f7f0 fc44 	bl	ca4 <Sys_GetCoreID>
   1041c:	4603      	mov	r3, r0
   1041e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId])
   10420:	4a10      	ldr	r2, [pc, #64]	; (10464 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   10422:	9b01      	ldr	r3, [sp, #4]
   10424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10428:	2b00      	cmp	r3, #0
   1042a:	d10d      	bne.n	10448 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1042c:	f7f0 faa2 	bl	974 <Adc_schm_read_msr>
   10430:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10432:	9b00      	ldr	r3, [sp, #0]
   10434:	f003 0301 	and.w	r3, r3, #1
   10438:	2b00      	cmp	r3, #0
   1043a:	d100      	bne.n	1043e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1043c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_102[u32CoreId] = msr;
   1043e:	490a      	ldr	r1, [pc, #40]	; (10468 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x54>)
   10440:	9b01      	ldr	r3, [sp, #4]
   10442:	9a00      	ldr	r2, [sp, #0]
   10444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]++;
   10448:	4a06      	ldr	r2, [pc, #24]	; (10464 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   1044a:	9b01      	ldr	r3, [sp, #4]
   1044c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10450:	1c5a      	adds	r2, r3, #1
   10452:	4904      	ldr	r1, [pc, #16]	; (10464 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   10454:	9b01      	ldr	r3, [sp, #4]
   10456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1045a:	bf00      	nop
   1045c:	b003      	add	sp, #12
   1045e:	f85d fb04 	ldr.w	pc, [sp], #4
   10462:	bf00      	nop
   10464:	1fff93c0 	.word	0x1fff93c0
   10468:	1fff93bc 	.word	0x1fff93bc

0001046c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
   1046c:	b500      	push	{lr}
   1046e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10470:	f7f0 fc18 	bl	ca4 <Sys_GetCoreID>
   10474:	4603      	mov	r3, r0
   10476:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]--;
   10478:	4a0d      	ldr	r2, [pc, #52]	; (104b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   1047a:	9b01      	ldr	r3, [sp, #4]
   1047c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10480:	1e5a      	subs	r2, r3, #1
   10482:	490b      	ldr	r1, [pc, #44]	; (104b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   10484:	9b01      	ldr	r3, [sp, #4]
   10486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_102[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]))         /*if interrupts were enabled*/
   1048a:	4a0a      	ldr	r2, [pc, #40]	; (104b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x48>)
   1048c:	9b01      	ldr	r3, [sp, #4]
   1048e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10492:	f003 0301 	and.w	r3, r3, #1
   10496:	2b00      	cmp	r3, #0
   10498:	d106      	bne.n	104a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
   1049a:	4a05      	ldr	r2, [pc, #20]	; (104b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   1049c:	9b01      	ldr	r3, [sp, #4]
   1049e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104a2:	2b00      	cmp	r3, #0
   104a4:	d100      	bne.n	104a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   104a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   104a8:	bf00      	nop
   104aa:	b003      	add	sp, #12
   104ac:	f85d fb04 	ldr.w	pc, [sp], #4
   104b0:	1fff93c0 	.word	0x1fff93c0
   104b4:	1fff93bc 	.word	0x1fff93bc

000104b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
   104b8:	b500      	push	{lr}
   104ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   104bc:	f7f0 fbf2 	bl	ca4 <Sys_GetCoreID>
   104c0:	4603      	mov	r3, r0
   104c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId])
   104c4:	4a10      	ldr	r2, [pc, #64]	; (10508 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   104c6:	9b01      	ldr	r3, [sp, #4]
   104c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104cc:	2b00      	cmp	r3, #0
   104ce:	d10d      	bne.n	104ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   104d0:	f7f0 fa50 	bl	974 <Adc_schm_read_msr>
   104d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   104d6:	9b00      	ldr	r3, [sp, #0]
   104d8:	f003 0301 	and.w	r3, r3, #1
   104dc:	2b00      	cmp	r3, #0
   104de:	d100      	bne.n	104e2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   104e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_103[u32CoreId] = msr;
   104e2:	490a      	ldr	r1, [pc, #40]	; (1050c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x54>)
   104e4:	9b01      	ldr	r3, [sp, #4]
   104e6:	9a00      	ldr	r2, [sp, #0]
   104e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]++;
   104ec:	4a06      	ldr	r2, [pc, #24]	; (10508 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   104ee:	9b01      	ldr	r3, [sp, #4]
   104f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104f4:	1c5a      	adds	r2, r3, #1
   104f6:	4904      	ldr	r1, [pc, #16]	; (10508 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   104f8:	9b01      	ldr	r3, [sp, #4]
   104fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   104fe:	bf00      	nop
   10500:	b003      	add	sp, #12
   10502:	f85d fb04 	ldr.w	pc, [sp], #4
   10506:	bf00      	nop
   10508:	1fff93c8 	.word	0x1fff93c8
   1050c:	1fff93c4 	.word	0x1fff93c4

00010510 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
   10510:	b500      	push	{lr}
   10512:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10514:	f7f0 fbc6 	bl	ca4 <Sys_GetCoreID>
   10518:	4603      	mov	r3, r0
   1051a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]--;
   1051c:	4a0d      	ldr	r2, [pc, #52]	; (10554 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   1051e:	9b01      	ldr	r3, [sp, #4]
   10520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10524:	1e5a      	subs	r2, r3, #1
   10526:	490b      	ldr	r1, [pc, #44]	; (10554 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   10528:	9b01      	ldr	r3, [sp, #4]
   1052a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_103[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]))         /*if interrupts were enabled*/
   1052e:	4a0a      	ldr	r2, [pc, #40]	; (10558 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x48>)
   10530:	9b01      	ldr	r3, [sp, #4]
   10532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10536:	f003 0301 	and.w	r3, r3, #1
   1053a:	2b00      	cmp	r3, #0
   1053c:	d106      	bne.n	1054c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
   1053e:	4a05      	ldr	r2, [pc, #20]	; (10554 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   10540:	9b01      	ldr	r3, [sp, #4]
   10542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10546:	2b00      	cmp	r3, #0
   10548:	d100      	bne.n	1054c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1054a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1054c:	bf00      	nop
   1054e:	b003      	add	sp, #12
   10550:	f85d fb04 	ldr.w	pc, [sp], #4
   10554:	1fff93c8 	.word	0x1fff93c8
   10558:	1fff93c4 	.word	0x1fff93c4

0001055c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
   1055c:	b500      	push	{lr}
   1055e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10560:	f7f0 fba0 	bl	ca4 <Sys_GetCoreID>
   10564:	4603      	mov	r3, r0
   10566:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId])
   10568:	4a10      	ldr	r2, [pc, #64]	; (105ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   1056a:	9b01      	ldr	r3, [sp, #4]
   1056c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10570:	2b00      	cmp	r3, #0
   10572:	d10d      	bne.n	10590 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10574:	f7f0 f9fe 	bl	974 <Adc_schm_read_msr>
   10578:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1057a:	9b00      	ldr	r3, [sp, #0]
   1057c:	f003 0301 	and.w	r3, r3, #1
   10580:	2b00      	cmp	r3, #0
   10582:	d100      	bne.n	10586 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10584:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   10586:	490a      	ldr	r1, [pc, #40]	; (105b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x54>)
   10588:	9b01      	ldr	r3, [sp, #4]
   1058a:	9a00      	ldr	r2, [sp, #0]
   1058c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]++;
   10590:	4a06      	ldr	r2, [pc, #24]	; (105ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   10592:	9b01      	ldr	r3, [sp, #4]
   10594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10598:	1c5a      	adds	r2, r3, #1
   1059a:	4904      	ldr	r1, [pc, #16]	; (105ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   1059c:	9b01      	ldr	r3, [sp, #4]
   1059e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   105a2:	bf00      	nop
   105a4:	b003      	add	sp, #12
   105a6:	f85d fb04 	ldr.w	pc, [sp], #4
   105aa:	bf00      	nop
   105ac:	1fff93d0 	.word	0x1fff93d0
   105b0:	1fff93cc 	.word	0x1fff93cc

000105b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
   105b4:	b500      	push	{lr}
   105b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   105b8:	f7f0 fb74 	bl	ca4 <Sys_GetCoreID>
   105bc:	4603      	mov	r3, r0
   105be:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]--;
   105c0:	4a0d      	ldr	r2, [pc, #52]	; (105f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   105c2:	9b01      	ldr	r3, [sp, #4]
   105c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105c8:	1e5a      	subs	r2, r3, #1
   105ca:	490b      	ldr	r1, [pc, #44]	; (105f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   105cc:	9b01      	ldr	r3, [sp, #4]
   105ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   105d2:	4a0a      	ldr	r2, [pc, #40]	; (105fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x48>)
   105d4:	9b01      	ldr	r3, [sp, #4]
   105d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105da:	f003 0301 	and.w	r3, r3, #1
   105de:	2b00      	cmp	r3, #0
   105e0:	d106      	bne.n	105f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
   105e2:	4a05      	ldr	r2, [pc, #20]	; (105f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   105e4:	9b01      	ldr	r3, [sp, #4]
   105e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105ea:	2b00      	cmp	r3, #0
   105ec:	d100      	bne.n	105f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   105ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   105f0:	bf00      	nop
   105f2:	b003      	add	sp, #12
   105f4:	f85d fb04 	ldr.w	pc, [sp], #4
   105f8:	1fff93d0 	.word	0x1fff93d0
   105fc:	1fff93cc 	.word	0x1fff93cc

00010600 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
   10600:	b500      	push	{lr}
   10602:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10604:	f7f0 fb4e 	bl	ca4 <Sys_GetCoreID>
   10608:	4603      	mov	r3, r0
   1060a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId])
   1060c:	4a10      	ldr	r2, [pc, #64]	; (10650 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   1060e:	9b01      	ldr	r3, [sp, #4]
   10610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10614:	2b00      	cmp	r3, #0
   10616:	d10d      	bne.n	10634 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10618:	f7f0 f9ac 	bl	974 <Adc_schm_read_msr>
   1061c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1061e:	9b00      	ldr	r3, [sp, #0]
   10620:	f003 0301 	and.w	r3, r3, #1
   10624:	2b00      	cmp	r3, #0
   10626:	d100      	bne.n	1062a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10628:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   1062a:	490a      	ldr	r1, [pc, #40]	; (10654 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x54>)
   1062c:	9b01      	ldr	r3, [sp, #4]
   1062e:	9a00      	ldr	r2, [sp, #0]
   10630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]++;
   10634:	4a06      	ldr	r2, [pc, #24]	; (10650 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   10636:	9b01      	ldr	r3, [sp, #4]
   10638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1063c:	1c5a      	adds	r2, r3, #1
   1063e:	4904      	ldr	r1, [pc, #16]	; (10650 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   10640:	9b01      	ldr	r3, [sp, #4]
   10642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10646:	bf00      	nop
   10648:	b003      	add	sp, #12
   1064a:	f85d fb04 	ldr.w	pc, [sp], #4
   1064e:	bf00      	nop
   10650:	1fff93d8 	.word	0x1fff93d8
   10654:	1fff93d4 	.word	0x1fff93d4

00010658 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
   10658:	b500      	push	{lr}
   1065a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1065c:	f7f0 fb22 	bl	ca4 <Sys_GetCoreID>
   10660:	4603      	mov	r3, r0
   10662:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]--;
   10664:	4a0d      	ldr	r2, [pc, #52]	; (1069c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   10666:	9b01      	ldr	r3, [sp, #4]
   10668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1066c:	1e5a      	subs	r2, r3, #1
   1066e:	490b      	ldr	r1, [pc, #44]	; (1069c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   10670:	9b01      	ldr	r3, [sp, #4]
   10672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   10676:	4a0a      	ldr	r2, [pc, #40]	; (106a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x48>)
   10678:	9b01      	ldr	r3, [sp, #4]
   1067a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1067e:	f003 0301 	and.w	r3, r3, #1
   10682:	2b00      	cmp	r3, #0
   10684:	d106      	bne.n	10694 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
   10686:	4a05      	ldr	r2, [pc, #20]	; (1069c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   10688:	9b01      	ldr	r3, [sp, #4]
   1068a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1068e:	2b00      	cmp	r3, #0
   10690:	d100      	bne.n	10694 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10692:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10694:	bf00      	nop
   10696:	b003      	add	sp, #12
   10698:	f85d fb04 	ldr.w	pc, [sp], #4
   1069c:	1fff93d8 	.word	0x1fff93d8
   106a0:	1fff93d4 	.word	0x1fff93d4

000106a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
   106a4:	b500      	push	{lr}
   106a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   106a8:	f7f0 fafc 	bl	ca4 <Sys_GetCoreID>
   106ac:	4603      	mov	r3, r0
   106ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId])
   106b0:	4a10      	ldr	r2, [pc, #64]	; (106f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   106b2:	9b01      	ldr	r3, [sp, #4]
   106b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106b8:	2b00      	cmp	r3, #0
   106ba:	d10d      	bne.n	106d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   106bc:	f7f0 f95a 	bl	974 <Adc_schm_read_msr>
   106c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   106c2:	9b00      	ldr	r3, [sp, #0]
   106c4:	f003 0301 	and.w	r3, r3, #1
   106c8:	2b00      	cmp	r3, #0
   106ca:	d100      	bne.n	106ce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   106cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   106ce:	490a      	ldr	r1, [pc, #40]	; (106f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x54>)
   106d0:	9b01      	ldr	r3, [sp, #4]
   106d2:	9a00      	ldr	r2, [sp, #0]
   106d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]++;
   106d8:	4a06      	ldr	r2, [pc, #24]	; (106f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   106da:	9b01      	ldr	r3, [sp, #4]
   106dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106e0:	1c5a      	adds	r2, r3, #1
   106e2:	4904      	ldr	r1, [pc, #16]	; (106f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   106e4:	9b01      	ldr	r3, [sp, #4]
   106e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   106ea:	bf00      	nop
   106ec:	b003      	add	sp, #12
   106ee:	f85d fb04 	ldr.w	pc, [sp], #4
   106f2:	bf00      	nop
   106f4:	1fff93e0 	.word	0x1fff93e0
   106f8:	1fff93dc 	.word	0x1fff93dc

000106fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
   106fc:	b500      	push	{lr}
   106fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10700:	f7f0 fad0 	bl	ca4 <Sys_GetCoreID>
   10704:	4603      	mov	r3, r0
   10706:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]--;
   10708:	4a0d      	ldr	r2, [pc, #52]	; (10740 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   1070a:	9b01      	ldr	r3, [sp, #4]
   1070c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10710:	1e5a      	subs	r2, r3, #1
   10712:	490b      	ldr	r1, [pc, #44]	; (10740 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   10714:	9b01      	ldr	r3, [sp, #4]
   10716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   1071a:	4a0a      	ldr	r2, [pc, #40]	; (10744 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x48>)
   1071c:	9b01      	ldr	r3, [sp, #4]
   1071e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10722:	f003 0301 	and.w	r3, r3, #1
   10726:	2b00      	cmp	r3, #0
   10728:	d106      	bne.n	10738 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
   1072a:	4a05      	ldr	r2, [pc, #20]	; (10740 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   1072c:	9b01      	ldr	r3, [sp, #4]
   1072e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10732:	2b00      	cmp	r3, #0
   10734:	d100      	bne.n	10738 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10736:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10738:	bf00      	nop
   1073a:	b003      	add	sp, #12
   1073c:	f85d fb04 	ldr.w	pc, [sp], #4
   10740:	1fff93e0 	.word	0x1fff93e0
   10744:	1fff93dc 	.word	0x1fff93dc

00010748 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
   10748:	b500      	push	{lr}
   1074a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1074c:	f7f0 faaa 	bl	ca4 <Sys_GetCoreID>
   10750:	4603      	mov	r3, r0
   10752:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId])
   10754:	4a10      	ldr	r2, [pc, #64]	; (10798 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   10756:	9b01      	ldr	r3, [sp, #4]
   10758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1075c:	2b00      	cmp	r3, #0
   1075e:	d10d      	bne.n	1077c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10760:	f7f0 f908 	bl	974 <Adc_schm_read_msr>
   10764:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10766:	9b00      	ldr	r3, [sp, #0]
   10768:	f003 0301 	and.w	r3, r3, #1
   1076c:	2b00      	cmp	r3, #0
   1076e:	d100      	bne.n	10772 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10770:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   10772:	490a      	ldr	r1, [pc, #40]	; (1079c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x54>)
   10774:	9b01      	ldr	r3, [sp, #4]
   10776:	9a00      	ldr	r2, [sp, #0]
   10778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]++;
   1077c:	4a06      	ldr	r2, [pc, #24]	; (10798 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   1077e:	9b01      	ldr	r3, [sp, #4]
   10780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10784:	1c5a      	adds	r2, r3, #1
   10786:	4904      	ldr	r1, [pc, #16]	; (10798 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   10788:	9b01      	ldr	r3, [sp, #4]
   1078a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1078e:	bf00      	nop
   10790:	b003      	add	sp, #12
   10792:	f85d fb04 	ldr.w	pc, [sp], #4
   10796:	bf00      	nop
   10798:	1fff93e8 	.word	0x1fff93e8
   1079c:	1fff93e4 	.word	0x1fff93e4

000107a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
   107a0:	b500      	push	{lr}
   107a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   107a4:	f7f0 fa7e 	bl	ca4 <Sys_GetCoreID>
   107a8:	4603      	mov	r3, r0
   107aa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]--;
   107ac:	4a0d      	ldr	r2, [pc, #52]	; (107e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   107ae:	9b01      	ldr	r3, [sp, #4]
   107b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107b4:	1e5a      	subs	r2, r3, #1
   107b6:	490b      	ldr	r1, [pc, #44]	; (107e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   107b8:	9b01      	ldr	r3, [sp, #4]
   107ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   107be:	4a0a      	ldr	r2, [pc, #40]	; (107e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x48>)
   107c0:	9b01      	ldr	r3, [sp, #4]
   107c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107c6:	f003 0301 	and.w	r3, r3, #1
   107ca:	2b00      	cmp	r3, #0
   107cc:	d106      	bne.n	107dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
   107ce:	4a05      	ldr	r2, [pc, #20]	; (107e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   107d0:	9b01      	ldr	r3, [sp, #4]
   107d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107d6:	2b00      	cmp	r3, #0
   107d8:	d100      	bne.n	107dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   107da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   107dc:	bf00      	nop
   107de:	b003      	add	sp, #12
   107e0:	f85d fb04 	ldr.w	pc, [sp], #4
   107e4:	1fff93e8 	.word	0x1fff93e8
   107e8:	1fff93e4 	.word	0x1fff93e4

000107ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
   107ec:	b500      	push	{lr}
   107ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   107f0:	f7f0 fa58 	bl	ca4 <Sys_GetCoreID>
   107f4:	4603      	mov	r3, r0
   107f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId])
   107f8:	4a10      	ldr	r2, [pc, #64]	; (1083c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   107fa:	9b01      	ldr	r3, [sp, #4]
   107fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10800:	2b00      	cmp	r3, #0
   10802:	d10d      	bne.n	10820 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10804:	f7f0 f8b6 	bl	974 <Adc_schm_read_msr>
   10808:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1080a:	9b00      	ldr	r3, [sp, #0]
   1080c:	f003 0301 	and.w	r3, r3, #1
   10810:	2b00      	cmp	r3, #0
   10812:	d100      	bne.n	10816 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10814:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   10816:	490a      	ldr	r1, [pc, #40]	; (10840 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x54>)
   10818:	9b01      	ldr	r3, [sp, #4]
   1081a:	9a00      	ldr	r2, [sp, #0]
   1081c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]++;
   10820:	4a06      	ldr	r2, [pc, #24]	; (1083c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   10822:	9b01      	ldr	r3, [sp, #4]
   10824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10828:	1c5a      	adds	r2, r3, #1
   1082a:	4904      	ldr	r1, [pc, #16]	; (1083c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   1082c:	9b01      	ldr	r3, [sp, #4]
   1082e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10832:	bf00      	nop
   10834:	b003      	add	sp, #12
   10836:	f85d fb04 	ldr.w	pc, [sp], #4
   1083a:	bf00      	nop
   1083c:	1fff93f0 	.word	0x1fff93f0
   10840:	1fff93ec 	.word	0x1fff93ec

00010844 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
   10844:	b500      	push	{lr}
   10846:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10848:	f7f0 fa2c 	bl	ca4 <Sys_GetCoreID>
   1084c:	4603      	mov	r3, r0
   1084e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]--;
   10850:	4a0d      	ldr	r2, [pc, #52]	; (10888 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   10852:	9b01      	ldr	r3, [sp, #4]
   10854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10858:	1e5a      	subs	r2, r3, #1
   1085a:	490b      	ldr	r1, [pc, #44]	; (10888 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   1085c:	9b01      	ldr	r3, [sp, #4]
   1085e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   10862:	4a0a      	ldr	r2, [pc, #40]	; (1088c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x48>)
   10864:	9b01      	ldr	r3, [sp, #4]
   10866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1086a:	f003 0301 	and.w	r3, r3, #1
   1086e:	2b00      	cmp	r3, #0
   10870:	d106      	bne.n	10880 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
   10872:	4a05      	ldr	r2, [pc, #20]	; (10888 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   10874:	9b01      	ldr	r3, [sp, #4]
   10876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1087a:	2b00      	cmp	r3, #0
   1087c:	d100      	bne.n	10880 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1087e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10880:	bf00      	nop
   10882:	b003      	add	sp, #12
   10884:	f85d fb04 	ldr.w	pc, [sp], #4
   10888:	1fff93f0 	.word	0x1fff93f0
   1088c:	1fff93ec 	.word	0x1fff93ec

00010890 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
   10890:	b500      	push	{lr}
   10892:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10894:	f7f0 fa06 	bl	ca4 <Sys_GetCoreID>
   10898:	4603      	mov	r3, r0
   1089a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId])
   1089c:	4a10      	ldr	r2, [pc, #64]	; (108e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   1089e:	9b01      	ldr	r3, [sp, #4]
   108a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108a4:	2b00      	cmp	r3, #0
   108a6:	d10d      	bne.n	108c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   108a8:	f7f0 f864 	bl	974 <Adc_schm_read_msr>
   108ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   108ae:	9b00      	ldr	r3, [sp, #0]
   108b0:	f003 0301 	and.w	r3, r3, #1
   108b4:	2b00      	cmp	r3, #0
   108b6:	d100      	bne.n	108ba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   108b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   108ba:	490a      	ldr	r1, [pc, #40]	; (108e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x54>)
   108bc:	9b01      	ldr	r3, [sp, #4]
   108be:	9a00      	ldr	r2, [sp, #0]
   108c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]++;
   108c4:	4a06      	ldr	r2, [pc, #24]	; (108e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   108c6:	9b01      	ldr	r3, [sp, #4]
   108c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108cc:	1c5a      	adds	r2, r3, #1
   108ce:	4904      	ldr	r1, [pc, #16]	; (108e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   108d0:	9b01      	ldr	r3, [sp, #4]
   108d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   108d6:	bf00      	nop
   108d8:	b003      	add	sp, #12
   108da:	f85d fb04 	ldr.w	pc, [sp], #4
   108de:	bf00      	nop
   108e0:	1fff93f8 	.word	0x1fff93f8
   108e4:	1fff93f4 	.word	0x1fff93f4

000108e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
   108e8:	b500      	push	{lr}
   108ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   108ec:	f7f0 f9da 	bl	ca4 <Sys_GetCoreID>
   108f0:	4603      	mov	r3, r0
   108f2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]--;
   108f4:	4a0d      	ldr	r2, [pc, #52]	; (1092c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   108f6:	9b01      	ldr	r3, [sp, #4]
   108f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108fc:	1e5a      	subs	r2, r3, #1
   108fe:	490b      	ldr	r1, [pc, #44]	; (1092c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   10900:	9b01      	ldr	r3, [sp, #4]
   10902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   10906:	4a0a      	ldr	r2, [pc, #40]	; (10930 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x48>)
   10908:	9b01      	ldr	r3, [sp, #4]
   1090a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1090e:	f003 0301 	and.w	r3, r3, #1
   10912:	2b00      	cmp	r3, #0
   10914:	d106      	bne.n	10924 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
   10916:	4a05      	ldr	r2, [pc, #20]	; (1092c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   10918:	9b01      	ldr	r3, [sp, #4]
   1091a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1091e:	2b00      	cmp	r3, #0
   10920:	d100      	bne.n	10924 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10922:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10924:	bf00      	nop
   10926:	b003      	add	sp, #12
   10928:	f85d fb04 	ldr.w	pc, [sp], #4
   1092c:	1fff93f8 	.word	0x1fff93f8
   10930:	1fff93f4 	.word	0x1fff93f4

00010934 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
   10934:	b500      	push	{lr}
   10936:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10938:	f7f0 f9b4 	bl	ca4 <Sys_GetCoreID>
   1093c:	4603      	mov	r3, r0
   1093e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId])
   10940:	4a10      	ldr	r2, [pc, #64]	; (10984 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   10942:	9b01      	ldr	r3, [sp, #4]
   10944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10948:	2b00      	cmp	r3, #0
   1094a:	d10d      	bne.n	10968 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1094c:	f7f0 f812 	bl	974 <Adc_schm_read_msr>
   10950:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10952:	9b00      	ldr	r3, [sp, #0]
   10954:	f003 0301 	and.w	r3, r3, #1
   10958:	2b00      	cmp	r3, #0
   1095a:	d100      	bne.n	1095e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1095c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   1095e:	490a      	ldr	r1, [pc, #40]	; (10988 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x54>)
   10960:	9b01      	ldr	r3, [sp, #4]
   10962:	9a00      	ldr	r2, [sp, #0]
   10964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]++;
   10968:	4a06      	ldr	r2, [pc, #24]	; (10984 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   1096a:	9b01      	ldr	r3, [sp, #4]
   1096c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10970:	1c5a      	adds	r2, r3, #1
   10972:	4904      	ldr	r1, [pc, #16]	; (10984 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   10974:	9b01      	ldr	r3, [sp, #4]
   10976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1097a:	bf00      	nop
   1097c:	b003      	add	sp, #12
   1097e:	f85d fb04 	ldr.w	pc, [sp], #4
   10982:	bf00      	nop
   10984:	1fff9400 	.word	0x1fff9400
   10988:	1fff93fc 	.word	0x1fff93fc

0001098c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
   1098c:	b500      	push	{lr}
   1098e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10990:	f7f0 f988 	bl	ca4 <Sys_GetCoreID>
   10994:	4603      	mov	r3, r0
   10996:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]--;
   10998:	4a0d      	ldr	r2, [pc, #52]	; (109d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   1099a:	9b01      	ldr	r3, [sp, #4]
   1099c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109a0:	1e5a      	subs	r2, r3, #1
   109a2:	490b      	ldr	r1, [pc, #44]	; (109d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   109a4:	9b01      	ldr	r3, [sp, #4]
   109a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   109aa:	4a0a      	ldr	r2, [pc, #40]	; (109d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x48>)
   109ac:	9b01      	ldr	r3, [sp, #4]
   109ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109b2:	f003 0301 	and.w	r3, r3, #1
   109b6:	2b00      	cmp	r3, #0
   109b8:	d106      	bne.n	109c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
   109ba:	4a05      	ldr	r2, [pc, #20]	; (109d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   109bc:	9b01      	ldr	r3, [sp, #4]
   109be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109c2:	2b00      	cmp	r3, #0
   109c4:	d100      	bne.n	109c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   109c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   109c8:	bf00      	nop
   109ca:	b003      	add	sp, #12
   109cc:	f85d fb04 	ldr.w	pc, [sp], #4
   109d0:	1fff9400 	.word	0x1fff9400
   109d4:	1fff93fc 	.word	0x1fff93fc

000109d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
   109d8:	b500      	push	{lr}
   109da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   109dc:	f7f0 f962 	bl	ca4 <Sys_GetCoreID>
   109e0:	4603      	mov	r3, r0
   109e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId])
   109e4:	4a10      	ldr	r2, [pc, #64]	; (10a28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   109e6:	9b01      	ldr	r3, [sp, #4]
   109e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109ec:	2b00      	cmp	r3, #0
   109ee:	d10d      	bne.n	10a0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   109f0:	f7ef ffc0 	bl	974 <Adc_schm_read_msr>
   109f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   109f6:	9b00      	ldr	r3, [sp, #0]
   109f8:	f003 0301 	and.w	r3, r3, #1
   109fc:	2b00      	cmp	r3, #0
   109fe:	d100      	bne.n	10a02 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10a00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   10a02:	490a      	ldr	r1, [pc, #40]	; (10a2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x54>)
   10a04:	9b01      	ldr	r3, [sp, #4]
   10a06:	9a00      	ldr	r2, [sp, #0]
   10a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]++;
   10a0c:	4a06      	ldr	r2, [pc, #24]	; (10a28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   10a0e:	9b01      	ldr	r3, [sp, #4]
   10a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a14:	1c5a      	adds	r2, r3, #1
   10a16:	4904      	ldr	r1, [pc, #16]	; (10a28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   10a18:	9b01      	ldr	r3, [sp, #4]
   10a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10a1e:	bf00      	nop
   10a20:	b003      	add	sp, #12
   10a22:	f85d fb04 	ldr.w	pc, [sp], #4
   10a26:	bf00      	nop
   10a28:	1fff9408 	.word	0x1fff9408
   10a2c:	1fff9404 	.word	0x1fff9404

00010a30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
   10a30:	b500      	push	{lr}
   10a32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10a34:	f7f0 f936 	bl	ca4 <Sys_GetCoreID>
   10a38:	4603      	mov	r3, r0
   10a3a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]--;
   10a3c:	4a0d      	ldr	r2, [pc, #52]	; (10a74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   10a3e:	9b01      	ldr	r3, [sp, #4]
   10a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a44:	1e5a      	subs	r2, r3, #1
   10a46:	490b      	ldr	r1, [pc, #44]	; (10a74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   10a48:	9b01      	ldr	r3, [sp, #4]
   10a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   10a4e:	4a0a      	ldr	r2, [pc, #40]	; (10a78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x48>)
   10a50:	9b01      	ldr	r3, [sp, #4]
   10a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a56:	f003 0301 	and.w	r3, r3, #1
   10a5a:	2b00      	cmp	r3, #0
   10a5c:	d106      	bne.n	10a6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
   10a5e:	4a05      	ldr	r2, [pc, #20]	; (10a74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   10a60:	9b01      	ldr	r3, [sp, #4]
   10a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a66:	2b00      	cmp	r3, #0
   10a68:	d100      	bne.n	10a6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10a6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10a6c:	bf00      	nop
   10a6e:	b003      	add	sp, #12
   10a70:	f85d fb04 	ldr.w	pc, [sp], #4
   10a74:	1fff9408 	.word	0x1fff9408
   10a78:	1fff9404 	.word	0x1fff9404

00010a7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
   10a7c:	b500      	push	{lr}
   10a7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10a80:	f7f0 f910 	bl	ca4 <Sys_GetCoreID>
   10a84:	4603      	mov	r3, r0
   10a86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId])
   10a88:	4a10      	ldr	r2, [pc, #64]	; (10acc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   10a8a:	9b01      	ldr	r3, [sp, #4]
   10a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a90:	2b00      	cmp	r3, #0
   10a92:	d10d      	bne.n	10ab0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10a94:	f7ef ff6e 	bl	974 <Adc_schm_read_msr>
   10a98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10a9a:	9b00      	ldr	r3, [sp, #0]
   10a9c:	f003 0301 	and.w	r3, r3, #1
   10aa0:	2b00      	cmp	r3, #0
   10aa2:	d100      	bne.n	10aa6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10aa4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   10aa6:	490a      	ldr	r1, [pc, #40]	; (10ad0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x54>)
   10aa8:	9b01      	ldr	r3, [sp, #4]
   10aaa:	9a00      	ldr	r2, [sp, #0]
   10aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]++;
   10ab0:	4a06      	ldr	r2, [pc, #24]	; (10acc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   10ab2:	9b01      	ldr	r3, [sp, #4]
   10ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ab8:	1c5a      	adds	r2, r3, #1
   10aba:	4904      	ldr	r1, [pc, #16]	; (10acc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   10abc:	9b01      	ldr	r3, [sp, #4]
   10abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10ac2:	bf00      	nop
   10ac4:	b003      	add	sp, #12
   10ac6:	f85d fb04 	ldr.w	pc, [sp], #4
   10aca:	bf00      	nop
   10acc:	1fff9410 	.word	0x1fff9410
   10ad0:	1fff940c 	.word	0x1fff940c

00010ad4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
   10ad4:	b500      	push	{lr}
   10ad6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ad8:	f7f0 f8e4 	bl	ca4 <Sys_GetCoreID>
   10adc:	4603      	mov	r3, r0
   10ade:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]--;
   10ae0:	4a0d      	ldr	r2, [pc, #52]	; (10b18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   10ae2:	9b01      	ldr	r3, [sp, #4]
   10ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ae8:	1e5a      	subs	r2, r3, #1
   10aea:	490b      	ldr	r1, [pc, #44]	; (10b18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   10aec:	9b01      	ldr	r3, [sp, #4]
   10aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   10af2:	4a0a      	ldr	r2, [pc, #40]	; (10b1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x48>)
   10af4:	9b01      	ldr	r3, [sp, #4]
   10af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10afa:	f003 0301 	and.w	r3, r3, #1
   10afe:	2b00      	cmp	r3, #0
   10b00:	d106      	bne.n	10b10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
   10b02:	4a05      	ldr	r2, [pc, #20]	; (10b18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   10b04:	9b01      	ldr	r3, [sp, #4]
   10b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b0a:	2b00      	cmp	r3, #0
   10b0c:	d100      	bne.n	10b10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10b0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10b10:	bf00      	nop
   10b12:	b003      	add	sp, #12
   10b14:	f85d fb04 	ldr.w	pc, [sp], #4
   10b18:	1fff9410 	.word	0x1fff9410
   10b1c:	1fff940c 	.word	0x1fff940c

00010b20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
   10b20:	b500      	push	{lr}
   10b22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10b24:	f7f0 f8be 	bl	ca4 <Sys_GetCoreID>
   10b28:	4603      	mov	r3, r0
   10b2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId])
   10b2c:	4a10      	ldr	r2, [pc, #64]	; (10b70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   10b2e:	9b01      	ldr	r3, [sp, #4]
   10b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b34:	2b00      	cmp	r3, #0
   10b36:	d10d      	bne.n	10b54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10b38:	f7ef ff1c 	bl	974 <Adc_schm_read_msr>
   10b3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10b3e:	9b00      	ldr	r3, [sp, #0]
   10b40:	f003 0301 	and.w	r3, r3, #1
   10b44:	2b00      	cmp	r3, #0
   10b46:	d100      	bne.n	10b4a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10b48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   10b4a:	490a      	ldr	r1, [pc, #40]	; (10b74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x54>)
   10b4c:	9b01      	ldr	r3, [sp, #4]
   10b4e:	9a00      	ldr	r2, [sp, #0]
   10b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]++;
   10b54:	4a06      	ldr	r2, [pc, #24]	; (10b70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   10b56:	9b01      	ldr	r3, [sp, #4]
   10b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b5c:	1c5a      	adds	r2, r3, #1
   10b5e:	4904      	ldr	r1, [pc, #16]	; (10b70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   10b60:	9b01      	ldr	r3, [sp, #4]
   10b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10b66:	bf00      	nop
   10b68:	b003      	add	sp, #12
   10b6a:	f85d fb04 	ldr.w	pc, [sp], #4
   10b6e:	bf00      	nop
   10b70:	1fff9418 	.word	0x1fff9418
   10b74:	1fff9414 	.word	0x1fff9414

00010b78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
   10b78:	b500      	push	{lr}
   10b7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10b7c:	f7f0 f892 	bl	ca4 <Sys_GetCoreID>
   10b80:	4603      	mov	r3, r0
   10b82:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]--;
   10b84:	4a0d      	ldr	r2, [pc, #52]	; (10bbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   10b86:	9b01      	ldr	r3, [sp, #4]
   10b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b8c:	1e5a      	subs	r2, r3, #1
   10b8e:	490b      	ldr	r1, [pc, #44]	; (10bbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   10b90:	9b01      	ldr	r3, [sp, #4]
   10b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   10b96:	4a0a      	ldr	r2, [pc, #40]	; (10bc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x48>)
   10b98:	9b01      	ldr	r3, [sp, #4]
   10b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b9e:	f003 0301 	and.w	r3, r3, #1
   10ba2:	2b00      	cmp	r3, #0
   10ba4:	d106      	bne.n	10bb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
   10ba6:	4a05      	ldr	r2, [pc, #20]	; (10bbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   10ba8:	9b01      	ldr	r3, [sp, #4]
   10baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10bae:	2b00      	cmp	r3, #0
   10bb0:	d100      	bne.n	10bb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10bb2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10bb4:	bf00      	nop
   10bb6:	b003      	add	sp, #12
   10bb8:	f85d fb04 	ldr.w	pc, [sp], #4
   10bbc:	1fff9418 	.word	0x1fff9418
   10bc0:	1fff9414 	.word	0x1fff9414

00010bc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
   10bc4:	b500      	push	{lr}
   10bc6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10bc8:	f7f0 f86c 	bl	ca4 <Sys_GetCoreID>
   10bcc:	4603      	mov	r3, r0
   10bce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId])
   10bd0:	4a10      	ldr	r2, [pc, #64]	; (10c14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   10bd2:	9b01      	ldr	r3, [sp, #4]
   10bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10bd8:	2b00      	cmp	r3, #0
   10bda:	d10d      	bne.n	10bf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10bdc:	f7ef feca 	bl	974 <Adc_schm_read_msr>
   10be0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10be2:	9b00      	ldr	r3, [sp, #0]
   10be4:	f003 0301 	and.w	r3, r3, #1
   10be8:	2b00      	cmp	r3, #0
   10bea:	d100      	bne.n	10bee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10bec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   10bee:	490a      	ldr	r1, [pc, #40]	; (10c18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x54>)
   10bf0:	9b01      	ldr	r3, [sp, #4]
   10bf2:	9a00      	ldr	r2, [sp, #0]
   10bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]++;
   10bf8:	4a06      	ldr	r2, [pc, #24]	; (10c14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   10bfa:	9b01      	ldr	r3, [sp, #4]
   10bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c00:	1c5a      	adds	r2, r3, #1
   10c02:	4904      	ldr	r1, [pc, #16]	; (10c14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   10c04:	9b01      	ldr	r3, [sp, #4]
   10c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10c0a:	bf00      	nop
   10c0c:	b003      	add	sp, #12
   10c0e:	f85d fb04 	ldr.w	pc, [sp], #4
   10c12:	bf00      	nop
   10c14:	1fff9420 	.word	0x1fff9420
   10c18:	1fff941c 	.word	0x1fff941c

00010c1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
   10c1c:	b500      	push	{lr}
   10c1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10c20:	f7f0 f840 	bl	ca4 <Sys_GetCoreID>
   10c24:	4603      	mov	r3, r0
   10c26:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]--;
   10c28:	4a0d      	ldr	r2, [pc, #52]	; (10c60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   10c2a:	9b01      	ldr	r3, [sp, #4]
   10c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c30:	1e5a      	subs	r2, r3, #1
   10c32:	490b      	ldr	r1, [pc, #44]	; (10c60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   10c34:	9b01      	ldr	r3, [sp, #4]
   10c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   10c3a:	4a0a      	ldr	r2, [pc, #40]	; (10c64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x48>)
   10c3c:	9b01      	ldr	r3, [sp, #4]
   10c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c42:	f003 0301 	and.w	r3, r3, #1
   10c46:	2b00      	cmp	r3, #0
   10c48:	d106      	bne.n	10c58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
   10c4a:	4a05      	ldr	r2, [pc, #20]	; (10c60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   10c4c:	9b01      	ldr	r3, [sp, #4]
   10c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c52:	2b00      	cmp	r3, #0
   10c54:	d100      	bne.n	10c58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10c56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10c58:	bf00      	nop
   10c5a:	b003      	add	sp, #12
   10c5c:	f85d fb04 	ldr.w	pc, [sp], #4
   10c60:	1fff9420 	.word	0x1fff9420
   10c64:	1fff941c 	.word	0x1fff941c

00010c68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
   10c68:	b500      	push	{lr}
   10c6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10c6c:	f7f0 f81a 	bl	ca4 <Sys_GetCoreID>
   10c70:	4603      	mov	r3, r0
   10c72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId])
   10c74:	4a10      	ldr	r2, [pc, #64]	; (10cb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   10c76:	9b01      	ldr	r3, [sp, #4]
   10c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c7c:	2b00      	cmp	r3, #0
   10c7e:	d10d      	bne.n	10c9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10c80:	f7ef fe78 	bl	974 <Adc_schm_read_msr>
   10c84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10c86:	9b00      	ldr	r3, [sp, #0]
   10c88:	f003 0301 	and.w	r3, r3, #1
   10c8c:	2b00      	cmp	r3, #0
   10c8e:	d100      	bne.n	10c92 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10c90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   10c92:	490a      	ldr	r1, [pc, #40]	; (10cbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x54>)
   10c94:	9b01      	ldr	r3, [sp, #4]
   10c96:	9a00      	ldr	r2, [sp, #0]
   10c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]++;
   10c9c:	4a06      	ldr	r2, [pc, #24]	; (10cb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   10c9e:	9b01      	ldr	r3, [sp, #4]
   10ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ca4:	1c5a      	adds	r2, r3, #1
   10ca6:	4904      	ldr	r1, [pc, #16]	; (10cb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   10ca8:	9b01      	ldr	r3, [sp, #4]
   10caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10cae:	bf00      	nop
   10cb0:	b003      	add	sp, #12
   10cb2:	f85d fb04 	ldr.w	pc, [sp], #4
   10cb6:	bf00      	nop
   10cb8:	1fff9428 	.word	0x1fff9428
   10cbc:	1fff9424 	.word	0x1fff9424

00010cc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
   10cc0:	b500      	push	{lr}
   10cc2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10cc4:	f7ef ffee 	bl	ca4 <Sys_GetCoreID>
   10cc8:	4603      	mov	r3, r0
   10cca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]--;
   10ccc:	4a0d      	ldr	r2, [pc, #52]	; (10d04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   10cce:	9b01      	ldr	r3, [sp, #4]
   10cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10cd4:	1e5a      	subs	r2, r3, #1
   10cd6:	490b      	ldr	r1, [pc, #44]	; (10d04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   10cd8:	9b01      	ldr	r3, [sp, #4]
   10cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   10cde:	4a0a      	ldr	r2, [pc, #40]	; (10d08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x48>)
   10ce0:	9b01      	ldr	r3, [sp, #4]
   10ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ce6:	f003 0301 	and.w	r3, r3, #1
   10cea:	2b00      	cmp	r3, #0
   10cec:	d106      	bne.n	10cfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
   10cee:	4a05      	ldr	r2, [pc, #20]	; (10d04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   10cf0:	9b01      	ldr	r3, [sp, #4]
   10cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10cf6:	2b00      	cmp	r3, #0
   10cf8:	d100      	bne.n	10cfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10cfa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10cfc:	bf00      	nop
   10cfe:	b003      	add	sp, #12
   10d00:	f85d fb04 	ldr.w	pc, [sp], #4
   10d04:	1fff9428 	.word	0x1fff9428
   10d08:	1fff9424 	.word	0x1fff9424

00010d0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
   10d0c:	b500      	push	{lr}
   10d0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10d10:	f7ef ffc8 	bl	ca4 <Sys_GetCoreID>
   10d14:	4603      	mov	r3, r0
   10d16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId])
   10d18:	4a10      	ldr	r2, [pc, #64]	; (10d5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   10d1a:	9b01      	ldr	r3, [sp, #4]
   10d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d20:	2b00      	cmp	r3, #0
   10d22:	d10d      	bne.n	10d40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10d24:	f7ef fe26 	bl	974 <Adc_schm_read_msr>
   10d28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10d2a:	9b00      	ldr	r3, [sp, #0]
   10d2c:	f003 0301 	and.w	r3, r3, #1
   10d30:	2b00      	cmp	r3, #0
   10d32:	d100      	bne.n	10d36 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10d34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   10d36:	490a      	ldr	r1, [pc, #40]	; (10d60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x54>)
   10d38:	9b01      	ldr	r3, [sp, #4]
   10d3a:	9a00      	ldr	r2, [sp, #0]
   10d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]++;
   10d40:	4a06      	ldr	r2, [pc, #24]	; (10d5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   10d42:	9b01      	ldr	r3, [sp, #4]
   10d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d48:	1c5a      	adds	r2, r3, #1
   10d4a:	4904      	ldr	r1, [pc, #16]	; (10d5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   10d4c:	9b01      	ldr	r3, [sp, #4]
   10d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10d52:	bf00      	nop
   10d54:	b003      	add	sp, #12
   10d56:	f85d fb04 	ldr.w	pc, [sp], #4
   10d5a:	bf00      	nop
   10d5c:	1fff9430 	.word	0x1fff9430
   10d60:	1fff942c 	.word	0x1fff942c

00010d64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
   10d64:	b500      	push	{lr}
   10d66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10d68:	f7ef ff9c 	bl	ca4 <Sys_GetCoreID>
   10d6c:	4603      	mov	r3, r0
   10d6e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]--;
   10d70:	4a0d      	ldr	r2, [pc, #52]	; (10da8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   10d72:	9b01      	ldr	r3, [sp, #4]
   10d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d78:	1e5a      	subs	r2, r3, #1
   10d7a:	490b      	ldr	r1, [pc, #44]	; (10da8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   10d7c:	9b01      	ldr	r3, [sp, #4]
   10d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   10d82:	4a0a      	ldr	r2, [pc, #40]	; (10dac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x48>)
   10d84:	9b01      	ldr	r3, [sp, #4]
   10d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d8a:	f003 0301 	and.w	r3, r3, #1
   10d8e:	2b00      	cmp	r3, #0
   10d90:	d106      	bne.n	10da0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
   10d92:	4a05      	ldr	r2, [pc, #20]	; (10da8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   10d94:	9b01      	ldr	r3, [sp, #4]
   10d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d9a:	2b00      	cmp	r3, #0
   10d9c:	d100      	bne.n	10da0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10d9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10da0:	bf00      	nop
   10da2:	b003      	add	sp, #12
   10da4:	f85d fb04 	ldr.w	pc, [sp], #4
   10da8:	1fff9430 	.word	0x1fff9430
   10dac:	1fff942c 	.word	0x1fff942c

00010db0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
   10db0:	b500      	push	{lr}
   10db2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10db4:	f7ef ff76 	bl	ca4 <Sys_GetCoreID>
   10db8:	4603      	mov	r3, r0
   10dba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId])
   10dbc:	4a10      	ldr	r2, [pc, #64]	; (10e00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   10dbe:	9b01      	ldr	r3, [sp, #4]
   10dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dc4:	2b00      	cmp	r3, #0
   10dc6:	d10d      	bne.n	10de4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10dc8:	f7ef fdd4 	bl	974 <Adc_schm_read_msr>
   10dcc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10dce:	9b00      	ldr	r3, [sp, #0]
   10dd0:	f003 0301 	and.w	r3, r3, #1
   10dd4:	2b00      	cmp	r3, #0
   10dd6:	d100      	bne.n	10dda <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10dd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   10dda:	490a      	ldr	r1, [pc, #40]	; (10e04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x54>)
   10ddc:	9b01      	ldr	r3, [sp, #4]
   10dde:	9a00      	ldr	r2, [sp, #0]
   10de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]++;
   10de4:	4a06      	ldr	r2, [pc, #24]	; (10e00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   10de6:	9b01      	ldr	r3, [sp, #4]
   10de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dec:	1c5a      	adds	r2, r3, #1
   10dee:	4904      	ldr	r1, [pc, #16]	; (10e00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   10df0:	9b01      	ldr	r3, [sp, #4]
   10df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10df6:	bf00      	nop
   10df8:	b003      	add	sp, #12
   10dfa:	f85d fb04 	ldr.w	pc, [sp], #4
   10dfe:	bf00      	nop
   10e00:	1fff9438 	.word	0x1fff9438
   10e04:	1fff9434 	.word	0x1fff9434

00010e08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
   10e08:	b500      	push	{lr}
   10e0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10e0c:	f7ef ff4a 	bl	ca4 <Sys_GetCoreID>
   10e10:	4603      	mov	r3, r0
   10e12:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]--;
   10e14:	4a0d      	ldr	r2, [pc, #52]	; (10e4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   10e16:	9b01      	ldr	r3, [sp, #4]
   10e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e1c:	1e5a      	subs	r2, r3, #1
   10e1e:	490b      	ldr	r1, [pc, #44]	; (10e4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   10e20:	9b01      	ldr	r3, [sp, #4]
   10e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   10e26:	4a0a      	ldr	r2, [pc, #40]	; (10e50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x48>)
   10e28:	9b01      	ldr	r3, [sp, #4]
   10e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e2e:	f003 0301 	and.w	r3, r3, #1
   10e32:	2b00      	cmp	r3, #0
   10e34:	d106      	bne.n	10e44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
   10e36:	4a05      	ldr	r2, [pc, #20]	; (10e4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   10e38:	9b01      	ldr	r3, [sp, #4]
   10e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e3e:	2b00      	cmp	r3, #0
   10e40:	d100      	bne.n	10e44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10e42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10e44:	bf00      	nop
   10e46:	b003      	add	sp, #12
   10e48:	f85d fb04 	ldr.w	pc, [sp], #4
   10e4c:	1fff9438 	.word	0x1fff9438
   10e50:	1fff9434 	.word	0x1fff9434

00010e54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
   10e54:	b500      	push	{lr}
   10e56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10e58:	f7ef ff24 	bl	ca4 <Sys_GetCoreID>
   10e5c:	4603      	mov	r3, r0
   10e5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId])
   10e60:	4a10      	ldr	r2, [pc, #64]	; (10ea4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   10e62:	9b01      	ldr	r3, [sp, #4]
   10e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e68:	2b00      	cmp	r3, #0
   10e6a:	d10d      	bne.n	10e88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10e6c:	f7ef fd82 	bl	974 <Adc_schm_read_msr>
   10e70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10e72:	9b00      	ldr	r3, [sp, #0]
   10e74:	f003 0301 	and.w	r3, r3, #1
   10e78:	2b00      	cmp	r3, #0
   10e7a:	d100      	bne.n	10e7e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10e7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   10e7e:	490a      	ldr	r1, [pc, #40]	; (10ea8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x54>)
   10e80:	9b01      	ldr	r3, [sp, #4]
   10e82:	9a00      	ldr	r2, [sp, #0]
   10e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]++;
   10e88:	4a06      	ldr	r2, [pc, #24]	; (10ea4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   10e8a:	9b01      	ldr	r3, [sp, #4]
   10e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e90:	1c5a      	adds	r2, r3, #1
   10e92:	4904      	ldr	r1, [pc, #16]	; (10ea4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   10e94:	9b01      	ldr	r3, [sp, #4]
   10e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10e9a:	bf00      	nop
   10e9c:	b003      	add	sp, #12
   10e9e:	f85d fb04 	ldr.w	pc, [sp], #4
   10ea2:	bf00      	nop
   10ea4:	1fff9440 	.word	0x1fff9440
   10ea8:	1fff943c 	.word	0x1fff943c

00010eac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
   10eac:	b500      	push	{lr}
   10eae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10eb0:	f7ef fef8 	bl	ca4 <Sys_GetCoreID>
   10eb4:	4603      	mov	r3, r0
   10eb6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]--;
   10eb8:	4a0d      	ldr	r2, [pc, #52]	; (10ef0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   10eba:	9b01      	ldr	r3, [sp, #4]
   10ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ec0:	1e5a      	subs	r2, r3, #1
   10ec2:	490b      	ldr	r1, [pc, #44]	; (10ef0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   10ec4:	9b01      	ldr	r3, [sp, #4]
   10ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   10eca:	4a0a      	ldr	r2, [pc, #40]	; (10ef4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x48>)
   10ecc:	9b01      	ldr	r3, [sp, #4]
   10ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ed2:	f003 0301 	and.w	r3, r3, #1
   10ed6:	2b00      	cmp	r3, #0
   10ed8:	d106      	bne.n	10ee8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
   10eda:	4a05      	ldr	r2, [pc, #20]	; (10ef0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   10edc:	9b01      	ldr	r3, [sp, #4]
   10ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ee2:	2b00      	cmp	r3, #0
   10ee4:	d100      	bne.n	10ee8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10ee6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10ee8:	bf00      	nop
   10eea:	b003      	add	sp, #12
   10eec:	f85d fb04 	ldr.w	pc, [sp], #4
   10ef0:	1fff9440 	.word	0x1fff9440
   10ef4:	1fff943c 	.word	0x1fff943c

00010ef8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
   10ef8:	b500      	push	{lr}
   10efa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10efc:	f7ef fed2 	bl	ca4 <Sys_GetCoreID>
   10f00:	4603      	mov	r3, r0
   10f02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId])
   10f04:	4a10      	ldr	r2, [pc, #64]	; (10f48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   10f06:	9b01      	ldr	r3, [sp, #4]
   10f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f0c:	2b00      	cmp	r3, #0
   10f0e:	d10d      	bne.n	10f2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10f10:	f7ef fd30 	bl	974 <Adc_schm_read_msr>
   10f14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10f16:	9b00      	ldr	r3, [sp, #0]
   10f18:	f003 0301 	and.w	r3, r3, #1
   10f1c:	2b00      	cmp	r3, #0
   10f1e:	d100      	bne.n	10f22 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10f20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   10f22:	490a      	ldr	r1, [pc, #40]	; (10f4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x54>)
   10f24:	9b01      	ldr	r3, [sp, #4]
   10f26:	9a00      	ldr	r2, [sp, #0]
   10f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]++;
   10f2c:	4a06      	ldr	r2, [pc, #24]	; (10f48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   10f2e:	9b01      	ldr	r3, [sp, #4]
   10f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f34:	1c5a      	adds	r2, r3, #1
   10f36:	4904      	ldr	r1, [pc, #16]	; (10f48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   10f38:	9b01      	ldr	r3, [sp, #4]
   10f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10f3e:	bf00      	nop
   10f40:	b003      	add	sp, #12
   10f42:	f85d fb04 	ldr.w	pc, [sp], #4
   10f46:	bf00      	nop
   10f48:	1fff9448 	.word	0x1fff9448
   10f4c:	1fff9444 	.word	0x1fff9444

00010f50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
   10f50:	b500      	push	{lr}
   10f52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10f54:	f7ef fea6 	bl	ca4 <Sys_GetCoreID>
   10f58:	4603      	mov	r3, r0
   10f5a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]--;
   10f5c:	4a0d      	ldr	r2, [pc, #52]	; (10f94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   10f5e:	9b01      	ldr	r3, [sp, #4]
   10f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f64:	1e5a      	subs	r2, r3, #1
   10f66:	490b      	ldr	r1, [pc, #44]	; (10f94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   10f68:	9b01      	ldr	r3, [sp, #4]
   10f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   10f6e:	4a0a      	ldr	r2, [pc, #40]	; (10f98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x48>)
   10f70:	9b01      	ldr	r3, [sp, #4]
   10f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f76:	f003 0301 	and.w	r3, r3, #1
   10f7a:	2b00      	cmp	r3, #0
   10f7c:	d106      	bne.n	10f8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
   10f7e:	4a05      	ldr	r2, [pc, #20]	; (10f94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   10f80:	9b01      	ldr	r3, [sp, #4]
   10f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f86:	2b00      	cmp	r3, #0
   10f88:	d100      	bne.n	10f8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10f8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10f8c:	bf00      	nop
   10f8e:	b003      	add	sp, #12
   10f90:	f85d fb04 	ldr.w	pc, [sp], #4
   10f94:	1fff9448 	.word	0x1fff9448
   10f98:	1fff9444 	.word	0x1fff9444

00010f9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
   10f9c:	b500      	push	{lr}
   10f9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10fa0:	f7ef fe80 	bl	ca4 <Sys_GetCoreID>
   10fa4:	4603      	mov	r3, r0
   10fa6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId])
   10fa8:	4a10      	ldr	r2, [pc, #64]	; (10fec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   10faa:	9b01      	ldr	r3, [sp, #4]
   10fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fb0:	2b00      	cmp	r3, #0
   10fb2:	d10d      	bne.n	10fd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10fb4:	f7ef fcde 	bl	974 <Adc_schm_read_msr>
   10fb8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10fba:	9b00      	ldr	r3, [sp, #0]
   10fbc:	f003 0301 	and.w	r3, r3, #1
   10fc0:	2b00      	cmp	r3, #0
   10fc2:	d100      	bne.n	10fc6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10fc4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   10fc6:	490a      	ldr	r1, [pc, #40]	; (10ff0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x54>)
   10fc8:	9b01      	ldr	r3, [sp, #4]
   10fca:	9a00      	ldr	r2, [sp, #0]
   10fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]++;
   10fd0:	4a06      	ldr	r2, [pc, #24]	; (10fec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   10fd2:	9b01      	ldr	r3, [sp, #4]
   10fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fd8:	1c5a      	adds	r2, r3, #1
   10fda:	4904      	ldr	r1, [pc, #16]	; (10fec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   10fdc:	9b01      	ldr	r3, [sp, #4]
   10fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10fe2:	bf00      	nop
   10fe4:	b003      	add	sp, #12
   10fe6:	f85d fb04 	ldr.w	pc, [sp], #4
   10fea:	bf00      	nop
   10fec:	1fff9450 	.word	0x1fff9450
   10ff0:	1fff944c 	.word	0x1fff944c

00010ff4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
   10ff4:	b500      	push	{lr}
   10ff6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ff8:	f7ef fe54 	bl	ca4 <Sys_GetCoreID>
   10ffc:	4603      	mov	r3, r0
   10ffe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]--;
   11000:	4a0d      	ldr	r2, [pc, #52]	; (11038 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   11002:	9b01      	ldr	r3, [sp, #4]
   11004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11008:	1e5a      	subs	r2, r3, #1
   1100a:	490b      	ldr	r1, [pc, #44]	; (11038 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   1100c:	9b01      	ldr	r3, [sp, #4]
   1100e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   11012:	4a0a      	ldr	r2, [pc, #40]	; (1103c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x48>)
   11014:	9b01      	ldr	r3, [sp, #4]
   11016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1101a:	f003 0301 	and.w	r3, r3, #1
   1101e:	2b00      	cmp	r3, #0
   11020:	d106      	bne.n	11030 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
   11022:	4a05      	ldr	r2, [pc, #20]	; (11038 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   11024:	9b01      	ldr	r3, [sp, #4]
   11026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1102a:	2b00      	cmp	r3, #0
   1102c:	d100      	bne.n	11030 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1102e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11030:	bf00      	nop
   11032:	b003      	add	sp, #12
   11034:	f85d fb04 	ldr.w	pc, [sp], #4
   11038:	1fff9450 	.word	0x1fff9450
   1103c:	1fff944c 	.word	0x1fff944c

00011040 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   11040:	b500      	push	{lr}
   11042:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11044:	f7ef fe2e 	bl	ca4 <Sys_GetCoreID>
   11048:	4603      	mov	r3, r0
   1104a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId])
   1104c:	4a10      	ldr	r2, [pc, #64]	; (11090 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   1104e:	9b01      	ldr	r3, [sp, #4]
   11050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11054:	2b00      	cmp	r3, #0
   11056:	d10d      	bne.n	11074 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11058:	f7ef fc8c 	bl	974 <Adc_schm_read_msr>
   1105c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1105e:	9b00      	ldr	r3, [sp, #0]
   11060:	f003 0301 	and.w	r3, r3, #1
   11064:	2b00      	cmp	r3, #0
   11066:	d100      	bne.n	1106a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11068:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_28[u32CoreId] = msr;
   1106a:	490a      	ldr	r1, [pc, #40]	; (11094 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x54>)
   1106c:	9b01      	ldr	r3, [sp, #4]
   1106e:	9a00      	ldr	r2, [sp, #0]
   11070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]++;
   11074:	4a06      	ldr	r2, [pc, #24]	; (11090 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   11076:	9b01      	ldr	r3, [sp, #4]
   11078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1107c:	1c5a      	adds	r2, r3, #1
   1107e:	4904      	ldr	r1, [pc, #16]	; (11090 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   11080:	9b01      	ldr	r3, [sp, #4]
   11082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11086:	bf00      	nop
   11088:	b003      	add	sp, #12
   1108a:	f85d fb04 	ldr.w	pc, [sp], #4
   1108e:	bf00      	nop
   11090:	1fff9458 	.word	0x1fff9458
   11094:	1fff9454 	.word	0x1fff9454

00011098 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   11098:	b500      	push	{lr}
   1109a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1109c:	f7ef fe02 	bl	ca4 <Sys_GetCoreID>
   110a0:	4603      	mov	r3, r0
   110a2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]--;
   110a4:	4a0d      	ldr	r2, [pc, #52]	; (110dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   110a6:	9b01      	ldr	r3, [sp, #4]
   110a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110ac:	1e5a      	subs	r2, r3, #1
   110ae:	490b      	ldr	r1, [pc, #44]	; (110dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   110b0:	9b01      	ldr	r3, [sp, #4]
   110b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
   110b6:	4a0a      	ldr	r2, [pc, #40]	; (110e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x48>)
   110b8:	9b01      	ldr	r3, [sp, #4]
   110ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110be:	f003 0301 	and.w	r3, r3, #1
   110c2:	2b00      	cmp	r3, #0
   110c4:	d106      	bne.n	110d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
   110c6:	4a05      	ldr	r2, [pc, #20]	; (110dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   110c8:	9b01      	ldr	r3, [sp, #4]
   110ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110ce:	2b00      	cmp	r3, #0
   110d0:	d100      	bne.n	110d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   110d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   110d4:	bf00      	nop
   110d6:	b003      	add	sp, #12
   110d8:	f85d fb04 	ldr.w	pc, [sp], #4
   110dc:	1fff9458 	.word	0x1fff9458
   110e0:	1fff9454 	.word	0x1fff9454

000110e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   110e4:	b500      	push	{lr}
   110e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   110e8:	f7ef fddc 	bl	ca4 <Sys_GetCoreID>
   110ec:	4603      	mov	r3, r0
   110ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId])
   110f0:	4a10      	ldr	r2, [pc, #64]	; (11134 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   110f2:	9b01      	ldr	r3, [sp, #4]
   110f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110f8:	2b00      	cmp	r3, #0
   110fa:	d10d      	bne.n	11118 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   110fc:	f7ef fc3a 	bl	974 <Adc_schm_read_msr>
   11100:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11102:	9b00      	ldr	r3, [sp, #0]
   11104:	f003 0301 	and.w	r3, r3, #1
   11108:	2b00      	cmp	r3, #0
   1110a:	d100      	bne.n	1110e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1110c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_29[u32CoreId] = msr;
   1110e:	490a      	ldr	r1, [pc, #40]	; (11138 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x54>)
   11110:	9b01      	ldr	r3, [sp, #4]
   11112:	9a00      	ldr	r2, [sp, #0]
   11114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]++;
   11118:	4a06      	ldr	r2, [pc, #24]	; (11134 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   1111a:	9b01      	ldr	r3, [sp, #4]
   1111c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11120:	1c5a      	adds	r2, r3, #1
   11122:	4904      	ldr	r1, [pc, #16]	; (11134 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   11124:	9b01      	ldr	r3, [sp, #4]
   11126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1112a:	bf00      	nop
   1112c:	b003      	add	sp, #12
   1112e:	f85d fb04 	ldr.w	pc, [sp], #4
   11132:	bf00      	nop
   11134:	1fff9460 	.word	0x1fff9460
   11138:	1fff945c 	.word	0x1fff945c

0001113c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   1113c:	b500      	push	{lr}
   1113e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11140:	f7ef fdb0 	bl	ca4 <Sys_GetCoreID>
   11144:	4603      	mov	r3, r0
   11146:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]--;
   11148:	4a0d      	ldr	r2, [pc, #52]	; (11180 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   1114a:	9b01      	ldr	r3, [sp, #4]
   1114c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11150:	1e5a      	subs	r2, r3, #1
   11152:	490b      	ldr	r1, [pc, #44]	; (11180 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   11154:	9b01      	ldr	r3, [sp, #4]
   11156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
   1115a:	4a0a      	ldr	r2, [pc, #40]	; (11184 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x48>)
   1115c:	9b01      	ldr	r3, [sp, #4]
   1115e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11162:	f003 0301 	and.w	r3, r3, #1
   11166:	2b00      	cmp	r3, #0
   11168:	d106      	bne.n	11178 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
   1116a:	4a05      	ldr	r2, [pc, #20]	; (11180 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   1116c:	9b01      	ldr	r3, [sp, #4]
   1116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11172:	2b00      	cmp	r3, #0
   11174:	d100      	bne.n	11178 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11176:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11178:	bf00      	nop
   1117a:	b003      	add	sp, #12
   1117c:	f85d fb04 	ldr.w	pc, [sp], #4
   11180:	1fff9460 	.word	0x1fff9460
   11184:	1fff945c 	.word	0x1fff945c

00011188 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   11188:	b500      	push	{lr}
   1118a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1118c:	f7ef fd8a 	bl	ca4 <Sys_GetCoreID>
   11190:	4603      	mov	r3, r0
   11192:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId])
   11194:	4a10      	ldr	r2, [pc, #64]	; (111d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   11196:	9b01      	ldr	r3, [sp, #4]
   11198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1119c:	2b00      	cmp	r3, #0
   1119e:	d10d      	bne.n	111bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   111a0:	f7ef fbe8 	bl	974 <Adc_schm_read_msr>
   111a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   111a6:	9b00      	ldr	r3, [sp, #0]
   111a8:	f003 0301 	and.w	r3, r3, #1
   111ac:	2b00      	cmp	r3, #0
   111ae:	d100      	bne.n	111b2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   111b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_30[u32CoreId] = msr;
   111b2:	490a      	ldr	r1, [pc, #40]	; (111dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x54>)
   111b4:	9b01      	ldr	r3, [sp, #4]
   111b6:	9a00      	ldr	r2, [sp, #0]
   111b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]++;
   111bc:	4a06      	ldr	r2, [pc, #24]	; (111d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   111be:	9b01      	ldr	r3, [sp, #4]
   111c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111c4:	1c5a      	adds	r2, r3, #1
   111c6:	4904      	ldr	r1, [pc, #16]	; (111d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   111c8:	9b01      	ldr	r3, [sp, #4]
   111ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   111ce:	bf00      	nop
   111d0:	b003      	add	sp, #12
   111d2:	f85d fb04 	ldr.w	pc, [sp], #4
   111d6:	bf00      	nop
   111d8:	1fff9468 	.word	0x1fff9468
   111dc:	1fff9464 	.word	0x1fff9464

000111e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   111e0:	b500      	push	{lr}
   111e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   111e4:	f7ef fd5e 	bl	ca4 <Sys_GetCoreID>
   111e8:	4603      	mov	r3, r0
   111ea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]--;
   111ec:	4a0d      	ldr	r2, [pc, #52]	; (11224 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   111ee:	9b01      	ldr	r3, [sp, #4]
   111f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111f4:	1e5a      	subs	r2, r3, #1
   111f6:	490b      	ldr	r1, [pc, #44]	; (11224 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   111f8:	9b01      	ldr	r3, [sp, #4]
   111fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
   111fe:	4a0a      	ldr	r2, [pc, #40]	; (11228 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x48>)
   11200:	9b01      	ldr	r3, [sp, #4]
   11202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11206:	f003 0301 	and.w	r3, r3, #1
   1120a:	2b00      	cmp	r3, #0
   1120c:	d106      	bne.n	1121c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
   1120e:	4a05      	ldr	r2, [pc, #20]	; (11224 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   11210:	9b01      	ldr	r3, [sp, #4]
   11212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11216:	2b00      	cmp	r3, #0
   11218:	d100      	bne.n	1121c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1121a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1121c:	bf00      	nop
   1121e:	b003      	add	sp, #12
   11220:	f85d fb04 	ldr.w	pc, [sp], #4
   11224:	1fff9468 	.word	0x1fff9468
   11228:	1fff9464 	.word	0x1fff9464

0001122c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   1122c:	b500      	push	{lr}
   1122e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11230:	f7ef fd38 	bl	ca4 <Sys_GetCoreID>
   11234:	4603      	mov	r3, r0
   11236:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId])
   11238:	4a10      	ldr	r2, [pc, #64]	; (1127c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   1123a:	9b01      	ldr	r3, [sp, #4]
   1123c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11240:	2b00      	cmp	r3, #0
   11242:	d10d      	bne.n	11260 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11244:	f7ef fb96 	bl	974 <Adc_schm_read_msr>
   11248:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1124a:	9b00      	ldr	r3, [sp, #0]
   1124c:	f003 0301 	and.w	r3, r3, #1
   11250:	2b00      	cmp	r3, #0
   11252:	d100      	bne.n	11256 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11254:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_31[u32CoreId] = msr;
   11256:	490a      	ldr	r1, [pc, #40]	; (11280 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x54>)
   11258:	9b01      	ldr	r3, [sp, #4]
   1125a:	9a00      	ldr	r2, [sp, #0]
   1125c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]++;
   11260:	4a06      	ldr	r2, [pc, #24]	; (1127c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   11262:	9b01      	ldr	r3, [sp, #4]
   11264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11268:	1c5a      	adds	r2, r3, #1
   1126a:	4904      	ldr	r1, [pc, #16]	; (1127c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   1126c:	9b01      	ldr	r3, [sp, #4]
   1126e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11272:	bf00      	nop
   11274:	b003      	add	sp, #12
   11276:	f85d fb04 	ldr.w	pc, [sp], #4
   1127a:	bf00      	nop
   1127c:	1fff9470 	.word	0x1fff9470
   11280:	1fff946c 	.word	0x1fff946c

00011284 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   11284:	b500      	push	{lr}
   11286:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11288:	f7ef fd0c 	bl	ca4 <Sys_GetCoreID>
   1128c:	4603      	mov	r3, r0
   1128e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]--;
   11290:	4a0d      	ldr	r2, [pc, #52]	; (112c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   11292:	9b01      	ldr	r3, [sp, #4]
   11294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11298:	1e5a      	subs	r2, r3, #1
   1129a:	490b      	ldr	r1, [pc, #44]	; (112c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   1129c:	9b01      	ldr	r3, [sp, #4]
   1129e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
   112a2:	4a0a      	ldr	r2, [pc, #40]	; (112cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x48>)
   112a4:	9b01      	ldr	r3, [sp, #4]
   112a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112aa:	f003 0301 	and.w	r3, r3, #1
   112ae:	2b00      	cmp	r3, #0
   112b0:	d106      	bne.n	112c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
   112b2:	4a05      	ldr	r2, [pc, #20]	; (112c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   112b4:	9b01      	ldr	r3, [sp, #4]
   112b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112ba:	2b00      	cmp	r3, #0
   112bc:	d100      	bne.n	112c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   112be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   112c0:	bf00      	nop
   112c2:	b003      	add	sp, #12
   112c4:	f85d fb04 	ldr.w	pc, [sp], #4
   112c8:	1fff9470 	.word	0x1fff9470
   112cc:	1fff946c 	.word	0x1fff946c

000112d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   112d0:	b500      	push	{lr}
   112d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   112d4:	f7ef fce6 	bl	ca4 <Sys_GetCoreID>
   112d8:	4603      	mov	r3, r0
   112da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId])
   112dc:	4a10      	ldr	r2, [pc, #64]	; (11320 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   112de:	9b01      	ldr	r3, [sp, #4]
   112e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112e4:	2b00      	cmp	r3, #0
   112e6:	d10d      	bne.n	11304 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   112e8:	f7ef fb44 	bl	974 <Adc_schm_read_msr>
   112ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   112ee:	9b00      	ldr	r3, [sp, #0]
   112f0:	f003 0301 	and.w	r3, r3, #1
   112f4:	2b00      	cmp	r3, #0
   112f6:	d100      	bne.n	112fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   112f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_32[u32CoreId] = msr;
   112fa:	490a      	ldr	r1, [pc, #40]	; (11324 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x54>)
   112fc:	9b01      	ldr	r3, [sp, #4]
   112fe:	9a00      	ldr	r2, [sp, #0]
   11300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]++;
   11304:	4a06      	ldr	r2, [pc, #24]	; (11320 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   11306:	9b01      	ldr	r3, [sp, #4]
   11308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1130c:	1c5a      	adds	r2, r3, #1
   1130e:	4904      	ldr	r1, [pc, #16]	; (11320 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   11310:	9b01      	ldr	r3, [sp, #4]
   11312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11316:	bf00      	nop
   11318:	b003      	add	sp, #12
   1131a:	f85d fb04 	ldr.w	pc, [sp], #4
   1131e:	bf00      	nop
   11320:	1fff9478 	.word	0x1fff9478
   11324:	1fff9474 	.word	0x1fff9474

00011328 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   11328:	b500      	push	{lr}
   1132a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1132c:	f7ef fcba 	bl	ca4 <Sys_GetCoreID>
   11330:	4603      	mov	r3, r0
   11332:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]--;
   11334:	4a0d      	ldr	r2, [pc, #52]	; (1136c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   11336:	9b01      	ldr	r3, [sp, #4]
   11338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1133c:	1e5a      	subs	r2, r3, #1
   1133e:	490b      	ldr	r1, [pc, #44]	; (1136c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   11340:	9b01      	ldr	r3, [sp, #4]
   11342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
   11346:	4a0a      	ldr	r2, [pc, #40]	; (11370 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x48>)
   11348:	9b01      	ldr	r3, [sp, #4]
   1134a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1134e:	f003 0301 	and.w	r3, r3, #1
   11352:	2b00      	cmp	r3, #0
   11354:	d106      	bne.n	11364 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
   11356:	4a05      	ldr	r2, [pc, #20]	; (1136c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   11358:	9b01      	ldr	r3, [sp, #4]
   1135a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1135e:	2b00      	cmp	r3, #0
   11360:	d100      	bne.n	11364 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11362:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11364:	bf00      	nop
   11366:	b003      	add	sp, #12
   11368:	f85d fb04 	ldr.w	pc, [sp], #4
   1136c:	1fff9478 	.word	0x1fff9478
   11370:	1fff9474 	.word	0x1fff9474

00011374 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   11374:	b500      	push	{lr}
   11376:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11378:	f7ef fc94 	bl	ca4 <Sys_GetCoreID>
   1137c:	4603      	mov	r3, r0
   1137e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId])
   11380:	4a10      	ldr	r2, [pc, #64]	; (113c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   11382:	9b01      	ldr	r3, [sp, #4]
   11384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11388:	2b00      	cmp	r3, #0
   1138a:	d10d      	bne.n	113a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1138c:	f7ef faf2 	bl	974 <Adc_schm_read_msr>
   11390:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11392:	9b00      	ldr	r3, [sp, #0]
   11394:	f003 0301 	and.w	r3, r3, #1
   11398:	2b00      	cmp	r3, #0
   1139a:	d100      	bne.n	1139e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1139c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_33[u32CoreId] = msr;
   1139e:	490a      	ldr	r1, [pc, #40]	; (113c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x54>)
   113a0:	9b01      	ldr	r3, [sp, #4]
   113a2:	9a00      	ldr	r2, [sp, #0]
   113a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]++;
   113a8:	4a06      	ldr	r2, [pc, #24]	; (113c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   113aa:	9b01      	ldr	r3, [sp, #4]
   113ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113b0:	1c5a      	adds	r2, r3, #1
   113b2:	4904      	ldr	r1, [pc, #16]	; (113c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   113b4:	9b01      	ldr	r3, [sp, #4]
   113b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   113ba:	bf00      	nop
   113bc:	b003      	add	sp, #12
   113be:	f85d fb04 	ldr.w	pc, [sp], #4
   113c2:	bf00      	nop
   113c4:	1fff9480 	.word	0x1fff9480
   113c8:	1fff947c 	.word	0x1fff947c

000113cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   113cc:	b500      	push	{lr}
   113ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   113d0:	f7ef fc68 	bl	ca4 <Sys_GetCoreID>
   113d4:	4603      	mov	r3, r0
   113d6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]--;
   113d8:	4a0d      	ldr	r2, [pc, #52]	; (11410 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   113da:	9b01      	ldr	r3, [sp, #4]
   113dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113e0:	1e5a      	subs	r2, r3, #1
   113e2:	490b      	ldr	r1, [pc, #44]	; (11410 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   113e4:	9b01      	ldr	r3, [sp, #4]
   113e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
   113ea:	4a0a      	ldr	r2, [pc, #40]	; (11414 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x48>)
   113ec:	9b01      	ldr	r3, [sp, #4]
   113ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113f2:	f003 0301 	and.w	r3, r3, #1
   113f6:	2b00      	cmp	r3, #0
   113f8:	d106      	bne.n	11408 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
   113fa:	4a05      	ldr	r2, [pc, #20]	; (11410 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   113fc:	9b01      	ldr	r3, [sp, #4]
   113fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11402:	2b00      	cmp	r3, #0
   11404:	d100      	bne.n	11408 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11406:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11408:	bf00      	nop
   1140a:	b003      	add	sp, #12
   1140c:	f85d fb04 	ldr.w	pc, [sp], #4
   11410:	1fff9480 	.word	0x1fff9480
   11414:	1fff947c 	.word	0x1fff947c

00011418 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   11418:	b500      	push	{lr}
   1141a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1141c:	f7ef fc42 	bl	ca4 <Sys_GetCoreID>
   11420:	4603      	mov	r3, r0
   11422:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId])
   11424:	4a10      	ldr	r2, [pc, #64]	; (11468 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   11426:	9b01      	ldr	r3, [sp, #4]
   11428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1142c:	2b00      	cmp	r3, #0
   1142e:	d10d      	bne.n	1144c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11430:	f7ef faa0 	bl	974 <Adc_schm_read_msr>
   11434:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11436:	9b00      	ldr	r3, [sp, #0]
   11438:	f003 0301 	and.w	r3, r3, #1
   1143c:	2b00      	cmp	r3, #0
   1143e:	d100      	bne.n	11442 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11440:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_34[u32CoreId] = msr;
   11442:	490a      	ldr	r1, [pc, #40]	; (1146c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x54>)
   11444:	9b01      	ldr	r3, [sp, #4]
   11446:	9a00      	ldr	r2, [sp, #0]
   11448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]++;
   1144c:	4a06      	ldr	r2, [pc, #24]	; (11468 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   1144e:	9b01      	ldr	r3, [sp, #4]
   11450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11454:	1c5a      	adds	r2, r3, #1
   11456:	4904      	ldr	r1, [pc, #16]	; (11468 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   11458:	9b01      	ldr	r3, [sp, #4]
   1145a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1145e:	bf00      	nop
   11460:	b003      	add	sp, #12
   11462:	f85d fb04 	ldr.w	pc, [sp], #4
   11466:	bf00      	nop
   11468:	1fff9488 	.word	0x1fff9488
   1146c:	1fff9484 	.word	0x1fff9484

00011470 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   11470:	b500      	push	{lr}
   11472:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11474:	f7ef fc16 	bl	ca4 <Sys_GetCoreID>
   11478:	4603      	mov	r3, r0
   1147a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]--;
   1147c:	4a0d      	ldr	r2, [pc, #52]	; (114b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   1147e:	9b01      	ldr	r3, [sp, #4]
   11480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11484:	1e5a      	subs	r2, r3, #1
   11486:	490b      	ldr	r1, [pc, #44]	; (114b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   11488:	9b01      	ldr	r3, [sp, #4]
   1148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
   1148e:	4a0a      	ldr	r2, [pc, #40]	; (114b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x48>)
   11490:	9b01      	ldr	r3, [sp, #4]
   11492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11496:	f003 0301 	and.w	r3, r3, #1
   1149a:	2b00      	cmp	r3, #0
   1149c:	d106      	bne.n	114ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
   1149e:	4a05      	ldr	r2, [pc, #20]	; (114b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   114a0:	9b01      	ldr	r3, [sp, #4]
   114a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114a6:	2b00      	cmp	r3, #0
   114a8:	d100      	bne.n	114ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   114aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   114ac:	bf00      	nop
   114ae:	b003      	add	sp, #12
   114b0:	f85d fb04 	ldr.w	pc, [sp], #4
   114b4:	1fff9488 	.word	0x1fff9488
   114b8:	1fff9484 	.word	0x1fff9484

000114bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   114bc:	b500      	push	{lr}
   114be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   114c0:	f7ef fbf0 	bl	ca4 <Sys_GetCoreID>
   114c4:	4603      	mov	r3, r0
   114c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId])
   114c8:	4a10      	ldr	r2, [pc, #64]	; (1150c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   114ca:	9b01      	ldr	r3, [sp, #4]
   114cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114d0:	2b00      	cmp	r3, #0
   114d2:	d10d      	bne.n	114f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   114d4:	f7ef fa4e 	bl	974 <Adc_schm_read_msr>
   114d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   114da:	9b00      	ldr	r3, [sp, #0]
   114dc:	f003 0301 	and.w	r3, r3, #1
   114e0:	2b00      	cmp	r3, #0
   114e2:	d100      	bne.n	114e6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   114e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_35[u32CoreId] = msr;
   114e6:	490a      	ldr	r1, [pc, #40]	; (11510 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x54>)
   114e8:	9b01      	ldr	r3, [sp, #4]
   114ea:	9a00      	ldr	r2, [sp, #0]
   114ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]++;
   114f0:	4a06      	ldr	r2, [pc, #24]	; (1150c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   114f2:	9b01      	ldr	r3, [sp, #4]
   114f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114f8:	1c5a      	adds	r2, r3, #1
   114fa:	4904      	ldr	r1, [pc, #16]	; (1150c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   114fc:	9b01      	ldr	r3, [sp, #4]
   114fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11502:	bf00      	nop
   11504:	b003      	add	sp, #12
   11506:	f85d fb04 	ldr.w	pc, [sp], #4
   1150a:	bf00      	nop
   1150c:	1fff9490 	.word	0x1fff9490
   11510:	1fff948c 	.word	0x1fff948c

00011514 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   11514:	b500      	push	{lr}
   11516:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11518:	f7ef fbc4 	bl	ca4 <Sys_GetCoreID>
   1151c:	4603      	mov	r3, r0
   1151e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]--;
   11520:	4a0d      	ldr	r2, [pc, #52]	; (11558 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   11522:	9b01      	ldr	r3, [sp, #4]
   11524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11528:	1e5a      	subs	r2, r3, #1
   1152a:	490b      	ldr	r1, [pc, #44]	; (11558 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   1152c:	9b01      	ldr	r3, [sp, #4]
   1152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
   11532:	4a0a      	ldr	r2, [pc, #40]	; (1155c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x48>)
   11534:	9b01      	ldr	r3, [sp, #4]
   11536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1153a:	f003 0301 	and.w	r3, r3, #1
   1153e:	2b00      	cmp	r3, #0
   11540:	d106      	bne.n	11550 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
   11542:	4a05      	ldr	r2, [pc, #20]	; (11558 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   11544:	9b01      	ldr	r3, [sp, #4]
   11546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1154a:	2b00      	cmp	r3, #0
   1154c:	d100      	bne.n	11550 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1154e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11550:	bf00      	nop
   11552:	b003      	add	sp, #12
   11554:	f85d fb04 	ldr.w	pc, [sp], #4
   11558:	1fff9490 	.word	0x1fff9490
   1155c:	1fff948c 	.word	0x1fff948c

00011560 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   11560:	b500      	push	{lr}
   11562:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11564:	f7ef fb9e 	bl	ca4 <Sys_GetCoreID>
   11568:	4603      	mov	r3, r0
   1156a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId])
   1156c:	4a10      	ldr	r2, [pc, #64]	; (115b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   1156e:	9b01      	ldr	r3, [sp, #4]
   11570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11574:	2b00      	cmp	r3, #0
   11576:	d10d      	bne.n	11594 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11578:	f7ef f9fc 	bl	974 <Adc_schm_read_msr>
   1157c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1157e:	9b00      	ldr	r3, [sp, #0]
   11580:	f003 0301 	and.w	r3, r3, #1
   11584:	2b00      	cmp	r3, #0
   11586:	d100      	bne.n	1158a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11588:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_36[u32CoreId] = msr;
   1158a:	490a      	ldr	r1, [pc, #40]	; (115b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x54>)
   1158c:	9b01      	ldr	r3, [sp, #4]
   1158e:	9a00      	ldr	r2, [sp, #0]
   11590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]++;
   11594:	4a06      	ldr	r2, [pc, #24]	; (115b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   11596:	9b01      	ldr	r3, [sp, #4]
   11598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1159c:	1c5a      	adds	r2, r3, #1
   1159e:	4904      	ldr	r1, [pc, #16]	; (115b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   115a0:	9b01      	ldr	r3, [sp, #4]
   115a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   115a6:	bf00      	nop
   115a8:	b003      	add	sp, #12
   115aa:	f85d fb04 	ldr.w	pc, [sp], #4
   115ae:	bf00      	nop
   115b0:	1fff9498 	.word	0x1fff9498
   115b4:	1fff9494 	.word	0x1fff9494

000115b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   115b8:	b500      	push	{lr}
   115ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   115bc:	f7ef fb72 	bl	ca4 <Sys_GetCoreID>
   115c0:	4603      	mov	r3, r0
   115c2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]--;
   115c4:	4a0d      	ldr	r2, [pc, #52]	; (115fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   115c6:	9b01      	ldr	r3, [sp, #4]
   115c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115cc:	1e5a      	subs	r2, r3, #1
   115ce:	490b      	ldr	r1, [pc, #44]	; (115fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   115d0:	9b01      	ldr	r3, [sp, #4]
   115d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
   115d6:	4a0a      	ldr	r2, [pc, #40]	; (11600 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x48>)
   115d8:	9b01      	ldr	r3, [sp, #4]
   115da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115de:	f003 0301 	and.w	r3, r3, #1
   115e2:	2b00      	cmp	r3, #0
   115e4:	d106      	bne.n	115f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
   115e6:	4a05      	ldr	r2, [pc, #20]	; (115fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   115e8:	9b01      	ldr	r3, [sp, #4]
   115ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115ee:	2b00      	cmp	r3, #0
   115f0:	d100      	bne.n	115f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   115f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   115f4:	bf00      	nop
   115f6:	b003      	add	sp, #12
   115f8:	f85d fb04 	ldr.w	pc, [sp], #4
   115fc:	1fff9498 	.word	0x1fff9498
   11600:	1fff9494 	.word	0x1fff9494

00011604 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   11604:	b500      	push	{lr}
   11606:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11608:	f7ef fb4c 	bl	ca4 <Sys_GetCoreID>
   1160c:	4603      	mov	r3, r0
   1160e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId])
   11610:	4a10      	ldr	r2, [pc, #64]	; (11654 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   11612:	9b01      	ldr	r3, [sp, #4]
   11614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11618:	2b00      	cmp	r3, #0
   1161a:	d10d      	bne.n	11638 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1161c:	f7ef f9aa 	bl	974 <Adc_schm_read_msr>
   11620:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11622:	9b00      	ldr	r3, [sp, #0]
   11624:	f003 0301 	and.w	r3, r3, #1
   11628:	2b00      	cmp	r3, #0
   1162a:	d100      	bne.n	1162e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1162c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_37[u32CoreId] = msr;
   1162e:	490a      	ldr	r1, [pc, #40]	; (11658 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x54>)
   11630:	9b01      	ldr	r3, [sp, #4]
   11632:	9a00      	ldr	r2, [sp, #0]
   11634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]++;
   11638:	4a06      	ldr	r2, [pc, #24]	; (11654 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   1163a:	9b01      	ldr	r3, [sp, #4]
   1163c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11640:	1c5a      	adds	r2, r3, #1
   11642:	4904      	ldr	r1, [pc, #16]	; (11654 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   11644:	9b01      	ldr	r3, [sp, #4]
   11646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1164a:	bf00      	nop
   1164c:	b003      	add	sp, #12
   1164e:	f85d fb04 	ldr.w	pc, [sp], #4
   11652:	bf00      	nop
   11654:	1fff94a0 	.word	0x1fff94a0
   11658:	1fff949c 	.word	0x1fff949c

0001165c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   1165c:	b500      	push	{lr}
   1165e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11660:	f7ef fb20 	bl	ca4 <Sys_GetCoreID>
   11664:	4603      	mov	r3, r0
   11666:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]--;
   11668:	4a0d      	ldr	r2, [pc, #52]	; (116a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   1166a:	9b01      	ldr	r3, [sp, #4]
   1166c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11670:	1e5a      	subs	r2, r3, #1
   11672:	490b      	ldr	r1, [pc, #44]	; (116a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   11674:	9b01      	ldr	r3, [sp, #4]
   11676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_37[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]))         /*if interrupts were enabled*/
   1167a:	4a0a      	ldr	r2, [pc, #40]	; (116a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x48>)
   1167c:	9b01      	ldr	r3, [sp, #4]
   1167e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11682:	f003 0301 	and.w	r3, r3, #1
   11686:	2b00      	cmp	r3, #0
   11688:	d106      	bne.n	11698 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
   1168a:	4a05      	ldr	r2, [pc, #20]	; (116a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   1168c:	9b01      	ldr	r3, [sp, #4]
   1168e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11692:	2b00      	cmp	r3, #0
   11694:	d100      	bne.n	11698 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11696:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11698:	bf00      	nop
   1169a:	b003      	add	sp, #12
   1169c:	f85d fb04 	ldr.w	pc, [sp], #4
   116a0:	1fff94a0 	.word	0x1fff94a0
   116a4:	1fff949c 	.word	0x1fff949c

000116a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   116a8:	b500      	push	{lr}
   116aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   116ac:	f7ef fafa 	bl	ca4 <Sys_GetCoreID>
   116b0:	4603      	mov	r3, r0
   116b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId])
   116b4:	4a10      	ldr	r2, [pc, #64]	; (116f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   116b6:	9b01      	ldr	r3, [sp, #4]
   116b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116bc:	2b00      	cmp	r3, #0
   116be:	d10d      	bne.n	116dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   116c0:	f7ef f958 	bl	974 <Adc_schm_read_msr>
   116c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   116c6:	9b00      	ldr	r3, [sp, #0]
   116c8:	f003 0301 	and.w	r3, r3, #1
   116cc:	2b00      	cmp	r3, #0
   116ce:	d100      	bne.n	116d2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   116d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_38[u32CoreId] = msr;
   116d2:	490a      	ldr	r1, [pc, #40]	; (116fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x54>)
   116d4:	9b01      	ldr	r3, [sp, #4]
   116d6:	9a00      	ldr	r2, [sp, #0]
   116d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]++;
   116dc:	4a06      	ldr	r2, [pc, #24]	; (116f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   116de:	9b01      	ldr	r3, [sp, #4]
   116e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116e4:	1c5a      	adds	r2, r3, #1
   116e6:	4904      	ldr	r1, [pc, #16]	; (116f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   116e8:	9b01      	ldr	r3, [sp, #4]
   116ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   116ee:	bf00      	nop
   116f0:	b003      	add	sp, #12
   116f2:	f85d fb04 	ldr.w	pc, [sp], #4
   116f6:	bf00      	nop
   116f8:	1fff94a8 	.word	0x1fff94a8
   116fc:	1fff94a4 	.word	0x1fff94a4

00011700 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   11700:	b500      	push	{lr}
   11702:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11704:	f7ef face 	bl	ca4 <Sys_GetCoreID>
   11708:	4603      	mov	r3, r0
   1170a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]--;
   1170c:	4a0d      	ldr	r2, [pc, #52]	; (11744 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   1170e:	9b01      	ldr	r3, [sp, #4]
   11710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11714:	1e5a      	subs	r2, r3, #1
   11716:	490b      	ldr	r1, [pc, #44]	; (11744 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   11718:	9b01      	ldr	r3, [sp, #4]
   1171a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
   1171e:	4a0a      	ldr	r2, [pc, #40]	; (11748 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x48>)
   11720:	9b01      	ldr	r3, [sp, #4]
   11722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11726:	f003 0301 	and.w	r3, r3, #1
   1172a:	2b00      	cmp	r3, #0
   1172c:	d106      	bne.n	1173c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
   1172e:	4a05      	ldr	r2, [pc, #20]	; (11744 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   11730:	9b01      	ldr	r3, [sp, #4]
   11732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11736:	2b00      	cmp	r3, #0
   11738:	d100      	bne.n	1173c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1173a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1173c:	bf00      	nop
   1173e:	b003      	add	sp, #12
   11740:	f85d fb04 	ldr.w	pc, [sp], #4
   11744:	1fff94a8 	.word	0x1fff94a8
   11748:	1fff94a4 	.word	0x1fff94a4

0001174c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   1174c:	b500      	push	{lr}
   1174e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11750:	f7ef faa8 	bl	ca4 <Sys_GetCoreID>
   11754:	4603      	mov	r3, r0
   11756:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId])
   11758:	4a10      	ldr	r2, [pc, #64]	; (1179c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   1175a:	9b01      	ldr	r3, [sp, #4]
   1175c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11760:	2b00      	cmp	r3, #0
   11762:	d10d      	bne.n	11780 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11764:	f7ef f906 	bl	974 <Adc_schm_read_msr>
   11768:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1176a:	9b00      	ldr	r3, [sp, #0]
   1176c:	f003 0301 	and.w	r3, r3, #1
   11770:	2b00      	cmp	r3, #0
   11772:	d100      	bne.n	11776 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11774:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_39[u32CoreId] = msr;
   11776:	490a      	ldr	r1, [pc, #40]	; (117a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x54>)
   11778:	9b01      	ldr	r3, [sp, #4]
   1177a:	9a00      	ldr	r2, [sp, #0]
   1177c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]++;
   11780:	4a06      	ldr	r2, [pc, #24]	; (1179c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   11782:	9b01      	ldr	r3, [sp, #4]
   11784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11788:	1c5a      	adds	r2, r3, #1
   1178a:	4904      	ldr	r1, [pc, #16]	; (1179c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   1178c:	9b01      	ldr	r3, [sp, #4]
   1178e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11792:	bf00      	nop
   11794:	b003      	add	sp, #12
   11796:	f85d fb04 	ldr.w	pc, [sp], #4
   1179a:	bf00      	nop
   1179c:	1fff94b0 	.word	0x1fff94b0
   117a0:	1fff94ac 	.word	0x1fff94ac

000117a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   117a4:	b500      	push	{lr}
   117a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   117a8:	f7ef fa7c 	bl	ca4 <Sys_GetCoreID>
   117ac:	4603      	mov	r3, r0
   117ae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]--;
   117b0:	4a0d      	ldr	r2, [pc, #52]	; (117e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   117b2:	9b01      	ldr	r3, [sp, #4]
   117b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117b8:	1e5a      	subs	r2, r3, #1
   117ba:	490b      	ldr	r1, [pc, #44]	; (117e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   117bc:	9b01      	ldr	r3, [sp, #4]
   117be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
   117c2:	4a0a      	ldr	r2, [pc, #40]	; (117ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x48>)
   117c4:	9b01      	ldr	r3, [sp, #4]
   117c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117ca:	f003 0301 	and.w	r3, r3, #1
   117ce:	2b00      	cmp	r3, #0
   117d0:	d106      	bne.n	117e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
   117d2:	4a05      	ldr	r2, [pc, #20]	; (117e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   117d4:	9b01      	ldr	r3, [sp, #4]
   117d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117da:	2b00      	cmp	r3, #0
   117dc:	d100      	bne.n	117e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   117de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   117e0:	bf00      	nop
   117e2:	b003      	add	sp, #12
   117e4:	f85d fb04 	ldr.w	pc, [sp], #4
   117e8:	1fff94b0 	.word	0x1fff94b0
   117ec:	1fff94ac 	.word	0x1fff94ac

000117f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   117f0:	b500      	push	{lr}
   117f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   117f4:	f7ef fa56 	bl	ca4 <Sys_GetCoreID>
   117f8:	4603      	mov	r3, r0
   117fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId])
   117fc:	4a10      	ldr	r2, [pc, #64]	; (11840 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   117fe:	9b01      	ldr	r3, [sp, #4]
   11800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11804:	2b00      	cmp	r3, #0
   11806:	d10d      	bne.n	11824 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11808:	f7ef f8b4 	bl	974 <Adc_schm_read_msr>
   1180c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1180e:	9b00      	ldr	r3, [sp, #0]
   11810:	f003 0301 	and.w	r3, r3, #1
   11814:	2b00      	cmp	r3, #0
   11816:	d100      	bne.n	1181a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11818:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_40[u32CoreId] = msr;
   1181a:	490a      	ldr	r1, [pc, #40]	; (11844 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x54>)
   1181c:	9b01      	ldr	r3, [sp, #4]
   1181e:	9a00      	ldr	r2, [sp, #0]
   11820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]++;
   11824:	4a06      	ldr	r2, [pc, #24]	; (11840 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   11826:	9b01      	ldr	r3, [sp, #4]
   11828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1182c:	1c5a      	adds	r2, r3, #1
   1182e:	4904      	ldr	r1, [pc, #16]	; (11840 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   11830:	9b01      	ldr	r3, [sp, #4]
   11832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11836:	bf00      	nop
   11838:	b003      	add	sp, #12
   1183a:	f85d fb04 	ldr.w	pc, [sp], #4
   1183e:	bf00      	nop
   11840:	1fff94b8 	.word	0x1fff94b8
   11844:	1fff94b4 	.word	0x1fff94b4

00011848 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   11848:	b500      	push	{lr}
   1184a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1184c:	f7ef fa2a 	bl	ca4 <Sys_GetCoreID>
   11850:	4603      	mov	r3, r0
   11852:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]--;
   11854:	4a0d      	ldr	r2, [pc, #52]	; (1188c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   11856:	9b01      	ldr	r3, [sp, #4]
   11858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1185c:	1e5a      	subs	r2, r3, #1
   1185e:	490b      	ldr	r1, [pc, #44]	; (1188c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   11860:	9b01      	ldr	r3, [sp, #4]
   11862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
   11866:	4a0a      	ldr	r2, [pc, #40]	; (11890 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x48>)
   11868:	9b01      	ldr	r3, [sp, #4]
   1186a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1186e:	f003 0301 	and.w	r3, r3, #1
   11872:	2b00      	cmp	r3, #0
   11874:	d106      	bne.n	11884 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
   11876:	4a05      	ldr	r2, [pc, #20]	; (1188c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   11878:	9b01      	ldr	r3, [sp, #4]
   1187a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1187e:	2b00      	cmp	r3, #0
   11880:	d100      	bne.n	11884 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11882:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11884:	bf00      	nop
   11886:	b003      	add	sp, #12
   11888:	f85d fb04 	ldr.w	pc, [sp], #4
   1188c:	1fff94b8 	.word	0x1fff94b8
   11890:	1fff94b4 	.word	0x1fff94b4

00011894 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   11894:	b500      	push	{lr}
   11896:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11898:	f7ef fa04 	bl	ca4 <Sys_GetCoreID>
   1189c:	4603      	mov	r3, r0
   1189e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId])
   118a0:	4a10      	ldr	r2, [pc, #64]	; (118e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   118a2:	9b01      	ldr	r3, [sp, #4]
   118a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118a8:	2b00      	cmp	r3, #0
   118aa:	d10d      	bne.n	118c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   118ac:	f7ef f862 	bl	974 <Adc_schm_read_msr>
   118b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   118b2:	9b00      	ldr	r3, [sp, #0]
   118b4:	f003 0301 	and.w	r3, r3, #1
   118b8:	2b00      	cmp	r3, #0
   118ba:	d100      	bne.n	118be <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   118bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_41[u32CoreId] = msr;
   118be:	490a      	ldr	r1, [pc, #40]	; (118e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x54>)
   118c0:	9b01      	ldr	r3, [sp, #4]
   118c2:	9a00      	ldr	r2, [sp, #0]
   118c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]++;
   118c8:	4a06      	ldr	r2, [pc, #24]	; (118e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   118ca:	9b01      	ldr	r3, [sp, #4]
   118cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118d0:	1c5a      	adds	r2, r3, #1
   118d2:	4904      	ldr	r1, [pc, #16]	; (118e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   118d4:	9b01      	ldr	r3, [sp, #4]
   118d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   118da:	bf00      	nop
   118dc:	b003      	add	sp, #12
   118de:	f85d fb04 	ldr.w	pc, [sp], #4
   118e2:	bf00      	nop
   118e4:	1fff94c0 	.word	0x1fff94c0
   118e8:	1fff94bc 	.word	0x1fff94bc

000118ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   118ec:	b500      	push	{lr}
   118ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   118f0:	f7ef f9d8 	bl	ca4 <Sys_GetCoreID>
   118f4:	4603      	mov	r3, r0
   118f6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]--;
   118f8:	4a0d      	ldr	r2, [pc, #52]	; (11930 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   118fa:	9b01      	ldr	r3, [sp, #4]
   118fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11900:	1e5a      	subs	r2, r3, #1
   11902:	490b      	ldr	r1, [pc, #44]	; (11930 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   11904:	9b01      	ldr	r3, [sp, #4]
   11906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
   1190a:	4a0a      	ldr	r2, [pc, #40]	; (11934 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x48>)
   1190c:	9b01      	ldr	r3, [sp, #4]
   1190e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11912:	f003 0301 	and.w	r3, r3, #1
   11916:	2b00      	cmp	r3, #0
   11918:	d106      	bne.n	11928 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
   1191a:	4a05      	ldr	r2, [pc, #20]	; (11930 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   1191c:	9b01      	ldr	r3, [sp, #4]
   1191e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11922:	2b00      	cmp	r3, #0
   11924:	d100      	bne.n	11928 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11926:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11928:	bf00      	nop
   1192a:	b003      	add	sp, #12
   1192c:	f85d fb04 	ldr.w	pc, [sp], #4
   11930:	1fff94c0 	.word	0x1fff94c0
   11934:	1fff94bc 	.word	0x1fff94bc

00011938 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   11938:	b500      	push	{lr}
   1193a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1193c:	f7ef f9b2 	bl	ca4 <Sys_GetCoreID>
   11940:	4603      	mov	r3, r0
   11942:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId])
   11944:	4a10      	ldr	r2, [pc, #64]	; (11988 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   11946:	9b01      	ldr	r3, [sp, #4]
   11948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1194c:	2b00      	cmp	r3, #0
   1194e:	d10d      	bne.n	1196c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11950:	f7ef f810 	bl	974 <Adc_schm_read_msr>
   11954:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11956:	9b00      	ldr	r3, [sp, #0]
   11958:	f003 0301 	and.w	r3, r3, #1
   1195c:	2b00      	cmp	r3, #0
   1195e:	d100      	bne.n	11962 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11960:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_42[u32CoreId] = msr;
   11962:	490a      	ldr	r1, [pc, #40]	; (1198c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x54>)
   11964:	9b01      	ldr	r3, [sp, #4]
   11966:	9a00      	ldr	r2, [sp, #0]
   11968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]++;
   1196c:	4a06      	ldr	r2, [pc, #24]	; (11988 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   1196e:	9b01      	ldr	r3, [sp, #4]
   11970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11974:	1c5a      	adds	r2, r3, #1
   11976:	4904      	ldr	r1, [pc, #16]	; (11988 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   11978:	9b01      	ldr	r3, [sp, #4]
   1197a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1197e:	bf00      	nop
   11980:	b003      	add	sp, #12
   11982:	f85d fb04 	ldr.w	pc, [sp], #4
   11986:	bf00      	nop
   11988:	1fff94c8 	.word	0x1fff94c8
   1198c:	1fff94c4 	.word	0x1fff94c4

00011990 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   11990:	b500      	push	{lr}
   11992:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11994:	f7ef f986 	bl	ca4 <Sys_GetCoreID>
   11998:	4603      	mov	r3, r0
   1199a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]--;
   1199c:	4a0d      	ldr	r2, [pc, #52]	; (119d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   1199e:	9b01      	ldr	r3, [sp, #4]
   119a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119a4:	1e5a      	subs	r2, r3, #1
   119a6:	490b      	ldr	r1, [pc, #44]	; (119d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   119a8:	9b01      	ldr	r3, [sp, #4]
   119aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
   119ae:	4a0a      	ldr	r2, [pc, #40]	; (119d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x48>)
   119b0:	9b01      	ldr	r3, [sp, #4]
   119b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119b6:	f003 0301 	and.w	r3, r3, #1
   119ba:	2b00      	cmp	r3, #0
   119bc:	d106      	bne.n	119cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
   119be:	4a05      	ldr	r2, [pc, #20]	; (119d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   119c0:	9b01      	ldr	r3, [sp, #4]
   119c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119c6:	2b00      	cmp	r3, #0
   119c8:	d100      	bne.n	119cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   119ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   119cc:	bf00      	nop
   119ce:	b003      	add	sp, #12
   119d0:	f85d fb04 	ldr.w	pc, [sp], #4
   119d4:	1fff94c8 	.word	0x1fff94c8
   119d8:	1fff94c4 	.word	0x1fff94c4

000119dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   119dc:	b500      	push	{lr}
   119de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   119e0:	f7ef f960 	bl	ca4 <Sys_GetCoreID>
   119e4:	4603      	mov	r3, r0
   119e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId])
   119e8:	4a10      	ldr	r2, [pc, #64]	; (11a2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   119ea:	9b01      	ldr	r3, [sp, #4]
   119ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119f0:	2b00      	cmp	r3, #0
   119f2:	d10d      	bne.n	11a10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   119f4:	f7ee ffbe 	bl	974 <Adc_schm_read_msr>
   119f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   119fa:	9b00      	ldr	r3, [sp, #0]
   119fc:	f003 0301 	and.w	r3, r3, #1
   11a00:	2b00      	cmp	r3, #0
   11a02:	d100      	bne.n	11a06 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11a04:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_43[u32CoreId] = msr;
   11a06:	490a      	ldr	r1, [pc, #40]	; (11a30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x54>)
   11a08:	9b01      	ldr	r3, [sp, #4]
   11a0a:	9a00      	ldr	r2, [sp, #0]
   11a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]++;
   11a10:	4a06      	ldr	r2, [pc, #24]	; (11a2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   11a12:	9b01      	ldr	r3, [sp, #4]
   11a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a18:	1c5a      	adds	r2, r3, #1
   11a1a:	4904      	ldr	r1, [pc, #16]	; (11a2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   11a1c:	9b01      	ldr	r3, [sp, #4]
   11a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11a22:	bf00      	nop
   11a24:	b003      	add	sp, #12
   11a26:	f85d fb04 	ldr.w	pc, [sp], #4
   11a2a:	bf00      	nop
   11a2c:	1fff94d0 	.word	0x1fff94d0
   11a30:	1fff94cc 	.word	0x1fff94cc

00011a34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   11a34:	b500      	push	{lr}
   11a36:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a38:	f7ef f934 	bl	ca4 <Sys_GetCoreID>
   11a3c:	4603      	mov	r3, r0
   11a3e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]--;
   11a40:	4a0d      	ldr	r2, [pc, #52]	; (11a78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   11a42:	9b01      	ldr	r3, [sp, #4]
   11a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a48:	1e5a      	subs	r2, r3, #1
   11a4a:	490b      	ldr	r1, [pc, #44]	; (11a78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   11a4c:	9b01      	ldr	r3, [sp, #4]
   11a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
   11a52:	4a0a      	ldr	r2, [pc, #40]	; (11a7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x48>)
   11a54:	9b01      	ldr	r3, [sp, #4]
   11a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a5a:	f003 0301 	and.w	r3, r3, #1
   11a5e:	2b00      	cmp	r3, #0
   11a60:	d106      	bne.n	11a70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
   11a62:	4a05      	ldr	r2, [pc, #20]	; (11a78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   11a64:	9b01      	ldr	r3, [sp, #4]
   11a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a6a:	2b00      	cmp	r3, #0
   11a6c:	d100      	bne.n	11a70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11a6e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11a70:	bf00      	nop
   11a72:	b003      	add	sp, #12
   11a74:	f85d fb04 	ldr.w	pc, [sp], #4
   11a78:	1fff94d0 	.word	0x1fff94d0
   11a7c:	1fff94cc 	.word	0x1fff94cc

00011a80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   11a80:	b500      	push	{lr}
   11a82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a84:	f7ef f90e 	bl	ca4 <Sys_GetCoreID>
   11a88:	4603      	mov	r3, r0
   11a8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId])
   11a8c:	4a10      	ldr	r2, [pc, #64]	; (11ad0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   11a8e:	9b01      	ldr	r3, [sp, #4]
   11a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a94:	2b00      	cmp	r3, #0
   11a96:	d10d      	bne.n	11ab4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11a98:	f7ee ff6c 	bl	974 <Adc_schm_read_msr>
   11a9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11a9e:	9b00      	ldr	r3, [sp, #0]
   11aa0:	f003 0301 	and.w	r3, r3, #1
   11aa4:	2b00      	cmp	r3, #0
   11aa6:	d100      	bne.n	11aaa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11aa8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_44[u32CoreId] = msr;
   11aaa:	490a      	ldr	r1, [pc, #40]	; (11ad4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x54>)
   11aac:	9b01      	ldr	r3, [sp, #4]
   11aae:	9a00      	ldr	r2, [sp, #0]
   11ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]++;
   11ab4:	4a06      	ldr	r2, [pc, #24]	; (11ad0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   11ab6:	9b01      	ldr	r3, [sp, #4]
   11ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11abc:	1c5a      	adds	r2, r3, #1
   11abe:	4904      	ldr	r1, [pc, #16]	; (11ad0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   11ac0:	9b01      	ldr	r3, [sp, #4]
   11ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11ac6:	bf00      	nop
   11ac8:	b003      	add	sp, #12
   11aca:	f85d fb04 	ldr.w	pc, [sp], #4
   11ace:	bf00      	nop
   11ad0:	1fff94d8 	.word	0x1fff94d8
   11ad4:	1fff94d4 	.word	0x1fff94d4

00011ad8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   11ad8:	b500      	push	{lr}
   11ada:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11adc:	f7ef f8e2 	bl	ca4 <Sys_GetCoreID>
   11ae0:	4603      	mov	r3, r0
   11ae2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]--;
   11ae4:	4a0d      	ldr	r2, [pc, #52]	; (11b1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   11ae6:	9b01      	ldr	r3, [sp, #4]
   11ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11aec:	1e5a      	subs	r2, r3, #1
   11aee:	490b      	ldr	r1, [pc, #44]	; (11b1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   11af0:	9b01      	ldr	r3, [sp, #4]
   11af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
   11af6:	4a0a      	ldr	r2, [pc, #40]	; (11b20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x48>)
   11af8:	9b01      	ldr	r3, [sp, #4]
   11afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11afe:	f003 0301 	and.w	r3, r3, #1
   11b02:	2b00      	cmp	r3, #0
   11b04:	d106      	bne.n	11b14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
   11b06:	4a05      	ldr	r2, [pc, #20]	; (11b1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   11b08:	9b01      	ldr	r3, [sp, #4]
   11b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b0e:	2b00      	cmp	r3, #0
   11b10:	d100      	bne.n	11b14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11b12:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11b14:	bf00      	nop
   11b16:	b003      	add	sp, #12
   11b18:	f85d fb04 	ldr.w	pc, [sp], #4
   11b1c:	1fff94d8 	.word	0x1fff94d8
   11b20:	1fff94d4 	.word	0x1fff94d4

00011b24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   11b24:	b500      	push	{lr}
   11b26:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b28:	f7ef f8bc 	bl	ca4 <Sys_GetCoreID>
   11b2c:	4603      	mov	r3, r0
   11b2e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId])
   11b30:	4a10      	ldr	r2, [pc, #64]	; (11b74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   11b32:	9b01      	ldr	r3, [sp, #4]
   11b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b38:	2b00      	cmp	r3, #0
   11b3a:	d10d      	bne.n	11b58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11b3c:	f7ee ff1a 	bl	974 <Adc_schm_read_msr>
   11b40:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11b42:	9b00      	ldr	r3, [sp, #0]
   11b44:	f003 0301 	and.w	r3, r3, #1
   11b48:	2b00      	cmp	r3, #0
   11b4a:	d100      	bne.n	11b4e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11b4c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_45[u32CoreId] = msr;
   11b4e:	490a      	ldr	r1, [pc, #40]	; (11b78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x54>)
   11b50:	9b01      	ldr	r3, [sp, #4]
   11b52:	9a00      	ldr	r2, [sp, #0]
   11b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]++;
   11b58:	4a06      	ldr	r2, [pc, #24]	; (11b74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   11b5a:	9b01      	ldr	r3, [sp, #4]
   11b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b60:	1c5a      	adds	r2, r3, #1
   11b62:	4904      	ldr	r1, [pc, #16]	; (11b74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   11b64:	9b01      	ldr	r3, [sp, #4]
   11b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11b6a:	bf00      	nop
   11b6c:	b003      	add	sp, #12
   11b6e:	f85d fb04 	ldr.w	pc, [sp], #4
   11b72:	bf00      	nop
   11b74:	1fff94e0 	.word	0x1fff94e0
   11b78:	1fff94dc 	.word	0x1fff94dc

00011b7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   11b7c:	b500      	push	{lr}
   11b7e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b80:	f7ef f890 	bl	ca4 <Sys_GetCoreID>
   11b84:	4603      	mov	r3, r0
   11b86:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]--;
   11b88:	4a0d      	ldr	r2, [pc, #52]	; (11bc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   11b8a:	9b01      	ldr	r3, [sp, #4]
   11b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b90:	1e5a      	subs	r2, r3, #1
   11b92:	490b      	ldr	r1, [pc, #44]	; (11bc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   11b94:	9b01      	ldr	r3, [sp, #4]
   11b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
   11b9a:	4a0a      	ldr	r2, [pc, #40]	; (11bc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x48>)
   11b9c:	9b01      	ldr	r3, [sp, #4]
   11b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ba2:	f003 0301 	and.w	r3, r3, #1
   11ba6:	2b00      	cmp	r3, #0
   11ba8:	d106      	bne.n	11bb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
   11baa:	4a05      	ldr	r2, [pc, #20]	; (11bc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   11bac:	9b01      	ldr	r3, [sp, #4]
   11bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bb2:	2b00      	cmp	r3, #0
   11bb4:	d100      	bne.n	11bb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11bb6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11bb8:	bf00      	nop
   11bba:	b003      	add	sp, #12
   11bbc:	f85d fb04 	ldr.w	pc, [sp], #4
   11bc0:	1fff94e0 	.word	0x1fff94e0
   11bc4:	1fff94dc 	.word	0x1fff94dc

00011bc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   11bc8:	b500      	push	{lr}
   11bca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11bcc:	f7ef f86a 	bl	ca4 <Sys_GetCoreID>
   11bd0:	4603      	mov	r3, r0
   11bd2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId])
   11bd4:	4a10      	ldr	r2, [pc, #64]	; (11c18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   11bd6:	9b01      	ldr	r3, [sp, #4]
   11bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bdc:	2b00      	cmp	r3, #0
   11bde:	d10d      	bne.n	11bfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11be0:	f7ee fec8 	bl	974 <Adc_schm_read_msr>
   11be4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11be6:	9b00      	ldr	r3, [sp, #0]
   11be8:	f003 0301 	and.w	r3, r3, #1
   11bec:	2b00      	cmp	r3, #0
   11bee:	d100      	bne.n	11bf2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11bf0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_46[u32CoreId] = msr;
   11bf2:	490a      	ldr	r1, [pc, #40]	; (11c1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x54>)
   11bf4:	9b01      	ldr	r3, [sp, #4]
   11bf6:	9a00      	ldr	r2, [sp, #0]
   11bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]++;
   11bfc:	4a06      	ldr	r2, [pc, #24]	; (11c18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   11bfe:	9b01      	ldr	r3, [sp, #4]
   11c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c04:	1c5a      	adds	r2, r3, #1
   11c06:	4904      	ldr	r1, [pc, #16]	; (11c18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   11c08:	9b01      	ldr	r3, [sp, #4]
   11c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11c0e:	bf00      	nop
   11c10:	b003      	add	sp, #12
   11c12:	f85d fb04 	ldr.w	pc, [sp], #4
   11c16:	bf00      	nop
   11c18:	1fff94e8 	.word	0x1fff94e8
   11c1c:	1fff94e4 	.word	0x1fff94e4

00011c20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   11c20:	b500      	push	{lr}
   11c22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c24:	f7ef f83e 	bl	ca4 <Sys_GetCoreID>
   11c28:	4603      	mov	r3, r0
   11c2a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]--;
   11c2c:	4a0d      	ldr	r2, [pc, #52]	; (11c64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   11c2e:	9b01      	ldr	r3, [sp, #4]
   11c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c34:	1e5a      	subs	r2, r3, #1
   11c36:	490b      	ldr	r1, [pc, #44]	; (11c64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   11c38:	9b01      	ldr	r3, [sp, #4]
   11c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
   11c3e:	4a0a      	ldr	r2, [pc, #40]	; (11c68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x48>)
   11c40:	9b01      	ldr	r3, [sp, #4]
   11c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c46:	f003 0301 	and.w	r3, r3, #1
   11c4a:	2b00      	cmp	r3, #0
   11c4c:	d106      	bne.n	11c5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
   11c4e:	4a05      	ldr	r2, [pc, #20]	; (11c64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   11c50:	9b01      	ldr	r3, [sp, #4]
   11c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c56:	2b00      	cmp	r3, #0
   11c58:	d100      	bne.n	11c5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11c5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11c5c:	bf00      	nop
   11c5e:	b003      	add	sp, #12
   11c60:	f85d fb04 	ldr.w	pc, [sp], #4
   11c64:	1fff94e8 	.word	0x1fff94e8
   11c68:	1fff94e4 	.word	0x1fff94e4

00011c6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   11c6c:	b500      	push	{lr}
   11c6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c70:	f7ef f818 	bl	ca4 <Sys_GetCoreID>
   11c74:	4603      	mov	r3, r0
   11c76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId])
   11c78:	4a10      	ldr	r2, [pc, #64]	; (11cbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   11c7a:	9b01      	ldr	r3, [sp, #4]
   11c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c80:	2b00      	cmp	r3, #0
   11c82:	d10d      	bne.n	11ca0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11c84:	f7ee fe76 	bl	974 <Adc_schm_read_msr>
   11c88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11c8a:	9b00      	ldr	r3, [sp, #0]
   11c8c:	f003 0301 	and.w	r3, r3, #1
   11c90:	2b00      	cmp	r3, #0
   11c92:	d100      	bne.n	11c96 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11c94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_47[u32CoreId] = msr;
   11c96:	490a      	ldr	r1, [pc, #40]	; (11cc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x54>)
   11c98:	9b01      	ldr	r3, [sp, #4]
   11c9a:	9a00      	ldr	r2, [sp, #0]
   11c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]++;
   11ca0:	4a06      	ldr	r2, [pc, #24]	; (11cbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   11ca2:	9b01      	ldr	r3, [sp, #4]
   11ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ca8:	1c5a      	adds	r2, r3, #1
   11caa:	4904      	ldr	r1, [pc, #16]	; (11cbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   11cac:	9b01      	ldr	r3, [sp, #4]
   11cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11cb2:	bf00      	nop
   11cb4:	b003      	add	sp, #12
   11cb6:	f85d fb04 	ldr.w	pc, [sp], #4
   11cba:	bf00      	nop
   11cbc:	1fff94f0 	.word	0x1fff94f0
   11cc0:	1fff94ec 	.word	0x1fff94ec

00011cc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   11cc4:	b500      	push	{lr}
   11cc6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11cc8:	f7ee ffec 	bl	ca4 <Sys_GetCoreID>
   11ccc:	4603      	mov	r3, r0
   11cce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]--;
   11cd0:	4a0d      	ldr	r2, [pc, #52]	; (11d08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   11cd2:	9b01      	ldr	r3, [sp, #4]
   11cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cd8:	1e5a      	subs	r2, r3, #1
   11cda:	490b      	ldr	r1, [pc, #44]	; (11d08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   11cdc:	9b01      	ldr	r3, [sp, #4]
   11cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_47[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]))         /*if interrupts were enabled*/
   11ce2:	4a0a      	ldr	r2, [pc, #40]	; (11d0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x48>)
   11ce4:	9b01      	ldr	r3, [sp, #4]
   11ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cea:	f003 0301 	and.w	r3, r3, #1
   11cee:	2b00      	cmp	r3, #0
   11cf0:	d106      	bne.n	11d00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
   11cf2:	4a05      	ldr	r2, [pc, #20]	; (11d08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   11cf4:	9b01      	ldr	r3, [sp, #4]
   11cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cfa:	2b00      	cmp	r3, #0
   11cfc:	d100      	bne.n	11d00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11cfe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11d00:	bf00      	nop
   11d02:	b003      	add	sp, #12
   11d04:	f85d fb04 	ldr.w	pc, [sp], #4
   11d08:	1fff94f0 	.word	0x1fff94f0
   11d0c:	1fff94ec 	.word	0x1fff94ec

00011d10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   11d10:	b500      	push	{lr}
   11d12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d14:	f7ee ffc6 	bl	ca4 <Sys_GetCoreID>
   11d18:	4603      	mov	r3, r0
   11d1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId])
   11d1c:	4a10      	ldr	r2, [pc, #64]	; (11d60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   11d1e:	9b01      	ldr	r3, [sp, #4]
   11d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d24:	2b00      	cmp	r3, #0
   11d26:	d10d      	bne.n	11d44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11d28:	f7ee fe24 	bl	974 <Adc_schm_read_msr>
   11d2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11d2e:	9b00      	ldr	r3, [sp, #0]
   11d30:	f003 0301 	and.w	r3, r3, #1
   11d34:	2b00      	cmp	r3, #0
   11d36:	d100      	bne.n	11d3a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11d38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_48[u32CoreId] = msr;
   11d3a:	490a      	ldr	r1, [pc, #40]	; (11d64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x54>)
   11d3c:	9b01      	ldr	r3, [sp, #4]
   11d3e:	9a00      	ldr	r2, [sp, #0]
   11d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]++;
   11d44:	4a06      	ldr	r2, [pc, #24]	; (11d60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   11d46:	9b01      	ldr	r3, [sp, #4]
   11d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d4c:	1c5a      	adds	r2, r3, #1
   11d4e:	4904      	ldr	r1, [pc, #16]	; (11d60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   11d50:	9b01      	ldr	r3, [sp, #4]
   11d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11d56:	bf00      	nop
   11d58:	b003      	add	sp, #12
   11d5a:	f85d fb04 	ldr.w	pc, [sp], #4
   11d5e:	bf00      	nop
   11d60:	1fff94f8 	.word	0x1fff94f8
   11d64:	1fff94f4 	.word	0x1fff94f4

00011d68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   11d68:	b500      	push	{lr}
   11d6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d6c:	f7ee ff9a 	bl	ca4 <Sys_GetCoreID>
   11d70:	4603      	mov	r3, r0
   11d72:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]--;
   11d74:	4a0d      	ldr	r2, [pc, #52]	; (11dac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   11d76:	9b01      	ldr	r3, [sp, #4]
   11d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d7c:	1e5a      	subs	r2, r3, #1
   11d7e:	490b      	ldr	r1, [pc, #44]	; (11dac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   11d80:	9b01      	ldr	r3, [sp, #4]
   11d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_48[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]))         /*if interrupts were enabled*/
   11d86:	4a0a      	ldr	r2, [pc, #40]	; (11db0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x48>)
   11d88:	9b01      	ldr	r3, [sp, #4]
   11d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d8e:	f003 0301 	and.w	r3, r3, #1
   11d92:	2b00      	cmp	r3, #0
   11d94:	d106      	bne.n	11da4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
   11d96:	4a05      	ldr	r2, [pc, #20]	; (11dac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   11d98:	9b01      	ldr	r3, [sp, #4]
   11d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d9e:	2b00      	cmp	r3, #0
   11da0:	d100      	bne.n	11da4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11da2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11da4:	bf00      	nop
   11da6:	b003      	add	sp, #12
   11da8:	f85d fb04 	ldr.w	pc, [sp], #4
   11dac:	1fff94f8 	.word	0x1fff94f8
   11db0:	1fff94f4 	.word	0x1fff94f4

00011db4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   11db4:	b500      	push	{lr}
   11db6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11db8:	f7ee ff74 	bl	ca4 <Sys_GetCoreID>
   11dbc:	4603      	mov	r3, r0
   11dbe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId])
   11dc0:	4a10      	ldr	r2, [pc, #64]	; (11e04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   11dc2:	9b01      	ldr	r3, [sp, #4]
   11dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dc8:	2b00      	cmp	r3, #0
   11dca:	d10d      	bne.n	11de8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11dcc:	f7ee fdd2 	bl	974 <Adc_schm_read_msr>
   11dd0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11dd2:	9b00      	ldr	r3, [sp, #0]
   11dd4:	f003 0301 	and.w	r3, r3, #1
   11dd8:	2b00      	cmp	r3, #0
   11dda:	d100      	bne.n	11dde <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11ddc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_49[u32CoreId] = msr;
   11dde:	490a      	ldr	r1, [pc, #40]	; (11e08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x54>)
   11de0:	9b01      	ldr	r3, [sp, #4]
   11de2:	9a00      	ldr	r2, [sp, #0]
   11de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]++;
   11de8:	4a06      	ldr	r2, [pc, #24]	; (11e04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   11dea:	9b01      	ldr	r3, [sp, #4]
   11dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11df0:	1c5a      	adds	r2, r3, #1
   11df2:	4904      	ldr	r1, [pc, #16]	; (11e04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   11df4:	9b01      	ldr	r3, [sp, #4]
   11df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11dfa:	bf00      	nop
   11dfc:	b003      	add	sp, #12
   11dfe:	f85d fb04 	ldr.w	pc, [sp], #4
   11e02:	bf00      	nop
   11e04:	1fff9500 	.word	0x1fff9500
   11e08:	1fff94fc 	.word	0x1fff94fc

00011e0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   11e0c:	b500      	push	{lr}
   11e0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e10:	f7ee ff48 	bl	ca4 <Sys_GetCoreID>
   11e14:	4603      	mov	r3, r0
   11e16:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]--;
   11e18:	4a0d      	ldr	r2, [pc, #52]	; (11e50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   11e1a:	9b01      	ldr	r3, [sp, #4]
   11e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e20:	1e5a      	subs	r2, r3, #1
   11e22:	490b      	ldr	r1, [pc, #44]	; (11e50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   11e24:	9b01      	ldr	r3, [sp, #4]
   11e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_49[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]))         /*if interrupts were enabled*/
   11e2a:	4a0a      	ldr	r2, [pc, #40]	; (11e54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x48>)
   11e2c:	9b01      	ldr	r3, [sp, #4]
   11e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e32:	f003 0301 	and.w	r3, r3, #1
   11e36:	2b00      	cmp	r3, #0
   11e38:	d106      	bne.n	11e48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
   11e3a:	4a05      	ldr	r2, [pc, #20]	; (11e50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   11e3c:	9b01      	ldr	r3, [sp, #4]
   11e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e42:	2b00      	cmp	r3, #0
   11e44:	d100      	bne.n	11e48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11e46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11e48:	bf00      	nop
   11e4a:	b003      	add	sp, #12
   11e4c:	f85d fb04 	ldr.w	pc, [sp], #4
   11e50:	1fff9500 	.word	0x1fff9500
   11e54:	1fff94fc 	.word	0x1fff94fc

00011e58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   11e58:	b500      	push	{lr}
   11e5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e5c:	f7ee ff22 	bl	ca4 <Sys_GetCoreID>
   11e60:	4603      	mov	r3, r0
   11e62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId])
   11e64:	4a10      	ldr	r2, [pc, #64]	; (11ea8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   11e66:	9b01      	ldr	r3, [sp, #4]
   11e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e6c:	2b00      	cmp	r3, #0
   11e6e:	d10d      	bne.n	11e8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11e70:	f7ee fd80 	bl	974 <Adc_schm_read_msr>
   11e74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11e76:	9b00      	ldr	r3, [sp, #0]
   11e78:	f003 0301 	and.w	r3, r3, #1
   11e7c:	2b00      	cmp	r3, #0
   11e7e:	d100      	bne.n	11e82 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11e80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_50[u32CoreId] = msr;
   11e82:	490a      	ldr	r1, [pc, #40]	; (11eac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x54>)
   11e84:	9b01      	ldr	r3, [sp, #4]
   11e86:	9a00      	ldr	r2, [sp, #0]
   11e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]++;
   11e8c:	4a06      	ldr	r2, [pc, #24]	; (11ea8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   11e8e:	9b01      	ldr	r3, [sp, #4]
   11e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e94:	1c5a      	adds	r2, r3, #1
   11e96:	4904      	ldr	r1, [pc, #16]	; (11ea8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   11e98:	9b01      	ldr	r3, [sp, #4]
   11e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11e9e:	bf00      	nop
   11ea0:	b003      	add	sp, #12
   11ea2:	f85d fb04 	ldr.w	pc, [sp], #4
   11ea6:	bf00      	nop
   11ea8:	1fff9508 	.word	0x1fff9508
   11eac:	1fff9504 	.word	0x1fff9504

00011eb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   11eb0:	b500      	push	{lr}
   11eb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11eb4:	f7ee fef6 	bl	ca4 <Sys_GetCoreID>
   11eb8:	4603      	mov	r3, r0
   11eba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]--;
   11ebc:	4a0d      	ldr	r2, [pc, #52]	; (11ef4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   11ebe:	9b01      	ldr	r3, [sp, #4]
   11ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ec4:	1e5a      	subs	r2, r3, #1
   11ec6:	490b      	ldr	r1, [pc, #44]	; (11ef4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   11ec8:	9b01      	ldr	r3, [sp, #4]
   11eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
   11ece:	4a0a      	ldr	r2, [pc, #40]	; (11ef8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x48>)
   11ed0:	9b01      	ldr	r3, [sp, #4]
   11ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ed6:	f003 0301 	and.w	r3, r3, #1
   11eda:	2b00      	cmp	r3, #0
   11edc:	d106      	bne.n	11eec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
   11ede:	4a05      	ldr	r2, [pc, #20]	; (11ef4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   11ee0:	9b01      	ldr	r3, [sp, #4]
   11ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ee6:	2b00      	cmp	r3, #0
   11ee8:	d100      	bne.n	11eec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11eea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11eec:	bf00      	nop
   11eee:	b003      	add	sp, #12
   11ef0:	f85d fb04 	ldr.w	pc, [sp], #4
   11ef4:	1fff9508 	.word	0x1fff9508
   11ef8:	1fff9504 	.word	0x1fff9504

00011efc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   11efc:	b500      	push	{lr}
   11efe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f00:	f7ee fed0 	bl	ca4 <Sys_GetCoreID>
   11f04:	4603      	mov	r3, r0
   11f06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId])
   11f08:	4a10      	ldr	r2, [pc, #64]	; (11f4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   11f0a:	9b01      	ldr	r3, [sp, #4]
   11f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f10:	2b00      	cmp	r3, #0
   11f12:	d10d      	bne.n	11f30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11f14:	f7ee fd2e 	bl	974 <Adc_schm_read_msr>
   11f18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11f1a:	9b00      	ldr	r3, [sp, #0]
   11f1c:	f003 0301 	and.w	r3, r3, #1
   11f20:	2b00      	cmp	r3, #0
   11f22:	d100      	bne.n	11f26 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11f24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_51[u32CoreId] = msr;
   11f26:	490a      	ldr	r1, [pc, #40]	; (11f50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x54>)
   11f28:	9b01      	ldr	r3, [sp, #4]
   11f2a:	9a00      	ldr	r2, [sp, #0]
   11f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]++;
   11f30:	4a06      	ldr	r2, [pc, #24]	; (11f4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   11f32:	9b01      	ldr	r3, [sp, #4]
   11f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f38:	1c5a      	adds	r2, r3, #1
   11f3a:	4904      	ldr	r1, [pc, #16]	; (11f4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   11f3c:	9b01      	ldr	r3, [sp, #4]
   11f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11f42:	bf00      	nop
   11f44:	b003      	add	sp, #12
   11f46:	f85d fb04 	ldr.w	pc, [sp], #4
   11f4a:	bf00      	nop
   11f4c:	1fff9510 	.word	0x1fff9510
   11f50:	1fff950c 	.word	0x1fff950c

00011f54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   11f54:	b500      	push	{lr}
   11f56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f58:	f7ee fea4 	bl	ca4 <Sys_GetCoreID>
   11f5c:	4603      	mov	r3, r0
   11f5e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]--;
   11f60:	4a0d      	ldr	r2, [pc, #52]	; (11f98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   11f62:	9b01      	ldr	r3, [sp, #4]
   11f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f68:	1e5a      	subs	r2, r3, #1
   11f6a:	490b      	ldr	r1, [pc, #44]	; (11f98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   11f6c:	9b01      	ldr	r3, [sp, #4]
   11f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
   11f72:	4a0a      	ldr	r2, [pc, #40]	; (11f9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x48>)
   11f74:	9b01      	ldr	r3, [sp, #4]
   11f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f7a:	f003 0301 	and.w	r3, r3, #1
   11f7e:	2b00      	cmp	r3, #0
   11f80:	d106      	bne.n	11f90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
   11f82:	4a05      	ldr	r2, [pc, #20]	; (11f98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   11f84:	9b01      	ldr	r3, [sp, #4]
   11f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f8a:	2b00      	cmp	r3, #0
   11f8c:	d100      	bne.n	11f90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11f8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11f90:	bf00      	nop
   11f92:	b003      	add	sp, #12
   11f94:	f85d fb04 	ldr.w	pc, [sp], #4
   11f98:	1fff9510 	.word	0x1fff9510
   11f9c:	1fff950c 	.word	0x1fff950c

00011fa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   11fa0:	b500      	push	{lr}
   11fa2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11fa4:	f7ee fe7e 	bl	ca4 <Sys_GetCoreID>
   11fa8:	4603      	mov	r3, r0
   11faa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId])
   11fac:	4a10      	ldr	r2, [pc, #64]	; (11ff0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   11fae:	9b01      	ldr	r3, [sp, #4]
   11fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fb4:	2b00      	cmp	r3, #0
   11fb6:	d10d      	bne.n	11fd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11fb8:	f7ee fcdc 	bl	974 <Adc_schm_read_msr>
   11fbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11fbe:	9b00      	ldr	r3, [sp, #0]
   11fc0:	f003 0301 	and.w	r3, r3, #1
   11fc4:	2b00      	cmp	r3, #0
   11fc6:	d100      	bne.n	11fca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11fc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_54[u32CoreId] = msr;
   11fca:	490a      	ldr	r1, [pc, #40]	; (11ff4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x54>)
   11fcc:	9b01      	ldr	r3, [sp, #4]
   11fce:	9a00      	ldr	r2, [sp, #0]
   11fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]++;
   11fd4:	4a06      	ldr	r2, [pc, #24]	; (11ff0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   11fd6:	9b01      	ldr	r3, [sp, #4]
   11fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fdc:	1c5a      	adds	r2, r3, #1
   11fde:	4904      	ldr	r1, [pc, #16]	; (11ff0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   11fe0:	9b01      	ldr	r3, [sp, #4]
   11fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11fe6:	bf00      	nop
   11fe8:	b003      	add	sp, #12
   11fea:	f85d fb04 	ldr.w	pc, [sp], #4
   11fee:	bf00      	nop
   11ff0:	1fff9518 	.word	0x1fff9518
   11ff4:	1fff9514 	.word	0x1fff9514

00011ff8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   11ff8:	b500      	push	{lr}
   11ffa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ffc:	f7ee fe52 	bl	ca4 <Sys_GetCoreID>
   12000:	4603      	mov	r3, r0
   12002:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]--;
   12004:	4a0d      	ldr	r2, [pc, #52]	; (1203c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   12006:	9b01      	ldr	r3, [sp, #4]
   12008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1200c:	1e5a      	subs	r2, r3, #1
   1200e:	490b      	ldr	r1, [pc, #44]	; (1203c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   12010:	9b01      	ldr	r3, [sp, #4]
   12012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
   12016:	4a0a      	ldr	r2, [pc, #40]	; (12040 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x48>)
   12018:	9b01      	ldr	r3, [sp, #4]
   1201a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1201e:	f003 0301 	and.w	r3, r3, #1
   12022:	2b00      	cmp	r3, #0
   12024:	d106      	bne.n	12034 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
   12026:	4a05      	ldr	r2, [pc, #20]	; (1203c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   12028:	9b01      	ldr	r3, [sp, #4]
   1202a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1202e:	2b00      	cmp	r3, #0
   12030:	d100      	bne.n	12034 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12032:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12034:	bf00      	nop
   12036:	b003      	add	sp, #12
   12038:	f85d fb04 	ldr.w	pc, [sp], #4
   1203c:	1fff9518 	.word	0x1fff9518
   12040:	1fff9514 	.word	0x1fff9514

00012044 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   12044:	b500      	push	{lr}
   12046:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12048:	f7ee fe2c 	bl	ca4 <Sys_GetCoreID>
   1204c:	4603      	mov	r3, r0
   1204e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId])
   12050:	4a10      	ldr	r2, [pc, #64]	; (12094 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   12052:	9b01      	ldr	r3, [sp, #4]
   12054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12058:	2b00      	cmp	r3, #0
   1205a:	d10d      	bne.n	12078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1205c:	f7ee fc8a 	bl	974 <Adc_schm_read_msr>
   12060:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12062:	9b00      	ldr	r3, [sp, #0]
   12064:	f003 0301 	and.w	r3, r3, #1
   12068:	2b00      	cmp	r3, #0
   1206a:	d100      	bne.n	1206e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1206c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_55[u32CoreId] = msr;
   1206e:	490a      	ldr	r1, [pc, #40]	; (12098 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x54>)
   12070:	9b01      	ldr	r3, [sp, #4]
   12072:	9a00      	ldr	r2, [sp, #0]
   12074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]++;
   12078:	4a06      	ldr	r2, [pc, #24]	; (12094 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   1207a:	9b01      	ldr	r3, [sp, #4]
   1207c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12080:	1c5a      	adds	r2, r3, #1
   12082:	4904      	ldr	r1, [pc, #16]	; (12094 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   12084:	9b01      	ldr	r3, [sp, #4]
   12086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1208a:	bf00      	nop
   1208c:	b003      	add	sp, #12
   1208e:	f85d fb04 	ldr.w	pc, [sp], #4
   12092:	bf00      	nop
   12094:	1fff9520 	.word	0x1fff9520
   12098:	1fff951c 	.word	0x1fff951c

0001209c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   1209c:	b500      	push	{lr}
   1209e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   120a0:	f7ee fe00 	bl	ca4 <Sys_GetCoreID>
   120a4:	4603      	mov	r3, r0
   120a6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]--;
   120a8:	4a0d      	ldr	r2, [pc, #52]	; (120e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   120aa:	9b01      	ldr	r3, [sp, #4]
   120ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120b0:	1e5a      	subs	r2, r3, #1
   120b2:	490b      	ldr	r1, [pc, #44]	; (120e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   120b4:	9b01      	ldr	r3, [sp, #4]
   120b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
   120ba:	4a0a      	ldr	r2, [pc, #40]	; (120e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x48>)
   120bc:	9b01      	ldr	r3, [sp, #4]
   120be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120c2:	f003 0301 	and.w	r3, r3, #1
   120c6:	2b00      	cmp	r3, #0
   120c8:	d106      	bne.n	120d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
   120ca:	4a05      	ldr	r2, [pc, #20]	; (120e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   120cc:	9b01      	ldr	r3, [sp, #4]
   120ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120d2:	2b00      	cmp	r3, #0
   120d4:	d100      	bne.n	120d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   120d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   120d8:	bf00      	nop
   120da:	b003      	add	sp, #12
   120dc:	f85d fb04 	ldr.w	pc, [sp], #4
   120e0:	1fff9520 	.word	0x1fff9520
   120e4:	1fff951c 	.word	0x1fff951c

000120e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   120e8:	b500      	push	{lr}
   120ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   120ec:	f7ee fdda 	bl	ca4 <Sys_GetCoreID>
   120f0:	4603      	mov	r3, r0
   120f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId])
   120f4:	4a10      	ldr	r2, [pc, #64]	; (12138 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   120f6:	9b01      	ldr	r3, [sp, #4]
   120f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120fc:	2b00      	cmp	r3, #0
   120fe:	d10d      	bne.n	1211c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12100:	f7ee fc38 	bl	974 <Adc_schm_read_msr>
   12104:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12106:	9b00      	ldr	r3, [sp, #0]
   12108:	f003 0301 	and.w	r3, r3, #1
   1210c:	2b00      	cmp	r3, #0
   1210e:	d100      	bne.n	12112 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12110:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_56[u32CoreId] = msr;
   12112:	490a      	ldr	r1, [pc, #40]	; (1213c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x54>)
   12114:	9b01      	ldr	r3, [sp, #4]
   12116:	9a00      	ldr	r2, [sp, #0]
   12118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]++;
   1211c:	4a06      	ldr	r2, [pc, #24]	; (12138 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   1211e:	9b01      	ldr	r3, [sp, #4]
   12120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12124:	1c5a      	adds	r2, r3, #1
   12126:	4904      	ldr	r1, [pc, #16]	; (12138 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   12128:	9b01      	ldr	r3, [sp, #4]
   1212a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1212e:	bf00      	nop
   12130:	b003      	add	sp, #12
   12132:	f85d fb04 	ldr.w	pc, [sp], #4
   12136:	bf00      	nop
   12138:	1fff9528 	.word	0x1fff9528
   1213c:	1fff9524 	.word	0x1fff9524

00012140 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   12140:	b500      	push	{lr}
   12142:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12144:	f7ee fdae 	bl	ca4 <Sys_GetCoreID>
   12148:	4603      	mov	r3, r0
   1214a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]--;
   1214c:	4a0d      	ldr	r2, [pc, #52]	; (12184 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   1214e:	9b01      	ldr	r3, [sp, #4]
   12150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12154:	1e5a      	subs	r2, r3, #1
   12156:	490b      	ldr	r1, [pc, #44]	; (12184 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   12158:	9b01      	ldr	r3, [sp, #4]
   1215a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
   1215e:	4a0a      	ldr	r2, [pc, #40]	; (12188 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x48>)
   12160:	9b01      	ldr	r3, [sp, #4]
   12162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12166:	f003 0301 	and.w	r3, r3, #1
   1216a:	2b00      	cmp	r3, #0
   1216c:	d106      	bne.n	1217c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
   1216e:	4a05      	ldr	r2, [pc, #20]	; (12184 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   12170:	9b01      	ldr	r3, [sp, #4]
   12172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12176:	2b00      	cmp	r3, #0
   12178:	d100      	bne.n	1217c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1217a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1217c:	bf00      	nop
   1217e:	b003      	add	sp, #12
   12180:	f85d fb04 	ldr.w	pc, [sp], #4
   12184:	1fff9528 	.word	0x1fff9528
   12188:	1fff9524 	.word	0x1fff9524

0001218c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   1218c:	b500      	push	{lr}
   1218e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12190:	f7ee fd88 	bl	ca4 <Sys_GetCoreID>
   12194:	4603      	mov	r3, r0
   12196:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId])
   12198:	4a10      	ldr	r2, [pc, #64]	; (121dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   1219a:	9b01      	ldr	r3, [sp, #4]
   1219c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121a0:	2b00      	cmp	r3, #0
   121a2:	d10d      	bne.n	121c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   121a4:	f7ee fbe6 	bl	974 <Adc_schm_read_msr>
   121a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   121aa:	9b00      	ldr	r3, [sp, #0]
   121ac:	f003 0301 	and.w	r3, r3, #1
   121b0:	2b00      	cmp	r3, #0
   121b2:	d100      	bne.n	121b6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   121b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_57[u32CoreId] = msr;
   121b6:	490a      	ldr	r1, [pc, #40]	; (121e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x54>)
   121b8:	9b01      	ldr	r3, [sp, #4]
   121ba:	9a00      	ldr	r2, [sp, #0]
   121bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]++;
   121c0:	4a06      	ldr	r2, [pc, #24]	; (121dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   121c2:	9b01      	ldr	r3, [sp, #4]
   121c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121c8:	1c5a      	adds	r2, r3, #1
   121ca:	4904      	ldr	r1, [pc, #16]	; (121dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   121cc:	9b01      	ldr	r3, [sp, #4]
   121ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   121d2:	bf00      	nop
   121d4:	b003      	add	sp, #12
   121d6:	f85d fb04 	ldr.w	pc, [sp], #4
   121da:	bf00      	nop
   121dc:	1fff9530 	.word	0x1fff9530
   121e0:	1fff952c 	.word	0x1fff952c

000121e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   121e4:	b500      	push	{lr}
   121e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   121e8:	f7ee fd5c 	bl	ca4 <Sys_GetCoreID>
   121ec:	4603      	mov	r3, r0
   121ee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]--;
   121f0:	4a0d      	ldr	r2, [pc, #52]	; (12228 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   121f2:	9b01      	ldr	r3, [sp, #4]
   121f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121f8:	1e5a      	subs	r2, r3, #1
   121fa:	490b      	ldr	r1, [pc, #44]	; (12228 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   121fc:	9b01      	ldr	r3, [sp, #4]
   121fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_57[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]))         /*if interrupts were enabled*/
   12202:	4a0a      	ldr	r2, [pc, #40]	; (1222c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x48>)
   12204:	9b01      	ldr	r3, [sp, #4]
   12206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1220a:	f003 0301 	and.w	r3, r3, #1
   1220e:	2b00      	cmp	r3, #0
   12210:	d106      	bne.n	12220 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
   12212:	4a05      	ldr	r2, [pc, #20]	; (12228 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   12214:	9b01      	ldr	r3, [sp, #4]
   12216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1221a:	2b00      	cmp	r3, #0
   1221c:	d100      	bne.n	12220 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1221e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12220:	bf00      	nop
   12222:	b003      	add	sp, #12
   12224:	f85d fb04 	ldr.w	pc, [sp], #4
   12228:	1fff9530 	.word	0x1fff9530
   1222c:	1fff952c 	.word	0x1fff952c

00012230 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   12230:	b500      	push	{lr}
   12232:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12234:	f7ee fd36 	bl	ca4 <Sys_GetCoreID>
   12238:	4603      	mov	r3, r0
   1223a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId])
   1223c:	4a10      	ldr	r2, [pc, #64]	; (12280 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   1223e:	9b01      	ldr	r3, [sp, #4]
   12240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12244:	2b00      	cmp	r3, #0
   12246:	d10d      	bne.n	12264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12248:	f7ee fb94 	bl	974 <Adc_schm_read_msr>
   1224c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1224e:	9b00      	ldr	r3, [sp, #0]
   12250:	f003 0301 	and.w	r3, r3, #1
   12254:	2b00      	cmp	r3, #0
   12256:	d100      	bne.n	1225a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12258:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_58[u32CoreId] = msr;
   1225a:	490a      	ldr	r1, [pc, #40]	; (12284 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x54>)
   1225c:	9b01      	ldr	r3, [sp, #4]
   1225e:	9a00      	ldr	r2, [sp, #0]
   12260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]++;
   12264:	4a06      	ldr	r2, [pc, #24]	; (12280 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   12266:	9b01      	ldr	r3, [sp, #4]
   12268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1226c:	1c5a      	adds	r2, r3, #1
   1226e:	4904      	ldr	r1, [pc, #16]	; (12280 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   12270:	9b01      	ldr	r3, [sp, #4]
   12272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12276:	bf00      	nop
   12278:	b003      	add	sp, #12
   1227a:	f85d fb04 	ldr.w	pc, [sp], #4
   1227e:	bf00      	nop
   12280:	1fff9538 	.word	0x1fff9538
   12284:	1fff9534 	.word	0x1fff9534

00012288 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   12288:	b500      	push	{lr}
   1228a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1228c:	f7ee fd0a 	bl	ca4 <Sys_GetCoreID>
   12290:	4603      	mov	r3, r0
   12292:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]--;
   12294:	4a0d      	ldr	r2, [pc, #52]	; (122cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   12296:	9b01      	ldr	r3, [sp, #4]
   12298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1229c:	1e5a      	subs	r2, r3, #1
   1229e:	490b      	ldr	r1, [pc, #44]	; (122cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   122a0:	9b01      	ldr	r3, [sp, #4]
   122a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_58[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]))         /*if interrupts were enabled*/
   122a6:	4a0a      	ldr	r2, [pc, #40]	; (122d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x48>)
   122a8:	9b01      	ldr	r3, [sp, #4]
   122aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122ae:	f003 0301 	and.w	r3, r3, #1
   122b2:	2b00      	cmp	r3, #0
   122b4:	d106      	bne.n	122c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
   122b6:	4a05      	ldr	r2, [pc, #20]	; (122cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   122b8:	9b01      	ldr	r3, [sp, #4]
   122ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122be:	2b00      	cmp	r3, #0
   122c0:	d100      	bne.n	122c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   122c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   122c4:	bf00      	nop
   122c6:	b003      	add	sp, #12
   122c8:	f85d fb04 	ldr.w	pc, [sp], #4
   122cc:	1fff9538 	.word	0x1fff9538
   122d0:	1fff9534 	.word	0x1fff9534

000122d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   122d4:	b500      	push	{lr}
   122d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   122d8:	f7ee fce4 	bl	ca4 <Sys_GetCoreID>
   122dc:	4603      	mov	r3, r0
   122de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId])
   122e0:	4a10      	ldr	r2, [pc, #64]	; (12324 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   122e2:	9b01      	ldr	r3, [sp, #4]
   122e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122e8:	2b00      	cmp	r3, #0
   122ea:	d10d      	bne.n	12308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   122ec:	f7ee fb42 	bl	974 <Adc_schm_read_msr>
   122f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   122f2:	9b00      	ldr	r3, [sp, #0]
   122f4:	f003 0301 	and.w	r3, r3, #1
   122f8:	2b00      	cmp	r3, #0
   122fa:	d100      	bne.n	122fe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   122fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_59[u32CoreId] = msr;
   122fe:	490a      	ldr	r1, [pc, #40]	; (12328 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x54>)
   12300:	9b01      	ldr	r3, [sp, #4]
   12302:	9a00      	ldr	r2, [sp, #0]
   12304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]++;
   12308:	4a06      	ldr	r2, [pc, #24]	; (12324 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   1230a:	9b01      	ldr	r3, [sp, #4]
   1230c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12310:	1c5a      	adds	r2, r3, #1
   12312:	4904      	ldr	r1, [pc, #16]	; (12324 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   12314:	9b01      	ldr	r3, [sp, #4]
   12316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1231a:	bf00      	nop
   1231c:	b003      	add	sp, #12
   1231e:	f85d fb04 	ldr.w	pc, [sp], #4
   12322:	bf00      	nop
   12324:	1fff9540 	.word	0x1fff9540
   12328:	1fff953c 	.word	0x1fff953c

0001232c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   1232c:	b500      	push	{lr}
   1232e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12330:	f7ee fcb8 	bl	ca4 <Sys_GetCoreID>
   12334:	4603      	mov	r3, r0
   12336:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]--;
   12338:	4a0d      	ldr	r2, [pc, #52]	; (12370 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   1233a:	9b01      	ldr	r3, [sp, #4]
   1233c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12340:	1e5a      	subs	r2, r3, #1
   12342:	490b      	ldr	r1, [pc, #44]	; (12370 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   12344:	9b01      	ldr	r3, [sp, #4]
   12346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_59[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]))         /*if interrupts were enabled*/
   1234a:	4a0a      	ldr	r2, [pc, #40]	; (12374 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x48>)
   1234c:	9b01      	ldr	r3, [sp, #4]
   1234e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12352:	f003 0301 	and.w	r3, r3, #1
   12356:	2b00      	cmp	r3, #0
   12358:	d106      	bne.n	12368 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
   1235a:	4a05      	ldr	r2, [pc, #20]	; (12370 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   1235c:	9b01      	ldr	r3, [sp, #4]
   1235e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12362:	2b00      	cmp	r3, #0
   12364:	d100      	bne.n	12368 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12366:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12368:	bf00      	nop
   1236a:	b003      	add	sp, #12
   1236c:	f85d fb04 	ldr.w	pc, [sp], #4
   12370:	1fff9540 	.word	0x1fff9540
   12374:	1fff953c 	.word	0x1fff953c

00012378 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   12378:	b500      	push	{lr}
   1237a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1237c:	f7ee fc92 	bl	ca4 <Sys_GetCoreID>
   12380:	4603      	mov	r3, r0
   12382:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId])
   12384:	4a10      	ldr	r2, [pc, #64]	; (123c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   12386:	9b01      	ldr	r3, [sp, #4]
   12388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1238c:	2b00      	cmp	r3, #0
   1238e:	d10d      	bne.n	123ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12390:	f7ee faf0 	bl	974 <Adc_schm_read_msr>
   12394:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12396:	9b00      	ldr	r3, [sp, #0]
   12398:	f003 0301 	and.w	r3, r3, #1
   1239c:	2b00      	cmp	r3, #0
   1239e:	d100      	bne.n	123a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   123a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_60[u32CoreId] = msr;
   123a2:	490a      	ldr	r1, [pc, #40]	; (123cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x54>)
   123a4:	9b01      	ldr	r3, [sp, #4]
   123a6:	9a00      	ldr	r2, [sp, #0]
   123a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]++;
   123ac:	4a06      	ldr	r2, [pc, #24]	; (123c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   123ae:	9b01      	ldr	r3, [sp, #4]
   123b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123b4:	1c5a      	adds	r2, r3, #1
   123b6:	4904      	ldr	r1, [pc, #16]	; (123c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   123b8:	9b01      	ldr	r3, [sp, #4]
   123ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   123be:	bf00      	nop
   123c0:	b003      	add	sp, #12
   123c2:	f85d fb04 	ldr.w	pc, [sp], #4
   123c6:	bf00      	nop
   123c8:	1fff9548 	.word	0x1fff9548
   123cc:	1fff9544 	.word	0x1fff9544

000123d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   123d0:	b500      	push	{lr}
   123d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   123d4:	f7ee fc66 	bl	ca4 <Sys_GetCoreID>
   123d8:	4603      	mov	r3, r0
   123da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]--;
   123dc:	4a0d      	ldr	r2, [pc, #52]	; (12414 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   123de:	9b01      	ldr	r3, [sp, #4]
   123e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123e4:	1e5a      	subs	r2, r3, #1
   123e6:	490b      	ldr	r1, [pc, #44]	; (12414 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   123e8:	9b01      	ldr	r3, [sp, #4]
   123ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
   123ee:	4a0a      	ldr	r2, [pc, #40]	; (12418 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x48>)
   123f0:	9b01      	ldr	r3, [sp, #4]
   123f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123f6:	f003 0301 	and.w	r3, r3, #1
   123fa:	2b00      	cmp	r3, #0
   123fc:	d106      	bne.n	1240c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
   123fe:	4a05      	ldr	r2, [pc, #20]	; (12414 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   12400:	9b01      	ldr	r3, [sp, #4]
   12402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12406:	2b00      	cmp	r3, #0
   12408:	d100      	bne.n	1240c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1240a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1240c:	bf00      	nop
   1240e:	b003      	add	sp, #12
   12410:	f85d fb04 	ldr.w	pc, [sp], #4
   12414:	1fff9548 	.word	0x1fff9548
   12418:	1fff9544 	.word	0x1fff9544

0001241c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   1241c:	b500      	push	{lr}
   1241e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12420:	f7ee fc40 	bl	ca4 <Sys_GetCoreID>
   12424:	4603      	mov	r3, r0
   12426:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId])
   12428:	4a10      	ldr	r2, [pc, #64]	; (1246c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   1242a:	9b01      	ldr	r3, [sp, #4]
   1242c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12430:	2b00      	cmp	r3, #0
   12432:	d10d      	bne.n	12450 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12434:	f7ee fa9e 	bl	974 <Adc_schm_read_msr>
   12438:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1243a:	9b00      	ldr	r3, [sp, #0]
   1243c:	f003 0301 	and.w	r3, r3, #1
   12440:	2b00      	cmp	r3, #0
   12442:	d100      	bne.n	12446 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12444:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_61[u32CoreId] = msr;
   12446:	490a      	ldr	r1, [pc, #40]	; (12470 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x54>)
   12448:	9b01      	ldr	r3, [sp, #4]
   1244a:	9a00      	ldr	r2, [sp, #0]
   1244c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]++;
   12450:	4a06      	ldr	r2, [pc, #24]	; (1246c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   12452:	9b01      	ldr	r3, [sp, #4]
   12454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12458:	1c5a      	adds	r2, r3, #1
   1245a:	4904      	ldr	r1, [pc, #16]	; (1246c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   1245c:	9b01      	ldr	r3, [sp, #4]
   1245e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12462:	bf00      	nop
   12464:	b003      	add	sp, #12
   12466:	f85d fb04 	ldr.w	pc, [sp], #4
   1246a:	bf00      	nop
   1246c:	1fff9550 	.word	0x1fff9550
   12470:	1fff954c 	.word	0x1fff954c

00012474 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   12474:	b500      	push	{lr}
   12476:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12478:	f7ee fc14 	bl	ca4 <Sys_GetCoreID>
   1247c:	4603      	mov	r3, r0
   1247e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]--;
   12480:	4a0d      	ldr	r2, [pc, #52]	; (124b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   12482:	9b01      	ldr	r3, [sp, #4]
   12484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12488:	1e5a      	subs	r2, r3, #1
   1248a:	490b      	ldr	r1, [pc, #44]	; (124b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   1248c:	9b01      	ldr	r3, [sp, #4]
   1248e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
   12492:	4a0a      	ldr	r2, [pc, #40]	; (124bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x48>)
   12494:	9b01      	ldr	r3, [sp, #4]
   12496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1249a:	f003 0301 	and.w	r3, r3, #1
   1249e:	2b00      	cmp	r3, #0
   124a0:	d106      	bne.n	124b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
   124a2:	4a05      	ldr	r2, [pc, #20]	; (124b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   124a4:	9b01      	ldr	r3, [sp, #4]
   124a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124aa:	2b00      	cmp	r3, #0
   124ac:	d100      	bne.n	124b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   124ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   124b0:	bf00      	nop
   124b2:	b003      	add	sp, #12
   124b4:	f85d fb04 	ldr.w	pc, [sp], #4
   124b8:	1fff9550 	.word	0x1fff9550
   124bc:	1fff954c 	.word	0x1fff954c

000124c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   124c0:	b500      	push	{lr}
   124c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   124c4:	f7ee fbee 	bl	ca4 <Sys_GetCoreID>
   124c8:	4603      	mov	r3, r0
   124ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId])
   124cc:	4a10      	ldr	r2, [pc, #64]	; (12510 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   124ce:	9b01      	ldr	r3, [sp, #4]
   124d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124d4:	2b00      	cmp	r3, #0
   124d6:	d10d      	bne.n	124f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   124d8:	f7ee fa4c 	bl	974 <Adc_schm_read_msr>
   124dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   124de:	9b00      	ldr	r3, [sp, #0]
   124e0:	f003 0301 	and.w	r3, r3, #1
   124e4:	2b00      	cmp	r3, #0
   124e6:	d100      	bne.n	124ea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   124e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_62[u32CoreId] = msr;
   124ea:	490a      	ldr	r1, [pc, #40]	; (12514 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x54>)
   124ec:	9b01      	ldr	r3, [sp, #4]
   124ee:	9a00      	ldr	r2, [sp, #0]
   124f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]++;
   124f4:	4a06      	ldr	r2, [pc, #24]	; (12510 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   124f6:	9b01      	ldr	r3, [sp, #4]
   124f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124fc:	1c5a      	adds	r2, r3, #1
   124fe:	4904      	ldr	r1, [pc, #16]	; (12510 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   12500:	9b01      	ldr	r3, [sp, #4]
   12502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12506:	bf00      	nop
   12508:	b003      	add	sp, #12
   1250a:	f85d fb04 	ldr.w	pc, [sp], #4
   1250e:	bf00      	nop
   12510:	1fff9558 	.word	0x1fff9558
   12514:	1fff9554 	.word	0x1fff9554

00012518 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   12518:	b500      	push	{lr}
   1251a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1251c:	f7ee fbc2 	bl	ca4 <Sys_GetCoreID>
   12520:	4603      	mov	r3, r0
   12522:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]--;
   12524:	4a0d      	ldr	r2, [pc, #52]	; (1255c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   12526:	9b01      	ldr	r3, [sp, #4]
   12528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1252c:	1e5a      	subs	r2, r3, #1
   1252e:	490b      	ldr	r1, [pc, #44]	; (1255c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   12530:	9b01      	ldr	r3, [sp, #4]
   12532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
   12536:	4a0a      	ldr	r2, [pc, #40]	; (12560 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x48>)
   12538:	9b01      	ldr	r3, [sp, #4]
   1253a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1253e:	f003 0301 	and.w	r3, r3, #1
   12542:	2b00      	cmp	r3, #0
   12544:	d106      	bne.n	12554 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
   12546:	4a05      	ldr	r2, [pc, #20]	; (1255c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   12548:	9b01      	ldr	r3, [sp, #4]
   1254a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1254e:	2b00      	cmp	r3, #0
   12550:	d100      	bne.n	12554 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12552:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12554:	bf00      	nop
   12556:	b003      	add	sp, #12
   12558:	f85d fb04 	ldr.w	pc, [sp], #4
   1255c:	1fff9558 	.word	0x1fff9558
   12560:	1fff9554 	.word	0x1fff9554

00012564 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   12564:	b500      	push	{lr}
   12566:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12568:	f7ee fb9c 	bl	ca4 <Sys_GetCoreID>
   1256c:	4603      	mov	r3, r0
   1256e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId])
   12570:	4a10      	ldr	r2, [pc, #64]	; (125b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   12572:	9b01      	ldr	r3, [sp, #4]
   12574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12578:	2b00      	cmp	r3, #0
   1257a:	d10d      	bne.n	12598 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1257c:	f7ee f9fa 	bl	974 <Adc_schm_read_msr>
   12580:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12582:	9b00      	ldr	r3, [sp, #0]
   12584:	f003 0301 	and.w	r3, r3, #1
   12588:	2b00      	cmp	r3, #0
   1258a:	d100      	bne.n	1258e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1258c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_63[u32CoreId] = msr;
   1258e:	490a      	ldr	r1, [pc, #40]	; (125b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x54>)
   12590:	9b01      	ldr	r3, [sp, #4]
   12592:	9a00      	ldr	r2, [sp, #0]
   12594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]++;
   12598:	4a06      	ldr	r2, [pc, #24]	; (125b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   1259a:	9b01      	ldr	r3, [sp, #4]
   1259c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125a0:	1c5a      	adds	r2, r3, #1
   125a2:	4904      	ldr	r1, [pc, #16]	; (125b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   125a4:	9b01      	ldr	r3, [sp, #4]
   125a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   125aa:	bf00      	nop
   125ac:	b003      	add	sp, #12
   125ae:	f85d fb04 	ldr.w	pc, [sp], #4
   125b2:	bf00      	nop
   125b4:	1fff9560 	.word	0x1fff9560
   125b8:	1fff955c 	.word	0x1fff955c

000125bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   125bc:	b500      	push	{lr}
   125be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   125c0:	f7ee fb70 	bl	ca4 <Sys_GetCoreID>
   125c4:	4603      	mov	r3, r0
   125c6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]--;
   125c8:	4a0d      	ldr	r2, [pc, #52]	; (12600 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   125ca:	9b01      	ldr	r3, [sp, #4]
   125cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125d0:	1e5a      	subs	r2, r3, #1
   125d2:	490b      	ldr	r1, [pc, #44]	; (12600 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   125d4:	9b01      	ldr	r3, [sp, #4]
   125d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
   125da:	4a0a      	ldr	r2, [pc, #40]	; (12604 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x48>)
   125dc:	9b01      	ldr	r3, [sp, #4]
   125de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125e2:	f003 0301 	and.w	r3, r3, #1
   125e6:	2b00      	cmp	r3, #0
   125e8:	d106      	bne.n	125f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
   125ea:	4a05      	ldr	r2, [pc, #20]	; (12600 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   125ec:	9b01      	ldr	r3, [sp, #4]
   125ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125f2:	2b00      	cmp	r3, #0
   125f4:	d100      	bne.n	125f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   125f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   125f8:	bf00      	nop
   125fa:	b003      	add	sp, #12
   125fc:	f85d fb04 	ldr.w	pc, [sp], #4
   12600:	1fff9560 	.word	0x1fff9560
   12604:	1fff955c 	.word	0x1fff955c

00012608 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   12608:	b500      	push	{lr}
   1260a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1260c:	f7ee fb4a 	bl	ca4 <Sys_GetCoreID>
   12610:	4603      	mov	r3, r0
   12612:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId])
   12614:	4a10      	ldr	r2, [pc, #64]	; (12658 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   12616:	9b01      	ldr	r3, [sp, #4]
   12618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1261c:	2b00      	cmp	r3, #0
   1261e:	d10d      	bne.n	1263c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12620:	f7ee f9a8 	bl	974 <Adc_schm_read_msr>
   12624:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12626:	9b00      	ldr	r3, [sp, #0]
   12628:	f003 0301 	and.w	r3, r3, #1
   1262c:	2b00      	cmp	r3, #0
   1262e:	d100      	bne.n	12632 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12630:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_64[u32CoreId] = msr;
   12632:	490a      	ldr	r1, [pc, #40]	; (1265c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x54>)
   12634:	9b01      	ldr	r3, [sp, #4]
   12636:	9a00      	ldr	r2, [sp, #0]
   12638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]++;
   1263c:	4a06      	ldr	r2, [pc, #24]	; (12658 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   1263e:	9b01      	ldr	r3, [sp, #4]
   12640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12644:	1c5a      	adds	r2, r3, #1
   12646:	4904      	ldr	r1, [pc, #16]	; (12658 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   12648:	9b01      	ldr	r3, [sp, #4]
   1264a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1264e:	bf00      	nop
   12650:	b003      	add	sp, #12
   12652:	f85d fb04 	ldr.w	pc, [sp], #4
   12656:	bf00      	nop
   12658:	1fff9568 	.word	0x1fff9568
   1265c:	1fff9564 	.word	0x1fff9564

00012660 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   12660:	b500      	push	{lr}
   12662:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12664:	f7ee fb1e 	bl	ca4 <Sys_GetCoreID>
   12668:	4603      	mov	r3, r0
   1266a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]--;
   1266c:	4a0d      	ldr	r2, [pc, #52]	; (126a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   1266e:	9b01      	ldr	r3, [sp, #4]
   12670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12674:	1e5a      	subs	r2, r3, #1
   12676:	490b      	ldr	r1, [pc, #44]	; (126a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   12678:	9b01      	ldr	r3, [sp, #4]
   1267a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
   1267e:	4a0a      	ldr	r2, [pc, #40]	; (126a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x48>)
   12680:	9b01      	ldr	r3, [sp, #4]
   12682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12686:	f003 0301 	and.w	r3, r3, #1
   1268a:	2b00      	cmp	r3, #0
   1268c:	d106      	bne.n	1269c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
   1268e:	4a05      	ldr	r2, [pc, #20]	; (126a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   12690:	9b01      	ldr	r3, [sp, #4]
   12692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12696:	2b00      	cmp	r3, #0
   12698:	d100      	bne.n	1269c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1269a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1269c:	bf00      	nop
   1269e:	b003      	add	sp, #12
   126a0:	f85d fb04 	ldr.w	pc, [sp], #4
   126a4:	1fff9568 	.word	0x1fff9568
   126a8:	1fff9564 	.word	0x1fff9564

000126ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   126ac:	b500      	push	{lr}
   126ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   126b0:	f7ee faf8 	bl	ca4 <Sys_GetCoreID>
   126b4:	4603      	mov	r3, r0
   126b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId])
   126b8:	4a10      	ldr	r2, [pc, #64]	; (126fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   126ba:	9b01      	ldr	r3, [sp, #4]
   126bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126c0:	2b00      	cmp	r3, #0
   126c2:	d10d      	bne.n	126e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   126c4:	f7ee f956 	bl	974 <Adc_schm_read_msr>
   126c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   126ca:	9b00      	ldr	r3, [sp, #0]
   126cc:	f003 0301 	and.w	r3, r3, #1
   126d0:	2b00      	cmp	r3, #0
   126d2:	d100      	bne.n	126d6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   126d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_65[u32CoreId] = msr;
   126d6:	490a      	ldr	r1, [pc, #40]	; (12700 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x54>)
   126d8:	9b01      	ldr	r3, [sp, #4]
   126da:	9a00      	ldr	r2, [sp, #0]
   126dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]++;
   126e0:	4a06      	ldr	r2, [pc, #24]	; (126fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   126e2:	9b01      	ldr	r3, [sp, #4]
   126e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126e8:	1c5a      	adds	r2, r3, #1
   126ea:	4904      	ldr	r1, [pc, #16]	; (126fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   126ec:	9b01      	ldr	r3, [sp, #4]
   126ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   126f2:	bf00      	nop
   126f4:	b003      	add	sp, #12
   126f6:	f85d fb04 	ldr.w	pc, [sp], #4
   126fa:	bf00      	nop
   126fc:	1fff9570 	.word	0x1fff9570
   12700:	1fff956c 	.word	0x1fff956c

00012704 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   12704:	b500      	push	{lr}
   12706:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12708:	f7ee facc 	bl	ca4 <Sys_GetCoreID>
   1270c:	4603      	mov	r3, r0
   1270e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]--;
   12710:	4a0d      	ldr	r2, [pc, #52]	; (12748 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   12712:	9b01      	ldr	r3, [sp, #4]
   12714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12718:	1e5a      	subs	r2, r3, #1
   1271a:	490b      	ldr	r1, [pc, #44]	; (12748 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   1271c:	9b01      	ldr	r3, [sp, #4]
   1271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
   12722:	4a0a      	ldr	r2, [pc, #40]	; (1274c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x48>)
   12724:	9b01      	ldr	r3, [sp, #4]
   12726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1272a:	f003 0301 	and.w	r3, r3, #1
   1272e:	2b00      	cmp	r3, #0
   12730:	d106      	bne.n	12740 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
   12732:	4a05      	ldr	r2, [pc, #20]	; (12748 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   12734:	9b01      	ldr	r3, [sp, #4]
   12736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1273a:	2b00      	cmp	r3, #0
   1273c:	d100      	bne.n	12740 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1273e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12740:	bf00      	nop
   12742:	b003      	add	sp, #12
   12744:	f85d fb04 	ldr.w	pc, [sp], #4
   12748:	1fff9570 	.word	0x1fff9570
   1274c:	1fff956c 	.word	0x1fff956c

00012750 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   12750:	b500      	push	{lr}
   12752:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12754:	f7ee faa6 	bl	ca4 <Sys_GetCoreID>
   12758:	4603      	mov	r3, r0
   1275a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId])
   1275c:	4a10      	ldr	r2, [pc, #64]	; (127a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   1275e:	9b01      	ldr	r3, [sp, #4]
   12760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12764:	2b00      	cmp	r3, #0
   12766:	d10d      	bne.n	12784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12768:	f7ee f904 	bl	974 <Adc_schm_read_msr>
   1276c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1276e:	9b00      	ldr	r3, [sp, #0]
   12770:	f003 0301 	and.w	r3, r3, #1
   12774:	2b00      	cmp	r3, #0
   12776:	d100      	bne.n	1277a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12778:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_66[u32CoreId] = msr;
   1277a:	490a      	ldr	r1, [pc, #40]	; (127a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x54>)
   1277c:	9b01      	ldr	r3, [sp, #4]
   1277e:	9a00      	ldr	r2, [sp, #0]
   12780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]++;
   12784:	4a06      	ldr	r2, [pc, #24]	; (127a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   12786:	9b01      	ldr	r3, [sp, #4]
   12788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1278c:	1c5a      	adds	r2, r3, #1
   1278e:	4904      	ldr	r1, [pc, #16]	; (127a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   12790:	9b01      	ldr	r3, [sp, #4]
   12792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12796:	bf00      	nop
   12798:	b003      	add	sp, #12
   1279a:	f85d fb04 	ldr.w	pc, [sp], #4
   1279e:	bf00      	nop
   127a0:	1fff9578 	.word	0x1fff9578
   127a4:	1fff9574 	.word	0x1fff9574

000127a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   127a8:	b500      	push	{lr}
   127aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   127ac:	f7ee fa7a 	bl	ca4 <Sys_GetCoreID>
   127b0:	4603      	mov	r3, r0
   127b2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]--;
   127b4:	4a0d      	ldr	r2, [pc, #52]	; (127ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   127b6:	9b01      	ldr	r3, [sp, #4]
   127b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127bc:	1e5a      	subs	r2, r3, #1
   127be:	490b      	ldr	r1, [pc, #44]	; (127ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   127c0:	9b01      	ldr	r3, [sp, #4]
   127c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
   127c6:	4a0a      	ldr	r2, [pc, #40]	; (127f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x48>)
   127c8:	9b01      	ldr	r3, [sp, #4]
   127ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127ce:	f003 0301 	and.w	r3, r3, #1
   127d2:	2b00      	cmp	r3, #0
   127d4:	d106      	bne.n	127e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
   127d6:	4a05      	ldr	r2, [pc, #20]	; (127ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   127d8:	9b01      	ldr	r3, [sp, #4]
   127da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127de:	2b00      	cmp	r3, #0
   127e0:	d100      	bne.n	127e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   127e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   127e4:	bf00      	nop
   127e6:	b003      	add	sp, #12
   127e8:	f85d fb04 	ldr.w	pc, [sp], #4
   127ec:	1fff9578 	.word	0x1fff9578
   127f0:	1fff9574 	.word	0x1fff9574

000127f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   127f4:	b500      	push	{lr}
   127f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   127f8:	f7ee fa54 	bl	ca4 <Sys_GetCoreID>
   127fc:	4603      	mov	r3, r0
   127fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId])
   12800:	4a10      	ldr	r2, [pc, #64]	; (12844 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   12802:	9b01      	ldr	r3, [sp, #4]
   12804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12808:	2b00      	cmp	r3, #0
   1280a:	d10d      	bne.n	12828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1280c:	f7ee f8b2 	bl	974 <Adc_schm_read_msr>
   12810:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12812:	9b00      	ldr	r3, [sp, #0]
   12814:	f003 0301 	and.w	r3, r3, #1
   12818:	2b00      	cmp	r3, #0
   1281a:	d100      	bne.n	1281e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1281c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_67[u32CoreId] = msr;
   1281e:	490a      	ldr	r1, [pc, #40]	; (12848 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x54>)
   12820:	9b01      	ldr	r3, [sp, #4]
   12822:	9a00      	ldr	r2, [sp, #0]
   12824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]++;
   12828:	4a06      	ldr	r2, [pc, #24]	; (12844 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   1282a:	9b01      	ldr	r3, [sp, #4]
   1282c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12830:	1c5a      	adds	r2, r3, #1
   12832:	4904      	ldr	r1, [pc, #16]	; (12844 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   12834:	9b01      	ldr	r3, [sp, #4]
   12836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1283a:	bf00      	nop
   1283c:	b003      	add	sp, #12
   1283e:	f85d fb04 	ldr.w	pc, [sp], #4
   12842:	bf00      	nop
   12844:	1fff9580 	.word	0x1fff9580
   12848:	1fff957c 	.word	0x1fff957c

0001284c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   1284c:	b500      	push	{lr}
   1284e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12850:	f7ee fa28 	bl	ca4 <Sys_GetCoreID>
   12854:	4603      	mov	r3, r0
   12856:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]--;
   12858:	4a0d      	ldr	r2, [pc, #52]	; (12890 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   1285a:	9b01      	ldr	r3, [sp, #4]
   1285c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12860:	1e5a      	subs	r2, r3, #1
   12862:	490b      	ldr	r1, [pc, #44]	; (12890 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   12864:	9b01      	ldr	r3, [sp, #4]
   12866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
   1286a:	4a0a      	ldr	r2, [pc, #40]	; (12894 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x48>)
   1286c:	9b01      	ldr	r3, [sp, #4]
   1286e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12872:	f003 0301 	and.w	r3, r3, #1
   12876:	2b00      	cmp	r3, #0
   12878:	d106      	bne.n	12888 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
   1287a:	4a05      	ldr	r2, [pc, #20]	; (12890 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   1287c:	9b01      	ldr	r3, [sp, #4]
   1287e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12882:	2b00      	cmp	r3, #0
   12884:	d100      	bne.n	12888 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12886:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12888:	bf00      	nop
   1288a:	b003      	add	sp, #12
   1288c:	f85d fb04 	ldr.w	pc, [sp], #4
   12890:	1fff9580 	.word	0x1fff9580
   12894:	1fff957c 	.word	0x1fff957c

00012898 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   12898:	b500      	push	{lr}
   1289a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1289c:	f7ee fa02 	bl	ca4 <Sys_GetCoreID>
   128a0:	4603      	mov	r3, r0
   128a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId])
   128a4:	4a10      	ldr	r2, [pc, #64]	; (128e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   128a6:	9b01      	ldr	r3, [sp, #4]
   128a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128ac:	2b00      	cmp	r3, #0
   128ae:	d10d      	bne.n	128cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   128b0:	f7ee f860 	bl	974 <Adc_schm_read_msr>
   128b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   128b6:	9b00      	ldr	r3, [sp, #0]
   128b8:	f003 0301 	and.w	r3, r3, #1
   128bc:	2b00      	cmp	r3, #0
   128be:	d100      	bne.n	128c2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   128c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_68[u32CoreId] = msr;
   128c2:	490a      	ldr	r1, [pc, #40]	; (128ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x54>)
   128c4:	9b01      	ldr	r3, [sp, #4]
   128c6:	9a00      	ldr	r2, [sp, #0]
   128c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]++;
   128cc:	4a06      	ldr	r2, [pc, #24]	; (128e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   128ce:	9b01      	ldr	r3, [sp, #4]
   128d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128d4:	1c5a      	adds	r2, r3, #1
   128d6:	4904      	ldr	r1, [pc, #16]	; (128e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   128d8:	9b01      	ldr	r3, [sp, #4]
   128da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   128de:	bf00      	nop
   128e0:	b003      	add	sp, #12
   128e2:	f85d fb04 	ldr.w	pc, [sp], #4
   128e6:	bf00      	nop
   128e8:	1fff9588 	.word	0x1fff9588
   128ec:	1fff9584 	.word	0x1fff9584

000128f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   128f0:	b500      	push	{lr}
   128f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   128f4:	f7ee f9d6 	bl	ca4 <Sys_GetCoreID>
   128f8:	4603      	mov	r3, r0
   128fa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]--;
   128fc:	4a0d      	ldr	r2, [pc, #52]	; (12934 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   128fe:	9b01      	ldr	r3, [sp, #4]
   12900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12904:	1e5a      	subs	r2, r3, #1
   12906:	490b      	ldr	r1, [pc, #44]	; (12934 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   12908:	9b01      	ldr	r3, [sp, #4]
   1290a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
   1290e:	4a0a      	ldr	r2, [pc, #40]	; (12938 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x48>)
   12910:	9b01      	ldr	r3, [sp, #4]
   12912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12916:	f003 0301 	and.w	r3, r3, #1
   1291a:	2b00      	cmp	r3, #0
   1291c:	d106      	bne.n	1292c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
   1291e:	4a05      	ldr	r2, [pc, #20]	; (12934 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   12920:	9b01      	ldr	r3, [sp, #4]
   12922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12926:	2b00      	cmp	r3, #0
   12928:	d100      	bne.n	1292c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1292a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1292c:	bf00      	nop
   1292e:	b003      	add	sp, #12
   12930:	f85d fb04 	ldr.w	pc, [sp], #4
   12934:	1fff9588 	.word	0x1fff9588
   12938:	1fff9584 	.word	0x1fff9584

0001293c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   1293c:	b500      	push	{lr}
   1293e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12940:	f7ee f9b0 	bl	ca4 <Sys_GetCoreID>
   12944:	4603      	mov	r3, r0
   12946:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId])
   12948:	4a10      	ldr	r2, [pc, #64]	; (1298c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   1294a:	9b01      	ldr	r3, [sp, #4]
   1294c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12950:	2b00      	cmp	r3, #0
   12952:	d10d      	bne.n	12970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12954:	f7ee f80e 	bl	974 <Adc_schm_read_msr>
   12958:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1295a:	9b00      	ldr	r3, [sp, #0]
   1295c:	f003 0301 	and.w	r3, r3, #1
   12960:	2b00      	cmp	r3, #0
   12962:	d100      	bne.n	12966 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12964:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_69[u32CoreId] = msr;
   12966:	490a      	ldr	r1, [pc, #40]	; (12990 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x54>)
   12968:	9b01      	ldr	r3, [sp, #4]
   1296a:	9a00      	ldr	r2, [sp, #0]
   1296c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]++;
   12970:	4a06      	ldr	r2, [pc, #24]	; (1298c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   12972:	9b01      	ldr	r3, [sp, #4]
   12974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12978:	1c5a      	adds	r2, r3, #1
   1297a:	4904      	ldr	r1, [pc, #16]	; (1298c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   1297c:	9b01      	ldr	r3, [sp, #4]
   1297e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12982:	bf00      	nop
   12984:	b003      	add	sp, #12
   12986:	f85d fb04 	ldr.w	pc, [sp], #4
   1298a:	bf00      	nop
   1298c:	1fff9590 	.word	0x1fff9590
   12990:	1fff958c 	.word	0x1fff958c

00012994 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   12994:	b500      	push	{lr}
   12996:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12998:	f7ee f984 	bl	ca4 <Sys_GetCoreID>
   1299c:	4603      	mov	r3, r0
   1299e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]--;
   129a0:	4a0d      	ldr	r2, [pc, #52]	; (129d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   129a2:	9b01      	ldr	r3, [sp, #4]
   129a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129a8:	1e5a      	subs	r2, r3, #1
   129aa:	490b      	ldr	r1, [pc, #44]	; (129d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   129ac:	9b01      	ldr	r3, [sp, #4]
   129ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
   129b2:	4a0a      	ldr	r2, [pc, #40]	; (129dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x48>)
   129b4:	9b01      	ldr	r3, [sp, #4]
   129b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129ba:	f003 0301 	and.w	r3, r3, #1
   129be:	2b00      	cmp	r3, #0
   129c0:	d106      	bne.n	129d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
   129c2:	4a05      	ldr	r2, [pc, #20]	; (129d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   129c4:	9b01      	ldr	r3, [sp, #4]
   129c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129ca:	2b00      	cmp	r3, #0
   129cc:	d100      	bne.n	129d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   129ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   129d0:	bf00      	nop
   129d2:	b003      	add	sp, #12
   129d4:	f85d fb04 	ldr.w	pc, [sp], #4
   129d8:	1fff9590 	.word	0x1fff9590
   129dc:	1fff958c 	.word	0x1fff958c

000129e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   129e0:	b500      	push	{lr}
   129e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   129e4:	f7ee f95e 	bl	ca4 <Sys_GetCoreID>
   129e8:	4603      	mov	r3, r0
   129ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId])
   129ec:	4a10      	ldr	r2, [pc, #64]	; (12a30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   129ee:	9b01      	ldr	r3, [sp, #4]
   129f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129f4:	2b00      	cmp	r3, #0
   129f6:	d10d      	bne.n	12a14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   129f8:	f7ed ffbc 	bl	974 <Adc_schm_read_msr>
   129fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   129fe:	9b00      	ldr	r3, [sp, #0]
   12a00:	f003 0301 	and.w	r3, r3, #1
   12a04:	2b00      	cmp	r3, #0
   12a06:	d100      	bne.n	12a0a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12a08:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_70[u32CoreId] = msr;
   12a0a:	490a      	ldr	r1, [pc, #40]	; (12a34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x54>)
   12a0c:	9b01      	ldr	r3, [sp, #4]
   12a0e:	9a00      	ldr	r2, [sp, #0]
   12a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]++;
   12a14:	4a06      	ldr	r2, [pc, #24]	; (12a30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   12a16:	9b01      	ldr	r3, [sp, #4]
   12a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a1c:	1c5a      	adds	r2, r3, #1
   12a1e:	4904      	ldr	r1, [pc, #16]	; (12a30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   12a20:	9b01      	ldr	r3, [sp, #4]
   12a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12a26:	bf00      	nop
   12a28:	b003      	add	sp, #12
   12a2a:	f85d fb04 	ldr.w	pc, [sp], #4
   12a2e:	bf00      	nop
   12a30:	1fff9598 	.word	0x1fff9598
   12a34:	1fff9594 	.word	0x1fff9594

00012a38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   12a38:	b500      	push	{lr}
   12a3a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a3c:	f7ee f932 	bl	ca4 <Sys_GetCoreID>
   12a40:	4603      	mov	r3, r0
   12a42:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]--;
   12a44:	4a0d      	ldr	r2, [pc, #52]	; (12a7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   12a46:	9b01      	ldr	r3, [sp, #4]
   12a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a4c:	1e5a      	subs	r2, r3, #1
   12a4e:	490b      	ldr	r1, [pc, #44]	; (12a7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   12a50:	9b01      	ldr	r3, [sp, #4]
   12a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
   12a56:	4a0a      	ldr	r2, [pc, #40]	; (12a80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x48>)
   12a58:	9b01      	ldr	r3, [sp, #4]
   12a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a5e:	f003 0301 	and.w	r3, r3, #1
   12a62:	2b00      	cmp	r3, #0
   12a64:	d106      	bne.n	12a74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
   12a66:	4a05      	ldr	r2, [pc, #20]	; (12a7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   12a68:	9b01      	ldr	r3, [sp, #4]
   12a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a6e:	2b00      	cmp	r3, #0
   12a70:	d100      	bne.n	12a74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12a72:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12a74:	bf00      	nop
   12a76:	b003      	add	sp, #12
   12a78:	f85d fb04 	ldr.w	pc, [sp], #4
   12a7c:	1fff9598 	.word	0x1fff9598
   12a80:	1fff9594 	.word	0x1fff9594

00012a84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   12a84:	b500      	push	{lr}
   12a86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a88:	f7ee f90c 	bl	ca4 <Sys_GetCoreID>
   12a8c:	4603      	mov	r3, r0
   12a8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId])
   12a90:	4a10      	ldr	r2, [pc, #64]	; (12ad4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   12a92:	9b01      	ldr	r3, [sp, #4]
   12a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a98:	2b00      	cmp	r3, #0
   12a9a:	d10d      	bne.n	12ab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12a9c:	f7ed ff6a 	bl	974 <Adc_schm_read_msr>
   12aa0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12aa2:	9b00      	ldr	r3, [sp, #0]
   12aa4:	f003 0301 	and.w	r3, r3, #1
   12aa8:	2b00      	cmp	r3, #0
   12aaa:	d100      	bne.n	12aae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12aac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_71[u32CoreId] = msr;
   12aae:	490a      	ldr	r1, [pc, #40]	; (12ad8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x54>)
   12ab0:	9b01      	ldr	r3, [sp, #4]
   12ab2:	9a00      	ldr	r2, [sp, #0]
   12ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]++;
   12ab8:	4a06      	ldr	r2, [pc, #24]	; (12ad4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   12aba:	9b01      	ldr	r3, [sp, #4]
   12abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ac0:	1c5a      	adds	r2, r3, #1
   12ac2:	4904      	ldr	r1, [pc, #16]	; (12ad4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   12ac4:	9b01      	ldr	r3, [sp, #4]
   12ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12aca:	bf00      	nop
   12acc:	b003      	add	sp, #12
   12ace:	f85d fb04 	ldr.w	pc, [sp], #4
   12ad2:	bf00      	nop
   12ad4:	1fff95a0 	.word	0x1fff95a0
   12ad8:	1fff959c 	.word	0x1fff959c

00012adc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   12adc:	b500      	push	{lr}
   12ade:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ae0:	f7ee f8e0 	bl	ca4 <Sys_GetCoreID>
   12ae4:	4603      	mov	r3, r0
   12ae6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]--;
   12ae8:	4a0d      	ldr	r2, [pc, #52]	; (12b20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   12aea:	9b01      	ldr	r3, [sp, #4]
   12aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12af0:	1e5a      	subs	r2, r3, #1
   12af2:	490b      	ldr	r1, [pc, #44]	; (12b20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   12af4:	9b01      	ldr	r3, [sp, #4]
   12af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
   12afa:	4a0a      	ldr	r2, [pc, #40]	; (12b24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x48>)
   12afc:	9b01      	ldr	r3, [sp, #4]
   12afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b02:	f003 0301 	and.w	r3, r3, #1
   12b06:	2b00      	cmp	r3, #0
   12b08:	d106      	bne.n	12b18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
   12b0a:	4a05      	ldr	r2, [pc, #20]	; (12b20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   12b0c:	9b01      	ldr	r3, [sp, #4]
   12b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b12:	2b00      	cmp	r3, #0
   12b14:	d100      	bne.n	12b18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12b16:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12b18:	bf00      	nop
   12b1a:	b003      	add	sp, #12
   12b1c:	f85d fb04 	ldr.w	pc, [sp], #4
   12b20:	1fff95a0 	.word	0x1fff95a0
   12b24:	1fff959c 	.word	0x1fff959c

00012b28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   12b28:	b500      	push	{lr}
   12b2a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b2c:	f7ee f8ba 	bl	ca4 <Sys_GetCoreID>
   12b30:	4603      	mov	r3, r0
   12b32:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId])
   12b34:	4a10      	ldr	r2, [pc, #64]	; (12b78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   12b36:	9b01      	ldr	r3, [sp, #4]
   12b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b3c:	2b00      	cmp	r3, #0
   12b3e:	d10d      	bne.n	12b5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12b40:	f7ed ff18 	bl	974 <Adc_schm_read_msr>
   12b44:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12b46:	9b00      	ldr	r3, [sp, #0]
   12b48:	f003 0301 	and.w	r3, r3, #1
   12b4c:	2b00      	cmp	r3, #0
   12b4e:	d100      	bne.n	12b52 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12b50:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_72[u32CoreId] = msr;
   12b52:	490a      	ldr	r1, [pc, #40]	; (12b7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x54>)
   12b54:	9b01      	ldr	r3, [sp, #4]
   12b56:	9a00      	ldr	r2, [sp, #0]
   12b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]++;
   12b5c:	4a06      	ldr	r2, [pc, #24]	; (12b78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   12b5e:	9b01      	ldr	r3, [sp, #4]
   12b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b64:	1c5a      	adds	r2, r3, #1
   12b66:	4904      	ldr	r1, [pc, #16]	; (12b78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   12b68:	9b01      	ldr	r3, [sp, #4]
   12b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12b6e:	bf00      	nop
   12b70:	b003      	add	sp, #12
   12b72:	f85d fb04 	ldr.w	pc, [sp], #4
   12b76:	bf00      	nop
   12b78:	1fff95a8 	.word	0x1fff95a8
   12b7c:	1fff95a4 	.word	0x1fff95a4

00012b80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   12b80:	b500      	push	{lr}
   12b82:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b84:	f7ee f88e 	bl	ca4 <Sys_GetCoreID>
   12b88:	4603      	mov	r3, r0
   12b8a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]--;
   12b8c:	4a0d      	ldr	r2, [pc, #52]	; (12bc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   12b8e:	9b01      	ldr	r3, [sp, #4]
   12b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b94:	1e5a      	subs	r2, r3, #1
   12b96:	490b      	ldr	r1, [pc, #44]	; (12bc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   12b98:	9b01      	ldr	r3, [sp, #4]
   12b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
   12b9e:	4a0a      	ldr	r2, [pc, #40]	; (12bc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x48>)
   12ba0:	9b01      	ldr	r3, [sp, #4]
   12ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ba6:	f003 0301 	and.w	r3, r3, #1
   12baa:	2b00      	cmp	r3, #0
   12bac:	d106      	bne.n	12bbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
   12bae:	4a05      	ldr	r2, [pc, #20]	; (12bc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   12bb0:	9b01      	ldr	r3, [sp, #4]
   12bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bb6:	2b00      	cmp	r3, #0
   12bb8:	d100      	bne.n	12bbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12bba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12bbc:	bf00      	nop
   12bbe:	b003      	add	sp, #12
   12bc0:	f85d fb04 	ldr.w	pc, [sp], #4
   12bc4:	1fff95a8 	.word	0x1fff95a8
   12bc8:	1fff95a4 	.word	0x1fff95a4

00012bcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   12bcc:	b500      	push	{lr}
   12bce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12bd0:	f7ee f868 	bl	ca4 <Sys_GetCoreID>
   12bd4:	4603      	mov	r3, r0
   12bd6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId])
   12bd8:	4a10      	ldr	r2, [pc, #64]	; (12c1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   12bda:	9b01      	ldr	r3, [sp, #4]
   12bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12be0:	2b00      	cmp	r3, #0
   12be2:	d10d      	bne.n	12c00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12be4:	f7ed fec6 	bl	974 <Adc_schm_read_msr>
   12be8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12bea:	9b00      	ldr	r3, [sp, #0]
   12bec:	f003 0301 	and.w	r3, r3, #1
   12bf0:	2b00      	cmp	r3, #0
   12bf2:	d100      	bne.n	12bf6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12bf4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_73[u32CoreId] = msr;
   12bf6:	490a      	ldr	r1, [pc, #40]	; (12c20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x54>)
   12bf8:	9b01      	ldr	r3, [sp, #4]
   12bfa:	9a00      	ldr	r2, [sp, #0]
   12bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]++;
   12c00:	4a06      	ldr	r2, [pc, #24]	; (12c1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   12c02:	9b01      	ldr	r3, [sp, #4]
   12c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c08:	1c5a      	adds	r2, r3, #1
   12c0a:	4904      	ldr	r1, [pc, #16]	; (12c1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   12c0c:	9b01      	ldr	r3, [sp, #4]
   12c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12c12:	bf00      	nop
   12c14:	b003      	add	sp, #12
   12c16:	f85d fb04 	ldr.w	pc, [sp], #4
   12c1a:	bf00      	nop
   12c1c:	1fff95b0 	.word	0x1fff95b0
   12c20:	1fff95ac 	.word	0x1fff95ac

00012c24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   12c24:	b500      	push	{lr}
   12c26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c28:	f7ee f83c 	bl	ca4 <Sys_GetCoreID>
   12c2c:	4603      	mov	r3, r0
   12c2e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]--;
   12c30:	4a0d      	ldr	r2, [pc, #52]	; (12c68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   12c32:	9b01      	ldr	r3, [sp, #4]
   12c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c38:	1e5a      	subs	r2, r3, #1
   12c3a:	490b      	ldr	r1, [pc, #44]	; (12c68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   12c3c:	9b01      	ldr	r3, [sp, #4]
   12c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
   12c42:	4a0a      	ldr	r2, [pc, #40]	; (12c6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x48>)
   12c44:	9b01      	ldr	r3, [sp, #4]
   12c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c4a:	f003 0301 	and.w	r3, r3, #1
   12c4e:	2b00      	cmp	r3, #0
   12c50:	d106      	bne.n	12c60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
   12c52:	4a05      	ldr	r2, [pc, #20]	; (12c68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   12c54:	9b01      	ldr	r3, [sp, #4]
   12c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c5a:	2b00      	cmp	r3, #0
   12c5c:	d100      	bne.n	12c60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12c5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12c60:	bf00      	nop
   12c62:	b003      	add	sp, #12
   12c64:	f85d fb04 	ldr.w	pc, [sp], #4
   12c68:	1fff95b0 	.word	0x1fff95b0
   12c6c:	1fff95ac 	.word	0x1fff95ac

00012c70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   12c70:	b500      	push	{lr}
   12c72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c74:	f7ee f816 	bl	ca4 <Sys_GetCoreID>
   12c78:	4603      	mov	r3, r0
   12c7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId])
   12c7c:	4a10      	ldr	r2, [pc, #64]	; (12cc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   12c7e:	9b01      	ldr	r3, [sp, #4]
   12c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c84:	2b00      	cmp	r3, #0
   12c86:	d10d      	bne.n	12ca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12c88:	f7ed fe74 	bl	974 <Adc_schm_read_msr>
   12c8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12c8e:	9b00      	ldr	r3, [sp, #0]
   12c90:	f003 0301 	and.w	r3, r3, #1
   12c94:	2b00      	cmp	r3, #0
   12c96:	d100      	bne.n	12c9a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12c98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_74[u32CoreId] = msr;
   12c9a:	490a      	ldr	r1, [pc, #40]	; (12cc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x54>)
   12c9c:	9b01      	ldr	r3, [sp, #4]
   12c9e:	9a00      	ldr	r2, [sp, #0]
   12ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]++;
   12ca4:	4a06      	ldr	r2, [pc, #24]	; (12cc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   12ca6:	9b01      	ldr	r3, [sp, #4]
   12ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cac:	1c5a      	adds	r2, r3, #1
   12cae:	4904      	ldr	r1, [pc, #16]	; (12cc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   12cb0:	9b01      	ldr	r3, [sp, #4]
   12cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12cb6:	bf00      	nop
   12cb8:	b003      	add	sp, #12
   12cba:	f85d fb04 	ldr.w	pc, [sp], #4
   12cbe:	bf00      	nop
   12cc0:	1fff95b8 	.word	0x1fff95b8
   12cc4:	1fff95b4 	.word	0x1fff95b4

00012cc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   12cc8:	b500      	push	{lr}
   12cca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ccc:	f7ed ffea 	bl	ca4 <Sys_GetCoreID>
   12cd0:	4603      	mov	r3, r0
   12cd2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]--;
   12cd4:	4a0d      	ldr	r2, [pc, #52]	; (12d0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   12cd6:	9b01      	ldr	r3, [sp, #4]
   12cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cdc:	1e5a      	subs	r2, r3, #1
   12cde:	490b      	ldr	r1, [pc, #44]	; (12d0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   12ce0:	9b01      	ldr	r3, [sp, #4]
   12ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_74[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]))         /*if interrupts were enabled*/
   12ce6:	4a0a      	ldr	r2, [pc, #40]	; (12d10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x48>)
   12ce8:	9b01      	ldr	r3, [sp, #4]
   12cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cee:	f003 0301 	and.w	r3, r3, #1
   12cf2:	2b00      	cmp	r3, #0
   12cf4:	d106      	bne.n	12d04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
   12cf6:	4a05      	ldr	r2, [pc, #20]	; (12d0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   12cf8:	9b01      	ldr	r3, [sp, #4]
   12cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cfe:	2b00      	cmp	r3, #0
   12d00:	d100      	bne.n	12d04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12d02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12d04:	bf00      	nop
   12d06:	b003      	add	sp, #12
   12d08:	f85d fb04 	ldr.w	pc, [sp], #4
   12d0c:	1fff95b8 	.word	0x1fff95b8
   12d10:	1fff95b4 	.word	0x1fff95b4

00012d14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   12d14:	b500      	push	{lr}
   12d16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d18:	f7ed ffc4 	bl	ca4 <Sys_GetCoreID>
   12d1c:	4603      	mov	r3, r0
   12d1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId])
   12d20:	4a10      	ldr	r2, [pc, #64]	; (12d64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   12d22:	9b01      	ldr	r3, [sp, #4]
   12d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d28:	2b00      	cmp	r3, #0
   12d2a:	d10d      	bne.n	12d48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12d2c:	f7ed fe22 	bl	974 <Adc_schm_read_msr>
   12d30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12d32:	9b00      	ldr	r3, [sp, #0]
   12d34:	f003 0301 	and.w	r3, r3, #1
   12d38:	2b00      	cmp	r3, #0
   12d3a:	d100      	bne.n	12d3e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12d3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_75[u32CoreId] = msr;
   12d3e:	490a      	ldr	r1, [pc, #40]	; (12d68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x54>)
   12d40:	9b01      	ldr	r3, [sp, #4]
   12d42:	9a00      	ldr	r2, [sp, #0]
   12d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]++;
   12d48:	4a06      	ldr	r2, [pc, #24]	; (12d64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   12d4a:	9b01      	ldr	r3, [sp, #4]
   12d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d50:	1c5a      	adds	r2, r3, #1
   12d52:	4904      	ldr	r1, [pc, #16]	; (12d64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   12d54:	9b01      	ldr	r3, [sp, #4]
   12d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12d5a:	bf00      	nop
   12d5c:	b003      	add	sp, #12
   12d5e:	f85d fb04 	ldr.w	pc, [sp], #4
   12d62:	bf00      	nop
   12d64:	1fff95c0 	.word	0x1fff95c0
   12d68:	1fff95bc 	.word	0x1fff95bc

00012d6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   12d6c:	b500      	push	{lr}
   12d6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d70:	f7ed ff98 	bl	ca4 <Sys_GetCoreID>
   12d74:	4603      	mov	r3, r0
   12d76:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]--;
   12d78:	4a0d      	ldr	r2, [pc, #52]	; (12db0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   12d7a:	9b01      	ldr	r3, [sp, #4]
   12d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d80:	1e5a      	subs	r2, r3, #1
   12d82:	490b      	ldr	r1, [pc, #44]	; (12db0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   12d84:	9b01      	ldr	r3, [sp, #4]
   12d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_75[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]))         /*if interrupts were enabled*/
   12d8a:	4a0a      	ldr	r2, [pc, #40]	; (12db4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x48>)
   12d8c:	9b01      	ldr	r3, [sp, #4]
   12d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d92:	f003 0301 	and.w	r3, r3, #1
   12d96:	2b00      	cmp	r3, #0
   12d98:	d106      	bne.n	12da8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
   12d9a:	4a05      	ldr	r2, [pc, #20]	; (12db0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   12d9c:	9b01      	ldr	r3, [sp, #4]
   12d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12da2:	2b00      	cmp	r3, #0
   12da4:	d100      	bne.n	12da8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12da6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12da8:	bf00      	nop
   12daa:	b003      	add	sp, #12
   12dac:	f85d fb04 	ldr.w	pc, [sp], #4
   12db0:	1fff95c0 	.word	0x1fff95c0
   12db4:	1fff95bc 	.word	0x1fff95bc

00012db8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   12db8:	b500      	push	{lr}
   12dba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12dbc:	f7ed ff72 	bl	ca4 <Sys_GetCoreID>
   12dc0:	4603      	mov	r3, r0
   12dc2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId])
   12dc4:	4a10      	ldr	r2, [pc, #64]	; (12e08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   12dc6:	9b01      	ldr	r3, [sp, #4]
   12dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12dcc:	2b00      	cmp	r3, #0
   12dce:	d10d      	bne.n	12dec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12dd0:	f7ed fdd0 	bl	974 <Adc_schm_read_msr>
   12dd4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12dd6:	9b00      	ldr	r3, [sp, #0]
   12dd8:	f003 0301 	and.w	r3, r3, #1
   12ddc:	2b00      	cmp	r3, #0
   12dde:	d100      	bne.n	12de2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12de0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_76[u32CoreId] = msr;
   12de2:	490a      	ldr	r1, [pc, #40]	; (12e0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x54>)
   12de4:	9b01      	ldr	r3, [sp, #4]
   12de6:	9a00      	ldr	r2, [sp, #0]
   12de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]++;
   12dec:	4a06      	ldr	r2, [pc, #24]	; (12e08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   12dee:	9b01      	ldr	r3, [sp, #4]
   12df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12df4:	1c5a      	adds	r2, r3, #1
   12df6:	4904      	ldr	r1, [pc, #16]	; (12e08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   12df8:	9b01      	ldr	r3, [sp, #4]
   12dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12dfe:	bf00      	nop
   12e00:	b003      	add	sp, #12
   12e02:	f85d fb04 	ldr.w	pc, [sp], #4
   12e06:	bf00      	nop
   12e08:	1fff95c8 	.word	0x1fff95c8
   12e0c:	1fff95c4 	.word	0x1fff95c4

00012e10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   12e10:	b500      	push	{lr}
   12e12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e14:	f7ed ff46 	bl	ca4 <Sys_GetCoreID>
   12e18:	4603      	mov	r3, r0
   12e1a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]--;
   12e1c:	4a0d      	ldr	r2, [pc, #52]	; (12e54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   12e1e:	9b01      	ldr	r3, [sp, #4]
   12e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e24:	1e5a      	subs	r2, r3, #1
   12e26:	490b      	ldr	r1, [pc, #44]	; (12e54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   12e28:	9b01      	ldr	r3, [sp, #4]
   12e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_76[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]))         /*if interrupts were enabled*/
   12e2e:	4a0a      	ldr	r2, [pc, #40]	; (12e58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x48>)
   12e30:	9b01      	ldr	r3, [sp, #4]
   12e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e36:	f003 0301 	and.w	r3, r3, #1
   12e3a:	2b00      	cmp	r3, #0
   12e3c:	d106      	bne.n	12e4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
   12e3e:	4a05      	ldr	r2, [pc, #20]	; (12e54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   12e40:	9b01      	ldr	r3, [sp, #4]
   12e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e46:	2b00      	cmp	r3, #0
   12e48:	d100      	bne.n	12e4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12e4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12e4c:	bf00      	nop
   12e4e:	b003      	add	sp, #12
   12e50:	f85d fb04 	ldr.w	pc, [sp], #4
   12e54:	1fff95c8 	.word	0x1fff95c8
   12e58:	1fff95c4 	.word	0x1fff95c4

00012e5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   12e5c:	b500      	push	{lr}
   12e5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e60:	f7ed ff20 	bl	ca4 <Sys_GetCoreID>
   12e64:	4603      	mov	r3, r0
   12e66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId])
   12e68:	4a10      	ldr	r2, [pc, #64]	; (12eac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   12e6a:	9b01      	ldr	r3, [sp, #4]
   12e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e70:	2b00      	cmp	r3, #0
   12e72:	d10d      	bne.n	12e90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12e74:	f7ed fd7e 	bl	974 <Adc_schm_read_msr>
   12e78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12e7a:	9b00      	ldr	r3, [sp, #0]
   12e7c:	f003 0301 	and.w	r3, r3, #1
   12e80:	2b00      	cmp	r3, #0
   12e82:	d100      	bne.n	12e86 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12e84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_77[u32CoreId] = msr;
   12e86:	490a      	ldr	r1, [pc, #40]	; (12eb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x54>)
   12e88:	9b01      	ldr	r3, [sp, #4]
   12e8a:	9a00      	ldr	r2, [sp, #0]
   12e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]++;
   12e90:	4a06      	ldr	r2, [pc, #24]	; (12eac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   12e92:	9b01      	ldr	r3, [sp, #4]
   12e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e98:	1c5a      	adds	r2, r3, #1
   12e9a:	4904      	ldr	r1, [pc, #16]	; (12eac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   12e9c:	9b01      	ldr	r3, [sp, #4]
   12e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12ea2:	bf00      	nop
   12ea4:	b003      	add	sp, #12
   12ea6:	f85d fb04 	ldr.w	pc, [sp], #4
   12eaa:	bf00      	nop
   12eac:	1fff95d0 	.word	0x1fff95d0
   12eb0:	1fff95cc 	.word	0x1fff95cc

00012eb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   12eb4:	b500      	push	{lr}
   12eb6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12eb8:	f7ed fef4 	bl	ca4 <Sys_GetCoreID>
   12ebc:	4603      	mov	r3, r0
   12ebe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]--;
   12ec0:	4a0d      	ldr	r2, [pc, #52]	; (12ef8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   12ec2:	9b01      	ldr	r3, [sp, #4]
   12ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ec8:	1e5a      	subs	r2, r3, #1
   12eca:	490b      	ldr	r1, [pc, #44]	; (12ef8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   12ecc:	9b01      	ldr	r3, [sp, #4]
   12ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_77[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]))         /*if interrupts were enabled*/
   12ed2:	4a0a      	ldr	r2, [pc, #40]	; (12efc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x48>)
   12ed4:	9b01      	ldr	r3, [sp, #4]
   12ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12eda:	f003 0301 	and.w	r3, r3, #1
   12ede:	2b00      	cmp	r3, #0
   12ee0:	d106      	bne.n	12ef0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
   12ee2:	4a05      	ldr	r2, [pc, #20]	; (12ef8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   12ee4:	9b01      	ldr	r3, [sp, #4]
   12ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12eea:	2b00      	cmp	r3, #0
   12eec:	d100      	bne.n	12ef0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12eee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12ef0:	bf00      	nop
   12ef2:	b003      	add	sp, #12
   12ef4:	f85d fb04 	ldr.w	pc, [sp], #4
   12ef8:	1fff95d0 	.word	0x1fff95d0
   12efc:	1fff95cc 	.word	0x1fff95cc

00012f00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   12f00:	b500      	push	{lr}
   12f02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f04:	f7ed fece 	bl	ca4 <Sys_GetCoreID>
   12f08:	4603      	mov	r3, r0
   12f0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId])
   12f0c:	4a10      	ldr	r2, [pc, #64]	; (12f50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   12f0e:	9b01      	ldr	r3, [sp, #4]
   12f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f14:	2b00      	cmp	r3, #0
   12f16:	d10d      	bne.n	12f34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12f18:	f7ed fd2c 	bl	974 <Adc_schm_read_msr>
   12f1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12f1e:	9b00      	ldr	r3, [sp, #0]
   12f20:	f003 0301 	and.w	r3, r3, #1
   12f24:	2b00      	cmp	r3, #0
   12f26:	d100      	bne.n	12f2a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12f28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_78[u32CoreId] = msr;
   12f2a:	490a      	ldr	r1, [pc, #40]	; (12f54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x54>)
   12f2c:	9b01      	ldr	r3, [sp, #4]
   12f2e:	9a00      	ldr	r2, [sp, #0]
   12f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]++;
   12f34:	4a06      	ldr	r2, [pc, #24]	; (12f50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   12f36:	9b01      	ldr	r3, [sp, #4]
   12f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f3c:	1c5a      	adds	r2, r3, #1
   12f3e:	4904      	ldr	r1, [pc, #16]	; (12f50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   12f40:	9b01      	ldr	r3, [sp, #4]
   12f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12f46:	bf00      	nop
   12f48:	b003      	add	sp, #12
   12f4a:	f85d fb04 	ldr.w	pc, [sp], #4
   12f4e:	bf00      	nop
   12f50:	1fff95d8 	.word	0x1fff95d8
   12f54:	1fff95d4 	.word	0x1fff95d4

00012f58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   12f58:	b500      	push	{lr}
   12f5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f5c:	f7ed fea2 	bl	ca4 <Sys_GetCoreID>
   12f60:	4603      	mov	r3, r0
   12f62:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]--;
   12f64:	4a0d      	ldr	r2, [pc, #52]	; (12f9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   12f66:	9b01      	ldr	r3, [sp, #4]
   12f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f6c:	1e5a      	subs	r2, r3, #1
   12f6e:	490b      	ldr	r1, [pc, #44]	; (12f9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   12f70:	9b01      	ldr	r3, [sp, #4]
   12f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_78[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]))         /*if interrupts were enabled*/
   12f76:	4a0a      	ldr	r2, [pc, #40]	; (12fa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x48>)
   12f78:	9b01      	ldr	r3, [sp, #4]
   12f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f7e:	f003 0301 	and.w	r3, r3, #1
   12f82:	2b00      	cmp	r3, #0
   12f84:	d106      	bne.n	12f94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
   12f86:	4a05      	ldr	r2, [pc, #20]	; (12f9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   12f88:	9b01      	ldr	r3, [sp, #4]
   12f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f8e:	2b00      	cmp	r3, #0
   12f90:	d100      	bne.n	12f94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12f92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12f94:	bf00      	nop
   12f96:	b003      	add	sp, #12
   12f98:	f85d fb04 	ldr.w	pc, [sp], #4
   12f9c:	1fff95d8 	.word	0x1fff95d8
   12fa0:	1fff95d4 	.word	0x1fff95d4

00012fa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   12fa4:	b500      	push	{lr}
   12fa6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12fa8:	f7ed fe7c 	bl	ca4 <Sys_GetCoreID>
   12fac:	4603      	mov	r3, r0
   12fae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId])
   12fb0:	4a10      	ldr	r2, [pc, #64]	; (12ff4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   12fb2:	9b01      	ldr	r3, [sp, #4]
   12fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fb8:	2b00      	cmp	r3, #0
   12fba:	d10d      	bne.n	12fd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12fbc:	f7ed fcda 	bl	974 <Adc_schm_read_msr>
   12fc0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12fc2:	9b00      	ldr	r3, [sp, #0]
   12fc4:	f003 0301 	and.w	r3, r3, #1
   12fc8:	2b00      	cmp	r3, #0
   12fca:	d100      	bne.n	12fce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12fcc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_79[u32CoreId] = msr;
   12fce:	490a      	ldr	r1, [pc, #40]	; (12ff8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x54>)
   12fd0:	9b01      	ldr	r3, [sp, #4]
   12fd2:	9a00      	ldr	r2, [sp, #0]
   12fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]++;
   12fd8:	4a06      	ldr	r2, [pc, #24]	; (12ff4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   12fda:	9b01      	ldr	r3, [sp, #4]
   12fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fe0:	1c5a      	adds	r2, r3, #1
   12fe2:	4904      	ldr	r1, [pc, #16]	; (12ff4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   12fe4:	9b01      	ldr	r3, [sp, #4]
   12fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12fea:	bf00      	nop
   12fec:	b003      	add	sp, #12
   12fee:	f85d fb04 	ldr.w	pc, [sp], #4
   12ff2:	bf00      	nop
   12ff4:	1fff95e0 	.word	0x1fff95e0
   12ff8:	1fff95dc 	.word	0x1fff95dc

00012ffc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   12ffc:	b500      	push	{lr}
   12ffe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13000:	f7ed fe50 	bl	ca4 <Sys_GetCoreID>
   13004:	4603      	mov	r3, r0
   13006:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]--;
   13008:	4a0d      	ldr	r2, [pc, #52]	; (13040 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   1300a:	9b01      	ldr	r3, [sp, #4]
   1300c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13010:	1e5a      	subs	r2, r3, #1
   13012:	490b      	ldr	r1, [pc, #44]	; (13040 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   13014:	9b01      	ldr	r3, [sp, #4]
   13016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_79[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]))         /*if interrupts were enabled*/
   1301a:	4a0a      	ldr	r2, [pc, #40]	; (13044 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x48>)
   1301c:	9b01      	ldr	r3, [sp, #4]
   1301e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13022:	f003 0301 	and.w	r3, r3, #1
   13026:	2b00      	cmp	r3, #0
   13028:	d106      	bne.n	13038 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
   1302a:	4a05      	ldr	r2, [pc, #20]	; (13040 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   1302c:	9b01      	ldr	r3, [sp, #4]
   1302e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13032:	2b00      	cmp	r3, #0
   13034:	d100      	bne.n	13038 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13036:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13038:	bf00      	nop
   1303a:	b003      	add	sp, #12
   1303c:	f85d fb04 	ldr.w	pc, [sp], #4
   13040:	1fff95e0 	.word	0x1fff95e0
   13044:	1fff95dc 	.word	0x1fff95dc

00013048 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   13048:	b500      	push	{lr}
   1304a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1304c:	f7ed fe2a 	bl	ca4 <Sys_GetCoreID>
   13050:	4603      	mov	r3, r0
   13052:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId])
   13054:	4a10      	ldr	r2, [pc, #64]	; (13098 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   13056:	9b01      	ldr	r3, [sp, #4]
   13058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1305c:	2b00      	cmp	r3, #0
   1305e:	d10d      	bne.n	1307c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13060:	f7ed fc88 	bl	974 <Adc_schm_read_msr>
   13064:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13066:	9b00      	ldr	r3, [sp, #0]
   13068:	f003 0301 	and.w	r3, r3, #1
   1306c:	2b00      	cmp	r3, #0
   1306e:	d100      	bne.n	13072 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13070:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_80[u32CoreId] = msr;
   13072:	490a      	ldr	r1, [pc, #40]	; (1309c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x54>)
   13074:	9b01      	ldr	r3, [sp, #4]
   13076:	9a00      	ldr	r2, [sp, #0]
   13078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]++;
   1307c:	4a06      	ldr	r2, [pc, #24]	; (13098 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   1307e:	9b01      	ldr	r3, [sp, #4]
   13080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13084:	1c5a      	adds	r2, r3, #1
   13086:	4904      	ldr	r1, [pc, #16]	; (13098 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   13088:	9b01      	ldr	r3, [sp, #4]
   1308a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1308e:	bf00      	nop
   13090:	b003      	add	sp, #12
   13092:	f85d fb04 	ldr.w	pc, [sp], #4
   13096:	bf00      	nop
   13098:	1fff95e8 	.word	0x1fff95e8
   1309c:	1fff95e4 	.word	0x1fff95e4

000130a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   130a0:	b500      	push	{lr}
   130a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   130a4:	f7ed fdfe 	bl	ca4 <Sys_GetCoreID>
   130a8:	4603      	mov	r3, r0
   130aa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]--;
   130ac:	4a0d      	ldr	r2, [pc, #52]	; (130e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   130ae:	9b01      	ldr	r3, [sp, #4]
   130b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130b4:	1e5a      	subs	r2, r3, #1
   130b6:	490b      	ldr	r1, [pc, #44]	; (130e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   130b8:	9b01      	ldr	r3, [sp, #4]
   130ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_80[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]))         /*if interrupts were enabled*/
   130be:	4a0a      	ldr	r2, [pc, #40]	; (130e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x48>)
   130c0:	9b01      	ldr	r3, [sp, #4]
   130c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130c6:	f003 0301 	and.w	r3, r3, #1
   130ca:	2b00      	cmp	r3, #0
   130cc:	d106      	bne.n	130dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
   130ce:	4a05      	ldr	r2, [pc, #20]	; (130e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   130d0:	9b01      	ldr	r3, [sp, #4]
   130d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130d6:	2b00      	cmp	r3, #0
   130d8:	d100      	bne.n	130dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   130da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   130dc:	bf00      	nop
   130de:	b003      	add	sp, #12
   130e0:	f85d fb04 	ldr.w	pc, [sp], #4
   130e4:	1fff95e8 	.word	0x1fff95e8
   130e8:	1fff95e4 	.word	0x1fff95e4

000130ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   130ec:	b500      	push	{lr}
   130ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   130f0:	f7ed fdd8 	bl	ca4 <Sys_GetCoreID>
   130f4:	4603      	mov	r3, r0
   130f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId])
   130f8:	4a10      	ldr	r2, [pc, #64]	; (1313c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   130fa:	9b01      	ldr	r3, [sp, #4]
   130fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13100:	2b00      	cmp	r3, #0
   13102:	d10d      	bne.n	13120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13104:	f7ed fc36 	bl	974 <Adc_schm_read_msr>
   13108:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1310a:	9b00      	ldr	r3, [sp, #0]
   1310c:	f003 0301 	and.w	r3, r3, #1
   13110:	2b00      	cmp	r3, #0
   13112:	d100      	bne.n	13116 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13114:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_81[u32CoreId] = msr;
   13116:	490a      	ldr	r1, [pc, #40]	; (13140 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x54>)
   13118:	9b01      	ldr	r3, [sp, #4]
   1311a:	9a00      	ldr	r2, [sp, #0]
   1311c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]++;
   13120:	4a06      	ldr	r2, [pc, #24]	; (1313c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   13122:	9b01      	ldr	r3, [sp, #4]
   13124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13128:	1c5a      	adds	r2, r3, #1
   1312a:	4904      	ldr	r1, [pc, #16]	; (1313c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   1312c:	9b01      	ldr	r3, [sp, #4]
   1312e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13132:	bf00      	nop
   13134:	b003      	add	sp, #12
   13136:	f85d fb04 	ldr.w	pc, [sp], #4
   1313a:	bf00      	nop
   1313c:	1fff95f0 	.word	0x1fff95f0
   13140:	1fff95ec 	.word	0x1fff95ec

00013144 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   13144:	b500      	push	{lr}
   13146:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13148:	f7ed fdac 	bl	ca4 <Sys_GetCoreID>
   1314c:	4603      	mov	r3, r0
   1314e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]--;
   13150:	4a0d      	ldr	r2, [pc, #52]	; (13188 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   13152:	9b01      	ldr	r3, [sp, #4]
   13154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13158:	1e5a      	subs	r2, r3, #1
   1315a:	490b      	ldr	r1, [pc, #44]	; (13188 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   1315c:	9b01      	ldr	r3, [sp, #4]
   1315e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_81[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]))         /*if interrupts were enabled*/
   13162:	4a0a      	ldr	r2, [pc, #40]	; (1318c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x48>)
   13164:	9b01      	ldr	r3, [sp, #4]
   13166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1316a:	f003 0301 	and.w	r3, r3, #1
   1316e:	2b00      	cmp	r3, #0
   13170:	d106      	bne.n	13180 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
   13172:	4a05      	ldr	r2, [pc, #20]	; (13188 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   13174:	9b01      	ldr	r3, [sp, #4]
   13176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1317a:	2b00      	cmp	r3, #0
   1317c:	d100      	bne.n	13180 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1317e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13180:	bf00      	nop
   13182:	b003      	add	sp, #12
   13184:	f85d fb04 	ldr.w	pc, [sp], #4
   13188:	1fff95f0 	.word	0x1fff95f0
   1318c:	1fff95ec 	.word	0x1fff95ec

00013190 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   13190:	b500      	push	{lr}
   13192:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13194:	f7ed fd86 	bl	ca4 <Sys_GetCoreID>
   13198:	4603      	mov	r3, r0
   1319a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId])
   1319c:	4a10      	ldr	r2, [pc, #64]	; (131e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   1319e:	9b01      	ldr	r3, [sp, #4]
   131a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131a4:	2b00      	cmp	r3, #0
   131a6:	d10d      	bne.n	131c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   131a8:	f7ed fbe4 	bl	974 <Adc_schm_read_msr>
   131ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   131ae:	9b00      	ldr	r3, [sp, #0]
   131b0:	f003 0301 	and.w	r3, r3, #1
   131b4:	2b00      	cmp	r3, #0
   131b6:	d100      	bne.n	131ba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   131b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_82[u32CoreId] = msr;
   131ba:	490a      	ldr	r1, [pc, #40]	; (131e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x54>)
   131bc:	9b01      	ldr	r3, [sp, #4]
   131be:	9a00      	ldr	r2, [sp, #0]
   131c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]++;
   131c4:	4a06      	ldr	r2, [pc, #24]	; (131e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   131c6:	9b01      	ldr	r3, [sp, #4]
   131c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131cc:	1c5a      	adds	r2, r3, #1
   131ce:	4904      	ldr	r1, [pc, #16]	; (131e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   131d0:	9b01      	ldr	r3, [sp, #4]
   131d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   131d6:	bf00      	nop
   131d8:	b003      	add	sp, #12
   131da:	f85d fb04 	ldr.w	pc, [sp], #4
   131de:	bf00      	nop
   131e0:	1fff95f8 	.word	0x1fff95f8
   131e4:	1fff95f4 	.word	0x1fff95f4

000131e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   131e8:	b500      	push	{lr}
   131ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   131ec:	f7ed fd5a 	bl	ca4 <Sys_GetCoreID>
   131f0:	4603      	mov	r3, r0
   131f2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]--;
   131f4:	4a0d      	ldr	r2, [pc, #52]	; (1322c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   131f6:	9b01      	ldr	r3, [sp, #4]
   131f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131fc:	1e5a      	subs	r2, r3, #1
   131fe:	490b      	ldr	r1, [pc, #44]	; (1322c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   13200:	9b01      	ldr	r3, [sp, #4]
   13202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_82[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]))         /*if interrupts were enabled*/
   13206:	4a0a      	ldr	r2, [pc, #40]	; (13230 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x48>)
   13208:	9b01      	ldr	r3, [sp, #4]
   1320a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1320e:	f003 0301 	and.w	r3, r3, #1
   13212:	2b00      	cmp	r3, #0
   13214:	d106      	bne.n	13224 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
   13216:	4a05      	ldr	r2, [pc, #20]	; (1322c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   13218:	9b01      	ldr	r3, [sp, #4]
   1321a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1321e:	2b00      	cmp	r3, #0
   13220:	d100      	bne.n	13224 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13222:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13224:	bf00      	nop
   13226:	b003      	add	sp, #12
   13228:	f85d fb04 	ldr.w	pc, [sp], #4
   1322c:	1fff95f8 	.word	0x1fff95f8
   13230:	1fff95f4 	.word	0x1fff95f4

00013234 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   13234:	b500      	push	{lr}
   13236:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13238:	f7ed fd34 	bl	ca4 <Sys_GetCoreID>
   1323c:	4603      	mov	r3, r0
   1323e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId])
   13240:	4a10      	ldr	r2, [pc, #64]	; (13284 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   13242:	9b01      	ldr	r3, [sp, #4]
   13244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13248:	2b00      	cmp	r3, #0
   1324a:	d10d      	bne.n	13268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1324c:	f7ed fb92 	bl	974 <Adc_schm_read_msr>
   13250:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13252:	9b00      	ldr	r3, [sp, #0]
   13254:	f003 0301 	and.w	r3, r3, #1
   13258:	2b00      	cmp	r3, #0
   1325a:	d100      	bne.n	1325e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1325c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_83[u32CoreId] = msr;
   1325e:	490a      	ldr	r1, [pc, #40]	; (13288 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x54>)
   13260:	9b01      	ldr	r3, [sp, #4]
   13262:	9a00      	ldr	r2, [sp, #0]
   13264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]++;
   13268:	4a06      	ldr	r2, [pc, #24]	; (13284 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   1326a:	9b01      	ldr	r3, [sp, #4]
   1326c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13270:	1c5a      	adds	r2, r3, #1
   13272:	4904      	ldr	r1, [pc, #16]	; (13284 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   13274:	9b01      	ldr	r3, [sp, #4]
   13276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1327a:	bf00      	nop
   1327c:	b003      	add	sp, #12
   1327e:	f85d fb04 	ldr.w	pc, [sp], #4
   13282:	bf00      	nop
   13284:	1fff9600 	.word	0x1fff9600
   13288:	1fff95fc 	.word	0x1fff95fc

0001328c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   1328c:	b500      	push	{lr}
   1328e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13290:	f7ed fd08 	bl	ca4 <Sys_GetCoreID>
   13294:	4603      	mov	r3, r0
   13296:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]--;
   13298:	4a0d      	ldr	r2, [pc, #52]	; (132d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   1329a:	9b01      	ldr	r3, [sp, #4]
   1329c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132a0:	1e5a      	subs	r2, r3, #1
   132a2:	490b      	ldr	r1, [pc, #44]	; (132d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   132a4:	9b01      	ldr	r3, [sp, #4]
   132a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_83[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]))         /*if interrupts were enabled*/
   132aa:	4a0a      	ldr	r2, [pc, #40]	; (132d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x48>)
   132ac:	9b01      	ldr	r3, [sp, #4]
   132ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132b2:	f003 0301 	and.w	r3, r3, #1
   132b6:	2b00      	cmp	r3, #0
   132b8:	d106      	bne.n	132c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
   132ba:	4a05      	ldr	r2, [pc, #20]	; (132d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   132bc:	9b01      	ldr	r3, [sp, #4]
   132be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132c2:	2b00      	cmp	r3, #0
   132c4:	d100      	bne.n	132c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   132c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   132c8:	bf00      	nop
   132ca:	b003      	add	sp, #12
   132cc:	f85d fb04 	ldr.w	pc, [sp], #4
   132d0:	1fff9600 	.word	0x1fff9600
   132d4:	1fff95fc 	.word	0x1fff95fc

000132d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   132d8:	b500      	push	{lr}
   132da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   132dc:	f7ed fce2 	bl	ca4 <Sys_GetCoreID>
   132e0:	4603      	mov	r3, r0
   132e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId])
   132e4:	4a10      	ldr	r2, [pc, #64]	; (13328 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   132e6:	9b01      	ldr	r3, [sp, #4]
   132e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132ec:	2b00      	cmp	r3, #0
   132ee:	d10d      	bne.n	1330c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   132f0:	f7ed fb40 	bl	974 <Adc_schm_read_msr>
   132f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   132f6:	9b00      	ldr	r3, [sp, #0]
   132f8:	f003 0301 	and.w	r3, r3, #1
   132fc:	2b00      	cmp	r3, #0
   132fe:	d100      	bne.n	13302 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13300:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_84[u32CoreId] = msr;
   13302:	490a      	ldr	r1, [pc, #40]	; (1332c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x54>)
   13304:	9b01      	ldr	r3, [sp, #4]
   13306:	9a00      	ldr	r2, [sp, #0]
   13308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]++;
   1330c:	4a06      	ldr	r2, [pc, #24]	; (13328 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   1330e:	9b01      	ldr	r3, [sp, #4]
   13310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13314:	1c5a      	adds	r2, r3, #1
   13316:	4904      	ldr	r1, [pc, #16]	; (13328 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   13318:	9b01      	ldr	r3, [sp, #4]
   1331a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1331e:	bf00      	nop
   13320:	b003      	add	sp, #12
   13322:	f85d fb04 	ldr.w	pc, [sp], #4
   13326:	bf00      	nop
   13328:	1fff9608 	.word	0x1fff9608
   1332c:	1fff9604 	.word	0x1fff9604

00013330 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   13330:	b500      	push	{lr}
   13332:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13334:	f7ed fcb6 	bl	ca4 <Sys_GetCoreID>
   13338:	4603      	mov	r3, r0
   1333a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]--;
   1333c:	4a0d      	ldr	r2, [pc, #52]	; (13374 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   1333e:	9b01      	ldr	r3, [sp, #4]
   13340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13344:	1e5a      	subs	r2, r3, #1
   13346:	490b      	ldr	r1, [pc, #44]	; (13374 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   13348:	9b01      	ldr	r3, [sp, #4]
   1334a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_84[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]))         /*if interrupts were enabled*/
   1334e:	4a0a      	ldr	r2, [pc, #40]	; (13378 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x48>)
   13350:	9b01      	ldr	r3, [sp, #4]
   13352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13356:	f003 0301 	and.w	r3, r3, #1
   1335a:	2b00      	cmp	r3, #0
   1335c:	d106      	bne.n	1336c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
   1335e:	4a05      	ldr	r2, [pc, #20]	; (13374 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   13360:	9b01      	ldr	r3, [sp, #4]
   13362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13366:	2b00      	cmp	r3, #0
   13368:	d100      	bne.n	1336c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1336a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1336c:	bf00      	nop
   1336e:	b003      	add	sp, #12
   13370:	f85d fb04 	ldr.w	pc, [sp], #4
   13374:	1fff9608 	.word	0x1fff9608
   13378:	1fff9604 	.word	0x1fff9604

0001337c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   1337c:	b500      	push	{lr}
   1337e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13380:	f7ed fc90 	bl	ca4 <Sys_GetCoreID>
   13384:	4603      	mov	r3, r0
   13386:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId])
   13388:	4a10      	ldr	r2, [pc, #64]	; (133cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   1338a:	9b01      	ldr	r3, [sp, #4]
   1338c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13390:	2b00      	cmp	r3, #0
   13392:	d10d      	bne.n	133b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13394:	f7ed faee 	bl	974 <Adc_schm_read_msr>
   13398:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1339a:	9b00      	ldr	r3, [sp, #0]
   1339c:	f003 0301 	and.w	r3, r3, #1
   133a0:	2b00      	cmp	r3, #0
   133a2:	d100      	bne.n	133a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   133a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_85[u32CoreId] = msr;
   133a6:	490a      	ldr	r1, [pc, #40]	; (133d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x54>)
   133a8:	9b01      	ldr	r3, [sp, #4]
   133aa:	9a00      	ldr	r2, [sp, #0]
   133ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]++;
   133b0:	4a06      	ldr	r2, [pc, #24]	; (133cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   133b2:	9b01      	ldr	r3, [sp, #4]
   133b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133b8:	1c5a      	adds	r2, r3, #1
   133ba:	4904      	ldr	r1, [pc, #16]	; (133cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   133bc:	9b01      	ldr	r3, [sp, #4]
   133be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   133c2:	bf00      	nop
   133c4:	b003      	add	sp, #12
   133c6:	f85d fb04 	ldr.w	pc, [sp], #4
   133ca:	bf00      	nop
   133cc:	1fff9610 	.word	0x1fff9610
   133d0:	1fff960c 	.word	0x1fff960c

000133d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   133d4:	b500      	push	{lr}
   133d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   133d8:	f7ed fc64 	bl	ca4 <Sys_GetCoreID>
   133dc:	4603      	mov	r3, r0
   133de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]--;
   133e0:	4a0d      	ldr	r2, [pc, #52]	; (13418 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   133e2:	9b01      	ldr	r3, [sp, #4]
   133e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133e8:	1e5a      	subs	r2, r3, #1
   133ea:	490b      	ldr	r1, [pc, #44]	; (13418 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   133ec:	9b01      	ldr	r3, [sp, #4]
   133ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_85[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]))         /*if interrupts were enabled*/
   133f2:	4a0a      	ldr	r2, [pc, #40]	; (1341c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x48>)
   133f4:	9b01      	ldr	r3, [sp, #4]
   133f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133fa:	f003 0301 	and.w	r3, r3, #1
   133fe:	2b00      	cmp	r3, #0
   13400:	d106      	bne.n	13410 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
   13402:	4a05      	ldr	r2, [pc, #20]	; (13418 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   13404:	9b01      	ldr	r3, [sp, #4]
   13406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1340a:	2b00      	cmp	r3, #0
   1340c:	d100      	bne.n	13410 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1340e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13410:	bf00      	nop
   13412:	b003      	add	sp, #12
   13414:	f85d fb04 	ldr.w	pc, [sp], #4
   13418:	1fff9610 	.word	0x1fff9610
   1341c:	1fff960c 	.word	0x1fff960c

00013420 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   13420:	b500      	push	{lr}
   13422:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13424:	f7ed fc3e 	bl	ca4 <Sys_GetCoreID>
   13428:	4603      	mov	r3, r0
   1342a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId])
   1342c:	4a10      	ldr	r2, [pc, #64]	; (13470 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   1342e:	9b01      	ldr	r3, [sp, #4]
   13430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13434:	2b00      	cmp	r3, #0
   13436:	d10d      	bne.n	13454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13438:	f7ed fa9c 	bl	974 <Adc_schm_read_msr>
   1343c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1343e:	9b00      	ldr	r3, [sp, #0]
   13440:	f003 0301 	and.w	r3, r3, #1
   13444:	2b00      	cmp	r3, #0
   13446:	d100      	bne.n	1344a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13448:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_86[u32CoreId] = msr;
   1344a:	490a      	ldr	r1, [pc, #40]	; (13474 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x54>)
   1344c:	9b01      	ldr	r3, [sp, #4]
   1344e:	9a00      	ldr	r2, [sp, #0]
   13450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]++;
   13454:	4a06      	ldr	r2, [pc, #24]	; (13470 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   13456:	9b01      	ldr	r3, [sp, #4]
   13458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1345c:	1c5a      	adds	r2, r3, #1
   1345e:	4904      	ldr	r1, [pc, #16]	; (13470 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   13460:	9b01      	ldr	r3, [sp, #4]
   13462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13466:	bf00      	nop
   13468:	b003      	add	sp, #12
   1346a:	f85d fb04 	ldr.w	pc, [sp], #4
   1346e:	bf00      	nop
   13470:	1fff9618 	.word	0x1fff9618
   13474:	1fff9614 	.word	0x1fff9614

00013478 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   13478:	b500      	push	{lr}
   1347a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1347c:	f7ed fc12 	bl	ca4 <Sys_GetCoreID>
   13480:	4603      	mov	r3, r0
   13482:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]--;
   13484:	4a0d      	ldr	r2, [pc, #52]	; (134bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   13486:	9b01      	ldr	r3, [sp, #4]
   13488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1348c:	1e5a      	subs	r2, r3, #1
   1348e:	490b      	ldr	r1, [pc, #44]	; (134bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   13490:	9b01      	ldr	r3, [sp, #4]
   13492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_86[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]))         /*if interrupts were enabled*/
   13496:	4a0a      	ldr	r2, [pc, #40]	; (134c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x48>)
   13498:	9b01      	ldr	r3, [sp, #4]
   1349a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1349e:	f003 0301 	and.w	r3, r3, #1
   134a2:	2b00      	cmp	r3, #0
   134a4:	d106      	bne.n	134b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
   134a6:	4a05      	ldr	r2, [pc, #20]	; (134bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   134a8:	9b01      	ldr	r3, [sp, #4]
   134aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134ae:	2b00      	cmp	r3, #0
   134b0:	d100      	bne.n	134b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   134b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   134b4:	bf00      	nop
   134b6:	b003      	add	sp, #12
   134b8:	f85d fb04 	ldr.w	pc, [sp], #4
   134bc:	1fff9618 	.word	0x1fff9618
   134c0:	1fff9614 	.word	0x1fff9614

000134c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   134c4:	b500      	push	{lr}
   134c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   134c8:	f7ed fbec 	bl	ca4 <Sys_GetCoreID>
   134cc:	4603      	mov	r3, r0
   134ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId])
   134d0:	4a10      	ldr	r2, [pc, #64]	; (13514 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   134d2:	9b01      	ldr	r3, [sp, #4]
   134d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134d8:	2b00      	cmp	r3, #0
   134da:	d10d      	bne.n	134f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   134dc:	f7ed fa4a 	bl	974 <Adc_schm_read_msr>
   134e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   134e2:	9b00      	ldr	r3, [sp, #0]
   134e4:	f003 0301 	and.w	r3, r3, #1
   134e8:	2b00      	cmp	r3, #0
   134ea:	d100      	bne.n	134ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   134ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_87[u32CoreId] = msr;
   134ee:	490a      	ldr	r1, [pc, #40]	; (13518 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x54>)
   134f0:	9b01      	ldr	r3, [sp, #4]
   134f2:	9a00      	ldr	r2, [sp, #0]
   134f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]++;
   134f8:	4a06      	ldr	r2, [pc, #24]	; (13514 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   134fa:	9b01      	ldr	r3, [sp, #4]
   134fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13500:	1c5a      	adds	r2, r3, #1
   13502:	4904      	ldr	r1, [pc, #16]	; (13514 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   13504:	9b01      	ldr	r3, [sp, #4]
   13506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1350a:	bf00      	nop
   1350c:	b003      	add	sp, #12
   1350e:	f85d fb04 	ldr.w	pc, [sp], #4
   13512:	bf00      	nop
   13514:	1fff9620 	.word	0x1fff9620
   13518:	1fff961c 	.word	0x1fff961c

0001351c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   1351c:	b500      	push	{lr}
   1351e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13520:	f7ed fbc0 	bl	ca4 <Sys_GetCoreID>
   13524:	4603      	mov	r3, r0
   13526:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]--;
   13528:	4a0d      	ldr	r2, [pc, #52]	; (13560 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   1352a:	9b01      	ldr	r3, [sp, #4]
   1352c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13530:	1e5a      	subs	r2, r3, #1
   13532:	490b      	ldr	r1, [pc, #44]	; (13560 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   13534:	9b01      	ldr	r3, [sp, #4]
   13536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_87[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]))         /*if interrupts were enabled*/
   1353a:	4a0a      	ldr	r2, [pc, #40]	; (13564 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x48>)
   1353c:	9b01      	ldr	r3, [sp, #4]
   1353e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13542:	f003 0301 	and.w	r3, r3, #1
   13546:	2b00      	cmp	r3, #0
   13548:	d106      	bne.n	13558 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
   1354a:	4a05      	ldr	r2, [pc, #20]	; (13560 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   1354c:	9b01      	ldr	r3, [sp, #4]
   1354e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13552:	2b00      	cmp	r3, #0
   13554:	d100      	bne.n	13558 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13556:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13558:	bf00      	nop
   1355a:	b003      	add	sp, #12
   1355c:	f85d fb04 	ldr.w	pc, [sp], #4
   13560:	1fff9620 	.word	0x1fff9620
   13564:	1fff961c 	.word	0x1fff961c

00013568 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   13568:	b500      	push	{lr}
   1356a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1356c:	f7ed fb9a 	bl	ca4 <Sys_GetCoreID>
   13570:	4603      	mov	r3, r0
   13572:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId])
   13574:	4a10      	ldr	r2, [pc, #64]	; (135b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   13576:	9b01      	ldr	r3, [sp, #4]
   13578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1357c:	2b00      	cmp	r3, #0
   1357e:	d10d      	bne.n	1359c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13580:	f7ed f9f8 	bl	974 <Adc_schm_read_msr>
   13584:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13586:	9b00      	ldr	r3, [sp, #0]
   13588:	f003 0301 	and.w	r3, r3, #1
   1358c:	2b00      	cmp	r3, #0
   1358e:	d100      	bne.n	13592 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13590:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_88[u32CoreId] = msr;
   13592:	490a      	ldr	r1, [pc, #40]	; (135bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x54>)
   13594:	9b01      	ldr	r3, [sp, #4]
   13596:	9a00      	ldr	r2, [sp, #0]
   13598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]++;
   1359c:	4a06      	ldr	r2, [pc, #24]	; (135b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   1359e:	9b01      	ldr	r3, [sp, #4]
   135a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135a4:	1c5a      	adds	r2, r3, #1
   135a6:	4904      	ldr	r1, [pc, #16]	; (135b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   135a8:	9b01      	ldr	r3, [sp, #4]
   135aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   135ae:	bf00      	nop
   135b0:	b003      	add	sp, #12
   135b2:	f85d fb04 	ldr.w	pc, [sp], #4
   135b6:	bf00      	nop
   135b8:	1fff9628 	.word	0x1fff9628
   135bc:	1fff9624 	.word	0x1fff9624

000135c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   135c0:	b500      	push	{lr}
   135c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   135c4:	f7ed fb6e 	bl	ca4 <Sys_GetCoreID>
   135c8:	4603      	mov	r3, r0
   135ca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]--;
   135cc:	4a0d      	ldr	r2, [pc, #52]	; (13604 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   135ce:	9b01      	ldr	r3, [sp, #4]
   135d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135d4:	1e5a      	subs	r2, r3, #1
   135d6:	490b      	ldr	r1, [pc, #44]	; (13604 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   135d8:	9b01      	ldr	r3, [sp, #4]
   135da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_88[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]))         /*if interrupts were enabled*/
   135de:	4a0a      	ldr	r2, [pc, #40]	; (13608 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x48>)
   135e0:	9b01      	ldr	r3, [sp, #4]
   135e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135e6:	f003 0301 	and.w	r3, r3, #1
   135ea:	2b00      	cmp	r3, #0
   135ec:	d106      	bne.n	135fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
   135ee:	4a05      	ldr	r2, [pc, #20]	; (13604 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   135f0:	9b01      	ldr	r3, [sp, #4]
   135f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135f6:	2b00      	cmp	r3, #0
   135f8:	d100      	bne.n	135fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   135fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   135fc:	bf00      	nop
   135fe:	b003      	add	sp, #12
   13600:	f85d fb04 	ldr.w	pc, [sp], #4
   13604:	1fff9628 	.word	0x1fff9628
   13608:	1fff9624 	.word	0x1fff9624

0001360c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   1360c:	b500      	push	{lr}
   1360e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13610:	f7ed fb48 	bl	ca4 <Sys_GetCoreID>
   13614:	4603      	mov	r3, r0
   13616:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId])
   13618:	4a10      	ldr	r2, [pc, #64]	; (1365c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   1361a:	9b01      	ldr	r3, [sp, #4]
   1361c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13620:	2b00      	cmp	r3, #0
   13622:	d10d      	bne.n	13640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13624:	f7ed f9a6 	bl	974 <Adc_schm_read_msr>
   13628:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1362a:	9b00      	ldr	r3, [sp, #0]
   1362c:	f003 0301 	and.w	r3, r3, #1
   13630:	2b00      	cmp	r3, #0
   13632:	d100      	bne.n	13636 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13634:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_89[u32CoreId] = msr;
   13636:	490a      	ldr	r1, [pc, #40]	; (13660 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x54>)
   13638:	9b01      	ldr	r3, [sp, #4]
   1363a:	9a00      	ldr	r2, [sp, #0]
   1363c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]++;
   13640:	4a06      	ldr	r2, [pc, #24]	; (1365c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   13642:	9b01      	ldr	r3, [sp, #4]
   13644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13648:	1c5a      	adds	r2, r3, #1
   1364a:	4904      	ldr	r1, [pc, #16]	; (1365c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   1364c:	9b01      	ldr	r3, [sp, #4]
   1364e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13652:	bf00      	nop
   13654:	b003      	add	sp, #12
   13656:	f85d fb04 	ldr.w	pc, [sp], #4
   1365a:	bf00      	nop
   1365c:	1fff9630 	.word	0x1fff9630
   13660:	1fff962c 	.word	0x1fff962c

00013664 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   13664:	b500      	push	{lr}
   13666:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13668:	f7ed fb1c 	bl	ca4 <Sys_GetCoreID>
   1366c:	4603      	mov	r3, r0
   1366e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]--;
   13670:	4a0d      	ldr	r2, [pc, #52]	; (136a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   13672:	9b01      	ldr	r3, [sp, #4]
   13674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13678:	1e5a      	subs	r2, r3, #1
   1367a:	490b      	ldr	r1, [pc, #44]	; (136a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   1367c:	9b01      	ldr	r3, [sp, #4]
   1367e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_89[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]))         /*if interrupts were enabled*/
   13682:	4a0a      	ldr	r2, [pc, #40]	; (136ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x48>)
   13684:	9b01      	ldr	r3, [sp, #4]
   13686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1368a:	f003 0301 	and.w	r3, r3, #1
   1368e:	2b00      	cmp	r3, #0
   13690:	d106      	bne.n	136a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
   13692:	4a05      	ldr	r2, [pc, #20]	; (136a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   13694:	9b01      	ldr	r3, [sp, #4]
   13696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1369a:	2b00      	cmp	r3, #0
   1369c:	d100      	bne.n	136a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1369e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   136a0:	bf00      	nop
   136a2:	b003      	add	sp, #12
   136a4:	f85d fb04 	ldr.w	pc, [sp], #4
   136a8:	1fff9630 	.word	0x1fff9630
   136ac:	1fff962c 	.word	0x1fff962c

000136b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   136b0:	b500      	push	{lr}
   136b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   136b4:	f7ed faf6 	bl	ca4 <Sys_GetCoreID>
   136b8:	4603      	mov	r3, r0
   136ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId])
   136bc:	4a10      	ldr	r2, [pc, #64]	; (13700 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   136be:	9b01      	ldr	r3, [sp, #4]
   136c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136c4:	2b00      	cmp	r3, #0
   136c6:	d10d      	bne.n	136e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   136c8:	f7ed f954 	bl	974 <Adc_schm_read_msr>
   136cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   136ce:	9b00      	ldr	r3, [sp, #0]
   136d0:	f003 0301 	and.w	r3, r3, #1
   136d4:	2b00      	cmp	r3, #0
   136d6:	d100      	bne.n	136da <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   136d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_90[u32CoreId] = msr;
   136da:	490a      	ldr	r1, [pc, #40]	; (13704 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x54>)
   136dc:	9b01      	ldr	r3, [sp, #4]
   136de:	9a00      	ldr	r2, [sp, #0]
   136e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]++;
   136e4:	4a06      	ldr	r2, [pc, #24]	; (13700 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   136e6:	9b01      	ldr	r3, [sp, #4]
   136e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136ec:	1c5a      	adds	r2, r3, #1
   136ee:	4904      	ldr	r1, [pc, #16]	; (13700 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   136f0:	9b01      	ldr	r3, [sp, #4]
   136f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   136f6:	bf00      	nop
   136f8:	b003      	add	sp, #12
   136fa:	f85d fb04 	ldr.w	pc, [sp], #4
   136fe:	bf00      	nop
   13700:	1fff9638 	.word	0x1fff9638
   13704:	1fff9634 	.word	0x1fff9634

00013708 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   13708:	b500      	push	{lr}
   1370a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1370c:	f7ed faca 	bl	ca4 <Sys_GetCoreID>
   13710:	4603      	mov	r3, r0
   13712:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]--;
   13714:	4a0d      	ldr	r2, [pc, #52]	; (1374c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   13716:	9b01      	ldr	r3, [sp, #4]
   13718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1371c:	1e5a      	subs	r2, r3, #1
   1371e:	490b      	ldr	r1, [pc, #44]	; (1374c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   13720:	9b01      	ldr	r3, [sp, #4]
   13722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_90[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]))         /*if interrupts were enabled*/
   13726:	4a0a      	ldr	r2, [pc, #40]	; (13750 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x48>)
   13728:	9b01      	ldr	r3, [sp, #4]
   1372a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1372e:	f003 0301 	and.w	r3, r3, #1
   13732:	2b00      	cmp	r3, #0
   13734:	d106      	bne.n	13744 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
   13736:	4a05      	ldr	r2, [pc, #20]	; (1374c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   13738:	9b01      	ldr	r3, [sp, #4]
   1373a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1373e:	2b00      	cmp	r3, #0
   13740:	d100      	bne.n	13744 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13742:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13744:	bf00      	nop
   13746:	b003      	add	sp, #12
   13748:	f85d fb04 	ldr.w	pc, [sp], #4
   1374c:	1fff9638 	.word	0x1fff9638
   13750:	1fff9634 	.word	0x1fff9634

00013754 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   13754:	b500      	push	{lr}
   13756:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13758:	f7ed faa4 	bl	ca4 <Sys_GetCoreID>
   1375c:	4603      	mov	r3, r0
   1375e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId])
   13760:	4a10      	ldr	r2, [pc, #64]	; (137a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   13762:	9b01      	ldr	r3, [sp, #4]
   13764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13768:	2b00      	cmp	r3, #0
   1376a:	d10d      	bne.n	13788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1376c:	f7ed f902 	bl	974 <Adc_schm_read_msr>
   13770:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13772:	9b00      	ldr	r3, [sp, #0]
   13774:	f003 0301 	and.w	r3, r3, #1
   13778:	2b00      	cmp	r3, #0
   1377a:	d100      	bne.n	1377e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1377c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_91[u32CoreId] = msr;
   1377e:	490a      	ldr	r1, [pc, #40]	; (137a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x54>)
   13780:	9b01      	ldr	r3, [sp, #4]
   13782:	9a00      	ldr	r2, [sp, #0]
   13784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]++;
   13788:	4a06      	ldr	r2, [pc, #24]	; (137a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   1378a:	9b01      	ldr	r3, [sp, #4]
   1378c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13790:	1c5a      	adds	r2, r3, #1
   13792:	4904      	ldr	r1, [pc, #16]	; (137a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   13794:	9b01      	ldr	r3, [sp, #4]
   13796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1379a:	bf00      	nop
   1379c:	b003      	add	sp, #12
   1379e:	f85d fb04 	ldr.w	pc, [sp], #4
   137a2:	bf00      	nop
   137a4:	1fff9640 	.word	0x1fff9640
   137a8:	1fff963c 	.word	0x1fff963c

000137ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   137ac:	b500      	push	{lr}
   137ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   137b0:	f7ed fa78 	bl	ca4 <Sys_GetCoreID>
   137b4:	4603      	mov	r3, r0
   137b6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]--;
   137b8:	4a0d      	ldr	r2, [pc, #52]	; (137f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   137ba:	9b01      	ldr	r3, [sp, #4]
   137bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137c0:	1e5a      	subs	r2, r3, #1
   137c2:	490b      	ldr	r1, [pc, #44]	; (137f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   137c4:	9b01      	ldr	r3, [sp, #4]
   137c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_91[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]))         /*if interrupts were enabled*/
   137ca:	4a0a      	ldr	r2, [pc, #40]	; (137f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x48>)
   137cc:	9b01      	ldr	r3, [sp, #4]
   137ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137d2:	f003 0301 	and.w	r3, r3, #1
   137d6:	2b00      	cmp	r3, #0
   137d8:	d106      	bne.n	137e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
   137da:	4a05      	ldr	r2, [pc, #20]	; (137f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   137dc:	9b01      	ldr	r3, [sp, #4]
   137de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137e2:	2b00      	cmp	r3, #0
   137e4:	d100      	bne.n	137e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   137e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   137e8:	bf00      	nop
   137ea:	b003      	add	sp, #12
   137ec:	f85d fb04 	ldr.w	pc, [sp], #4
   137f0:	1fff9640 	.word	0x1fff9640
   137f4:	1fff963c 	.word	0x1fff963c

000137f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   137f8:	b500      	push	{lr}
   137fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   137fc:	f7ed fa52 	bl	ca4 <Sys_GetCoreID>
   13800:	4603      	mov	r3, r0
   13802:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId])
   13804:	4a10      	ldr	r2, [pc, #64]	; (13848 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   13806:	9b01      	ldr	r3, [sp, #4]
   13808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1380c:	2b00      	cmp	r3, #0
   1380e:	d10d      	bne.n	1382c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13810:	f7ed f8b0 	bl	974 <Adc_schm_read_msr>
   13814:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13816:	9b00      	ldr	r3, [sp, #0]
   13818:	f003 0301 	and.w	r3, r3, #1
   1381c:	2b00      	cmp	r3, #0
   1381e:	d100      	bne.n	13822 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13820:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_92[u32CoreId] = msr;
   13822:	490a      	ldr	r1, [pc, #40]	; (1384c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x54>)
   13824:	9b01      	ldr	r3, [sp, #4]
   13826:	9a00      	ldr	r2, [sp, #0]
   13828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]++;
   1382c:	4a06      	ldr	r2, [pc, #24]	; (13848 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   1382e:	9b01      	ldr	r3, [sp, #4]
   13830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13834:	1c5a      	adds	r2, r3, #1
   13836:	4904      	ldr	r1, [pc, #16]	; (13848 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   13838:	9b01      	ldr	r3, [sp, #4]
   1383a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1383e:	bf00      	nop
   13840:	b003      	add	sp, #12
   13842:	f85d fb04 	ldr.w	pc, [sp], #4
   13846:	bf00      	nop
   13848:	1fff9648 	.word	0x1fff9648
   1384c:	1fff9644 	.word	0x1fff9644

00013850 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   13850:	b500      	push	{lr}
   13852:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13854:	f7ed fa26 	bl	ca4 <Sys_GetCoreID>
   13858:	4603      	mov	r3, r0
   1385a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]--;
   1385c:	4a0d      	ldr	r2, [pc, #52]	; (13894 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   1385e:	9b01      	ldr	r3, [sp, #4]
   13860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13864:	1e5a      	subs	r2, r3, #1
   13866:	490b      	ldr	r1, [pc, #44]	; (13894 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   13868:	9b01      	ldr	r3, [sp, #4]
   1386a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_92[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]))         /*if interrupts were enabled*/
   1386e:	4a0a      	ldr	r2, [pc, #40]	; (13898 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x48>)
   13870:	9b01      	ldr	r3, [sp, #4]
   13872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13876:	f003 0301 	and.w	r3, r3, #1
   1387a:	2b00      	cmp	r3, #0
   1387c:	d106      	bne.n	1388c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
   1387e:	4a05      	ldr	r2, [pc, #20]	; (13894 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   13880:	9b01      	ldr	r3, [sp, #4]
   13882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13886:	2b00      	cmp	r3, #0
   13888:	d100      	bne.n	1388c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1388a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1388c:	bf00      	nop
   1388e:	b003      	add	sp, #12
   13890:	f85d fb04 	ldr.w	pc, [sp], #4
   13894:	1fff9648 	.word	0x1fff9648
   13898:	1fff9644 	.word	0x1fff9644

0001389c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   1389c:	b500      	push	{lr}
   1389e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   138a0:	f7ed fa00 	bl	ca4 <Sys_GetCoreID>
   138a4:	4603      	mov	r3, r0
   138a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId])
   138a8:	4a10      	ldr	r2, [pc, #64]	; (138ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   138aa:	9b01      	ldr	r3, [sp, #4]
   138ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138b0:	2b00      	cmp	r3, #0
   138b2:	d10d      	bne.n	138d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   138b4:	f7ed f85e 	bl	974 <Adc_schm_read_msr>
   138b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   138ba:	9b00      	ldr	r3, [sp, #0]
   138bc:	f003 0301 	and.w	r3, r3, #1
   138c0:	2b00      	cmp	r3, #0
   138c2:	d100      	bne.n	138c6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   138c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_93[u32CoreId] = msr;
   138c6:	490a      	ldr	r1, [pc, #40]	; (138f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x54>)
   138c8:	9b01      	ldr	r3, [sp, #4]
   138ca:	9a00      	ldr	r2, [sp, #0]
   138cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]++;
   138d0:	4a06      	ldr	r2, [pc, #24]	; (138ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   138d2:	9b01      	ldr	r3, [sp, #4]
   138d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138d8:	1c5a      	adds	r2, r3, #1
   138da:	4904      	ldr	r1, [pc, #16]	; (138ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   138dc:	9b01      	ldr	r3, [sp, #4]
   138de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   138e2:	bf00      	nop
   138e4:	b003      	add	sp, #12
   138e6:	f85d fb04 	ldr.w	pc, [sp], #4
   138ea:	bf00      	nop
   138ec:	1fff9650 	.word	0x1fff9650
   138f0:	1fff964c 	.word	0x1fff964c

000138f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   138f4:	b500      	push	{lr}
   138f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   138f8:	f7ed f9d4 	bl	ca4 <Sys_GetCoreID>
   138fc:	4603      	mov	r3, r0
   138fe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]--;
   13900:	4a0d      	ldr	r2, [pc, #52]	; (13938 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   13902:	9b01      	ldr	r3, [sp, #4]
   13904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13908:	1e5a      	subs	r2, r3, #1
   1390a:	490b      	ldr	r1, [pc, #44]	; (13938 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   1390c:	9b01      	ldr	r3, [sp, #4]
   1390e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_93[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]))         /*if interrupts were enabled*/
   13912:	4a0a      	ldr	r2, [pc, #40]	; (1393c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x48>)
   13914:	9b01      	ldr	r3, [sp, #4]
   13916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1391a:	f003 0301 	and.w	r3, r3, #1
   1391e:	2b00      	cmp	r3, #0
   13920:	d106      	bne.n	13930 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
   13922:	4a05      	ldr	r2, [pc, #20]	; (13938 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   13924:	9b01      	ldr	r3, [sp, #4]
   13926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1392a:	2b00      	cmp	r3, #0
   1392c:	d100      	bne.n	13930 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1392e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13930:	bf00      	nop
   13932:	b003      	add	sp, #12
   13934:	f85d fb04 	ldr.w	pc, [sp], #4
   13938:	1fff9650 	.word	0x1fff9650
   1393c:	1fff964c 	.word	0x1fff964c

00013940 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   13940:	b500      	push	{lr}
   13942:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13944:	f7ed f9ae 	bl	ca4 <Sys_GetCoreID>
   13948:	4603      	mov	r3, r0
   1394a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId])
   1394c:	4a10      	ldr	r2, [pc, #64]	; (13990 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   1394e:	9b01      	ldr	r3, [sp, #4]
   13950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13954:	2b00      	cmp	r3, #0
   13956:	d10d      	bne.n	13974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13958:	f7ed f80c 	bl	974 <Adc_schm_read_msr>
   1395c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1395e:	9b00      	ldr	r3, [sp, #0]
   13960:	f003 0301 	and.w	r3, r3, #1
   13964:	2b00      	cmp	r3, #0
   13966:	d100      	bne.n	1396a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13968:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_94[u32CoreId] = msr;
   1396a:	490a      	ldr	r1, [pc, #40]	; (13994 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x54>)
   1396c:	9b01      	ldr	r3, [sp, #4]
   1396e:	9a00      	ldr	r2, [sp, #0]
   13970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]++;
   13974:	4a06      	ldr	r2, [pc, #24]	; (13990 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   13976:	9b01      	ldr	r3, [sp, #4]
   13978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1397c:	1c5a      	adds	r2, r3, #1
   1397e:	4904      	ldr	r1, [pc, #16]	; (13990 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   13980:	9b01      	ldr	r3, [sp, #4]
   13982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13986:	bf00      	nop
   13988:	b003      	add	sp, #12
   1398a:	f85d fb04 	ldr.w	pc, [sp], #4
   1398e:	bf00      	nop
   13990:	1fff9658 	.word	0x1fff9658
   13994:	1fff9654 	.word	0x1fff9654

00013998 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   13998:	b500      	push	{lr}
   1399a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1399c:	f7ed f982 	bl	ca4 <Sys_GetCoreID>
   139a0:	4603      	mov	r3, r0
   139a2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]--;
   139a4:	4a0d      	ldr	r2, [pc, #52]	; (139dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   139a6:	9b01      	ldr	r3, [sp, #4]
   139a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139ac:	1e5a      	subs	r2, r3, #1
   139ae:	490b      	ldr	r1, [pc, #44]	; (139dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   139b0:	9b01      	ldr	r3, [sp, #4]
   139b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_94[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]))         /*if interrupts were enabled*/
   139b6:	4a0a      	ldr	r2, [pc, #40]	; (139e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x48>)
   139b8:	9b01      	ldr	r3, [sp, #4]
   139ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139be:	f003 0301 	and.w	r3, r3, #1
   139c2:	2b00      	cmp	r3, #0
   139c4:	d106      	bne.n	139d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
   139c6:	4a05      	ldr	r2, [pc, #20]	; (139dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   139c8:	9b01      	ldr	r3, [sp, #4]
   139ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139ce:	2b00      	cmp	r3, #0
   139d0:	d100      	bne.n	139d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   139d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   139d4:	bf00      	nop
   139d6:	b003      	add	sp, #12
   139d8:	f85d fb04 	ldr.w	pc, [sp], #4
   139dc:	1fff9658 	.word	0x1fff9658
   139e0:	1fff9654 	.word	0x1fff9654

000139e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   139e4:	b500      	push	{lr}
   139e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   139e8:	f7ed f95c 	bl	ca4 <Sys_GetCoreID>
   139ec:	4603      	mov	r3, r0
   139ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId])
   139f0:	4a10      	ldr	r2, [pc, #64]	; (13a34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   139f2:	9b01      	ldr	r3, [sp, #4]
   139f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139f8:	2b00      	cmp	r3, #0
   139fa:	d10d      	bne.n	13a18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   139fc:	f7ec ffba 	bl	974 <Adc_schm_read_msr>
   13a00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13a02:	9b00      	ldr	r3, [sp, #0]
   13a04:	f003 0301 	and.w	r3, r3, #1
   13a08:	2b00      	cmp	r3, #0
   13a0a:	d100      	bne.n	13a0e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13a0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_95[u32CoreId] = msr;
   13a0e:	490a      	ldr	r1, [pc, #40]	; (13a38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x54>)
   13a10:	9b01      	ldr	r3, [sp, #4]
   13a12:	9a00      	ldr	r2, [sp, #0]
   13a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]++;
   13a18:	4a06      	ldr	r2, [pc, #24]	; (13a34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   13a1a:	9b01      	ldr	r3, [sp, #4]
   13a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a20:	1c5a      	adds	r2, r3, #1
   13a22:	4904      	ldr	r1, [pc, #16]	; (13a34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   13a24:	9b01      	ldr	r3, [sp, #4]
   13a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13a2a:	bf00      	nop
   13a2c:	b003      	add	sp, #12
   13a2e:	f85d fb04 	ldr.w	pc, [sp], #4
   13a32:	bf00      	nop
   13a34:	1fff9660 	.word	0x1fff9660
   13a38:	1fff965c 	.word	0x1fff965c

00013a3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   13a3c:	b500      	push	{lr}
   13a3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a40:	f7ed f930 	bl	ca4 <Sys_GetCoreID>
   13a44:	4603      	mov	r3, r0
   13a46:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]--;
   13a48:	4a0d      	ldr	r2, [pc, #52]	; (13a80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   13a4a:	9b01      	ldr	r3, [sp, #4]
   13a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a50:	1e5a      	subs	r2, r3, #1
   13a52:	490b      	ldr	r1, [pc, #44]	; (13a80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   13a54:	9b01      	ldr	r3, [sp, #4]
   13a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_95[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]))         /*if interrupts were enabled*/
   13a5a:	4a0a      	ldr	r2, [pc, #40]	; (13a84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x48>)
   13a5c:	9b01      	ldr	r3, [sp, #4]
   13a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a62:	f003 0301 	and.w	r3, r3, #1
   13a66:	2b00      	cmp	r3, #0
   13a68:	d106      	bne.n	13a78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
   13a6a:	4a05      	ldr	r2, [pc, #20]	; (13a80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   13a6c:	9b01      	ldr	r3, [sp, #4]
   13a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a72:	2b00      	cmp	r3, #0
   13a74:	d100      	bne.n	13a78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13a76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13a78:	bf00      	nop
   13a7a:	b003      	add	sp, #12
   13a7c:	f85d fb04 	ldr.w	pc, [sp], #4
   13a80:	1fff9660 	.word	0x1fff9660
   13a84:	1fff965c 	.word	0x1fff965c

00013a88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   13a88:	b500      	push	{lr}
   13a8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a8c:	f7ed f90a 	bl	ca4 <Sys_GetCoreID>
   13a90:	4603      	mov	r3, r0
   13a92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId])
   13a94:	4a10      	ldr	r2, [pc, #64]	; (13ad8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   13a96:	9b01      	ldr	r3, [sp, #4]
   13a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a9c:	2b00      	cmp	r3, #0
   13a9e:	d10d      	bne.n	13abc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13aa0:	f7ec ff68 	bl	974 <Adc_schm_read_msr>
   13aa4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13aa6:	9b00      	ldr	r3, [sp, #0]
   13aa8:	f003 0301 	and.w	r3, r3, #1
   13aac:	2b00      	cmp	r3, #0
   13aae:	d100      	bne.n	13ab2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13ab0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_96[u32CoreId] = msr;
   13ab2:	490a      	ldr	r1, [pc, #40]	; (13adc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x54>)
   13ab4:	9b01      	ldr	r3, [sp, #4]
   13ab6:	9a00      	ldr	r2, [sp, #0]
   13ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]++;
   13abc:	4a06      	ldr	r2, [pc, #24]	; (13ad8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   13abe:	9b01      	ldr	r3, [sp, #4]
   13ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ac4:	1c5a      	adds	r2, r3, #1
   13ac6:	4904      	ldr	r1, [pc, #16]	; (13ad8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   13ac8:	9b01      	ldr	r3, [sp, #4]
   13aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13ace:	bf00      	nop
   13ad0:	b003      	add	sp, #12
   13ad2:	f85d fb04 	ldr.w	pc, [sp], #4
   13ad6:	bf00      	nop
   13ad8:	1fff9668 	.word	0x1fff9668
   13adc:	1fff9664 	.word	0x1fff9664

00013ae0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   13ae0:	b500      	push	{lr}
   13ae2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ae4:	f7ed f8de 	bl	ca4 <Sys_GetCoreID>
   13ae8:	4603      	mov	r3, r0
   13aea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]--;
   13aec:	4a0d      	ldr	r2, [pc, #52]	; (13b24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   13aee:	9b01      	ldr	r3, [sp, #4]
   13af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13af4:	1e5a      	subs	r2, r3, #1
   13af6:	490b      	ldr	r1, [pc, #44]	; (13b24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   13af8:	9b01      	ldr	r3, [sp, #4]
   13afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_96[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]))         /*if interrupts were enabled*/
   13afe:	4a0a      	ldr	r2, [pc, #40]	; (13b28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x48>)
   13b00:	9b01      	ldr	r3, [sp, #4]
   13b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b06:	f003 0301 	and.w	r3, r3, #1
   13b0a:	2b00      	cmp	r3, #0
   13b0c:	d106      	bne.n	13b1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
   13b0e:	4a05      	ldr	r2, [pc, #20]	; (13b24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   13b10:	9b01      	ldr	r3, [sp, #4]
   13b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b16:	2b00      	cmp	r3, #0
   13b18:	d100      	bne.n	13b1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13b1a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13b1c:	bf00      	nop
   13b1e:	b003      	add	sp, #12
   13b20:	f85d fb04 	ldr.w	pc, [sp], #4
   13b24:	1fff9668 	.word	0x1fff9668
   13b28:	1fff9664 	.word	0x1fff9664

00013b2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   13b2c:	b500      	push	{lr}
   13b2e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b30:	f7ed f8b8 	bl	ca4 <Sys_GetCoreID>
   13b34:	4603      	mov	r3, r0
   13b36:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId])
   13b38:	4a10      	ldr	r2, [pc, #64]	; (13b7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   13b3a:	9b01      	ldr	r3, [sp, #4]
   13b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b40:	2b00      	cmp	r3, #0
   13b42:	d10d      	bne.n	13b60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13b44:	f7ec ff16 	bl	974 <Adc_schm_read_msr>
   13b48:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13b4a:	9b00      	ldr	r3, [sp, #0]
   13b4c:	f003 0301 	and.w	r3, r3, #1
   13b50:	2b00      	cmp	r3, #0
   13b52:	d100      	bne.n	13b56 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13b54:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_97[u32CoreId] = msr;
   13b56:	490a      	ldr	r1, [pc, #40]	; (13b80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x54>)
   13b58:	9b01      	ldr	r3, [sp, #4]
   13b5a:	9a00      	ldr	r2, [sp, #0]
   13b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]++;
   13b60:	4a06      	ldr	r2, [pc, #24]	; (13b7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   13b62:	9b01      	ldr	r3, [sp, #4]
   13b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b68:	1c5a      	adds	r2, r3, #1
   13b6a:	4904      	ldr	r1, [pc, #16]	; (13b7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   13b6c:	9b01      	ldr	r3, [sp, #4]
   13b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13b72:	bf00      	nop
   13b74:	b003      	add	sp, #12
   13b76:	f85d fb04 	ldr.w	pc, [sp], #4
   13b7a:	bf00      	nop
   13b7c:	1fff9670 	.word	0x1fff9670
   13b80:	1fff966c 	.word	0x1fff966c

00013b84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   13b84:	b500      	push	{lr}
   13b86:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b88:	f7ed f88c 	bl	ca4 <Sys_GetCoreID>
   13b8c:	4603      	mov	r3, r0
   13b8e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]--;
   13b90:	4a0d      	ldr	r2, [pc, #52]	; (13bc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   13b92:	9b01      	ldr	r3, [sp, #4]
   13b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b98:	1e5a      	subs	r2, r3, #1
   13b9a:	490b      	ldr	r1, [pc, #44]	; (13bc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   13b9c:	9b01      	ldr	r3, [sp, #4]
   13b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_97[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]))         /*if interrupts were enabled*/
   13ba2:	4a0a      	ldr	r2, [pc, #40]	; (13bcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x48>)
   13ba4:	9b01      	ldr	r3, [sp, #4]
   13ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13baa:	f003 0301 	and.w	r3, r3, #1
   13bae:	2b00      	cmp	r3, #0
   13bb0:	d106      	bne.n	13bc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
   13bb2:	4a05      	ldr	r2, [pc, #20]	; (13bc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   13bb4:	9b01      	ldr	r3, [sp, #4]
   13bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bba:	2b00      	cmp	r3, #0
   13bbc:	d100      	bne.n	13bc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13bbe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13bc0:	bf00      	nop
   13bc2:	b003      	add	sp, #12
   13bc4:	f85d fb04 	ldr.w	pc, [sp], #4
   13bc8:	1fff9670 	.word	0x1fff9670
   13bcc:	1fff966c 	.word	0x1fff966c

00013bd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   13bd0:	b500      	push	{lr}
   13bd2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13bd4:	f7ed f866 	bl	ca4 <Sys_GetCoreID>
   13bd8:	4603      	mov	r3, r0
   13bda:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId])
   13bdc:	4a10      	ldr	r2, [pc, #64]	; (13c20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   13bde:	9b01      	ldr	r3, [sp, #4]
   13be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13be4:	2b00      	cmp	r3, #0
   13be6:	d10d      	bne.n	13c04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13be8:	f7ec fec4 	bl	974 <Adc_schm_read_msr>
   13bec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13bee:	9b00      	ldr	r3, [sp, #0]
   13bf0:	f003 0301 	and.w	r3, r3, #1
   13bf4:	2b00      	cmp	r3, #0
   13bf6:	d100      	bne.n	13bfa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13bf8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_98[u32CoreId] = msr;
   13bfa:	490a      	ldr	r1, [pc, #40]	; (13c24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x54>)
   13bfc:	9b01      	ldr	r3, [sp, #4]
   13bfe:	9a00      	ldr	r2, [sp, #0]
   13c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]++;
   13c04:	4a06      	ldr	r2, [pc, #24]	; (13c20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   13c06:	9b01      	ldr	r3, [sp, #4]
   13c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c0c:	1c5a      	adds	r2, r3, #1
   13c0e:	4904      	ldr	r1, [pc, #16]	; (13c20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   13c10:	9b01      	ldr	r3, [sp, #4]
   13c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13c16:	bf00      	nop
   13c18:	b003      	add	sp, #12
   13c1a:	f85d fb04 	ldr.w	pc, [sp], #4
   13c1e:	bf00      	nop
   13c20:	1fff9678 	.word	0x1fff9678
   13c24:	1fff9674 	.word	0x1fff9674

00013c28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   13c28:	b500      	push	{lr}
   13c2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c2c:	f7ed f83a 	bl	ca4 <Sys_GetCoreID>
   13c30:	4603      	mov	r3, r0
   13c32:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]--;
   13c34:	4a0d      	ldr	r2, [pc, #52]	; (13c6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   13c36:	9b01      	ldr	r3, [sp, #4]
   13c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c3c:	1e5a      	subs	r2, r3, #1
   13c3e:	490b      	ldr	r1, [pc, #44]	; (13c6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   13c40:	9b01      	ldr	r3, [sp, #4]
   13c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_98[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]))         /*if interrupts were enabled*/
   13c46:	4a0a      	ldr	r2, [pc, #40]	; (13c70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x48>)
   13c48:	9b01      	ldr	r3, [sp, #4]
   13c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c4e:	f003 0301 	and.w	r3, r3, #1
   13c52:	2b00      	cmp	r3, #0
   13c54:	d106      	bne.n	13c64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
   13c56:	4a05      	ldr	r2, [pc, #20]	; (13c6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   13c58:	9b01      	ldr	r3, [sp, #4]
   13c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c5e:	2b00      	cmp	r3, #0
   13c60:	d100      	bne.n	13c64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13c62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13c64:	bf00      	nop
   13c66:	b003      	add	sp, #12
   13c68:	f85d fb04 	ldr.w	pc, [sp], #4
   13c6c:	1fff9678 	.word	0x1fff9678
   13c70:	1fff9674 	.word	0x1fff9674

00013c74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   13c74:	b500      	push	{lr}
   13c76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c78:	f7ed f814 	bl	ca4 <Sys_GetCoreID>
   13c7c:	4603      	mov	r3, r0
   13c7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId])
   13c80:	4a10      	ldr	r2, [pc, #64]	; (13cc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   13c82:	9b01      	ldr	r3, [sp, #4]
   13c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c88:	2b00      	cmp	r3, #0
   13c8a:	d10d      	bne.n	13ca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13c8c:	f7ec fe72 	bl	974 <Adc_schm_read_msr>
   13c90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13c92:	9b00      	ldr	r3, [sp, #0]
   13c94:	f003 0301 	and.w	r3, r3, #1
   13c98:	2b00      	cmp	r3, #0
   13c9a:	d100      	bne.n	13c9e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13c9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_99[u32CoreId] = msr;
   13c9e:	490a      	ldr	r1, [pc, #40]	; (13cc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x54>)
   13ca0:	9b01      	ldr	r3, [sp, #4]
   13ca2:	9a00      	ldr	r2, [sp, #0]
   13ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]++;
   13ca8:	4a06      	ldr	r2, [pc, #24]	; (13cc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   13caa:	9b01      	ldr	r3, [sp, #4]
   13cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cb0:	1c5a      	adds	r2, r3, #1
   13cb2:	4904      	ldr	r1, [pc, #16]	; (13cc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   13cb4:	9b01      	ldr	r3, [sp, #4]
   13cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13cba:	bf00      	nop
   13cbc:	b003      	add	sp, #12
   13cbe:	f85d fb04 	ldr.w	pc, [sp], #4
   13cc2:	bf00      	nop
   13cc4:	1fff9680 	.word	0x1fff9680
   13cc8:	1fff967c 	.word	0x1fff967c

00013ccc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   13ccc:	b500      	push	{lr}
   13cce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13cd0:	f7ec ffe8 	bl	ca4 <Sys_GetCoreID>
   13cd4:	4603      	mov	r3, r0
   13cd6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]--;
   13cd8:	4a0d      	ldr	r2, [pc, #52]	; (13d10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   13cda:	9b01      	ldr	r3, [sp, #4]
   13cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ce0:	1e5a      	subs	r2, r3, #1
   13ce2:	490b      	ldr	r1, [pc, #44]	; (13d10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   13ce4:	9b01      	ldr	r3, [sp, #4]
   13ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_99[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]))         /*if interrupts were enabled*/
   13cea:	4a0a      	ldr	r2, [pc, #40]	; (13d14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x48>)
   13cec:	9b01      	ldr	r3, [sp, #4]
   13cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cf2:	f003 0301 	and.w	r3, r3, #1
   13cf6:	2b00      	cmp	r3, #0
   13cf8:	d106      	bne.n	13d08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
   13cfa:	4a05      	ldr	r2, [pc, #20]	; (13d10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   13cfc:	9b01      	ldr	r3, [sp, #4]
   13cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d02:	2b00      	cmp	r3, #0
   13d04:	d100      	bne.n	13d08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13d06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13d08:	bf00      	nop
   13d0a:	b003      	add	sp, #12
   13d0c:	f85d fb04 	ldr.w	pc, [sp], #4
   13d10:	1fff9680 	.word	0x1fff9680
   13d14:	1fff967c 	.word	0x1fff967c

00013d18 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
   13d18:	b500      	push	{lr}
   13d1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d1c:	f7ec ffc2 	bl	ca4 <Sys_GetCoreID>
   13d20:	4603      	mov	r3, r0
   13d22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId])
   13d24:	4a10      	ldr	r2, [pc, #64]	; (13d68 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
   13d26:	9b01      	ldr	r3, [sp, #4]
   13d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d2c:	2b00      	cmp	r3, #0
   13d2e:	d10d      	bne.n	13d4c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13d30:	f7ec fe29 	bl	986 <Can_43_FLEXCAN_schm_read_msr>
   13d34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13d36:	9b00      	ldr	r3, [sp, #0]
   13d38:	f003 0301 	and.w	r3, r3, #1
   13d3c:	2b00      	cmp	r3, #0
   13d3e:	d100      	bne.n	13d42 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13d40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   13d42:	490a      	ldr	r1, [pc, #40]	; (13d6c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x54>)
   13d44:	9b01      	ldr	r3, [sp, #4]
   13d46:	9a00      	ldr	r2, [sp, #0]
   13d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]++;
   13d4c:	4a06      	ldr	r2, [pc, #24]	; (13d68 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
   13d4e:	9b01      	ldr	r3, [sp, #4]
   13d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d54:	1c5a      	adds	r2, r3, #1
   13d56:	4904      	ldr	r1, [pc, #16]	; (13d68 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
   13d58:	9b01      	ldr	r3, [sp, #4]
   13d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13d5e:	bf00      	nop
   13d60:	b003      	add	sp, #12
   13d62:	f85d fb04 	ldr.w	pc, [sp], #4
   13d66:	bf00      	nop
   13d68:	1fff9688 	.word	0x1fff9688
   13d6c:	1fff9684 	.word	0x1fff9684

00013d70 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
   13d70:	b500      	push	{lr}
   13d72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d74:	f7ec ff96 	bl	ca4 <Sys_GetCoreID>
   13d78:	4603      	mov	r3, r0
   13d7a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]--;
   13d7c:	4a0d      	ldr	r2, [pc, #52]	; (13db4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
   13d7e:	9b01      	ldr	r3, [sp, #4]
   13d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d84:	1e5a      	subs	r2, r3, #1
   13d86:	490b      	ldr	r1, [pc, #44]	; (13db4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
   13d88:	9b01      	ldr	r3, [sp, #4]
   13d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   13d8e:	4a0a      	ldr	r2, [pc, #40]	; (13db8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x48>)
   13d90:	9b01      	ldr	r3, [sp, #4]
   13d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d96:	f003 0301 	and.w	r3, r3, #1
   13d9a:	2b00      	cmp	r3, #0
   13d9c:	d106      	bne.n	13dac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
   13d9e:	4a05      	ldr	r2, [pc, #20]	; (13db4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
   13da0:	9b01      	ldr	r3, [sp, #4]
   13da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13da6:	2b00      	cmp	r3, #0
   13da8:	d100      	bne.n	13dac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13daa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13dac:	bf00      	nop
   13dae:	b003      	add	sp, #12
   13db0:	f85d fb04 	ldr.w	pc, [sp], #4
   13db4:	1fff9688 	.word	0x1fff9688
   13db8:	1fff9684 	.word	0x1fff9684

00013dbc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
   13dbc:	b500      	push	{lr}
   13dbe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13dc0:	f7ec ff70 	bl	ca4 <Sys_GetCoreID>
   13dc4:	4603      	mov	r3, r0
   13dc6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId])
   13dc8:	4a10      	ldr	r2, [pc, #64]	; (13e0c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
   13dca:	9b01      	ldr	r3, [sp, #4]
   13dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13dd0:	2b00      	cmp	r3, #0
   13dd2:	d10d      	bne.n	13df0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13dd4:	f7ec fdd7 	bl	986 <Can_43_FLEXCAN_schm_read_msr>
   13dd8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13dda:	9b00      	ldr	r3, [sp, #0]
   13ddc:	f003 0301 	and.w	r3, r3, #1
   13de0:	2b00      	cmp	r3, #0
   13de2:	d100      	bne.n	13de6 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13de4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   13de6:	490a      	ldr	r1, [pc, #40]	; (13e10 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x54>)
   13de8:	9b01      	ldr	r3, [sp, #4]
   13dea:	9a00      	ldr	r2, [sp, #0]
   13dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]++;
   13df0:	4a06      	ldr	r2, [pc, #24]	; (13e0c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
   13df2:	9b01      	ldr	r3, [sp, #4]
   13df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13df8:	1c5a      	adds	r2, r3, #1
   13dfa:	4904      	ldr	r1, [pc, #16]	; (13e0c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
   13dfc:	9b01      	ldr	r3, [sp, #4]
   13dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13e02:	bf00      	nop
   13e04:	b003      	add	sp, #12
   13e06:	f85d fb04 	ldr.w	pc, [sp], #4
   13e0a:	bf00      	nop
   13e0c:	1fff9690 	.word	0x1fff9690
   13e10:	1fff968c 	.word	0x1fff968c

00013e14 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
   13e14:	b500      	push	{lr}
   13e16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e18:	f7ec ff44 	bl	ca4 <Sys_GetCoreID>
   13e1c:	4603      	mov	r3, r0
   13e1e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]--;
   13e20:	4a0d      	ldr	r2, [pc, #52]	; (13e58 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
   13e22:	9b01      	ldr	r3, [sp, #4]
   13e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e28:	1e5a      	subs	r2, r3, #1
   13e2a:	490b      	ldr	r1, [pc, #44]	; (13e58 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
   13e2c:	9b01      	ldr	r3, [sp, #4]
   13e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   13e32:	4a0a      	ldr	r2, [pc, #40]	; (13e5c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x48>)
   13e34:	9b01      	ldr	r3, [sp, #4]
   13e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e3a:	f003 0301 	and.w	r3, r3, #1
   13e3e:	2b00      	cmp	r3, #0
   13e40:	d106      	bne.n	13e50 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
   13e42:	4a05      	ldr	r2, [pc, #20]	; (13e58 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
   13e44:	9b01      	ldr	r3, [sp, #4]
   13e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e4a:	2b00      	cmp	r3, #0
   13e4c:	d100      	bne.n	13e50 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13e4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13e50:	bf00      	nop
   13e52:	b003      	add	sp, #12
   13e54:	f85d fb04 	ldr.w	pc, [sp], #4
   13e58:	1fff9690 	.word	0x1fff9690
   13e5c:	1fff968c 	.word	0x1fff968c

00013e60 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
   13e60:	b500      	push	{lr}
   13e62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e64:	f7ec ff1e 	bl	ca4 <Sys_GetCoreID>
   13e68:	4603      	mov	r3, r0
   13e6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId])
   13e6c:	4a10      	ldr	r2, [pc, #64]	; (13eb0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
   13e6e:	9b01      	ldr	r3, [sp, #4]
   13e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e74:	2b00      	cmp	r3, #0
   13e76:	d10d      	bne.n	13e94 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13e78:	f7ec fd85 	bl	986 <Can_43_FLEXCAN_schm_read_msr>
   13e7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13e7e:	9b00      	ldr	r3, [sp, #0]
   13e80:	f003 0301 	and.w	r3, r3, #1
   13e84:	2b00      	cmp	r3, #0
   13e86:	d100      	bne.n	13e8a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13e88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   13e8a:	490a      	ldr	r1, [pc, #40]	; (13eb4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x54>)
   13e8c:	9b01      	ldr	r3, [sp, #4]
   13e8e:	9a00      	ldr	r2, [sp, #0]
   13e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]++;
   13e94:	4a06      	ldr	r2, [pc, #24]	; (13eb0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
   13e96:	9b01      	ldr	r3, [sp, #4]
   13e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e9c:	1c5a      	adds	r2, r3, #1
   13e9e:	4904      	ldr	r1, [pc, #16]	; (13eb0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
   13ea0:	9b01      	ldr	r3, [sp, #4]
   13ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13ea6:	bf00      	nop
   13ea8:	b003      	add	sp, #12
   13eaa:	f85d fb04 	ldr.w	pc, [sp], #4
   13eae:	bf00      	nop
   13eb0:	1fff9698 	.word	0x1fff9698
   13eb4:	1fff9694 	.word	0x1fff9694

00013eb8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
   13eb8:	b500      	push	{lr}
   13eba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ebc:	f7ec fef2 	bl	ca4 <Sys_GetCoreID>
   13ec0:	4603      	mov	r3, r0
   13ec2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]--;
   13ec4:	4a0d      	ldr	r2, [pc, #52]	; (13efc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
   13ec6:	9b01      	ldr	r3, [sp, #4]
   13ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ecc:	1e5a      	subs	r2, r3, #1
   13ece:	490b      	ldr	r1, [pc, #44]	; (13efc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
   13ed0:	9b01      	ldr	r3, [sp, #4]
   13ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   13ed6:	4a0a      	ldr	r2, [pc, #40]	; (13f00 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x48>)
   13ed8:	9b01      	ldr	r3, [sp, #4]
   13eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ede:	f003 0301 	and.w	r3, r3, #1
   13ee2:	2b00      	cmp	r3, #0
   13ee4:	d106      	bne.n	13ef4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
   13ee6:	4a05      	ldr	r2, [pc, #20]	; (13efc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
   13ee8:	9b01      	ldr	r3, [sp, #4]
   13eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13eee:	2b00      	cmp	r3, #0
   13ef0:	d100      	bne.n	13ef4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13ef2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13ef4:	bf00      	nop
   13ef6:	b003      	add	sp, #12
   13ef8:	f85d fb04 	ldr.w	pc, [sp], #4
   13efc:	1fff9698 	.word	0x1fff9698
   13f00:	1fff9694 	.word	0x1fff9694

00013f04 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
   13f04:	b500      	push	{lr}
   13f06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f08:	f7ec fecc 	bl	ca4 <Sys_GetCoreID>
   13f0c:	4603      	mov	r3, r0
   13f0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId])
   13f10:	4a10      	ldr	r2, [pc, #64]	; (13f54 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
   13f12:	9b01      	ldr	r3, [sp, #4]
   13f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f18:	2b00      	cmp	r3, #0
   13f1a:	d10d      	bne.n	13f38 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13f1c:	f7ec fd33 	bl	986 <Can_43_FLEXCAN_schm_read_msr>
   13f20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13f22:	9b00      	ldr	r3, [sp, #0]
   13f24:	f003 0301 	and.w	r3, r3, #1
   13f28:	2b00      	cmp	r3, #0
   13f2a:	d100      	bne.n	13f2e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13f2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   13f2e:	490a      	ldr	r1, [pc, #40]	; (13f58 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x54>)
   13f30:	9b01      	ldr	r3, [sp, #4]
   13f32:	9a00      	ldr	r2, [sp, #0]
   13f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]++;
   13f38:	4a06      	ldr	r2, [pc, #24]	; (13f54 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
   13f3a:	9b01      	ldr	r3, [sp, #4]
   13f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f40:	1c5a      	adds	r2, r3, #1
   13f42:	4904      	ldr	r1, [pc, #16]	; (13f54 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
   13f44:	9b01      	ldr	r3, [sp, #4]
   13f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13f4a:	bf00      	nop
   13f4c:	b003      	add	sp, #12
   13f4e:	f85d fb04 	ldr.w	pc, [sp], #4
   13f52:	bf00      	nop
   13f54:	1fff96a0 	.word	0x1fff96a0
   13f58:	1fff969c 	.word	0x1fff969c

00013f5c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
   13f5c:	b500      	push	{lr}
   13f5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f60:	f7ec fea0 	bl	ca4 <Sys_GetCoreID>
   13f64:	4603      	mov	r3, r0
   13f66:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]--;
   13f68:	4a0d      	ldr	r2, [pc, #52]	; (13fa0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
   13f6a:	9b01      	ldr	r3, [sp, #4]
   13f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f70:	1e5a      	subs	r2, r3, #1
   13f72:	490b      	ldr	r1, [pc, #44]	; (13fa0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
   13f74:	9b01      	ldr	r3, [sp, #4]
   13f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   13f7a:	4a0a      	ldr	r2, [pc, #40]	; (13fa4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x48>)
   13f7c:	9b01      	ldr	r3, [sp, #4]
   13f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f82:	f003 0301 	and.w	r3, r3, #1
   13f86:	2b00      	cmp	r3, #0
   13f88:	d106      	bne.n	13f98 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
   13f8a:	4a05      	ldr	r2, [pc, #20]	; (13fa0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
   13f8c:	9b01      	ldr	r3, [sp, #4]
   13f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f92:	2b00      	cmp	r3, #0
   13f94:	d100      	bne.n	13f98 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13f96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13f98:	bf00      	nop
   13f9a:	b003      	add	sp, #12
   13f9c:	f85d fb04 	ldr.w	pc, [sp], #4
   13fa0:	1fff96a0 	.word	0x1fff96a0
   13fa4:	1fff969c 	.word	0x1fff969c

00013fa8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
   13fa8:	b500      	push	{lr}
   13faa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13fac:	f7ec fe7a 	bl	ca4 <Sys_GetCoreID>
   13fb0:	4603      	mov	r3, r0
   13fb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId])
   13fb4:	4a10      	ldr	r2, [pc, #64]	; (13ff8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
   13fb6:	9b01      	ldr	r3, [sp, #4]
   13fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fbc:	2b00      	cmp	r3, #0
   13fbe:	d10d      	bne.n	13fdc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13fc0:	f7ec fce1 	bl	986 <Can_43_FLEXCAN_schm_read_msr>
   13fc4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13fc6:	9b00      	ldr	r3, [sp, #0]
   13fc8:	f003 0301 	and.w	r3, r3, #1
   13fcc:	2b00      	cmp	r3, #0
   13fce:	d100      	bne.n	13fd2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13fd0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   13fd2:	490a      	ldr	r1, [pc, #40]	; (13ffc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x54>)
   13fd4:	9b01      	ldr	r3, [sp, #4]
   13fd6:	9a00      	ldr	r2, [sp, #0]
   13fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]++;
   13fdc:	4a06      	ldr	r2, [pc, #24]	; (13ff8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
   13fde:	9b01      	ldr	r3, [sp, #4]
   13fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fe4:	1c5a      	adds	r2, r3, #1
   13fe6:	4904      	ldr	r1, [pc, #16]	; (13ff8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
   13fe8:	9b01      	ldr	r3, [sp, #4]
   13fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13fee:	bf00      	nop
   13ff0:	b003      	add	sp, #12
   13ff2:	f85d fb04 	ldr.w	pc, [sp], #4
   13ff6:	bf00      	nop
   13ff8:	1fff96a8 	.word	0x1fff96a8
   13ffc:	1fff96a4 	.word	0x1fff96a4

00014000 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
   14000:	b500      	push	{lr}
   14002:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14004:	f7ec fe4e 	bl	ca4 <Sys_GetCoreID>
   14008:	4603      	mov	r3, r0
   1400a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]--;
   1400c:	4a0d      	ldr	r2, [pc, #52]	; (14044 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
   1400e:	9b01      	ldr	r3, [sp, #4]
   14010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14014:	1e5a      	subs	r2, r3, #1
   14016:	490b      	ldr	r1, [pc, #44]	; (14044 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
   14018:	9b01      	ldr	r3, [sp, #4]
   1401a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   1401e:	4a0a      	ldr	r2, [pc, #40]	; (14048 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x48>)
   14020:	9b01      	ldr	r3, [sp, #4]
   14022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14026:	f003 0301 	and.w	r3, r3, #1
   1402a:	2b00      	cmp	r3, #0
   1402c:	d106      	bne.n	1403c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
   1402e:	4a05      	ldr	r2, [pc, #20]	; (14044 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
   14030:	9b01      	ldr	r3, [sp, #4]
   14032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14036:	2b00      	cmp	r3, #0
   14038:	d100      	bne.n	1403c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1403a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1403c:	bf00      	nop
   1403e:	b003      	add	sp, #12
   14040:	f85d fb04 	ldr.w	pc, [sp], #4
   14044:	1fff96a8 	.word	0x1fff96a8
   14048:	1fff96a4 	.word	0x1fff96a4

0001404c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
   1404c:	b500      	push	{lr}
   1404e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14050:	f7ec fe28 	bl	ca4 <Sys_GetCoreID>
   14054:	4603      	mov	r3, r0
   14056:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId])
   14058:	4a10      	ldr	r2, [pc, #64]	; (1409c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
   1405a:	9b01      	ldr	r3, [sp, #4]
   1405c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14060:	2b00      	cmp	r3, #0
   14062:	d10d      	bne.n	14080 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14064:	f7ec fc8f 	bl	986 <Can_43_FLEXCAN_schm_read_msr>
   14068:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1406a:	9b00      	ldr	r3, [sp, #0]
   1406c:	f003 0301 	and.w	r3, r3, #1
   14070:	2b00      	cmp	r3, #0
   14072:	d100      	bne.n	14076 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14074:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   14076:	490a      	ldr	r1, [pc, #40]	; (140a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x54>)
   14078:	9b01      	ldr	r3, [sp, #4]
   1407a:	9a00      	ldr	r2, [sp, #0]
   1407c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]++;
   14080:	4a06      	ldr	r2, [pc, #24]	; (1409c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
   14082:	9b01      	ldr	r3, [sp, #4]
   14084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14088:	1c5a      	adds	r2, r3, #1
   1408a:	4904      	ldr	r1, [pc, #16]	; (1409c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
   1408c:	9b01      	ldr	r3, [sp, #4]
   1408e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14092:	bf00      	nop
   14094:	b003      	add	sp, #12
   14096:	f85d fb04 	ldr.w	pc, [sp], #4
   1409a:	bf00      	nop
   1409c:	1fff96b0 	.word	0x1fff96b0
   140a0:	1fff96ac 	.word	0x1fff96ac

000140a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
   140a4:	b500      	push	{lr}
   140a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   140a8:	f7ec fdfc 	bl	ca4 <Sys_GetCoreID>
   140ac:	4603      	mov	r3, r0
   140ae:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]--;
   140b0:	4a0d      	ldr	r2, [pc, #52]	; (140e8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
   140b2:	9b01      	ldr	r3, [sp, #4]
   140b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140b8:	1e5a      	subs	r2, r3, #1
   140ba:	490b      	ldr	r1, [pc, #44]	; (140e8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
   140bc:	9b01      	ldr	r3, [sp, #4]
   140be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   140c2:	4a0a      	ldr	r2, [pc, #40]	; (140ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x48>)
   140c4:	9b01      	ldr	r3, [sp, #4]
   140c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140ca:	f003 0301 	and.w	r3, r3, #1
   140ce:	2b00      	cmp	r3, #0
   140d0:	d106      	bne.n	140e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
   140d2:	4a05      	ldr	r2, [pc, #20]	; (140e8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
   140d4:	9b01      	ldr	r3, [sp, #4]
   140d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140da:	2b00      	cmp	r3, #0
   140dc:	d100      	bne.n	140e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   140de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   140e0:	bf00      	nop
   140e2:	b003      	add	sp, #12
   140e4:	f85d fb04 	ldr.w	pc, [sp], #4
   140e8:	1fff96b0 	.word	0x1fff96b0
   140ec:	1fff96ac 	.word	0x1fff96ac

000140f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
   140f0:	b500      	push	{lr}
   140f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   140f4:	f7ec fdd6 	bl	ca4 <Sys_GetCoreID>
   140f8:	4603      	mov	r3, r0
   140fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId])
   140fc:	4a10      	ldr	r2, [pc, #64]	; (14140 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
   140fe:	9b01      	ldr	r3, [sp, #4]
   14100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14104:	2b00      	cmp	r3, #0
   14106:	d10d      	bne.n	14124 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14108:	f7ec fc3d 	bl	986 <Can_43_FLEXCAN_schm_read_msr>
   1410c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1410e:	9b00      	ldr	r3, [sp, #0]
   14110:	f003 0301 	and.w	r3, r3, #1
   14114:	2b00      	cmp	r3, #0
   14116:	d100      	bne.n	1411a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14118:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   1411a:	490a      	ldr	r1, [pc, #40]	; (14144 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x54>)
   1411c:	9b01      	ldr	r3, [sp, #4]
   1411e:	9a00      	ldr	r2, [sp, #0]
   14120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]++;
   14124:	4a06      	ldr	r2, [pc, #24]	; (14140 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
   14126:	9b01      	ldr	r3, [sp, #4]
   14128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1412c:	1c5a      	adds	r2, r3, #1
   1412e:	4904      	ldr	r1, [pc, #16]	; (14140 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
   14130:	9b01      	ldr	r3, [sp, #4]
   14132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14136:	bf00      	nop
   14138:	b003      	add	sp, #12
   1413a:	f85d fb04 	ldr.w	pc, [sp], #4
   1413e:	bf00      	nop
   14140:	1fff96b8 	.word	0x1fff96b8
   14144:	1fff96b4 	.word	0x1fff96b4

00014148 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
   14148:	b500      	push	{lr}
   1414a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1414c:	f7ec fdaa 	bl	ca4 <Sys_GetCoreID>
   14150:	4603      	mov	r3, r0
   14152:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]--;
   14154:	4a0d      	ldr	r2, [pc, #52]	; (1418c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
   14156:	9b01      	ldr	r3, [sp, #4]
   14158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1415c:	1e5a      	subs	r2, r3, #1
   1415e:	490b      	ldr	r1, [pc, #44]	; (1418c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
   14160:	9b01      	ldr	r3, [sp, #4]
   14162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   14166:	4a0a      	ldr	r2, [pc, #40]	; (14190 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x48>)
   14168:	9b01      	ldr	r3, [sp, #4]
   1416a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1416e:	f003 0301 	and.w	r3, r3, #1
   14172:	2b00      	cmp	r3, #0
   14174:	d106      	bne.n	14184 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
   14176:	4a05      	ldr	r2, [pc, #20]	; (1418c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
   14178:	9b01      	ldr	r3, [sp, #4]
   1417a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1417e:	2b00      	cmp	r3, #0
   14180:	d100      	bne.n	14184 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14182:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14184:	bf00      	nop
   14186:	b003      	add	sp, #12
   14188:	f85d fb04 	ldr.w	pc, [sp], #4
   1418c:	1fff96b8 	.word	0x1fff96b8
   14190:	1fff96b4 	.word	0x1fff96b4

00014194 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
   14194:	b500      	push	{lr}
   14196:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14198:	f7ec fd84 	bl	ca4 <Sys_GetCoreID>
   1419c:	4603      	mov	r3, r0
   1419e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId])
   141a0:	4a10      	ldr	r2, [pc, #64]	; (141e4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
   141a2:	9b01      	ldr	r3, [sp, #4]
   141a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141a8:	2b00      	cmp	r3, #0
   141aa:	d10d      	bne.n	141c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   141ac:	f7ec fbeb 	bl	986 <Can_43_FLEXCAN_schm_read_msr>
   141b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   141b2:	9b00      	ldr	r3, [sp, #0]
   141b4:	f003 0301 	and.w	r3, r3, #1
   141b8:	2b00      	cmp	r3, #0
   141ba:	d100      	bne.n	141be <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   141bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   141be:	490a      	ldr	r1, [pc, #40]	; (141e8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x54>)
   141c0:	9b01      	ldr	r3, [sp, #4]
   141c2:	9a00      	ldr	r2, [sp, #0]
   141c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]++;
   141c8:	4a06      	ldr	r2, [pc, #24]	; (141e4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
   141ca:	9b01      	ldr	r3, [sp, #4]
   141cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141d0:	1c5a      	adds	r2, r3, #1
   141d2:	4904      	ldr	r1, [pc, #16]	; (141e4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
   141d4:	9b01      	ldr	r3, [sp, #4]
   141d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   141da:	bf00      	nop
   141dc:	b003      	add	sp, #12
   141de:	f85d fb04 	ldr.w	pc, [sp], #4
   141e2:	bf00      	nop
   141e4:	1fff96c0 	.word	0x1fff96c0
   141e8:	1fff96bc 	.word	0x1fff96bc

000141ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
   141ec:	b500      	push	{lr}
   141ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   141f0:	f7ec fd58 	bl	ca4 <Sys_GetCoreID>
   141f4:	4603      	mov	r3, r0
   141f6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]--;
   141f8:	4a0d      	ldr	r2, [pc, #52]	; (14230 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
   141fa:	9b01      	ldr	r3, [sp, #4]
   141fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14200:	1e5a      	subs	r2, r3, #1
   14202:	490b      	ldr	r1, [pc, #44]	; (14230 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
   14204:	9b01      	ldr	r3, [sp, #4]
   14206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   1420a:	4a0a      	ldr	r2, [pc, #40]	; (14234 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x48>)
   1420c:	9b01      	ldr	r3, [sp, #4]
   1420e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14212:	f003 0301 	and.w	r3, r3, #1
   14216:	2b00      	cmp	r3, #0
   14218:	d106      	bne.n	14228 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
   1421a:	4a05      	ldr	r2, [pc, #20]	; (14230 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
   1421c:	9b01      	ldr	r3, [sp, #4]
   1421e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14222:	2b00      	cmp	r3, #0
   14224:	d100      	bne.n	14228 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14226:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14228:	bf00      	nop
   1422a:	b003      	add	sp, #12
   1422c:	f85d fb04 	ldr.w	pc, [sp], #4
   14230:	1fff96c0 	.word	0x1fff96c0
   14234:	1fff96bc 	.word	0x1fff96bc

00014238 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
   14238:	b500      	push	{lr}
   1423a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1423c:	f7ec fd32 	bl	ca4 <Sys_GetCoreID>
   14240:	4603      	mov	r3, r0
   14242:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId])
   14244:	4a10      	ldr	r2, [pc, #64]	; (14288 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
   14246:	9b01      	ldr	r3, [sp, #4]
   14248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1424c:	2b00      	cmp	r3, #0
   1424e:	d10d      	bne.n	1426c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14250:	f7ec fb99 	bl	986 <Can_43_FLEXCAN_schm_read_msr>
   14254:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14256:	9b00      	ldr	r3, [sp, #0]
   14258:	f003 0301 	and.w	r3, r3, #1
   1425c:	2b00      	cmp	r3, #0
   1425e:	d100      	bne.n	14262 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14260:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   14262:	490a      	ldr	r1, [pc, #40]	; (1428c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x54>)
   14264:	9b01      	ldr	r3, [sp, #4]
   14266:	9a00      	ldr	r2, [sp, #0]
   14268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]++;
   1426c:	4a06      	ldr	r2, [pc, #24]	; (14288 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
   1426e:	9b01      	ldr	r3, [sp, #4]
   14270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14274:	1c5a      	adds	r2, r3, #1
   14276:	4904      	ldr	r1, [pc, #16]	; (14288 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
   14278:	9b01      	ldr	r3, [sp, #4]
   1427a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1427e:	bf00      	nop
   14280:	b003      	add	sp, #12
   14282:	f85d fb04 	ldr.w	pc, [sp], #4
   14286:	bf00      	nop
   14288:	1fff96c8 	.word	0x1fff96c8
   1428c:	1fff96c4 	.word	0x1fff96c4

00014290 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
   14290:	b500      	push	{lr}
   14292:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14294:	f7ec fd06 	bl	ca4 <Sys_GetCoreID>
   14298:	4603      	mov	r3, r0
   1429a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]--;
   1429c:	4a0d      	ldr	r2, [pc, #52]	; (142d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
   1429e:	9b01      	ldr	r3, [sp, #4]
   142a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142a4:	1e5a      	subs	r2, r3, #1
   142a6:	490b      	ldr	r1, [pc, #44]	; (142d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
   142a8:	9b01      	ldr	r3, [sp, #4]
   142aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   142ae:	4a0a      	ldr	r2, [pc, #40]	; (142d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x48>)
   142b0:	9b01      	ldr	r3, [sp, #4]
   142b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142b6:	f003 0301 	and.w	r3, r3, #1
   142ba:	2b00      	cmp	r3, #0
   142bc:	d106      	bne.n	142cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
   142be:	4a05      	ldr	r2, [pc, #20]	; (142d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
   142c0:	9b01      	ldr	r3, [sp, #4]
   142c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142c6:	2b00      	cmp	r3, #0
   142c8:	d100      	bne.n	142cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   142ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   142cc:	bf00      	nop
   142ce:	b003      	add	sp, #12
   142d0:	f85d fb04 	ldr.w	pc, [sp], #4
   142d4:	1fff96c8 	.word	0x1fff96c8
   142d8:	1fff96c4 	.word	0x1fff96c4

000142dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
   142dc:	b500      	push	{lr}
   142de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   142e0:	f7ec fce0 	bl	ca4 <Sys_GetCoreID>
   142e4:	4603      	mov	r3, r0
   142e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId])
   142e8:	4a10      	ldr	r2, [pc, #64]	; (1432c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
   142ea:	9b01      	ldr	r3, [sp, #4]
   142ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142f0:	2b00      	cmp	r3, #0
   142f2:	d10d      	bne.n	14310 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   142f4:	f7ec fb47 	bl	986 <Can_43_FLEXCAN_schm_read_msr>
   142f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   142fa:	9b00      	ldr	r3, [sp, #0]
   142fc:	f003 0301 	and.w	r3, r3, #1
   14300:	2b00      	cmp	r3, #0
   14302:	d100      	bne.n	14306 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14304:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   14306:	490a      	ldr	r1, [pc, #40]	; (14330 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x54>)
   14308:	9b01      	ldr	r3, [sp, #4]
   1430a:	9a00      	ldr	r2, [sp, #0]
   1430c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]++;
   14310:	4a06      	ldr	r2, [pc, #24]	; (1432c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
   14312:	9b01      	ldr	r3, [sp, #4]
   14314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14318:	1c5a      	adds	r2, r3, #1
   1431a:	4904      	ldr	r1, [pc, #16]	; (1432c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
   1431c:	9b01      	ldr	r3, [sp, #4]
   1431e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14322:	bf00      	nop
   14324:	b003      	add	sp, #12
   14326:	f85d fb04 	ldr.w	pc, [sp], #4
   1432a:	bf00      	nop
   1432c:	1fff96d0 	.word	0x1fff96d0
   14330:	1fff96cc 	.word	0x1fff96cc

00014334 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
   14334:	b500      	push	{lr}
   14336:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14338:	f7ec fcb4 	bl	ca4 <Sys_GetCoreID>
   1433c:	4603      	mov	r3, r0
   1433e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]--;
   14340:	4a0d      	ldr	r2, [pc, #52]	; (14378 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
   14342:	9b01      	ldr	r3, [sp, #4]
   14344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14348:	1e5a      	subs	r2, r3, #1
   1434a:	490b      	ldr	r1, [pc, #44]	; (14378 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
   1434c:	9b01      	ldr	r3, [sp, #4]
   1434e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   14352:	4a0a      	ldr	r2, [pc, #40]	; (1437c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x48>)
   14354:	9b01      	ldr	r3, [sp, #4]
   14356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1435a:	f003 0301 	and.w	r3, r3, #1
   1435e:	2b00      	cmp	r3, #0
   14360:	d106      	bne.n	14370 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
   14362:	4a05      	ldr	r2, [pc, #20]	; (14378 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
   14364:	9b01      	ldr	r3, [sp, #4]
   14366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1436a:	2b00      	cmp	r3, #0
   1436c:	d100      	bne.n	14370 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1436e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14370:	bf00      	nop
   14372:	b003      	add	sp, #12
   14374:	f85d fb04 	ldr.w	pc, [sp], #4
   14378:	1fff96d0 	.word	0x1fff96d0
   1437c:	1fff96cc 	.word	0x1fff96cc

00014380 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
   14380:	b500      	push	{lr}
   14382:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14384:	f7ec fc8e 	bl	ca4 <Sys_GetCoreID>
   14388:	4603      	mov	r3, r0
   1438a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId])
   1438c:	4a10      	ldr	r2, [pc, #64]	; (143d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
   1438e:	9b01      	ldr	r3, [sp, #4]
   14390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14394:	2b00      	cmp	r3, #0
   14396:	d10d      	bne.n	143b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14398:	f7ec faf5 	bl	986 <Can_43_FLEXCAN_schm_read_msr>
   1439c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1439e:	9b00      	ldr	r3, [sp, #0]
   143a0:	f003 0301 	and.w	r3, r3, #1
   143a4:	2b00      	cmp	r3, #0
   143a6:	d100      	bne.n	143aa <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   143a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   143aa:	490a      	ldr	r1, [pc, #40]	; (143d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x54>)
   143ac:	9b01      	ldr	r3, [sp, #4]
   143ae:	9a00      	ldr	r2, [sp, #0]
   143b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]++;
   143b4:	4a06      	ldr	r2, [pc, #24]	; (143d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
   143b6:	9b01      	ldr	r3, [sp, #4]
   143b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143bc:	1c5a      	adds	r2, r3, #1
   143be:	4904      	ldr	r1, [pc, #16]	; (143d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
   143c0:	9b01      	ldr	r3, [sp, #4]
   143c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   143c6:	bf00      	nop
   143c8:	b003      	add	sp, #12
   143ca:	f85d fb04 	ldr.w	pc, [sp], #4
   143ce:	bf00      	nop
   143d0:	1fff96d8 	.word	0x1fff96d8
   143d4:	1fff96d4 	.word	0x1fff96d4

000143d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
   143d8:	b500      	push	{lr}
   143da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   143dc:	f7ec fc62 	bl	ca4 <Sys_GetCoreID>
   143e0:	4603      	mov	r3, r0
   143e2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]--;
   143e4:	4a0d      	ldr	r2, [pc, #52]	; (1441c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
   143e6:	9b01      	ldr	r3, [sp, #4]
   143e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143ec:	1e5a      	subs	r2, r3, #1
   143ee:	490b      	ldr	r1, [pc, #44]	; (1441c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
   143f0:	9b01      	ldr	r3, [sp, #4]
   143f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   143f6:	4a0a      	ldr	r2, [pc, #40]	; (14420 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x48>)
   143f8:	9b01      	ldr	r3, [sp, #4]
   143fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143fe:	f003 0301 	and.w	r3, r3, #1
   14402:	2b00      	cmp	r3, #0
   14404:	d106      	bne.n	14414 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
   14406:	4a05      	ldr	r2, [pc, #20]	; (1441c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
   14408:	9b01      	ldr	r3, [sp, #4]
   1440a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1440e:	2b00      	cmp	r3, #0
   14410:	d100      	bne.n	14414 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14412:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14414:	bf00      	nop
   14416:	b003      	add	sp, #12
   14418:	f85d fb04 	ldr.w	pc, [sp], #4
   1441c:	1fff96d8 	.word	0x1fff96d8
   14420:	1fff96d4 	.word	0x1fff96d4

00014424 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
   14424:	b500      	push	{lr}
   14426:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14428:	f7ec fc3c 	bl	ca4 <Sys_GetCoreID>
   1442c:	4603      	mov	r3, r0
   1442e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId])
   14430:	4a10      	ldr	r2, [pc, #64]	; (14474 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
   14432:	9b01      	ldr	r3, [sp, #4]
   14434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14438:	2b00      	cmp	r3, #0
   1443a:	d10d      	bne.n	14458 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1443c:	f7ec faa3 	bl	986 <Can_43_FLEXCAN_schm_read_msr>
   14440:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14442:	9b00      	ldr	r3, [sp, #0]
   14444:	f003 0301 	and.w	r3, r3, #1
   14448:	2b00      	cmp	r3, #0
   1444a:	d100      	bne.n	1444e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1444c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   1444e:	490a      	ldr	r1, [pc, #40]	; (14478 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x54>)
   14450:	9b01      	ldr	r3, [sp, #4]
   14452:	9a00      	ldr	r2, [sp, #0]
   14454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]++;
   14458:	4a06      	ldr	r2, [pc, #24]	; (14474 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
   1445a:	9b01      	ldr	r3, [sp, #4]
   1445c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14460:	1c5a      	adds	r2, r3, #1
   14462:	4904      	ldr	r1, [pc, #16]	; (14474 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
   14464:	9b01      	ldr	r3, [sp, #4]
   14466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1446a:	bf00      	nop
   1446c:	b003      	add	sp, #12
   1446e:	f85d fb04 	ldr.w	pc, [sp], #4
   14472:	bf00      	nop
   14474:	1fff96e0 	.word	0x1fff96e0
   14478:	1fff96dc 	.word	0x1fff96dc

0001447c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
   1447c:	b500      	push	{lr}
   1447e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14480:	f7ec fc10 	bl	ca4 <Sys_GetCoreID>
   14484:	4603      	mov	r3, r0
   14486:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]--;
   14488:	4a0d      	ldr	r2, [pc, #52]	; (144c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
   1448a:	9b01      	ldr	r3, [sp, #4]
   1448c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14490:	1e5a      	subs	r2, r3, #1
   14492:	490b      	ldr	r1, [pc, #44]	; (144c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
   14494:	9b01      	ldr	r3, [sp, #4]
   14496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   1449a:	4a0a      	ldr	r2, [pc, #40]	; (144c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x48>)
   1449c:	9b01      	ldr	r3, [sp, #4]
   1449e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144a2:	f003 0301 	and.w	r3, r3, #1
   144a6:	2b00      	cmp	r3, #0
   144a8:	d106      	bne.n	144b8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
   144aa:	4a05      	ldr	r2, [pc, #20]	; (144c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
   144ac:	9b01      	ldr	r3, [sp, #4]
   144ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144b2:	2b00      	cmp	r3, #0
   144b4:	d100      	bne.n	144b8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   144b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   144b8:	bf00      	nop
   144ba:	b003      	add	sp, #12
   144bc:	f85d fb04 	ldr.w	pc, [sp], #4
   144c0:	1fff96e0 	.word	0x1fff96e0
   144c4:	1fff96dc 	.word	0x1fff96dc

000144c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
   144c8:	b500      	push	{lr}
   144ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   144cc:	f7ec fbea 	bl	ca4 <Sys_GetCoreID>
   144d0:	4603      	mov	r3, r0
   144d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId])
   144d4:	4a10      	ldr	r2, [pc, #64]	; (14518 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
   144d6:	9b01      	ldr	r3, [sp, #4]
   144d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144dc:	2b00      	cmp	r3, #0
   144de:	d10d      	bne.n	144fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   144e0:	f7ec fa51 	bl	986 <Can_43_FLEXCAN_schm_read_msr>
   144e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   144e6:	9b00      	ldr	r3, [sp, #0]
   144e8:	f003 0301 	and.w	r3, r3, #1
   144ec:	2b00      	cmp	r3, #0
   144ee:	d100      	bne.n	144f2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   144f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   144f2:	490a      	ldr	r1, [pc, #40]	; (1451c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x54>)
   144f4:	9b01      	ldr	r3, [sp, #4]
   144f6:	9a00      	ldr	r2, [sp, #0]
   144f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]++;
   144fc:	4a06      	ldr	r2, [pc, #24]	; (14518 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
   144fe:	9b01      	ldr	r3, [sp, #4]
   14500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14504:	1c5a      	adds	r2, r3, #1
   14506:	4904      	ldr	r1, [pc, #16]	; (14518 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
   14508:	9b01      	ldr	r3, [sp, #4]
   1450a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1450e:	bf00      	nop
   14510:	b003      	add	sp, #12
   14512:	f85d fb04 	ldr.w	pc, [sp], #4
   14516:	bf00      	nop
   14518:	1fff96e8 	.word	0x1fff96e8
   1451c:	1fff96e4 	.word	0x1fff96e4

00014520 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
   14520:	b500      	push	{lr}
   14522:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14524:	f7ec fbbe 	bl	ca4 <Sys_GetCoreID>
   14528:	4603      	mov	r3, r0
   1452a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]--;
   1452c:	4a0d      	ldr	r2, [pc, #52]	; (14564 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
   1452e:	9b01      	ldr	r3, [sp, #4]
   14530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14534:	1e5a      	subs	r2, r3, #1
   14536:	490b      	ldr	r1, [pc, #44]	; (14564 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
   14538:	9b01      	ldr	r3, [sp, #4]
   1453a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   1453e:	4a0a      	ldr	r2, [pc, #40]	; (14568 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x48>)
   14540:	9b01      	ldr	r3, [sp, #4]
   14542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14546:	f003 0301 	and.w	r3, r3, #1
   1454a:	2b00      	cmp	r3, #0
   1454c:	d106      	bne.n	1455c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
   1454e:	4a05      	ldr	r2, [pc, #20]	; (14564 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
   14550:	9b01      	ldr	r3, [sp, #4]
   14552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14556:	2b00      	cmp	r3, #0
   14558:	d100      	bne.n	1455c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1455a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1455c:	bf00      	nop
   1455e:	b003      	add	sp, #12
   14560:	f85d fb04 	ldr.w	pc, [sp], #4
   14564:	1fff96e8 	.word	0x1fff96e8
   14568:	1fff96e4 	.word	0x1fff96e4

0001456c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
   1456c:	b500      	push	{lr}
   1456e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14570:	f7ec fb98 	bl	ca4 <Sys_GetCoreID>
   14574:	4603      	mov	r3, r0
   14576:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId])
   14578:	4a10      	ldr	r2, [pc, #64]	; (145bc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
   1457a:	9b01      	ldr	r3, [sp, #4]
   1457c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14580:	2b00      	cmp	r3, #0
   14582:	d10d      	bne.n	145a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14584:	f7ec f9ff 	bl	986 <Can_43_FLEXCAN_schm_read_msr>
   14588:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1458a:	9b00      	ldr	r3, [sp, #0]
   1458c:	f003 0301 	and.w	r3, r3, #1
   14590:	2b00      	cmp	r3, #0
   14592:	d100      	bne.n	14596 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14594:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   14596:	490a      	ldr	r1, [pc, #40]	; (145c0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x54>)
   14598:	9b01      	ldr	r3, [sp, #4]
   1459a:	9a00      	ldr	r2, [sp, #0]
   1459c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]++;
   145a0:	4a06      	ldr	r2, [pc, #24]	; (145bc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
   145a2:	9b01      	ldr	r3, [sp, #4]
   145a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145a8:	1c5a      	adds	r2, r3, #1
   145aa:	4904      	ldr	r1, [pc, #16]	; (145bc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
   145ac:	9b01      	ldr	r3, [sp, #4]
   145ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   145b2:	bf00      	nop
   145b4:	b003      	add	sp, #12
   145b6:	f85d fb04 	ldr.w	pc, [sp], #4
   145ba:	bf00      	nop
   145bc:	1fff96f0 	.word	0x1fff96f0
   145c0:	1fff96ec 	.word	0x1fff96ec

000145c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
   145c4:	b500      	push	{lr}
   145c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   145c8:	f7ec fb6c 	bl	ca4 <Sys_GetCoreID>
   145cc:	4603      	mov	r3, r0
   145ce:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]--;
   145d0:	4a0d      	ldr	r2, [pc, #52]	; (14608 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
   145d2:	9b01      	ldr	r3, [sp, #4]
   145d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145d8:	1e5a      	subs	r2, r3, #1
   145da:	490b      	ldr	r1, [pc, #44]	; (14608 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
   145dc:	9b01      	ldr	r3, [sp, #4]
   145de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   145e2:	4a0a      	ldr	r2, [pc, #40]	; (1460c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x48>)
   145e4:	9b01      	ldr	r3, [sp, #4]
   145e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145ea:	f003 0301 	and.w	r3, r3, #1
   145ee:	2b00      	cmp	r3, #0
   145f0:	d106      	bne.n	14600 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
   145f2:	4a05      	ldr	r2, [pc, #20]	; (14608 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
   145f4:	9b01      	ldr	r3, [sp, #4]
   145f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145fa:	2b00      	cmp	r3, #0
   145fc:	d100      	bne.n	14600 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   145fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14600:	bf00      	nop
   14602:	b003      	add	sp, #12
   14604:	f85d fb04 	ldr.w	pc, [sp], #4
   14608:	1fff96f0 	.word	0x1fff96f0
   1460c:	1fff96ec 	.word	0x1fff96ec

00014610 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
   14610:	b500      	push	{lr}
   14612:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14614:	f7ec fb46 	bl	ca4 <Sys_GetCoreID>
   14618:	4603      	mov	r3, r0
   1461a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId])
   1461c:	4a10      	ldr	r2, [pc, #64]	; (14660 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
   1461e:	9b01      	ldr	r3, [sp, #4]
   14620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14624:	2b00      	cmp	r3, #0
   14626:	d10d      	bne.n	14644 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14628:	f7ec f9ad 	bl	986 <Can_43_FLEXCAN_schm_read_msr>
   1462c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1462e:	9b00      	ldr	r3, [sp, #0]
   14630:	f003 0301 	and.w	r3, r3, #1
   14634:	2b00      	cmp	r3, #0
   14636:	d100      	bne.n	1463a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14638:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   1463a:	490a      	ldr	r1, [pc, #40]	; (14664 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x54>)
   1463c:	9b01      	ldr	r3, [sp, #4]
   1463e:	9a00      	ldr	r2, [sp, #0]
   14640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]++;
   14644:	4a06      	ldr	r2, [pc, #24]	; (14660 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
   14646:	9b01      	ldr	r3, [sp, #4]
   14648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1464c:	1c5a      	adds	r2, r3, #1
   1464e:	4904      	ldr	r1, [pc, #16]	; (14660 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
   14650:	9b01      	ldr	r3, [sp, #4]
   14652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14656:	bf00      	nop
   14658:	b003      	add	sp, #12
   1465a:	f85d fb04 	ldr.w	pc, [sp], #4
   1465e:	bf00      	nop
   14660:	1fff96f8 	.word	0x1fff96f8
   14664:	1fff96f4 	.word	0x1fff96f4

00014668 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
   14668:	b500      	push	{lr}
   1466a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1466c:	f7ec fb1a 	bl	ca4 <Sys_GetCoreID>
   14670:	4603      	mov	r3, r0
   14672:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]--;
   14674:	4a0d      	ldr	r2, [pc, #52]	; (146ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
   14676:	9b01      	ldr	r3, [sp, #4]
   14678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1467c:	1e5a      	subs	r2, r3, #1
   1467e:	490b      	ldr	r1, [pc, #44]	; (146ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
   14680:	9b01      	ldr	r3, [sp, #4]
   14682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   14686:	4a0a      	ldr	r2, [pc, #40]	; (146b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x48>)
   14688:	9b01      	ldr	r3, [sp, #4]
   1468a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1468e:	f003 0301 	and.w	r3, r3, #1
   14692:	2b00      	cmp	r3, #0
   14694:	d106      	bne.n	146a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
   14696:	4a05      	ldr	r2, [pc, #20]	; (146ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
   14698:	9b01      	ldr	r3, [sp, #4]
   1469a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1469e:	2b00      	cmp	r3, #0
   146a0:	d100      	bne.n	146a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   146a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   146a4:	bf00      	nop
   146a6:	b003      	add	sp, #12
   146a8:	f85d fb04 	ldr.w	pc, [sp], #4
   146ac:	1fff96f8 	.word	0x1fff96f8
   146b0:	1fff96f4 	.word	0x1fff96f4

000146b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
   146b4:	b500      	push	{lr}
   146b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   146b8:	f7ec faf4 	bl	ca4 <Sys_GetCoreID>
   146bc:	4603      	mov	r3, r0
   146be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId])
   146c0:	4a10      	ldr	r2, [pc, #64]	; (14704 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
   146c2:	9b01      	ldr	r3, [sp, #4]
   146c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146c8:	2b00      	cmp	r3, #0
   146ca:	d10d      	bne.n	146e8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   146cc:	f7ec f95b 	bl	986 <Can_43_FLEXCAN_schm_read_msr>
   146d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   146d2:	9b00      	ldr	r3, [sp, #0]
   146d4:	f003 0301 	and.w	r3, r3, #1
   146d8:	2b00      	cmp	r3, #0
   146da:	d100      	bne.n	146de <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   146dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   146de:	490a      	ldr	r1, [pc, #40]	; (14708 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x54>)
   146e0:	9b01      	ldr	r3, [sp, #4]
   146e2:	9a00      	ldr	r2, [sp, #0]
   146e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]++;
   146e8:	4a06      	ldr	r2, [pc, #24]	; (14704 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
   146ea:	9b01      	ldr	r3, [sp, #4]
   146ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146f0:	1c5a      	adds	r2, r3, #1
   146f2:	4904      	ldr	r1, [pc, #16]	; (14704 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
   146f4:	9b01      	ldr	r3, [sp, #4]
   146f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   146fa:	bf00      	nop
   146fc:	b003      	add	sp, #12
   146fe:	f85d fb04 	ldr.w	pc, [sp], #4
   14702:	bf00      	nop
   14704:	1fff9700 	.word	0x1fff9700
   14708:	1fff96fc 	.word	0x1fff96fc

0001470c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
   1470c:	b500      	push	{lr}
   1470e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14710:	f7ec fac8 	bl	ca4 <Sys_GetCoreID>
   14714:	4603      	mov	r3, r0
   14716:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]--;
   14718:	4a0d      	ldr	r2, [pc, #52]	; (14750 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
   1471a:	9b01      	ldr	r3, [sp, #4]
   1471c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14720:	1e5a      	subs	r2, r3, #1
   14722:	490b      	ldr	r1, [pc, #44]	; (14750 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
   14724:	9b01      	ldr	r3, [sp, #4]
   14726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   1472a:	4a0a      	ldr	r2, [pc, #40]	; (14754 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x48>)
   1472c:	9b01      	ldr	r3, [sp, #4]
   1472e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14732:	f003 0301 	and.w	r3, r3, #1
   14736:	2b00      	cmp	r3, #0
   14738:	d106      	bne.n	14748 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
   1473a:	4a05      	ldr	r2, [pc, #20]	; (14750 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
   1473c:	9b01      	ldr	r3, [sp, #4]
   1473e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14742:	2b00      	cmp	r3, #0
   14744:	d100      	bne.n	14748 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14746:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14748:	bf00      	nop
   1474a:	b003      	add	sp, #12
   1474c:	f85d fb04 	ldr.w	pc, [sp], #4
   14750:	1fff9700 	.word	0x1fff9700
   14754:	1fff96fc 	.word	0x1fff96fc

00014758 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
   14758:	b500      	push	{lr}
   1475a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1475c:	f7ec faa2 	bl	ca4 <Sys_GetCoreID>
   14760:	4603      	mov	r3, r0
   14762:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId])
   14764:	4a10      	ldr	r2, [pc, #64]	; (147a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
   14766:	9b01      	ldr	r3, [sp, #4]
   14768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1476c:	2b00      	cmp	r3, #0
   1476e:	d10d      	bne.n	1478c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14770:	f7ec f909 	bl	986 <Can_43_FLEXCAN_schm_read_msr>
   14774:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14776:	9b00      	ldr	r3, [sp, #0]
   14778:	f003 0301 	and.w	r3, r3, #1
   1477c:	2b00      	cmp	r3, #0
   1477e:	d100      	bne.n	14782 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14780:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   14782:	490a      	ldr	r1, [pc, #40]	; (147ac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x54>)
   14784:	9b01      	ldr	r3, [sp, #4]
   14786:	9a00      	ldr	r2, [sp, #0]
   14788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]++;
   1478c:	4a06      	ldr	r2, [pc, #24]	; (147a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
   1478e:	9b01      	ldr	r3, [sp, #4]
   14790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14794:	1c5a      	adds	r2, r3, #1
   14796:	4904      	ldr	r1, [pc, #16]	; (147a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
   14798:	9b01      	ldr	r3, [sp, #4]
   1479a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1479e:	bf00      	nop
   147a0:	b003      	add	sp, #12
   147a2:	f85d fb04 	ldr.w	pc, [sp], #4
   147a6:	bf00      	nop
   147a8:	1fff9708 	.word	0x1fff9708
   147ac:	1fff9704 	.word	0x1fff9704

000147b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
   147b0:	b500      	push	{lr}
   147b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   147b4:	f7ec fa76 	bl	ca4 <Sys_GetCoreID>
   147b8:	4603      	mov	r3, r0
   147ba:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]--;
   147bc:	4a0d      	ldr	r2, [pc, #52]	; (147f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
   147be:	9b01      	ldr	r3, [sp, #4]
   147c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147c4:	1e5a      	subs	r2, r3, #1
   147c6:	490b      	ldr	r1, [pc, #44]	; (147f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
   147c8:	9b01      	ldr	r3, [sp, #4]
   147ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   147ce:	4a0a      	ldr	r2, [pc, #40]	; (147f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x48>)
   147d0:	9b01      	ldr	r3, [sp, #4]
   147d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147d6:	f003 0301 	and.w	r3, r3, #1
   147da:	2b00      	cmp	r3, #0
   147dc:	d106      	bne.n	147ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
   147de:	4a05      	ldr	r2, [pc, #20]	; (147f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
   147e0:	9b01      	ldr	r3, [sp, #4]
   147e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147e6:	2b00      	cmp	r3, #0
   147e8:	d100      	bne.n	147ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   147ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   147ec:	bf00      	nop
   147ee:	b003      	add	sp, #12
   147f0:	f85d fb04 	ldr.w	pc, [sp], #4
   147f4:	1fff9708 	.word	0x1fff9708
   147f8:	1fff9704 	.word	0x1fff9704

000147fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
   147fc:	b500      	push	{lr}
   147fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14800:	f7ec fa50 	bl	ca4 <Sys_GetCoreID>
   14804:	4603      	mov	r3, r0
   14806:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId])
   14808:	4a10      	ldr	r2, [pc, #64]	; (1484c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
   1480a:	9b01      	ldr	r3, [sp, #4]
   1480c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14810:	2b00      	cmp	r3, #0
   14812:	d10d      	bne.n	14830 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14814:	f7ec f8b7 	bl	986 <Can_43_FLEXCAN_schm_read_msr>
   14818:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1481a:	9b00      	ldr	r3, [sp, #0]
   1481c:	f003 0301 	and.w	r3, r3, #1
   14820:	2b00      	cmp	r3, #0
   14822:	d100      	bne.n	14826 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14824:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   14826:	490a      	ldr	r1, [pc, #40]	; (14850 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x54>)
   14828:	9b01      	ldr	r3, [sp, #4]
   1482a:	9a00      	ldr	r2, [sp, #0]
   1482c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]++;
   14830:	4a06      	ldr	r2, [pc, #24]	; (1484c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
   14832:	9b01      	ldr	r3, [sp, #4]
   14834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14838:	1c5a      	adds	r2, r3, #1
   1483a:	4904      	ldr	r1, [pc, #16]	; (1484c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
   1483c:	9b01      	ldr	r3, [sp, #4]
   1483e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14842:	bf00      	nop
   14844:	b003      	add	sp, #12
   14846:	f85d fb04 	ldr.w	pc, [sp], #4
   1484a:	bf00      	nop
   1484c:	1fff9710 	.word	0x1fff9710
   14850:	1fff970c 	.word	0x1fff970c

00014854 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
   14854:	b500      	push	{lr}
   14856:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14858:	f7ec fa24 	bl	ca4 <Sys_GetCoreID>
   1485c:	4603      	mov	r3, r0
   1485e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]--;
   14860:	4a0d      	ldr	r2, [pc, #52]	; (14898 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
   14862:	9b01      	ldr	r3, [sp, #4]
   14864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14868:	1e5a      	subs	r2, r3, #1
   1486a:	490b      	ldr	r1, [pc, #44]	; (14898 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
   1486c:	9b01      	ldr	r3, [sp, #4]
   1486e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   14872:	4a0a      	ldr	r2, [pc, #40]	; (1489c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x48>)
   14874:	9b01      	ldr	r3, [sp, #4]
   14876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1487a:	f003 0301 	and.w	r3, r3, #1
   1487e:	2b00      	cmp	r3, #0
   14880:	d106      	bne.n	14890 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
   14882:	4a05      	ldr	r2, [pc, #20]	; (14898 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
   14884:	9b01      	ldr	r3, [sp, #4]
   14886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1488a:	2b00      	cmp	r3, #0
   1488c:	d100      	bne.n	14890 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1488e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14890:	bf00      	nop
   14892:	b003      	add	sp, #12
   14894:	f85d fb04 	ldr.w	pc, [sp], #4
   14898:	1fff9710 	.word	0x1fff9710
   1489c:	1fff970c 	.word	0x1fff970c

000148a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
   148a0:	b500      	push	{lr}
   148a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   148a4:	f7ec f9fe 	bl	ca4 <Sys_GetCoreID>
   148a8:	4603      	mov	r3, r0
   148aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId])
   148ac:	4a10      	ldr	r2, [pc, #64]	; (148f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
   148ae:	9b01      	ldr	r3, [sp, #4]
   148b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148b4:	2b00      	cmp	r3, #0
   148b6:	d10d      	bne.n	148d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   148b8:	f7ec f865 	bl	986 <Can_43_FLEXCAN_schm_read_msr>
   148bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   148be:	9b00      	ldr	r3, [sp, #0]
   148c0:	f003 0301 	and.w	r3, r3, #1
   148c4:	2b00      	cmp	r3, #0
   148c6:	d100      	bne.n	148ca <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   148c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   148ca:	490a      	ldr	r1, [pc, #40]	; (148f4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x54>)
   148cc:	9b01      	ldr	r3, [sp, #4]
   148ce:	9a00      	ldr	r2, [sp, #0]
   148d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]++;
   148d4:	4a06      	ldr	r2, [pc, #24]	; (148f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
   148d6:	9b01      	ldr	r3, [sp, #4]
   148d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148dc:	1c5a      	adds	r2, r3, #1
   148de:	4904      	ldr	r1, [pc, #16]	; (148f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
   148e0:	9b01      	ldr	r3, [sp, #4]
   148e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   148e6:	bf00      	nop
   148e8:	b003      	add	sp, #12
   148ea:	f85d fb04 	ldr.w	pc, [sp], #4
   148ee:	bf00      	nop
   148f0:	1fff9718 	.word	0x1fff9718
   148f4:	1fff9714 	.word	0x1fff9714

000148f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
   148f8:	b500      	push	{lr}
   148fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   148fc:	f7ec f9d2 	bl	ca4 <Sys_GetCoreID>
   14900:	4603      	mov	r3, r0
   14902:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]--;
   14904:	4a0d      	ldr	r2, [pc, #52]	; (1493c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
   14906:	9b01      	ldr	r3, [sp, #4]
   14908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1490c:	1e5a      	subs	r2, r3, #1
   1490e:	490b      	ldr	r1, [pc, #44]	; (1493c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
   14910:	9b01      	ldr	r3, [sp, #4]
   14912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   14916:	4a0a      	ldr	r2, [pc, #40]	; (14940 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x48>)
   14918:	9b01      	ldr	r3, [sp, #4]
   1491a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1491e:	f003 0301 	and.w	r3, r3, #1
   14922:	2b00      	cmp	r3, #0
   14924:	d106      	bne.n	14934 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
   14926:	4a05      	ldr	r2, [pc, #20]	; (1493c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
   14928:	9b01      	ldr	r3, [sp, #4]
   1492a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1492e:	2b00      	cmp	r3, #0
   14930:	d100      	bne.n	14934 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14932:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14934:	bf00      	nop
   14936:	b003      	add	sp, #12
   14938:	f85d fb04 	ldr.w	pc, [sp], #4
   1493c:	1fff9718 	.word	0x1fff9718
   14940:	1fff9714 	.word	0x1fff9714

00014944 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
   14944:	b500      	push	{lr}
   14946:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14948:	f7ec f9ac 	bl	ca4 <Sys_GetCoreID>
   1494c:	4603      	mov	r3, r0
   1494e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId])
   14950:	4a10      	ldr	r2, [pc, #64]	; (14994 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
   14952:	9b01      	ldr	r3, [sp, #4]
   14954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14958:	2b00      	cmp	r3, #0
   1495a:	d10d      	bne.n	14978 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1495c:	f7ec f813 	bl	986 <Can_43_FLEXCAN_schm_read_msr>
   14960:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14962:	9b00      	ldr	r3, [sp, #0]
   14964:	f003 0301 	and.w	r3, r3, #1
   14968:	2b00      	cmp	r3, #0
   1496a:	d100      	bne.n	1496e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1496c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   1496e:	490a      	ldr	r1, [pc, #40]	; (14998 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x54>)
   14970:	9b01      	ldr	r3, [sp, #4]
   14972:	9a00      	ldr	r2, [sp, #0]
   14974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]++;
   14978:	4a06      	ldr	r2, [pc, #24]	; (14994 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
   1497a:	9b01      	ldr	r3, [sp, #4]
   1497c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14980:	1c5a      	adds	r2, r3, #1
   14982:	4904      	ldr	r1, [pc, #16]	; (14994 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
   14984:	9b01      	ldr	r3, [sp, #4]
   14986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1498a:	bf00      	nop
   1498c:	b003      	add	sp, #12
   1498e:	f85d fb04 	ldr.w	pc, [sp], #4
   14992:	bf00      	nop
   14994:	1fff9720 	.word	0x1fff9720
   14998:	1fff971c 	.word	0x1fff971c

0001499c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
   1499c:	b500      	push	{lr}
   1499e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   149a0:	f7ec f980 	bl	ca4 <Sys_GetCoreID>
   149a4:	4603      	mov	r3, r0
   149a6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]--;
   149a8:	4a0d      	ldr	r2, [pc, #52]	; (149e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
   149aa:	9b01      	ldr	r3, [sp, #4]
   149ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149b0:	1e5a      	subs	r2, r3, #1
   149b2:	490b      	ldr	r1, [pc, #44]	; (149e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
   149b4:	9b01      	ldr	r3, [sp, #4]
   149b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   149ba:	4a0a      	ldr	r2, [pc, #40]	; (149e4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x48>)
   149bc:	9b01      	ldr	r3, [sp, #4]
   149be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149c2:	f003 0301 	and.w	r3, r3, #1
   149c6:	2b00      	cmp	r3, #0
   149c8:	d106      	bne.n	149d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
   149ca:	4a05      	ldr	r2, [pc, #20]	; (149e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
   149cc:	9b01      	ldr	r3, [sp, #4]
   149ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149d2:	2b00      	cmp	r3, #0
   149d4:	d100      	bne.n	149d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   149d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   149d8:	bf00      	nop
   149da:	b003      	add	sp, #12
   149dc:	f85d fb04 	ldr.w	pc, [sp], #4
   149e0:	1fff9720 	.word	0x1fff9720
   149e4:	1fff971c 	.word	0x1fff971c

000149e8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
   149e8:	b500      	push	{lr}
   149ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   149ec:	f7ec f95a 	bl	ca4 <Sys_GetCoreID>
   149f0:	4603      	mov	r3, r0
   149f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId])
   149f4:	4a10      	ldr	r2, [pc, #64]	; (14a38 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
   149f6:	9b01      	ldr	r3, [sp, #4]
   149f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149fc:	2b00      	cmp	r3, #0
   149fe:	d10d      	bne.n	14a1c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14a00:	f7eb ffc1 	bl	986 <Can_43_FLEXCAN_schm_read_msr>
   14a04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14a06:	9b00      	ldr	r3, [sp, #0]
   14a08:	f003 0301 	and.w	r3, r3, #1
   14a0c:	2b00      	cmp	r3, #0
   14a0e:	d100      	bne.n	14a12 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14a10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   14a12:	490a      	ldr	r1, [pc, #40]	; (14a3c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x54>)
   14a14:	9b01      	ldr	r3, [sp, #4]
   14a16:	9a00      	ldr	r2, [sp, #0]
   14a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]++;
   14a1c:	4a06      	ldr	r2, [pc, #24]	; (14a38 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
   14a1e:	9b01      	ldr	r3, [sp, #4]
   14a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a24:	1c5a      	adds	r2, r3, #1
   14a26:	4904      	ldr	r1, [pc, #16]	; (14a38 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
   14a28:	9b01      	ldr	r3, [sp, #4]
   14a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14a2e:	bf00      	nop
   14a30:	b003      	add	sp, #12
   14a32:	f85d fb04 	ldr.w	pc, [sp], #4
   14a36:	bf00      	nop
   14a38:	1fff9728 	.word	0x1fff9728
   14a3c:	1fff9724 	.word	0x1fff9724

00014a40 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
   14a40:	b500      	push	{lr}
   14a42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a44:	f7ec f92e 	bl	ca4 <Sys_GetCoreID>
   14a48:	4603      	mov	r3, r0
   14a4a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]--;
   14a4c:	4a0d      	ldr	r2, [pc, #52]	; (14a84 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
   14a4e:	9b01      	ldr	r3, [sp, #4]
   14a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a54:	1e5a      	subs	r2, r3, #1
   14a56:	490b      	ldr	r1, [pc, #44]	; (14a84 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
   14a58:	9b01      	ldr	r3, [sp, #4]
   14a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   14a5e:	4a0a      	ldr	r2, [pc, #40]	; (14a88 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x48>)
   14a60:	9b01      	ldr	r3, [sp, #4]
   14a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a66:	f003 0301 	and.w	r3, r3, #1
   14a6a:	2b00      	cmp	r3, #0
   14a6c:	d106      	bne.n	14a7c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
   14a6e:	4a05      	ldr	r2, [pc, #20]	; (14a84 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
   14a70:	9b01      	ldr	r3, [sp, #4]
   14a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a76:	2b00      	cmp	r3, #0
   14a78:	d100      	bne.n	14a7c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14a7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14a7c:	bf00      	nop
   14a7e:	b003      	add	sp, #12
   14a80:	f85d fb04 	ldr.w	pc, [sp], #4
   14a84:	1fff9728 	.word	0x1fff9728
   14a88:	1fff9724 	.word	0x1fff9724

00014a8c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   14a8c:	b500      	push	{lr}
   14a8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a90:	f7ec f908 	bl	ca4 <Sys_GetCoreID>
   14a94:	4603      	mov	r3, r0
   14a96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
   14a98:	4a10      	ldr	r2, [pc, #64]	; (14adc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   14a9a:	9b01      	ldr	r3, [sp, #4]
   14a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14aa0:	2b00      	cmp	r3, #0
   14aa2:	d10d      	bne.n	14ac0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14aa4:	f7eb ff78 	bl	998 <Mcu_schm_read_msr>
   14aa8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14aaa:	9b00      	ldr	r3, [sp, #0]
   14aac:	f003 0301 	and.w	r3, r3, #1
   14ab0:	2b00      	cmp	r3, #0
   14ab2:	d100      	bne.n	14ab6 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14ab4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   14ab6:	490a      	ldr	r1, [pc, #40]	; (14ae0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
   14ab8:	9b01      	ldr	r3, [sp, #4]
   14aba:	9a00      	ldr	r2, [sp, #0]
   14abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
   14ac0:	4a06      	ldr	r2, [pc, #24]	; (14adc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   14ac2:	9b01      	ldr	r3, [sp, #4]
   14ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ac8:	1c5a      	adds	r2, r3, #1
   14aca:	4904      	ldr	r1, [pc, #16]	; (14adc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   14acc:	9b01      	ldr	r3, [sp, #4]
   14ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14ad2:	bf00      	nop
   14ad4:	b003      	add	sp, #12
   14ad6:	f85d fb04 	ldr.w	pc, [sp], #4
   14ada:	bf00      	nop
   14adc:	1fff9730 	.word	0x1fff9730
   14ae0:	1fff972c 	.word	0x1fff972c

00014ae4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   14ae4:	b500      	push	{lr}
   14ae6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ae8:	f7ec f8dc 	bl	ca4 <Sys_GetCoreID>
   14aec:	4603      	mov	r3, r0
   14aee:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
   14af0:	4a0d      	ldr	r2, [pc, #52]	; (14b28 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   14af2:	9b01      	ldr	r3, [sp, #4]
   14af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14af8:	1e5a      	subs	r2, r3, #1
   14afa:	490b      	ldr	r1, [pc, #44]	; (14b28 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   14afc:	9b01      	ldr	r3, [sp, #4]
   14afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   14b02:	4a0a      	ldr	r2, [pc, #40]	; (14b2c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
   14b04:	9b01      	ldr	r3, [sp, #4]
   14b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b0a:	f003 0301 	and.w	r3, r3, #1
   14b0e:	2b00      	cmp	r3, #0
   14b10:	d106      	bne.n	14b20 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
   14b12:	4a05      	ldr	r2, [pc, #20]	; (14b28 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   14b14:	9b01      	ldr	r3, [sp, #4]
   14b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b1a:	2b00      	cmp	r3, #0
   14b1c:	d100      	bne.n	14b20 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14b1e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14b20:	bf00      	nop
   14b22:	b003      	add	sp, #12
   14b24:	f85d fb04 	ldr.w	pc, [sp], #4
   14b28:	1fff9730 	.word	0x1fff9730
   14b2c:	1fff972c 	.word	0x1fff972c

00014b30 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   14b30:	b500      	push	{lr}
   14b32:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b34:	f7ec f8b6 	bl	ca4 <Sys_GetCoreID>
   14b38:	4603      	mov	r3, r0
   14b3a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
   14b3c:	4a10      	ldr	r2, [pc, #64]	; (14b80 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   14b3e:	9b01      	ldr	r3, [sp, #4]
   14b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b44:	2b00      	cmp	r3, #0
   14b46:	d10d      	bne.n	14b64 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14b48:	f7eb ff26 	bl	998 <Mcu_schm_read_msr>
   14b4c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14b4e:	9b00      	ldr	r3, [sp, #0]
   14b50:	f003 0301 	and.w	r3, r3, #1
   14b54:	2b00      	cmp	r3, #0
   14b56:	d100      	bne.n	14b5a <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14b58:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   14b5a:	490a      	ldr	r1, [pc, #40]	; (14b84 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
   14b5c:	9b01      	ldr	r3, [sp, #4]
   14b5e:	9a00      	ldr	r2, [sp, #0]
   14b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
   14b64:	4a06      	ldr	r2, [pc, #24]	; (14b80 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   14b66:	9b01      	ldr	r3, [sp, #4]
   14b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b6c:	1c5a      	adds	r2, r3, #1
   14b6e:	4904      	ldr	r1, [pc, #16]	; (14b80 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   14b70:	9b01      	ldr	r3, [sp, #4]
   14b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14b76:	bf00      	nop
   14b78:	b003      	add	sp, #12
   14b7a:	f85d fb04 	ldr.w	pc, [sp], #4
   14b7e:	bf00      	nop
   14b80:	1fff9738 	.word	0x1fff9738
   14b84:	1fff9734 	.word	0x1fff9734

00014b88 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   14b88:	b500      	push	{lr}
   14b8a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b8c:	f7ec f88a 	bl	ca4 <Sys_GetCoreID>
   14b90:	4603      	mov	r3, r0
   14b92:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
   14b94:	4a0d      	ldr	r2, [pc, #52]	; (14bcc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   14b96:	9b01      	ldr	r3, [sp, #4]
   14b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b9c:	1e5a      	subs	r2, r3, #1
   14b9e:	490b      	ldr	r1, [pc, #44]	; (14bcc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   14ba0:	9b01      	ldr	r3, [sp, #4]
   14ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   14ba6:	4a0a      	ldr	r2, [pc, #40]	; (14bd0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
   14ba8:	9b01      	ldr	r3, [sp, #4]
   14baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bae:	f003 0301 	and.w	r3, r3, #1
   14bb2:	2b00      	cmp	r3, #0
   14bb4:	d106      	bne.n	14bc4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
   14bb6:	4a05      	ldr	r2, [pc, #20]	; (14bcc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   14bb8:	9b01      	ldr	r3, [sp, #4]
   14bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bbe:	2b00      	cmp	r3, #0
   14bc0:	d100      	bne.n	14bc4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14bc2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14bc4:	bf00      	nop
   14bc6:	b003      	add	sp, #12
   14bc8:	f85d fb04 	ldr.w	pc, [sp], #4
   14bcc:	1fff9738 	.word	0x1fff9738
   14bd0:	1fff9734 	.word	0x1fff9734

00014bd4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   14bd4:	b500      	push	{lr}
   14bd6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14bd8:	f7ec f864 	bl	ca4 <Sys_GetCoreID>
   14bdc:	4603      	mov	r3, r0
   14bde:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
   14be0:	4a10      	ldr	r2, [pc, #64]	; (14c24 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   14be2:	9b01      	ldr	r3, [sp, #4]
   14be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14be8:	2b00      	cmp	r3, #0
   14bea:	d10d      	bne.n	14c08 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14bec:	f7eb fed4 	bl	998 <Mcu_schm_read_msr>
   14bf0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14bf2:	9b00      	ldr	r3, [sp, #0]
   14bf4:	f003 0301 	and.w	r3, r3, #1
   14bf8:	2b00      	cmp	r3, #0
   14bfa:	d100      	bne.n	14bfe <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14bfc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   14bfe:	490a      	ldr	r1, [pc, #40]	; (14c28 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
   14c00:	9b01      	ldr	r3, [sp, #4]
   14c02:	9a00      	ldr	r2, [sp, #0]
   14c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
   14c08:	4a06      	ldr	r2, [pc, #24]	; (14c24 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   14c0a:	9b01      	ldr	r3, [sp, #4]
   14c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c10:	1c5a      	adds	r2, r3, #1
   14c12:	4904      	ldr	r1, [pc, #16]	; (14c24 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   14c14:	9b01      	ldr	r3, [sp, #4]
   14c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14c1a:	bf00      	nop
   14c1c:	b003      	add	sp, #12
   14c1e:	f85d fb04 	ldr.w	pc, [sp], #4
   14c22:	bf00      	nop
   14c24:	1fff9740 	.word	0x1fff9740
   14c28:	1fff973c 	.word	0x1fff973c

00014c2c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   14c2c:	b500      	push	{lr}
   14c2e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c30:	f7ec f838 	bl	ca4 <Sys_GetCoreID>
   14c34:	4603      	mov	r3, r0
   14c36:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
   14c38:	4a0d      	ldr	r2, [pc, #52]	; (14c70 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   14c3a:	9b01      	ldr	r3, [sp, #4]
   14c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c40:	1e5a      	subs	r2, r3, #1
   14c42:	490b      	ldr	r1, [pc, #44]	; (14c70 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   14c44:	9b01      	ldr	r3, [sp, #4]
   14c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   14c4a:	4a0a      	ldr	r2, [pc, #40]	; (14c74 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
   14c4c:	9b01      	ldr	r3, [sp, #4]
   14c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c52:	f003 0301 	and.w	r3, r3, #1
   14c56:	2b00      	cmp	r3, #0
   14c58:	d106      	bne.n	14c68 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
   14c5a:	4a05      	ldr	r2, [pc, #20]	; (14c70 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   14c5c:	9b01      	ldr	r3, [sp, #4]
   14c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c62:	2b00      	cmp	r3, #0
   14c64:	d100      	bne.n	14c68 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14c66:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14c68:	bf00      	nop
   14c6a:	b003      	add	sp, #12
   14c6c:	f85d fb04 	ldr.w	pc, [sp], #4
   14c70:	1fff9740 	.word	0x1fff9740
   14c74:	1fff973c 	.word	0x1fff973c

00014c78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   14c78:	b500      	push	{lr}
   14c7a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c7c:	f7ec f812 	bl	ca4 <Sys_GetCoreID>
   14c80:	4603      	mov	r3, r0
   14c82:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
   14c84:	4a10      	ldr	r2, [pc, #64]	; (14cc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   14c86:	9b01      	ldr	r3, [sp, #4]
   14c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c8c:	2b00      	cmp	r3, #0
   14c8e:	d10d      	bne.n	14cac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14c90:	f7eb fe8b 	bl	9aa <Port_schm_read_msr>
   14c94:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14c96:	9b00      	ldr	r3, [sp, #0]
   14c98:	f003 0301 	and.w	r3, r3, #1
   14c9c:	2b00      	cmp	r3, #0
   14c9e:	d100      	bne.n	14ca2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14ca0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   14ca2:	490a      	ldr	r1, [pc, #40]	; (14ccc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
   14ca4:	9b01      	ldr	r3, [sp, #4]
   14ca6:	9a00      	ldr	r2, [sp, #0]
   14ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
   14cac:	4a06      	ldr	r2, [pc, #24]	; (14cc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   14cae:	9b01      	ldr	r3, [sp, #4]
   14cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cb4:	1c5a      	adds	r2, r3, #1
   14cb6:	4904      	ldr	r1, [pc, #16]	; (14cc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   14cb8:	9b01      	ldr	r3, [sp, #4]
   14cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14cbe:	bf00      	nop
   14cc0:	b003      	add	sp, #12
   14cc2:	f85d fb04 	ldr.w	pc, [sp], #4
   14cc6:	bf00      	nop
   14cc8:	1fff9748 	.word	0x1fff9748
   14ccc:	1fff9744 	.word	0x1fff9744

00014cd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   14cd0:	b500      	push	{lr}
   14cd2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14cd4:	f7eb ffe6 	bl	ca4 <Sys_GetCoreID>
   14cd8:	4603      	mov	r3, r0
   14cda:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
   14cdc:	4a0d      	ldr	r2, [pc, #52]	; (14d14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   14cde:	9b01      	ldr	r3, [sp, #4]
   14ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ce4:	1e5a      	subs	r2, r3, #1
   14ce6:	490b      	ldr	r1, [pc, #44]	; (14d14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   14ce8:	9b01      	ldr	r3, [sp, #4]
   14cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   14cee:	4a0a      	ldr	r2, [pc, #40]	; (14d18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
   14cf0:	9b01      	ldr	r3, [sp, #4]
   14cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cf6:	f003 0301 	and.w	r3, r3, #1
   14cfa:	2b00      	cmp	r3, #0
   14cfc:	d106      	bne.n	14d0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
   14cfe:	4a05      	ldr	r2, [pc, #20]	; (14d14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   14d00:	9b01      	ldr	r3, [sp, #4]
   14d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d06:	2b00      	cmp	r3, #0
   14d08:	d100      	bne.n	14d0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14d0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14d0c:	bf00      	nop
   14d0e:	b003      	add	sp, #12
   14d10:	f85d fb04 	ldr.w	pc, [sp], #4
   14d14:	1fff9748 	.word	0x1fff9748
   14d18:	1fff9744 	.word	0x1fff9744

00014d1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   14d1c:	b500      	push	{lr}
   14d1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d20:	f7eb ffc0 	bl	ca4 <Sys_GetCoreID>
   14d24:	4603      	mov	r3, r0
   14d26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
   14d28:	4a10      	ldr	r2, [pc, #64]	; (14d6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   14d2a:	9b01      	ldr	r3, [sp, #4]
   14d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d30:	2b00      	cmp	r3, #0
   14d32:	d10d      	bne.n	14d50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14d34:	f7eb fe39 	bl	9aa <Port_schm_read_msr>
   14d38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14d3a:	9b00      	ldr	r3, [sp, #0]
   14d3c:	f003 0301 	and.w	r3, r3, #1
   14d40:	2b00      	cmp	r3, #0
   14d42:	d100      	bne.n	14d46 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14d44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   14d46:	490a      	ldr	r1, [pc, #40]	; (14d70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
   14d48:	9b01      	ldr	r3, [sp, #4]
   14d4a:	9a00      	ldr	r2, [sp, #0]
   14d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
   14d50:	4a06      	ldr	r2, [pc, #24]	; (14d6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   14d52:	9b01      	ldr	r3, [sp, #4]
   14d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d58:	1c5a      	adds	r2, r3, #1
   14d5a:	4904      	ldr	r1, [pc, #16]	; (14d6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   14d5c:	9b01      	ldr	r3, [sp, #4]
   14d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14d62:	bf00      	nop
   14d64:	b003      	add	sp, #12
   14d66:	f85d fb04 	ldr.w	pc, [sp], #4
   14d6a:	bf00      	nop
   14d6c:	1fff9750 	.word	0x1fff9750
   14d70:	1fff974c 	.word	0x1fff974c

00014d74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   14d74:	b500      	push	{lr}
   14d76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d78:	f7eb ff94 	bl	ca4 <Sys_GetCoreID>
   14d7c:	4603      	mov	r3, r0
   14d7e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
   14d80:	4a0d      	ldr	r2, [pc, #52]	; (14db8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   14d82:	9b01      	ldr	r3, [sp, #4]
   14d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d88:	1e5a      	subs	r2, r3, #1
   14d8a:	490b      	ldr	r1, [pc, #44]	; (14db8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   14d8c:	9b01      	ldr	r3, [sp, #4]
   14d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   14d92:	4a0a      	ldr	r2, [pc, #40]	; (14dbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
   14d94:	9b01      	ldr	r3, [sp, #4]
   14d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d9a:	f003 0301 	and.w	r3, r3, #1
   14d9e:	2b00      	cmp	r3, #0
   14da0:	d106      	bne.n	14db0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
   14da2:	4a05      	ldr	r2, [pc, #20]	; (14db8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   14da4:	9b01      	ldr	r3, [sp, #4]
   14da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14daa:	2b00      	cmp	r3, #0
   14dac:	d100      	bne.n	14db0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14dae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14db0:	bf00      	nop
   14db2:	b003      	add	sp, #12
   14db4:	f85d fb04 	ldr.w	pc, [sp], #4
   14db8:	1fff9750 	.word	0x1fff9750
   14dbc:	1fff974c 	.word	0x1fff974c

00014dc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   14dc0:	b500      	push	{lr}
   14dc2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14dc4:	f7eb ff6e 	bl	ca4 <Sys_GetCoreID>
   14dc8:	4603      	mov	r3, r0
   14dca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
   14dcc:	4a10      	ldr	r2, [pc, #64]	; (14e10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   14dce:	9b01      	ldr	r3, [sp, #4]
   14dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14dd4:	2b00      	cmp	r3, #0
   14dd6:	d10d      	bne.n	14df4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14dd8:	f7eb fde7 	bl	9aa <Port_schm_read_msr>
   14ddc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14dde:	9b00      	ldr	r3, [sp, #0]
   14de0:	f003 0301 	and.w	r3, r3, #1
   14de4:	2b00      	cmp	r3, #0
   14de6:	d100      	bne.n	14dea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14de8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   14dea:	490a      	ldr	r1, [pc, #40]	; (14e14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
   14dec:	9b01      	ldr	r3, [sp, #4]
   14dee:	9a00      	ldr	r2, [sp, #0]
   14df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
   14df4:	4a06      	ldr	r2, [pc, #24]	; (14e10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   14df6:	9b01      	ldr	r3, [sp, #4]
   14df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14dfc:	1c5a      	adds	r2, r3, #1
   14dfe:	4904      	ldr	r1, [pc, #16]	; (14e10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   14e00:	9b01      	ldr	r3, [sp, #4]
   14e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14e06:	bf00      	nop
   14e08:	b003      	add	sp, #12
   14e0a:	f85d fb04 	ldr.w	pc, [sp], #4
   14e0e:	bf00      	nop
   14e10:	1fff9758 	.word	0x1fff9758
   14e14:	1fff9754 	.word	0x1fff9754

00014e18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   14e18:	b500      	push	{lr}
   14e1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e1c:	f7eb ff42 	bl	ca4 <Sys_GetCoreID>
   14e20:	4603      	mov	r3, r0
   14e22:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
   14e24:	4a0d      	ldr	r2, [pc, #52]	; (14e5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   14e26:	9b01      	ldr	r3, [sp, #4]
   14e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e2c:	1e5a      	subs	r2, r3, #1
   14e2e:	490b      	ldr	r1, [pc, #44]	; (14e5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   14e30:	9b01      	ldr	r3, [sp, #4]
   14e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   14e36:	4a0a      	ldr	r2, [pc, #40]	; (14e60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
   14e38:	9b01      	ldr	r3, [sp, #4]
   14e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e3e:	f003 0301 	and.w	r3, r3, #1
   14e42:	2b00      	cmp	r3, #0
   14e44:	d106      	bne.n	14e54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
   14e46:	4a05      	ldr	r2, [pc, #20]	; (14e5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   14e48:	9b01      	ldr	r3, [sp, #4]
   14e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e4e:	2b00      	cmp	r3, #0
   14e50:	d100      	bne.n	14e54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14e52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14e54:	bf00      	nop
   14e56:	b003      	add	sp, #12
   14e58:	f85d fb04 	ldr.w	pc, [sp], #4
   14e5c:	1fff9758 	.word	0x1fff9758
   14e60:	1fff9754 	.word	0x1fff9754

00014e64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   14e64:	b500      	push	{lr}
   14e66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e68:	f7eb ff1c 	bl	ca4 <Sys_GetCoreID>
   14e6c:	4603      	mov	r3, r0
   14e6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
   14e70:	4a10      	ldr	r2, [pc, #64]	; (14eb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   14e72:	9b01      	ldr	r3, [sp, #4]
   14e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e78:	2b00      	cmp	r3, #0
   14e7a:	d10d      	bne.n	14e98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14e7c:	f7eb fd95 	bl	9aa <Port_schm_read_msr>
   14e80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14e82:	9b00      	ldr	r3, [sp, #0]
   14e84:	f003 0301 	and.w	r3, r3, #1
   14e88:	2b00      	cmp	r3, #0
   14e8a:	d100      	bne.n	14e8e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14e8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   14e8e:	490a      	ldr	r1, [pc, #40]	; (14eb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
   14e90:	9b01      	ldr	r3, [sp, #4]
   14e92:	9a00      	ldr	r2, [sp, #0]
   14e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
   14e98:	4a06      	ldr	r2, [pc, #24]	; (14eb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   14e9a:	9b01      	ldr	r3, [sp, #4]
   14e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ea0:	1c5a      	adds	r2, r3, #1
   14ea2:	4904      	ldr	r1, [pc, #16]	; (14eb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   14ea4:	9b01      	ldr	r3, [sp, #4]
   14ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14eaa:	bf00      	nop
   14eac:	b003      	add	sp, #12
   14eae:	f85d fb04 	ldr.w	pc, [sp], #4
   14eb2:	bf00      	nop
   14eb4:	1fff9760 	.word	0x1fff9760
   14eb8:	1fff975c 	.word	0x1fff975c

00014ebc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   14ebc:	b500      	push	{lr}
   14ebe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ec0:	f7eb fef0 	bl	ca4 <Sys_GetCoreID>
   14ec4:	4603      	mov	r3, r0
   14ec6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
   14ec8:	4a0d      	ldr	r2, [pc, #52]	; (14f00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   14eca:	9b01      	ldr	r3, [sp, #4]
   14ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ed0:	1e5a      	subs	r2, r3, #1
   14ed2:	490b      	ldr	r1, [pc, #44]	; (14f00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   14ed4:	9b01      	ldr	r3, [sp, #4]
   14ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   14eda:	4a0a      	ldr	r2, [pc, #40]	; (14f04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
   14edc:	9b01      	ldr	r3, [sp, #4]
   14ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ee2:	f003 0301 	and.w	r3, r3, #1
   14ee6:	2b00      	cmp	r3, #0
   14ee8:	d106      	bne.n	14ef8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
   14eea:	4a05      	ldr	r2, [pc, #20]	; (14f00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   14eec:	9b01      	ldr	r3, [sp, #4]
   14eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ef2:	2b00      	cmp	r3, #0
   14ef4:	d100      	bne.n	14ef8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14ef6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14ef8:	bf00      	nop
   14efa:	b003      	add	sp, #12
   14efc:	f85d fb04 	ldr.w	pc, [sp], #4
   14f00:	1fff9760 	.word	0x1fff9760
   14f04:	1fff975c 	.word	0x1fff975c

00014f08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   14f08:	b500      	push	{lr}
   14f0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14f0c:	f7eb feca 	bl	ca4 <Sys_GetCoreID>
   14f10:	4603      	mov	r3, r0
   14f12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
   14f14:	4a10      	ldr	r2, [pc, #64]	; (14f58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   14f16:	9b01      	ldr	r3, [sp, #4]
   14f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f1c:	2b00      	cmp	r3, #0
   14f1e:	d10d      	bne.n	14f3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14f20:	f7eb fd43 	bl	9aa <Port_schm_read_msr>
   14f24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14f26:	9b00      	ldr	r3, [sp, #0]
   14f28:	f003 0301 	and.w	r3, r3, #1
   14f2c:	2b00      	cmp	r3, #0
   14f2e:	d100      	bne.n	14f32 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14f30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   14f32:	490a      	ldr	r1, [pc, #40]	; (14f5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
   14f34:	9b01      	ldr	r3, [sp, #4]
   14f36:	9a00      	ldr	r2, [sp, #0]
   14f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
   14f3c:	4a06      	ldr	r2, [pc, #24]	; (14f58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   14f3e:	9b01      	ldr	r3, [sp, #4]
   14f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f44:	1c5a      	adds	r2, r3, #1
   14f46:	4904      	ldr	r1, [pc, #16]	; (14f58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   14f48:	9b01      	ldr	r3, [sp, #4]
   14f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14f4e:	bf00      	nop
   14f50:	b003      	add	sp, #12
   14f52:	f85d fb04 	ldr.w	pc, [sp], #4
   14f56:	bf00      	nop
   14f58:	1fff9768 	.word	0x1fff9768
   14f5c:	1fff9764 	.word	0x1fff9764

00014f60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   14f60:	b500      	push	{lr}
   14f62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14f64:	f7eb fe9e 	bl	ca4 <Sys_GetCoreID>
   14f68:	4603      	mov	r3, r0
   14f6a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
   14f6c:	4a0d      	ldr	r2, [pc, #52]	; (14fa4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   14f6e:	9b01      	ldr	r3, [sp, #4]
   14f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f74:	1e5a      	subs	r2, r3, #1
   14f76:	490b      	ldr	r1, [pc, #44]	; (14fa4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   14f78:	9b01      	ldr	r3, [sp, #4]
   14f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   14f7e:	4a0a      	ldr	r2, [pc, #40]	; (14fa8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
   14f80:	9b01      	ldr	r3, [sp, #4]
   14f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f86:	f003 0301 	and.w	r3, r3, #1
   14f8a:	2b00      	cmp	r3, #0
   14f8c:	d106      	bne.n	14f9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
   14f8e:	4a05      	ldr	r2, [pc, #20]	; (14fa4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   14f90:	9b01      	ldr	r3, [sp, #4]
   14f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f96:	2b00      	cmp	r3, #0
   14f98:	d100      	bne.n	14f9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14f9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14f9c:	bf00      	nop
   14f9e:	b003      	add	sp, #12
   14fa0:	f85d fb04 	ldr.w	pc, [sp], #4
   14fa4:	1fff9768 	.word	0x1fff9768
   14fa8:	1fff9764 	.word	0x1fff9764

00014fac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   14fac:	b500      	push	{lr}
   14fae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14fb0:	f7eb fe78 	bl	ca4 <Sys_GetCoreID>
   14fb4:	4603      	mov	r3, r0
   14fb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
   14fb8:	4a10      	ldr	r2, [pc, #64]	; (14ffc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   14fba:	9b01      	ldr	r3, [sp, #4]
   14fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fc0:	2b00      	cmp	r3, #0
   14fc2:	d10d      	bne.n	14fe0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14fc4:	f7eb fcf1 	bl	9aa <Port_schm_read_msr>
   14fc8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14fca:	9b00      	ldr	r3, [sp, #0]
   14fcc:	f003 0301 	and.w	r3, r3, #1
   14fd0:	2b00      	cmp	r3, #0
   14fd2:	d100      	bne.n	14fd6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14fd4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   14fd6:	490a      	ldr	r1, [pc, #40]	; (15000 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
   14fd8:	9b01      	ldr	r3, [sp, #4]
   14fda:	9a00      	ldr	r2, [sp, #0]
   14fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
   14fe0:	4a06      	ldr	r2, [pc, #24]	; (14ffc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   14fe2:	9b01      	ldr	r3, [sp, #4]
   14fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fe8:	1c5a      	adds	r2, r3, #1
   14fea:	4904      	ldr	r1, [pc, #16]	; (14ffc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   14fec:	9b01      	ldr	r3, [sp, #4]
   14fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14ff2:	bf00      	nop
   14ff4:	b003      	add	sp, #12
   14ff6:	f85d fb04 	ldr.w	pc, [sp], #4
   14ffa:	bf00      	nop
   14ffc:	1fff9770 	.word	0x1fff9770
   15000:	1fff976c 	.word	0x1fff976c

00015004 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   15004:	b500      	push	{lr}
   15006:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15008:	f7eb fe4c 	bl	ca4 <Sys_GetCoreID>
   1500c:	4603      	mov	r3, r0
   1500e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
   15010:	4a0d      	ldr	r2, [pc, #52]	; (15048 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   15012:	9b01      	ldr	r3, [sp, #4]
   15014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15018:	1e5a      	subs	r2, r3, #1
   1501a:	490b      	ldr	r1, [pc, #44]	; (15048 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   1501c:	9b01      	ldr	r3, [sp, #4]
   1501e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   15022:	4a0a      	ldr	r2, [pc, #40]	; (1504c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
   15024:	9b01      	ldr	r3, [sp, #4]
   15026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1502a:	f003 0301 	and.w	r3, r3, #1
   1502e:	2b00      	cmp	r3, #0
   15030:	d106      	bne.n	15040 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
   15032:	4a05      	ldr	r2, [pc, #20]	; (15048 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   15034:	9b01      	ldr	r3, [sp, #4]
   15036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1503a:	2b00      	cmp	r3, #0
   1503c:	d100      	bne.n	15040 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1503e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15040:	bf00      	nop
   15042:	b003      	add	sp, #12
   15044:	f85d fb04 	ldr.w	pc, [sp], #4
   15048:	1fff9770 	.word	0x1fff9770
   1504c:	1fff976c 	.word	0x1fff976c

00015050 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   15050:	b500      	push	{lr}
   15052:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15054:	f7eb fe26 	bl	ca4 <Sys_GetCoreID>
   15058:	4603      	mov	r3, r0
   1505a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
   1505c:	4a10      	ldr	r2, [pc, #64]	; (150a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   1505e:	9b01      	ldr	r3, [sp, #4]
   15060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15064:	2b00      	cmp	r3, #0
   15066:	d10d      	bne.n	15084 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15068:	f7eb fc9f 	bl	9aa <Port_schm_read_msr>
   1506c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1506e:	9b00      	ldr	r3, [sp, #0]
   15070:	f003 0301 	and.w	r3, r3, #1
   15074:	2b00      	cmp	r3, #0
   15076:	d100      	bne.n	1507a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15078:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   1507a:	490a      	ldr	r1, [pc, #40]	; (150a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
   1507c:	9b01      	ldr	r3, [sp, #4]
   1507e:	9a00      	ldr	r2, [sp, #0]
   15080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
   15084:	4a06      	ldr	r2, [pc, #24]	; (150a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   15086:	9b01      	ldr	r3, [sp, #4]
   15088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1508c:	1c5a      	adds	r2, r3, #1
   1508e:	4904      	ldr	r1, [pc, #16]	; (150a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   15090:	9b01      	ldr	r3, [sp, #4]
   15092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15096:	bf00      	nop
   15098:	b003      	add	sp, #12
   1509a:	f85d fb04 	ldr.w	pc, [sp], #4
   1509e:	bf00      	nop
   150a0:	1fff9778 	.word	0x1fff9778
   150a4:	1fff9774 	.word	0x1fff9774

000150a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   150a8:	b500      	push	{lr}
   150aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   150ac:	f7eb fdfa 	bl	ca4 <Sys_GetCoreID>
   150b0:	4603      	mov	r3, r0
   150b2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
   150b4:	4a0d      	ldr	r2, [pc, #52]	; (150ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   150b6:	9b01      	ldr	r3, [sp, #4]
   150b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150bc:	1e5a      	subs	r2, r3, #1
   150be:	490b      	ldr	r1, [pc, #44]	; (150ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   150c0:	9b01      	ldr	r3, [sp, #4]
   150c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   150c6:	4a0a      	ldr	r2, [pc, #40]	; (150f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
   150c8:	9b01      	ldr	r3, [sp, #4]
   150ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150ce:	f003 0301 	and.w	r3, r3, #1
   150d2:	2b00      	cmp	r3, #0
   150d4:	d106      	bne.n	150e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
   150d6:	4a05      	ldr	r2, [pc, #20]	; (150ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   150d8:	9b01      	ldr	r3, [sp, #4]
   150da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150de:	2b00      	cmp	r3, #0
   150e0:	d100      	bne.n	150e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   150e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   150e4:	bf00      	nop
   150e6:	b003      	add	sp, #12
   150e8:	f85d fb04 	ldr.w	pc, [sp], #4
   150ec:	1fff9778 	.word	0x1fff9778
   150f0:	1fff9774 	.word	0x1fff9774

000150f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   150f4:	b500      	push	{lr}
   150f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   150f8:	f7eb fdd4 	bl	ca4 <Sys_GetCoreID>
   150fc:	4603      	mov	r3, r0
   150fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
   15100:	4a10      	ldr	r2, [pc, #64]	; (15144 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   15102:	9b01      	ldr	r3, [sp, #4]
   15104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15108:	2b00      	cmp	r3, #0
   1510a:	d10d      	bne.n	15128 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1510c:	f7eb fc4d 	bl	9aa <Port_schm_read_msr>
   15110:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15112:	9b00      	ldr	r3, [sp, #0]
   15114:	f003 0301 	and.w	r3, r3, #1
   15118:	2b00      	cmp	r3, #0
   1511a:	d100      	bne.n	1511e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1511c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   1511e:	490a      	ldr	r1, [pc, #40]	; (15148 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
   15120:	9b01      	ldr	r3, [sp, #4]
   15122:	9a00      	ldr	r2, [sp, #0]
   15124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
   15128:	4a06      	ldr	r2, [pc, #24]	; (15144 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   1512a:	9b01      	ldr	r3, [sp, #4]
   1512c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15130:	1c5a      	adds	r2, r3, #1
   15132:	4904      	ldr	r1, [pc, #16]	; (15144 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   15134:	9b01      	ldr	r3, [sp, #4]
   15136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1513a:	bf00      	nop
   1513c:	b003      	add	sp, #12
   1513e:	f85d fb04 	ldr.w	pc, [sp], #4
   15142:	bf00      	nop
   15144:	1fff9780 	.word	0x1fff9780
   15148:	1fff977c 	.word	0x1fff977c

0001514c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   1514c:	b500      	push	{lr}
   1514e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15150:	f7eb fda8 	bl	ca4 <Sys_GetCoreID>
   15154:	4603      	mov	r3, r0
   15156:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
   15158:	4a0d      	ldr	r2, [pc, #52]	; (15190 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   1515a:	9b01      	ldr	r3, [sp, #4]
   1515c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15160:	1e5a      	subs	r2, r3, #1
   15162:	490b      	ldr	r1, [pc, #44]	; (15190 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   15164:	9b01      	ldr	r3, [sp, #4]
   15166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   1516a:	4a0a      	ldr	r2, [pc, #40]	; (15194 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
   1516c:	9b01      	ldr	r3, [sp, #4]
   1516e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15172:	f003 0301 	and.w	r3, r3, #1
   15176:	2b00      	cmp	r3, #0
   15178:	d106      	bne.n	15188 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
   1517a:	4a05      	ldr	r2, [pc, #20]	; (15190 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   1517c:	9b01      	ldr	r3, [sp, #4]
   1517e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15182:	2b00      	cmp	r3, #0
   15184:	d100      	bne.n	15188 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15186:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15188:	bf00      	nop
   1518a:	b003      	add	sp, #12
   1518c:	f85d fb04 	ldr.w	pc, [sp], #4
   15190:	1fff9780 	.word	0x1fff9780
   15194:	1fff977c 	.word	0x1fff977c

00015198 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   15198:	b500      	push	{lr}
   1519a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1519c:	f7eb fd82 	bl	ca4 <Sys_GetCoreID>
   151a0:	4603      	mov	r3, r0
   151a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
   151a4:	4a10      	ldr	r2, [pc, #64]	; (151e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   151a6:	9b01      	ldr	r3, [sp, #4]
   151a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151ac:	2b00      	cmp	r3, #0
   151ae:	d10d      	bne.n	151cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   151b0:	f7eb fbfb 	bl	9aa <Port_schm_read_msr>
   151b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   151b6:	9b00      	ldr	r3, [sp, #0]
   151b8:	f003 0301 	and.w	r3, r3, #1
   151bc:	2b00      	cmp	r3, #0
   151be:	d100      	bne.n	151c2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   151c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   151c2:	490a      	ldr	r1, [pc, #40]	; (151ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
   151c4:	9b01      	ldr	r3, [sp, #4]
   151c6:	9a00      	ldr	r2, [sp, #0]
   151c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
   151cc:	4a06      	ldr	r2, [pc, #24]	; (151e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   151ce:	9b01      	ldr	r3, [sp, #4]
   151d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151d4:	1c5a      	adds	r2, r3, #1
   151d6:	4904      	ldr	r1, [pc, #16]	; (151e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   151d8:	9b01      	ldr	r3, [sp, #4]
   151da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   151de:	bf00      	nop
   151e0:	b003      	add	sp, #12
   151e2:	f85d fb04 	ldr.w	pc, [sp], #4
   151e6:	bf00      	nop
   151e8:	1fff9788 	.word	0x1fff9788
   151ec:	1fff9784 	.word	0x1fff9784

000151f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   151f0:	b500      	push	{lr}
   151f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   151f4:	f7eb fd56 	bl	ca4 <Sys_GetCoreID>
   151f8:	4603      	mov	r3, r0
   151fa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
   151fc:	4a0d      	ldr	r2, [pc, #52]	; (15234 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   151fe:	9b01      	ldr	r3, [sp, #4]
   15200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15204:	1e5a      	subs	r2, r3, #1
   15206:	490b      	ldr	r1, [pc, #44]	; (15234 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   15208:	9b01      	ldr	r3, [sp, #4]
   1520a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   1520e:	4a0a      	ldr	r2, [pc, #40]	; (15238 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
   15210:	9b01      	ldr	r3, [sp, #4]
   15212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15216:	f003 0301 	and.w	r3, r3, #1
   1521a:	2b00      	cmp	r3, #0
   1521c:	d106      	bne.n	1522c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
   1521e:	4a05      	ldr	r2, [pc, #20]	; (15234 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   15220:	9b01      	ldr	r3, [sp, #4]
   15222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15226:	2b00      	cmp	r3, #0
   15228:	d100      	bne.n	1522c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1522a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1522c:	bf00      	nop
   1522e:	b003      	add	sp, #12
   15230:	f85d fb04 	ldr.w	pc, [sp], #4
   15234:	1fff9788 	.word	0x1fff9788
   15238:	1fff9784 	.word	0x1fff9784

0001523c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   1523c:	b500      	push	{lr}
   1523e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15240:	f7eb fd30 	bl	ca4 <Sys_GetCoreID>
   15244:	4603      	mov	r3, r0
   15246:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
   15248:	4a10      	ldr	r2, [pc, #64]	; (1528c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   1524a:	9b01      	ldr	r3, [sp, #4]
   1524c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15250:	2b00      	cmp	r3, #0
   15252:	d10d      	bne.n	15270 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15254:	f7eb fba9 	bl	9aa <Port_schm_read_msr>
   15258:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1525a:	9b00      	ldr	r3, [sp, #0]
   1525c:	f003 0301 	and.w	r3, r3, #1
   15260:	2b00      	cmp	r3, #0
   15262:	d100      	bne.n	15266 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15264:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   15266:	490a      	ldr	r1, [pc, #40]	; (15290 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
   15268:	9b01      	ldr	r3, [sp, #4]
   1526a:	9a00      	ldr	r2, [sp, #0]
   1526c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
   15270:	4a06      	ldr	r2, [pc, #24]	; (1528c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   15272:	9b01      	ldr	r3, [sp, #4]
   15274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15278:	1c5a      	adds	r2, r3, #1
   1527a:	4904      	ldr	r1, [pc, #16]	; (1528c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   1527c:	9b01      	ldr	r3, [sp, #4]
   1527e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15282:	bf00      	nop
   15284:	b003      	add	sp, #12
   15286:	f85d fb04 	ldr.w	pc, [sp], #4
   1528a:	bf00      	nop
   1528c:	1fff9790 	.word	0x1fff9790
   15290:	1fff978c 	.word	0x1fff978c

00015294 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   15294:	b500      	push	{lr}
   15296:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15298:	f7eb fd04 	bl	ca4 <Sys_GetCoreID>
   1529c:	4603      	mov	r3, r0
   1529e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
   152a0:	4a0d      	ldr	r2, [pc, #52]	; (152d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   152a2:	9b01      	ldr	r3, [sp, #4]
   152a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152a8:	1e5a      	subs	r2, r3, #1
   152aa:	490b      	ldr	r1, [pc, #44]	; (152d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   152ac:	9b01      	ldr	r3, [sp, #4]
   152ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   152b2:	4a0a      	ldr	r2, [pc, #40]	; (152dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
   152b4:	9b01      	ldr	r3, [sp, #4]
   152b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152ba:	f003 0301 	and.w	r3, r3, #1
   152be:	2b00      	cmp	r3, #0
   152c0:	d106      	bne.n	152d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
   152c2:	4a05      	ldr	r2, [pc, #20]	; (152d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   152c4:	9b01      	ldr	r3, [sp, #4]
   152c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152ca:	2b00      	cmp	r3, #0
   152cc:	d100      	bne.n	152d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   152ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   152d0:	bf00      	nop
   152d2:	b003      	add	sp, #12
   152d4:	f85d fb04 	ldr.w	pc, [sp], #4
   152d8:	1fff9790 	.word	0x1fff9790
   152dc:	1fff978c 	.word	0x1fff978c

000152e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   152e0:	b500      	push	{lr}
   152e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   152e4:	f7eb fcde 	bl	ca4 <Sys_GetCoreID>
   152e8:	4603      	mov	r3, r0
   152ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
   152ec:	4a10      	ldr	r2, [pc, #64]	; (15330 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   152ee:	9b01      	ldr	r3, [sp, #4]
   152f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152f4:	2b00      	cmp	r3, #0
   152f6:	d10d      	bne.n	15314 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   152f8:	f7eb fb57 	bl	9aa <Port_schm_read_msr>
   152fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   152fe:	9b00      	ldr	r3, [sp, #0]
   15300:	f003 0301 	and.w	r3, r3, #1
   15304:	2b00      	cmp	r3, #0
   15306:	d100      	bne.n	1530a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15308:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   1530a:	490a      	ldr	r1, [pc, #40]	; (15334 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
   1530c:	9b01      	ldr	r3, [sp, #4]
   1530e:	9a00      	ldr	r2, [sp, #0]
   15310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
   15314:	4a06      	ldr	r2, [pc, #24]	; (15330 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   15316:	9b01      	ldr	r3, [sp, #4]
   15318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1531c:	1c5a      	adds	r2, r3, #1
   1531e:	4904      	ldr	r1, [pc, #16]	; (15330 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   15320:	9b01      	ldr	r3, [sp, #4]
   15322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15326:	bf00      	nop
   15328:	b003      	add	sp, #12
   1532a:	f85d fb04 	ldr.w	pc, [sp], #4
   1532e:	bf00      	nop
   15330:	1fff9798 	.word	0x1fff9798
   15334:	1fff9794 	.word	0x1fff9794

00015338 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   15338:	b500      	push	{lr}
   1533a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1533c:	f7eb fcb2 	bl	ca4 <Sys_GetCoreID>
   15340:	4603      	mov	r3, r0
   15342:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
   15344:	4a0d      	ldr	r2, [pc, #52]	; (1537c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   15346:	9b01      	ldr	r3, [sp, #4]
   15348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1534c:	1e5a      	subs	r2, r3, #1
   1534e:	490b      	ldr	r1, [pc, #44]	; (1537c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   15350:	9b01      	ldr	r3, [sp, #4]
   15352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   15356:	4a0a      	ldr	r2, [pc, #40]	; (15380 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
   15358:	9b01      	ldr	r3, [sp, #4]
   1535a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1535e:	f003 0301 	and.w	r3, r3, #1
   15362:	2b00      	cmp	r3, #0
   15364:	d106      	bne.n	15374 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
   15366:	4a05      	ldr	r2, [pc, #20]	; (1537c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   15368:	9b01      	ldr	r3, [sp, #4]
   1536a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1536e:	2b00      	cmp	r3, #0
   15370:	d100      	bne.n	15374 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15372:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15374:	bf00      	nop
   15376:	b003      	add	sp, #12
   15378:	f85d fb04 	ldr.w	pc, [sp], #4
   1537c:	1fff9798 	.word	0x1fff9798
   15380:	1fff9794 	.word	0x1fff9794

00015384 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   15384:	b500      	push	{lr}
   15386:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15388:	f7eb fc8c 	bl	ca4 <Sys_GetCoreID>
   1538c:	4603      	mov	r3, r0
   1538e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
   15390:	4a10      	ldr	r2, [pc, #64]	; (153d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   15392:	9b01      	ldr	r3, [sp, #4]
   15394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15398:	2b00      	cmp	r3, #0
   1539a:	d10d      	bne.n	153b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1539c:	f7eb fb05 	bl	9aa <Port_schm_read_msr>
   153a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   153a2:	9b00      	ldr	r3, [sp, #0]
   153a4:	f003 0301 	and.w	r3, r3, #1
   153a8:	2b00      	cmp	r3, #0
   153aa:	d100      	bne.n	153ae <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   153ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   153ae:	490a      	ldr	r1, [pc, #40]	; (153d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
   153b0:	9b01      	ldr	r3, [sp, #4]
   153b2:	9a00      	ldr	r2, [sp, #0]
   153b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
   153b8:	4a06      	ldr	r2, [pc, #24]	; (153d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   153ba:	9b01      	ldr	r3, [sp, #4]
   153bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153c0:	1c5a      	adds	r2, r3, #1
   153c2:	4904      	ldr	r1, [pc, #16]	; (153d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   153c4:	9b01      	ldr	r3, [sp, #4]
   153c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   153ca:	bf00      	nop
   153cc:	b003      	add	sp, #12
   153ce:	f85d fb04 	ldr.w	pc, [sp], #4
   153d2:	bf00      	nop
   153d4:	1fff97a0 	.word	0x1fff97a0
   153d8:	1fff979c 	.word	0x1fff979c

000153dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   153dc:	b500      	push	{lr}
   153de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   153e0:	f7eb fc60 	bl	ca4 <Sys_GetCoreID>
   153e4:	4603      	mov	r3, r0
   153e6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
   153e8:	4a0d      	ldr	r2, [pc, #52]	; (15420 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   153ea:	9b01      	ldr	r3, [sp, #4]
   153ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153f0:	1e5a      	subs	r2, r3, #1
   153f2:	490b      	ldr	r1, [pc, #44]	; (15420 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   153f4:	9b01      	ldr	r3, [sp, #4]
   153f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   153fa:	4a0a      	ldr	r2, [pc, #40]	; (15424 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
   153fc:	9b01      	ldr	r3, [sp, #4]
   153fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15402:	f003 0301 	and.w	r3, r3, #1
   15406:	2b00      	cmp	r3, #0
   15408:	d106      	bne.n	15418 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
   1540a:	4a05      	ldr	r2, [pc, #20]	; (15420 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   1540c:	9b01      	ldr	r3, [sp, #4]
   1540e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15412:	2b00      	cmp	r3, #0
   15414:	d100      	bne.n	15418 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15416:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15418:	bf00      	nop
   1541a:	b003      	add	sp, #12
   1541c:	f85d fb04 	ldr.w	pc, [sp], #4
   15420:	1fff97a0 	.word	0x1fff97a0
   15424:	1fff979c 	.word	0x1fff979c

00015428 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   15428:	b500      	push	{lr}
   1542a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1542c:	f7eb fc3a 	bl	ca4 <Sys_GetCoreID>
   15430:	4603      	mov	r3, r0
   15432:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
   15434:	4a10      	ldr	r2, [pc, #64]	; (15478 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   15436:	9b01      	ldr	r3, [sp, #4]
   15438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1543c:	2b00      	cmp	r3, #0
   1543e:	d10d      	bne.n	1545c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15440:	f7eb fab3 	bl	9aa <Port_schm_read_msr>
   15444:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15446:	9b00      	ldr	r3, [sp, #0]
   15448:	f003 0301 	and.w	r3, r3, #1
   1544c:	2b00      	cmp	r3, #0
   1544e:	d100      	bne.n	15452 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15450:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   15452:	490a      	ldr	r1, [pc, #40]	; (1547c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
   15454:	9b01      	ldr	r3, [sp, #4]
   15456:	9a00      	ldr	r2, [sp, #0]
   15458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
   1545c:	4a06      	ldr	r2, [pc, #24]	; (15478 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   1545e:	9b01      	ldr	r3, [sp, #4]
   15460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15464:	1c5a      	adds	r2, r3, #1
   15466:	4904      	ldr	r1, [pc, #16]	; (15478 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   15468:	9b01      	ldr	r3, [sp, #4]
   1546a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1546e:	bf00      	nop
   15470:	b003      	add	sp, #12
   15472:	f85d fb04 	ldr.w	pc, [sp], #4
   15476:	bf00      	nop
   15478:	1fff97a8 	.word	0x1fff97a8
   1547c:	1fff97a4 	.word	0x1fff97a4

00015480 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   15480:	b500      	push	{lr}
   15482:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15484:	f7eb fc0e 	bl	ca4 <Sys_GetCoreID>
   15488:	4603      	mov	r3, r0
   1548a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
   1548c:	4a0d      	ldr	r2, [pc, #52]	; (154c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   1548e:	9b01      	ldr	r3, [sp, #4]
   15490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15494:	1e5a      	subs	r2, r3, #1
   15496:	490b      	ldr	r1, [pc, #44]	; (154c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   15498:	9b01      	ldr	r3, [sp, #4]
   1549a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   1549e:	4a0a      	ldr	r2, [pc, #40]	; (154c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
   154a0:	9b01      	ldr	r3, [sp, #4]
   154a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154a6:	f003 0301 	and.w	r3, r3, #1
   154aa:	2b00      	cmp	r3, #0
   154ac:	d106      	bne.n	154bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
   154ae:	4a05      	ldr	r2, [pc, #20]	; (154c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   154b0:	9b01      	ldr	r3, [sp, #4]
   154b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154b6:	2b00      	cmp	r3, #0
   154b8:	d100      	bne.n	154bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   154ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   154bc:	bf00      	nop
   154be:	b003      	add	sp, #12
   154c0:	f85d fb04 	ldr.w	pc, [sp], #4
   154c4:	1fff97a8 	.word	0x1fff97a8
   154c8:	1fff97a4 	.word	0x1fff97a4

000154cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   154cc:	b500      	push	{lr}
   154ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   154d0:	f7eb fbe8 	bl	ca4 <Sys_GetCoreID>
   154d4:	4603      	mov	r3, r0
   154d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
   154d8:	4a10      	ldr	r2, [pc, #64]	; (1551c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   154da:	9b01      	ldr	r3, [sp, #4]
   154dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154e0:	2b00      	cmp	r3, #0
   154e2:	d10d      	bne.n	15500 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   154e4:	f7eb fa61 	bl	9aa <Port_schm_read_msr>
   154e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   154ea:	9b00      	ldr	r3, [sp, #0]
   154ec:	f003 0301 	and.w	r3, r3, #1
   154f0:	2b00      	cmp	r3, #0
   154f2:	d100      	bne.n	154f6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   154f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   154f6:	490a      	ldr	r1, [pc, #40]	; (15520 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
   154f8:	9b01      	ldr	r3, [sp, #4]
   154fa:	9a00      	ldr	r2, [sp, #0]
   154fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
   15500:	4a06      	ldr	r2, [pc, #24]	; (1551c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   15502:	9b01      	ldr	r3, [sp, #4]
   15504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15508:	1c5a      	adds	r2, r3, #1
   1550a:	4904      	ldr	r1, [pc, #16]	; (1551c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   1550c:	9b01      	ldr	r3, [sp, #4]
   1550e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15512:	bf00      	nop
   15514:	b003      	add	sp, #12
   15516:	f85d fb04 	ldr.w	pc, [sp], #4
   1551a:	bf00      	nop
   1551c:	1fff97b0 	.word	0x1fff97b0
   15520:	1fff97ac 	.word	0x1fff97ac

00015524 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   15524:	b500      	push	{lr}
   15526:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15528:	f7eb fbbc 	bl	ca4 <Sys_GetCoreID>
   1552c:	4603      	mov	r3, r0
   1552e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
   15530:	4a0d      	ldr	r2, [pc, #52]	; (15568 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   15532:	9b01      	ldr	r3, [sp, #4]
   15534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15538:	1e5a      	subs	r2, r3, #1
   1553a:	490b      	ldr	r1, [pc, #44]	; (15568 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   1553c:	9b01      	ldr	r3, [sp, #4]
   1553e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   15542:	4a0a      	ldr	r2, [pc, #40]	; (1556c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
   15544:	9b01      	ldr	r3, [sp, #4]
   15546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1554a:	f003 0301 	and.w	r3, r3, #1
   1554e:	2b00      	cmp	r3, #0
   15550:	d106      	bne.n	15560 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
   15552:	4a05      	ldr	r2, [pc, #20]	; (15568 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   15554:	9b01      	ldr	r3, [sp, #4]
   15556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1555a:	2b00      	cmp	r3, #0
   1555c:	d100      	bne.n	15560 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1555e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15560:	bf00      	nop
   15562:	b003      	add	sp, #12
   15564:	f85d fb04 	ldr.w	pc, [sp], #4
   15568:	1fff97b0 	.word	0x1fff97b0
   1556c:	1fff97ac 	.word	0x1fff97ac

00015570 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   15570:	b500      	push	{lr}
   15572:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15574:	f7eb fb96 	bl	ca4 <Sys_GetCoreID>
   15578:	4603      	mov	r3, r0
   1557a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
   1557c:	4a10      	ldr	r2, [pc, #64]	; (155c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   1557e:	9b01      	ldr	r3, [sp, #4]
   15580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15584:	2b00      	cmp	r3, #0
   15586:	d10d      	bne.n	155a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15588:	f7eb fa0f 	bl	9aa <Port_schm_read_msr>
   1558c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1558e:	9b00      	ldr	r3, [sp, #0]
   15590:	f003 0301 	and.w	r3, r3, #1
   15594:	2b00      	cmp	r3, #0
   15596:	d100      	bne.n	1559a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15598:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   1559a:	490a      	ldr	r1, [pc, #40]	; (155c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
   1559c:	9b01      	ldr	r3, [sp, #4]
   1559e:	9a00      	ldr	r2, [sp, #0]
   155a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
   155a4:	4a06      	ldr	r2, [pc, #24]	; (155c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   155a6:	9b01      	ldr	r3, [sp, #4]
   155a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155ac:	1c5a      	adds	r2, r3, #1
   155ae:	4904      	ldr	r1, [pc, #16]	; (155c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   155b0:	9b01      	ldr	r3, [sp, #4]
   155b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   155b6:	bf00      	nop
   155b8:	b003      	add	sp, #12
   155ba:	f85d fb04 	ldr.w	pc, [sp], #4
   155be:	bf00      	nop
   155c0:	1fff97b8 	.word	0x1fff97b8
   155c4:	1fff97b4 	.word	0x1fff97b4

000155c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   155c8:	b500      	push	{lr}
   155ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   155cc:	f7eb fb6a 	bl	ca4 <Sys_GetCoreID>
   155d0:	4603      	mov	r3, r0
   155d2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
   155d4:	4a0d      	ldr	r2, [pc, #52]	; (1560c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   155d6:	9b01      	ldr	r3, [sp, #4]
   155d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155dc:	1e5a      	subs	r2, r3, #1
   155de:	490b      	ldr	r1, [pc, #44]	; (1560c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   155e0:	9b01      	ldr	r3, [sp, #4]
   155e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   155e6:	4a0a      	ldr	r2, [pc, #40]	; (15610 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
   155e8:	9b01      	ldr	r3, [sp, #4]
   155ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155ee:	f003 0301 	and.w	r3, r3, #1
   155f2:	2b00      	cmp	r3, #0
   155f4:	d106      	bne.n	15604 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
   155f6:	4a05      	ldr	r2, [pc, #20]	; (1560c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   155f8:	9b01      	ldr	r3, [sp, #4]
   155fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155fe:	2b00      	cmp	r3, #0
   15600:	d100      	bne.n	15604 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15602:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15604:	bf00      	nop
   15606:	b003      	add	sp, #12
   15608:	f85d fb04 	ldr.w	pc, [sp], #4
   1560c:	1fff97b8 	.word	0x1fff97b8
   15610:	1fff97b4 	.word	0x1fff97b4

00015614 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   15614:	b500      	push	{lr}
   15616:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15618:	f7eb fb44 	bl	ca4 <Sys_GetCoreID>
   1561c:	4603      	mov	r3, r0
   1561e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
   15620:	4a10      	ldr	r2, [pc, #64]	; (15664 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   15622:	9b01      	ldr	r3, [sp, #4]
   15624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15628:	2b00      	cmp	r3, #0
   1562a:	d10d      	bne.n	15648 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1562c:	f7eb f9bd 	bl	9aa <Port_schm_read_msr>
   15630:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15632:	9b00      	ldr	r3, [sp, #0]
   15634:	f003 0301 	and.w	r3, r3, #1
   15638:	2b00      	cmp	r3, #0
   1563a:	d100      	bne.n	1563e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1563c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   1563e:	490a      	ldr	r1, [pc, #40]	; (15668 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
   15640:	9b01      	ldr	r3, [sp, #4]
   15642:	9a00      	ldr	r2, [sp, #0]
   15644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
   15648:	4a06      	ldr	r2, [pc, #24]	; (15664 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   1564a:	9b01      	ldr	r3, [sp, #4]
   1564c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15650:	1c5a      	adds	r2, r3, #1
   15652:	4904      	ldr	r1, [pc, #16]	; (15664 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   15654:	9b01      	ldr	r3, [sp, #4]
   15656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1565a:	bf00      	nop
   1565c:	b003      	add	sp, #12
   1565e:	f85d fb04 	ldr.w	pc, [sp], #4
   15662:	bf00      	nop
   15664:	1fff97c0 	.word	0x1fff97c0
   15668:	1fff97bc 	.word	0x1fff97bc

0001566c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   1566c:	b500      	push	{lr}
   1566e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15670:	f7eb fb18 	bl	ca4 <Sys_GetCoreID>
   15674:	4603      	mov	r3, r0
   15676:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
   15678:	4a0d      	ldr	r2, [pc, #52]	; (156b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   1567a:	9b01      	ldr	r3, [sp, #4]
   1567c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15680:	1e5a      	subs	r2, r3, #1
   15682:	490b      	ldr	r1, [pc, #44]	; (156b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   15684:	9b01      	ldr	r3, [sp, #4]
   15686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   1568a:	4a0a      	ldr	r2, [pc, #40]	; (156b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
   1568c:	9b01      	ldr	r3, [sp, #4]
   1568e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15692:	f003 0301 	and.w	r3, r3, #1
   15696:	2b00      	cmp	r3, #0
   15698:	d106      	bne.n	156a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
   1569a:	4a05      	ldr	r2, [pc, #20]	; (156b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   1569c:	9b01      	ldr	r3, [sp, #4]
   1569e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156a2:	2b00      	cmp	r3, #0
   156a4:	d100      	bne.n	156a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   156a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   156a8:	bf00      	nop
   156aa:	b003      	add	sp, #12
   156ac:	f85d fb04 	ldr.w	pc, [sp], #4
   156b0:	1fff97c0 	.word	0x1fff97c0
   156b4:	1fff97bc 	.word	0x1fff97bc

000156b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   156b8:	b500      	push	{lr}
   156ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   156bc:	f7eb faf2 	bl	ca4 <Sys_GetCoreID>
   156c0:	4603      	mov	r3, r0
   156c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
   156c4:	4a10      	ldr	r2, [pc, #64]	; (15708 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   156c6:	9b01      	ldr	r3, [sp, #4]
   156c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156cc:	2b00      	cmp	r3, #0
   156ce:	d10d      	bne.n	156ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   156d0:	f7eb f96b 	bl	9aa <Port_schm_read_msr>
   156d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   156d6:	9b00      	ldr	r3, [sp, #0]
   156d8:	f003 0301 	and.w	r3, r3, #1
   156dc:	2b00      	cmp	r3, #0
   156de:	d100      	bne.n	156e2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   156e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   156e2:	490a      	ldr	r1, [pc, #40]	; (1570c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
   156e4:	9b01      	ldr	r3, [sp, #4]
   156e6:	9a00      	ldr	r2, [sp, #0]
   156e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
   156ec:	4a06      	ldr	r2, [pc, #24]	; (15708 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   156ee:	9b01      	ldr	r3, [sp, #4]
   156f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156f4:	1c5a      	adds	r2, r3, #1
   156f6:	4904      	ldr	r1, [pc, #16]	; (15708 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   156f8:	9b01      	ldr	r3, [sp, #4]
   156fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   156fe:	bf00      	nop
   15700:	b003      	add	sp, #12
   15702:	f85d fb04 	ldr.w	pc, [sp], #4
   15706:	bf00      	nop
   15708:	1fff97c8 	.word	0x1fff97c8
   1570c:	1fff97c4 	.word	0x1fff97c4

00015710 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   15710:	b500      	push	{lr}
   15712:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15714:	f7eb fac6 	bl	ca4 <Sys_GetCoreID>
   15718:	4603      	mov	r3, r0
   1571a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
   1571c:	4a0d      	ldr	r2, [pc, #52]	; (15754 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   1571e:	9b01      	ldr	r3, [sp, #4]
   15720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15724:	1e5a      	subs	r2, r3, #1
   15726:	490b      	ldr	r1, [pc, #44]	; (15754 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   15728:	9b01      	ldr	r3, [sp, #4]
   1572a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   1572e:	4a0a      	ldr	r2, [pc, #40]	; (15758 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
   15730:	9b01      	ldr	r3, [sp, #4]
   15732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15736:	f003 0301 	and.w	r3, r3, #1
   1573a:	2b00      	cmp	r3, #0
   1573c:	d106      	bne.n	1574c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
   1573e:	4a05      	ldr	r2, [pc, #20]	; (15754 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   15740:	9b01      	ldr	r3, [sp, #4]
   15742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15746:	2b00      	cmp	r3, #0
   15748:	d100      	bne.n	1574c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1574a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1574c:	bf00      	nop
   1574e:	b003      	add	sp, #12
   15750:	f85d fb04 	ldr.w	pc, [sp], #4
   15754:	1fff97c8 	.word	0x1fff97c8
   15758:	1fff97c4 	.word	0x1fff97c4

0001575c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   1575c:	b500      	push	{lr}
   1575e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15760:	f7eb faa0 	bl	ca4 <Sys_GetCoreID>
   15764:	4603      	mov	r3, r0
   15766:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
   15768:	4a10      	ldr	r2, [pc, #64]	; (157ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   1576a:	9b01      	ldr	r3, [sp, #4]
   1576c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15770:	2b00      	cmp	r3, #0
   15772:	d10d      	bne.n	15790 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15774:	f7eb f919 	bl	9aa <Port_schm_read_msr>
   15778:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1577a:	9b00      	ldr	r3, [sp, #0]
   1577c:	f003 0301 	and.w	r3, r3, #1
   15780:	2b00      	cmp	r3, #0
   15782:	d100      	bne.n	15786 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15784:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   15786:	490a      	ldr	r1, [pc, #40]	; (157b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
   15788:	9b01      	ldr	r3, [sp, #4]
   1578a:	9a00      	ldr	r2, [sp, #0]
   1578c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
   15790:	4a06      	ldr	r2, [pc, #24]	; (157ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   15792:	9b01      	ldr	r3, [sp, #4]
   15794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15798:	1c5a      	adds	r2, r3, #1
   1579a:	4904      	ldr	r1, [pc, #16]	; (157ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   1579c:	9b01      	ldr	r3, [sp, #4]
   1579e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   157a2:	bf00      	nop
   157a4:	b003      	add	sp, #12
   157a6:	f85d fb04 	ldr.w	pc, [sp], #4
   157aa:	bf00      	nop
   157ac:	1fff97d0 	.word	0x1fff97d0
   157b0:	1fff97cc 	.word	0x1fff97cc

000157b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   157b4:	b500      	push	{lr}
   157b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   157b8:	f7eb fa74 	bl	ca4 <Sys_GetCoreID>
   157bc:	4603      	mov	r3, r0
   157be:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
   157c0:	4a0d      	ldr	r2, [pc, #52]	; (157f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   157c2:	9b01      	ldr	r3, [sp, #4]
   157c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157c8:	1e5a      	subs	r2, r3, #1
   157ca:	490b      	ldr	r1, [pc, #44]	; (157f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   157cc:	9b01      	ldr	r3, [sp, #4]
   157ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   157d2:	4a0a      	ldr	r2, [pc, #40]	; (157fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
   157d4:	9b01      	ldr	r3, [sp, #4]
   157d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157da:	f003 0301 	and.w	r3, r3, #1
   157de:	2b00      	cmp	r3, #0
   157e0:	d106      	bne.n	157f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
   157e2:	4a05      	ldr	r2, [pc, #20]	; (157f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   157e4:	9b01      	ldr	r3, [sp, #4]
   157e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157ea:	2b00      	cmp	r3, #0
   157ec:	d100      	bne.n	157f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   157ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   157f0:	bf00      	nop
   157f2:	b003      	add	sp, #12
   157f4:	f85d fb04 	ldr.w	pc, [sp], #4
   157f8:	1fff97d0 	.word	0x1fff97d0
   157fc:	1fff97cc 	.word	0x1fff97cc

00015800 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   15800:	b500      	push	{lr}
   15802:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15804:	f7eb fa4e 	bl	ca4 <Sys_GetCoreID>
   15808:	4603      	mov	r3, r0
   1580a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
   1580c:	4a10      	ldr	r2, [pc, #64]	; (15850 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   1580e:	9b01      	ldr	r3, [sp, #4]
   15810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15814:	2b00      	cmp	r3, #0
   15816:	d10d      	bne.n	15834 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15818:	f7eb f8c7 	bl	9aa <Port_schm_read_msr>
   1581c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1581e:	9b00      	ldr	r3, [sp, #0]
   15820:	f003 0301 	and.w	r3, r3, #1
   15824:	2b00      	cmp	r3, #0
   15826:	d100      	bne.n	1582a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15828:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   1582a:	490a      	ldr	r1, [pc, #40]	; (15854 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
   1582c:	9b01      	ldr	r3, [sp, #4]
   1582e:	9a00      	ldr	r2, [sp, #0]
   15830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
   15834:	4a06      	ldr	r2, [pc, #24]	; (15850 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   15836:	9b01      	ldr	r3, [sp, #4]
   15838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1583c:	1c5a      	adds	r2, r3, #1
   1583e:	4904      	ldr	r1, [pc, #16]	; (15850 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   15840:	9b01      	ldr	r3, [sp, #4]
   15842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15846:	bf00      	nop
   15848:	b003      	add	sp, #12
   1584a:	f85d fb04 	ldr.w	pc, [sp], #4
   1584e:	bf00      	nop
   15850:	1fff97d8 	.word	0x1fff97d8
   15854:	1fff97d4 	.word	0x1fff97d4

00015858 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   15858:	b500      	push	{lr}
   1585a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1585c:	f7eb fa22 	bl	ca4 <Sys_GetCoreID>
   15860:	4603      	mov	r3, r0
   15862:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
   15864:	4a0d      	ldr	r2, [pc, #52]	; (1589c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   15866:	9b01      	ldr	r3, [sp, #4]
   15868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1586c:	1e5a      	subs	r2, r3, #1
   1586e:	490b      	ldr	r1, [pc, #44]	; (1589c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   15870:	9b01      	ldr	r3, [sp, #4]
   15872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   15876:	4a0a      	ldr	r2, [pc, #40]	; (158a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
   15878:	9b01      	ldr	r3, [sp, #4]
   1587a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1587e:	f003 0301 	and.w	r3, r3, #1
   15882:	2b00      	cmp	r3, #0
   15884:	d106      	bne.n	15894 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
   15886:	4a05      	ldr	r2, [pc, #20]	; (1589c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   15888:	9b01      	ldr	r3, [sp, #4]
   1588a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1588e:	2b00      	cmp	r3, #0
   15890:	d100      	bne.n	15894 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15892:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15894:	bf00      	nop
   15896:	b003      	add	sp, #12
   15898:	f85d fb04 	ldr.w	pc, [sp], #4
   1589c:	1fff97d8 	.word	0x1fff97d8
   158a0:	1fff97d4 	.word	0x1fff97d4

000158a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   158a4:	b500      	push	{lr}
   158a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   158a8:	f7eb f9fc 	bl	ca4 <Sys_GetCoreID>
   158ac:	4603      	mov	r3, r0
   158ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
   158b0:	4a10      	ldr	r2, [pc, #64]	; (158f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   158b2:	9b01      	ldr	r3, [sp, #4]
   158b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158b8:	2b00      	cmp	r3, #0
   158ba:	d10d      	bne.n	158d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   158bc:	f7eb f875 	bl	9aa <Port_schm_read_msr>
   158c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   158c2:	9b00      	ldr	r3, [sp, #0]
   158c4:	f003 0301 	and.w	r3, r3, #1
   158c8:	2b00      	cmp	r3, #0
   158ca:	d100      	bne.n	158ce <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   158cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   158ce:	490a      	ldr	r1, [pc, #40]	; (158f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
   158d0:	9b01      	ldr	r3, [sp, #4]
   158d2:	9a00      	ldr	r2, [sp, #0]
   158d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
   158d8:	4a06      	ldr	r2, [pc, #24]	; (158f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   158da:	9b01      	ldr	r3, [sp, #4]
   158dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158e0:	1c5a      	adds	r2, r3, #1
   158e2:	4904      	ldr	r1, [pc, #16]	; (158f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   158e4:	9b01      	ldr	r3, [sp, #4]
   158e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   158ea:	bf00      	nop
   158ec:	b003      	add	sp, #12
   158ee:	f85d fb04 	ldr.w	pc, [sp], #4
   158f2:	bf00      	nop
   158f4:	1fff97e0 	.word	0x1fff97e0
   158f8:	1fff97dc 	.word	0x1fff97dc

000158fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   158fc:	b500      	push	{lr}
   158fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15900:	f7eb f9d0 	bl	ca4 <Sys_GetCoreID>
   15904:	4603      	mov	r3, r0
   15906:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
   15908:	4a0d      	ldr	r2, [pc, #52]	; (15940 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   1590a:	9b01      	ldr	r3, [sp, #4]
   1590c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15910:	1e5a      	subs	r2, r3, #1
   15912:	490b      	ldr	r1, [pc, #44]	; (15940 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   15914:	9b01      	ldr	r3, [sp, #4]
   15916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   1591a:	4a0a      	ldr	r2, [pc, #40]	; (15944 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
   1591c:	9b01      	ldr	r3, [sp, #4]
   1591e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15922:	f003 0301 	and.w	r3, r3, #1
   15926:	2b00      	cmp	r3, #0
   15928:	d106      	bne.n	15938 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
   1592a:	4a05      	ldr	r2, [pc, #20]	; (15940 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   1592c:	9b01      	ldr	r3, [sp, #4]
   1592e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15932:	2b00      	cmp	r3, #0
   15934:	d100      	bne.n	15938 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15936:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15938:	bf00      	nop
   1593a:	b003      	add	sp, #12
   1593c:	f85d fb04 	ldr.w	pc, [sp], #4
   15940:	1fff97e0 	.word	0x1fff97e0
   15944:	1fff97dc 	.word	0x1fff97dc

00015948 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   15948:	b500      	push	{lr}
   1594a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1594c:	f7eb f9aa 	bl	ca4 <Sys_GetCoreID>
   15950:	4603      	mov	r3, r0
   15952:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
   15954:	4a10      	ldr	r2, [pc, #64]	; (15998 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   15956:	9b01      	ldr	r3, [sp, #4]
   15958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1595c:	2b00      	cmp	r3, #0
   1595e:	d10d      	bne.n	1597c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15960:	f7eb f823 	bl	9aa <Port_schm_read_msr>
   15964:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15966:	9b00      	ldr	r3, [sp, #0]
   15968:	f003 0301 	and.w	r3, r3, #1
   1596c:	2b00      	cmp	r3, #0
   1596e:	d100      	bne.n	15972 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15970:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   15972:	490a      	ldr	r1, [pc, #40]	; (1599c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
   15974:	9b01      	ldr	r3, [sp, #4]
   15976:	9a00      	ldr	r2, [sp, #0]
   15978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
   1597c:	4a06      	ldr	r2, [pc, #24]	; (15998 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   1597e:	9b01      	ldr	r3, [sp, #4]
   15980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15984:	1c5a      	adds	r2, r3, #1
   15986:	4904      	ldr	r1, [pc, #16]	; (15998 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   15988:	9b01      	ldr	r3, [sp, #4]
   1598a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1598e:	bf00      	nop
   15990:	b003      	add	sp, #12
   15992:	f85d fb04 	ldr.w	pc, [sp], #4
   15996:	bf00      	nop
   15998:	1fff97e8 	.word	0x1fff97e8
   1599c:	1fff97e4 	.word	0x1fff97e4

000159a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   159a0:	b500      	push	{lr}
   159a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   159a4:	f7eb f97e 	bl	ca4 <Sys_GetCoreID>
   159a8:	4603      	mov	r3, r0
   159aa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
   159ac:	4a0d      	ldr	r2, [pc, #52]	; (159e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   159ae:	9b01      	ldr	r3, [sp, #4]
   159b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159b4:	1e5a      	subs	r2, r3, #1
   159b6:	490b      	ldr	r1, [pc, #44]	; (159e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   159b8:	9b01      	ldr	r3, [sp, #4]
   159ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   159be:	4a0a      	ldr	r2, [pc, #40]	; (159e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
   159c0:	9b01      	ldr	r3, [sp, #4]
   159c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159c6:	f003 0301 	and.w	r3, r3, #1
   159ca:	2b00      	cmp	r3, #0
   159cc:	d106      	bne.n	159dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
   159ce:	4a05      	ldr	r2, [pc, #20]	; (159e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   159d0:	9b01      	ldr	r3, [sp, #4]
   159d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159d6:	2b00      	cmp	r3, #0
   159d8:	d100      	bne.n	159dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   159da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   159dc:	bf00      	nop
   159de:	b003      	add	sp, #12
   159e0:	f85d fb04 	ldr.w	pc, [sp], #4
   159e4:	1fff97e8 	.word	0x1fff97e8
   159e8:	1fff97e4 	.word	0x1fff97e4

000159ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   159ec:	b500      	push	{lr}
   159ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   159f0:	f7eb f958 	bl	ca4 <Sys_GetCoreID>
   159f4:	4603      	mov	r3, r0
   159f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
   159f8:	4a10      	ldr	r2, [pc, #64]	; (15a3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   159fa:	9b01      	ldr	r3, [sp, #4]
   159fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a00:	2b00      	cmp	r3, #0
   15a02:	d10d      	bne.n	15a20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15a04:	f7ea ffd1 	bl	9aa <Port_schm_read_msr>
   15a08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15a0a:	9b00      	ldr	r3, [sp, #0]
   15a0c:	f003 0301 	and.w	r3, r3, #1
   15a10:	2b00      	cmp	r3, #0
   15a12:	d100      	bne.n	15a16 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15a14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   15a16:	490a      	ldr	r1, [pc, #40]	; (15a40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
   15a18:	9b01      	ldr	r3, [sp, #4]
   15a1a:	9a00      	ldr	r2, [sp, #0]
   15a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
   15a20:	4a06      	ldr	r2, [pc, #24]	; (15a3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   15a22:	9b01      	ldr	r3, [sp, #4]
   15a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a28:	1c5a      	adds	r2, r3, #1
   15a2a:	4904      	ldr	r1, [pc, #16]	; (15a3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   15a2c:	9b01      	ldr	r3, [sp, #4]
   15a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15a32:	bf00      	nop
   15a34:	b003      	add	sp, #12
   15a36:	f85d fb04 	ldr.w	pc, [sp], #4
   15a3a:	bf00      	nop
   15a3c:	1fff97f0 	.word	0x1fff97f0
   15a40:	1fff97ec 	.word	0x1fff97ec

00015a44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   15a44:	b500      	push	{lr}
   15a46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15a48:	f7eb f92c 	bl	ca4 <Sys_GetCoreID>
   15a4c:	4603      	mov	r3, r0
   15a4e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
   15a50:	4a0d      	ldr	r2, [pc, #52]	; (15a88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   15a52:	9b01      	ldr	r3, [sp, #4]
   15a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a58:	1e5a      	subs	r2, r3, #1
   15a5a:	490b      	ldr	r1, [pc, #44]	; (15a88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   15a5c:	9b01      	ldr	r3, [sp, #4]
   15a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   15a62:	4a0a      	ldr	r2, [pc, #40]	; (15a8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
   15a64:	9b01      	ldr	r3, [sp, #4]
   15a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a6a:	f003 0301 	and.w	r3, r3, #1
   15a6e:	2b00      	cmp	r3, #0
   15a70:	d106      	bne.n	15a80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
   15a72:	4a05      	ldr	r2, [pc, #20]	; (15a88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   15a74:	9b01      	ldr	r3, [sp, #4]
   15a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a7a:	2b00      	cmp	r3, #0
   15a7c:	d100      	bne.n	15a80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15a7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15a80:	bf00      	nop
   15a82:	b003      	add	sp, #12
   15a84:	f85d fb04 	ldr.w	pc, [sp], #4
   15a88:	1fff97f0 	.word	0x1fff97f0
   15a8c:	1fff97ec 	.word	0x1fff97ec

00015a90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   15a90:	b500      	push	{lr}
   15a92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15a94:	f7eb f906 	bl	ca4 <Sys_GetCoreID>
   15a98:	4603      	mov	r3, r0
   15a9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
   15a9c:	4a10      	ldr	r2, [pc, #64]	; (15ae0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   15a9e:	9b01      	ldr	r3, [sp, #4]
   15aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15aa4:	2b00      	cmp	r3, #0
   15aa6:	d10d      	bne.n	15ac4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15aa8:	f7ea ff7f 	bl	9aa <Port_schm_read_msr>
   15aac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15aae:	9b00      	ldr	r3, [sp, #0]
   15ab0:	f003 0301 	and.w	r3, r3, #1
   15ab4:	2b00      	cmp	r3, #0
   15ab6:	d100      	bne.n	15aba <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15ab8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   15aba:	490a      	ldr	r1, [pc, #40]	; (15ae4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
   15abc:	9b01      	ldr	r3, [sp, #4]
   15abe:	9a00      	ldr	r2, [sp, #0]
   15ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
   15ac4:	4a06      	ldr	r2, [pc, #24]	; (15ae0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   15ac6:	9b01      	ldr	r3, [sp, #4]
   15ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15acc:	1c5a      	adds	r2, r3, #1
   15ace:	4904      	ldr	r1, [pc, #16]	; (15ae0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   15ad0:	9b01      	ldr	r3, [sp, #4]
   15ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15ad6:	bf00      	nop
   15ad8:	b003      	add	sp, #12
   15ada:	f85d fb04 	ldr.w	pc, [sp], #4
   15ade:	bf00      	nop
   15ae0:	1fff97f8 	.word	0x1fff97f8
   15ae4:	1fff97f4 	.word	0x1fff97f4

00015ae8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   15ae8:	b500      	push	{lr}
   15aea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15aec:	f7eb f8da 	bl	ca4 <Sys_GetCoreID>
   15af0:	4603      	mov	r3, r0
   15af2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
   15af4:	4a0d      	ldr	r2, [pc, #52]	; (15b2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   15af6:	9b01      	ldr	r3, [sp, #4]
   15af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15afc:	1e5a      	subs	r2, r3, #1
   15afe:	490b      	ldr	r1, [pc, #44]	; (15b2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   15b00:	9b01      	ldr	r3, [sp, #4]
   15b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   15b06:	4a0a      	ldr	r2, [pc, #40]	; (15b30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
   15b08:	9b01      	ldr	r3, [sp, #4]
   15b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b0e:	f003 0301 	and.w	r3, r3, #1
   15b12:	2b00      	cmp	r3, #0
   15b14:	d106      	bne.n	15b24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
   15b16:	4a05      	ldr	r2, [pc, #20]	; (15b2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   15b18:	9b01      	ldr	r3, [sp, #4]
   15b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b1e:	2b00      	cmp	r3, #0
   15b20:	d100      	bne.n	15b24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15b22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15b24:	bf00      	nop
   15b26:	b003      	add	sp, #12
   15b28:	f85d fb04 	ldr.w	pc, [sp], #4
   15b2c:	1fff97f8 	.word	0x1fff97f8
   15b30:	1fff97f4 	.word	0x1fff97f4

00015b34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   15b34:	b500      	push	{lr}
   15b36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15b38:	f7eb f8b4 	bl	ca4 <Sys_GetCoreID>
   15b3c:	4603      	mov	r3, r0
   15b3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
   15b40:	4a10      	ldr	r2, [pc, #64]	; (15b84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   15b42:	9b01      	ldr	r3, [sp, #4]
   15b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b48:	2b00      	cmp	r3, #0
   15b4a:	d10d      	bne.n	15b68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15b4c:	f7ea ff2d 	bl	9aa <Port_schm_read_msr>
   15b50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15b52:	9b00      	ldr	r3, [sp, #0]
   15b54:	f003 0301 	and.w	r3, r3, #1
   15b58:	2b00      	cmp	r3, #0
   15b5a:	d100      	bne.n	15b5e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15b5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   15b5e:	490a      	ldr	r1, [pc, #40]	; (15b88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
   15b60:	9b01      	ldr	r3, [sp, #4]
   15b62:	9a00      	ldr	r2, [sp, #0]
   15b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
   15b68:	4a06      	ldr	r2, [pc, #24]	; (15b84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   15b6a:	9b01      	ldr	r3, [sp, #4]
   15b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b70:	1c5a      	adds	r2, r3, #1
   15b72:	4904      	ldr	r1, [pc, #16]	; (15b84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   15b74:	9b01      	ldr	r3, [sp, #4]
   15b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15b7a:	bf00      	nop
   15b7c:	b003      	add	sp, #12
   15b7e:	f85d fb04 	ldr.w	pc, [sp], #4
   15b82:	bf00      	nop
   15b84:	1fff9800 	.word	0x1fff9800
   15b88:	1fff97fc 	.word	0x1fff97fc

00015b8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   15b8c:	b500      	push	{lr}
   15b8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15b90:	f7eb f888 	bl	ca4 <Sys_GetCoreID>
   15b94:	4603      	mov	r3, r0
   15b96:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
   15b98:	4a0d      	ldr	r2, [pc, #52]	; (15bd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   15b9a:	9b01      	ldr	r3, [sp, #4]
   15b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ba0:	1e5a      	subs	r2, r3, #1
   15ba2:	490b      	ldr	r1, [pc, #44]	; (15bd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   15ba4:	9b01      	ldr	r3, [sp, #4]
   15ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   15baa:	4a0a      	ldr	r2, [pc, #40]	; (15bd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
   15bac:	9b01      	ldr	r3, [sp, #4]
   15bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bb2:	f003 0301 	and.w	r3, r3, #1
   15bb6:	2b00      	cmp	r3, #0
   15bb8:	d106      	bne.n	15bc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
   15bba:	4a05      	ldr	r2, [pc, #20]	; (15bd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   15bbc:	9b01      	ldr	r3, [sp, #4]
   15bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bc2:	2b00      	cmp	r3, #0
   15bc4:	d100      	bne.n	15bc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15bc6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15bc8:	bf00      	nop
   15bca:	b003      	add	sp, #12
   15bcc:	f85d fb04 	ldr.w	pc, [sp], #4
   15bd0:	1fff9800 	.word	0x1fff9800
   15bd4:	1fff97fc 	.word	0x1fff97fc

00015bd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   15bd8:	b500      	push	{lr}
   15bda:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15bdc:	f7eb f862 	bl	ca4 <Sys_GetCoreID>
   15be0:	4603      	mov	r3, r0
   15be2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
   15be4:	4a10      	ldr	r2, [pc, #64]	; (15c28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   15be6:	9b01      	ldr	r3, [sp, #4]
   15be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bec:	2b00      	cmp	r3, #0
   15bee:	d10d      	bne.n	15c0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15bf0:	f7ea fedb 	bl	9aa <Port_schm_read_msr>
   15bf4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15bf6:	9b00      	ldr	r3, [sp, #0]
   15bf8:	f003 0301 	and.w	r3, r3, #1
   15bfc:	2b00      	cmp	r3, #0
   15bfe:	d100      	bne.n	15c02 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15c00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   15c02:	490a      	ldr	r1, [pc, #40]	; (15c2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
   15c04:	9b01      	ldr	r3, [sp, #4]
   15c06:	9a00      	ldr	r2, [sp, #0]
   15c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
   15c0c:	4a06      	ldr	r2, [pc, #24]	; (15c28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   15c0e:	9b01      	ldr	r3, [sp, #4]
   15c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c14:	1c5a      	adds	r2, r3, #1
   15c16:	4904      	ldr	r1, [pc, #16]	; (15c28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   15c18:	9b01      	ldr	r3, [sp, #4]
   15c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15c1e:	bf00      	nop
   15c20:	b003      	add	sp, #12
   15c22:	f85d fb04 	ldr.w	pc, [sp], #4
   15c26:	bf00      	nop
   15c28:	1fff9808 	.word	0x1fff9808
   15c2c:	1fff9804 	.word	0x1fff9804

00015c30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   15c30:	b500      	push	{lr}
   15c32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15c34:	f7eb f836 	bl	ca4 <Sys_GetCoreID>
   15c38:	4603      	mov	r3, r0
   15c3a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
   15c3c:	4a0d      	ldr	r2, [pc, #52]	; (15c74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   15c3e:	9b01      	ldr	r3, [sp, #4]
   15c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c44:	1e5a      	subs	r2, r3, #1
   15c46:	490b      	ldr	r1, [pc, #44]	; (15c74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   15c48:	9b01      	ldr	r3, [sp, #4]
   15c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   15c4e:	4a0a      	ldr	r2, [pc, #40]	; (15c78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
   15c50:	9b01      	ldr	r3, [sp, #4]
   15c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c56:	f003 0301 	and.w	r3, r3, #1
   15c5a:	2b00      	cmp	r3, #0
   15c5c:	d106      	bne.n	15c6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
   15c5e:	4a05      	ldr	r2, [pc, #20]	; (15c74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   15c60:	9b01      	ldr	r3, [sp, #4]
   15c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c66:	2b00      	cmp	r3, #0
   15c68:	d100      	bne.n	15c6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15c6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15c6c:	bf00      	nop
   15c6e:	b003      	add	sp, #12
   15c70:	f85d fb04 	ldr.w	pc, [sp], #4
   15c74:	1fff9808 	.word	0x1fff9808
   15c78:	1fff9804 	.word	0x1fff9804

00015c7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   15c7c:	b500      	push	{lr}
   15c7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15c80:	f7eb f810 	bl	ca4 <Sys_GetCoreID>
   15c84:	4603      	mov	r3, r0
   15c86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
   15c88:	4a10      	ldr	r2, [pc, #64]	; (15ccc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   15c8a:	9b01      	ldr	r3, [sp, #4]
   15c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c90:	2b00      	cmp	r3, #0
   15c92:	d10d      	bne.n	15cb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15c94:	f7ea fe89 	bl	9aa <Port_schm_read_msr>
   15c98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15c9a:	9b00      	ldr	r3, [sp, #0]
   15c9c:	f003 0301 	and.w	r3, r3, #1
   15ca0:	2b00      	cmp	r3, #0
   15ca2:	d100      	bne.n	15ca6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15ca4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   15ca6:	490a      	ldr	r1, [pc, #40]	; (15cd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
   15ca8:	9b01      	ldr	r3, [sp, #4]
   15caa:	9a00      	ldr	r2, [sp, #0]
   15cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
   15cb0:	4a06      	ldr	r2, [pc, #24]	; (15ccc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   15cb2:	9b01      	ldr	r3, [sp, #4]
   15cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15cb8:	1c5a      	adds	r2, r3, #1
   15cba:	4904      	ldr	r1, [pc, #16]	; (15ccc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   15cbc:	9b01      	ldr	r3, [sp, #4]
   15cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15cc2:	bf00      	nop
   15cc4:	b003      	add	sp, #12
   15cc6:	f85d fb04 	ldr.w	pc, [sp], #4
   15cca:	bf00      	nop
   15ccc:	1fff9810 	.word	0x1fff9810
   15cd0:	1fff980c 	.word	0x1fff980c

00015cd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   15cd4:	b500      	push	{lr}
   15cd6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15cd8:	f7ea ffe4 	bl	ca4 <Sys_GetCoreID>
   15cdc:	4603      	mov	r3, r0
   15cde:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
   15ce0:	4a0d      	ldr	r2, [pc, #52]	; (15d18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   15ce2:	9b01      	ldr	r3, [sp, #4]
   15ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ce8:	1e5a      	subs	r2, r3, #1
   15cea:	490b      	ldr	r1, [pc, #44]	; (15d18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   15cec:	9b01      	ldr	r3, [sp, #4]
   15cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   15cf2:	4a0a      	ldr	r2, [pc, #40]	; (15d1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
   15cf4:	9b01      	ldr	r3, [sp, #4]
   15cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15cfa:	f003 0301 	and.w	r3, r3, #1
   15cfe:	2b00      	cmp	r3, #0
   15d00:	d106      	bne.n	15d10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
   15d02:	4a05      	ldr	r2, [pc, #20]	; (15d18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   15d04:	9b01      	ldr	r3, [sp, #4]
   15d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d0a:	2b00      	cmp	r3, #0
   15d0c:	d100      	bne.n	15d10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15d0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15d10:	bf00      	nop
   15d12:	b003      	add	sp, #12
   15d14:	f85d fb04 	ldr.w	pc, [sp], #4
   15d18:	1fff9810 	.word	0x1fff9810
   15d1c:	1fff980c 	.word	0x1fff980c

00015d20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   15d20:	b500      	push	{lr}
   15d22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15d24:	f7ea ffbe 	bl	ca4 <Sys_GetCoreID>
   15d28:	4603      	mov	r3, r0
   15d2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
   15d2c:	4a10      	ldr	r2, [pc, #64]	; (15d70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   15d2e:	9b01      	ldr	r3, [sp, #4]
   15d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d34:	2b00      	cmp	r3, #0
   15d36:	d10d      	bne.n	15d54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15d38:	f7ea fe37 	bl	9aa <Port_schm_read_msr>
   15d3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15d3e:	9b00      	ldr	r3, [sp, #0]
   15d40:	f003 0301 	and.w	r3, r3, #1
   15d44:	2b00      	cmp	r3, #0
   15d46:	d100      	bne.n	15d4a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15d48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   15d4a:	490a      	ldr	r1, [pc, #40]	; (15d74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
   15d4c:	9b01      	ldr	r3, [sp, #4]
   15d4e:	9a00      	ldr	r2, [sp, #0]
   15d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
   15d54:	4a06      	ldr	r2, [pc, #24]	; (15d70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   15d56:	9b01      	ldr	r3, [sp, #4]
   15d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d5c:	1c5a      	adds	r2, r3, #1
   15d5e:	4904      	ldr	r1, [pc, #16]	; (15d70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   15d60:	9b01      	ldr	r3, [sp, #4]
   15d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15d66:	bf00      	nop
   15d68:	b003      	add	sp, #12
   15d6a:	f85d fb04 	ldr.w	pc, [sp], #4
   15d6e:	bf00      	nop
   15d70:	1fff9818 	.word	0x1fff9818
   15d74:	1fff9814 	.word	0x1fff9814

00015d78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   15d78:	b500      	push	{lr}
   15d7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15d7c:	f7ea ff92 	bl	ca4 <Sys_GetCoreID>
   15d80:	4603      	mov	r3, r0
   15d82:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
   15d84:	4a0d      	ldr	r2, [pc, #52]	; (15dbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   15d86:	9b01      	ldr	r3, [sp, #4]
   15d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d8c:	1e5a      	subs	r2, r3, #1
   15d8e:	490b      	ldr	r1, [pc, #44]	; (15dbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   15d90:	9b01      	ldr	r3, [sp, #4]
   15d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   15d96:	4a0a      	ldr	r2, [pc, #40]	; (15dc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
   15d98:	9b01      	ldr	r3, [sp, #4]
   15d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d9e:	f003 0301 	and.w	r3, r3, #1
   15da2:	2b00      	cmp	r3, #0
   15da4:	d106      	bne.n	15db4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
   15da6:	4a05      	ldr	r2, [pc, #20]	; (15dbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   15da8:	9b01      	ldr	r3, [sp, #4]
   15daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15dae:	2b00      	cmp	r3, #0
   15db0:	d100      	bne.n	15db4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15db2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15db4:	bf00      	nop
   15db6:	b003      	add	sp, #12
   15db8:	f85d fb04 	ldr.w	pc, [sp], #4
   15dbc:	1fff9818 	.word	0x1fff9818
   15dc0:	1fff9814 	.word	0x1fff9814

00015dc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   15dc4:	b500      	push	{lr}
   15dc6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15dc8:	f7ea ff6c 	bl	ca4 <Sys_GetCoreID>
   15dcc:	4603      	mov	r3, r0
   15dce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
   15dd0:	4a10      	ldr	r2, [pc, #64]	; (15e14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   15dd2:	9b01      	ldr	r3, [sp, #4]
   15dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15dd8:	2b00      	cmp	r3, #0
   15dda:	d10d      	bne.n	15df8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15ddc:	f7ea fde5 	bl	9aa <Port_schm_read_msr>
   15de0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15de2:	9b00      	ldr	r3, [sp, #0]
   15de4:	f003 0301 	and.w	r3, r3, #1
   15de8:	2b00      	cmp	r3, #0
   15dea:	d100      	bne.n	15dee <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15dec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   15dee:	490a      	ldr	r1, [pc, #40]	; (15e18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
   15df0:	9b01      	ldr	r3, [sp, #4]
   15df2:	9a00      	ldr	r2, [sp, #0]
   15df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
   15df8:	4a06      	ldr	r2, [pc, #24]	; (15e14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   15dfa:	9b01      	ldr	r3, [sp, #4]
   15dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e00:	1c5a      	adds	r2, r3, #1
   15e02:	4904      	ldr	r1, [pc, #16]	; (15e14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   15e04:	9b01      	ldr	r3, [sp, #4]
   15e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15e0a:	bf00      	nop
   15e0c:	b003      	add	sp, #12
   15e0e:	f85d fb04 	ldr.w	pc, [sp], #4
   15e12:	bf00      	nop
   15e14:	1fff9820 	.word	0x1fff9820
   15e18:	1fff981c 	.word	0x1fff981c

00015e1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   15e1c:	b500      	push	{lr}
   15e1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15e20:	f7ea ff40 	bl	ca4 <Sys_GetCoreID>
   15e24:	4603      	mov	r3, r0
   15e26:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
   15e28:	4a0d      	ldr	r2, [pc, #52]	; (15e60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   15e2a:	9b01      	ldr	r3, [sp, #4]
   15e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e30:	1e5a      	subs	r2, r3, #1
   15e32:	490b      	ldr	r1, [pc, #44]	; (15e60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   15e34:	9b01      	ldr	r3, [sp, #4]
   15e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   15e3a:	4a0a      	ldr	r2, [pc, #40]	; (15e64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
   15e3c:	9b01      	ldr	r3, [sp, #4]
   15e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e42:	f003 0301 	and.w	r3, r3, #1
   15e46:	2b00      	cmp	r3, #0
   15e48:	d106      	bne.n	15e58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
   15e4a:	4a05      	ldr	r2, [pc, #20]	; (15e60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   15e4c:	9b01      	ldr	r3, [sp, #4]
   15e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e52:	2b00      	cmp	r3, #0
   15e54:	d100      	bne.n	15e58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15e56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15e58:	bf00      	nop
   15e5a:	b003      	add	sp, #12
   15e5c:	f85d fb04 	ldr.w	pc, [sp], #4
   15e60:	1fff9820 	.word	0x1fff9820
   15e64:	1fff981c 	.word	0x1fff981c

00015e68 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00(void)
{
   15e68:	b500      	push	{lr}
   15e6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15e6c:	f7ea ff1a 	bl	ca4 <Sys_GetCoreID>
   15e70:	4603      	mov	r3, r0
   15e72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId])
   15e74:	4a10      	ldr	r2, [pc, #64]	; (15eb8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x50>)
   15e76:	9b01      	ldr	r3, [sp, #4]
   15e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e7c:	2b00      	cmp	r3, #0
   15e7e:	d10d      	bne.n	15e9c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15e80:	f7ea fd9c 	bl	9bc <Spi_schm_read_msr>
   15e84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15e86:	9b00      	ldr	r3, [sp, #0]
   15e88:	f003 0301 	and.w	r3, r3, #1
   15e8c:	2b00      	cmp	r3, #0
   15e8e:	d100      	bne.n	15e92 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15e90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   15e92:	490a      	ldr	r1, [pc, #40]	; (15ebc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x54>)
   15e94:	9b01      	ldr	r3, [sp, #4]
   15e96:	9a00      	ldr	r2, [sp, #0]
   15e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId]++;
   15e9c:	4a06      	ldr	r2, [pc, #24]	; (15eb8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x50>)
   15e9e:	9b01      	ldr	r3, [sp, #4]
   15ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ea4:	1c5a      	adds	r2, r3, #1
   15ea6:	4904      	ldr	r1, [pc, #16]	; (15eb8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x50>)
   15ea8:	9b01      	ldr	r3, [sp, #4]
   15eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15eae:	bf00      	nop
   15eb0:	b003      	add	sp, #12
   15eb2:	f85d fb04 	ldr.w	pc, [sp], #4
   15eb6:	bf00      	nop
   15eb8:	1fff9828 	.word	0x1fff9828
   15ebc:	1fff9824 	.word	0x1fff9824

00015ec0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00(void)
{
   15ec0:	b500      	push	{lr}
   15ec2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15ec4:	f7ea feee 	bl	ca4 <Sys_GetCoreID>
   15ec8:	4603      	mov	r3, r0
   15eca:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId]--;
   15ecc:	4a0d      	ldr	r2, [pc, #52]	; (15f04 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x44>)
   15ece:	9b01      	ldr	r3, [sp, #4]
   15ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ed4:	1e5a      	subs	r2, r3, #1
   15ed6:	490b      	ldr	r1, [pc, #44]	; (15f04 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x44>)
   15ed8:	9b01      	ldr	r3, [sp, #4]
   15eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   15ede:	4a0a      	ldr	r2, [pc, #40]	; (15f08 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x48>)
   15ee0:	9b01      	ldr	r3, [sp, #4]
   15ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ee6:	f003 0301 	and.w	r3, r3, #1
   15eea:	2b00      	cmp	r3, #0
   15eec:	d106      	bne.n	15efc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x3c>
   15eee:	4a05      	ldr	r2, [pc, #20]	; (15f04 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x44>)
   15ef0:	9b01      	ldr	r3, [sp, #4]
   15ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ef6:	2b00      	cmp	r3, #0
   15ef8:	d100      	bne.n	15efc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15efa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15efc:	bf00      	nop
   15efe:	b003      	add	sp, #12
   15f00:	f85d fb04 	ldr.w	pc, [sp], #4
   15f04:	1fff9828 	.word	0x1fff9828
   15f08:	1fff9824 	.word	0x1fff9824

00015f0c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01(void)
{
   15f0c:	b500      	push	{lr}
   15f0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15f10:	f7ea fec8 	bl	ca4 <Sys_GetCoreID>
   15f14:	4603      	mov	r3, r0
   15f16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId])
   15f18:	4a10      	ldr	r2, [pc, #64]	; (15f5c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x50>)
   15f1a:	9b01      	ldr	r3, [sp, #4]
   15f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f20:	2b00      	cmp	r3, #0
   15f22:	d10d      	bne.n	15f40 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15f24:	f7ea fd4a 	bl	9bc <Spi_schm_read_msr>
   15f28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15f2a:	9b00      	ldr	r3, [sp, #0]
   15f2c:	f003 0301 	and.w	r3, r3, #1
   15f30:	2b00      	cmp	r3, #0
   15f32:	d100      	bne.n	15f36 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15f34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   15f36:	490a      	ldr	r1, [pc, #40]	; (15f60 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x54>)
   15f38:	9b01      	ldr	r3, [sp, #4]
   15f3a:	9a00      	ldr	r2, [sp, #0]
   15f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId]++;
   15f40:	4a06      	ldr	r2, [pc, #24]	; (15f5c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x50>)
   15f42:	9b01      	ldr	r3, [sp, #4]
   15f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f48:	1c5a      	adds	r2, r3, #1
   15f4a:	4904      	ldr	r1, [pc, #16]	; (15f5c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x50>)
   15f4c:	9b01      	ldr	r3, [sp, #4]
   15f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15f52:	bf00      	nop
   15f54:	b003      	add	sp, #12
   15f56:	f85d fb04 	ldr.w	pc, [sp], #4
   15f5a:	bf00      	nop
   15f5c:	1fff9830 	.word	0x1fff9830
   15f60:	1fff982c 	.word	0x1fff982c

00015f64 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01(void)
{
   15f64:	b500      	push	{lr}
   15f66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15f68:	f7ea fe9c 	bl	ca4 <Sys_GetCoreID>
   15f6c:	4603      	mov	r3, r0
   15f6e:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId]--;
   15f70:	4a0d      	ldr	r2, [pc, #52]	; (15fa8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x44>)
   15f72:	9b01      	ldr	r3, [sp, #4]
   15f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f78:	1e5a      	subs	r2, r3, #1
   15f7a:	490b      	ldr	r1, [pc, #44]	; (15fa8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x44>)
   15f7c:	9b01      	ldr	r3, [sp, #4]
   15f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   15f82:	4a0a      	ldr	r2, [pc, #40]	; (15fac <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x48>)
   15f84:	9b01      	ldr	r3, [sp, #4]
   15f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f8a:	f003 0301 	and.w	r3, r3, #1
   15f8e:	2b00      	cmp	r3, #0
   15f90:	d106      	bne.n	15fa0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x3c>
   15f92:	4a05      	ldr	r2, [pc, #20]	; (15fa8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x44>)
   15f94:	9b01      	ldr	r3, [sp, #4]
   15f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f9a:	2b00      	cmp	r3, #0
   15f9c:	d100      	bne.n	15fa0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15f9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15fa0:	bf00      	nop
   15fa2:	b003      	add	sp, #12
   15fa4:	f85d fb04 	ldr.w	pc, [sp], #4
   15fa8:	1fff9830 	.word	0x1fff9830
   15fac:	1fff982c 	.word	0x1fff982c

00015fb0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02(void)
{
   15fb0:	b500      	push	{lr}
   15fb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15fb4:	f7ea fe76 	bl	ca4 <Sys_GetCoreID>
   15fb8:	4603      	mov	r3, r0
   15fba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId])
   15fbc:	4a10      	ldr	r2, [pc, #64]	; (16000 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x50>)
   15fbe:	9b01      	ldr	r3, [sp, #4]
   15fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15fc4:	2b00      	cmp	r3, #0
   15fc6:	d10d      	bne.n	15fe4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15fc8:	f7ea fcf8 	bl	9bc <Spi_schm_read_msr>
   15fcc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15fce:	9b00      	ldr	r3, [sp, #0]
   15fd0:	f003 0301 	and.w	r3, r3, #1
   15fd4:	2b00      	cmp	r3, #0
   15fd6:	d100      	bne.n	15fda <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15fd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   15fda:	490a      	ldr	r1, [pc, #40]	; (16004 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x54>)
   15fdc:	9b01      	ldr	r3, [sp, #4]
   15fde:	9a00      	ldr	r2, [sp, #0]
   15fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId]++;
   15fe4:	4a06      	ldr	r2, [pc, #24]	; (16000 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x50>)
   15fe6:	9b01      	ldr	r3, [sp, #4]
   15fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15fec:	1c5a      	adds	r2, r3, #1
   15fee:	4904      	ldr	r1, [pc, #16]	; (16000 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x50>)
   15ff0:	9b01      	ldr	r3, [sp, #4]
   15ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15ff6:	bf00      	nop
   15ff8:	b003      	add	sp, #12
   15ffa:	f85d fb04 	ldr.w	pc, [sp], #4
   15ffe:	bf00      	nop
   16000:	1fff9838 	.word	0x1fff9838
   16004:	1fff9834 	.word	0x1fff9834

00016008 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02(void)
{
   16008:	b500      	push	{lr}
   1600a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1600c:	f7ea fe4a 	bl	ca4 <Sys_GetCoreID>
   16010:	4603      	mov	r3, r0
   16012:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId]--;
   16014:	4a0d      	ldr	r2, [pc, #52]	; (1604c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x44>)
   16016:	9b01      	ldr	r3, [sp, #4]
   16018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1601c:	1e5a      	subs	r2, r3, #1
   1601e:	490b      	ldr	r1, [pc, #44]	; (1604c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x44>)
   16020:	9b01      	ldr	r3, [sp, #4]
   16022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   16026:	4a0a      	ldr	r2, [pc, #40]	; (16050 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x48>)
   16028:	9b01      	ldr	r3, [sp, #4]
   1602a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1602e:	f003 0301 	and.w	r3, r3, #1
   16032:	2b00      	cmp	r3, #0
   16034:	d106      	bne.n	16044 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x3c>
   16036:	4a05      	ldr	r2, [pc, #20]	; (1604c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x44>)
   16038:	9b01      	ldr	r3, [sp, #4]
   1603a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1603e:	2b00      	cmp	r3, #0
   16040:	d100      	bne.n	16044 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16042:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16044:	bf00      	nop
   16046:	b003      	add	sp, #12
   16048:	f85d fb04 	ldr.w	pc, [sp], #4
   1604c:	1fff9838 	.word	0x1fff9838
   16050:	1fff9834 	.word	0x1fff9834

00016054 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03(void)
{
   16054:	b500      	push	{lr}
   16056:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16058:	f7ea fe24 	bl	ca4 <Sys_GetCoreID>
   1605c:	4603      	mov	r3, r0
   1605e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId])
   16060:	4a10      	ldr	r2, [pc, #64]	; (160a4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x50>)
   16062:	9b01      	ldr	r3, [sp, #4]
   16064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16068:	2b00      	cmp	r3, #0
   1606a:	d10d      	bne.n	16088 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1606c:	f7ea fca6 	bl	9bc <Spi_schm_read_msr>
   16070:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16072:	9b00      	ldr	r3, [sp, #0]
   16074:	f003 0301 	and.w	r3, r3, #1
   16078:	2b00      	cmp	r3, #0
   1607a:	d100      	bne.n	1607e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1607c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   1607e:	490a      	ldr	r1, [pc, #40]	; (160a8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x54>)
   16080:	9b01      	ldr	r3, [sp, #4]
   16082:	9a00      	ldr	r2, [sp, #0]
   16084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId]++;
   16088:	4a06      	ldr	r2, [pc, #24]	; (160a4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x50>)
   1608a:	9b01      	ldr	r3, [sp, #4]
   1608c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16090:	1c5a      	adds	r2, r3, #1
   16092:	4904      	ldr	r1, [pc, #16]	; (160a4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x50>)
   16094:	9b01      	ldr	r3, [sp, #4]
   16096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1609a:	bf00      	nop
   1609c:	b003      	add	sp, #12
   1609e:	f85d fb04 	ldr.w	pc, [sp], #4
   160a2:	bf00      	nop
   160a4:	1fff9840 	.word	0x1fff9840
   160a8:	1fff983c 	.word	0x1fff983c

000160ac <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03(void)
{
   160ac:	b500      	push	{lr}
   160ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   160b0:	f7ea fdf8 	bl	ca4 <Sys_GetCoreID>
   160b4:	4603      	mov	r3, r0
   160b6:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId]--;
   160b8:	4a0d      	ldr	r2, [pc, #52]	; (160f0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x44>)
   160ba:	9b01      	ldr	r3, [sp, #4]
   160bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160c0:	1e5a      	subs	r2, r3, #1
   160c2:	490b      	ldr	r1, [pc, #44]	; (160f0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x44>)
   160c4:	9b01      	ldr	r3, [sp, #4]
   160c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   160ca:	4a0a      	ldr	r2, [pc, #40]	; (160f4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x48>)
   160cc:	9b01      	ldr	r3, [sp, #4]
   160ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160d2:	f003 0301 	and.w	r3, r3, #1
   160d6:	2b00      	cmp	r3, #0
   160d8:	d106      	bne.n	160e8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x3c>
   160da:	4a05      	ldr	r2, [pc, #20]	; (160f0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x44>)
   160dc:	9b01      	ldr	r3, [sp, #4]
   160de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160e2:	2b00      	cmp	r3, #0
   160e4:	d100      	bne.n	160e8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   160e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   160e8:	bf00      	nop
   160ea:	b003      	add	sp, #12
   160ec:	f85d fb04 	ldr.w	pc, [sp], #4
   160f0:	1fff9840 	.word	0x1fff9840
   160f4:	1fff983c 	.word	0x1fff983c

000160f8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04(void)
{
   160f8:	b500      	push	{lr}
   160fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   160fc:	f7ea fdd2 	bl	ca4 <Sys_GetCoreID>
   16100:	4603      	mov	r3, r0
   16102:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId])
   16104:	4a10      	ldr	r2, [pc, #64]	; (16148 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x50>)
   16106:	9b01      	ldr	r3, [sp, #4]
   16108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1610c:	2b00      	cmp	r3, #0
   1610e:	d10d      	bne.n	1612c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16110:	f7ea fc54 	bl	9bc <Spi_schm_read_msr>
   16114:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16116:	9b00      	ldr	r3, [sp, #0]
   16118:	f003 0301 	and.w	r3, r3, #1
   1611c:	2b00      	cmp	r3, #0
   1611e:	d100      	bne.n	16122 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16120:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   16122:	490a      	ldr	r1, [pc, #40]	; (1614c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x54>)
   16124:	9b01      	ldr	r3, [sp, #4]
   16126:	9a00      	ldr	r2, [sp, #0]
   16128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId]++;
   1612c:	4a06      	ldr	r2, [pc, #24]	; (16148 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x50>)
   1612e:	9b01      	ldr	r3, [sp, #4]
   16130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16134:	1c5a      	adds	r2, r3, #1
   16136:	4904      	ldr	r1, [pc, #16]	; (16148 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x50>)
   16138:	9b01      	ldr	r3, [sp, #4]
   1613a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1613e:	bf00      	nop
   16140:	b003      	add	sp, #12
   16142:	f85d fb04 	ldr.w	pc, [sp], #4
   16146:	bf00      	nop
   16148:	1fff9848 	.word	0x1fff9848
   1614c:	1fff9844 	.word	0x1fff9844

00016150 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04(void)
{
   16150:	b500      	push	{lr}
   16152:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16154:	f7ea fda6 	bl	ca4 <Sys_GetCoreID>
   16158:	4603      	mov	r3, r0
   1615a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId]--;
   1615c:	4a0d      	ldr	r2, [pc, #52]	; (16194 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x44>)
   1615e:	9b01      	ldr	r3, [sp, #4]
   16160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16164:	1e5a      	subs	r2, r3, #1
   16166:	490b      	ldr	r1, [pc, #44]	; (16194 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x44>)
   16168:	9b01      	ldr	r3, [sp, #4]
   1616a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   1616e:	4a0a      	ldr	r2, [pc, #40]	; (16198 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x48>)
   16170:	9b01      	ldr	r3, [sp, #4]
   16172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16176:	f003 0301 	and.w	r3, r3, #1
   1617a:	2b00      	cmp	r3, #0
   1617c:	d106      	bne.n	1618c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x3c>
   1617e:	4a05      	ldr	r2, [pc, #20]	; (16194 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x44>)
   16180:	9b01      	ldr	r3, [sp, #4]
   16182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16186:	2b00      	cmp	r3, #0
   16188:	d100      	bne.n	1618c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1618a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1618c:	bf00      	nop
   1618e:	b003      	add	sp, #12
   16190:	f85d fb04 	ldr.w	pc, [sp], #4
   16194:	1fff9848 	.word	0x1fff9848
   16198:	1fff9844 	.word	0x1fff9844

0001619c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05(void)
{
   1619c:	b500      	push	{lr}
   1619e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   161a0:	f7ea fd80 	bl	ca4 <Sys_GetCoreID>
   161a4:	4603      	mov	r3, r0
   161a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId])
   161a8:	4a10      	ldr	r2, [pc, #64]	; (161ec <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x50>)
   161aa:	9b01      	ldr	r3, [sp, #4]
   161ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161b0:	2b00      	cmp	r3, #0
   161b2:	d10d      	bne.n	161d0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   161b4:	f7ea fc02 	bl	9bc <Spi_schm_read_msr>
   161b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   161ba:	9b00      	ldr	r3, [sp, #0]
   161bc:	f003 0301 	and.w	r3, r3, #1
   161c0:	2b00      	cmp	r3, #0
   161c2:	d100      	bne.n	161c6 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   161c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   161c6:	490a      	ldr	r1, [pc, #40]	; (161f0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x54>)
   161c8:	9b01      	ldr	r3, [sp, #4]
   161ca:	9a00      	ldr	r2, [sp, #0]
   161cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId]++;
   161d0:	4a06      	ldr	r2, [pc, #24]	; (161ec <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x50>)
   161d2:	9b01      	ldr	r3, [sp, #4]
   161d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161d8:	1c5a      	adds	r2, r3, #1
   161da:	4904      	ldr	r1, [pc, #16]	; (161ec <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x50>)
   161dc:	9b01      	ldr	r3, [sp, #4]
   161de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   161e2:	bf00      	nop
   161e4:	b003      	add	sp, #12
   161e6:	f85d fb04 	ldr.w	pc, [sp], #4
   161ea:	bf00      	nop
   161ec:	1fff9850 	.word	0x1fff9850
   161f0:	1fff984c 	.word	0x1fff984c

000161f4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05(void)
{
   161f4:	b500      	push	{lr}
   161f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   161f8:	f7ea fd54 	bl	ca4 <Sys_GetCoreID>
   161fc:	4603      	mov	r3, r0
   161fe:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId]--;
   16200:	4a0d      	ldr	r2, [pc, #52]	; (16238 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x44>)
   16202:	9b01      	ldr	r3, [sp, #4]
   16204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16208:	1e5a      	subs	r2, r3, #1
   1620a:	490b      	ldr	r1, [pc, #44]	; (16238 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x44>)
   1620c:	9b01      	ldr	r3, [sp, #4]
   1620e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   16212:	4a0a      	ldr	r2, [pc, #40]	; (1623c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x48>)
   16214:	9b01      	ldr	r3, [sp, #4]
   16216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1621a:	f003 0301 	and.w	r3, r3, #1
   1621e:	2b00      	cmp	r3, #0
   16220:	d106      	bne.n	16230 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x3c>
   16222:	4a05      	ldr	r2, [pc, #20]	; (16238 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x44>)
   16224:	9b01      	ldr	r3, [sp, #4]
   16226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1622a:	2b00      	cmp	r3, #0
   1622c:	d100      	bne.n	16230 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1622e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16230:	bf00      	nop
   16232:	b003      	add	sp, #12
   16234:	f85d fb04 	ldr.w	pc, [sp], #4
   16238:	1fff9850 	.word	0x1fff9850
   1623c:	1fff984c 	.word	0x1fff984c

00016240 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06(void)
{
   16240:	b500      	push	{lr}
   16242:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16244:	f7ea fd2e 	bl	ca4 <Sys_GetCoreID>
   16248:	4603      	mov	r3, r0
   1624a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId])
   1624c:	4a10      	ldr	r2, [pc, #64]	; (16290 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x50>)
   1624e:	9b01      	ldr	r3, [sp, #4]
   16250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16254:	2b00      	cmp	r3, #0
   16256:	d10d      	bne.n	16274 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16258:	f7ea fbb0 	bl	9bc <Spi_schm_read_msr>
   1625c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1625e:	9b00      	ldr	r3, [sp, #0]
   16260:	f003 0301 	and.w	r3, r3, #1
   16264:	2b00      	cmp	r3, #0
   16266:	d100      	bne.n	1626a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16268:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   1626a:	490a      	ldr	r1, [pc, #40]	; (16294 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x54>)
   1626c:	9b01      	ldr	r3, [sp, #4]
   1626e:	9a00      	ldr	r2, [sp, #0]
   16270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId]++;
   16274:	4a06      	ldr	r2, [pc, #24]	; (16290 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x50>)
   16276:	9b01      	ldr	r3, [sp, #4]
   16278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1627c:	1c5a      	adds	r2, r3, #1
   1627e:	4904      	ldr	r1, [pc, #16]	; (16290 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x50>)
   16280:	9b01      	ldr	r3, [sp, #4]
   16282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16286:	bf00      	nop
   16288:	b003      	add	sp, #12
   1628a:	f85d fb04 	ldr.w	pc, [sp], #4
   1628e:	bf00      	nop
   16290:	1fff9858 	.word	0x1fff9858
   16294:	1fff9854 	.word	0x1fff9854

00016298 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06(void)
{
   16298:	b500      	push	{lr}
   1629a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1629c:	f7ea fd02 	bl	ca4 <Sys_GetCoreID>
   162a0:	4603      	mov	r3, r0
   162a2:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId]--;
   162a4:	4a0d      	ldr	r2, [pc, #52]	; (162dc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x44>)
   162a6:	9b01      	ldr	r3, [sp, #4]
   162a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162ac:	1e5a      	subs	r2, r3, #1
   162ae:	490b      	ldr	r1, [pc, #44]	; (162dc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x44>)
   162b0:	9b01      	ldr	r3, [sp, #4]
   162b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   162b6:	4a0a      	ldr	r2, [pc, #40]	; (162e0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x48>)
   162b8:	9b01      	ldr	r3, [sp, #4]
   162ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162be:	f003 0301 	and.w	r3, r3, #1
   162c2:	2b00      	cmp	r3, #0
   162c4:	d106      	bne.n	162d4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x3c>
   162c6:	4a05      	ldr	r2, [pc, #20]	; (162dc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x44>)
   162c8:	9b01      	ldr	r3, [sp, #4]
   162ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162ce:	2b00      	cmp	r3, #0
   162d0:	d100      	bne.n	162d4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   162d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   162d4:	bf00      	nop
   162d6:	b003      	add	sp, #12
   162d8:	f85d fb04 	ldr.w	pc, [sp], #4
   162dc:	1fff9858 	.word	0x1fff9858
   162e0:	1fff9854 	.word	0x1fff9854

000162e4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07(void)
{
   162e4:	b500      	push	{lr}
   162e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   162e8:	f7ea fcdc 	bl	ca4 <Sys_GetCoreID>
   162ec:	4603      	mov	r3, r0
   162ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId])
   162f0:	4a10      	ldr	r2, [pc, #64]	; (16334 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x50>)
   162f2:	9b01      	ldr	r3, [sp, #4]
   162f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162f8:	2b00      	cmp	r3, #0
   162fa:	d10d      	bne.n	16318 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   162fc:	f7ea fb5e 	bl	9bc <Spi_schm_read_msr>
   16300:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16302:	9b00      	ldr	r3, [sp, #0]
   16304:	f003 0301 	and.w	r3, r3, #1
   16308:	2b00      	cmp	r3, #0
   1630a:	d100      	bne.n	1630e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1630c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   1630e:	490a      	ldr	r1, [pc, #40]	; (16338 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x54>)
   16310:	9b01      	ldr	r3, [sp, #4]
   16312:	9a00      	ldr	r2, [sp, #0]
   16314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId]++;
   16318:	4a06      	ldr	r2, [pc, #24]	; (16334 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x50>)
   1631a:	9b01      	ldr	r3, [sp, #4]
   1631c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16320:	1c5a      	adds	r2, r3, #1
   16322:	4904      	ldr	r1, [pc, #16]	; (16334 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x50>)
   16324:	9b01      	ldr	r3, [sp, #4]
   16326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1632a:	bf00      	nop
   1632c:	b003      	add	sp, #12
   1632e:	f85d fb04 	ldr.w	pc, [sp], #4
   16332:	bf00      	nop
   16334:	1fff9860 	.word	0x1fff9860
   16338:	1fff985c 	.word	0x1fff985c

0001633c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07(void)
{
   1633c:	b500      	push	{lr}
   1633e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16340:	f7ea fcb0 	bl	ca4 <Sys_GetCoreID>
   16344:	4603      	mov	r3, r0
   16346:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId]--;
   16348:	4a0d      	ldr	r2, [pc, #52]	; (16380 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x44>)
   1634a:	9b01      	ldr	r3, [sp, #4]
   1634c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16350:	1e5a      	subs	r2, r3, #1
   16352:	490b      	ldr	r1, [pc, #44]	; (16380 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x44>)
   16354:	9b01      	ldr	r3, [sp, #4]
   16356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   1635a:	4a0a      	ldr	r2, [pc, #40]	; (16384 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x48>)
   1635c:	9b01      	ldr	r3, [sp, #4]
   1635e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16362:	f003 0301 	and.w	r3, r3, #1
   16366:	2b00      	cmp	r3, #0
   16368:	d106      	bne.n	16378 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x3c>
   1636a:	4a05      	ldr	r2, [pc, #20]	; (16380 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x44>)
   1636c:	9b01      	ldr	r3, [sp, #4]
   1636e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16372:	2b00      	cmp	r3, #0
   16374:	d100      	bne.n	16378 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16376:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16378:	bf00      	nop
   1637a:	b003      	add	sp, #12
   1637c:	f85d fb04 	ldr.w	pc, [sp], #4
   16380:	1fff9860 	.word	0x1fff9860
   16384:	1fff985c 	.word	0x1fff985c

00016388 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08(void)
{
   16388:	b500      	push	{lr}
   1638a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1638c:	f7ea fc8a 	bl	ca4 <Sys_GetCoreID>
   16390:	4603      	mov	r3, r0
   16392:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId])
   16394:	4a10      	ldr	r2, [pc, #64]	; (163d8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x50>)
   16396:	9b01      	ldr	r3, [sp, #4]
   16398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1639c:	2b00      	cmp	r3, #0
   1639e:	d10d      	bne.n	163bc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   163a0:	f7ea fb0c 	bl	9bc <Spi_schm_read_msr>
   163a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   163a6:	9b00      	ldr	r3, [sp, #0]
   163a8:	f003 0301 	and.w	r3, r3, #1
   163ac:	2b00      	cmp	r3, #0
   163ae:	d100      	bne.n	163b2 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   163b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   163b2:	490a      	ldr	r1, [pc, #40]	; (163dc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x54>)
   163b4:	9b01      	ldr	r3, [sp, #4]
   163b6:	9a00      	ldr	r2, [sp, #0]
   163b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId]++;
   163bc:	4a06      	ldr	r2, [pc, #24]	; (163d8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x50>)
   163be:	9b01      	ldr	r3, [sp, #4]
   163c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163c4:	1c5a      	adds	r2, r3, #1
   163c6:	4904      	ldr	r1, [pc, #16]	; (163d8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x50>)
   163c8:	9b01      	ldr	r3, [sp, #4]
   163ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   163ce:	bf00      	nop
   163d0:	b003      	add	sp, #12
   163d2:	f85d fb04 	ldr.w	pc, [sp], #4
   163d6:	bf00      	nop
   163d8:	1fff9868 	.word	0x1fff9868
   163dc:	1fff9864 	.word	0x1fff9864

000163e0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08(void)
{
   163e0:	b500      	push	{lr}
   163e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   163e4:	f7ea fc5e 	bl	ca4 <Sys_GetCoreID>
   163e8:	4603      	mov	r3, r0
   163ea:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId]--;
   163ec:	4a0d      	ldr	r2, [pc, #52]	; (16424 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x44>)
   163ee:	9b01      	ldr	r3, [sp, #4]
   163f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163f4:	1e5a      	subs	r2, r3, #1
   163f6:	490b      	ldr	r1, [pc, #44]	; (16424 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x44>)
   163f8:	9b01      	ldr	r3, [sp, #4]
   163fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   163fe:	4a0a      	ldr	r2, [pc, #40]	; (16428 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x48>)
   16400:	9b01      	ldr	r3, [sp, #4]
   16402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16406:	f003 0301 	and.w	r3, r3, #1
   1640a:	2b00      	cmp	r3, #0
   1640c:	d106      	bne.n	1641c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x3c>
   1640e:	4a05      	ldr	r2, [pc, #20]	; (16424 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x44>)
   16410:	9b01      	ldr	r3, [sp, #4]
   16412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16416:	2b00      	cmp	r3, #0
   16418:	d100      	bne.n	1641c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1641a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1641c:	bf00      	nop
   1641e:	b003      	add	sp, #12
   16420:	f85d fb04 	ldr.w	pc, [sp], #4
   16424:	1fff9868 	.word	0x1fff9868
   16428:	1fff9864 	.word	0x1fff9864

0001642c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09(void)
{
   1642c:	b500      	push	{lr}
   1642e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16430:	f7ea fc38 	bl	ca4 <Sys_GetCoreID>
   16434:	4603      	mov	r3, r0
   16436:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId])
   16438:	4a10      	ldr	r2, [pc, #64]	; (1647c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x50>)
   1643a:	9b01      	ldr	r3, [sp, #4]
   1643c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16440:	2b00      	cmp	r3, #0
   16442:	d10d      	bne.n	16460 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16444:	f7ea faba 	bl	9bc <Spi_schm_read_msr>
   16448:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1644a:	9b00      	ldr	r3, [sp, #0]
   1644c:	f003 0301 	and.w	r3, r3, #1
   16450:	2b00      	cmp	r3, #0
   16452:	d100      	bne.n	16456 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16454:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   16456:	490a      	ldr	r1, [pc, #40]	; (16480 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x54>)
   16458:	9b01      	ldr	r3, [sp, #4]
   1645a:	9a00      	ldr	r2, [sp, #0]
   1645c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId]++;
   16460:	4a06      	ldr	r2, [pc, #24]	; (1647c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x50>)
   16462:	9b01      	ldr	r3, [sp, #4]
   16464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16468:	1c5a      	adds	r2, r3, #1
   1646a:	4904      	ldr	r1, [pc, #16]	; (1647c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x50>)
   1646c:	9b01      	ldr	r3, [sp, #4]
   1646e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16472:	bf00      	nop
   16474:	b003      	add	sp, #12
   16476:	f85d fb04 	ldr.w	pc, [sp], #4
   1647a:	bf00      	nop
   1647c:	1fff9870 	.word	0x1fff9870
   16480:	1fff986c 	.word	0x1fff986c

00016484 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09(void)
{
   16484:	b500      	push	{lr}
   16486:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16488:	f7ea fc0c 	bl	ca4 <Sys_GetCoreID>
   1648c:	4603      	mov	r3, r0
   1648e:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId]--;
   16490:	4a0d      	ldr	r2, [pc, #52]	; (164c8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x44>)
   16492:	9b01      	ldr	r3, [sp, #4]
   16494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16498:	1e5a      	subs	r2, r3, #1
   1649a:	490b      	ldr	r1, [pc, #44]	; (164c8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x44>)
   1649c:	9b01      	ldr	r3, [sp, #4]
   1649e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   164a2:	4a0a      	ldr	r2, [pc, #40]	; (164cc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x48>)
   164a4:	9b01      	ldr	r3, [sp, #4]
   164a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164aa:	f003 0301 	and.w	r3, r3, #1
   164ae:	2b00      	cmp	r3, #0
   164b0:	d106      	bne.n	164c0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x3c>
   164b2:	4a05      	ldr	r2, [pc, #20]	; (164c8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x44>)
   164b4:	9b01      	ldr	r3, [sp, #4]
   164b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164ba:	2b00      	cmp	r3, #0
   164bc:	d100      	bne.n	164c0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   164be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   164c0:	bf00      	nop
   164c2:	b003      	add	sp, #12
   164c4:	f85d fb04 	ldr.w	pc, [sp], #4
   164c8:	1fff9870 	.word	0x1fff9870
   164cc:	1fff986c 	.word	0x1fff986c

000164d0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10(void)
{
   164d0:	b500      	push	{lr}
   164d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   164d4:	f7ea fbe6 	bl	ca4 <Sys_GetCoreID>
   164d8:	4603      	mov	r3, r0
   164da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId])
   164dc:	4a10      	ldr	r2, [pc, #64]	; (16520 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x50>)
   164de:	9b01      	ldr	r3, [sp, #4]
   164e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164e4:	2b00      	cmp	r3, #0
   164e6:	d10d      	bne.n	16504 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   164e8:	f7ea fa68 	bl	9bc <Spi_schm_read_msr>
   164ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   164ee:	9b00      	ldr	r3, [sp, #0]
   164f0:	f003 0301 	and.w	r3, r3, #1
   164f4:	2b00      	cmp	r3, #0
   164f6:	d100      	bne.n	164fa <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   164f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   164fa:	490a      	ldr	r1, [pc, #40]	; (16524 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x54>)
   164fc:	9b01      	ldr	r3, [sp, #4]
   164fe:	9a00      	ldr	r2, [sp, #0]
   16500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId]++;
   16504:	4a06      	ldr	r2, [pc, #24]	; (16520 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x50>)
   16506:	9b01      	ldr	r3, [sp, #4]
   16508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1650c:	1c5a      	adds	r2, r3, #1
   1650e:	4904      	ldr	r1, [pc, #16]	; (16520 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x50>)
   16510:	9b01      	ldr	r3, [sp, #4]
   16512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16516:	bf00      	nop
   16518:	b003      	add	sp, #12
   1651a:	f85d fb04 	ldr.w	pc, [sp], #4
   1651e:	bf00      	nop
   16520:	1fff9878 	.word	0x1fff9878
   16524:	1fff9874 	.word	0x1fff9874

00016528 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10(void)
{
   16528:	b500      	push	{lr}
   1652a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1652c:	f7ea fbba 	bl	ca4 <Sys_GetCoreID>
   16530:	4603      	mov	r3, r0
   16532:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId]--;
   16534:	4a0d      	ldr	r2, [pc, #52]	; (1656c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x44>)
   16536:	9b01      	ldr	r3, [sp, #4]
   16538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1653c:	1e5a      	subs	r2, r3, #1
   1653e:	490b      	ldr	r1, [pc, #44]	; (1656c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x44>)
   16540:	9b01      	ldr	r3, [sp, #4]
   16542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   16546:	4a0a      	ldr	r2, [pc, #40]	; (16570 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x48>)
   16548:	9b01      	ldr	r3, [sp, #4]
   1654a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1654e:	f003 0301 	and.w	r3, r3, #1
   16552:	2b00      	cmp	r3, #0
   16554:	d106      	bne.n	16564 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x3c>
   16556:	4a05      	ldr	r2, [pc, #20]	; (1656c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x44>)
   16558:	9b01      	ldr	r3, [sp, #4]
   1655a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1655e:	2b00      	cmp	r3, #0
   16560:	d100      	bne.n	16564 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16562:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16564:	bf00      	nop
   16566:	b003      	add	sp, #12
   16568:	f85d fb04 	ldr.w	pc, [sp], #4
   1656c:	1fff9878 	.word	0x1fff9878
   16570:	1fff9874 	.word	0x1fff9874

00016574 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11(void)
{
   16574:	b500      	push	{lr}
   16576:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16578:	f7ea fb94 	bl	ca4 <Sys_GetCoreID>
   1657c:	4603      	mov	r3, r0
   1657e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId])
   16580:	4a10      	ldr	r2, [pc, #64]	; (165c4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x50>)
   16582:	9b01      	ldr	r3, [sp, #4]
   16584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16588:	2b00      	cmp	r3, #0
   1658a:	d10d      	bne.n	165a8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1658c:	f7ea fa16 	bl	9bc <Spi_schm_read_msr>
   16590:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16592:	9b00      	ldr	r3, [sp, #0]
   16594:	f003 0301 	and.w	r3, r3, #1
   16598:	2b00      	cmp	r3, #0
   1659a:	d100      	bne.n	1659e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1659c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   1659e:	490a      	ldr	r1, [pc, #40]	; (165c8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x54>)
   165a0:	9b01      	ldr	r3, [sp, #4]
   165a2:	9a00      	ldr	r2, [sp, #0]
   165a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId]++;
   165a8:	4a06      	ldr	r2, [pc, #24]	; (165c4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x50>)
   165aa:	9b01      	ldr	r3, [sp, #4]
   165ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165b0:	1c5a      	adds	r2, r3, #1
   165b2:	4904      	ldr	r1, [pc, #16]	; (165c4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x50>)
   165b4:	9b01      	ldr	r3, [sp, #4]
   165b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   165ba:	bf00      	nop
   165bc:	b003      	add	sp, #12
   165be:	f85d fb04 	ldr.w	pc, [sp], #4
   165c2:	bf00      	nop
   165c4:	1fff9880 	.word	0x1fff9880
   165c8:	1fff987c 	.word	0x1fff987c

000165cc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11(void)
{
   165cc:	b500      	push	{lr}
   165ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   165d0:	f7ea fb68 	bl	ca4 <Sys_GetCoreID>
   165d4:	4603      	mov	r3, r0
   165d6:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId]--;
   165d8:	4a0d      	ldr	r2, [pc, #52]	; (16610 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x44>)
   165da:	9b01      	ldr	r3, [sp, #4]
   165dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165e0:	1e5a      	subs	r2, r3, #1
   165e2:	490b      	ldr	r1, [pc, #44]	; (16610 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x44>)
   165e4:	9b01      	ldr	r3, [sp, #4]
   165e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   165ea:	4a0a      	ldr	r2, [pc, #40]	; (16614 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x48>)
   165ec:	9b01      	ldr	r3, [sp, #4]
   165ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165f2:	f003 0301 	and.w	r3, r3, #1
   165f6:	2b00      	cmp	r3, #0
   165f8:	d106      	bne.n	16608 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x3c>
   165fa:	4a05      	ldr	r2, [pc, #20]	; (16610 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x44>)
   165fc:	9b01      	ldr	r3, [sp, #4]
   165fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16602:	2b00      	cmp	r3, #0
   16604:	d100      	bne.n	16608 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16606:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16608:	bf00      	nop
   1660a:	b003      	add	sp, #12
   1660c:	f85d fb04 	ldr.w	pc, [sp], #4
   16610:	1fff9880 	.word	0x1fff9880
   16614:	1fff987c 	.word	0x1fff987c

00016618 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12(void)
{
   16618:	b500      	push	{lr}
   1661a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1661c:	f7ea fb42 	bl	ca4 <Sys_GetCoreID>
   16620:	4603      	mov	r3, r0
   16622:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId])
   16624:	4a10      	ldr	r2, [pc, #64]	; (16668 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x50>)
   16626:	9b01      	ldr	r3, [sp, #4]
   16628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1662c:	2b00      	cmp	r3, #0
   1662e:	d10d      	bne.n	1664c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16630:	f7ea f9c4 	bl	9bc <Spi_schm_read_msr>
   16634:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16636:	9b00      	ldr	r3, [sp, #0]
   16638:	f003 0301 	and.w	r3, r3, #1
   1663c:	2b00      	cmp	r3, #0
   1663e:	d100      	bne.n	16642 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16640:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   16642:	490a      	ldr	r1, [pc, #40]	; (1666c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x54>)
   16644:	9b01      	ldr	r3, [sp, #4]
   16646:	9a00      	ldr	r2, [sp, #0]
   16648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId]++;
   1664c:	4a06      	ldr	r2, [pc, #24]	; (16668 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x50>)
   1664e:	9b01      	ldr	r3, [sp, #4]
   16650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16654:	1c5a      	adds	r2, r3, #1
   16656:	4904      	ldr	r1, [pc, #16]	; (16668 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x50>)
   16658:	9b01      	ldr	r3, [sp, #4]
   1665a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1665e:	bf00      	nop
   16660:	b003      	add	sp, #12
   16662:	f85d fb04 	ldr.w	pc, [sp], #4
   16666:	bf00      	nop
   16668:	1fff9888 	.word	0x1fff9888
   1666c:	1fff9884 	.word	0x1fff9884

00016670 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12(void)
{
   16670:	b500      	push	{lr}
   16672:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16674:	f7ea fb16 	bl	ca4 <Sys_GetCoreID>
   16678:	4603      	mov	r3, r0
   1667a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId]--;
   1667c:	4a0d      	ldr	r2, [pc, #52]	; (166b4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x44>)
   1667e:	9b01      	ldr	r3, [sp, #4]
   16680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16684:	1e5a      	subs	r2, r3, #1
   16686:	490b      	ldr	r1, [pc, #44]	; (166b4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x44>)
   16688:	9b01      	ldr	r3, [sp, #4]
   1668a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   1668e:	4a0a      	ldr	r2, [pc, #40]	; (166b8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x48>)
   16690:	9b01      	ldr	r3, [sp, #4]
   16692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16696:	f003 0301 	and.w	r3, r3, #1
   1669a:	2b00      	cmp	r3, #0
   1669c:	d106      	bne.n	166ac <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x3c>
   1669e:	4a05      	ldr	r2, [pc, #20]	; (166b4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x44>)
   166a0:	9b01      	ldr	r3, [sp, #4]
   166a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166a6:	2b00      	cmp	r3, #0
   166a8:	d100      	bne.n	166ac <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   166aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   166ac:	bf00      	nop
   166ae:	b003      	add	sp, #12
   166b0:	f85d fb04 	ldr.w	pc, [sp], #4
   166b4:	1fff9888 	.word	0x1fff9888
   166b8:	1fff9884 	.word	0x1fff9884

000166bc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13(void)
{
   166bc:	b500      	push	{lr}
   166be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   166c0:	f7ea faf0 	bl	ca4 <Sys_GetCoreID>
   166c4:	4603      	mov	r3, r0
   166c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId])
   166c8:	4a10      	ldr	r2, [pc, #64]	; (1670c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x50>)
   166ca:	9b01      	ldr	r3, [sp, #4]
   166cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166d0:	2b00      	cmp	r3, #0
   166d2:	d10d      	bne.n	166f0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   166d4:	f7ea f972 	bl	9bc <Spi_schm_read_msr>
   166d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   166da:	9b00      	ldr	r3, [sp, #0]
   166dc:	f003 0301 	and.w	r3, r3, #1
   166e0:	2b00      	cmp	r3, #0
   166e2:	d100      	bne.n	166e6 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   166e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   166e6:	490a      	ldr	r1, [pc, #40]	; (16710 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x54>)
   166e8:	9b01      	ldr	r3, [sp, #4]
   166ea:	9a00      	ldr	r2, [sp, #0]
   166ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId]++;
   166f0:	4a06      	ldr	r2, [pc, #24]	; (1670c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x50>)
   166f2:	9b01      	ldr	r3, [sp, #4]
   166f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166f8:	1c5a      	adds	r2, r3, #1
   166fa:	4904      	ldr	r1, [pc, #16]	; (1670c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x50>)
   166fc:	9b01      	ldr	r3, [sp, #4]
   166fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16702:	bf00      	nop
   16704:	b003      	add	sp, #12
   16706:	f85d fb04 	ldr.w	pc, [sp], #4
   1670a:	bf00      	nop
   1670c:	1fff9890 	.word	0x1fff9890
   16710:	1fff988c 	.word	0x1fff988c

00016714 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13(void)
{
   16714:	b500      	push	{lr}
   16716:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16718:	f7ea fac4 	bl	ca4 <Sys_GetCoreID>
   1671c:	4603      	mov	r3, r0
   1671e:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId]--;
   16720:	4a0d      	ldr	r2, [pc, #52]	; (16758 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x44>)
   16722:	9b01      	ldr	r3, [sp, #4]
   16724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16728:	1e5a      	subs	r2, r3, #1
   1672a:	490b      	ldr	r1, [pc, #44]	; (16758 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x44>)
   1672c:	9b01      	ldr	r3, [sp, #4]
   1672e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   16732:	4a0a      	ldr	r2, [pc, #40]	; (1675c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x48>)
   16734:	9b01      	ldr	r3, [sp, #4]
   16736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1673a:	f003 0301 	and.w	r3, r3, #1
   1673e:	2b00      	cmp	r3, #0
   16740:	d106      	bne.n	16750 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x3c>
   16742:	4a05      	ldr	r2, [pc, #20]	; (16758 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x44>)
   16744:	9b01      	ldr	r3, [sp, #4]
   16746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1674a:	2b00      	cmp	r3, #0
   1674c:	d100      	bne.n	16750 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1674e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16750:	bf00      	nop
   16752:	b003      	add	sp, #12
   16754:	f85d fb04 	ldr.w	pc, [sp], #4
   16758:	1fff9890 	.word	0x1fff9890
   1675c:	1fff988c 	.word	0x1fff988c

00016760 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14(void)
{
   16760:	b500      	push	{lr}
   16762:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16764:	f7ea fa9e 	bl	ca4 <Sys_GetCoreID>
   16768:	4603      	mov	r3, r0
   1676a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId])
   1676c:	4a10      	ldr	r2, [pc, #64]	; (167b0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x50>)
   1676e:	9b01      	ldr	r3, [sp, #4]
   16770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16774:	2b00      	cmp	r3, #0
   16776:	d10d      	bne.n	16794 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16778:	f7ea f920 	bl	9bc <Spi_schm_read_msr>
   1677c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1677e:	9b00      	ldr	r3, [sp, #0]
   16780:	f003 0301 	and.w	r3, r3, #1
   16784:	2b00      	cmp	r3, #0
   16786:	d100      	bne.n	1678a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16788:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   1678a:	490a      	ldr	r1, [pc, #40]	; (167b4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x54>)
   1678c:	9b01      	ldr	r3, [sp, #4]
   1678e:	9a00      	ldr	r2, [sp, #0]
   16790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId]++;
   16794:	4a06      	ldr	r2, [pc, #24]	; (167b0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x50>)
   16796:	9b01      	ldr	r3, [sp, #4]
   16798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1679c:	1c5a      	adds	r2, r3, #1
   1679e:	4904      	ldr	r1, [pc, #16]	; (167b0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x50>)
   167a0:	9b01      	ldr	r3, [sp, #4]
   167a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   167a6:	bf00      	nop
   167a8:	b003      	add	sp, #12
   167aa:	f85d fb04 	ldr.w	pc, [sp], #4
   167ae:	bf00      	nop
   167b0:	1fff9898 	.word	0x1fff9898
   167b4:	1fff9894 	.word	0x1fff9894

000167b8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14(void)
{
   167b8:	b500      	push	{lr}
   167ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   167bc:	f7ea fa72 	bl	ca4 <Sys_GetCoreID>
   167c0:	4603      	mov	r3, r0
   167c2:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId]--;
   167c4:	4a0d      	ldr	r2, [pc, #52]	; (167fc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x44>)
   167c6:	9b01      	ldr	r3, [sp, #4]
   167c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167cc:	1e5a      	subs	r2, r3, #1
   167ce:	490b      	ldr	r1, [pc, #44]	; (167fc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x44>)
   167d0:	9b01      	ldr	r3, [sp, #4]
   167d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   167d6:	4a0a      	ldr	r2, [pc, #40]	; (16800 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x48>)
   167d8:	9b01      	ldr	r3, [sp, #4]
   167da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167de:	f003 0301 	and.w	r3, r3, #1
   167e2:	2b00      	cmp	r3, #0
   167e4:	d106      	bne.n	167f4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x3c>
   167e6:	4a05      	ldr	r2, [pc, #20]	; (167fc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x44>)
   167e8:	9b01      	ldr	r3, [sp, #4]
   167ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167ee:	2b00      	cmp	r3, #0
   167f0:	d100      	bne.n	167f4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   167f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   167f4:	bf00      	nop
   167f6:	b003      	add	sp, #12
   167f8:	f85d fb04 	ldr.w	pc, [sp], #4
   167fc:	1fff9898 	.word	0x1fff9898
   16800:	1fff9894 	.word	0x1fff9894

00016804 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15(void)
{
   16804:	b500      	push	{lr}
   16806:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16808:	f7ea fa4c 	bl	ca4 <Sys_GetCoreID>
   1680c:	4603      	mov	r3, r0
   1680e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId])
   16810:	4a10      	ldr	r2, [pc, #64]	; (16854 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x50>)
   16812:	9b01      	ldr	r3, [sp, #4]
   16814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16818:	2b00      	cmp	r3, #0
   1681a:	d10d      	bne.n	16838 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1681c:	f7ea f8ce 	bl	9bc <Spi_schm_read_msr>
   16820:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16822:	9b00      	ldr	r3, [sp, #0]
   16824:	f003 0301 	and.w	r3, r3, #1
   16828:	2b00      	cmp	r3, #0
   1682a:	d100      	bne.n	1682e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1682c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   1682e:	490a      	ldr	r1, [pc, #40]	; (16858 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x54>)
   16830:	9b01      	ldr	r3, [sp, #4]
   16832:	9a00      	ldr	r2, [sp, #0]
   16834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId]++;
   16838:	4a06      	ldr	r2, [pc, #24]	; (16854 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x50>)
   1683a:	9b01      	ldr	r3, [sp, #4]
   1683c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16840:	1c5a      	adds	r2, r3, #1
   16842:	4904      	ldr	r1, [pc, #16]	; (16854 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x50>)
   16844:	9b01      	ldr	r3, [sp, #4]
   16846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1684a:	bf00      	nop
   1684c:	b003      	add	sp, #12
   1684e:	f85d fb04 	ldr.w	pc, [sp], #4
   16852:	bf00      	nop
   16854:	1fff98a0 	.word	0x1fff98a0
   16858:	1fff989c 	.word	0x1fff989c

0001685c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15(void)
{
   1685c:	b500      	push	{lr}
   1685e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16860:	f7ea fa20 	bl	ca4 <Sys_GetCoreID>
   16864:	4603      	mov	r3, r0
   16866:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId]--;
   16868:	4a0d      	ldr	r2, [pc, #52]	; (168a0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x44>)
   1686a:	9b01      	ldr	r3, [sp, #4]
   1686c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16870:	1e5a      	subs	r2, r3, #1
   16872:	490b      	ldr	r1, [pc, #44]	; (168a0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x44>)
   16874:	9b01      	ldr	r3, [sp, #4]
   16876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   1687a:	4a0a      	ldr	r2, [pc, #40]	; (168a4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x48>)
   1687c:	9b01      	ldr	r3, [sp, #4]
   1687e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16882:	f003 0301 	and.w	r3, r3, #1
   16886:	2b00      	cmp	r3, #0
   16888:	d106      	bne.n	16898 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x3c>
   1688a:	4a05      	ldr	r2, [pc, #20]	; (168a0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x44>)
   1688c:	9b01      	ldr	r3, [sp, #4]
   1688e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16892:	2b00      	cmp	r3, #0
   16894:	d100      	bne.n	16898 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16896:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16898:	bf00      	nop
   1689a:	b003      	add	sp, #12
   1689c:	f85d fb04 	ldr.w	pc, [sp], #4
   168a0:	1fff98a0 	.word	0x1fff98a0
   168a4:	1fff989c 	.word	0x1fff989c

000168a8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16(void)
{
   168a8:	b500      	push	{lr}
   168aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   168ac:	f7ea f9fa 	bl	ca4 <Sys_GetCoreID>
   168b0:	4603      	mov	r3, r0
   168b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId])
   168b4:	4a10      	ldr	r2, [pc, #64]	; (168f8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x50>)
   168b6:	9b01      	ldr	r3, [sp, #4]
   168b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   168bc:	2b00      	cmp	r3, #0
   168be:	d10d      	bne.n	168dc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   168c0:	f7ea f87c 	bl	9bc <Spi_schm_read_msr>
   168c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   168c6:	9b00      	ldr	r3, [sp, #0]
   168c8:	f003 0301 	and.w	r3, r3, #1
   168cc:	2b00      	cmp	r3, #0
   168ce:	d100      	bne.n	168d2 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   168d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   168d2:	490a      	ldr	r1, [pc, #40]	; (168fc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x54>)
   168d4:	9b01      	ldr	r3, [sp, #4]
   168d6:	9a00      	ldr	r2, [sp, #0]
   168d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId]++;
   168dc:	4a06      	ldr	r2, [pc, #24]	; (168f8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x50>)
   168de:	9b01      	ldr	r3, [sp, #4]
   168e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   168e4:	1c5a      	adds	r2, r3, #1
   168e6:	4904      	ldr	r1, [pc, #16]	; (168f8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x50>)
   168e8:	9b01      	ldr	r3, [sp, #4]
   168ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   168ee:	bf00      	nop
   168f0:	b003      	add	sp, #12
   168f2:	f85d fb04 	ldr.w	pc, [sp], #4
   168f6:	bf00      	nop
   168f8:	1fff98a8 	.word	0x1fff98a8
   168fc:	1fff98a4 	.word	0x1fff98a4

00016900 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16(void)
{
   16900:	b500      	push	{lr}
   16902:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16904:	f7ea f9ce 	bl	ca4 <Sys_GetCoreID>
   16908:	4603      	mov	r3, r0
   1690a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId]--;
   1690c:	4a0d      	ldr	r2, [pc, #52]	; (16944 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x44>)
   1690e:	9b01      	ldr	r3, [sp, #4]
   16910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16914:	1e5a      	subs	r2, r3, #1
   16916:	490b      	ldr	r1, [pc, #44]	; (16944 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x44>)
   16918:	9b01      	ldr	r3, [sp, #4]
   1691a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   1691e:	4a0a      	ldr	r2, [pc, #40]	; (16948 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x48>)
   16920:	9b01      	ldr	r3, [sp, #4]
   16922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16926:	f003 0301 	and.w	r3, r3, #1
   1692a:	2b00      	cmp	r3, #0
   1692c:	d106      	bne.n	1693c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x3c>
   1692e:	4a05      	ldr	r2, [pc, #20]	; (16944 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x44>)
   16930:	9b01      	ldr	r3, [sp, #4]
   16932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16936:	2b00      	cmp	r3, #0
   16938:	d100      	bne.n	1693c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1693a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1693c:	bf00      	nop
   1693e:	b003      	add	sp, #12
   16940:	f85d fb04 	ldr.w	pc, [sp], #4
   16944:	1fff98a8 	.word	0x1fff98a8
   16948:	1fff98a4 	.word	0x1fff98a4

0001694c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17(void)
{
   1694c:	b500      	push	{lr}
   1694e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16950:	f7ea f9a8 	bl	ca4 <Sys_GetCoreID>
   16954:	4603      	mov	r3, r0
   16956:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId])
   16958:	4a10      	ldr	r2, [pc, #64]	; (1699c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x50>)
   1695a:	9b01      	ldr	r3, [sp, #4]
   1695c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16960:	2b00      	cmp	r3, #0
   16962:	d10d      	bne.n	16980 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16964:	f7ea f82a 	bl	9bc <Spi_schm_read_msr>
   16968:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1696a:	9b00      	ldr	r3, [sp, #0]
   1696c:	f003 0301 	and.w	r3, r3, #1
   16970:	2b00      	cmp	r3, #0
   16972:	d100      	bne.n	16976 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16974:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   16976:	490a      	ldr	r1, [pc, #40]	; (169a0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x54>)
   16978:	9b01      	ldr	r3, [sp, #4]
   1697a:	9a00      	ldr	r2, [sp, #0]
   1697c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId]++;
   16980:	4a06      	ldr	r2, [pc, #24]	; (1699c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x50>)
   16982:	9b01      	ldr	r3, [sp, #4]
   16984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16988:	1c5a      	adds	r2, r3, #1
   1698a:	4904      	ldr	r1, [pc, #16]	; (1699c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x50>)
   1698c:	9b01      	ldr	r3, [sp, #4]
   1698e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16992:	bf00      	nop
   16994:	b003      	add	sp, #12
   16996:	f85d fb04 	ldr.w	pc, [sp], #4
   1699a:	bf00      	nop
   1699c:	1fff98b0 	.word	0x1fff98b0
   169a0:	1fff98ac 	.word	0x1fff98ac

000169a4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17(void)
{
   169a4:	b500      	push	{lr}
   169a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   169a8:	f7ea f97c 	bl	ca4 <Sys_GetCoreID>
   169ac:	4603      	mov	r3, r0
   169ae:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId]--;
   169b0:	4a0d      	ldr	r2, [pc, #52]	; (169e8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x44>)
   169b2:	9b01      	ldr	r3, [sp, #4]
   169b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169b8:	1e5a      	subs	r2, r3, #1
   169ba:	490b      	ldr	r1, [pc, #44]	; (169e8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x44>)
   169bc:	9b01      	ldr	r3, [sp, #4]
   169be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   169c2:	4a0a      	ldr	r2, [pc, #40]	; (169ec <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x48>)
   169c4:	9b01      	ldr	r3, [sp, #4]
   169c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169ca:	f003 0301 	and.w	r3, r3, #1
   169ce:	2b00      	cmp	r3, #0
   169d0:	d106      	bne.n	169e0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x3c>
   169d2:	4a05      	ldr	r2, [pc, #20]	; (169e8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x44>)
   169d4:	9b01      	ldr	r3, [sp, #4]
   169d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169da:	2b00      	cmp	r3, #0
   169dc:	d100      	bne.n	169e0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   169de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   169e0:	bf00      	nop
   169e2:	b003      	add	sp, #12
   169e4:	f85d fb04 	ldr.w	pc, [sp], #4
   169e8:	1fff98b0 	.word	0x1fff98b0
   169ec:	1fff98ac 	.word	0x1fff98ac

000169f0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18(void)
{
   169f0:	b500      	push	{lr}
   169f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   169f4:	f7ea f956 	bl	ca4 <Sys_GetCoreID>
   169f8:	4603      	mov	r3, r0
   169fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId])
   169fc:	4a10      	ldr	r2, [pc, #64]	; (16a40 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x50>)
   169fe:	9b01      	ldr	r3, [sp, #4]
   16a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a04:	2b00      	cmp	r3, #0
   16a06:	d10d      	bne.n	16a24 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16a08:	f7e9 ffd8 	bl	9bc <Spi_schm_read_msr>
   16a0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16a0e:	9b00      	ldr	r3, [sp, #0]
   16a10:	f003 0301 	and.w	r3, r3, #1
   16a14:	2b00      	cmp	r3, #0
   16a16:	d100      	bne.n	16a1a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16a18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   16a1a:	490a      	ldr	r1, [pc, #40]	; (16a44 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x54>)
   16a1c:	9b01      	ldr	r3, [sp, #4]
   16a1e:	9a00      	ldr	r2, [sp, #0]
   16a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId]++;
   16a24:	4a06      	ldr	r2, [pc, #24]	; (16a40 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x50>)
   16a26:	9b01      	ldr	r3, [sp, #4]
   16a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a2c:	1c5a      	adds	r2, r3, #1
   16a2e:	4904      	ldr	r1, [pc, #16]	; (16a40 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x50>)
   16a30:	9b01      	ldr	r3, [sp, #4]
   16a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16a36:	bf00      	nop
   16a38:	b003      	add	sp, #12
   16a3a:	f85d fb04 	ldr.w	pc, [sp], #4
   16a3e:	bf00      	nop
   16a40:	1fff98b8 	.word	0x1fff98b8
   16a44:	1fff98b4 	.word	0x1fff98b4

00016a48 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18(void)
{
   16a48:	b500      	push	{lr}
   16a4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16a4c:	f7ea f92a 	bl	ca4 <Sys_GetCoreID>
   16a50:	4603      	mov	r3, r0
   16a52:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId]--;
   16a54:	4a0d      	ldr	r2, [pc, #52]	; (16a8c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x44>)
   16a56:	9b01      	ldr	r3, [sp, #4]
   16a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a5c:	1e5a      	subs	r2, r3, #1
   16a5e:	490b      	ldr	r1, [pc, #44]	; (16a8c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x44>)
   16a60:	9b01      	ldr	r3, [sp, #4]
   16a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   16a66:	4a0a      	ldr	r2, [pc, #40]	; (16a90 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x48>)
   16a68:	9b01      	ldr	r3, [sp, #4]
   16a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a6e:	f003 0301 	and.w	r3, r3, #1
   16a72:	2b00      	cmp	r3, #0
   16a74:	d106      	bne.n	16a84 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x3c>
   16a76:	4a05      	ldr	r2, [pc, #20]	; (16a8c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x44>)
   16a78:	9b01      	ldr	r3, [sp, #4]
   16a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a7e:	2b00      	cmp	r3, #0
   16a80:	d100      	bne.n	16a84 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16a82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16a84:	bf00      	nop
   16a86:	b003      	add	sp, #12
   16a88:	f85d fb04 	ldr.w	pc, [sp], #4
   16a8c:	1fff98b8 	.word	0x1fff98b8
   16a90:	1fff98b4 	.word	0x1fff98b4

00016a94 <Det_Init>:
*
* @requirements   DET008
*
*/
void Det_Init(void)
{
   16a94:	b508      	push	{r3, lr}
    SEGGER_RTT_Init();  //Initializing RTT library.
   16a96:	f7ea faa3 	bl	fe0 <SEGGER_RTT_Init>
}
   16a9a:	bf00      	nop
   16a9c:	bd08      	pop	{r3, pc}

00016a9e <Det_SearchApi>:
 * @param[in] ApiId Api id where error was detected.
 * @return StringPtr Ptr to string of api name.
 * 
 * @note If the Api Id isn´t registered in the hash table it will return NULL; 
 */
const char* Det_SearchApi( uint8 ModuleIndex, uint8 ApiId ) {
   16a9e:	b084      	sub	sp, #16
   16aa0:	4603      	mov	r3, r0
   16aa2:	460a      	mov	r2, r1
   16aa4:	f88d 3007 	strb.w	r3, [sp, #7]
   16aa8:	4613      	mov	r3, r2
   16aaa:	f88d 3006 	strb.w	r3, [sp, #6]
    //local data.
    uint8 i = 0;
   16aae:	2300      	movs	r3, #0
   16ab0:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   16ab4:	2300      	movs	r3, #0
   16ab6:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Apis; i++ ) { //Searching for api.
   16ab8:	2300      	movs	r3, #0
   16aba:	f88d 300f 	strb.w	r3, [sp, #15]
   16abe:	e026      	b.n	16b0e <Det_SearchApi+0x70>
        if ( ModuleStrings_Ptr[ ModuleIndex ].ApiNames[i].ApiId == ApiId ) {
   16ac0:	491b      	ldr	r1, [pc, #108]	; (16b30 <Det_SearchApi+0x92>)
   16ac2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16ac6:	4613      	mov	r3, r2
   16ac8:	005b      	lsls	r3, r3, #1
   16aca:	4413      	add	r3, r2
   16acc:	00db      	lsls	r3, r3, #3
   16ace:	440b      	add	r3, r1
   16ad0:	68da      	ldr	r2, [r3, #12]
   16ad2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16ad6:	00db      	lsls	r3, r3, #3
   16ad8:	4413      	add	r3, r2
   16ada:	781b      	ldrb	r3, [r3, #0]
   16adc:	f89d 2006 	ldrb.w	r2, [sp, #6]
   16ae0:	429a      	cmp	r2, r3
   16ae2:	d10f      	bne.n	16b04 <Det_SearchApi+0x66>
            StringPtr = ModuleStrings_Ptr[ ModuleIndex ].ApiNames[i].ApiName;
   16ae4:	4912      	ldr	r1, [pc, #72]	; (16b30 <Det_SearchApi+0x92>)
   16ae6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16aea:	4613      	mov	r3, r2
   16aec:	005b      	lsls	r3, r3, #1
   16aee:	4413      	add	r3, r2
   16af0:	00db      	lsls	r3, r3, #3
   16af2:	440b      	add	r3, r1
   16af4:	68da      	ldr	r2, [r3, #12]
   16af6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16afa:	00db      	lsls	r3, r3, #3
   16afc:	4413      	add	r3, r2
   16afe:	685b      	ldr	r3, [r3, #4]
   16b00:	9302      	str	r3, [sp, #8]
            break;
   16b02:	e011      	b.n	16b28 <Det_SearchApi+0x8a>
    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Apis; i++ ) { //Searching for api.
   16b04:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16b08:	3301      	adds	r3, #1
   16b0a:	f88d 300f 	strb.w	r3, [sp, #15]
   16b0e:	4908      	ldr	r1, [pc, #32]	; (16b30 <Det_SearchApi+0x92>)
   16b10:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16b14:	4613      	mov	r3, r2
   16b16:	005b      	lsls	r3, r3, #1
   16b18:	4413      	add	r3, r2
   16b1a:	00db      	lsls	r3, r3, #3
   16b1c:	440b      	add	r3, r1
   16b1e:	7a1b      	ldrb	r3, [r3, #8]
   16b20:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16b24:	429a      	cmp	r2, r3
   16b26:	d3cb      	bcc.n	16ac0 <Det_SearchApi+0x22>
        }
    }

    return StringPtr;
   16b28:	9b02      	ldr	r3, [sp, #8]
}
   16b2a:	4618      	mov	r0, r3
   16b2c:	b004      	add	sp, #16
   16b2e:	4770      	bx	lr
   16b30:	000189ec 	.word	0x000189ec

00016b34 <Det_SearchError>:
 * @param[in] ErrorId Error id reported.
 * @return StringPtr Ptr to string of error meaning.
 * 
 * @note If the Error Id isn´t registered in the hash table it will return NULL; 
 */
const char* Det_SearchError( uint8 ModuleIndex, uint8 ErrorId ) {
   16b34:	b084      	sub	sp, #16
   16b36:	4603      	mov	r3, r0
   16b38:	460a      	mov	r2, r1
   16b3a:	f88d 3007 	strb.w	r3, [sp, #7]
   16b3e:	4613      	mov	r3, r2
   16b40:	f88d 3006 	strb.w	r3, [sp, #6]
    //local data.
    uint8 i = 0;
   16b44:	2300      	movs	r3, #0
   16b46:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   16b4a:	2300      	movs	r3, #0
   16b4c:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Errors; i++ ) { //Searching for api.
   16b4e:	2300      	movs	r3, #0
   16b50:	f88d 300f 	strb.w	r3, [sp, #15]
   16b54:	e026      	b.n	16ba4 <Det_SearchError+0x70>
        if ( ModuleStrings_Ptr[ ModuleIndex ].ErrorMeanings[i].ErrorId == ErrorId ) {
   16b56:	491c      	ldr	r1, [pc, #112]	; (16bc8 <Det_SearchError+0x94>)
   16b58:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16b5c:	4613      	mov	r3, r2
   16b5e:	005b      	lsls	r3, r3, #1
   16b60:	4413      	add	r3, r2
   16b62:	00db      	lsls	r3, r3, #3
   16b64:	440b      	add	r3, r1
   16b66:	695a      	ldr	r2, [r3, #20]
   16b68:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16b6c:	00db      	lsls	r3, r3, #3
   16b6e:	4413      	add	r3, r2
   16b70:	781b      	ldrb	r3, [r3, #0]
   16b72:	f89d 2006 	ldrb.w	r2, [sp, #6]
   16b76:	429a      	cmp	r2, r3
   16b78:	d10f      	bne.n	16b9a <Det_SearchError+0x66>
            StringPtr = ModuleStrings_Ptr[ ModuleIndex ].ErrorMeanings[i].ErrorMeaning;
   16b7a:	4913      	ldr	r1, [pc, #76]	; (16bc8 <Det_SearchError+0x94>)
   16b7c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16b80:	4613      	mov	r3, r2
   16b82:	005b      	lsls	r3, r3, #1
   16b84:	4413      	add	r3, r2
   16b86:	00db      	lsls	r3, r3, #3
   16b88:	440b      	add	r3, r1
   16b8a:	695a      	ldr	r2, [r3, #20]
   16b8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16b90:	00db      	lsls	r3, r3, #3
   16b92:	4413      	add	r3, r2
   16b94:	685b      	ldr	r3, [r3, #4]
   16b96:	9302      	str	r3, [sp, #8]
            break;
   16b98:	e011      	b.n	16bbe <Det_SearchError+0x8a>
    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Errors; i++ ) { //Searching for api.
   16b9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16b9e:	3301      	adds	r3, #1
   16ba0:	f88d 300f 	strb.w	r3, [sp, #15]
   16ba4:	4908      	ldr	r1, [pc, #32]	; (16bc8 <Det_SearchError+0x94>)
   16ba6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16baa:	4613      	mov	r3, r2
   16bac:	005b      	lsls	r3, r3, #1
   16bae:	4413      	add	r3, r2
   16bb0:	00db      	lsls	r3, r3, #3
   16bb2:	440b      	add	r3, r1
   16bb4:	7c1b      	ldrb	r3, [r3, #16]
   16bb6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16bba:	429a      	cmp	r2, r3
   16bbc:	d3cb      	bcc.n	16b56 <Det_SearchError+0x22>
        }
    }

    return StringPtr;
   16bbe:	9b02      	ldr	r3, [sp, #8]
}
   16bc0:	4618      	mov	r0, r3
   16bc2:	b004      	add	sp, #16
   16bc4:	4770      	bx	lr
   16bc6:	bf00      	nop
   16bc8:	000189ec 	.word	0x000189ec

00016bcc <Det_GetModuleName>:
 * @param[in] ModuleId Module Id where error was detected.
 * @return StringPtr Pointer to string module name.
 * 
 * @note If the module Id isn´t registered it will return NULL;
 */
const char* Det_GetModuleName( uint16 ModuleId ) {
   16bcc:	b084      	sub	sp, #16
   16bce:	4603      	mov	r3, r0
   16bd0:	f8ad 3006 	strh.w	r3, [sp, #6]
    //local data 
    uint8 i = 0;
   16bd4:	2300      	movs	r3, #0
   16bd6:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   16bda:	2300      	movs	r3, #0
   16bdc:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching module name.
   16bde:	2300      	movs	r3, #0
   16be0:	f88d 300f 	strb.w	r3, [sp, #15]
   16be4:	e01c      	b.n	16c20 <Det_GetModuleName+0x54>
        if ( ModuleStrings_Ptr[i].ModuleId == ModuleId ) {
   16be6:	4912      	ldr	r1, [pc, #72]	; (16c30 <Det_GetModuleName+0x64>)
   16be8:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16bec:	4613      	mov	r3, r2
   16bee:	005b      	lsls	r3, r3, #1
   16bf0:	4413      	add	r3, r2
   16bf2:	00db      	lsls	r3, r3, #3
   16bf4:	440b      	add	r3, r1
   16bf6:	881b      	ldrh	r3, [r3, #0]
   16bf8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16bfc:	429a      	cmp	r2, r3
   16bfe:	d10a      	bne.n	16c16 <Det_GetModuleName+0x4a>
            StringPtr = ModuleStrings_Ptr[i].ModuleName;
   16c00:	490b      	ldr	r1, [pc, #44]	; (16c30 <Det_GetModuleName+0x64>)
   16c02:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16c06:	4613      	mov	r3, r2
   16c08:	005b      	lsls	r3, r3, #1
   16c0a:	4413      	add	r3, r2
   16c0c:	00db      	lsls	r3, r3, #3
   16c0e:	440b      	add	r3, r1
   16c10:	685b      	ldr	r3, [r3, #4]
   16c12:	9302      	str	r3, [sp, #8]
            break;
   16c14:	e008      	b.n	16c28 <Det_GetModuleName+0x5c>
    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching module name.
   16c16:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16c1a:	3301      	adds	r3, #1
   16c1c:	f88d 300f 	strb.w	r3, [sp, #15]
   16c20:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16c24:	2b0a      	cmp	r3, #10
   16c26:	d9de      	bls.n	16be6 <Det_GetModuleName+0x1a>
        }
    }

    return StringPtr;
   16c28:	9b02      	ldr	r3, [sp, #8]
}
   16c2a:	4618      	mov	r0, r3
   16c2c:	b004      	add	sp, #16
   16c2e:	4770      	bx	lr
   16c30:	000189ec 	.word	0x000189ec

00016c34 <Det_GetApiName>:
 * @param[in] ApiId Api Id where error was detected 
 * @return StringPtr Pointer to string Api name.
 * 
 * @note If the Api Id isn´t registered in the hash table it will return NULL;
 */
const char* Det_GetApiName( uint16 ModuleId, uint8 ApiId ) {
   16c34:	b500      	push	{lr}
   16c36:	b085      	sub	sp, #20
   16c38:	4603      	mov	r3, r0
   16c3a:	460a      	mov	r2, r1
   16c3c:	f8ad 3006 	strh.w	r3, [sp, #6]
   16c40:	4613      	mov	r3, r2
   16c42:	f88d 3005 	strb.w	r3, [sp, #5]
    //local data.
    uint8 i = 0;
   16c46:	2300      	movs	r3, #0
   16c48:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   16c4c:	2300      	movs	r3, #0
   16c4e:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   16c50:	2300      	movs	r3, #0
   16c52:	f88d 300f 	strb.w	r3, [sp, #15]
   16c56:	e01b      	b.n	16c90 <Det_GetApiName+0x5c>
        if ( ModuleStrings_Ptr[i].ModuleId == ModuleId ) {
   16c58:	4912      	ldr	r1, [pc, #72]	; (16ca4 <Det_GetApiName+0x70>)
   16c5a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16c5e:	4613      	mov	r3, r2
   16c60:	005b      	lsls	r3, r3, #1
   16c62:	4413      	add	r3, r2
   16c64:	00db      	lsls	r3, r3, #3
   16c66:	440b      	add	r3, r1
   16c68:	881b      	ldrh	r3, [r3, #0]
   16c6a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16c6e:	429a      	cmp	r2, r3
   16c70:	d109      	bne.n	16c86 <Det_GetApiName+0x52>
            StringPtr = Det_SearchApi( i , ApiId ); //Searching Api.
   16c72:	f89d 2005 	ldrb.w	r2, [sp, #5]
   16c76:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16c7a:	4611      	mov	r1, r2
   16c7c:	4618      	mov	r0, r3
   16c7e:	f7ff ff0e 	bl	16a9e <Det_SearchApi>
   16c82:	9002      	str	r0, [sp, #8]
            break;
   16c84:	e008      	b.n	16c98 <Det_GetApiName+0x64>
    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   16c86:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16c8a:	3301      	adds	r3, #1
   16c8c:	f88d 300f 	strb.w	r3, [sp, #15]
   16c90:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16c94:	2b0a      	cmp	r3, #10
   16c96:	d9df      	bls.n	16c58 <Det_GetApiName+0x24>
        }
    }

    return StringPtr;
   16c98:	9b02      	ldr	r3, [sp, #8]
}
   16c9a:	4618      	mov	r0, r3
   16c9c:	b005      	add	sp, #20
   16c9e:	f85d fb04 	ldr.w	pc, [sp], #4
   16ca2:	bf00      	nop
   16ca4:	000189ec 	.word	0x000189ec

00016ca8 <Det_GetErrorMeaning>:
 * @param[in] ErrorId Error Id reported. 
 * @return StringPtr Pointer to string Error meaning.
 * 
 * @note If the Error Id isn´t registered in the hash table it will return NULL;
 */
const char* Det_GetErrorMeaning( uint16 ModuleId, uint8 ErrorId ) {
   16ca8:	b500      	push	{lr}
   16caa:	b085      	sub	sp, #20
   16cac:	4603      	mov	r3, r0
   16cae:	460a      	mov	r2, r1
   16cb0:	f8ad 3006 	strh.w	r3, [sp, #6]
   16cb4:	4613      	mov	r3, r2
   16cb6:	f88d 3005 	strb.w	r3, [sp, #5]
    //local data.
    uint8 i = 0;
   16cba:	2300      	movs	r3, #0
   16cbc:	f88d 300f 	strb.w	r3, [sp, #15]
    const char * StringPtr = NULL_PTR;
   16cc0:	2300      	movs	r3, #0
   16cc2:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   16cc4:	2300      	movs	r3, #0
   16cc6:	f88d 300f 	strb.w	r3, [sp, #15]
   16cca:	e01b      	b.n	16d04 <Det_GetErrorMeaning+0x5c>
        if ( ModuleStrings_Ptr[i].ModuleId == ModuleId ) {
   16ccc:	4912      	ldr	r1, [pc, #72]	; (16d18 <Det_GetErrorMeaning+0x70>)
   16cce:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16cd2:	4613      	mov	r3, r2
   16cd4:	005b      	lsls	r3, r3, #1
   16cd6:	4413      	add	r3, r2
   16cd8:	00db      	lsls	r3, r3, #3
   16cda:	440b      	add	r3, r1
   16cdc:	881b      	ldrh	r3, [r3, #0]
   16cde:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16ce2:	429a      	cmp	r2, r3
   16ce4:	d109      	bne.n	16cfa <Det_GetErrorMeaning+0x52>
            StringPtr = Det_SearchError( i, ErrorId );
   16ce6:	f89d 2005 	ldrb.w	r2, [sp, #5]
   16cea:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16cee:	4611      	mov	r1, r2
   16cf0:	4618      	mov	r0, r3
   16cf2:	f7ff ff1f 	bl	16b34 <Det_SearchError>
   16cf6:	9002      	str	r0, [sp, #8]
            break;
   16cf8:	e008      	b.n	16d0c <Det_GetErrorMeaning+0x64>
    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   16cfa:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16cfe:	3301      	adds	r3, #1
   16d00:	f88d 300f 	strb.w	r3, [sp, #15]
   16d04:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16d08:	2b0a      	cmp	r3, #10
   16d0a:	d9df      	bls.n	16ccc <Det_GetErrorMeaning+0x24>
        }
    }

    return StringPtr;
   16d0c:	9b02      	ldr	r3, [sp, #8]
}
   16d0e:	4618      	mov	r0, r3
   16d10:	b005      	add	sp, #20
   16d12:	f85d fb04 	ldr.w	pc, [sp], #4
   16d16:	bf00      	nop
   16d18:	000189ec 	.word	0x000189ec

00016d1c <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
   16d1c:	b510      	push	{r4, lr}
   16d1e:	b088      	sub	sp, #32
   16d20:	4604      	mov	r4, r0
   16d22:	4608      	mov	r0, r1
   16d24:	4611      	mov	r1, r2
   16d26:	461a      	mov	r2, r3
   16d28:	4623      	mov	r3, r4
   16d2a:	f8ad 300e 	strh.w	r3, [sp, #14]
   16d2e:	4603      	mov	r3, r0
   16d30:	f88d 300d 	strb.w	r3, [sp, #13]
   16d34:	460b      	mov	r3, r1
   16d36:	f88d 300c 	strb.w	r3, [sp, #12]
   16d3a:	4613      	mov	r3, r2
   16d3c:	f88d 300b 	strb.w	r3, [sp, #11]
    //local data.
    const char* Strings_error[3]; //Pointer to strings for the error message.

    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16d40:	f7e9 ffb0 	bl	ca4 <Sys_GetCoreID>
   16d44:	4603      	mov	r3, r0
   16d46:	9307      	str	r3, [sp, #28]

    Det_ModuleId[u32CoreId] = ModuleId;
   16d48:	4921      	ldr	r1, [pc, #132]	; (16dd0 <Det_ReportError+0xb4>)
   16d4a:	9b07      	ldr	r3, [sp, #28]
   16d4c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   16d50:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
   16d54:	4a1f      	ldr	r2, [pc, #124]	; (16dd4 <Det_ReportError+0xb8>)
   16d56:	9b07      	ldr	r3, [sp, #28]
   16d58:	4413      	add	r3, r2
   16d5a:	f89d 200d 	ldrb.w	r2, [sp, #13]
   16d5e:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
   16d60:	4a1d      	ldr	r2, [pc, #116]	; (16dd8 <Det_ReportError+0xbc>)
   16d62:	9b07      	ldr	r3, [sp, #28]
   16d64:	4413      	add	r3, r2
   16d66:	f89d 200c 	ldrb.w	r2, [sp, #12]
   16d6a:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
   16d6c:	4a1b      	ldr	r2, [pc, #108]	; (16ddc <Det_ReportError+0xc0>)
   16d6e:	9b07      	ldr	r3, [sp, #28]
   16d70:	4413      	add	r3, r2
   16d72:	f89d 200b 	ldrb.w	r2, [sp, #11]
   16d76:	701a      	strb	r2, [r3, #0]

    //Obtaining strings for error message.
    Strings_error[0] = Det_GetModuleName( ModuleId );
   16d78:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   16d7c:	4618      	mov	r0, r3
   16d7e:	f7ff ff25 	bl	16bcc <Det_GetModuleName>
   16d82:	4603      	mov	r3, r0
   16d84:	9304      	str	r3, [sp, #16]
    Strings_error[1] = Det_GetApiName( ModuleId, ApiId );
   16d86:	f89d 200c 	ldrb.w	r2, [sp, #12]
   16d8a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   16d8e:	4611      	mov	r1, r2
   16d90:	4618      	mov	r0, r3
   16d92:	f7ff ff4f 	bl	16c34 <Det_GetApiName>
   16d96:	4603      	mov	r3, r0
   16d98:	9305      	str	r3, [sp, #20]
    Strings_error[2] = Det_GetErrorMeaning( ModuleId, ErrorId );
   16d9a:	f89d 200b 	ldrb.w	r2, [sp, #11]
   16d9e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   16da2:	4611      	mov	r1, r2
   16da4:	4618      	mov	r0, r3
   16da6:	f7ff ff7f 	bl	16ca8 <Det_GetErrorMeaning>
   16daa:	4603      	mov	r3, r0
   16dac:	9306      	str	r3, [sp, #24]

    SEGGER_RTT_printf( 0, "Error: Error in %s in function %s with the instance %d, %s\n", 
   16dae:	9904      	ldr	r1, [sp, #16]
   16db0:	9805      	ldr	r0, [sp, #20]
   16db2:	f89d 300d 	ldrb.w	r3, [sp, #13]
   16db6:	9a06      	ldr	r2, [sp, #24]
   16db8:	9201      	str	r2, [sp, #4]
   16dba:	9300      	str	r3, [sp, #0]
   16dbc:	4603      	mov	r3, r0
   16dbe:	460a      	mov	r2, r1
   16dc0:	4907      	ldr	r1, [pc, #28]	; (16de0 <Det_ReportError+0xc4>)
   16dc2:	2000      	movs	r0, #0
   16dc4:	f7ea fc74 	bl	16b0 <SEGGER_RTT_printf>
    Strings_error[0], Strings_error[1], InstanceId, Strings_error[2] );

    return E_OK;
   16dc8:	2300      	movs	r3, #0
}
   16dca:	4618      	mov	r0, r3
   16dcc:	b008      	add	sp, #32
   16dce:	bd10      	pop	{r4, pc}
   16dd0:	1fff98e4 	.word	0x1fff98e4
   16dd4:	1fff98bc 	.word	0x1fff98bc
   16dd8:	1fff98c0 	.word	0x1fff98c0
   16ddc:	1fff98c4 	.word	0x1fff98c4
   16de0:	00017dd4 	.word	0x00017dd4

00016de4 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
   16de4:	b510      	push	{r4, lr}
   16de6:	b084      	sub	sp, #16
   16de8:	4604      	mov	r4, r0
   16dea:	4608      	mov	r0, r1
   16dec:	4611      	mov	r1, r2
   16dee:	461a      	mov	r2, r3
   16df0:	4623      	mov	r3, r4
   16df2:	f8ad 3006 	strh.w	r3, [sp, #6]
   16df6:	4603      	mov	r3, r0
   16df8:	f88d 3005 	strb.w	r3, [sp, #5]
   16dfc:	460b      	mov	r3, r1
   16dfe:	f88d 3004 	strb.w	r3, [sp, #4]
   16e02:	4613      	mov	r3, r2
   16e04:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16e08:	f7e9 ff4c 	bl	ca4 <Sys_GetCoreID>
   16e0c:	4603      	mov	r3, r0
   16e0e:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
   16e10:	490d      	ldr	r1, [pc, #52]	; (16e48 <Det_ReportRuntimeError+0x64>)
   16e12:	9b03      	ldr	r3, [sp, #12]
   16e14:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16e18:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
   16e1c:	4a0b      	ldr	r2, [pc, #44]	; (16e4c <Det_ReportRuntimeError+0x68>)
   16e1e:	9b03      	ldr	r3, [sp, #12]
   16e20:	4413      	add	r3, r2
   16e22:	f89d 2005 	ldrb.w	r2, [sp, #5]
   16e26:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
   16e28:	4a09      	ldr	r2, [pc, #36]	; (16e50 <Det_ReportRuntimeError+0x6c>)
   16e2a:	9b03      	ldr	r3, [sp, #12]
   16e2c:	4413      	add	r3, r2
   16e2e:	f89d 2004 	ldrb.w	r2, [sp, #4]
   16e32:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
   16e34:	4a07      	ldr	r2, [pc, #28]	; (16e54 <Det_ReportRuntimeError+0x70>)
   16e36:	9b03      	ldr	r3, [sp, #12]
   16e38:	4413      	add	r3, r2
   16e3a:	f89d 2003 	ldrb.w	r2, [sp, #3]
   16e3e:	701a      	strb	r2, [r3, #0]

    return E_OK;
   16e40:	2300      	movs	r3, #0
}
   16e42:	4618      	mov	r0, r3
   16e44:	b004      	add	sp, #16
   16e46:	bd10      	pop	{r4, pc}
   16e48:	1fff98e8 	.word	0x1fff98e8
   16e4c:	1fff98c8 	.word	0x1fff98c8
   16e50:	1fff98cc 	.word	0x1fff98cc
   16e54:	1fff98d0 	.word	0x1fff98d0

00016e58 <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
   16e58:	b510      	push	{r4, lr}
   16e5a:	b084      	sub	sp, #16
   16e5c:	4604      	mov	r4, r0
   16e5e:	4608      	mov	r0, r1
   16e60:	4611      	mov	r1, r2
   16e62:	461a      	mov	r2, r3
   16e64:	4623      	mov	r3, r4
   16e66:	f8ad 3006 	strh.w	r3, [sp, #6]
   16e6a:	4603      	mov	r3, r0
   16e6c:	f88d 3005 	strb.w	r3, [sp, #5]
   16e70:	460b      	mov	r3, r1
   16e72:	f88d 3004 	strb.w	r3, [sp, #4]
   16e76:	4613      	mov	r3, r2
   16e78:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16e7c:	f7e9 ff12 	bl	ca4 <Sys_GetCoreID>
   16e80:	4603      	mov	r3, r0
   16e82:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
   16e84:	490d      	ldr	r1, [pc, #52]	; (16ebc <Det_ReportTransientFault+0x64>)
   16e86:	9b03      	ldr	r3, [sp, #12]
   16e88:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16e8c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
   16e90:	4a0b      	ldr	r2, [pc, #44]	; (16ec0 <Det_ReportTransientFault+0x68>)
   16e92:	9b03      	ldr	r3, [sp, #12]
   16e94:	4413      	add	r3, r2
   16e96:	f89d 2005 	ldrb.w	r2, [sp, #5]
   16e9a:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
   16e9c:	4a09      	ldr	r2, [pc, #36]	; (16ec4 <Det_ReportTransientFault+0x6c>)
   16e9e:	9b03      	ldr	r3, [sp, #12]
   16ea0:	4413      	add	r3, r2
   16ea2:	f89d 2004 	ldrb.w	r2, [sp, #4]
   16ea6:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
   16ea8:	4a07      	ldr	r2, [pc, #28]	; (16ec8 <Det_ReportTransientFault+0x70>)
   16eaa:	9b03      	ldr	r3, [sp, #12]
   16eac:	4413      	add	r3, r2
   16eae:	f89d 2003 	ldrb.w	r2, [sp, #3]
   16eb2:	701a      	strb	r2, [r3, #0]

    return E_OK;
   16eb4:	2300      	movs	r3, #0
}
   16eb6:	4618      	mov	r0, r3
   16eb8:	b004      	add	sp, #16
   16eba:	bd10      	pop	{r4, pc}
   16ebc:	1fff98e0 	.word	0x1fff98e0
   16ec0:	1fff98d4 	.word	0x1fff98d4
   16ec4:	1fff98d8 	.word	0x1fff98d8
   16ec8:	1fff98dc 	.word	0x1fff98dc

00016ecc <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
   16ecc:	bf00      	nop
   16ece:	4770      	bx	lr

00016ed0 <CanIf_Init>:
 * @brief This function initialices the CanIf Driver.
 * 
 * @param ConfigPtr Pointer to driver control structure. 
 */
void CanIf_Init(const CanIf_ConfigType * ConfigPtr)
{
   16ed0:	b082      	sub	sp, #8
   16ed2:	9001      	str	r0, [sp, #4]
    #if (STD_ON == CANIF_PRECOMPILE_SUPPORT)
    CanIf_ConfigPtr = &CanIf_Config;
    (void)ConfigPtr;
    #else
    CanIf_ConfigPtr = ConfigPtr;
   16ed4:	4a02      	ldr	r2, [pc, #8]	; (16ee0 <CanIf_Init+0x10>)
   16ed6:	9b01      	ldr	r3, [sp, #4]
   16ed8:	6013      	str	r3, [r2, #0]
    #endif
}
   16eda:	bf00      	nop
   16edc:	b002      	add	sp, #8
   16ede:	4770      	bx	lr
   16ee0:	1fff98ec 	.word	0x1fff98ec

00016ee4 <CanIf_Transmit>:
Std_ReturnType CanIf_Transmit
(
    PduIdType CanTxPduId,
    const PduInfoType * PduInfoPtr
)
{
   16ee4:	b500      	push	{lr}
   16ee6:	b08b      	sub	sp, #44	; 0x2c
   16ee8:	4603      	mov	r3, r0
   16eea:	9100      	str	r1, [sp, #0]
   16eec:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType RetVal = E_NOT_OK;
   16ef0:	2301      	movs	r3, #1
   16ef2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    Can_HwHandleType CanHth = 0U;
   16ef6:	2300      	movs	r3, #0
   16ef8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    Can_PduType PduInfo;
    const CanIf_TxPduType * TxPduInfo = NULL_PTR;
   16efc:	2300      	movs	r3, #0
   16efe:	9308      	str	r3, [sp, #32]
    uint8 CanIfControllerId = 0U;
   16f00:	2300      	movs	r3, #0
   16f02:	f88d 301f 	strb.w	r3, [sp, #31]
    const CanIf_CtrlPCConfigType * CanIfController = NULL_PTR;
   16f06:	2300      	movs	r3, #0
   16f08:	9306      	str	r3, [sp, #24]

    if (NULL_PTR != CanIf_ConfigPtr)
   16f0a:	4b31      	ldr	r3, [pc, #196]	; (16fd0 <CanIf_Transmit+0xec>)
   16f0c:	681b      	ldr	r3, [r3, #0]
   16f0e:	2b00      	cmp	r3, #0
   16f10:	d057      	beq.n	16fc2 <CanIf_Transmit+0xde>
    {
        if (CanTxPduId < (CanIf_ConfigPtr->NumTxPdu))
   16f12:	4b2f      	ldr	r3, [pc, #188]	; (16fd0 <CanIf_Transmit+0xec>)
   16f14:	681b      	ldr	r3, [r3, #0]
   16f16:	785b      	ldrb	r3, [r3, #1]
   16f18:	b29b      	uxth	r3, r3
   16f1a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16f1e:	429a      	cmp	r2, r3
   16f20:	d24f      	bcs.n	16fc2 <CanIf_Transmit+0xde>
        {
            TxPduInfo = &CanIf_ConfigPtr->CanIf_TxPduConfigPtr[CanTxPduId];
   16f22:	4b2b      	ldr	r3, [pc, #172]	; (16fd0 <CanIf_Transmit+0xec>)
   16f24:	681b      	ldr	r3, [r3, #0]
   16f26:	68d9      	ldr	r1, [r3, #12]
   16f28:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16f2c:	4613      	mov	r3, r2
   16f2e:	009b      	lsls	r3, r3, #2
   16f30:	4413      	add	r3, r2
   16f32:	009b      	lsls	r3, r3, #2
   16f34:	440b      	add	r3, r1
   16f36:	9308      	str	r3, [sp, #32]
            CanIfControllerId = TxPduInfo->CanIfCtrlId;
   16f38:	9b08      	ldr	r3, [sp, #32]
   16f3a:	7b9b      	ldrb	r3, [r3, #14]
   16f3c:	f88d 301f 	strb.w	r3, [sp, #31]
            CanIfController = &CanIf_PCConfig.CanIfCtrlConfigPtr[CanIfControllerId];
   16f40:	4b24      	ldr	r3, [pc, #144]	; (16fd4 <CanIf_Transmit+0xf0>)
   16f42:	685a      	ldr	r2, [r3, #4]
   16f44:	f89d 301f 	ldrb.w	r3, [sp, #31]
   16f48:	00db      	lsls	r3, r3, #3
   16f4a:	4413      	add	r3, r2
   16f4c:	9306      	str	r3, [sp, #24]

            CanHth = TxPduInfo->CanHth;
   16f4e:	9b08      	ldr	r3, [sp, #32]
   16f50:	899b      	ldrh	r3, [r3, #12]
   16f52:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24

            PduInfo.id = TxPduInfo->CanId;
   16f56:	9b08      	ldr	r3, [sp, #32]
   16f58:	685b      	ldr	r3, [r3, #4]
   16f5a:	9303      	str	r3, [sp, #12]
            /* Convert Id by adding two most significant bits specify the frame type */
            switch (TxPduInfo->CanFrameType)
   16f5c:	9b08      	ldr	r3, [sp, #32]
   16f5e:	689b      	ldr	r3, [r3, #8]
   16f60:	2b03      	cmp	r3, #3
   16f62:	d010      	beq.n	16f86 <CanIf_Transmit+0xa2>
   16f64:	2b03      	cmp	r3, #3
   16f66:	d813      	bhi.n	16f90 <CanIf_Transmit+0xac>
   16f68:	2b00      	cmp	r3, #0
   16f6a:	d002      	beq.n	16f72 <CanIf_Transmit+0x8e>
   16f6c:	2b01      	cmp	r3, #1
   16f6e:	d005      	beq.n	16f7c <CanIf_Transmit+0x98>
                    PduInfo.id |= 0x40000000U;
                    break;
                }
                default:
                {
                    break;
   16f70:	e00e      	b.n	16f90 <CanIf_Transmit+0xac>
                    PduInfo.id |= 0x80000000U;
   16f72:	9b03      	ldr	r3, [sp, #12]
   16f74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   16f78:	9303      	str	r3, [sp, #12]
                    break;
   16f7a:	e00a      	b.n	16f92 <CanIf_Transmit+0xae>
                    PduInfo.id |= 0xC0000000U;
   16f7c:	9b03      	ldr	r3, [sp, #12]
   16f7e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   16f82:	9303      	str	r3, [sp, #12]
                    break;
   16f84:	e005      	b.n	16f92 <CanIf_Transmit+0xae>
                    PduInfo.id |= 0x40000000U;
   16f86:	9b03      	ldr	r3, [sp, #12]
   16f88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   16f8c:	9303      	str	r3, [sp, #12]
                    break;
   16f8e:	e000      	b.n	16f92 <CanIf_Transmit+0xae>
                    break;
   16f90:	bf00      	nop
                }
            }
            
            PduInfo.length = (uint8)(PduInfoPtr->SduLength);
   16f92:	9b00      	ldr	r3, [sp, #0]
   16f94:	689b      	ldr	r3, [r3, #8]
   16f96:	b2db      	uxtb	r3, r3
   16f98:	f88d 3012 	strb.w	r3, [sp, #18]
            PduInfo.sdu = PduInfoPtr->SduDataPtr;
   16f9c:	9b00      	ldr	r3, [sp, #0]
   16f9e:	681b      	ldr	r3, [r3, #0]
   16fa0:	9305      	str	r3, [sp, #20]
            PduInfo.swPduHandle = CanTxPduId;
   16fa2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   16fa6:	f8ad 3010 	strh.w	r3, [sp, #16]

            RetVal = CanIfController->CanDrvConfigPtr->CanApi->CanWrite(CanHth, &PduInfo); 
   16faa:	9b06      	ldr	r3, [sp, #24]
   16fac:	685b      	ldr	r3, [r3, #4]
   16fae:	685b      	ldr	r3, [r3, #4]
   16fb0:	681b      	ldr	r3, [r3, #0]
   16fb2:	a903      	add	r1, sp, #12
   16fb4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   16fb8:	4610      	mov	r0, r2
   16fba:	4798      	blx	r3
   16fbc:	4603      	mov	r3, r0
   16fbe:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
    }
    return RetVal;
   16fc2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
   16fc6:	4618      	mov	r0, r3
   16fc8:	b00b      	add	sp, #44	; 0x2c
   16fca:	f85d fb04 	ldr.w	pc, [sp], #4
   16fce:	bf00      	nop
   16fd0:	1fff98ec 	.word	0x1fff98ec
   16fd4:	00018b2c 	.word	0x00018b2c

00016fd8 <CanIf_TxConfirmation>:

void CanIf_TxConfirmation
(
    PduIdType CanTxPduId
)
{
   16fd8:	b500      	push	{lr}
   16fda:	b085      	sub	sp, #20
   16fdc:	4603      	mov	r3, r0
   16fde:	f8ad 3006 	strh.w	r3, [sp, #6]
    PduIdType UserPduId;
    const CanIf_TxPduType * TxPduInfo = NULL_PTR;
   16fe2:	2300      	movs	r3, #0
   16fe4:	9303      	str	r3, [sp, #12]

    if (NULL_PTR != CanIf_ConfigPtr)
   16fe6:	4b15      	ldr	r3, [pc, #84]	; (1703c <CanIf_TxConfirmation+0x64>)
   16fe8:	681b      	ldr	r3, [r3, #0]
   16fea:	2b00      	cmp	r3, #0
   16fec:	d021      	beq.n	17032 <CanIf_TxConfirmation+0x5a>
    {
        if (CanTxPduId < (CanIf_ConfigPtr->NumTxPdu))
   16fee:	4b13      	ldr	r3, [pc, #76]	; (1703c <CanIf_TxConfirmation+0x64>)
   16ff0:	681b      	ldr	r3, [r3, #0]
   16ff2:	785b      	ldrb	r3, [r3, #1]
   16ff4:	b29b      	uxth	r3, r3
   16ff6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16ffa:	429a      	cmp	r2, r3
   16ffc:	d219      	bcs.n	17032 <CanIf_TxConfirmation+0x5a>
        {
            TxPduInfo = &CanIf_ConfigPtr->CanIf_TxPduConfigPtr[CanTxPduId];
   16ffe:	4b0f      	ldr	r3, [pc, #60]	; (1703c <CanIf_TxConfirmation+0x64>)
   17000:	681b      	ldr	r3, [r3, #0]
   17002:	68d9      	ldr	r1, [r3, #12]
   17004:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   17008:	4613      	mov	r3, r2
   1700a:	009b      	lsls	r3, r3, #2
   1700c:	4413      	add	r3, r2
   1700e:	009b      	lsls	r3, r3, #2
   17010:	440b      	add	r3, r1
   17012:	9303      	str	r3, [sp, #12]

            if (NULL_PTR != TxPduInfo->UserTxConfirmation)
   17014:	9b03      	ldr	r3, [sp, #12]
   17016:	691b      	ldr	r3, [r3, #16]
   17018:	2b00      	cmp	r3, #0
   1701a:	d00a      	beq.n	17032 <CanIf_TxConfirmation+0x5a>
            {
                UserPduId = TxPduInfo->PduId;
   1701c:	9b03      	ldr	r3, [sp, #12]
   1701e:	881b      	ldrh	r3, [r3, #0]
   17020:	f8ad 300a 	strh.w	r3, [sp, #10]
                TxPduInfo->UserTxConfirmation(UserPduId, E_OK);
   17024:	9b03      	ldr	r3, [sp, #12]
   17026:	691b      	ldr	r3, [r3, #16]
   17028:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1702c:	2100      	movs	r1, #0
   1702e:	4610      	mov	r0, r2
   17030:	4798      	blx	r3
            }
        }
    }
}
   17032:	bf00      	nop
   17034:	b005      	add	sp, #20
   17036:	f85d fb04 	ldr.w	pc, [sp], #4
   1703a:	bf00      	nop
   1703c:	1fff98ec 	.word	0x1fff98ec

00017040 <CanIf_RxIndication>:
void CanIf_RxIndication
(
    const Can_HwType * Mailbox,
    const PduInfoType * PduInfoPtr
)
{
   17040:	b500      	push	{lr}
   17042:	b089      	sub	sp, #36	; 0x24
   17044:	9001      	str	r0, [sp, #4]
   17046:	9100      	str	r1, [sp, #0]
    PduIdType UserPduId = 0U;
   17048:	2300      	movs	r3, #0
   1704a:	f8ad 301e 	strh.w	r3, [sp, #30]
    PduInfoType PduInfo;
    const CanIf_RxPduType * RxPduInfo = NULL_PTR;
   1704e:	2300      	movs	r3, #0
   17050:	9306      	str	r3, [sp, #24]
    uint8 CanDrvId = 0U;
   17052:	2300      	movs	r3, #0
   17054:	f88d 3017 	strb.w	r3, [sp, #23]

    if (NULL_PTR != CanIf_ConfigPtr)
   17058:	4b2c      	ldr	r3, [pc, #176]	; (1710c <CanIf_RxIndication+0xcc>)
   1705a:	681b      	ldr	r3, [r3, #0]
   1705c:	2b00      	cmp	r3, #0
   1705e:	d050      	beq.n	17102 <CanIf_RxIndication+0xc2>
    {
        if ((Mailbox->ControllerId) < (CanIf_PCConfig.NumOfCtrl))
   17060:	9b01      	ldr	r3, [sp, #4]
   17062:	799a      	ldrb	r2, [r3, #6]
   17064:	4b2a      	ldr	r3, [pc, #168]	; (17110 <CanIf_RxIndication+0xd0>)
   17066:	781b      	ldrb	r3, [r3, #0]
   17068:	429a      	cmp	r2, r3
   1706a:	d24a      	bcs.n	17102 <CanIf_RxIndication+0xc2>
        {
            if ((Mailbox->Hoh) < (CanIf_PCConfig.CanIfCtrlConfigPtr[Mailbox->ControllerId].CanDrvConfigPtr->NumCanHoh))
   1706c:	9b01      	ldr	r3, [sp, #4]
   1706e:	889a      	ldrh	r2, [r3, #4]
   17070:	4b27      	ldr	r3, [pc, #156]	; (17110 <CanIf_RxIndication+0xd0>)
   17072:	6859      	ldr	r1, [r3, #4]
   17074:	9b01      	ldr	r3, [sp, #4]
   17076:	799b      	ldrb	r3, [r3, #6]
   17078:	00db      	lsls	r3, r3, #3
   1707a:	440b      	add	r3, r1
   1707c:	685b      	ldr	r3, [r3, #4]
   1707e:	885b      	ldrh	r3, [r3, #2]
   17080:	429a      	cmp	r2, r3
   17082:	d23e      	bcs.n	17102 <CanIf_RxIndication+0xc2>
            {
                CanDrvId = CanIf_PCConfig.CanIfCtrlConfigPtr[Mailbox->ControllerId].CanDrvConfigPtr->CanDrvId;
   17084:	4b22      	ldr	r3, [pc, #136]	; (17110 <CanIf_RxIndication+0xd0>)
   17086:	685a      	ldr	r2, [r3, #4]
   17088:	9b01      	ldr	r3, [sp, #4]
   1708a:	799b      	ldrb	r3, [r3, #6]
   1708c:	00db      	lsls	r3, r3, #3
   1708e:	4413      	add	r3, r2
   17090:	685b      	ldr	r3, [r3, #4]
   17092:	781b      	ldrb	r3, [r3, #0]
   17094:	f88d 3017 	strb.w	r3, [sp, #23]
                RxPduInfo = CanIf_ConfigPtr->CanDrvConfigPtr[CanDrvId]->HohToRxPduMappingPtr[Mailbox->Hoh];
   17098:	4b1c      	ldr	r3, [pc, #112]	; (1710c <CanIf_RxIndication+0xcc>)
   1709a:	681b      	ldr	r3, [r3, #0]
   1709c:	685a      	ldr	r2, [r3, #4]
   1709e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   170a2:	009b      	lsls	r3, r3, #2
   170a4:	4413      	add	r3, r2
   170a6:	681b      	ldr	r3, [r3, #0]
   170a8:	681a      	ldr	r2, [r3, #0]
   170aa:	9b01      	ldr	r3, [sp, #4]
   170ac:	889b      	ldrh	r3, [r3, #4]
   170ae:	009b      	lsls	r3, r3, #2
   170b0:	4413      	add	r3, r2
   170b2:	681b      	ldr	r3, [r3, #0]
   170b4:	9306      	str	r3, [sp, #24]
                
                /* Will discard the Can HOH if it was not referred by any CanIf RxPDU */
                if (NULL_PTR != RxPduInfo)
   170b6:	9b06      	ldr	r3, [sp, #24]
   170b8:	2b00      	cmp	r3, #0
   170ba:	d022      	beq.n	17102 <CanIf_RxIndication+0xc2>
                {
                    if (NULL_PTR != RxPduInfo->UserRxIndication)
   170bc:	9b06      	ldr	r3, [sp, #24]
   170be:	689b      	ldr	r3, [r3, #8]
   170c0:	2b00      	cmp	r3, #0
   170c2:	d01e      	beq.n	17102 <CanIf_RxIndication+0xc2>
                    {
                        UserPduId = RxPduInfo->PduId;
   170c4:	9b06      	ldr	r3, [sp, #24]
   170c6:	881b      	ldrh	r3, [r3, #0]
   170c8:	f8ad 301e 	strh.w	r3, [sp, #30]
                        if ((TRUE == RxPduInfo->PduLengthCheck) && (PduInfoPtr->SduLength > (RxPduInfo->PduLength)))
   170cc:	9b06      	ldr	r3, [sp, #24]
   170ce:	789b      	ldrb	r3, [r3, #2]
   170d0:	2b00      	cmp	r3, #0
   170d2:	d009      	beq.n	170e8 <CanIf_RxIndication+0xa8>
   170d4:	9b00      	ldr	r3, [sp, #0]
   170d6:	689b      	ldr	r3, [r3, #8]
   170d8:	9a06      	ldr	r2, [sp, #24]
   170da:	8892      	ldrh	r2, [r2, #4]
   170dc:	4293      	cmp	r3, r2
   170de:	d903      	bls.n	170e8 <CanIf_RxIndication+0xa8>
                        {
                            PduInfo.SduLength = RxPduInfo->PduLength; /* Truncates exceeded data as configured on GUI */
   170e0:	9b06      	ldr	r3, [sp, #24]
   170e2:	889b      	ldrh	r3, [r3, #4]
   170e4:	9304      	str	r3, [sp, #16]
   170e6:	e002      	b.n	170ee <CanIf_RxIndication+0xae>
                        }
                        else
                        {
                            PduInfo.SduLength = PduInfoPtr->SduLength;
   170e8:	9b00      	ldr	r3, [sp, #0]
   170ea:	689b      	ldr	r3, [r3, #8]
   170ec:	9304      	str	r3, [sp, #16]
                        }
                        PduInfo.SduDataPtr = PduInfoPtr->SduDataPtr;
   170ee:	9b00      	ldr	r3, [sp, #0]
   170f0:	681b      	ldr	r3, [r3, #0]
   170f2:	9302      	str	r3, [sp, #8]
                        RxPduInfo->UserRxIndication(UserPduId, &PduInfo);
   170f4:	9b06      	ldr	r3, [sp, #24]
   170f6:	689b      	ldr	r3, [r3, #8]
   170f8:	a902      	add	r1, sp, #8
   170fa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   170fe:	4610      	mov	r0, r2
   17100:	4798      	blx	r3
                    }
                }
            }
        }
    }
}
   17102:	bf00      	nop
   17104:	b009      	add	sp, #36	; 0x24
   17106:	f85d fb04 	ldr.w	pc, [sp], #4
   1710a:	bf00      	nop
   1710c:	1fff98ec 	.word	0x1fff98ec
   17110:	00018b2c 	.word	0x00018b2c

00017114 <CanIf_ControllerModeIndication>:
void CanIf_ControllerModeIndication
( 
    uint8 ControllerId, 
    Can_ControllerStateType ControllerMode 
)
{
   17114:	b082      	sub	sp, #8
   17116:	4603      	mov	r3, r0
   17118:	9100      	str	r1, [sp, #0]
   1711a:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId; 
    (void)ControllerMode;
}
   1711e:	bf00      	nop
   17120:	b002      	add	sp, #8
   17122:	4770      	bx	lr

00017124 <CanIf_ControllerBusOff>:

void CanIf_ControllerBusOff
(
    uint8 ControllerId
)
{
   17124:	b082      	sub	sp, #8
   17126:	4603      	mov	r3, r0
   17128:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
}
   1712c:	bf00      	nop
   1712e:	b002      	add	sp, #8
   17130:	4770      	bx	lr

00017132 <CanIf_SetControllerMode>:
 * 
 * @param Controller CanIf controller ID.
 * @param Transition Desired state.
 * @return RetVal Status of the operation.
 */
Std_ReturnType CanIf_SetControllerMode( uint8 Controller, Can_ControllerStateType Transition ) {
   17132:	b500      	push	{lr}
   17134:	b087      	sub	sp, #28
   17136:	4603      	mov	r3, r0
   17138:	9100      	str	r1, [sp, #0]
   1713a:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   1713e:	2301      	movs	r3, #1
   17140:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   17144:	2300      	movs	r3, #0
   17146:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   17148:	2300      	movs	r3, #0
   1714a:	f88d 300f 	strb.w	r3, [sp, #15]


    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   1714e:	4b13      	ldr	r3, [pc, #76]	; (1719c <CanIf_SetControllerMode+0x6a>)
   17150:	681b      	ldr	r3, [r3, #0]
   17152:	2b00      	cmp	r3, #0
   17154:	d01c      	beq.n	17190 <CanIf_SetControllerMode+0x5e>
        if ( Controller < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   17156:	4b12      	ldr	r3, [pc, #72]	; (171a0 <CanIf_SetControllerMode+0x6e>)
   17158:	781b      	ldrb	r3, [r3, #0]
   1715a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1715e:	429a      	cmp	r2, r3
   17160:	d216      	bcs.n	17190 <CanIf_SetControllerMode+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ Controller ];
   17162:	4b0f      	ldr	r3, [pc, #60]	; (171a0 <CanIf_SetControllerMode+0x6e>)
   17164:	685a      	ldr	r2, [r3, #4]
   17166:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1716a:	00db      	lsls	r3, r3, #3
   1716c:	4413      	add	r3, r2
   1716e:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   17170:	9b04      	ldr	r3, [sp, #16]
   17172:	785b      	ldrb	r3, [r3, #1]
   17174:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanSetMode( CanController_ID, Transition );   //Calling Can Driver Api.
   17178:	9b04      	ldr	r3, [sp, #16]
   1717a:	685b      	ldr	r3, [r3, #4]
   1717c:	685b      	ldr	r3, [r3, #4]
   1717e:	685b      	ldr	r3, [r3, #4]
   17180:	f89d 200f 	ldrb.w	r2, [sp, #15]
   17184:	9900      	ldr	r1, [sp, #0]
   17186:	4610      	mov	r0, r2
   17188:	4798      	blx	r3
   1718a:	4603      	mov	r3, r0
   1718c:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   17190:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   17194:	4618      	mov	r0, r3
   17196:	b007      	add	sp, #28
   17198:	f85d fb04 	ldr.w	pc, [sp], #4
   1719c:	1fff98ec 	.word	0x1fff98ec
   171a0:	00018b2c 	.word	0x00018b2c

000171a4 <CanIf_EnableControllerInterrupts>:
/**
 * @brief This function enables the interrupts of a given CanIf controller.
 * 
 * @param Controller CanIf controller ID.
 */
void CanIf_EnableControllerInterrupts( uint8 Controller ) {
   171a4:	b500      	push	{lr}
   171a6:	b085      	sub	sp, #20
   171a8:	4603      	mov	r3, r0
   171aa:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data.
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   171ae:	2300      	movs	r3, #0
   171b0:	9303      	str	r3, [sp, #12]
    uint8 CanController_ID = 0; //Can controller ID.
   171b2:	2300      	movs	r3, #0
   171b4:	f88d 300b 	strb.w	r3, [sp, #11]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   171b8:	4b10      	ldr	r3, [pc, #64]	; (171fc <CanIf_EnableControllerInterrupts+0x58>)
   171ba:	681b      	ldr	r3, [r3, #0]
   171bc:	2b00      	cmp	r3, #0
   171be:	d018      	beq.n	171f2 <CanIf_EnableControllerInterrupts+0x4e>
        if ( Controller < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   171c0:	4b0f      	ldr	r3, [pc, #60]	; (17200 <CanIf_EnableControllerInterrupts+0x5c>)
   171c2:	781b      	ldrb	r3, [r3, #0]
   171c4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   171c8:	429a      	cmp	r2, r3
   171ca:	d212      	bcs.n	171f2 <CanIf_EnableControllerInterrupts+0x4e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ Controller ];
   171cc:	4b0c      	ldr	r3, [pc, #48]	; (17200 <CanIf_EnableControllerInterrupts+0x5c>)
   171ce:	685a      	ldr	r2, [r3, #4]
   171d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   171d4:	00db      	lsls	r3, r3, #3
   171d6:	4413      	add	r3, r2
   171d8:	9303      	str	r3, [sp, #12]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   171da:	9b03      	ldr	r3, [sp, #12]
   171dc:	785b      	ldrb	r3, [r3, #1]
   171de:	f88d 300b 	strb.w	r3, [sp, #11]
            CanIfControllerConf->CanDrvConfigPtr->CanApi->CanEnableInterrupts( CanController_ID );   //Calling Can Driver Api.
   171e2:	9b03      	ldr	r3, [sp, #12]
   171e4:	685b      	ldr	r3, [r3, #4]
   171e6:	685b      	ldr	r3, [r3, #4]
   171e8:	689b      	ldr	r3, [r3, #8]
   171ea:	f89d 200b 	ldrb.w	r2, [sp, #11]
   171ee:	4610      	mov	r0, r2
   171f0:	4798      	blx	r3
        }
    }
}
   171f2:	bf00      	nop
   171f4:	b005      	add	sp, #20
   171f6:	f85d fb04 	ldr.w	pc, [sp], #4
   171fa:	bf00      	nop
   171fc:	1fff98ec 	.word	0x1fff98ec
   17200:	00018b2c 	.word	0x00018b2c

00017204 <CanIf_DisableControllerInterrupts>:
/**
 * @brief This function disables the interrupts of a given CanIf controller.
 * 
 * @param Controller CanIf controller ID.
 */
void CanIf_DisableControllerInterrupts( uint8 Controller ) {
   17204:	b500      	push	{lr}
   17206:	b085      	sub	sp, #20
   17208:	4603      	mov	r3, r0
   1720a:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data.
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   1720e:	2300      	movs	r3, #0
   17210:	9303      	str	r3, [sp, #12]
    uint8 CanController_ID = 0; //Can controller ID.
   17212:	2300      	movs	r3, #0
   17214:	f88d 300b 	strb.w	r3, [sp, #11]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   17218:	4b10      	ldr	r3, [pc, #64]	; (1725c <CanIf_DisableControllerInterrupts+0x58>)
   1721a:	681b      	ldr	r3, [r3, #0]
   1721c:	2b00      	cmp	r3, #0
   1721e:	d018      	beq.n	17252 <CanIf_DisableControllerInterrupts+0x4e>
        if ( Controller < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   17220:	4b0f      	ldr	r3, [pc, #60]	; (17260 <CanIf_DisableControllerInterrupts+0x5c>)
   17222:	781b      	ldrb	r3, [r3, #0]
   17224:	f89d 2007 	ldrb.w	r2, [sp, #7]
   17228:	429a      	cmp	r2, r3
   1722a:	d212      	bcs.n	17252 <CanIf_DisableControllerInterrupts+0x4e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ Controller ];
   1722c:	4b0c      	ldr	r3, [pc, #48]	; (17260 <CanIf_DisableControllerInterrupts+0x5c>)
   1722e:	685a      	ldr	r2, [r3, #4]
   17230:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17234:	00db      	lsls	r3, r3, #3
   17236:	4413      	add	r3, r2
   17238:	9303      	str	r3, [sp, #12]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   1723a:	9b03      	ldr	r3, [sp, #12]
   1723c:	785b      	ldrb	r3, [r3, #1]
   1723e:	f88d 300b 	strb.w	r3, [sp, #11]
            CanIfControllerConf->CanDrvConfigPtr->CanApi->CanDisableInterrupts( CanController_ID );   //Calling Can Driver Api.
   17242:	9b03      	ldr	r3, [sp, #12]
   17244:	685b      	ldr	r3, [r3, #4]
   17246:	685b      	ldr	r3, [r3, #4]
   17248:	68db      	ldr	r3, [r3, #12]
   1724a:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1724e:	4610      	mov	r0, r2
   17250:	4798      	blx	r3
        }
    }
}
   17252:	bf00      	nop
   17254:	b005      	add	sp, #20
   17256:	f85d fb04 	ldr.w	pc, [sp], #4
   1725a:	bf00      	nop
   1725c:	1fff98ec 	.word	0x1fff98ec
   17260:	00018b2c 	.word	0x00018b2c

00017264 <CanIf_GetControllerErrorState>:
 * 
 * @param ControllerId CanIf controller ID.
 * @param ErrorStatePtr Pointer to variable to store the actual error state of the controller.
 * @return RetVal Status of the operation. 
 */
Std_ReturnType CanIf_GetControllerErrorState( uint8 ControllerId, Can_ErrorStateType *ErrorStatePtr) {
   17264:	b500      	push	{lr}
   17266:	b087      	sub	sp, #28
   17268:	4603      	mov	r3, r0
   1726a:	9100      	str	r1, [sp, #0]
   1726c:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   17270:	2301      	movs	r3, #1
   17272:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   17276:	2300      	movs	r3, #0
   17278:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   1727a:	2300      	movs	r3, #0
   1727c:	f88d 300f 	strb.w	r3, [sp, #15]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   17280:	4b13      	ldr	r3, [pc, #76]	; (172d0 <CanIf_GetControllerErrorState+0x6c>)
   17282:	681b      	ldr	r3, [r3, #0]
   17284:	2b00      	cmp	r3, #0
   17286:	d01c      	beq.n	172c2 <CanIf_GetControllerErrorState+0x5e>
        if ( ControllerId < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   17288:	4b12      	ldr	r3, [pc, #72]	; (172d4 <CanIf_GetControllerErrorState+0x70>)
   1728a:	781b      	ldrb	r3, [r3, #0]
   1728c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   17290:	429a      	cmp	r2, r3
   17292:	d216      	bcs.n	172c2 <CanIf_GetControllerErrorState+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ ControllerId ];
   17294:	4b0f      	ldr	r3, [pc, #60]	; (172d4 <CanIf_GetControllerErrorState+0x70>)
   17296:	685a      	ldr	r2, [r3, #4]
   17298:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1729c:	00db      	lsls	r3, r3, #3
   1729e:	4413      	add	r3, r2
   172a0:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   172a2:	9b04      	ldr	r3, [sp, #16]
   172a4:	785b      	ldrb	r3, [r3, #1]
   172a6:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanGetErrorState( CanController_ID, ErrorStatePtr );   //Calling Can Driver Api.
   172aa:	9b04      	ldr	r3, [sp, #16]
   172ac:	685b      	ldr	r3, [r3, #4]
   172ae:	685b      	ldr	r3, [r3, #4]
   172b0:	691b      	ldr	r3, [r3, #16]
   172b2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   172b6:	9900      	ldr	r1, [sp, #0]
   172b8:	4610      	mov	r0, r2
   172ba:	4798      	blx	r3
   172bc:	4603      	mov	r3, r0
   172be:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   172c2:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   172c6:	4618      	mov	r0, r3
   172c8:	b007      	add	sp, #28
   172ca:	f85d fb04 	ldr.w	pc, [sp], #4
   172ce:	bf00      	nop
   172d0:	1fff98ec 	.word	0x1fff98ec
   172d4:	00018b2c 	.word	0x00018b2c

000172d8 <CanIf_GetControllerMode>:
 * 
 * @param Controller CanIf controller ID.
 * @param ControllerModePtr Pointer to variable to store the actual state of the controller.
 * @return RetVal Status of the operation.
 */
Std_ReturnType CanIf_GetControllerMode( uint8 Controller, Can_ControllerStateType *ControllerModePtr ) {
   172d8:	b500      	push	{lr}
   172da:	b087      	sub	sp, #28
   172dc:	4603      	mov	r3, r0
   172de:	9100      	str	r1, [sp, #0]
   172e0:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   172e4:	2301      	movs	r3, #1
   172e6:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   172ea:	2300      	movs	r3, #0
   172ec:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   172ee:	2300      	movs	r3, #0
   172f0:	f88d 300f 	strb.w	r3, [sp, #15]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   172f4:	4b13      	ldr	r3, [pc, #76]	; (17344 <CanIf_GetControllerMode+0x6c>)
   172f6:	681b      	ldr	r3, [r3, #0]
   172f8:	2b00      	cmp	r3, #0
   172fa:	d01c      	beq.n	17336 <CanIf_GetControllerMode+0x5e>
        if ( Controller < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   172fc:	4b12      	ldr	r3, [pc, #72]	; (17348 <CanIf_GetControllerMode+0x70>)
   172fe:	781b      	ldrb	r3, [r3, #0]
   17300:	f89d 2007 	ldrb.w	r2, [sp, #7]
   17304:	429a      	cmp	r2, r3
   17306:	d216      	bcs.n	17336 <CanIf_GetControllerMode+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ Controller ];
   17308:	4b0f      	ldr	r3, [pc, #60]	; (17348 <CanIf_GetControllerMode+0x70>)
   1730a:	685a      	ldr	r2, [r3, #4]
   1730c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17310:	00db      	lsls	r3, r3, #3
   17312:	4413      	add	r3, r2
   17314:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   17316:	9b04      	ldr	r3, [sp, #16]
   17318:	785b      	ldrb	r3, [r3, #1]
   1731a:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanGetMode( CanController_ID, ControllerModePtr );   //Calling Can Driver Api.
   1731e:	9b04      	ldr	r3, [sp, #16]
   17320:	685b      	ldr	r3, [r3, #4]
   17322:	685b      	ldr	r3, [r3, #4]
   17324:	695b      	ldr	r3, [r3, #20]
   17326:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1732a:	9900      	ldr	r1, [sp, #0]
   1732c:	4610      	mov	r0, r2
   1732e:	4798      	blx	r3
   17330:	4603      	mov	r3, r0
   17332:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   17336:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   1733a:	4618      	mov	r0, r3
   1733c:	b007      	add	sp, #28
   1733e:	f85d fb04 	ldr.w	pc, [sp], #4
   17342:	bf00      	nop
   17344:	1fff98ec 	.word	0x1fff98ec
   17348:	00018b2c 	.word	0x00018b2c

0001734c <CanIf_GetControllerRxErrorCounter>:
 * 
 * @param ControllerId CanIf controller ID.
 * @param RxErrorCounterPtr Pointer to variable to store the actual value of the rx error counter of the controller.
 * @return RetVal Status of the operation.
 */
Std_ReturnType CanIf_GetControllerRxErrorCounter( uint8 ControllerId, uint8 *RxErrorCounterPtr ) {
   1734c:	b500      	push	{lr}
   1734e:	b087      	sub	sp, #28
   17350:	4603      	mov	r3, r0
   17352:	9100      	str	r1, [sp, #0]
   17354:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   17358:	2301      	movs	r3, #1
   1735a:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   1735e:	2300      	movs	r3, #0
   17360:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   17362:	2300      	movs	r3, #0
   17364:	f88d 300f 	strb.w	r3, [sp, #15]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   17368:	4b13      	ldr	r3, [pc, #76]	; (173b8 <CanIf_GetControllerRxErrorCounter+0x6c>)
   1736a:	681b      	ldr	r3, [r3, #0]
   1736c:	2b00      	cmp	r3, #0
   1736e:	d01c      	beq.n	173aa <CanIf_GetControllerRxErrorCounter+0x5e>
        if ( ControllerId < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   17370:	4b12      	ldr	r3, [pc, #72]	; (173bc <CanIf_GetControllerRxErrorCounter+0x70>)
   17372:	781b      	ldrb	r3, [r3, #0]
   17374:	f89d 2007 	ldrb.w	r2, [sp, #7]
   17378:	429a      	cmp	r2, r3
   1737a:	d216      	bcs.n	173aa <CanIf_GetControllerRxErrorCounter+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ ControllerId ];
   1737c:	4b0f      	ldr	r3, [pc, #60]	; (173bc <CanIf_GetControllerRxErrorCounter+0x70>)
   1737e:	685a      	ldr	r2, [r3, #4]
   17380:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17384:	00db      	lsls	r3, r3, #3
   17386:	4413      	add	r3, r2
   17388:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   1738a:	9b04      	ldr	r3, [sp, #16]
   1738c:	785b      	ldrb	r3, [r3, #1]
   1738e:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanGetRxErrorCounter( CanController_ID, RxErrorCounterPtr );   //Calling Can Driver Api.
   17392:	9b04      	ldr	r3, [sp, #16]
   17394:	685b      	ldr	r3, [r3, #4]
   17396:	685b      	ldr	r3, [r3, #4]
   17398:	699b      	ldr	r3, [r3, #24]
   1739a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1739e:	9900      	ldr	r1, [sp, #0]
   173a0:	4610      	mov	r0, r2
   173a2:	4798      	blx	r3
   173a4:	4603      	mov	r3, r0
   173a6:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   173aa:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   173ae:	4618      	mov	r0, r3
   173b0:	b007      	add	sp, #28
   173b2:	f85d fb04 	ldr.w	pc, [sp], #4
   173b6:	bf00      	nop
   173b8:	1fff98ec 	.word	0x1fff98ec
   173bc:	00018b2c 	.word	0x00018b2c

000173c0 <CanIf_GetControllerTxErrorCounter>:
 * 
 * @param ControllerId CanIf controller ID.
 * @param TxErrorCounterPtr Pointer to variable to store the actual value of the tx error counter of the controller.
 * @return RetVal Status of the operation. 
 */
Std_ReturnType CanIf_GetControllerTxErrorCounter( uint8 ControllerId, uint8 *TxErrorCounterPtr ) {
   173c0:	b500      	push	{lr}
   173c2:	b087      	sub	sp, #28
   173c4:	4603      	mov	r3, r0
   173c6:	9100      	str	r1, [sp, #0]
   173c8:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   173cc:	2301      	movs	r3, #1
   173ce:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   173d2:	2300      	movs	r3, #0
   173d4:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   173d6:	2300      	movs	r3, #0
   173d8:	f88d 300f 	strb.w	r3, [sp, #15]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   173dc:	4b13      	ldr	r3, [pc, #76]	; (1742c <CanIf_GetControllerTxErrorCounter+0x6c>)
   173de:	681b      	ldr	r3, [r3, #0]
   173e0:	2b00      	cmp	r3, #0
   173e2:	d01c      	beq.n	1741e <CanIf_GetControllerTxErrorCounter+0x5e>
        if ( ControllerId < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   173e4:	4b12      	ldr	r3, [pc, #72]	; (17430 <CanIf_GetControllerTxErrorCounter+0x70>)
   173e6:	781b      	ldrb	r3, [r3, #0]
   173e8:	f89d 2007 	ldrb.w	r2, [sp, #7]
   173ec:	429a      	cmp	r2, r3
   173ee:	d216      	bcs.n	1741e <CanIf_GetControllerTxErrorCounter+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ ControllerId ];
   173f0:	4b0f      	ldr	r3, [pc, #60]	; (17430 <CanIf_GetControllerTxErrorCounter+0x70>)
   173f2:	685a      	ldr	r2, [r3, #4]
   173f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   173f8:	00db      	lsls	r3, r3, #3
   173fa:	4413      	add	r3, r2
   173fc:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   173fe:	9b04      	ldr	r3, [sp, #16]
   17400:	785b      	ldrb	r3, [r3, #1]
   17402:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanGetTxErrorCounter( CanController_ID, TxErrorCounterPtr );   //Calling Can Driver Api.
   17406:	9b04      	ldr	r3, [sp, #16]
   17408:	685b      	ldr	r3, [r3, #4]
   1740a:	685b      	ldr	r3, [r3, #4]
   1740c:	69db      	ldr	r3, [r3, #28]
   1740e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   17412:	9900      	ldr	r1, [sp, #0]
   17414:	4610      	mov	r0, r2
   17416:	4798      	blx	r3
   17418:	4603      	mov	r3, r0
   1741a:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   1741e:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   17422:	4618      	mov	r0, r3
   17424:	b007      	add	sp, #28
   17426:	f85d fb04 	ldr.w	pc, [sp], #4
   1742a:	bf00      	nop
   1742c:	1fff98ec 	.word	0x1fff98ec
   17430:	00018b2c 	.word	0x00018b2c

00017434 <Fls_ACEraseRomEnd>:
   17434:	00c9f4de 	.word	0x00c9f4de
   17438:	00ccbbaa 	.word	0x00ccbbaa
   1743c:	5f75634d 	.word	0x5f75634d
   17440:	74696e49 	.word	0x74696e49
   17444:	00002928 	.word	0x00002928
   17448:	5f75634d 	.word	0x5f75634d
   1744c:	74696e49 	.word	0x74696e49
   17450:	636f6c43 	.word	0x636f6c43
   17454:	0029286b 	.word	0x0029286b
   17458:	5f75634d 	.word	0x5f75634d
   1745c:	4d746553 	.word	0x4d746553
   17460:	2865646f 	.word	0x2865646f
   17464:	00000029 	.word	0x00000029
   17468:	5f75634d 	.word	0x5f75634d
   1746c:	56746547 	.word	0x56746547
   17470:	69737265 	.word	0x69737265
   17474:	6e496e6f 	.word	0x6e496e6f
   17478:	29286f66 	.word	0x29286f66
   1747c:	00000000 	.word	0x00000000
   17480:	61766e49 	.word	0x61766e49
   17484:	2064696c 	.word	0x2064696c
   17488:	666e6f63 	.word	0x666e6f63
   1748c:	696f7020 	.word	0x696f7020
   17490:	7265746e 	.word	0x7265746e
   17494:	00000000 	.word	0x00000000
   17498:	76697244 	.word	0x76697244
   1749c:	75207265 	.word	0x75207265
   174a0:	696e696e 	.word	0x696e696e
   174a4:	6c616974 	.word	0x6c616974
   174a8:	64657a69 	.word	0x64657a69
   174ac:	00000000 	.word	0x00000000
   174b0:	76697244 	.word	0x76697244
   174b4:	61207265 	.word	0x61207265
   174b8:	6165726c 	.word	0x6165726c
   174bc:	69207964 	.word	0x69207964
   174c0:	6974696e 	.word	0x6974696e
   174c4:	7a696c61 	.word	0x7a696c61
   174c8:	00006465 	.word	0x00006465
   174cc:	61766e49 	.word	0x61766e49
   174d0:	2064696c 	.word	0x2064696c
   174d4:	75706e69 	.word	0x75706e69
   174d8:	61702074 	.word	0x61702074
   174dc:	656d6172 	.word	0x656d6172
   174e0:	00726574 	.word	0x00726574
   174e4:	74616c50 	.word	0x74616c50
   174e8:	6d726f66 	.word	0x6d726f66
   174ec:	696e495f 	.word	0x696e495f
   174f0:	00292874 	.word	0x00292874
   174f4:	74616c50 	.word	0x74616c50
   174f8:	6d726f66 	.word	0x6d726f66
   174fc:	7465535f 	.word	0x7465535f
   17500:	28717249 	.word	0x28717249
   17504:	00000029 	.word	0x00000029
   17508:	74616c50 	.word	0x74616c50
   1750c:	6d726f66 	.word	0x6d726f66
   17510:	7465535f 	.word	0x7465535f
   17514:	50717249 	.word	0x50717249
   17518:	726f6972 	.word	0x726f6972
   1751c:	28797469 	.word	0x28797469
   17520:	00000029 	.word	0x00000029
   17524:	74616c50 	.word	0x74616c50
   17528:	6d726f66 	.word	0x6d726f66
   1752c:	7465475f 	.word	0x7465475f
   17530:	50717249 	.word	0x50717249
   17534:	726f6972 	.word	0x726f6972
   17538:	28797469 	.word	0x28797469
   1753c:	00000029 	.word	0x00000029
   17540:	74616c50 	.word	0x74616c50
   17544:	6d726f66 	.word	0x6d726f66
   17548:	736e495f 	.word	0x736e495f
   1754c:	6c6c6174 	.word	0x6c6c6174
   17550:	48717249 	.word	0x48717249
   17554:	6c646e61 	.word	0x6c646e61
   17558:	29287265 	.word	0x29287265
   1755c:	00000000 	.word	0x00000000
   17560:	61766e49 	.word	0x61766e49
   17564:	2064696c 	.word	0x2064696c
   17568:	6e696f70 	.word	0x6e696f70
   1756c:	00726574 	.word	0x00726574
   17570:	6c6c6143 	.word	0x6c6c6143
   17574:	6f726620 	.word	0x6f726620
   17578:	7277206d 	.word	0x7277206d
   1757c:	20676e6f 	.word	0x20676e6f
   17580:	7070616d 	.word	0x7070616d
   17584:	70206465 	.word	0x70206465
   17588:	69747261 	.word	0x69747261
   1758c:	6e6f6974 	.word	0x6e6f6974
   17590:	00000000 	.word	0x00000000
   17594:	61726150 	.word	0x61726150
   17598:	6574656d 	.word	0x6574656d
   1759c:	756f2072 	.word	0x756f2072
   175a0:	666f2074 	.word	0x666f2074
   175a4:	6e617220 	.word	0x6e617220
   175a8:	00006567 	.word	0x00006567
   175ac:	74726f50 	.word	0x74726f50
   175b0:	696e495f 	.word	0x696e495f
   175b4:	00292874 	.word	0x00292874
   175b8:	74726f50 	.word	0x74726f50
   175bc:	7465535f 	.word	0x7465535f
   175c0:	446e6950 	.word	0x446e6950
   175c4:	63657269 	.word	0x63657269
   175c8:	6e6f6974 	.word	0x6e6f6974
   175cc:	00002928 	.word	0x00002928
   175d0:	74726f50 	.word	0x74726f50
   175d4:	7465535f 	.word	0x7465535f
   175d8:	4d6e6950 	.word	0x4d6e6950
   175dc:	2865646f 	.word	0x2865646f
   175e0:	00000029 	.word	0x00000029
   175e4:	74726f50 	.word	0x74726f50
   175e8:	6665525f 	.word	0x6665525f
   175ec:	68736572 	.word	0x68736572
   175f0:	74726f50 	.word	0x74726f50
   175f4:	65726944 	.word	0x65726944
   175f8:	6f697463 	.word	0x6f697463
   175fc:	0029286e 	.word	0x0029286e
   17600:	74726f50 	.word	0x74726f50
   17604:	7465475f 	.word	0x7465475f
   17608:	73726556 	.word	0x73726556
   1760c:	496e6f69 	.word	0x496e6f69
   17610:	286f666e 	.word	0x286f666e
   17614:	00000029 	.word	0x00000029
   17618:	61766e49 	.word	0x61766e49
   1761c:	2064696c 	.word	0x2064696c
   17620:	74726f50 	.word	0x74726f50
   17624:	6e695020 	.word	0x6e695020
   17628:	00444920 	.word	0x00444920
   1762c:	74726f50 	.word	0x74726f50
   17630:	6e697020 	.word	0x6e697020
   17634:	646f6d20 	.word	0x646f6d20
   17638:	73692065 	.word	0x73692065
   1763c:	636e7520 	.word	0x636e7520
   17640:	676e6168 	.word	0x676e6168
   17644:	6c626165 	.word	0x6c626165
   17648:	00000065 	.word	0x00000065
   1764c:	61766e49 	.word	0x61766e49
   17650:	2064696c 	.word	0x2064696c
   17654:	74726f70 	.word	0x74726f70
   17658:	6e697020 	.word	0x6e697020
   1765c:	646f6d20 	.word	0x646f6d20
   17660:	00000065 	.word	0x00000065
   17664:	5f6f6944 	.word	0x5f6f6944
   17668:	74697257 	.word	0x74697257
   1766c:	61684365 	.word	0x61684365
   17670:	6c656e6e 	.word	0x6c656e6e
   17674:	00002928 	.word	0x00002928
   17678:	5f6f6944 	.word	0x5f6f6944
   1767c:	64616552 	.word	0x64616552
   17680:	6e616843 	.word	0x6e616843
   17684:	286c656e 	.word	0x286c656e
   17688:	00000029 	.word	0x00000029
   1768c:	5f6f6944 	.word	0x5f6f6944
   17690:	70696c46 	.word	0x70696c46
   17694:	6e616843 	.word	0x6e616843
   17698:	286c656e 	.word	0x286c656e
   1769c:	00000029 	.word	0x00000029
   176a0:	5f6f6944 	.word	0x5f6f6944
   176a4:	74697257 	.word	0x74697257
   176a8:	61684365 	.word	0x61684365
   176ac:	6c656e6e 	.word	0x6c656e6e
   176b0:	756f7247 	.word	0x756f7247
   176b4:	00292870 	.word	0x00292870
   176b8:	5f6f6944 	.word	0x5f6f6944
   176bc:	64616552 	.word	0x64616552
   176c0:	6e616843 	.word	0x6e616843
   176c4:	476c656e 	.word	0x476c656e
   176c8:	70756f72 	.word	0x70756f72
   176cc:	00002928 	.word	0x00002928
   176d0:	5f6f6944 	.word	0x5f6f6944
   176d4:	74697257 	.word	0x74697257
   176d8:	726f5065 	.word	0x726f5065
   176dc:	00292874 	.word	0x00292874
   176e0:	5f6f6944 	.word	0x5f6f6944
   176e4:	64616552 	.word	0x64616552
   176e8:	74726f50 	.word	0x74726f50
   176ec:	00002928 	.word	0x00002928
   176f0:	5f6f6944 	.word	0x5f6f6944
   176f4:	56746547 	.word	0x56746547
   176f8:	69737265 	.word	0x69737265
   176fc:	6e496e6f 	.word	0x6e496e6f
   17700:	29286f66 	.word	0x29286f66
   17704:	00000000 	.word	0x00000000
   17708:	61766e49 	.word	0x61766e49
   1770c:	2064696c 	.word	0x2064696c
   17710:	206f6964 	.word	0x206f6964
   17714:	6e616863 	.word	0x6e616863
   17718:	206c656e 	.word	0x206c656e
   1771c:	6576656c 	.word	0x6576656c
   17720:	0000006c 	.word	0x0000006c
   17724:	61766e49 	.word	0x61766e49
   17728:	2064696c 	.word	0x2064696c
   1772c:	206f6964 	.word	0x206f6964
   17730:	6e616863 	.word	0x6e616863
   17734:	206c656e 	.word	0x206c656e
   17738:	00006469 	.word	0x00006469
   1773c:	61766e49 	.word	0x61766e49
   17740:	2064696c 	.word	0x2064696c
   17744:	74726f70 	.word	0x74726f70
   17748:	00646920 	.word	0x00646920
   1774c:	61766e49 	.word	0x61766e49
   17750:	2064696c 	.word	0x2064696c
   17754:	6e616863 	.word	0x6e616863
   17758:	206c656e 	.word	0x206c656e
   1775c:	756f7267 	.word	0x756f7267
   17760:	64692070 	.word	0x64692070
   17764:	00000000 	.word	0x00000000
   17768:	61766e49 	.word	0x61766e49
   1776c:	2064696c 	.word	0x2064696c
   17770:	666e6f63 	.word	0x666e6f63
   17774:	70206769 	.word	0x70206769
   17778:	6d617261 	.word	0x6d617261
   1777c:	72657465 	.word	0x72657465
   17780:	00000000 	.word	0x00000000
   17784:	5f6d7750 	.word	0x5f6d7750
   17788:	74696e49 	.word	0x74696e49
   1778c:	00002928 	.word	0x00002928
   17790:	5f6d7750 	.word	0x5f6d7750
   17794:	6e496544 	.word	0x6e496544
   17798:	29287469 	.word	0x29287469
   1779c:	00000000 	.word	0x00000000
   177a0:	5f6d7750 	.word	0x5f6d7750
   177a4:	44746553 	.word	0x44746553
   177a8:	43797475 	.word	0x43797475
   177ac:	656c6379 	.word	0x656c6379
   177b0:	00002928 	.word	0x00002928
   177b4:	5f6d7750 	.word	0x5f6d7750
   177b8:	50746553 	.word	0x50746553
   177bc:	6f697265 	.word	0x6f697265
   177c0:	646e4164 	.word	0x646e4164
   177c4:	79747544 	.word	0x79747544
   177c8:	00002928 	.word	0x00002928
   177cc:	5f6d7750 	.word	0x5f6d7750
   177d0:	4f746553 	.word	0x4f746553
   177d4:	75707475 	.word	0x75707475
   177d8:	496f5474 	.word	0x496f5474
   177dc:	28656c64 	.word	0x28656c64
   177e0:	00000029 	.word	0x00000029
   177e4:	5f6d7750 	.word	0x5f6d7750
   177e8:	56746547 	.word	0x56746547
   177ec:	69737265 	.word	0x69737265
   177f0:	6e496e6f 	.word	0x6e496e6f
   177f4:	29286f66 	.word	0x29286f66
   177f8:	00000000 	.word	0x00000000
   177fc:	61766e49 	.word	0x61766e49
   17800:	2064696c 	.word	0x2064696c
   17804:	666e6f63 	.word	0x666e6f63
   17808:	70206769 	.word	0x70206769
   1780c:	746e696f 	.word	0x746e696f
   17810:	00007265 	.word	0x00007265
   17814:	61766e49 	.word	0x61766e49
   17818:	2064696c 	.word	0x2064696c
   1781c:	206d7770 	.word	0x206d7770
   17820:	6e616863 	.word	0x6e616863
   17824:	006c656e 	.word	0x006c656e
   17828:	206d7750 	.word	0x206d7750
   1782c:	6e616863 	.word	0x6e616863
   17830:	206c656e 	.word	0x206c656e
   17834:	69726570 	.word	0x69726570
   17838:	6920646f 	.word	0x6920646f
   1783c:	6e752073 	.word	0x6e752073
   17840:	6e616863 	.word	0x6e616863
   17844:	62616567 	.word	0x62616567
   17848:	0000656c 	.word	0x0000656c
   1784c:	5f636441 	.word	0x5f636441
   17850:	74696e49 	.word	0x74696e49
   17854:	00002928 	.word	0x00002928
   17858:	5f636441 	.word	0x5f636441
   1785c:	6e496544 	.word	0x6e496544
   17860:	29287469 	.word	0x29287469
   17864:	00000000 	.word	0x00000000
   17868:	5f636441 	.word	0x5f636441
   1786c:	72617453 	.word	0x72617453
   17870:	6f724774 	.word	0x6f724774
   17874:	6f437075 	.word	0x6f437075
   17878:	7265766e 	.word	0x7265766e
   1787c:	6e6f6973 	.word	0x6e6f6973
   17880:	00002928 	.word	0x00002928
   17884:	5f636441 	.word	0x5f636441
   17888:	706f7453 	.word	0x706f7453
   1788c:	756f7247 	.word	0x756f7247
   17890:	6e6f4370 	.word	0x6e6f4370
   17894:	73726576 	.word	0x73726576
   17898:	286e6f69 	.word	0x286e6f69
   1789c:	00000029 	.word	0x00000029
   178a0:	5f636441 	.word	0x5f636441
   178a4:	64616552 	.word	0x64616552
   178a8:	756f7247 	.word	0x756f7247
   178ac:	00292870 	.word	0x00292870
   178b0:	5f636441 	.word	0x5f636441
   178b4:	47746547 	.word	0x47746547
   178b8:	70756f72 	.word	0x70756f72
   178bc:	74617453 	.word	0x74617453
   178c0:	29287375 	.word	0x29287375
   178c4:	00000000 	.word	0x00000000
   178c8:	5f636441 	.word	0x5f636441
   178cc:	696c6143 	.word	0x696c6143
   178d0:	74617262 	.word	0x74617262
   178d4:	00292865 	.word	0x00292865
   178d8:	5f636441 	.word	0x5f636441
   178dc:	75746553 	.word	0x75746553
   178e0:	73655270 	.word	0x73655270
   178e4:	42746c75 	.word	0x42746c75
   178e8:	65666675 	.word	0x65666675
   178ec:	00292872 	.word	0x00292872
   178f0:	5f636441 	.word	0x5f636441
   178f4:	56746547 	.word	0x56746547
   178f8:	69737265 	.word	0x69737265
   178fc:	6e496e6f 	.word	0x6e496e6f
   17900:	29286f66 	.word	0x29286f66
   17904:	00000000 	.word	0x00000000
   17908:	61766e49 	.word	0x61766e49
   1790c:	2064696c 	.word	0x2064696c
   17910:	20636461 	.word	0x20636461
   17914:	756f7267 	.word	0x756f7267
   17918:	00000070 	.word	0x00000070
   1791c:	66667542 	.word	0x66667542
   17920:	70207265 	.word	0x70207265
   17924:	746e696f 	.word	0x746e696f
   17928:	6e207265 	.word	0x6e207265
   1792c:	6920746f 	.word	0x6920746f
   17930:	6974696e 	.word	0x6974696e
   17934:	7a696c61 	.word	0x7a696c61
   17938:	00006465 	.word	0x00006465
   1793c:	696c6143 	.word	0x696c6143
   17940:	74617262 	.word	0x74617262
   17944:	206e6f69 	.word	0x206e6f69
   17948:	7265706f 	.word	0x7265706f
   1794c:	6f697461 	.word	0x6f697461
   17950:	6974206e 	.word	0x6974206e
   17954:	2064656d 	.word	0x2064656d
   17958:	0074756f 	.word	0x0074756f
   1795c:	65686353 	.word	0x65686353
   17960:	656c7564 	.word	0x656c7564
   17964:	6e495f72 	.word	0x6e495f72
   17968:	29287469 	.word	0x29287469
   1796c:	00000000 	.word	0x00000000
   17970:	65686353 	.word	0x65686353
   17974:	656c7564 	.word	0x656c7564
   17978:	65475f72 	.word	0x65475f72
   1797c:	61745374 	.word	0x61745374
   17980:	51737574 	.word	0x51737574
   17984:	65756575 	.word	0x65756575
   17988:	00002928 	.word	0x00002928
   1798c:	65686353 	.word	0x65686353
   17990:	656c7564 	.word	0x656c7564
   17994:	6c465f72 	.word	0x6c465f72
   17998:	51687375 	.word	0x51687375
   1799c:	65756575 	.word	0x65756575
   179a0:	00002928 	.word	0x00002928
   179a4:	65686353 	.word	0x65686353
   179a8:	656c7564 	.word	0x656c7564
   179ac:	72575f72 	.word	0x72575f72
   179b0:	51657469 	.word	0x51657469
   179b4:	65756575 	.word	0x65756575
   179b8:	00002928 	.word	0x00002928
   179bc:	65686353 	.word	0x65686353
   179c0:	656c7564 	.word	0x656c7564
   179c4:	65525f72 	.word	0x65525f72
   179c8:	75516461 	.word	0x75516461
   179cc:	28657565 	.word	0x28657565
   179d0:	00000029 	.word	0x00000029
   179d4:	65686353 	.word	0x65686353
   179d8:	656c7564 	.word	0x656c7564
   179dc:	74535f72 	.word	0x74535f72
   179e0:	54747261 	.word	0x54747261
   179e4:	286b7361 	.word	0x286b7361
   179e8:	00000029 	.word	0x00000029
   179ec:	65686353 	.word	0x65686353
   179f0:	656c7564 	.word	0x656c7564
   179f4:	74535f72 	.word	0x74535f72
   179f8:	6154706f 	.word	0x6154706f
   179fc:	29286b73 	.word	0x29286b73
   17a00:	00000000 	.word	0x00000000
   17a04:	65686353 	.word	0x65686353
   17a08:	656c7564 	.word	0x656c7564
   17a0c:	65505f72 	.word	0x65505f72
   17a10:	646f6972 	.word	0x646f6972
   17a14:	6b736154 	.word	0x6b736154
   17a18:	00002928 	.word	0x00002928
   17a1c:	65686353 	.word	0x65686353
   17a20:	656c7564 	.word	0x656c7564
   17a24:	74535f72 	.word	0x74535f72
   17a28:	54747261 	.word	0x54747261
   17a2c:	72656d69 	.word	0x72656d69
   17a30:	00002928 	.word	0x00002928
   17a34:	65686353 	.word	0x65686353
   17a38:	656c7564 	.word	0x656c7564
   17a3c:	74535f72 	.word	0x74535f72
   17a40:	6954706f 	.word	0x6954706f
   17a44:	2872656d 	.word	0x2872656d
   17a48:	00000029 	.word	0x00000029
   17a4c:	65686353 	.word	0x65686353
   17a50:	656c7564 	.word	0x656c7564
   17a54:	65475f72 	.word	0x65475f72
   17a58:	6d695474 	.word	0x6d695474
   17a5c:	29287265 	.word	0x29287265
   17a60:	00000000 	.word	0x00000000
   17a64:	65686353 	.word	0x65686353
   17a68:	656c7564 	.word	0x656c7564
   17a6c:	65525f72 	.word	0x65525f72
   17a70:	64616f6c 	.word	0x64616f6c
   17a74:	656d6954 	.word	0x656d6954
   17a78:	00292872 	.word	0x00292872
   17a7c:	65686353 	.word	0x65686353
   17a80:	656c7564 	.word	0x656c7564
   17a84:	614d5f72 	.word	0x614d5f72
   17a88:	75466e69 	.word	0x75466e69
   17a8c:	6974636e 	.word	0x6974636e
   17a90:	29286e6f 	.word	0x29286e6f
   17a94:	00000000 	.word	0x00000000
   17a98:	75657551 	.word	0x75657551
   17a9c:	64692065 	.word	0x64692065
   17aa0:	74756f20 	.word	0x74756f20
   17aa4:	20666f20 	.word	0x20666f20
   17aa8:	676e6172 	.word	0x676e6172
   17aac:	00000065 	.word	0x00000065
   17ab0:	61766e49 	.word	0x61766e49
   17ab4:	2064696c 	.word	0x2064696c
   17ab8:	75657571 	.word	0x75657571
   17abc:	74732065 	.word	0x74732065
   17ac0:	73757461 	.word	0x73757461
   17ac4:	616c6620 	.word	0x616c6620
   17ac8:	00000067 	.word	0x00000067
   17acc:	6b736154 	.word	0x6b736154
   17ad0:	20646920 	.word	0x20646920
   17ad4:	2074756f 	.word	0x2074756f
   17ad8:	7220666f 	.word	0x7220666f
   17adc:	65676e61 	.word	0x65676e61
   17ae0:	00000000 	.word	0x00000000
   17ae4:	61766e49 	.word	0x61766e49
   17ae8:	2064696c 	.word	0x2064696c
   17aec:	6b736174 	.word	0x6b736174
   17af0:	20726f20 	.word	0x20726f20
   17af4:	656d6974 	.word	0x656d6974
   17af8:	65702072 	.word	0x65702072
   17afc:	646f6972 	.word	0x646f6972
   17b00:	74696369 	.word	0x74696369
   17b04:	00000079 	.word	0x00000079
   17b08:	656d6954 	.word	0x656d6954
   17b0c:	64692072 	.word	0x64692072
   17b10:	74756f20 	.word	0x74756f20
   17b14:	20666f20 	.word	0x20666f20
   17b18:	676e6172 	.word	0x676e6172
   17b1c:	00000065 	.word	0x00000065
   17b20:	65686353 	.word	0x65686353
   17b24:	656c7564 	.word	0x656c7564
   17b28:	6e752072 	.word	0x6e752072
   17b2c:	74696e69 	.word	0x74696e69
   17b30:	696c6169 	.word	0x696c6169
   17b34:	0064657a 	.word	0x0064657a
   17b38:	6f497748 	.word	0x6f497748
   17b3c:	425f6241 	.word	0x425f6241
   17b40:	6f747475 	.word	0x6f747475
   17b44:	495f736e 	.word	0x495f736e
   17b48:	2874696e 	.word	0x2874696e
   17b4c:	00000029 	.word	0x00000029
   17b50:	6f497748 	.word	0x6f497748
   17b54:	425f6241 	.word	0x425f6241
   17b58:	6f747475 	.word	0x6f747475
   17b5c:	475f736e 	.word	0x475f736e
   17b60:	76457465 	.word	0x76457465
   17b64:	28746e65 	.word	0x28746e65
   17b68:	00000029 	.word	0x00000029
   17b6c:	6f497748 	.word	0x6f497748
   17b70:	425f6241 	.word	0x425f6241
   17b74:	6f747475 	.word	0x6f747475
   17b78:	4d5f736e 	.word	0x4d5f736e
   17b7c:	466e6961 	.word	0x466e6961
   17b80:	74636e75 	.word	0x74636e75
   17b84:	286e6f69 	.word	0x286e6f69
   17b88:	00000029 	.word	0x00000029
   17b8c:	61766e49 	.word	0x61766e49
   17b90:	2064696c 	.word	0x2064696c
   17b94:	74747562 	.word	0x74747562
   17b98:	69206e6f 	.word	0x69206e6f
   17b9c:	00000064 	.word	0x00000064
   17ba0:	61766e49 	.word	0x61766e49
   17ba4:	2064696c 	.word	0x2064696c
   17ba8:	74747562 	.word	0x74747562
   17bac:	73206e6f 	.word	0x73206e6f
   17bb0:	65746174 	.word	0x65746174
   17bb4:	00000000 	.word	0x00000000
   17bb8:	75646f4d 	.word	0x75646f4d
   17bbc:	7520656c 	.word	0x7520656c
   17bc0:	696e696e 	.word	0x696e696e
   17bc4:	6c616974 	.word	0x6c616974
   17bc8:	64657a69 	.word	0x64657a69
   17bcc:	00000000 	.word	0x00000000
   17bd0:	6f497748 	.word	0x6f497748
   17bd4:	4c5f6241 	.word	0x4c5f6241
   17bd8:	5f736465 	.word	0x5f736465
   17bdc:	74696e49 	.word	0x74696e49
   17be0:	00002928 	.word	0x00002928
   17be4:	6f497748 	.word	0x6f497748
   17be8:	4c5f6241 	.word	0x4c5f6241
   17bec:	5f736465 	.word	0x5f736465
   17bf0:	6e727554 	.word	0x6e727554
   17bf4:	29286e4f 	.word	0x29286e4f
   17bf8:	00000000 	.word	0x00000000
   17bfc:	6f497748 	.word	0x6f497748
   17c00:	4c5f6241 	.word	0x4c5f6241
   17c04:	5f736465 	.word	0x5f736465
   17c08:	6e727554 	.word	0x6e727554
   17c0c:	2866664f 	.word	0x2866664f
   17c10:	00000029 	.word	0x00000029
   17c14:	6f497748 	.word	0x6f497748
   17c18:	4c5f6241 	.word	0x4c5f6241
   17c1c:	5f736465 	.word	0x5f736465
   17c20:	6e727554 	.word	0x6e727554
   17c24:	67676f54 	.word	0x67676f54
   17c28:	2928656c 	.word	0x2928656c
   17c2c:	00000000 	.word	0x00000000
   17c30:	61766e49 	.word	0x61766e49
   17c34:	2064696c 	.word	0x2064696c
   17c38:	2064656c 	.word	0x2064656c
   17c3c:	00006469 	.word	0x00006469
   17c40:	6f497748 	.word	0x6f497748
   17c44:	505f6241 	.word	0x505f6241
   17c48:	5f73746f 	.word	0x5f73746f
   17c4c:	74696e49 	.word	0x74696e49
   17c50:	00002928 	.word	0x00002928
   17c54:	6f497748 	.word	0x6f497748
   17c58:	505f6241 	.word	0x505f6241
   17c5c:	5f73746f 	.word	0x5f73746f
   17c60:	56746547 	.word	0x56746547
   17c64:	65756c61 	.word	0x65756c61
   17c68:	00002928 	.word	0x00002928
   17c6c:	6f497748 	.word	0x6f497748
   17c70:	505f6241 	.word	0x505f6241
   17c74:	5f73746f 	.word	0x5f73746f
   17c78:	41746547 	.word	0x41746547
   17c7c:	6156746c 	.word	0x6156746c
   17c80:	2865756c 	.word	0x2865756c
   17c84:	00000029 	.word	0x00000029
   17c88:	61766e49 	.word	0x61766e49
   17c8c:	2064696c 	.word	0x2064696c
   17c90:	75706e69 	.word	0x75706e69
   17c94:	6f702074 	.word	0x6f702074
   17c98:	65746e69 	.word	0x65746e69
   17c9c:	00000072 	.word	0x00000072
   17ca0:	6f497748 	.word	0x6f497748
   17ca4:	425f6241 	.word	0x425f6241
   17ca8:	657a7a75 	.word	0x657a7a75
   17cac:	6e495f72 	.word	0x6e495f72
   17cb0:	29287469 	.word	0x29287469
   17cb4:	00000000 	.word	0x00000000
   17cb8:	6f497748 	.word	0x6f497748
   17cbc:	425f6241 	.word	0x425f6241
   17cc0:	657a7a75 	.word	0x657a7a75
   17cc4:	65425f72 	.word	0x65425f72
   17cc8:	29287065 	.word	0x29287065
   17ccc:	00000000 	.word	0x00000000
   17cd0:	6f497748 	.word	0x6f497748
   17cd4:	425f6241 	.word	0x425f6241
   17cd8:	657a7a75 	.word	0x657a7a75
   17cdc:	74535f72 	.word	0x74535f72
   17ce0:	2928706f 	.word	0x2928706f
   17ce4:	00000000 	.word	0x00000000
   17ce8:	61766e49 	.word	0x61766e49
   17cec:	2064696c 	.word	0x2064696c
   17cf0:	7a7a7562 	.word	0x7a7a7562
   17cf4:	74207265 	.word	0x74207265
   17cf8:	00656e6f 	.word	0x00656e6f
   17cfc:	2075634d 	.word	0x2075634d
   17d00:	75646f6d 	.word	0x75646f6d
   17d04:	0000656c 	.word	0x0000656c
   17d08:	74616c50 	.word	0x74616c50
   17d0c:	6d726f66 	.word	0x6d726f66
   17d10:	646f6d20 	.word	0x646f6d20
   17d14:	00656c75 	.word	0x00656c75
   17d18:	74726f50 	.word	0x74726f50
   17d1c:	646f6d20 	.word	0x646f6d20
   17d20:	00656c75 	.word	0x00656c75
   17d24:	206f6944 	.word	0x206f6944
   17d28:	75646f6d 	.word	0x75646f6d
   17d2c:	0000656c 	.word	0x0000656c
   17d30:	206d7750 	.word	0x206d7750
   17d34:	75646f6d 	.word	0x75646f6d
   17d38:	0000656c 	.word	0x0000656c
   17d3c:	20636441 	.word	0x20636441
   17d40:	75646f6d 	.word	0x75646f6d
   17d44:	0000656c 	.word	0x0000656c
   17d48:	65686353 	.word	0x65686353
   17d4c:	656c7564 	.word	0x656c7564
   17d50:	6f6d2072 	.word	0x6f6d2072
   17d54:	656c7564 	.word	0x656c7564
   17d58:	00000000 	.word	0x00000000
   17d5c:	74747542 	.word	0x74747542
   17d60:	20736e6f 	.word	0x20736e6f
   17d64:	61204f49 	.word	0x61204f49
   17d68:	72747362 	.word	0x72747362
   17d6c:	69746361 	.word	0x69746361
   17d70:	6d206e6f 	.word	0x6d206e6f
   17d74:	6c75646f 	.word	0x6c75646f
   17d78:	00000065 	.word	0x00000065
   17d7c:	7364654c 	.word	0x7364654c
   17d80:	204f4920 	.word	0x204f4920
   17d84:	74736261 	.word	0x74736261
   17d88:	74636172 	.word	0x74636172
   17d8c:	206e6f69 	.word	0x206e6f69
   17d90:	75646f6d 	.word	0x75646f6d
   17d94:	0000656c 	.word	0x0000656c
   17d98:	73746f50 	.word	0x73746f50
   17d9c:	204f4920 	.word	0x204f4920
   17da0:	74736261 	.word	0x74736261
   17da4:	74636172 	.word	0x74636172
   17da8:	206e6f69 	.word	0x206e6f69
   17dac:	75646f6d 	.word	0x75646f6d
   17db0:	0000656c 	.word	0x0000656c
   17db4:	7a7a7542 	.word	0x7a7a7542
   17db8:	49207265 	.word	0x49207265
   17dbc:	6261204f 	.word	0x6261204f
   17dc0:	61727473 	.word	0x61727473
   17dc4:	6f697463 	.word	0x6f697463
   17dc8:	6f6d206e 	.word	0x6f6d206e
   17dcc:	656c7564 	.word	0x656c7564
   17dd0:	00000000 	.word	0x00000000
   17dd4:	6f727245 	.word	0x6f727245
   17dd8:	45203a72 	.word	0x45203a72
   17ddc:	726f7272 	.word	0x726f7272
   17de0:	206e6920 	.word	0x206e6920
   17de4:	69207325 	.word	0x69207325
   17de8:	7566206e 	.word	0x7566206e
   17dec:	6974636e 	.word	0x6974636e
   17df0:	25206e6f 	.word	0x25206e6f
   17df4:	69772073 	.word	0x69772073
   17df8:	74206874 	.word	0x74206874
   17dfc:	69206568 	.word	0x69206568
   17e00:	6174736e 	.word	0x6174736e
   17e04:	2065636e 	.word	0x2065636e
   17e08:	202c6425 	.word	0x202c6425
   17e0c:	000a7325 	.word	0x000a7325
   17e10:	6d726554 	.word	0x6d726554
   17e14:	6c616e69 	.word	0x6c616e69
   17e18:	00000000 	.word	0x00000000
   17e1c:	4c554e28 	.word	0x4c554e28
   17e20:	0000294c 	.word	0x0000294c

00017e24 <Clock_Ip_au8DividerCallbackIndex>:
   17e24:	0e0d0c00 06030201 0a070409 000b0805     ................

00017e34 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

00017e44 <Clock_Ip_au8XoscCallbackIndex>:
   17e44:	00000100 00000000 00000000 00000000     ................

00017e54 <Clock_Ip_au8IrcoscCallbackIndex>:
   17e54:	03020100 00000004 00000000 00000000     ................

00017e64 <Clock_Ip_au8GateCallbackIndex>:
   17e64:	06010200 01040301 00000500 00000000     ................

00017e74 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

00017e84 <Clock_Ip_au8PllCallbackIndex>:
   17e84:	00000100 00000000 00000000 00000000     ................

00017e94 <Clock_Ip_au8SelectorCallbackIndex>:
   17e94:	0a090800 03020109 07060504 00000000     ................

00017ea4 <Clock_Ip_au8PcfsCallbackIndex>:
	...

00017eb4 <Clock_Ip_au8CmuCallbackIndex>:
	...

00017ec4 <Clock_Ip_au8ClockFeatures>:
	...
   17ed4:	01000000 00000000 00000000 00000002     ................
   17ee4:	00000000 00000300 00000000 00040000     ................
   17ef4:	00000000 05000000 00000000 00000000     ................
   17f04:	00000006 00000000 00000100 00000000     ................
   17f14:	00010000 00000000 04000000 00000000     ................
   17f24:	00000000 00000005 00000001 00000401     ................
   17f34:	00000200 00050100 00030000 04020000     ................
   17f44:	04000000 02000000 00000005 00000005     ................
   17f54:	00000403 00000600 00050300 00070000     ................
   17f64:	05000000 00000000 00000000 00000006     ................
	...
   17fa4:	00050000 00000000 06000000 00000100     ................
   17fb4:	00000000 00030007 00000000 00000000     ................
   17fc4:	00000000 00060000 00000000 07000000     ................
   17fd4:	00000100 00000000 00030008 00000000     ................
	...
   17fec:	00090000 00000000 0a000000 00000100     ................
   17ffc:	00000000 0003000b 00000000 00000000     ................
   1800c:	00000000 000c0000 00000000 0d000000     ................
   1801c:	00000100 00000000 0003000e 00000000     ................
   1802c:	00000800 00000000 00090000 00000000     ................
   1803c:	0a000000 00000000 00000000 0000000b     ................
   1804c:	00000000 00000b01 00000000 000b0200     ................
   1805c:	00000000 0b030000 00000000 00000000     ................
	...
   18074:	00000400 003b003b 00040000 27002700     ....;.;......'.'
   18084:	01000000 00000000 00000000 00000007     ................
   18094:	00007300 00000700 00320000 00090000     .s........2.....
   180a4:	02000000 07000000 00000000 00000021     ............!...
   180b4:	00000009 00000400 00000900 00030000     ................
   180c4:	00070000 61000000 07000000 00000000     .......a........
   180d4:	00000024 00000007 00002500 00000700     $........%......
   180e4:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
   180f4:	00000000 00000020 38000004 00003800     .... ......8.8..
   18104:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
   18114:	04000000 00260000 00000026 66000004     ......&.&......f
   18124:	00006600 00000400 00370037 00040000     .f......7.7.....
   18134:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
   18144:	2e000004 00002e00 00000200 00404040     ............@@@.
   18154:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
   18164:	0000006b 6c000004 00006c00 00000900     k......l.l......
   18174:	00010000 00090000 00000000 07000000     ................
   18184:	00000000 00000036 00000007 00003100     ....6........1..
   18194:	00000700 00490000 00070000 4a000000     ......I........J
   181a4:	07000000 00000000 0000004b 00000007     ........K.......
   181b4:	00004c00 00000700 004d0000 00070000     .L........M.....
   181c4:	3d000000 03000000 00000000 00000000     ...=............

000181d4 <Clock_Ip_au16SelectorEntryHardwareValue>:
   181d4:	01010a03 01010001 04040002 02000603     ................
   181e4:	00010810 02020100 00000000 00000007     ................
   181f4:	00000009 00000000 00000c0e 00000000     ................
	...

0001822c <Clock_Ip_au8SelectorEntryScsHardwareValue>:
   1822c:	00020000 00000300 00000601 00000000     ................
	...

0001825c <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
   1825c:	00000700 00000000 02020000 01010303     ................
   1826c:	03020606 00000000 00000000 00000000     ................
	...

0001828c <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
   1828c:	00000001 00000000 02020000 01010303     ................
   1829c:	03020606 00000000 00000000 00000000     ................
	...

000182bc <Clock_Ip_au8DividerValueHardwareValue>:
   182bc:	00020100 00000003 00000004 00000000     ................
   182cc:	00000005 00000000 00000000 00000000     ................
   182dc:	00000006 00000000 00000000 00000000     ................
	...
   182fc:	00000007                                ....

00018300 <Clock_Ip_apxScgPeriphAsyncDivs>:
   18300:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

00018310 <Clock_Ip_aeSourceTypeClockName>:
   18310:	00000000 00000001 00000001 00000001     ................
   18320:	00000001 00000001 00000001 00000001     ................
   18330:	00000002 00000003 00000001 00000001     ................
   18340:	00000001 00000001 00000002 00000002     ................
   18350:	00000003 00000003 00000001 00000001     ................
   18360:	00000004 00000004 00000004 00000004     ................
	...

000183cc <Clock_Ip_aeHwPllName>:
   183cc:	00000009                                ....

000183d0 <Clock_Ip_aeHwDfsName>:
   183d0:	00000057                                W...

000183d4 <Clock_Ip_axDividerCallbacks>:
   183d4:	00002f75 00002f7f 00002f99 00002fb3     u/.../.../.../..
   183e4:	00002fcd 00002fe7 00003001 0000301b     ./.../...0...0..
   183f4:	00003035 0000304f 00003069 00003083     50..O0..i0...0..
   18404:	0000309d 000030b7 000030d1              .0...0...0..

00018410 <Clock_Ip_axDividerTriggerCallbacks>:
   18410:	00003445 00003445                       E4..E4..

00018418 <Clock_Ip_axExtOscCallbacks>:
   18418:	00003451 00003451 00003451 0000345b     Q4..Q4..Q4..[4..
   18428:	00003451 00003465 0000347f 00003499     Q4..e4...4...4..
   18438:	0000351d 00003531                       .5..15..

00018440 <Clock_Ip_axFracDivCallbacks>:
   18440:	000036f1 000036f1 000036fb              .6...6...6..

0001844c <Clock_Ip_axGateCallbacks>:
   1844c:	00003715 0000371f 0000381f 00003839     .7...7...8..98..
   1845c:	000037cf 000037e9 0000377f 00003799     .7...7...7...7..
   1846c:	0000372f 00003749 0000386f 00003889     /7..I7..o8...8..
   1847c:	000038bf 000038d9                       .8...8..

00018484 <Clock_Ip_axIntOscCallbacks>:
   18484:	00003a85 00003a85 00003a8f 00003a99     .:...:...:...:..
   18494:	00003ab3 00003acd 00003ae1 00003afb     .:...:...:...:..
   184a4:	00003b15 00003b29 00003b43 00003b5d     .;..);..C;..];..
   184b4:	00003c05 00003c1f 00003c39              .<...<..9<..

000184c0 <Clock_Ip_axCmuCallbacks>:
   184c0:	000041d5 000041df 000041eb 000041d5     .A...A...A...A..

000184d0 <Clock_Ip_axPllCallbacks>:
   184d0:	000041f5 000041f5 000041ff 000041f5     .A...A...A...A..
   184e0:	0000420b 00004215 0000422f 00004249     .B...B../B..IB..
   184f0:	000042ed 000042d9                       .B...B..

000184f8 <Clock_Ip_axPcfsCallbacks>:
   184f8:	00004449                                ID..

000184fc <Clock_Ip_axSelectorCallbacks>:
   184fc:	00004455 00004455 0000445f 00004479     UD..UD.._D..yD..
   1850c:	00004455 00004493 000044ad 000044c7     UD...D...D...D..
   1851c:	000044e1 000044fb 00004515 0000452f     .D...D...E../E..
   1852c:	00004549 00004563 0000457d 00004597     IE..cE..}E...E..
   1853c:	000045b1 000045cb 000045e5 000045ff     .E...E...E...E..
   1854c:	00004619 00004633                       .F..3F..

00018554 <ClockSource>:
   18554:	00000000 00000008 00000002 00000005     ................
	...
   1856c:	00000009                                ....

00018570 <ResetReasonArray>:
   18570:	00000000 00000001 00000002 00000003     ................
   18580:	00000004 00000005 00000006 00000007     ................
   18590:	00000008 00000009 0000000a 0000000b     ................
   185a0:	0000000c 0000000d 0000000e              ............

000185ac <Port_au32PortCiPortBaseAddr>:
   185ac:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
   185bc:	4004d000                                ...@

000185c0 <Port_au32PortCiGpioBaseAddr>:
   185c0:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
   185d0:	400ff100                                ...@

000185d4 <Adc_Ip_apxBase>:
   185d4:	4003b000 40027000                       ...@.p.@

000185dc <Lpspi_Ip_apxBases>:
   185dc:	4002c000 4002d000 4002e000              ...@...@...@

000185e8 <Can_Ipw_apxStatus>:
   185e8:	1fff8e18 1fff9038                       ....8...

000185f0 <Flexcan_Ip_apxBase>:
   185f0:	40024000 40025000 4002b000              .@.@.P.@...@

000185fc <payload_code.3>:
   185fc:	03020100 07060504 09090908 0a0a0a09     ................
   1860c:	0b0b0b0a 0c0c0c0b 0d0d0d0c 0d0d0d0d     ................
   1861c:	0e0e0e0d 0e0e0e0e 0e0e0e0e 0e0e0e0e     ................
   1862c:	0f0f0f0e 0f0f0f0f 0f0f0f0f 0f0f0f0f     ................
   1863c:	0000000f                                ....

00018640 <flexcanBase.2>:
   18640:	40024000 40025000 4002b000              .@.@.P.@...@

0001864c <maxMbNum.1>:
   1864c:	00000020 00000010 00000010               ...........

00018658 <flexcanBase.0>:
   18658:	40024000                                .@.@

0001865c <McuApis>:
   1865c:	00000000 0001743c 00000002 00017448     ....<t......Ht..
   1866c:	00000008 00017458 00000009 00017468     ....Xt......ht..

0001867c <McuErrors>:
   1867c:	00000011 00017480 0000000f 00017498     .....t.......t..
   1868c:	00000013 000174b0 0000000b 000174cc     .....t.......t..
   1869c:	0000000c 000174cc 00000010 000174cc     .....t.......t..

000186ac <PlatformApis>:
   186ac:	00000020 000174e4 00000021 000174f4      ....t..!....t..
   186bc:	00000022 00017508 00000023 00017524     "....u..#...$u..
   186cc:	00000024 00017540                       $...@u..

000186d4 <PlatformErrors>:
   186d4:	00000001 00017560 00000004 00017570     ....`u......pu..
   186e4:	00000002 00017594                       .....u..

000186ec <PortApis>:
   186ec:	00000000 000175ac 00000001 000175b8     .....u.......u..
   186fc:	00000004 000175d0 00000002 000175e4     .....u.......u..
   1870c:	00000003 00017600                       .....v..

00018714 <PortErrors>:
   18714:	0000000a 00017618 0000000e 0001762c     .....v......,v..
   18724:	0000000c 00017480 000000f0 00017480     .....t.......t..
   18734:	0000000d 0001764c 0000000f 00017498     ....Lv.......t..
   18744:	00000010 000174cc                       .....t..

0001874c <DioApis>:
   1874c:	00000001 00017664 00000000 00017678     ....dv......xv..
   1875c:	00000011 0001768c 00000005 000176a0     .....v.......v..
   1876c:	00000004 000176b8 00000003 000176d0     .....v.......v..
   1877c:	00000002 000176e0 00000012 000176f0     .....v.......v..

0001878c <DioErrors>:
   1878c:	00000021 00017708 00000020 000174cc     !....w.. ....t..
   1879c:	0000000a 00017724 00000014 0001773c     ....$w......<w..
   187ac:	0000001f 0001774c 000000f0 00017768     ....Lw......hw..

000187bc <PwmApis>:
   187bc:	00000000 00017784 00000001 00017790     .....w.......w..
   187cc:	00000002 000177a0 00000003 000177b4     .....w.......w..
   187dc:	00000004 000177cc 00000008 000177e4     .....w.......w..

000187ec <PwmErrors>:
   187ec:	00000010 000177fc 00000011 00017498     .....w.......t..
   187fc:	00000014 000174b0 00000012 00017814     .....t.......x..
   1880c:	00000013 00017828 00000015 000174cc     ....(x.......t..

0001881c <AdcApis>:
   1881c:	00000000 0001784c 00000001 00017858     ....Lx......Xx..
   1882c:	00000002 00017868 00000003 00017884     ....hx.......x..
   1883c:	00000004 000178a0 00000009 000178b0     .....x.......x..
   1884c:	00000029 000178c8 0000000c 000178d8     )....x.......x..
   1885c:	0000000a 000178f0                       .....x..

00018864 <AdcErrors>:
   18864:	0000000a 00017498 0000000d 000174b0     .....t.......t..
   18874:	00000014 00017560 00000015 00017908     ....`u.......y..
   18884:	00000019 0001791c 0000002b 0001793c     .....y..+...<y..

00018894 <SchedulerApis>:
   18894:	00000000 0001795c 00000002 00017970     ....\y......py..
   188a4:	00000003 0001798c 00000004 000179a4     .....y.......y..
   188b4:	00000005 000179bc 00000006 000179d4     .....y.......y..
   188c4:	00000007 000179ec 00000008 00017a04     .....y.......z..
   188d4:	00000009 00017a1c 0000000a 00017a34     .....z......4z..
   188e4:	0000000b 00017a4c 0000000c 00017a64     ....Lz......dz..
   188f4:	0000000d 00017a7c                       ....|z..

000188fc <SchedulerErrors>:
   188fc:	00000000 000177fc 00000001 00017a98     .....w.......z..
   1890c:	00000002 00017ab0 00000003 00017acc     .....z.......z..
   1891c:	00000004 00017ae4 00000005 00017b08     .....z.......{..
   1892c:	00000006 00017b20                       .... {..

00018934 <HwIoAb_ButtonsApis>:
   18934:	00000000 00017b38 00000001 00017b50     ....8{......P{..
   18944:	00000002 00017b6c                       ....l{..

0001894c <HwIoAb_ButtonsErrors>:
   1894c:	00000000 000177fc 00000001 00017b8c     .....w.......{..
   1895c:	00000002 00017ba0 00000003 00017bb8     .....{.......{..

0001896c <HwIoAb_LedsApis>:
   1896c:	00000000 00017bd0 00000001 00017be4     .....{.......{..
   1897c:	00000002 00017bfc 00000003 00017c14     .....{.......|..

0001898c <HwIoAb_LedsErrors>:
   1898c:	00000000 000177fc 00000001 00017c30     .....w......0|..
   1899c:	00000002 00017bb8                       .....{..

000189a4 <HwIoAb_PotsApis>:
   189a4:	00000000 00017c40 00000001 00017c54     ....@|......T|..
   189b4:	00000002 00017c6c                       ....l|..

000189bc <HwIoAb_PotsErrors>:
   189bc:	00000000 00017c88 00000001 00017bb8     .....|.......{..

000189cc <HwIoAb_BuzzerApis>:
   189cc:	00000000 00017ca0 00000001 00017cb8     .....|.......|..
   189dc:	00000002 00017cd0                       .....|..

000189e4 <HwIoAb_BuzzerErrors>:
   189e4:	00000000 00017ce8                       .....|..

000189ec <ModuleStrings>:
   189ec:	00000065 00017cfc 00000004 0001865c     e....|......\...
   189fc:	00000006 0001867c 000000ff 00017d08     ....|........}..
   18a0c:	00000005 000186ac 00000003 000186d4     ................
   18a1c:	0000007c 00017d18 00000005 000186ec     |....}..........
   18a2c:	00000007 00018714 00000078 00017d24     ........x...$}..
   18a3c:	00000008 0001874c 00000006 0001878c     ....L...........
   18a4c:	00000079 00017d30 00000006 000187bc     y...0}..........
   18a5c:	00000006 000187ec 0000007b 00017d3c     ........{...<}..
   18a6c:	00000009 0001881c 00000006 00018864     ............d...
   18a7c:	0000012c 00017d48 0000000d 00018894     ,...H}..........
   18a8c:	00000007 000188fc 0000012d 00017d5c     ........-...\}..
   18a9c:	00000003 00018934 00000004 0001894c     ....4.......L...
   18aac:	0000012e 00017d7c 00000004 0001896c     ....|}......l...
   18abc:	00000003 0001898c 0000012f 00017d98     ......../....}..
   18acc:	00000003 000189a4 00000002 000189bc     ................
   18adc:	00000130 00017db4 00000003 000189cc     0....}..........
   18aec:	00000001 000189e4                       ........

00018af4 <Can_43_FLEXCAN_Driver_P2Func>:
   18af4:	0000a6f1 0000a36d 0000a511 0000a4b1     ....m...........
   18b04:	0000a589 0000a615 0000a649 0000a69d     ........I.......

00018b14 <Can_43_FLEXCAN_Driver_Config>:
   18b14:	00040000 00018af4                       ........

00018b1c <CanIf_CtrlPCConfig>:
   18b1c:	00000000 00018b14 00000101 00018b14     ................

00018b2c <CanIf_PCConfig>:
   18b2c:	00000002 00018b1c                       ........

00018b34 <CanIf_TxPdu>:
   18b34:	00000000 00000100 00000002 00010002     ................
   18b44:	000009d1 00000001 00000300 00000002     ................
   18b54:	00000003 00000a75                       ....u...

00018b5c <CanIf_RxPdu>:
   18b5c:	00010000 00010003 00000a09 00010001     ................
   18b6c:	00000003 00000aad                       ........

00018b74 <CanIf_Can_43_FLEXCAN_HohToRxPduMapping>:
   18b74:	00018b5c 00018b68 00000000 00000000     \...h...........

00018b84 <CanIf_Can_43_FLEXCAN_DrvConfig>:
   18b84:	00018b74                                t...

00018b88 <CanIf_CanDrvConfig>:
   18b88:	00018b84                                ....

00018b8c <CanIf_Config>:
   18b8c:	00000202 00018b88 00018b5c 00018b34     ........\...4...

00018b9c <Can_43_FLEXCANIpwHwChannelConfig0>:
   18b9c:	00019114                                ....

00018ba0 <Can_43_FLEXCANIpwHwChannelConfig1>:
   18ba0:	00019164                                d...

00018ba4 <Can_au32HwBufferAddr_Ctrl0>:
   18ba4:	4002b080 4002b090                       ...@...@

00018bac <Can_au32HwBufferAddr_Ctrl1>:
   18bac:	40024080 40024090                       .@.@.@.@

00018bb4 <Can_aHwFilter_Object0>:
   18bb4:	00000200 dffc0000                       ........

00018bbc <Can_aHwFilter_Object1>:
   18bbc:	00000400 dffc0000                       ........

00018bc4 <Can_aCtrlOffsetToCtrlIDMap>:
   18bc4:	0000ff01                                ....

00018bc8 <Can_aHwObjIDToCtrlIDMap>:
   18bc8:	00010001                                ....

00018bcc <Can_aHwObjectConfig>:
	...
   18bd8:	ff010000 00010008 00018bb4 00000000     ................
   18be8:	00000000 00018bac 00000001 00000000     ................
   18bf8:	00000000 ff010000 00010008 00018bbc     ................
	...
   18c10:	00018ba4 00000002 00000001 00000000     ................
   18c20:	ff010000 00000008 00000000 00000003     ................
   18c30:	00000001 00018bb0 00000003 00000001     ................
   18c40:	00000000 ff010000 00000008 00000000     ................
   18c50:	00000003 00000001 00018ba8              ............

00018c5c <Can_aBaudrateConfig_Ctrl0>:
   18c5c:	06030000 001d0003 00000000 00000000     ................
	...

00018c74 <Can_apHwObject_Ctrl0>:
   18c74:	00018bf0 00018c38                       ....8...

00018c7c <Can_aBaudrateConfig_Ctrl1>:
   18c7c:	06030000 001d0003 00000000 00000000     ................
	...

00018c94 <Can_apHwObject_Ctrl1>:
   18c94:	00018bcc 00018c14                       ........

00018c9c <Can_aControllerConfig>:
   18c9c:	00020000 4002b000 00000001 ffffffff     .......@........
	...
   18cb8:	00010000 00018c5c 00018b9c 00000002     ....\...........
   18cc8:	00018c74 00000101 40024000 00000001     t........@.@....
   18cd8:	ffffffff 00000000 00000000 00000000     ................
   18ce8:	00010000 00018c7c 00018ba0 00000002     ....|...........
   18cf8:	00018c94                                ....

00018cfc <Can_apController>:
   18cfc:	00018c9c 00018ccc                       ........

00018d04 <Can_43_FLEXCAN_Config>:
   18d04:	00000000 00000002 00018bc4 00018bc8     ................
   18d14:	00018bcc 00018cfc                       ........

00018d1c <Mcu_aClockConfigPB>:
	...
   18d24:	14000002 0400000e 01000020 00000002     ........ .......
   18d34:	01000001 00000001 00000005 00000001     ................
   18d44:	00000000 00000057 00000000 00000000     ....W...........
	...
   18d5c:	00000057 00000000 00000057 00000000     W.......W.......
	...
   18d84:	00000019 00000005 0000001a 00000002     ................
   18d94:	0000001b 00000005 0000002a 00000002     ........*.......
   18da4:	0000003f 0000000a 00000040 0000000a     ?.......@.......
   18db4:	00000041 00000000 00000042 00000000     A.......B.......
   18dc4:	00000031 0000000b 00000045 00000000     1.......E.......
   18dd4:	00000046 0000000b 00000047 00000000     F.......G.......
   18de4:	00000044 00000000 00000030 0000000b     D.......0.......
   18df4:	0000003d 00000000 00000043 00000000     =.......C.......
   18e04:	00000049 00000000 0000004a 00000000     I.......J.......
   18e14:	0000004b 00000000 00000048 00000000     K.......H.......
   18e24:	00000057 00000057 00000057 00000057     W...W...W...W...
   18e34:	00000057 00000057 00000057 00000057     W...W...W...W...
   18e44:	00000057 00000057 00000057 00000057     W...W...W...W...
   18e54:	00000057 00000057 00000057 00000057     W...W...W...W...
   18e64:	0000000a 00000001 00000000 0000000b     ................
   18e74:	00000001 00000000 0000000c 00000001     ................
   18e84:	00000000 0000000d 00000002 00000000     ................
   18e94:	0000001d 00000001 00000000 0000001e     ................
   18ea4:	00000002 00000000 0000001f 00000001     ................
   18eb4:	00000000 00000021 00000001 00000000     ....!...........
   18ec4:	00000022 00000002 00000000 00000023     "...........#...
   18ed4:	00000001 00000000 00000025 00000002     ........%.......
   18ee4:	00000000 00000026 00000004 00000000     ....&...........
   18ef4:	00000027 00000002 00000000 00000048     '...........H...
   18f04:	00000001 00000001 00000057 00000000     ........W.......
   18f14:	00000000 00000057 00000000 00000000     ....W...........
   18f24:	00000057 00000000 00000000 00000057     W...........W...
	...
   18f3c:	00000057 00000000 00000000 00000057     W...........W...
	...
   18f54:	00000057 00000000 00000057 00000057     W.......W...W...
	...
   18f70:	00000014 00007d00 00000015 00007d00     .....}.......}..
   18f80:	00000016 00007d00 00000017 00008000     .....}..........
   18f90:	00000030 00000001 00000031 00000001     0.......1.......
   18fa0:	00000033 00000000 00000034 00000000     3.......4.......
   18fb0:	00000036 00000000 00000039 00000000     6.......9.......
   18fc0:	0000003a 00000001 0000003b 00000000     :.......;.......
   18fd0:	0000003c 00000001 0000003d 00000000     <.......=.......
   18fe0:	0000003e 00000000 0000003f 00000000     >.......?.......
   18ff0:	00000040 00000001 00000041 00000000     @.......A.......
   19000:	00000042 00000000 00000043 00000000     B.......C.......
   19010:	00000044 00000000 00000045 00000000     D.......E.......
   19020:	00000046 00000001 00000047 00000000     F.......G.......
   19030:	00000048 00000000 00000049 00000000     H.......I.......
   19040:	0000004a 00000000 0000004b 00000000     J.......K.......
   19050:	0000004e 00000001 0000004f 00000001     N.......O.......
   19060:	00000050 00000001 00000051 00000001     P.......Q.......
   19070:	00000052 00000001 00000053 00000001     R.......S.......
   19080:	00000054 00000001 00000055 00000000     T.......U.......
   19090:	00000057 00000000 00000057 00000000     W.......W.......
   190a0:	00000057 00000000 00000057 00000000     W.......W.......
   190b0:	00000057 00000000 00000057 00000000     W.......W.......
   190c0:	00000057 00000000 00000057 00000000     W.......W.......
   190d0:	00000057 00000000 00000057 00000000     W.......W.......
   190e0:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00019114 <Flexcan_aCtrlConfigPB>:
   19114:	00000002 00000000 00000000 00000000     ................
   19124:	00000040 00000000 00000100 00000003     @...............
   19134:	00000006 00000003 0000001d 00000000     ................
   19144:	00000004 00000006 00000003 0000001d     ................
	...
   1915c:	0000b8f1 0000b99d 00000002 00000000     ................
	...
   19174:	00000040 00000000 00000100 00000003     @...............
   19184:	00000006 00000003 0000001d 00000000     ................
   19194:	00000004 00000006 00000003 0000001d     ................
	...
   191ac:	0000b8f1 0000b99d                       ........

000191b4 <aIrqConfiguration>:
   191b4:	00000027 00000000 00008405 00000028     '...........(...
   191c4:	00000000 00008415 0000005c 00000f01     ........\.......
   191d4:	0000fe1d 0000005d 00000f01 0000fe2d     ....].......-...
   191e4:	0000005f 00000f01 0000fe3d 0000004e     _.......=...N...
   191f4:	00000f01 0000fd8d 0000004f 00000f01     ........O.......
   19204:	0000fd9d 00000051 00000f01 0000fdad     ....Q...........

00019214 <intCtrlConfig>:
   19214:	00000008 000191b4                       ........

0001921c <Lpspi_Ip_DeviceAttributes_Conf0Spi1Cs3>:
   1921c:	00000001 07070606 43200000 1fff8b28     .......... C(...

0001922c <Lpspi_Ip_PhyUnitConfig_SPI1>:
   1922c:	00000001 00000000 00000001 00000000     ................
   1923c:	00000000                                ....

00019240 <Mcu_Config>:
   19240:	0000005a 00000000 00000001 00000001     Z...............
   19250:	000198dc 00018d1c 000198e8              ............

0001925c <OsIf_xPredefinedConfig>:
   1925c:	00000000 02dc6c00                       .....l..

00019264 <OsIf_apxPredefinedConfig>:
   19264:	0001925c                                \...

00019268 <Platform_uConfiguration>:
   19268:	00019270                                p...

0001926c <Platform_Config>:
   1926c:	00019268                                h...

00019270 <ipwConfig>:
   19270:	00019214 00000000                       ........

00019278 <Port_au16PinDescription>:
   19278:	0003ffff 0003ffff 0003ffff 0003ffff     ................
   19288:	0001ffff 0003ffff 0003ffff 0003ffff     ................
   19298:	0003ffff 0001ffff 0003ffcf 0003ffff     ................
   192a8:	0003ffff 0003fcff 0001dfef 0003f36f     ............o...
   192b8:	0003fe3f 0003f3ff 00026e3f 0001bebf     ?.......?n......
   192c8:	0002cf9f 0000302f 000030cc 000183ef     ..../0...0......
   192d8:	0001ec7c 00000b1f 00000023 00000010     |.......#.......
   192e8:	0001010c 00000033 000072cf 0000003c     ....3....r..<...
   192f8:	0000cff3 00001b2f 00018c7f 00000433     ..../.......3...
   19308:	00000000 00000030 0000600b 00018c38     ....0....`..8...

00019318 <g_pin_mux_InitConfigArr>:
   19318:	4004b000 400ff080 00000008 00000002     ...@...@........
   19328:	00000001 00000002 00000000 00000000     ................
	...
   19340:	4004b000 400ff080 00000009 00000002     ...@...@........
   19350:	00000001 00000002 00000000 00000000     ................
	...
   19368:	4004b000 400ff080 0000000a 00000002     ...@...@........
   19378:	00000001 00000002 00000000 00000000     ................
	...
   19390:	4004b000 400ff080 0000000b 00000002     ...@...@........
   193a0:	00000001 00000002 00000000 00000000     ................
	...
   193b8:	4004b000 400ff080 0000000d 00000002     ...@...@........
   193c8:	00000001 00000002 00000000 00000000     ................
	...
   193e0:	4004b000 400ff080 0000000e 00000002     ...@...@........
   193f0:	00000001 00000002 00000000 00000000     ................
	...
   19408:	4004b000 00000000 00000010 00000002     ...@............
   19418:	00000003 00000001 00000000 00000000     ................
	...
   19430:	4004b000 00000000 00000011 00000002     ...@............
   19440:	00000003 00000002 00000000 00000000     ................
	...
   19458:	4004d000 400ff100 0000000c 00000002     ...@...@........
   19468:	00000001 00000001 00000000 00000000     ................
	...
   19480:	4004d000 00000000 00000004 00000002     ...@............
   19490:	00000005 00000001 00000000 00000000     ................
	...
   194a8:	4004d000 00000000 00000005 00000002     ...@............
   194b8:	00000005 00000002 00000000 00000000     ................
	...
   194d0:	4004c000 400ff0c0 00000011 00000002     ...@...@........
   194e0:	00000001 00000001 00000000 00000000     ................
	...
   194f8:	40049000 400ff000 0000000c 00000002     ...@...@........
   19508:	00000001 00000001 00000000 00000000     ................
	...
   19520:	40049000 00000000 0000000d 00000002     ...@............
   19530:	00000002 00000002 00000000 00000000     ................
	...
   19548:	4004a000 00000000 00000001 00000002     ...@............
   19558:	00000000 00000001 00000000 00000000     ................
	...
   19570:	4004a000 00000000 0000000d 00000002     ...@............
   19580:	00000000 00000001 00000000 00000000     ................
	...
   19598:	4004a000 00000000 0000000e 00000002     ...@............
   195a8:	00000003 00000002 00000000 00000000     ................
	...
   195c0:	4004a000 00000000 0000000f 00000002     ...@............
   195d0:	00000003 00000001 00000000 00000000     ................
	...
   195e8:	4004a000 00000000 00000010 00000002     ...@............
   195f8:	00000003 00000002 00000000 00000000     ................
	...
   19610:	4004a000 00000000 00000011 00000002     ...@............
   19620:	00000003 00000002 00000000 00000000     ................
	...

00019638 <au8Port_PartitionList>:
   19638:	00000001                                ....

0001963c <au32Port_PinToPartitionMap>:
   1963c:	00000001 00000001 00000001 00000001     ................
   1964c:	00000001 00000001 00000001 00000001     ................
   1965c:	00000001 00000001 00000001 00000001     ................
   1966c:	00000001 00000001 00000001 00000001     ................
   1967c:	00000001 00000001 00000001 00000001     ................

0001968c <Port_au16NoUnUsedPadsArrayDefault>:
   1968c:	00010000 00030002 00070006 00090008     ................
   1969c:	000e000b 0010000f 00200011 00230022     .......... .".#.
   196ac:	00250024 00270026 00290028 002b002a     $.%.&.'.(.).*.+.
   196bc:	0040002c 00420041 00460043 004c0047     ,.@.A.B.C.F.G.L.
   196cc:	0060004f 00620061 00640063 00660065     O.`.a.b.c.d.e.f.
   196dc:	00680067 006a0069 006c006b 006e006d     g.h.i.j.k.l.m.n.
   196ec:	0070006f 00810080 00830082 00870086     o.p.............
   196fc:	00890088 008b008a 008e008d 0090008f     ................

0001970c <Port_UnUsedPin>:
   1970c:	00000000 00000001 00000000              ............

00019718 <Port_aPinConfigDefault>:
   19718:	00000048 00000100 00000000 00000002     H...............
   19728:	00010001 00000049 00000100 00000000     ....I...........
   19738:	00000002 00010101 0000004a 00000100     ........J.......
   19748:	00000000 00000002 00010101 0000008c     ................
   19758:	00000100 00000000 00000001 00010101     ................
   19768:	0000004b 00000100 00000000 00000002     K...............
   19778:	00010101 0000004d 00000100 00000000     ....M...........
   19788:	00000002 00010101 0000004e 00000100     ........N.......
   19798:	00000000 00000002 00010101 00000071     ............q...
   197a8:	00000100 00000000 00000001 00010101     ................
   197b8:	0000000c 00000100 00000000 00000001     ................
   197c8:	00010101 00000021 00000000 00000002     ....!...........
   197d8:	00000000 00010000 0000002d 00000000     ........-.......
   197e8:	00000002 00000000 00010000 0000000d     ................
   197f8:	00000200 00000000 00000002 00010000     ................
   19808:	00000050 00000300 00000000 00000001     P...............
   19818:	00010000 00000051 00000300 00000000     ....Q...........
   19828:	00000002 00010000 0000002e 00000300     ................
   19838:	00000000 00000002 00010000 0000002f     ............/...
   19848:	00000300 00000000 00000001 00010000     ................
   19858:	00000030 00000300 00000000 00000002     0...............
   19868:	00010000 00000031 00000300 00000000     ....1...........
   19878:	00000002 00010000 00000084 00000500     ................
   19888:	00000000 00000001 00010000 00000085     ................
   19898:	00000500 00000000 00000002 00010000     ................

000198a8 <Port_Config>:
   198a8:	00400014 0001968c 0001970c 00019718     ..@.............
	...
   198c0:	0001963c 00019638 00019318              <...8.......

000198cc <Power_Ip_RCM_ConfigPB>:
	...

000198d4 <Power_Ip_PMC_ConfigPB>:
   198d4:	00000000                                ....

000198d8 <Power_Ip_SMC_ConfigPB>:
   198d8:	00000000                                ....

000198dc <Power_Ip_aModeConfigPB>:
	...

000198e8 <Power_Ip_HwIPsConfigPB>:
   198e8:	000198cc 000198d4 000198d8              ............

000198f4 <Spi_ExternalDeviceConfig_Conf0Spi1Cs3>:
   198f4:	00000000 00000001 0001921c 00000000     ................

00019904 <Spi_aExternalDeviceConfigList>:
   19904:	000198f4                                ....

00019908 <Spi_HwUnitConfig_SPI1>:
   19908:	00000000 00000001 00000000 0001922c     ............,...
   19918:	00000001                                ....

0001991c <Spi_aHwUnitConfigList>:
   1991c:	00019908                                ....

00019920 <Spi_ChannelConfig_Spi1Cs3_Control>:
   19920:	00000001 00000008 00000001 00000004     ................
   19930:	1fff98f8 00000000 1fff8df8              ............

0001993c <Spi_ChannelConfig_Spi1Cs3_Data>:
   1993c:	00000001 00000008 00000001 00000004     ................
   1994c:	1fff9904 00000000 1fff8dfc              ............

00019958 <Spi_aChannelConfigList>:
   19958:	00019920 0001993c                        ...<...

00019960 <Spi_Spi1Cs3_W_R_Job_ChannelAssignment>:
   19960:	00000100                                ....

00019964 <Spi_JobConfig_Spi1Cs3_W_R_Job>:
   19964:	00000002 00019960 00000000 00000000     ....`...........
	...
   1997c:	1fff8df4 00000000 00019904              ............

00019988 <Spi_aJobConfigList>:
   19988:	00019964                                d...

0001998c <Spi_Spi1Cs3_Sequence_W_R_JobAssignment>:
   1998c:	00000000                                ....

00019990 <Spi_SequenceConfig_Spi1Cs3_Sequence_W_R>:
   19990:	00000001 00000000 0001998c 00000000     ................
   199a0:	00000000                                ....

000199a4 <Spi_aSequenceConfigList>:
   199a4:	00019990                                ....

000199a8 <Spi_Config>:
   199a8:	00010001 00000000 00000000 00019958     ............X...
   199b8:	00019988 000199a4 00019904 0001991c     ................

000199c8 <_aInitStr.0>:
   199c8:	00000000 54540000 45522052 53454747     ......TTR REGGES
   199d8:	00000000                                ....

000199dc <_aV2C.0>:
   199dc:	33323130 37363534 42413938 46454443     0123456789ABCDEF

000199ec <__INIT_TABLE>:
   199ec:	00000002 	.word	0x00000002
   199f0:	1fff8b10 	.word	0x1fff8b10
   199f4:	00019a14 	.word	0x00019a14
   199f8:	00019a34 	.word	0x00019a34
   199fc:	1fff8800 	.word	0x1fff8800
   19a00:	00000000 	.word	0x00000000
   19a04:	00000310 	.word	0x00000310

00019a08 <__ZERO_TABLE>:
   19a08:	00000001 	.word	0x00000001
   19a0c:	1fff8b30 	.word	0x1fff8b30
   19a10:	1fff9dd0 	.word	0x1fff9dd0
