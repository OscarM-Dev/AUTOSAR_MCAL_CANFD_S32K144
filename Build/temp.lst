
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000cdf 	.word	0x00000cdf
  10:	00000ce1 	.word	0x00000ce1
  14:	00000ce3 	.word	0x00000ce3
  18:	00000ce5 	.word	0x00000ce5
	...
  2c:	00000ce7 	.word	0x00000ce7
  30:	00000ce9 	.word	0x00000ce9
  34:	00000000 	.word	0x00000000
  38:	00000ceb 	.word	0x00000ceb
  3c:	00000ced 	.word	0x00000ced
  40:	00000cef 	.word	0x00000cef
  44:	00000cef 	.word	0x00000cef
  48:	00000cef 	.word	0x00000cef
  4c:	00000cef 	.word	0x00000cef
  50:	00000cef 	.word	0x00000cef
  54:	00000cef 	.word	0x00000cef
  58:	00000cef 	.word	0x00000cef
  5c:	00000cef 	.word	0x00000cef
  60:	00000cef 	.word	0x00000cef
  64:	00000cef 	.word	0x00000cef
  68:	00000cef 	.word	0x00000cef
  6c:	00000cef 	.word	0x00000cef
  70:	00000cef 	.word	0x00000cef
  74:	00000cef 	.word	0x00000cef
  78:	00000cef 	.word	0x00000cef
  7c:	00000cef 	.word	0x00000cef
  80:	00000cef 	.word	0x00000cef
  84:	00000cef 	.word	0x00000cef
  88:	00000cef 	.word	0x00000cef
  8c:	00000cef 	.word	0x00000cef
  90:	00000cef 	.word	0x00000cef
  94:	00000cef 	.word	0x00000cef
  98:	00000cef 	.word	0x00000cef
  9c:	00000cef 	.word	0x00000cef
  a0:	00000cef 	.word	0x00000cef
  a4:	00000cef 	.word	0x00000cef
  a8:	00000cef 	.word	0x00000cef
  ac:	00000cef 	.word	0x00000cef
  b0:	00000cef 	.word	0x00000cef
  b4:	00000cef 	.word	0x00000cef
  b8:	00000cef 	.word	0x00000cef
  bc:	00000cef 	.word	0x00000cef
  c0:	00000cef 	.word	0x00000cef
  c4:	00000cef 	.word	0x00000cef
  c8:	00000cef 	.word	0x00000cef
  cc:	00000cef 	.word	0x00000cef
  d0:	00000cef 	.word	0x00000cef
  d4:	00000cef 	.word	0x00000cef
  d8:	00000cef 	.word	0x00000cef
  dc:	00000cef 	.word	0x00000cef
  e0:	00000cef 	.word	0x00000cef
  e4:	00000cef 	.word	0x00000cef
  e8:	00000cef 	.word	0x00000cef
  ec:	00000cef 	.word	0x00000cef
  f0:	00000cef 	.word	0x00000cef
  f4:	00000cef 	.word	0x00000cef
  f8:	00000cef 	.word	0x00000cef
  fc:	00000cef 	.word	0x00000cef
 100:	00000cef 	.word	0x00000cef
 104:	00000cef 	.word	0x00000cef
 108:	00000cef 	.word	0x00000cef
 10c:	00000cef 	.word	0x00000cef
 110:	00000cef 	.word	0x00000cef
 114:	00000cef 	.word	0x00000cef
 118:	00000cef 	.word	0x00000cef
 11c:	00000cef 	.word	0x00000cef
 120:	00000cef 	.word	0x00000cef
 124:	00000cef 	.word	0x00000cef
 128:	00000cef 	.word	0x00000cef
 12c:	00000cef 	.word	0x00000cef
 130:	00000cef 	.word	0x00000cef
 134:	00000cef 	.word	0x00000cef
 138:	00000cef 	.word	0x00000cef
 13c:	00000cef 	.word	0x00000cef
 140:	00000cef 	.word	0x00000cef
 144:	00000cef 	.word	0x00000cef
 148:	00000cef 	.word	0x00000cef
 14c:	00000cef 	.word	0x00000cef
 150:	00000cef 	.word	0x00000cef
 154:	00000cef 	.word	0x00000cef
 158:	00000cef 	.word	0x00000cef
 15c:	00000cef 	.word	0x00000cef
 160:	00000cef 	.word	0x00000cef
 164:	00000cef 	.word	0x00000cef
 168:	00000cef 	.word	0x00000cef
 16c:	00000cef 	.word	0x00000cef
 170:	00000cef 	.word	0x00000cef
 174:	00000cef 	.word	0x00000cef
 178:	00000cef 	.word	0x00000cef
 17c:	00000cef 	.word	0x00000cef
 180:	00000cef 	.word	0x00000cef
 184:	00000cef 	.word	0x00000cef
 188:	00000cef 	.word	0x00000cef
 18c:	00000cef 	.word	0x00000cef
 190:	00000cef 	.word	0x00000cef
 194:	00000cef 	.word	0x00000cef
 198:	00000cef 	.word	0x00000cef
 19c:	00000cef 	.word	0x00000cef
 1a0:	00000cef 	.word	0x00000cef
 1a4:	00000cef 	.word	0x00000cef
 1a8:	00000cef 	.word	0x00000cef
 1ac:	00000cef 	.word	0x00000cef
 1b0:	00000cef 	.word	0x00000cef
 1b4:	00000cef 	.word	0x00000cef
 1b8:	00000cef 	.word	0x00000cef
 1bc:	00000cef 	.word	0x00000cef
 1c0:	00000cef 	.word	0x00000cef
 1c4:	00000cef 	.word	0x00000cef
 1c8:	00000cef 	.word	0x00000cef
 1cc:	00000cef 	.word	0x00000cef
 1d0:	00000cef 	.word	0x00000cef
 1d4:	00000cef 	.word	0x00000cef
 1d8:	00000cef 	.word	0x00000cef
 1dc:	00000cef 	.word	0x00000cef
 1e0:	00000cef 	.word	0x00000cef
 1e4:	00000cef 	.word	0x00000cef
 1e8:	00000cef 	.word	0x00000cef
 1ec:	00000cef 	.word	0x00000cef
 1f0:	00000cef 	.word	0x00000cef
 1f4:	00000cef 	.word	0x00000cef
 1f8:	00000cef 	.word	0x00000cef
 1fc:	00000cef 	.word	0x00000cef
 200:	00000cef 	.word	0x00000cef
 204:	00000cef 	.word	0x00000cef
 208:	00000cef 	.word	0x00000cef
 20c:	00000cef 	.word	0x00000cef
 210:	00000cef 	.word	0x00000cef
 214:	00000cef 	.word	0x00000cef
 218:	00000cef 	.word	0x00000cef
 21c:	00000cef 	.word	0x00000cef
 220:	00000cef 	.word	0x00000cef
 224:	00000cef 	.word	0x00000cef
 228:	00000cef 	.word	0x00000cef
 22c:	00000cef 	.word	0x00000cef
 230:	00000cef 	.word	0x00000cef
 234:	00000cef 	.word	0x00000cef
 238:	00000cef 	.word	0x00000cef
 23c:	00000cef 	.word	0x00000cef
 240:	00000cef 	.word	0x00000cef
 244:	00000cef 	.word	0x00000cef
 248:	00000cef 	.word	0x00000cef
 24c:	00000cef 	.word	0x00000cef
 250:	00000cef 	.word	0x00000cef
 254:	00000cef 	.word	0x00000cef
 258:	00000cef 	.word	0x00000cef
 25c:	00000cef 	.word	0x00000cef
 260:	00000cef 	.word	0x00000cef
 264:	00000cef 	.word	0x00000cef
 268:	00000cef 	.word	0x00000cef
 26c:	00000cef 	.word	0x00000cef
 270:	00000cef 	.word	0x00000cef
 274:	00000cef 	.word	0x00000cef
 278:	00000cef 	.word	0x00000cef
 27c:	00000cef 	.word	0x00000cef
 280:	00000cef 	.word	0x00000cef
 284:	00000cef 	.word	0x00000cef
 288:	00000cef 	.word	0x00000cef
 28c:	00000cef 	.word	0x00000cef
 290:	00000cef 	.word	0x00000cef
 294:	00000cef 	.word	0x00000cef
 298:	00000cef 	.word	0x00000cef
 29c:	00000cef 	.word	0x00000cef
 2a0:	00000cef 	.word	0x00000cef
 2a4:	00000cef 	.word	0x00000cef
 2a8:	00000cef 	.word	0x00000cef
 2ac:	00000cef 	.word	0x00000cef
 2b0:	00000cef 	.word	0x00000cef
 2b4:	00000cef 	.word	0x00000cef
 2b8:	00000cef 	.word	0x00000cef
 2bc:	00000cef 	.word	0x00000cef
 2c0:	00000cef 	.word	0x00000cef
 2c4:	00000cef 	.word	0x00000cef
 2c8:	00000cef 	.word	0x00000cef
 2cc:	00000cef 	.word	0x00000cef
 2d0:	00000cef 	.word	0x00000cef
 2d4:	00000cef 	.word	0x00000cef
 2d8:	00000cef 	.word	0x00000cef
 2dc:	00000cef 	.word	0x00000cef
 2e0:	00000cef 	.word	0x00000cef
 2e4:	00000cef 	.word	0x00000cef
 2e8:	00000cef 	.word	0x00000cef
 2ec:	00000cef 	.word	0x00000cef
 2f0:	00000cef 	.word	0x00000cef
 2f4:	00000cef 	.word	0x00000cef
 2f8:	00000cef 	.word	0x00000cef
 2fc:	00000cef 	.word	0x00000cef
 300:	00000cef 	.word	0x00000cef
 304:	00000cef 	.word	0x00000cef
 308:	00000cef 	.word	0x00000cef
 30c:	00000cef 	.word	0x00000cef

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fb63 	bl	b4c <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fc22 	bl	cd4 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff98f4 	.word	0x1fff98f4

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fb6d 	bl	c78 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * In this case only one HTH is used for transmission with four message buffer. For reception only one HRH is utilized.
 * 
 * 
 * @return Always zero
*/
int main( void ) {
     8b0:	b500      	push	{lr}
     8b2:	b097      	sub	sp, #92	; 0x5c
    //local data.
    //Transmit message (PDU) 0 (Message ID 0x100) for Can 0 controller.
    uint8 Message0_SDU[3] = { 0xDE, 0xF4, 0xC9 }; //Data payload for message.
     8b4:	4a2c      	ldr	r2, [pc, #176]	; (968 <main+0xb8>)
     8b6:	ab15      	add	r3, sp, #84	; 0x54
     8b8:	6812      	ldr	r2, [r2, #0]
     8ba:	4611      	mov	r1, r2
     8bc:	8019      	strh	r1, [r3, #0]
     8be:	3302      	adds	r3, #2
     8c0:	0c12      	lsrs	r2, r2, #16
     8c2:	701a      	strb	r2, [r3, #0]
    PduInfoType Message0 = {
     8c4:	ab15      	add	r3, sp, #84	; 0x54
     8c6:	9312      	str	r3, [sp, #72]	; 0x48
     8c8:	2300      	movs	r3, #0
     8ca:	9313      	str	r3, [sp, #76]	; 0x4c
     8cc:	2303      	movs	r3, #3
     8ce:	9314      	str	r3, [sp, #80]	; 0x50
        .SduDataPtr = Message0_SDU,
        .MetaDataPtr = NULL_PTR
    };

    //Transmit message (PDU) 1 (Message ID 0x101) for Can 0 controller.
    uint8 Message1_SDU[8] = { 0xAA, 0xDE, 0xF4, 0xC5, 0xB6, 0xFE, 0xCC, 0x07 }; //Data payload for message.
     8d0:	4a26      	ldr	r2, [pc, #152]	; (96c <main+0xbc>)
     8d2:	ab10      	add	r3, sp, #64	; 0x40
     8d4:	e892 0003 	ldmia.w	r2, {r0, r1}
     8d8:	e883 0003 	stmia.w	r3, {r0, r1}
    PduInfoType Message1 = {
     8dc:	ab10      	add	r3, sp, #64	; 0x40
     8de:	930d      	str	r3, [sp, #52]	; 0x34
     8e0:	2300      	movs	r3, #0
     8e2:	930e      	str	r3, [sp, #56]	; 0x38
     8e4:	2308      	movs	r3, #8
     8e6:	930f      	str	r3, [sp, #60]	; 0x3c
        .SduDataPtr = Message1_SDU,
        .MetaDataPtr = NULL_PTR
    };

    //Transmit message (PDU) 2 (Message ID 0x102) for Can 0 controller.
    uint8 Message2_SDU[12] = { 0xBB, 0xDE, 0xCC, 0xAA, 0x22, 0x33, 0xDD, 0x05, 0x09, 0x45, 0xFF, 0x33 }; //Data payload for message.
     8e8:	4a21      	ldr	r2, [pc, #132]	; (970 <main+0xc0>)
     8ea:	ab0a      	add	r3, sp, #40	; 0x28
     8ec:	ca07      	ldmia	r2, {r0, r1, r2}
     8ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    PduInfoType Message2 = {
     8f2:	ab0a      	add	r3, sp, #40	; 0x28
     8f4:	9307      	str	r3, [sp, #28]
     8f6:	2300      	movs	r3, #0
     8f8:	9308      	str	r3, [sp, #32]
     8fa:	230c      	movs	r3, #12
     8fc:	9309      	str	r3, [sp, #36]	; 0x24
        .SduDataPtr = Message2_SDU,
        .MetaDataPtr = NULL_PTR
    };

    //Transmit message (PDU) 3 (Message ID 0x103) for Can 0 controller.
    uint8 Message3_SDU[9] = { 0xFF, 0xDD, 0x22, 0x44, 0x53, 0x11, 0x46, 0x59, 0xBB }; //Data payload for message.
     8fe:	4a1d      	ldr	r2, [pc, #116]	; (974 <main+0xc4>)
     900:	ab04      	add	r3, sp, #16
     902:	ca07      	ldmia	r2, {r0, r1, r2}
     904:	c303      	stmia	r3!, {r0, r1}
     906:	701a      	strb	r2, [r3, #0]
    PduInfoType Message3 = {
     908:	ab04      	add	r3, sp, #16
     90a:	9301      	str	r3, [sp, #4]
     90c:	2300      	movs	r3, #0
     90e:	9302      	str	r3, [sp, #8]
     910:	2309      	movs	r3, #9
     912:	9303      	str	r3, [sp, #12]
        .SduLength = 9,
        .SduDataPtr = Message3_SDU,
        .MetaDataPtr = NULL_PTR
    };

    EcuM_Init();    //MCU configuration.
     914:	f000 ff08 	bl	1728 <EcuM_Init>

    //SBC by default is in force normal mode so the CAN transceiver is already active.

    CanIf_SetControllerMode( CanIfFlexCan0 , CAN_CS_STARTED );   //Can 0 controller active in Can Bus.
     918:	2101      	movs	r1, #1
     91a:	2001      	movs	r0, #1
     91c:	f016 fc23 	bl	17166 <CanIf_SetControllerMode>

    while( 1u ) {
        //Transmit messages every 3s.
        CanIf_Transmit( CanIfTxPDU_0, &Message0 );   //Writing in Can 0 message buffer 1
     920:	ab12      	add	r3, sp, #72	; 0x48
     922:	4619      	mov	r1, r3
     924:	2000      	movs	r0, #0
     926:	f016 faf7 	bl	16f18 <CanIf_Transmit>
        CanIf_Transmit( CanIfTxPDU_1, &Message1 );   //Writing in Can 0 message buffer 2
     92a:	ab0d      	add	r3, sp, #52	; 0x34
     92c:	4619      	mov	r1, r3
     92e:	2001      	movs	r0, #1
     930:	f016 faf2 	bl	16f18 <CanIf_Transmit>
        CanIf_Transmit( CanIfTxPDU_2, &Message2 );   //Writing in Can 0 message buffer 3
     934:	ab07      	add	r3, sp, #28
     936:	4619      	mov	r1, r3
     938:	2002      	movs	r0, #2
     93a:	f016 faed 	bl	16f18 <CanIf_Transmit>
        CanIf_Transmit( CanIfTxPDU_3, &Message3 );   //Writing in Can 0 message buffer 4
     93e:	ab01      	add	r3, sp, #4
     940:	4619      	mov	r1, r3
     942:	2003      	movs	r0, #3
     944:	f016 fae8 	bl	16f18 <CanIf_Transmit>

        while( CanIf_Can0_bTxFlag == FALSE ); //Waiting until messages are transmitted.
     948:	bf00      	nop
     94a:	4b0b      	ldr	r3, [pc, #44]	; (978 <main+0xc8>)
     94c:	781b      	ldrb	r3, [r3, #0]
     94e:	f083 0301 	eor.w	r3, r3, #1
     952:	b2db      	uxtb	r3, r3
     954:	2b00      	cmp	r3, #0
     956:	d1f8      	bne.n	94a <main+0x9a>
        CanIf_Can0_bTxFlag = FALSE;  //Clearing transmit flag.
     958:	4b07      	ldr	r3, [pc, #28]	; (978 <main+0xc8>)
     95a:	2200      	movs	r2, #0
     95c:	701a      	strb	r2, [r3, #0]

        Delay( 3000 );  //Waiting 3s for next transmission.
     95e:	f640 30b8 	movw	r0, #3000	; 0xbb8
     962:	f000 ff01 	bl	1768 <Delay>
        CanIf_Transmit( CanIfTxPDU_0, &Message0 );   //Writing in Can 0 message buffer 1
     966:	e7db      	b.n	920 <main+0x70>
     968:	00017468 	.word	0x00017468
     96c:	0001746c 	.word	0x0001746c
     970:	00017474 	.word	0x00017474
     974:	00017480 	.word	0x00017480
     978:	1fff8b30 	.word	0x1fff8b30

0000097c <DevAssert>:
    #error "Unsupported architecture!"
#endif

/* Implement default assert macro */
static inline void DevAssert(volatile boolean x)
{
     97c:	b082      	sub	sp, #8
     97e:	4603      	mov	r3, r0
     980:	f88d 3007 	strb.w	r3, [sp, #7]
    if(x) { } else { for(;;) {ASM_KEYWORD(BREAKPOINT_INSTR);} }
     984:	f89d 3007 	ldrb.w	r3, [sp, #7]
     988:	b2db      	uxtb	r3, r3
     98a:	2b00      	cmp	r3, #0
     98c:	d101      	bne.n	992 <DevAssert+0x16>
     98e:	be00      	bkpt	0x0000
     990:	e7fd      	b.n	98e <DevAssert+0x12>
}
     992:	bf00      	nop
     994:	b002      	add	sp, #8
     996:	4770      	bx	lr

00000998 <Adc_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Adc_schm_read_msr(void)
{
     998:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     99a:	f3ef 8310 	mrs	r3, PRIMASK
     99e:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9a0:	4623      	mov	r3, r4
}
     9a2:	4618      	mov	r0, r3
     9a4:	f85d 4b04 	ldr.w	r4, [sp], #4
     9a8:	4770      	bx	lr

000009aa <Can_43_FLEXCAN_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Can_43_FLEXCAN_schm_read_msr(void)
{
     9aa:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     9ac:	f3ef 8310 	mrs	r3, PRIMASK
     9b0:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9b2:	4623      	mov	r3, r4
}
     9b4:	4618      	mov	r0, r3
     9b6:	f85d 4b04 	ldr.w	r4, [sp], #4
     9ba:	4770      	bx	lr

000009bc <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     9bc:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     9be:	f3ef 8310 	mrs	r3, PRIMASK
     9c2:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9c4:	4623      	mov	r3, r4
}
     9c6:	4618      	mov	r0, r3
     9c8:	f85d 4b04 	ldr.w	r4, [sp], #4
     9cc:	4770      	bx	lr

000009ce <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     9ce:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     9d0:	f3ef 8310 	mrs	r3, PRIMASK
     9d4:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9d6:	4623      	mov	r3, r4
}
     9d8:	4618      	mov	r0, r3
     9da:	f85d 4b04 	ldr.w	r4, [sp], #4
     9de:	4770      	bx	lr

000009e0 <Spi_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Spi_schm_read_msr(void)
{
     9e0:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     9e2:	f3ef 8310 	mrs	r3, PRIMASK
     9e6:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9e8:	4623      	mov	r3, r4
}
     9ea:	4618      	mov	r0, r3
     9ec:	f85d 4b04 	ldr.w	r4, [sp], #4
     9f0:	4770      	bx	lr
	...

000009f4 <CDD_UserTxConfirmation_Can_0>:
 * @brief Callback function for the complete transmit of a PDU (registered) from Can0 controller.
 * 
 * @param TxPduId ID (container) of the PDU transmitted.
 * @param result Status of the transmision operation.
 */
void CDD_UserTxConfirmation_Can_0( PduIdType TxPduId, Std_ReturnType result ) {
     9f4:	b082      	sub	sp, #8
     9f6:	4603      	mov	r3, r0
     9f8:	460a      	mov	r2, r1
     9fa:	f8ad 3006 	strh.w	r3, [sp, #6]
     9fe:	4613      	mov	r3, r2
     a00:	f88d 3005 	strb.w	r3, [sp, #5]
    //local data.
    static uint8 Transmit_count = 0;    //Count of transmitted PDUs.
    (void)TxPduId;

    if ( result == E_OK ) { //Message was transmitted successfully.
     a04:	f89d 3005 	ldrb.w	r3, [sp, #5]
     a08:	2b00      	cmp	r3, #0
     a0a:	d10f      	bne.n	a2c <CDD_UserTxConfirmation_Can_0+0x38>
        Transmit_count++;
     a0c:	4b09      	ldr	r3, [pc, #36]	; (a34 <CDD_UserTxConfirmation_Can_0+0x40>)
     a0e:	781b      	ldrb	r3, [r3, #0]
     a10:	3301      	adds	r3, #1
     a12:	b2da      	uxtb	r2, r3
     a14:	4b07      	ldr	r3, [pc, #28]	; (a34 <CDD_UserTxConfirmation_Can_0+0x40>)
     a16:	701a      	strb	r2, [r3, #0]

        if( Transmit_count == 4 ) { //All messages were transmitted
     a18:	4b06      	ldr	r3, [pc, #24]	; (a34 <CDD_UserTxConfirmation_Can_0+0x40>)
     a1a:	781b      	ldrb	r3, [r3, #0]
     a1c:	2b04      	cmp	r3, #4
     a1e:	d105      	bne.n	a2c <CDD_UserTxConfirmation_Can_0+0x38>
            Transmit_count = 0;
     a20:	4b04      	ldr	r3, [pc, #16]	; (a34 <CDD_UserTxConfirmation_Can_0+0x40>)
     a22:	2200      	movs	r2, #0
     a24:	701a      	strb	r2, [r3, #0]
            CanIf_Can0_bTxFlag = TRUE;
     a26:	4b04      	ldr	r3, [pc, #16]	; (a38 <CDD_UserTxConfirmation_Can_0+0x44>)
     a28:	2201      	movs	r2, #1
     a2a:	701a      	strb	r2, [r3, #0]
        }

    }
}
     a2c:	bf00      	nop
     a2e:	b002      	add	sp, #8
     a30:	4770      	bx	lr
     a32:	bf00      	nop
     a34:	1fff98f0 	.word	0x1fff98f0
     a38:	1fff8b30 	.word	0x1fff8b30

00000a3c <CDD_UserRxIndication_Can_0>:
 * @brief Callback function for the reception of a PDU (registered) of interest for the Can0 controller.
 * 
 * @param RxPduId ID (container) of the PDU received.
 * @param PduInfoPtr Pointer to PDU received (message)
 */
void CDD_UserRxIndication_Can_0( PduIdType RxPduId, const PduInfoType* PduInfoPtr ) {
     a3c:	b086      	sub	sp, #24
     a3e:	4603      	mov	r3, r0
     a40:	9100      	str	r1, [sp, #0]
     a42:	f8ad 3006 	strh.w	r3, [sp, #6]
    //local data.
    static uint8 counter_RXPDU0 = 0;   //Message rx 0 counter.
    uint8 Data[8];  //Data payload received.

    //Obtaining data received.
    for ( uint8 i = 0; i < PduInfoPtr->SduLength; i++ ) {
     a46:	2300      	movs	r3, #0
     a48:	f88d 3017 	strb.w	r3, [sp, #23]
     a4c:	e010      	b.n	a70 <CDD_UserRxIndication_Can_0+0x34>
        Data[i] = PduInfoPtr->SduDataPtr[i];
     a4e:	9b00      	ldr	r3, [sp, #0]
     a50:	681a      	ldr	r2, [r3, #0]
     a52:	f89d 3017 	ldrb.w	r3, [sp, #23]
     a56:	441a      	add	r2, r3
     a58:	f89d 3017 	ldrb.w	r3, [sp, #23]
     a5c:	7812      	ldrb	r2, [r2, #0]
     a5e:	a906      	add	r1, sp, #24
     a60:	440b      	add	r3, r1
     a62:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for ( uint8 i = 0; i < PduInfoPtr->SduLength; i++ ) {
     a66:	f89d 3017 	ldrb.w	r3, [sp, #23]
     a6a:	3301      	adds	r3, #1
     a6c:	f88d 3017 	strb.w	r3, [sp, #23]
     a70:	f89d 2017 	ldrb.w	r2, [sp, #23]
     a74:	9b00      	ldr	r3, [sp, #0]
     a76:	689b      	ldr	r3, [r3, #8]
     a78:	429a      	cmp	r2, r3
     a7a:	d3e8      	bcc.n	a4e <CDD_UserRxIndication_Can_0+0x12>
    }

    //Verifying which message was received.
    switch ( RxPduId ) {
     a7c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     a80:	2b00      	cmp	r3, #0
     a82:	d106      	bne.n	a92 <CDD_UserRxIndication_Can_0+0x56>
        case 0: //ID 0x200 received
            counter_RXPDU0++;
     a84:	4b06      	ldr	r3, [pc, #24]	; (aa0 <CDD_UserRxIndication_Can_0+0x64>)
     a86:	781b      	ldrb	r3, [r3, #0]
     a88:	3301      	adds	r3, #1
     a8a:	b2da      	uxtb	r2, r3
     a8c:	4b04      	ldr	r3, [pc, #16]	; (aa0 <CDD_UserRxIndication_Can_0+0x64>)
     a8e:	701a      	strb	r2, [r3, #0]
        break;
     a90:	e000      	b.n	a94 <CDD_UserRxIndication_Can_0+0x58>
        default:
        break;
     a92:	bf00      	nop
    }
    
    CanIf_Can0_bRxFlag = TRUE;   //Message received.
     a94:	4b03      	ldr	r3, [pc, #12]	; (aa4 <CDD_UserRxIndication_Can_0+0x68>)
     a96:	2201      	movs	r2, #1
     a98:	701a      	strb	r2, [r3, #0]
}
     a9a:	bf00      	nop
     a9c:	b006      	add	sp, #24
     a9e:	4770      	bx	lr
     aa0:	1fff98f1 	.word	0x1fff98f1
     aa4:	1fff8b31 	.word	0x1fff8b31

00000aa8 <CDD_UserTxConfirmation_Can_2>:
 * @brief Callback function for the complete transmit of a PDU (registered) from Can2 controller.
 * 
 * @param TxPduId ID (container) of the PDU transmitted.
 * @param result Status of the transmision operation.
 */
void CDD_UserTxConfirmation_Can_2( PduIdType TxPduId, Std_ReturnType result ) {
     aa8:	b082      	sub	sp, #8
     aaa:	4603      	mov	r3, r0
     aac:	460a      	mov	r2, r1
     aae:	f8ad 3006 	strh.w	r3, [sp, #6]
     ab2:	4613      	mov	r3, r2
     ab4:	f88d 3005 	strb.w	r3, [sp, #5]
    //local data.
    static uint8 Transmit_count = 0;    //Count of transmitted PDUs.
    (void)TxPduId;

    if ( result == E_OK ) { //Message was transmitted successfully.
     ab8:	f89d 3005 	ldrb.w	r3, [sp, #5]
     abc:	2b00      	cmp	r3, #0
     abe:	d108      	bne.n	ad2 <CDD_UserTxConfirmation_Can_2+0x2a>
        Transmit_count++;
     ac0:	4b05      	ldr	r3, [pc, #20]	; (ad8 <CDD_UserTxConfirmation_Can_2+0x30>)
     ac2:	781b      	ldrb	r3, [r3, #0]
     ac4:	3301      	adds	r3, #1
     ac6:	b2da      	uxtb	r2, r3
     ac8:	4b03      	ldr	r3, [pc, #12]	; (ad8 <CDD_UserTxConfirmation_Can_2+0x30>)
     aca:	701a      	strb	r2, [r3, #0]
        CanIf_Can2_bTxFlag = TRUE;
     acc:	4b03      	ldr	r3, [pc, #12]	; (adc <CDD_UserTxConfirmation_Can_2+0x34>)
     ace:	2201      	movs	r2, #1
     ad0:	701a      	strb	r2, [r3, #0]
    }
}
     ad2:	bf00      	nop
     ad4:	b002      	add	sp, #8
     ad6:	4770      	bx	lr
     ad8:	1fff98f2 	.word	0x1fff98f2
     adc:	1fff8b32 	.word	0x1fff8b32

00000ae0 <CDD_UserRxIndication_Can_2>:
 * @brief Callback function for the reception of a PDU (registered) of interest for the Can2 controller.
 * 
 * @param RxPduId ID (container) of the PDU received.
 * @param PduInfoPtr Pointer to PDU received (message)
 */
void CDD_UserRxIndication_Can_2( PduIdType RxPduId, const PduInfoType* PduInfoPtr ) {
     ae0:	b086      	sub	sp, #24
     ae2:	4603      	mov	r3, r0
     ae4:	9100      	str	r1, [sp, #0]
     ae6:	f8ad 3006 	strh.w	r3, [sp, #6]
    //local data.
    static uint8 counter_RXPDU1 = 0;   //Message rx 1 counter.
    uint8 Data[8];  //Data payload received.

    //Obtaining data received.
    for ( uint8 i = 0; i < PduInfoPtr->SduLength; i++ ) {
     aea:	2300      	movs	r3, #0
     aec:	f88d 3017 	strb.w	r3, [sp, #23]
     af0:	e010      	b.n	b14 <CDD_UserRxIndication_Can_2+0x34>
        Data[i] = PduInfoPtr->SduDataPtr[i];
     af2:	9b00      	ldr	r3, [sp, #0]
     af4:	681a      	ldr	r2, [r3, #0]
     af6:	f89d 3017 	ldrb.w	r3, [sp, #23]
     afa:	441a      	add	r2, r3
     afc:	f89d 3017 	ldrb.w	r3, [sp, #23]
     b00:	7812      	ldrb	r2, [r2, #0]
     b02:	a906      	add	r1, sp, #24
     b04:	440b      	add	r3, r1
     b06:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for ( uint8 i = 0; i < PduInfoPtr->SduLength; i++ ) {
     b0a:	f89d 3017 	ldrb.w	r3, [sp, #23]
     b0e:	3301      	adds	r3, #1
     b10:	f88d 3017 	strb.w	r3, [sp, #23]
     b14:	f89d 2017 	ldrb.w	r2, [sp, #23]
     b18:	9b00      	ldr	r3, [sp, #0]
     b1a:	689b      	ldr	r3, [r3, #8]
     b1c:	429a      	cmp	r2, r3
     b1e:	d3e8      	bcc.n	af2 <CDD_UserRxIndication_Can_2+0x12>
    }

    //Verifying which message was received.
    switch ( RxPduId ) {
     b20:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     b24:	2b01      	cmp	r3, #1
     b26:	d106      	bne.n	b36 <CDD_UserRxIndication_Can_2+0x56>
        case 1: //ID 0x400 received
            counter_RXPDU1++;
     b28:	4b06      	ldr	r3, [pc, #24]	; (b44 <CDD_UserRxIndication_Can_2+0x64>)
     b2a:	781b      	ldrb	r3, [r3, #0]
     b2c:	3301      	adds	r3, #1
     b2e:	b2da      	uxtb	r2, r3
     b30:	4b04      	ldr	r3, [pc, #16]	; (b44 <CDD_UserRxIndication_Can_2+0x64>)
     b32:	701a      	strb	r2, [r3, #0]
        break;
     b34:	e000      	b.n	b38 <CDD_UserRxIndication_Can_2+0x58>
        default:
        break;
     b36:	bf00      	nop
    }
    
    CanIf_Can2_bRxFlag = TRUE;   //Message received.
     b38:	4b03      	ldr	r3, [pc, #12]	; (b48 <CDD_UserRxIndication_Can_2+0x68>)
     b3a:	2201      	movs	r2, #1
     b3c:	701a      	strb	r2, [r3, #0]
}
     b3e:	bf00      	nop
     b40:	b006      	add	sp, #24
     b42:	4770      	bx	lr
     b44:	1fff98f3 	.word	0x1fff98f3
     b48:	1fff8b33 	.word	0x1fff8b33

00000b4c <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     b4c:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     b4e:	2300      	movs	r3, #0
     b50:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     b52:	2300      	movs	r3, #0
     b54:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     b56:	2300      	movs	r3, #0
     b58:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     b5a:	2300      	movs	r3, #0
     b5c:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     b5e:	4b44      	ldr	r3, [pc, #272]	; (c70 <init_data_bss+0x124>)
     b60:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     b62:	4b44      	ldr	r3, [pc, #272]	; (c74 <init_data_bss+0x128>)
     b64:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     b66:	9b05      	ldr	r3, [sp, #20]
     b68:	681b      	ldr	r3, [r3, #0]
     b6a:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     b6c:	9b05      	ldr	r3, [sp, #20]
     b6e:	3304      	adds	r3, #4
     b70:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     b72:	9b05      	ldr	r3, [sp, #20]
     b74:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     b76:	2300      	movs	r3, #0
     b78:	9309      	str	r3, [sp, #36]	; 0x24
     b7a:	e03d      	b.n	bf8 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     b7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b7e:	4613      	mov	r3, r2
     b80:	005b      	lsls	r3, r3, #1
     b82:	4413      	add	r3, r2
     b84:	009b      	lsls	r3, r3, #2
     b86:	461a      	mov	r2, r3
     b88:	9b03      	ldr	r3, [sp, #12]
     b8a:	4413      	add	r3, r2
     b8c:	685b      	ldr	r3, [r3, #4]
     b8e:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     b90:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b92:	4613      	mov	r3, r2
     b94:	005b      	lsls	r3, r3, #1
     b96:	4413      	add	r3, r2
     b98:	009b      	lsls	r3, r3, #2
     b9a:	461a      	mov	r2, r3
     b9c:	9b03      	ldr	r3, [sp, #12]
     b9e:	4413      	add	r3, r2
     ba0:	681b      	ldr	r3, [r3, #0]
     ba2:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     ba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ba6:	4613      	mov	r3, r2
     ba8:	005b      	lsls	r3, r3, #1
     baa:	4413      	add	r3, r2
     bac:	009b      	lsls	r3, r3, #2
     bae:	461a      	mov	r2, r3
     bb0:	9b03      	ldr	r3, [sp, #12]
     bb2:	4413      	add	r3, r2
     bb4:	689b      	ldr	r3, [r3, #8]
     bb6:	4619      	mov	r1, r3
     bb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     bba:	4613      	mov	r3, r2
     bbc:	005b      	lsls	r3, r3, #1
     bbe:	4413      	add	r3, r2
     bc0:	009b      	lsls	r3, r3, #2
     bc2:	461a      	mov	r2, r3
     bc4:	9b03      	ldr	r3, [sp, #12]
     bc6:	4413      	add	r3, r2
     bc8:	685b      	ldr	r3, [r3, #4]
     bca:	1acb      	subs	r3, r1, r3
     bcc:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     bce:	2300      	movs	r3, #0
     bd0:	9308      	str	r3, [sp, #32]
     bd2:	e00a      	b.n	bea <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     bd4:	9a00      	ldr	r2, [sp, #0]
     bd6:	9b08      	ldr	r3, [sp, #32]
     bd8:	441a      	add	r2, r3
     bda:	9901      	ldr	r1, [sp, #4]
     bdc:	9b08      	ldr	r3, [sp, #32]
     bde:	440b      	add	r3, r1
     be0:	7812      	ldrb	r2, [r2, #0]
     be2:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     be4:	9b08      	ldr	r3, [sp, #32]
     be6:	3301      	adds	r3, #1
     be8:	9308      	str	r3, [sp, #32]
     bea:	9a08      	ldr	r2, [sp, #32]
     bec:	9b06      	ldr	r3, [sp, #24]
     bee:	429a      	cmp	r2, r3
     bf0:	d3f0      	bcc.n	bd4 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     bf4:	3301      	adds	r3, #1
     bf6:	9309      	str	r3, [sp, #36]	; 0x24
     bf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     bfa:	9b07      	ldr	r3, [sp, #28]
     bfc:	429a      	cmp	r2, r3
     bfe:	d3bd      	bcc.n	b7c <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     c00:	9b04      	ldr	r3, [sp, #16]
     c02:	681b      	ldr	r3, [r3, #0]
     c04:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     c06:	9b04      	ldr	r3, [sp, #16]
     c08:	3304      	adds	r3, #4
     c0a:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     c0c:	9b04      	ldr	r3, [sp, #16]
     c0e:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     c10:	2300      	movs	r3, #0
     c12:	9309      	str	r3, [sp, #36]	; 0x24
     c14:	e024      	b.n	c60 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
     c18:	00db      	lsls	r3, r3, #3
     c1a:	9a02      	ldr	r2, [sp, #8]
     c1c:	4413      	add	r3, r2
     c1e:	681b      	ldr	r3, [r3, #0]
     c20:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
     c24:	00db      	lsls	r3, r3, #3
     c26:	9a02      	ldr	r2, [sp, #8]
     c28:	4413      	add	r3, r2
     c2a:	685b      	ldr	r3, [r3, #4]
     c2c:	4619      	mov	r1, r3
     c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     c30:	00db      	lsls	r3, r3, #3
     c32:	9a02      	ldr	r2, [sp, #8]
     c34:	4413      	add	r3, r2
     c36:	681b      	ldr	r3, [r3, #0]
     c38:	1acb      	subs	r3, r1, r3
     c3a:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     c3c:	2300      	movs	r3, #0
     c3e:	9308      	str	r3, [sp, #32]
     c40:	e007      	b.n	c52 <init_data_bss+0x106>
        {
            ram[j] = 0U;
     c42:	9a01      	ldr	r2, [sp, #4]
     c44:	9b08      	ldr	r3, [sp, #32]
     c46:	4413      	add	r3, r2
     c48:	2200      	movs	r2, #0
     c4a:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     c4c:	9b08      	ldr	r3, [sp, #32]
     c4e:	3301      	adds	r3, #1
     c50:	9308      	str	r3, [sp, #32]
     c52:	9a08      	ldr	r2, [sp, #32]
     c54:	9b06      	ldr	r3, [sp, #24]
     c56:	429a      	cmp	r2, r3
     c58:	d3f3      	bcc.n	c42 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     c5c:	3301      	adds	r3, #1
     c5e:	9309      	str	r3, [sp, #36]	; 0x24
     c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
     c62:	9b07      	ldr	r3, [sp, #28]
     c64:	429a      	cmp	r2, r3
     c66:	d3d6      	bcc.n	c16 <init_data_bss+0xca>
        }
    }
}
     c68:	bf00      	nop
     c6a:	bf00      	nop
     c6c:	b00a      	add	sp, #40	; 0x28
     c6e:	4770      	bx	lr
     c70:	00019a84 	.word	0x00019a84
     c74:	00019aa0 	.word	0x00019aa0

00000c78 <sys_m4_cache_init>:
{
     c78:	b084      	sub	sp, #16
     c7a:	4603      	mov	r3, r0
     c7c:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     c80:	2300      	movs	r3, #0
     c82:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     c86:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c8a:	2b00      	cmp	r3, #0
     c8c:	d118      	bne.n	cc0 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     c8e:	4b10      	ldr	r3, [pc, #64]	; (cd0 <sys_m4_cache_init+0x58>)
     c90:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     c94:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     c96:	4b0e      	ldr	r3, [pc, #56]	; (cd0 <sys_m4_cache_init+0x58>)
     c98:	681b      	ldr	r3, [r3, #0]
     c9a:	4a0d      	ldr	r2, [pc, #52]	; (cd0 <sys_m4_cache_init+0x58>)
     c9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     ca0:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     ca2:	bf00      	nop
     ca4:	4b0a      	ldr	r3, [pc, #40]	; (cd0 <sys_m4_cache_init+0x58>)
     ca6:	681b      	ldr	r3, [r3, #0]
     ca8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     cac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     cb0:	d0f8      	beq.n	ca4 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     cb2:	4b07      	ldr	r3, [pc, #28]	; (cd0 <sys_m4_cache_init+0x58>)
     cb4:	681b      	ldr	r3, [r3, #0]
     cb6:	4a06      	ldr	r2, [pc, #24]	; (cd0 <sys_m4_cache_init+0x58>)
     cb8:	f043 0301 	orr.w	r3, r3, #1
     cbc:	6013      	str	r3, [r2, #0]
     cbe:	e002      	b.n	cc6 <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     cc0:	2301      	movs	r3, #1
     cc2:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     cc6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     cca:	4618      	mov	r0, r3
     ccc:	b004      	add	sp, #16
     cce:	4770      	bx	lr
     cd0:	e0082000 	.word	0xe0082000

00000cd4 <startup_go_to_user_mode>:
}
     cd4:	bf00      	nop
     cd6:	4770      	bx	lr

00000cd8 <Sys_GetCoreID>:
    return 0U;
     cd8:	2300      	movs	r3, #0
}
     cda:	4618      	mov	r0, r3
     cdc:	4770      	bx	lr

00000cde <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     cde:	e7fe      	b.n	cde <HardFault_Handler>

00000ce0 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     ce0:	e7fe      	b.n	ce0 <MemManage_Handler>

00000ce2 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     ce2:	e7fe      	b.n	ce2 <BusFault_Handler>

00000ce4 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     ce4:	e7fe      	b.n	ce4 <UsageFault_Handler>

00000ce6 <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     ce6:	e7fe      	b.n	ce6 <SVC_Handler>

00000ce8 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     ce8:	e7fe      	b.n	ce8 <DebugMon_Handler>

00000cea <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     cea:	e7fe      	b.n	cea <PendSV_Handler>

00000cec <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     cec:	e7fe      	b.n	cec <SysTick_Handler>

00000cee <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     cee:	e7fe      	b.n	cee <undefined_handler>

00000cf0 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
     cf0:	b500      	push	{lr}
     cf2:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
     cf4:	4b26      	ldr	r3, [pc, #152]	; (d90 <_DoInit+0xa0>)
     cf6:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
     cf8:	22a8      	movs	r2, #168	; 0xa8
     cfa:	2100      	movs	r1, #0
     cfc:	9800      	ldr	r0, [sp, #0]
     cfe:	f000 fd67 	bl	17d0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     d02:	9b00      	ldr	r3, [sp, #0]
     d04:	2203      	movs	r2, #3
     d06:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
     d08:	9b00      	ldr	r3, [sp, #0]
     d0a:	2203      	movs	r2, #3
     d0c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
     d0e:	9b00      	ldr	r3, [sp, #0]
     d10:	4a20      	ldr	r2, [pc, #128]	; (d94 <_DoInit+0xa4>)
     d12:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
     d14:	9b00      	ldr	r3, [sp, #0]
     d16:	4a20      	ldr	r2, [pc, #128]	; (d98 <_DoInit+0xa8>)
     d18:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
     d1a:	9b00      	ldr	r3, [sp, #0]
     d1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
     d20:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
     d22:	9b00      	ldr	r3, [sp, #0]
     d24:	2200      	movs	r2, #0
     d26:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
     d28:	9b00      	ldr	r3, [sp, #0]
     d2a:	2200      	movs	r2, #0
     d2c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     d2e:	9b00      	ldr	r3, [sp, #0]
     d30:	2200      	movs	r2, #0
     d32:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
     d34:	9b00      	ldr	r3, [sp, #0]
     d36:	4a17      	ldr	r2, [pc, #92]	; (d94 <_DoInit+0xa4>)
     d38:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
     d3a:	9b00      	ldr	r3, [sp, #0]
     d3c:	4a17      	ldr	r2, [pc, #92]	; (d9c <_DoInit+0xac>)
     d3e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
     d40:	9b00      	ldr	r3, [sp, #0]
     d42:	2210      	movs	r2, #16
     d44:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
     d46:	9b00      	ldr	r3, [sp, #0]
     d48:	2200      	movs	r2, #0
     d4a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
     d4c:	9b00      	ldr	r3, [sp, #0]
     d4e:	2200      	movs	r2, #0
     d50:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     d52:	9b00      	ldr	r3, [sp, #0]
     d54:	2200      	movs	r2, #0
     d56:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     d58:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     d5c:	2300      	movs	r3, #0
     d5e:	9301      	str	r3, [sp, #4]
     d60:	e00c      	b.n	d7c <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
     d62:	9b01      	ldr	r3, [sp, #4]
     d64:	f1c3 030f 	rsb	r3, r3, #15
     d68:	4a0d      	ldr	r2, [pc, #52]	; (da0 <_DoInit+0xb0>)
     d6a:	5cd1      	ldrb	r1, [r2, r3]
     d6c:	9a00      	ldr	r2, [sp, #0]
     d6e:	9b01      	ldr	r3, [sp, #4]
     d70:	4413      	add	r3, r2
     d72:	460a      	mov	r2, r1
     d74:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     d76:	9b01      	ldr	r3, [sp, #4]
     d78:	3301      	adds	r3, #1
     d7a:	9301      	str	r3, [sp, #4]
     d7c:	9b01      	ldr	r3, [sp, #4]
     d7e:	2b0f      	cmp	r3, #15
     d80:	d9ef      	bls.n	d62 <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     d82:	f3bf 8f5f 	dmb	sy
}
     d86:	bf00      	nop
     d88:	b003      	add	sp, #12
     d8a:	f85d fb04 	ldr.w	pc, [sp], #4
     d8e:	bf00      	nop
     d90:	1fff9910 	.word	0x1fff9910
     d94:	00017e60 	.word	0x00017e60
     d98:	1fff99b8 	.word	0x1fff99b8
     d9c:	1fff9db8 	.word	0x1fff9db8
     da0:	00019a60 	.word	0x00019a60

00000da4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     da4:	b500      	push	{lr}
     da6:	b08b      	sub	sp, #44	; 0x2c
     da8:	9003      	str	r0, [sp, #12]
     daa:	9102      	str	r1, [sp, #8]
     dac:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
     dae:	2300      	movs	r3, #0
     db0:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
     db2:	9b03      	ldr	r3, [sp, #12]
     db4:	68db      	ldr	r3, [r3, #12]
     db6:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
     db8:	9b03      	ldr	r3, [sp, #12]
     dba:	691b      	ldr	r3, [r3, #16]
     dbc:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
     dbe:	9a06      	ldr	r2, [sp, #24]
     dc0:	9b07      	ldr	r3, [sp, #28]
     dc2:	429a      	cmp	r2, r3
     dc4:	d905      	bls.n	dd2 <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
     dc6:	9a06      	ldr	r2, [sp, #24]
     dc8:	9b07      	ldr	r3, [sp, #28]
     dca:	1ad3      	subs	r3, r2, r3
     dcc:	3b01      	subs	r3, #1
     dce:	9309      	str	r3, [sp, #36]	; 0x24
     dd0:	e007      	b.n	de2 <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
     dd2:	9b03      	ldr	r3, [sp, #12]
     dd4:	689a      	ldr	r2, [r3, #8]
     dd6:	9906      	ldr	r1, [sp, #24]
     dd8:	9b07      	ldr	r3, [sp, #28]
     dda:	1acb      	subs	r3, r1, r3
     ddc:	4413      	add	r3, r2
     dde:	3b01      	subs	r3, #1
     de0:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
     de2:	9b03      	ldr	r3, [sp, #12]
     de4:	689a      	ldr	r2, [r3, #8]
     de6:	9b07      	ldr	r3, [sp, #28]
     de8:	1ad3      	subs	r3, r2, r3
     dea:	9a09      	ldr	r2, [sp, #36]	; 0x24
     dec:	4293      	cmp	r3, r2
     dee:	bf28      	it	cs
     df0:	4613      	movcs	r3, r2
     df2:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
     df4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     df6:	9b01      	ldr	r3, [sp, #4]
     df8:	4293      	cmp	r3, r2
     dfa:	bf28      	it	cs
     dfc:	4613      	movcs	r3, r2
     dfe:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     e00:	9b03      	ldr	r3, [sp, #12]
     e02:	685a      	ldr	r2, [r3, #4]
     e04:	9b07      	ldr	r3, [sp, #28]
     e06:	4413      	add	r3, r2
     e08:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
     e0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
     e0c:	9902      	ldr	r1, [sp, #8]
     e0e:	9805      	ldr	r0, [sp, #20]
     e10:	f000 fcd0 	bl	17b4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
     e14:	9a08      	ldr	r2, [sp, #32]
     e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
     e18:	4413      	add	r3, r2
     e1a:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
     e1c:	9a02      	ldr	r2, [sp, #8]
     e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     e20:	4413      	add	r3, r2
     e22:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
     e24:	9a01      	ldr	r2, [sp, #4]
     e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
     e28:	1ad3      	subs	r3, r2, r3
     e2a:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
     e2c:	9a07      	ldr	r2, [sp, #28]
     e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     e30:	4413      	add	r3, r2
     e32:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
     e34:	9b03      	ldr	r3, [sp, #12]
     e36:	689b      	ldr	r3, [r3, #8]
     e38:	9a07      	ldr	r2, [sp, #28]
     e3a:	429a      	cmp	r2, r3
     e3c:	d101      	bne.n	e42 <_WriteBlocking+0x9e>
      WrOff = 0u;
     e3e:	2300      	movs	r3, #0
     e40:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     e42:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
     e46:	9b03      	ldr	r3, [sp, #12]
     e48:	9a07      	ldr	r2, [sp, #28]
     e4a:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
     e4c:	9b01      	ldr	r3, [sp, #4]
     e4e:	2b00      	cmp	r3, #0
     e50:	d1b2      	bne.n	db8 <_WriteBlocking+0x14>
  return NumBytesWritten;
     e52:	9b08      	ldr	r3, [sp, #32]
}
     e54:	4618      	mov	r0, r3
     e56:	b00b      	add	sp, #44	; 0x2c
     e58:	f85d fb04 	ldr.w	pc, [sp], #4

00000e5c <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     e5c:	b500      	push	{lr}
     e5e:	b089      	sub	sp, #36	; 0x24
     e60:	9003      	str	r0, [sp, #12]
     e62:	9102      	str	r1, [sp, #8]
     e64:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
     e66:	9b03      	ldr	r3, [sp, #12]
     e68:	68db      	ldr	r3, [r3, #12]
     e6a:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
     e6c:	9b03      	ldr	r3, [sp, #12]
     e6e:	689a      	ldr	r2, [r3, #8]
     e70:	9b07      	ldr	r3, [sp, #28]
     e72:	1ad3      	subs	r3, r2, r3
     e74:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
     e76:	9a06      	ldr	r2, [sp, #24]
     e78:	9b01      	ldr	r3, [sp, #4]
     e7a:	429a      	cmp	r2, r3
     e7c:	d911      	bls.n	ea2 <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     e7e:	9b03      	ldr	r3, [sp, #12]
     e80:	685a      	ldr	r2, [r3, #4]
     e82:	9b07      	ldr	r3, [sp, #28]
     e84:	4413      	add	r3, r2
     e86:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
     e88:	9a01      	ldr	r2, [sp, #4]
     e8a:	9902      	ldr	r1, [sp, #8]
     e8c:	9804      	ldr	r0, [sp, #16]
     e8e:	f000 fc91 	bl	17b4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     e92:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
     e96:	9a07      	ldr	r2, [sp, #28]
     e98:	9b01      	ldr	r3, [sp, #4]
     e9a:	441a      	add	r2, r3
     e9c:	9b03      	ldr	r3, [sp, #12]
     e9e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
     ea0:	e01f      	b.n	ee2 <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
     ea2:	9b06      	ldr	r3, [sp, #24]
     ea4:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     ea6:	9b03      	ldr	r3, [sp, #12]
     ea8:	685a      	ldr	r2, [r3, #4]
     eaa:	9b07      	ldr	r3, [sp, #28]
     eac:	4413      	add	r3, r2
     eae:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
     eb0:	9a05      	ldr	r2, [sp, #20]
     eb2:	9902      	ldr	r1, [sp, #8]
     eb4:	9804      	ldr	r0, [sp, #16]
     eb6:	f000 fc7d 	bl	17b4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
     eba:	9a01      	ldr	r2, [sp, #4]
     ebc:	9b06      	ldr	r3, [sp, #24]
     ebe:	1ad3      	subs	r3, r2, r3
     ec0:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
     ec2:	9b03      	ldr	r3, [sp, #12]
     ec4:	685b      	ldr	r3, [r3, #4]
     ec6:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
     ec8:	9a02      	ldr	r2, [sp, #8]
     eca:	9b06      	ldr	r3, [sp, #24]
     ecc:	4413      	add	r3, r2
     ece:	9a05      	ldr	r2, [sp, #20]
     ed0:	4619      	mov	r1, r3
     ed2:	9804      	ldr	r0, [sp, #16]
     ed4:	f000 fc6e 	bl	17b4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     ed8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
     edc:	9b03      	ldr	r3, [sp, #12]
     ede:	9a05      	ldr	r2, [sp, #20]
     ee0:	60da      	str	r2, [r3, #12]
}
     ee2:	bf00      	nop
     ee4:	b009      	add	sp, #36	; 0x24
     ee6:	f85d fb04 	ldr.w	pc, [sp], #4

00000eea <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
     eea:	b086      	sub	sp, #24
     eec:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
     eee:	9b01      	ldr	r3, [sp, #4]
     ef0:	691b      	ldr	r3, [r3, #16]
     ef2:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
     ef4:	9b01      	ldr	r3, [sp, #4]
     ef6:	68db      	ldr	r3, [r3, #12]
     ef8:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
     efa:	9a04      	ldr	r2, [sp, #16]
     efc:	9b03      	ldr	r3, [sp, #12]
     efe:	429a      	cmp	r2, r3
     f00:	d808      	bhi.n	f14 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
     f02:	9b01      	ldr	r3, [sp, #4]
     f04:	689a      	ldr	r2, [r3, #8]
     f06:	9b03      	ldr	r3, [sp, #12]
     f08:	1ad2      	subs	r2, r2, r3
     f0a:	9b04      	ldr	r3, [sp, #16]
     f0c:	4413      	add	r3, r2
     f0e:	3b01      	subs	r3, #1
     f10:	9305      	str	r3, [sp, #20]
     f12:	e004      	b.n	f1e <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
     f14:	9a04      	ldr	r2, [sp, #16]
     f16:	9b03      	ldr	r3, [sp, #12]
     f18:	1ad3      	subs	r3, r2, r3
     f1a:	3b01      	subs	r3, #1
     f1c:	9305      	str	r3, [sp, #20]
  }
  return r;
     f1e:	9b05      	ldr	r3, [sp, #20]
}
     f20:	4618      	mov	r0, r3
     f22:	b006      	add	sp, #24
     f24:	4770      	bx	lr
	...

00000f28 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     f28:	b500      	push	{lr}
     f2a:	b089      	sub	sp, #36	; 0x24
     f2c:	9003      	str	r0, [sp, #12]
     f2e:	9102      	str	r1, [sp, #8]
     f30:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
     f32:	9b02      	ldr	r3, [sp, #8]
     f34:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
     f36:	9b03      	ldr	r3, [sp, #12]
     f38:	1c5a      	adds	r2, r3, #1
     f3a:	4613      	mov	r3, r2
     f3c:	005b      	lsls	r3, r3, #1
     f3e:	4413      	add	r3, r2
     f40:	00db      	lsls	r3, r3, #3
     f42:	4a20      	ldr	r2, [pc, #128]	; (fc4 <SEGGER_RTT_WriteNoLock+0x9c>)
     f44:	4413      	add	r3, r2
     f46:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
     f48:	9b05      	ldr	r3, [sp, #20]
     f4a:	695b      	ldr	r3, [r3, #20]
     f4c:	2b02      	cmp	r3, #2
     f4e:	d029      	beq.n	fa4 <SEGGER_RTT_WriteNoLock+0x7c>
     f50:	2b02      	cmp	r3, #2
     f52:	d82e      	bhi.n	fb2 <SEGGER_RTT_WriteNoLock+0x8a>
     f54:	2b00      	cmp	r3, #0
     f56:	d002      	beq.n	f5e <SEGGER_RTT_WriteNoLock+0x36>
     f58:	2b01      	cmp	r3, #1
     f5a:	d013      	beq.n	f84 <SEGGER_RTT_WriteNoLock+0x5c>
     f5c:	e029      	b.n	fb2 <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
     f5e:	9805      	ldr	r0, [sp, #20]
     f60:	f7ff ffc3 	bl	eea <_GetAvailWriteSpace>
     f64:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
     f66:	9a04      	ldr	r2, [sp, #16]
     f68:	9b01      	ldr	r3, [sp, #4]
     f6a:	429a      	cmp	r2, r3
     f6c:	d202      	bcs.n	f74 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
     f6e:	2300      	movs	r3, #0
     f70:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
     f72:	e021      	b.n	fb8 <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
     f74:	9b01      	ldr	r3, [sp, #4]
     f76:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
     f78:	9a01      	ldr	r2, [sp, #4]
     f7a:	9906      	ldr	r1, [sp, #24]
     f7c:	9805      	ldr	r0, [sp, #20]
     f7e:	f7ff ff6d 	bl	e5c <_WriteNoCheck>
    break;
     f82:	e019      	b.n	fb8 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
     f84:	9805      	ldr	r0, [sp, #20]
     f86:	f7ff ffb0 	bl	eea <_GetAvailWriteSpace>
     f8a:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
     f8c:	9a01      	ldr	r2, [sp, #4]
     f8e:	9b04      	ldr	r3, [sp, #16]
     f90:	4293      	cmp	r3, r2
     f92:	bf28      	it	cs
     f94:	4613      	movcs	r3, r2
     f96:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
     f98:	9a07      	ldr	r2, [sp, #28]
     f9a:	9906      	ldr	r1, [sp, #24]
     f9c:	9805      	ldr	r0, [sp, #20]
     f9e:	f7ff ff5d 	bl	e5c <_WriteNoCheck>
    break;
     fa2:	e009      	b.n	fb8 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
     fa4:	9a01      	ldr	r2, [sp, #4]
     fa6:	9906      	ldr	r1, [sp, #24]
     fa8:	9805      	ldr	r0, [sp, #20]
     faa:	f7ff fefb 	bl	da4 <_WriteBlocking>
     fae:	9007      	str	r0, [sp, #28]
    break;
     fb0:	e002      	b.n	fb8 <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
     fb2:	2300      	movs	r3, #0
     fb4:	9307      	str	r3, [sp, #28]
    break;
     fb6:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
     fb8:	9b07      	ldr	r3, [sp, #28]
}
     fba:	4618      	mov	r0, r3
     fbc:	b009      	add	sp, #36	; 0x24
     fbe:	f85d fb04 	ldr.w	pc, [sp], #4
     fc2:	bf00      	nop
     fc4:	1fff9910 	.word	0x1fff9910

00000fc8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     fc8:	b500      	push	{lr}
     fca:	b089      	sub	sp, #36	; 0x24
     fcc:	9003      	str	r0, [sp, #12]
     fce:	9102      	str	r1, [sp, #8]
     fd0:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
     fd2:	4b0f      	ldr	r3, [pc, #60]	; (1010 <SEGGER_RTT_Write+0x48>)
     fd4:	9307      	str	r3, [sp, #28]
     fd6:	9b07      	ldr	r3, [sp, #28]
     fd8:	781b      	ldrb	r3, [r3, #0]
     fda:	b2db      	uxtb	r3, r3
     fdc:	2b53      	cmp	r3, #83	; 0x53
     fde:	d001      	beq.n	fe4 <SEGGER_RTT_Write+0x1c>
     fe0:	f7ff fe86 	bl	cf0 <_DoInit>
  SEGGER_RTT_LOCK();
     fe4:	f3ef 8311 	mrs	r3, BASEPRI
     fe8:	f04f 0120 	mov.w	r1, #32
     fec:	f381 8811 	msr	BASEPRI, r1
     ff0:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
     ff2:	9a01      	ldr	r2, [sp, #4]
     ff4:	9902      	ldr	r1, [sp, #8]
     ff6:	9803      	ldr	r0, [sp, #12]
     ff8:	f7ff ff96 	bl	f28 <SEGGER_RTT_WriteNoLock>
     ffc:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
     ffe:	9b06      	ldr	r3, [sp, #24]
    1000:	f383 8811 	msr	BASEPRI, r3
  return Status;
    1004:	9b05      	ldr	r3, [sp, #20]
}
    1006:	4618      	mov	r0, r3
    1008:	b009      	add	sp, #36	; 0x24
    100a:	f85d fb04 	ldr.w	pc, [sp], #4
    100e:	bf00      	nop
    1010:	1fff9910 	.word	0x1fff9910

00001014 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    1014:	b508      	push	{r3, lr}
  _DoInit();
    1016:	f7ff fe6b 	bl	cf0 <_DoInit>
}
    101a:	bf00      	nop
    101c:	bd08      	pop	{r3, pc}

0000101e <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
    101e:	b500      	push	{lr}
    1020:	b085      	sub	sp, #20
    1022:	9001      	str	r0, [sp, #4]
    1024:	460b      	mov	r3, r1
    1026:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
    102a:	9b01      	ldr	r3, [sp, #4]
    102c:	689b      	ldr	r3, [r3, #8]
    102e:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
    1030:	9b03      	ldr	r3, [sp, #12]
    1032:	1c5a      	adds	r2, r3, #1
    1034:	9b01      	ldr	r3, [sp, #4]
    1036:	685b      	ldr	r3, [r3, #4]
    1038:	429a      	cmp	r2, r3
    103a:	d80f      	bhi.n	105c <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
    103c:	9b01      	ldr	r3, [sp, #4]
    103e:	681a      	ldr	r2, [r3, #0]
    1040:	9b03      	ldr	r3, [sp, #12]
    1042:	4413      	add	r3, r2
    1044:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1048:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
    104a:	9b03      	ldr	r3, [sp, #12]
    104c:	1c5a      	adds	r2, r3, #1
    104e:	9b01      	ldr	r3, [sp, #4]
    1050:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
    1052:	9b01      	ldr	r3, [sp, #4]
    1054:	68db      	ldr	r3, [r3, #12]
    1056:	1c5a      	adds	r2, r3, #1
    1058:	9b01      	ldr	r3, [sp, #4]
    105a:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
    105c:	9b01      	ldr	r3, [sp, #4]
    105e:	689a      	ldr	r2, [r3, #8]
    1060:	9b01      	ldr	r3, [sp, #4]
    1062:	685b      	ldr	r3, [r3, #4]
    1064:	429a      	cmp	r2, r3
    1066:	d115      	bne.n	1094 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
    1068:	9b01      	ldr	r3, [sp, #4]
    106a:	6918      	ldr	r0, [r3, #16]
    106c:	9b01      	ldr	r3, [sp, #4]
    106e:	6819      	ldr	r1, [r3, #0]
    1070:	9b01      	ldr	r3, [sp, #4]
    1072:	689b      	ldr	r3, [r3, #8]
    1074:	461a      	mov	r2, r3
    1076:	f7ff ffa7 	bl	fc8 <SEGGER_RTT_Write>
    107a:	4602      	mov	r2, r0
    107c:	9b01      	ldr	r3, [sp, #4]
    107e:	689b      	ldr	r3, [r3, #8]
    1080:	429a      	cmp	r2, r3
    1082:	d004      	beq.n	108e <_StoreChar+0x70>
      p->ReturnValue = -1;
    1084:	9b01      	ldr	r3, [sp, #4]
    1086:	f04f 32ff 	mov.w	r2, #4294967295
    108a:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
    108c:	e002      	b.n	1094 <_StoreChar+0x76>
      p->Cnt = 0u;
    108e:	9b01      	ldr	r3, [sp, #4]
    1090:	2200      	movs	r2, #0
    1092:	609a      	str	r2, [r3, #8]
}
    1094:	bf00      	nop
    1096:	b005      	add	sp, #20
    1098:	f85d fb04 	ldr.w	pc, [sp], #4

0000109c <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    109c:	b500      	push	{lr}
    109e:	b08b      	sub	sp, #44	; 0x2c
    10a0:	9003      	str	r0, [sp, #12]
    10a2:	9102      	str	r1, [sp, #8]
    10a4:	9201      	str	r2, [sp, #4]
    10a6:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
    10a8:	9b02      	ldr	r3, [sp, #8]
    10aa:	9308      	str	r3, [sp, #32]
  Digit = 1u;
    10ac:	2301      	movs	r3, #1
    10ae:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
    10b0:	2301      	movs	r3, #1
    10b2:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    10b4:	e007      	b.n	10c6 <_PrintUnsigned+0x2a>
    Number = (Number / Base);
    10b6:	9a08      	ldr	r2, [sp, #32]
    10b8:	9b01      	ldr	r3, [sp, #4]
    10ba:	fbb2 f3f3 	udiv	r3, r2, r3
    10be:	9308      	str	r3, [sp, #32]
    Width++;
    10c0:	9b07      	ldr	r3, [sp, #28]
    10c2:	3301      	adds	r3, #1
    10c4:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    10c6:	9a08      	ldr	r2, [sp, #32]
    10c8:	9b01      	ldr	r3, [sp, #4]
    10ca:	429a      	cmp	r2, r3
    10cc:	d2f3      	bcs.n	10b6 <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
    10ce:	9a00      	ldr	r2, [sp, #0]
    10d0:	9b07      	ldr	r3, [sp, #28]
    10d2:	429a      	cmp	r2, r3
    10d4:	d901      	bls.n	10da <_PrintUnsigned+0x3e>
    Width = NumDigits;
    10d6:	9b00      	ldr	r3, [sp, #0]
    10d8:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    10da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    10dc:	f003 0301 	and.w	r3, r3, #1
    10e0:	2b00      	cmp	r3, #0
    10e2:	d128      	bne.n	1136 <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    10e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10e6:	2b00      	cmp	r3, #0
    10e8:	d025      	beq.n	1136 <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    10ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    10ec:	f003 0302 	and.w	r3, r3, #2
    10f0:	2b00      	cmp	r3, #0
    10f2:	d006      	beq.n	1102 <_PrintUnsigned+0x66>
    10f4:	9b00      	ldr	r3, [sp, #0]
    10f6:	2b00      	cmp	r3, #0
    10f8:	d103      	bne.n	1102 <_PrintUnsigned+0x66>
        c = '0';
    10fa:	2330      	movs	r3, #48	; 0x30
    10fc:	f88d 301b 	strb.w	r3, [sp, #27]
    1100:	e002      	b.n	1108 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    1102:	2320      	movs	r3, #32
    1104:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1108:	e00c      	b.n	1124 <_PrintUnsigned+0x88>
        FieldWidth--;
    110a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    110c:	3b01      	subs	r3, #1
    110e:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    1110:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1114:	4619      	mov	r1, r3
    1116:	9803      	ldr	r0, [sp, #12]
    1118:	f7ff ff81 	bl	101e <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    111c:	9b03      	ldr	r3, [sp, #12]
    111e:	68db      	ldr	r3, [r3, #12]
    1120:	2b00      	cmp	r3, #0
    1122:	db07      	blt.n	1134 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1124:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1126:	2b00      	cmp	r3, #0
    1128:	d005      	beq.n	1136 <_PrintUnsigned+0x9a>
    112a:	9a07      	ldr	r2, [sp, #28]
    112c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    112e:	429a      	cmp	r2, r3
    1130:	d3eb      	bcc.n	110a <_PrintUnsigned+0x6e>
    1132:	e000      	b.n	1136 <_PrintUnsigned+0x9a>
          break;
    1134:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    1136:	9b03      	ldr	r3, [sp, #12]
    1138:	68db      	ldr	r3, [r3, #12]
    113a:	2b00      	cmp	r3, #0
    113c:	db55      	blt.n	11ea <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    113e:	9b00      	ldr	r3, [sp, #0]
    1140:	2b01      	cmp	r3, #1
    1142:	d903      	bls.n	114c <_PrintUnsigned+0xb0>
        NumDigits--;
    1144:	9b00      	ldr	r3, [sp, #0]
    1146:	3b01      	subs	r3, #1
    1148:	9300      	str	r3, [sp, #0]
    114a:	e009      	b.n	1160 <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    114c:	9a02      	ldr	r2, [sp, #8]
    114e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1150:	fbb2 f3f3 	udiv	r3, r2, r3
    1154:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    1156:	9a05      	ldr	r2, [sp, #20]
    1158:	9b01      	ldr	r3, [sp, #4]
    115a:	429a      	cmp	r2, r3
    115c:	d200      	bcs.n	1160 <_PrintUnsigned+0xc4>
          break;
    115e:	e005      	b.n	116c <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    1160:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1162:	9a01      	ldr	r2, [sp, #4]
    1164:	fb02 f303 	mul.w	r3, r2, r3
    1168:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    116a:	e7e8      	b.n	113e <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    116c:	9a02      	ldr	r2, [sp, #8]
    116e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1170:	fbb2 f3f3 	udiv	r3, r2, r3
    1174:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    1176:	9b05      	ldr	r3, [sp, #20]
    1178:	9a09      	ldr	r2, [sp, #36]	; 0x24
    117a:	fb02 f303 	mul.w	r3, r2, r3
    117e:	9a02      	ldr	r2, [sp, #8]
    1180:	1ad3      	subs	r3, r2, r3
    1182:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    1184:	4a1b      	ldr	r2, [pc, #108]	; (11f4 <_PrintUnsigned+0x158>)
    1186:	9b05      	ldr	r3, [sp, #20]
    1188:	4413      	add	r3, r2
    118a:	781b      	ldrb	r3, [r3, #0]
    118c:	4619      	mov	r1, r3
    118e:	9803      	ldr	r0, [sp, #12]
    1190:	f7ff ff45 	bl	101e <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    1194:	9b03      	ldr	r3, [sp, #12]
    1196:	68db      	ldr	r3, [r3, #12]
    1198:	2b00      	cmp	r3, #0
    119a:	db08      	blt.n	11ae <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    119c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    119e:	9b01      	ldr	r3, [sp, #4]
    11a0:	fbb2 f3f3 	udiv	r3, r2, r3
    11a4:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    11a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    11a8:	2b00      	cmp	r3, #0
    11aa:	d1df      	bne.n	116c <_PrintUnsigned+0xd0>
    11ac:	e000      	b.n	11b0 <_PrintUnsigned+0x114>
        break;
    11ae:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    11b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    11b2:	f003 0301 	and.w	r3, r3, #1
    11b6:	2b00      	cmp	r3, #0
    11b8:	d017      	beq.n	11ea <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    11ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    11bc:	2b00      	cmp	r3, #0
    11be:	d014      	beq.n	11ea <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    11c0:	e00a      	b.n	11d8 <_PrintUnsigned+0x13c>
          FieldWidth--;
    11c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    11c4:	3b01      	subs	r3, #1
    11c6:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    11c8:	2120      	movs	r1, #32
    11ca:	9803      	ldr	r0, [sp, #12]
    11cc:	f7ff ff27 	bl	101e <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    11d0:	9b03      	ldr	r3, [sp, #12]
    11d2:	68db      	ldr	r3, [r3, #12]
    11d4:	2b00      	cmp	r3, #0
    11d6:	db07      	blt.n	11e8 <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    11d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    11da:	2b00      	cmp	r3, #0
    11dc:	d005      	beq.n	11ea <_PrintUnsigned+0x14e>
    11de:	9a07      	ldr	r2, [sp, #28]
    11e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    11e2:	429a      	cmp	r2, r3
    11e4:	d3ed      	bcc.n	11c2 <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    11e6:	e000      	b.n	11ea <_PrintUnsigned+0x14e>
            break;
    11e8:	bf00      	nop
}
    11ea:	bf00      	nop
    11ec:	b00b      	add	sp, #44	; 0x2c
    11ee:	f85d fb04 	ldr.w	pc, [sp], #4
    11f2:	bf00      	nop
    11f4:	00019a74 	.word	0x00019a74

000011f8 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    11f8:	b500      	push	{lr}
    11fa:	b089      	sub	sp, #36	; 0x24
    11fc:	9005      	str	r0, [sp, #20]
    11fe:	9104      	str	r1, [sp, #16]
    1200:	9203      	str	r2, [sp, #12]
    1202:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1204:	9b04      	ldr	r3, [sp, #16]
    1206:	2b00      	cmp	r3, #0
    1208:	bfb8      	it	lt
    120a:	425b      	neglt	r3, r3
    120c:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    120e:	2301      	movs	r3, #1
    1210:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1212:	e007      	b.n	1224 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    1214:	9b03      	ldr	r3, [sp, #12]
    1216:	9a06      	ldr	r2, [sp, #24]
    1218:	fb92 f3f3 	sdiv	r3, r2, r3
    121c:	9306      	str	r3, [sp, #24]
    Width++;
    121e:	9b07      	ldr	r3, [sp, #28]
    1220:	3301      	adds	r3, #1
    1222:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1224:	9b03      	ldr	r3, [sp, #12]
    1226:	9a06      	ldr	r2, [sp, #24]
    1228:	429a      	cmp	r2, r3
    122a:	daf3      	bge.n	1214 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    122c:	9a02      	ldr	r2, [sp, #8]
    122e:	9b07      	ldr	r3, [sp, #28]
    1230:	429a      	cmp	r2, r3
    1232:	d901      	bls.n	1238 <_PrintInt+0x40>
    Width = NumDigits;
    1234:	9b02      	ldr	r3, [sp, #8]
    1236:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    1238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    123a:	2b00      	cmp	r3, #0
    123c:	d00a      	beq.n	1254 <_PrintInt+0x5c>
    123e:	9b04      	ldr	r3, [sp, #16]
    1240:	2b00      	cmp	r3, #0
    1242:	db04      	blt.n	124e <_PrintInt+0x56>
    1244:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1246:	f003 0304 	and.w	r3, r3, #4
    124a:	2b00      	cmp	r3, #0
    124c:	d002      	beq.n	1254 <_PrintInt+0x5c>
    FieldWidth--;
    124e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1250:	3b01      	subs	r3, #1
    1252:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    1254:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1256:	f003 0302 	and.w	r3, r3, #2
    125a:	2b00      	cmp	r3, #0
    125c:	d002      	beq.n	1264 <_PrintInt+0x6c>
    125e:	9b02      	ldr	r3, [sp, #8]
    1260:	2b00      	cmp	r3, #0
    1262:	d01c      	beq.n	129e <_PrintInt+0xa6>
    1264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1266:	f003 0301 	and.w	r3, r3, #1
    126a:	2b00      	cmp	r3, #0
    126c:	d117      	bne.n	129e <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    126e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1270:	2b00      	cmp	r3, #0
    1272:	d014      	beq.n	129e <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1274:	e00a      	b.n	128c <_PrintInt+0x94>
        FieldWidth--;
    1276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1278:	3b01      	subs	r3, #1
    127a:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    127c:	2120      	movs	r1, #32
    127e:	9805      	ldr	r0, [sp, #20]
    1280:	f7ff fecd 	bl	101e <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1284:	9b05      	ldr	r3, [sp, #20]
    1286:	68db      	ldr	r3, [r3, #12]
    1288:	2b00      	cmp	r3, #0
    128a:	db07      	blt.n	129c <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    128c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    128e:	2b00      	cmp	r3, #0
    1290:	d005      	beq.n	129e <_PrintInt+0xa6>
    1292:	9a07      	ldr	r2, [sp, #28]
    1294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1296:	429a      	cmp	r2, r3
    1298:	d3ed      	bcc.n	1276 <_PrintInt+0x7e>
    129a:	e000      	b.n	129e <_PrintInt+0xa6>
          break;
    129c:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    129e:	9b05      	ldr	r3, [sp, #20]
    12a0:	68db      	ldr	r3, [r3, #12]
    12a2:	2b00      	cmp	r3, #0
    12a4:	db4a      	blt.n	133c <__BSS_SRAM_SIZE+0x9c>
    if (v < 0) {
    12a6:	9b04      	ldr	r3, [sp, #16]
    12a8:	2b00      	cmp	r3, #0
    12aa:	da07      	bge.n	12bc <__BSS_SRAM_SIZE+0x1c>
      v = -v;
    12ac:	9b04      	ldr	r3, [sp, #16]
    12ae:	425b      	negs	r3, r3
    12b0:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    12b2:	212d      	movs	r1, #45	; 0x2d
    12b4:	9805      	ldr	r0, [sp, #20]
    12b6:	f7ff feb2 	bl	101e <_StoreChar>
    12ba:	e008      	b.n	12ce <__BSS_SRAM_SIZE+0x2e>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    12bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    12be:	f003 0304 	and.w	r3, r3, #4
    12c2:	2b00      	cmp	r3, #0
    12c4:	d003      	beq.n	12ce <__BSS_SRAM_SIZE+0x2e>
      _StoreChar(pBufferDesc, '+');
    12c6:	212b      	movs	r1, #43	; 0x2b
    12c8:	9805      	ldr	r0, [sp, #20]
    12ca:	f7ff fea8 	bl	101e <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    12ce:	9b05      	ldr	r3, [sp, #20]
    12d0:	68db      	ldr	r3, [r3, #12]
    12d2:	2b00      	cmp	r3, #0
    12d4:	db32      	blt.n	133c <__BSS_SRAM_SIZE+0x9c>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    12d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    12d8:	f003 0302 	and.w	r3, r3, #2
    12dc:	2b00      	cmp	r3, #0
    12de:	d01f      	beq.n	1320 <__BSS_SRAM_SIZE+0x80>
    12e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    12e2:	f003 0301 	and.w	r3, r3, #1
    12e6:	2b00      	cmp	r3, #0
    12e8:	d11a      	bne.n	1320 <__BSS_SRAM_SIZE+0x80>
    12ea:	9b02      	ldr	r3, [sp, #8]
    12ec:	2b00      	cmp	r3, #0
    12ee:	d117      	bne.n	1320 <__BSS_SRAM_SIZE+0x80>
        if (FieldWidth != 0u) {
    12f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    12f2:	2b00      	cmp	r3, #0
    12f4:	d014      	beq.n	1320 <__BSS_SRAM_SIZE+0x80>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    12f6:	e00a      	b.n	130e <__BSS_SRAM_SIZE+0x6e>
            FieldWidth--;
    12f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    12fa:	3b01      	subs	r3, #1
    12fc:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    12fe:	2130      	movs	r1, #48	; 0x30
    1300:	9805      	ldr	r0, [sp, #20]
    1302:	f7ff fe8c 	bl	101e <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    1306:	9b05      	ldr	r3, [sp, #20]
    1308:	68db      	ldr	r3, [r3, #12]
    130a:	2b00      	cmp	r3, #0
    130c:	db07      	blt.n	131e <__BSS_SRAM_SIZE+0x7e>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    130e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1310:	2b00      	cmp	r3, #0
    1312:	d005      	beq.n	1320 <__BSS_SRAM_SIZE+0x80>
    1314:	9a07      	ldr	r2, [sp, #28]
    1316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1318:	429a      	cmp	r2, r3
    131a:	d3ed      	bcc.n	12f8 <__BSS_SRAM_SIZE+0x58>
    131c:	e000      	b.n	1320 <__BSS_SRAM_SIZE+0x80>
              break;
    131e:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    1320:	9b05      	ldr	r3, [sp, #20]
    1322:	68db      	ldr	r3, [r3, #12]
    1324:	2b00      	cmp	r3, #0
    1326:	db09      	blt.n	133c <__BSS_SRAM_SIZE+0x9c>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    1328:	9904      	ldr	r1, [sp, #16]
    132a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    132c:	9301      	str	r3, [sp, #4]
    132e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1330:	9300      	str	r3, [sp, #0]
    1332:	9b02      	ldr	r3, [sp, #8]
    1334:	9a03      	ldr	r2, [sp, #12]
    1336:	9805      	ldr	r0, [sp, #20]
    1338:	f7ff feb0 	bl	109c <_PrintUnsigned>
      }
    }
  }
}
    133c:	bf00      	nop
    133e:	b009      	add	sp, #36	; 0x24
    1340:	f85d fb04 	ldr.w	pc, [sp], #4

00001344 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    1344:	b500      	push	{lr}
    1346:	b0a3      	sub	sp, #140	; 0x8c
    1348:	9005      	str	r0, [sp, #20]
    134a:	9104      	str	r1, [sp, #16]
    134c:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    134e:	ab06      	add	r3, sp, #24
    1350:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    1352:	2340      	movs	r3, #64	; 0x40
    1354:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    1356:	2300      	movs	r3, #0
    1358:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    135a:	9b05      	ldr	r3, [sp, #20]
    135c:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    135e:	2300      	movs	r3, #0
    1360:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    1362:	9b04      	ldr	r3, [sp, #16]
    1364:	781b      	ldrb	r3, [r3, #0]
    1366:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    136a:	9b04      	ldr	r3, [sp, #16]
    136c:	3301      	adds	r3, #1
    136e:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    1370:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1374:	2b00      	cmp	r3, #0
    1376:	f000 819c 	beq.w	16b2 <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    137a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    137e:	2b25      	cmp	r3, #37	; 0x25
    1380:	f040 818b 	bne.w	169a <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    1384:	2300      	movs	r3, #0
    1386:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    1388:	2301      	movs	r3, #1
    138a:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    138c:	9b04      	ldr	r3, [sp, #16]
    138e:	781b      	ldrb	r3, [r3, #0]
    1390:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    1394:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1398:	3b23      	subs	r3, #35	; 0x23
    139a:	2b0d      	cmp	r3, #13
    139c:	d83e      	bhi.n	141c <SEGGER_RTT_vprintf+0xd8>
    139e:	a201      	add	r2, pc, #4	; (adr r2, 13a4 <SEGGER_RTT_vprintf+0x60>)
    13a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    13a4:	0000140d 	.word	0x0000140d
    13a8:	0000141d 	.word	0x0000141d
    13ac:	0000141d 	.word	0x0000141d
    13b0:	0000141d 	.word	0x0000141d
    13b4:	0000141d 	.word	0x0000141d
    13b8:	0000141d 	.word	0x0000141d
    13bc:	0000141d 	.word	0x0000141d
    13c0:	0000141d 	.word	0x0000141d
    13c4:	000013fd 	.word	0x000013fd
    13c8:	0000141d 	.word	0x0000141d
    13cc:	000013dd 	.word	0x000013dd
    13d0:	0000141d 	.word	0x0000141d
    13d4:	0000141d 	.word	0x0000141d
    13d8:	000013ed 	.word	0x000013ed
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    13dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    13de:	f043 0301 	orr.w	r3, r3, #1
    13e2:	931e      	str	r3, [sp, #120]	; 0x78
    13e4:	9b04      	ldr	r3, [sp, #16]
    13e6:	3301      	adds	r3, #1
    13e8:	9304      	str	r3, [sp, #16]
    13ea:	e01a      	b.n	1422 <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    13ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    13ee:	f043 0302 	orr.w	r3, r3, #2
    13f2:	931e      	str	r3, [sp, #120]	; 0x78
    13f4:	9b04      	ldr	r3, [sp, #16]
    13f6:	3301      	adds	r3, #1
    13f8:	9304      	str	r3, [sp, #16]
    13fa:	e012      	b.n	1422 <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    13fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    13fe:	f043 0304 	orr.w	r3, r3, #4
    1402:	931e      	str	r3, [sp, #120]	; 0x78
    1404:	9b04      	ldr	r3, [sp, #16]
    1406:	3301      	adds	r3, #1
    1408:	9304      	str	r3, [sp, #16]
    140a:	e00a      	b.n	1422 <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    140c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    140e:	f043 0308 	orr.w	r3, r3, #8
    1412:	931e      	str	r3, [sp, #120]	; 0x78
    1414:	9b04      	ldr	r3, [sp, #16]
    1416:	3301      	adds	r3, #1
    1418:	9304      	str	r3, [sp, #16]
    141a:	e002      	b.n	1422 <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    141c:	2300      	movs	r3, #0
    141e:	9320      	str	r3, [sp, #128]	; 0x80
    1420:	bf00      	nop
        }
      } while (v);
    1422:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1424:	2b00      	cmp	r3, #0
    1426:	d1b1      	bne.n	138c <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    1428:	2300      	movs	r3, #0
    142a:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    142c:	9b04      	ldr	r3, [sp, #16]
    142e:	781b      	ldrb	r3, [r3, #0]
    1430:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    1434:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1438:	2b2f      	cmp	r3, #47	; 0x2f
    143a:	d912      	bls.n	1462 <SEGGER_RTT_vprintf+0x11e>
    143c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1440:	2b39      	cmp	r3, #57	; 0x39
    1442:	d80e      	bhi.n	1462 <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    1444:	9b04      	ldr	r3, [sp, #16]
    1446:	3301      	adds	r3, #1
    1448:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    144a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    144c:	4613      	mov	r3, r2
    144e:	009b      	lsls	r3, r3, #2
    1450:	4413      	add	r3, r2
    1452:	005b      	lsls	r3, r3, #1
    1454:	461a      	mov	r2, r3
    1456:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    145a:	4413      	add	r3, r2
    145c:	3b30      	subs	r3, #48	; 0x30
    145e:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    1460:	e7e4      	b.n	142c <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    1462:	2300      	movs	r3, #0
    1464:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    1466:	9b04      	ldr	r3, [sp, #16]
    1468:	781b      	ldrb	r3, [r3, #0]
    146a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    146e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1472:	2b2e      	cmp	r3, #46	; 0x2e
    1474:	d11d      	bne.n	14b2 <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    1476:	9b04      	ldr	r3, [sp, #16]
    1478:	3301      	adds	r3, #1
    147a:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    147c:	9b04      	ldr	r3, [sp, #16]
    147e:	781b      	ldrb	r3, [r3, #0]
    1480:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    1484:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1488:	2b2f      	cmp	r3, #47	; 0x2f
    148a:	d912      	bls.n	14b2 <SEGGER_RTT_vprintf+0x16e>
    148c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1490:	2b39      	cmp	r3, #57	; 0x39
    1492:	d80e      	bhi.n	14b2 <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    1494:	9b04      	ldr	r3, [sp, #16]
    1496:	3301      	adds	r3, #1
    1498:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    149a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    149c:	4613      	mov	r3, r2
    149e:	009b      	lsls	r3, r3, #2
    14a0:	4413      	add	r3, r2
    14a2:	005b      	lsls	r3, r3, #1
    14a4:	461a      	mov	r2, r3
    14a6:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    14aa:	4413      	add	r3, r2
    14ac:	3b30      	subs	r3, #48	; 0x30
    14ae:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    14b0:	e7e4      	b.n	147c <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    14b2:	9b04      	ldr	r3, [sp, #16]
    14b4:	781b      	ldrb	r3, [r3, #0]
    14b6:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    14ba:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    14be:	2b6c      	cmp	r3, #108	; 0x6c
    14c0:	d003      	beq.n	14ca <SEGGER_RTT_vprintf+0x186>
    14c2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    14c6:	2b68      	cmp	r3, #104	; 0x68
    14c8:	d107      	bne.n	14da <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    14ca:	9b04      	ldr	r3, [sp, #16]
    14cc:	3301      	adds	r3, #1
    14ce:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    14d0:	9b04      	ldr	r3, [sp, #16]
    14d2:	781b      	ldrb	r3, [r3, #0]
    14d4:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    14d8:	e7ef      	b.n	14ba <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    14da:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    14de:	2b25      	cmp	r3, #37	; 0x25
    14e0:	f000 80d0 	beq.w	1684 <SEGGER_RTT_vprintf+0x340>
    14e4:	2b25      	cmp	r3, #37	; 0x25
    14e6:	f2c0 80d3 	blt.w	1690 <SEGGER_RTT_vprintf+0x34c>
    14ea:	2b78      	cmp	r3, #120	; 0x78
    14ec:	f300 80d0 	bgt.w	1690 <SEGGER_RTT_vprintf+0x34c>
    14f0:	2b58      	cmp	r3, #88	; 0x58
    14f2:	f2c0 80cd 	blt.w	1690 <SEGGER_RTT_vprintf+0x34c>
    14f6:	3b58      	subs	r3, #88	; 0x58
    14f8:	2b20      	cmp	r3, #32
    14fa:	f200 80c9 	bhi.w	1690 <SEGGER_RTT_vprintf+0x34c>
    14fe:	a201      	add	r2, pc, #4	; (adr r2, 1504 <SEGGER_RTT_vprintf+0x1c0>)
    1500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1504:	000015f5 	.word	0x000015f5
    1508:	00001691 	.word	0x00001691
    150c:	00001691 	.word	0x00001691
    1510:	00001691 	.word	0x00001691
    1514:	00001691 	.word	0x00001691
    1518:	00001691 	.word	0x00001691
    151c:	00001691 	.word	0x00001691
    1520:	00001691 	.word	0x00001691
    1524:	00001691 	.word	0x00001691
    1528:	00001691 	.word	0x00001691
    152c:	00001691 	.word	0x00001691
    1530:	00001589 	.word	0x00001589
    1534:	000015ad 	.word	0x000015ad
    1538:	00001691 	.word	0x00001691
    153c:	00001691 	.word	0x00001691
    1540:	00001691 	.word	0x00001691
    1544:	00001691 	.word	0x00001691
    1548:	00001691 	.word	0x00001691
    154c:	00001691 	.word	0x00001691
    1550:	00001691 	.word	0x00001691
    1554:	00001691 	.word	0x00001691
    1558:	00001691 	.word	0x00001691
    155c:	00001691 	.word	0x00001691
    1560:	00001691 	.word	0x00001691
    1564:	00001661 	.word	0x00001661
    1568:	00001691 	.word	0x00001691
    156c:	00001691 	.word	0x00001691
    1570:	00001619 	.word	0x00001619
    1574:	00001691 	.word	0x00001691
    1578:	000015d1 	.word	0x000015d1
    157c:	00001691 	.word	0x00001691
    1580:	00001691 	.word	0x00001691
    1584:	000015f5 	.word	0x000015f5
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    1588:	9b03      	ldr	r3, [sp, #12]
    158a:	681b      	ldr	r3, [r3, #0]
    158c:	1d19      	adds	r1, r3, #4
    158e:	9a03      	ldr	r2, [sp, #12]
    1590:	6011      	str	r1, [r2, #0]
    1592:	681b      	ldr	r3, [r3, #0]
    1594:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    1596:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1598:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    159c:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    15a0:	ab16      	add	r3, sp, #88	; 0x58
    15a2:	4611      	mov	r1, r2
    15a4:	4618      	mov	r0, r3
    15a6:	f7ff fd3a 	bl	101e <_StoreChar>
        break;
    15aa:	e072      	b.n	1692 <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    15ac:	9b03      	ldr	r3, [sp, #12]
    15ae:	681b      	ldr	r3, [r3, #0]
    15b0:	1d19      	adds	r1, r3, #4
    15b2:	9a03      	ldr	r2, [sp, #12]
    15b4:	6011      	str	r1, [r2, #0]
    15b6:	681b      	ldr	r3, [r3, #0]
    15b8:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    15ba:	a816      	add	r0, sp, #88	; 0x58
    15bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    15be:	9301      	str	r3, [sp, #4]
    15c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    15c2:	9300      	str	r3, [sp, #0]
    15c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    15c6:	220a      	movs	r2, #10
    15c8:	9920      	ldr	r1, [sp, #128]	; 0x80
    15ca:	f7ff fe15 	bl	11f8 <_PrintInt>
        break;
    15ce:	e060      	b.n	1692 <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    15d0:	9b03      	ldr	r3, [sp, #12]
    15d2:	681b      	ldr	r3, [r3, #0]
    15d4:	1d19      	adds	r1, r3, #4
    15d6:	9a03      	ldr	r2, [sp, #12]
    15d8:	6011      	str	r1, [r2, #0]
    15da:	681b      	ldr	r3, [r3, #0]
    15dc:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    15de:	9920      	ldr	r1, [sp, #128]	; 0x80
    15e0:	a816      	add	r0, sp, #88	; 0x58
    15e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    15e4:	9301      	str	r3, [sp, #4]
    15e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    15e8:	9300      	str	r3, [sp, #0]
    15ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    15ec:	220a      	movs	r2, #10
    15ee:	f7ff fd55 	bl	109c <_PrintUnsigned>
        break;
    15f2:	e04e      	b.n	1692 <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    15f4:	9b03      	ldr	r3, [sp, #12]
    15f6:	681b      	ldr	r3, [r3, #0]
    15f8:	1d19      	adds	r1, r3, #4
    15fa:	9a03      	ldr	r2, [sp, #12]
    15fc:	6011      	str	r1, [r2, #0]
    15fe:	681b      	ldr	r3, [r3, #0]
    1600:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    1602:	9920      	ldr	r1, [sp, #128]	; 0x80
    1604:	a816      	add	r0, sp, #88	; 0x58
    1606:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1608:	9301      	str	r3, [sp, #4]
    160a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    160c:	9300      	str	r3, [sp, #0]
    160e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1610:	2210      	movs	r2, #16
    1612:	f7ff fd43 	bl	109c <_PrintUnsigned>
        break;
    1616:	e03c      	b.n	1692 <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    1618:	9b03      	ldr	r3, [sp, #12]
    161a:	681b      	ldr	r3, [r3, #0]
    161c:	1d19      	adds	r1, r3, #4
    161e:	9a03      	ldr	r2, [sp, #12]
    1620:	6011      	str	r1, [r2, #0]
    1622:	681b      	ldr	r3, [r3, #0]
    1624:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    1626:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1628:	2b00      	cmp	r3, #0
    162a:	d101      	bne.n	1630 <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    162c:	4b2c      	ldr	r3, [pc, #176]	; (16e0 <SEGGER_RTT_vprintf+0x39c>)
    162e:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    1630:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1632:	781b      	ldrb	r3, [r3, #0]
    1634:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    1638:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    163a:	3301      	adds	r3, #1
    163c:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    163e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1642:	2b00      	cmp	r3, #0
    1644:	d00a      	beq.n	165c <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    1646:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    164a:	ab16      	add	r3, sp, #88	; 0x58
    164c:	4611      	mov	r1, r2
    164e:	4618      	mov	r0, r3
    1650:	f7ff fce5 	bl	101e <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    1654:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1656:	2b00      	cmp	r3, #0
    1658:	daea      	bge.n	1630 <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    165a:	e01a      	b.n	1692 <SEGGER_RTT_vprintf+0x34e>
              break;
    165c:	bf00      	nop
        break;
    165e:	e018      	b.n	1692 <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    1660:	9b03      	ldr	r3, [sp, #12]
    1662:	681b      	ldr	r3, [r3, #0]
    1664:	1d19      	adds	r1, r3, #4
    1666:	9a03      	ldr	r2, [sp, #12]
    1668:	6011      	str	r1, [r2, #0]
    166a:	681b      	ldr	r3, [r3, #0]
    166c:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    166e:	9920      	ldr	r1, [sp, #128]	; 0x80
    1670:	a816      	add	r0, sp, #88	; 0x58
    1672:	2300      	movs	r3, #0
    1674:	9301      	str	r3, [sp, #4]
    1676:	2308      	movs	r3, #8
    1678:	9300      	str	r3, [sp, #0]
    167a:	2308      	movs	r3, #8
    167c:	2210      	movs	r2, #16
    167e:	f7ff fd0d 	bl	109c <_PrintUnsigned>
        break;
    1682:	e006      	b.n	1692 <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    1684:	ab16      	add	r3, sp, #88	; 0x58
    1686:	2125      	movs	r1, #37	; 0x25
    1688:	4618      	mov	r0, r3
    168a:	f7ff fcc8 	bl	101e <_StoreChar>
        break;
    168e:	e000      	b.n	1692 <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    1690:	bf00      	nop
      }
      sFormat++;
    1692:	9b04      	ldr	r3, [sp, #16]
    1694:	3301      	adds	r3, #1
    1696:	9304      	str	r3, [sp, #16]
    1698:	e006      	b.n	16a8 <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    169a:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    169e:	ab16      	add	r3, sp, #88	; 0x58
    16a0:	4611      	mov	r1, r2
    16a2:	4618      	mov	r0, r3
    16a4:	f7ff fcbb 	bl	101e <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    16a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    16aa:	2b00      	cmp	r3, #0
    16ac:	f6bf ae59 	bge.w	1362 <SEGGER_RTT_vprintf+0x1e>
    16b0:	e000      	b.n	16b4 <SEGGER_RTT_vprintf+0x370>
      break;
    16b2:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    16b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    16b6:	2b00      	cmp	r3, #0
    16b8:	dd0c      	ble.n	16d4 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    16ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
    16bc:	2b00      	cmp	r3, #0
    16be:	d005      	beq.n	16cc <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    16c0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    16c2:	ab06      	add	r3, sp, #24
    16c4:	4619      	mov	r1, r3
    16c6:	9805      	ldr	r0, [sp, #20]
    16c8:	f7ff fc7e 	bl	fc8 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    16cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    16ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
    16d0:	4413      	add	r3, r2
    16d2:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    16d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    16d6:	4618      	mov	r0, r3
    16d8:	b023      	add	sp, #140	; 0x8c
    16da:	f85d fb04 	ldr.w	pc, [sp], #4
    16de:	bf00      	nop
    16e0:	00017e6c 	.word	0x00017e6c

000016e4 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    16e4:	b40e      	push	{r1, r2, r3}
    16e6:	b500      	push	{lr}
    16e8:	b084      	sub	sp, #16
    16ea:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    16ec:	ab06      	add	r3, sp, #24
    16ee:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    16f0:	ab02      	add	r3, sp, #8
    16f2:	461a      	mov	r2, r3
    16f4:	9905      	ldr	r1, [sp, #20]
    16f6:	9801      	ldr	r0, [sp, #4]
    16f8:	f7ff fe24 	bl	1344 <SEGGER_RTT_vprintf>
    16fc:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    16fe:	9b03      	ldr	r3, [sp, #12]
}
    1700:	4618      	mov	r0, r3
    1702:	b004      	add	sp, #16
    1704:	f85d eb04 	ldr.w	lr, [sp], #4
    1708:	b003      	add	sp, #12
    170a:	4770      	bx	lr

0000170c <MCU_clocks>:
 *  -SIRCDIV1_CLK -->8 Mhz
 *  -SIRCDIV2_CLK -->8 Mhz
 *  -SOSCDIV1_CLK  -->Disabled
 *  -SOSCDIV2_CLK  -->Disabled
 */
void MCU_clocks( void ) {
    170c:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );//Initializing MCU driver
    170e:	4805      	ldr	r0, [pc, #20]	; (1724 <MCU_clocks+0x18>)
    1710:	f004 fa38 	bl	5b84 <Mcu_Init>
    Mcu_SetMode( Run_mode );//MCU on run mode.
    1714:	2000      	movs	r0, #0
    1716:	f004 fae9 	bl	5cec <Mcu_SetMode>
    Mcu_InitClock( Clocks_conf_0 );//Executing clock configurations established in container.
    171a:	2000      	movs	r0, #0
    171c:	f004 fab0 	bl	5c80 <Mcu_InitClock>

    //Configuring Pll clock.
    /*while ( Mcu_GetPllStatus() != MCU_PLL_LOCKED );//Waiting until PLL is locked.
    Mcu_DistributePllClock();//Executing pll clock configuration established in container.*/
}
    1720:	bf00      	nop
    1722:	bd08      	pop	{r3, pc}
    1724:	000192d8 	.word	0x000192d8

00001728 <EcuM_Init>:
/**
 * @brief This function initialices the microcontroller and the peripherals
 * 
 * 
 */
void EcuM_Init( void ) {   
    1728:	b508      	push	{r3, lr}
    MCU_clocks();
    172a:	f7ff ffef 	bl	170c <MCU_clocks>
    OsIf_Init( NULL_PTR );  //Init Osif timer.
    172e:	2000      	movs	r0, #0
    1730:	f000 fbd1 	bl	1ed6 <OsIf_Init>
    Platform_Init( NULL_PTR );  //Init platform driver and configuration.
    1734:	2000      	movs	r0, #0
    1736:	f000 fa71 	bl	1c1c <Platform_Init>
    Port_Init( &Port_Config );  //Init port driver and configuration.
    173a:	4807      	ldr	r0, [pc, #28]	; (1758 <EcuM_Init+0x30>)
    173c:	f004 feba 	bl	64b4 <Port_Init>
    Spi_Init( &Spi_Config );    //Init spi driver and configuration.
    1740:	4806      	ldr	r0, [pc, #24]	; (175c <EcuM_Init+0x34>)
    1742:	f008 f8b5 	bl	98b0 <Spi_Init>
    Can_43_FLEXCAN_Init( &Can_43_FLEXCAN_Config );  //Init FlexCan driver
    1746:	4806      	ldr	r0, [pc, #24]	; (1760 <EcuM_Init+0x38>)
    1748:	f008 fdbc 	bl	a2c4 <Can_43_FLEXCAN_Init>
    CanIf_Init( &CanIf_Config );    //Init CanIf driver.
    174c:	4805      	ldr	r0, [pc, #20]	; (1764 <EcuM_Init+0x3c>)
    174e:	f015 fbd9 	bl	16f04 <CanIf_Init>
}
    1752:	bf00      	nop
    1754:	bd08      	pop	{r3, pc}
    1756:	bf00      	nop
    1758:	00019940 	.word	0x00019940
    175c:	00019a40 	.word	0x00019a40
    1760:	00018d9c 	.word	0x00018d9c
    1764:	00018c18 	.word	0x00018c18

00001768 <Delay>:
/**
 * @brief This function is a delay in ms using the osif timer.
 * 
 * @param ms Delay in ms.
 */
void Delay( uint32 ms ) {
    1768:	b500      	push	{lr}
    176a:	b087      	sub	sp, #28
    176c:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
    176e:	9b01      	ldr	r3, [sp, #4]
    1770:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1774:	fb02 f303 	mul.w	r3, r2, r3
    1778:	2101      	movs	r1, #1
    177a:	4618      	mov	r0, r3
    177c:	f000 fc00 	bl	1f80 <OsIf_MicrosToTicks>
    1780:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
    1782:	2001      	movs	r0, #1
    1784:	f000 fbb0 	bl	1ee8 <OsIf_GetCounter>
    1788:	4603      	mov	r3, r0
    178a:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
    178c:	2300      	movs	r3, #0
    178e:	9305      	str	r3, [sp, #20]

    do {
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
    1790:	ab03      	add	r3, sp, #12
    1792:	2101      	movs	r1, #1
    1794:	4618      	mov	r0, r3
    1796:	f000 fbc0 	bl	1f1a <OsIf_GetElapsed>
    179a:	4602      	mov	r2, r0
    179c:	9b05      	ldr	r3, [sp, #20]
    179e:	4413      	add	r3, r2
    17a0:	9305      	str	r3, [sp, #20]
    } while( ElapsedTime < Timeout );
    17a2:	9a05      	ldr	r2, [sp, #20]
    17a4:	9b04      	ldr	r3, [sp, #16]
    17a6:	429a      	cmp	r2, r3
    17a8:	d3f2      	bcc.n	1790 <Delay+0x28>
    17aa:	bf00      	nop
    17ac:	bf00      	nop
    17ae:	b007      	add	sp, #28
    17b0:	f85d fb04 	ldr.w	pc, [sp], #4

000017b4 <memcpy>:
    17b4:	440a      	add	r2, r1
    17b6:	4291      	cmp	r1, r2
    17b8:	f100 33ff 	add.w	r3, r0, #4294967295
    17bc:	d100      	bne.n	17c0 <memcpy+0xc>
    17be:	4770      	bx	lr
    17c0:	b510      	push	{r4, lr}
    17c2:	f811 4b01 	ldrb.w	r4, [r1], #1
    17c6:	f803 4f01 	strb.w	r4, [r3, #1]!
    17ca:	4291      	cmp	r1, r2
    17cc:	d1f9      	bne.n	17c2 <memcpy+0xe>
    17ce:	bd10      	pop	{r4, pc}

000017d0 <memset>:
    17d0:	4402      	add	r2, r0
    17d2:	4603      	mov	r3, r0
    17d4:	4293      	cmp	r3, r2
    17d6:	d100      	bne.n	17da <memset+0xa>
    17d8:	4770      	bx	lr
    17da:	f803 1b01 	strb.w	r1, [r3], #1
    17de:	e7f9      	b.n	17d4 <memset+0x4>

000017e0 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    17e0:	b500      	push	{lr}
    17e2:	b087      	sub	sp, #28
    17e4:	9003      	str	r0, [sp, #12]
    17e6:	9102      	str	r1, [sp, #8]
    17e8:	9201      	str	r2, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    sint32 dev_irqNumber = (sint32)eIrqNumber;
    17ea:	9b03      	ldr	r3, [sp, #12]
    17ec:	9305      	str	r3, [sp, #20]
    DevAssert((sint32)INT_CTRL_IP_IRQ_MIN <= dev_irqNumber);
    17ee:	9b05      	ldr	r3, [sp, #20]
    17f0:	43db      	mvns	r3, r3
    17f2:	0fdb      	lsrs	r3, r3, #31
    17f4:	b2db      	uxtb	r3, r3
    17f6:	4618      	mov	r0, r3
    17f8:	f7ff f8c0 	bl	97c <DevAssert>
    DevAssert(dev_irqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    17fc:	9b05      	ldr	r3, [sp, #20]
    17fe:	2b7a      	cmp	r3, #122	; 0x7a
    1800:	bfd4      	ite	le
    1802:	2301      	movle	r3, #1
    1804:	2300      	movgt	r3, #0
    1806:	b2db      	uxtb	r3, r3
    1808:	4618      	mov	r0, r3
    180a:	f7ff f8b7 	bl	97c <DevAssert>
#if (MCAL_PLATFORM_ARM == MCAL_ARM_MARCH)
#if defined(S32K3XX) || defined(SAF85) || defined(S32R41)
    DevAssert(S32_SCB->VTOR >= (uint32)__RAM_INTERRUPT_START);
#else
    DevAssert(S32_SCB->VTOR >= (uint32)__INT_SRAM_START);
    180e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1812:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    1816:	4a14      	ldr	r2, [pc, #80]	; (1868 <IntCtrl_Ip_InstallHandlerPrivileged+0x88>)
    1818:	4293      	cmp	r3, r2
    181a:	bf2c      	ite	cs
    181c:	2301      	movcs	r3, #1
    181e:	2300      	movcc	r3, #0
    1820:	b2db      	uxtb	r3, r3
    1822:	4618      	mov	r0, r3
    1824:	f7ff f8aa 	bl	97c <DevAssert>

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    1828:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    182c:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    1830:	9304      	str	r3, [sp, #16]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    1832:	9b01      	ldr	r3, [sp, #4]
    1834:	2b00      	cmp	r3, #0
    1836:	d007      	beq.n	1848 <IntCtrl_Ip_InstallHandlerPrivileged+0x68>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    1838:	9b03      	ldr	r3, [sp, #12]
    183a:	3310      	adds	r3, #16
    183c:	009b      	lsls	r3, r3, #2
    183e:	9a04      	ldr	r2, [sp, #16]
    1840:	4413      	add	r3, r2
    1842:	681a      	ldr	r2, [r3, #0]
    1844:	9b01      	ldr	r3, [sp, #4]
    1846:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    1848:	9b03      	ldr	r3, [sp, #12]
    184a:	3310      	adds	r3, #16
    184c:	009b      	lsls	r3, r3, #2
    184e:	9a04      	ldr	r2, [sp, #16]
    1850:	4413      	add	r3, r2
    1852:	9a02      	ldr	r2, [sp, #8]
    1854:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    1856:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    185a:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    185e:	bf00      	nop
    1860:	b007      	add	sp, #28
    1862:	f85d fb04 	ldr.w	pc, [sp], #4
    1866:	bf00      	nop
    1868:	1fff8000 	.word	0x1fff8000

0000186c <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    186c:	b500      	push	{lr}
    186e:	b083      	sub	sp, #12
    1870:	9001      	str	r0, [sp, #4]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    DevAssert(0 <= (sint32)eIrqNumber);
    1872:	9b01      	ldr	r3, [sp, #4]
    1874:	43db      	mvns	r3, r3
    1876:	0fdb      	lsrs	r3, r3, #31
    1878:	b2db      	uxtb	r3, r3
    187a:	4618      	mov	r0, r3
    187c:	f7ff f87e 	bl	97c <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    1880:	9b01      	ldr	r3, [sp, #4]
    1882:	2b7a      	cmp	r3, #122	; 0x7a
    1884:	bfd4      	ite	le
    1886:	2301      	movle	r3, #1
    1888:	2300      	movgt	r3, #0
    188a:	b2db      	uxtb	r3, r3
    188c:	4618      	mov	r0, r3
    188e:	f7ff f875 	bl	97c <DevAssert>
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1892:	9b01      	ldr	r3, [sp, #4]
    1894:	f003 021f 	and.w	r2, r3, #31
    1898:	4905      	ldr	r1, [pc, #20]	; (18b0 <IntCtrl_Ip_EnableIrqPrivileged+0x44>)
    189a:	9b01      	ldr	r3, [sp, #4]
    189c:	095b      	lsrs	r3, r3, #5
    189e:	2001      	movs	r0, #1
    18a0:	fa00 f202 	lsl.w	r2, r0, r2
    18a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    18a8:	bf00      	nop
    18aa:	b003      	add	sp, #12
    18ac:	f85d fb04 	ldr.w	pc, [sp], #4
    18b0:	e000e100 	.word	0xe000e100

000018b4 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    18b4:	b500      	push	{lr}
    18b6:	b083      	sub	sp, #12
    18b8:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    DevAssert(0 <= (sint32)eIrqNumber);
    18ba:	9b01      	ldr	r3, [sp, #4]
    18bc:	43db      	mvns	r3, r3
    18be:	0fdb      	lsrs	r3, r3, #31
    18c0:	b2db      	uxtb	r3, r3
    18c2:	4618      	mov	r0, r3
    18c4:	f7ff f85a 	bl	97c <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    18c8:	9b01      	ldr	r3, [sp, #4]
    18ca:	2b7a      	cmp	r3, #122	; 0x7a
    18cc:	bfd4      	ite	le
    18ce:	2301      	movle	r3, #1
    18d0:	2300      	movgt	r3, #0
    18d2:	b2db      	uxtb	r3, r3
    18d4:	4618      	mov	r0, r3
    18d6:	f7ff f851 	bl	97c <DevAssert>
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    18da:	9b01      	ldr	r3, [sp, #4]
    18dc:	f003 021f 	and.w	r2, r3, #31
    18e0:	4906      	ldr	r1, [pc, #24]	; (18fc <IntCtrl_Ip_DisableIrqPrivileged+0x48>)
    18e2:	9b01      	ldr	r3, [sp, #4]
    18e4:	095b      	lsrs	r3, r3, #5
    18e6:	2001      	movs	r0, #1
    18e8:	fa00 f202 	lsl.w	r2, r0, r2
    18ec:	3320      	adds	r3, #32
    18ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    18f2:	bf00      	nop
    18f4:	b003      	add	sp, #12
    18f6:	f85d fb04 	ldr.w	pc, [sp], #4
    18fa:	bf00      	nop
    18fc:	e000e100 	.word	0xe000e100

00001900 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1900:	b500      	push	{lr}
    1902:	b085      	sub	sp, #20
    1904:	9001      	str	r0, [sp, #4]
    1906:	460b      	mov	r3, r1
    1908:	f88d 3003 	strb.w	r3, [sp, #3]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)

    /* Check IRQ number and priority - dev_irqNumber is used to avoid compiler warning */
    DevAssert((sint32)INT_CTRL_IP_IRQ_MIN <= (sint32)eIrqNumber);
    190c:	9b01      	ldr	r3, [sp, #4]
    190e:	43db      	mvns	r3, r3
    1910:	0fdb      	lsrs	r3, r3, #31
    1912:	b2db      	uxtb	r3, r3
    1914:	4618      	mov	r0, r3
    1916:	f7ff f831 	bl	97c <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    191a:	9b01      	ldr	r3, [sp, #4]
    191c:	2b7a      	cmp	r3, #122	; 0x7a
    191e:	bfd4      	ite	le
    1920:	2301      	movle	r3, #1
    1922:	2300      	movgt	r3, #0
    1924:	b2db      	uxtb	r3, r3
    1926:	4618      	mov	r0, r3
    1928:	f7ff f828 	bl	97c <DevAssert>
#if (INT_CTRL_IP_CORTEXM == STD_ON)
    DevAssert(u8Priority < (uint8)(1U << INT_CTRL_IP_NVIC_PRIO_BITS));
    192c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1930:	2b0f      	cmp	r3, #15
    1932:	bf94      	ite	ls
    1934:	2301      	movls	r3, #1
    1936:	2300      	movhi	r3, #0
    1938:	b2db      	uxtb	r3, r3
    193a:	4618      	mov	r0, r3
    193c:	f7ff f81e 	bl	97c <DevAssert>
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1940:	2304      	movs	r3, #4
    1942:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    1946:	f89d 2003 	ldrb.w	r2, [sp, #3]
    194a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    194e:	fa02 f103 	lsl.w	r1, r2, r3
    1952:	4a05      	ldr	r2, [pc, #20]	; (1968 <IntCtrl_Ip_SetPriorityPrivileged+0x68>)
    1954:	9b01      	ldr	r3, [sp, #4]
    1956:	b2c9      	uxtb	r1, r1
    1958:	4413      	add	r3, r2
    195a:	460a      	mov	r2, r1
    195c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    1960:	bf00      	nop
    1962:	b005      	add	sp, #20
    1964:	f85d fb04 	ldr.w	pc, [sp], #4
    1968:	e000e100 	.word	0xe000e100

0000196c <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    196c:	b500      	push	{lr}
    196e:	b085      	sub	sp, #20
    1970:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)

    /* Check IRQ number */
    DevAssert(INT_CTRL_IP_IRQ_MIN <= eIrqNumber);
    1972:	9b01      	ldr	r3, [sp, #4]
    1974:	43db      	mvns	r3, r3
    1976:	0fdb      	lsrs	r3, r3, #31
    1978:	b2db      	uxtb	r3, r3
    197a:	4618      	mov	r0, r3
    197c:	f7fe fffe 	bl	97c <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    1980:	9b01      	ldr	r3, [sp, #4]
    1982:	2b7a      	cmp	r3, #122	; 0x7a
    1984:	bfd4      	ite	le
    1986:	2301      	movle	r3, #1
    1988:	2300      	movgt	r3, #0
    198a:	b2db      	uxtb	r3, r3
    198c:	4618      	mov	r0, r3
    198e:	f7fe fff5 	bl	97c <DevAssert>

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1992:	2304      	movs	r3, #4
    1994:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    1998:	4a09      	ldr	r2, [pc, #36]	; (19c0 <IntCtrl_Ip_GetPriorityPrivileged+0x54>)
    199a:	9b01      	ldr	r3, [sp, #4]
    199c:	4413      	add	r3, r2
    199e:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    19a2:	b2db      	uxtb	r3, r3
    19a4:	461a      	mov	r2, r3
    19a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    19aa:	fa42 f303 	asr.w	r3, r2, r3
    19ae:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    19b2:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    19b6:	4618      	mov	r0, r3
    19b8:	b005      	add	sp, #20
    19ba:	f85d fb04 	ldr.w	pc, [sp], #4
    19be:	bf00      	nop
    19c0:	e000e100 	.word	0xe000e100

000019c4 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    19c4:	b500      	push	{lr}
    19c6:	b083      	sub	sp, #12
    19c8:	9001      	str	r0, [sp, #4]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number */
    DevAssert(0 <= (sint32)eIrqNumber);
    19ca:	9b01      	ldr	r3, [sp, #4]
    19cc:	43db      	mvns	r3, r3
    19ce:	0fdb      	lsrs	r3, r3, #31
    19d0:	b2db      	uxtb	r3, r3
    19d2:	4618      	mov	r0, r3
    19d4:	f7fe ffd2 	bl	97c <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    19d8:	9b01      	ldr	r3, [sp, #4]
    19da:	2b7a      	cmp	r3, #122	; 0x7a
    19dc:	bfd4      	ite	le
    19de:	2301      	movle	r3, #1
    19e0:	2300      	movgt	r3, #0
    19e2:	b2db      	uxtb	r3, r3
    19e4:	4618      	mov	r0, r3
    19e6:	f7fe ffc9 	bl	97c <DevAssert>
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    19ea:	9b01      	ldr	r3, [sp, #4]
    19ec:	f003 021f 	and.w	r2, r3, #31
    19f0:	4906      	ldr	r1, [pc, #24]	; (1a0c <IntCtrl_Ip_ClearPendingPrivileged+0x48>)
    19f2:	9b01      	ldr	r3, [sp, #4]
    19f4:	095b      	lsrs	r3, r3, #5
    19f6:	2001      	movs	r0, #1
    19f8:	fa00 f202 	lsl.w	r2, r0, r2
    19fc:	3360      	adds	r3, #96	; 0x60
    19fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    1a02:	bf00      	nop
    1a04:	b003      	add	sp, #12
    1a06:	f85d fb04 	ldr.w	pc, [sp], #4
    1a0a:	bf00      	nop
    1a0c:	e000e100 	.word	0xe000e100

00001a10 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1a10:	b500      	push	{lr}
    1a12:	b085      	sub	sp, #20
    1a14:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_ENABLE_VTOR_CONFIG == STD_ON)
    S32_SCB->VTOR = pIntCtrlCtrlConfig->u32VectorTableAddress;
#endif

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    1a16:	9b01      	ldr	r3, [sp, #4]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	bf14      	ite	ne
    1a1c:	2301      	movne	r3, #1
    1a1e:	2300      	moveq	r3, #0
    1a20:	b2db      	uxtb	r3, r3
    1a22:	4618      	mov	r0, r3
    1a24:	f7fe ffaa 	bl	97c <DevAssert>
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
    1a28:	9b01      	ldr	r3, [sp, #4]
    1a2a:	681b      	ldr	r3, [r3, #0]
    1a2c:	2b59      	cmp	r3, #89	; 0x59
    1a2e:	bf94      	ite	ls
    1a30:	2301      	movls	r3, #1
    1a32:	2300      	movhi	r3, #0
    1a34:	b2db      	uxtb	r3, r3
    1a36:	4618      	mov	r0, r3
    1a38:	f7fe ffa0 	bl	97c <DevAssert>
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1a3c:	2300      	movs	r3, #0
    1a3e:	9303      	str	r3, [sp, #12]
    1a40:	e05d      	b.n	1afe <IntCtrl_Ip_Init+0xee>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1a42:	9b01      	ldr	r3, [sp, #4]
    1a44:	6859      	ldr	r1, [r3, #4]
    1a46:	9a03      	ldr	r2, [sp, #12]
    1a48:	4613      	mov	r3, r2
    1a4a:	005b      	lsls	r3, r3, #1
    1a4c:	4413      	add	r3, r2
    1a4e:	009b      	lsls	r3, r3, #2
    1a50:	440b      	add	r3, r1
    1a52:	681b      	ldr	r3, [r3, #0]
    1a54:	4618      	mov	r0, r3
    1a56:	f000 f899 	bl	1b8c <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a5a:	9b01      	ldr	r3, [sp, #4]
    1a5c:	6859      	ldr	r1, [r3, #4]
    1a5e:	9a03      	ldr	r2, [sp, #12]
    1a60:	4613      	mov	r3, r2
    1a62:	005b      	lsls	r3, r3, #1
    1a64:	4413      	add	r3, r2
    1a66:	009b      	lsls	r3, r3, #2
    1a68:	440b      	add	r3, r1
    1a6a:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1a6c:	9b01      	ldr	r3, [sp, #4]
    1a6e:	6859      	ldr	r1, [r3, #4]
    1a70:	9a03      	ldr	r2, [sp, #12]
    1a72:	4613      	mov	r3, r2
    1a74:	005b      	lsls	r3, r3, #1
    1a76:	4413      	add	r3, r2
    1a78:	009b      	lsls	r3, r3, #2
    1a7a:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a7c:	795b      	ldrb	r3, [r3, #5]
    1a7e:	4619      	mov	r1, r3
    1a80:	f000 f869 	bl	1b56 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a84:	9b01      	ldr	r3, [sp, #4]
    1a86:	6859      	ldr	r1, [r3, #4]
    1a88:	9a03      	ldr	r2, [sp, #12]
    1a8a:	4613      	mov	r3, r2
    1a8c:	005b      	lsls	r3, r3, #1
    1a8e:	4413      	add	r3, r2
    1a90:	009b      	lsls	r3, r3, #2
    1a92:	440b      	add	r3, r1
    1a94:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1a96:	9b01      	ldr	r3, [sp, #4]
    1a98:	6859      	ldr	r1, [r3, #4]
    1a9a:	9a03      	ldr	r2, [sp, #12]
    1a9c:	4613      	mov	r3, r2
    1a9e:	005b      	lsls	r3, r3, #1
    1aa0:	4413      	add	r3, r2
    1aa2:	009b      	lsls	r3, r3, #2
    1aa4:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1aa6:	689b      	ldr	r3, [r3, #8]
    1aa8:	2200      	movs	r2, #0
    1aaa:	4619      	mov	r1, r3
    1aac:	f000 f831 	bl	1b12 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1ab0:	9b01      	ldr	r3, [sp, #4]
    1ab2:	6859      	ldr	r1, [r3, #4]
    1ab4:	9a03      	ldr	r2, [sp, #12]
    1ab6:	4613      	mov	r3, r2
    1ab8:	005b      	lsls	r3, r3, #1
    1aba:	4413      	add	r3, r2
    1abc:	009b      	lsls	r3, r3, #2
    1abe:	440b      	add	r3, r1
    1ac0:	791b      	ldrb	r3, [r3, #4]
    1ac2:	2b00      	cmp	r3, #0
    1ac4:	d00c      	beq.n	1ae0 <IntCtrl_Ip_Init+0xd0>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1ac6:	9b01      	ldr	r3, [sp, #4]
    1ac8:	6859      	ldr	r1, [r3, #4]
    1aca:	9a03      	ldr	r2, [sp, #12]
    1acc:	4613      	mov	r3, r2
    1ace:	005b      	lsls	r3, r3, #1
    1ad0:	4413      	add	r3, r2
    1ad2:	009b      	lsls	r3, r3, #2
    1ad4:	440b      	add	r3, r1
    1ad6:	681b      	ldr	r3, [r3, #0]
    1ad8:	4618      	mov	r0, r3
    1ada:	f000 f828 	bl	1b2e <IntCtrl_Ip_EnableIrq>
    1ade:	e00b      	b.n	1af8 <IntCtrl_Ip_Init+0xe8>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1ae0:	9b01      	ldr	r3, [sp, #4]
    1ae2:	6859      	ldr	r1, [r3, #4]
    1ae4:	9a03      	ldr	r2, [sp, #12]
    1ae6:	4613      	mov	r3, r2
    1ae8:	005b      	lsls	r3, r3, #1
    1aea:	4413      	add	r3, r2
    1aec:	009b      	lsls	r3, r3, #2
    1aee:	440b      	add	r3, r1
    1af0:	681b      	ldr	r3, [r3, #0]
    1af2:	4618      	mov	r0, r3
    1af4:	f000 f825 	bl	1b42 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1af8:	9b03      	ldr	r3, [sp, #12]
    1afa:	3301      	adds	r3, #1
    1afc:	9303      	str	r3, [sp, #12]
    1afe:	9b01      	ldr	r3, [sp, #4]
    1b00:	681b      	ldr	r3, [r3, #0]
    1b02:	9a03      	ldr	r2, [sp, #12]
    1b04:	429a      	cmp	r2, r3
    1b06:	d39c      	bcc.n	1a42 <IntCtrl_Ip_Init+0x32>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    1b08:	2300      	movs	r3, #0
}
    1b0a:	4618      	mov	r0, r3
    1b0c:	b005      	add	sp, #20
    1b0e:	f85d fb04 	ldr.w	pc, [sp], #4

00001b12 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1b12:	b500      	push	{lr}
    1b14:	b085      	sub	sp, #20
    1b16:	9003      	str	r0, [sp, #12]
    1b18:	9102      	str	r1, [sp, #8]
    1b1a:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    1b1c:	9a01      	ldr	r2, [sp, #4]
    1b1e:	9902      	ldr	r1, [sp, #8]
    1b20:	9803      	ldr	r0, [sp, #12]
    1b22:	f7ff fe5d 	bl	17e0 <IntCtrl_Ip_InstallHandlerPrivileged>
}
    1b26:	bf00      	nop
    1b28:	b005      	add	sp, #20
    1b2a:	f85d fb04 	ldr.w	pc, [sp], #4

00001b2e <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    1b2e:	b500      	push	{lr}
    1b30:	b083      	sub	sp, #12
    1b32:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    1b34:	9801      	ldr	r0, [sp, #4]
    1b36:	f7ff fe99 	bl	186c <IntCtrl_Ip_EnableIrqPrivileged>
}
    1b3a:	bf00      	nop
    1b3c:	b003      	add	sp, #12
    1b3e:	f85d fb04 	ldr.w	pc, [sp], #4

00001b42 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    1b42:	b500      	push	{lr}
    1b44:	b083      	sub	sp, #12
    1b46:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    1b48:	9801      	ldr	r0, [sp, #4]
    1b4a:	f7ff feb3 	bl	18b4 <IntCtrl_Ip_DisableIrqPrivileged>
}
    1b4e:	bf00      	nop
    1b50:	b003      	add	sp, #12
    1b52:	f85d fb04 	ldr.w	pc, [sp], #4

00001b56 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1b56:	b500      	push	{lr}
    1b58:	b083      	sub	sp, #12
    1b5a:	9001      	str	r0, [sp, #4]
    1b5c:	460b      	mov	r3, r1
    1b5e:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    1b62:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1b66:	4619      	mov	r1, r3
    1b68:	9801      	ldr	r0, [sp, #4]
    1b6a:	f7ff fec9 	bl	1900 <IntCtrl_Ip_SetPriorityPrivileged>
}
    1b6e:	bf00      	nop
    1b70:	b003      	add	sp, #12
    1b72:	f85d fb04 	ldr.w	pc, [sp], #4

00001b76 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    1b76:	b500      	push	{lr}
    1b78:	b083      	sub	sp, #12
    1b7a:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    1b7c:	9801      	ldr	r0, [sp, #4]
    1b7e:	f7ff fef5 	bl	196c <IntCtrl_Ip_GetPriorityPrivileged>
    1b82:	4603      	mov	r3, r0
}
    1b84:	4618      	mov	r0, r3
    1b86:	b003      	add	sp, #12
    1b88:	f85d fb04 	ldr.w	pc, [sp], #4

00001b8c <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    1b8c:	b500      	push	{lr}
    1b8e:	b083      	sub	sp, #12
    1b90:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    1b92:	9801      	ldr	r0, [sp, #4]
    1b94:	f7ff ff16 	bl	19c4 <IntCtrl_Ip_ClearPendingPrivileged>
}
    1b98:	bf00      	nop
    1b9a:	b003      	add	sp, #12
    1b9c:	f85d fb04 	ldr.w	pc, [sp], #4

00001ba0 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1ba0:	b500      	push	{lr}
    1ba2:	b083      	sub	sp, #12
    1ba4:	9001      	str	r0, [sp, #4]
    1ba6:	460b      	mov	r3, r1
    1ba8:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    1bac:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1bb0:	2b00      	cmp	r3, #0
    1bb2:	d003      	beq.n	1bbc <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    1bb4:	9801      	ldr	r0, [sp, #4]
    1bb6:	f7ff ffba 	bl	1b2e <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    1bba:	e002      	b.n	1bc2 <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    1bbc:	9801      	ldr	r0, [sp, #4]
    1bbe:	f7ff ffc0 	bl	1b42 <IntCtrl_Ip_DisableIrq>
}
    1bc2:	bf00      	nop
    1bc4:	b003      	add	sp, #12
    1bc6:	f85d fb04 	ldr.w	pc, [sp], #4

00001bca <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1bca:	b500      	push	{lr}
    1bcc:	b083      	sub	sp, #12
    1bce:	9001      	str	r0, [sp, #4]
    1bd0:	460b      	mov	r3, r1
    1bd2:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    1bd6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1bda:	4619      	mov	r1, r3
    1bdc:	9801      	ldr	r0, [sp, #4]
    1bde:	f7ff ffba 	bl	1b56 <IntCtrl_Ip_SetPriority>
}
    1be2:	bf00      	nop
    1be4:	b003      	add	sp, #12
    1be6:	f85d fb04 	ldr.w	pc, [sp], #4

00001bea <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    1bea:	b500      	push	{lr}
    1bec:	b083      	sub	sp, #12
    1bee:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    1bf0:	9801      	ldr	r0, [sp, #4]
    1bf2:	f7ff ffc0 	bl	1b76 <IntCtrl_Ip_GetPriority>
    1bf6:	4603      	mov	r3, r0
}
    1bf8:	4618      	mov	r0, r3
    1bfa:	b003      	add	sp, #12
    1bfc:	f85d fb04 	ldr.w	pc, [sp], #4

00001c00 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1c00:	b500      	push	{lr}
    1c02:	b085      	sub	sp, #20
    1c04:	9003      	str	r0, [sp, #12]
    1c06:	9102      	str	r1, [sp, #8]
    1c08:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1c0a:	9a01      	ldr	r2, [sp, #4]
    1c0c:	9902      	ldr	r1, [sp, #8]
    1c0e:	9803      	ldr	r0, [sp, #12]
    1c10:	f7ff ff7f 	bl	1b12 <IntCtrl_Ip_InstallHandler>
}
    1c14:	bf00      	nop
    1c16:	b005      	add	sp, #20
    1c18:	f85d fb04 	ldr.w	pc, [sp], #4

00001c1c <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    1c1c:	b500      	push	{lr}
    1c1e:	b085      	sub	sp, #20
    1c20:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    1c22:	2300      	movs	r3, #0
    1c24:	f88d 300f 	strb.w	r3, [sp, #15]
    (void)pConfig;
#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (NULL_PTR != pConfig)
    1c28:	9b01      	ldr	r3, [sp, #4]
    1c2a:	2b00      	cmp	r3, #0
    1c2c:	d006      	beq.n	1c3c <Platform_Init+0x20>
    {
        (void)Det_ReportError((uint16)CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_INIT_ID, PLATFORM_E_PARAM_POINTER);
    1c2e:	2301      	movs	r3, #1
    1c30:	2220      	movs	r2, #32
    1c32:	2100      	movs	r1, #0
    1c34:	20ff      	movs	r0, #255	; 0xff
    1c36:	f015 f88b 	bl	16d50 <Det_ReportError>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    1c3a:	e008      	b.n	1c4e <Platform_Init+0x32>
            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    1c3c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1c40:	4a05      	ldr	r2, [pc, #20]	; (1c58 <Platform_Init+0x3c>)
    1c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1c46:	681b      	ldr	r3, [r3, #0]
    1c48:	4618      	mov	r0, r3
    1c4a:	f000 f917 	bl	1e7c <Platform_Ipw_Init>
}
    1c4e:	bf00      	nop
    1c50:	b005      	add	sp, #20
    1c52:	f85d fb04 	ldr.w	pc, [sp], #4
    1c56:	bf00      	nop
    1c58:	00019304 	.word	0x00019304

00001c5c <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1c5c:	b500      	push	{lr}
    1c5e:	b085      	sub	sp, #20
    1c60:	9001      	str	r0, [sp, #4]
    1c62:	460b      	mov	r3, r1
    1c64:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1c68:	2300      	movs	r3, #0
    1c6a:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    1c6e:	9b01      	ldr	r3, [sp, #4]
    1c70:	2b7a      	cmp	r3, #122	; 0x7a
    1c72:	dc02      	bgt.n	1c7a <Platform_SetIrq+0x1e>
    1c74:	9b01      	ldr	r3, [sp, #4]
    1c76:	2b00      	cmp	r3, #0
    1c78:	da09      	bge.n	1c8e <Platform_SetIrq+0x32>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_SET_IRQ_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    1c7a:	2302      	movs	r3, #2
    1c7c:	2221      	movs	r2, #33	; 0x21
    1c7e:	2100      	movs	r1, #0
    1c80:	20ff      	movs	r0, #255	; 0xff
    1c82:	f015 f865 	bl	16d50 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1c86:	2301      	movs	r3, #1
    1c88:	f88d 300f 	strb.w	r3, [sp, #15]
    1c8c:	e005      	b.n	1c9a <Platform_SetIrq+0x3e>
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    1c8e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1c92:	4619      	mov	r1, r3
    1c94:	9801      	ldr	r0, [sp, #4]
    1c96:	f7ff ff83 	bl	1ba0 <Platform_Ipw_SetIrq>
    }
    return RetValue;
    1c9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1c9e:	4618      	mov	r0, r3
    1ca0:	b005      	add	sp, #20
    1ca2:	f85d fb04 	ldr.w	pc, [sp], #4

00001ca6 <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1ca6:	b500      	push	{lr}
    1ca8:	b085      	sub	sp, #20
    1caa:	9001      	str	r0, [sp, #4]
    1cac:	460b      	mov	r3, r1
    1cae:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1cb2:	2300      	movs	r3, #0
    1cb4:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
#if (INT_CTRL_IP_CORTEXM == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    1cb8:	9b01      	ldr	r3, [sp, #4]
    1cba:	2b7a      	cmp	r3, #122	; 0x7a
    1cbc:	dc06      	bgt.n	1ccc <Platform_SetIrqPriority+0x26>
    1cbe:	9b01      	ldr	r3, [sp, #4]
    1cc0:	2b00      	cmp	r3, #0
    1cc2:	db03      	blt.n	1ccc <Platform_SetIrqPriority+0x26>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber) || \
    1cc4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1cc8:	2b0f      	cmp	r3, #15
    1cca:	d909      	bls.n	1ce0 <Platform_SetIrqPriority+0x3a>
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber) || \
        (u8Priority >= (uint8)(1U << INT_CTRL_IP_GIC_PRIO_BITS)))
#endif
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_SET_IRQ_PRIO_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    1ccc:	2302      	movs	r3, #2
    1cce:	2222      	movs	r2, #34	; 0x22
    1cd0:	2100      	movs	r1, #0
    1cd2:	20ff      	movs	r0, #255	; 0xff
    1cd4:	f015 f83c 	bl	16d50 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1cd8:	2301      	movs	r3, #1
    1cda:	f88d 300f 	strb.w	r3, [sp, #15]
    1cde:	e005      	b.n	1cec <Platform_SetIrqPriority+0x46>
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    1ce0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1ce4:	4619      	mov	r1, r3
    1ce6:	9801      	ldr	r0, [sp, #4]
    1ce8:	f7ff ff6f 	bl	1bca <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    1cec:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1cf0:	4618      	mov	r0, r3
    1cf2:	b005      	add	sp, #20
    1cf4:	f85d fb04 	ldr.w	pc, [sp], #4

00001cf8 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    1cf8:	b500      	push	{lr}
    1cfa:	b085      	sub	sp, #20
    1cfc:	9001      	str	r0, [sp, #4]
    1cfe:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1d00:	2300      	movs	r3, #0
    1d02:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    1d06:	9b01      	ldr	r3, [sp, #4]
    1d08:	2b7a      	cmp	r3, #122	; 0x7a
    1d0a:	dc02      	bgt.n	1d12 <Platform_GetIrqPriority+0x1a>
    1d0c:	9b01      	ldr	r3, [sp, #4]
    1d0e:	2b00      	cmp	r3, #0
    1d10:	da09      	bge.n	1d26 <Platform_GetIrqPriority+0x2e>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_GET_IRQ_PRIO_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    1d12:	2302      	movs	r3, #2
    1d14:	2223      	movs	r2, #35	; 0x23
    1d16:	2100      	movs	r1, #0
    1d18:	20ff      	movs	r0, #255	; 0xff
    1d1a:	f015 f819 	bl	16d50 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1d1e:	2301      	movs	r3, #1
    1d20:	f88d 300f 	strb.w	r3, [sp, #15]
    1d24:	e013      	b.n	1d4e <Platform_GetIrqPriority+0x56>
    }
    else if (u8Priority == NULL_PTR)
    1d26:	9b00      	ldr	r3, [sp, #0]
    1d28:	2b00      	cmp	r3, #0
    1d2a:	d109      	bne.n	1d40 <Platform_GetIrqPriority+0x48>
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_GET_IRQ_PRIO_ID, PLATFORM_E_PARAM_POINTER);
    1d2c:	2301      	movs	r3, #1
    1d2e:	2223      	movs	r2, #35	; 0x23
    1d30:	2100      	movs	r1, #0
    1d32:	20ff      	movs	r0, #255	; 0xff
    1d34:	f015 f80c 	bl	16d50 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1d38:	2301      	movs	r3, #1
    1d3a:	f88d 300f 	strb.w	r3, [sp, #15]
    1d3e:	e006      	b.n	1d4e <Platform_GetIrqPriority+0x56>
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    1d40:	9801      	ldr	r0, [sp, #4]
    1d42:	f7ff ff52 	bl	1bea <Platform_Ipw_GetIrqPriority>
    1d46:	4603      	mov	r3, r0
    1d48:	461a      	mov	r2, r3
    1d4a:	9b00      	ldr	r3, [sp, #0]
    1d4c:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    1d4e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1d52:	4618      	mov	r0, r3
    1d54:	b005      	add	sp, #20
    1d56:	f85d fb04 	ldr.w	pc, [sp], #4

00001d5a <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    1d5a:	b500      	push	{lr}
    1d5c:	b087      	sub	sp, #28
    1d5e:	9003      	str	r0, [sp, #12]
    1d60:	9102      	str	r1, [sp, #8]
    1d62:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1d64:	2300      	movs	r3, #0
    1d66:	f88d 3017 	strb.w	r3, [sp, #23]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    1d6a:	9b03      	ldr	r3, [sp, #12]
    1d6c:	2b7a      	cmp	r3, #122	; 0x7a
    1d6e:	dc02      	bgt.n	1d76 <Platform_InstallIrqHandler+0x1c>
    1d70:	9b03      	ldr	r3, [sp, #12]
    1d72:	2b00      	cmp	r3, #0
    1d74:	da09      	bge.n	1d8a <Platform_InstallIrqHandler+0x30>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_INSTALL_HANDLER_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    1d76:	2302      	movs	r3, #2
    1d78:	2224      	movs	r2, #36	; 0x24
    1d7a:	2100      	movs	r1, #0
    1d7c:	20ff      	movs	r0, #255	; 0xff
    1d7e:	f014 ffe7 	bl	16d50 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1d82:	2301      	movs	r3, #1
    1d84:	f88d 3017 	strb.w	r3, [sp, #23]
    1d88:	e004      	b.n	1d94 <Platform_InstallIrqHandler+0x3a>
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1d8a:	9a01      	ldr	r2, [sp, #4]
    1d8c:	9902      	ldr	r1, [sp, #8]
    1d8e:	9803      	ldr	r0, [sp, #12]
    1d90:	f7ff ff36 	bl	1c00 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    1d94:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    1d98:	4618      	mov	r0, r3
    1d9a:	b007      	add	sp, #28
    1d9c:	f85d fb04 	ldr.w	pc, [sp], #4

00001da0 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1da0:	b500      	push	{lr}
    1da2:	b085      	sub	sp, #20
    1da4:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1da6:	2300      	movs	r3, #0
    1da8:	9303      	str	r3, [sp, #12]
    1daa:	e05d      	b.n	1e68 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1dac:	9b01      	ldr	r3, [sp, #4]
    1dae:	6859      	ldr	r1, [r3, #4]
    1db0:	9a03      	ldr	r2, [sp, #12]
    1db2:	4613      	mov	r3, r2
    1db4:	005b      	lsls	r3, r3, #1
    1db6:	4413      	add	r3, r2
    1db8:	009b      	lsls	r3, r3, #2
    1dba:	440b      	add	r3, r1
    1dbc:	681b      	ldr	r3, [r3, #0]
    1dbe:	4618      	mov	r0, r3
    1dc0:	f7ff fee4 	bl	1b8c <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1dc4:	9b01      	ldr	r3, [sp, #4]
    1dc6:	6859      	ldr	r1, [r3, #4]
    1dc8:	9a03      	ldr	r2, [sp, #12]
    1dca:	4613      	mov	r3, r2
    1dcc:	005b      	lsls	r3, r3, #1
    1dce:	4413      	add	r3, r2
    1dd0:	009b      	lsls	r3, r3, #2
    1dd2:	440b      	add	r3, r1
    1dd4:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1dd6:	9b01      	ldr	r3, [sp, #4]
    1dd8:	6859      	ldr	r1, [r3, #4]
    1dda:	9a03      	ldr	r2, [sp, #12]
    1ddc:	4613      	mov	r3, r2
    1dde:	005b      	lsls	r3, r3, #1
    1de0:	4413      	add	r3, r2
    1de2:	009b      	lsls	r3, r3, #2
    1de4:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1de6:	795b      	ldrb	r3, [r3, #5]
    1de8:	4619      	mov	r1, r3
    1dea:	f7ff feb4 	bl	1b56 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1dee:	9b01      	ldr	r3, [sp, #4]
    1df0:	6859      	ldr	r1, [r3, #4]
    1df2:	9a03      	ldr	r2, [sp, #12]
    1df4:	4613      	mov	r3, r2
    1df6:	005b      	lsls	r3, r3, #1
    1df8:	4413      	add	r3, r2
    1dfa:	009b      	lsls	r3, r3, #2
    1dfc:	440b      	add	r3, r1
    1dfe:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1e00:	9b01      	ldr	r3, [sp, #4]
    1e02:	6859      	ldr	r1, [r3, #4]
    1e04:	9a03      	ldr	r2, [sp, #12]
    1e06:	4613      	mov	r3, r2
    1e08:	005b      	lsls	r3, r3, #1
    1e0a:	4413      	add	r3, r2
    1e0c:	009b      	lsls	r3, r3, #2
    1e0e:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1e10:	689b      	ldr	r3, [r3, #8]
    1e12:	2200      	movs	r2, #0
    1e14:	4619      	mov	r1, r3
    1e16:	f7ff fe7c 	bl	1b12 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1e1a:	9b01      	ldr	r3, [sp, #4]
    1e1c:	6859      	ldr	r1, [r3, #4]
    1e1e:	9a03      	ldr	r2, [sp, #12]
    1e20:	4613      	mov	r3, r2
    1e22:	005b      	lsls	r3, r3, #1
    1e24:	4413      	add	r3, r2
    1e26:	009b      	lsls	r3, r3, #2
    1e28:	440b      	add	r3, r1
    1e2a:	791b      	ldrb	r3, [r3, #4]
    1e2c:	2b00      	cmp	r3, #0
    1e2e:	d00c      	beq.n	1e4a <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1e30:	9b01      	ldr	r3, [sp, #4]
    1e32:	6859      	ldr	r1, [r3, #4]
    1e34:	9a03      	ldr	r2, [sp, #12]
    1e36:	4613      	mov	r3, r2
    1e38:	005b      	lsls	r3, r3, #1
    1e3a:	4413      	add	r3, r2
    1e3c:	009b      	lsls	r3, r3, #2
    1e3e:	440b      	add	r3, r1
    1e40:	681b      	ldr	r3, [r3, #0]
    1e42:	4618      	mov	r0, r3
    1e44:	f7ff fe73 	bl	1b2e <IntCtrl_Ip_EnableIrq>
    1e48:	e00b      	b.n	1e62 <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1e4a:	9b01      	ldr	r3, [sp, #4]
    1e4c:	6859      	ldr	r1, [r3, #4]
    1e4e:	9a03      	ldr	r2, [sp, #12]
    1e50:	4613      	mov	r3, r2
    1e52:	005b      	lsls	r3, r3, #1
    1e54:	4413      	add	r3, r2
    1e56:	009b      	lsls	r3, r3, #2
    1e58:	440b      	add	r3, r1
    1e5a:	681b      	ldr	r3, [r3, #0]
    1e5c:	4618      	mov	r0, r3
    1e5e:	f7ff fe70 	bl	1b42 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1e62:	9b03      	ldr	r3, [sp, #12]
    1e64:	3301      	adds	r3, #1
    1e66:	9303      	str	r3, [sp, #12]
    1e68:	9b01      	ldr	r3, [sp, #4]
    1e6a:	681b      	ldr	r3, [r3, #0]
    1e6c:	9a03      	ldr	r2, [sp, #12]
    1e6e:	429a      	cmp	r2, r3
    1e70:	d39c      	bcc.n	1dac <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    1e72:	2300      	movs	r3, #0
}
    1e74:	4618      	mov	r0, r3
    1e76:	b005      	add	sp, #20
    1e78:	f85d fb04 	ldr.w	pc, [sp], #4

00001e7c <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    1e7c:	b500      	push	{lr}
    1e7e:	b085      	sub	sp, #20
    1e80:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    1e82:	2300      	movs	r3, #0
    1e84:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    1e88:	9b01      	ldr	r3, [sp, #4]
    1e8a:	681b      	ldr	r3, [r3, #0]
    1e8c:	2b00      	cmp	r3, #0
    1e8e:	d007      	beq.n	1ea0 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    1e90:	9b01      	ldr	r3, [sp, #4]
    1e92:	681b      	ldr	r3, [r3, #0]
    1e94:	4618      	mov	r0, r3
    1e96:	f7ff ff83 	bl	1da0 <Platform_Ipw_InitIntCtrl>
    1e9a:	4603      	mov	r3, r0
    1e9c:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    1ea0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1ea4:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    1ea6:	bf00      	nop
    1ea8:	b005      	add	sp, #20
    1eaa:	f85d fb04 	ldr.w	pc, [sp], #4

00001eae <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    1eae:	2300      	movs	r3, #0
}
    1eb0:	4618      	mov	r0, r3
    1eb2:	4770      	bx	lr

00001eb4 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1eb4:	b082      	sub	sp, #8
    1eb6:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1eb8:	2301      	movs	r3, #1
}
    1eba:	4618      	mov	r0, r3
    1ebc:	b002      	add	sp, #8
    1ebe:	4770      	bx	lr

00001ec0 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1ec0:	b082      	sub	sp, #8
    1ec2:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1ec4:	bf00      	nop
    1ec6:	b002      	add	sp, #8
    1ec8:	4770      	bx	lr

00001eca <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1eca:	b082      	sub	sp, #8
    1ecc:	9001      	str	r0, [sp, #4]
    return Micros;
    1ece:	9b01      	ldr	r3, [sp, #4]
}
    1ed0:	4618      	mov	r0, r3
    1ed2:	b002      	add	sp, #8
    1ed4:	4770      	bx	lr

00001ed6 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1ed6:	b500      	push	{lr}
    1ed8:	b083      	sub	sp, #12
    1eda:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1edc:	f000 f86c 	bl	1fb8 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1ee0:	bf00      	nop
    1ee2:	b003      	add	sp, #12
    1ee4:	f85d fb04 	ldr.w	pc, [sp], #4

00001ee8 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1ee8:	b500      	push	{lr}
    1eea:	b085      	sub	sp, #20
    1eec:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1eee:	2300      	movs	r3, #0
    1ef0:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1ef2:	9b01      	ldr	r3, [sp, #4]
    1ef4:	2b00      	cmp	r3, #0
    1ef6:	d003      	beq.n	1f00 <OsIf_GetCounter+0x18>
    1ef8:	9b01      	ldr	r3, [sp, #4]
    1efa:	2b01      	cmp	r3, #1
    1efc:	d004      	beq.n	1f08 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1efe:	e007      	b.n	1f10 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1f00:	f7ff ffd5 	bl	1eae <OsIf_Timer_Dummy_GetCounter>
    1f04:	9003      	str	r0, [sp, #12]
            break;
    1f06:	e003      	b.n	1f10 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1f08:	f000 f872 	bl	1ff0 <OsIf_Timer_System_GetCounter>
    1f0c:	9003      	str	r0, [sp, #12]
            break;
    1f0e:	bf00      	nop
    }

    return Value;
    1f10:	9b03      	ldr	r3, [sp, #12]
}
    1f12:	4618      	mov	r0, r3
    1f14:	b005      	add	sp, #20
    1f16:	f85d fb04 	ldr.w	pc, [sp], #4

00001f1a <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1f1a:	b500      	push	{lr}
    1f1c:	b085      	sub	sp, #20
    1f1e:	9001      	str	r0, [sp, #4]
    1f20:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1f22:	2300      	movs	r3, #0
    1f24:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1f26:	9b00      	ldr	r3, [sp, #0]
    1f28:	2b00      	cmp	r3, #0
    1f2a:	d003      	beq.n	1f34 <OsIf_GetElapsed+0x1a>
    1f2c:	9b00      	ldr	r3, [sp, #0]
    1f2e:	2b01      	cmp	r3, #1
    1f30:	d005      	beq.n	1f3e <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1f32:	e009      	b.n	1f48 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1f34:	9801      	ldr	r0, [sp, #4]
    1f36:	f7ff ffbd 	bl	1eb4 <OsIf_Timer_Dummy_GetElapsed>
    1f3a:	9003      	str	r0, [sp, #12]
            break;
    1f3c:	e004      	b.n	1f48 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1f3e:	9801      	ldr	r0, [sp, #4]
    1f40:	f000 f864 	bl	200c <OsIf_Timer_System_GetElapsed>
    1f44:	9003      	str	r0, [sp, #12]
            break;
    1f46:	bf00      	nop
    }

    return Value;
    1f48:	9b03      	ldr	r3, [sp, #12]
}
    1f4a:	4618      	mov	r0, r3
    1f4c:	b005      	add	sp, #20
    1f4e:	f85d fb04 	ldr.w	pc, [sp], #4

00001f52 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1f52:	b500      	push	{lr}
    1f54:	b083      	sub	sp, #12
    1f56:	9001      	str	r0, [sp, #4]
    1f58:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1f5a:	9b00      	ldr	r3, [sp, #0]
    1f5c:	2b00      	cmp	r3, #0
    1f5e:	d003      	beq.n	1f68 <OsIf_SetTimerFrequency+0x16>
    1f60:	9b00      	ldr	r3, [sp, #0]
    1f62:	2b01      	cmp	r3, #1
    1f64:	d004      	beq.n	1f70 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1f66:	e007      	b.n	1f78 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1f68:	9801      	ldr	r0, [sp, #4]
    1f6a:	f7ff ffa9 	bl	1ec0 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1f6e:	e003      	b.n	1f78 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1f70:	9801      	ldr	r0, [sp, #4]
    1f72:	f000 f85b 	bl	202c <OsIf_Timer_System_SetTimerFrequency>
            break;
    1f76:	bf00      	nop
    }
}
    1f78:	bf00      	nop
    1f7a:	b003      	add	sp, #12
    1f7c:	f85d fb04 	ldr.w	pc, [sp], #4

00001f80 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1f80:	b500      	push	{lr}
    1f82:	b085      	sub	sp, #20
    1f84:	9001      	str	r0, [sp, #4]
    1f86:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1f88:	2300      	movs	r3, #0
    1f8a:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1f8c:	9b00      	ldr	r3, [sp, #0]
    1f8e:	2b00      	cmp	r3, #0
    1f90:	d003      	beq.n	1f9a <OsIf_MicrosToTicks+0x1a>
    1f92:	9b00      	ldr	r3, [sp, #0]
    1f94:	2b01      	cmp	r3, #1
    1f96:	d005      	beq.n	1fa4 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1f98:	e009      	b.n	1fae <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1f9a:	9801      	ldr	r0, [sp, #4]
    1f9c:	f7ff ff95 	bl	1eca <OsIf_Timer_Dummy_MicrosToTicks>
    1fa0:	9003      	str	r0, [sp, #12]
            break;
    1fa2:	e004      	b.n	1fae <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1fa4:	9801      	ldr	r0, [sp, #4]
    1fa6:	f000 f84f 	bl	2048 <OsIf_Timer_System_MicrosToTicks>
    1faa:	9003      	str	r0, [sp, #12]
            break;
    1fac:	bf00      	nop
    }

    return Value;
    1fae:	9b03      	ldr	r3, [sp, #12]
}
    1fb0:	4618      	mov	r0, r3
    1fb2:	b005      	add	sp, #20
    1fb4:	f85d fb04 	ldr.w	pc, [sp], #4

00001fb8 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1fb8:	b500      	push	{lr}
    1fba:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1fbc:	2300      	movs	r3, #0
    1fbe:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1fc0:	4a09      	ldr	r2, [pc, #36]	; (1fe8 <OsIf_Timer_System_Init+0x30>)
    1fc2:	9b01      	ldr	r3, [sp, #4]
    1fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1fc8:	685a      	ldr	r2, [r3, #4]
    1fca:	4908      	ldr	r1, [pc, #32]	; (1fec <OsIf_Timer_System_Init+0x34>)
    1fcc:	9b01      	ldr	r3, [sp, #4]
    1fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1fd2:	4a06      	ldr	r2, [pc, #24]	; (1fec <OsIf_Timer_System_Init+0x34>)
    1fd4:	9b01      	ldr	r3, [sp, #4]
    1fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1fda:	4618      	mov	r0, r3
    1fdc:	f000 f868 	bl	20b0 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1fe0:	bf00      	nop
    1fe2:	b003      	add	sp, #12
    1fe4:	f85d fb04 	ldr.w	pc, [sp], #4
    1fe8:	000192fc 	.word	0x000192fc
    1fec:	1fff8b34 	.word	0x1fff8b34

00001ff0 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1ff0:	b500      	push	{lr}
    1ff2:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1ff4:	2300      	movs	r3, #0
    1ff6:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1ff8:	2300      	movs	r3, #0
    1ffa:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1ffc:	f000 f86c 	bl	20d8 <OsIf_Timer_System_Internal_GetCounter>
    2000:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    2002:	9b01      	ldr	r3, [sp, #4]
}
    2004:	4618      	mov	r0, r3
    2006:	b003      	add	sp, #12
    2008:	f85d fb04 	ldr.w	pc, [sp], #4

0000200c <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    200c:	b500      	push	{lr}
    200e:	b085      	sub	sp, #20
    2010:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    2012:	2300      	movs	r3, #0
    2014:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    2016:	2300      	movs	r3, #0
    2018:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    201a:	9801      	ldr	r0, [sp, #4]
    201c:	f000 f864 	bl	20e8 <OsIf_Timer_System_Internal_GetElapsed>
    2020:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    2022:	9b03      	ldr	r3, [sp, #12]
}
    2024:	4618      	mov	r0, r3
    2026:	b005      	add	sp, #20
    2028:	f85d fb04 	ldr.w	pc, [sp], #4

0000202c <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    202c:	b084      	sub	sp, #16
    202e:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    2030:	2300      	movs	r3, #0
    2032:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    2034:	4903      	ldr	r1, [pc, #12]	; (2044 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    2036:	9b03      	ldr	r3, [sp, #12]
    2038:	9a01      	ldr	r2, [sp, #4]
    203a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    203e:	bf00      	nop
    2040:	b004      	add	sp, #16
    2042:	4770      	bx	lr
    2044:	1fff8b34 	.word	0x1fff8b34

00002048 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    2048:	b5f0      	push	{r4, r5, r6, r7, lr}
    204a:	b087      	sub	sp, #28
    204c:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    204e:	2100      	movs	r1, #0
    2050:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    2052:	2100      	movs	r1, #0
    2054:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    2056:	9901      	ldr	r1, [sp, #4]
    2058:	2000      	movs	r0, #0
    205a:	460e      	mov	r6, r1
    205c:	4607      	mov	r7, r0
    205e:	4812      	ldr	r0, [pc, #72]	; (20a8 <OsIf_Timer_System_MicrosToTicks+0x60>)
    2060:	9904      	ldr	r1, [sp, #16]
    2062:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    2066:	2000      	movs	r0, #0
    2068:	460c      	mov	r4, r1
    206a:	4605      	mov	r5, r0
    206c:	fb04 f007 	mul.w	r0, r4, r7
    2070:	fb06 f105 	mul.w	r1, r6, r5
    2074:	4401      	add	r1, r0
    2076:	fba6 2304 	umull	r2, r3, r6, r4
    207a:	4419      	add	r1, r3
    207c:	460b      	mov	r3, r1
    207e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    2082:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    2086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    208a:	4a08      	ldr	r2, [pc, #32]	; (20ac <OsIf_Timer_System_MicrosToTicks+0x64>)
    208c:	f04f 0300 	mov.w	r3, #0
    2090:	f7fe fa88 	bl	5a4 <__aeabi_uldivmod>
    2094:	4602      	mov	r2, r0
    2096:	460b      	mov	r3, r1
    2098:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    209c:	9b02      	ldr	r3, [sp, #8]
    209e:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    20a0:	9b05      	ldr	r3, [sp, #20]
}
    20a2:	4618      	mov	r0, r3
    20a4:	b007      	add	sp, #28
    20a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20a8:	1fff8b34 	.word	0x1fff8b34
    20ac:	000f4240 	.word	0x000f4240

000020b0 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    20b0:	b082      	sub	sp, #8
    20b2:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    20b4:	4b07      	ldr	r3, [pc, #28]	; (20d4 <OsIf_Timer_System_Internal_Init+0x24>)
    20b6:	2200      	movs	r2, #0
    20b8:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    20ba:	4b06      	ldr	r3, [pc, #24]	; (20d4 <OsIf_Timer_System_Internal_Init+0x24>)
    20bc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    20c0:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    20c2:	4b04      	ldr	r3, [pc, #16]	; (20d4 <OsIf_Timer_System_Internal_Init+0x24>)
    20c4:	2200      	movs	r2, #0
    20c6:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    20c8:	4b02      	ldr	r3, [pc, #8]	; (20d4 <OsIf_Timer_System_Internal_Init+0x24>)
    20ca:	2205      	movs	r2, #5
    20cc:	601a      	str	r2, [r3, #0]
}
    20ce:	bf00      	nop
    20d0:	b002      	add	sp, #8
    20d2:	4770      	bx	lr
    20d4:	e000e010 	.word	0xe000e010

000020d8 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    20d8:	4b02      	ldr	r3, [pc, #8]	; (20e4 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    20da:	689b      	ldr	r3, [r3, #8]
    20dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    20e0:	4618      	mov	r0, r3
    20e2:	4770      	bx	lr
    20e4:	e000e010 	.word	0xe000e010

000020e8 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    20e8:	b084      	sub	sp, #16
    20ea:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    20ec:	4b10      	ldr	r3, [pc, #64]	; (2130 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    20ee:	689b      	ldr	r3, [r3, #8]
    20f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    20f4:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    20f6:	2300      	movs	r3, #0
    20f8:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    20fa:	9b01      	ldr	r3, [sp, #4]
    20fc:	681b      	ldr	r3, [r3, #0]
    20fe:	9a02      	ldr	r2, [sp, #8]
    2100:	429a      	cmp	r2, r3
    2102:	d909      	bls.n	2118 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    2104:	9b01      	ldr	r3, [sp, #4]
    2106:	681a      	ldr	r2, [r3, #0]
    2108:	9b02      	ldr	r3, [sp, #8]
    210a:	1ad3      	subs	r3, r2, r3
    210c:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    2110:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    2114:	9303      	str	r3, [sp, #12]
    2116:	e004      	b.n	2122 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    2118:	9b01      	ldr	r3, [sp, #4]
    211a:	681a      	ldr	r2, [r3, #0]
    211c:	9b02      	ldr	r3, [sp, #8]
    211e:	1ad3      	subs	r3, r2, r3
    2120:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    2122:	9b01      	ldr	r3, [sp, #4]
    2124:	9a02      	ldr	r2, [sp, #8]
    2126:	601a      	str	r2, [r3, #0]

    return dif;
    2128:	9b03      	ldr	r3, [sp, #12]
}
    212a:	4618      	mov	r0, r3
    212c:	b004      	add	sp, #16
    212e:	4770      	bx	lr
    2130:	e000e010 	.word	0xe000e010

00002134 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    2134:	b082      	sub	sp, #8
    2136:	9001      	str	r0, [sp, #4]
    2138:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    213a:	bf00      	nop
    213c:	b002      	add	sp, #8
    213e:	4770      	bx	lr

00002140 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    2140:	b500      	push	{lr}
    2142:	b085      	sub	sp, #20
    2144:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    2146:	4b24      	ldr	r3, [pc, #144]	; (21d8 <Clock_Ip_UpdateDriverContext+0x98>)
    2148:	2201      	movs	r2, #1
    214a:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    214c:	4b23      	ldr	r3, [pc, #140]	; (21dc <Clock_Ip_UpdateDriverContext+0x9c>)
    214e:	681b      	ldr	r3, [r3, #0]
    2150:	2102      	movs	r1, #2
    2152:	4618      	mov	r0, r3
    2154:	f003 fc32 	bl	59bc <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    2158:	2300      	movs	r3, #0
    215a:	f88d 300f 	strb.w	r3, [sp, #15]
    215e:	e015      	b.n	218c <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    2160:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2164:	9a01      	ldr	r2, [sp, #4]
    2166:	334a      	adds	r3, #74	; 0x4a
    2168:	00db      	lsls	r3, r3, #3
    216a:	4413      	add	r3, r2
    216c:	6858      	ldr	r0, [r3, #4]
    216e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2172:	9a01      	ldr	r2, [sp, #4]
    2174:	334a      	adds	r3, #74	; 0x4a
    2176:	00db      	lsls	r3, r3, #3
    2178:	4413      	add	r3, r2
    217a:	689b      	ldr	r3, [r3, #8]
    217c:	4619      	mov	r1, r3
    217e:	f001 fadc 	bl	373a <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    2182:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2186:	3301      	adds	r3, #1
    2188:	f88d 300f 	strb.w	r3, [sp, #15]
    218c:	9b01      	ldr	r3, [sp, #4]
    218e:	7bdb      	ldrb	r3, [r3, #15]
    2190:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2194:	429a      	cmp	r2, r3
    2196:	d3e3      	bcc.n	2160 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    2198:	f000 f824 	bl	21e4 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    219c:	2301      	movs	r3, #1
    219e:	f88d 300f 	strb.w	r3, [sp, #15]
    21a2:	e00e      	b.n	21c2 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    21a4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    21a8:	9b01      	ldr	r3, [sp, #4]
    21aa:	327e      	adds	r2, #126	; 0x7e
    21ac:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    21b0:	490b      	ldr	r1, [pc, #44]	; (21e0 <Clock_Ip_UpdateDriverContext+0xa0>)
    21b2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    21b6:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    21b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    21bc:	3301      	adds	r3, #1
    21be:	f88d 300f 	strb.w	r3, [sp, #15]
    21c2:	9b01      	ldr	r3, [sp, #4]
    21c4:	7cdb      	ldrb	r3, [r3, #19]
    21c6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    21ca:	429a      	cmp	r2, r3
    21cc:	d3ea      	bcc.n	21a4 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    21ce:	bf00      	nop
    21d0:	bf00      	nop
    21d2:	b005      	add	sp, #20
    21d4:	f85d fb04 	ldr.w	pc, [sp], #4
    21d8:	1fff8b10 	.word	0x1fff8b10
    21dc:	1fff8b38 	.word	0x1fff8b38
    21e0:	1fff8b44 	.word	0x1fff8b44

000021e4 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    21e4:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    21e6:	4b23      	ldr	r3, [pc, #140]	; (2274 <Clock_Ip_CallEmptyCallbacks+0x90>)
    21e8:	781b      	ldrb	r3, [r3, #0]
    21ea:	f083 0301 	eor.w	r3, r3, #1
    21ee:	b2db      	uxtb	r3, r3
    21f0:	2b00      	cmp	r3, #0
    21f2:	d03d      	beq.n	2270 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    21f4:	4b1f      	ldr	r3, [pc, #124]	; (2274 <Clock_Ip_CallEmptyCallbacks+0x90>)
    21f6:	2201      	movs	r2, #1
    21f8:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    21fa:	4b1f      	ldr	r3, [pc, #124]	; (2278 <Clock_Ip_CallEmptyCallbacks+0x94>)
    21fc:	685b      	ldr	r3, [r3, #4]
    21fe:	2100      	movs	r1, #0
    2200:	2000      	movs	r0, #0
    2202:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    2204:	4b1c      	ldr	r3, [pc, #112]	; (2278 <Clock_Ip_CallEmptyCallbacks+0x94>)
    2206:	689b      	ldr	r3, [r3, #8]
    2208:	2057      	movs	r0, #87	; 0x57
    220a:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    220c:	4b1b      	ldr	r3, [pc, #108]	; (227c <Clock_Ip_CallEmptyCallbacks+0x98>)
    220e:	681b      	ldr	r3, [r3, #0]
    2210:	2000      	movs	r0, #0
    2212:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    2214:	4b1a      	ldr	r3, [pc, #104]	; (2280 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    2216:	681b      	ldr	r3, [r3, #0]
    2218:	2000      	movs	r0, #0
    221a:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    221c:	4b19      	ldr	r3, [pc, #100]	; (2284 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    221e:	681b      	ldr	r3, [r3, #0]
    2220:	2000      	movs	r0, #0
    2222:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2224:	4b18      	ldr	r3, [pc, #96]	; (2288 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    2226:	685b      	ldr	r3, [r3, #4]
    2228:	2000      	movs	r0, #0
    222a:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    222c:	4b16      	ldr	r3, [pc, #88]	; (2288 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    222e:	689b      	ldr	r3, [r3, #8]
    2230:	2057      	movs	r0, #87	; 0x57
    2232:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2234:	4b15      	ldr	r3, [pc, #84]	; (228c <Clock_Ip_CallEmptyCallbacks+0xa8>)
    2236:	681b      	ldr	r3, [r3, #0]
    2238:	2000      	movs	r0, #0
    223a:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    223c:	4b13      	ldr	r3, [pc, #76]	; (228c <Clock_Ip_CallEmptyCallbacks+0xa8>)
    223e:	685b      	ldr	r3, [r3, #4]
    2240:	2100      	movs	r1, #0
    2242:	2057      	movs	r0, #87	; 0x57
    2244:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2246:	4b12      	ldr	r3, [pc, #72]	; (2290 <Clock_Ip_CallEmptyCallbacks+0xac>)
    2248:	681b      	ldr	r3, [r3, #0]
    224a:	2000      	movs	r0, #0
    224c:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    224e:	4b11      	ldr	r3, [pc, #68]	; (2294 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2250:	685b      	ldr	r3, [r3, #4]
    2252:	2000      	movs	r0, #0
    2254:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    2256:	4b0f      	ldr	r3, [pc, #60]	; (2294 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2258:	689b      	ldr	r3, [r3, #8]
    225a:	2057      	movs	r0, #87	; 0x57
    225c:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    225e:	4b0e      	ldr	r3, [pc, #56]	; (2298 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    2260:	685b      	ldr	r3, [r3, #4]
    2262:	2000      	movs	r0, #0
    2264:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    2266:	4b0d      	ldr	r3, [pc, #52]	; (229c <Clock_Ip_CallEmptyCallbacks+0xb8>)
    2268:	681b      	ldr	r3, [r3, #0]
    226a:	2100      	movs	r1, #0
    226c:	2000      	movs	r0, #0
    226e:	4798      	blx	r3
    }
}
    2270:	bf00      	nop
    2272:	bd08      	pop	{r3, pc}
    2274:	1fff8b3c 	.word	0x1fff8b3c
    2278:	00018510 	.word	0x00018510
    227c:	00018424 	.word	0x00018424
    2280:	00018460 	.word	0x00018460
    2284:	00018468 	.word	0x00018468
    2288:	00018490 	.word	0x00018490
    228c:	0001849c 	.word	0x0001849c
    2290:	000184d4 	.word	0x000184d4
    2294:	00018520 	.word	0x00018520
    2298:	0001854c 	.word	0x0001854c
    229c:	00018548 	.word	0x00018548

000022a0 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    22a0:	b500      	push	{lr}
    22a2:	b085      	sub	sp, #20
    22a4:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    22a6:	9b01      	ldr	r3, [sp, #4]
    22a8:	7adb      	ldrb	r3, [r3, #11]
    22aa:	9303      	str	r3, [sp, #12]
    22ac:	e01f      	b.n	22ee <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    22ae:	9b03      	ldr	r3, [sp, #12]
    22b0:	1e5a      	subs	r2, r3, #1
    22b2:	9b01      	ldr	r3, [sp, #4]
    22b4:	320d      	adds	r2, #13
    22b6:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    22ba:	495a      	ldr	r1, [pc, #360]	; (2424 <Clock_Ip_ResetClockConfiguration+0x184>)
    22bc:	4613      	mov	r3, r2
    22be:	00db      	lsls	r3, r3, #3
    22c0:	4413      	add	r3, r2
    22c2:	440b      	add	r3, r1
    22c4:	3301      	adds	r3, #1
    22c6:	781b      	ldrb	r3, [r3, #0]
    22c8:	461a      	mov	r2, r3
    22ca:	4b57      	ldr	r3, [pc, #348]	; (2428 <Clock_Ip_ResetClockConfiguration+0x188>)
    22cc:	5c9b      	ldrb	r3, [r3, r2]
    22ce:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    22d0:	4a56      	ldr	r2, [pc, #344]	; (242c <Clock_Ip_ResetClockConfiguration+0x18c>)
    22d2:	9b02      	ldr	r3, [sp, #8]
    22d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    22d8:	9a03      	ldr	r2, [sp, #12]
    22da:	3a01      	subs	r2, #1
    22dc:	320d      	adds	r2, #13
    22de:	00d2      	lsls	r2, r2, #3
    22e0:	9901      	ldr	r1, [sp, #4]
    22e2:	440a      	add	r2, r1
    22e4:	4610      	mov	r0, r2
    22e6:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    22e8:	9b03      	ldr	r3, [sp, #12]
    22ea:	3b01      	subs	r3, #1
    22ec:	9303      	str	r3, [sp, #12]
    22ee:	9b03      	ldr	r3, [sp, #12]
    22f0:	2b00      	cmp	r3, #0
    22f2:	d1dc      	bne.n	22ae <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    22f4:	9b01      	ldr	r3, [sp, #4]
    22f6:	7b9b      	ldrb	r3, [r3, #14]
    22f8:	9303      	str	r3, [sp, #12]
    22fa:	e026      	b.n	234a <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    22fc:	9b03      	ldr	r3, [sp, #12]
    22fe:	3b01      	subs	r3, #1
    2300:	9a01      	ldr	r2, [sp, #4]
    2302:	3324      	adds	r3, #36	; 0x24
    2304:	011b      	lsls	r3, r3, #4
    2306:	4413      	add	r3, r2
    2308:	3304      	adds	r3, #4
    230a:	681a      	ldr	r2, [r3, #0]
    230c:	4945      	ldr	r1, [pc, #276]	; (2424 <Clock_Ip_ResetClockConfiguration+0x184>)
    230e:	4613      	mov	r3, r2
    2310:	00db      	lsls	r3, r3, #3
    2312:	4413      	add	r3, r2
    2314:	440b      	add	r3, r1
    2316:	3301      	adds	r3, #1
    2318:	781b      	ldrb	r3, [r3, #0]
    231a:	461a      	mov	r2, r3
    231c:	4b44      	ldr	r3, [pc, #272]	; (2430 <Clock_Ip_ResetClockConfiguration+0x190>)
    231e:	5c9b      	ldrb	r3, [r3, r2]
    2320:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    2322:	4944      	ldr	r1, [pc, #272]	; (2434 <Clock_Ip_ResetClockConfiguration+0x194>)
    2324:	9a02      	ldr	r2, [sp, #8]
    2326:	4613      	mov	r3, r2
    2328:	005b      	lsls	r3, r3, #1
    232a:	4413      	add	r3, r2
    232c:	009b      	lsls	r3, r3, #2
    232e:	440b      	add	r3, r1
    2330:	681b      	ldr	r3, [r3, #0]
    2332:	9a03      	ldr	r2, [sp, #12]
    2334:	3a01      	subs	r2, #1
    2336:	3224      	adds	r2, #36	; 0x24
    2338:	0112      	lsls	r2, r2, #4
    233a:	9901      	ldr	r1, [sp, #4]
    233c:	440a      	add	r2, r1
    233e:	3204      	adds	r2, #4
    2340:	4610      	mov	r0, r2
    2342:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2344:	9b03      	ldr	r3, [sp, #12]
    2346:	3b01      	subs	r3, #1
    2348:	9303      	str	r3, [sp, #12]
    234a:	9b03      	ldr	r3, [sp, #12]
    234c:	2b00      	cmp	r3, #0
    234e:	d1d5      	bne.n	22fc <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2350:	9b01      	ldr	r3, [sp, #4]
    2352:	7a9b      	ldrb	r3, [r3, #10]
    2354:	9303      	str	r3, [sp, #12]
    2356:	e02a      	b.n	23ae <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2358:	9b03      	ldr	r3, [sp, #12]
    235a:	1e5a      	subs	r2, r3, #1
    235c:	9901      	ldr	r1, [sp, #4]
    235e:	4613      	mov	r3, r2
    2360:	009b      	lsls	r3, r3, #2
    2362:	4413      	add	r3, r2
    2364:	00db      	lsls	r3, r3, #3
    2366:	440b      	add	r3, r1
    2368:	3340      	adds	r3, #64	; 0x40
    236a:	681a      	ldr	r2, [r3, #0]
    236c:	492d      	ldr	r1, [pc, #180]	; (2424 <Clock_Ip_ResetClockConfiguration+0x184>)
    236e:	4613      	mov	r3, r2
    2370:	00db      	lsls	r3, r3, #3
    2372:	4413      	add	r3, r2
    2374:	440b      	add	r3, r1
    2376:	3301      	adds	r3, #1
    2378:	781b      	ldrb	r3, [r3, #0]
    237a:	461a      	mov	r2, r3
    237c:	4b2e      	ldr	r3, [pc, #184]	; (2438 <Clock_Ip_ResetClockConfiguration+0x198>)
    237e:	5c9b      	ldrb	r3, [r3, r2]
    2380:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    2382:	492e      	ldr	r1, [pc, #184]	; (243c <Clock_Ip_ResetClockConfiguration+0x19c>)
    2384:	9a02      	ldr	r2, [sp, #8]
    2386:	4613      	mov	r3, r2
    2388:	009b      	lsls	r3, r3, #2
    238a:	4413      	add	r3, r2
    238c:	009b      	lsls	r3, r3, #2
    238e:	440b      	add	r3, r1
    2390:	6819      	ldr	r1, [r3, #0]
    2392:	9b03      	ldr	r3, [sp, #12]
    2394:	1e5a      	subs	r2, r3, #1
    2396:	4613      	mov	r3, r2
    2398:	009b      	lsls	r3, r3, #2
    239a:	4413      	add	r3, r2
    239c:	00db      	lsls	r3, r3, #3
    239e:	3340      	adds	r3, #64	; 0x40
    23a0:	9a01      	ldr	r2, [sp, #4]
    23a2:	4413      	add	r3, r2
    23a4:	4618      	mov	r0, r3
    23a6:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    23a8:	9b03      	ldr	r3, [sp, #12]
    23aa:	3b01      	subs	r3, #1
    23ac:	9303      	str	r3, [sp, #12]
    23ae:	9b03      	ldr	r3, [sp, #12]
    23b0:	2b00      	cmp	r3, #0
    23b2:	d1d1      	bne.n	2358 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    23b4:	9b01      	ldr	r3, [sp, #4]
    23b6:	7a5b      	ldrb	r3, [r3, #9]
    23b8:	9303      	str	r3, [sp, #12]
    23ba:	e02b      	b.n	2414 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    23bc:	9b03      	ldr	r3, [sp, #12]
    23be:	1e5a      	subs	r2, r3, #1
    23c0:	9901      	ldr	r1, [sp, #4]
    23c2:	4613      	mov	r3, r2
    23c4:	009b      	lsls	r3, r3, #2
    23c6:	4413      	add	r3, r2
    23c8:	009b      	lsls	r3, r3, #2
    23ca:	440b      	add	r3, r1
    23cc:	332c      	adds	r3, #44	; 0x2c
    23ce:	681a      	ldr	r2, [r3, #0]
    23d0:	4914      	ldr	r1, [pc, #80]	; (2424 <Clock_Ip_ResetClockConfiguration+0x184>)
    23d2:	4613      	mov	r3, r2
    23d4:	00db      	lsls	r3, r3, #3
    23d6:	4413      	add	r3, r2
    23d8:	440b      	add	r3, r1
    23da:	3301      	adds	r3, #1
    23dc:	781b      	ldrb	r3, [r3, #0]
    23de:	461a      	mov	r2, r3
    23e0:	4b17      	ldr	r3, [pc, #92]	; (2440 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    23e2:	5c9b      	ldrb	r3, [r3, r2]
    23e4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    23e6:	4917      	ldr	r1, [pc, #92]	; (2444 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    23e8:	9a02      	ldr	r2, [sp, #8]
    23ea:	4613      	mov	r3, r2
    23ec:	009b      	lsls	r3, r3, #2
    23ee:	4413      	add	r3, r2
    23f0:	009b      	lsls	r3, r3, #2
    23f2:	440b      	add	r3, r1
    23f4:	6819      	ldr	r1, [r3, #0]
    23f6:	9b03      	ldr	r3, [sp, #12]
    23f8:	1e5a      	subs	r2, r3, #1
    23fa:	4613      	mov	r3, r2
    23fc:	009b      	lsls	r3, r3, #2
    23fe:	4413      	add	r3, r2
    2400:	009b      	lsls	r3, r3, #2
    2402:	3328      	adds	r3, #40	; 0x28
    2404:	9a01      	ldr	r2, [sp, #4]
    2406:	4413      	add	r3, r2
    2408:	3304      	adds	r3, #4
    240a:	4618      	mov	r0, r3
    240c:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    240e:	9b03      	ldr	r3, [sp, #12]
    2410:	3b01      	subs	r3, #1
    2412:	9303      	str	r3, [sp, #12]
    2414:	9b03      	ldr	r3, [sp, #12]
    2416:	2b00      	cmp	r3, #0
    2418:	d1d0      	bne.n	23bc <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    241a:	bf00      	nop
    241c:	bf00      	nop
    241e:	b005      	add	sp, #20
    2420:	f85d fb04 	ldr.w	pc, [sp], #4
    2424:	00017f14 	.word	0x00017f14
    2428:	00017ee4 	.word	0x00017ee4
    242c:	0001854c 	.word	0x0001854c
    2430:	00017ec4 	.word	0x00017ec4
    2434:	00018490 	.word	0x00018490
    2438:	00017ed4 	.word	0x00017ed4
    243c:	00018520 	.word	0x00018520
    2440:	00017e94 	.word	0x00017e94
    2444:	00018468 	.word	0x00018468

00002448 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    2448:	b500      	push	{lr}
    244a:	b085      	sub	sp, #20
    244c:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    244e:	2301      	movs	r3, #1
    2450:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    2452:	9801      	ldr	r0, [sp, #4]
    2454:	f000 f818 	bl	2488 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    2458:	4b0a      	ldr	r3, [pc, #40]	; (2484 <Clock_Ip_Init+0x3c>)
    245a:	781b      	ldrb	r3, [r3, #0]
    245c:	2b00      	cmp	r3, #0
    245e:	d00a      	beq.n	2476 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    2460:	f000 fb74 	bl	2b4c <Clock_Ip_GetPllStatus>
    2464:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    2466:	9b02      	ldr	r3, [sp, #8]
    2468:	2b00      	cmp	r3, #0
    246a:	d106      	bne.n	247a <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    246c:	f000 fbf2 	bl	2c54 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    2470:	2300      	movs	r3, #0
    2472:	9303      	str	r3, [sp, #12]
    2474:	e001      	b.n	247a <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    2476:	2300      	movs	r3, #0
    2478:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    247a:	9b03      	ldr	r3, [sp, #12]
}
    247c:	4618      	mov	r0, r3
    247e:	b005      	add	sp, #20
    2480:	f85d fb04 	ldr.w	pc, [sp], #4
    2484:	1fff8b40 	.word	0x1fff8b40

00002488 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    2488:	b510      	push	{r4, lr}
    248a:	b084      	sub	sp, #16
    248c:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    248e:	4a9f      	ldr	r2, [pc, #636]	; (270c <Clock_Ip_InitClock+0x284>)
    2490:	9b01      	ldr	r3, [sp, #4]
    2492:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    2494:	2101      	movs	r1, #1
    2496:	9801      	ldr	r0, [sp, #4]
    2498:	f003 fa90 	bl	59bc <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    249c:	4b9b      	ldr	r3, [pc, #620]	; (270c <Clock_Ip_InitClock+0x284>)
    249e:	681b      	ldr	r3, [r3, #0]
    24a0:	2b00      	cmp	r3, #0
    24a2:	d030      	beq.n	2506 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    24a4:	2300      	movs	r3, #0
    24a6:	9303      	str	r3, [sp, #12]
    24a8:	e027      	b.n	24fa <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    24aa:	9901      	ldr	r1, [sp, #4]
    24ac:	9a03      	ldr	r2, [sp, #12]
    24ae:	4613      	mov	r3, r2
    24b0:	009b      	lsls	r3, r3, #2
    24b2:	4413      	add	r3, r2
    24b4:	009b      	lsls	r3, r3, #2
    24b6:	440b      	add	r3, r1
    24b8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    24bc:	681a      	ldr	r2, [r3, #0]
    24be:	4994      	ldr	r1, [pc, #592]	; (2710 <Clock_Ip_InitClock+0x288>)
    24c0:	4613      	mov	r3, r2
    24c2:	00db      	lsls	r3, r3, #3
    24c4:	4413      	add	r3, r2
    24c6:	440b      	add	r3, r1
    24c8:	3301      	adds	r3, #1
    24ca:	781b      	ldrb	r3, [r3, #0]
    24cc:	461a      	mov	r2, r3
    24ce:	4b91      	ldr	r3, [pc, #580]	; (2714 <Clock_Ip_InitClock+0x28c>)
    24d0:	5c9b      	ldrb	r3, [r3, r2]
    24d2:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    24d4:	4a90      	ldr	r2, [pc, #576]	; (2718 <Clock_Ip_InitClock+0x290>)
    24d6:	9b02      	ldr	r3, [sp, #8]
    24d8:	011b      	lsls	r3, r3, #4
    24da:	4413      	add	r3, r2
    24dc:	6819      	ldr	r1, [r3, #0]
    24de:	9a03      	ldr	r2, [sp, #12]
    24e0:	4613      	mov	r3, r2
    24e2:	009b      	lsls	r3, r3, #2
    24e4:	4413      	add	r3, r2
    24e6:	009b      	lsls	r3, r3, #2
    24e8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    24ec:	9a01      	ldr	r2, [sp, #4]
    24ee:	4413      	add	r3, r2
    24f0:	4618      	mov	r0, r3
    24f2:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    24f4:	9b03      	ldr	r3, [sp, #12]
    24f6:	3301      	adds	r3, #1
    24f8:	9303      	str	r3, [sp, #12]
    24fa:	9b01      	ldr	r3, [sp, #4]
    24fc:	7c9b      	ldrb	r3, [r3, #18]
    24fe:	461a      	mov	r2, r3
    2500:	9b03      	ldr	r3, [sp, #12]
    2502:	4293      	cmp	r3, r2
    2504:	d3d1      	bcc.n	24aa <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    2506:	9801      	ldr	r0, [sp, #4]
    2508:	f7ff feca 	bl	22a0 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    250c:	2300      	movs	r3, #0
    250e:	9303      	str	r3, [sp, #12]
    2510:	e029      	b.n	2566 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2512:	9901      	ldr	r1, [sp, #4]
    2514:	9a03      	ldr	r2, [sp, #12]
    2516:	4613      	mov	r3, r2
    2518:	005b      	lsls	r3, r3, #1
    251a:	4413      	add	r3, r2
    251c:	009b      	lsls	r3, r3, #2
    251e:	440b      	add	r3, r1
    2520:	3314      	adds	r3, #20
    2522:	681a      	ldr	r2, [r3, #0]
    2524:	497a      	ldr	r1, [pc, #488]	; (2710 <Clock_Ip_InitClock+0x288>)
    2526:	4613      	mov	r3, r2
    2528:	00db      	lsls	r3, r3, #3
    252a:	4413      	add	r3, r2
    252c:	440b      	add	r3, r1
    252e:	3301      	adds	r3, #1
    2530:	781b      	ldrb	r3, [r3, #0]
    2532:	461a      	mov	r2, r3
    2534:	4b79      	ldr	r3, [pc, #484]	; (271c <Clock_Ip_InitClock+0x294>)
    2536:	5c9b      	ldrb	r3, [r3, r2]
    2538:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    253a:	4979      	ldr	r1, [pc, #484]	; (2720 <Clock_Ip_InitClock+0x298>)
    253c:	9a02      	ldr	r2, [sp, #8]
    253e:	4613      	mov	r3, r2
    2540:	005b      	lsls	r3, r3, #1
    2542:	4413      	add	r3, r2
    2544:	009b      	lsls	r3, r3, #2
    2546:	440b      	add	r3, r1
    2548:	6819      	ldr	r1, [r3, #0]
    254a:	9a03      	ldr	r2, [sp, #12]
    254c:	4613      	mov	r3, r2
    254e:	005b      	lsls	r3, r3, #1
    2550:	4413      	add	r3, r2
    2552:	009b      	lsls	r3, r3, #2
    2554:	3310      	adds	r3, #16
    2556:	9a01      	ldr	r2, [sp, #4]
    2558:	4413      	add	r3, r2
    255a:	3304      	adds	r3, #4
    255c:	4618      	mov	r0, r3
    255e:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2560:	9b03      	ldr	r3, [sp, #12]
    2562:	3301      	adds	r3, #1
    2564:	9303      	str	r3, [sp, #12]
    2566:	9b01      	ldr	r3, [sp, #4]
    2568:	7a1b      	ldrb	r3, [r3, #8]
    256a:	461a      	mov	r2, r3
    256c:	9b03      	ldr	r3, [sp, #12]
    256e:	4293      	cmp	r3, r2
    2570:	d3cf      	bcc.n	2512 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2572:	2300      	movs	r3, #0
    2574:	9303      	str	r3, [sp, #12]
    2576:	e02a      	b.n	25ce <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2578:	9901      	ldr	r1, [sp, #4]
    257a:	9a03      	ldr	r2, [sp, #12]
    257c:	4613      	mov	r3, r2
    257e:	009b      	lsls	r3, r3, #2
    2580:	4413      	add	r3, r2
    2582:	009b      	lsls	r3, r3, #2
    2584:	440b      	add	r3, r1
    2586:	332c      	adds	r3, #44	; 0x2c
    2588:	681a      	ldr	r2, [r3, #0]
    258a:	4961      	ldr	r1, [pc, #388]	; (2710 <Clock_Ip_InitClock+0x288>)
    258c:	4613      	mov	r3, r2
    258e:	00db      	lsls	r3, r3, #3
    2590:	4413      	add	r3, r2
    2592:	440b      	add	r3, r1
    2594:	3301      	adds	r3, #1
    2596:	781b      	ldrb	r3, [r3, #0]
    2598:	461a      	mov	r2, r3
    259a:	4b62      	ldr	r3, [pc, #392]	; (2724 <Clock_Ip_InitClock+0x29c>)
    259c:	5c9b      	ldrb	r3, [r3, r2]
    259e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    25a0:	4961      	ldr	r1, [pc, #388]	; (2728 <Clock_Ip_InitClock+0x2a0>)
    25a2:	9a02      	ldr	r2, [sp, #8]
    25a4:	4613      	mov	r3, r2
    25a6:	009b      	lsls	r3, r3, #2
    25a8:	4413      	add	r3, r2
    25aa:	009b      	lsls	r3, r3, #2
    25ac:	440b      	add	r3, r1
    25ae:	3304      	adds	r3, #4
    25b0:	6819      	ldr	r1, [r3, #0]
    25b2:	9a03      	ldr	r2, [sp, #12]
    25b4:	4613      	mov	r3, r2
    25b6:	009b      	lsls	r3, r3, #2
    25b8:	4413      	add	r3, r2
    25ba:	009b      	lsls	r3, r3, #2
    25bc:	3328      	adds	r3, #40	; 0x28
    25be:	9a01      	ldr	r2, [sp, #4]
    25c0:	4413      	add	r3, r2
    25c2:	3304      	adds	r3, #4
    25c4:	4618      	mov	r0, r3
    25c6:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    25c8:	9b03      	ldr	r3, [sp, #12]
    25ca:	3301      	adds	r3, #1
    25cc:	9303      	str	r3, [sp, #12]
    25ce:	9b01      	ldr	r3, [sp, #4]
    25d0:	7a5b      	ldrb	r3, [r3, #9]
    25d2:	461a      	mov	r2, r3
    25d4:	9b03      	ldr	r3, [sp, #12]
    25d6:	4293      	cmp	r3, r2
    25d8:	d3ce      	bcc.n	2578 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    25da:	9801      	ldr	r0, [sp, #4]
    25dc:	f7ff fdb0 	bl	2140 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    25e0:	2300      	movs	r3, #0
    25e2:	9303      	str	r3, [sp, #12]
    25e4:	e028      	b.n	2638 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    25e6:	9901      	ldr	r1, [sp, #4]
    25e8:	9a03      	ldr	r2, [sp, #12]
    25ea:	4613      	mov	r3, r2
    25ec:	009b      	lsls	r3, r3, #2
    25ee:	4413      	add	r3, r2
    25f0:	009b      	lsls	r3, r3, #2
    25f2:	440b      	add	r3, r1
    25f4:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    25f8:	681a      	ldr	r2, [r3, #0]
    25fa:	4945      	ldr	r1, [pc, #276]	; (2710 <Clock_Ip_InitClock+0x288>)
    25fc:	4613      	mov	r3, r2
    25fe:	00db      	lsls	r3, r3, #3
    2600:	4413      	add	r3, r2
    2602:	440b      	add	r3, r1
    2604:	3301      	adds	r3, #1
    2606:	781b      	ldrb	r3, [r3, #0]
    2608:	461a      	mov	r2, r3
    260a:	4b48      	ldr	r3, [pc, #288]	; (272c <Clock_Ip_InitClock+0x2a4>)
    260c:	5c9b      	ldrb	r3, [r3, r2]
    260e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    2610:	4a47      	ldr	r2, [pc, #284]	; (2730 <Clock_Ip_InitClock+0x2a8>)
    2612:	9b02      	ldr	r3, [sp, #8]
    2614:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    2618:	9a03      	ldr	r2, [sp, #12]
    261a:	4613      	mov	r3, r2
    261c:	009b      	lsls	r3, r3, #2
    261e:	4413      	add	r3, r2
    2620:	009b      	lsls	r3, r3, #2
    2622:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    2626:	9a01      	ldr	r2, [sp, #4]
    2628:	4413      	add	r3, r2
    262a:	3304      	adds	r3, #4
    262c:	9903      	ldr	r1, [sp, #12]
    262e:	4618      	mov	r0, r3
    2630:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2632:	9b03      	ldr	r3, [sp, #12]
    2634:	3301      	adds	r3, #1
    2636:	9303      	str	r3, [sp, #12]
    2638:	9b01      	ldr	r3, [sp, #4]
    263a:	7c5b      	ldrb	r3, [r3, #17]
    263c:	461a      	mov	r2, r3
    263e:	9b03      	ldr	r3, [sp, #12]
    2640:	4293      	cmp	r3, r2
    2642:	d3d0      	bcc.n	25e6 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2644:	2300      	movs	r3, #0
    2646:	9303      	str	r3, [sp, #12]
    2648:	e026      	b.n	2698 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    264a:	9901      	ldr	r1, [sp, #4]
    264c:	9a03      	ldr	r2, [sp, #12]
    264e:	4613      	mov	r3, r2
    2650:	005b      	lsls	r3, r3, #1
    2652:	4413      	add	r3, r2
    2654:	009b      	lsls	r3, r3, #2
    2656:	440b      	add	r3, r1
    2658:	f503 730e 	add.w	r3, r3, #568	; 0x238
    265c:	681a      	ldr	r2, [r3, #0]
    265e:	492c      	ldr	r1, [pc, #176]	; (2710 <Clock_Ip_InitClock+0x288>)
    2660:	4613      	mov	r3, r2
    2662:	00db      	lsls	r3, r3, #3
    2664:	4413      	add	r3, r2
    2666:	440b      	add	r3, r1
    2668:	3301      	adds	r3, #1
    266a:	781b      	ldrb	r3, [r3, #0]
    266c:	461a      	mov	r2, r3
    266e:	4b31      	ldr	r3, [pc, #196]	; (2734 <Clock_Ip_InitClock+0x2ac>)
    2670:	5c9b      	ldrb	r3, [r3, r2]
    2672:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    2674:	4a30      	ldr	r2, [pc, #192]	; (2738 <Clock_Ip_InitClock+0x2b0>)
    2676:	9b02      	ldr	r3, [sp, #8]
    2678:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    267c:	9a03      	ldr	r2, [sp, #12]
    267e:	4613      	mov	r3, r2
    2680:	005b      	lsls	r3, r3, #1
    2682:	4413      	add	r3, r2
    2684:	009b      	lsls	r3, r3, #2
    2686:	f503 730e 	add.w	r3, r3, #568	; 0x238
    268a:	9a01      	ldr	r2, [sp, #4]
    268c:	4413      	add	r3, r2
    268e:	4618      	mov	r0, r3
    2690:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2692:	9b03      	ldr	r3, [sp, #12]
    2694:	3301      	adds	r3, #1
    2696:	9303      	str	r3, [sp, #12]
    2698:	9b01      	ldr	r3, [sp, #4]
    269a:	7b5b      	ldrb	r3, [r3, #13]
    269c:	461a      	mov	r2, r3
    269e:	9b03      	ldr	r3, [sp, #12]
    26a0:	4293      	cmp	r3, r2
    26a2:	d3d2      	bcc.n	264a <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    26a4:	2300      	movs	r3, #0
    26a6:	9303      	str	r3, [sp, #12]
    26a8:	e026      	b.n	26f8 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    26aa:	9901      	ldr	r1, [sp, #4]
    26ac:	9a03      	ldr	r2, [sp, #12]
    26ae:	4613      	mov	r3, r2
    26b0:	005b      	lsls	r3, r3, #1
    26b2:	4413      	add	r3, r2
    26b4:	009b      	lsls	r3, r3, #2
    26b6:	440b      	add	r3, r1
    26b8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    26bc:	681a      	ldr	r2, [r3, #0]
    26be:	4914      	ldr	r1, [pc, #80]	; (2710 <Clock_Ip_InitClock+0x288>)
    26c0:	4613      	mov	r3, r2
    26c2:	00db      	lsls	r3, r3, #3
    26c4:	4413      	add	r3, r2
    26c6:	440b      	add	r3, r1
    26c8:	3301      	adds	r3, #1
    26ca:	781b      	ldrb	r3, [r3, #0]
    26cc:	461a      	mov	r2, r3
    26ce:	4b1b      	ldr	r3, [pc, #108]	; (273c <Clock_Ip_InitClock+0x2b4>)
    26d0:	5c9b      	ldrb	r3, [r3, r2]
    26d2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    26d4:	4a1a      	ldr	r2, [pc, #104]	; (2740 <Clock_Ip_InitClock+0x2b8>)
    26d6:	9b02      	ldr	r3, [sp, #8]
    26d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    26dc:	9a03      	ldr	r2, [sp, #12]
    26de:	4613      	mov	r3, r2
    26e0:	005b      	lsls	r3, r3, #1
    26e2:	4413      	add	r3, r2
    26e4:	009b      	lsls	r3, r3, #2
    26e6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    26ea:	9a01      	ldr	r2, [sp, #4]
    26ec:	4413      	add	r3, r2
    26ee:	4618      	mov	r0, r3
    26f0:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    26f2:	9b03      	ldr	r3, [sp, #12]
    26f4:	3301      	adds	r3, #1
    26f6:	9303      	str	r3, [sp, #12]
    26f8:	9b01      	ldr	r3, [sp, #4]
    26fa:	7b1b      	ldrb	r3, [r3, #12]
    26fc:	461a      	mov	r2, r3
    26fe:	9b03      	ldr	r3, [sp, #12]
    2700:	4293      	cmp	r3, r2
    2702:	d3d2      	bcc.n	26aa <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2704:	2300      	movs	r3, #0
    2706:	9303      	str	r3, [sp, #12]
    2708:	e044      	b.n	2794 <Clock_Ip_InitClock+0x30c>
    270a:	bf00      	nop
    270c:	1fff8b38 	.word	0x1fff8b38
    2710:	00017f14 	.word	0x00017f14
    2714:	00017f04 	.word	0x00017f04
    2718:	00018510 	.word	0x00018510
    271c:	00017ea4 	.word	0x00017ea4
    2720:	000184d4 	.word	0x000184d4
    2724:	00017e94 	.word	0x00017e94
    2728:	00018468 	.word	0x00018468
    272c:	00017ef4 	.word	0x00017ef4
    2730:	00018548 	.word	0x00018548
    2734:	00017e84 	.word	0x00017e84
    2738:	00018460 	.word	0x00018460
    273c:	00017e74 	.word	0x00017e74
    2740:	00018424 	.word	0x00018424
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2744:	9901      	ldr	r1, [sp, #4]
    2746:	9a03      	ldr	r2, [sp, #12]
    2748:	4613      	mov	r3, r2
    274a:	005b      	lsls	r3, r3, #1
    274c:	4413      	add	r3, r2
    274e:	009b      	lsls	r3, r3, #2
    2750:	440b      	add	r3, r1
    2752:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2756:	681a      	ldr	r2, [r3, #0]
    2758:	49ac      	ldr	r1, [pc, #688]	; (2a0c <Clock_Ip_InitClock+0x584>)
    275a:	4613      	mov	r3, r2
    275c:	00db      	lsls	r3, r3, #3
    275e:	4413      	add	r3, r2
    2760:	440b      	add	r3, r1
    2762:	3301      	adds	r3, #1
    2764:	781b      	ldrb	r3, [r3, #0]
    2766:	461a      	mov	r2, r3
    2768:	4ba9      	ldr	r3, [pc, #676]	; (2a10 <Clock_Ip_InitClock+0x588>)
    276a:	5c9b      	ldrb	r3, [r3, r2]
    276c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    276e:	4aa9      	ldr	r2, [pc, #676]	; (2a14 <Clock_Ip_InitClock+0x58c>)
    2770:	9b02      	ldr	r3, [sp, #8]
    2772:	00db      	lsls	r3, r3, #3
    2774:	4413      	add	r3, r2
    2776:	6859      	ldr	r1, [r3, #4]
    2778:	9a03      	ldr	r2, [sp, #12]
    277a:	4613      	mov	r3, r2
    277c:	005b      	lsls	r3, r3, #1
    277e:	4413      	add	r3, r2
    2780:	009b      	lsls	r3, r3, #2
    2782:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2786:	9a01      	ldr	r2, [sp, #4]
    2788:	4413      	add	r3, r2
    278a:	4618      	mov	r0, r3
    278c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    278e:	9b03      	ldr	r3, [sp, #12]
    2790:	3301      	adds	r3, #1
    2792:	9303      	str	r3, [sp, #12]
    2794:	9b01      	ldr	r3, [sp, #4]
    2796:	7b5b      	ldrb	r3, [r3, #13]
    2798:	461a      	mov	r2, r3
    279a:	9b03      	ldr	r3, [sp, #12]
    279c:	4293      	cmp	r3, r2
    279e:	d3d1      	bcc.n	2744 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    27a0:	2300      	movs	r3, #0
    27a2:	9303      	str	r3, [sp, #12]
    27a4:	e029      	b.n	27fa <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    27a6:	9901      	ldr	r1, [sp, #4]
    27a8:	9a03      	ldr	r2, [sp, #12]
    27aa:	4613      	mov	r3, r2
    27ac:	009b      	lsls	r3, r3, #2
    27ae:	4413      	add	r3, r2
    27b0:	00db      	lsls	r3, r3, #3
    27b2:	440b      	add	r3, r1
    27b4:	3340      	adds	r3, #64	; 0x40
    27b6:	681a      	ldr	r2, [r3, #0]
    27b8:	4994      	ldr	r1, [pc, #592]	; (2a0c <Clock_Ip_InitClock+0x584>)
    27ba:	4613      	mov	r3, r2
    27bc:	00db      	lsls	r3, r3, #3
    27be:	4413      	add	r3, r2
    27c0:	440b      	add	r3, r1
    27c2:	3301      	adds	r3, #1
    27c4:	781b      	ldrb	r3, [r3, #0]
    27c6:	461a      	mov	r2, r3
    27c8:	4b93      	ldr	r3, [pc, #588]	; (2a18 <Clock_Ip_InitClock+0x590>)
    27ca:	5c9b      	ldrb	r3, [r3, r2]
    27cc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    27ce:	4993      	ldr	r1, [pc, #588]	; (2a1c <Clock_Ip_InitClock+0x594>)
    27d0:	9a02      	ldr	r2, [sp, #8]
    27d2:	4613      	mov	r3, r2
    27d4:	009b      	lsls	r3, r3, #2
    27d6:	4413      	add	r3, r2
    27d8:	009b      	lsls	r3, r3, #2
    27da:	440b      	add	r3, r1
    27dc:	3304      	adds	r3, #4
    27de:	6819      	ldr	r1, [r3, #0]
    27e0:	9a03      	ldr	r2, [sp, #12]
    27e2:	4613      	mov	r3, r2
    27e4:	009b      	lsls	r3, r3, #2
    27e6:	4413      	add	r3, r2
    27e8:	00db      	lsls	r3, r3, #3
    27ea:	3340      	adds	r3, #64	; 0x40
    27ec:	9a01      	ldr	r2, [sp, #4]
    27ee:	4413      	add	r3, r2
    27f0:	4618      	mov	r0, r3
    27f2:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    27f4:	9b03      	ldr	r3, [sp, #12]
    27f6:	3301      	adds	r3, #1
    27f8:	9303      	str	r3, [sp, #12]
    27fa:	9b01      	ldr	r3, [sp, #4]
    27fc:	7a9b      	ldrb	r3, [r3, #10]
    27fe:	461a      	mov	r2, r3
    2800:	9b03      	ldr	r3, [sp, #12]
    2802:	4293      	cmp	r3, r2
    2804:	d3cf      	bcc.n	27a6 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    2806:	2300      	movs	r3, #0
    2808:	9303      	str	r3, [sp, #12]
    280a:	e029      	b.n	2860 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    280c:	9901      	ldr	r1, [sp, #4]
    280e:	9a03      	ldr	r2, [sp, #12]
    2810:	4613      	mov	r3, r2
    2812:	009b      	lsls	r3, r3, #2
    2814:	4413      	add	r3, r2
    2816:	009b      	lsls	r3, r3, #2
    2818:	440b      	add	r3, r1
    281a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    281e:	681a      	ldr	r2, [r3, #0]
    2820:	497a      	ldr	r1, [pc, #488]	; (2a0c <Clock_Ip_InitClock+0x584>)
    2822:	4613      	mov	r3, r2
    2824:	00db      	lsls	r3, r3, #3
    2826:	4413      	add	r3, r2
    2828:	440b      	add	r3, r1
    282a:	3301      	adds	r3, #1
    282c:	781b      	ldrb	r3, [r3, #0]
    282e:	461a      	mov	r2, r3
    2830:	4b7b      	ldr	r3, [pc, #492]	; (2a20 <Clock_Ip_InitClock+0x598>)
    2832:	5c9b      	ldrb	r3, [r3, r2]
    2834:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    2836:	4a7b      	ldr	r2, [pc, #492]	; (2a24 <Clock_Ip_InitClock+0x59c>)
    2838:	9b02      	ldr	r3, [sp, #8]
    283a:	011b      	lsls	r3, r3, #4
    283c:	4413      	add	r3, r2
    283e:	3304      	adds	r3, #4
    2840:	681c      	ldr	r4, [r3, #0]
    2842:	9a03      	ldr	r2, [sp, #12]
    2844:	4613      	mov	r3, r2
    2846:	009b      	lsls	r3, r3, #2
    2848:	4413      	add	r3, r2
    284a:	009b      	lsls	r3, r3, #2
    284c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2850:	9a01      	ldr	r2, [sp, #4]
    2852:	4413      	add	r3, r2
    2854:	9903      	ldr	r1, [sp, #12]
    2856:	4618      	mov	r0, r3
    2858:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    285a:	9b03      	ldr	r3, [sp, #12]
    285c:	3301      	adds	r3, #1
    285e:	9303      	str	r3, [sp, #12]
    2860:	9b01      	ldr	r3, [sp, #4]
    2862:	7c9b      	ldrb	r3, [r3, #18]
    2864:	461a      	mov	r2, r3
    2866:	9b03      	ldr	r3, [sp, #12]
    2868:	4293      	cmp	r3, r2
    286a:	d3cf      	bcc.n	280c <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    286c:	2300      	movs	r3, #0
    286e:	9303      	str	r3, [sp, #12]
    2870:	e02a      	b.n	28c8 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2872:	9901      	ldr	r1, [sp, #4]
    2874:	9a03      	ldr	r2, [sp, #12]
    2876:	4613      	mov	r3, r2
    2878:	009b      	lsls	r3, r3, #2
    287a:	4413      	add	r3, r2
    287c:	009b      	lsls	r3, r3, #2
    287e:	440b      	add	r3, r1
    2880:	332c      	adds	r3, #44	; 0x2c
    2882:	681a      	ldr	r2, [r3, #0]
    2884:	4961      	ldr	r1, [pc, #388]	; (2a0c <Clock_Ip_InitClock+0x584>)
    2886:	4613      	mov	r3, r2
    2888:	00db      	lsls	r3, r3, #3
    288a:	4413      	add	r3, r2
    288c:	440b      	add	r3, r1
    288e:	3301      	adds	r3, #1
    2890:	781b      	ldrb	r3, [r3, #0]
    2892:	461a      	mov	r2, r3
    2894:	4b64      	ldr	r3, [pc, #400]	; (2a28 <Clock_Ip_InitClock+0x5a0>)
    2896:	5c9b      	ldrb	r3, [r3, r2]
    2898:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    289a:	4964      	ldr	r1, [pc, #400]	; (2a2c <Clock_Ip_InitClock+0x5a4>)
    289c:	9a02      	ldr	r2, [sp, #8]
    289e:	4613      	mov	r3, r2
    28a0:	009b      	lsls	r3, r3, #2
    28a2:	4413      	add	r3, r2
    28a4:	009b      	lsls	r3, r3, #2
    28a6:	440b      	add	r3, r1
    28a8:	3308      	adds	r3, #8
    28aa:	6819      	ldr	r1, [r3, #0]
    28ac:	9a03      	ldr	r2, [sp, #12]
    28ae:	4613      	mov	r3, r2
    28b0:	009b      	lsls	r3, r3, #2
    28b2:	4413      	add	r3, r2
    28b4:	009b      	lsls	r3, r3, #2
    28b6:	3328      	adds	r3, #40	; 0x28
    28b8:	9a01      	ldr	r2, [sp, #4]
    28ba:	4413      	add	r3, r2
    28bc:	3304      	adds	r3, #4
    28be:	4618      	mov	r0, r3
    28c0:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    28c2:	9b03      	ldr	r3, [sp, #12]
    28c4:	3301      	adds	r3, #1
    28c6:	9303      	str	r3, [sp, #12]
    28c8:	9b01      	ldr	r3, [sp, #4]
    28ca:	7a5b      	ldrb	r3, [r3, #9]
    28cc:	461a      	mov	r2, r3
    28ce:	9b03      	ldr	r3, [sp, #12]
    28d0:	4293      	cmp	r3, r2
    28d2:	d3ce      	bcc.n	2872 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    28d4:	2300      	movs	r3, #0
    28d6:	9303      	str	r3, [sp, #12]
    28d8:	e029      	b.n	292e <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    28da:	9901      	ldr	r1, [sp, #4]
    28dc:	9a03      	ldr	r2, [sp, #12]
    28de:	4613      	mov	r3, r2
    28e0:	009b      	lsls	r3, r3, #2
    28e2:	4413      	add	r3, r2
    28e4:	00db      	lsls	r3, r3, #3
    28e6:	440b      	add	r3, r1
    28e8:	3340      	adds	r3, #64	; 0x40
    28ea:	681a      	ldr	r2, [r3, #0]
    28ec:	4947      	ldr	r1, [pc, #284]	; (2a0c <Clock_Ip_InitClock+0x584>)
    28ee:	4613      	mov	r3, r2
    28f0:	00db      	lsls	r3, r3, #3
    28f2:	4413      	add	r3, r2
    28f4:	440b      	add	r3, r1
    28f6:	3301      	adds	r3, #1
    28f8:	781b      	ldrb	r3, [r3, #0]
    28fa:	461a      	mov	r2, r3
    28fc:	4b46      	ldr	r3, [pc, #280]	; (2a18 <Clock_Ip_InitClock+0x590>)
    28fe:	5c9b      	ldrb	r3, [r3, r2]
    2900:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    2902:	4946      	ldr	r1, [pc, #280]	; (2a1c <Clock_Ip_InitClock+0x594>)
    2904:	9a02      	ldr	r2, [sp, #8]
    2906:	4613      	mov	r3, r2
    2908:	009b      	lsls	r3, r3, #2
    290a:	4413      	add	r3, r2
    290c:	009b      	lsls	r3, r3, #2
    290e:	440b      	add	r3, r1
    2910:	330c      	adds	r3, #12
    2912:	6819      	ldr	r1, [r3, #0]
    2914:	9a03      	ldr	r2, [sp, #12]
    2916:	4613      	mov	r3, r2
    2918:	009b      	lsls	r3, r3, #2
    291a:	4413      	add	r3, r2
    291c:	00db      	lsls	r3, r3, #3
    291e:	3340      	adds	r3, #64	; 0x40
    2920:	9a01      	ldr	r2, [sp, #4]
    2922:	4413      	add	r3, r2
    2924:	4618      	mov	r0, r3
    2926:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2928:	9b03      	ldr	r3, [sp, #12]
    292a:	3301      	adds	r3, #1
    292c:	9303      	str	r3, [sp, #12]
    292e:	9b01      	ldr	r3, [sp, #4]
    2930:	7a9b      	ldrb	r3, [r3, #10]
    2932:	461a      	mov	r2, r3
    2934:	9b03      	ldr	r3, [sp, #12]
    2936:	4293      	cmp	r3, r2
    2938:	d3cf      	bcc.n	28da <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    293a:	2300      	movs	r3, #0
    293c:	9303      	str	r3, [sp, #12]
    293e:	e025      	b.n	298c <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    2940:	9a01      	ldr	r2, [sp, #4]
    2942:	9b03      	ldr	r3, [sp, #12]
    2944:	3324      	adds	r3, #36	; 0x24
    2946:	011b      	lsls	r3, r3, #4
    2948:	4413      	add	r3, r2
    294a:	3304      	adds	r3, #4
    294c:	681a      	ldr	r2, [r3, #0]
    294e:	492f      	ldr	r1, [pc, #188]	; (2a0c <Clock_Ip_InitClock+0x584>)
    2950:	4613      	mov	r3, r2
    2952:	00db      	lsls	r3, r3, #3
    2954:	4413      	add	r3, r2
    2956:	440b      	add	r3, r1
    2958:	3301      	adds	r3, #1
    295a:	781b      	ldrb	r3, [r3, #0]
    295c:	461a      	mov	r2, r3
    295e:	4b34      	ldr	r3, [pc, #208]	; (2a30 <Clock_Ip_InitClock+0x5a8>)
    2960:	5c9b      	ldrb	r3, [r3, r2]
    2962:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    2964:	4933      	ldr	r1, [pc, #204]	; (2a34 <Clock_Ip_InitClock+0x5ac>)
    2966:	9a02      	ldr	r2, [sp, #8]
    2968:	4613      	mov	r3, r2
    296a:	005b      	lsls	r3, r3, #1
    296c:	4413      	add	r3, r2
    296e:	009b      	lsls	r3, r3, #2
    2970:	440b      	add	r3, r1
    2972:	3304      	adds	r3, #4
    2974:	681b      	ldr	r3, [r3, #0]
    2976:	9a03      	ldr	r2, [sp, #12]
    2978:	3224      	adds	r2, #36	; 0x24
    297a:	0112      	lsls	r2, r2, #4
    297c:	9901      	ldr	r1, [sp, #4]
    297e:	440a      	add	r2, r1
    2980:	3204      	adds	r2, #4
    2982:	4610      	mov	r0, r2
    2984:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    2986:	9b03      	ldr	r3, [sp, #12]
    2988:	3301      	adds	r3, #1
    298a:	9303      	str	r3, [sp, #12]
    298c:	9b01      	ldr	r3, [sp, #4]
    298e:	7b9b      	ldrb	r3, [r3, #14]
    2990:	461a      	mov	r2, r3
    2992:	9b03      	ldr	r3, [sp, #12]
    2994:	4293      	cmp	r3, r2
    2996:	d3d3      	bcc.n	2940 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    2998:	4b27      	ldr	r3, [pc, #156]	; (2a38 <Clock_Ip_InitClock+0x5b0>)
    299a:	2200      	movs	r2, #0
    299c:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    299e:	4b26      	ldr	r3, [pc, #152]	; (2a38 <Clock_Ip_InitClock+0x5b0>)
    29a0:	2200      	movs	r2, #0
    29a2:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    29a4:	4b24      	ldr	r3, [pc, #144]	; (2a38 <Clock_Ip_InitClock+0x5b0>)
    29a6:	2201      	movs	r2, #1
    29a8:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    29aa:	4b23      	ldr	r3, [pc, #140]	; (2a38 <Clock_Ip_InitClock+0x5b0>)
    29ac:	2200      	movs	r2, #0
    29ae:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    29b0:	f000 fa9c 	bl	2eec <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    29b4:	2300      	movs	r3, #0
    29b6:	9303      	str	r3, [sp, #12]
    29b8:	e04c      	b.n	2a54 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    29ba:	9a01      	ldr	r2, [sp, #4]
    29bc:	9b03      	ldr	r3, [sp, #12]
    29be:	330d      	adds	r3, #13
    29c0:	00db      	lsls	r3, r3, #3
    29c2:	4413      	add	r3, r2
    29c4:	685b      	ldr	r3, [r3, #4]
    29c6:	4a1d      	ldr	r2, [pc, #116]	; (2a3c <Clock_Ip_InitClock+0x5b4>)
    29c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    29cc:	2b03      	cmp	r3, #3
    29ce:	d03b      	beq.n	2a48 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    29d0:	9b01      	ldr	r3, [sp, #4]
    29d2:	9a03      	ldr	r2, [sp, #12]
    29d4:	320d      	adds	r2, #13
    29d6:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    29da:	490c      	ldr	r1, [pc, #48]	; (2a0c <Clock_Ip_InitClock+0x584>)
    29dc:	4613      	mov	r3, r2
    29de:	00db      	lsls	r3, r3, #3
    29e0:	4413      	add	r3, r2
    29e2:	440b      	add	r3, r1
    29e4:	3301      	adds	r3, #1
    29e6:	781b      	ldrb	r3, [r3, #0]
    29e8:	461a      	mov	r2, r3
    29ea:	4b15      	ldr	r3, [pc, #84]	; (2a40 <Clock_Ip_InitClock+0x5b8>)
    29ec:	5c9b      	ldrb	r3, [r3, r2]
    29ee:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    29f0:	4a14      	ldr	r2, [pc, #80]	; (2a44 <Clock_Ip_InitClock+0x5bc>)
    29f2:	9b02      	ldr	r3, [sp, #8]
    29f4:	00db      	lsls	r3, r3, #3
    29f6:	4413      	add	r3, r2
    29f8:	685b      	ldr	r3, [r3, #4]
    29fa:	9a03      	ldr	r2, [sp, #12]
    29fc:	320d      	adds	r2, #13
    29fe:	00d2      	lsls	r2, r2, #3
    2a00:	9901      	ldr	r1, [sp, #4]
    2a02:	440a      	add	r2, r1
    2a04:	4610      	mov	r0, r2
    2a06:	4798      	blx	r3
    2a08:	e021      	b.n	2a4e <Clock_Ip_InitClock+0x5c6>
    2a0a:	bf00      	nop
    2a0c:	00017f14 	.word	0x00017f14
    2a10:	00017e84 	.word	0x00017e84
    2a14:	00018460 	.word	0x00018460
    2a18:	00017ed4 	.word	0x00017ed4
    2a1c:	00018520 	.word	0x00018520
    2a20:	00017f04 	.word	0x00017f04
    2a24:	00018510 	.word	0x00018510
    2a28:	00017e94 	.word	0x00017e94
    2a2c:	00018468 	.word	0x00018468
    2a30:	00017ec4 	.word	0x00017ec4
    2a34:	00018490 	.word	0x00018490
    2a38:	1fff8b40 	.word	0x1fff8b40
    2a3c:	00018360 	.word	0x00018360
    2a40:	00017ee4 	.word	0x00017ee4
    2a44:	0001854c 	.word	0x0001854c
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    2a48:	4b3a      	ldr	r3, [pc, #232]	; (2b34 <Clock_Ip_InitClock+0x6ac>)
    2a4a:	2201      	movs	r2, #1
    2a4c:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2a4e:	9b03      	ldr	r3, [sp, #12]
    2a50:	3301      	adds	r3, #1
    2a52:	9303      	str	r3, [sp, #12]
    2a54:	9b01      	ldr	r3, [sp, #4]
    2a56:	7adb      	ldrb	r3, [r3, #11]
    2a58:	461a      	mov	r2, r3
    2a5a:	9b03      	ldr	r3, [sp, #12]
    2a5c:	4293      	cmp	r3, r2
    2a5e:	d3ac      	bcc.n	29ba <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    2a60:	4b34      	ldr	r3, [pc, #208]	; (2b34 <Clock_Ip_InitClock+0x6ac>)
    2a62:	781b      	ldrb	r3, [r3, #0]
    2a64:	f083 0301 	eor.w	r3, r3, #1
    2a68:	b2db      	uxtb	r3, r3
    2a6a:	2b00      	cmp	r3, #0
    2a6c:	d05e      	beq.n	2b2c <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2a6e:	2300      	movs	r3, #0
    2a70:	9303      	str	r3, [sp, #12]
    2a72:	e01f      	b.n	2ab4 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2a74:	9a01      	ldr	r2, [sp, #4]
    2a76:	9b03      	ldr	r3, [sp, #12]
    2a78:	334e      	adds	r3, #78	; 0x4e
    2a7a:	00db      	lsls	r3, r3, #3
    2a7c:	4413      	add	r3, r2
    2a7e:	685a      	ldr	r2, [r3, #4]
    2a80:	492d      	ldr	r1, [pc, #180]	; (2b38 <Clock_Ip_InitClock+0x6b0>)
    2a82:	4613      	mov	r3, r2
    2a84:	00db      	lsls	r3, r3, #3
    2a86:	4413      	add	r3, r2
    2a88:	440b      	add	r3, r1
    2a8a:	3301      	adds	r3, #1
    2a8c:	781b      	ldrb	r3, [r3, #0]
    2a8e:	461a      	mov	r2, r3
    2a90:	4b2a      	ldr	r3, [pc, #168]	; (2b3c <Clock_Ip_InitClock+0x6b4>)
    2a92:	5c9b      	ldrb	r3, [r3, r2]
    2a94:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    2a96:	4a2a      	ldr	r2, [pc, #168]	; (2b40 <Clock_Ip_InitClock+0x6b8>)
    2a98:	9b02      	ldr	r3, [sp, #8]
    2a9a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2a9e:	9a03      	ldr	r2, [sp, #12]
    2aa0:	324e      	adds	r2, #78	; 0x4e
    2aa2:	00d2      	lsls	r2, r2, #3
    2aa4:	9901      	ldr	r1, [sp, #4]
    2aa6:	440a      	add	r2, r1
    2aa8:	3204      	adds	r2, #4
    2aaa:	4610      	mov	r0, r2
    2aac:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2aae:	9b03      	ldr	r3, [sp, #12]
    2ab0:	3301      	adds	r3, #1
    2ab2:	9303      	str	r3, [sp, #12]
    2ab4:	9b01      	ldr	r3, [sp, #4]
    2ab6:	7c1b      	ldrb	r3, [r3, #16]
    2ab8:	461a      	mov	r2, r3
    2aba:	9b03      	ldr	r3, [sp, #12]
    2abc:	4293      	cmp	r3, r2
    2abe:	d3d9      	bcc.n	2a74 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2ac0:	2300      	movs	r3, #0
    2ac2:	9303      	str	r3, [sp, #12]
    2ac4:	e028      	b.n	2b18 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2ac6:	9901      	ldr	r1, [sp, #4]
    2ac8:	9a03      	ldr	r2, [sp, #12]
    2aca:	4613      	mov	r3, r2
    2acc:	009b      	lsls	r3, r3, #2
    2ace:	4413      	add	r3, r2
    2ad0:	009b      	lsls	r3, r3, #2
    2ad2:	440b      	add	r3, r1
    2ad4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2ad8:	681a      	ldr	r2, [r3, #0]
    2ada:	4917      	ldr	r1, [pc, #92]	; (2b38 <Clock_Ip_InitClock+0x6b0>)
    2adc:	4613      	mov	r3, r2
    2ade:	00db      	lsls	r3, r3, #3
    2ae0:	4413      	add	r3, r2
    2ae2:	440b      	add	r3, r1
    2ae4:	3301      	adds	r3, #1
    2ae6:	781b      	ldrb	r3, [r3, #0]
    2ae8:	461a      	mov	r2, r3
    2aea:	4b16      	ldr	r3, [pc, #88]	; (2b44 <Clock_Ip_InitClock+0x6bc>)
    2aec:	5c9b      	ldrb	r3, [r3, r2]
    2aee:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    2af0:	4a15      	ldr	r2, [pc, #84]	; (2b48 <Clock_Ip_InitClock+0x6c0>)
    2af2:	9b02      	ldr	r3, [sp, #8]
    2af4:	011b      	lsls	r3, r3, #4
    2af6:	4413      	add	r3, r2
    2af8:	330c      	adds	r3, #12
    2afa:	6819      	ldr	r1, [r3, #0]
    2afc:	9a03      	ldr	r2, [sp, #12]
    2afe:	4613      	mov	r3, r2
    2b00:	009b      	lsls	r3, r3, #2
    2b02:	4413      	add	r3, r2
    2b04:	009b      	lsls	r3, r3, #2
    2b06:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2b0a:	9a01      	ldr	r2, [sp, #4]
    2b0c:	4413      	add	r3, r2
    2b0e:	4618      	mov	r0, r3
    2b10:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2b12:	9b03      	ldr	r3, [sp, #12]
    2b14:	3301      	adds	r3, #1
    2b16:	9303      	str	r3, [sp, #12]
    2b18:	9b01      	ldr	r3, [sp, #4]
    2b1a:	7c9b      	ldrb	r3, [r3, #18]
    2b1c:	461a      	mov	r2, r3
    2b1e:	9b03      	ldr	r3, [sp, #12]
    2b20:	4293      	cmp	r3, r2
    2b22:	d3d0      	bcc.n	2ac6 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2b24:	2104      	movs	r1, #4
    2b26:	9801      	ldr	r0, [sp, #4]
    2b28:	f002 ff48 	bl	59bc <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    2b2c:	bf00      	nop
    2b2e:	b004      	add	sp, #16
    2b30:	bd10      	pop	{r4, pc}
    2b32:	bf00      	nop
    2b34:	1fff8b40 	.word	0x1fff8b40
    2b38:	00017f14 	.word	0x00017f14
    2b3c:	00017eb4 	.word	0x00017eb4
    2b40:	0001849c 	.word	0x0001849c
    2b44:	00017f04 	.word	0x00017f04
    2b48:	00018510 	.word	0x00018510

00002b4c <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    2b4c:	b500      	push	{lr}
    2b4e:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    2b50:	2302      	movs	r3, #2
    2b52:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2b54:	2300      	movs	r3, #0
    2b56:	9304      	str	r3, [sp, #16]
    2b58:	e02c      	b.n	2bb4 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    2b5a:	4a36      	ldr	r2, [pc, #216]	; (2c34 <Clock_Ip_GetPllStatus+0xe8>)
    2b5c:	9b04      	ldr	r3, [sp, #16]
    2b5e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2b62:	4935      	ldr	r1, [pc, #212]	; (2c38 <Clock_Ip_GetPllStatus+0xec>)
    2b64:	4613      	mov	r3, r2
    2b66:	00db      	lsls	r3, r3, #3
    2b68:	4413      	add	r3, r2
    2b6a:	440b      	add	r3, r1
    2b6c:	3301      	adds	r3, #1
    2b6e:	781b      	ldrb	r3, [r3, #0]
    2b70:	461a      	mov	r2, r3
    2b72:	4b32      	ldr	r3, [pc, #200]	; (2c3c <Clock_Ip_GetPllStatus+0xf0>)
    2b74:	5c9b      	ldrb	r3, [r3, r2]
    2b76:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    2b78:	4931      	ldr	r1, [pc, #196]	; (2c40 <Clock_Ip_GetPllStatus+0xf4>)
    2b7a:	9a03      	ldr	r2, [sp, #12]
    2b7c:	4613      	mov	r3, r2
    2b7e:	009b      	lsls	r3, r3, #2
    2b80:	4413      	add	r3, r2
    2b82:	009b      	lsls	r3, r3, #2
    2b84:	440b      	add	r3, r1
    2b86:	3308      	adds	r3, #8
    2b88:	681b      	ldr	r3, [r3, #0]
    2b8a:	492a      	ldr	r1, [pc, #168]	; (2c34 <Clock_Ip_GetPllStatus+0xe8>)
    2b8c:	9a04      	ldr	r2, [sp, #16]
    2b8e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2b92:	4610      	mov	r0, r2
    2b94:	4798      	blx	r3
    2b96:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    2b98:	9b02      	ldr	r3, [sp, #8]
    2b9a:	2b01      	cmp	r3, #1
    2b9c:	d102      	bne.n	2ba4 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    2b9e:	2301      	movs	r3, #1
    2ba0:	9305      	str	r3, [sp, #20]
            break;
    2ba2:	e00d      	b.n	2bc0 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    2ba4:	9b02      	ldr	r3, [sp, #8]
    2ba6:	2b02      	cmp	r3, #2
    2ba8:	d101      	bne.n	2bae <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    2baa:	2300      	movs	r3, #0
    2bac:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2bae:	9b04      	ldr	r3, [sp, #16]
    2bb0:	3301      	adds	r3, #1
    2bb2:	9304      	str	r3, [sp, #16]
    2bb4:	4b23      	ldr	r3, [pc, #140]	; (2c44 <Clock_Ip_GetPllStatus+0xf8>)
    2bb6:	789b      	ldrb	r3, [r3, #2]
    2bb8:	461a      	mov	r2, r3
    2bba:	9b04      	ldr	r3, [sp, #16]
    2bbc:	4293      	cmp	r3, r2
    2bbe:	d3cc      	bcc.n	2b5a <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    2bc0:	9b05      	ldr	r3, [sp, #20]
    2bc2:	2b00      	cmp	r3, #0
    2bc4:	d130      	bne.n	2c28 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2bc6:	2300      	movs	r3, #0
    2bc8:	9304      	str	r3, [sp, #16]
    2bca:	e027      	b.n	2c1c <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    2bcc:	4a1e      	ldr	r2, [pc, #120]	; (2c48 <Clock_Ip_GetPllStatus+0xfc>)
    2bce:	9b04      	ldr	r3, [sp, #16]
    2bd0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2bd4:	4918      	ldr	r1, [pc, #96]	; (2c38 <Clock_Ip_GetPllStatus+0xec>)
    2bd6:	4613      	mov	r3, r2
    2bd8:	00db      	lsls	r3, r3, #3
    2bda:	4413      	add	r3, r2
    2bdc:	440b      	add	r3, r1
    2bde:	3301      	adds	r3, #1
    2be0:	781b      	ldrb	r3, [r3, #0]
    2be2:	461a      	mov	r2, r3
    2be4:	4b19      	ldr	r3, [pc, #100]	; (2c4c <Clock_Ip_GetPllStatus+0x100>)
    2be6:	5c9b      	ldrb	r3, [r3, r2]
    2be8:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    2bea:	4919      	ldr	r1, [pc, #100]	; (2c50 <Clock_Ip_GetPllStatus+0x104>)
    2bec:	9a03      	ldr	r2, [sp, #12]
    2bee:	4613      	mov	r3, r2
    2bf0:	005b      	lsls	r3, r3, #1
    2bf2:	4413      	add	r3, r2
    2bf4:	009b      	lsls	r3, r3, #2
    2bf6:	440b      	add	r3, r1
    2bf8:	3308      	adds	r3, #8
    2bfa:	681b      	ldr	r3, [r3, #0]
    2bfc:	4912      	ldr	r1, [pc, #72]	; (2c48 <Clock_Ip_GetPllStatus+0xfc>)
    2bfe:	9a04      	ldr	r2, [sp, #16]
    2c00:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2c04:	4610      	mov	r0, r2
    2c06:	4798      	blx	r3
    2c08:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    2c0a:	9b01      	ldr	r3, [sp, #4]
    2c0c:	2b01      	cmp	r3, #1
    2c0e:	d102      	bne.n	2c16 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    2c10:	2301      	movs	r3, #1
    2c12:	9305      	str	r3, [sp, #20]
                break;
    2c14:	e008      	b.n	2c28 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2c16:	9b04      	ldr	r3, [sp, #16]
    2c18:	3301      	adds	r3, #1
    2c1a:	9304      	str	r3, [sp, #16]
    2c1c:	4b09      	ldr	r3, [pc, #36]	; (2c44 <Clock_Ip_GetPllStatus+0xf8>)
    2c1e:	78db      	ldrb	r3, [r3, #3]
    2c20:	461a      	mov	r2, r3
    2c22:	9b04      	ldr	r3, [sp, #16]
    2c24:	4293      	cmp	r3, r2
    2c26:	d3d1      	bcc.n	2bcc <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    2c28:	9b05      	ldr	r3, [sp, #20]
}
    2c2a:	4618      	mov	r0, r3
    2c2c:	b007      	add	sp, #28
    2c2e:	f85d fb04 	ldr.w	pc, [sp], #4
    2c32:	bf00      	nop
    2c34:	0001841c 	.word	0x0001841c
    2c38:	00017f14 	.word	0x00017f14
    2c3c:	00017ed4 	.word	0x00017ed4
    2c40:	00018520 	.word	0x00018520
    2c44:	1fff8b40 	.word	0x1fff8b40
    2c48:	00018420 	.word	0x00018420
    2c4c:	00017ec4 	.word	0x00017ec4
    2c50:	00018490 	.word	0x00018490

00002c54 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    2c54:	b500      	push	{lr}
    2c56:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2c58:	4b55      	ldr	r3, [pc, #340]	; (2db0 <Clock_Ip_DistributePll+0x15c>)
    2c5a:	681b      	ldr	r3, [r3, #0]
    2c5c:	2b00      	cmp	r3, #0
    2c5e:	f000 80a2 	beq.w	2da6 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2c62:	2300      	movs	r3, #0
    2c64:	9301      	str	r3, [sp, #4]
    2c66:	e02c      	b.n	2cc2 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    2c68:	4b51      	ldr	r3, [pc, #324]	; (2db0 <Clock_Ip_DistributePll+0x15c>)
    2c6a:	681a      	ldr	r2, [r3, #0]
    2c6c:	9b01      	ldr	r3, [sp, #4]
    2c6e:	330d      	adds	r3, #13
    2c70:	00db      	lsls	r3, r3, #3
    2c72:	4413      	add	r3, r2
    2c74:	685b      	ldr	r3, [r3, #4]
    2c76:	4a4f      	ldr	r2, [pc, #316]	; (2db4 <Clock_Ip_DistributePll+0x160>)
    2c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2c7c:	2b03      	cmp	r3, #3
    2c7e:	d11d      	bne.n	2cbc <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2c80:	4b4b      	ldr	r3, [pc, #300]	; (2db0 <Clock_Ip_DistributePll+0x15c>)
    2c82:	681b      	ldr	r3, [r3, #0]
    2c84:	9a01      	ldr	r2, [sp, #4]
    2c86:	320d      	adds	r2, #13
    2c88:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2c8c:	494a      	ldr	r1, [pc, #296]	; (2db8 <Clock_Ip_DistributePll+0x164>)
    2c8e:	4613      	mov	r3, r2
    2c90:	00db      	lsls	r3, r3, #3
    2c92:	4413      	add	r3, r2
    2c94:	440b      	add	r3, r1
    2c96:	3301      	adds	r3, #1
    2c98:	781b      	ldrb	r3, [r3, #0]
    2c9a:	461a      	mov	r2, r3
    2c9c:	4b47      	ldr	r3, [pc, #284]	; (2dbc <Clock_Ip_DistributePll+0x168>)
    2c9e:	5c9b      	ldrb	r3, [r3, r2]
    2ca0:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    2ca2:	4a47      	ldr	r2, [pc, #284]	; (2dc0 <Clock_Ip_DistributePll+0x16c>)
    2ca4:	9b00      	ldr	r3, [sp, #0]
    2ca6:	00db      	lsls	r3, r3, #3
    2ca8:	4413      	add	r3, r2
    2caa:	685b      	ldr	r3, [r3, #4]
    2cac:	4a40      	ldr	r2, [pc, #256]	; (2db0 <Clock_Ip_DistributePll+0x15c>)
    2cae:	6811      	ldr	r1, [r2, #0]
    2cb0:	9a01      	ldr	r2, [sp, #4]
    2cb2:	320d      	adds	r2, #13
    2cb4:	00d2      	lsls	r2, r2, #3
    2cb6:	440a      	add	r2, r1
    2cb8:	4610      	mov	r0, r2
    2cba:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2cbc:	9b01      	ldr	r3, [sp, #4]
    2cbe:	3301      	adds	r3, #1
    2cc0:	9301      	str	r3, [sp, #4]
    2cc2:	4b3b      	ldr	r3, [pc, #236]	; (2db0 <Clock_Ip_DistributePll+0x15c>)
    2cc4:	681b      	ldr	r3, [r3, #0]
    2cc6:	7adb      	ldrb	r3, [r3, #11]
    2cc8:	461a      	mov	r2, r3
    2cca:	9b01      	ldr	r3, [sp, #4]
    2ccc:	4293      	cmp	r3, r2
    2cce:	d3cb      	bcc.n	2c68 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    2cd0:	4b3c      	ldr	r3, [pc, #240]	; (2dc4 <Clock_Ip_DistributePll+0x170>)
    2cd2:	781b      	ldrb	r3, [r3, #0]
    2cd4:	2b00      	cmp	r3, #0
    2cd6:	d066      	beq.n	2da6 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2cd8:	2300      	movs	r3, #0
    2cda:	9301      	str	r3, [sp, #4]
    2cdc:	e021      	b.n	2d22 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2cde:	4b34      	ldr	r3, [pc, #208]	; (2db0 <Clock_Ip_DistributePll+0x15c>)
    2ce0:	681a      	ldr	r2, [r3, #0]
    2ce2:	9b01      	ldr	r3, [sp, #4]
    2ce4:	334e      	adds	r3, #78	; 0x4e
    2ce6:	00db      	lsls	r3, r3, #3
    2ce8:	4413      	add	r3, r2
    2cea:	685a      	ldr	r2, [r3, #4]
    2cec:	4932      	ldr	r1, [pc, #200]	; (2db8 <Clock_Ip_DistributePll+0x164>)
    2cee:	4613      	mov	r3, r2
    2cf0:	00db      	lsls	r3, r3, #3
    2cf2:	4413      	add	r3, r2
    2cf4:	440b      	add	r3, r1
    2cf6:	3301      	adds	r3, #1
    2cf8:	781b      	ldrb	r3, [r3, #0]
    2cfa:	461a      	mov	r2, r3
    2cfc:	4b32      	ldr	r3, [pc, #200]	; (2dc8 <Clock_Ip_DistributePll+0x174>)
    2cfe:	5c9b      	ldrb	r3, [r3, r2]
    2d00:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    2d02:	4a32      	ldr	r2, [pc, #200]	; (2dcc <Clock_Ip_DistributePll+0x178>)
    2d04:	9b00      	ldr	r3, [sp, #0]
    2d06:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2d0a:	4a29      	ldr	r2, [pc, #164]	; (2db0 <Clock_Ip_DistributePll+0x15c>)
    2d0c:	6811      	ldr	r1, [r2, #0]
    2d0e:	9a01      	ldr	r2, [sp, #4]
    2d10:	324e      	adds	r2, #78	; 0x4e
    2d12:	00d2      	lsls	r2, r2, #3
    2d14:	440a      	add	r2, r1
    2d16:	3204      	adds	r2, #4
    2d18:	4610      	mov	r0, r2
    2d1a:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2d1c:	9b01      	ldr	r3, [sp, #4]
    2d1e:	3301      	adds	r3, #1
    2d20:	9301      	str	r3, [sp, #4]
    2d22:	4b23      	ldr	r3, [pc, #140]	; (2db0 <Clock_Ip_DistributePll+0x15c>)
    2d24:	681b      	ldr	r3, [r3, #0]
    2d26:	7c1b      	ldrb	r3, [r3, #16]
    2d28:	461a      	mov	r2, r3
    2d2a:	9b01      	ldr	r3, [sp, #4]
    2d2c:	4293      	cmp	r3, r2
    2d2e:	d3d6      	bcc.n	2cde <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2d30:	2300      	movs	r3, #0
    2d32:	9301      	str	r3, [sp, #4]
    2d34:	e02a      	b.n	2d8c <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2d36:	4b1e      	ldr	r3, [pc, #120]	; (2db0 <Clock_Ip_DistributePll+0x15c>)
    2d38:	6819      	ldr	r1, [r3, #0]
    2d3a:	9a01      	ldr	r2, [sp, #4]
    2d3c:	4613      	mov	r3, r2
    2d3e:	009b      	lsls	r3, r3, #2
    2d40:	4413      	add	r3, r2
    2d42:	009b      	lsls	r3, r3, #2
    2d44:	440b      	add	r3, r1
    2d46:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2d4a:	681a      	ldr	r2, [r3, #0]
    2d4c:	491a      	ldr	r1, [pc, #104]	; (2db8 <Clock_Ip_DistributePll+0x164>)
    2d4e:	4613      	mov	r3, r2
    2d50:	00db      	lsls	r3, r3, #3
    2d52:	4413      	add	r3, r2
    2d54:	440b      	add	r3, r1
    2d56:	3301      	adds	r3, #1
    2d58:	781b      	ldrb	r3, [r3, #0]
    2d5a:	461a      	mov	r2, r3
    2d5c:	4b1c      	ldr	r3, [pc, #112]	; (2dd0 <Clock_Ip_DistributePll+0x17c>)
    2d5e:	5c9b      	ldrb	r3, [r3, r2]
    2d60:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    2d62:	4a1c      	ldr	r2, [pc, #112]	; (2dd4 <Clock_Ip_DistributePll+0x180>)
    2d64:	9b00      	ldr	r3, [sp, #0]
    2d66:	011b      	lsls	r3, r3, #4
    2d68:	4413      	add	r3, r2
    2d6a:	330c      	adds	r3, #12
    2d6c:	6819      	ldr	r1, [r3, #0]
    2d6e:	4b10      	ldr	r3, [pc, #64]	; (2db0 <Clock_Ip_DistributePll+0x15c>)
    2d70:	6818      	ldr	r0, [r3, #0]
    2d72:	9a01      	ldr	r2, [sp, #4]
    2d74:	4613      	mov	r3, r2
    2d76:	009b      	lsls	r3, r3, #2
    2d78:	4413      	add	r3, r2
    2d7a:	009b      	lsls	r3, r3, #2
    2d7c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2d80:	4403      	add	r3, r0
    2d82:	4618      	mov	r0, r3
    2d84:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2d86:	9b01      	ldr	r3, [sp, #4]
    2d88:	3301      	adds	r3, #1
    2d8a:	9301      	str	r3, [sp, #4]
    2d8c:	4b08      	ldr	r3, [pc, #32]	; (2db0 <Clock_Ip_DistributePll+0x15c>)
    2d8e:	681b      	ldr	r3, [r3, #0]
    2d90:	7c9b      	ldrb	r3, [r3, #18]
    2d92:	461a      	mov	r2, r3
    2d94:	9b01      	ldr	r3, [sp, #4]
    2d96:	4293      	cmp	r3, r2
    2d98:	d3cd      	bcc.n	2d36 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2d9a:	4b05      	ldr	r3, [pc, #20]	; (2db0 <Clock_Ip_DistributePll+0x15c>)
    2d9c:	681b      	ldr	r3, [r3, #0]
    2d9e:	2104      	movs	r1, #4
    2da0:	4618      	mov	r0, r3
    2da2:	f002 fe0b 	bl	59bc <Clock_Ip_Command>
        }
    }
}
    2da6:	bf00      	nop
    2da8:	b003      	add	sp, #12
    2daa:	f85d fb04 	ldr.w	pc, [sp], #4
    2dae:	bf00      	nop
    2db0:	1fff8b38 	.word	0x1fff8b38
    2db4:	00018360 	.word	0x00018360
    2db8:	00017f14 	.word	0x00017f14
    2dbc:	00017ee4 	.word	0x00017ee4
    2dc0:	0001854c 	.word	0x0001854c
    2dc4:	1fff8b40 	.word	0x1fff8b40
    2dc8:	00017eb4 	.word	0x00017eb4
    2dcc:	0001849c 	.word	0x0001849c
    2dd0:	00017f04 	.word	0x00017f04
    2dd4:	00018510 	.word	0x00018510

00002dd8 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2dd8:	b500      	push	{lr}
    2dda:	b085      	sub	sp, #20
    2ddc:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2dde:	490c      	ldr	r1, [pc, #48]	; (2e10 <Clock_Ip_DisableClockMonitor+0x38>)
    2de0:	9a01      	ldr	r2, [sp, #4]
    2de2:	4613      	mov	r3, r2
    2de4:	00db      	lsls	r3, r3, #3
    2de6:	4413      	add	r3, r2
    2de8:	440b      	add	r3, r1
    2dea:	3301      	adds	r3, #1
    2dec:	781b      	ldrb	r3, [r3, #0]
    2dee:	461a      	mov	r2, r3
    2df0:	4b08      	ldr	r3, [pc, #32]	; (2e14 <Clock_Ip_DisableClockMonitor+0x3c>)
    2df2:	5c9b      	ldrb	r3, [r3, r2]
    2df4:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2df6:	4a08      	ldr	r2, [pc, #32]	; (2e18 <Clock_Ip_DisableClockMonitor+0x40>)
    2df8:	9b03      	ldr	r3, [sp, #12]
    2dfa:	011b      	lsls	r3, r3, #4
    2dfc:	4413      	add	r3, r2
    2dfe:	3308      	adds	r3, #8
    2e00:	681b      	ldr	r3, [r3, #0]
    2e02:	9801      	ldr	r0, [sp, #4]
    2e04:	4798      	blx	r3
}
    2e06:	bf00      	nop
    2e08:	b005      	add	sp, #20
    2e0a:	f85d fb04 	ldr.w	pc, [sp], #4
    2e0e:	bf00      	nop
    2e10:	00017f14 	.word	0x00017f14
    2e14:	00017f04 	.word	0x00017f04
    2e18:	00018510 	.word	0x00018510

00002e1c <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2e1c:	b082      	sub	sp, #8
    2e1e:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2e20:	4a02      	ldr	r2, [pc, #8]	; (2e2c <Clock_Ip_InstallNotificationsCallback+0x10>)
    2e22:	9b01      	ldr	r3, [sp, #4]
    2e24:	6013      	str	r3, [r2, #0]
}
    2e26:	bf00      	nop
    2e28:	b002      	add	sp, #8
    2e2a:	4770      	bx	lr
    2e2c:	1fff8b14 	.word	0x1fff8b14

00002e30 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2e30:	b500      	push	{lr}
    2e32:	b085      	sub	sp, #20
    2e34:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2e36:	490c      	ldr	r1, [pc, #48]	; (2e68 <Clock_Ip_DisableModuleClock+0x38>)
    2e38:	9a01      	ldr	r2, [sp, #4]
    2e3a:	4613      	mov	r3, r2
    2e3c:	00db      	lsls	r3, r3, #3
    2e3e:	4413      	add	r3, r2
    2e40:	440b      	add	r3, r1
    2e42:	3301      	adds	r3, #1
    2e44:	781b      	ldrb	r3, [r3, #0]
    2e46:	461a      	mov	r2, r3
    2e48:	4b08      	ldr	r3, [pc, #32]	; (2e6c <Clock_Ip_DisableModuleClock+0x3c>)
    2e4a:	5c9b      	ldrb	r3, [r3, r2]
    2e4c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2e4e:	4a08      	ldr	r2, [pc, #32]	; (2e70 <Clock_Ip_DisableModuleClock+0x40>)
    2e50:	9b03      	ldr	r3, [sp, #12]
    2e52:	00db      	lsls	r3, r3, #3
    2e54:	4413      	add	r3, r2
    2e56:	685b      	ldr	r3, [r3, #4]
    2e58:	2101      	movs	r1, #1
    2e5a:	9801      	ldr	r0, [sp, #4]
    2e5c:	4798      	blx	r3
}
    2e5e:	bf00      	nop
    2e60:	b005      	add	sp, #20
    2e62:	f85d fb04 	ldr.w	pc, [sp], #4
    2e66:	bf00      	nop
    2e68:	00017f14 	.word	0x00017f14
    2e6c:	00017eb4 	.word	0x00017eb4
    2e70:	0001849c 	.word	0x0001849c

00002e74 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2e74:	b500      	push	{lr}
    2e76:	b085      	sub	sp, #20
    2e78:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2e7a:	490c      	ldr	r1, [pc, #48]	; (2eac <Clock_Ip_EnableModuleClock+0x38>)
    2e7c:	9a01      	ldr	r2, [sp, #4]
    2e7e:	4613      	mov	r3, r2
    2e80:	00db      	lsls	r3, r3, #3
    2e82:	4413      	add	r3, r2
    2e84:	440b      	add	r3, r1
    2e86:	3301      	adds	r3, #1
    2e88:	781b      	ldrb	r3, [r3, #0]
    2e8a:	461a      	mov	r2, r3
    2e8c:	4b08      	ldr	r3, [pc, #32]	; (2eb0 <Clock_Ip_EnableModuleClock+0x3c>)
    2e8e:	5c9b      	ldrb	r3, [r3, r2]
    2e90:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2e92:	4a08      	ldr	r2, [pc, #32]	; (2eb4 <Clock_Ip_EnableModuleClock+0x40>)
    2e94:	9b03      	ldr	r3, [sp, #12]
    2e96:	00db      	lsls	r3, r3, #3
    2e98:	4413      	add	r3, r2
    2e9a:	685b      	ldr	r3, [r3, #4]
    2e9c:	2100      	movs	r1, #0
    2e9e:	9801      	ldr	r0, [sp, #4]
    2ea0:	4798      	blx	r3
}
    2ea2:	bf00      	nop
    2ea4:	b005      	add	sp, #20
    2ea6:	f85d fb04 	ldr.w	pc, [sp], #4
    2eaa:	bf00      	nop
    2eac:	00017f14 	.word	0x00017f14
    2eb0:	00017eb4 	.word	0x00017eb4
    2eb4:	0001849c 	.word	0x0001849c

00002eb8 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2eb8:	b500      	push	{lr}
    2eba:	b083      	sub	sp, #12
    2ebc:	9001      	str	r0, [sp, #4]
    2ebe:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2ec0:	4b08      	ldr	r3, [pc, #32]	; (2ee4 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2ec2:	2200      	movs	r2, #0
    2ec4:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2ec6:	4b08      	ldr	r3, [pc, #32]	; (2ee8 <Clock_Ip_PowerModeChangeNotification+0x30>)
    2ec8:	681b      	ldr	r3, [r3, #0]
    2eca:	2102      	movs	r1, #2
    2ecc:	4618      	mov	r0, r3
    2ece:	f002 fd75 	bl	59bc <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2ed2:	9900      	ldr	r1, [sp, #0]
    2ed4:	9801      	ldr	r0, [sp, #4]
    2ed6:	f002 fc51 	bl	577c <Clock_Ip_ClockPowerModeChangeNotification>
}
    2eda:	bf00      	nop
    2edc:	b003      	add	sp, #12
    2ede:	f85d fb04 	ldr.w	pc, [sp], #4
    2ee2:	bf00      	nop
    2ee4:	1fff8b10 	.word	0x1fff8b10
    2ee8:	1fff8b38 	.word	0x1fff8b38

00002eec <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2eec:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2eee:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2ef2:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2ef4:	4b06      	ldr	r3, [pc, #24]	; (2f10 <Clock_Ip_SetWaitStates+0x24>)
    2ef6:	785b      	ldrb	r3, [r3, #1]
    2ef8:	2b00      	cmp	r3, #0
    2efa:	d005      	beq.n	2f08 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2efc:	9b01      	ldr	r3, [sp, #4]
    2efe:	3b01      	subs	r3, #1
    2f00:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2f02:	9b01      	ldr	r3, [sp, #4]
    2f04:	2b00      	cmp	r3, #0
    2f06:	d1f9      	bne.n	2efc <Clock_Ip_SetWaitStates+0x10>
    }
}
    2f08:	bf00      	nop
    2f0a:	b002      	add	sp, #8
    2f0c:	4770      	bx	lr
    2f0e:	bf00      	nop
    2f10:	1fff8b40 	.word	0x1fff8b40

00002f14 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2f14:	b500      	push	{lr}
    2f16:	b083      	sub	sp, #12
    2f18:	9001      	str	r0, [sp, #4]
    2f1a:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2f1c:	4b04      	ldr	r3, [pc, #16]	; (2f30 <Clock_Ip_ReportClockErrors+0x1c>)
    2f1e:	681b      	ldr	r3, [r3, #0]
    2f20:	9900      	ldr	r1, [sp, #0]
    2f22:	9801      	ldr	r0, [sp, #4]
    2f24:	4798      	blx	r3
}
    2f26:	bf00      	nop
    2f28:	b003      	add	sp, #12
    2f2a:	f85d fb04 	ldr.w	pc, [sp], #4
    2f2e:	bf00      	nop
    2f30:	1fff8b14 	.word	0x1fff8b14

00002f34 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2f34:	b500      	push	{lr}
    2f36:	b085      	sub	sp, #20
    2f38:	9003      	str	r0, [sp, #12]
    2f3a:	9102      	str	r1, [sp, #8]
    2f3c:	9201      	str	r2, [sp, #4]
    2f3e:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2f40:	2000      	movs	r0, #0
    2f42:	f7fe ffd1 	bl	1ee8 <OsIf_GetCounter>
    2f46:	4602      	mov	r2, r0
    2f48:	9b03      	ldr	r3, [sp, #12]
    2f4a:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2f4c:	9b02      	ldr	r3, [sp, #8]
    2f4e:	2200      	movs	r2, #0
    2f50:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2f52:	2100      	movs	r1, #0
    2f54:	9800      	ldr	r0, [sp, #0]
    2f56:	f7ff f813 	bl	1f80 <OsIf_MicrosToTicks>
    2f5a:	4602      	mov	r2, r0
    2f5c:	9b01      	ldr	r3, [sp, #4]
    2f5e:	601a      	str	r2, [r3, #0]
}
    2f60:	bf00      	nop
    2f62:	b005      	add	sp, #20
    2f64:	f85d fb04 	ldr.w	pc, [sp], #4

00002f68 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2f68:	b500      	push	{lr}
    2f6a:	b087      	sub	sp, #28
    2f6c:	9003      	str	r0, [sp, #12]
    2f6e:	9102      	str	r1, [sp, #8]
    2f70:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2f72:	2300      	movs	r3, #0
    2f74:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2f78:	2100      	movs	r1, #0
    2f7a:	9803      	ldr	r0, [sp, #12]
    2f7c:	f7fe ffcd 	bl	1f1a <OsIf_GetElapsed>
    2f80:	4602      	mov	r2, r0
    2f82:	9b02      	ldr	r3, [sp, #8]
    2f84:	681b      	ldr	r3, [r3, #0]
    2f86:	441a      	add	r2, r3
    2f88:	9b02      	ldr	r3, [sp, #8]
    2f8a:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2f8c:	9b02      	ldr	r3, [sp, #8]
    2f8e:	681b      	ldr	r3, [r3, #0]
    2f90:	9a01      	ldr	r2, [sp, #4]
    2f92:	429a      	cmp	r2, r3
    2f94:	d802      	bhi.n	2f9c <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2f96:	2301      	movs	r3, #1
    2f98:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2f9c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2fa0:	4618      	mov	r0, r3
    2fa2:	b007      	add	sp, #28
    2fa4:	f85d fb04 	ldr.w	pc, [sp], #4

00002fa8 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2fa8:	b082      	sub	sp, #8
    2faa:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2fac:	bf00      	nop
    2fae:	b002      	add	sp, #8
    2fb0:	4770      	bx	lr

00002fb2 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2fb2:	b500      	push	{lr}
    2fb4:	b083      	sub	sp, #12
    2fb6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2fb8:	9b01      	ldr	r3, [sp, #4]
    2fba:	2b00      	cmp	r3, #0
    2fbc:	d002      	beq.n	2fc4 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    2fbe:	9801      	ldr	r0, [sp, #4]
    2fc0:	f000 f8ad 	bl	311e <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2fc4:	bf00      	nop
    2fc6:	b003      	add	sp, #12
    2fc8:	f85d fb04 	ldr.w	pc, [sp], #4

00002fcc <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2fcc:	b500      	push	{lr}
    2fce:	b083      	sub	sp, #12
    2fd0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2fd2:	9b01      	ldr	r3, [sp, #4]
    2fd4:	2b00      	cmp	r3, #0
    2fd6:	d002      	beq.n	2fde <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2fd8:	9801      	ldr	r0, [sp, #4]
    2fda:	f000 f8cd 	bl	3178 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2fde:	bf00      	nop
    2fe0:	b003      	add	sp, #12
    2fe2:	f85d fb04 	ldr.w	pc, [sp], #4

00002fe6 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2fe6:	b500      	push	{lr}
    2fe8:	b083      	sub	sp, #12
    2fea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2fec:	9b01      	ldr	r3, [sp, #4]
    2fee:	2b00      	cmp	r3, #0
    2ff0:	d002      	beq.n	2ff8 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2ff2:	9801      	ldr	r0, [sp, #4]
    2ff4:	f000 f8ee 	bl	31d4 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ff8:	bf00      	nop
    2ffa:	b003      	add	sp, #12
    2ffc:	f85d fb04 	ldr.w	pc, [sp], #4

00003000 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    3000:	b500      	push	{lr}
    3002:	b083      	sub	sp, #12
    3004:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3006:	9b01      	ldr	r3, [sp, #4]
    3008:	2b00      	cmp	r3, #0
    300a:	d002      	beq.n	3012 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    300c:	9801      	ldr	r0, [sp, #4]
    300e:	f000 f8f9 	bl	3204 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3012:	bf00      	nop
    3014:	b003      	add	sp, #12
    3016:	f85d fb04 	ldr.w	pc, [sp], #4

0000301a <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    301a:	b500      	push	{lr}
    301c:	b083      	sub	sp, #12
    301e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3020:	9b01      	ldr	r3, [sp, #4]
    3022:	2b00      	cmp	r3, #0
    3024:	d002      	beq.n	302c <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    3026:	9801      	ldr	r0, [sp, #4]
    3028:	f000 f904 	bl	3234 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    302c:	bf00      	nop
    302e:	b003      	add	sp, #12
    3030:	f85d fb04 	ldr.w	pc, [sp], #4

00003034 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    3034:	b500      	push	{lr}
    3036:	b083      	sub	sp, #12
    3038:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    303a:	9b01      	ldr	r3, [sp, #4]
    303c:	2b00      	cmp	r3, #0
    303e:	d002      	beq.n	3046 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    3040:	9801      	ldr	r0, [sp, #4]
    3042:	f000 f90f 	bl	3264 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3046:	bf00      	nop
    3048:	b003      	add	sp, #12
    304a:	f85d fb04 	ldr.w	pc, [sp], #4

0000304e <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    304e:	b500      	push	{lr}
    3050:	b083      	sub	sp, #12
    3052:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3054:	9b01      	ldr	r3, [sp, #4]
    3056:	2b00      	cmp	r3, #0
    3058:	d002      	beq.n	3060 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    305a:	9801      	ldr	r0, [sp, #4]
    305c:	f000 f91a 	bl	3294 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3060:	bf00      	nop
    3062:	b003      	add	sp, #12
    3064:	f85d fb04 	ldr.w	pc, [sp], #4

00003068 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    3068:	b500      	push	{lr}
    306a:	b083      	sub	sp, #12
    306c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    306e:	9b01      	ldr	r3, [sp, #4]
    3070:	2b00      	cmp	r3, #0
    3072:	d002      	beq.n	307a <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    3074:	9801      	ldr	r0, [sp, #4]
    3076:	f000 f925 	bl	32c4 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    307a:	bf00      	nop
    307c:	b003      	add	sp, #12
    307e:	f85d fb04 	ldr.w	pc, [sp], #4

00003082 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    3082:	b500      	push	{lr}
    3084:	b083      	sub	sp, #12
    3086:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3088:	9b01      	ldr	r3, [sp, #4]
    308a:	2b00      	cmp	r3, #0
    308c:	d002      	beq.n	3094 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    308e:	9801      	ldr	r0, [sp, #4]
    3090:	f000 f930 	bl	32f4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3094:	bf00      	nop
    3096:	b003      	add	sp, #12
    3098:	f85d fb04 	ldr.w	pc, [sp], #4

0000309c <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    309c:	b500      	push	{lr}
    309e:	b083      	sub	sp, #12
    30a0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30a2:	9b01      	ldr	r3, [sp, #4]
    30a4:	2b00      	cmp	r3, #0
    30a6:	d002      	beq.n	30ae <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    30a8:	9801      	ldr	r0, [sp, #4]
    30aa:	f000 f93b 	bl	3324 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30ae:	bf00      	nop
    30b0:	b003      	add	sp, #12
    30b2:	f85d fb04 	ldr.w	pc, [sp], #4

000030b6 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    30b6:	b500      	push	{lr}
    30b8:	b083      	sub	sp, #12
    30ba:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30bc:	9b01      	ldr	r3, [sp, #4]
    30be:	2b00      	cmp	r3, #0
    30c0:	d002      	beq.n	30c8 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    30c2:	9801      	ldr	r0, [sp, #4]
    30c4:	f000 f946 	bl	3354 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30c8:	bf00      	nop
    30ca:	b003      	add	sp, #12
    30cc:	f85d fb04 	ldr.w	pc, [sp], #4

000030d0 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    30d0:	b500      	push	{lr}
    30d2:	b083      	sub	sp, #12
    30d4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30d6:	9b01      	ldr	r3, [sp, #4]
    30d8:	2b00      	cmp	r3, #0
    30da:	d002      	beq.n	30e2 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    30dc:	9801      	ldr	r0, [sp, #4]
    30de:	f000 f951 	bl	3384 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30e2:	bf00      	nop
    30e4:	b003      	add	sp, #12
    30e6:	f85d fb04 	ldr.w	pc, [sp], #4

000030ea <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    30ea:	b500      	push	{lr}
    30ec:	b083      	sub	sp, #12
    30ee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30f0:	9b01      	ldr	r3, [sp, #4]
    30f2:	2b00      	cmp	r3, #0
    30f4:	d002      	beq.n	30fc <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    30f6:	9801      	ldr	r0, [sp, #4]
    30f8:	f000 f95e 	bl	33b8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30fc:	bf00      	nop
    30fe:	b003      	add	sp, #12
    3100:	f85d fb04 	ldr.w	pc, [sp], #4

00003104 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    3104:	b500      	push	{lr}
    3106:	b083      	sub	sp, #12
    3108:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    310a:	9b01      	ldr	r3, [sp, #4]
    310c:	2b00      	cmp	r3, #0
    310e:	d002      	beq.n	3116 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    3110:	9801      	ldr	r0, [sp, #4]
    3112:	f000 f98b 	bl	342c <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3116:	bf00      	nop
    3118:	b003      	add	sp, #12
    311a:	f85d fb04 	ldr.w	pc, [sp], #4

0000311e <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    311e:	b086      	sub	sp, #24
    3120:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3122:	9b01      	ldr	r3, [sp, #4]
    3124:	681a      	ldr	r2, [r3, #0]
    3126:	4911      	ldr	r1, [pc, #68]	; (316c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    3128:	4613      	mov	r3, r2
    312a:	00db      	lsls	r3, r3, #3
    312c:	4413      	add	r3, r2
    312e:	440b      	add	r3, r1
    3130:	781b      	ldrb	r3, [r3, #0]
    3132:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3134:	9b01      	ldr	r3, [sp, #4]
    3136:	685b      	ldr	r3, [r3, #4]
    3138:	4a0d      	ldr	r2, [pc, #52]	; (3170 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    313a:	5cd3      	ldrb	r3, [r2, r3]
    313c:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    313e:	4a0d      	ldr	r2, [pc, #52]	; (3174 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3140:	9b05      	ldr	r3, [sp, #20]
    3142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3146:	681b      	ldr	r3, [r3, #0]
    3148:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    314a:	9b03      	ldr	r3, [sp, #12]
    314c:	f023 0307 	bic.w	r3, r3, #7
    3150:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    3152:	9a03      	ldr	r2, [sp, #12]
    3154:	9b04      	ldr	r3, [sp, #16]
    3156:	4313      	orrs	r3, r2
    3158:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    315a:	4a06      	ldr	r2, [pc, #24]	; (3174 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    315c:	9b05      	ldr	r3, [sp, #20]
    315e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3162:	9a03      	ldr	r2, [sp, #12]
    3164:	601a      	str	r2, [r3, #0]
}
    3166:	bf00      	nop
    3168:	b006      	add	sp, #24
    316a:	4770      	bx	lr
    316c:	00017f14 	.word	0x00017f14
    3170:	0001830c 	.word	0x0001830c
    3174:	00018350 	.word	0x00018350

00003178 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3178:	b086      	sub	sp, #24
    317a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    317c:	9b01      	ldr	r3, [sp, #4]
    317e:	681a      	ldr	r2, [r3, #0]
    3180:	4911      	ldr	r1, [pc, #68]	; (31c8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    3182:	4613      	mov	r3, r2
    3184:	00db      	lsls	r3, r3, #3
    3186:	4413      	add	r3, r2
    3188:	440b      	add	r3, r1
    318a:	781b      	ldrb	r3, [r3, #0]
    318c:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    318e:	9b01      	ldr	r3, [sp, #4]
    3190:	685b      	ldr	r3, [r3, #4]
    3192:	4a0e      	ldr	r2, [pc, #56]	; (31cc <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    3194:	5cd3      	ldrb	r3, [r2, r3]
    3196:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    3198:	4a0d      	ldr	r2, [pc, #52]	; (31d0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    319a:	9b05      	ldr	r3, [sp, #20]
    319c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    31a0:	681b      	ldr	r3, [r3, #0]
    31a2:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    31a4:	9b03      	ldr	r3, [sp, #12]
    31a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    31aa:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    31ac:	9b04      	ldr	r3, [sp, #16]
    31ae:	021b      	lsls	r3, r3, #8
    31b0:	9a03      	ldr	r2, [sp, #12]
    31b2:	4313      	orrs	r3, r2
    31b4:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    31b6:	4a06      	ldr	r2, [pc, #24]	; (31d0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    31b8:	9b05      	ldr	r3, [sp, #20]
    31ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    31be:	9a03      	ldr	r2, [sp, #12]
    31c0:	601a      	str	r2, [r3, #0]
}
    31c2:	bf00      	nop
    31c4:	b006      	add	sp, #24
    31c6:	4770      	bx	lr
    31c8:	00017f14 	.word	0x00017f14
    31cc:	0001830c 	.word	0x0001830c
    31d0:	00018350 	.word	0x00018350

000031d4 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    31d4:	b084      	sub	sp, #16
    31d6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    31d8:	4b09      	ldr	r3, [pc, #36]	; (3200 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    31da:	695b      	ldr	r3, [r3, #20]
    31dc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    31de:	9b03      	ldr	r3, [sp, #12]
    31e0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    31e4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    31e6:	9b01      	ldr	r3, [sp, #4]
    31e8:	685b      	ldr	r3, [r3, #4]
    31ea:	3b01      	subs	r3, #1
    31ec:	041b      	lsls	r3, r3, #16
    31ee:	9a03      	ldr	r2, [sp, #12]
    31f0:	4313      	orrs	r3, r2
    31f2:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    31f4:	4a02      	ldr	r2, [pc, #8]	; (3200 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    31f6:	9b03      	ldr	r3, [sp, #12]
    31f8:	6153      	str	r3, [r2, #20]
}
    31fa:	bf00      	nop
    31fc:	b004      	add	sp, #16
    31fe:	4770      	bx	lr
    3200:	40064000 	.word	0x40064000

00003204 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3204:	b084      	sub	sp, #16
    3206:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3208:	4b09      	ldr	r3, [pc, #36]	; (3230 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    320a:	695b      	ldr	r3, [r3, #20]
    320c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    320e:	9b03      	ldr	r3, [sp, #12]
    3210:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3214:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    3216:	9b01      	ldr	r3, [sp, #4]
    3218:	685b      	ldr	r3, [r3, #4]
    321a:	3b01      	subs	r3, #1
    321c:	011b      	lsls	r3, r3, #4
    321e:	9a03      	ldr	r2, [sp, #12]
    3220:	4313      	orrs	r3, r2
    3222:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3224:	4a02      	ldr	r2, [pc, #8]	; (3230 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    3226:	9b03      	ldr	r3, [sp, #12]
    3228:	6153      	str	r3, [r2, #20]
}
    322a:	bf00      	nop
    322c:	b004      	add	sp, #16
    322e:	4770      	bx	lr
    3230:	40064000 	.word	0x40064000

00003234 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3234:	b084      	sub	sp, #16
    3236:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3238:	4b09      	ldr	r3, [pc, #36]	; (3260 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    323a:	695b      	ldr	r3, [r3, #20]
    323c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    323e:	9b03      	ldr	r3, [sp, #12]
    3240:	f023 030f 	bic.w	r3, r3, #15
    3244:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    3246:	9b01      	ldr	r3, [sp, #4]
    3248:	685b      	ldr	r3, [r3, #4]
    324a:	3b01      	subs	r3, #1
    324c:	9a03      	ldr	r2, [sp, #12]
    324e:	4313      	orrs	r3, r2
    3250:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3252:	4a03      	ldr	r2, [pc, #12]	; (3260 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3254:	9b03      	ldr	r3, [sp, #12]
    3256:	6153      	str	r3, [r2, #20]
}
    3258:	bf00      	nop
    325a:	b004      	add	sp, #16
    325c:	4770      	bx	lr
    325e:	bf00      	nop
    3260:	40064000 	.word	0x40064000

00003264 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3264:	b084      	sub	sp, #16
    3266:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3268:	4b09      	ldr	r3, [pc, #36]	; (3290 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    326a:	699b      	ldr	r3, [r3, #24]
    326c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    326e:	9b03      	ldr	r3, [sp, #12]
    3270:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3274:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    3276:	9b01      	ldr	r3, [sp, #4]
    3278:	685b      	ldr	r3, [r3, #4]
    327a:	3b01      	subs	r3, #1
    327c:	041b      	lsls	r3, r3, #16
    327e:	9a03      	ldr	r2, [sp, #12]
    3280:	4313      	orrs	r3, r2
    3282:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3284:	4a02      	ldr	r2, [pc, #8]	; (3290 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    3286:	9b03      	ldr	r3, [sp, #12]
    3288:	6193      	str	r3, [r2, #24]
}
    328a:	bf00      	nop
    328c:	b004      	add	sp, #16
    328e:	4770      	bx	lr
    3290:	40064000 	.word	0x40064000

00003294 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3294:	b084      	sub	sp, #16
    3296:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3298:	4b09      	ldr	r3, [pc, #36]	; (32c0 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    329a:	699b      	ldr	r3, [r3, #24]
    329c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    329e:	9b03      	ldr	r3, [sp, #12]
    32a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    32a4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    32a6:	9b01      	ldr	r3, [sp, #4]
    32a8:	685b      	ldr	r3, [r3, #4]
    32aa:	3b01      	subs	r3, #1
    32ac:	011b      	lsls	r3, r3, #4
    32ae:	9a03      	ldr	r2, [sp, #12]
    32b0:	4313      	orrs	r3, r2
    32b2:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    32b4:	4a02      	ldr	r2, [pc, #8]	; (32c0 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    32b6:	9b03      	ldr	r3, [sp, #12]
    32b8:	6193      	str	r3, [r2, #24]
}
    32ba:	bf00      	nop
    32bc:	b004      	add	sp, #16
    32be:	4770      	bx	lr
    32c0:	40064000 	.word	0x40064000

000032c4 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    32c4:	b084      	sub	sp, #16
    32c6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    32c8:	4b09      	ldr	r3, [pc, #36]	; (32f0 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    32ca:	699b      	ldr	r3, [r3, #24]
    32cc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    32ce:	9b03      	ldr	r3, [sp, #12]
    32d0:	f023 030f 	bic.w	r3, r3, #15
    32d4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    32d6:	9b01      	ldr	r3, [sp, #4]
    32d8:	685b      	ldr	r3, [r3, #4]
    32da:	3b01      	subs	r3, #1
    32dc:	9a03      	ldr	r2, [sp, #12]
    32de:	4313      	orrs	r3, r2
    32e0:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    32e2:	4a03      	ldr	r2, [pc, #12]	; (32f0 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    32e4:	9b03      	ldr	r3, [sp, #12]
    32e6:	6193      	str	r3, [r2, #24]
}
    32e8:	bf00      	nop
    32ea:	b004      	add	sp, #16
    32ec:	4770      	bx	lr
    32ee:	bf00      	nop
    32f0:	40064000 	.word	0x40064000

000032f4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    32f4:	b084      	sub	sp, #16
    32f6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    32f8:	4b09      	ldr	r3, [pc, #36]	; (3320 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    32fa:	69db      	ldr	r3, [r3, #28]
    32fc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    32fe:	9b03      	ldr	r3, [sp, #12]
    3300:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3304:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    3306:	9b01      	ldr	r3, [sp, #4]
    3308:	685b      	ldr	r3, [r3, #4]
    330a:	3b01      	subs	r3, #1
    330c:	041b      	lsls	r3, r3, #16
    330e:	9a03      	ldr	r2, [sp, #12]
    3310:	4313      	orrs	r3, r2
    3312:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3314:	4a02      	ldr	r2, [pc, #8]	; (3320 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    3316:	9b03      	ldr	r3, [sp, #12]
    3318:	61d3      	str	r3, [r2, #28]
}
    331a:	bf00      	nop
    331c:	b004      	add	sp, #16
    331e:	4770      	bx	lr
    3320:	40064000 	.word	0x40064000

00003324 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3324:	b084      	sub	sp, #16
    3326:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3328:	4b09      	ldr	r3, [pc, #36]	; (3350 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    332a:	69db      	ldr	r3, [r3, #28]
    332c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    332e:	9b03      	ldr	r3, [sp, #12]
    3330:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3334:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    3336:	9b01      	ldr	r3, [sp, #4]
    3338:	685b      	ldr	r3, [r3, #4]
    333a:	3b01      	subs	r3, #1
    333c:	011b      	lsls	r3, r3, #4
    333e:	9a03      	ldr	r2, [sp, #12]
    3340:	4313      	orrs	r3, r2
    3342:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3344:	4a02      	ldr	r2, [pc, #8]	; (3350 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    3346:	9b03      	ldr	r3, [sp, #12]
    3348:	61d3      	str	r3, [r2, #28]
}
    334a:	bf00      	nop
    334c:	b004      	add	sp, #16
    334e:	4770      	bx	lr
    3350:	40064000 	.word	0x40064000

00003354 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3354:	b084      	sub	sp, #16
    3356:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3358:	4b09      	ldr	r3, [pc, #36]	; (3380 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    335a:	69db      	ldr	r3, [r3, #28]
    335c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    335e:	9b03      	ldr	r3, [sp, #12]
    3360:	f023 030f 	bic.w	r3, r3, #15
    3364:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    3366:	9b01      	ldr	r3, [sp, #4]
    3368:	685b      	ldr	r3, [r3, #4]
    336a:	3b01      	subs	r3, #1
    336c:	9a03      	ldr	r2, [sp, #12]
    336e:	4313      	orrs	r3, r2
    3370:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3372:	4a03      	ldr	r2, [pc, #12]	; (3380 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3374:	9b03      	ldr	r3, [sp, #12]
    3376:	61d3      	str	r3, [r2, #28]
}
    3378:	bf00      	nop
    337a:	b004      	add	sp, #16
    337c:	4770      	bx	lr
    337e:	bf00      	nop
    3380:	40064000 	.word	0x40064000

00003384 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    3384:	b084      	sub	sp, #16
    3386:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3388:	4b0a      	ldr	r3, [pc, #40]	; (33b4 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    338a:	685b      	ldr	r3, [r3, #4]
    338c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    338e:	9b03      	ldr	r3, [sp, #12]
    3390:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3394:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    3396:	9b01      	ldr	r3, [sp, #4]
    3398:	685b      	ldr	r3, [r3, #4]
    339a:	3b01      	subs	r3, #1
    339c:	021b      	lsls	r3, r3, #8
    339e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    33a2:	9a03      	ldr	r2, [sp, #12]
    33a4:	4313      	orrs	r3, r2
    33a6:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    33a8:	4a02      	ldr	r2, [pc, #8]	; (33b4 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    33aa:	9b03      	ldr	r3, [sp, #12]
    33ac:	6053      	str	r3, [r2, #4]
}
    33ae:	bf00      	nop
    33b0:	b004      	add	sp, #16
    33b2:	4770      	bx	lr
    33b4:	40048000 	.word	0x40048000

000033b8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    33b8:	b084      	sub	sp, #16
    33ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    33bc:	4919      	ldr	r1, [pc, #100]	; (3424 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    33be:	9b01      	ldr	r3, [sp, #4]
    33c0:	681a      	ldr	r2, [r3, #0]
    33c2:	4819      	ldr	r0, [pc, #100]	; (3428 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    33c4:	4613      	mov	r3, r2
    33c6:	00db      	lsls	r3, r3, #3
    33c8:	4413      	add	r3, r2
    33ca:	4403      	add	r3, r0
    33cc:	3305      	adds	r3, #5
    33ce:	781b      	ldrb	r3, [r3, #0]
    33d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    33d4:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    33d6:	9b03      	ldr	r3, [sp, #12]
    33d8:	f023 030f 	bic.w	r3, r3, #15
    33dc:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    33de:	9b01      	ldr	r3, [sp, #4]
    33e0:	685b      	ldr	r3, [r3, #4]
    33e2:	3b01      	subs	r3, #1
    33e4:	f003 0307 	and.w	r3, r3, #7
    33e8:	9a03      	ldr	r2, [sp, #12]
    33ea:	4313      	orrs	r3, r2
    33ec:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    33ee:	9b01      	ldr	r3, [sp, #4]
    33f0:	7a1b      	ldrb	r3, [r3, #8]
    33f2:	3b01      	subs	r3, #1
    33f4:	00db      	lsls	r3, r3, #3
    33f6:	f003 0308 	and.w	r3, r3, #8
    33fa:	9a03      	ldr	r2, [sp, #12]
    33fc:	4313      	orrs	r3, r2
    33fe:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    3400:	4908      	ldr	r1, [pc, #32]	; (3424 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3402:	9b01      	ldr	r3, [sp, #4]
    3404:	681a      	ldr	r2, [r3, #0]
    3406:	4808      	ldr	r0, [pc, #32]	; (3428 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3408:	4613      	mov	r3, r2
    340a:	00db      	lsls	r3, r3, #3
    340c:	4413      	add	r3, r2
    340e:	4403      	add	r3, r0
    3410:	3305      	adds	r3, #5
    3412:	781b      	ldrb	r3, [r3, #0]
    3414:	461a      	mov	r2, r3
    3416:	9b03      	ldr	r3, [sp, #12]
    3418:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    341c:	bf00      	nop
    341e:	b004      	add	sp, #16
    3420:	4770      	bx	lr
    3422:	bf00      	nop
    3424:	40065000 	.word	0x40065000
    3428:	00017f14 	.word	0x00017f14

0000342c <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    342c:	b084      	sub	sp, #16
    342e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3430:	4b10      	ldr	r3, [pc, #64]	; (3474 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3434:	4a0f      	ldr	r2, [pc, #60]	; (3474 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    343a:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    343c:	4b0d      	ldr	r3, [pc, #52]	; (3474 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    343e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3440:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    3442:	9b03      	ldr	r3, [sp, #12]
    3444:	f023 030f 	bic.w	r3, r3, #15
    3448:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    344a:	9b01      	ldr	r3, [sp, #4]
    344c:	685b      	ldr	r3, [r3, #4]
    344e:	3b01      	subs	r3, #1
    3450:	005b      	lsls	r3, r3, #1
    3452:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    3456:	9b01      	ldr	r3, [sp, #4]
    3458:	7a1b      	ldrb	r3, [r3, #8]
    345a:	3b01      	subs	r3, #1
    345c:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3460:	4313      	orrs	r3, r2
    3462:	9a03      	ldr	r2, [sp, #12]
    3464:	4313      	orrs	r3, r2
    3466:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    3468:	4a02      	ldr	r2, [pc, #8]	; (3474 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    346a:	9b03      	ldr	r3, [sp, #12]
    346c:	6693      	str	r3, [r2, #104]	; 0x68
}
    346e:	bf00      	nop
    3470:	b004      	add	sp, #16
    3472:	4770      	bx	lr
    3474:	40048000 	.word	0x40048000

00003478 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    3478:	b082      	sub	sp, #8
    347a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    347c:	bf00      	nop
    347e:	b002      	add	sp, #8
    3480:	4770      	bx	lr
	...

00003484 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    3484:	b082      	sub	sp, #8
    3486:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3488:	bf00      	nop
    348a:	b002      	add	sp, #8
    348c:	4770      	bx	lr

0000348e <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    348e:	b082      	sub	sp, #8
    3490:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    3492:	bf00      	nop
    3494:	b002      	add	sp, #8
    3496:	4770      	bx	lr

00003498 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3498:	b500      	push	{lr}
    349a:	b083      	sub	sp, #12
    349c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    349e:	9b01      	ldr	r3, [sp, #4]
    34a0:	2b00      	cmp	r3, #0
    34a2:	d002      	beq.n	34aa <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    34a4:	9801      	ldr	r0, [sp, #4]
    34a6:	f000 f86a 	bl	357e <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34aa:	bf00      	nop
    34ac:	b003      	add	sp, #12
    34ae:	f85d fb04 	ldr.w	pc, [sp], #4

000034b2 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    34b2:	b500      	push	{lr}
    34b4:	b083      	sub	sp, #12
    34b6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34b8:	9b01      	ldr	r3, [sp, #4]
    34ba:	2b00      	cmp	r3, #0
    34bc:	d002      	beq.n	34c4 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    34be:	9801      	ldr	r0, [sp, #4]
    34c0:	f000 f884 	bl	35cc <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    34c4:	bf00      	nop
    34c6:	b003      	add	sp, #12
    34c8:	f85d fb04 	ldr.w	pc, [sp], #4

000034cc <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    34cc:	b500      	push	{lr}
    34ce:	b089      	sub	sp, #36	; 0x24
    34d0:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    34d2:	2300      	movs	r3, #0
    34d4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    34d8:	9b01      	ldr	r3, [sp, #4]
    34da:	2b00      	cmp	r3, #0
    34dc:	d031      	beq.n	3542 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    34de:	4b1b      	ldr	r3, [pc, #108]	; (354c <Clock_Ip_CompleteSOSC+0x80>)
    34e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    34e4:	f003 0301 	and.w	r3, r3, #1
    34e8:	2b00      	cmp	r3, #0
    34ea:	d02a      	beq.n	3542 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    34ec:	aa03      	add	r2, sp, #12
    34ee:	a904      	add	r1, sp, #16
    34f0:	a805      	add	r0, sp, #20
    34f2:	f24c 3350 	movw	r3, #50000	; 0xc350
    34f6:	f7ff fd1d 	bl	2f34 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    34fa:	4b14      	ldr	r3, [pc, #80]	; (354c <Clock_Ip_CompleteSOSC+0x80>)
    34fc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3500:	0e1b      	lsrs	r3, r3, #24
    3502:	f003 0301 	and.w	r3, r3, #1
    3506:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3508:	9a03      	ldr	r2, [sp, #12]
    350a:	a904      	add	r1, sp, #16
    350c:	ab05      	add	r3, sp, #20
    350e:	4618      	mov	r0, r3
    3510:	f7ff fd2a 	bl	2f68 <Clock_Ip_TimeoutExpired>
    3514:	4603      	mov	r3, r0
    3516:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    351a:	9b06      	ldr	r3, [sp, #24]
    351c:	2b00      	cmp	r3, #0
    351e:	d106      	bne.n	352e <Clock_Ip_CompleteSOSC+0x62>
    3520:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3524:	f083 0301 	eor.w	r3, r3, #1
    3528:	b2db      	uxtb	r3, r3
    352a:	2b00      	cmp	r3, #0
    352c:	d1e5      	bne.n	34fa <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    352e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3532:	2b00      	cmp	r3, #0
    3534:	d005      	beq.n	3542 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3536:	9b01      	ldr	r3, [sp, #4]
    3538:	681b      	ldr	r3, [r3, #0]
    353a:	4619      	mov	r1, r3
    353c:	2001      	movs	r0, #1
    353e:	f7ff fce9 	bl	2f14 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    3542:	bf00      	nop
    3544:	b009      	add	sp, #36	; 0x24
    3546:	f85d fb04 	ldr.w	pc, [sp], #4
    354a:	bf00      	nop
    354c:	40064000 	.word	0x40064000

00003550 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    3550:	b500      	push	{lr}
    3552:	b083      	sub	sp, #12
    3554:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    3556:	9801      	ldr	r0, [sp, #4]
    3558:	f000 f8c0 	bl	36dc <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    355c:	bf00      	nop
    355e:	b003      	add	sp, #12
    3560:	f85d fb04 	ldr.w	pc, [sp], #4

00003564 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3564:	b500      	push	{lr}
    3566:	b083      	sub	sp, #12
    3568:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    356a:	9b01      	ldr	r3, [sp, #4]
    356c:	2b00      	cmp	r3, #0
    356e:	d002      	beq.n	3576 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    3570:	9801      	ldr	r0, [sp, #4]
    3572:	f000 f8c3 	bl	36fc <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3576:	bf00      	nop
    3578:	b003      	add	sp, #12
    357a:	f85d fb04 	ldr.w	pc, [sp], #4

0000357e <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    357e:	b082      	sub	sp, #8
    3580:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    3582:	4b11      	ldr	r3, [pc, #68]	; (35c8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3584:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3588:	4a0f      	ldr	r2, [pc, #60]	; (35c8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    358a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    358e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    3592:	4b0d      	ldr	r3, [pc, #52]	; (35c8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3594:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3598:	4a0b      	ldr	r2, [pc, #44]	; (35c8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    359a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    359e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    35a2:	4b09      	ldr	r3, [pc, #36]	; (35c8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    35a4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    35a8:	4a07      	ldr	r2, [pc, #28]	; (35c8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    35aa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    35ae:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    35b2:	4b05      	ldr	r3, [pc, #20]	; (35c8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    35b4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    35b8:	4a03      	ldr	r2, [pc, #12]	; (35c8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    35ba:	f023 0301 	bic.w	r3, r3, #1
    35be:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    35c2:	bf00      	nop
    35c4:	b002      	add	sp, #8
    35c6:	4770      	bx	lr
    35c8:	40064000 	.word	0x40064000

000035cc <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    35cc:	b082      	sub	sp, #8
    35ce:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    35d0:	9b01      	ldr	r3, [sp, #4]
    35d2:	891b      	ldrh	r3, [r3, #8]
    35d4:	2b01      	cmp	r3, #1
    35d6:	d174      	bne.n	36c2 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    35d8:	9b01      	ldr	r3, [sp, #4]
    35da:	7bdb      	ldrb	r3, [r3, #15]
    35dc:	2b00      	cmp	r3, #0
    35de:	d002      	beq.n	35e6 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    35e0:	2b01      	cmp	r3, #1
    35e2:	d009      	beq.n	35f8 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    35e4:	e011      	b.n	360a <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    35e6:	4b39      	ldr	r3, [pc, #228]	; (36cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    35ec:	4a37      	ldr	r2, [pc, #220]	; (36cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35ee:	f023 0308 	bic.w	r3, r3, #8
    35f2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    35f6:	e008      	b.n	360a <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    35f8:	4b34      	ldr	r3, [pc, #208]	; (36cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    35fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    35fe:	4a33      	ldr	r2, [pc, #204]	; (36cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3600:	f043 0308 	orr.w	r3, r3, #8
    3604:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    3608:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    360a:	4b30      	ldr	r3, [pc, #192]	; (36cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    360c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3610:	4a2e      	ldr	r2, [pc, #184]	; (36cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3612:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3616:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    361a:	9b01      	ldr	r3, [sp, #4]
    361c:	685b      	ldr	r3, [r3, #4]
    361e:	4a2c      	ldr	r2, [pc, #176]	; (36d0 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    3620:	4293      	cmp	r3, r2
    3622:	d90d      	bls.n	3640 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    3624:	9b01      	ldr	r3, [sp, #4]
    3626:	685b      	ldr	r3, [r3, #4]
    3628:	4a2a      	ldr	r2, [pc, #168]	; (36d4 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    362a:	4293      	cmp	r3, r2
    362c:	d208      	bcs.n	3640 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    362e:	4b27      	ldr	r3, [pc, #156]	; (36cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3630:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3634:	4a25      	ldr	r2, [pc, #148]	; (36cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3636:	f043 0320 	orr.w	r3, r3, #32
    363a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    363e:	e007      	b.n	3650 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    3640:	4b22      	ldr	r3, [pc, #136]	; (36cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3642:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3646:	4a21      	ldr	r2, [pc, #132]	; (36cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3648:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    364c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    3650:	9b01      	ldr	r3, [sp, #4]
    3652:	7b1b      	ldrb	r3, [r3, #12]
    3654:	2b00      	cmp	r3, #0
    3656:	d108      	bne.n	366a <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    3658:	4b1c      	ldr	r3, [pc, #112]	; (36cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    365a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    365e:	4a1b      	ldr	r2, [pc, #108]	; (36cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3660:	f043 0304 	orr.w	r3, r3, #4
    3664:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3668:	e007      	b.n	367a <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    366a:	4b18      	ldr	r3, [pc, #96]	; (36cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    366c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3670:	4a16      	ldr	r2, [pc, #88]	; (36cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3672:	f023 0304 	bic.w	r3, r3, #4
    3676:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    367a:	9b01      	ldr	r3, [sp, #4]
    367c:	7c1b      	ldrb	r3, [r3, #16]
    367e:	2b02      	cmp	r3, #2
    3680:	d011      	beq.n	36a6 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    3682:	2b02      	cmp	r3, #2
    3684:	dc14      	bgt.n	36b0 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    3686:	2b00      	cmp	r3, #0
    3688:	d002      	beq.n	3690 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    368a:	2b01      	cmp	r3, #1
    368c:	d005      	beq.n	369a <Clock_Ip_SetSOSC_TrustedCall+0xce>
    368e:	e00f      	b.n	36b0 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3690:	4b0e      	ldr	r3, [pc, #56]	; (36cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3692:	2201      	movs	r2, #1
    3694:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3698:	e014      	b.n	36c4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    369a:	4b0c      	ldr	r3, [pc, #48]	; (36cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    369c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    36a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    36a4:	e00e      	b.n	36c4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    36a6:	4b09      	ldr	r3, [pc, #36]	; (36cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    36a8:	4a0b      	ldr	r2, [pc, #44]	; (36d8 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    36aa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    36ae:	e009      	b.n	36c4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    36b0:	4b06      	ldr	r3, [pc, #24]	; (36cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    36b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    36b6:	4a05      	ldr	r2, [pc, #20]	; (36cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    36b8:	f043 0301 	orr.w	r3, r3, #1
    36bc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    36c0:	e000      	b.n	36c4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    36c2:	bf00      	nop
}
    36c4:	bf00      	nop
    36c6:	b002      	add	sp, #8
    36c8:	4770      	bx	lr
    36ca:	bf00      	nop
    36cc:	40064000 	.word	0x40064000
    36d0:	003d08ff 	.word	0x003d08ff
    36d4:	007a1200 	.word	0x007a1200
    36d8:	00030001 	.word	0x00030001

000036dc <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    36dc:	b082      	sub	sp, #8
    36de:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    36e0:	4b05      	ldr	r3, [pc, #20]	; (36f8 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    36e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    36e6:	4a04      	ldr	r2, [pc, #16]	; (36f8 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    36e8:	f023 0301 	bic.w	r3, r3, #1
    36ec:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    36f0:	bf00      	nop
    36f2:	b002      	add	sp, #8
    36f4:	4770      	bx	lr
    36f6:	bf00      	nop
    36f8:	40064000 	.word	0x40064000

000036fc <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    36fc:	b082      	sub	sp, #8
    36fe:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3700:	9b01      	ldr	r3, [sp, #4]
    3702:	891b      	ldrh	r3, [r3, #8]
    3704:	2b01      	cmp	r3, #1
    3706:	d107      	bne.n	3718 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3708:	4b05      	ldr	r3, [pc, #20]	; (3720 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    370a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    370e:	4a04      	ldr	r2, [pc, #16]	; (3720 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3710:	f043 0301 	orr.w	r3, r3, #1
    3714:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    3718:	bf00      	nop
    371a:	b002      	add	sp, #8
    371c:	4770      	bx	lr
    371e:	bf00      	nop
    3720:	40064000 	.word	0x40064000

00003724 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    3724:	b082      	sub	sp, #8
    3726:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3728:	bf00      	nop
    372a:	b002      	add	sp, #8
    372c:	4770      	bx	lr

0000372e <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    372e:	b082      	sub	sp, #8
    3730:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    3732:	2300      	movs	r3, #0
}
    3734:	4618      	mov	r0, r3
    3736:	b002      	add	sp, #8
    3738:	4770      	bx	lr

0000373a <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    373a:	b082      	sub	sp, #8
    373c:	9001      	str	r0, [sp, #4]
    373e:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    3740:	bf00      	nop
    3742:	b002      	add	sp, #8
    3744:	4770      	bx	lr
	...

00003748 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    3748:	b082      	sub	sp, #8
    374a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    374c:	bf00      	nop
    374e:	b002      	add	sp, #8
    3750:	4770      	bx	lr

00003752 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    3752:	b082      	sub	sp, #8
    3754:	9001      	str	r0, [sp, #4]
    3756:	460b      	mov	r3, r1
    3758:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    375c:	bf00      	nop
    375e:	b002      	add	sp, #8
    3760:	4770      	bx	lr

00003762 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    3762:	b500      	push	{lr}
    3764:	b083      	sub	sp, #12
    3766:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3768:	9b01      	ldr	r3, [sp, #4]
    376a:	2b00      	cmp	r3, #0
    376c:	d002      	beq.n	3774 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    376e:	9801      	ldr	r0, [sp, #4]
    3770:	f000 f8e7 	bl	3942 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3774:	bf00      	nop
    3776:	b003      	add	sp, #12
    3778:	f85d fb04 	ldr.w	pc, [sp], #4

0000377c <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    377c:	b500      	push	{lr}
    377e:	b085      	sub	sp, #20
    3780:	9001      	str	r0, [sp, #4]
    3782:	460b      	mov	r3, r1
    3784:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3788:	9b01      	ldr	r3, [sp, #4]
    378a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    378c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3790:	2b00      	cmp	r3, #0
    3792:	d003      	beq.n	379c <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    3794:	2300      	movs	r3, #0
    3796:	f8ad 300c 	strh.w	r3, [sp, #12]
    379a:	e002      	b.n	37a2 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    379c:	2301      	movs	r3, #1
    379e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    37a2:	ab02      	add	r3, sp, #8
    37a4:	4618      	mov	r0, r3
    37a6:	f7ff ffdc 	bl	3762 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    37aa:	bf00      	nop
    37ac:	b005      	add	sp, #20
    37ae:	f85d fb04 	ldr.w	pc, [sp], #4

000037b2 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    37b2:	b500      	push	{lr}
    37b4:	b083      	sub	sp, #12
    37b6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37b8:	9b01      	ldr	r3, [sp, #4]
    37ba:	2b00      	cmp	r3, #0
    37bc:	d002      	beq.n	37c4 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    37be:	9801      	ldr	r0, [sp, #4]
    37c0:	f000 f8d6 	bl	3970 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37c4:	bf00      	nop
    37c6:	b003      	add	sp, #12
    37c8:	f85d fb04 	ldr.w	pc, [sp], #4

000037cc <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    37cc:	b500      	push	{lr}
    37ce:	b085      	sub	sp, #20
    37d0:	9001      	str	r0, [sp, #4]
    37d2:	460b      	mov	r3, r1
    37d4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    37d8:	9b01      	ldr	r3, [sp, #4]
    37da:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    37dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    37e0:	2b00      	cmp	r3, #0
    37e2:	d003      	beq.n	37ec <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    37e4:	2300      	movs	r3, #0
    37e6:	f8ad 300c 	strh.w	r3, [sp, #12]
    37ea:	e002      	b.n	37f2 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    37ec:	2301      	movs	r3, #1
    37ee:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    37f2:	ab02      	add	r3, sp, #8
    37f4:	4618      	mov	r0, r3
    37f6:	f7ff ffdc 	bl	37b2 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    37fa:	bf00      	nop
    37fc:	b005      	add	sp, #20
    37fe:	f85d fb04 	ldr.w	pc, [sp], #4

00003802 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    3802:	b500      	push	{lr}
    3804:	b083      	sub	sp, #12
    3806:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3808:	9b01      	ldr	r3, [sp, #4]
    380a:	2b00      	cmp	r3, #0
    380c:	d002      	beq.n	3814 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    380e:	9801      	ldr	r0, [sp, #4]
    3810:	f000 f8c6 	bl	39a0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3814:	bf00      	nop
    3816:	b003      	add	sp, #12
    3818:	f85d fb04 	ldr.w	pc, [sp], #4

0000381c <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    381c:	b500      	push	{lr}
    381e:	b085      	sub	sp, #20
    3820:	9001      	str	r0, [sp, #4]
    3822:	460b      	mov	r3, r1
    3824:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3828:	9b01      	ldr	r3, [sp, #4]
    382a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    382c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3830:	2b00      	cmp	r3, #0
    3832:	d003      	beq.n	383c <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    3834:	2300      	movs	r3, #0
    3836:	f8ad 300c 	strh.w	r3, [sp, #12]
    383a:	e002      	b.n	3842 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    383c:	2301      	movs	r3, #1
    383e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    3842:	ab02      	add	r3, sp, #8
    3844:	4618      	mov	r0, r3
    3846:	f7ff ffdc 	bl	3802 <Clock_Ip_ClockSetSimClkoutEnable>
}
    384a:	bf00      	nop
    384c:	b005      	add	sp, #20
    384e:	f85d fb04 	ldr.w	pc, [sp], #4

00003852 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    3852:	b500      	push	{lr}
    3854:	b083      	sub	sp, #12
    3856:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3858:	9b01      	ldr	r3, [sp, #4]
    385a:	2b00      	cmp	r3, #0
    385c:	d002      	beq.n	3864 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    385e:	9801      	ldr	r0, [sp, #4]
    3860:	f000 f8b6 	bl	39d0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3864:	bf00      	nop
    3866:	b003      	add	sp, #12
    3868:	f85d fb04 	ldr.w	pc, [sp], #4

0000386c <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    386c:	b500      	push	{lr}
    386e:	b085      	sub	sp, #20
    3870:	9001      	str	r0, [sp, #4]
    3872:	460b      	mov	r3, r1
    3874:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3878:	9b01      	ldr	r3, [sp, #4]
    387a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    387c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3880:	2b00      	cmp	r3, #0
    3882:	d003      	beq.n	388c <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    3884:	2300      	movs	r3, #0
    3886:	f8ad 300c 	strh.w	r3, [sp, #12]
    388a:	e002      	b.n	3892 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    388c:	2301      	movs	r3, #1
    388e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    3892:	ab02      	add	r3, sp, #8
    3894:	4618      	mov	r0, r3
    3896:	f7ff ffdc 	bl	3852 <Clock_Ip_ClockSetPccCgcEnable>
}
    389a:	bf00      	nop
    389c:	b005      	add	sp, #20
    389e:	f85d fb04 	ldr.w	pc, [sp], #4

000038a2 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    38a2:	b500      	push	{lr}
    38a4:	b083      	sub	sp, #12
    38a6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38a8:	9b01      	ldr	r3, [sp, #4]
    38aa:	2b00      	cmp	r3, #0
    38ac:	d002      	beq.n	38b4 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    38ae:	9801      	ldr	r0, [sp, #4]
    38b0:	f000 f8bc 	bl	3a2c <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38b4:	bf00      	nop
    38b6:	b003      	add	sp, #12
    38b8:	f85d fb04 	ldr.w	pc, [sp], #4

000038bc <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    38bc:	b500      	push	{lr}
    38be:	b085      	sub	sp, #20
    38c0:	9001      	str	r0, [sp, #4]
    38c2:	460b      	mov	r3, r1
    38c4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    38c8:	9b01      	ldr	r3, [sp, #4]
    38ca:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    38cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    38d0:	2b00      	cmp	r3, #0
    38d2:	d003      	beq.n	38dc <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    38d4:	2300      	movs	r3, #0
    38d6:	f8ad 300c 	strh.w	r3, [sp, #12]
    38da:	e002      	b.n	38e2 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    38dc:	2301      	movs	r3, #1
    38de:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    38e2:	ab02      	add	r3, sp, #8
    38e4:	4618      	mov	r0, r3
    38e6:	f7ff ffdc 	bl	38a2 <Clock_Ip_ClockSetSimGate>
}
    38ea:	bf00      	nop
    38ec:	b005      	add	sp, #20
    38ee:	f85d fb04 	ldr.w	pc, [sp], #4

000038f2 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    38f2:	b500      	push	{lr}
    38f4:	b083      	sub	sp, #12
    38f6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38f8:	9b01      	ldr	r3, [sp, #4]
    38fa:	2b00      	cmp	r3, #0
    38fc:	d002      	beq.n	3904 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    38fe:	9801      	ldr	r0, [sp, #4]
    3900:	f000 f8c0 	bl	3a84 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3904:	bf00      	nop
    3906:	b003      	add	sp, #12
    3908:	f85d fb04 	ldr.w	pc, [sp], #4

0000390c <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    390c:	b500      	push	{lr}
    390e:	b085      	sub	sp, #20
    3910:	9001      	str	r0, [sp, #4]
    3912:	460b      	mov	r3, r1
    3914:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3918:	9b01      	ldr	r3, [sp, #4]
    391a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    391c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3920:	2b00      	cmp	r3, #0
    3922:	d003      	beq.n	392c <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    3924:	2300      	movs	r3, #0
    3926:	f8ad 300c 	strh.w	r3, [sp, #12]
    392a:	e002      	b.n	3932 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    392c:	2301      	movs	r3, #1
    392e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    3932:	ab02      	add	r3, sp, #8
    3934:	4618      	mov	r0, r3
    3936:	f7ff ffdc 	bl	38f2 <Clock_Ip_ClockSetSimTraceEnable>
}
    393a:	bf00      	nop
    393c:	b005      	add	sp, #20
    393e:	f85d fb04 	ldr.w	pc, [sp], #4

00003942 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3942:	b084      	sub	sp, #16
    3944:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3946:	4b09      	ldr	r3, [pc, #36]	; (396c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3948:	691b      	ldr	r3, [r3, #16]
    394a:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    394c:	9b03      	ldr	r3, [sp, #12]
    394e:	f023 0301 	bic.w	r3, r3, #1
    3952:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3954:	9b01      	ldr	r3, [sp, #4]
    3956:	889b      	ldrh	r3, [r3, #4]
    3958:	461a      	mov	r2, r3
    395a:	9b03      	ldr	r3, [sp, #12]
    395c:	4313      	orrs	r3, r2
    395e:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3960:	4a02      	ldr	r2, [pc, #8]	; (396c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3962:	9b03      	ldr	r3, [sp, #12]
    3964:	6113      	str	r3, [r2, #16]
}
    3966:	bf00      	nop
    3968:	b004      	add	sp, #16
    396a:	4770      	bx	lr
    396c:	40048000 	.word	0x40048000

00003970 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3970:	b084      	sub	sp, #16
    3972:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3974:	4b09      	ldr	r3, [pc, #36]	; (399c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3976:	691b      	ldr	r3, [r3, #16]
    3978:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    397a:	9b03      	ldr	r3, [sp, #12]
    397c:	f023 0302 	bic.w	r3, r3, #2
    3980:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3982:	9b01      	ldr	r3, [sp, #4]
    3984:	889b      	ldrh	r3, [r3, #4]
    3986:	005b      	lsls	r3, r3, #1
    3988:	9a03      	ldr	r2, [sp, #12]
    398a:	4313      	orrs	r3, r2
    398c:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    398e:	4a03      	ldr	r2, [pc, #12]	; (399c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3990:	9b03      	ldr	r3, [sp, #12]
    3992:	6113      	str	r3, [r2, #16]
}
    3994:	bf00      	nop
    3996:	b004      	add	sp, #16
    3998:	4770      	bx	lr
    399a:	bf00      	nop
    399c:	40048000 	.word	0x40048000

000039a0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    39a0:	b084      	sub	sp, #16
    39a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    39a4:	4b09      	ldr	r3, [pc, #36]	; (39cc <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    39a6:	685b      	ldr	r3, [r3, #4]
    39a8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    39aa:	9b03      	ldr	r3, [sp, #12]
    39ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    39b0:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    39b2:	9b01      	ldr	r3, [sp, #4]
    39b4:	889b      	ldrh	r3, [r3, #4]
    39b6:	02db      	lsls	r3, r3, #11
    39b8:	9a03      	ldr	r2, [sp, #12]
    39ba:	4313      	orrs	r3, r2
    39bc:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    39be:	4a03      	ldr	r2, [pc, #12]	; (39cc <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    39c0:	9b03      	ldr	r3, [sp, #12]
    39c2:	6053      	str	r3, [r2, #4]
}
    39c4:	bf00      	nop
    39c6:	b004      	add	sp, #16
    39c8:	4770      	bx	lr
    39ca:	bf00      	nop
    39cc:	40048000 	.word	0x40048000

000039d0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    39d0:	b084      	sub	sp, #16
    39d2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    39d4:	4913      	ldr	r1, [pc, #76]	; (3a24 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    39d6:	9b01      	ldr	r3, [sp, #4]
    39d8:	681a      	ldr	r2, [r3, #0]
    39da:	4813      	ldr	r0, [pc, #76]	; (3a28 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    39dc:	4613      	mov	r3, r2
    39de:	00db      	lsls	r3, r3, #3
    39e0:	4413      	add	r3, r2
    39e2:	4403      	add	r3, r0
    39e4:	3306      	adds	r3, #6
    39e6:	781b      	ldrb	r3, [r3, #0]
    39e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    39ec:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    39ee:	9b03      	ldr	r3, [sp, #12]
    39f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    39f4:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    39f6:	9b01      	ldr	r3, [sp, #4]
    39f8:	889b      	ldrh	r3, [r3, #4]
    39fa:	079b      	lsls	r3, r3, #30
    39fc:	9a03      	ldr	r2, [sp, #12]
    39fe:	4313      	orrs	r3, r2
    3a00:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    3a02:	4908      	ldr	r1, [pc, #32]	; (3a24 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    3a04:	9b01      	ldr	r3, [sp, #4]
    3a06:	681a      	ldr	r2, [r3, #0]
    3a08:	4807      	ldr	r0, [pc, #28]	; (3a28 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3a0a:	4613      	mov	r3, r2
    3a0c:	00db      	lsls	r3, r3, #3
    3a0e:	4413      	add	r3, r2
    3a10:	4403      	add	r3, r0
    3a12:	3306      	adds	r3, #6
    3a14:	781b      	ldrb	r3, [r3, #0]
    3a16:	461a      	mov	r2, r3
    3a18:	9b03      	ldr	r3, [sp, #12]
    3a1a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    3a1e:	bf00      	nop
    3a20:	b004      	add	sp, #16
    3a22:	4770      	bx	lr
    3a24:	40065000 	.word	0x40065000
    3a28:	00017f14 	.word	0x00017f14

00003a2c <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3a2c:	b086      	sub	sp, #24
    3a2e:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    3a30:	9b01      	ldr	r3, [sp, #4]
    3a32:	889b      	ldrh	r3, [r3, #4]
    3a34:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    3a36:	9b01      	ldr	r3, [sp, #4]
    3a38:	681a      	ldr	r2, [r3, #0]
    3a3a:	4910      	ldr	r1, [pc, #64]	; (3a7c <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    3a3c:	4613      	mov	r3, r2
    3a3e:	00db      	lsls	r3, r3, #3
    3a40:	4413      	add	r3, r2
    3a42:	440b      	add	r3, r1
    3a44:	3306      	adds	r3, #6
    3a46:	781b      	ldrb	r3, [r3, #0]
    3a48:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    3a4a:	4b0d      	ldr	r3, [pc, #52]	; (3a80 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3a4e:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    3a50:	2201      	movs	r2, #1
    3a52:	9b04      	ldr	r3, [sp, #16]
    3a54:	fa02 f303 	lsl.w	r3, r2, r3
    3a58:	43db      	mvns	r3, r3
    3a5a:	9a03      	ldr	r2, [sp, #12]
    3a5c:	4013      	ands	r3, r2
    3a5e:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    3a60:	9a05      	ldr	r2, [sp, #20]
    3a62:	9b04      	ldr	r3, [sp, #16]
    3a64:	fa02 f303 	lsl.w	r3, r2, r3
    3a68:	9a03      	ldr	r2, [sp, #12]
    3a6a:	4313      	orrs	r3, r2
    3a6c:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    3a6e:	4a04      	ldr	r2, [pc, #16]	; (3a80 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3a70:	9b03      	ldr	r3, [sp, #12]
    3a72:	6413      	str	r3, [r2, #64]	; 0x40
}
    3a74:	bf00      	nop
    3a76:	b006      	add	sp, #24
    3a78:	4770      	bx	lr
    3a7a:	bf00      	nop
    3a7c:	00017f14 	.word	0x00017f14
    3a80:	40048000 	.word	0x40048000

00003a84 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3a84:	b084      	sub	sp, #16
    3a86:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    3a88:	4b0a      	ldr	r3, [pc, #40]	; (3ab4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3a8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3a8c:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    3a8e:	9b01      	ldr	r3, [sp, #4]
    3a90:	889b      	ldrh	r3, [r3, #4]
    3a92:	2b01      	cmp	r3, #1
    3a94:	d104      	bne.n	3aa0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    3a96:	9b03      	ldr	r3, [sp, #12]
    3a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3a9c:	9303      	str	r3, [sp, #12]
    3a9e:	e003      	b.n	3aa8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3aa0:	9b03      	ldr	r3, [sp, #12]
    3aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3aa6:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    3aa8:	4a02      	ldr	r2, [pc, #8]	; (3ab4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3aaa:	9b03      	ldr	r3, [sp, #12]
    3aac:	6693      	str	r3, [r2, #104]	; 0x68
}
    3aae:	bf00      	nop
    3ab0:	b004      	add	sp, #16
    3ab2:	4770      	bx	lr
    3ab4:	40048000 	.word	0x40048000

00003ab8 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    3ab8:	b082      	sub	sp, #8
    3aba:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3abc:	bf00      	nop
    3abe:	b002      	add	sp, #8
    3ac0:	4770      	bx	lr

00003ac2 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    3ac2:	b082      	sub	sp, #8
    3ac4:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3ac6:	bf00      	nop
    3ac8:	b002      	add	sp, #8
    3aca:	4770      	bx	lr

00003acc <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3acc:	b500      	push	{lr}
    3ace:	b083      	sub	sp, #12
    3ad0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ad2:	9b01      	ldr	r3, [sp, #4]
    3ad4:	2b00      	cmp	r3, #0
    3ad6:	d002      	beq.n	3ade <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    3ad8:	9801      	ldr	r0, [sp, #4]
    3ada:	f000 f8d1 	bl	3c80 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ade:	bf00      	nop
    3ae0:	b003      	add	sp, #12
    3ae2:	f85d fb04 	ldr.w	pc, [sp], #4

00003ae6 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3ae6:	b500      	push	{lr}
    3ae8:	b083      	sub	sp, #12
    3aea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3aec:	9b01      	ldr	r3, [sp, #4]
    3aee:	2b00      	cmp	r3, #0
    3af0:	d002      	beq.n	3af8 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    3af2:	9801      	ldr	r0, [sp, #4]
    3af4:	f000 f950 	bl	3d98 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3af8:	bf00      	nop
    3afa:	b003      	add	sp, #12
    3afc:	f85d fb04 	ldr.w	pc, [sp], #4

00003b00 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    3b00:	b500      	push	{lr}
    3b02:	b083      	sub	sp, #12
    3b04:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    3b06:	9801      	ldr	r0, [sp, #4]
    3b08:	f000 f98e 	bl	3e28 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3b0c:	bf00      	nop
    3b0e:	b003      	add	sp, #12
    3b10:	f85d fb04 	ldr.w	pc, [sp], #4

00003b14 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3b14:	b500      	push	{lr}
    3b16:	b083      	sub	sp, #12
    3b18:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b1a:	9b01      	ldr	r3, [sp, #4]
    3b1c:	2b00      	cmp	r3, #0
    3b1e:	d002      	beq.n	3b26 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    3b20:	9801      	ldr	r0, [sp, #4]
    3b22:	f000 f999 	bl	3e58 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b26:	bf00      	nop
    3b28:	b003      	add	sp, #12
    3b2a:	f85d fb04 	ldr.w	pc, [sp], #4

00003b2e <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3b2e:	b500      	push	{lr}
    3b30:	b083      	sub	sp, #12
    3b32:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b34:	9b01      	ldr	r3, [sp, #4]
    3b36:	2b00      	cmp	r3, #0
    3b38:	d002      	beq.n	3b40 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    3b3a:	9801      	ldr	r0, [sp, #4]
    3b3c:	f000 f9b0 	bl	3ea0 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b40:	bf00      	nop
    3b42:	b003      	add	sp, #12
    3b44:	f85d fb04 	ldr.w	pc, [sp], #4

00003b48 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    3b48:	b500      	push	{lr}
    3b4a:	b083      	sub	sp, #12
    3b4c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    3b4e:	9801      	ldr	r0, [sp, #4]
    3b50:	f000 f9ba 	bl	3ec8 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3b54:	bf00      	nop
    3b56:	b003      	add	sp, #12
    3b58:	f85d fb04 	ldr.w	pc, [sp], #4

00003b5c <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3b5c:	b500      	push	{lr}
    3b5e:	b083      	sub	sp, #12
    3b60:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b62:	9b01      	ldr	r3, [sp, #4]
    3b64:	2b00      	cmp	r3, #0
    3b66:	d002      	beq.n	3b6e <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    3b68:	9801      	ldr	r0, [sp, #4]
    3b6a:	f000 f9bd 	bl	3ee8 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b6e:	bf00      	nop
    3b70:	b003      	add	sp, #12
    3b72:	f85d fb04 	ldr.w	pc, [sp], #4

00003b76 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3b76:	b500      	push	{lr}
    3b78:	b083      	sub	sp, #12
    3b7a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b7c:	9b01      	ldr	r3, [sp, #4]
    3b7e:	2b00      	cmp	r3, #0
    3b80:	d002      	beq.n	3b88 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    3b82:	9801      	ldr	r0, [sp, #4]
    3b84:	f000 f9d4 	bl	3f30 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b88:	bf00      	nop
    3b8a:	b003      	add	sp, #12
    3b8c:	f85d fb04 	ldr.w	pc, [sp], #4

00003b90 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    3b90:	b500      	push	{lr}
    3b92:	b083      	sub	sp, #12
    3b94:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    3b96:	9801      	ldr	r0, [sp, #4]
    3b98:	f000 f9de 	bl	3f58 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3b9c:	bf00      	nop
    3b9e:	b003      	add	sp, #12
    3ba0:	f85d fb04 	ldr.w	pc, [sp], #4

00003ba4 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    3ba4:	b500      	push	{lr}
    3ba6:	b089      	sub	sp, #36	; 0x24
    3ba8:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    3baa:	2300      	movs	r3, #0
    3bac:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    3bb0:	4b20      	ldr	r3, [pc, #128]	; (3c34 <SetInputSouceSytemClock+0x90>)
    3bb2:	695b      	ldr	r3, [r3, #20]
    3bb4:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3bb6:	9b06      	ldr	r3, [sp, #24]
    3bb8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3bbc:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    3bbe:	9b01      	ldr	r3, [sp, #4]
    3bc0:	061b      	lsls	r3, r3, #24
    3bc2:	9a06      	ldr	r2, [sp, #24]
    3bc4:	4313      	orrs	r3, r2
    3bc6:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    3bc8:	4a1a      	ldr	r2, [pc, #104]	; (3c34 <SetInputSouceSytemClock+0x90>)
    3bca:	9b06      	ldr	r3, [sp, #24]
    3bcc:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3bce:	aa02      	add	r2, sp, #8
    3bd0:	a903      	add	r1, sp, #12
    3bd2:	a804      	add	r0, sp, #16
    3bd4:	f24c 3350 	movw	r3, #50000	; 0xc350
    3bd8:	f7ff f9ac 	bl	2f34 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    3bdc:	4b15      	ldr	r3, [pc, #84]	; (3c34 <SetInputSouceSytemClock+0x90>)
    3bde:	691b      	ldr	r3, [r3, #16]
    3be0:	0e1b      	lsrs	r3, r3, #24
    3be2:	f003 030f 	and.w	r3, r3, #15
    3be6:	9a01      	ldr	r2, [sp, #4]
    3be8:	429a      	cmp	r2, r3
    3bea:	bf0c      	ite	eq
    3bec:	2301      	moveq	r3, #1
    3bee:	2300      	movne	r3, #0
    3bf0:	b2db      	uxtb	r3, r3
    3bf2:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3bf4:	9a02      	ldr	r2, [sp, #8]
    3bf6:	a903      	add	r1, sp, #12
    3bf8:	ab04      	add	r3, sp, #16
    3bfa:	4618      	mov	r0, r3
    3bfc:	f7ff f9b4 	bl	2f68 <Clock_Ip_TimeoutExpired>
    3c00:	4603      	mov	r3, r0
    3c02:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    3c06:	9b05      	ldr	r3, [sp, #20]
    3c08:	2b00      	cmp	r3, #0
    3c0a:	d106      	bne.n	3c1a <SetInputSouceSytemClock+0x76>
    3c0c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3c10:	f083 0301 	eor.w	r3, r3, #1
    3c14:	b2db      	uxtb	r3, r3
    3c16:	2b00      	cmp	r3, #0
    3c18:	d1e0      	bne.n	3bdc <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    3c1a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3c1e:	2b00      	cmp	r3, #0
    3c20:	d003      	beq.n	3c2a <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3c22:	2105      	movs	r1, #5
    3c24:	2001      	movs	r0, #1
    3c26:	f7ff f975 	bl	2f14 <Clock_Ip_ReportClockErrors>
    }
}
    3c2a:	bf00      	nop
    3c2c:	b009      	add	sp, #36	; 0x24
    3c2e:	f85d fb04 	ldr.w	pc, [sp], #4
    3c32:	bf00      	nop
    3c34:	40064000 	.word	0x40064000

00003c38 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3c38:	b500      	push	{lr}
    3c3a:	b083      	sub	sp, #12
    3c3c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c3e:	9b01      	ldr	r3, [sp, #4]
    3c40:	2b00      	cmp	r3, #0
    3c42:	d002      	beq.n	3c4a <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    3c44:	9801      	ldr	r0, [sp, #4]
    3c46:	f000 f997 	bl	3f78 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c4a:	bf00      	nop
    3c4c:	b003      	add	sp, #12
    3c4e:	f85d fb04 	ldr.w	pc, [sp], #4

00003c52 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3c52:	b500      	push	{lr}
    3c54:	b083      	sub	sp, #12
    3c56:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c58:	9b01      	ldr	r3, [sp, #4]
    3c5a:	2b00      	cmp	r3, #0
    3c5c:	d002      	beq.n	3c64 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    3c5e:	9801      	ldr	r0, [sp, #4]
    3c60:	f000 fa7e 	bl	4160 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c64:	bf00      	nop
    3c66:	b003      	add	sp, #12
    3c68:	f85d fb04 	ldr.w	pc, [sp], #4

00003c6c <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    3c6c:	b500      	push	{lr}
    3c6e:	b083      	sub	sp, #12
    3c70:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    3c72:	9801      	ldr	r0, [sp, #4]
    3c74:	f000 fab8 	bl	41e8 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3c78:	bf00      	nop
    3c7a:	b003      	add	sp, #12
    3c7c:	f85d fb04 	ldr.w	pc, [sp], #4

00003c80 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3c80:	b500      	push	{lr}
    3c82:	b08b      	sub	sp, #44	; 0x2c
    3c84:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3c86:	2300      	movs	r3, #0
    3c88:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    3c8c:	9b01      	ldr	r3, [sp, #4]
    3c8e:	2b00      	cmp	r3, #0
    3c90:	d10b      	bne.n	3caa <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    3c92:	2305      	movs	r3, #5
    3c94:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    3c96:	2301      	movs	r3, #1
    3c98:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    3c9c:	2301      	movs	r3, #1
    3c9e:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    3ca2:	2301      	movs	r3, #1
    3ca4:	f88d 3010 	strb.w	r3, [sp, #16]
    3ca8:	e00e      	b.n	3cc8 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    3caa:	9b01      	ldr	r3, [sp, #4]
    3cac:	681b      	ldr	r3, [r3, #0]
    3cae:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    3cb0:	9b01      	ldr	r3, [sp, #4]
    3cb2:	79db      	ldrb	r3, [r3, #7]
    3cb4:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    3cb8:	9b01      	ldr	r3, [sp, #4]
    3cba:	889b      	ldrh	r3, [r3, #4]
    3cbc:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    3cc0:	9b01      	ldr	r3, [sp, #4]
    3cc2:	7a1b      	ldrb	r3, [r3, #8]
    3cc4:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3cc8:	4b32      	ldr	r3, [pc, #200]	; (3d94 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3cca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3cce:	4a31      	ldr	r2, [pc, #196]	; (3d94 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3cd0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3cd4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    3cd8:	4b2e      	ldr	r3, [pc, #184]	; (3d94 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3cda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3cde:	4a2d      	ldr	r2, [pc, #180]	; (3d94 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3ce0:	f023 0301 	bic.w	r3, r3, #1
    3ce4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3ce8:	4b2a      	ldr	r3, [pc, #168]	; (3d94 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3cea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3cee:	4a29      	ldr	r2, [pc, #164]	; (3d94 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3cf0:	f023 0304 	bic.w	r3, r3, #4
    3cf4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    3cf8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    3cfc:	2b01      	cmp	r3, #1
    3cfe:	d144      	bne.n	3d8a <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    3d00:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3d04:	4a23      	ldr	r2, [pc, #140]	; (3d94 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3d06:	f003 0301 	and.w	r3, r3, #1
    3d0a:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3d0e:	4b21      	ldr	r3, [pc, #132]	; (3d94 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3d10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d14:	4a1f      	ldr	r2, [pc, #124]	; (3d94 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3d16:	f043 0301 	orr.w	r3, r3, #1
    3d1a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    3d1e:	4b1d      	ldr	r3, [pc, #116]	; (3d94 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3d20:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3d24:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3d28:	009b      	lsls	r3, r3, #2
    3d2a:	f003 0304 	and.w	r3, r3, #4
    3d2e:	4919      	ldr	r1, [pc, #100]	; (3d94 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3d30:	4313      	orrs	r3, r2
    3d32:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3d36:	aa05      	add	r2, sp, #20
    3d38:	a906      	add	r1, sp, #24
    3d3a:	a807      	add	r0, sp, #28
    3d3c:	f24c 3350 	movw	r3, #50000	; 0xc350
    3d40:	f7ff f8f8 	bl	2f34 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3d44:	4b13      	ldr	r3, [pc, #76]	; (3d94 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3d46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d4a:	0e1b      	lsrs	r3, r3, #24
    3d4c:	f003 0301 	and.w	r3, r3, #1
    3d50:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3d52:	9a05      	ldr	r2, [sp, #20]
    3d54:	a906      	add	r1, sp, #24
    3d56:	ab07      	add	r3, sp, #28
    3d58:	4618      	mov	r0, r3
    3d5a:	f7ff f905 	bl	2f68 <Clock_Ip_TimeoutExpired>
    3d5e:	4603      	mov	r3, r0
    3d60:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3d64:	9b08      	ldr	r3, [sp, #32]
    3d66:	2b00      	cmp	r3, #0
    3d68:	d106      	bne.n	3d78 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    3d6a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3d6e:	f083 0301 	eor.w	r3, r3, #1
    3d72:	b2db      	uxtb	r3, r3
    3d74:	2b00      	cmp	r3, #0
    3d76:	d1e5      	bne.n	3d44 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    3d78:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3d7c:	2b00      	cmp	r3, #0
    3d7e:	d004      	beq.n	3d8a <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3d80:	9b02      	ldr	r3, [sp, #8]
    3d82:	4619      	mov	r1, r3
    3d84:	2001      	movs	r0, #1
    3d86:	f7ff f8c5 	bl	2f14 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3d8a:	bf00      	nop
    3d8c:	b00b      	add	sp, #44	; 0x2c
    3d8e:	f85d fb04 	ldr.w	pc, [sp], #4
    3d92:	bf00      	nop
    3d94:	40064000 	.word	0x40064000

00003d98 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3d98:	b500      	push	{lr}
    3d9a:	b089      	sub	sp, #36	; 0x24
    3d9c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3d9e:	2300      	movs	r3, #0
    3da0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3da4:	4b1f      	ldr	r3, [pc, #124]	; (3e24 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3da6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3daa:	4a1e      	ldr	r2, [pc, #120]	; (3e24 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3dac:	f043 0301 	orr.w	r3, r3, #1
    3db0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    3db4:	4b1b      	ldr	r3, [pc, #108]	; (3e24 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3db6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3dba:	4a1a      	ldr	r2, [pc, #104]	; (3e24 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3dbc:	f043 0304 	orr.w	r3, r3, #4
    3dc0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3dc4:	aa03      	add	r2, sp, #12
    3dc6:	a904      	add	r1, sp, #16
    3dc8:	a805      	add	r0, sp, #20
    3dca:	f24c 3350 	movw	r3, #50000	; 0xc350
    3dce:	f7ff f8b1 	bl	2f34 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3dd2:	4b14      	ldr	r3, [pc, #80]	; (3e24 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3dd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3dd8:	0e1b      	lsrs	r3, r3, #24
    3dda:	f003 0301 	and.w	r3, r3, #1
    3dde:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3de0:	9a03      	ldr	r2, [sp, #12]
    3de2:	a904      	add	r1, sp, #16
    3de4:	ab05      	add	r3, sp, #20
    3de6:	4618      	mov	r0, r3
    3de8:	f7ff f8be 	bl	2f68 <Clock_Ip_TimeoutExpired>
    3dec:	4603      	mov	r3, r0
    3dee:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3df2:	9b06      	ldr	r3, [sp, #24]
    3df4:	2b00      	cmp	r3, #0
    3df6:	d106      	bne.n	3e06 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3df8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3dfc:	f083 0301 	eor.w	r3, r3, #1
    3e00:	b2db      	uxtb	r3, r3
    3e02:	2b00      	cmp	r3, #0
    3e04:	d1e5      	bne.n	3dd2 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3e06:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e0a:	2b00      	cmp	r3, #0
    3e0c:	d005      	beq.n	3e1a <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3e0e:	9b01      	ldr	r3, [sp, #4]
    3e10:	681b      	ldr	r3, [r3, #0]
    3e12:	4619      	mov	r1, r3
    3e14:	2001      	movs	r0, #1
    3e16:	f7ff f87d 	bl	2f14 <Clock_Ip_ReportClockErrors>
    }
}
    3e1a:	bf00      	nop
    3e1c:	b009      	add	sp, #36	; 0x24
    3e1e:	f85d fb04 	ldr.w	pc, [sp], #4
    3e22:	bf00      	nop
    3e24:	40064000 	.word	0x40064000

00003e28 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3e28:	b082      	sub	sp, #8
    3e2a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3e2c:	4b09      	ldr	r3, [pc, #36]	; (3e54 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3e2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e32:	4a08      	ldr	r2, [pc, #32]	; (3e54 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3e34:	f023 0301 	bic.w	r3, r3, #1
    3e38:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3e3c:	4b05      	ldr	r3, [pc, #20]	; (3e54 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3e3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e42:	4a04      	ldr	r2, [pc, #16]	; (3e54 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3e44:	f023 0304 	bic.w	r3, r3, #4
    3e48:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3e4c:	bf00      	nop
    3e4e:	b002      	add	sp, #8
    3e50:	4770      	bx	lr
    3e52:	bf00      	nop
    3e54:	40064000 	.word	0x40064000

00003e58 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3e58:	b082      	sub	sp, #8
    3e5a:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3e5c:	4b0f      	ldr	r3, [pc, #60]	; (3e9c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3e5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e62:	4a0e      	ldr	r2, [pc, #56]	; (3e9c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3e64:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3e68:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3e6c:	4b0b      	ldr	r3, [pc, #44]	; (3e9c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3e6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e72:	4a0a      	ldr	r2, [pc, #40]	; (3e9c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3e74:	f023 0304 	bic.w	r3, r3, #4
    3e78:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3e7c:	4b07      	ldr	r3, [pc, #28]	; (3e9c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3e7e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3e82:	9b01      	ldr	r3, [sp, #4]
    3e84:	7a1b      	ldrb	r3, [r3, #8]
    3e86:	009b      	lsls	r3, r3, #2
    3e88:	f003 0304 	and.w	r3, r3, #4
    3e8c:	4903      	ldr	r1, [pc, #12]	; (3e9c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3e8e:	4313      	orrs	r3, r2
    3e90:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3e94:	bf00      	nop
    3e96:	b002      	add	sp, #8
    3e98:	4770      	bx	lr
    3e9a:	bf00      	nop
    3e9c:	40064000 	.word	0x40064000

00003ea0 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3ea0:	b082      	sub	sp, #8
    3ea2:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3ea4:	9b01      	ldr	r3, [sp, #4]
    3ea6:	889b      	ldrh	r3, [r3, #4]
    3ea8:	2b01      	cmp	r3, #1
    3eaa:	d107      	bne.n	3ebc <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    3eac:	4b05      	ldr	r3, [pc, #20]	; (3ec4 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3eae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3eb2:	4a04      	ldr	r2, [pc, #16]	; (3ec4 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3eb4:	f043 0304 	orr.w	r3, r3, #4
    3eb8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3ebc:	bf00      	nop
    3ebe:	b002      	add	sp, #8
    3ec0:	4770      	bx	lr
    3ec2:	bf00      	nop
    3ec4:	40064000 	.word	0x40064000

00003ec8 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3ec8:	b082      	sub	sp, #8
    3eca:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3ecc:	4b05      	ldr	r3, [pc, #20]	; (3ee4 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3ece:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ed2:	4a04      	ldr	r2, [pc, #16]	; (3ee4 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3ed4:	f023 0304 	bic.w	r3, r3, #4
    3ed8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3edc:	bf00      	nop
    3ede:	b002      	add	sp, #8
    3ee0:	4770      	bx	lr
    3ee2:	bf00      	nop
    3ee4:	40064000 	.word	0x40064000

00003ee8 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3ee8:	b082      	sub	sp, #8
    3eea:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3eec:	4b0f      	ldr	r3, [pc, #60]	; (3f2c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3eee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ef2:	4a0e      	ldr	r2, [pc, #56]	; (3f2c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3ef4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3ef8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3efc:	4b0b      	ldr	r3, [pc, #44]	; (3f2c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3efe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3f02:	4a0a      	ldr	r2, [pc, #40]	; (3f2c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3f04:	f023 0302 	bic.w	r3, r3, #2
    3f08:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3f0c:	4b07      	ldr	r3, [pc, #28]	; (3f2c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3f0e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3f12:	9b01      	ldr	r3, [sp, #4]
    3f14:	7a5b      	ldrb	r3, [r3, #9]
    3f16:	005b      	lsls	r3, r3, #1
    3f18:	f003 0302 	and.w	r3, r3, #2
    3f1c:	4903      	ldr	r1, [pc, #12]	; (3f2c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3f1e:	4313      	orrs	r3, r2
    3f20:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3f24:	bf00      	nop
    3f26:	b002      	add	sp, #8
    3f28:	4770      	bx	lr
    3f2a:	bf00      	nop
    3f2c:	40064000 	.word	0x40064000

00003f30 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3f30:	b082      	sub	sp, #8
    3f32:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3f34:	9b01      	ldr	r3, [sp, #4]
    3f36:	889b      	ldrh	r3, [r3, #4]
    3f38:	2b01      	cmp	r3, #1
    3f3a:	d107      	bne.n	3f4c <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3f3c:	4b05      	ldr	r3, [pc, #20]	; (3f54 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3f3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3f42:	4a04      	ldr	r2, [pc, #16]	; (3f54 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3f44:	f043 0302 	orr.w	r3, r3, #2
    3f48:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3f4c:	bf00      	nop
    3f4e:	b002      	add	sp, #8
    3f50:	4770      	bx	lr
    3f52:	bf00      	nop
    3f54:	40064000 	.word	0x40064000

00003f58 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3f58:	b082      	sub	sp, #8
    3f5a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3f5c:	4b05      	ldr	r3, [pc, #20]	; (3f74 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3f5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3f62:	4a04      	ldr	r2, [pc, #16]	; (3f74 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3f64:	f023 0302 	bic.w	r3, r3, #2
    3f68:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3f6c:	bf00      	nop
    3f6e:	b002      	add	sp, #8
    3f70:	4770      	bx	lr
    3f72:	bf00      	nop
    3f74:	40064000 	.word	0x40064000

00003f78 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3f78:	b500      	push	{lr}
    3f7a:	b08b      	sub	sp, #44	; 0x2c
    3f7c:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3f7e:	9b01      	ldr	r3, [sp, #4]
    3f80:	681a      	ldr	r2, [r3, #0]
    3f82:	4975      	ldr	r1, [pc, #468]	; (4158 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3f84:	4613      	mov	r3, r2
    3f86:	00db      	lsls	r3, r3, #3
    3f88:	4413      	add	r3, r2
    3f8a:	440b      	add	r3, r1
    3f8c:	781b      	ldrb	r3, [r3, #0]
    3f8e:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3f90:	2300      	movs	r3, #0
    3f92:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3f96:	2300      	movs	r3, #0
    3f98:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3f9c:	4b6f      	ldr	r3, [pc, #444]	; (415c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3fa2:	4a6e      	ldr	r2, [pc, #440]	; (415c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3fa4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3fa8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3fac:	4b6b      	ldr	r3, [pc, #428]	; (415c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3fae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3fb6:	2b00      	cmp	r3, #0
    3fb8:	d07d      	beq.n	40b6 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3fba:	9b01      	ldr	r3, [sp, #4]
    3fbc:	79db      	ldrb	r3, [r3, #7]
    3fbe:	461a      	mov	r2, r3
    3fc0:	4b66      	ldr	r3, [pc, #408]	; (415c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3fc2:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3fc6:	f003 0303 	and.w	r3, r3, #3
    3fca:	429a      	cmp	r2, r3
    3fcc:	d10b      	bne.n	3fe6 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    3fce:	9b01      	ldr	r3, [sp, #4]
    3fd0:	799b      	ldrb	r3, [r3, #6]
    3fd2:	461a      	mov	r2, r3
    3fd4:	4b61      	ldr	r3, [pc, #388]	; (415c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3fd6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3fda:	08db      	lsrs	r3, r3, #3
    3fdc:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3fe0:	429a      	cmp	r2, r3
    3fe2:	f000 80b4 	beq.w	414e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3fe6:	4b5d      	ldr	r3, [pc, #372]	; (415c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3fe8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3fec:	f003 0301 	and.w	r3, r3, #1
    3ff0:	2b00      	cmp	r3, #0
    3ff2:	d105      	bne.n	4000 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3ff4:	2301      	movs	r3, #1
    3ff6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3ffa:	2000      	movs	r0, #0
    3ffc:	f7ff fd66 	bl	3acc <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    4000:	2002      	movs	r0, #2
    4002:	f7ff fdcf 	bl	3ba4 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    4006:	4b55      	ldr	r3, [pc, #340]	; (415c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4008:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    400c:	4a53      	ldr	r2, [pc, #332]	; (415c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    400e:	f023 0301 	bic.w	r3, r3, #1
    4012:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    4016:	9b01      	ldr	r3, [sp, #4]
    4018:	889b      	ldrh	r3, [r3, #4]
    401a:	2b01      	cmp	r3, #1
    401c:	f040 8097 	bne.w	414e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    4020:	9b01      	ldr	r3, [sp, #4]
    4022:	79db      	ldrb	r3, [r3, #7]
    4024:	4a4d      	ldr	r2, [pc, #308]	; (415c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4026:	f003 0303 	and.w	r3, r3, #3
    402a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    402e:	4b4b      	ldr	r3, [pc, #300]	; (415c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4030:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    4034:	9b01      	ldr	r3, [sp, #4]
    4036:	799b      	ldrb	r3, [r3, #6]
    4038:	00db      	lsls	r3, r3, #3
    403a:	f003 0308 	and.w	r3, r3, #8
    403e:	4313      	orrs	r3, r2
    4040:	4a46      	ldr	r2, [pc, #280]	; (415c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4042:	f043 0301 	orr.w	r3, r3, #1
    4046:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    404a:	aa03      	add	r2, sp, #12
    404c:	a904      	add	r1, sp, #16
    404e:	a805      	add	r0, sp, #20
    4050:	f24c 3350 	movw	r3, #50000	; 0xc350
    4054:	f7fe ff6e 	bl	2f34 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4058:	4b40      	ldr	r3, [pc, #256]	; (415c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    405a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    405e:	0e1b      	lsrs	r3, r3, #24
    4060:	f003 0301 	and.w	r3, r3, #1
    4064:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4066:	9a03      	ldr	r2, [sp, #12]
    4068:	a904      	add	r1, sp, #16
    406a:	ab05      	add	r3, sp, #20
    406c:	4618      	mov	r0, r3
    406e:	f7fe ff7b 	bl	2f68 <Clock_Ip_TimeoutExpired>
    4072:	4603      	mov	r3, r0
    4074:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4078:	9b06      	ldr	r3, [sp, #24]
    407a:	2b00      	cmp	r3, #0
    407c:	d106      	bne.n	408c <Clock_Ip_SetFirc_TrustedCall+0x114>
    407e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4082:	f083 0301 	eor.w	r3, r3, #1
    4086:	b2db      	uxtb	r3, r3
    4088:	2b00      	cmp	r3, #0
    408a:	d1e5      	bne.n	4058 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    408c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4090:	2b00      	cmp	r3, #0
    4092:	d005      	beq.n	40a0 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4094:	9b01      	ldr	r3, [sp, #4]
    4096:	681b      	ldr	r3, [r3, #0]
    4098:	4619      	mov	r1, r3
    409a:	2001      	movs	r0, #1
    409c:	f7fe ff3a 	bl	2f14 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    40a0:	2003      	movs	r0, #3
    40a2:	f7ff fd7f 	bl	3ba4 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    40a6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    40aa:	2b00      	cmp	r3, #0
    40ac:	d04f      	beq.n	414e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    40ae:	2002      	movs	r0, #2
    40b0:	f7ff fd26 	bl	3b00 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    40b4:	e04b      	b.n	414e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    40b6:	4b29      	ldr	r3, [pc, #164]	; (415c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    40b8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    40bc:	4a27      	ldr	r2, [pc, #156]	; (415c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    40be:	f023 0301 	bic.w	r3, r3, #1
    40c2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    40c6:	9b01      	ldr	r3, [sp, #4]
    40c8:	889b      	ldrh	r3, [r3, #4]
    40ca:	2b01      	cmp	r3, #1
    40cc:	d13f      	bne.n	414e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    40ce:	9b01      	ldr	r3, [sp, #4]
    40d0:	79db      	ldrb	r3, [r3, #7]
    40d2:	4a22      	ldr	r2, [pc, #136]	; (415c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    40d4:	f003 0303 	and.w	r3, r3, #3
    40d8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    40dc:	4b1f      	ldr	r3, [pc, #124]	; (415c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    40de:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    40e2:	9b01      	ldr	r3, [sp, #4]
    40e4:	799b      	ldrb	r3, [r3, #6]
    40e6:	00db      	lsls	r3, r3, #3
    40e8:	f003 0308 	and.w	r3, r3, #8
    40ec:	4313      	orrs	r3, r2
    40ee:	4a1b      	ldr	r2, [pc, #108]	; (415c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    40f0:	f043 0301 	orr.w	r3, r3, #1
    40f4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    40f8:	aa03      	add	r2, sp, #12
    40fa:	a904      	add	r1, sp, #16
    40fc:	a805      	add	r0, sp, #20
    40fe:	f24c 3350 	movw	r3, #50000	; 0xc350
    4102:	f7fe ff17 	bl	2f34 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4106:	4b15      	ldr	r3, [pc, #84]	; (415c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4108:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    410c:	0e1b      	lsrs	r3, r3, #24
    410e:	f003 0301 	and.w	r3, r3, #1
    4112:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4114:	9a03      	ldr	r2, [sp, #12]
    4116:	a904      	add	r1, sp, #16
    4118:	ab05      	add	r3, sp, #20
    411a:	4618      	mov	r0, r3
    411c:	f7fe ff24 	bl	2f68 <Clock_Ip_TimeoutExpired>
    4120:	4603      	mov	r3, r0
    4122:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4126:	9b06      	ldr	r3, [sp, #24]
    4128:	2b00      	cmp	r3, #0
    412a:	d106      	bne.n	413a <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    412c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4130:	f083 0301 	eor.w	r3, r3, #1
    4134:	b2db      	uxtb	r3, r3
    4136:	2b00      	cmp	r3, #0
    4138:	d1e5      	bne.n	4106 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    413a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    413e:	2b00      	cmp	r3, #0
    4140:	d005      	beq.n	414e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4142:	9b01      	ldr	r3, [sp, #4]
    4144:	681b      	ldr	r3, [r3, #0]
    4146:	4619      	mov	r1, r3
    4148:	2001      	movs	r0, #1
    414a:	f7fe fee3 	bl	2f14 <Clock_Ip_ReportClockErrors>
}
    414e:	bf00      	nop
    4150:	b00b      	add	sp, #44	; 0x2c
    4152:	f85d fb04 	ldr.w	pc, [sp], #4
    4156:	bf00      	nop
    4158:	00017f14 	.word	0x00017f14
    415c:	40064000 	.word	0x40064000

00004160 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4160:	b500      	push	{lr}
    4162:	b089      	sub	sp, #36	; 0x24
    4164:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4166:	2300      	movs	r3, #0
    4168:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    416c:	9b01      	ldr	r3, [sp, #4]
    416e:	889b      	ldrh	r3, [r3, #4]
    4170:	2b01      	cmp	r3, #1
    4172:	d132      	bne.n	41da <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    4174:	4b1b      	ldr	r3, [pc, #108]	; (41e4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4176:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    417a:	4a1a      	ldr	r2, [pc, #104]	; (41e4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    417c:	f043 0301 	orr.w	r3, r3, #1
    4180:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4184:	aa03      	add	r2, sp, #12
    4186:	a904      	add	r1, sp, #16
    4188:	a805      	add	r0, sp, #20
    418a:	f24c 3350 	movw	r3, #50000	; 0xc350
    418e:	f7fe fed1 	bl	2f34 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4192:	4b14      	ldr	r3, [pc, #80]	; (41e4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4194:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4198:	0e1b      	lsrs	r3, r3, #24
    419a:	f003 0301 	and.w	r3, r3, #1
    419e:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    41a0:	9a03      	ldr	r2, [sp, #12]
    41a2:	a904      	add	r1, sp, #16
    41a4:	ab05      	add	r3, sp, #20
    41a6:	4618      	mov	r0, r3
    41a8:	f7fe fede 	bl	2f68 <Clock_Ip_TimeoutExpired>
    41ac:	4603      	mov	r3, r0
    41ae:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    41b2:	9b06      	ldr	r3, [sp, #24]
    41b4:	2b00      	cmp	r3, #0
    41b6:	d106      	bne.n	41c6 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    41b8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    41bc:	f083 0301 	eor.w	r3, r3, #1
    41c0:	b2db      	uxtb	r3, r3
    41c2:	2b00      	cmp	r3, #0
    41c4:	d1e5      	bne.n	4192 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    41c6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    41ca:	2b00      	cmp	r3, #0
    41cc:	d005      	beq.n	41da <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    41ce:	9b01      	ldr	r3, [sp, #4]
    41d0:	681b      	ldr	r3, [r3, #0]
    41d2:	4619      	mov	r1, r3
    41d4:	2001      	movs	r0, #1
    41d6:	f7fe fe9d 	bl	2f14 <Clock_Ip_ReportClockErrors>
        }
    }
}
    41da:	bf00      	nop
    41dc:	b009      	add	sp, #36	; 0x24
    41de:	f85d fb04 	ldr.w	pc, [sp], #4
    41e2:	bf00      	nop
    41e4:	40064000 	.word	0x40064000

000041e8 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    41e8:	b082      	sub	sp, #8
    41ea:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    41ec:	4b05      	ldr	r3, [pc, #20]	; (4204 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    41ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    41f2:	4a04      	ldr	r2, [pc, #16]	; (4204 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    41f4:	f023 0301 	bic.w	r3, r3, #1
    41f8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    41fc:	bf00      	nop
    41fe:	b002      	add	sp, #8
    4200:	4770      	bx	lr
    4202:	bf00      	nop
    4204:	40064000 	.word	0x40064000

00004208 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    4208:	b082      	sub	sp, #8
    420a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    420c:	bf00      	nop
    420e:	b002      	add	sp, #8
    4210:	4770      	bx	lr

00004212 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    4212:	b082      	sub	sp, #8
    4214:	9001      	str	r0, [sp, #4]
    4216:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4218:	bf00      	nop
    421a:	b002      	add	sp, #8
    421c:	4770      	bx	lr

0000421e <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    421e:	b082      	sub	sp, #8
    4220:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    4222:	bf00      	nop
    4224:	b002      	add	sp, #8
    4226:	4770      	bx	lr

00004228 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    4228:	b082      	sub	sp, #8
    422a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    422c:	bf00      	nop
    422e:	b002      	add	sp, #8
    4230:	4770      	bx	lr

00004232 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    4232:	b082      	sub	sp, #8
    4234:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    4236:	2302      	movs	r3, #2
}
    4238:	4618      	mov	r0, r3
    423a:	b002      	add	sp, #8
    423c:	4770      	bx	lr

0000423e <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    423e:	b082      	sub	sp, #8
    4240:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    4242:	bf00      	nop
    4244:	b002      	add	sp, #8
    4246:	4770      	bx	lr

00004248 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    4248:	b500      	push	{lr}
    424a:	b083      	sub	sp, #12
    424c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    424e:	9b01      	ldr	r3, [sp, #4]
    4250:	2b00      	cmp	r3, #0
    4252:	d002      	beq.n	425a <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    4254:	9801      	ldr	r0, [sp, #4]
    4256:	f000 f870 	bl	433a <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    425a:	bf00      	nop
    425c:	b003      	add	sp, #12
    425e:	f85d fb04 	ldr.w	pc, [sp], #4

00004262 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    4262:	b500      	push	{lr}
    4264:	b083      	sub	sp, #12
    4266:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4268:	9b01      	ldr	r3, [sp, #4]
    426a:	2b00      	cmp	r3, #0
    426c:	d002      	beq.n	4274 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    426e:	9801      	ldr	r0, [sp, #4]
    4270:	f000 f89a 	bl	43a8 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4274:	bf00      	nop
    4276:	b003      	add	sp, #12
    4278:	f85d fb04 	ldr.w	pc, [sp], #4

0000427c <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    427c:	b500      	push	{lr}
    427e:	b089      	sub	sp, #36	; 0x24
    4280:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    4282:	2301      	movs	r3, #1
    4284:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    4286:	2300      	movs	r3, #0
    4288:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    428c:	4b1e      	ldr	r3, [pc, #120]	; (4308 <Clock_Ip_CompleteSpll+0x8c>)
    428e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4292:	f003 0301 	and.w	r3, r3, #1
    4296:	2b00      	cmp	r3, #0
    4298:	d02f      	beq.n	42fa <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    429a:	aa02      	add	r2, sp, #8
    429c:	a903      	add	r1, sp, #12
    429e:	a804      	add	r0, sp, #16
    42a0:	f24c 3350 	movw	r3, #50000	; 0xc350
    42a4:	f7fe fe46 	bl	2f34 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    42a8:	4b17      	ldr	r3, [pc, #92]	; (4308 <Clock_Ip_CompleteSpll+0x8c>)
    42aa:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    42ae:	0e1b      	lsrs	r3, r3, #24
    42b0:	f003 0301 	and.w	r3, r3, #1
    42b4:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    42b6:	9a02      	ldr	r2, [sp, #8]
    42b8:	a903      	add	r1, sp, #12
    42ba:	ab04      	add	r3, sp, #16
    42bc:	4618      	mov	r0, r3
    42be:	f7fe fe53 	bl	2f68 <Clock_Ip_TimeoutExpired>
    42c2:	4603      	mov	r3, r0
    42c4:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    42c8:	9b05      	ldr	r3, [sp, #20]
    42ca:	2b00      	cmp	r3, #0
    42cc:	d106      	bne.n	42dc <Clock_Ip_CompleteSpll+0x60>
    42ce:	f89d 301b 	ldrb.w	r3, [sp, #27]
    42d2:	f083 0301 	eor.w	r3, r3, #1
    42d6:	b2db      	uxtb	r3, r3
    42d8:	2b00      	cmp	r3, #0
    42da:	d1e5      	bne.n	42a8 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    42dc:	f89d 301b 	ldrb.w	r3, [sp, #27]
    42e0:	f083 0301 	eor.w	r3, r3, #1
    42e4:	b2db      	uxtb	r3, r3
    42e6:	2b00      	cmp	r3, #0
    42e8:	d002      	beq.n	42f0 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    42ea:	2302      	movs	r3, #2
    42ec:	9307      	str	r3, [sp, #28]
    42ee:	e006      	b.n	42fe <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    42f0:	9901      	ldr	r1, [sp, #4]
    42f2:	2001      	movs	r0, #1
    42f4:	f7fe fe0e 	bl	2f14 <Clock_Ip_ReportClockErrors>
    42f8:	e001      	b.n	42fe <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    42fa:	2300      	movs	r3, #0
    42fc:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    42fe:	9b07      	ldr	r3, [sp, #28]
}
    4300:	4618      	mov	r0, r3
    4302:	b009      	add	sp, #36	; 0x24
    4304:	f85d fb04 	ldr.w	pc, [sp], #4
    4308:	40064000 	.word	0x40064000

0000430c <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    430c:	b500      	push	{lr}
    430e:	b083      	sub	sp, #12
    4310:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    4312:	9801      	ldr	r0, [sp, #4]
    4314:	f000 f886 	bl	4424 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4318:	bf00      	nop
    431a:	b003      	add	sp, #12
    431c:	f85d fb04 	ldr.w	pc, [sp], #4

00004320 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    4320:	b500      	push	{lr}
    4322:	b083      	sub	sp, #12
    4324:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4326:	9b01      	ldr	r3, [sp, #4]
    4328:	2b00      	cmp	r3, #0
    432a:	d002      	beq.n	4332 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    432c:	9801      	ldr	r0, [sp, #4]
    432e:	f000 f891 	bl	4454 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4332:	bf00      	nop
    4334:	b003      	add	sp, #12
    4336:	f85d fb04 	ldr.w	pc, [sp], #4

0000433a <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    433a:	b082      	sub	sp, #8
    433c:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    433e:	4b19      	ldr	r3, [pc, #100]	; (43a4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4340:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4344:	4a17      	ldr	r2, [pc, #92]	; (43a4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4346:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    434a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    434e:	4b15      	ldr	r3, [pc, #84]	; (43a4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4350:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4354:	4a13      	ldr	r2, [pc, #76]	; (43a4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    435a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    435e:	4b11      	ldr	r3, [pc, #68]	; (43a4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4360:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4364:	4a0f      	ldr	r2, [pc, #60]	; (43a4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4366:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    436a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    436e:	4b0d      	ldr	r3, [pc, #52]	; (43a4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4370:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4374:	4a0b      	ldr	r2, [pc, #44]	; (43a4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4376:	f023 0301 	bic.w	r3, r3, #1
    437a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    437e:	4b09      	ldr	r3, [pc, #36]	; (43a4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4380:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4384:	4a07      	ldr	r2, [pc, #28]	; (43a4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4386:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    438a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    438e:	4b05      	ldr	r3, [pc, #20]	; (43a4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4390:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4394:	4a03      	ldr	r2, [pc, #12]	; (43a4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4396:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    439a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    439e:	bf00      	nop
    43a0:	b002      	add	sp, #8
    43a2:	4770      	bx	lr
    43a4:	40064000 	.word	0x40064000

000043a8 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    43a8:	b082      	sub	sp, #8
    43aa:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    43ac:	9b01      	ldr	r3, [sp, #4]
    43ae:	889b      	ldrh	r3, [r3, #4]
    43b0:	2b01      	cmp	r3, #1
    43b2:	d12f      	bne.n	4414 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    43b4:	4b1a      	ldr	r3, [pc, #104]	; (4420 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    43b6:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    43ba:	9b01      	ldr	r3, [sp, #4]
    43bc:	7b5b      	ldrb	r3, [r3, #13]
    43be:	3b01      	subs	r3, #1
    43c0:	021b      	lsls	r3, r3, #8
    43c2:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    43c6:	9b01      	ldr	r3, [sp, #4]
    43c8:	7d1b      	ldrb	r3, [r3, #20]
    43ca:	3b10      	subs	r3, #16
    43cc:	041b      	lsls	r3, r3, #16
    43ce:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    43d2:	430b      	orrs	r3, r1
    43d4:	4912      	ldr	r1, [pc, #72]	; (4420 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    43d6:	4313      	orrs	r3, r2
    43d8:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    43dc:	9b01      	ldr	r3, [sp, #4]
    43de:	7fdb      	ldrb	r3, [r3, #31]
    43e0:	2b02      	cmp	r3, #2
    43e2:	d011      	beq.n	4408 <Clock_Ip_SetSpll_TrustedCall+0x60>
    43e4:	2b02      	cmp	r3, #2
    43e6:	dc17      	bgt.n	4418 <Clock_Ip_SetSpll_TrustedCall+0x70>
    43e8:	2b00      	cmp	r3, #0
    43ea:	d002      	beq.n	43f2 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    43ec:	2b01      	cmp	r3, #1
    43ee:	d005      	beq.n	43fc <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    43f0:	e012      	b.n	4418 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    43f2:	4b0b      	ldr	r3, [pc, #44]	; (4420 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    43f4:	2200      	movs	r2, #0
    43f6:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    43fa:	e00e      	b.n	441a <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    43fc:	4b08      	ldr	r3, [pc, #32]	; (4420 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    43fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4402:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4406:	e008      	b.n	441a <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4408:	4b05      	ldr	r3, [pc, #20]	; (4420 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    440a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    440e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4412:	e002      	b.n	441a <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    4414:	bf00      	nop
    4416:	e000      	b.n	441a <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    4418:	bf00      	nop
}
    441a:	bf00      	nop
    441c:	b002      	add	sp, #8
    441e:	4770      	bx	lr
    4420:	40064000 	.word	0x40064000

00004424 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    4424:	b082      	sub	sp, #8
    4426:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4428:	4b09      	ldr	r3, [pc, #36]	; (4450 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    442a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    442e:	4a08      	ldr	r2, [pc, #32]	; (4450 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4430:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4434:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4438:	4b05      	ldr	r3, [pc, #20]	; (4450 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    443a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    443e:	4a04      	ldr	r2, [pc, #16]	; (4450 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4440:	f023 0301 	bic.w	r3, r3, #1
    4444:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    4448:	bf00      	nop
    444a:	b002      	add	sp, #8
    444c:	4770      	bx	lr
    444e:	bf00      	nop
    4450:	40064000 	.word	0x40064000

00004454 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4454:	b082      	sub	sp, #8
    4456:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4458:	9b01      	ldr	r3, [sp, #4]
    445a:	889b      	ldrh	r3, [r3, #4]
    445c:	2b01      	cmp	r3, #1
    445e:	d107      	bne.n	4470 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    4460:	4b05      	ldr	r3, [pc, #20]	; (4478 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4462:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4466:	4a04      	ldr	r2, [pc, #16]	; (4478 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4468:	f043 0301 	orr.w	r3, r3, #1
    446c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    4470:	bf00      	nop
    4472:	b002      	add	sp, #8
    4474:	4770      	bx	lr
    4476:	bf00      	nop
    4478:	40064000 	.word	0x40064000

0000447c <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    447c:	b082      	sub	sp, #8
    447e:	9001      	str	r0, [sp, #4]
    4480:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4482:	bf00      	nop
    4484:	b002      	add	sp, #8
    4486:	4770      	bx	lr

00004488 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    4488:	b082      	sub	sp, #8
    448a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    448c:	bf00      	nop
    448e:	b002      	add	sp, #8
    4490:	4770      	bx	lr

00004492 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4492:	b500      	push	{lr}
    4494:	b083      	sub	sp, #12
    4496:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4498:	9b01      	ldr	r3, [sp, #4]
    449a:	2b00      	cmp	r3, #0
    449c:	d002      	beq.n	44a4 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    449e:	9801      	ldr	r0, [sp, #4]
    44a0:	f000 f8ee 	bl	4680 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44a4:	bf00      	nop
    44a6:	b003      	add	sp, #12
    44a8:	f85d fb04 	ldr.w	pc, [sp], #4

000044ac <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    44ac:	b500      	push	{lr}
    44ae:	b083      	sub	sp, #12
    44b0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44b2:	9b01      	ldr	r3, [sp, #4]
    44b4:	2b00      	cmp	r3, #0
    44b6:	d002      	beq.n	44be <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    44b8:	9801      	ldr	r0, [sp, #4]
    44ba:	f000 f8ff 	bl	46bc <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44be:	bf00      	nop
    44c0:	b003      	add	sp, #12
    44c2:	f85d fb04 	ldr.w	pc, [sp], #4

000044c6 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    44c6:	b500      	push	{lr}
    44c8:	b083      	sub	sp, #12
    44ca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44cc:	9b01      	ldr	r3, [sp, #4]
    44ce:	2b00      	cmp	r3, #0
    44d0:	d002      	beq.n	44d8 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    44d2:	9801      	ldr	r0, [sp, #4]
    44d4:	f000 f912 	bl	46fc <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44d8:	bf00      	nop
    44da:	b003      	add	sp, #12
    44dc:	f85d fb04 	ldr.w	pc, [sp], #4

000044e0 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    44e0:	b500      	push	{lr}
    44e2:	b083      	sub	sp, #12
    44e4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44e6:	9b01      	ldr	r3, [sp, #4]
    44e8:	2b00      	cmp	r3, #0
    44ea:	d002      	beq.n	44f2 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    44ec:	9801      	ldr	r0, [sp, #4]
    44ee:	f000 f925 	bl	473c <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44f2:	bf00      	nop
    44f4:	b003      	add	sp, #12
    44f6:	f85d fb04 	ldr.w	pc, [sp], #4

000044fa <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    44fa:	b500      	push	{lr}
    44fc:	b083      	sub	sp, #12
    44fe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4500:	9b01      	ldr	r3, [sp, #4]
    4502:	2b00      	cmp	r3, #0
    4504:	d002      	beq.n	450c <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    4506:	9801      	ldr	r0, [sp, #4]
    4508:	f000 f936 	bl	4778 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    450c:	bf00      	nop
    450e:	b003      	add	sp, #12
    4510:	f85d fb04 	ldr.w	pc, [sp], #4

00004514 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4514:	b500      	push	{lr}
    4516:	b083      	sub	sp, #12
    4518:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    451a:	9b01      	ldr	r3, [sp, #4]
    451c:	2b00      	cmp	r3, #0
    451e:	d002      	beq.n	4526 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    4520:	9801      	ldr	r0, [sp, #4]
    4522:	f000 f949 	bl	47b8 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4526:	bf00      	nop
    4528:	b003      	add	sp, #12
    452a:	f85d fb04 	ldr.w	pc, [sp], #4

0000452e <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    452e:	b500      	push	{lr}
    4530:	b083      	sub	sp, #12
    4532:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4534:	9b01      	ldr	r3, [sp, #4]
    4536:	2b00      	cmp	r3, #0
    4538:	d002      	beq.n	4540 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    453a:	9801      	ldr	r0, [sp, #4]
    453c:	f000 f958 	bl	47f0 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4540:	bf00      	nop
    4542:	b003      	add	sp, #12
    4544:	f85d fb04 	ldr.w	pc, [sp], #4

00004548 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4548:	b500      	push	{lr}
    454a:	b083      	sub	sp, #12
    454c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    454e:	9b01      	ldr	r3, [sp, #4]
    4550:	2b00      	cmp	r3, #0
    4552:	d002      	beq.n	455a <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    4554:	9801      	ldr	r0, [sp, #4]
    4556:	f000 f969 	bl	482c <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    455a:	bf00      	nop
    455c:	b003      	add	sp, #12
    455e:	f85d fb04 	ldr.w	pc, [sp], #4

00004562 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4562:	b500      	push	{lr}
    4564:	b083      	sub	sp, #12
    4566:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4568:	9b01      	ldr	r3, [sp, #4]
    456a:	2b00      	cmp	r3, #0
    456c:	d002      	beq.n	4574 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    456e:	9801      	ldr	r0, [sp, #4]
    4570:	f000 f978 	bl	4864 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4574:	bf00      	nop
    4576:	b003      	add	sp, #12
    4578:	f85d fb04 	ldr.w	pc, [sp], #4

0000457c <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    457c:	b500      	push	{lr}
    457e:	b083      	sub	sp, #12
    4580:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4582:	9b01      	ldr	r3, [sp, #4]
    4584:	2b00      	cmp	r3, #0
    4586:	d002      	beq.n	458e <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    4588:	9801      	ldr	r0, [sp, #4]
    458a:	f000 f989 	bl	48a0 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    458e:	bf00      	nop
    4590:	b003      	add	sp, #12
    4592:	f85d fb04 	ldr.w	pc, [sp], #4

00004596 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4596:	b500      	push	{lr}
    4598:	b083      	sub	sp, #12
    459a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    459c:	9b01      	ldr	r3, [sp, #4]
    459e:	2b00      	cmp	r3, #0
    45a0:	d002      	beq.n	45a8 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    45a2:	9801      	ldr	r0, [sp, #4]
    45a4:	f000 f998 	bl	48d8 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    45a8:	bf00      	nop
    45aa:	b003      	add	sp, #12
    45ac:	f85d fb04 	ldr.w	pc, [sp], #4

000045b0 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    45b0:	b500      	push	{lr}
    45b2:	b083      	sub	sp, #12
    45b4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    45b6:	9b01      	ldr	r3, [sp, #4]
    45b8:	2b00      	cmp	r3, #0
    45ba:	d002      	beq.n	45c2 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    45bc:	9801      	ldr	r0, [sp, #4]
    45be:	f000 f9a9 	bl	4914 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    45c2:	bf00      	nop
    45c4:	b003      	add	sp, #12
    45c6:	f85d fb04 	ldr.w	pc, [sp], #4

000045ca <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    45ca:	b500      	push	{lr}
    45cc:	b083      	sub	sp, #12
    45ce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    45d0:	9b01      	ldr	r3, [sp, #4]
    45d2:	2b00      	cmp	r3, #0
    45d4:	d002      	beq.n	45dc <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    45d6:	9801      	ldr	r0, [sp, #4]
    45d8:	f000 f9e6 	bl	49a8 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    45dc:	bf00      	nop
    45de:	b003      	add	sp, #12
    45e0:	f85d fb04 	ldr.w	pc, [sp], #4

000045e4 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    45e4:	b500      	push	{lr}
    45e6:	b083      	sub	sp, #12
    45e8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    45ea:	9b01      	ldr	r3, [sp, #4]
    45ec:	2b00      	cmp	r3, #0
    45ee:	d002      	beq.n	45f6 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    45f0:	9801      	ldr	r0, [sp, #4]
    45f2:	f000 fa25 	bl	4a40 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    45f6:	bf00      	nop
    45f8:	b003      	add	sp, #12
    45fa:	f85d fb04 	ldr.w	pc, [sp], #4

000045fe <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    45fe:	b500      	push	{lr}
    4600:	b083      	sub	sp, #12
    4602:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4604:	9b01      	ldr	r3, [sp, #4]
    4606:	2b00      	cmp	r3, #0
    4608:	d002      	beq.n	4610 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    460a:	9801      	ldr	r0, [sp, #4]
    460c:	f000 fa2a 	bl	4a64 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4610:	bf00      	nop
    4612:	b003      	add	sp, #12
    4614:	f85d fb04 	ldr.w	pc, [sp], #4

00004618 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4618:	b500      	push	{lr}
    461a:	b083      	sub	sp, #12
    461c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    461e:	9b01      	ldr	r3, [sp, #4]
    4620:	2b00      	cmp	r3, #0
    4622:	d002      	beq.n	462a <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    4624:	9801      	ldr	r0, [sp, #4]
    4626:	f000 fa3b 	bl	4aa0 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    462a:	bf00      	nop
    462c:	b003      	add	sp, #12
    462e:	f85d fb04 	ldr.w	pc, [sp], #4

00004632 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4632:	b500      	push	{lr}
    4634:	b083      	sub	sp, #12
    4636:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4638:	9b01      	ldr	r3, [sp, #4]
    463a:	2b00      	cmp	r3, #0
    463c:	d002      	beq.n	4644 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    463e:	9801      	ldr	r0, [sp, #4]
    4640:	f000 fa56 	bl	4af0 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4644:	bf00      	nop
    4646:	b003      	add	sp, #12
    4648:	f85d fb04 	ldr.w	pc, [sp], #4

0000464c <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    464c:	b500      	push	{lr}
    464e:	b083      	sub	sp, #12
    4650:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4652:	9b01      	ldr	r3, [sp, #4]
    4654:	2b00      	cmp	r3, #0
    4656:	d002      	beq.n	465e <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    4658:	9801      	ldr	r0, [sp, #4]
    465a:	f000 fa79 	bl	4b50 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    465e:	bf00      	nop
    4660:	b003      	add	sp, #12
    4662:	f85d fb04 	ldr.w	pc, [sp], #4

00004666 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4666:	b500      	push	{lr}
    4668:	b083      	sub	sp, #12
    466a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    466c:	9b01      	ldr	r3, [sp, #4]
    466e:	2b00      	cmp	r3, #0
    4670:	d002      	beq.n	4678 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    4672:	9801      	ldr	r0, [sp, #4]
    4674:	f000 fa8a 	bl	4b8c <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4678:	bf00      	nop
    467a:	b003      	add	sp, #12
    467c:	f85d fb04 	ldr.w	pc, [sp], #4

00004680 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4680:	b084      	sub	sp, #16
    4682:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4684:	4b0b      	ldr	r3, [pc, #44]	; (46b4 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    4686:	795b      	ldrb	r3, [r3, #5]
    4688:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    468a:	4b0b      	ldr	r3, [pc, #44]	; (46b8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    468c:	695b      	ldr	r3, [r3, #20]
    468e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4690:	9b02      	ldr	r3, [sp, #8]
    4692:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4696:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4698:	9b03      	ldr	r3, [sp, #12]
    469a:	061b      	lsls	r3, r3, #24
    469c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    46a0:	9a02      	ldr	r2, [sp, #8]
    46a2:	4313      	orrs	r3, r2
    46a4:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    46a6:	4a04      	ldr	r2, [pc, #16]	; (46b8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    46a8:	9b02      	ldr	r3, [sp, #8]
    46aa:	6153      	str	r3, [r2, #20]
}
    46ac:	bf00      	nop
    46ae:	b004      	add	sp, #16
    46b0:	4770      	bx	lr
    46b2:	bf00      	nop
    46b4:	0001827c 	.word	0x0001827c
    46b8:	40064000 	.word	0x40064000

000046bc <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46bc:	b084      	sub	sp, #16
    46be:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    46c0:	9b01      	ldr	r3, [sp, #4]
    46c2:	685b      	ldr	r3, [r3, #4]
    46c4:	4a0b      	ldr	r2, [pc, #44]	; (46f4 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    46c6:	5cd3      	ldrb	r3, [r2, r3]
    46c8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    46ca:	4b0b      	ldr	r3, [pc, #44]	; (46f8 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    46cc:	695b      	ldr	r3, [r3, #20]
    46ce:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    46d0:	9b02      	ldr	r3, [sp, #8]
    46d2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    46d6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    46d8:	9b03      	ldr	r3, [sp, #12]
    46da:	061b      	lsls	r3, r3, #24
    46dc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    46e0:	9a02      	ldr	r2, [sp, #8]
    46e2:	4313      	orrs	r3, r2
    46e4:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    46e6:	4a04      	ldr	r2, [pc, #16]	; (46f8 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    46e8:	9b02      	ldr	r3, [sp, #8]
    46ea:	6153      	str	r3, [r2, #20]
}
    46ec:	bf00      	nop
    46ee:	b004      	add	sp, #16
    46f0:	4770      	bx	lr
    46f2:	bf00      	nop
    46f4:	0001827c 	.word	0x0001827c
    46f8:	40064000 	.word	0x40064000

000046fc <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46fc:	b084      	sub	sp, #16
    46fe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4700:	9b01      	ldr	r3, [sp, #4]
    4702:	685b      	ldr	r3, [r3, #4]
    4704:	4a0b      	ldr	r2, [pc, #44]	; (4734 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    4706:	5cd3      	ldrb	r3, [r2, r3]
    4708:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    470a:	4b0b      	ldr	r3, [pc, #44]	; (4738 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    470c:	699b      	ldr	r3, [r3, #24]
    470e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    4710:	9b02      	ldr	r3, [sp, #8]
    4712:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4716:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    4718:	9b03      	ldr	r3, [sp, #12]
    471a:	061b      	lsls	r3, r3, #24
    471c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4720:	9a02      	ldr	r2, [sp, #8]
    4722:	4313      	orrs	r3, r2
    4724:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    4726:	4a04      	ldr	r2, [pc, #16]	; (4738 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4728:	9b02      	ldr	r3, [sp, #8]
    472a:	6193      	str	r3, [r2, #24]
}
    472c:	bf00      	nop
    472e:	b004      	add	sp, #16
    4730:	4770      	bx	lr
    4732:	bf00      	nop
    4734:	0001827c 	.word	0x0001827c
    4738:	40064000 	.word	0x40064000

0000473c <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    473c:	b084      	sub	sp, #16
    473e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4740:	4b0b      	ldr	r3, [pc, #44]	; (4770 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    4742:	795b      	ldrb	r3, [r3, #5]
    4744:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    4746:	4b0b      	ldr	r3, [pc, #44]	; (4774 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4748:	69db      	ldr	r3, [r3, #28]
    474a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    474c:	9b02      	ldr	r3, [sp, #8]
    474e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4752:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4754:	9b03      	ldr	r3, [sp, #12]
    4756:	061b      	lsls	r3, r3, #24
    4758:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    475c:	9a02      	ldr	r2, [sp, #8]
    475e:	4313      	orrs	r3, r2
    4760:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4762:	4a04      	ldr	r2, [pc, #16]	; (4774 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4764:	9b02      	ldr	r3, [sp, #8]
    4766:	61d3      	str	r3, [r2, #28]
}
    4768:	bf00      	nop
    476a:	b004      	add	sp, #16
    476c:	4770      	bx	lr
    476e:	bf00      	nop
    4770:	0001827c 	.word	0x0001827c
    4774:	40064000 	.word	0x40064000

00004778 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4778:	b084      	sub	sp, #16
    477a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    477c:	9b01      	ldr	r3, [sp, #4]
    477e:	685b      	ldr	r3, [r3, #4]
    4780:	4a0b      	ldr	r2, [pc, #44]	; (47b0 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    4782:	5cd3      	ldrb	r3, [r2, r3]
    4784:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    4786:	4b0b      	ldr	r3, [pc, #44]	; (47b4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4788:	69db      	ldr	r3, [r3, #28]
    478a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    478c:	9b02      	ldr	r3, [sp, #8]
    478e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4792:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4794:	9b03      	ldr	r3, [sp, #12]
    4796:	061b      	lsls	r3, r3, #24
    4798:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    479c:	9a02      	ldr	r2, [sp, #8]
    479e:	4313      	orrs	r3, r2
    47a0:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    47a2:	4a04      	ldr	r2, [pc, #16]	; (47b4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    47a4:	9b02      	ldr	r3, [sp, #8]
    47a6:	61d3      	str	r3, [r2, #28]
}
    47a8:	bf00      	nop
    47aa:	b004      	add	sp, #16
    47ac:	4770      	bx	lr
    47ae:	bf00      	nop
    47b0:	0001827c 	.word	0x0001827c
    47b4:	40064000 	.word	0x40064000

000047b8 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    47b8:	b084      	sub	sp, #16
    47ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47bc:	4b0a      	ldr	r3, [pc, #40]	; (47e8 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    47be:	7b9b      	ldrb	r3, [r3, #14]
    47c0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    47c2:	4b0a      	ldr	r3, [pc, #40]	; (47ec <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    47c4:	691b      	ldr	r3, [r3, #16]
    47c6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    47c8:	9b02      	ldr	r3, [sp, #8]
    47ca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    47ce:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    47d0:	9b03      	ldr	r3, [sp, #12]
    47d2:	011b      	lsls	r3, r3, #4
    47d4:	9a02      	ldr	r2, [sp, #8]
    47d6:	4313      	orrs	r3, r2
    47d8:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    47da:	4a04      	ldr	r2, [pc, #16]	; (47ec <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    47dc:	9b02      	ldr	r3, [sp, #8]
    47de:	6113      	str	r3, [r2, #16]
}
    47e0:	bf00      	nop
    47e2:	b004      	add	sp, #16
    47e4:	4770      	bx	lr
    47e6:	bf00      	nop
    47e8:	00018224 	.word	0x00018224
    47ec:	40048000 	.word	0x40048000

000047f0 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    47f0:	b084      	sub	sp, #16
    47f2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47f4:	9b01      	ldr	r3, [sp, #4]
    47f6:	685b      	ldr	r3, [r3, #4]
    47f8:	4a0a      	ldr	r2, [pc, #40]	; (4824 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    47fa:	5cd3      	ldrb	r3, [r2, r3]
    47fc:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    47fe:	4b0a      	ldr	r3, [pc, #40]	; (4828 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4800:	691b      	ldr	r3, [r3, #16]
    4802:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4804:	9b02      	ldr	r3, [sp, #8]
    4806:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    480a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    480c:	9b03      	ldr	r3, [sp, #12]
    480e:	011b      	lsls	r3, r3, #4
    4810:	9a02      	ldr	r2, [sp, #8]
    4812:	4313      	orrs	r3, r2
    4814:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4816:	4a04      	ldr	r2, [pc, #16]	; (4828 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4818:	9b02      	ldr	r3, [sp, #8]
    481a:	6113      	str	r3, [r2, #16]
}
    481c:	bf00      	nop
    481e:	b004      	add	sp, #16
    4820:	4770      	bx	lr
    4822:	bf00      	nop
    4824:	00018224 	.word	0x00018224
    4828:	40048000 	.word	0x40048000

0000482c <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    482c:	b084      	sub	sp, #16
    482e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4830:	4b0a      	ldr	r3, [pc, #40]	; (485c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    4832:	785b      	ldrb	r3, [r3, #1]
    4834:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4836:	4b0a      	ldr	r3, [pc, #40]	; (4860 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4838:	691b      	ldr	r3, [r3, #16]
    483a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    483c:	9b02      	ldr	r3, [sp, #8]
    483e:	f023 030c 	bic.w	r3, r3, #12
    4842:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4844:	9b03      	ldr	r3, [sp, #12]
    4846:	009b      	lsls	r3, r3, #2
    4848:	9a02      	ldr	r2, [sp, #8]
    484a:	4313      	orrs	r3, r2
    484c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    484e:	4a04      	ldr	r2, [pc, #16]	; (4860 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4850:	9b02      	ldr	r3, [sp, #8]
    4852:	6113      	str	r3, [r2, #16]
}
    4854:	bf00      	nop
    4856:	b004      	add	sp, #16
    4858:	4770      	bx	lr
    485a:	bf00      	nop
    485c:	000182dc 	.word	0x000182dc
    4860:	40048000 	.word	0x40048000

00004864 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4864:	b084      	sub	sp, #16
    4866:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4868:	9b01      	ldr	r3, [sp, #4]
    486a:	685b      	ldr	r3, [r3, #4]
    486c:	4a0a      	ldr	r2, [pc, #40]	; (4898 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    486e:	5cd3      	ldrb	r3, [r2, r3]
    4870:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4872:	4b0a      	ldr	r3, [pc, #40]	; (489c <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4874:	691b      	ldr	r3, [r3, #16]
    4876:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4878:	9b02      	ldr	r3, [sp, #8]
    487a:	f023 030c 	bic.w	r3, r3, #12
    487e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4880:	9b03      	ldr	r3, [sp, #12]
    4882:	009b      	lsls	r3, r3, #2
    4884:	9a02      	ldr	r2, [sp, #8]
    4886:	4313      	orrs	r3, r2
    4888:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    488a:	4a04      	ldr	r2, [pc, #16]	; (489c <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    488c:	9b02      	ldr	r3, [sp, #8]
    488e:	6113      	str	r3, [r2, #16]
}
    4890:	bf00      	nop
    4892:	b004      	add	sp, #16
    4894:	4770      	bx	lr
    4896:	bf00      	nop
    4898:	000182dc 	.word	0x000182dc
    489c:	40048000 	.word	0x40048000

000048a0 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    48a0:	b084      	sub	sp, #16
    48a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    48a4:	4b0a      	ldr	r3, [pc, #40]	; (48d0 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    48a6:	795b      	ldrb	r3, [r3, #5]
    48a8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    48aa:	4b0a      	ldr	r3, [pc, #40]	; (48d4 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    48ac:	6a1b      	ldr	r3, [r3, #32]
    48ae:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    48b0:	9b02      	ldr	r3, [sp, #8]
    48b2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    48b6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    48b8:	9b03      	ldr	r3, [sp, #12]
    48ba:	061b      	lsls	r3, r3, #24
    48bc:	9a02      	ldr	r2, [sp, #8]
    48be:	4313      	orrs	r3, r2
    48c0:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    48c2:	4a04      	ldr	r2, [pc, #16]	; (48d4 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    48c4:	9b02      	ldr	r3, [sp, #8]
    48c6:	6213      	str	r3, [r2, #32]
}
    48c8:	bf00      	nop
    48ca:	b004      	add	sp, #16
    48cc:	4770      	bx	lr
    48ce:	bf00      	nop
    48d0:	0001827c 	.word	0x0001827c
    48d4:	40064000 	.word	0x40064000

000048d8 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    48d8:	b084      	sub	sp, #16
    48da:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    48dc:	9b01      	ldr	r3, [sp, #4]
    48de:	685b      	ldr	r3, [r3, #4]
    48e0:	4a0a      	ldr	r2, [pc, #40]	; (490c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    48e2:	5cd3      	ldrb	r3, [r2, r3]
    48e4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    48e6:	4b0a      	ldr	r3, [pc, #40]	; (4910 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    48e8:	6a1b      	ldr	r3, [r3, #32]
    48ea:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    48ec:	9b02      	ldr	r3, [sp, #8]
    48ee:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    48f2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    48f4:	9b03      	ldr	r3, [sp, #12]
    48f6:	061b      	lsls	r3, r3, #24
    48f8:	9a02      	ldr	r2, [sp, #8]
    48fa:	4313      	orrs	r3, r2
    48fc:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    48fe:	4a04      	ldr	r2, [pc, #16]	; (4910 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4900:	9b02      	ldr	r3, [sp, #8]
    4902:	6213      	str	r3, [r2, #32]
}
    4904:	bf00      	nop
    4906:	b004      	add	sp, #16
    4908:	4770      	bx	lr
    490a:	bf00      	nop
    490c:	0001827c 	.word	0x0001827c
    4910:	40064000 	.word	0x40064000

00004914 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4914:	b086      	sub	sp, #24
    4916:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4918:	4b20      	ldr	r3, [pc, #128]	; (499c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    491a:	795b      	ldrb	r3, [r3, #5]
    491c:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    491e:	9b01      	ldr	r3, [sp, #4]
    4920:	681a      	ldr	r2, [r3, #0]
    4922:	491f      	ldr	r1, [pc, #124]	; (49a0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    4924:	4613      	mov	r3, r2
    4926:	00db      	lsls	r3, r3, #3
    4928:	4413      	add	r3, r2
    492a:	440b      	add	r3, r1
    492c:	781b      	ldrb	r3, [r3, #0]
    492e:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4930:	4b1c      	ldr	r3, [pc, #112]	; (49a4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4932:	68db      	ldr	r3, [r3, #12]
    4934:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    4936:	9b03      	ldr	r3, [sp, #12]
    4938:	2b03      	cmp	r3, #3
    493a:	d813      	bhi.n	4964 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    493c:	9b03      	ldr	r3, [sp, #12]
    493e:	005b      	lsls	r3, r3, #1
    4940:	3318      	adds	r3, #24
    4942:	2203      	movs	r2, #3
    4944:	fa02 f303 	lsl.w	r3, r2, r3
    4948:	43db      	mvns	r3, r3
    494a:	9a05      	ldr	r2, [sp, #20]
    494c:	4013      	ands	r3, r2
    494e:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4950:	9b03      	ldr	r3, [sp, #12]
    4952:	005b      	lsls	r3, r3, #1
    4954:	3318      	adds	r3, #24
    4956:	9a04      	ldr	r2, [sp, #16]
    4958:	fa02 f303 	lsl.w	r3, r2, r3
    495c:	9a05      	ldr	r2, [sp, #20]
    495e:	4313      	orrs	r3, r2
    4960:	9305      	str	r3, [sp, #20]
    4962:	e014      	b.n	498e <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4964:	9b03      	ldr	r3, [sp, #12]
    4966:	3b04      	subs	r3, #4
    4968:	005b      	lsls	r3, r3, #1
    496a:	3310      	adds	r3, #16
    496c:	2203      	movs	r2, #3
    496e:	fa02 f303 	lsl.w	r3, r2, r3
    4972:	43db      	mvns	r3, r3
    4974:	9a05      	ldr	r2, [sp, #20]
    4976:	4013      	ands	r3, r2
    4978:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    497a:	9b03      	ldr	r3, [sp, #12]
    497c:	3b04      	subs	r3, #4
    497e:	005b      	lsls	r3, r3, #1
    4980:	3310      	adds	r3, #16
    4982:	9a04      	ldr	r2, [sp, #16]
    4984:	fa02 f303 	lsl.w	r3, r2, r3
    4988:	9a05      	ldr	r2, [sp, #20]
    498a:	4313      	orrs	r3, r2
    498c:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    498e:	4a05      	ldr	r2, [pc, #20]	; (49a4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4990:	9b05      	ldr	r3, [sp, #20]
    4992:	60d3      	str	r3, [r2, #12]
}
    4994:	bf00      	nop
    4996:	b006      	add	sp, #24
    4998:	4770      	bx	lr
    499a:	bf00      	nop
    499c:	00018224 	.word	0x00018224
    49a0:	00017f14 	.word	0x00017f14
    49a4:	40048000 	.word	0x40048000

000049a8 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    49a8:	b086      	sub	sp, #24
    49aa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    49ac:	9b01      	ldr	r3, [sp, #4]
    49ae:	685b      	ldr	r3, [r3, #4]
    49b0:	4a20      	ldr	r2, [pc, #128]	; (4a34 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    49b2:	5cd3      	ldrb	r3, [r2, r3]
    49b4:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    49b6:	9b01      	ldr	r3, [sp, #4]
    49b8:	681a      	ldr	r2, [r3, #0]
    49ba:	491f      	ldr	r1, [pc, #124]	; (4a38 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    49bc:	4613      	mov	r3, r2
    49be:	00db      	lsls	r3, r3, #3
    49c0:	4413      	add	r3, r2
    49c2:	440b      	add	r3, r1
    49c4:	781b      	ldrb	r3, [r3, #0]
    49c6:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    49c8:	4b1c      	ldr	r3, [pc, #112]	; (4a3c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    49ca:	68db      	ldr	r3, [r3, #12]
    49cc:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    49ce:	9b03      	ldr	r3, [sp, #12]
    49d0:	2b03      	cmp	r3, #3
    49d2:	d813      	bhi.n	49fc <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    49d4:	9b03      	ldr	r3, [sp, #12]
    49d6:	005b      	lsls	r3, r3, #1
    49d8:	3318      	adds	r3, #24
    49da:	2203      	movs	r2, #3
    49dc:	fa02 f303 	lsl.w	r3, r2, r3
    49e0:	43db      	mvns	r3, r3
    49e2:	9a05      	ldr	r2, [sp, #20]
    49e4:	4013      	ands	r3, r2
    49e6:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    49e8:	9b03      	ldr	r3, [sp, #12]
    49ea:	005b      	lsls	r3, r3, #1
    49ec:	3318      	adds	r3, #24
    49ee:	9a04      	ldr	r2, [sp, #16]
    49f0:	fa02 f303 	lsl.w	r3, r2, r3
    49f4:	9a05      	ldr	r2, [sp, #20]
    49f6:	4313      	orrs	r3, r2
    49f8:	9305      	str	r3, [sp, #20]
    49fa:	e014      	b.n	4a26 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    49fc:	9b03      	ldr	r3, [sp, #12]
    49fe:	3b04      	subs	r3, #4
    4a00:	005b      	lsls	r3, r3, #1
    4a02:	3310      	adds	r3, #16
    4a04:	2203      	movs	r2, #3
    4a06:	fa02 f303 	lsl.w	r3, r2, r3
    4a0a:	43db      	mvns	r3, r3
    4a0c:	9a05      	ldr	r2, [sp, #20]
    4a0e:	4013      	ands	r3, r2
    4a10:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4a12:	9b03      	ldr	r3, [sp, #12]
    4a14:	3b04      	subs	r3, #4
    4a16:	005b      	lsls	r3, r3, #1
    4a18:	3310      	adds	r3, #16
    4a1a:	9a04      	ldr	r2, [sp, #16]
    4a1c:	fa02 f303 	lsl.w	r3, r2, r3
    4a20:	9a05      	ldr	r2, [sp, #20]
    4a22:	4313      	orrs	r3, r2
    4a24:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    4a26:	4a05      	ldr	r2, [pc, #20]	; (4a3c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    4a28:	9b05      	ldr	r3, [sp, #20]
    4a2a:	60d3      	str	r3, [r2, #12]
}
    4a2c:	bf00      	nop
    4a2e:	b006      	add	sp, #24
    4a30:	4770      	bx	lr
    4a32:	bf00      	nop
    4a34:	00018224 	.word	0x00018224
    4a38:	00017f14 	.word	0x00017f14
    4a3c:	40048000 	.word	0x40048000

00004a40 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4a40:	b084      	sub	sp, #16
    4a42:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    4a44:	4b06      	ldr	r3, [pc, #24]	; (4a60 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4a46:	685b      	ldr	r3, [r3, #4]
    4a48:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    4a4a:	9b03      	ldr	r3, [sp, #12]
    4a4c:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    4a50:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    4a52:	4a03      	ldr	r2, [pc, #12]	; (4a60 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4a54:	9b03      	ldr	r3, [sp, #12]
    4a56:	6053      	str	r3, [r2, #4]
}
    4a58:	bf00      	nop
    4a5a:	b004      	add	sp, #16
    4a5c:	4770      	bx	lr
    4a5e:	bf00      	nop
    4a60:	40048000 	.word	0x40048000

00004a64 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4a64:	b084      	sub	sp, #16
    4a66:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4a68:	9b01      	ldr	r3, [sp, #4]
    4a6a:	685b      	ldr	r3, [r3, #4]
    4a6c:	4a0a      	ldr	r2, [pc, #40]	; (4a98 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    4a6e:	5cd3      	ldrb	r3, [r2, r3]
    4a70:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    4a72:	4b0a      	ldr	r3, [pc, #40]	; (4a9c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4a74:	685b      	ldr	r3, [r3, #4]
    4a76:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    4a78:	9b02      	ldr	r3, [sp, #8]
    4a7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    4a7e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    4a80:	9b03      	ldr	r3, [sp, #12]
    4a82:	011b      	lsls	r3, r3, #4
    4a84:	9a02      	ldr	r2, [sp, #8]
    4a86:	4313      	orrs	r3, r2
    4a88:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    4a8a:	4a04      	ldr	r2, [pc, #16]	; (4a9c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4a8c:	9b02      	ldr	r3, [sp, #8]
    4a8e:	6053      	str	r3, [r2, #4]
}
    4a90:	bf00      	nop
    4a92:	b004      	add	sp, #16
    4a94:	4770      	bx	lr
    4a96:	bf00      	nop
    4a98:	00018224 	.word	0x00018224
    4a9c:	40048000 	.word	0x40048000

00004aa0 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4aa0:	b084      	sub	sp, #16
    4aa2:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4aa4:	9b01      	ldr	r3, [sp, #4]
    4aa6:	681a      	ldr	r2, [r3, #0]
    4aa8:	490f      	ldr	r1, [pc, #60]	; (4ae8 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    4aaa:	4613      	mov	r3, r2
    4aac:	00db      	lsls	r3, r3, #3
    4aae:	4413      	add	r3, r2
    4ab0:	440b      	add	r3, r1
    4ab2:	3304      	adds	r3, #4
    4ab4:	781b      	ldrb	r3, [r3, #0]
    4ab6:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    4ab8:	4a0c      	ldr	r2, [pc, #48]	; (4aec <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4aba:	9b03      	ldr	r3, [sp, #12]
    4abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4ac0:	490a      	ldr	r1, [pc, #40]	; (4aec <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4ac2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    4ac6:	9b03      	ldr	r3, [sp, #12]
    4ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    4acc:	4a07      	ldr	r2, [pc, #28]	; (4aec <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4ace:	9b03      	ldr	r3, [sp, #12]
    4ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4ad4:	4905      	ldr	r1, [pc, #20]	; (4aec <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4ad6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    4ada:	9b03      	ldr	r3, [sp, #12]
    4adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4ae0:	bf00      	nop
    4ae2:	b004      	add	sp, #16
    4ae4:	4770      	bx	lr
    4ae6:	bf00      	nop
    4ae8:	00017f14 	.word	0x00017f14
    4aec:	40065000 	.word	0x40065000

00004af0 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4af0:	b086      	sub	sp, #24
    4af2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4af4:	9b01      	ldr	r3, [sp, #4]
    4af6:	681a      	ldr	r2, [r3, #0]
    4af8:	4912      	ldr	r1, [pc, #72]	; (4b44 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    4afa:	4613      	mov	r3, r2
    4afc:	00db      	lsls	r3, r3, #3
    4afe:	4413      	add	r3, r2
    4b00:	440b      	add	r3, r1
    4b02:	3304      	adds	r3, #4
    4b04:	781b      	ldrb	r3, [r3, #0]
    4b06:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4b08:	9b01      	ldr	r3, [sp, #4]
    4b0a:	685b      	ldr	r3, [r3, #4]
    4b0c:	4a0e      	ldr	r2, [pc, #56]	; (4b48 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    4b0e:	5cd3      	ldrb	r3, [r2, r3]
    4b10:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    4b12:	4a0e      	ldr	r2, [pc, #56]	; (4b4c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4b14:	9b05      	ldr	r3, [sp, #20]
    4b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4b1a:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    4b1c:	9b03      	ldr	r3, [sp, #12]
    4b1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    4b22:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    4b24:	9b04      	ldr	r3, [sp, #16]
    4b26:	061b      	lsls	r3, r3, #24
    4b28:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    4b2c:	9a03      	ldr	r2, [sp, #12]
    4b2e:	4313      	orrs	r3, r2
    4b30:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    4b32:	4906      	ldr	r1, [pc, #24]	; (4b4c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4b34:	9b05      	ldr	r3, [sp, #20]
    4b36:	9a03      	ldr	r2, [sp, #12]
    4b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4b3c:	bf00      	nop
    4b3e:	b006      	add	sp, #24
    4b40:	4770      	bx	lr
    4b42:	bf00      	nop
    4b44:	00017f14 	.word	0x00017f14
    4b48:	000182ac 	.word	0x000182ac
    4b4c:	40065000 	.word	0x40065000

00004b50 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4b50:	b084      	sub	sp, #16
    4b52:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4b54:	4b0b      	ldr	r3, [pc, #44]	; (4b84 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    4b56:	7f1b      	ldrb	r3, [r3, #28]
    4b58:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    4b5a:	4b0b      	ldr	r3, [pc, #44]	; (4b88 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4b5c:	685b      	ldr	r3, [r3, #4]
    4b5e:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4b60:	9b02      	ldr	r3, [sp, #8]
    4b62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4b66:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4b68:	9b03      	ldr	r3, [sp, #12]
    4b6a:	031b      	lsls	r3, r3, #12
    4b6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4b70:	9a02      	ldr	r2, [sp, #8]
    4b72:	4313      	orrs	r3, r2
    4b74:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4b76:	4a04      	ldr	r2, [pc, #16]	; (4b88 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4b78:	9b02      	ldr	r3, [sp, #8]
    4b7a:	6053      	str	r3, [r2, #4]
}
    4b7c:	bf00      	nop
    4b7e:	b004      	add	sp, #16
    4b80:	4770      	bx	lr
    4b82:	bf00      	nop
    4b84:	00018224 	.word	0x00018224
    4b88:	40048000 	.word	0x40048000

00004b8c <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4b8c:	b084      	sub	sp, #16
    4b8e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4b90:	9b01      	ldr	r3, [sp, #4]
    4b92:	685b      	ldr	r3, [r3, #4]
    4b94:	4a0b      	ldr	r2, [pc, #44]	; (4bc4 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    4b96:	5cd3      	ldrb	r3, [r2, r3]
    4b98:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    4b9a:	4b0b      	ldr	r3, [pc, #44]	; (4bc8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4b9c:	685b      	ldr	r3, [r3, #4]
    4b9e:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4ba0:	9b02      	ldr	r3, [sp, #8]
    4ba2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4ba6:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4ba8:	9b03      	ldr	r3, [sp, #12]
    4baa:	031b      	lsls	r3, r3, #12
    4bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4bb0:	9a02      	ldr	r2, [sp, #8]
    4bb2:	4313      	orrs	r3, r2
    4bb4:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4bb6:	4a04      	ldr	r2, [pc, #16]	; (4bc8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4bb8:	9b02      	ldr	r3, [sp, #8]
    4bba:	6053      	str	r3, [r2, #4]
}
    4bbc:	bf00      	nop
    4bbe:	b004      	add	sp, #16
    4bc0:	4770      	bx	lr
    4bc2:	bf00      	nop
    4bc4:	00018224 	.word	0x00018224
    4bc8:	40048000 	.word	0x40048000

00004bcc <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    4bcc:	b500      	push	{lr}
    4bce:	b085      	sub	sp, #20
    4bd0:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    4bd2:	2300      	movs	r3, #0
    4bd4:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    4bd8:	9b01      	ldr	r3, [sp, #4]
    4bda:	2b00      	cmp	r3, #0
    4bdc:	d037      	beq.n	4c4e <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4bde:	2300      	movs	r3, #0
    4be0:	9303      	str	r3, [sp, #12]
    4be2:	e02b      	b.n	4c3c <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4be4:	4b29      	ldr	r3, [pc, #164]	; (4c8c <DisableSafeClock+0xc0>)
    4be6:	6819      	ldr	r1, [r3, #0]
    4be8:	9a03      	ldr	r2, [sp, #12]
    4bea:	4613      	mov	r3, r2
    4bec:	005b      	lsls	r3, r3, #1
    4bee:	4413      	add	r3, r2
    4bf0:	009b      	lsls	r3, r3, #2
    4bf2:	440b      	add	r3, r1
    4bf4:	3314      	adds	r3, #20
    4bf6:	681b      	ldr	r3, [r3, #0]
    4bf8:	2b05      	cmp	r3, #5
    4bfa:	d11c      	bne.n	4c36 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    4bfc:	2301      	movs	r3, #1
    4bfe:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    4c02:	4b22      	ldr	r3, [pc, #136]	; (4c8c <DisableSafeClock+0xc0>)
    4c04:	6819      	ldr	r1, [r3, #0]
    4c06:	9a03      	ldr	r2, [sp, #12]
    4c08:	4613      	mov	r3, r2
    4c0a:	005b      	lsls	r3, r3, #1
    4c0c:	4413      	add	r3, r2
    4c0e:	009b      	lsls	r3, r3, #2
    4c10:	440b      	add	r3, r1
    4c12:	3318      	adds	r3, #24
    4c14:	881b      	ldrh	r3, [r3, #0]
    4c16:	2b00      	cmp	r3, #0
    4c18:	d118      	bne.n	4c4c <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4c1a:	4b1d      	ldr	r3, [pc, #116]	; (4c90 <DisableSafeClock+0xc4>)
    4c1c:	791b      	ldrb	r3, [r3, #4]
    4c1e:	4619      	mov	r1, r3
    4c20:	4a1c      	ldr	r2, [pc, #112]	; (4c94 <DisableSafeClock+0xc8>)
    4c22:	460b      	mov	r3, r1
    4c24:	005b      	lsls	r3, r3, #1
    4c26:	440b      	add	r3, r1
    4c28:	009b      	lsls	r3, r3, #2
    4c2a:	4413      	add	r3, r2
    4c2c:	3308      	adds	r3, #8
    4c2e:	681b      	ldr	r3, [r3, #0]
    4c30:	2005      	movs	r0, #5
    4c32:	4798      	blx	r3
                }
                break;
    4c34:	e00a      	b.n	4c4c <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4c36:	9b03      	ldr	r3, [sp, #12]
    4c38:	3301      	adds	r3, #1
    4c3a:	9303      	str	r3, [sp, #12]
    4c3c:	4b13      	ldr	r3, [pc, #76]	; (4c8c <DisableSafeClock+0xc0>)
    4c3e:	681b      	ldr	r3, [r3, #0]
    4c40:	7a1b      	ldrb	r3, [r3, #8]
    4c42:	461a      	mov	r2, r3
    4c44:	9b03      	ldr	r3, [sp, #12]
    4c46:	4293      	cmp	r3, r2
    4c48:	d3cc      	bcc.n	4be4 <DisableSafeClock+0x18>
    4c4a:	e000      	b.n	4c4e <DisableSafeClock+0x82>
                break;
    4c4c:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    4c4e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4c52:	f083 0301 	eor.w	r3, r3, #1
    4c56:	b2db      	uxtb	r3, r3
    4c58:	2b00      	cmp	r3, #0
    4c5a:	d013      	beq.n	4c84 <DisableSafeClock+0xb8>
    4c5c:	4b0e      	ldr	r3, [pc, #56]	; (4c98 <DisableSafeClock+0xcc>)
    4c5e:	781b      	ldrb	r3, [r3, #0]
    4c60:	f083 0301 	eor.w	r3, r3, #1
    4c64:	b2db      	uxtb	r3, r3
    4c66:	2b00      	cmp	r3, #0
    4c68:	d00c      	beq.n	4c84 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4c6a:	4b09      	ldr	r3, [pc, #36]	; (4c90 <DisableSafeClock+0xc4>)
    4c6c:	791b      	ldrb	r3, [r3, #4]
    4c6e:	4619      	mov	r1, r3
    4c70:	4a08      	ldr	r2, [pc, #32]	; (4c94 <DisableSafeClock+0xc8>)
    4c72:	460b      	mov	r3, r1
    4c74:	005b      	lsls	r3, r3, #1
    4c76:	440b      	add	r3, r1
    4c78:	009b      	lsls	r3, r3, #2
    4c7a:	4413      	add	r3, r2
    4c7c:	3308      	adds	r3, #8
    4c7e:	681b      	ldr	r3, [r3, #0]
    4c80:	2005      	movs	r0, #5
    4c82:	4798      	blx	r3
    }
}
    4c84:	bf00      	nop
    4c86:	b005      	add	sp, #20
    4c88:	f85d fb04 	ldr.w	pc, [sp], #4
    4c8c:	1fff8b9c 	.word	0x1fff8b9c
    4c90:	00017ea4 	.word	0x00017ea4
    4c94:	000184d4 	.word	0x000184d4
    4c98:	1fff8b18 	.word	0x1fff8b18

00004c9c <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    4c9c:	4b06      	ldr	r3, [pc, #24]	; (4cb8 <SetFircToResetValue_TrustedCall+0x1c>)
    4c9e:	2200      	movs	r2, #0
    4ca0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    4ca4:	4b04      	ldr	r3, [pc, #16]	; (4cb8 <SetFircToResetValue_TrustedCall+0x1c>)
    4ca6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4caa:	4a03      	ldr	r2, [pc, #12]	; (4cb8 <SetFircToResetValue_TrustedCall+0x1c>)
    4cac:	f043 0301 	orr.w	r3, r3, #1
    4cb0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4cb4:	bf00      	nop
    4cb6:	4770      	bx	lr
    4cb8:	40064000 	.word	0x40064000

00004cbc <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    4cbc:	b084      	sub	sp, #16
    4cbe:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    4cc0:	2303      	movs	r3, #3
    4cc2:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4cc4:	2300      	movs	r3, #0
    4cc6:	9302      	str	r3, [sp, #8]
    4cc8:	e028      	b.n	4d1c <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    4cca:	9b01      	ldr	r3, [sp, #4]
    4ccc:	9a02      	ldr	r2, [sp, #8]
    4cce:	320d      	adds	r2, #13
    4cd0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4cd4:	2b28      	cmp	r3, #40	; 0x28
    4cd6:	d10b      	bne.n	4cf0 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4cd8:	9a01      	ldr	r2, [sp, #4]
    4cda:	9b02      	ldr	r3, [sp, #8]
    4cdc:	330d      	adds	r3, #13
    4cde:	00db      	lsls	r3, r3, #3
    4ce0:	4413      	add	r3, r2
    4ce2:	685b      	ldr	r3, [r3, #4]
    4ce4:	4a2b      	ldr	r2, [pc, #172]	; (4d94 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    4ce6:	5cd3      	ldrb	r3, [r2, r3]
    4ce8:	011b      	lsls	r3, r3, #4
    4cea:	9a03      	ldr	r2, [sp, #12]
    4cec:	4313      	orrs	r3, r2
    4cee:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    4cf0:	9b01      	ldr	r3, [sp, #4]
    4cf2:	9a02      	ldr	r2, [sp, #8]
    4cf4:	320d      	adds	r2, #13
    4cf6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4cfa:	2b29      	cmp	r3, #41	; 0x29
    4cfc:	d10b      	bne.n	4d16 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4cfe:	9a01      	ldr	r2, [sp, #4]
    4d00:	9b02      	ldr	r3, [sp, #8]
    4d02:	330d      	adds	r3, #13
    4d04:	00db      	lsls	r3, r3, #3
    4d06:	4413      	add	r3, r2
    4d08:	685b      	ldr	r3, [r3, #4]
    4d0a:	4a23      	ldr	r2, [pc, #140]	; (4d98 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    4d0c:	5cd3      	ldrb	r3, [r2, r3]
    4d0e:	009b      	lsls	r3, r3, #2
    4d10:	9a03      	ldr	r2, [sp, #12]
    4d12:	4313      	orrs	r3, r2
    4d14:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4d16:	9b02      	ldr	r3, [sp, #8]
    4d18:	3301      	adds	r3, #1
    4d1a:	9302      	str	r3, [sp, #8]
    4d1c:	9b01      	ldr	r3, [sp, #4]
    4d1e:	7adb      	ldrb	r3, [r3, #11]
    4d20:	461a      	mov	r2, r3
    4d22:	9b02      	ldr	r3, [sp, #8]
    4d24:	4293      	cmp	r3, r2
    4d26:	d3d0      	bcc.n	4cca <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4d28:	2300      	movs	r3, #0
    4d2a:	9302      	str	r3, [sp, #8]
    4d2c:	e026      	b.n	4d7c <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    4d2e:	9a01      	ldr	r2, [sp, #4]
    4d30:	9b02      	ldr	r3, [sp, #8]
    4d32:	334e      	adds	r3, #78	; 0x4e
    4d34:	00db      	lsls	r3, r3, #3
    4d36:	4413      	add	r3, r2
    4d38:	685b      	ldr	r3, [r3, #4]
    4d3a:	2b12      	cmp	r3, #18
    4d3c:	d109      	bne.n	4d52 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    4d3e:	9a01      	ldr	r2, [sp, #4]
    4d40:	9b02      	ldr	r3, [sp, #8]
    4d42:	334e      	adds	r3, #78	; 0x4e
    4d44:	00db      	lsls	r3, r3, #3
    4d46:	4413      	add	r3, r2
    4d48:	891b      	ldrh	r3, [r3, #8]
    4d4a:	005b      	lsls	r3, r3, #1
    4d4c:	9a03      	ldr	r2, [sp, #12]
    4d4e:	4313      	orrs	r3, r2
    4d50:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    4d52:	9a01      	ldr	r2, [sp, #4]
    4d54:	9b02      	ldr	r3, [sp, #8]
    4d56:	334e      	adds	r3, #78	; 0x4e
    4d58:	00db      	lsls	r3, r3, #3
    4d5a:	4413      	add	r3, r2
    4d5c:	685b      	ldr	r3, [r3, #4]
    4d5e:	2b13      	cmp	r3, #19
    4d60:	d109      	bne.n	4d76 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    4d62:	9a01      	ldr	r2, [sp, #4]
    4d64:	9b02      	ldr	r3, [sp, #8]
    4d66:	334e      	adds	r3, #78	; 0x4e
    4d68:	00db      	lsls	r3, r3, #3
    4d6a:	4413      	add	r3, r2
    4d6c:	891b      	ldrh	r3, [r3, #8]
    4d6e:	461a      	mov	r2, r3
    4d70:	9b03      	ldr	r3, [sp, #12]
    4d72:	4313      	orrs	r3, r2
    4d74:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4d76:	9b02      	ldr	r3, [sp, #8]
    4d78:	3301      	adds	r3, #1
    4d7a:	9302      	str	r3, [sp, #8]
    4d7c:	9b01      	ldr	r3, [sp, #4]
    4d7e:	7c1b      	ldrb	r3, [r3, #16]
    4d80:	461a      	mov	r2, r3
    4d82:	9b02      	ldr	r3, [sp, #8]
    4d84:	4293      	cmp	r3, r2
    4d86:	d3d2      	bcc.n	4d2e <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    4d88:	4a04      	ldr	r2, [pc, #16]	; (4d9c <SetSimLpoclksRegister_TrustedCall+0xe0>)
    4d8a:	9b03      	ldr	r3, [sp, #12]
    4d8c:	6113      	str	r3, [r2, #16]
}
    4d8e:	bf00      	nop
    4d90:	b004      	add	sp, #16
    4d92:	4770      	bx	lr
    4d94:	00018224 	.word	0x00018224
    4d98:	000182dc 	.word	0x000182dc
    4d9c:	40048000 	.word	0x40048000

00004da0 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    4da0:	b500      	push	{lr}
    4da2:	b089      	sub	sp, #36	; 0x24
    4da4:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4da6:	2300      	movs	r3, #0
    4da8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    4dac:	4a21      	ldr	r2, [pc, #132]	; (4e34 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    4dae:	9b01      	ldr	r3, [sp, #4]
    4db0:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    4db2:	4b21      	ldr	r3, [pc, #132]	; (4e38 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4db4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4db8:	f003 0301 	and.w	r3, r3, #1
    4dbc:	2b00      	cmp	r3, #0
    4dbe:	d12e      	bne.n	4e1e <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    4dc0:	4b1e      	ldr	r3, [pc, #120]	; (4e3c <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4dc2:	2200      	movs	r2, #0
    4dc4:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    4dc6:	f7ff ff69 	bl	4c9c <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4dca:	aa03      	add	r2, sp, #12
    4dcc:	a904      	add	r1, sp, #16
    4dce:	a805      	add	r0, sp, #20
    4dd0:	f24c 3350 	movw	r3, #50000	; 0xc350
    4dd4:	f7fe f8ae 	bl	2f34 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4dd8:	4b17      	ldr	r3, [pc, #92]	; (4e38 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4dda:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4dde:	0e1b      	lsrs	r3, r3, #24
    4de0:	f003 0301 	and.w	r3, r3, #1
    4de4:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4de6:	9a03      	ldr	r2, [sp, #12]
    4de8:	a904      	add	r1, sp, #16
    4dea:	ab05      	add	r3, sp, #20
    4dec:	4618      	mov	r0, r3
    4dee:	f7fe f8bb 	bl	2f68 <Clock_Ip_TimeoutExpired>
    4df2:	4603      	mov	r3, r0
    4df4:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4df8:	9b06      	ldr	r3, [sp, #24]
    4dfa:	2b00      	cmp	r3, #0
    4dfc:	d106      	bne.n	4e0c <Clock_Ip_SpecificPlatformInitClock+0x6c>
    4dfe:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4e02:	f083 0301 	eor.w	r3, r3, #1
    4e06:	b2db      	uxtb	r3, r3
    4e08:	2b00      	cmp	r3, #0
    4e0a:	d1e5      	bne.n	4dd8 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4e0c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4e10:	2b00      	cmp	r3, #0
    4e12:	d007      	beq.n	4e24 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4e14:	2105      	movs	r1, #5
    4e16:	2001      	movs	r0, #1
    4e18:	f7fe f87c 	bl	2f14 <Clock_Ip_ReportClockErrors>
    4e1c:	e002      	b.n	4e24 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4e1e:	4b07      	ldr	r3, [pc, #28]	; (4e3c <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4e20:	2201      	movs	r2, #1
    4e22:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4e24:	9801      	ldr	r0, [sp, #4]
    4e26:	f7ff ff49 	bl	4cbc <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4e2a:	bf00      	nop
    4e2c:	b009      	add	sp, #36	; 0x24
    4e2e:	f85d fb04 	ldr.w	pc, [sp], #4
    4e32:	bf00      	nop
    4e34:	1fff8b9c 	.word	0x1fff8b9c
    4e38:	40064000 	.word	0x40064000
    4e3c:	1fff8b18 	.word	0x1fff8b18

00004e40 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4e40:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4e42:	2300      	movs	r3, #0
    4e44:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4e46:	4b29      	ldr	r3, [pc, #164]	; (4eec <getFircConfig+0xac>)
    4e48:	681b      	ldr	r3, [r3, #0]
    4e4a:	2b00      	cmp	r3, #0
    4e4c:	d024      	beq.n	4e98 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4e4e:	2300      	movs	r3, #0
    4e50:	9301      	str	r3, [sp, #4]
    4e52:	e01a      	b.n	4e8a <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4e54:	4b25      	ldr	r3, [pc, #148]	; (4eec <getFircConfig+0xac>)
    4e56:	6819      	ldr	r1, [r3, #0]
    4e58:	9a01      	ldr	r2, [sp, #4]
    4e5a:	4613      	mov	r3, r2
    4e5c:	005b      	lsls	r3, r3, #1
    4e5e:	4413      	add	r3, r2
    4e60:	009b      	lsls	r3, r3, #2
    4e62:	440b      	add	r3, r1
    4e64:	3314      	adds	r3, #20
    4e66:	681b      	ldr	r3, [r3, #0]
    4e68:	2b05      	cmp	r3, #5
    4e6a:	d10b      	bne.n	4e84 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4e6c:	4b1f      	ldr	r3, [pc, #124]	; (4eec <getFircConfig+0xac>)
    4e6e:	6819      	ldr	r1, [r3, #0]
    4e70:	9a01      	ldr	r2, [sp, #4]
    4e72:	4613      	mov	r3, r2
    4e74:	005b      	lsls	r3, r3, #1
    4e76:	4413      	add	r3, r2
    4e78:	009b      	lsls	r3, r3, #2
    4e7a:	3310      	adds	r3, #16
    4e7c:	440b      	add	r3, r1
    4e7e:	3304      	adds	r3, #4
    4e80:	9300      	str	r3, [sp, #0]
                break;
    4e82:	e009      	b.n	4e98 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4e84:	9b01      	ldr	r3, [sp, #4]
    4e86:	3301      	adds	r3, #1
    4e88:	9301      	str	r3, [sp, #4]
    4e8a:	4b18      	ldr	r3, [pc, #96]	; (4eec <getFircConfig+0xac>)
    4e8c:	681b      	ldr	r3, [r3, #0]
    4e8e:	7a1b      	ldrb	r3, [r3, #8]
    4e90:	461a      	mov	r2, r3
    4e92:	9b01      	ldr	r3, [sp, #4]
    4e94:	4293      	cmp	r3, r2
    4e96:	d3dd      	bcc.n	4e54 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4e98:	9b00      	ldr	r3, [sp, #0]
    4e9a:	2b00      	cmp	r3, #0
    4e9c:	d121      	bne.n	4ee2 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4e9e:	4b14      	ldr	r3, [pc, #80]	; (4ef0 <getFircConfig+0xb0>)
    4ea0:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4ea2:	4b13      	ldr	r3, [pc, #76]	; (4ef0 <getFircConfig+0xb0>)
    4ea4:	2205      	movs	r2, #5
    4ea6:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4ea8:	4b12      	ldr	r3, [pc, #72]	; (4ef4 <getFircConfig+0xb4>)
    4eaa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4eae:	b29b      	uxth	r3, r3
    4eb0:	f003 0301 	and.w	r3, r3, #1
    4eb4:	b29a      	uxth	r2, r3
    4eb6:	4b0e      	ldr	r3, [pc, #56]	; (4ef0 <getFircConfig+0xb0>)
    4eb8:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    4eba:	4b0e      	ldr	r3, [pc, #56]	; (4ef4 <getFircConfig+0xb4>)
    4ebc:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4ec0:	b2db      	uxtb	r3, r3
    4ec2:	f003 0303 	and.w	r3, r3, #3
    4ec6:	b2da      	uxtb	r2, r3
    4ec8:	4b09      	ldr	r3, [pc, #36]	; (4ef0 <getFircConfig+0xb0>)
    4eca:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4ecc:	4b09      	ldr	r3, [pc, #36]	; (4ef4 <getFircConfig+0xb4>)
    4ece:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4ed2:	b2db      	uxtb	r3, r3
    4ed4:	10db      	asrs	r3, r3, #3
    4ed6:	b2db      	uxtb	r3, r3
    4ed8:	f003 0301 	and.w	r3, r3, #1
    4edc:	b2da      	uxtb	r2, r3
    4ede:	4b04      	ldr	r3, [pc, #16]	; (4ef0 <getFircConfig+0xb0>)
    4ee0:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4ee2:	9b00      	ldr	r3, [sp, #0]
}
    4ee4:	4618      	mov	r0, r3
    4ee6:	b002      	add	sp, #8
    4ee8:	4770      	bx	lr
    4eea:	bf00      	nop
    4eec:	1fff8b9c 	.word	0x1fff8b9c
    4ef0:	1fff8c08 	.word	0x1fff8c08
    4ef4:	40064000 	.word	0x40064000

00004ef8 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4ef8:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4efa:	2300      	movs	r3, #0
    4efc:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4efe:	4b20      	ldr	r3, [pc, #128]	; (4f80 <getSoscConfig+0x88>)
    4f00:	681b      	ldr	r3, [r3, #0]
    4f02:	2b00      	cmp	r3, #0
    4f04:	d024      	beq.n	4f50 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4f06:	2300      	movs	r3, #0
    4f08:	9301      	str	r3, [sp, #4]
    4f0a:	e01a      	b.n	4f42 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4f0c:	4b1c      	ldr	r3, [pc, #112]	; (4f80 <getSoscConfig+0x88>)
    4f0e:	6819      	ldr	r1, [r3, #0]
    4f10:	9a01      	ldr	r2, [sp, #4]
    4f12:	4613      	mov	r3, r2
    4f14:	009b      	lsls	r3, r3, #2
    4f16:	4413      	add	r3, r2
    4f18:	009b      	lsls	r3, r3, #2
    4f1a:	440b      	add	r3, r1
    4f1c:	332c      	adds	r3, #44	; 0x2c
    4f1e:	681b      	ldr	r3, [r3, #0]
    4f20:	2b08      	cmp	r3, #8
    4f22:	d10b      	bne.n	4f3c <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4f24:	4b16      	ldr	r3, [pc, #88]	; (4f80 <getSoscConfig+0x88>)
    4f26:	6819      	ldr	r1, [r3, #0]
    4f28:	9a01      	ldr	r2, [sp, #4]
    4f2a:	4613      	mov	r3, r2
    4f2c:	009b      	lsls	r3, r3, #2
    4f2e:	4413      	add	r3, r2
    4f30:	009b      	lsls	r3, r3, #2
    4f32:	3328      	adds	r3, #40	; 0x28
    4f34:	440b      	add	r3, r1
    4f36:	3304      	adds	r3, #4
    4f38:	9300      	str	r3, [sp, #0]
                break;
    4f3a:	e009      	b.n	4f50 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4f3c:	9b01      	ldr	r3, [sp, #4]
    4f3e:	3301      	adds	r3, #1
    4f40:	9301      	str	r3, [sp, #4]
    4f42:	4b0f      	ldr	r3, [pc, #60]	; (4f80 <getSoscConfig+0x88>)
    4f44:	681b      	ldr	r3, [r3, #0]
    4f46:	7a5b      	ldrb	r3, [r3, #9]
    4f48:	461a      	mov	r2, r3
    4f4a:	9b01      	ldr	r3, [sp, #4]
    4f4c:	4293      	cmp	r3, r2
    4f4e:	d3dd      	bcc.n	4f0c <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4f50:	9b00      	ldr	r3, [sp, #0]
    4f52:	2b00      	cmp	r3, #0
    4f54:	d110      	bne.n	4f78 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4f56:	4b0b      	ldr	r3, [pc, #44]	; (4f84 <getSoscConfig+0x8c>)
    4f58:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4f5a:	4b0a      	ldr	r3, [pc, #40]	; (4f84 <getSoscConfig+0x8c>)
    4f5c:	2208      	movs	r2, #8
    4f5e:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4f60:	4b09      	ldr	r3, [pc, #36]	; (4f88 <getSoscConfig+0x90>)
    4f62:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4f66:	b29b      	uxth	r3, r3
    4f68:	f003 0301 	and.w	r3, r3, #1
    4f6c:	b29a      	uxth	r2, r3
    4f6e:	4b05      	ldr	r3, [pc, #20]	; (4f84 <getSoscConfig+0x8c>)
    4f70:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4f72:	4b04      	ldr	r3, [pc, #16]	; (4f84 <getSoscConfig+0x8c>)
    4f74:	4a05      	ldr	r2, [pc, #20]	; (4f8c <getSoscConfig+0x94>)
    4f76:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4f78:	9b00      	ldr	r3, [sp, #0]
}
    4f7a:	4618      	mov	r0, r3
    4f7c:	b002      	add	sp, #8
    4f7e:	4770      	bx	lr
    4f80:	1fff8b9c 	.word	0x1fff8b9c
    4f84:	1fff8c14 	.word	0x1fff8c14
    4f88:	40064000 	.word	0x40064000
    4f8c:	02625a00 	.word	0x02625a00

00004f90 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4f90:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4f92:	2300      	movs	r3, #0
    4f94:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4f96:	4b28      	ldr	r3, [pc, #160]	; (5038 <getSpllConfig+0xa8>)
    4f98:	681b      	ldr	r3, [r3, #0]
    4f9a:	2b00      	cmp	r3, #0
    4f9c:	d023      	beq.n	4fe6 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4f9e:	2300      	movs	r3, #0
    4fa0:	9301      	str	r3, [sp, #4]
    4fa2:	e019      	b.n	4fd8 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4fa4:	4b24      	ldr	r3, [pc, #144]	; (5038 <getSpllConfig+0xa8>)
    4fa6:	6819      	ldr	r1, [r3, #0]
    4fa8:	9a01      	ldr	r2, [sp, #4]
    4faa:	4613      	mov	r3, r2
    4fac:	009b      	lsls	r3, r3, #2
    4fae:	4413      	add	r3, r2
    4fb0:	00db      	lsls	r3, r3, #3
    4fb2:	440b      	add	r3, r1
    4fb4:	3340      	adds	r3, #64	; 0x40
    4fb6:	681b      	ldr	r3, [r3, #0]
    4fb8:	2b09      	cmp	r3, #9
    4fba:	d10a      	bne.n	4fd2 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4fbc:	4b1e      	ldr	r3, [pc, #120]	; (5038 <getSpllConfig+0xa8>)
    4fbe:	6819      	ldr	r1, [r3, #0]
    4fc0:	9a01      	ldr	r2, [sp, #4]
    4fc2:	4613      	mov	r3, r2
    4fc4:	009b      	lsls	r3, r3, #2
    4fc6:	4413      	add	r3, r2
    4fc8:	00db      	lsls	r3, r3, #3
    4fca:	3340      	adds	r3, #64	; 0x40
    4fcc:	440b      	add	r3, r1
    4fce:	9300      	str	r3, [sp, #0]
                break;
    4fd0:	e009      	b.n	4fe6 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4fd2:	9b01      	ldr	r3, [sp, #4]
    4fd4:	3301      	adds	r3, #1
    4fd6:	9301      	str	r3, [sp, #4]
    4fd8:	4b17      	ldr	r3, [pc, #92]	; (5038 <getSpllConfig+0xa8>)
    4fda:	681b      	ldr	r3, [r3, #0]
    4fdc:	7a9b      	ldrb	r3, [r3, #10]
    4fde:	461a      	mov	r2, r3
    4fe0:	9b01      	ldr	r3, [sp, #4]
    4fe2:	4293      	cmp	r3, r2
    4fe4:	d3de      	bcc.n	4fa4 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4fe6:	9b00      	ldr	r3, [sp, #0]
    4fe8:	2b00      	cmp	r3, #0
    4fea:	d121      	bne.n	5030 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4fec:	4b13      	ldr	r3, [pc, #76]	; (503c <getSpllConfig+0xac>)
    4fee:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4ff0:	4b12      	ldr	r3, [pc, #72]	; (503c <getSpllConfig+0xac>)
    4ff2:	2209      	movs	r2, #9
    4ff4:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4ff6:	4b12      	ldr	r3, [pc, #72]	; (5040 <getSpllConfig+0xb0>)
    4ff8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4ffc:	b29b      	uxth	r3, r3
    4ffe:	f003 0301 	and.w	r3, r3, #1
    5002:	b29a      	uxth	r2, r3
    5004:	4b0d      	ldr	r3, [pc, #52]	; (503c <getSpllConfig+0xac>)
    5006:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    5008:	4b0d      	ldr	r3, [pc, #52]	; (5040 <getSpllConfig+0xb0>)
    500a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    500e:	0a1b      	lsrs	r3, r3, #8
    5010:	b2db      	uxtb	r3, r3
    5012:	f003 0307 	and.w	r3, r3, #7
    5016:	b2da      	uxtb	r2, r3
    5018:	4b08      	ldr	r3, [pc, #32]	; (503c <getSpllConfig+0xac>)
    501a:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    501c:	4b08      	ldr	r3, [pc, #32]	; (5040 <getSpllConfig+0xb0>)
    501e:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    5022:	0c1b      	lsrs	r3, r3, #16
    5024:	b2db      	uxtb	r3, r3
    5026:	f003 031f 	and.w	r3, r3, #31
    502a:	b2da      	uxtb	r2, r3
    502c:	4b03      	ldr	r3, [pc, #12]	; (503c <getSpllConfig+0xac>)
    502e:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    5030:	9b00      	ldr	r3, [sp, #0]
}
    5032:	4618      	mov	r0, r3
    5034:	b002      	add	sp, #8
    5036:	4770      	bx	lr
    5038:	1fff8b9c 	.word	0x1fff8b9c
    503c:	1fff8c28 	.word	0x1fff8c28
    5040:	40064000 	.word	0x40064000

00005044 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    5044:	b086      	sub	sp, #24
    5046:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    5048:	2300      	movs	r3, #0
    504a:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    504c:	9b01      	ldr	r3, [sp, #4]
    504e:	2b1b      	cmp	r3, #27
    5050:	d00f      	beq.n	5072 <getSelectorConfig+0x2e>
    5052:	9b01      	ldr	r3, [sp, #4]
    5054:	2b1b      	cmp	r3, #27
    5056:	d80f      	bhi.n	5078 <getSelectorConfig+0x34>
    5058:	9b01      	ldr	r3, [sp, #4]
    505a:	2b19      	cmp	r3, #25
    505c:	d003      	beq.n	5066 <getSelectorConfig+0x22>
    505e:	9b01      	ldr	r3, [sp, #4]
    5060:	2b1a      	cmp	r3, #26
    5062:	d003      	beq.n	506c <getSelectorConfig+0x28>
    5064:	e008      	b.n	5078 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    5066:	2300      	movs	r3, #0
    5068:	9304      	str	r3, [sp, #16]
            break;
    506a:	e008      	b.n	507e <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    506c:	2301      	movs	r3, #1
    506e:	9304      	str	r3, [sp, #16]
            break;
    5070:	e005      	b.n	507e <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    5072:	2302      	movs	r3, #2
    5074:	9304      	str	r3, [sp, #16]
            break;
    5076:	e002      	b.n	507e <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    5078:	2300      	movs	r3, #0
    507a:	9304      	str	r3, [sp, #16]
            break;
    507c:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    507e:	4b36      	ldr	r3, [pc, #216]	; (5158 <getSelectorConfig+0x114>)
    5080:	681b      	ldr	r3, [r3, #0]
    5082:	2b00      	cmp	r3, #0
    5084:	d01d      	beq.n	50c2 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    5086:	2300      	movs	r3, #0
    5088:	9303      	str	r3, [sp, #12]
    508a:	e013      	b.n	50b4 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    508c:	4b32      	ldr	r3, [pc, #200]	; (5158 <getSelectorConfig+0x114>)
    508e:	681b      	ldr	r3, [r3, #0]
    5090:	9a03      	ldr	r2, [sp, #12]
    5092:	320d      	adds	r2, #13
    5094:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    5098:	9a01      	ldr	r2, [sp, #4]
    509a:	429a      	cmp	r2, r3
    509c:	d107      	bne.n	50ae <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    509e:	4b2e      	ldr	r3, [pc, #184]	; (5158 <getSelectorConfig+0x114>)
    50a0:	681a      	ldr	r2, [r3, #0]
    50a2:	9b03      	ldr	r3, [sp, #12]
    50a4:	330d      	adds	r3, #13
    50a6:	00db      	lsls	r3, r3, #3
    50a8:	4413      	add	r3, r2
    50aa:	9305      	str	r3, [sp, #20]
                break;
    50ac:	e009      	b.n	50c2 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    50ae:	9b03      	ldr	r3, [sp, #12]
    50b0:	3301      	adds	r3, #1
    50b2:	9303      	str	r3, [sp, #12]
    50b4:	4b28      	ldr	r3, [pc, #160]	; (5158 <getSelectorConfig+0x114>)
    50b6:	681b      	ldr	r3, [r3, #0]
    50b8:	7adb      	ldrb	r3, [r3, #11]
    50ba:	461a      	mov	r2, r3
    50bc:	9b03      	ldr	r3, [sp, #12]
    50be:	4293      	cmp	r3, r2
    50c0:	d3e4      	bcc.n	508c <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    50c2:	9b05      	ldr	r3, [sp, #20]
    50c4:	2b00      	cmp	r3, #0
    50c6:	d140      	bne.n	514a <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    50c8:	9b04      	ldr	r3, [sp, #16]
    50ca:	00db      	lsls	r3, r3, #3
    50cc:	4a23      	ldr	r2, [pc, #140]	; (515c <getSelectorConfig+0x118>)
    50ce:	4413      	add	r3, r2
    50d0:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    50d2:	4922      	ldr	r1, [pc, #136]	; (515c <getSelectorConfig+0x118>)
    50d4:	9b04      	ldr	r3, [sp, #16]
    50d6:	9a01      	ldr	r2, [sp, #4]
    50d8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    50dc:	9b01      	ldr	r3, [sp, #4]
    50de:	2b1b      	cmp	r3, #27
    50e0:	d025      	beq.n	512e <getSelectorConfig+0xea>
    50e2:	9b01      	ldr	r3, [sp, #4]
    50e4:	2b1b      	cmp	r3, #27
    50e6:	d832      	bhi.n	514e <getSelectorConfig+0x10a>
    50e8:	9b01      	ldr	r3, [sp, #4]
    50ea:	2b19      	cmp	r3, #25
    50ec:	d003      	beq.n	50f6 <getSelectorConfig+0xb2>
    50ee:	9b01      	ldr	r3, [sp, #4]
    50f0:	2b1a      	cmp	r3, #26
    50f2:	d00e      	beq.n	5112 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    50f4:	e02b      	b.n	514e <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    50f6:	4b1a      	ldr	r3, [pc, #104]	; (5160 <getSelectorConfig+0x11c>)
    50f8:	695b      	ldr	r3, [r3, #20]
    50fa:	0e1b      	lsrs	r3, r3, #24
    50fc:	f003 030f 	and.w	r3, r3, #15
    5100:	4a18      	ldr	r2, [pc, #96]	; (5164 <getSelectorConfig+0x120>)
    5102:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5106:	4915      	ldr	r1, [pc, #84]	; (515c <getSelectorConfig+0x118>)
    5108:	9b04      	ldr	r3, [sp, #16]
    510a:	00db      	lsls	r3, r3, #3
    510c:	440b      	add	r3, r1
    510e:	605a      	str	r2, [r3, #4]
                break;
    5110:	e01e      	b.n	5150 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    5112:	4b13      	ldr	r3, [pc, #76]	; (5160 <getSelectorConfig+0x11c>)
    5114:	699b      	ldr	r3, [r3, #24]
    5116:	0e1b      	lsrs	r3, r3, #24
    5118:	f003 030f 	and.w	r3, r3, #15
    511c:	4a11      	ldr	r2, [pc, #68]	; (5164 <getSelectorConfig+0x120>)
    511e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5122:	490e      	ldr	r1, [pc, #56]	; (515c <getSelectorConfig+0x118>)
    5124:	9b04      	ldr	r3, [sp, #16]
    5126:	00db      	lsls	r3, r3, #3
    5128:	440b      	add	r3, r1
    512a:	605a      	str	r2, [r3, #4]
                break;
    512c:	e010      	b.n	5150 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    512e:	4b0c      	ldr	r3, [pc, #48]	; (5160 <getSelectorConfig+0x11c>)
    5130:	69db      	ldr	r3, [r3, #28]
    5132:	0e1b      	lsrs	r3, r3, #24
    5134:	f003 030f 	and.w	r3, r3, #15
    5138:	4a0a      	ldr	r2, [pc, #40]	; (5164 <getSelectorConfig+0x120>)
    513a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    513e:	4907      	ldr	r1, [pc, #28]	; (515c <getSelectorConfig+0x118>)
    5140:	9b04      	ldr	r3, [sp, #16]
    5142:	00db      	lsls	r3, r3, #3
    5144:	440b      	add	r3, r1
    5146:	605a      	str	r2, [r3, #4]
                break;
    5148:	e002      	b.n	5150 <getSelectorConfig+0x10c>
        }
    }
    514a:	bf00      	nop
    514c:	e000      	b.n	5150 <getSelectorConfig+0x10c>
                break;
    514e:	bf00      	nop

    return ReturnValue;
    5150:	9b05      	ldr	r3, [sp, #20]
}
    5152:	4618      	mov	r0, r3
    5154:	b006      	add	sp, #24
    5156:	4770      	bx	lr
    5158:	1fff8b9c 	.word	0x1fff8b9c
    515c:	1fff8c50 	.word	0x1fff8c50
    5160:	40064000 	.word	0x40064000
    5164:	000185a4 	.word	0x000185a4

00005168 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    5168:	b086      	sub	sp, #24
    516a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    516c:	2300      	movs	r3, #0
    516e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5170:	2300      	movs	r3, #0
    5172:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5174:	9b01      	ldr	r3, [sp, #4]
    5176:	2b1f      	cmp	r3, #31
    5178:	d00f      	beq.n	519a <getCoreDividerConfig+0x32>
    517a:	9b01      	ldr	r3, [sp, #4]
    517c:	2b1f      	cmp	r3, #31
    517e:	d80f      	bhi.n	51a0 <getCoreDividerConfig+0x38>
    5180:	9b01      	ldr	r3, [sp, #4]
    5182:	2b1d      	cmp	r3, #29
    5184:	d003      	beq.n	518e <getCoreDividerConfig+0x26>
    5186:	9b01      	ldr	r3, [sp, #4]
    5188:	2b1e      	cmp	r3, #30
    518a:	d003      	beq.n	5194 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    518c:	e008      	b.n	51a0 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    518e:	2300      	movs	r3, #0
    5190:	9304      	str	r3, [sp, #16]
            break;
    5192:	e006      	b.n	51a2 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5194:	2301      	movs	r3, #1
    5196:	9304      	str	r3, [sp, #16]
            break;
    5198:	e003      	b.n	51a2 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    519a:	2302      	movs	r3, #2
    519c:	9304      	str	r3, [sp, #16]
            break;
    519e:	e000      	b.n	51a2 <getCoreDividerConfig+0x3a>
                break;
    51a0:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    51a2:	4b41      	ldr	r3, [pc, #260]	; (52a8 <getCoreDividerConfig+0x140>)
    51a4:	681b      	ldr	r3, [r3, #0]
    51a6:	2b00      	cmp	r3, #0
    51a8:	d026      	beq.n	51f8 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    51aa:	2300      	movs	r3, #0
    51ac:	9303      	str	r3, [sp, #12]
    51ae:	e01c      	b.n	51ea <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    51b0:	4b3d      	ldr	r3, [pc, #244]	; (52a8 <getCoreDividerConfig+0x140>)
    51b2:	6819      	ldr	r1, [r3, #0]
    51b4:	9a03      	ldr	r2, [sp, #12]
    51b6:	4613      	mov	r3, r2
    51b8:	005b      	lsls	r3, r3, #1
    51ba:	4413      	add	r3, r2
    51bc:	009b      	lsls	r3, r3, #2
    51be:	440b      	add	r3, r1
    51c0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    51c4:	681b      	ldr	r3, [r3, #0]
    51c6:	9a01      	ldr	r2, [sp, #4]
    51c8:	429a      	cmp	r2, r3
    51ca:	d10b      	bne.n	51e4 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    51cc:	4b36      	ldr	r3, [pc, #216]	; (52a8 <getCoreDividerConfig+0x140>)
    51ce:	6819      	ldr	r1, [r3, #0]
    51d0:	9a03      	ldr	r2, [sp, #12]
    51d2:	4613      	mov	r3, r2
    51d4:	005b      	lsls	r3, r3, #1
    51d6:	4413      	add	r3, r2
    51d8:	009b      	lsls	r3, r3, #2
    51da:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    51de:	440b      	add	r3, r1
    51e0:	9305      	str	r3, [sp, #20]
                break;
    51e2:	e009      	b.n	51f8 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    51e4:	9b03      	ldr	r3, [sp, #12]
    51e6:	3301      	adds	r3, #1
    51e8:	9303      	str	r3, [sp, #12]
    51ea:	4b2f      	ldr	r3, [pc, #188]	; (52a8 <getCoreDividerConfig+0x140>)
    51ec:	681b      	ldr	r3, [r3, #0]
    51ee:	7b1b      	ldrb	r3, [r3, #12]
    51f0:	461a      	mov	r2, r3
    51f2:	9b03      	ldr	r3, [sp, #12]
    51f4:	4293      	cmp	r3, r2
    51f6:	d3db      	bcc.n	51b0 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    51f8:	9b05      	ldr	r3, [sp, #20]
    51fa:	2b00      	cmp	r3, #0
    51fc:	d14d      	bne.n	529a <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    51fe:	9a04      	ldr	r2, [sp, #16]
    5200:	4613      	mov	r3, r2
    5202:	005b      	lsls	r3, r3, #1
    5204:	4413      	add	r3, r2
    5206:	009b      	lsls	r3, r3, #2
    5208:	4a28      	ldr	r2, [pc, #160]	; (52ac <getCoreDividerConfig+0x144>)
    520a:	4413      	add	r3, r2
    520c:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    520e:	4927      	ldr	r1, [pc, #156]	; (52ac <getCoreDividerConfig+0x144>)
    5210:	9a04      	ldr	r2, [sp, #16]
    5212:	4613      	mov	r3, r2
    5214:	005b      	lsls	r3, r3, #1
    5216:	4413      	add	r3, r2
    5218:	009b      	lsls	r3, r3, #2
    521a:	440b      	add	r3, r1
    521c:	9a01      	ldr	r2, [sp, #4]
    521e:	601a      	str	r2, [r3, #0]
        switch(Name)
    5220:	9b01      	ldr	r3, [sp, #4]
    5222:	2b1f      	cmp	r3, #31
    5224:	d029      	beq.n	527a <getCoreDividerConfig+0x112>
    5226:	9b01      	ldr	r3, [sp, #4]
    5228:	2b1f      	cmp	r3, #31
    522a:	d838      	bhi.n	529e <getCoreDividerConfig+0x136>
    522c:	9b01      	ldr	r3, [sp, #4]
    522e:	2b1d      	cmp	r3, #29
    5230:	d003      	beq.n	523a <getCoreDividerConfig+0xd2>
    5232:	9b01      	ldr	r3, [sp, #4]
    5234:	2b1e      	cmp	r3, #30
    5236:	d010      	beq.n	525a <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5238:	e031      	b.n	529e <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    523a:	4b1d      	ldr	r3, [pc, #116]	; (52b0 <getCoreDividerConfig+0x148>)
    523c:	695b      	ldr	r3, [r3, #20]
    523e:	0c1b      	lsrs	r3, r3, #16
    5240:	f003 030f 	and.w	r3, r3, #15
    5244:	1c59      	adds	r1, r3, #1
    5246:	4819      	ldr	r0, [pc, #100]	; (52ac <getCoreDividerConfig+0x144>)
    5248:	9a04      	ldr	r2, [sp, #16]
    524a:	4613      	mov	r3, r2
    524c:	005b      	lsls	r3, r3, #1
    524e:	4413      	add	r3, r2
    5250:	009b      	lsls	r3, r3, #2
    5252:	4403      	add	r3, r0
    5254:	3304      	adds	r3, #4
    5256:	6019      	str	r1, [r3, #0]
                break;
    5258:	e022      	b.n	52a0 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    525a:	4b15      	ldr	r3, [pc, #84]	; (52b0 <getCoreDividerConfig+0x148>)
    525c:	699b      	ldr	r3, [r3, #24]
    525e:	0c1b      	lsrs	r3, r3, #16
    5260:	f003 030f 	and.w	r3, r3, #15
    5264:	1c59      	adds	r1, r3, #1
    5266:	4811      	ldr	r0, [pc, #68]	; (52ac <getCoreDividerConfig+0x144>)
    5268:	9a04      	ldr	r2, [sp, #16]
    526a:	4613      	mov	r3, r2
    526c:	005b      	lsls	r3, r3, #1
    526e:	4413      	add	r3, r2
    5270:	009b      	lsls	r3, r3, #2
    5272:	4403      	add	r3, r0
    5274:	3304      	adds	r3, #4
    5276:	6019      	str	r1, [r3, #0]
                break;
    5278:	e012      	b.n	52a0 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    527a:	4b0d      	ldr	r3, [pc, #52]	; (52b0 <getCoreDividerConfig+0x148>)
    527c:	69db      	ldr	r3, [r3, #28]
    527e:	0c1b      	lsrs	r3, r3, #16
    5280:	f003 030f 	and.w	r3, r3, #15
    5284:	1c59      	adds	r1, r3, #1
    5286:	4809      	ldr	r0, [pc, #36]	; (52ac <getCoreDividerConfig+0x144>)
    5288:	9a04      	ldr	r2, [sp, #16]
    528a:	4613      	mov	r3, r2
    528c:	005b      	lsls	r3, r3, #1
    528e:	4413      	add	r3, r2
    5290:	009b      	lsls	r3, r3, #2
    5292:	4403      	add	r3, r0
    5294:	3304      	adds	r3, #4
    5296:	6019      	str	r1, [r3, #0]
                break;
    5298:	e002      	b.n	52a0 <getCoreDividerConfig+0x138>
        }
    }
    529a:	bf00      	nop
    529c:	e000      	b.n	52a0 <getCoreDividerConfig+0x138>
                break;
    529e:	bf00      	nop

    return ReturnValue;
    52a0:	9b05      	ldr	r3, [sp, #20]
}
    52a2:	4618      	mov	r0, r3
    52a4:	b006      	add	sp, #24
    52a6:	4770      	bx	lr
    52a8:	1fff8b9c 	.word	0x1fff8b9c
    52ac:	1fff8c68 	.word	0x1fff8c68
    52b0:	40064000 	.word	0x40064000

000052b4 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    52b4:	b086      	sub	sp, #24
    52b6:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    52b8:	2300      	movs	r3, #0
    52ba:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    52bc:	2300      	movs	r3, #0
    52be:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    52c0:	9b01      	ldr	r3, [sp, #4]
    52c2:	2b23      	cmp	r3, #35	; 0x23
    52c4:	d00f      	beq.n	52e6 <getBusDividerConfig+0x32>
    52c6:	9b01      	ldr	r3, [sp, #4]
    52c8:	2b23      	cmp	r3, #35	; 0x23
    52ca:	d80f      	bhi.n	52ec <getBusDividerConfig+0x38>
    52cc:	9b01      	ldr	r3, [sp, #4]
    52ce:	2b21      	cmp	r3, #33	; 0x21
    52d0:	d003      	beq.n	52da <getBusDividerConfig+0x26>
    52d2:	9b01      	ldr	r3, [sp, #4]
    52d4:	2b22      	cmp	r3, #34	; 0x22
    52d6:	d003      	beq.n	52e0 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    52d8:	e008      	b.n	52ec <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    52da:	2300      	movs	r3, #0
    52dc:	9304      	str	r3, [sp, #16]
            break;
    52de:	e006      	b.n	52ee <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    52e0:	2301      	movs	r3, #1
    52e2:	9304      	str	r3, [sp, #16]
            break;
    52e4:	e003      	b.n	52ee <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    52e6:	2302      	movs	r3, #2
    52e8:	9304      	str	r3, [sp, #16]
            break;
    52ea:	e000      	b.n	52ee <getBusDividerConfig+0x3a>
                break;
    52ec:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    52ee:	4b41      	ldr	r3, [pc, #260]	; (53f4 <getBusDividerConfig+0x140>)
    52f0:	681b      	ldr	r3, [r3, #0]
    52f2:	2b00      	cmp	r3, #0
    52f4:	d026      	beq.n	5344 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    52f6:	2300      	movs	r3, #0
    52f8:	9303      	str	r3, [sp, #12]
    52fa:	e01c      	b.n	5336 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    52fc:	4b3d      	ldr	r3, [pc, #244]	; (53f4 <getBusDividerConfig+0x140>)
    52fe:	6819      	ldr	r1, [r3, #0]
    5300:	9a03      	ldr	r2, [sp, #12]
    5302:	4613      	mov	r3, r2
    5304:	005b      	lsls	r3, r3, #1
    5306:	4413      	add	r3, r2
    5308:	009b      	lsls	r3, r3, #2
    530a:	440b      	add	r3, r1
    530c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5310:	681b      	ldr	r3, [r3, #0]
    5312:	9a01      	ldr	r2, [sp, #4]
    5314:	429a      	cmp	r2, r3
    5316:	d10b      	bne.n	5330 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5318:	4b36      	ldr	r3, [pc, #216]	; (53f4 <getBusDividerConfig+0x140>)
    531a:	6819      	ldr	r1, [r3, #0]
    531c:	9a03      	ldr	r2, [sp, #12]
    531e:	4613      	mov	r3, r2
    5320:	005b      	lsls	r3, r3, #1
    5322:	4413      	add	r3, r2
    5324:	009b      	lsls	r3, r3, #2
    5326:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    532a:	440b      	add	r3, r1
    532c:	9305      	str	r3, [sp, #20]
                break;
    532e:	e009      	b.n	5344 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5330:	9b03      	ldr	r3, [sp, #12]
    5332:	3301      	adds	r3, #1
    5334:	9303      	str	r3, [sp, #12]
    5336:	4b2f      	ldr	r3, [pc, #188]	; (53f4 <getBusDividerConfig+0x140>)
    5338:	681b      	ldr	r3, [r3, #0]
    533a:	7b1b      	ldrb	r3, [r3, #12]
    533c:	461a      	mov	r2, r3
    533e:	9b03      	ldr	r3, [sp, #12]
    5340:	4293      	cmp	r3, r2
    5342:	d3db      	bcc.n	52fc <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5344:	9b05      	ldr	r3, [sp, #20]
    5346:	2b00      	cmp	r3, #0
    5348:	d14d      	bne.n	53e6 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    534a:	9a04      	ldr	r2, [sp, #16]
    534c:	4613      	mov	r3, r2
    534e:	005b      	lsls	r3, r3, #1
    5350:	4413      	add	r3, r2
    5352:	009b      	lsls	r3, r3, #2
    5354:	4a28      	ldr	r2, [pc, #160]	; (53f8 <getBusDividerConfig+0x144>)
    5356:	4413      	add	r3, r2
    5358:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    535a:	4927      	ldr	r1, [pc, #156]	; (53f8 <getBusDividerConfig+0x144>)
    535c:	9a04      	ldr	r2, [sp, #16]
    535e:	4613      	mov	r3, r2
    5360:	005b      	lsls	r3, r3, #1
    5362:	4413      	add	r3, r2
    5364:	009b      	lsls	r3, r3, #2
    5366:	440b      	add	r3, r1
    5368:	9a01      	ldr	r2, [sp, #4]
    536a:	601a      	str	r2, [r3, #0]
        switch(Name)
    536c:	9b01      	ldr	r3, [sp, #4]
    536e:	2b23      	cmp	r3, #35	; 0x23
    5370:	d029      	beq.n	53c6 <getBusDividerConfig+0x112>
    5372:	9b01      	ldr	r3, [sp, #4]
    5374:	2b23      	cmp	r3, #35	; 0x23
    5376:	d838      	bhi.n	53ea <getBusDividerConfig+0x136>
    5378:	9b01      	ldr	r3, [sp, #4]
    537a:	2b21      	cmp	r3, #33	; 0x21
    537c:	d003      	beq.n	5386 <getBusDividerConfig+0xd2>
    537e:	9b01      	ldr	r3, [sp, #4]
    5380:	2b22      	cmp	r3, #34	; 0x22
    5382:	d010      	beq.n	53a6 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5384:	e031      	b.n	53ea <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    5386:	4b1d      	ldr	r3, [pc, #116]	; (53fc <getBusDividerConfig+0x148>)
    5388:	695b      	ldr	r3, [r3, #20]
    538a:	091b      	lsrs	r3, r3, #4
    538c:	f003 030f 	and.w	r3, r3, #15
    5390:	1c59      	adds	r1, r3, #1
    5392:	4819      	ldr	r0, [pc, #100]	; (53f8 <getBusDividerConfig+0x144>)
    5394:	9a04      	ldr	r2, [sp, #16]
    5396:	4613      	mov	r3, r2
    5398:	005b      	lsls	r3, r3, #1
    539a:	4413      	add	r3, r2
    539c:	009b      	lsls	r3, r3, #2
    539e:	4403      	add	r3, r0
    53a0:	3304      	adds	r3, #4
    53a2:	6019      	str	r1, [r3, #0]
                break;
    53a4:	e022      	b.n	53ec <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    53a6:	4b15      	ldr	r3, [pc, #84]	; (53fc <getBusDividerConfig+0x148>)
    53a8:	699b      	ldr	r3, [r3, #24]
    53aa:	091b      	lsrs	r3, r3, #4
    53ac:	f003 030f 	and.w	r3, r3, #15
    53b0:	1c59      	adds	r1, r3, #1
    53b2:	4811      	ldr	r0, [pc, #68]	; (53f8 <getBusDividerConfig+0x144>)
    53b4:	9a04      	ldr	r2, [sp, #16]
    53b6:	4613      	mov	r3, r2
    53b8:	005b      	lsls	r3, r3, #1
    53ba:	4413      	add	r3, r2
    53bc:	009b      	lsls	r3, r3, #2
    53be:	4403      	add	r3, r0
    53c0:	3304      	adds	r3, #4
    53c2:	6019      	str	r1, [r3, #0]
                break;
    53c4:	e012      	b.n	53ec <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    53c6:	4b0d      	ldr	r3, [pc, #52]	; (53fc <getBusDividerConfig+0x148>)
    53c8:	69db      	ldr	r3, [r3, #28]
    53ca:	091b      	lsrs	r3, r3, #4
    53cc:	f003 030f 	and.w	r3, r3, #15
    53d0:	1c59      	adds	r1, r3, #1
    53d2:	4809      	ldr	r0, [pc, #36]	; (53f8 <getBusDividerConfig+0x144>)
    53d4:	9a04      	ldr	r2, [sp, #16]
    53d6:	4613      	mov	r3, r2
    53d8:	005b      	lsls	r3, r3, #1
    53da:	4413      	add	r3, r2
    53dc:	009b      	lsls	r3, r3, #2
    53de:	4403      	add	r3, r0
    53e0:	3304      	adds	r3, #4
    53e2:	6019      	str	r1, [r3, #0]
                break;
    53e4:	e002      	b.n	53ec <getBusDividerConfig+0x138>
        }
    }
    53e6:	bf00      	nop
    53e8:	e000      	b.n	53ec <getBusDividerConfig+0x138>
                break;
    53ea:	bf00      	nop

    return ReturnValue;
    53ec:	9b05      	ldr	r3, [sp, #20]
}
    53ee:	4618      	mov	r0, r3
    53f0:	b006      	add	sp, #24
    53f2:	4770      	bx	lr
    53f4:	1fff8b9c 	.word	0x1fff8b9c
    53f8:	1fff8c8c 	.word	0x1fff8c8c
    53fc:	40064000 	.word	0x40064000

00005400 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    5400:	b086      	sub	sp, #24
    5402:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5404:	2300      	movs	r3, #0
    5406:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5408:	2300      	movs	r3, #0
    540a:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    540c:	9b01      	ldr	r3, [sp, #4]
    540e:	2b27      	cmp	r3, #39	; 0x27
    5410:	d00f      	beq.n	5432 <getSlowDividerConfig+0x32>
    5412:	9b01      	ldr	r3, [sp, #4]
    5414:	2b27      	cmp	r3, #39	; 0x27
    5416:	d80f      	bhi.n	5438 <getSlowDividerConfig+0x38>
    5418:	9b01      	ldr	r3, [sp, #4]
    541a:	2b25      	cmp	r3, #37	; 0x25
    541c:	d003      	beq.n	5426 <getSlowDividerConfig+0x26>
    541e:	9b01      	ldr	r3, [sp, #4]
    5420:	2b26      	cmp	r3, #38	; 0x26
    5422:	d003      	beq.n	542c <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5424:	e008      	b.n	5438 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5426:	2300      	movs	r3, #0
    5428:	9304      	str	r3, [sp, #16]
            break;
    542a:	e006      	b.n	543a <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    542c:	2301      	movs	r3, #1
    542e:	9304      	str	r3, [sp, #16]
            break;
    5430:	e003      	b.n	543a <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5432:	2302      	movs	r3, #2
    5434:	9304      	str	r3, [sp, #16]
            break;
    5436:	e000      	b.n	543a <getSlowDividerConfig+0x3a>
                break;
    5438:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    543a:	4b40      	ldr	r3, [pc, #256]	; (553c <getSlowDividerConfig+0x13c>)
    543c:	681b      	ldr	r3, [r3, #0]
    543e:	2b00      	cmp	r3, #0
    5440:	d026      	beq.n	5490 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5442:	2300      	movs	r3, #0
    5444:	9303      	str	r3, [sp, #12]
    5446:	e01c      	b.n	5482 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5448:	4b3c      	ldr	r3, [pc, #240]	; (553c <getSlowDividerConfig+0x13c>)
    544a:	6819      	ldr	r1, [r3, #0]
    544c:	9a03      	ldr	r2, [sp, #12]
    544e:	4613      	mov	r3, r2
    5450:	005b      	lsls	r3, r3, #1
    5452:	4413      	add	r3, r2
    5454:	009b      	lsls	r3, r3, #2
    5456:	440b      	add	r3, r1
    5458:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    545c:	681b      	ldr	r3, [r3, #0]
    545e:	9a01      	ldr	r2, [sp, #4]
    5460:	429a      	cmp	r2, r3
    5462:	d10b      	bne.n	547c <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5464:	4b35      	ldr	r3, [pc, #212]	; (553c <getSlowDividerConfig+0x13c>)
    5466:	6819      	ldr	r1, [r3, #0]
    5468:	9a03      	ldr	r2, [sp, #12]
    546a:	4613      	mov	r3, r2
    546c:	005b      	lsls	r3, r3, #1
    546e:	4413      	add	r3, r2
    5470:	009b      	lsls	r3, r3, #2
    5472:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5476:	440b      	add	r3, r1
    5478:	9305      	str	r3, [sp, #20]
                break;
    547a:	e009      	b.n	5490 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    547c:	9b03      	ldr	r3, [sp, #12]
    547e:	3301      	adds	r3, #1
    5480:	9303      	str	r3, [sp, #12]
    5482:	4b2e      	ldr	r3, [pc, #184]	; (553c <getSlowDividerConfig+0x13c>)
    5484:	681b      	ldr	r3, [r3, #0]
    5486:	7b1b      	ldrb	r3, [r3, #12]
    5488:	461a      	mov	r2, r3
    548a:	9b03      	ldr	r3, [sp, #12]
    548c:	4293      	cmp	r3, r2
    548e:	d3db      	bcc.n	5448 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5490:	9b05      	ldr	r3, [sp, #20]
    5492:	2b00      	cmp	r3, #0
    5494:	d14a      	bne.n	552c <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    5496:	9a04      	ldr	r2, [sp, #16]
    5498:	4613      	mov	r3, r2
    549a:	005b      	lsls	r3, r3, #1
    549c:	4413      	add	r3, r2
    549e:	009b      	lsls	r3, r3, #2
    54a0:	4a27      	ldr	r2, [pc, #156]	; (5540 <getSlowDividerConfig+0x140>)
    54a2:	4413      	add	r3, r2
    54a4:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    54a6:	4926      	ldr	r1, [pc, #152]	; (5540 <getSlowDividerConfig+0x140>)
    54a8:	9a04      	ldr	r2, [sp, #16]
    54aa:	4613      	mov	r3, r2
    54ac:	005b      	lsls	r3, r3, #1
    54ae:	4413      	add	r3, r2
    54b0:	009b      	lsls	r3, r3, #2
    54b2:	440b      	add	r3, r1
    54b4:	9a01      	ldr	r2, [sp, #4]
    54b6:	601a      	str	r2, [r3, #0]
        switch(Name)
    54b8:	9b01      	ldr	r3, [sp, #4]
    54ba:	2b27      	cmp	r3, #39	; 0x27
    54bc:	d027      	beq.n	550e <getSlowDividerConfig+0x10e>
    54be:	9b01      	ldr	r3, [sp, #4]
    54c0:	2b27      	cmp	r3, #39	; 0x27
    54c2:	d835      	bhi.n	5530 <getSlowDividerConfig+0x130>
    54c4:	9b01      	ldr	r3, [sp, #4]
    54c6:	2b25      	cmp	r3, #37	; 0x25
    54c8:	d003      	beq.n	54d2 <getSlowDividerConfig+0xd2>
    54ca:	9b01      	ldr	r3, [sp, #4]
    54cc:	2b26      	cmp	r3, #38	; 0x26
    54ce:	d00f      	beq.n	54f0 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    54d0:	e02e      	b.n	5530 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    54d2:	4b1c      	ldr	r3, [pc, #112]	; (5544 <getSlowDividerConfig+0x144>)
    54d4:	695b      	ldr	r3, [r3, #20]
    54d6:	f003 030f 	and.w	r3, r3, #15
    54da:	1c59      	adds	r1, r3, #1
    54dc:	4818      	ldr	r0, [pc, #96]	; (5540 <getSlowDividerConfig+0x140>)
    54de:	9a04      	ldr	r2, [sp, #16]
    54e0:	4613      	mov	r3, r2
    54e2:	005b      	lsls	r3, r3, #1
    54e4:	4413      	add	r3, r2
    54e6:	009b      	lsls	r3, r3, #2
    54e8:	4403      	add	r3, r0
    54ea:	3304      	adds	r3, #4
    54ec:	6019      	str	r1, [r3, #0]
                break;
    54ee:	e020      	b.n	5532 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    54f0:	4b14      	ldr	r3, [pc, #80]	; (5544 <getSlowDividerConfig+0x144>)
    54f2:	699b      	ldr	r3, [r3, #24]
    54f4:	f003 030f 	and.w	r3, r3, #15
    54f8:	1c59      	adds	r1, r3, #1
    54fa:	4811      	ldr	r0, [pc, #68]	; (5540 <getSlowDividerConfig+0x140>)
    54fc:	9a04      	ldr	r2, [sp, #16]
    54fe:	4613      	mov	r3, r2
    5500:	005b      	lsls	r3, r3, #1
    5502:	4413      	add	r3, r2
    5504:	009b      	lsls	r3, r3, #2
    5506:	4403      	add	r3, r0
    5508:	3304      	adds	r3, #4
    550a:	6019      	str	r1, [r3, #0]
                break;
    550c:	e011      	b.n	5532 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    550e:	4b0d      	ldr	r3, [pc, #52]	; (5544 <getSlowDividerConfig+0x144>)
    5510:	69db      	ldr	r3, [r3, #28]
    5512:	f003 030f 	and.w	r3, r3, #15
    5516:	1c59      	adds	r1, r3, #1
    5518:	4809      	ldr	r0, [pc, #36]	; (5540 <getSlowDividerConfig+0x140>)
    551a:	9a04      	ldr	r2, [sp, #16]
    551c:	4613      	mov	r3, r2
    551e:	005b      	lsls	r3, r3, #1
    5520:	4413      	add	r3, r2
    5522:	009b      	lsls	r3, r3, #2
    5524:	4403      	add	r3, r0
    5526:	3304      	adds	r3, #4
    5528:	6019      	str	r1, [r3, #0]
                break;
    552a:	e002      	b.n	5532 <getSlowDividerConfig+0x132>
        }
    }
    552c:	bf00      	nop
    552e:	e000      	b.n	5532 <getSlowDividerConfig+0x132>
                break;
    5530:	bf00      	nop

    return ReturnValue;
    5532:	9b05      	ldr	r3, [sp, #20]
}
    5534:	4618      	mov	r0, r3
    5536:	b006      	add	sp, #24
    5538:	4770      	bx	lr
    553a:	bf00      	nop
    553c:	1fff8b9c 	.word	0x1fff8b9c
    5540:	1fff8cb0 	.word	0x1fff8cb0
    5544:	40064000 	.word	0x40064000

00005548 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    5548:	b500      	push	{lr}
    554a:	b083      	sub	sp, #12
    554c:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    554e:	4b64      	ldr	r3, [pc, #400]	; (56e0 <Clock_Ip_ClockInitializeObjects+0x198>)
    5550:	781b      	ldrb	r3, [r3, #0]
    5552:	f083 0301 	eor.w	r3, r3, #1
    5556:	b2db      	uxtb	r3, r3
    5558:	2b00      	cmp	r3, #0
    555a:	d05b      	beq.n	5614 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    555c:	4b60      	ldr	r3, [pc, #384]	; (56e0 <Clock_Ip_ClockInitializeObjects+0x198>)
    555e:	2201      	movs	r2, #1
    5560:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    5562:	4b60      	ldr	r3, [pc, #384]	; (56e4 <Clock_Ip_ClockInitializeObjects+0x19c>)
    5564:	785b      	ldrb	r3, [r3, #1]
    5566:	461a      	mov	r2, r3
    5568:	4613      	mov	r3, r2
    556a:	009b      	lsls	r3, r3, #2
    556c:	4413      	add	r3, r2
    556e:	009b      	lsls	r3, r3, #2
    5570:	4a5d      	ldr	r2, [pc, #372]	; (56e8 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    5572:	4413      	add	r3, r2
    5574:	4a5d      	ldr	r2, [pc, #372]	; (56ec <Clock_Ip_ClockInitializeObjects+0x1a4>)
    5576:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    5578:	4b5d      	ldr	r3, [pc, #372]	; (56f0 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    557a:	785b      	ldrb	r3, [r3, #1]
    557c:	461a      	mov	r2, r3
    557e:	4613      	mov	r3, r2
    5580:	009b      	lsls	r3, r3, #2
    5582:	4413      	add	r3, r2
    5584:	009b      	lsls	r3, r3, #2
    5586:	4a5b      	ldr	r2, [pc, #364]	; (56f4 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    5588:	4413      	add	r3, r2
    558a:	4a5b      	ldr	r2, [pc, #364]	; (56f8 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    558c:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    558e:	4b5b      	ldr	r3, [pc, #364]	; (56fc <Clock_Ip_ClockInitializeObjects+0x1b4>)
    5590:	791b      	ldrb	r3, [r3, #4]
    5592:	461a      	mov	r2, r3
    5594:	4613      	mov	r3, r2
    5596:	005b      	lsls	r3, r3, #1
    5598:	4413      	add	r3, r2
    559a:	009b      	lsls	r3, r3, #2
    559c:	4a58      	ldr	r2, [pc, #352]	; (5700 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    559e:	4413      	add	r3, r2
    55a0:	4a58      	ldr	r2, [pc, #352]	; (5704 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    55a2:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    55a4:	4b58      	ldr	r3, [pc, #352]	; (5708 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    55a6:	795b      	ldrb	r3, [r3, #5]
    55a8:	00db      	lsls	r3, r3, #3
    55aa:	4a58      	ldr	r2, [pc, #352]	; (570c <Clock_Ip_ClockInitializeObjects+0x1c4>)
    55ac:	4413      	add	r3, r2
    55ae:	4a58      	ldr	r2, [pc, #352]	; (5710 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    55b0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    55b2:	4b55      	ldr	r3, [pc, #340]	; (5708 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    55b4:	79db      	ldrb	r3, [r3, #7]
    55b6:	00db      	lsls	r3, r3, #3
    55b8:	4a54      	ldr	r2, [pc, #336]	; (570c <Clock_Ip_ClockInitializeObjects+0x1c4>)
    55ba:	4413      	add	r3, r2
    55bc:	4a55      	ldr	r2, [pc, #340]	; (5714 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    55be:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    55c0:	4b55      	ldr	r3, [pc, #340]	; (5718 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    55c2:	799b      	ldrb	r3, [r3, #6]
    55c4:	009b      	lsls	r3, r3, #2
    55c6:	4a55      	ldr	r2, [pc, #340]	; (571c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    55c8:	4413      	add	r3, r2
    55ca:	4a55      	ldr	r2, [pc, #340]	; (5720 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    55cc:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    55ce:	4b52      	ldr	r3, [pc, #328]	; (5718 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    55d0:	7a1b      	ldrb	r3, [r3, #8]
    55d2:	009b      	lsls	r3, r3, #2
    55d4:	4a51      	ldr	r2, [pc, #324]	; (571c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    55d6:	4413      	add	r3, r2
    55d8:	4a52      	ldr	r2, [pc, #328]	; (5724 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    55da:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    55dc:	4b4e      	ldr	r3, [pc, #312]	; (5718 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    55de:	7a5b      	ldrb	r3, [r3, #9]
    55e0:	009b      	lsls	r3, r3, #2
    55e2:	4a4e      	ldr	r2, [pc, #312]	; (571c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    55e4:	4413      	add	r3, r2
    55e6:	4a50      	ldr	r2, [pc, #320]	; (5728 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    55e8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    55ea:	4b4b      	ldr	r3, [pc, #300]	; (5718 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    55ec:	7adb      	ldrb	r3, [r3, #11]
    55ee:	009b      	lsls	r3, r3, #2
    55f0:	4a4a      	ldr	r2, [pc, #296]	; (571c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    55f2:	4413      	add	r3, r2
    55f4:	4a4d      	ldr	r2, [pc, #308]	; (572c <Clock_Ip_ClockInitializeObjects+0x1e4>)
    55f6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    55f8:	4b47      	ldr	r3, [pc, #284]	; (5718 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    55fa:	7b1b      	ldrb	r3, [r3, #12]
    55fc:	009b      	lsls	r3, r3, #2
    55fe:	4a47      	ldr	r2, [pc, #284]	; (571c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5600:	4413      	add	r3, r2
    5602:	4a4b      	ldr	r2, [pc, #300]	; (5730 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    5604:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    5606:	4b44      	ldr	r3, [pc, #272]	; (5718 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5608:	7b9b      	ldrb	r3, [r3, #14]
    560a:	009b      	lsls	r3, r3, #2
    560c:	4a43      	ldr	r2, [pc, #268]	; (571c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    560e:	4413      	add	r3, r2
    5610:	4a48      	ldr	r2, [pc, #288]	; (5734 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    5612:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    5614:	4b48      	ldr	r3, [pc, #288]	; (5738 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    5616:	781b      	ldrb	r3, [r3, #0]
    5618:	2b00      	cmp	r3, #0
    561a:	d002      	beq.n	5622 <Clock_Ip_ClockInitializeObjects+0xda>
    561c:	9b01      	ldr	r3, [sp, #4]
    561e:	2b00      	cmp	r3, #0
    5620:	d003      	beq.n	562a <Clock_Ip_ClockInitializeObjects+0xe2>
    5622:	4b46      	ldr	r3, [pc, #280]	; (573c <Clock_Ip_ClockInitializeObjects+0x1f4>)
    5624:	781b      	ldrb	r3, [r3, #0]
    5626:	2b00      	cmp	r3, #0
    5628:	d056      	beq.n	56d8 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    562a:	f7ff fc09 	bl	4e40 <getFircConfig>
    562e:	4603      	mov	r3, r0
    5630:	4a43      	ldr	r2, [pc, #268]	; (5740 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    5632:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    5634:	f7ff fc60 	bl	4ef8 <getSoscConfig>
    5638:	4603      	mov	r3, r0
    563a:	4a42      	ldr	r2, [pc, #264]	; (5744 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    563c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    563e:	f7ff fca7 	bl	4f90 <getSpllConfig>
    5642:	4603      	mov	r3, r0
    5644:	4a40      	ldr	r2, [pc, #256]	; (5748 <Clock_Ip_ClockInitializeObjects+0x200>)
    5646:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    5648:	2019      	movs	r0, #25
    564a:	f7ff fcfb 	bl	5044 <getSelectorConfig>
    564e:	4603      	mov	r3, r0
    5650:	4a3e      	ldr	r2, [pc, #248]	; (574c <Clock_Ip_ClockInitializeObjects+0x204>)
    5652:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    5654:	201a      	movs	r0, #26
    5656:	f7ff fcf5 	bl	5044 <getSelectorConfig>
    565a:	4603      	mov	r3, r0
    565c:	4a3c      	ldr	r2, [pc, #240]	; (5750 <Clock_Ip_ClockInitializeObjects+0x208>)
    565e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    5660:	201b      	movs	r0, #27
    5662:	f7ff fcef 	bl	5044 <getSelectorConfig>
    5666:	4603      	mov	r3, r0
    5668:	4a3a      	ldr	r2, [pc, #232]	; (5754 <Clock_Ip_ClockInitializeObjects+0x20c>)
    566a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    566c:	201d      	movs	r0, #29
    566e:	f7ff fd7b 	bl	5168 <getCoreDividerConfig>
    5672:	4603      	mov	r3, r0
    5674:	4a38      	ldr	r2, [pc, #224]	; (5758 <Clock_Ip_ClockInitializeObjects+0x210>)
    5676:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    5678:	201e      	movs	r0, #30
    567a:	f7ff fd75 	bl	5168 <getCoreDividerConfig>
    567e:	4603      	mov	r3, r0
    5680:	4a36      	ldr	r2, [pc, #216]	; (575c <Clock_Ip_ClockInitializeObjects+0x214>)
    5682:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    5684:	201f      	movs	r0, #31
    5686:	f7ff fd6f 	bl	5168 <getCoreDividerConfig>
    568a:	4603      	mov	r3, r0
    568c:	4a34      	ldr	r2, [pc, #208]	; (5760 <Clock_Ip_ClockInitializeObjects+0x218>)
    568e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    5690:	2021      	movs	r0, #33	; 0x21
    5692:	f7ff fe0f 	bl	52b4 <getBusDividerConfig>
    5696:	4603      	mov	r3, r0
    5698:	4a32      	ldr	r2, [pc, #200]	; (5764 <Clock_Ip_ClockInitializeObjects+0x21c>)
    569a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    569c:	2022      	movs	r0, #34	; 0x22
    569e:	f7ff fe09 	bl	52b4 <getBusDividerConfig>
    56a2:	4603      	mov	r3, r0
    56a4:	4a30      	ldr	r2, [pc, #192]	; (5768 <Clock_Ip_ClockInitializeObjects+0x220>)
    56a6:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    56a8:	2023      	movs	r0, #35	; 0x23
    56aa:	f7ff fe03 	bl	52b4 <getBusDividerConfig>
    56ae:	4603      	mov	r3, r0
    56b0:	4a2e      	ldr	r2, [pc, #184]	; (576c <Clock_Ip_ClockInitializeObjects+0x224>)
    56b2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    56b4:	2025      	movs	r0, #37	; 0x25
    56b6:	f7ff fea3 	bl	5400 <getSlowDividerConfig>
    56ba:	4603      	mov	r3, r0
    56bc:	4a2c      	ldr	r2, [pc, #176]	; (5770 <Clock_Ip_ClockInitializeObjects+0x228>)
    56be:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    56c0:	2026      	movs	r0, #38	; 0x26
    56c2:	f7ff fe9d 	bl	5400 <getSlowDividerConfig>
    56c6:	4603      	mov	r3, r0
    56c8:	4a2a      	ldr	r2, [pc, #168]	; (5774 <Clock_Ip_ClockInitializeObjects+0x22c>)
    56ca:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    56cc:	2027      	movs	r0, #39	; 0x27
    56ce:	f7ff fe97 	bl	5400 <getSlowDividerConfig>
    56d2:	4603      	mov	r3, r0
    56d4:	4a28      	ldr	r2, [pc, #160]	; (5778 <Clock_Ip_ClockInitializeObjects+0x230>)
    56d6:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    56d8:	bf00      	nop
    56da:	b003      	add	sp, #12
    56dc:	f85d fb04 	ldr.w	pc, [sp], #4
    56e0:	1fff8cd4 	.word	0x1fff8cd4
    56e4:	00017ed4 	.word	0x00017ed4
    56e8:	00018520 	.word	0x00018520
    56ec:	1fff8ba0 	.word	0x1fff8ba0
    56f0:	00017e94 	.word	0x00017e94
    56f4:	00018468 	.word	0x00018468
    56f8:	1fff8ba4 	.word	0x1fff8ba4
    56fc:	00017ea4 	.word	0x00017ea4
    5700:	000184d4 	.word	0x000184d4
    5704:	1fff8ba8 	.word	0x1fff8ba8
    5708:	00017ee4 	.word	0x00017ee4
    570c:	0001854c 	.word	0x0001854c
    5710:	1fff8bac 	.word	0x1fff8bac
    5714:	1fff8be8 	.word	0x1fff8be8
    5718:	00017e74 	.word	0x00017e74
    571c:	00018424 	.word	0x00018424
    5720:	1fff8bb0 	.word	0x1fff8bb0
    5724:	1fff8bec 	.word	0x1fff8bec
    5728:	1fff8bb4 	.word	0x1fff8bb4
    572c:	1fff8bf0 	.word	0x1fff8bf0
    5730:	1fff8bb8 	.word	0x1fff8bb8
    5734:	1fff8bf4 	.word	0x1fff8bf4
    5738:	1fff8b19 	.word	0x1fff8b19
    573c:	1fff8b10 	.word	0x1fff8b10
    5740:	1fff8bbc 	.word	0x1fff8bbc
    5744:	1fff8bc0 	.word	0x1fff8bc0
    5748:	1fff8bc4 	.word	0x1fff8bc4
    574c:	1fff8bc8 	.word	0x1fff8bc8
    5750:	1fff8bcc 	.word	0x1fff8bcc
    5754:	1fff8bf8 	.word	0x1fff8bf8
    5758:	1fff8bd0 	.word	0x1fff8bd0
    575c:	1fff8bd4 	.word	0x1fff8bd4
    5760:	1fff8bfc 	.word	0x1fff8bfc
    5764:	1fff8bd8 	.word	0x1fff8bd8
    5768:	1fff8bdc 	.word	0x1fff8bdc
    576c:	1fff8c00 	.word	0x1fff8c00
    5770:	1fff8be0 	.word	0x1fff8be0
    5774:	1fff8be4 	.word	0x1fff8be4
    5778:	1fff8c04 	.word	0x1fff8c04

0000577c <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    577c:	b500      	push	{lr}
    577e:	b083      	sub	sp, #12
    5780:	9001      	str	r0, [sp, #4]
    5782:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    5784:	9b01      	ldr	r3, [sp, #4]
    5786:	2b03      	cmp	r3, #3
    5788:	f000 8090 	beq.w	58ac <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    578c:	9b01      	ldr	r3, [sp, #4]
    578e:	2b03      	cmp	r3, #3
    5790:	f200 80d3 	bhi.w	593a <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    5794:	9b01      	ldr	r3, [sp, #4]
    5796:	2b00      	cmp	r3, #0
    5798:	d040      	beq.n	581c <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    579a:	9b01      	ldr	r3, [sp, #4]
    579c:	3b01      	subs	r3, #1
    579e:	2b01      	cmp	r3, #1
    57a0:	f200 80cb 	bhi.w	593a <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    57a4:	9b00      	ldr	r3, [sp, #0]
    57a6:	2b00      	cmp	r3, #0
    57a8:	f040 80c9 	bne.w	593e <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    57ac:	4b68      	ldr	r3, [pc, #416]	; (5950 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    57ae:	2200      	movs	r2, #0
    57b0:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    57b2:	4b68      	ldr	r3, [pc, #416]	; (5954 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    57b4:	681b      	ldr	r3, [r3, #0]
    57b6:	685b      	ldr	r3, [r3, #4]
    57b8:	4a67      	ldr	r2, [pc, #412]	; (5958 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    57ba:	6812      	ldr	r2, [r2, #0]
    57bc:	4610      	mov	r0, r2
    57be:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    57c0:	4b66      	ldr	r3, [pc, #408]	; (595c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    57c2:	681b      	ldr	r3, [r3, #0]
    57c4:	681b      	ldr	r3, [r3, #0]
    57c6:	4a66      	ldr	r2, [pc, #408]	; (5960 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    57c8:	6812      	ldr	r2, [r2, #0]
    57ca:	4610      	mov	r0, r2
    57cc:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    57ce:	4b65      	ldr	r3, [pc, #404]	; (5964 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    57d0:	681b      	ldr	r3, [r3, #0]
    57d2:	681b      	ldr	r3, [r3, #0]
    57d4:	4a64      	ldr	r2, [pc, #400]	; (5968 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    57d6:	6812      	ldr	r2, [r2, #0]
    57d8:	4610      	mov	r0, r2
    57da:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    57dc:	4b63      	ldr	r3, [pc, #396]	; (596c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    57de:	681b      	ldr	r3, [r3, #0]
    57e0:	681b      	ldr	r3, [r3, #0]
    57e2:	4a63      	ldr	r2, [pc, #396]	; (5970 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    57e4:	6812      	ldr	r2, [r2, #0]
    57e6:	4610      	mov	r0, r2
    57e8:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    57ea:	4b62      	ldr	r3, [pc, #392]	; (5974 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    57ec:	681b      	ldr	r3, [r3, #0]
    57ee:	691b      	ldr	r3, [r3, #16]
    57f0:	4a61      	ldr	r2, [pc, #388]	; (5978 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    57f2:	6812      	ldr	r2, [r2, #0]
    57f4:	6812      	ldr	r2, [r2, #0]
    57f6:	4610      	mov	r0, r2
    57f8:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    57fa:	4b60      	ldr	r3, [pc, #384]	; (597c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    57fc:	681b      	ldr	r3, [r3, #0]
    57fe:	68db      	ldr	r3, [r3, #12]
    5800:	4a5f      	ldr	r2, [pc, #380]	; (5980 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5802:	6812      	ldr	r2, [r2, #0]
    5804:	6812      	ldr	r2, [r2, #0]
    5806:	4610      	mov	r0, r2
    5808:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    580a:	4b5e      	ldr	r3, [pc, #376]	; (5984 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    580c:	681b      	ldr	r3, [r3, #0]
    580e:	689b      	ldr	r3, [r3, #8]
    5810:	4a5d      	ldr	r2, [pc, #372]	; (5988 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5812:	6812      	ldr	r2, [r2, #0]
    5814:	6812      	ldr	r2, [r2, #0]
    5816:	4610      	mov	r0, r2
    5818:	4798      	blx	r3
            }
        }
        break;
    581a:	e090      	b.n	593e <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    581c:	9b00      	ldr	r3, [sp, #0]
    581e:	2b02      	cmp	r3, #2
    5820:	f040 808f 	bne.w	5942 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    5824:	4b4a      	ldr	r3, [pc, #296]	; (5950 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5826:	2201      	movs	r2, #1
    5828:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    582a:	4b56      	ldr	r3, [pc, #344]	; (5984 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    582c:	681b      	ldr	r3, [r3, #0]
    582e:	685b      	ldr	r3, [r3, #4]
    5830:	4a55      	ldr	r2, [pc, #340]	; (5988 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5832:	6812      	ldr	r2, [r2, #0]
    5834:	4610      	mov	r0, r2
    5836:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    5838:	4b50      	ldr	r3, [pc, #320]	; (597c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    583a:	681b      	ldr	r3, [r3, #0]
    583c:	691b      	ldr	r3, [r3, #16]
    583e:	4a50      	ldr	r2, [pc, #320]	; (5980 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5840:	6812      	ldr	r2, [r2, #0]
    5842:	4610      	mov	r0, r2
    5844:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5846:	4b4d      	ldr	r3, [pc, #308]	; (597c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5848:	681b      	ldr	r3, [r3, #0]
    584a:	689b      	ldr	r3, [r3, #8]
    584c:	4a4c      	ldr	r2, [pc, #304]	; (5980 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    584e:	6812      	ldr	r2, [r2, #0]
    5850:	4610      	mov	r0, r2
    5852:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5854:	4b47      	ldr	r3, [pc, #284]	; (5974 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5856:	681b      	ldr	r3, [r3, #0]
    5858:	68db      	ldr	r3, [r3, #12]
    585a:	4a47      	ldr	r2, [pc, #284]	; (5978 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    585c:	6812      	ldr	r2, [r2, #0]
    585e:	4610      	mov	r0, r2
    5860:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5862:	4b44      	ldr	r3, [pc, #272]	; (5974 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5864:	681b      	ldr	r3, [r3, #0]
    5866:	689b      	ldr	r3, [r3, #8]
    5868:	4a43      	ldr	r2, [pc, #268]	; (5978 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    586a:	6812      	ldr	r2, [r2, #0]
    586c:	6812      	ldr	r2, [r2, #0]
    586e:	4610      	mov	r0, r2
    5870:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    5872:	4b38      	ldr	r3, [pc, #224]	; (5954 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5874:	681b      	ldr	r3, [r3, #0]
    5876:	685b      	ldr	r3, [r3, #4]
    5878:	4a44      	ldr	r2, [pc, #272]	; (598c <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    587a:	6812      	ldr	r2, [r2, #0]
    587c:	4610      	mov	r0, r2
    587e:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    5880:	4b36      	ldr	r3, [pc, #216]	; (595c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5882:	681b      	ldr	r3, [r3, #0]
    5884:	681b      	ldr	r3, [r3, #0]
    5886:	4a42      	ldr	r2, [pc, #264]	; (5990 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    5888:	6812      	ldr	r2, [r2, #0]
    588a:	4610      	mov	r0, r2
    588c:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    588e:	4b35      	ldr	r3, [pc, #212]	; (5964 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5890:	681b      	ldr	r3, [r3, #0]
    5892:	681b      	ldr	r3, [r3, #0]
    5894:	4a3f      	ldr	r2, [pc, #252]	; (5994 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    5896:	6812      	ldr	r2, [r2, #0]
    5898:	4610      	mov	r0, r2
    589a:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    589c:	4b33      	ldr	r3, [pc, #204]	; (596c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    589e:	681b      	ldr	r3, [r3, #0]
    58a0:	681b      	ldr	r3, [r3, #0]
    58a2:	4a3d      	ldr	r2, [pc, #244]	; (5998 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    58a4:	6812      	ldr	r2, [r2, #0]
    58a6:	4610      	mov	r0, r2
    58a8:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    58aa:	e04a      	b.n	5942 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    58ac:	9b00      	ldr	r3, [sp, #0]
    58ae:	2b02      	cmp	r3, #2
    58b0:	d149      	bne.n	5946 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    58b2:	4b27      	ldr	r3, [pc, #156]	; (5950 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    58b4:	2201      	movs	r2, #1
    58b6:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    58b8:	4b32      	ldr	r3, [pc, #200]	; (5984 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    58ba:	681b      	ldr	r3, [r3, #0]
    58bc:	685b      	ldr	r3, [r3, #4]
    58be:	4a32      	ldr	r2, [pc, #200]	; (5988 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    58c0:	6812      	ldr	r2, [r2, #0]
    58c2:	4610      	mov	r0, r2
    58c4:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    58c6:	4b2d      	ldr	r3, [pc, #180]	; (597c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    58c8:	681b      	ldr	r3, [r3, #0]
    58ca:	691b      	ldr	r3, [r3, #16]
    58cc:	4a2c      	ldr	r2, [pc, #176]	; (5980 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    58ce:	6812      	ldr	r2, [r2, #0]
    58d0:	4610      	mov	r0, r2
    58d2:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    58d4:	4b29      	ldr	r3, [pc, #164]	; (597c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    58d6:	681b      	ldr	r3, [r3, #0]
    58d8:	689b      	ldr	r3, [r3, #8]
    58da:	4a29      	ldr	r2, [pc, #164]	; (5980 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    58dc:	6812      	ldr	r2, [r2, #0]
    58de:	4610      	mov	r0, r2
    58e0:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    58e2:	4b24      	ldr	r3, [pc, #144]	; (5974 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    58e4:	681b      	ldr	r3, [r3, #0]
    58e6:	68db      	ldr	r3, [r3, #12]
    58e8:	4a23      	ldr	r2, [pc, #140]	; (5978 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    58ea:	6812      	ldr	r2, [r2, #0]
    58ec:	4610      	mov	r0, r2
    58ee:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    58f0:	4b20      	ldr	r3, [pc, #128]	; (5974 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    58f2:	681b      	ldr	r3, [r3, #0]
    58f4:	689b      	ldr	r3, [r3, #8]
    58f6:	4a20      	ldr	r2, [pc, #128]	; (5978 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    58f8:	6812      	ldr	r2, [r2, #0]
    58fa:	6812      	ldr	r2, [r2, #0]
    58fc:	4610      	mov	r0, r2
    58fe:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    5900:	4b26      	ldr	r3, [pc, #152]	; (599c <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    5902:	681b      	ldr	r3, [r3, #0]
    5904:	685b      	ldr	r3, [r3, #4]
    5906:	4a26      	ldr	r2, [pc, #152]	; (59a0 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    5908:	6812      	ldr	r2, [r2, #0]
    590a:	4610      	mov	r0, r2
    590c:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    590e:	4b25      	ldr	r3, [pc, #148]	; (59a4 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    5910:	681b      	ldr	r3, [r3, #0]
    5912:	681b      	ldr	r3, [r3, #0]
    5914:	4a24      	ldr	r2, [pc, #144]	; (59a8 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    5916:	6812      	ldr	r2, [r2, #0]
    5918:	4610      	mov	r0, r2
    591a:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    591c:	4b23      	ldr	r3, [pc, #140]	; (59ac <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    591e:	681b      	ldr	r3, [r3, #0]
    5920:	681b      	ldr	r3, [r3, #0]
    5922:	4a23      	ldr	r2, [pc, #140]	; (59b0 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    5924:	6812      	ldr	r2, [r2, #0]
    5926:	4610      	mov	r0, r2
    5928:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    592a:	4b22      	ldr	r3, [pc, #136]	; (59b4 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    592c:	681b      	ldr	r3, [r3, #0]
    592e:	681b      	ldr	r3, [r3, #0]
    5930:	4a21      	ldr	r2, [pc, #132]	; (59b8 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    5932:	6812      	ldr	r2, [r2, #0]
    5934:	4610      	mov	r0, r2
    5936:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5938:	e005      	b.n	5946 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    593a:	bf00      	nop
    593c:	e004      	b.n	5948 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    593e:	bf00      	nop
    5940:	e002      	b.n	5948 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5942:	bf00      	nop
    5944:	e000      	b.n	5948 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5946:	bf00      	nop
    }

}
    5948:	bf00      	nop
    594a:	b003      	add	sp, #12
    594c:	f85d fb04 	ldr.w	pc, [sp], #4
    5950:	1fff8b19 	.word	0x1fff8b19
    5954:	1fff8bac 	.word	0x1fff8bac
    5958:	1fff8bcc 	.word	0x1fff8bcc
    595c:	1fff8bb0 	.word	0x1fff8bb0
    5960:	1fff8bd4 	.word	0x1fff8bd4
    5964:	1fff8bb4 	.word	0x1fff8bb4
    5968:	1fff8bdc 	.word	0x1fff8bdc
    596c:	1fff8bb8 	.word	0x1fff8bb8
    5970:	1fff8be4 	.word	0x1fff8be4
    5974:	1fff8ba0 	.word	0x1fff8ba0
    5978:	1fff8bc4 	.word	0x1fff8bc4
    597c:	1fff8ba4 	.word	0x1fff8ba4
    5980:	1fff8bc0 	.word	0x1fff8bc0
    5984:	1fff8ba8 	.word	0x1fff8ba8
    5988:	1fff8bbc 	.word	0x1fff8bbc
    598c:	1fff8bc8 	.word	0x1fff8bc8
    5990:	1fff8bd0 	.word	0x1fff8bd0
    5994:	1fff8bd8 	.word	0x1fff8bd8
    5998:	1fff8be0 	.word	0x1fff8be0
    599c:	1fff8be8 	.word	0x1fff8be8
    59a0:	1fff8bf8 	.word	0x1fff8bf8
    59a4:	1fff8bec 	.word	0x1fff8bec
    59a8:	1fff8bfc 	.word	0x1fff8bfc
    59ac:	1fff8bf0 	.word	0x1fff8bf0
    59b0:	1fff8c00 	.word	0x1fff8c00
    59b4:	1fff8bf4 	.word	0x1fff8bf4
    59b8:	1fff8c04 	.word	0x1fff8c04

000059bc <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    59bc:	b500      	push	{lr}
    59be:	b083      	sub	sp, #12
    59c0:	9001      	str	r0, [sp, #4]
    59c2:	9100      	str	r1, [sp, #0]
    switch(Command)
    59c4:	9b00      	ldr	r3, [sp, #0]
    59c6:	2b04      	cmp	r3, #4
    59c8:	d010      	beq.n	59ec <Clock_Ip_Command+0x30>
    59ca:	9b00      	ldr	r3, [sp, #0]
    59cc:	2b04      	cmp	r3, #4
    59ce:	d811      	bhi.n	59f4 <Clock_Ip_Command+0x38>
    59d0:	9b00      	ldr	r3, [sp, #0]
    59d2:	2b01      	cmp	r3, #1
    59d4:	d006      	beq.n	59e4 <Clock_Ip_Command+0x28>
    59d6:	9b00      	ldr	r3, [sp, #0]
    59d8:	2b02      	cmp	r3, #2
    59da:	d10b      	bne.n	59f4 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    59dc:	9801      	ldr	r0, [sp, #4]
    59de:	f7ff fdb3 	bl	5548 <Clock_Ip_ClockInitializeObjects>
            break;
    59e2:	e008      	b.n	59f6 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    59e4:	9801      	ldr	r0, [sp, #4]
    59e6:	f7ff f9db 	bl	4da0 <Clock_Ip_SpecificPlatformInitClock>
            break;
    59ea:	e004      	b.n	59f6 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    59ec:	9801      	ldr	r0, [sp, #4]
    59ee:	f7ff f8ed 	bl	4bcc <DisableSafeClock>
            break;
    59f2:	e000      	b.n	59f6 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    59f4:	bf00      	nop
    }
}
    59f6:	bf00      	nop
    59f8:	b003      	add	sp, #12
    59fa:	f85d fb04 	ldr.w	pc, [sp], #4
    59fe:	bf00      	nop

00005a00 <Mcu_CheckInit>:
/**
* @brief Mcu_CheckInit - checks for Mcu_Init
* @implements Mcu_CheckInit_Activity
*/
static Std_ReturnType Mcu_CheckInit(const Mcu_ConfigType * ConfigPtr)
{
    5a00:	b500      	push	{lr}
    5a02:	b085      	sub	sp, #20
    5a04:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    5a06:	2300      	movs	r3, #0
    5a08:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_PRECOMPILE_SUPPORT == STD_OFF)
    if (NULL_PTR == ConfigPtr)
    5a0c:	9b01      	ldr	r3, [sp, #4]
    5a0e:	2b00      	cmp	r3, #0
    5a10:	d108      	bne.n	5a24 <Mcu_CheckInit+0x24>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    5a12:	2301      	movs	r3, #1
    5a14:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INIT_ID, MCU_E_INIT_FAILED);
    5a18:	2311      	movs	r3, #17
    5a1a:	2200      	movs	r2, #0
    5a1c:	2100      	movs	r1, #0
    5a1e:	2065      	movs	r0, #101	; 0x65
    5a20:	f011 f996 	bl	16d50 <Det_ReportError>

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INIT_ID, MCU_E_INIT_FAILED);
    }
#endif /* (MCU_PRECOMPILE_SUPPORT == STD_ON) */

    return CheckStatus;
    5a24:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5a28:	4618      	mov	r0, r3
    5a2a:	b005      	add	sp, #20
    5a2c:	f85d fb04 	ldr.w	pc, [sp], #4

00005a30 <Mcu_CheckInitClock>:
/**
* @brief Mcu_CheckInitClock - checks for Mcu_InitClock
* @implements Mcu_CheckInitClock_Activity
*/
static Std_ReturnType Mcu_CheckInitClock(Mcu_ClockType ClockSetting)
{
    5a30:	b500      	push	{lr}
    5a32:	b085      	sub	sp, #20
    5a34:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    5a36:	2300      	movs	r3, #0
    5a38:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ClockSetting >= Mcu_pConfigPtr->NoClkConfigs)
    5a3c:	4b0a      	ldr	r3, [pc, #40]	; (5a68 <Mcu_CheckInitClock+0x38>)
    5a3e:	681b      	ldr	r3, [r3, #0]
    5a40:	68db      	ldr	r3, [r3, #12]
    5a42:	9a01      	ldr	r2, [sp, #4]
    5a44:	429a      	cmp	r2, r3
    5a46:	d308      	bcc.n	5a5a <Mcu_CheckInitClock+0x2a>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    5a48:	2301      	movs	r3, #1
    5a4a:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INITCLOCK_ID, MCU_E_PARAM_CLOCK);
    5a4e:	230b      	movs	r3, #11
    5a50:	2202      	movs	r2, #2
    5a52:	2100      	movs	r1, #0
    5a54:	2065      	movs	r0, #101	; 0x65
    5a56:	f011 f97b 	bl	16d50 <Det_ReportError>
    }

    return CheckStatus;
    5a5a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5a5e:	4618      	mov	r0, r3
    5a60:	b005      	add	sp, #20
    5a62:	f85d fb04 	ldr.w	pc, [sp], #4
    5a66:	bf00      	nop
    5a68:	1fff8ce0 	.word	0x1fff8ce0

00005a6c <Mcu_CheckSetMode>:
/**
* @brief Mcu_CheckSetMode - checks for Mcu_SetMode
* @implements Mcu_CheckSetMode_Activity
*/
static Std_ReturnType Mcu_CheckSetMode(Power_Ip_ModeType McuMode)
{
    5a6c:	b500      	push	{lr}
    5a6e:	b085      	sub	sp, #20
    5a70:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    5a72:	2300      	movs	r3, #0
    5a74:	f88d 300f 	strb.w	r3, [sp, #15]

    if (McuMode >= Mcu_pConfigPtr->NoModeConfigs)
    5a78:	4b0a      	ldr	r3, [pc, #40]	; (5aa4 <Mcu_CheckSetMode+0x38>)
    5a7a:	681b      	ldr	r3, [r3, #0]
    5a7c:	689b      	ldr	r3, [r3, #8]
    5a7e:	9a01      	ldr	r2, [sp, #4]
    5a80:	429a      	cmp	r2, r3
    5a82:	d308      	bcc.n	5a96 <Mcu_CheckSetMode+0x2a>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    5a84:	2301      	movs	r3, #1
    5a86:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_SETMODE_ID, MCU_E_PARAM_MODE);
    5a8a:	230c      	movs	r3, #12
    5a8c:	2208      	movs	r2, #8
    5a8e:	2100      	movs	r1, #0
    5a90:	2065      	movs	r0, #101	; 0x65
    5a92:	f011 f95d 	bl	16d50 <Det_ReportError>
    }

    return CheckStatus;
    5a96:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5a9a:	4618      	mov	r0, r3
    5a9c:	b005      	add	sp, #20
    5a9e:	f85d fb04 	ldr.w	pc, [sp], #4
    5aa2:	bf00      	nop
    5aa4:	1fff8ce0 	.word	0x1fff8ce0

00005aa8 <Mcu_CheckGetVersionInfo>:
/**
* @brief Mcu_CheckGetVersionInfo - checks for Mcu_GetVersionInfo
* @implements Mcu_CheckGetVersionInfo_Activity
*/
static Std_ReturnType Mcu_CheckGetVersionInfo(const Std_VersionInfoType * VersionInfo)
{
    5aa8:	b500      	push	{lr}
    5aaa:	b085      	sub	sp, #20
    5aac:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    5aae:	2300      	movs	r3, #0
    5ab0:	f88d 300f 	strb.w	r3, [sp, #15]

    if (NULL_PTR == VersionInfo)
    5ab4:	9b01      	ldr	r3, [sp, #4]
    5ab6:	2b00      	cmp	r3, #0
    5ab8:	d108      	bne.n	5acc <Mcu_CheckGetVersionInfo+0x24>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    5aba:	2301      	movs	r3, #1
    5abc:	f88d 300f 	strb.w	r3, [sp, #15]

        (void)Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_GETVERSIONINFO_ID, MCU_E_PARAM_POINTER);
    5ac0:	2310      	movs	r3, #16
    5ac2:	2209      	movs	r2, #9
    5ac4:	2100      	movs	r1, #0
    5ac6:	2065      	movs	r0, #101	; 0x65
    5ac8:	f011 f942 	bl	16d50 <Det_ReportError>
    }

    return CheckStatus;
    5acc:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5ad0:	4618      	mov	r0, r3
    5ad2:	b005      	add	sp, #20
    5ad4:	f85d fb04 	ldr.w	pc, [sp], #4

00005ad8 <Mcu_HLDChecksEntry>:
/**
* @brief Mcu_HLDChecksEntry - checks for invalid mode transitions.
* @implements Mcu_HLDChecksEntry_Activity
*/
static Std_ReturnType Mcu_HLDChecksEntry(uint8 McuServiceID)
{
    5ad8:	b500      	push	{lr}
    5ada:	b085      	sub	sp, #20
    5adc:	4603      	mov	r3, r0
    5ade:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    5ae2:	2300      	movs	r3, #0
    5ae4:	f88d 300f 	strb.w	r3, [sp, #15]

    if (MCU_INIT_ID == McuServiceID)
    5ae8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5aec:	2b00      	cmp	r3, #0
    5aee:	d10e      	bne.n	5b0e <Mcu_HLDChecksEntry+0x36>
    {
        if (MCU_UNINIT != Mcu_eStatus) /* If "Mcu_Init" was already called (i.e. driver is initialized). */
    5af0:	4b13      	ldr	r3, [pc, #76]	; (5b40 <Mcu_HLDChecksEntry+0x68>)
    5af2:	681b      	ldr	r3, [r3, #0]
    5af4:	2b03      	cmp	r3, #3
    5af6:	d01c      	beq.n	5b32 <Mcu_HLDChecksEntry+0x5a>
        {
            CheckStatus = (Std_ReturnType)E_NOT_OK;
    5af8:	2301      	movs	r3, #1
    5afa:	f88d 300f 	strb.w	r3, [sp, #15]
            (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, McuServiceID, MCU_E_ALREADY_INITIALIZED);
    5afe:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5b02:	2313      	movs	r3, #19
    5b04:	2100      	movs	r1, #0
    5b06:	2065      	movs	r0, #101	; 0x65
    5b08:	f011 f922 	bl	16d50 <Det_ReportError>
    5b0c:	e011      	b.n	5b32 <Mcu_HLDChecksEntry+0x5a>
        }
    }
    else
    {
        if (MCU_UNINIT == Mcu_eStatus) /* If "Mcu_Init" was not called (i.e driver is uninitialized). */
    5b0e:	4b0c      	ldr	r3, [pc, #48]	; (5b40 <Mcu_HLDChecksEntry+0x68>)
    5b10:	681b      	ldr	r3, [r3, #0]
    5b12:	2b03      	cmp	r3, #3
    5b14:	d10a      	bne.n	5b2c <Mcu_HLDChecksEntry+0x54>
        {
            CheckStatus = (Std_ReturnType)E_NOT_OK;
    5b16:	2301      	movs	r3, #1
    5b18:	f88d 300f 	strb.w	r3, [sp, #15]
            (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, McuServiceID, MCU_E_UNINIT);
    5b1c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5b20:	230f      	movs	r3, #15
    5b22:	2100      	movs	r1, #0
    5b24:	2065      	movs	r0, #101	; 0x65
    5b26:	f011 f913 	bl	16d50 <Det_ReportError>
    5b2a:	e002      	b.n	5b32 <Mcu_HLDChecksEntry+0x5a>
        }
        else
        {
            Mcu_eStatus = MCU_BUSY;
    5b2c:	4b04      	ldr	r3, [pc, #16]	; (5b40 <Mcu_HLDChecksEntry+0x68>)
    5b2e:	220a      	movs	r2, #10
    5b30:	601a      	str	r2, [r3, #0]
        }
    }

    return CheckStatus;
    5b32:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5b36:	4618      	mov	r0, r3
    5b38:	b005      	add	sp, #20
    5b3a:	f85d fb04 	ldr.w	pc, [sp], #4
    5b3e:	bf00      	nop
    5b40:	1fff8b1c 	.word	0x1fff8b1c

00005b44 <Mcu_HLDChecksExit>:
* @implements Mcu_HLDChecksExit_Activity
*/
static void Mcu_HLDChecksExit(  Std_ReturnType RetStatus,
                                uint8 McuServiceID
                              )
{
    5b44:	b082      	sub	sp, #8
    5b46:	4603      	mov	r3, r0
    5b48:	460a      	mov	r2, r1
    5b4a:	f88d 3007 	strb.w	r3, [sp, #7]
    5b4e:	4613      	mov	r3, r2
    5b50:	f88d 3006 	strb.w	r3, [sp, #6]
    if (MCU_INIT_ID == McuServiceID)
    5b54:	f89d 3006 	ldrb.w	r3, [sp, #6]
    5b58:	2b00      	cmp	r3, #0
    5b5a:	d10b      	bne.n	5b74 <Mcu_HLDChecksExit+0x30>
    {
        if ((Std_ReturnType)E_OK == (Std_ReturnType)RetStatus)
    5b5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5b60:	2b00      	cmp	r3, #0
    5b62:	d103      	bne.n	5b6c <Mcu_HLDChecksExit+0x28>
        {
            Mcu_eStatus = MCU_IDLE;
    5b64:	4b06      	ldr	r3, [pc, #24]	; (5b80 <Mcu_HLDChecksExit+0x3c>)
    5b66:	220c      	movs	r2, #12
    5b68:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Mcu_eStatus = MCU_IDLE;
    }
}
    5b6a:	e006      	b.n	5b7a <Mcu_HLDChecksExit+0x36>
            Mcu_eStatus = MCU_UNINIT;
    5b6c:	4b04      	ldr	r3, [pc, #16]	; (5b80 <Mcu_HLDChecksExit+0x3c>)
    5b6e:	2203      	movs	r2, #3
    5b70:	601a      	str	r2, [r3, #0]
}
    5b72:	e002      	b.n	5b7a <Mcu_HLDChecksExit+0x36>
        Mcu_eStatus = MCU_IDLE;
    5b74:	4b02      	ldr	r3, [pc, #8]	; (5b80 <Mcu_HLDChecksExit+0x3c>)
    5b76:	220c      	movs	r2, #12
    5b78:	601a      	str	r2, [r3, #0]
}
    5b7a:	bf00      	nop
    5b7c:	b002      	add	sp, #8
    5b7e:	4770      	bx	lr
    5b80:	1fff8b1c 	.word	0x1fff8b1c

00005b84 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    5b84:	b500      	push	{lr}
    5b86:	b085      	sub	sp, #20
    5b88:	9001      	str	r0, [sp, #4]
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) )
    Std_ReturnType CheckStatus;
#endif /* ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) ) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    CheckStatus = (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INIT_ID);
    5b8a:	2000      	movs	r0, #0
    5b8c:	f7ff ffa4 	bl	5ad8 <Mcu_HLDChecksEntry>
    5b90:	4603      	mov	r3, r0
    5b92:	f88d 300b 	strb.w	r3, [sp, #11]

    if ( (Std_ReturnType)E_OK == CheckStatus )
    5b96:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5b9a:	2b00      	cmp	r3, #0
    5b9c:	d150      	bne.n	5c40 <Mcu_Init+0xbc>

#if (MCU_PARAM_CHECK == STD_ON)
        /* When PostBuild is used and #(Variants) > 1, the input parameter 'ConfigPtr' is mandatory
         * to be different than NULL_PTR. */
        /* Check the config. In case of error, return immediately. The "Mcu_CheckInit" function will report DET errors. */
        CheckStatus = Mcu_CheckInit(ConfigPtr);
    5b9e:	9801      	ldr	r0, [sp, #4]
    5ba0:	f7ff ff2e 	bl	5a00 <Mcu_CheckInit>
    5ba4:	4603      	mov	r3, r0
    5ba6:	f88d 300b 	strb.w	r3, [sp, #11]

        if ((Std_ReturnType)E_OK == CheckStatus)
    5baa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5bae:	2b00      	cmp	r3, #0
    5bb0:	d13d      	bne.n	5c2e <Mcu_Init+0xaa>

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    5bb2:	4a25      	ldr	r2, [pc, #148]	; (5c48 <Mcu_Init+0xc4>)
    5bb4:	9b01      	ldr	r3, [sp, #4]
    5bb6:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5bb8:	2300      	movs	r3, #0
    5bba:	9303      	str	r3, [sp, #12]
    5bbc:	e010      	b.n	5be0 <Mcu_Init+0x5c>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    5bbe:	4b22      	ldr	r3, [pc, #136]	; (5c48 <Mcu_Init+0xc4>)
    5bc0:	681b      	ldr	r3, [r3, #0]
    5bc2:	6919      	ldr	r1, [r3, #16]
    5bc4:	9a03      	ldr	r2, [sp, #12]
    5bc6:	4613      	mov	r3, r2
    5bc8:	005b      	lsls	r3, r3, #1
    5bca:	4413      	add	r3, r2
    5bcc:	009b      	lsls	r3, r3, #2
    5bce:	440b      	add	r3, r1
    5bd0:	681b      	ldr	r3, [r3, #0]
    5bd2:	9a03      	ldr	r2, [sp, #12]
    5bd4:	b2d1      	uxtb	r1, r2
    5bd6:	4a1d      	ldr	r2, [pc, #116]	; (5c4c <Mcu_Init+0xc8>)
    5bd8:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5bda:	9b03      	ldr	r3, [sp, #12]
    5bdc:	3301      	adds	r3, #1
    5bde:	9303      	str	r3, [sp, #12]
    5be0:	4b19      	ldr	r3, [pc, #100]	; (5c48 <Mcu_Init+0xc4>)
    5be2:	681b      	ldr	r3, [r3, #0]
    5be4:	689b      	ldr	r3, [r3, #8]
    5be6:	9a03      	ldr	r2, [sp, #12]
    5be8:	429a      	cmp	r2, r3
    5bea:	d3e8      	bcc.n	5bbe <Mcu_Init+0x3a>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5bec:	2300      	movs	r3, #0
    5bee:	9303      	str	r3, [sp, #12]
    5bf0:	e010      	b.n	5c14 <Mcu_Init+0x90>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    5bf2:	4b15      	ldr	r3, [pc, #84]	; (5c48 <Mcu_Init+0xc4>)
    5bf4:	681b      	ldr	r3, [r3, #0]
    5bf6:	6959      	ldr	r1, [r3, #20]
    5bf8:	9a03      	ldr	r2, [sp, #12]
    5bfa:	4613      	mov	r3, r2
    5bfc:	01db      	lsls	r3, r3, #7
    5bfe:	1a9b      	subs	r3, r3, r2
    5c00:	00db      	lsls	r3, r3, #3
    5c02:	440b      	add	r3, r1
    5c04:	681b      	ldr	r3, [r3, #0]
    5c06:	9a03      	ldr	r2, [sp, #12]
    5c08:	b2d1      	uxtb	r1, r2
    5c0a:	4a11      	ldr	r2, [pc, #68]	; (5c50 <Mcu_Init+0xcc>)
    5c0c:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5c0e:	9b03      	ldr	r3, [sp, #12]
    5c10:	3301      	adds	r3, #1
    5c12:	9303      	str	r3, [sp, #12]
    5c14:	4b0c      	ldr	r3, [pc, #48]	; (5c48 <Mcu_Init+0xc4>)
    5c16:	681b      	ldr	r3, [r3, #0]
    5c18:	68db      	ldr	r3, [r3, #12]
    5c1a:	9a03      	ldr	r2, [sp, #12]
    5c1c:	429a      	cmp	r2, r3
    5c1e:	d3e8      	bcc.n	5bf2 <Mcu_Init+0x6e>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    5c20:	4b09      	ldr	r3, [pc, #36]	; (5c48 <Mcu_Init+0xc4>)
    5c22:	681b      	ldr	r3, [r3, #0]
    5c24:	699b      	ldr	r3, [r3, #24]
    5c26:	4618      	mov	r0, r3
    5c28:	f000 f90c 	bl	5e44 <Mcu_Ipw_Init>
    5c2c:	e002      	b.n	5c34 <Mcu_Init+0xb0>
#if (MCU_PARAM_CHECK == STD_ON)
        }
        else
        {
            /* Clean the init pointer in case of an error. */
            Mcu_pConfigPtr = NULL_PTR;
    5c2e:	4b06      	ldr	r3, [pc, #24]	; (5c48 <Mcu_Init+0xc4>)
    5c30:	2200      	movs	r2, #0
    5c32:	601a      	str	r2, [r3, #0]
#endif /* (MCU_PARAM_CHECK == STD_ON) */


#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    5c34:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5c38:	2100      	movs	r1, #0
    5c3a:	4618      	mov	r0, r3
    5c3c:	f7ff ff82 	bl	5b44 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5c40:	bf00      	nop
    5c42:	b005      	add	sp, #20
    5c44:	f85d fb04 	ldr.w	pc, [sp], #4
    5c48:	1fff8ce0 	.word	0x1fff8ce0
    5c4c:	1fff8cdc 	.word	0x1fff8cdc
    5c50:	1fff8cd8 	.word	0x1fff8cd8

00005c54 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    5c54:	b500      	push	{lr}
    5c56:	b085      	sub	sp, #20
    5c58:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    5c5a:	2301      	movs	r3, #1
    5c5c:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    /* Check if the driver is initialized. */
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INITRAMSECTION_ID) )
    5c60:	2001      	movs	r0, #1
    5c62:	f7ff ff39 	bl	5ad8 <Mcu_HLDChecksEntry>
    5c66:	4603      	mov	r3, r0
    5c68:	2b00      	cmp	r3, #0
    5c6a:	d103      	bne.n	5c74 <Mcu_InitRamSection+0x20>
        /* To avoid compiler warning. */
        MCU_PARAM_UNUSED(RamSection);
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    5c6c:	2101      	movs	r1, #1
    5c6e:	2000      	movs	r0, #0
    5c70:	f7ff ff68 	bl	5b44 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    5c74:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5c78:	4618      	mov	r0, r3
    5c7a:	b005      	add	sp, #20
    5c7c:	f85d fb04 	ldr.w	pc, [sp], #4

00005c80 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    5c80:	b500      	push	{lr}
    5c82:	b085      	sub	sp, #20
    5c84:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    5c86:	4a17      	ldr	r2, [pc, #92]	; (5ce4 <Mcu_InitClock+0x64>)
    5c88:	9b01      	ldr	r3, [sp, #4]
    5c8a:	4413      	add	r3, r2
    5c8c:	781b      	ldrb	r3, [r3, #0]
    5c8e:	f88d 300e 	strb.w	r3, [sp, #14]
    /* Return the success of the clock initalization operation. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) )
    Std_ReturnType ClockStatus = (Std_ReturnType)E_NOT_OK;
    5c92:	2301      	movs	r3, #1
    5c94:	f88d 300f 	strb.w	r3, [sp, #15]
#else
    Std_ReturnType ClockStatus;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INITCLOCK_ID) )
    5c98:	2002      	movs	r0, #2
    5c9a:	f7ff ff1d 	bl	5ad8 <Mcu_HLDChecksEntry>
    5c9e:	4603      	mov	r3, r0
    5ca0:	2b00      	cmp	r3, #0
    5ca2:	d119      	bne.n	5cd8 <Mcu_InitClock+0x58>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
    5ca4:	9801      	ldr	r0, [sp, #4]
    5ca6:	f7ff fec3 	bl	5a30 <Mcu_CheckInitClock>
    5caa:	4603      	mov	r3, r0
    5cac:	2b00      	cmp	r3, #0
    5cae:	d10f      	bne.n	5cd0 <Mcu_InitClock+0x50>
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    5cb0:	4b0d      	ldr	r3, [pc, #52]	; (5ce8 <Mcu_InitClock+0x68>)
    5cb2:	681b      	ldr	r3, [r3, #0]
    5cb4:	6959      	ldr	r1, [r3, #20]
    5cb6:	f89d 200e 	ldrb.w	r2, [sp, #14]
    5cba:	4613      	mov	r3, r2
    5cbc:	01db      	lsls	r3, r3, #7
    5cbe:	1a9b      	subs	r3, r3, r2
    5cc0:	00db      	lsls	r3, r3, #3
    5cc2:	440b      	add	r3, r1
    5cc4:	4618      	mov	r0, r3
    5cc6:	f000 f8c7 	bl	5e58 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    5cca:	2300      	movs	r3, #0
    5ccc:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_PARAM_CHECK == STD_ON)
        }
#endif /* (MCU_PARAM_CHECK == STD_ON) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    5cd0:	2102      	movs	r1, #2
    5cd2:	2000      	movs	r0, #0
    5cd4:	f7ff ff36 	bl	5b44 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    5cd8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5cdc:	4618      	mov	r0, r3
    5cde:	b005      	add	sp, #20
    5ce0:	f85d fb04 	ldr.w	pc, [sp], #4
    5ce4:	1fff8cd8 	.word	0x1fff8cd8
    5ce8:	1fff8ce0 	.word	0x1fff8ce0

00005cec <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    5cec:	b500      	push	{lr}
    5cee:	b085      	sub	sp, #20
    5cf0:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    5cf2:	4a15      	ldr	r2, [pc, #84]	; (5d48 <Mcu_SetMode+0x5c>)
    5cf4:	9b01      	ldr	r3, [sp, #4]
    5cf6:	4413      	add	r3, r2
    5cf8:	781b      	ldrb	r3, [r3, #0]
    5cfa:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_SETMODE_ID) )
    5cfe:	2008      	movs	r0, #8
    5d00:	f7ff feea 	bl	5ad8 <Mcu_HLDChecksEntry>
    5d04:	4603      	mov	r3, r0
    5d06:	2b00      	cmp	r3, #0
    5d08:	d11a      	bne.n	5d40 <Mcu_SetMode+0x54>
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

#if (MCU_PARAM_CHECK == STD_ON)
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
    5d0a:	9801      	ldr	r0, [sp, #4]
    5d0c:	f7ff feae 	bl	5a6c <Mcu_CheckSetMode>
    5d10:	4603      	mov	r3, r0
    5d12:	2b00      	cmp	r3, #0
    5d14:	d110      	bne.n	5d38 <Mcu_SetMode+0x4c>
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    5d16:	f00e fed3 	bl	14ac0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    5d1a:	4b0c      	ldr	r3, [pc, #48]	; (5d4c <Mcu_SetMode+0x60>)
    5d1c:	681b      	ldr	r3, [r3, #0]
    5d1e:	6919      	ldr	r1, [r3, #16]
    5d20:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5d24:	4613      	mov	r3, r2
    5d26:	005b      	lsls	r3, r3, #1
    5d28:	4413      	add	r3, r2
    5d2a:	009b      	lsls	r3, r3, #2
    5d2c:	440b      	add	r3, r1
    5d2e:	4618      	mov	r0, r3
    5d30:	f000 f89c 	bl	5e6c <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    5d34:	f00e fef0 	bl	14b18 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>
        }
#endif /* (MCU_PARAM_CHECK == STD_ON) */


#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    5d38:	2108      	movs	r1, #8
    5d3a:	2000      	movs	r0, #0
    5d3c:	f7ff ff02 	bl	5b44 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5d40:	bf00      	nop
    5d42:	b005      	add	sp, #20
    5d44:	f85d fb04 	ldr.w	pc, [sp], #4
    5d48:	1fff8cdc 	.word	0x1fff8cdc
    5d4c:	1fff8ce0 	.word	0x1fff8ce0

00005d50 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    5d50:	b500      	push	{lr}
    5d52:	b083      	sub	sp, #12
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    5d54:	2302      	movs	r3, #2
    5d56:	9301      	str	r3, [sp, #4]
#else
    Mcu_PllStatusType PllStatus;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETPLLSTATUS_ID) )
    5d58:	2004      	movs	r0, #4
    5d5a:	f7ff febd 	bl	5ad8 <Mcu_HLDChecksEntry>
    5d5e:	4603      	mov	r3, r0
    5d60:	2b00      	cmp	r3, #0
    5d62:	d103      	bne.n	5d6c <Mcu_GetPllStatus+0x1c>
           At this point, the return value can be only MCU_PLL_LOCKED or MCU_PLL_UNLOCKED. */
        PllStatus = Mcu_Ipw_GetPllStatus();
#endif /* (MCU_NO_PLL == STD_OFF) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    5d64:	2104      	movs	r1, #4
    5d66:	2000      	movs	r0, #0
    5d68:	f7ff feec 	bl	5b44 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    5d6c:	9b01      	ldr	r3, [sp, #4]
}
    5d6e:	4618      	mov	r0, r3
    5d70:	b003      	add	sp, #12
    5d72:	f85d fb04 	ldr.w	pc, [sp], #4

00005d76 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    5d76:	b500      	push	{lr}
    5d78:	b083      	sub	sp, #12
    /* Return value of the function. */
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    Mcu_ResetType ResetReason = MCU_RESET_UNDEFINED;
    5d7a:	230e      	movs	r3, #14
    5d7c:	9301      	str	r3, [sp, #4]
#else
    Mcu_ResetType ResetReason;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    5d7e:	2005      	movs	r0, #5
    5d80:	f7ff feaa 	bl	5ad8 <Mcu_HLDChecksEntry>
    5d84:	4603      	mov	r3, r0
    5d86:	2b00      	cmp	r3, #0
    5d88:	d106      	bne.n	5d98 <Mcu_GetResetReason+0x22>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    5d8a:	f000 f879 	bl	5e80 <Mcu_Ipw_GetResetReason>
    5d8e:	9001      	str	r0, [sp, #4]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    5d90:	2105      	movs	r1, #5
    5d92:	2000      	movs	r0, #0
    5d94:	f7ff fed6 	bl	5b44 <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    5d98:	9b01      	ldr	r3, [sp, #4]
}
    5d9a:	4618      	mov	r0, r3
    5d9c:	b003      	add	sp, #12
    5d9e:	f85d fb04 	ldr.w	pc, [sp], #4

00005da2 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    5da2:	b500      	push	{lr}
    5da4:	b083      	sub	sp, #12
    /* Return value of the function. */
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    Mcu_RawResetType RawResetValue = MCU_RAW_RESET_DEFAULT;
    5da6:	f04f 33ff 	mov.w	r3, #4294967295
    5daa:	9301      	str	r3, [sp, #4]
#else
    Mcu_RawResetType RawResetValue;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    5dac:	2006      	movs	r0, #6
    5dae:	f7ff fe93 	bl	5ad8 <Mcu_HLDChecksEntry>
    5db2:	4603      	mov	r3, r0
    5db4:	2b00      	cmp	r3, #0
    5db6:	d106      	bne.n	5dc6 <Mcu_GetResetRawValue+0x24>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    5db8:	f000 f868 	bl	5e8c <Mcu_Ipw_GetResetRawValue>
    5dbc:	9001      	str	r0, [sp, #4]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    5dbe:	2106      	movs	r1, #6
    5dc0:	2000      	movs	r0, #0
    5dc2:	f7ff febf 	bl	5b44 <Mcu_HLDChecksExit>
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    5dc6:	9b01      	ldr	r3, [sp, #4]
}
    5dc8:	4618      	mov	r0, r3
    5dca:	b003      	add	sp, #12
    5dcc:	f85d fb04 	ldr.w	pc, [sp], #4

00005dd0 <Mcu_GetVersionInfo>:
* @api
*
* @implements Mcu_GetVersionInfo_Activity
*/
void Mcu_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    5dd0:	b500      	push	{lr}
    5dd2:	b083      	sub	sp, #12
    5dd4:	9001      	str	r0, [sp, #4]
#if (MCU_PARAM_CHECK == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckGetVersionInfo(versioninfo) )
    5dd6:	9801      	ldr	r0, [sp, #4]
    5dd8:	f7ff fe66 	bl	5aa8 <Mcu_CheckGetVersionInfo>
    5ddc:	4603      	mov	r3, r0
    5dde:	2b00      	cmp	r3, #0
    5de0:	d10e      	bne.n	5e00 <Mcu_GetVersionInfo+0x30>
    {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
        (versioninfo)->vendorID = (uint16)MCU_VENDOR_ID;
    5de2:	9b01      	ldr	r3, [sp, #4]
    5de4:	222b      	movs	r2, #43	; 0x2b
    5de6:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint8)MCU_MODULE_ID;
    5de8:	9b01      	ldr	r3, [sp, #4]
    5dea:	2265      	movs	r2, #101	; 0x65
    5dec:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)MCU_SW_MAJOR_VERSION;
    5dee:	9b01      	ldr	r3, [sp, #4]
    5df0:	2202      	movs	r2, #2
    5df2:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)MCU_SW_MINOR_VERSION;
    5df4:	9b01      	ldr	r3, [sp, #4]
    5df6:	2200      	movs	r2, #0
    5df8:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)MCU_SW_PATCH_VERSION;
    5dfa:	9b01      	ldr	r3, [sp, #4]
    5dfc:	2200      	movs	r2, #0
    5dfe:	719a      	strb	r2, [r3, #6]
#if (MCU_PARAM_CHECK == STD_ON)
    }
#endif /* (MCU_PARAM_CHECK == STD_ON) */
}
    5e00:	bf00      	nop
    5e02:	b003      	add	sp, #12
    5e04:	f85d fb04 	ldr.w	pc, [sp], #4

00005e08 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5e08:	b500      	push	{lr}
    5e0a:	b083      	sub	sp, #12
    5e0c:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    5e0e:	201a      	movs	r0, #26
    5e10:	f7ff fe62 	bl	5ad8 <Mcu_HLDChecksEntry>
    5e14:	4603      	mov	r3, r0
    5e16:	2b00      	cmp	r3, #0
    5e18:	d106      	bne.n	5e28 <Mcu_SleepOnExit+0x20>
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    5e1a:	9801      	ldr	r0, [sp, #4]
    5e1c:	f000 f83c 	bl	5e98 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    5e20:	211a      	movs	r1, #26
    5e22:	2000      	movs	r0, #0
    5e24:	f7ff fe8e 	bl	5b44 <Mcu_HLDChecksExit>
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    5e28:	bf00      	nop
    5e2a:	b003      	add	sp, #12
    5e2c:	f85d fb04 	ldr.w	pc, [sp], #4

00005e30 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    5e30:	b082      	sub	sp, #8
    5e32:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    5e34:	4b02      	ldr	r3, [pc, #8]	; (5e40 <Mcu_ClkSrcFailureNotification+0x10>)
    5e36:	681b      	ldr	r3, [r3, #0]
    5e38:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    5e3a:	bf00      	nop
    5e3c:	b002      	add	sp, #8
    5e3e:	4770      	bx	lr
    5e40:	1fff8ce0 	.word	0x1fff8ce0

00005e44 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    5e44:	b500      	push	{lr}
    5e46:	b083      	sub	sp, #12
    5e48:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    5e4a:	9801      	ldr	r0, [sp, #4]
    5e4c:	f000 f882 	bl	5f54 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    5e50:	bf00      	nop
    5e52:	b003      	add	sp, #12
    5e54:	f85d fb04 	ldr.w	pc, [sp], #4

00005e58 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    5e58:	b500      	push	{lr}
    5e5a:	b083      	sub	sp, #12
    5e5c:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    5e5e:	9801      	ldr	r0, [sp, #4]
    5e60:	f7fc fb12 	bl	2488 <Clock_Ip_InitClock>
}
    5e64:	bf00      	nop
    5e66:	b003      	add	sp, #12
    5e68:	f85d fb04 	ldr.w	pc, [sp], #4

00005e6c <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    5e6c:	b500      	push	{lr}
    5e6e:	b083      	sub	sp, #12
    5e70:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    5e72:	9801      	ldr	r0, [sp, #4]
    5e74:	f000 f820 	bl	5eb8 <Power_Ip_SetMode>
}
    5e78:	bf00      	nop
    5e7a:	b003      	add	sp, #12
    5e7c:	f85d fb04 	ldr.w	pc, [sp], #4

00005e80 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    5e80:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    5e82:	f000 f84f 	bl	5f24 <Power_Ip_GetResetReason>
    5e86:	4603      	mov	r3, r0
}
    5e88:	4618      	mov	r0, r3
    5e8a:	bd08      	pop	{r3, pc}

00005e8c <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    5e8c:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    5e8e:	f000 f857 	bl	5f40 <Power_Ip_GetResetRawValue>
    5e92:	4603      	mov	r3, r0
}
    5e94:	4618      	mov	r0, r3
    5e96:	bd08      	pop	{r3, pc}

00005e98 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5e98:	b500      	push	{lr}
    5e9a:	b083      	sub	sp, #12
    5e9c:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    5e9e:	9b01      	ldr	r3, [sp, #4]
    5ea0:	2b00      	cmp	r3, #0
    5ea2:	d102      	bne.n	5eaa <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    5ea4:	f000 f86c 	bl	5f80 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    5ea8:	e001      	b.n	5eae <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    5eaa:	f000 f86e 	bl	5f8a <Power_Ip_EnableSleepOnExit>
}
    5eae:	bf00      	nop
    5eb0:	b003      	add	sp, #12
    5eb2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005eb8 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5eb8:	b500      	push	{lr}
    5eba:	b085      	sub	sp, #20
    5ebc:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    5ebe:	9b01      	ldr	r3, [sp, #4]
    5ec0:	685b      	ldr	r3, [r3, #4]
    5ec2:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    5ec4:	9802      	ldr	r0, [sp, #8]
    5ec6:	f000 f9f5 	bl	62b4 <Power_Ip_SMC_ModeCheckEntry>
    5eca:	4603      	mov	r3, r0
    5ecc:	2b00      	cmp	r3, #0
    5ece:	d002      	beq.n	5ed6 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5ed0:	2301      	movs	r3, #1
    5ed2:	9303      	str	r3, [sp, #12]
    5ed4:	e003      	b.n	5ede <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    5ed6:	9801      	ldr	r0, [sp, #4]
    5ed8:	f000 fa1e 	bl	6318 <Power_Ip_SMC_ModeConfig>
    5edc:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    5ede:	9b03      	ldr	r3, [sp, #12]
    5ee0:	2b01      	cmp	r3, #1
    5ee2:	d103      	bne.n	5eec <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5ee4:	21ff      	movs	r1, #255	; 0xff
    5ee6:	2003      	movs	r0, #3
    5ee8:	f000 f8f4 	bl	60d4 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    5eec:	bf00      	nop
    5eee:	b005      	add	sp, #20
    5ef0:	f85d fb04 	ldr.w	pc, [sp], #4

00005ef4 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    5ef4:	b084      	sub	sp, #16
    5ef6:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    5ef8:	230c      	movs	r3, #12
    5efa:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    5efc:	4a08      	ldr	r2, [pc, #32]	; (5f20 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5efe:	9b01      	ldr	r3, [sp, #4]
    5f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f04:	2b0e      	cmp	r3, #14
    5f06:	d805      	bhi.n	5f14 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    5f08:	4a05      	ldr	r2, [pc, #20]	; (5f20 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5f0a:	9b01      	ldr	r3, [sp, #4]
    5f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f10:	9303      	str	r3, [sp, #12]
    5f12:	e001      	b.n	5f18 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    5f14:	230c      	movs	r3, #12
    5f16:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    5f18:	9b03      	ldr	r3, [sp, #12]
}
    5f1a:	4618      	mov	r0, r3
    5f1c:	b004      	add	sp, #16
    5f1e:	4770      	bx	lr
    5f20:	000185c0 	.word	0x000185c0

00005f24 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    5f24:	b500      	push	{lr}
    5f26:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    5f28:	f000 f940 	bl	61ac <Power_Ip_RCM_GetResetReason>
    5f2c:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    5f2e:	9801      	ldr	r0, [sp, #4]
    5f30:	f7ff ffe0 	bl	5ef4 <Power_Ip_ConvertIntergeToResetType>
    5f34:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    5f36:	9b00      	ldr	r3, [sp, #0]
}
    5f38:	4618      	mov	r0, r3
    5f3a:	b003      	add	sp, #12
    5f3c:	f85d fb04 	ldr.w	pc, [sp], #4

00005f40 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    5f40:	b500      	push	{lr}
    5f42:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    5f44:	f000 f98a 	bl	625c <Power_Ip_RCM_GetResetRawValue>
    5f48:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    5f4a:	9b01      	ldr	r3, [sp, #4]
}
    5f4c:	4618      	mov	r0, r3
    5f4e:	b003      	add	sp, #12
    5f50:	f85d fb04 	ldr.w	pc, [sp], #4

00005f54 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    5f54:	b500      	push	{lr}
    5f56:	b083      	sub	sp, #12
    5f58:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    5f5a:	9b01      	ldr	r3, [sp, #4]
    5f5c:	681b      	ldr	r3, [r3, #0]
    5f5e:	4618      	mov	r0, r3
    5f60:	f000 f90e 	bl	6180 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    5f64:	9b01      	ldr	r3, [sp, #4]
    5f66:	685b      	ldr	r3, [r3, #4]
    5f68:	4618      	mov	r0, r3
    5f6a:	f000 f86d 	bl	6048 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    5f6e:	9b01      	ldr	r3, [sp, #4]
    5f70:	689b      	ldr	r3, [r3, #8]
    5f72:	4618      	mov	r0, r3
    5f74:	f000 f990 	bl	6298 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    5f78:	bf00      	nop
    5f7a:	b003      	add	sp, #12
    5f7c:	f85d fb04 	ldr.w	pc, [sp], #4

00005f80 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    5f80:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    5f82:	f000 f811 	bl	5fa8 <Power_Ip_CM4_DisableSleepOnExit>
}
    5f86:	bf00      	nop
    5f88:	bd08      	pop	{r3, pc}

00005f8a <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    5f8a:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    5f8c:	f000 f820 	bl	5fd0 <Power_Ip_CM4_EnableSleepOnExit>
}
    5f90:	bf00      	nop
    5f92:	bd08      	pop	{r3, pc}

00005f94 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    5f94:	b082      	sub	sp, #8
    5f96:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    5f98:	4a02      	ldr	r2, [pc, #8]	; (5fa4 <Power_Ip_InstallNotificationsCallback+0x10>)
    5f9a:	9b01      	ldr	r3, [sp, #4]
    5f9c:	6013      	str	r3, [r2, #0]
}
    5f9e:	bf00      	nop
    5fa0:	b002      	add	sp, #8
    5fa2:	4770      	bx	lr
    5fa4:	1fff8b20 	.word	0x1fff8b20

00005fa8 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    5fa8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5faa:	2300      	movs	r3, #0
    5fac:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5fae:	4b07      	ldr	r3, [pc, #28]	; (5fcc <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5fb0:	681b      	ldr	r3, [r3, #0]
    5fb2:	685b      	ldr	r3, [r3, #4]
    5fb4:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    5fb6:	9b01      	ldr	r3, [sp, #4]
    5fb8:	f023 0302 	bic.w	r3, r3, #2
    5fbc:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5fbe:	4b03      	ldr	r3, [pc, #12]	; (5fcc <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5fc0:	681b      	ldr	r3, [r3, #0]
    5fc2:	9a01      	ldr	r2, [sp, #4]
    5fc4:	605a      	str	r2, [r3, #4]
}
    5fc6:	bf00      	nop
    5fc8:	b002      	add	sp, #8
    5fca:	4770      	bx	lr
    5fcc:	1fff8b24 	.word	0x1fff8b24

00005fd0 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    5fd0:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5fd2:	2300      	movs	r3, #0
    5fd4:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5fd6:	4b07      	ldr	r3, [pc, #28]	; (5ff4 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5fd8:	681b      	ldr	r3, [r3, #0]
    5fda:	685b      	ldr	r3, [r3, #4]
    5fdc:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    5fde:	9b01      	ldr	r3, [sp, #4]
    5fe0:	f043 0302 	orr.w	r3, r3, #2
    5fe4:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5fe6:	4b03      	ldr	r3, [pc, #12]	; (5ff4 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5fe8:	681b      	ldr	r3, [r3, #0]
    5fea:	9a01      	ldr	r2, [sp, #4]
    5fec:	605a      	str	r2, [r3, #4]
}
    5fee:	bf00      	nop
    5ff0:	b002      	add	sp, #8
    5ff2:	4770      	bx	lr
    5ff4:	1fff8b24 	.word	0x1fff8b24

00005ff8 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    5ff8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5ffa:	2300      	movs	r3, #0
    5ffc:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5ffe:	4b07      	ldr	r3, [pc, #28]	; (601c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    6000:	681b      	ldr	r3, [r3, #0]
    6002:	685b      	ldr	r3, [r3, #4]
    6004:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    6006:	9b01      	ldr	r3, [sp, #4]
    6008:	f043 0304 	orr.w	r3, r3, #4
    600c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    600e:	4b03      	ldr	r3, [pc, #12]	; (601c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    6010:	681b      	ldr	r3, [r3, #0]
    6012:	9a01      	ldr	r2, [sp, #4]
    6014:	605a      	str	r2, [r3, #4]
}
    6016:	bf00      	nop
    6018:	b002      	add	sp, #8
    601a:	4770      	bx	lr
    601c:	1fff8b24 	.word	0x1fff8b24

00006020 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    6020:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6022:	2300      	movs	r3, #0
    6024:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    6026:	4b07      	ldr	r3, [pc, #28]	; (6044 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    6028:	681b      	ldr	r3, [r3, #0]
    602a:	685b      	ldr	r3, [r3, #4]
    602c:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    602e:	9b01      	ldr	r3, [sp, #4]
    6030:	f023 0304 	bic.w	r3, r3, #4
    6034:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6036:	4b03      	ldr	r3, [pc, #12]	; (6044 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    6038:	681b      	ldr	r3, [r3, #0]
    603a:	9a01      	ldr	r2, [sp, #4]
    603c:	605a      	str	r2, [r3, #4]
}
    603e:	bf00      	nop
    6040:	b002      	add	sp, #8
    6042:	4770      	bx	lr
    6044:	1fff8b24 	.word	0x1fff8b24

00006048 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    6048:	b084      	sub	sp, #16
    604a:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    604c:	4b20      	ldr	r3, [pc, #128]	; (60d0 <Power_Ip_PMC_PowerInit+0x88>)
    604e:	781b      	ldrb	r3, [r3, #0]
    6050:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    6054:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6058:	f003 030f 	and.w	r3, r3, #15
    605c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    6060:	9b01      	ldr	r3, [sp, #4]
    6062:	781a      	ldrb	r2, [r3, #0]
    6064:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6068:	4313      	orrs	r3, r2
    606a:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    606e:	4a18      	ldr	r2, [pc, #96]	; (60d0 <Power_Ip_PMC_PowerInit+0x88>)
    6070:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6074:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    6076:	4b16      	ldr	r3, [pc, #88]	; (60d0 <Power_Ip_PMC_PowerInit+0x88>)
    6078:	785b      	ldrb	r3, [r3, #1]
    607a:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    607e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6082:	f003 031f 	and.w	r3, r3, #31
    6086:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    608a:	9b01      	ldr	r3, [sp, #4]
    608c:	785a      	ldrb	r2, [r3, #1]
    608e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6092:	4313      	orrs	r3, r2
    6094:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    6098:	4a0d      	ldr	r2, [pc, #52]	; (60d0 <Power_Ip_PMC_PowerInit+0x88>)
    609a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    609e:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    60a0:	4b0b      	ldr	r3, [pc, #44]	; (60d0 <Power_Ip_PMC_PowerInit+0x88>)
    60a2:	789b      	ldrb	r3, [r3, #2]
    60a4:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    60a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    60ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
    60b0:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    60b4:	9b01      	ldr	r3, [sp, #4]
    60b6:	789a      	ldrb	r2, [r3, #2]
    60b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    60bc:	4313      	orrs	r3, r2
    60be:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    60c2:	4a03      	ldr	r2, [pc, #12]	; (60d0 <Power_Ip_PMC_PowerInit+0x88>)
    60c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    60c8:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    60ca:	bf00      	nop
    60cc:	b004      	add	sp, #16
    60ce:	4770      	bx	lr
    60d0:	4007d000 	.word	0x4007d000

000060d4 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    60d4:	b500      	push	{lr}
    60d6:	b083      	sub	sp, #12
    60d8:	9001      	str	r0, [sp, #4]
    60da:	460b      	mov	r3, r1
    60dc:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    60e0:	4b05      	ldr	r3, [pc, #20]	; (60f8 <Power_Ip_ReportPowerErrors+0x24>)
    60e2:	681b      	ldr	r3, [r3, #0]
    60e4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    60e8:	4611      	mov	r1, r2
    60ea:	9801      	ldr	r0, [sp, #4]
    60ec:	4798      	blx	r3
}
    60ee:	bf00      	nop
    60f0:	b003      	add	sp, #12
    60f2:	f85d fb04 	ldr.w	pc, [sp], #4
    60f6:	bf00      	nop
    60f8:	1fff8b20 	.word	0x1fff8b20

000060fc <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    60fc:	b082      	sub	sp, #8
    60fe:	9001      	str	r0, [sp, #4]
    6100:	460b      	mov	r3, r1
    6102:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    6106:	bf00      	nop
    6108:	b002      	add	sp, #8
    610a:	4770      	bx	lr

0000610c <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    610c:	b500      	push	{lr}
    610e:	b085      	sub	sp, #20
    6110:	9003      	str	r0, [sp, #12]
    6112:	9102      	str	r1, [sp, #8]
    6114:	9201      	str	r2, [sp, #4]
    6116:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    6118:	2000      	movs	r0, #0
    611a:	f7fb fee5 	bl	1ee8 <OsIf_GetCounter>
    611e:	4602      	mov	r2, r0
    6120:	9b03      	ldr	r3, [sp, #12]
    6122:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    6124:	9b02      	ldr	r3, [sp, #8]
    6126:	2200      	movs	r2, #0
    6128:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    612a:	2100      	movs	r1, #0
    612c:	9800      	ldr	r0, [sp, #0]
    612e:	f7fb ff27 	bl	1f80 <OsIf_MicrosToTicks>
    6132:	4602      	mov	r2, r0
    6134:	9b01      	ldr	r3, [sp, #4]
    6136:	601a      	str	r2, [r3, #0]
}
    6138:	bf00      	nop
    613a:	b005      	add	sp, #20
    613c:	f85d fb04 	ldr.w	pc, [sp], #4

00006140 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    6140:	b500      	push	{lr}
    6142:	b087      	sub	sp, #28
    6144:	9003      	str	r0, [sp, #12]
    6146:	9102      	str	r1, [sp, #8]
    6148:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    614a:	2300      	movs	r3, #0
    614c:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    6150:	2100      	movs	r1, #0
    6152:	9803      	ldr	r0, [sp, #12]
    6154:	f7fb fee1 	bl	1f1a <OsIf_GetElapsed>
    6158:	4602      	mov	r2, r0
    615a:	9b02      	ldr	r3, [sp, #8]
    615c:	681b      	ldr	r3, [r3, #0]
    615e:	441a      	add	r2, r3
    6160:	9b02      	ldr	r3, [sp, #8]
    6162:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    6164:	9b02      	ldr	r3, [sp, #8]
    6166:	681b      	ldr	r3, [r3, #0]
    6168:	9a01      	ldr	r2, [sp, #4]
    616a:	429a      	cmp	r2, r3
    616c:	d802      	bhi.n	6174 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    616e:	2301      	movs	r3, #1
    6170:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    6174:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6178:	4618      	mov	r0, r3
    617a:	b007      	add	sp, #28
    617c:	f85d fb04 	ldr.w	pc, [sp], #4

00006180 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    6180:	b082      	sub	sp, #8
    6182:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    6184:	9b01      	ldr	r3, [sp, #4]
    6186:	681a      	ldr	r2, [r3, #0]
    6188:	4907      	ldr	r1, [pc, #28]	; (61a8 <Power_Ip_RCM_ResetInit+0x28>)
    618a:	f641 7307 	movw	r3, #7943	; 0x1f07
    618e:	4013      	ands	r3, r2
    6190:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    6192:	9b01      	ldr	r3, [sp, #4]
    6194:	685a      	ldr	r2, [r3, #4]
    6196:	4904      	ldr	r1, [pc, #16]	; (61a8 <Power_Ip_RCM_ResetInit+0x28>)
    6198:	f642 73ff 	movw	r3, #12287	; 0x2fff
    619c:	4013      	ands	r3, r2
    619e:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    61a0:	bf00      	nop
    61a2:	b002      	add	sp, #8
    61a4:	4770      	bx	lr
    61a6:	bf00      	nop
    61a8:	4007f000 	.word	0x4007f000

000061ac <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    61ac:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    61ae:	230c      	movs	r3, #12
    61b0:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    61b2:	2300      	movs	r3, #0
    61b4:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    61b6:	2300      	movs	r3, #0
    61b8:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    61ba:	2300      	movs	r3, #0
    61bc:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    61be:	4b25      	ldr	r3, [pc, #148]	; (6254 <Power_Ip_RCM_GetResetReason+0xa8>)
    61c0:	699a      	ldr	r2, [r3, #24]
    61c2:	f642 73ee 	movw	r3, #12270	; 0x2fee
    61c6:	4013      	ands	r3, r2
    61c8:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    61ca:	9b03      	ldr	r3, [sp, #12]
    61cc:	2b00      	cmp	r3, #0
    61ce:	d008      	beq.n	61e2 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    61d0:	4920      	ldr	r1, [pc, #128]	; (6254 <Power_Ip_RCM_GetResetReason+0xa8>)
    61d2:	9a03      	ldr	r2, [sp, #12]
    61d4:	f642 73ee 	movw	r3, #12270	; 0x2fee
    61d8:	4013      	ands	r3, r2
    61da:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    61dc:	4a1e      	ldr	r2, [pc, #120]	; (6258 <Power_Ip_RCM_GetResetReason+0xac>)
    61de:	9b03      	ldr	r3, [sp, #12]
    61e0:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    61e2:	4b1d      	ldr	r3, [pc, #116]	; (6258 <Power_Ip_RCM_GetResetReason+0xac>)
    61e4:	681b      	ldr	r3, [r3, #0]
    61e6:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    61e8:	9a02      	ldr	r2, [sp, #8]
    61ea:	f642 73ee 	movw	r3, #12270	; 0x2fee
    61ee:	4013      	ands	r3, r2
    61f0:	2b82      	cmp	r3, #130	; 0x82
    61f2:	d102      	bne.n	61fa <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    61f4:	2305      	movs	r3, #5
    61f6:	9307      	str	r3, [sp, #28]
    61f8:	e027      	b.n	624a <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    61fa:	2300      	movs	r3, #0
    61fc:	9306      	str	r3, [sp, #24]
    61fe:	e021      	b.n	6244 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    6200:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6204:	9b06      	ldr	r3, [sp, #24]
    6206:	fa22 f303 	lsr.w	r3, r2, r3
    620a:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    620c:	9a01      	ldr	r2, [sp, #4]
    620e:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    6212:	4013      	ands	r3, r2
    6214:	2b00      	cmp	r3, #0
    6216:	d012      	beq.n	623e <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    6218:	9a01      	ldr	r2, [sp, #4]
    621a:	9b02      	ldr	r3, [sp, #8]
    621c:	4013      	ands	r3, r2
    621e:	2b00      	cmp	r3, #0
    6220:	d00a      	beq.n	6238 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    6222:	9b05      	ldr	r3, [sp, #20]
    6224:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    6226:	9b04      	ldr	r3, [sp, #16]
    6228:	3301      	adds	r3, #1
    622a:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    622c:	9b04      	ldr	r3, [sp, #16]
    622e:	2b01      	cmp	r3, #1
    6230:	d902      	bls.n	6238 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    6232:	230d      	movs	r3, #13
    6234:	9307      	str	r3, [sp, #28]
                        break;
    6236:	e008      	b.n	624a <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    6238:	9b05      	ldr	r3, [sp, #20]
    623a:	3301      	adds	r3, #1
    623c:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    623e:	9b06      	ldr	r3, [sp, #24]
    6240:	3301      	adds	r3, #1
    6242:	9306      	str	r3, [sp, #24]
    6244:	9b06      	ldr	r3, [sp, #24]
    6246:	2b1f      	cmp	r3, #31
    6248:	d9da      	bls.n	6200 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    624a:	9b07      	ldr	r3, [sp, #28]
}
    624c:	4618      	mov	r0, r3
    624e:	b008      	add	sp, #32
    6250:	4770      	bx	lr
    6252:	bf00      	nop
    6254:	4007f000 	.word	0x4007f000
    6258:	1fff8ce4 	.word	0x1fff8ce4

0000625c <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    625c:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    625e:	4b0c      	ldr	r3, [pc, #48]	; (6290 <Power_Ip_RCM_GetResetRawValue+0x34>)
    6260:	699a      	ldr	r2, [r3, #24]
    6262:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6266:	4013      	ands	r3, r2
    6268:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    626a:	9b01      	ldr	r3, [sp, #4]
    626c:	2b00      	cmp	r3, #0
    626e:	d008      	beq.n	6282 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    6270:	4907      	ldr	r1, [pc, #28]	; (6290 <Power_Ip_RCM_GetResetRawValue+0x34>)
    6272:	9a01      	ldr	r2, [sp, #4]
    6274:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6278:	4013      	ands	r3, r2
    627a:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    627c:	4a05      	ldr	r2, [pc, #20]	; (6294 <Power_Ip_RCM_GetResetRawValue+0x38>)
    627e:	9b01      	ldr	r3, [sp, #4]
    6280:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    6282:	4b04      	ldr	r3, [pc, #16]	; (6294 <Power_Ip_RCM_GetResetRawValue+0x38>)
    6284:	681b      	ldr	r3, [r3, #0]
    6286:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    6288:	9b00      	ldr	r3, [sp, #0]
}
    628a:	4618      	mov	r0, r3
    628c:	b002      	add	sp, #8
    628e:	4770      	bx	lr
    6290:	4007f000 	.word	0x4007f000
    6294:	1fff8ce4 	.word	0x1fff8ce4

00006298 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    6298:	b082      	sub	sp, #8
    629a:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    629c:	9b01      	ldr	r3, [sp, #4]
    629e:	681b      	ldr	r3, [r3, #0]
    62a0:	4a03      	ldr	r2, [pc, #12]	; (62b0 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    62a2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    62a6:	6093      	str	r3, [r2, #8]
}
    62a8:	bf00      	nop
    62aa:	b002      	add	sp, #8
    62ac:	4770      	bx	lr
    62ae:	bf00      	nop
    62b0:	4007e000 	.word	0x4007e000

000062b4 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    62b4:	b084      	sub	sp, #16
    62b6:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    62b8:	2301      	movs	r3, #1
    62ba:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    62bc:	4b15      	ldr	r3, [pc, #84]	; (6314 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    62be:	695b      	ldr	r3, [r3, #20]
    62c0:	b2db      	uxtb	r3, r3
    62c2:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    62c4:	9b01      	ldr	r3, [sp, #4]
    62c6:	2b02      	cmp	r3, #2
    62c8:	d012      	beq.n	62f0 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    62ca:	9b01      	ldr	r3, [sp, #4]
    62cc:	2b02      	cmp	r3, #2
    62ce:	d818      	bhi.n	6302 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    62d0:	9b01      	ldr	r3, [sp, #4]
    62d2:	2b00      	cmp	r3, #0
    62d4:	d003      	beq.n	62de <Power_Ip_SMC_ModeCheckEntry+0x2a>
    62d6:	9b01      	ldr	r3, [sp, #4]
    62d8:	2b01      	cmp	r3, #1
    62da:	d003      	beq.n	62e4 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    62dc:	e011      	b.n	6302 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    62de:	2300      	movs	r3, #0
    62e0:	9303      	str	r3, [sp, #12]
            break;
    62e2:	e013      	b.n	630c <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    62e4:	9b02      	ldr	r3, [sp, #8]
    62e6:	2b01      	cmp	r3, #1
    62e8:	d10d      	bne.n	6306 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    62ea:	2300      	movs	r3, #0
    62ec:	9303      	str	r3, [sp, #12]
            break;
    62ee:	e00a      	b.n	6306 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    62f0:	9b02      	ldr	r3, [sp, #8]
    62f2:	2b01      	cmp	r3, #1
    62f4:	d002      	beq.n	62fc <Power_Ip_SMC_ModeCheckEntry+0x48>
    62f6:	9b02      	ldr	r3, [sp, #8]
    62f8:	2b10      	cmp	r3, #16
    62fa:	d106      	bne.n	630a <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    62fc:	2300      	movs	r3, #0
    62fe:	9303      	str	r3, [sp, #12]
            break;
    6300:	e003      	b.n	630a <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    6302:	bf00      	nop
    6304:	e002      	b.n	630c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    6306:	bf00      	nop
    6308:	e000      	b.n	630c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    630a:	bf00      	nop
        }
    }

    return PowerModeCheck;
    630c:	9b03      	ldr	r3, [sp, #12]
}
    630e:	4618      	mov	r0, r3
    6310:	b004      	add	sp, #16
    6312:	4770      	bx	lr
    6314:	4007e000 	.word	0x4007e000

00006318 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    6318:	b500      	push	{lr}
    631a:	b08b      	sub	sp, #44	; 0x2c
    631c:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    631e:	2300      	movs	r3, #0
    6320:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    6322:	2300      	movs	r3, #0
    6324:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    6326:	2300      	movs	r3, #0
    6328:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    632c:	9b01      	ldr	r3, [sp, #4]
    632e:	685b      	ldr	r3, [r3, #4]
    6330:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    6332:	9b08      	ldr	r3, [sp, #32]
    6334:	2b02      	cmp	r3, #2
    6336:	d076      	beq.n	6426 <Power_Ip_SMC_ModeConfig+0x10e>
    6338:	9b08      	ldr	r3, [sp, #32]
    633a:	2b02      	cmp	r3, #2
    633c:	f200 80ab 	bhi.w	6496 <Power_Ip_SMC_ModeConfig+0x17e>
    6340:	9b08      	ldr	r3, [sp, #32]
    6342:	2b00      	cmp	r3, #0
    6344:	d003      	beq.n	634e <Power_Ip_SMC_ModeConfig+0x36>
    6346:	9b08      	ldr	r3, [sp, #32]
    6348:	2b01      	cmp	r3, #1
    634a:	d034      	beq.n	63b6 <Power_Ip_SMC_ModeConfig+0x9e>
    634c:	e0a3      	b.n	6496 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    634e:	4b58      	ldr	r3, [pc, #352]	; (64b0 <Power_Ip_SMC_ModeConfig+0x198>)
    6350:	68db      	ldr	r3, [r3, #12]
    6352:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6354:	9b06      	ldr	r3, [sp, #24]
    6356:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    635a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    635c:	4a54      	ldr	r2, [pc, #336]	; (64b0 <Power_Ip_SMC_ModeConfig+0x198>)
    635e:	9b06      	ldr	r3, [sp, #24]
    6360:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6362:	aa02      	add	r2, sp, #8
    6364:	a903      	add	r1, sp, #12
    6366:	a804      	add	r0, sp, #16
    6368:	f24c 3350 	movw	r3, #50000	; 0xc350
    636c:	f7ff fece 	bl	610c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6370:	9a02      	ldr	r2, [sp, #8]
    6372:	a903      	add	r1, sp, #12
    6374:	ab04      	add	r3, sp, #16
    6376:	4618      	mov	r0, r3
    6378:	f7ff fee2 	bl	6140 <Power_Ip_TimeoutExpired>
    637c:	4603      	mov	r3, r0
    637e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    6382:	4b4b      	ldr	r3, [pc, #300]	; (64b0 <Power_Ip_SMC_ModeConfig+0x198>)
    6384:	695b      	ldr	r3, [r3, #20]
    6386:	f003 0301 	and.w	r3, r3, #1
    638a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    638c:	9b05      	ldr	r3, [sp, #20]
    638e:	2b01      	cmp	r3, #1
    6390:	d006      	beq.n	63a0 <Power_Ip_SMC_ModeConfig+0x88>
    6392:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6396:	f083 0301 	eor.w	r3, r3, #1
    639a:	b2db      	uxtb	r3, r3
    639c:	2b00      	cmp	r3, #0
    639e:	d1e7      	bne.n	6370 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    63a0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    63a4:	2b00      	cmp	r3, #0
    63a6:	d079      	beq.n	649c <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    63a8:	2301      	movs	r3, #1
    63aa:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    63ac:	21ff      	movs	r1, #255	; 0xff
    63ae:	2000      	movs	r0, #0
    63b0:	f7ff fe90 	bl	60d4 <Power_Ip_ReportPowerErrors>
            }

            break;
    63b4:	e072      	b.n	649c <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    63b6:	4b3e      	ldr	r3, [pc, #248]	; (64b0 <Power_Ip_SMC_ModeConfig+0x198>)
    63b8:	68db      	ldr	r3, [r3, #12]
    63ba:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    63bc:	9b06      	ldr	r3, [sp, #24]
    63be:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    63c2:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    63c4:	9b06      	ldr	r3, [sp, #24]
    63c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    63ca:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    63cc:	4a38      	ldr	r2, [pc, #224]	; (64b0 <Power_Ip_SMC_ModeConfig+0x198>)
    63ce:	9b06      	ldr	r3, [sp, #24]
    63d0:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    63d2:	aa02      	add	r2, sp, #8
    63d4:	a903      	add	r1, sp, #12
    63d6:	a804      	add	r0, sp, #16
    63d8:	f24c 3350 	movw	r3, #50000	; 0xc350
    63dc:	f7ff fe96 	bl	610c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    63e0:	9a02      	ldr	r2, [sp, #8]
    63e2:	a903      	add	r1, sp, #12
    63e4:	ab04      	add	r3, sp, #16
    63e6:	4618      	mov	r0, r3
    63e8:	f7ff feaa 	bl	6140 <Power_Ip_TimeoutExpired>
    63ec:	4603      	mov	r3, r0
    63ee:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    63f2:	4b2f      	ldr	r3, [pc, #188]	; (64b0 <Power_Ip_SMC_ModeConfig+0x198>)
    63f4:	695b      	ldr	r3, [r3, #20]
    63f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    63fa:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    63fc:	9b05      	ldr	r3, [sp, #20]
    63fe:	2b80      	cmp	r3, #128	; 0x80
    6400:	d006      	beq.n	6410 <Power_Ip_SMC_ModeConfig+0xf8>
    6402:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6406:	f083 0301 	eor.w	r3, r3, #1
    640a:	b2db      	uxtb	r3, r3
    640c:	2b00      	cmp	r3, #0
    640e:	d1e7      	bne.n	63e0 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    6410:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6414:	2b00      	cmp	r3, #0
    6416:	d043      	beq.n	64a0 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6418:	2301      	movs	r3, #1
    641a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    641c:	21ff      	movs	r1, #255	; 0xff
    641e:	2000      	movs	r0, #0
    6420:	f7ff fe58 	bl	60d4 <Power_Ip_ReportPowerErrors>
            }

            break;
    6424:	e03c      	b.n	64a0 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    6426:	4b22      	ldr	r3, [pc, #136]	; (64b0 <Power_Ip_SMC_ModeConfig+0x198>)
    6428:	68db      	ldr	r3, [r3, #12]
    642a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    642c:	9b06      	ldr	r3, [sp, #24]
    642e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6432:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    6434:	9b06      	ldr	r3, [sp, #24]
    6436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    643a:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    643c:	4a1c      	ldr	r2, [pc, #112]	; (64b0 <Power_Ip_SMC_ModeConfig+0x198>)
    643e:	9b06      	ldr	r3, [sp, #24]
    6440:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6442:	aa02      	add	r2, sp, #8
    6444:	a903      	add	r1, sp, #12
    6446:	a804      	add	r0, sp, #16
    6448:	f24c 3350 	movw	r3, #50000	; 0xc350
    644c:	f7ff fe5e 	bl	610c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6450:	9a02      	ldr	r2, [sp, #8]
    6452:	a903      	add	r1, sp, #12
    6454:	ab04      	add	r3, sp, #16
    6456:	4618      	mov	r0, r3
    6458:	f7ff fe72 	bl	6140 <Power_Ip_TimeoutExpired>
    645c:	4603      	mov	r3, r0
    645e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    6462:	4b13      	ldr	r3, [pc, #76]	; (64b0 <Power_Ip_SMC_ModeConfig+0x198>)
    6464:	695b      	ldr	r3, [r3, #20]
    6466:	f003 0304 	and.w	r3, r3, #4
    646a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    646c:	9b05      	ldr	r3, [sp, #20]
    646e:	2b04      	cmp	r3, #4
    6470:	d006      	beq.n	6480 <Power_Ip_SMC_ModeConfig+0x168>
    6472:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6476:	f083 0301 	eor.w	r3, r3, #1
    647a:	b2db      	uxtb	r3, r3
    647c:	2b00      	cmp	r3, #0
    647e:	d1e7      	bne.n	6450 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    6480:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6484:	2b00      	cmp	r3, #0
    6486:	d00d      	beq.n	64a4 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6488:	2301      	movs	r3, #1
    648a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    648c:	21ff      	movs	r1, #255	; 0xff
    648e:	2000      	movs	r0, #0
    6490:	f7ff fe20 	bl	60d4 <Power_Ip_ReportPowerErrors>
            }

            break;
    6494:	e006      	b.n	64a4 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6496:	2301      	movs	r3, #1
    6498:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    649a:	e004      	b.n	64a6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    649c:	bf00      	nop
    649e:	e002      	b.n	64a6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    64a0:	bf00      	nop
    64a2:	e000      	b.n	64a6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    64a4:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    64a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    64a8:	4618      	mov	r0, r3
    64aa:	b00b      	add	sp, #44	; 0x2c
    64ac:	f85d fb04 	ldr.w	pc, [sp], #4
    64b0:	4007e000 	.word	0x4007e000

000064b4 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    64b4:	b500      	push	{lr}
    64b6:	b085      	sub	sp, #20
    64b8:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    64ba:	9b01      	ldr	r3, [sp, #4]
    64bc:	9303      	str	r3, [sp, #12]
#endif /* (STD_ON == PORT_PRECOMPILE_SUPPORT) */

#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;

    CoreId = (uint8)Port_GetCoreID();
    64be:	2300      	movs	r3, #0
    64c0:	f88d 300b 	strb.w	r3, [sp, #11]
#if (STD_OFF == PORT_PRECOMPILE_SUPPORT)
    if (NULL_PTR == ConfigPtr)
    64c4:	9b01      	ldr	r3, [sp, #4]
    64c6:	2b00      	cmp	r3, #0
    64c8:	d106      	bne.n	64d8 <Port_Init+0x24>
#else /*(STD_OFF == PORT_PRECOMPILE_SUPPORT) */
    if (NULL_PTR != ConfigPtr)
#endif /* (STD_OFF == PORT_PRECOMPILE_SUPPORT) */
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_INIT_FAILED);
    64ca:	230c      	movs	r3, #12
    64cc:	2200      	movs	r2, #0
    64ce:	2100      	movs	r1, #0
    64d0:	207c      	movs	r0, #124	; 0x7c
    64d2:	f010 fc3d 	bl	16d50 <Det_ReportError>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
        }
    }
}
    64d6:	e014      	b.n	6502 <Port_Init+0x4e>
        if ((uint32)1 != pLocalConfigPtr->pau8Port_PartitionList[CoreId])
    64d8:	9b03      	ldr	r3, [sp, #12]
    64da:	69da      	ldr	r2, [r3, #28]
    64dc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    64e0:	4413      	add	r3, r2
    64e2:	781b      	ldrb	r3, [r3, #0]
    64e4:	2b01      	cmp	r3, #1
    64e6:	d006      	beq.n	64f6 <Port_Init+0x42>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
    64e8:	23f0      	movs	r3, #240	; 0xf0
    64ea:	2200      	movs	r2, #0
    64ec:	2100      	movs	r1, #0
    64ee:	207c      	movs	r0, #124	; 0x7c
    64f0:	f010 fc2e 	bl	16d50 <Det_ReportError>
}
    64f4:	e005      	b.n	6502 <Port_Init+0x4e>
            Port_Ipw_Init(pLocalConfigPtr);
    64f6:	9803      	ldr	r0, [sp, #12]
    64f8:	f000 fc64 	bl	6dc4 <Port_Ipw_Init>
            Port_pConfigPtr = pLocalConfigPtr;
    64fc:	4a03      	ldr	r2, [pc, #12]	; (650c <Port_Init+0x58>)
    64fe:	9b03      	ldr	r3, [sp, #12]
    6500:	6013      	str	r3, [r2, #0]
}
    6502:	bf00      	nop
    6504:	b005      	add	sp, #20
    6506:	f85d fb04 	ldr.w	pc, [sp], #4
    650a:	bf00      	nop
    650c:	1fff8ce8 	.word	0x1fff8ce8

00006510 <Port_SetPinDirection>:
void Port_SetPinDirection
(
    Port_PinType Pin,
    Port_PinDirectionType Direction
)
{
    6510:	b500      	push	{lr}
    6512:	b085      	sub	sp, #20
    6514:	9001      	str	r0, [sp, #4]
    6516:	9100      	str	r1, [sp, #0]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    /* Variable used to store current error status */
    Std_ReturnType ErrStatus;

    /* Check if Port module is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    6518:	4b11      	ldr	r3, [pc, #68]	; (6560 <Port_SetPinDirection+0x50>)
    651a:	681b      	ldr	r3, [r3, #0]
    651c:	2b00      	cmp	r3, #0
    651e:	d106      	bne.n	652e <Port_SetPinDirection+0x1e>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_UNINIT);
    6520:	230f      	movs	r3, #15
    6522:	2201      	movs	r2, #1
    6524:	2100      	movs	r1, #0
    6526:	207c      	movs	r0, #124	; 0x7c
    6528:	f010 fc12 	bl	16d50 <Det_ReportError>
        {
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_DIRECTION_UNCHANGEABLE);
        }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    }
}
    652c:	e013      	b.n	6556 <Port_SetPinDirection+0x46>
        ErrStatus = Port_Ipw_SetPinDirection(Pin, Direction, Port_pConfigPtr);
    652e:	4b0c      	ldr	r3, [pc, #48]	; (6560 <Port_SetPinDirection+0x50>)
    6530:	681b      	ldr	r3, [r3, #0]
    6532:	461a      	mov	r2, r3
    6534:	9900      	ldr	r1, [sp, #0]
    6536:	9801      	ldr	r0, [sp, #4]
    6538:	f000 fcb2 	bl	6ea0 <Port_Ipw_SetPinDirection>
    653c:	4603      	mov	r3, r0
    653e:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((Std_ReturnType)E_NOT_OK == ErrStatus)
    6542:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6546:	2b01      	cmp	r3, #1
    6548:	d105      	bne.n	6556 <Port_SetPinDirection+0x46>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_DIRECTION_UNCHANGEABLE);
    654a:	230b      	movs	r3, #11
    654c:	2201      	movs	r2, #1
    654e:	2100      	movs	r1, #0
    6550:	207c      	movs	r0, #124	; 0x7c
    6552:	f010 fbfd 	bl	16d50 <Det_ReportError>
}
    6556:	bf00      	nop
    6558:	b005      	add	sp, #20
    655a:	f85d fb04 	ldr.w	pc, [sp], #4
    655e:	bf00      	nop
    6560:	1fff8ce8 	.word	0x1fff8ce8

00006564 <Port_SetPinMode>:
void Port_SetPinMode
(
    Port_PinType Pin,
    Port_PinModeType Mode
)
{
    6564:	b500      	push	{lr}
    6566:	b085      	sub	sp, #20
    6568:	9001      	str	r0, [sp, #4]
    656a:	460b      	mov	r3, r1
    656c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 u8PinModeError = (uint8)0U;
    6570:	2300      	movs	r3, #0
    6572:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Check if port is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    6576:	4b12      	ldr	r3, [pc, #72]	; (65c0 <Port_SetPinMode+0x5c>)
    6578:	681b      	ldr	r3, [r3, #0]
    657a:	2b00      	cmp	r3, #0
    657c:	d106      	bne.n	658c <Port_SetPinMode+0x28>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_UNINIT);
    657e:	230f      	movs	r3, #15
    6580:	2204      	movs	r2, #4
    6582:	2100      	movs	r1, #0
    6584:	207c      	movs	r0, #124	; 0x7c
    6586:	f010 fbe3 	bl	16d50 <Det_ReportError>
        {
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_INVALID_MODE);
        }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    }
}
    658a:	e014      	b.n	65b6 <Port_SetPinMode+0x52>
        u8PinModeError = (uint8)Port_Ipw_SetPinMode(Pin, Mode, Port_pConfigPtr);
    658c:	4b0c      	ldr	r3, [pc, #48]	; (65c0 <Port_SetPinMode+0x5c>)
    658e:	681a      	ldr	r2, [r3, #0]
    6590:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6594:	4619      	mov	r1, r3
    6596:	9801      	ldr	r0, [sp, #4]
    6598:	f000 fd7a 	bl	7090 <Port_Ipw_SetPinMode>
    659c:	4603      	mov	r3, r0
    659e:	f88d 300f 	strb.w	r3, [sp, #15]
        if (PORT_E_PARAM_INVALID_MODE == u8PinModeError)
    65a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    65a6:	2b0d      	cmp	r3, #13
    65a8:	d105      	bne.n	65b6 <Port_SetPinMode+0x52>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_INVALID_MODE);
    65aa:	230d      	movs	r3, #13
    65ac:	2204      	movs	r2, #4
    65ae:	2100      	movs	r1, #0
    65b0:	207c      	movs	r0, #124	; 0x7c
    65b2:	f010 fbcd 	bl	16d50 <Det_ReportError>
}
    65b6:	bf00      	nop
    65b8:	b005      	add	sp, #20
    65ba:	f85d fb04 	ldr.w	pc, [sp], #4
    65be:	bf00      	nop
    65c0:	1fff8ce8 	.word	0x1fff8ce8

000065c4 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    65c4:	b500      	push	{lr}
    65c6:	b083      	sub	sp, #12
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;

    CoreId = (uint8)Port_GetCoreID();
    65c8:	2300      	movs	r3, #0
    65ca:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check if Port module is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    65ce:	4b12      	ldr	r3, [pc, #72]	; (6618 <Port_RefreshPortDirection+0x54>)
    65d0:	681b      	ldr	r3, [r3, #0]
    65d2:	2b00      	cmp	r3, #0
    65d4:	d106      	bne.n	65e4 <Port_RefreshPortDirection+0x20>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_UNINIT);
    65d6:	230f      	movs	r3, #15
    65d8:	2202      	movs	r2, #2
    65da:	2100      	movs	r1, #0
    65dc:	207c      	movs	r0, #124	; 0x7c
    65de:	f010 fbb7 	bl	16d50 <Det_ReportError>
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    }
}
    65e2:	e014      	b.n	660e <Port_RefreshPortDirection+0x4a>
    else if ((uint32)1 != Port_pConfigPtr->pau8Port_PartitionList[CoreId])
    65e4:	4b0c      	ldr	r3, [pc, #48]	; (6618 <Port_RefreshPortDirection+0x54>)
    65e6:	681b      	ldr	r3, [r3, #0]
    65e8:	69da      	ldr	r2, [r3, #28]
    65ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    65ee:	4413      	add	r3, r2
    65f0:	781b      	ldrb	r3, [r3, #0]
    65f2:	2b01      	cmp	r3, #1
    65f4:	d006      	beq.n	6604 <Port_RefreshPortDirection+0x40>
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    65f6:	23f0      	movs	r3, #240	; 0xf0
    65f8:	2202      	movs	r2, #2
    65fa:	2100      	movs	r1, #0
    65fc:	207c      	movs	r0, #124	; 0x7c
    65fe:	f010 fba7 	bl	16d50 <Det_ReportError>
}
    6602:	e004      	b.n	660e <Port_RefreshPortDirection+0x4a>
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    6604:	4b04      	ldr	r3, [pc, #16]	; (6618 <Port_RefreshPortDirection+0x54>)
    6606:	681b      	ldr	r3, [r3, #0]
    6608:	4618      	mov	r0, r3
    660a:	f000 febf 	bl	738c <Port_Ipw_RefreshPortDirection>
}
    660e:	bf00      	nop
    6610:	b003      	add	sp, #12
    6612:	f85d fb04 	ldr.w	pc, [sp], #4
    6616:	bf00      	nop
    6618:	1fff8ce8 	.word	0x1fff8ce8

0000661c <Port_GetVersionInfo>:
*/
void Port_GetVersionInfo
(
    Std_VersionInfoType * versioninfo
)
{
    661c:	b500      	push	{lr}
    661e:	b083      	sub	sp, #12
    6620:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    if (NULL_PTR == versioninfo)
    6622:	9b01      	ldr	r3, [sp, #4]
    6624:	2b00      	cmp	r3, #0
    6626:	d106      	bne.n	6636 <Port_GetVersionInfo+0x1a>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_GETVERSIONINFO_ID, (uint8)PORT_E_PARAM_POINTER);
    6628:	2310      	movs	r3, #16
    662a:	2203      	movs	r2, #3
    662c:	2100      	movs	r1, #0
    662e:	207c      	movs	r0, #124	; 0x7c
    6630:	f010 fb8e 	bl	16d50 <Det_ReportError>
        (versioninfo)->moduleID         = (uint16)PORT_MODULE_ID;
        (versioninfo)->sw_major_version = (uint8)PORT_SW_MAJOR_VERSION;
        (versioninfo)->sw_minor_version = (uint8)PORT_SW_MINOR_VERSION;
        (versioninfo)->sw_patch_version = (uint8)PORT_SW_PATCH_VERSION;
    }
}
    6634:	e00e      	b.n	6654 <Port_GetVersionInfo+0x38>
        (versioninfo)->vendorID         = (uint16)PORT_VENDOR_ID;
    6636:	9b01      	ldr	r3, [sp, #4]
    6638:	222b      	movs	r2, #43	; 0x2b
    663a:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID         = (uint16)PORT_MODULE_ID;
    663c:	9b01      	ldr	r3, [sp, #4]
    663e:	227c      	movs	r2, #124	; 0x7c
    6640:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)PORT_SW_MAJOR_VERSION;
    6642:	9b01      	ldr	r3, [sp, #4]
    6644:	2202      	movs	r2, #2
    6646:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)PORT_SW_MINOR_VERSION;
    6648:	9b01      	ldr	r3, [sp, #4]
    664a:	2200      	movs	r2, #0
    664c:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)PORT_SW_PATCH_VERSION;
    664e:	9b01      	ldr	r3, [sp, #4]
    6650:	2200      	movs	r2, #0
    6652:	719a      	strb	r2, [r3, #6]
}
    6654:	bf00      	nop
    6656:	b003      	add	sp, #12
    6658:	f85d fb04 	ldr.w	pc, [sp], #4

0000665c <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    665c:	b086      	sub	sp, #24
    665e:	9003      	str	r0, [sp, #12]
    6660:	9102      	str	r1, [sp, #8]
    6662:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    6664:	23ff      	movs	r3, #255	; 0xff
    6666:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    6668:	9b03      	ldr	r3, [sp, #12]
    666a:	4a39      	ldr	r2, [pc, #228]	; (6750 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    666c:	4293      	cmp	r3, r2
    666e:	d151      	bne.n	6714 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    6670:	9b02      	ldr	r3, [sp, #8]
    6672:	2b10      	cmp	r3, #16
    6674:	d867      	bhi.n	6746 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    6676:	a201      	add	r2, pc, #4	; (adr r2, 667c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    6678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    667c:	000066c1 	.word	0x000066c1
    6680:	000066cf 	.word	0x000066cf
    6684:	00006747 	.word	0x00006747
    6688:	00006747 	.word	0x00006747
    668c:	00006747 	.word	0x00006747
    6690:	00006747 	.word	0x00006747
    6694:	00006747 	.word	0x00006747
    6698:	00006747 	.word	0x00006747
    669c:	00006747 	.word	0x00006747
    66a0:	00006747 	.word	0x00006747
    66a4:	00006747 	.word	0x00006747
    66a8:	00006747 	.word	0x00006747
    66ac:	00006747 	.word	0x00006747
    66b0:	000066dd 	.word	0x000066dd
    66b4:	000066eb 	.word	0x000066eb
    66b8:	000066f9 	.word	0x000066f9
    66bc:	00006707 	.word	0x00006707
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    66c0:	2301      	movs	r3, #1
    66c2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    66c4:	9a05      	ldr	r2, [sp, #20]
    66c6:	9b01      	ldr	r3, [sp, #4]
    66c8:	4313      	orrs	r3, r2
    66ca:	9305      	str	r3, [sp, #20]
                break;
    66cc:	e03c      	b.n	6748 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    66ce:	2302      	movs	r3, #2
    66d0:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    66d2:	9a05      	ldr	r2, [sp, #20]
    66d4:	9b01      	ldr	r3, [sp, #4]
    66d6:	4313      	orrs	r3, r2
    66d8:	9305      	str	r3, [sp, #20]
                break;
    66da:	e035      	b.n	6748 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    66dc:	2304      	movs	r3, #4
    66de:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    66e0:	9a05      	ldr	r2, [sp, #20]
    66e2:	9b01      	ldr	r3, [sp, #4]
    66e4:	4313      	orrs	r3, r2
    66e6:	9305      	str	r3, [sp, #20]
                break;
    66e8:	e02e      	b.n	6748 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    66ea:	2308      	movs	r3, #8
    66ec:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    66ee:	9a05      	ldr	r2, [sp, #20]
    66f0:	9b01      	ldr	r3, [sp, #4]
    66f2:	4313      	orrs	r3, r2
    66f4:	9305      	str	r3, [sp, #20]
                break;
    66f6:	e027      	b.n	6748 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    66f8:	230e      	movs	r3, #14
    66fa:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    66fc:	9a05      	ldr	r2, [sp, #20]
    66fe:	9b01      	ldr	r3, [sp, #4]
    6700:	4013      	ands	r3, r2
    6702:	9305      	str	r3, [sp, #20]
                break;
    6704:	e020      	b.n	6748 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    6706:	230d      	movs	r3, #13
    6708:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    670a:	9a05      	ldr	r2, [sp, #20]
    670c:	9b01      	ldr	r3, [sp, #4]
    670e:	4013      	ands	r3, r2
    6710:	9305      	str	r3, [sp, #20]
                break;
    6712:	e019      	b.n	6748 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    6714:	9b03      	ldr	r3, [sp, #12]
    6716:	4a0f      	ldr	r2, [pc, #60]	; (6754 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    6718:	4293      	cmp	r3, r2
    671a:	d115      	bne.n	6748 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    671c:	9b02      	ldr	r3, [sp, #8]
    671e:	2b00      	cmp	r3, #0
    6720:	d003      	beq.n	672a <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    6722:	9b02      	ldr	r3, [sp, #8]
    6724:	2b01      	cmp	r3, #1
    6726:	d007      	beq.n	6738 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    6728:	e00e      	b.n	6748 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    672a:	230b      	movs	r3, #11
    672c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    672e:	9a05      	ldr	r2, [sp, #20]
    6730:	9b01      	ldr	r3, [sp, #4]
    6732:	4013      	ands	r3, r2
    6734:	9305      	str	r3, [sp, #20]
                break;
    6736:	e007      	b.n	6748 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    6738:	2307      	movs	r3, #7
    673a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    673c:	9a05      	ldr	r2, [sp, #20]
    673e:	9b01      	ldr	r3, [sp, #4]
    6740:	4013      	ands	r3, r2
    6742:	9305      	str	r3, [sp, #20]
                break;
    6744:	e000      	b.n	6748 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    6746:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    6748:	9b05      	ldr	r3, [sp, #20]
}
    674a:	4618      	mov	r0, r3
    674c:	b006      	add	sp, #24
    674e:	4770      	bx	lr
    6750:	4004a000 	.word	0x4004a000
    6754:	4004b000 	.word	0x4004b000

00006758 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    6758:	b500      	push	{lr}
    675a:	b089      	sub	sp, #36	; 0x24
    675c:	9003      	str	r0, [sp, #12]
    675e:	9102      	str	r1, [sp, #8]
    6760:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    6762:	9b01      	ldr	r3, [sp, #4]
    6764:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    6766:	9b01      	ldr	r3, [sp, #4]
    6768:	2b08      	cmp	r3, #8
    676a:	d121      	bne.n	67b0 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    676c:	4b13      	ldr	r3, [pc, #76]	; (67bc <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    676e:	685b      	ldr	r3, [r3, #4]
    6770:	f003 030f 	and.w	r3, r3, #15
    6774:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    6776:	9a06      	ldr	r2, [sp, #24]
    6778:	9902      	ldr	r1, [sp, #8]
    677a:	9803      	ldr	r0, [sp, #12]
    677c:	f7ff ff6e 	bl	665c <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    6780:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    6782:	9b05      	ldr	r3, [sp, #20]
    6784:	2bff      	cmp	r3, #255	; 0xff
    6786:	d011      	beq.n	67ac <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    6788:	f00e fc2a 	bl	14fe0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    678c:	4b0b      	ldr	r3, [pc, #44]	; (67bc <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    678e:	685b      	ldr	r3, [r3, #4]
    6790:	4a0a      	ldr	r2, [pc, #40]	; (67bc <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6792:	f023 030f 	bic.w	r3, r3, #15
    6796:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    6798:	4b08      	ldr	r3, [pc, #32]	; (67bc <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    679a:	685a      	ldr	r2, [r3, #4]
    679c:	9b05      	ldr	r3, [sp, #20]
    679e:	f003 030f 	and.w	r3, r3, #15
    67a2:	4906      	ldr	r1, [pc, #24]	; (67bc <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    67a4:	4313      	orrs	r3, r2
    67a6:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    67a8:	f00e fc46 	bl	15038 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    67ac:	2300      	movs	r3, #0
    67ae:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    67b0:	9b07      	ldr	r3, [sp, #28]
}
    67b2:	4618      	mov	r0, r3
    67b4:	b009      	add	sp, #36	; 0x24
    67b6:	f85d fb04 	ldr.w	pc, [sp], #4
    67ba:	bf00      	nop
    67bc:	40048000 	.word	0x40048000

000067c0 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    67c0:	b500      	push	{lr}
    67c2:	b087      	sub	sp, #28
    67c4:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    67c6:	2300      	movs	r3, #0
    67c8:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    67ca:	2300      	movs	r3, #0
    67cc:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    67ce:	2300      	movs	r3, #0
    67d0:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    67d2:	9b01      	ldr	r3, [sp, #4]
    67d4:	68db      	ldr	r3, [r3, #12]
    67d6:	2b02      	cmp	r3, #2
    67d8:	d00a      	beq.n	67f0 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    67da:	9b05      	ldr	r3, [sp, #20]
    67dc:	f043 0302 	orr.w	r3, r3, #2
    67e0:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    67e2:	9b01      	ldr	r3, [sp, #4]
    67e4:	68db      	ldr	r3, [r3, #12]
    67e6:	f003 0301 	and.w	r3, r3, #1
    67ea:	9a05      	ldr	r2, [sp, #20]
    67ec:	4313      	orrs	r3, r2
    67ee:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    67f0:	9b01      	ldr	r3, [sp, #4]
    67f2:	699b      	ldr	r3, [r3, #24]
    67f4:	019b      	lsls	r3, r3, #6
    67f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    67fa:	9a05      	ldr	r2, [sp, #20]
    67fc:	4313      	orrs	r3, r2
    67fe:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    6800:	9b01      	ldr	r3, [sp, #4]
    6802:	6a1b      	ldr	r3, [r3, #32]
    6804:	03db      	lsls	r3, r3, #15
    6806:	b29b      	uxth	r3, r3
    6808:	9a05      	ldr	r2, [sp, #20]
    680a:	4313      	orrs	r3, r2
    680c:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    680e:	9b01      	ldr	r3, [sp, #4]
    6810:	7f1b      	ldrb	r3, [r3, #28]
    6812:	2b00      	cmp	r3, #0
    6814:	d001      	beq.n	681a <Port_Ci_Port_Ip_PinInit+0x5a>
    6816:	2310      	movs	r3, #16
    6818:	e000      	b.n	681c <Port_Ci_Port_Ip_PinInit+0x5c>
    681a:	2300      	movs	r3, #0
    681c:	9a05      	ldr	r2, [sp, #20]
    681e:	4313      	orrs	r3, r2
    6820:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    6822:	9b01      	ldr	r3, [sp, #4]
    6824:	691b      	ldr	r3, [r3, #16]
    6826:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    6828:	9b01      	ldr	r3, [sp, #4]
    682a:	6818      	ldr	r0, [r3, #0]
    682c:	9b01      	ldr	r3, [sp, #4]
    682e:	689b      	ldr	r3, [r3, #8]
    6830:	9a04      	ldr	r2, [sp, #16]
    6832:	4619      	mov	r1, r3
    6834:	f7ff ff90 	bl	6758 <Port_Ci_Port_Ip_ConfigureInterleave>
    6838:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    683a:	9b03      	ldr	r3, [sp, #12]
    683c:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    683e:	9b04      	ldr	r3, [sp, #16]
    6840:	021b      	lsls	r3, r3, #8
    6842:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6846:	9a05      	ldr	r2, [sp, #20]
    6848:	4313      	orrs	r3, r2
    684a:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    684c:	f00e fa2e 	bl	14cac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    6850:	9b01      	ldr	r3, [sp, #4]
    6852:	681b      	ldr	r3, [r3, #0]
    6854:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    6858:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    685a:	9b01      	ldr	r3, [sp, #4]
    685c:	689b      	ldr	r3, [r3, #8]
    685e:	2201      	movs	r2, #1
    6860:	fa02 f303 	lsl.w	r3, r2, r3
    6864:	43db      	mvns	r3, r3
    6866:	9a02      	ldr	r2, [sp, #8]
    6868:	4013      	ands	r3, r2
    686a:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    686c:	9b01      	ldr	r3, [sp, #4]
    686e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    6872:	2b00      	cmp	r3, #0
    6874:	d001      	beq.n	687a <Port_Ci_Port_Ip_PinInit+0xba>
    6876:	2201      	movs	r2, #1
    6878:	e000      	b.n	687c <Port_Ci_Port_Ip_PinInit+0xbc>
    687a:	2200      	movs	r2, #0
    687c:	9b01      	ldr	r3, [sp, #4]
    687e:	689b      	ldr	r3, [r3, #8]
    6880:	fa02 f303 	lsl.w	r3, r2, r3
    6884:	9a02      	ldr	r2, [sp, #8]
    6886:	4313      	orrs	r3, r2
    6888:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    688a:	9b01      	ldr	r3, [sp, #4]
    688c:	681b      	ldr	r3, [r3, #0]
    688e:	9a02      	ldr	r2, [sp, #8]
    6890:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    6894:	f00e fa36 	bl	14d04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    6898:	9b04      	ldr	r3, [sp, #16]
    689a:	2b01      	cmp	r3, #1
    689c:	d16d      	bne.n	697a <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    689e:	9b01      	ldr	r3, [sp, #4]
    68a0:	695b      	ldr	r3, [r3, #20]
    68a2:	2b02      	cmp	r3, #2
    68a4:	d138      	bne.n	6918 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    68a6:	9b01      	ldr	r3, [sp, #4]
    68a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    68ac:	2b01      	cmp	r3, #1
    68ae:	d10f      	bne.n	68d0 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    68b0:	f00e fa4e 	bl	14d50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    68b4:	9b01      	ldr	r3, [sp, #4]
    68b6:	685b      	ldr	r3, [r3, #4]
    68b8:	6859      	ldr	r1, [r3, #4]
    68ba:	9b01      	ldr	r3, [sp, #4]
    68bc:	689b      	ldr	r3, [r3, #8]
    68be:	2201      	movs	r2, #1
    68c0:	409a      	lsls	r2, r3
    68c2:	9b01      	ldr	r3, [sp, #4]
    68c4:	685b      	ldr	r3, [r3, #4]
    68c6:	430a      	orrs	r2, r1
    68c8:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    68ca:	f00e fa6d 	bl	14da8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    68ce:	e013      	b.n	68f8 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    68d0:	9b01      	ldr	r3, [sp, #4]
    68d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    68d6:	2b00      	cmp	r3, #0
    68d8:	d10e      	bne.n	68f8 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    68da:	f00e fa8b 	bl	14df4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    68de:	9b01      	ldr	r3, [sp, #4]
    68e0:	685b      	ldr	r3, [r3, #4]
    68e2:	6899      	ldr	r1, [r3, #8]
    68e4:	9b01      	ldr	r3, [sp, #4]
    68e6:	689b      	ldr	r3, [r3, #8]
    68e8:	2201      	movs	r2, #1
    68ea:	409a      	lsls	r2, r3
    68ec:	9b01      	ldr	r3, [sp, #4]
    68ee:	685b      	ldr	r3, [r3, #4]
    68f0:	430a      	orrs	r2, r1
    68f2:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    68f4:	f00e faaa 	bl	14e4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    68f8:	f00e face 	bl	14e98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    68fc:	9b01      	ldr	r3, [sp, #4]
    68fe:	685b      	ldr	r3, [r3, #4]
    6900:	6959      	ldr	r1, [r3, #20]
    6902:	9b01      	ldr	r3, [sp, #4]
    6904:	689b      	ldr	r3, [r3, #8]
    6906:	2201      	movs	r2, #1
    6908:	409a      	lsls	r2, r3
    690a:	9b01      	ldr	r3, [sp, #4]
    690c:	685b      	ldr	r3, [r3, #4]
    690e:	430a      	orrs	r2, r1
    6910:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6912:	f00e faed 	bl	14ef0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    6916:	e030      	b.n	697a <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6918:	f00e fabe 	bl	14e98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    691c:	9b01      	ldr	r3, [sp, #4]
    691e:	685b      	ldr	r3, [r3, #4]
    6920:	6959      	ldr	r1, [r3, #20]
    6922:	9b01      	ldr	r3, [sp, #4]
    6924:	689b      	ldr	r3, [r3, #8]
    6926:	2201      	movs	r2, #1
    6928:	fa02 f303 	lsl.w	r3, r2, r3
    692c:	43da      	mvns	r2, r3
    692e:	9b01      	ldr	r3, [sp, #4]
    6930:	685b      	ldr	r3, [r3, #4]
    6932:	400a      	ands	r2, r1
    6934:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6936:	f00e fadb 	bl	14ef0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    693a:	f00e faff 	bl	14f3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    693e:	9b01      	ldr	r3, [sp, #4]
    6940:	685b      	ldr	r3, [r3, #4]
    6942:	6999      	ldr	r1, [r3, #24]
    6944:	9b01      	ldr	r3, [sp, #4]
    6946:	689b      	ldr	r3, [r3, #8]
    6948:	2201      	movs	r2, #1
    694a:	fa02 f303 	lsl.w	r3, r2, r3
    694e:	43da      	mvns	r2, r3
    6950:	9b01      	ldr	r3, [sp, #4]
    6952:	685b      	ldr	r3, [r3, #4]
    6954:	400a      	ands	r2, r1
    6956:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    6958:	9b01      	ldr	r3, [sp, #4]
    695a:	695b      	ldr	r3, [r3, #20]
    695c:	2b03      	cmp	r3, #3
    695e:	d10a      	bne.n	6976 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    6960:	9b01      	ldr	r3, [sp, #4]
    6962:	685b      	ldr	r3, [r3, #4]
    6964:	6999      	ldr	r1, [r3, #24]
    6966:	9b01      	ldr	r3, [sp, #4]
    6968:	689b      	ldr	r3, [r3, #8]
    696a:	2201      	movs	r2, #1
    696c:	409a      	lsls	r2, r3
    696e:	9b01      	ldr	r3, [sp, #4]
    6970:	685b      	ldr	r3, [r3, #4]
    6972:	430a      	orrs	r2, r1
    6974:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    6976:	f00e fb0d 	bl	14f94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    697a:	9b01      	ldr	r3, [sp, #4]
    697c:	681b      	ldr	r3, [r3, #0]
    697e:	9a01      	ldr	r2, [sp, #4]
    6980:	6892      	ldr	r2, [r2, #8]
    6982:	9905      	ldr	r1, [sp, #20]
    6984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6988:	bf00      	nop
    698a:	b007      	add	sp, #28
    698c:	f85d fb04 	ldr.w	pc, [sp], #4

00006990 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    6990:	b500      	push	{lr}
    6992:	b085      	sub	sp, #20
    6994:	9001      	str	r0, [sp, #4]
    6996:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    6998:	2300      	movs	r3, #0
    699a:	9303      	str	r3, [sp, #12]
    699c:	e00d      	b.n	69ba <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    699e:	9a03      	ldr	r2, [sp, #12]
    69a0:	4613      	mov	r3, r2
    69a2:	009b      	lsls	r3, r3, #2
    69a4:	4413      	add	r3, r2
    69a6:	00db      	lsls	r3, r3, #3
    69a8:	461a      	mov	r2, r3
    69aa:	9b00      	ldr	r3, [sp, #0]
    69ac:	4413      	add	r3, r2
    69ae:	4618      	mov	r0, r3
    69b0:	f7ff ff06 	bl	67c0 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    69b4:	9b03      	ldr	r3, [sp, #12]
    69b6:	3301      	adds	r3, #1
    69b8:	9303      	str	r3, [sp, #12]
    69ba:	9a03      	ldr	r2, [sp, #12]
    69bc:	9b01      	ldr	r3, [sp, #4]
    69be:	429a      	cmp	r2, r3
    69c0:	d3ed      	bcc.n	699e <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    69c2:	2300      	movs	r3, #0
}
    69c4:	4618      	mov	r0, r3
    69c6:	b005      	add	sp, #20
    69c8:	f85d fb04 	ldr.w	pc, [sp], #4

000069cc <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    69cc:	b500      	push	{lr}
    69ce:	b087      	sub	sp, #28
    69d0:	9003      	str	r0, [sp, #12]
    69d2:	9102      	str	r1, [sp, #8]
    69d4:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    69d6:	9a01      	ldr	r2, [sp, #4]
    69d8:	9902      	ldr	r1, [sp, #8]
    69da:	9803      	ldr	r0, [sp, #12]
    69dc:	f7ff febc 	bl	6758 <Port_Ci_Port_Ip_ConfigureInterleave>
    69e0:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    69e2:	f00e fb4f 	bl	15084 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    69e6:	9b03      	ldr	r3, [sp, #12]
    69e8:	9a02      	ldr	r2, [sp, #8]
    69ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    69ee:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    69f0:	9b04      	ldr	r3, [sp, #16]
    69f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    69f6:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    69f8:	9b05      	ldr	r3, [sp, #20]
    69fa:	021b      	lsls	r3, r3, #8
    69fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6a00:	9a04      	ldr	r2, [sp, #16]
    6a02:	4313      	orrs	r3, r2
    6a04:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    6a06:	9b03      	ldr	r3, [sp, #12]
    6a08:	9a02      	ldr	r2, [sp, #8]
    6a0a:	9904      	ldr	r1, [sp, #16]
    6a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    6a10:	f00e fb64 	bl	150dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    6a14:	bf00      	nop
    6a16:	b007      	add	sp, #28
    6a18:	f85d fb04 	ldr.w	pc, [sp], #4

00006a1c <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6a1c:	b500      	push	{lr}
    6a1e:	b083      	sub	sp, #12
    6a20:	9001      	str	r0, [sp, #4]
    6a22:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    6a24:	f00e fb80 	bl	15128 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    6a28:	9b01      	ldr	r3, [sp, #4]
    6a2a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6a2e:	2101      	movs	r1, #1
    6a30:	9b00      	ldr	r3, [sp, #0]
    6a32:	fa01 f303 	lsl.w	r3, r1, r3
    6a36:	431a      	orrs	r2, r3
    6a38:	9b01      	ldr	r3, [sp, #4]
    6a3a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    6a3e:	f00e fb9f 	bl	15180 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    6a42:	bf00      	nop
    6a44:	b003      	add	sp, #12
    6a46:	f85d fb04 	ldr.w	pc, [sp], #4

00006a4a <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6a4a:	b500      	push	{lr}
    6a4c:	b083      	sub	sp, #12
    6a4e:	9001      	str	r0, [sp, #4]
    6a50:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    6a52:	f00e fbbb 	bl	151cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    6a56:	9b01      	ldr	r3, [sp, #4]
    6a58:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6a5c:	2101      	movs	r1, #1
    6a5e:	9b00      	ldr	r3, [sp, #0]
    6a60:	fa01 f303 	lsl.w	r3, r1, r3
    6a64:	43db      	mvns	r3, r3
    6a66:	401a      	ands	r2, r3
    6a68:	9b01      	ldr	r3, [sp, #4]
    6a6a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    6a6e:	f00e fbd9 	bl	15224 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    6a72:	bf00      	nop
    6a74:	b003      	add	sp, #12
    6a76:	f85d fb04 	ldr.w	pc, [sp], #4

00006a7a <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    6a7a:	b082      	sub	sp, #8
    6a7c:	9001      	str	r0, [sp, #4]
    6a7e:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    6a80:	9b00      	ldr	r3, [sp, #0]
    6a82:	785b      	ldrb	r3, [r3, #1]
    6a84:	f003 0201 	and.w	r2, r3, #1
    6a88:	9b01      	ldr	r3, [sp, #4]
    6a8a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    6a8e:	9b00      	ldr	r3, [sp, #0]
    6a90:	789b      	ldrb	r3, [r3, #2]
    6a92:	f003 021f 	and.w	r2, r3, #31
    6a96:	9b01      	ldr	r3, [sp, #4]
    6a98:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    6a9c:	bf00      	nop
    6a9e:	b002      	add	sp, #8
    6aa0:	4770      	bx	lr

00006aa2 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    6aa2:	b086      	sub	sp, #24
    6aa4:	9003      	str	r0, [sp, #12]
    6aa6:	9301      	str	r3, [sp, #4]
    6aa8:	460b      	mov	r3, r1
    6aaa:	f8ad 300a 	strh.w	r3, [sp, #10]
    6aae:	4613      	mov	r3, r2
    6ab0:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    6ab4:	2300      	movs	r3, #0
    6ab6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    6aba:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6abe:	f043 0301 	orr.w	r3, r3, #1
    6ac2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    6ac6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6aca:	f043 0302 	orr.w	r3, r3, #2
    6ace:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    6ad2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6ad6:	f043 0310 	orr.w	r3, r3, #16
    6ada:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    6ade:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6ae6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    6aea:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6aee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    6af2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    6af6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    6afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    6b02:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    6b06:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6b0a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    6b0e:	4013      	ands	r3, r2
    6b10:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    6b14:	9b01      	ldr	r3, [sp, #4]
    6b16:	2b00      	cmp	r3, #0
    6b18:	d003      	beq.n	6b22 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    6b1a:	9b01      	ldr	r3, [sp, #4]
    6b1c:	2b01      	cmp	r3, #1
    6b1e:	d00a      	beq.n	6b36 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    6b20:	e013      	b.n	6b4a <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    6b22:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6b26:	041a      	lsls	r2, r3, #16
    6b28:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b2c:	431a      	orrs	r2, r3
    6b2e:	9b03      	ldr	r3, [sp, #12]
    6b30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    6b34:	e009      	b.n	6b4a <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    6b36:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6b3a:	041a      	lsls	r2, r3, #16
    6b3c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b40:	431a      	orrs	r2, r3
    6b42:	9b03      	ldr	r3, [sp, #12]
    6b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    6b48:	bf00      	nop
    }
}
    6b4a:	bf00      	nop
    6b4c:	b006      	add	sp, #24
    6b4e:	4770      	bx	lr

00006b50 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    6b50:	b500      	push	{lr}
    6b52:	b087      	sub	sp, #28
    6b54:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    6b56:	9b01      	ldr	r3, [sp, #4]
    6b58:	885b      	ldrh	r3, [r3, #2]
    6b5a:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    6b5e:	9b01      	ldr	r3, [sp, #4]
    6b60:	689b      	ldr	r3, [r3, #8]
    6b62:	7a1b      	ldrb	r3, [r3, #8]
    6b64:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    6b68:	9b01      	ldr	r3, [sp, #4]
    6b6a:	689b      	ldr	r3, [r3, #8]
    6b6c:	681b      	ldr	r3, [r3, #0]
    6b6e:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    6b70:	9b01      	ldr	r3, [sp, #4]
    6b72:	689b      	ldr	r3, [r3, #8]
    6b74:	685b      	ldr	r3, [r3, #4]
    6b76:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6b78:	2300      	movs	r3, #0
    6b7a:	f8ad 3016 	strh.w	r3, [sp, #22]
    6b7e:	e111      	b.n	6da4 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    6b80:	9b02      	ldr	r3, [sp, #8]
    6b82:	2b02      	cmp	r3, #2
    6b84:	d169      	bne.n	6c5a <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    6b86:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6b8a:	2b01      	cmp	r3, #1
    6b8c:	d11a      	bne.n	6bc4 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6b8e:	9b01      	ldr	r3, [sp, #4]
    6b90:	685a      	ldr	r2, [r3, #4]
    6b92:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b96:	005b      	lsls	r3, r3, #1
    6b98:	4413      	add	r3, r2
    6b9a:	881b      	ldrh	r3, [r3, #0]
    6b9c:	f003 021f 	and.w	r2, r3, #31
    6ba0:	9b01      	ldr	r3, [sp, #4]
    6ba2:	6859      	ldr	r1, [r3, #4]
    6ba4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6ba8:	005b      	lsls	r3, r3, #1
    6baa:	440b      	add	r3, r1
    6bac:	881b      	ldrh	r3, [r3, #0]
    6bae:	095b      	lsrs	r3, r3, #5
    6bb0:	b29b      	uxth	r3, r3
    6bb2:	4619      	mov	r1, r3
    6bb4:	4b81      	ldr	r3, [pc, #516]	; (6dbc <Port_Ipw_Init_UnusedPins+0x26c>)
    6bb6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6bba:	2101      	movs	r1, #1
    6bbc:	fa01 f202 	lsl.w	r2, r1, r2
    6bc0:	605a      	str	r2, [r3, #4]
    6bc2:	e01d      	b.n	6c00 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    6bc4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6bc8:	2b00      	cmp	r3, #0
    6bca:	d119      	bne.n	6c00 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6bcc:	9b01      	ldr	r3, [sp, #4]
    6bce:	685a      	ldr	r2, [r3, #4]
    6bd0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6bd4:	005b      	lsls	r3, r3, #1
    6bd6:	4413      	add	r3, r2
    6bd8:	881b      	ldrh	r3, [r3, #0]
    6bda:	f003 021f 	and.w	r2, r3, #31
    6bde:	9b01      	ldr	r3, [sp, #4]
    6be0:	6859      	ldr	r1, [r3, #4]
    6be2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6be6:	005b      	lsls	r3, r3, #1
    6be8:	440b      	add	r3, r1
    6bea:	881b      	ldrh	r3, [r3, #0]
    6bec:	095b      	lsrs	r3, r3, #5
    6bee:	b29b      	uxth	r3, r3
    6bf0:	4619      	mov	r1, r3
    6bf2:	4b72      	ldr	r3, [pc, #456]	; (6dbc <Port_Ipw_Init_UnusedPins+0x26c>)
    6bf4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6bf8:	2101      	movs	r1, #1
    6bfa:	fa01 f202 	lsl.w	r2, r1, r2
    6bfe:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6c00:	f00e fb36 	bl	15270 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6c04:	9b01      	ldr	r3, [sp, #4]
    6c06:	685a      	ldr	r2, [r3, #4]
    6c08:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c0c:	005b      	lsls	r3, r3, #1
    6c0e:	4413      	add	r3, r2
    6c10:	881b      	ldrh	r3, [r3, #0]
    6c12:	095b      	lsrs	r3, r3, #5
    6c14:	b29b      	uxth	r3, r3
    6c16:	461a      	mov	r2, r3
    6c18:	4b68      	ldr	r3, [pc, #416]	; (6dbc <Port_Ipw_Init_UnusedPins+0x26c>)
    6c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6c1e:	6959      	ldr	r1, [r3, #20]
    6c20:	9b01      	ldr	r3, [sp, #4]
    6c22:	685a      	ldr	r2, [r3, #4]
    6c24:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c28:	005b      	lsls	r3, r3, #1
    6c2a:	4413      	add	r3, r2
    6c2c:	881b      	ldrh	r3, [r3, #0]
    6c2e:	f003 031f 	and.w	r3, r3, #31
    6c32:	2201      	movs	r2, #1
    6c34:	409a      	lsls	r2, r3
    6c36:	9b01      	ldr	r3, [sp, #4]
    6c38:	6858      	ldr	r0, [r3, #4]
    6c3a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c3e:	005b      	lsls	r3, r3, #1
    6c40:	4403      	add	r3, r0
    6c42:	881b      	ldrh	r3, [r3, #0]
    6c44:	095b      	lsrs	r3, r3, #5
    6c46:	b29b      	uxth	r3, r3
    6c48:	4618      	mov	r0, r3
    6c4a:	4b5c      	ldr	r3, [pc, #368]	; (6dbc <Port_Ipw_Init_UnusedPins+0x26c>)
    6c4c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6c50:	430a      	orrs	r2, r1
    6c52:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6c54:	f00e fb38 	bl	152c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    6c58:	e086      	b.n	6d68 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6c5a:	f00e fb09 	bl	15270 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    6c5e:	9b01      	ldr	r3, [sp, #4]
    6c60:	685a      	ldr	r2, [r3, #4]
    6c62:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c66:	005b      	lsls	r3, r3, #1
    6c68:	4413      	add	r3, r2
    6c6a:	881b      	ldrh	r3, [r3, #0]
    6c6c:	095b      	lsrs	r3, r3, #5
    6c6e:	b29b      	uxth	r3, r3
    6c70:	461a      	mov	r2, r3
    6c72:	4b52      	ldr	r3, [pc, #328]	; (6dbc <Port_Ipw_Init_UnusedPins+0x26c>)
    6c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6c78:	6959      	ldr	r1, [r3, #20]
    6c7a:	9b01      	ldr	r3, [sp, #4]
    6c7c:	685a      	ldr	r2, [r3, #4]
    6c7e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c82:	005b      	lsls	r3, r3, #1
    6c84:	4413      	add	r3, r2
    6c86:	881b      	ldrh	r3, [r3, #0]
    6c88:	f003 031f 	and.w	r3, r3, #31
    6c8c:	2201      	movs	r2, #1
    6c8e:	fa02 f303 	lsl.w	r3, r2, r3
    6c92:	43da      	mvns	r2, r3
    6c94:	9b01      	ldr	r3, [sp, #4]
    6c96:	6858      	ldr	r0, [r3, #4]
    6c98:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c9c:	005b      	lsls	r3, r3, #1
    6c9e:	4403      	add	r3, r0
    6ca0:	881b      	ldrh	r3, [r3, #0]
    6ca2:	095b      	lsrs	r3, r3, #5
    6ca4:	b29b      	uxth	r3, r3
    6ca6:	4618      	mov	r0, r3
    6ca8:	4b44      	ldr	r3, [pc, #272]	; (6dbc <Port_Ipw_Init_UnusedPins+0x26c>)
    6caa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6cae:	400a      	ands	r2, r1
    6cb0:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6cb2:	f00e fb09 	bl	152c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    6cb6:	f00e fb2d 	bl	15314 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6cba:	9b01      	ldr	r3, [sp, #4]
    6cbc:	685a      	ldr	r2, [r3, #4]
    6cbe:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6cc2:	005b      	lsls	r3, r3, #1
    6cc4:	4413      	add	r3, r2
    6cc6:	881b      	ldrh	r3, [r3, #0]
    6cc8:	095b      	lsrs	r3, r3, #5
    6cca:	b29b      	uxth	r3, r3
    6ccc:	461a      	mov	r2, r3
    6cce:	4b3b      	ldr	r3, [pc, #236]	; (6dbc <Port_Ipw_Init_UnusedPins+0x26c>)
    6cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6cd4:	6999      	ldr	r1, [r3, #24]
    6cd6:	9b01      	ldr	r3, [sp, #4]
    6cd8:	685a      	ldr	r2, [r3, #4]
    6cda:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6cde:	005b      	lsls	r3, r3, #1
    6ce0:	4413      	add	r3, r2
    6ce2:	881b      	ldrh	r3, [r3, #0]
    6ce4:	f003 031f 	and.w	r3, r3, #31
    6ce8:	2201      	movs	r2, #1
    6cea:	fa02 f303 	lsl.w	r3, r2, r3
    6cee:	43da      	mvns	r2, r3
    6cf0:	9b01      	ldr	r3, [sp, #4]
    6cf2:	6858      	ldr	r0, [r3, #4]
    6cf4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6cf8:	005b      	lsls	r3, r3, #1
    6cfa:	4403      	add	r3, r0
    6cfc:	881b      	ldrh	r3, [r3, #0]
    6cfe:	095b      	lsrs	r3, r3, #5
    6d00:	b29b      	uxth	r3, r3
    6d02:	4618      	mov	r0, r3
    6d04:	4b2d      	ldr	r3, [pc, #180]	; (6dbc <Port_Ipw_Init_UnusedPins+0x26c>)
    6d06:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6d0a:	400a      	ands	r2, r1
    6d0c:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    6d0e:	9b02      	ldr	r3, [sp, #8]
    6d10:	2b03      	cmp	r3, #3
    6d12:	d127      	bne.n	6d64 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6d14:	9b01      	ldr	r3, [sp, #4]
    6d16:	685a      	ldr	r2, [r3, #4]
    6d18:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6d1c:	005b      	lsls	r3, r3, #1
    6d1e:	4413      	add	r3, r2
    6d20:	881b      	ldrh	r3, [r3, #0]
    6d22:	095b      	lsrs	r3, r3, #5
    6d24:	b29b      	uxth	r3, r3
    6d26:	461a      	mov	r2, r3
    6d28:	4b24      	ldr	r3, [pc, #144]	; (6dbc <Port_Ipw_Init_UnusedPins+0x26c>)
    6d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6d2e:	6999      	ldr	r1, [r3, #24]
    6d30:	9b01      	ldr	r3, [sp, #4]
    6d32:	685a      	ldr	r2, [r3, #4]
    6d34:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6d38:	005b      	lsls	r3, r3, #1
    6d3a:	4413      	add	r3, r2
    6d3c:	881b      	ldrh	r3, [r3, #0]
    6d3e:	f003 031f 	and.w	r3, r3, #31
    6d42:	2201      	movs	r2, #1
    6d44:	409a      	lsls	r2, r3
    6d46:	9b01      	ldr	r3, [sp, #4]
    6d48:	6858      	ldr	r0, [r3, #4]
    6d4a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6d4e:	005b      	lsls	r3, r3, #1
    6d50:	4403      	add	r3, r0
    6d52:	881b      	ldrh	r3, [r3, #0]
    6d54:	095b      	lsrs	r3, r3, #5
    6d56:	b29b      	uxth	r3, r3
    6d58:	4618      	mov	r0, r3
    6d5a:	4b18      	ldr	r3, [pc, #96]	; (6dbc <Port_Ipw_Init_UnusedPins+0x26c>)
    6d5c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6d60:	430a      	orrs	r2, r1
    6d62:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    6d64:	f00e fb02 	bl	1536c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    6d68:	9b01      	ldr	r3, [sp, #4]
    6d6a:	685a      	ldr	r2, [r3, #4]
    6d6c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6d70:	005b      	lsls	r3, r3, #1
    6d72:	4413      	add	r3, r2
    6d74:	881b      	ldrh	r3, [r3, #0]
    6d76:	095b      	lsrs	r3, r3, #5
    6d78:	b29b      	uxth	r3, r3
    6d7a:	461a      	mov	r2, r3
    6d7c:	4b10      	ldr	r3, [pc, #64]	; (6dc0 <Port_Ipw_Init_UnusedPins+0x270>)
    6d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6d82:	9a01      	ldr	r2, [sp, #4]
    6d84:	6851      	ldr	r1, [r2, #4]
    6d86:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6d8a:	0052      	lsls	r2, r2, #1
    6d8c:	440a      	add	r2, r1
    6d8e:	8812      	ldrh	r2, [r2, #0]
    6d90:	f002 021f 	and.w	r2, r2, #31
    6d94:	9903      	ldr	r1, [sp, #12]
    6d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6d9a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6d9e:	3301      	adds	r3, #1
    6da0:	f8ad 3016 	strh.w	r3, [sp, #22]
    6da4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6da8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6dac:	429a      	cmp	r2, r3
    6dae:	f4ff aee7 	bcc.w	6b80 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    6db2:	bf00      	nop
    6db4:	bf00      	nop
    6db6:	b007      	add	sp, #28
    6db8:	f85d fb04 	ldr.w	pc, [sp], #4
    6dbc:	00018610 	.word	0x00018610
    6dc0:	000185fc 	.word	0x000185fc

00006dc4 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    6dc4:	b500      	push	{lr}
    6dc6:	b085      	sub	sp, #20
    6dc8:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    6dca:	9b01      	ldr	r3, [sp, #4]
    6dcc:	7c1b      	ldrb	r3, [r3, #16]
    6dce:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6dd2:	2300      	movs	r3, #0
    6dd4:	f8ad 300e 	strh.w	r3, [sp, #14]
    6dd8:	e035      	b.n	6e46 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    6dda:	9b01      	ldr	r3, [sp, #4]
    6ddc:	695a      	ldr	r2, [r3, #20]
    6dde:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6de2:	00db      	lsls	r3, r3, #3
    6de4:	4413      	add	r3, r2
    6de6:	781b      	ldrb	r3, [r3, #0]
    6de8:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    6dec:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6df0:	4a29      	ldr	r2, [pc, #164]	; (6e98 <Port_Ipw_Init+0xd4>)
    6df2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    6df6:	9b01      	ldr	r3, [sp, #4]
    6df8:	695a      	ldr	r2, [r3, #20]
    6dfa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6dfe:	00db      	lsls	r3, r3, #3
    6e00:	4413      	add	r3, r2
    6e02:	4619      	mov	r1, r3
    6e04:	f7ff fe39 	bl	6a7a <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    6e08:	f00e fc1e 	bl	15648 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    6e0c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6e10:	4a21      	ldr	r2, [pc, #132]	; (6e98 <Port_Ipw_Init+0xd4>)
    6e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e16:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    6e1a:	9b01      	ldr	r3, [sp, #4]
    6e1c:	695a      	ldr	r2, [r3, #20]
    6e1e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6e22:	00db      	lsls	r3, r3, #3
    6e24:	4413      	add	r3, r2
    6e26:	685a      	ldr	r2, [r3, #4]
    6e28:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6e2c:	481a      	ldr	r0, [pc, #104]	; (6e98 <Port_Ipw_Init+0xd4>)
    6e2e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6e32:	430a      	orrs	r2, r1
    6e34:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    6e38:	f00e fc32 	bl	156a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6e3c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6e40:	3301      	adds	r3, #1
    6e42:	f8ad 300e 	strh.w	r3, [sp, #14]
    6e46:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6e4a:	b29b      	uxth	r3, r3
    6e4c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6e50:	429a      	cmp	r2, r3
    6e52:	d3c2      	bcc.n	6dda <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    6e54:	9b01      	ldr	r3, [sp, #4]
    6e56:	6a1b      	ldr	r3, [r3, #32]
    6e58:	4619      	mov	r1, r3
    6e5a:	2014      	movs	r0, #20
    6e5c:	f7ff fd98 	bl	6990 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    6e60:	9801      	ldr	r0, [sp, #4]
    6e62:	f7ff fe75 	bl	6b50 <Port_Ipw_Init_UnusedPins>
     (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
    )
    /* Port_Ipw_au16GpioDirChangeability is only used by Port_Ci_Port_Ip_SetPinDirection, Port_Ci_Port_Ip_Set2PinsDirection
       and Port_Ci_Port_Ip_SetPinMode functions */
    /* Initialize the Array with Change Direction Flags for GPIO */
    for (u16PinIndex = (uint16)0U; u16PinIndex < PAD_16BLOCK_NO_U8; u16PinIndex++)
    6e66:	2300      	movs	r3, #0
    6e68:	f8ad 300e 	strh.w	r3, [sp, #14]
    6e6c:	e00a      	b.n	6e84 <Port_Ipw_Init+0xc0>
    {
        Port_Ipw_au16GpioDirChangeability[u16PinIndex] = (uint16)0UL;
    6e6e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6e72:	4a0a      	ldr	r2, [pc, #40]	; (6e9c <Port_Ipw_Init+0xd8>)
    6e74:	2100      	movs	r1, #0
    6e76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (u16PinIndex = (uint16)0U; u16PinIndex < PAD_16BLOCK_NO_U8; u16PinIndex++)
    6e7a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6e7e:	3301      	adds	r3, #1
    6e80:	f8ad 300e 	strh.w	r3, [sp, #14]
    6e84:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6e88:	2b09      	cmp	r3, #9
    6e8a:	d9f0      	bls.n	6e6e <Port_Ipw_Init+0xaa>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    6e8c:	bf00      	nop
    6e8e:	bf00      	nop
    6e90:	b005      	add	sp, #20
    6e92:	f85d fb04 	ldr.w	pc, [sp], #4
    6e96:	bf00      	nop
    6e98:	000185fc 	.word	0x000185fc
    6e9c:	1fff8cec 	.word	0x1fff8cec

00006ea0 <Port_Ipw_SetPinDirection>:
(
    Port_PinType            PinIndex,
    Port_PinDirectionType   eDirection,
    const Port_ConfigType * pConfigPtr
)
{
    6ea0:	b500      	push	{lr}
    6ea2:	b087      	sub	sp, #28
    6ea4:	9003      	str	r0, [sp, #12]
    6ea6:	9102      	str	r1, [sp, #8]
    6ea8:	9201      	str	r2, [sp, #4]
    /* Point to the Port Pin PCR register address */
    uint16 Pin = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    6eaa:	9b01      	ldr	r3, [sp, #4]
    6eac:	68d9      	ldr	r1, [r3, #12]
    6eae:	9a03      	ldr	r2, [sp, #12]
    6eb0:	4613      	mov	r3, r2
    6eb2:	009b      	lsls	r3, r3, #2
    6eb4:	4413      	add	r3, r2
    6eb6:	009b      	lsls	r3, r3, #2
    6eb8:	440b      	add	r3, r1
    6eba:	881b      	ldrh	r3, [r3, #0]
    6ebc:	f8ad 3014 	strh.w	r3, [sp, #20]
    /* Return value */
    Std_ReturnType PinDirError             = (Std_ReturnType)E_OK;
    6ec0:	2300      	movs	r3, #0
    6ec2:	f88d 3017 	strb.w	r3, [sp, #23]

#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;
    CoreId = (uint8)Port_GetCoreID();
    6ec6:	2300      	movs	r3, #0
    6ec8:	f88d 3013 	strb.w	r3, [sp, #19]

    if ((PinIndex >= (Port_PinType)pConfigPtr->u16NumPins))
    6ecc:	9b01      	ldr	r3, [sp, #4]
    6ece:	881b      	ldrh	r3, [r3, #0]
    6ed0:	461a      	mov	r2, r3
    6ed2:	9b03      	ldr	r3, [sp, #12]
    6ed4:	4293      	cmp	r3, r2
    6ed6:	d306      	bcc.n	6ee6 <Port_Ipw_SetPinDirection+0x46>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_PARAM_PIN);
    6ed8:	230a      	movs	r3, #10
    6eda:	2201      	movs	r2, #1
    6edc:	2100      	movs	r1, #0
    6ede:	207c      	movs	r0, #124	; 0x7c
    6ee0:	f00f ff36 	bl	16d50 <Det_ReportError>
    6ee4:	e0c9      	b.n	707a <Port_Ipw_SetPinDirection+0x1da>
    }
    /* Check port pin validity */
    else if ((uint32)1 != (((pConfigPtr->pau32Port_PinToPartitionMap[PinIndex]) & ((uint32)1 << CoreId)) >> CoreId))
    6ee6:	9b01      	ldr	r3, [sp, #4]
    6ee8:	699a      	ldr	r2, [r3, #24]
    6eea:	9b03      	ldr	r3, [sp, #12]
    6eec:	009b      	lsls	r3, r3, #2
    6eee:	4413      	add	r3, r2
    6ef0:	681a      	ldr	r2, [r3, #0]
    6ef2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6ef6:	2101      	movs	r1, #1
    6ef8:	fa01 f303 	lsl.w	r3, r1, r3
    6efc:	401a      	ands	r2, r3
    6efe:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6f02:	fa22 f303 	lsr.w	r3, r2, r3
    6f06:	2b01      	cmp	r3, #1
    6f08:	d006      	beq.n	6f18 <Port_Ipw_SetPinDirection+0x78>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    6f0a:	23f0      	movs	r3, #240	; 0xf0
    6f0c:	2201      	movs	r2, #1
    6f0e:	2100      	movs	r1, #0
    6f10:	207c      	movs	r0, #124	; 0x7c
    6f12:	f00f ff1d 	bl	16d50 <Det_ReportError>
    6f16:	e0b0      	b.n	707a <Port_Ipw_SetPinDirection+0x1da>
    }
    else
    {
        /* Bit Offset and Table value for change direction flag word */
        uint8 u8PinDescBitOffset       = (uint8)(Pin & PORT_CI_BIT_OFFSET_MASK_U8);
    6f18:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f1c:	b2db      	uxtb	r3, r3
    6f1e:	f003 030f 	and.w	r3, r3, #15
    6f22:	f88d 3012 	strb.w	r3, [sp, #18]
        /* Number of block 16 */
        uint16 u16PinChangeDirFlagWord  = Port_Ipw_au16GpioDirChangeability[(uint8)(Pin >> 4)];
    6f26:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f2a:	091b      	lsrs	r3, r3, #4
    6f2c:	b29b      	uxth	r3, r3
    6f2e:	b2db      	uxtb	r3, r3
    6f30:	461a      	mov	r2, r3
    6f32:	4b55      	ldr	r3, [pc, #340]	; (7088 <Port_Ipw_SetPinDirection+0x1e8>)
    6f34:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    6f38:	f8ad 3010 	strh.w	r3, [sp, #16]

        /* Check the Direction changeability option */
        if ((TRUE == pConfigPtr->pUsedPadConfig[PinIndex].bDC) || ((uint16)0 != (u16PinChangeDirFlagWord & (uint16)(1UL << u8PinDescBitOffset))))
    6f3c:	9b01      	ldr	r3, [sp, #4]
    6f3e:	68d9      	ldr	r1, [r3, #12]
    6f40:	9a03      	ldr	r2, [sp, #12]
    6f42:	4613      	mov	r3, r2
    6f44:	009b      	lsls	r3, r3, #2
    6f46:	4413      	add	r3, r2
    6f48:	009b      	lsls	r3, r3, #2
    6f4a:	440b      	add	r3, r1
    6f4c:	7c5b      	ldrb	r3, [r3, #17]
    6f4e:	2b00      	cmp	r3, #0
    6f50:	d10c      	bne.n	6f6c <Port_Ipw_SetPinDirection+0xcc>
    6f52:	f89d 3012 	ldrb.w	r3, [sp, #18]
    6f56:	2201      	movs	r2, #1
    6f58:	fa02 f303 	lsl.w	r3, r2, r3
    6f5c:	b29a      	uxth	r2, r3
    6f5e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    6f62:	4013      	ands	r3, r2
    6f64:	b29b      	uxth	r3, r3
    6f66:	2b00      	cmp	r3, #0
    6f68:	f000 8082 	beq.w	7070 <Port_Ipw_SetPinDirection+0x1d0>
        {
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
            /* Configures Port Pin as Output */
            if (PORT_PIN_OUT == eDirection)
    6f6c:	9b02      	ldr	r3, [sp, #8]
    6f6e:	2b02      	cmp	r3, #2
    6f70:	d11d      	bne.n	6fae <Port_Ipw_SetPinDirection+0x10e>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16();
    6f72:	f00e fbbb 	bl	156ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PDDR |= (uint32)(1UL << GPIO_CHANNEL_U32(Pin));
    6f76:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f7a:	095b      	lsrs	r3, r3, #5
    6f7c:	b29b      	uxth	r3, r3
    6f7e:	461a      	mov	r2, r3
    6f80:	4b42      	ldr	r3, [pc, #264]	; (708c <Port_Ipw_SetPinDirection+0x1ec>)
    6f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6f86:	6959      	ldr	r1, [r3, #20]
    6f88:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f8c:	f003 031f 	and.w	r3, r3, #31
    6f90:	2201      	movs	r2, #1
    6f92:	409a      	lsls	r2, r3
    6f94:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f98:	095b      	lsrs	r3, r3, #5
    6f9a:	b29b      	uxth	r3, r3
    6f9c:	4618      	mov	r0, r3
    6f9e:	4b3b      	ldr	r3, [pc, #236]	; (708c <Port_Ipw_SetPinDirection+0x1ec>)
    6fa0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6fa4:	430a      	orrs	r2, r1
    6fa6:	615a      	str	r2, [r3, #20]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16();
    6fa8:	f00e fbcc 	bl	15744 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>
            if (PORT_PIN_OUT == eDirection)
    6fac:	e064      	b.n	7078 <Port_Ipw_SetPinDirection+0x1d8>
            }
            /* Configures Port Pin as Input or High-Z*/
            else if ((PORT_PIN_IN == eDirection) || (PORT_PIN_HIGH_Z == eDirection))
    6fae:	9b02      	ldr	r3, [sp, #8]
    6fb0:	2b01      	cmp	r3, #1
    6fb2:	d002      	beq.n	6fba <Port_Ipw_SetPinDirection+0x11a>
    6fb4:	9b02      	ldr	r3, [sp, #8]
    6fb6:	2b03      	cmp	r3, #3
    6fb8:	d15e      	bne.n	7078 <Port_Ipw_SetPinDirection+0x1d8>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16();
    6fba:	f00e fb97 	bl	156ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PDDR &= ~((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    6fbe:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6fc2:	095b      	lsrs	r3, r3, #5
    6fc4:	b29b      	uxth	r3, r3
    6fc6:	461a      	mov	r2, r3
    6fc8:	4b30      	ldr	r3, [pc, #192]	; (708c <Port_Ipw_SetPinDirection+0x1ec>)
    6fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6fce:	6959      	ldr	r1, [r3, #20]
    6fd0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6fd4:	f003 031f 	and.w	r3, r3, #31
    6fd8:	2201      	movs	r2, #1
    6fda:	fa02 f303 	lsl.w	r3, r2, r3
    6fde:	43da      	mvns	r2, r3
    6fe0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6fe4:	095b      	lsrs	r3, r3, #5
    6fe6:	b29b      	uxth	r3, r3
    6fe8:	4618      	mov	r0, r3
    6fea:	4b28      	ldr	r3, [pc, #160]	; (708c <Port_Ipw_SetPinDirection+0x1ec>)
    6fec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6ff0:	400a      	ands	r2, r1
    6ff2:	615a      	str	r2, [r3, #20]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16();
    6ff4:	f00e fba6 	bl	15744 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17();
    6ff8:	f00e fbca 	bl	15790 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PIDR &= ~((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    6ffc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7000:	095b      	lsrs	r3, r3, #5
    7002:	b29b      	uxth	r3, r3
    7004:	461a      	mov	r2, r3
    7006:	4b21      	ldr	r3, [pc, #132]	; (708c <Port_Ipw_SetPinDirection+0x1ec>)
    7008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    700c:	6999      	ldr	r1, [r3, #24]
    700e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7012:	f003 031f 	and.w	r3, r3, #31
    7016:	2201      	movs	r2, #1
    7018:	fa02 f303 	lsl.w	r3, r2, r3
    701c:	43da      	mvns	r2, r3
    701e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7022:	095b      	lsrs	r3, r3, #5
    7024:	b29b      	uxth	r3, r3
    7026:	4618      	mov	r0, r3
    7028:	4b18      	ldr	r3, [pc, #96]	; (708c <Port_Ipw_SetPinDirection+0x1ec>)
    702a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    702e:	400a      	ands	r2, r1
    7030:	619a      	str	r2, [r3, #24]

                /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                if (PORT_PIN_HIGH_Z == eDirection)
    7032:	9b02      	ldr	r3, [sp, #8]
    7034:	2b03      	cmp	r3, #3
    7036:	d118      	bne.n	706a <Port_Ipw_SetPinDirection+0x1ca>
                {
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PIDR |= ((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    7038:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    703c:	095b      	lsrs	r3, r3, #5
    703e:	b29b      	uxth	r3, r3
    7040:	461a      	mov	r2, r3
    7042:	4b12      	ldr	r3, [pc, #72]	; (708c <Port_Ipw_SetPinDirection+0x1ec>)
    7044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7048:	6999      	ldr	r1, [r3, #24]
    704a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    704e:	f003 031f 	and.w	r3, r3, #31
    7052:	2201      	movs	r2, #1
    7054:	409a      	lsls	r2, r3
    7056:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    705a:	095b      	lsrs	r3, r3, #5
    705c:	b29b      	uxth	r3, r3
    705e:	4618      	mov	r0, r3
    7060:	4b0a      	ldr	r3, [pc, #40]	; (708c <Port_Ipw_SetPinDirection+0x1ec>)
    7062:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7066:	430a      	orrs	r2, r1
    7068:	619a      	str	r2, [r3, #24]
                }
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17();
    706a:	f00e fbbd 	bl	157e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>
            if (PORT_PIN_OUT == eDirection)
    706e:	e003      	b.n	7078 <Port_Ipw_SetPinDirection+0x1d8>
#if (STD_ON == PORT_DEV_ERROR_DETECT)
        }
        /* Direction changeability is NOT supported */
        else
        {
            PinDirError = (Std_ReturnType)E_NOT_OK;
    7070:	2301      	movs	r3, #1
    7072:	f88d 3017 	strb.w	r3, [sp, #23]
    7076:	e000      	b.n	707a <Port_Ipw_SetPinDirection+0x1da>
            if (PORT_PIN_OUT == eDirection)
    7078:	bf00      	nop
        }
    }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

    return PinDirError;
    707a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    707e:	4618      	mov	r0, r3
    7080:	b007      	add	sp, #28
    7082:	f85d fb04 	ldr.w	pc, [sp], #4
    7086:	bf00      	nop
    7088:	1fff8cec 	.word	0x1fff8cec
    708c:	00018610 	.word	0x00018610

00007090 <Port_Ipw_SetPinMode>:
(
    Port_PinType PinIndex,
    Port_PinModeType PinMode,
    const Port_ConfigType * pConfigPtr
)
{
    7090:	b500      	push	{lr}
    7092:	b08b      	sub	sp, #44	; 0x2c
    7094:	9003      	str	r0, [sp, #12]
    7096:	460b      	mov	r3, r1
    7098:	9201      	str	r2, [sp, #4]
    709a:	f88d 300b 	strb.w	r3, [sp, #11]
    Std_ReturnType PinModeError             = (Std_ReturnType)0UL;
    709e:	2300      	movs	r3, #0
    70a0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint16 PinPad                           = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    70a4:	9b01      	ldr	r3, [sp, #4]
    70a6:	68d9      	ldr	r1, [r3, #12]
    70a8:	9a03      	ldr	r2, [sp, #12]
    70aa:	4613      	mov	r3, r2
    70ac:	009b      	lsls	r3, r3, #2
    70ae:	4413      	add	r3, r2
    70b0:	009b      	lsls	r3, r3, #2
    70b2:	440b      	add	r3, r1
    70b4:	881b      	ldrh	r3, [r3, #0]
    70b6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    Port_PinModeType PinCfgRegValue         = (Port_PinModeType)PinMode;
    70ba:	f89d 300b 	ldrb.w	r3, [sp, #11]
    70be:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint16 u16PinDescBitOffset;
    /* Variable used to clear and updated PCR register */
    uint32 u32LocalPCR;
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;
    CoreId = (uint8)Port_GetCoreID();
    70c2:	2300      	movs	r3, #0
    70c4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22

    if ((PinIndex >= (Port_PinType)pConfigPtr->u16NumPins))
    70c8:	9b01      	ldr	r3, [sp, #4]
    70ca:	881b      	ldrh	r3, [r3, #0]
    70cc:	461a      	mov	r2, r3
    70ce:	9b03      	ldr	r3, [sp, #12]
    70d0:	4293      	cmp	r3, r2
    70d2:	d306      	bcc.n	70e2 <Port_Ipw_SetPinMode+0x52>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_PIN);
    70d4:	230a      	movs	r3, #10
    70d6:	2204      	movs	r2, #4
    70d8:	2100      	movs	r1, #0
    70da:	207c      	movs	r0, #124	; 0x7c
    70dc:	f00f fe38 	bl	16d50 <Det_ReportError>
    70e0:	e0b3      	b.n	724a <Port_Ipw_SetPinMode+0x1ba>
    }
    /* Check if this function was called with wrong core */
    else if ((uint32)1 != (((pConfigPtr->pau32Port_PinToPartitionMap[PinIndex]) & ((uint32)1 << CoreId)) >> CoreId))
    70e2:	9b01      	ldr	r3, [sp, #4]
    70e4:	699a      	ldr	r2, [r3, #24]
    70e6:	9b03      	ldr	r3, [sp, #12]
    70e8:	009b      	lsls	r3, r3, #2
    70ea:	4413      	add	r3, r2
    70ec:	681a      	ldr	r2, [r3, #0]
    70ee:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    70f2:	2101      	movs	r1, #1
    70f4:	fa01 f303 	lsl.w	r3, r1, r3
    70f8:	401a      	ands	r2, r3
    70fa:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    70fe:	fa22 f303 	lsr.w	r3, r2, r3
    7102:	2b01      	cmp	r3, #1
    7104:	d006      	beq.n	7114 <Port_Ipw_SetPinMode+0x84>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_CONFIG);
    7106:	23f0      	movs	r3, #240	; 0xf0
    7108:	2204      	movs	r2, #4
    710a:	2100      	movs	r1, #0
    710c:	207c      	movs	r0, #124	; 0x7c
    710e:	f00f fe1f 	bl	16d50 <Det_ReportError>
    7112:	e09a      	b.n	724a <Port_Ipw_SetPinMode+0x1ba>
    }
    /* Check port pin mode Unchangeable */
    else if (FALSE ==  pConfigPtr->pUsedPadConfig[PinIndex].bMC)
    7114:	9b01      	ldr	r3, [sp, #4]
    7116:	68d9      	ldr	r1, [r3, #12]
    7118:	9a03      	ldr	r2, [sp, #12]
    711a:	4613      	mov	r3, r2
    711c:	009b      	lsls	r3, r3, #2
    711e:	4413      	add	r3, r2
    7120:	009b      	lsls	r3, r3, #2
    7122:	440b      	add	r3, r1
    7124:	7c9b      	ldrb	r3, [r3, #18]
    7126:	f083 0301 	eor.w	r3, r3, #1
    712a:	b2db      	uxtb	r3, r3
    712c:	2b00      	cmp	r3, #0
    712e:	d006      	beq.n	713e <Port_Ipw_SetPinMode+0xae>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_MODE_UNCHANGEABLE);
    7130:	230e      	movs	r3, #14
    7132:	2204      	movs	r2, #4
    7134:	2100      	movs	r1, #0
    7136:	207c      	movs	r0, #124	; 0x7c
    7138:	f00f fe0a 	bl	16d50 <Det_ReportError>
    713c:	e085      	b.n	724a <Port_Ipw_SetPinMode+0x1ba>
    }
    else
    {
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

        if (PAD_MODE_OPTIONS_U8 <= PinMode)
    713e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7142:	2b07      	cmp	r3, #7
    7144:	d903      	bls.n	714e <Port_Ipw_SetPinMode+0xbe>
        {
            PinModeError = PORT_E_PARAM_INVALID_MODE;
    7146:	230d      	movs	r3, #13
    7148:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    714c:	e07d      	b.n	724a <Port_Ipw_SetPinMode+0x1ba>
        }
        else
        {
            Port_PinDirectionType ePadDirection = PORT_PIN_DISABLED;
    714e:	2300      	movs	r3, #0
    7150:	9307      	str	r3, [sp, #28]

            /* Bit offset of Pin index inside the pin description matrix */
            u16PinDescBitOffset = PinPad & PORT_MODE_BIT_OFFSET_MASK_U8;
    7152:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7156:	f003 030f 	and.w	r3, r3, #15
    715a:	f8ad 301a 	strh.w	r3, [sp, #26]
            /* Selected word inside the pin description matrix */
            u16PinDescWord = (uint16)Port_au16PinDescription[(uint8)PinMode][PinPad >> 4U];
    715e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7162:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7166:	091b      	lsrs	r3, r3, #4
    7168:	b29b      	uxth	r3, r3
    716a:	4618      	mov	r0, r3
    716c:	493a      	ldr	r1, [pc, #232]	; (7258 <Port_Ipw_SetPinMode+0x1c8>)
    716e:	4613      	mov	r3, r2
    7170:	009b      	lsls	r3, r3, #2
    7172:	4413      	add	r3, r2
    7174:	005b      	lsls	r3, r3, #1
    7176:	4403      	add	r3, r0
    7178:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    717c:	f8ad 3018 	strh.w	r3, [sp, #24]

            /* Check if desired mode is valid for selected pin */
            if ((u16PinDescWord & ((uint16)1UL<<u16PinDescBitOffset)) != (uint16)0U)
    7180:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    7184:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    7188:	fa42 f303 	asr.w	r3, r2, r3
    718c:	f003 0301 	and.w	r3, r3, #1
    7190:	2b00      	cmp	r3, #0
    7192:	d057      	beq.n	7244 <Port_Ipw_SetPinMode+0x1b4>
            {
                switch(PinMode)
    7194:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7198:	2b01      	cmp	r3, #1
    719a:	d11f      	bne.n	71dc <Port_Ipw_SetPinMode+0x14c>
                {
                    case PORT_GPIO_MODE:
#if (STD_ON == PORT_DEV_ERROR_DETECT)
                        Port_Ipw_SetGpioDirChangeability(PinPad, TRUE);
    719c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    71a0:	2101      	movs	r1, #1
    71a2:	4618      	mov	r0, r3
    71a4:	f000 f85c 	bl	7260 <Port_Ipw_SetGpioDirChangeability>
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
                        ePadDirection = pConfigPtr->pUsedPadConfig[PinIndex].ePadDir;
    71a8:	9b01      	ldr	r3, [sp, #4]
    71aa:	68d9      	ldr	r1, [r3, #12]
    71ac:	9a03      	ldr	r2, [sp, #12]
    71ae:	4613      	mov	r3, r2
    71b0:	009b      	lsls	r3, r3, #2
    71b2:	4413      	add	r3, r2
    71b4:	009b      	lsls	r3, r3, #2
    71b6:	440b      	add	r3, r1
    71b8:	68db      	ldr	r3, [r3, #12]
    71ba:	9307      	str	r3, [sp, #28]
#if (STD_OFF == PORT_SETPINMODE_DOES_NOT_TOUCH_GPIO_LEVEL)
                        if ((PORT_PIN_IN != ePadDirection) && (PORT_PIN_HIGH_Z != ePadDirection))
    71bc:	9b07      	ldr	r3, [sp, #28]
    71be:	2b01      	cmp	r3, #1
    71c0:	d006      	beq.n	71d0 <Port_Ipw_SetPinMode+0x140>
    71c2:	9b07      	ldr	r3, [sp, #28]
    71c4:	2b03      	cmp	r3, #3
    71c6:	d003      	beq.n	71d0 <Port_Ipw_SetPinMode+0x140>
                        {
                            Port_Ipw_SetGpioPadOutput(PinIndex, pConfigPtr);
    71c8:	9901      	ldr	r1, [sp, #4]
    71ca:	9803      	ldr	r0, [sp, #12]
    71cc:	f000 f896 	bl	72fc <Port_Ipw_SetGpioPadOutput>
                        }
#endif /* (STD_OFF == PORT_SETPINMODE_DOES_NOT_TOUCH_GPIO_LEVEL) */
                        (void)Port_Ipw_SetPinDirection(PinIndex, ePadDirection, pConfigPtr);
    71d0:	9a01      	ldr	r2, [sp, #4]
    71d2:	9907      	ldr	r1, [sp, #28]
    71d4:	9803      	ldr	r0, [sp, #12]
    71d6:	f7ff fe63 	bl	6ea0 <Port_Ipw_SetPinDirection>
                        break;
    71da:	e006      	b.n	71ea <Port_Ipw_SetPinMode+0x15a>

                    default:
#if (STD_ON == PORT_DEV_ERROR_DETECT)
                    /* All the ALT modes except GPIO*/
                        Port_Ipw_SetGpioDirChangeability(PinPad,FALSE);
    71dc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    71e0:	2100      	movs	r1, #0
    71e2:	4618      	mov	r0, r3
    71e4:	f000 f83c 	bl	7260 <Port_Ipw_SetGpioDirChangeability>
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
                        break;
    71e8:	bf00      	nop
                }
                /* Sets the port pin mode */
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27();
    71ea:	f00e fe05 	bl	15df8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>
                u32LocalPCR  = (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(PinPad)])->PCR[GPIO_CHANNEL_U32(PinPad)];
    71ee:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    71f2:	095b      	lsrs	r3, r3, #5
    71f4:	b29b      	uxth	r3, r3
    71f6:	461a      	mov	r2, r3
    71f8:	4b18      	ldr	r3, [pc, #96]	; (725c <Port_Ipw_SetPinMode+0x1cc>)
    71fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    71fe:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    7202:	f002 021f 	and.w	r2, r2, #31
    7206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    720a:	9305      	str	r3, [sp, #20]

                u32LocalPCR &= ~(PORT_CI_PCR_ALT_MODE_U32);
    720c:	9b05      	ldr	r3, [sp, #20]
    720e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    7212:	9305      	str	r3, [sp, #20]
                u32LocalPCR |= ((uint32)PinCfgRegValue << PORT_CI_PCR_ALT_MODE_OFFSET_U32);
    7214:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    7218:	021b      	lsls	r3, r3, #8
    721a:	9a05      	ldr	r2, [sp, #20]
    721c:	4313      	orrs	r3, r2
    721e:	9305      	str	r3, [sp, #20]

                (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(PinPad)])->PCR[GPIO_CHANNEL_U32(PinPad)] = u32LocalPCR;
    7220:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7224:	095b      	lsrs	r3, r3, #5
    7226:	b29b      	uxth	r3, r3
    7228:	461a      	mov	r2, r3
    722a:	4b0c      	ldr	r3, [pc, #48]	; (725c <Port_Ipw_SetPinMode+0x1cc>)
    722c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7230:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    7234:	f002 021f 	and.w	r2, r2, #31
    7238:	9905      	ldr	r1, [sp, #20]
    723a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27();
    723e:	f00e fe07 	bl	15e50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>
    7242:	e002      	b.n	724a <Port_Ipw_SetPinMode+0x1ba>
            }
            else
            {
                PinModeError = PORT_E_PARAM_INVALID_MODE;
    7244:	230d      	movs	r3, #13
    7246:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

    return PinModeError;
    724a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    724e:	4618      	mov	r0, r3
    7250:	b00b      	add	sp, #44	; 0x2c
    7252:	f85d fb04 	ldr.w	pc, [sp], #4
    7256:	bf00      	nop
    7258:	00019310 	.word	0x00019310
    725c:	000185fc 	.word	0x000185fc

00007260 <Port_Ipw_SetGpioDirChangeability>:
void Port_Ipw_SetGpioDirChangeability
(
    uint16 PadID,
    boolean bStatus
)
{
    7260:	b500      	push	{lr}
    7262:	b085      	sub	sp, #20
    7264:	4603      	mov	r3, r0
    7266:	460a      	mov	r2, r1
    7268:	f8ad 3006 	strh.w	r3, [sp, #6]
    726c:	4613      	mov	r3, r2
    726e:	f88d 3005 	strb.w	r3, [sp, #5]
    /* Pin description variables */
    uint8 u8PinBitOffset;
    uint16 u16PinDirFlagWord;

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18();
    7272:	f00e fadf 	bl	15834 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>
    /* Bit offset of Pin index inside the pin description matrix */
    u8PinBitOffset      = (uint8)((uint8)PadID & PORT_CI_BIT_OFFSET_MASK_U8);
    7276:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    727a:	b2db      	uxtb	r3, r3
    727c:	f003 030f 	and.w	r3, r3, #15
    7280:	f88d 300d 	strb.w	r3, [sp, #13]
    u16PinDirFlagWord   = Port_Ipw_au16GpioDirChangeability[(uint8)((uint8)PadID >> 4)];
    7284:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7288:	b2db      	uxtb	r3, r3
    728a:	091b      	lsrs	r3, r3, #4
    728c:	b2db      	uxtb	r3, r3
    728e:	461a      	mov	r2, r3
    7290:	4b19      	ldr	r3, [pc, #100]	; (72f8 <Port_Ipw_SetGpioDirChangeability+0x98>)
    7292:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    7296:	f8ad 300e 	strh.w	r3, [sp, #14]

    if (TRUE == bStatus)
    729a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    729e:	2b00      	cmp	r3, #0
    72a0:	d00b      	beq.n	72ba <Port_Ipw_SetGpioDirChangeability+0x5a>
    {
        /* Set the change direction flag */
        u16PinDirFlagWord |= (uint16)(1UL<<u8PinBitOffset);
    72a2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    72a6:	2201      	movs	r2, #1
    72a8:	fa02 f303 	lsl.w	r3, r2, r3
    72ac:	b29a      	uxth	r2, r3
    72ae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    72b2:	4313      	orrs	r3, r2
    72b4:	f8ad 300e 	strh.w	r3, [sp, #14]
    72b8:	e00c      	b.n	72d4 <Port_Ipw_SetGpioDirChangeability+0x74>
    }
    else
    {
        /* Reset the change direction flag */
        u16PinDirFlagWord &= (uint16)(~((uint16)(1UL<<u8PinBitOffset)));
    72ba:	f89d 300d 	ldrb.w	r3, [sp, #13]
    72be:	2201      	movs	r2, #1
    72c0:	fa02 f303 	lsl.w	r3, r2, r3
    72c4:	b29b      	uxth	r3, r3
    72c6:	43db      	mvns	r3, r3
    72c8:	b29a      	uxth	r2, r3
    72ca:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    72ce:	4013      	ands	r3, r2
    72d0:	f8ad 300e 	strh.w	r3, [sp, #14]
    }
    Port_Ipw_au16GpioDirChangeability[(uint8)((uint8)PadID >> 4)] = u16PinDirFlagWord;
    72d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    72d8:	b2db      	uxtb	r3, r3
    72da:	091b      	lsrs	r3, r3, #4
    72dc:	b2db      	uxtb	r3, r3
    72de:	4619      	mov	r1, r3
    72e0:	4a05      	ldr	r2, [pc, #20]	; (72f8 <Port_Ipw_SetGpioDirChangeability+0x98>)
    72e2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    72e6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    /* Exit critical region */
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18();
    72ea:	f00e facf 	bl	1588c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>
}
    72ee:	bf00      	nop
    72f0:	b005      	add	sp, #20
    72f2:	f85d fb04 	ldr.w	pc, [sp], #4
    72f6:	bf00      	nop
    72f8:	1fff8cec 	.word	0x1fff8cec

000072fc <Port_Ipw_SetGpioPadOutput>:
void Port_Ipw_SetGpioPadOutput
(
    Port_PinType            PinIndex,
    const Port_ConfigType * pConfigPtr
)
{
    72fc:	b084      	sub	sp, #16
    72fe:	9001      	str	r0, [sp, #4]
    7300:	9100      	str	r1, [sp, #0]
    uint16 Pin = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    7302:	9b00      	ldr	r3, [sp, #0]
    7304:	68d9      	ldr	r1, [r3, #12]
    7306:	9a01      	ldr	r2, [sp, #4]
    7308:	4613      	mov	r3, r2
    730a:	009b      	lsls	r3, r3, #2
    730c:	4413      	add	r3, r2
    730e:	009b      	lsls	r3, r3, #2
    7310:	440b      	add	r3, r1
    7312:	881b      	ldrh	r3, [r3, #0]
    7314:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint8 u8LocalPDO = pConfigPtr->pUsedPadConfig[PinIndex].u8PDO;
    7318:	9b00      	ldr	r3, [sp, #0]
    731a:	68d9      	ldr	r1, [r3, #12]
    731c:	9a01      	ldr	r2, [sp, #4]
    731e:	4613      	mov	r3, r2
    7320:	009b      	lsls	r3, r3, #2
    7322:	4413      	add	r3, r2
    7324:	009b      	lsls	r3, r3, #2
    7326:	440b      	add	r3, r1
    7328:	7a1b      	ldrb	r3, [r3, #8]
    732a:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Set pin to High value */
    if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    732e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7332:	2b01      	cmp	r3, #1
    7334:	d110      	bne.n	7358 <Port_Ipw_SetGpioPadOutput+0x5c>
    {
        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(Pin));
    7336:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    733a:	f003 021f 	and.w	r2, r3, #31
    733e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7342:	095b      	lsrs	r3, r3, #5
    7344:	b29b      	uxth	r3, r3
    7346:	4619      	mov	r1, r3
    7348:	4b0f      	ldr	r3, [pc, #60]	; (7388 <Port_Ipw_SetGpioPadOutput+0x8c>)
    734a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    734e:	2101      	movs	r1, #1
    7350:	fa01 f202 	lsl.w	r2, r1, r2
    7354:	605a      	str	r2, [r3, #4]
    }
    else
    {
        /* No action to be done */
    }
}
    7356:	e013      	b.n	7380 <Port_Ipw_SetGpioPadOutput+0x84>
    else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    7358:	f89d 300d 	ldrb.w	r3, [sp, #13]
    735c:	2b00      	cmp	r3, #0
    735e:	d10f      	bne.n	7380 <Port_Ipw_SetGpioPadOutput+0x84>
        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(Pin));
    7360:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7364:	f003 021f 	and.w	r2, r3, #31
    7368:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    736c:	095b      	lsrs	r3, r3, #5
    736e:	b29b      	uxth	r3, r3
    7370:	4619      	mov	r1, r3
    7372:	4b05      	ldr	r3, [pc, #20]	; (7388 <Port_Ipw_SetGpioPadOutput+0x8c>)
    7374:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    7378:	2101      	movs	r1, #1
    737a:	fa01 f202 	lsl.w	r2, r1, r2
    737e:	609a      	str	r2, [r3, #8]
}
    7380:	bf00      	nop
    7382:	b004      	add	sp, #16
    7384:	4770      	bx	lr
    7386:	bf00      	nop
    7388:	00018610 	.word	0x00018610

0000738c <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    738c:	b500      	push	{lr}
    738e:	b085      	sub	sp, #20
    7390:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    7392:	9b01      	ldr	r3, [sp, #4]
    7394:	881b      	ldrh	r3, [r3, #0]
    7396:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    739a:	2300      	movs	r3, #0
    739c:	f8ad 300e 	strh.w	r3, [sp, #14]
    73a0:	e0d2      	b.n	7548 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    73a2:	9b01      	ldr	r3, [sp, #4]
    73a4:	68d9      	ldr	r1, [r3, #12]
    73a6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    73aa:	4613      	mov	r3, r2
    73ac:	009b      	lsls	r3, r3, #2
    73ae:	4413      	add	r3, r2
    73b0:	009b      	lsls	r3, r3, #2
    73b2:	440b      	add	r3, r1
    73b4:	7c5b      	ldrb	r3, [r3, #17]
    73b6:	f083 0301 	eor.w	r3, r3, #1
    73ba:	b2db      	uxtb	r3, r3
    73bc:	2b00      	cmp	r3, #0
    73be:	f000 80be 	beq.w	753e <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    73c2:	9b01      	ldr	r3, [sp, #4]
    73c4:	68d9      	ldr	r1, [r3, #12]
    73c6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    73ca:	4613      	mov	r3, r2
    73cc:	009b      	lsls	r3, r3, #2
    73ce:	4413      	add	r3, r2
    73d0:	009b      	lsls	r3, r3, #2
    73d2:	440b      	add	r3, r1
    73d4:	7c1b      	ldrb	r3, [r3, #16]
    73d6:	2b00      	cmp	r3, #0
    73d8:	f000 80b1 	beq.w	753e <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    73dc:	9b01      	ldr	r3, [sp, #4]
    73de:	68d9      	ldr	r1, [r3, #12]
    73e0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    73e4:	4613      	mov	r3, r2
    73e6:	009b      	lsls	r3, r3, #2
    73e8:	4413      	add	r3, r2
    73ea:	009b      	lsls	r3, r3, #2
    73ec:	440b      	add	r3, r1
    73ee:	881b      	ldrh	r3, [r3, #0]
    73f0:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    73f4:	9b01      	ldr	r3, [sp, #4]
    73f6:	68d9      	ldr	r1, [r3, #12]
    73f8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    73fc:	4613      	mov	r3, r2
    73fe:	009b      	lsls	r3, r3, #2
    7400:	4413      	add	r3, r2
    7402:	009b      	lsls	r3, r3, #2
    7404:	440b      	add	r3, r1
    7406:	68db      	ldr	r3, [r3, #12]
    7408:	2b02      	cmp	r3, #2
    740a:	d11d      	bne.n	7448 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    740c:	f00e fa64 	bl	158d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7410:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7414:	095b      	lsrs	r3, r3, #5
    7416:	b29b      	uxth	r3, r3
    7418:	461a      	mov	r2, r3
    741a:	4b51      	ldr	r3, [pc, #324]	; (7560 <Port_Ipw_RefreshPortDirection+0x1d4>)
    741c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7420:	6959      	ldr	r1, [r3, #20]
    7422:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7426:	f003 031f 	and.w	r3, r3, #31
    742a:	2201      	movs	r2, #1
    742c:	409a      	lsls	r2, r3
    742e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7432:	095b      	lsrs	r3, r3, #5
    7434:	b29b      	uxth	r3, r3
    7436:	4618      	mov	r0, r3
    7438:	4b49      	ldr	r3, [pc, #292]	; (7560 <Port_Ipw_RefreshPortDirection+0x1d4>)
    743a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    743e:	430a      	orrs	r2, r1
    7440:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    7442:	f00e fa75 	bl	15930 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    7446:	e07a      	b.n	753e <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    7448:	9b01      	ldr	r3, [sp, #4]
    744a:	68d9      	ldr	r1, [r3, #12]
    744c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7450:	4613      	mov	r3, r2
    7452:	009b      	lsls	r3, r3, #2
    7454:	4413      	add	r3, r2
    7456:	009b      	lsls	r3, r3, #2
    7458:	440b      	add	r3, r1
    745a:	68db      	ldr	r3, [r3, #12]
    745c:	2b01      	cmp	r3, #1
    745e:	d00b      	beq.n	7478 <Port_Ipw_RefreshPortDirection+0xec>
    7460:	9b01      	ldr	r3, [sp, #4]
    7462:	68d9      	ldr	r1, [r3, #12]
    7464:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7468:	4613      	mov	r3, r2
    746a:	009b      	lsls	r3, r3, #2
    746c:	4413      	add	r3, r2
    746e:	009b      	lsls	r3, r3, #2
    7470:	440b      	add	r3, r1
    7472:	68db      	ldr	r3, [r3, #12]
    7474:	2b03      	cmp	r3, #3
    7476:	d162      	bne.n	753e <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    7478:	f00e fa2e 	bl	158d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    747c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7480:	095b      	lsrs	r3, r3, #5
    7482:	b29b      	uxth	r3, r3
    7484:	461a      	mov	r2, r3
    7486:	4b36      	ldr	r3, [pc, #216]	; (7560 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    748c:	6959      	ldr	r1, [r3, #20]
    748e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7492:	f003 031f 	and.w	r3, r3, #31
    7496:	2201      	movs	r2, #1
    7498:	fa02 f303 	lsl.w	r3, r2, r3
    749c:	43da      	mvns	r2, r3
    749e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    74a2:	095b      	lsrs	r3, r3, #5
    74a4:	b29b      	uxth	r3, r3
    74a6:	4618      	mov	r0, r3
    74a8:	4b2d      	ldr	r3, [pc, #180]	; (7560 <Port_Ipw_RefreshPortDirection+0x1d4>)
    74aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    74ae:	400a      	ands	r2, r1
    74b0:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    74b2:	f00e fa3d 	bl	15930 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    74b6:	f00e fa61 	bl	1597c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    74ba:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    74be:	095b      	lsrs	r3, r3, #5
    74c0:	b29b      	uxth	r3, r3
    74c2:	461a      	mov	r2, r3
    74c4:	4b26      	ldr	r3, [pc, #152]	; (7560 <Port_Ipw_RefreshPortDirection+0x1d4>)
    74c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    74ca:	6999      	ldr	r1, [r3, #24]
    74cc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    74d0:	f003 031f 	and.w	r3, r3, #31
    74d4:	2201      	movs	r2, #1
    74d6:	fa02 f303 	lsl.w	r3, r2, r3
    74da:	43da      	mvns	r2, r3
    74dc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    74e0:	095b      	lsrs	r3, r3, #5
    74e2:	b29b      	uxth	r3, r3
    74e4:	4618      	mov	r0, r3
    74e6:	4b1e      	ldr	r3, [pc, #120]	; (7560 <Port_Ipw_RefreshPortDirection+0x1d4>)
    74e8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    74ec:	400a      	ands	r2, r1
    74ee:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    74f0:	9b01      	ldr	r3, [sp, #4]
    74f2:	68d9      	ldr	r1, [r3, #12]
    74f4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    74f8:	4613      	mov	r3, r2
    74fa:	009b      	lsls	r3, r3, #2
    74fc:	4413      	add	r3, r2
    74fe:	009b      	lsls	r3, r3, #2
    7500:	440b      	add	r3, r1
    7502:	68db      	ldr	r3, [r3, #12]
    7504:	2b03      	cmp	r3, #3
    7506:	d118      	bne.n	753a <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7508:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    750c:	095b      	lsrs	r3, r3, #5
    750e:	b29b      	uxth	r3, r3
    7510:	461a      	mov	r2, r3
    7512:	4b13      	ldr	r3, [pc, #76]	; (7560 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7518:	6999      	ldr	r1, [r3, #24]
    751a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    751e:	f003 031f 	and.w	r3, r3, #31
    7522:	2201      	movs	r2, #1
    7524:	409a      	lsls	r2, r3
    7526:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    752a:	095b      	lsrs	r3, r3, #5
    752c:	b29b      	uxth	r3, r3
    752e:	4618      	mov	r0, r3
    7530:	4b0b      	ldr	r3, [pc, #44]	; (7560 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7532:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7536:	430a      	orrs	r2, r1
    7538:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    753a:	f00e fa4b 	bl	159d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    753e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7542:	3301      	adds	r3, #1
    7544:	f8ad 300e 	strh.w	r3, [sp, #14]
    7548:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    754c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7550:	429a      	cmp	r2, r3
    7552:	f4ff af26 	bcc.w	73a2 <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    7556:	bf00      	nop
    7558:	bf00      	nop
    755a:	b005      	add	sp, #20
    755c:	f85d fb04 	ldr.w	pc, [sp], #4
    7560:	00018610 	.word	0x00018610

00007564 <Adc_HwAcc_SetSC2Reg>:
#include "Adc_MemMap.h"

static inline void Adc_HwAcc_SetSC2Reg(ADC_Type * const Base,
                                       const uint32 ClearMask,
                                       const uint32 Value)
{
    7564:	b086      	sub	sp, #24
    7566:	9003      	str	r0, [sp, #12]
    7568:	9102      	str	r1, [sp, #8]
    756a:	9201      	str	r2, [sp, #4]
    /* Clear and set SC2 register based on ClearMask and Value */
    uint32 Sc2Reg = Base->SC2;
    756c:	9b03      	ldr	r3, [sp, #12]
    756e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7572:	9305      	str	r3, [sp, #20]
    Sc2Reg &= ~(ClearMask);
    7574:	9b02      	ldr	r3, [sp, #8]
    7576:	43db      	mvns	r3, r3
    7578:	9a05      	ldr	r2, [sp, #20]
    757a:	4013      	ands	r3, r2
    757c:	9305      	str	r3, [sp, #20]
    Sc2Reg |= Value;
    757e:	9a05      	ldr	r2, [sp, #20]
    7580:	9b01      	ldr	r3, [sp, #4]
    7582:	4313      	orrs	r3, r2
    7584:	9305      	str	r3, [sp, #20]
    Base->SC2 = Sc2Reg;
    7586:	9b03      	ldr	r3, [sp, #12]
    7588:	9a05      	ldr	r2, [sp, #20]
    758a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    758e:	bf00      	nop
    7590:	b006      	add	sp, #24
    7592:	4770      	bx	lr

00007594 <Adc_HwAcc_SetClock>:

static inline void Adc_HwAcc_SetClock(ADC_Type * const Base,
                                      const Adc_Ip_ClockSelType ClockDivide,
                                      const Adc_Ip_ClkSourceType InputClock)
{
    7594:	b086      	sub	sp, #24
    7596:	9003      	str	r0, [sp, #12]
    7598:	9102      	str	r1, [sp, #8]
    759a:	9201      	str	r2, [sp, #4]
    /* Update ClockDivide and InputClock values found in CFG1 register */
    uint32 Cfg1Reg = Base->CFG1;
    759c:	9b03      	ldr	r3, [sp, #12]
    759e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    75a0:	9305      	str	r3, [sp, #20]
    Cfg1Reg &= ~(ADC_CFG1_ADIV_MASK | ADC_CFG1_ADICLK_MASK);
    75a2:	9b05      	ldr	r3, [sp, #20]
    75a4:	f023 0363 	bic.w	r3, r3, #99	; 0x63
    75a8:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADIV(ClockDivide);
    75aa:	9b02      	ldr	r3, [sp, #8]
    75ac:	015b      	lsls	r3, r3, #5
    75ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
    75b2:	9a05      	ldr	r2, [sp, #20]
    75b4:	4313      	orrs	r3, r2
    75b6:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADICLK(InputClock);
    75b8:	9b01      	ldr	r3, [sp, #4]
    75ba:	f003 0303 	and.w	r3, r3, #3
    75be:	9a05      	ldr	r2, [sp, #20]
    75c0:	4313      	orrs	r3, r2
    75c2:	9305      	str	r3, [sp, #20]
    Base->CFG1 = Cfg1Reg;
    75c4:	9b03      	ldr	r3, [sp, #12]
    75c6:	9a05      	ldr	r2, [sp, #20]
    75c8:	641a      	str	r2, [r3, #64]	; 0x40
}
    75ca:	bf00      	nop
    75cc:	b006      	add	sp, #24
    75ce:	4770      	bx	lr

000075d0 <Adc_HwAcc_GetClockDivide>:

static inline Adc_Ip_ClockSelType Adc_HwAcc_GetClockDivide(const uint32 Reg)
{
    75d0:	b084      	sub	sp, #16
    75d2:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve ClockDivide value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClockSelType ReturnValue = ADC_IP_CLK_FULL_BUS;
    75d4:	2300      	movs	r3, #0
    75d6:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADIV_MASK) >> ADC_CFG1_ADIV_SHIFT)
    75d8:	9b01      	ldr	r3, [sp, #4]
    75da:	095b      	lsrs	r3, r3, #5
    75dc:	f003 0303 	and.w	r3, r3, #3
    75e0:	2b03      	cmp	r3, #3
    75e2:	d00c      	beq.n	75fe <Adc_HwAcc_GetClockDivide+0x2e>
    75e4:	2b03      	cmp	r3, #3
    75e6:	d80d      	bhi.n	7604 <Adc_HwAcc_GetClockDivide+0x34>
    75e8:	2b01      	cmp	r3, #1
    75ea:	d002      	beq.n	75f2 <Adc_HwAcc_GetClockDivide+0x22>
    75ec:	2b02      	cmp	r3, #2
    75ee:	d003      	beq.n	75f8 <Adc_HwAcc_GetClockDivide+0x28>
        case 3u:
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
            break;
        default:
            ; /* no-op */
            break;
    75f0:	e008      	b.n	7604 <Adc_HwAcc_GetClockDivide+0x34>
            ReturnValue = ADC_IP_CLK_HALF_BUS;
    75f2:	2301      	movs	r3, #1
    75f4:	9303      	str	r3, [sp, #12]
            break;
    75f6:	e006      	b.n	7606 <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_QUARTER_BUS;
    75f8:	2302      	movs	r3, #2
    75fa:	9303      	str	r3, [sp, #12]
            break;
    75fc:	e003      	b.n	7606 <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
    75fe:	2303      	movs	r3, #3
    7600:	9303      	str	r3, [sp, #12]
            break;
    7602:	e000      	b.n	7606 <Adc_HwAcc_GetClockDivide+0x36>
            break;
    7604:	bf00      	nop
    }
    return ReturnValue;
    7606:	9b03      	ldr	r3, [sp, #12]
}
    7608:	4618      	mov	r0, r3
    760a:	b004      	add	sp, #16
    760c:	4770      	bx	lr

0000760e <Adc_HwAcc_GetInputClock>:

static inline Adc_Ip_ClkSourceType Adc_HwAcc_GetInputClock(const uint32 Reg)
{
    760e:	b084      	sub	sp, #16
    7610:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve InputClock value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClkSourceType ReturnValue = ADC_IP_CLK_ALT_1;
    7612:	2300      	movs	r3, #0
    7614:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADICLK_MASK) >> ADC_CFG1_ADICLK_SHIFT)
    7616:	9b01      	ldr	r3, [sp, #4]
    7618:	f003 0303 	and.w	r3, r3, #3
    761c:	2b03      	cmp	r3, #3
    761e:	d00c      	beq.n	763a <Adc_HwAcc_GetInputClock+0x2c>
    7620:	2b03      	cmp	r3, #3
    7622:	d80d      	bhi.n	7640 <Adc_HwAcc_GetInputClock+0x32>
    7624:	2b01      	cmp	r3, #1
    7626:	d002      	beq.n	762e <Adc_HwAcc_GetInputClock+0x20>
    7628:	2b02      	cmp	r3, #2
    762a:	d003      	beq.n	7634 <Adc_HwAcc_GetInputClock+0x26>
        case 3u:
            ReturnValue = ADC_IP_CLK_ALT_4;
            break;
        default:
            ; /* no-op */
            break;
    762c:	e008      	b.n	7640 <Adc_HwAcc_GetInputClock+0x32>
            ReturnValue = ADC_IP_CLK_ALT_2;
    762e:	2301      	movs	r3, #1
    7630:	9303      	str	r3, [sp, #12]
            break;
    7632:	e006      	b.n	7642 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_3;
    7634:	2302      	movs	r3, #2
    7636:	9303      	str	r3, [sp, #12]
            break;
    7638:	e003      	b.n	7642 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_4;
    763a:	2303      	movs	r3, #3
    763c:	9303      	str	r3, [sp, #12]
            break;
    763e:	e000      	b.n	7642 <Adc_HwAcc_GetInputClock+0x34>
            break;
    7640:	bf00      	nop
    }
    return ReturnValue;
    7642:	9b03      	ldr	r3, [sp, #12]
}
    7644:	4618      	mov	r0, r3
    7646:	b004      	add	sp, #16
    7648:	4770      	bx	lr

0000764a <Adc_HwAcc_SetSampleTime>:

static inline void Adc_HwAcc_SetSampleTime(ADC_Type * const Base,
                                           const uint8 SampleTime)
{
    764a:	b084      	sub	sp, #16
    764c:	9001      	str	r0, [sp, #4]
    764e:	460b      	mov	r3, r1
    7650:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Clip sample time to minimum value */
    uint8 ClippedSampleTime = (uint8)((SampleTime > 0U) ? SampleTime : 1U);
    7654:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7658:	2b00      	cmp	r3, #0
    765a:	d002      	beq.n	7662 <Adc_HwAcc_SetSampleTime+0x18>
    765c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7660:	e000      	b.n	7664 <Adc_HwAcc_SetSampleTime+0x1a>
    7662:	2301      	movs	r3, #1
    7664:	f88d 300f 	strb.w	r3, [sp, #15]
    /* Update SampleTime values found in SC3 register */
    uint32 Cfg2Reg = Base->CFG2;
    7668:	9b01      	ldr	r3, [sp, #4]
    766a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    766c:	9302      	str	r3, [sp, #8]
    Cfg2Reg &= ~(ADC_CFG2_SMPLTS_MASK);
    766e:	9b02      	ldr	r3, [sp, #8]
    7670:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    7674:	9302      	str	r3, [sp, #8]
    Cfg2Reg |= ADC_CFG2_SMPLTS(ClippedSampleTime);
    7676:	f89d 300f 	ldrb.w	r3, [sp, #15]
    767a:	9a02      	ldr	r2, [sp, #8]
    767c:	4313      	orrs	r3, r2
    767e:	9302      	str	r3, [sp, #8]
    Base->CFG2 = Cfg2Reg;
    7680:	9b01      	ldr	r3, [sp, #4]
    7682:	9a02      	ldr	r2, [sp, #8]
    7684:	645a      	str	r2, [r3, #68]	; 0x44
}
    7686:	bf00      	nop
    7688:	b004      	add	sp, #16
    768a:	4770      	bx	lr

0000768c <Adc_HwAcc_SetAveraging>:

static inline void Adc_HwAcc_SetAveraging(ADC_Type * const Base,
                                          const boolean AvgEn,
                                          const Adc_Ip_AvgSelectType AvgSel)
{
    768c:	b086      	sub	sp, #24
    768e:	9003      	str	r0, [sp, #12]
    7690:	460b      	mov	r3, r1
    7692:	9201      	str	r2, [sp, #4]
    7694:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Update AvgEn and AvgSel values found in SC3 register */
    uint32 Sc3Reg = Base->SC3;
    7698:	9b03      	ldr	r3, [sp, #12]
    769a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    769e:	9305      	str	r3, [sp, #20]
    Sc3Reg &= ~(ADC_SC3_AVGE_MASK | ADC_SC3_AVGS_MASK);
    76a0:	9b05      	ldr	r3, [sp, #20]
    76a2:	f023 0307 	bic.w	r3, r3, #7
    76a6:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGE(AvgEn ? 1u : 0u);
    76a8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    76ac:	2b00      	cmp	r3, #0
    76ae:	d001      	beq.n	76b4 <Adc_HwAcc_SetAveraging+0x28>
    76b0:	2304      	movs	r3, #4
    76b2:	e000      	b.n	76b6 <Adc_HwAcc_SetAveraging+0x2a>
    76b4:	2300      	movs	r3, #0
    76b6:	9a05      	ldr	r2, [sp, #20]
    76b8:	4313      	orrs	r3, r2
    76ba:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGS(AvgSel);
    76bc:	9b01      	ldr	r3, [sp, #4]
    76be:	f003 0303 	and.w	r3, r3, #3
    76c2:	9a05      	ldr	r2, [sp, #20]
    76c4:	4313      	orrs	r3, r2
    76c6:	9305      	str	r3, [sp, #20]
    Base->SC3 = Sc3Reg;
    76c8:	9b03      	ldr	r3, [sp, #12]
    76ca:	9a05      	ldr	r2, [sp, #20]
    76cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    76d0:	bf00      	nop
    76d2:	b006      	add	sp, #24
    76d4:	4770      	bx	lr

000076d6 <Adc_HwAcc_GetAverageSelect>:

static inline Adc_Ip_AvgSelectType Adc_HwAcc_GetAverageSelect(const uint32 Reg)
{
    76d6:	b084      	sub	sp, #16
    76d8:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve AvgSelect value found in SC3 register
     * Note: Reg should be the value of SC3 register
     */
    Adc_Ip_AvgSelectType ReturnValue = ADC_IP_AVG_4_CONV;
    76da:	2300      	movs	r3, #0
    76dc:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_SC3_AVGS_MASK) >> ADC_SC3_AVGS_SHIFT)
    76de:	9b01      	ldr	r3, [sp, #4]
    76e0:	f003 0303 	and.w	r3, r3, #3
    76e4:	2b03      	cmp	r3, #3
    76e6:	d00c      	beq.n	7702 <Adc_HwAcc_GetAverageSelect+0x2c>
    76e8:	2b03      	cmp	r3, #3
    76ea:	d80d      	bhi.n	7708 <Adc_HwAcc_GetAverageSelect+0x32>
    76ec:	2b01      	cmp	r3, #1
    76ee:	d002      	beq.n	76f6 <Adc_HwAcc_GetAverageSelect+0x20>
    76f0:	2b02      	cmp	r3, #2
    76f2:	d003      	beq.n	76fc <Adc_HwAcc_GetAverageSelect+0x26>
        case 3u:
            ReturnValue = ADC_IP_AVG_32_CONV;
            break;
        default:
            ; /* no-op */
            break;
    76f4:	e008      	b.n	7708 <Adc_HwAcc_GetAverageSelect+0x32>
            ReturnValue = ADC_IP_AVG_8_CONV;
    76f6:	2301      	movs	r3, #1
    76f8:	9303      	str	r3, [sp, #12]
            break;
    76fa:	e006      	b.n	770a <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_16_CONV;
    76fc:	2302      	movs	r3, #2
    76fe:	9303      	str	r3, [sp, #12]
            break;
    7700:	e003      	b.n	770a <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_32_CONV;
    7702:	2303      	movs	r3, #3
    7704:	9303      	str	r3, [sp, #12]
            break;
    7706:	e000      	b.n	770a <Adc_HwAcc_GetAverageSelect+0x34>
            break;
    7708:	bf00      	nop
    }
    return ReturnValue;
    770a:	9b03      	ldr	r3, [sp, #12]
}
    770c:	4618      	mov	r0, r3
    770e:	b004      	add	sp, #16
    7710:	4770      	bx	lr

00007712 <Adc_HwAcc_SetTriggerMode>:

static inline void Adc_HwAcc_SetTriggerMode(ADC_Type * const Base,
                                            const Adc_Ip_TrigType TriggerMode)
{
    7712:	b084      	sub	sp, #16
    7714:	9001      	str	r0, [sp, #4]
    7716:	9100      	str	r1, [sp, #0]
    /* Update TriggerMode value found in SC2 register */
    uint32 Sc2Reg = Base->SC2;
    7718:	9b01      	ldr	r3, [sp, #4]
    771a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    771e:	9303      	str	r3, [sp, #12]
    Sc2Reg &= ~(ADC_SC2_ADTRG_MASK);
    7720:	9b03      	ldr	r3, [sp, #12]
    7722:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    7726:	9303      	str	r3, [sp, #12]
    Sc2Reg |= ADC_SC2_ADTRG(TriggerMode);
    7728:	9b00      	ldr	r3, [sp, #0]
    772a:	019b      	lsls	r3, r3, #6
    772c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7730:	9a03      	ldr	r2, [sp, #12]
    7732:	4313      	orrs	r3, r2
    7734:	9303      	str	r3, [sp, #12]
    Base->SC2 = Sc2Reg;
    7736:	9b01      	ldr	r3, [sp, #4]
    7738:	9a03      	ldr	r2, [sp, #12]
    773a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    773e:	bf00      	nop
    7740:	b004      	add	sp, #16
    7742:	4770      	bx	lr

00007744 <Adc_HwAcc_GetTriggerMode>:

static inline Adc_Ip_TrigType Adc_HwAcc_GetTriggerMode(const uint32 Reg)
{
    7744:	b084      	sub	sp, #16
    7746:	9001      	str	r0, [sp, #4]
    /* Retrieve TriggerMode value found in SC2 register */
    Adc_Ip_TrigType ReturnValue = ADC_IP_TRIGGER_SOFTWARE;
    7748:	2300      	movs	r3, #0
    774a:	9303      	str	r3, [sp, #12]
    if (((Reg & ADC_SC2_ADTRG_MASK) >> ADC_SC2_ADTRG_SHIFT) == 1u)
    774c:	9b01      	ldr	r3, [sp, #4]
    774e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7752:	2b00      	cmp	r3, #0
    7754:	d001      	beq.n	775a <Adc_HwAcc_GetTriggerMode+0x16>
    {
        ReturnValue = ADC_IP_TRIGGER_HARDWARE;
    7756:	2301      	movs	r3, #1
    7758:	9303      	str	r3, [sp, #12]
    }
    return ReturnValue;
    775a:	9b03      	ldr	r3, [sp, #12]
}
    775c:	4618      	mov	r0, r3
    775e:	b004      	add	sp, #16
    7760:	4770      	bx	lr

00007762 <Adc_HwAcc_SetChannel>:

static inline void Adc_HwAcc_SetChannel(ADC_Type * const Base,
                                        const uint8 ChnIdx,
                                        const Adc_Ip_InputChannelType InputChannel,
                                        const boolean InterruptEnable)
{
    7762:	b086      	sub	sp, #24
    7764:	9003      	str	r0, [sp, #12]
    7766:	9201      	str	r2, [sp, #4]
    7768:	461a      	mov	r2, r3
    776a:	460b      	mov	r3, r1
    776c:	f88d 300b 	strb.w	r3, [sp, #11]
    7770:	4613      	mov	r3, r2
    7772:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Configure channel by writing all SC1n register fields */
    uint32 Sc1Reg = SC1(Base, ChnIdx);
    7776:	f89d 200b 	ldrb.w	r2, [sp, #11]
    777a:	9b03      	ldr	r3, [sp, #12]
    777c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7780:	9305      	str	r3, [sp, #20]
    Sc1Reg &= ~(ADC_SC1_ADCH_MASK | ADC_SC1_AIEN_MASK);
    7782:	9b05      	ldr	r3, [sp, #20]
    7784:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    7788:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_ADCH(InputChannel);
    778a:	9b01      	ldr	r3, [sp, #4]
    778c:	f003 031f 	and.w	r3, r3, #31
    7790:	9a05      	ldr	r2, [sp, #20]
    7792:	4313      	orrs	r3, r2
    7794:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_AIEN(InterruptEnable ? 1u : 0u);
    7796:	f89d 300a 	ldrb.w	r3, [sp, #10]
    779a:	2b00      	cmp	r3, #0
    779c:	d001      	beq.n	77a2 <Adc_HwAcc_SetChannel+0x40>
    779e:	2340      	movs	r3, #64	; 0x40
    77a0:	e000      	b.n	77a4 <Adc_HwAcc_SetChannel+0x42>
    77a2:	2300      	movs	r3, #0
    77a4:	9a05      	ldr	r2, [sp, #20]
    77a6:	4313      	orrs	r3, r2
    77a8:	9305      	str	r3, [sp, #20]
    SC1(Base, ChnIdx) = Sc1Reg;
    77aa:	f89d 200b 	ldrb.w	r2, [sp, #11]
    77ae:	9b03      	ldr	r3, [sp, #12]
    77b0:	9905      	ldr	r1, [sp, #20]
    77b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    77b6:	bf00      	nop
    77b8:	b006      	add	sp, #24
    77ba:	4770      	bx	lr

000077bc <Adc_HwAcc_SetUserGainAndOffset>:

static inline void Adc_HwAcc_SetUserGainAndOffset(ADC_Type * const Base,
                                                  const uint16 UsrGain,
                                                  const uint16 UsrOffset)
{
    77bc:	b082      	sub	sp, #8
    77be:	9001      	str	r0, [sp, #4]
    77c0:	460b      	mov	r3, r1
    77c2:	f8ad 3002 	strh.w	r3, [sp, #2]
    77c6:	4613      	mov	r3, r2
    77c8:	f8ad 3000 	strh.w	r3, [sp]
     * 2. RegVal <- Sum & 0xF800U
     * 3. if RegVal != 0x0000U then RegVal <- 0xFFFFU
     * 4. Base->G <- RegVal
     */

    Base->USR_OFS = ADC_USR_OFS_USR_OFS(UsrOffset);
    77cc:	f8bd 3000 	ldrh.w	r3, [sp]
    77d0:	b2da      	uxtb	r2, r3
    77d2:	9b01      	ldr	r3, [sp, #4]
    77d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    Base->UG = ADC_UG_UG(UsrGain);
    77d8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    77dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
    77e0:	9b01      	ldr	r3, [sp, #4]
    77e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
    77e6:	bf00      	nop
    77e8:	b002      	add	sp, #8
    77ea:	4770      	bx	lr

000077ec <Adc_HwAcc_GetAIEN>:

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
static inline boolean Adc_HwAcc_GetAIEN(const uint32 Reg)
{
    77ec:	b082      	sub	sp, #8
    77ee:	9001      	str	r0, [sp, #4]
    /* Retrive AIEN flag from given SC1 register */
    return (((Reg & ADC_SC1_AIEN_MASK) >> ADC_SC1_AIEN_SHIFT) != 0u) ? TRUE : FALSE;
    77f0:	9b01      	ldr	r3, [sp, #4]
    77f2:	099b      	lsrs	r3, r3, #6
    77f4:	f003 0301 	and.w	r3, r3, #1
    77f8:	2b00      	cmp	r3, #0
    77fa:	bf14      	ite	ne
    77fc:	2301      	movne	r3, #1
    77fe:	2300      	moveq	r3, #0
    7800:	b2db      	uxtb	r3, r3
}
    7802:	4618      	mov	r0, r3
    7804:	b002      	add	sp, #8
    7806:	4770      	bx	lr

00007808 <Adc_HwAcc_GetCOCO>:
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

static inline boolean Adc_HwAcc_GetCOCO(const uint32 Reg)
{
    7808:	b082      	sub	sp, #8
    780a:	9001      	str	r0, [sp, #4]
    /* Retrive COCO flag from given SC1 register */
    return (((Reg & ADC_SC1_COCO_MASK) >> ADC_SC1_COCO_SHIFT) != 0u) ? TRUE : FALSE;
    780c:	9b01      	ldr	r3, [sp, #4]
    780e:	09db      	lsrs	r3, r3, #7
    7810:	f003 0301 	and.w	r3, r3, #1
    7814:	2b00      	cmp	r3, #0
    7816:	bf14      	ite	ne
    7818:	2301      	movne	r3, #1
    781a:	2300      	moveq	r3, #0
    781c:	b2db      	uxtb	r3, r3
}
    781e:	4618      	mov	r0, r3
    7820:	b002      	add	sp, #8
    7822:	4770      	bx	lr

00007824 <Adc_HwAcc_GetData>:

static inline uint16 Adc_HwAcc_GetData(const ADC_Type * const Base,
                                       const uint8 ChnIdx)
{
    7824:	b084      	sub	sp, #16
    7826:	9001      	str	r0, [sp, #4]
    7828:	460b      	mov	r3, r1
    782a:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Retrieve the conversion result of a given channel */
    uint16 Result = (uint16) R(Base, ChnIdx);
    782e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7832:	9b01      	ldr	r3, [sp, #4]
    7834:	3212      	adds	r2, #18
    7836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    783a:	f8ad 300e 	strh.w	r3, [sp, #14]
    Result = (uint16) ((Result & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    783e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7842:	f3c3 030b 	ubfx	r3, r3, #0, #12
    7846:	f8ad 300e 	strh.w	r3, [sp, #14]
    return Result;
    784a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    784e:	4618      	mov	r0, r3
    7850:	b004      	add	sp, #16
    7852:	4770      	bx	lr

00007854 <ADC_DoCalibration_SetParams>:
*
* END**************************************************************************/
static inline void ADC_DoCalibration_SetParams(ADC_Type * const Base,
                                               const Adc_Ip_ClockConfigType * const Config,
                                               const Adc_Ip_TrigType TriggerMode)
{
    7854:	b500      	push	{lr}
    7856:	b085      	sub	sp, #20
    7858:	9003      	str	r0, [sp, #12]
    785a:	9102      	str	r1, [sp, #8]
    785c:	9201      	str	r2, [sp, #4]
    /* Configure averaging */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    785e:	f009 fc5b 	bl	11118 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    7862:	9b02      	ldr	r3, [sp, #8]
    7864:	7a59      	ldrb	r1, [r3, #9]
    7866:	9b02      	ldr	r3, [sp, #8]
    7868:	68db      	ldr	r3, [r3, #12]
    786a:	461a      	mov	r2, r3
    786c:	9803      	ldr	r0, [sp, #12]
    786e:	f7ff ff0d 	bl	768c <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    7872:	f009 fc7d 	bl	11170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Configure trigger mode */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24();
    7876:	f009 fab5 	bl	10de4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    787a:	9901      	ldr	r1, [sp, #4]
    787c:	9803      	ldr	r0, [sp, #12]
    787e:	f7ff ff48 	bl	7712 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24();
    7882:	f009 fadb 	bl	10e3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>

    /* Configure sample time */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15();
    7886:	f008 ffcb 	bl	10820 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    788a:	9b02      	ldr	r3, [sp, #8]
    788c:	7a1b      	ldrb	r3, [r3, #8]
    788e:	4619      	mov	r1, r3
    7890:	9803      	ldr	r0, [sp, #12]
    7892:	f7ff feda 	bl	764a <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15();
    7896:	f008 ffef 	bl	10878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>

    /* Configure input clock */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13();
    789a:	f008 ff1d 	bl	106d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    789e:	9b02      	ldr	r3, [sp, #8]
    78a0:	6819      	ldr	r1, [r3, #0]
    78a2:	9b02      	ldr	r3, [sp, #8]
    78a4:	685b      	ldr	r3, [r3, #4]
    78a6:	461a      	mov	r2, r3
    78a8:	9803      	ldr	r0, [sp, #12]
    78aa:	f7ff fe73 	bl	7594 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13();
    78ae:	f008 ff3f 	bl	10730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>
}
    78b2:	bf00      	nop
    78b4:	b005      	add	sp, #20
    78b6:	f85d fb04 	ldr.w	pc, [sp], #4

000078ba <Adc_Ip_Init>:
*
* @implements     Adc_Ip_Init_Activity
* END**************************************************************************/
void Adc_Ip_Init(const uint32 Instance,
                 const Adc_Ip_ConfigType * const Config)
{
    78ba:	b500      	push	{lr}
    78bc:	b087      	sub	sp, #28
    78be:	9001      	str	r0, [sp, #4]
    78c0:	9100      	str	r1, [sp, #0]
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
    DevAssert(Config->NumChannels <= ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    78c2:	4a67      	ldr	r2, [pc, #412]	; (7a60 <Adc_Ip_Init+0x1a6>)
    78c4:	9b01      	ldr	r3, [sp, #4]
    78c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78ca:	9302      	str	r3, [sp, #8]
    uint32 SC2Reg = 0u;
    78cc:	2300      	movs	r3, #0
    78ce:	9305      	str	r3, [sp, #20]
    uint32 SC2ClearMask = 0u;
    78d0:	2300      	movs	r3, #0
    78d2:	9304      	str	r3, [sp, #16]
    uint8 Index;

    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    78d4:	9b00      	ldr	r3, [sp, #0]
    78d6:	6819      	ldr	r1, [r3, #0]
    78d8:	9b00      	ldr	r3, [sp, #0]
    78da:	689b      	ldr	r3, [r3, #8]
    78dc:	461a      	mov	r2, r3
    78de:	9802      	ldr	r0, [sp, #8]
    78e0:	f7ff fe58 	bl	7594 <Adc_HwAcc_SetClock>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    78e4:	9b00      	ldr	r3, [sp, #0]
    78e6:	7b1b      	ldrb	r3, [r3, #12]
    78e8:	4619      	mov	r1, r3
    78ea:	9802      	ldr	r0, [sp, #8]
    78ec:	f7ff fead 	bl	764a <Adc_HwAcc_SetSampleTime>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    78f0:	9b00      	ldr	r3, [sp, #0]
    78f2:	7b59      	ldrb	r1, [r3, #13]
    78f4:	9b00      	ldr	r3, [sp, #0]
    78f6:	691b      	ldr	r3, [r3, #16]
    78f8:	461a      	mov	r2, r3
    78fa:	9802      	ldr	r0, [sp, #8]
    78fc:	f7ff fec6 	bl	768c <Adc_HwAcc_SetAveraging>

    Adc_Ip_SetResolution(Instance, Config->Resolution);
    7900:	9b00      	ldr	r3, [sp, #0]
    7902:	695b      	ldr	r3, [r3, #20]
    7904:	4619      	mov	r1, r3
    7906:	9801      	ldr	r0, [sp, #4]
    7908:	f000 f9ea 	bl	7ce0 <Adc_Ip_SetResolution>
        ADC_SetSupplyMonitoringEnable(Config->SupplyMonitoringEnable);
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    /* Configure trigger mode */
    SC2ClearMask |= ADC_SC2_ADTRG_MASK;
    790c:	9b04      	ldr	r3, [sp, #16]
    790e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7912:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ADTRG(Config->TriggerMode);
    7914:	9b00      	ldr	r3, [sp, #0]
    7916:	699b      	ldr	r3, [r3, #24]
    7918:	019b      	lsls	r3, r3, #6
    791a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    791e:	9a05      	ldr	r2, [sp, #20]
    7920:	4313      	orrs	r3, r2
    7922:	9305      	str	r3, [sp, #20]

    /* Configure DMA enable */
    if (Config->DmaEnable)
    7924:	9b00      	ldr	r3, [sp, #0]
    7926:	7f1b      	ldrb	r3, [r3, #28]
    7928:	2b00      	cmp	r3, #0
    792a:	d004      	beq.n	7936 <Adc_Ip_Init+0x7c>
    {
        SC2Reg |= ADC_SC2_DMAEN_MASK;
    792c:	9b05      	ldr	r3, [sp, #20]
    792e:	f043 0304 	orr.w	r3, r3, #4
    7932:	9305      	str	r3, [sp, #20]
    7934:	e003      	b.n	793e <Adc_Ip_Init+0x84>
    }
    else
    {
        SC2ClearMask |= ADC_SC2_DMAEN_MASK;
    7936:	9b04      	ldr	r3, [sp, #16]
    7938:	f043 0304 	orr.w	r3, r3, #4
    793c:	9304      	str	r3, [sp, #16]
    }

    /* Configure voltage reference selector */
    SC2ClearMask |= ADC_SC2_REFSEL_MASK;
    793e:	9b04      	ldr	r3, [sp, #16]
    7940:	f043 0303 	orr.w	r3, r3, #3
    7944:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_REFSEL(Config->VoltageRef);
    7946:	9b00      	ldr	r3, [sp, #0]
    7948:	6a1b      	ldr	r3, [r3, #32]
    794a:	f003 0303 	and.w	r3, r3, #3
    794e:	9a05      	ldr	r2, [sp, #20]
    7950:	4313      	orrs	r3, r2
    7952:	9305      	str	r3, [sp, #20]

    /* Configure compare enables and values */
    SC2ClearMask |= ADC_SC2_ACFE_MASK | ADC_SC2_ACFGT_MASK | ADC_SC2_ACREN_MASK;
    7954:	9b04      	ldr	r3, [sp, #16]
    7956:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    795a:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ACFE(Config->CompareEnable ? 1u : 0u);
    795c:	9b00      	ldr	r3, [sp, #0]
    795e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    7962:	2b00      	cmp	r3, #0
    7964:	d001      	beq.n	796a <Adc_Ip_Init+0xb0>
    7966:	2320      	movs	r3, #32
    7968:	e000      	b.n	796c <Adc_Ip_Init+0xb2>
    796a:	2300      	movs	r3, #0
    796c:	9a05      	ldr	r2, [sp, #20]
    796e:	4313      	orrs	r3, r2
    7970:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACFGT(Config->CompareGreaterThanEnable ? 1u : 0u);
    7972:	9b00      	ldr	r3, [sp, #0]
    7974:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    7978:	2b00      	cmp	r3, #0
    797a:	d001      	beq.n	7980 <Adc_Ip_Init+0xc6>
    797c:	2310      	movs	r3, #16
    797e:	e000      	b.n	7982 <Adc_Ip_Init+0xc8>
    7980:	2300      	movs	r3, #0
    7982:	9a05      	ldr	r2, [sp, #20]
    7984:	4313      	orrs	r3, r2
    7986:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACREN(Config->CompareRangeFuncEnable ? 1u : 0u);
    7988:	9b00      	ldr	r3, [sp, #0]
    798a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    798e:	2b00      	cmp	r3, #0
    7990:	d001      	beq.n	7996 <Adc_Ip_Init+0xdc>
    7992:	2308      	movs	r3, #8
    7994:	e000      	b.n	7998 <Adc_Ip_Init+0xde>
    7996:	2300      	movs	r3, #0
    7998:	9a05      	ldr	r2, [sp, #20]
    799a:	4313      	orrs	r3, r2
    799c:	9305      	str	r3, [sp, #20]
    Base->CV[0u] = ADC_CV_CV(Config->CompVal1);
    799e:	9b00      	ldr	r3, [sp, #0]
    79a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    79a2:	461a      	mov	r2, r3
    79a4:	9b02      	ldr	r3, [sp, #8]
    79a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Base->CV[1u] = ADC_CV_CV(Config->CompVal2);
    79aa:	9b00      	ldr	r3, [sp, #0]
    79ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    79ae:	461a      	mov	r2, r3
    79b0:	9b02      	ldr	r3, [sp, #8]
    79b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    Adc_HwAcc_SetSC2Reg(Base, SC2ClearMask, SC2Reg);
    79b6:	9a05      	ldr	r2, [sp, #20]
    79b8:	9904      	ldr	r1, [sp, #16]
    79ba:	9802      	ldr	r0, [sp, #8]
    79bc:	f7ff fdd2 	bl	7564 <Adc_HwAcc_SetSC2Reg>

    Adc_HwAcc_SetUserGainAndOffset(Base, Config->UsrGain, Config->UsrOffset);
    79c0:	9b00      	ldr	r3, [sp, #0]
    79c2:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    79c4:	9b00      	ldr	r3, [sp, #0]
    79c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    79c8:	461a      	mov	r2, r3
    79ca:	9802      	ldr	r0, [sp, #8]
    79cc:	f7ff fef6 	bl	77bc <Adc_HwAcc_SetUserGainAndOffset>

    Adc_Ip_SetContinuousMode(Instance, Config->ContinuousConvEnable);
    79d0:	9b00      	ldr	r3, [sp, #0]
    79d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    79d6:	4619      	mov	r1, r3
    79d8:	9801      	ldr	r0, [sp, #4]
    79da:	f000 f955 	bl	7c88 <Adc_Ip_SetContinuousMode>

    if (Config->ChannelConfigs != NULL_PTR)
    79de:	9b00      	ldr	r3, [sp, #0]
    79e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    79e2:	2b00      	cmp	r3, #0
    79e4:	d01c      	beq.n	7a20 <Adc_Ip_Init+0x166>
    {
        for (Index = 0u; Index < Config->NumChannels; Index++)
    79e6:	2300      	movs	r3, #0
    79e8:	f88d 300f 	strb.w	r3, [sp, #15]
    79ec:	e011      	b.n	7a12 <Adc_Ip_Init+0x158>
        {
            Adc_Ip_ConfigChannel(Instance, &(Config->ChannelConfigs[Index]));
    79ee:	9b00      	ldr	r3, [sp, #0]
    79f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    79f2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    79f6:	4613      	mov	r3, r2
    79f8:	005b      	lsls	r3, r3, #1
    79fa:	4413      	add	r3, r2
    79fc:	009b      	lsls	r3, r3, #2
    79fe:	440b      	add	r3, r1
    7a00:	4619      	mov	r1, r3
    7a02:	9801      	ldr	r0, [sp, #4]
    7a04:	f000 f9c2 	bl	7d8c <Adc_Ip_ConfigChannel>
        for (Index = 0u; Index < Config->NumChannels; Index++)
    7a08:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7a0c:	3301      	adds	r3, #1
    7a0e:	f88d 300f 	strb.w	r3, [sp, #15]
    7a12:	9b00      	ldr	r3, [sp, #0]
    7a14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    7a18:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7a1c:	429a      	cmp	r2, r3
    7a1e:	d3e6      	bcc.n	79ee <Adc_Ip_Init+0x134>
        }
    }

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_Ip_axState[Instance].ConversionCompleteNotification = Config->ConversionCompleteNotification;
    7a20:	9b00      	ldr	r3, [sp, #0]
    7a22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    7a24:	490f      	ldr	r1, [pc, #60]	; (7a64 <Adc_Ip_Init+0x1aa>)
    7a26:	9b01      	ldr	r3, [sp, #4]
    7a28:	204c      	movs	r0, #76	; 0x4c
    7a2a:	fb00 f303 	mul.w	r3, r0, r3
    7a2e:	440b      	add	r3, r1
    7a30:	3308      	adds	r3, #8
    7a32:	601a      	str	r2, [r3, #0]
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    Adc_Ip_axState[Instance].CalibrationClockDivide = Config->CalibrationClockDivide;
    7a34:	9b00      	ldr	r3, [sp, #0]
    7a36:	685a      	ldr	r2, [r3, #4]
    7a38:	490a      	ldr	r1, [pc, #40]	; (7a64 <Adc_Ip_Init+0x1aa>)
    7a3a:	9b01      	ldr	r3, [sp, #4]
    7a3c:	204c      	movs	r0, #76	; 0x4c
    7a3e:	fb00 f303 	mul.w	r3, r0, r3
    7a42:	440b      	add	r3, r1
    7a44:	3304      	adds	r3, #4
    7a46:	601a      	str	r2, [r3, #0]
    Adc_Ip_axState[Instance].Init = TRUE;
    7a48:	4a06      	ldr	r2, [pc, #24]	; (7a64 <Adc_Ip_Init+0x1aa>)
    7a4a:	9b01      	ldr	r3, [sp, #4]
    7a4c:	214c      	movs	r1, #76	; 0x4c
    7a4e:	fb01 f303 	mul.w	r3, r1, r3
    7a52:	4413      	add	r3, r2
    7a54:	2201      	movs	r2, #1
    7a56:	701a      	strb	r2, [r3, #0]
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    Adc_Ip_axState[Instance].PretriggerSel = Config->PretriggerSel;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
}
    7a58:	bf00      	nop
    7a5a:	b007      	add	sp, #28
    7a5c:	f85d fb04 	ldr.w	pc, [sp], #4
    7a60:	00018624 	.word	0x00018624
    7a64:	1fff8d00 	.word	0x1fff8d00

00007a68 <Adc_Ip_DeInit>:
* Description   : This function resets the ADC internal registers to default values.
*
* @implements     Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Adc_Ip_DeInit(const uint32 Instance)
{
    7a68:	b500      	push	{lr}
    7a6a:	b0c3      	sub	sp, #268	; 0x10c
    7a6c:	ab42      	add	r3, sp, #264	; 0x108
    7a6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    7a72:	6018      	str	r0, [r3, #0]

    Adc_Ip_ConfigType DefaultConfig;
    Adc_Ip_ChanConfigType ChannelConfigs[ADC_MAX_CHAN_COUNT];
    uint8 Index;

    DefaultConfig.ClockDivide = ADC_IP_CLK_FULL_BUS;
    7a74:	2300      	movs	r3, #0
    7a76:	9332      	str	r3, [sp, #200]	; 0xc8
    DefaultConfig.CalibrationClockDivide = ADC_IP_CLK_EIGHTH_BUS;
    7a78:	2303      	movs	r3, #3
    7a7a:	9333      	str	r3, [sp, #204]	; 0xcc
    DefaultConfig.InputClock = ADC_IP_CLK_ALT_1;
    7a7c:	2300      	movs	r3, #0
    7a7e:	9334      	str	r3, [sp, #208]	; 0xd0
    DefaultConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    7a80:	230c      	movs	r3, #12
    7a82:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
    DefaultConfig.AvgEn = FALSE;
    7a86:	2300      	movs	r3, #0
    7a88:	f88d 30d5 	strb.w	r3, [sp, #213]	; 0xd5
    DefaultConfig.AvgSel = ADC_IP_AVG_4_CONV;
    7a8c:	2300      	movs	r3, #0
    7a8e:	9336      	str	r3, [sp, #216]	; 0xd8
    DefaultConfig.Resolution = ADC_IP_RESOLUTION_8BIT;
    7a90:	2300      	movs	r3, #0
    7a92:	9337      	str	r3, [sp, #220]	; 0xdc
    DefaultConfig.TriggerMode = ADC_IP_TRIGGER_SOFTWARE;
    7a94:	2300      	movs	r3, #0
    7a96:	9338      	str	r3, [sp, #224]	; 0xe0
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    DefaultConfig.PretriggerSel = ADC_IP_PRETRIGGER_SEL_PDB;
    DefaultConfig.TriggerSel = ADC_IP_TRIGGER_SEL_PDB;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
    DefaultConfig.DmaEnable = FALSE;
    7a98:	2300      	movs	r3, #0
    7a9a:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    DefaultConfig.VoltageRef = ADC_IP_VOLTAGEREF_VREF;
    7a9e:	2300      	movs	r3, #0
    7aa0:	933a      	str	r3, [sp, #232]	; 0xe8
    DefaultConfig.ContinuousConvEnable = FALSE;
    7aa2:	2300      	movs	r3, #0
    7aa4:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DefaultConfig.SupplyMonitoringEnable = FALSE;
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    DefaultConfig.CompareEnable = FALSE;
    7aa8:	2300      	movs	r3, #0
    7aaa:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
    DefaultConfig.CompareGreaterThanEnable = FALSE;
    7aae:	2300      	movs	r3, #0
    7ab0:	f88d 30ee 	strb.w	r3, [sp, #238]	; 0xee
    DefaultConfig.CompareRangeFuncEnable = FALSE;
    7ab4:	2300      	movs	r3, #0
    7ab6:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
    DefaultConfig.CompVal1 = 0u;
    7aba:	2300      	movs	r3, #0
    7abc:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    DefaultConfig.CompVal2 = 0u;
    7ac0:	2300      	movs	r3, #0
    7ac2:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
    DefaultConfig.UsrGain = ADC_IP_DEFAULT_USER_GAIN;
    7ac6:	2304      	movs	r3, #4
    7ac8:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
    DefaultConfig.UsrOffset = 0u;
    7acc:	2300      	movs	r3, #0
    7ace:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    DefaultConfig.NumChannels = ADC_MAX_CHAN_COUNT;
    7ad2:	2310      	movs	r3, #16
    7ad4:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    7ad8:	2300      	movs	r3, #0
    7ada:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    7ade:	e02b      	b.n	7b38 <Adc_Ip_DeInit+0xd0>
    {
        ChannelConfigs[Index].ChnIdx = Index;
    7ae0:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    7ae4:	ab42      	add	r3, sp, #264	; 0x108
    7ae6:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    7aea:	4613      	mov	r3, r2
    7aec:	005b      	lsls	r3, r3, #1
    7aee:	4413      	add	r3, r2
    7af0:	009b      	lsls	r3, r3, #2
    7af2:	440b      	add	r3, r1
    7af4:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    7af8:	701a      	strb	r2, [r3, #0]
        ChannelConfigs[Index].Channel = ADC_IP_INPUTCHAN_DISABLED;
    7afa:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    7afe:	ab42      	add	r3, sp, #264	; 0x108
    7b00:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    7b04:	4613      	mov	r3, r2
    7b06:	005b      	lsls	r3, r3, #1
    7b08:	4413      	add	r3, r2
    7b0a:	009b      	lsls	r3, r3, #2
    7b0c:	440b      	add	r3, r1
    7b0e:	3304      	adds	r3, #4
    7b10:	221f      	movs	r2, #31
    7b12:	601a      	str	r2, [r3, #0]
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
        ChannelConfigs[Index].InterruptEnable = FALSE;
    7b14:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    7b18:	ab42      	add	r3, sp, #264	; 0x108
    7b1a:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    7b1e:	4613      	mov	r3, r2
    7b20:	005b      	lsls	r3, r3, #1
    7b22:	4413      	add	r3, r2
    7b24:	009b      	lsls	r3, r3, #2
    7b26:	440b      	add	r3, r1
    7b28:	3308      	adds	r3, #8
    7b2a:	2200      	movs	r2, #0
    7b2c:	701a      	strb	r2, [r3, #0]
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    7b2e:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    7b32:	3301      	adds	r3, #1
    7b34:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    7b38:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    7b3c:	2b0f      	cmp	r3, #15
    7b3e:	d9cf      	bls.n	7ae0 <Adc_Ip_DeInit+0x78>
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    }
    DefaultConfig.ChannelConfigs = ChannelConfigs;
    7b40:	ab02      	add	r3, sp, #8
    7b42:	933f      	str	r3, [sp, #252]	; 0xfc
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    DefaultConfig.ConversionCompleteNotification = NULL_PTR;
    7b44:	2300      	movs	r3, #0
    7b46:	9340      	str	r3, [sp, #256]	; 0x100
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

    Adc_Ip_Init(Instance, &DefaultConfig);
    7b48:	aa32      	add	r2, sp, #200	; 0xc8
    7b4a:	ab42      	add	r3, sp, #264	; 0x108
    7b4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    7b50:	4611      	mov	r1, r2
    7b52:	6818      	ldr	r0, [r3, #0]
    7b54:	f7ff feb1 	bl	78ba <Adc_Ip_Init>
    {
        ADC_ResetSupplyMonitoringChannel();
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    Adc_Ip_axState[Instance].Init = FALSE;
    7b58:	4a07      	ldr	r2, [pc, #28]	; (7b78 <Adc_Ip_DeInit+0x110>)
    7b5a:	ab42      	add	r3, sp, #264	; 0x108
    7b5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    7b60:	681b      	ldr	r3, [r3, #0]
    7b62:	214c      	movs	r1, #76	; 0x4c
    7b64:	fb01 f303 	mul.w	r3, r1, r3
    7b68:	4413      	add	r3, r2
    7b6a:	2200      	movs	r2, #0
    7b6c:	701a      	strb	r2, [r3, #0]
}
    7b6e:	bf00      	nop
    7b70:	b043      	add	sp, #268	; 0x10c
    7b72:	f85d fb04 	ldr.w	pc, [sp], #4
    7b76:	bf00      	nop
    7b78:	1fff8d00 	.word	0x1fff8d00

00007b7c <Adc_Ip_SetAveraging>:
* @implements     Adc_Ip_SetAveraging_Activity
* END**************************************************************************/
void Adc_Ip_SetAveraging(const uint32 Instance,
                         const boolean AvgEn,
                         const Adc_Ip_AvgSelectType AvgSel)
{
    7b7c:	b500      	push	{lr}
    7b7e:	b087      	sub	sp, #28
    7b80:	9003      	str	r0, [sp, #12]
    7b82:	460b      	mov	r3, r1
    7b84:	9201      	str	r2, [sp, #4]
    7b86:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7b8a:	4a0a      	ldr	r2, [pc, #40]	; (7bb4 <Adc_Ip_SetAveraging+0x38>)
    7b8c:	9b03      	ldr	r3, [sp, #12]
    7b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b92:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27();
    7b94:	f009 fa1c 	bl	10fd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>
    Adc_HwAcc_SetAveraging(Base, AvgEn, AvgSel);
    7b98:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7b9c:	9a01      	ldr	r2, [sp, #4]
    7b9e:	4619      	mov	r1, r3
    7ba0:	9805      	ldr	r0, [sp, #20]
    7ba2:	f7ff fd73 	bl	768c <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27();
    7ba6:	f009 fa3f 	bl	11028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>
}
    7baa:	bf00      	nop
    7bac:	b007      	add	sp, #28
    7bae:	f85d fb04 	ldr.w	pc, [sp], #4
    7bb2:	bf00      	nop
    7bb4:	00018624 	.word	0x00018624

00007bb8 <Adc_Ip_SetSampleTime>:
*
* @implements     Adc_Ip_SetSampleTime_Activity
* END**************************************************************************/
void Adc_Ip_SetSampleTime(const uint32 Instance,
                          const uint8 SampleTime)
{
    7bb8:	b500      	push	{lr}
    7bba:	b085      	sub	sp, #20
    7bbc:	9001      	str	r0, [sp, #4]
    7bbe:	460b      	mov	r3, r1
    7bc0:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7bc4:	4a09      	ldr	r2, [pc, #36]	; (7bec <Adc_Ip_SetSampleTime+0x34>)
    7bc6:	9b01      	ldr	r3, [sp, #4]
    7bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bcc:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16();
    7bce:	f008 fe79 	bl	108c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>
    Adc_HwAcc_SetSampleTime(Base, SampleTime);
    7bd2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7bd6:	4619      	mov	r1, r3
    7bd8:	9803      	ldr	r0, [sp, #12]
    7bda:	f7ff fd36 	bl	764a <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16();
    7bde:	f008 fe9d 	bl	1091c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>
}
    7be2:	bf00      	nop
    7be4:	b005      	add	sp, #20
    7be6:	f85d fb04 	ldr.w	pc, [sp], #4
    7bea:	bf00      	nop
    7bec:	00018624 	.word	0x00018624

00007bf0 <Adc_Ip_EnableDma>:
* Description   : This function enables DMA.
*
* @implements     Adc_Ip_EnableDma_Activity
* END**************************************************************************/
void Adc_Ip_EnableDma(const uint32 Instance)
{
    7bf0:	b500      	push	{lr}
    7bf2:	b085      	sub	sp, #20
    7bf4:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7bf6:	4a0a      	ldr	r2, [pc, #40]	; (7c20 <Adc_Ip_EnableDma+0x30>)
    7bf8:	9b01      	ldr	r3, [sp, #4]
    7bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bfe:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26();
    7c00:	f009 f994 	bl	10f2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>
    Base->SC2 |= ADC_SC2_DMAEN_MASK;
    7c04:	9b03      	ldr	r3, [sp, #12]
    7c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7c0a:	f043 0204 	orr.w	r2, r3, #4
    7c0e:	9b03      	ldr	r3, [sp, #12]
    7c10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26();
    7c14:	f009 f9b6 	bl	10f84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>
}
    7c18:	bf00      	nop
    7c1a:	b005      	add	sp, #20
    7c1c:	f85d fb04 	ldr.w	pc, [sp], #4
    7c20:	00018624 	.word	0x00018624

00007c24 <Adc_Ip_DisableDma>:
* Description   : This function disables DMA.
*
* @implements     Adc_Ip_DisableDma_Activity
* END**************************************************************************/
void Adc_Ip_DisableDma(const uint32 Instance)
{
    7c24:	b500      	push	{lr}
    7c26:	b085      	sub	sp, #20
    7c28:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7c2a:	4a0a      	ldr	r2, [pc, #40]	; (7c54 <Adc_Ip_DisableDma+0x30>)
    7c2c:	9b01      	ldr	r3, [sp, #4]
    7c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c32:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22();
    7c34:	f009 f832 	bl	10c9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>
    Base->SC2 &= ~(ADC_SC2_DMAEN_MASK);
    7c38:	9b03      	ldr	r3, [sp, #12]
    7c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7c3e:	f023 0204 	bic.w	r2, r3, #4
    7c42:	9b03      	ldr	r3, [sp, #12]
    7c44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22();
    7c48:	f009 f854 	bl	10cf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>
}
    7c4c:	bf00      	nop
    7c4e:	b005      	add	sp, #20
    7c50:	f85d fb04 	ldr.w	pc, [sp], #4
    7c54:	00018624 	.word	0x00018624

00007c58 <Adc_Ip_SetTriggerMode>:
*
* @implements     Adc_Ip_SetTriggerMode_Activity
* END**************************************************************************/
void Adc_Ip_SetTriggerMode(const uint32 Instance,
                           const Adc_Ip_TrigType TriggerMode)
{
    7c58:	b500      	push	{lr}
    7c5a:	b085      	sub	sp, #20
    7c5c:	9001      	str	r0, [sp, #4]
    7c5e:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7c60:	4a08      	ldr	r2, [pc, #32]	; (7c84 <Adc_Ip_SetTriggerMode+0x2c>)
    7c62:	9b01      	ldr	r3, [sp, #4]
    7c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c68:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23();
    7c6a:	f009 f869 	bl	10d40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    7c6e:	9900      	ldr	r1, [sp, #0]
    7c70:	9803      	ldr	r0, [sp, #12]
    7c72:	f7ff fd4e 	bl	7712 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23();
    7c76:	f009 f88f 	bl	10d98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>
}
    7c7a:	bf00      	nop
    7c7c:	b005      	add	sp, #20
    7c7e:	f85d fb04 	ldr.w	pc, [sp], #4
    7c82:	bf00      	nop
    7c84:	00018624 	.word	0x00018624

00007c88 <Adc_Ip_SetContinuousMode>:
*
* @implements     Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Adc_Ip_SetContinuousMode(const uint32 Instance,
                              const boolean ContinuousModeEnable)
{
    7c88:	b500      	push	{lr}
    7c8a:	b085      	sub	sp, #20
    7c8c:	9001      	str	r0, [sp, #4]
    7c8e:	460b      	mov	r3, r1
    7c90:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7c94:	4a11      	ldr	r2, [pc, #68]	; (7cdc <Adc_Ip_SetContinuousMode+0x54>)
    7c96:	9b01      	ldr	r3, [sp, #4]
    7c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c9c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30();
    7c9e:	f009 fa8d 	bl	111bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>
    uint32 Sc3Reg = Base->SC3;
    7ca2:	9b03      	ldr	r3, [sp, #12]
    7ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    7ca8:	9302      	str	r3, [sp, #8]
    Sc3Reg &= ~(ADC_SC3_ADCO_MASK);
    7caa:	9b02      	ldr	r3, [sp, #8]
    7cac:	f023 0308 	bic.w	r3, r3, #8
    7cb0:	9302      	str	r3, [sp, #8]
    Sc3Reg |= ADC_SC3_ADCO(ContinuousModeEnable ? 1u : 0u);
    7cb2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7cb6:	2b00      	cmp	r3, #0
    7cb8:	d001      	beq.n	7cbe <Adc_Ip_SetContinuousMode+0x36>
    7cba:	2308      	movs	r3, #8
    7cbc:	e000      	b.n	7cc0 <Adc_Ip_SetContinuousMode+0x38>
    7cbe:	2300      	movs	r3, #0
    7cc0:	9a02      	ldr	r2, [sp, #8]
    7cc2:	4313      	orrs	r3, r2
    7cc4:	9302      	str	r3, [sp, #8]
    Base->SC3 = Sc3Reg;
    7cc6:	9b03      	ldr	r3, [sp, #12]
    7cc8:	9a02      	ldr	r2, [sp, #8]
    7cca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30();
    7cce:	f009 faa1 	bl	11214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>
}
    7cd2:	bf00      	nop
    7cd4:	b005      	add	sp, #20
    7cd6:	f85d fb04 	ldr.w	pc, [sp], #4
    7cda:	bf00      	nop
    7cdc:	00018624 	.word	0x00018624

00007ce0 <Adc_Ip_SetResolution>:
*
* @implements     Adc_Ip_SetResolution_Activity
* END**************************************************************************/
void Adc_Ip_SetResolution(const uint32 Instance,
                          const Adc_Ip_ResolutionType Resolution)
{
    7ce0:	b500      	push	{lr}
    7ce2:	b085      	sub	sp, #20
    7ce4:	9001      	str	r0, [sp, #4]
    7ce6:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7ce8:	4a0e      	ldr	r2, [pc, #56]	; (7d24 <Adc_Ip_SetResolution+0x44>)
    7cea:	9b01      	ldr	r3, [sp, #4]
    7cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cf0:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10();
    7cf2:	f008 fab3 	bl	1025c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>
    uint32 Cfg1Reg = Base->CFG1;
    7cf6:	9b03      	ldr	r3, [sp, #12]
    7cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7cfa:	9302      	str	r3, [sp, #8]
    Cfg1Reg &= ~(ADC_CFG1_MODE_MASK);
    7cfc:	9b02      	ldr	r3, [sp, #8]
    7cfe:	f023 030c 	bic.w	r3, r3, #12
    7d02:	9302      	str	r3, [sp, #8]
    Cfg1Reg |= ADC_CFG1_MODE(Resolution);
    7d04:	9b00      	ldr	r3, [sp, #0]
    7d06:	009b      	lsls	r3, r3, #2
    7d08:	f003 030c 	and.w	r3, r3, #12
    7d0c:	9a02      	ldr	r2, [sp, #8]
    7d0e:	4313      	orrs	r3, r2
    7d10:	9302      	str	r3, [sp, #8]
    Base->CFG1 = Cfg1Reg;
    7d12:	9b03      	ldr	r3, [sp, #12]
    7d14:	9a02      	ldr	r2, [sp, #8]
    7d16:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10();
    7d18:	f008 facc 	bl	102b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>
}
    7d1c:	bf00      	nop
    7d1e:	b005      	add	sp, #20
    7d20:	f85d fb04 	ldr.w	pc, [sp], #4
    7d24:	00018624 	.word	0x00018624

00007d28 <Adc_Ip_SetClockMode>:
*
* @implements     Adc_Ip_SetClockMode_Activity
* END**************************************************************************/
void Adc_Ip_SetClockMode(const uint32 Instance,
                         const Adc_Ip_ClockConfigType * const Config)
{
    7d28:	b500      	push	{lr}
    7d2a:	b085      	sub	sp, #20
    7d2c:	9001      	str	r0, [sp, #4]
    7d2e:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7d30:	4a15      	ldr	r2, [pc, #84]	; (7d88 <Adc_Ip_SetClockMode+0x60>)
    7d32:	9b01      	ldr	r3, [sp, #4]
    7d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d38:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11();
    7d3a:	f008 fc29 	bl	10590 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    7d3e:	9b00      	ldr	r3, [sp, #0]
    7d40:	6819      	ldr	r1, [r3, #0]
    7d42:	9b00      	ldr	r3, [sp, #0]
    7d44:	685b      	ldr	r3, [r3, #4]
    7d46:	461a      	mov	r2, r3
    7d48:	9803      	ldr	r0, [sp, #12]
    7d4a:	f7ff fc23 	bl	7594 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11();
    7d4e:	f008 fc4b 	bl	105e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14();
    7d52:	f008 fd13 	bl	1077c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    7d56:	9b00      	ldr	r3, [sp, #0]
    7d58:	7a1b      	ldrb	r3, [r3, #8]
    7d5a:	4619      	mov	r1, r3
    7d5c:	9803      	ldr	r0, [sp, #12]
    7d5e:	f7ff fc74 	bl	764a <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14();
    7d62:	f008 fd37 	bl	107d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28();
    7d66:	f009 f985 	bl	11074 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    7d6a:	9b00      	ldr	r3, [sp, #0]
    7d6c:	7a59      	ldrb	r1, [r3, #9]
    7d6e:	9b00      	ldr	r3, [sp, #0]
    7d70:	68db      	ldr	r3, [r3, #12]
    7d72:	461a      	mov	r2, r3
    7d74:	9803      	ldr	r0, [sp, #12]
    7d76:	f7ff fc89 	bl	768c <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28();
    7d7a:	f009 f9a7 	bl	110cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>
}
    7d7e:	bf00      	nop
    7d80:	b005      	add	sp, #20
    7d82:	f85d fb04 	ldr.w	pc, [sp], #4
    7d86:	bf00      	nop
    7d88:	00018624 	.word	0x00018624

00007d8c <Adc_Ip_ConfigChannel>:
*
* @implements     Adc_Ip_ConfigChannel_Activity
* END**************************************************************************/
void Adc_Ip_ConfigChannel(const uint32 Instance,
                          const Adc_Ip_ChanConfigType * const ChanConfig)
{
    7d8c:	b510      	push	{r4, lr}
    7d8e:	b084      	sub	sp, #16
    7d90:	9001      	str	r0, [sp, #4]
    7d92:	9100      	str	r1, [sp, #0]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)ChanConfig->Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7d94:	4a13      	ldr	r2, [pc, #76]	; (7de4 <Adc_Ip_ConfigChannel+0x58>)
    7d96:	9b01      	ldr	r3, [sp, #4]
    7d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d9c:	9303      	str	r3, [sp, #12]
        InputChanDemapped = ADC_IP_INPUTCHAN_INT0;
    }
    else
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    {
        InputChanDemapped = ChanConfig->Channel;
    7d9e:	9b00      	ldr	r3, [sp, #0]
    7da0:	685b      	ldr	r3, [r3, #4]
    7da2:	9302      	str	r3, [sp, #8]
    }

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21();
    7da4:	f008 ff28 	bl	10bf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, ChanConfig->InterruptEnable);
    7da8:	9b00      	ldr	r3, [sp, #0]
    7daa:	7819      	ldrb	r1, [r3, #0]
    7dac:	9b00      	ldr	r3, [sp, #0]
    7dae:	7a1b      	ldrb	r3, [r3, #8]
    7db0:	9a02      	ldr	r2, [sp, #8]
    7db2:	9803      	ldr	r0, [sp, #12]
    7db4:	f7ff fcd5 	bl	7762 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, FALSE);
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21();
    7db8:	f008 ff4a 	bl	10c50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>

    /* Also update in state structure */
    Adc_Ip_axState[Instance].ChannelConfig[ChanConfig->ChnIdx] = ChanConfig->Channel;
    7dbc:	9b00      	ldr	r3, [sp, #0]
    7dbe:	781b      	ldrb	r3, [r3, #0]
    7dc0:	461c      	mov	r4, r3
    7dc2:	9b00      	ldr	r3, [sp, #0]
    7dc4:	6859      	ldr	r1, [r3, #4]
    7dc6:	4808      	ldr	r0, [pc, #32]	; (7de8 <Adc_Ip_ConfigChannel+0x5c>)
    7dc8:	9a01      	ldr	r2, [sp, #4]
    7dca:	4613      	mov	r3, r2
    7dcc:	00db      	lsls	r3, r3, #3
    7dce:	4413      	add	r3, r2
    7dd0:	005b      	lsls	r3, r3, #1
    7dd2:	4413      	add	r3, r2
    7dd4:	4423      	add	r3, r4
    7dd6:	3302      	adds	r3, #2
    7dd8:	009b      	lsls	r3, r3, #2
    7dda:	4403      	add	r3, r0
    7ddc:	6059      	str	r1, [r3, #4]
}
    7dde:	bf00      	nop
    7de0:	b004      	add	sp, #16
    7de2:	bd10      	pop	{r4, pc}
    7de4:	00018624 	.word	0x00018624
    7de8:	1fff8d00 	.word	0x1fff8d00

00007dec <Adc_Ip_SetDisabledChannel>:
* @implements     Adc_Ip_SetDisabledChannel_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_SetDisabledChannel(const uint32 Instance,
                                            const uint8 ControlChanIdx,
                                            const boolean WithTimeout)
{
    7dec:	b500      	push	{lr}
    7dee:	b089      	sub	sp, #36	; 0x24
    7df0:	9001      	str	r0, [sp, #4]
    7df2:	460b      	mov	r3, r1
    7df4:	f88d 3003 	strb.w	r3, [sp, #3]
    7df8:	4613      	mov	r3, r2
    7dfa:	f88d 3002 	strb.w	r3, [sp, #2]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7dfe:	4a24      	ldr	r2, [pc, #144]	; (7e90 <Adc_Ip_SetDisabledChannel+0xa4>)
    7e00:	9b01      	ldr	r3, [sp, #4]
    7e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e06:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    7e08:	2300      	movs	r3, #0
    7e0a:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    7e0c:	2100      	movs	r1, #0
    7e0e:	4821      	ldr	r0, [pc, #132]	; (7e94 <Adc_Ip_SetDisabledChannel+0xa8>)
    7e10:	f7fa f8b6 	bl	1f80 <OsIf_MicrosToTicks>
    7e14:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    7e16:	2000      	movs	r0, #0
    7e18:	f7fa f866 	bl	1ee8 <OsIf_GetCounter>
    7e1c:	4603      	mov	r3, r0
    7e1e:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    7e20:	2300      	movs	r3, #0
    7e22:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17();
    7e24:	f008 fda0 	bl	10968 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>
    /* Set input channel select to disabled */
    SC1(Base, ControlChanIdx) |= ADC_SC1_ADCH_MASK;
    7e28:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7e2c:	9b05      	ldr	r3, [sp, #20]
    7e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7e32:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7e36:	f043 011f 	orr.w	r1, r3, #31
    7e3a:	9b05      	ldr	r3, [sp, #20]
    7e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17();
    7e40:	f008 fdbe 	bl	109c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>

    if (WithTimeout == TRUE)
    7e44:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7e48:	2b00      	cmp	r3, #0
    7e4a:	d01c      	beq.n	7e86 <Adc_Ip_SetDisabledChannel+0x9a>
    {
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    7e4c:	e008      	b.n	7e60 <Adc_Ip_SetDisabledChannel+0x74>
        {
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    7e4e:	ab03      	add	r3, sp, #12
    7e50:	2100      	movs	r1, #0
    7e52:	4618      	mov	r0, r3
    7e54:	f7fa f861 	bl	1f1a <OsIf_GetElapsed>
    7e58:	4602      	mov	r2, r0
    7e5a:	9b06      	ldr	r3, [sp, #24]
    7e5c:	4413      	add	r3, r2
    7e5e:	9306      	str	r3, [sp, #24]
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    7e60:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7e64:	9b05      	ldr	r3, [sp, #20]
    7e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7e6a:	f003 031f 	and.w	r3, r3, #31
    7e6e:	2b1f      	cmp	r3, #31
    7e70:	d003      	beq.n	7e7a <Adc_Ip_SetDisabledChannel+0x8e>
    7e72:	9a06      	ldr	r2, [sp, #24]
    7e74:	9b04      	ldr	r3, [sp, #16]
    7e76:	429a      	cmp	r2, r3
    7e78:	d3e9      	bcc.n	7e4e <Adc_Ip_SetDisabledChannel+0x62>
        }
        if (ElapsedTicks >= TimeoutTicks)
    7e7a:	9a06      	ldr	r2, [sp, #24]
    7e7c:	9b04      	ldr	r3, [sp, #16]
    7e7e:	429a      	cmp	r2, r3
    7e80:	d301      	bcc.n	7e86 <Adc_Ip_SetDisabledChannel+0x9a>
        {
            Status = ADC_IP_STATUS_TIMEOUT;
    7e82:	2302      	movs	r3, #2
    7e84:	9307      	str	r3, [sp, #28]
        }
    }

    return Status;
    7e86:	9b07      	ldr	r3, [sp, #28]
}
    7e88:	4618      	mov	r0, r3
    7e8a:	b009      	add	sp, #36	; 0x24
    7e8c:	f85d fb04 	ldr.w	pc, [sp], #4
    7e90:	00018624 	.word	0x00018624
    7e94:	000186a0 	.word	0x000186a0

00007e98 <Adc_Ip_StartConversion>:
* @implements     Adc_Ip_StartConversion_Activity
* END**************************************************************************/
void Adc_Ip_StartConversion(const uint32 Instance,
                            Adc_Ip_InputChannelType InputChannel,
                            const boolean InterruptEnable)
{
    7e98:	b500      	push	{lr}
    7e9a:	b087      	sub	sp, #28
    7e9c:	9003      	str	r0, [sp, #12]
    7e9e:	9102      	str	r1, [sp, #8]
    7ea0:	4613      	mov	r3, r2
    7ea2:	f88d 3007 	strb.w	r3, [sp, #7]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7ea6:	4a0a      	ldr	r2, [pc, #40]	; (7ed0 <Adc_Ip_StartConversion+0x38>)
    7ea8:	9b03      	ldr	r3, [sp, #12]
    7eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7eae:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18();
    7eb0:	f008 fdac 	bl	10a0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>
    /* Configure SC1A register */
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, InterruptEnable);
    7eb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7eb8:	9a02      	ldr	r2, [sp, #8]
    7eba:	2100      	movs	r1, #0
    7ebc:	9805      	ldr	r0, [sp, #20]
    7ebe:	f7ff fc50 	bl	7762 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, FALSE);
    (void)InterruptEnable;
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18();
    7ec2:	f008 fdcf 	bl	10a64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>
}
    7ec6:	bf00      	nop
    7ec8:	b007      	add	sp, #28
    7eca:	f85d fb04 	ldr.w	pc, [sp], #4
    7ece:	bf00      	nop
    7ed0:	00018624 	.word	0x00018624

00007ed4 <Adc_Ip_GetConvActiveFlag>:
* Description   : Reads and return conversion active flag status.
*
* @implements     Adc_Ip_GetConvActiveFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvActiveFlag(const uint32 Instance)
{
    7ed4:	b084      	sub	sp, #16
    7ed6:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7ed8:	4a0b      	ldr	r2, [pc, #44]	; (7f08 <Adc_Ip_GetConvActiveFlag+0x34>)
    7eda:	9b01      	ldr	r3, [sp, #4]
    7edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ee0:	9303      	str	r3, [sp, #12]
    uint32 Sc2Reg = Base->SC2;
    7ee2:	9b03      	ldr	r3, [sp, #12]
    7ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7ee8:	9302      	str	r3, [sp, #8]

    Sc2Reg = (Sc2Reg & ADC_SC2_ADACT_MASK) >> ADC_SC2_ADACT_SHIFT;
    7eea:	9b02      	ldr	r3, [sp, #8]
    7eec:	09db      	lsrs	r3, r3, #7
    7eee:	f003 0301 	and.w	r3, r3, #1
    7ef2:	9302      	str	r3, [sp, #8]

    return (Sc2Reg != 0u) ? TRUE : FALSE;
    7ef4:	9b02      	ldr	r3, [sp, #8]
    7ef6:	2b00      	cmp	r3, #0
    7ef8:	bf14      	ite	ne
    7efa:	2301      	movne	r3, #1
    7efc:	2300      	moveq	r3, #0
    7efe:	b2db      	uxtb	r3, r3
}
    7f00:	4618      	mov	r0, r3
    7f02:	b004      	add	sp, #16
    7f04:	4770      	bx	lr
    7f06:	bf00      	nop
    7f08:	00018624 	.word	0x00018624

00007f0c <Adc_Ip_GetChanInterrupt>:
*
* @implements     Adc_Ip_GetChanInterrupt_Activity
* END**************************************************************************/
boolean Adc_Ip_GetChanInterrupt(const uint32 Instance,
                                const uint8 ControlChanIdx)
{
    7f0c:	b500      	push	{lr}
    7f0e:	b085      	sub	sp, #20
    7f10:	9001      	str	r0, [sp, #4]
    7f12:	460b      	mov	r3, r1
    7f14:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    7f18:	4a08      	ldr	r2, [pc, #32]	; (7f3c <Adc_Ip_GetChanInterrupt+0x30>)
    7f1a:	9b01      	ldr	r3, [sp, #4]
    7f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f20:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7f28:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetAIEN(Sc1Reg);
    7f2a:	9803      	ldr	r0, [sp, #12]
    7f2c:	f7ff fc5e 	bl	77ec <Adc_HwAcc_GetAIEN>
    7f30:	4603      	mov	r3, r0
}
    7f32:	4618      	mov	r0, r3
    7f34:	b005      	add	sp, #20
    7f36:	f85d fb04 	ldr.w	pc, [sp], #4
    7f3a:	bf00      	nop
    7f3c:	00018624 	.word	0x00018624

00007f40 <Adc_Ip_GetConvCompleteFlag>:
*
* @implements     Adc_Ip_GetConvCompleteFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvCompleteFlag(const uint32 Instance,
                                   const uint8 ControlChanIdx)
{
    7f40:	b500      	push	{lr}
    7f42:	b085      	sub	sp, #20
    7f44:	9001      	str	r0, [sp, #4]
    7f46:	460b      	mov	r3, r1
    7f48:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    7f4c:	4a08      	ldr	r2, [pc, #32]	; (7f70 <Adc_Ip_GetConvCompleteFlag+0x30>)
    7f4e:	9b01      	ldr	r3, [sp, #4]
    7f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f54:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7f5c:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetCOCO(Sc1Reg);
    7f5e:	9803      	ldr	r0, [sp, #12]
    7f60:	f7ff fc52 	bl	7808 <Adc_HwAcc_GetCOCO>
    7f64:	4603      	mov	r3, r0
}
    7f66:	4618      	mov	r0, r3
    7f68:	b005      	add	sp, #20
    7f6a:	f85d fb04 	ldr.w	pc, [sp], #4
    7f6e:	bf00      	nop
    7f70:	00018624 	.word	0x00018624

00007f74 <Adc_Ip_GetConvData>:
*
* @implements     Adc_Ip_GetConvData_Activity
* END**************************************************************************/
uint16 Adc_Ip_GetConvData(const uint32 Instance,
                          const uint8 ControlChanIdx)
{
    7f74:	b500      	push	{lr}
    7f76:	b085      	sub	sp, #20
    7f78:	9001      	str	r0, [sp, #4]
    7f7a:	460b      	mov	r3, r1
    7f7c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7f80:	4a07      	ldr	r2, [pc, #28]	; (7fa0 <Adc_Ip_GetConvData+0x2c>)
    7f82:	9b01      	ldr	r3, [sp, #4]
    7f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f88:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetData(Base, ControlChanIdx);
    7f8a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7f8e:	4619      	mov	r1, r3
    7f90:	9803      	ldr	r0, [sp, #12]
    7f92:	f7ff fc47 	bl	7824 <Adc_HwAcc_GetData>
    7f96:	4603      	mov	r3, r0
}
    7f98:	4618      	mov	r0, r3
    7f9a:	b005      	add	sp, #20
    7f9c:	f85d fb04 	ldr.w	pc, [sp], #4
    7fa0:	00018624 	.word	0x00018624

00007fa4 <Adc_Ip_DoCalibration>:
* specified frequency (50Mhz) and greater than minimum specified frequency (20Mhz).
*
* @implements     Adc_Ip_DoCalibration_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_DoCalibration(const uint32 Instance)
{
    7fa4:	b500      	push	{lr}
    7fa6:	b093      	sub	sp, #76	; 0x4c
    7fa8:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7faa:	4a59      	ldr	r2, [pc, #356]	; (8110 <Adc_Ip_DoCalibration+0x16c>)
    7fac:	9b01      	ldr	r3, [sp, #4]
    7fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7fb2:	930f      	str	r3, [sp, #60]	; 0x3c
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    7fb4:	2300      	movs	r3, #0
    7fb6:	9311      	str	r3, [sp, #68]	; 0x44
    Adc_Ip_TrigType TriggerMode;
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    7fb8:	2100      	movs	r1, #0
    7fba:	4856      	ldr	r0, [pc, #344]	; (8114 <Adc_Ip_DoCalibration+0x170>)
    7fbc:	f7f9 ffe0 	bl	1f80 <OsIf_MicrosToTicks>
    7fc0:	900e      	str	r0, [sp, #56]	; 0x38
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    7fc2:	2000      	movs	r0, #0
    7fc4:	f7f9 ff90 	bl	1ee8 <OsIf_GetCounter>
    7fc8:	4603      	mov	r3, r0
    7fca:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 ElapsedTicks = 0u;
    7fcc:	2300      	movs	r3, #0
    7fce:	9310      	str	r3, [sp, #64]	; 0x40
    uint32 Reg;
    Adc_Ip_ClockConfigType PreClockConfig;
    Adc_Ip_ClockConfigType CalClockConfig;

    /* Store settings before calibration */
    Reg = Base->SC3;
    7fd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    7fd6:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.AvgEn = ((Reg & ADC_SC3_AVGE_MASK) != 0u) ? TRUE : FALSE;
    7fd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7fda:	089b      	lsrs	r3, r3, #2
    7fdc:	f003 0301 	and.w	r3, r3, #1
    7fe0:	2b00      	cmp	r3, #0
    7fe2:	bf14      	ite	ne
    7fe4:	2301      	movne	r3, #1
    7fe6:	2300      	moveq	r3, #0
    7fe8:	b2db      	uxtb	r3, r3
    7fea:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    PreClockConfig.AvgSel = Adc_HwAcc_GetAverageSelect(Reg);
    7fee:	980d      	ldr	r0, [sp, #52]	; 0x34
    7ff0:	f7ff fb71 	bl	76d6 <Adc_HwAcc_GetAverageSelect>
    7ff4:	4603      	mov	r3, r0
    7ff6:	930a      	str	r3, [sp, #40]	; 0x28

    Reg = Base->CFG2;
    7ff8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7ffc:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.SampleTime = (uint8) ((Reg & ADC_CFG2_SMPLTS_MASK) >> ADC_CFG2_SMPLTS_SHIFT);
    7ffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8000:	b2db      	uxtb	r3, r3
    8002:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    TriggerMode = Adc_HwAcc_GetTriggerMode(Base->SC2);
    8006:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    800c:	4618      	mov	r0, r3
    800e:	f7ff fb99 	bl	7744 <Adc_HwAcc_GetTriggerMode>
    8012:	900c      	str	r0, [sp, #48]	; 0x30

    Reg = Base->CFG1;
    8014:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8018:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.ClockDivide = Adc_HwAcc_GetClockDivide(Reg);
    801a:	980d      	ldr	r0, [sp, #52]	; 0x34
    801c:	f7ff fad8 	bl	75d0 <Adc_HwAcc_GetClockDivide>
    8020:	4603      	mov	r3, r0
    8022:	9307      	str	r3, [sp, #28]
    PreClockConfig.InputClock = Adc_HwAcc_GetInputClock(Reg);
    8024:	980d      	ldr	r0, [sp, #52]	; 0x34
    8026:	f7ff faf2 	bl	760e <Adc_HwAcc_GetInputClock>
    802a:	4603      	mov	r3, r0
    802c:	9308      	str	r3, [sp, #32]

    CalClockConfig.AvgEn = TRUE;
    802e:	2301      	movs	r3, #1
    8030:	f88d 3015 	strb.w	r3, [sp, #21]
    CalClockConfig.AvgSel = ADC_IP_AVG_32_CONV;
    8034:	2303      	movs	r3, #3
    8036:	9306      	str	r3, [sp, #24]
    CalClockConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    8038:	230c      	movs	r3, #12
    803a:	f88d 3014 	strb.w	r3, [sp, #20]
    CalClockConfig.ClockDivide = Adc_Ip_axState[Instance].CalibrationClockDivide;
    803e:	4a36      	ldr	r2, [pc, #216]	; (8118 <Adc_Ip_DoCalibration+0x174>)
    8040:	9b01      	ldr	r3, [sp, #4]
    8042:	214c      	movs	r1, #76	; 0x4c
    8044:	fb01 f303 	mul.w	r3, r1, r3
    8048:	4413      	add	r3, r2
    804a:	3304      	adds	r3, #4
    804c:	681b      	ldr	r3, [r3, #0]
    804e:	9303      	str	r3, [sp, #12]
    CalClockConfig.InputClock = PreClockConfig.InputClock;
    8050:	9b08      	ldr	r3, [sp, #32]
    8052:	9304      	str	r3, [sp, #16]

    /* Prepare required settings for calibration. */
    ADC_DoCalibration_SetParams(Base, &CalClockConfig, ADC_IP_TRIGGER_SOFTWARE);
    8054:	ab03      	add	r3, sp, #12
    8056:	2200      	movs	r2, #0
    8058:	4619      	mov	r1, r3
    805a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    805c:	f7ff fbfa 	bl	7854 <ADC_DoCalibration_SetParams>

    Base->CLPS = 0u;
    8060:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8062:	2200      	movs	r2, #0
    8064:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    Base->CLP3 = 0u;
    8068:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    806a:	2200      	movs	r2, #0
    806c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    Base->CLP2 = 0u;
    8070:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8072:	2200      	movs	r2, #0
    8074:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    Base->CLP1 = 0u;
    8078:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    807a:	2200      	movs	r2, #0
    807c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Base->CLP0 = 0u;
    8080:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8082:	2200      	movs	r2, #0
    8084:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    Base->CLPX = 0u;
    8088:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    808a:	2200      	movs	r2, #0
    808c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    Base->CLP9 = 0u;
    8090:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8092:	2200      	movs	r2, #0
    8094:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Start calibration by writing to the calibration field */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    8098:	f009 f83e 	bl	11118 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Reg = Base->SC3;
    809c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    809e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    80a2:	930d      	str	r3, [sp, #52]	; 0x34
    Reg &= ~(ADC_SC3_CAL_MASK);
    80a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    80a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    80aa:	930d      	str	r3, [sp, #52]	; 0x34
    Reg |= ADC_SC3_CAL(1u);
    80ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    80ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    80b2:	930d      	str	r3, [sp, #52]	; 0x34
    Base->SC3 = Reg;
    80b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    80b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    80b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    80bc:	f009 f858 	bl	11170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Wait for the calibration to finish */
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    80c0:	e008      	b.n	80d4 <Adc_Ip_DoCalibration+0x130>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    80c2:	ab0b      	add	r3, sp, #44	; 0x2c
    80c4:	2100      	movs	r1, #0
    80c6:	4618      	mov	r0, r3
    80c8:	f7f9 ff27 	bl	1f1a <OsIf_GetElapsed>
    80cc:	4602      	mov	r2, r0
    80ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
    80d0:	4413      	add	r3, r2
    80d2:	9310      	str	r3, [sp, #64]	; 0x40
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    80d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    80d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    80da:	f003 0380 	and.w	r3, r3, #128	; 0x80
    80de:	2b00      	cmp	r3, #0
    80e0:	d003      	beq.n	80ea <Adc_Ip_DoCalibration+0x146>
    80e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    80e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    80e6:	429a      	cmp	r2, r3
    80e8:	d3eb      	bcc.n	80c2 <Adc_Ip_DoCalibration+0x11e>
    }
    if (ElapsedTicks >= TimeoutTicks)
    80ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
    80ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    80ee:	429a      	cmp	r2, r3
    80f0:	d301      	bcc.n	80f6 <Adc_Ip_DoCalibration+0x152>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    80f2:	2302      	movs	r3, #2
    80f4:	9311      	str	r3, [sp, #68]	; 0x44
    }

    /* Revert settings as same as before calibration. */
    ADC_DoCalibration_SetParams(Base, &PreClockConfig, TriggerMode);
    80f6:	ab07      	add	r3, sp, #28
    80f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    80fa:	4619      	mov	r1, r3
    80fc:	980f      	ldr	r0, [sp, #60]	; 0x3c
    80fe:	f7ff fba9 	bl	7854 <ADC_DoCalibration_SetParams>

    /* Clear COCO flag */
    (void) R(Base, 0u);
    8102:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8104:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return Status;
    8106:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    8108:	4618      	mov	r0, r3
    810a:	b013      	add	sp, #76	; 0x4c
    810c:	f85d fb04 	ldr.w	pc, [sp], #4
    8110:	00018624 	.word	0x00018624
    8114:	000186a0 	.word	0x000186a0
    8118:	1fff8d00 	.word	0x1fff8d00

0000811c <Adc_Ip_ClearLatchedTriggers>:
* has been deactivated.
*
* @implements     Adc_Ip_ClearLatchedTriggers_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_ClearLatchedTriggers(const uint32 Instance)
{
    811c:	b500      	push	{lr}
    811e:	b089      	sub	sp, #36	; 0x24
    8120:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8122:	4a1e      	ldr	r2, [pc, #120]	; (819c <Adc_Ip_ClearLatchedTriggers+0x80>)
    8124:	9b01      	ldr	r3, [sp, #4]
    8126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    812a:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    812c:	2300      	movs	r3, #0
    812e:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    8130:	2100      	movs	r1, #0
    8132:	481b      	ldr	r0, [pc, #108]	; (81a0 <Adc_Ip_ClearLatchedTriggers+0x84>)
    8134:	f7f9 ff24 	bl	1f80 <OsIf_MicrosToTicks>
    8138:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    813a:	2000      	movs	r0, #0
    813c:	f7f9 fed4 	bl	1ee8 <OsIf_GetCounter>
    8140:	4603      	mov	r3, r0
    8142:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    8144:	2300      	movs	r3, #0
    8146:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12();
    8148:	f008 fa74 	bl	10634 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>
    /* Write bit to clear latched triggers */
    Base->CFG1 |= ADC_CFG1_CLRLTRG(0x01u);
    814c:	9b05      	ldr	r3, [sp, #20]
    814e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8150:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    8154:	9b05      	ldr	r3, [sp, #20]
    8156:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12();
    8158:	f008 fa98 	bl	1068c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>

    /* Wait for latched triggers to be cleared */
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    815c:	e008      	b.n	8170 <Adc_Ip_ClearLatchedTriggers+0x54>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    815e:	ab03      	add	r3, sp, #12
    8160:	2100      	movs	r1, #0
    8162:	4618      	mov	r0, r3
    8164:	f7f9 fed9 	bl	1f1a <OsIf_GetElapsed>
    8168:	4602      	mov	r2, r0
    816a:	9b06      	ldr	r3, [sp, #24]
    816c:	4413      	add	r3, r2
    816e:	9306      	str	r3, [sp, #24]
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8170:	9b05      	ldr	r3, [sp, #20]
    8172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8176:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    817a:	2b00      	cmp	r3, #0
    817c:	d003      	beq.n	8186 <Adc_Ip_ClearLatchedTriggers+0x6a>
    817e:	9a06      	ldr	r2, [sp, #24]
    8180:	9b04      	ldr	r3, [sp, #16]
    8182:	429a      	cmp	r2, r3
    8184:	d3eb      	bcc.n	815e <Adc_Ip_ClearLatchedTriggers+0x42>
    }
    if (ElapsedTicks >= TimeoutTicks)
    8186:	9a06      	ldr	r2, [sp, #24]
    8188:	9b04      	ldr	r3, [sp, #16]
    818a:	429a      	cmp	r2, r3
    818c:	d301      	bcc.n	8192 <Adc_Ip_ClearLatchedTriggers+0x76>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    818e:	2302      	movs	r3, #2
    8190:	9307      	str	r3, [sp, #28]
    }

    return Status;
    8192:	9b07      	ldr	r3, [sp, #28]
}
    8194:	4618      	mov	r0, r3
    8196:	b009      	add	sp, #36	; 0x24
    8198:	f85d fb04 	ldr.w	pc, [sp], #4
    819c:	00018624 	.word	0x00018624
    81a0:	000186a0 	.word	0x000186a0

000081a4 <Adc_Ip_EnableChannelNotification>:
*
* @implements     Adc_Ip_EnableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_EnableChannelNotification(const uint32 Instance,
                                      const uint8 ControlChanIdx)
{
    81a4:	b500      	push	{lr}
    81a6:	b085      	sub	sp, #20
    81a8:	9001      	str	r0, [sp, #4]
    81aa:	460b      	mov	r3, r1
    81ac:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    81b0:	4a0c      	ldr	r2, [pc, #48]	; (81e4 <Adc_Ip_EnableChannelNotification+0x40>)
    81b2:	9b01      	ldr	r3, [sp, #4]
    81b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81b8:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19();
    81ba:	f008 fc79 	bl	10ab0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>
    SC1(Base, ControlChanIdx) |= ADC_SC1_AIEN_MASK;
    81be:	f89d 2003 	ldrb.w	r2, [sp, #3]
    81c2:	9b03      	ldr	r3, [sp, #12]
    81c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    81c8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    81cc:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    81d0:	9b03      	ldr	r3, [sp, #12]
    81d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19();
    81d6:	f008 fc97 	bl	10b08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>
}
    81da:	bf00      	nop
    81dc:	b005      	add	sp, #20
    81de:	f85d fb04 	ldr.w	pc, [sp], #4
    81e2:	bf00      	nop
    81e4:	00018624 	.word	0x00018624

000081e8 <Adc_Ip_DisableChannelNotification>:
*
* @implements     Adc_Ip_DisableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_DisableChannelNotification(const uint32 Instance,
                                       const uint8 ControlChanIdx)
{
    81e8:	b500      	push	{lr}
    81ea:	b085      	sub	sp, #20
    81ec:	9001      	str	r0, [sp, #4]
    81ee:	460b      	mov	r3, r1
    81f0:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    81f4:	4a0c      	ldr	r2, [pc, #48]	; (8228 <Adc_Ip_DisableChannelNotification+0x40>)
    81f6:	9b01      	ldr	r3, [sp, #4]
    81f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81fc:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20();
    81fe:	f008 fca9 	bl	10b54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>
    SC1(Base, ControlChanIdx) &= ~(ADC_SC1_AIEN_MASK);
    8202:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8206:	9b03      	ldr	r3, [sp, #12]
    8208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    820c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8210:	f023 0140 	bic.w	r1, r3, #64	; 0x40
    8214:	9b03      	ldr	r3, [sp, #12]
    8216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20();
    821a:	f008 fcc7 	bl	10bac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>
}
    821e:	bf00      	nop
    8220:	b005      	add	sp, #20
    8222:	f85d fb04 	ldr.w	pc, [sp], #4
    8226:	bf00      	nop
    8228:	00018624 	.word	0x00018624

0000822c <Adc_Ip_ClearTrigErrReg>:
* Description   : This function clears all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_ClearTrigErrReg_Activity
* END**************************************************************************/
void Adc_Ip_ClearTrigErrReg(const uint32 Instance)
{
    822c:	b500      	push	{lr}
    822e:	b085      	sub	sp, #20
    8230:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8232:	4a0a      	ldr	r2, [pc, #40]	; (825c <Adc_Ip_ClearTrigErrReg+0x30>)
    8234:	9b01      	ldr	r3, [sp, #4]
    8236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    823a:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25();
    823c:	f008 fe24 	bl	10e88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>
    Base->SC2 |= ADC_SC2_TRGSTERR_MASK;
    8240:	9b03      	ldr	r3, [sp, #12]
    8242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8246:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
    824a:	9b03      	ldr	r3, [sp, #12]
    824c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25();
    8250:	f008 fe46 	bl	10ee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>
}
    8254:	bf00      	nop
    8256:	b005      	add	sp, #20
    8258:	f85d fb04 	ldr.w	pc, [sp], #4
    825c:	00018624 	.word	0x00018624

00008260 <Adc_Ip_GetTrigErrReg>:
* Description   : This function returns all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_GetTrigErrReg_Activity
* END**************************************************************************/
uint32 Adc_Ip_GetTrigErrReg(const uint32 Instance)
{
    8260:	b084      	sub	sp, #16
    8262:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8264:	4a06      	ldr	r2, [pc, #24]	; (8280 <Adc_Ip_GetTrigErrReg+0x20>)
    8266:	9b01      	ldr	r3, [sp, #4]
    8268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    826c:	9303      	str	r3, [sp, #12]

    return (Base->SC2 & ADC_SC2_TRGSTERR_MASK) >> ADC_SC2_TRGSTERR_SHIFT;
    826e:	9b03      	ldr	r3, [sp, #12]
    8270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8274:	0e1b      	lsrs	r3, r3, #24
    8276:	f003 030f 	and.w	r3, r3, #15
}
    827a:	4618      	mov	r0, r3
    827c:	b004      	add	sp, #16
    827e:	4770      	bx	lr
    8280:	00018624 	.word	0x00018624

00008284 <Adc_Ip_GetDataAddress>:
 *
 * @implements     Adc_Ip_GetDataAddress_Activity
 *END*************************************************************************/
uint32 Adc_Ip_GetDataAddress(const uint32 Instance,
                             const uint8 Index)
{
    8284:	b082      	sub	sp, #8
    8286:	9001      	str	r0, [sp, #4]
    8288:	460b      	mov	r3, r1
    828a:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    return (uint32)&(R(Adc_Ip_apxBase[Instance], Index));
    828e:	4a06      	ldr	r2, [pc, #24]	; (82a8 <Adc_Ip_GetDataAddress+0x24>)
    8290:	9b01      	ldr	r3, [sp, #4]
    8292:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    8296:	f89d 3003 	ldrb.w	r3, [sp, #3]
    829a:	3312      	adds	r3, #18
    829c:	009b      	lsls	r3, r3, #2
    829e:	4413      	add	r3, r2
}
    82a0:	4618      	mov	r0, r3
    82a2:	b002      	add	sp, #8
    82a4:	4770      	bx	lr
    82a6:	bf00      	nop
    82a8:	00018624 	.word	0x00018624

000082ac <Adc_Ip_GetChanData>:
* @implements     Adc_Ip_GetChanData_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_GetChanData(const uint32 Instance,
                                     const Adc_Ip_InputChannelType Channel,
                                     uint16 * const Result)
{
    82ac:	b088      	sub	sp, #32
    82ae:	9003      	str	r0, [sp, #12]
    82b0:	9102      	str	r1, [sp, #8]
    82b2:	9201      	str	r2, [sp, #4]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    82b4:	4a25      	ldr	r2, [pc, #148]	; (834c <Adc_Ip_GetChanData+0xa0>)
    82b6:	9b03      	ldr	r3, [sp, #12]
    82b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82bc:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    82be:	2300      	movs	r3, #0
    82c0:	9307      	str	r3, [sp, #28]
    uint16 Temp = 0u;
    82c2:	2300      	movs	r3, #0
    82c4:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 ControlChanIdx;
    boolean Found = FALSE;
    82c8:	2300      	movs	r3, #0
    82ca:	f88d 3018 	strb.w	r3, [sp, #24]

    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    82ce:	2300      	movs	r3, #0
    82d0:	f88d 3019 	strb.w	r3, [sp, #25]
    82d4:	e019      	b.n	830a <Adc_Ip_GetChanData+0x5e>
    {
        if (Adc_Ip_axState[Instance].ChannelConfig[ControlChanIdx] == Channel)
    82d6:	f89d 1019 	ldrb.w	r1, [sp, #25]
    82da:	481d      	ldr	r0, [pc, #116]	; (8350 <Adc_Ip_GetChanData+0xa4>)
    82dc:	9a03      	ldr	r2, [sp, #12]
    82de:	4613      	mov	r3, r2
    82e0:	00db      	lsls	r3, r3, #3
    82e2:	4413      	add	r3, r2
    82e4:	005b      	lsls	r3, r3, #1
    82e6:	4413      	add	r3, r2
    82e8:	440b      	add	r3, r1
    82ea:	3302      	adds	r3, #2
    82ec:	009b      	lsls	r3, r3, #2
    82ee:	4403      	add	r3, r0
    82f0:	685b      	ldr	r3, [r3, #4]
    82f2:	9a02      	ldr	r2, [sp, #8]
    82f4:	429a      	cmp	r2, r3
    82f6:	d103      	bne.n	8300 <Adc_Ip_GetChanData+0x54>
        {
            Found = TRUE;
    82f8:	2301      	movs	r3, #1
    82fa:	f88d 3018 	strb.w	r3, [sp, #24]
            break;
    82fe:	e008      	b.n	8312 <Adc_Ip_GetChanData+0x66>
    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8300:	f89d 3019 	ldrb.w	r3, [sp, #25]
    8304:	3301      	adds	r3, #1
    8306:	f88d 3019 	strb.w	r3, [sp, #25]
    830a:	f89d 3019 	ldrb.w	r3, [sp, #25]
    830e:	2b0f      	cmp	r3, #15
    8310:	d9e1      	bls.n	82d6 <Adc_Ip_GetChanData+0x2a>
        }
    }

    if (Found == TRUE)
    8312:	f89d 3018 	ldrb.w	r3, [sp, #24]
    8316:	2b00      	cmp	r3, #0
    8318:	d00e      	beq.n	8338 <Adc_Ip_GetChanData+0x8c>
    {
        Temp = (uint16) R(Base, ControlChanIdx);
    831a:	f89d 2019 	ldrb.w	r2, [sp, #25]
    831e:	9b05      	ldr	r3, [sp, #20]
    8320:	3212      	adds	r2, #18
    8322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8326:	f8ad 301a 	strh.w	r3, [sp, #26]
        Temp = (uint16) ((Temp & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    832a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    832e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8332:	f8ad 301a 	strh.w	r3, [sp, #26]
    8336:	e001      	b.n	833c <Adc_Ip_GetChanData+0x90>
    }
    else
    {
        Status = ADC_IP_STATUS_ERROR;
    8338:	2301      	movs	r3, #1
    833a:	9307      	str	r3, [sp, #28]
    }

    *Result = Temp;
    833c:	9b01      	ldr	r3, [sp, #4]
    833e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    8342:	801a      	strh	r2, [r3, #0]

    return Status;
    8344:	9b07      	ldr	r3, [sp, #28]
}
    8346:	4618      	mov	r0, r3
    8348:	b008      	add	sp, #32
    834a:	4770      	bx	lr
    834c:	00018624 	.word	0x00018624
    8350:	1fff8d00 	.word	0x1fff8d00

00008354 <Adc_Ip_IRQHandler>:
 * Note          : It's required to read result data in user notification in order to clear the COCO flags and avoid ISR getting invoked repeatedly
 *
 * @implements     Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Adc_Ip_IRQHandler(const uint32 Instance)
{
    8354:	b500      	push	{lr}
    8356:	b085      	sub	sp, #20
    8358:	9001      	str	r0, [sp, #4]
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    uint8 ControlChanIdx;
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    uint32 Sc1Reg;
    boolean ChanIntFlag = FALSE;
    835a:	2300      	movs	r3, #0
    835c:	f88d 300e 	strb.w	r3, [sp, #14]
    boolean ChanCocoFlag = FALSE;
    8360:	2300      	movs	r3, #0
    8362:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Check whether the respective driver is initialized */
    if (TRUE == Adc_Ip_axState[Instance].Init)
    8366:	4a32      	ldr	r2, [pc, #200]	; (8430 <Adc_Ip_IRQHandler+0xdc>)
    8368:	9b01      	ldr	r3, [sp, #4]
    836a:	214c      	movs	r1, #76	; 0x4c
    836c:	fb01 f303 	mul.w	r3, r1, r3
    8370:	4413      	add	r3, r2
    8372:	781b      	ldrb	r3, [r3, #0]
    8374:	2b00      	cmp	r3, #0
    8376:	d040      	beq.n	83fa <Adc_Ip_IRQHandler+0xa6>
    {
        /* Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop) */
        if (Adc_Ip_axState[Instance].ConversionCompleteNotification != NULL_PTR)
    8378:	4a2d      	ldr	r2, [pc, #180]	; (8430 <Adc_Ip_IRQHandler+0xdc>)
    837a:	9b01      	ldr	r3, [sp, #4]
    837c:	214c      	movs	r1, #76	; 0x4c
    837e:	fb01 f303 	mul.w	r3, r1, r3
    8382:	4413      	add	r3, r2
    8384:	3308      	adds	r3, #8
    8386:	681b      	ldr	r3, [r3, #0]
    8388:	2b00      	cmp	r3, #0
    838a:	d04d      	beq.n	8428 <Adc_Ip_IRQHandler+0xd4>
        {
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    838c:	2300      	movs	r3, #0
    838e:	f88d 300f 	strb.w	r3, [sp, #15]
    8392:	e02d      	b.n	83f0 <Adc_Ip_IRQHandler+0x9c>
            {
                Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8394:	4a27      	ldr	r2, [pc, #156]	; (8434 <Adc_Ip_IRQHandler+0xe0>)
    8396:	9b01      	ldr	r3, [sp, #4]
    8398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    839c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    83a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    83a4:	9302      	str	r3, [sp, #8]
                ChanIntFlag = Adc_HwAcc_GetAIEN(Sc1Reg);
    83a6:	9802      	ldr	r0, [sp, #8]
    83a8:	f7ff fa20 	bl	77ec <Adc_HwAcc_GetAIEN>
    83ac:	4603      	mov	r3, r0
    83ae:	f88d 300e 	strb.w	r3, [sp, #14]
                ChanCocoFlag = Adc_HwAcc_GetCOCO(Sc1Reg);
    83b2:	9802      	ldr	r0, [sp, #8]
    83b4:	f7ff fa28 	bl	7808 <Adc_HwAcc_GetCOCO>
    83b8:	4603      	mov	r3, r0
    83ba:	f88d 300d 	strb.w	r3, [sp, #13]
                /* CPR_RTD_00664
                 * Check if the interrupt not spurious (the interrupt is enabled and equivalent conversion has finished)
                 * Ignore spurious ones (return immediately from ISR)
                 */
                if ((TRUE == ChanIntFlag) && (TRUE == ChanCocoFlag))
    83be:	f89d 300e 	ldrb.w	r3, [sp, #14]
    83c2:	2b00      	cmp	r3, #0
    83c4:	d00f      	beq.n	83e6 <Adc_Ip_IRQHandler+0x92>
    83c6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    83ca:	2b00      	cmp	r3, #0
    83cc:	d00b      	beq.n	83e6 <Adc_Ip_IRQHandler+0x92>
                {
                    /* Call the associated callback.
                     * The COCO flag will be cleared by reading the respective result data register in the callback
                     */
                    Adc_Ip_axState[Instance].ConversionCompleteNotification(ControlChanIdx);
    83ce:	4a18      	ldr	r2, [pc, #96]	; (8430 <Adc_Ip_IRQHandler+0xdc>)
    83d0:	9b01      	ldr	r3, [sp, #4]
    83d2:	214c      	movs	r1, #76	; 0x4c
    83d4:	fb01 f303 	mul.w	r3, r1, r3
    83d8:	4413      	add	r3, r2
    83da:	3308      	adds	r3, #8
    83dc:	681b      	ldr	r3, [r3, #0]
    83de:	f89d 200f 	ldrb.w	r2, [sp, #15]
    83e2:	4610      	mov	r0, r2
    83e4:	4798      	blx	r3
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    83e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    83ea:	3301      	adds	r3, #1
    83ec:	f88d 300f 	strb.w	r3, [sp, #15]
    83f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    83f4:	2b0f      	cmp	r3, #15
    83f6:	d9cd      	bls.n	8394 <Adc_Ip_IRQHandler+0x40>
        {
            /* Do a dummy read to clear the COCO flags */
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
        }
    }
}
    83f8:	e016      	b.n	8428 <Adc_Ip_IRQHandler+0xd4>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    83fa:	2300      	movs	r3, #0
    83fc:	f88d 300f 	strb.w	r3, [sp, #15]
    8400:	e00e      	b.n	8420 <Adc_Ip_IRQHandler+0xcc>
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8402:	4a0c      	ldr	r2, [pc, #48]	; (8434 <Adc_Ip_IRQHandler+0xe0>)
    8404:	9b01      	ldr	r3, [sp, #4]
    8406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    840a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    840e:	4611      	mov	r1, r2
    8410:	4618      	mov	r0, r3
    8412:	f7ff fa07 	bl	7824 <Adc_HwAcc_GetData>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8416:	f89d 300f 	ldrb.w	r3, [sp, #15]
    841a:	3301      	adds	r3, #1
    841c:	f88d 300f 	strb.w	r3, [sp, #15]
    8420:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8424:	2b0f      	cmp	r3, #15
    8426:	d9ec      	bls.n	8402 <Adc_Ip_IRQHandler+0xae>
}
    8428:	bf00      	nop
    842a:	b005      	add	sp, #20
    842c:	f85d fb04 	ldr.w	pc, [sp], #4
    8430:	1fff8d00 	.word	0x1fff8d00
    8434:	00018624 	.word	0x00018624

00008438 <Adc_0_Isr>:
==================================================================================================*/
#define ADC_START_SEC_CODE
#include "Adc_MemMap.h"

ISR(Adc_0_Isr)
{
    8438:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(0UL);
    843a:	2000      	movs	r0, #0
    843c:	f7ff ff8a 	bl	8354 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    8440:	f3bf 8f4f 	dsb	sy
}
    8444:	bf00      	nop
    8446:	bd08      	pop	{r3, pc}

00008448 <Adc_1_Isr>:

#if (ADC_INSTANCE_COUNT > 1)
ISR(Adc_1_Isr)
{
    8448:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(1UL);
    844a:	2001      	movs	r0, #1
    844c:	f7ff ff82 	bl	8354 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    8450:	f3bf 8f4f 	dsb	sy
}
    8454:	bf00      	nop
    8456:	bd08      	pop	{r3, pc}

00008458 <Lpspi_Ip_ChannelFinished>:
* @param[in]     Instance            Index of the hardware instance.
* @param[in]     ErrorFlag           Save the status of transfer error flags
* @return void
*/
static void Lpspi_Ip_ChannelFinished(uint8 Instance, boolean ErrorFlag)
{
    8458:	b500      	push	{lr}
    845a:	b085      	sub	sp, #20
    845c:	4603      	mov	r3, r0
    845e:	460a      	mov	r2, r1
    8460:	f88d 3007 	strb.w	r3, [sp, #7]
    8464:	4613      	mov	r3, r2
    8466:	f88d 3006 	strb.w	r3, [sp, #6]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    846a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    846e:	4a12      	ldr	r2, [pc, #72]	; (84b8 <Lpspi_Ip_ChannelFinished+0x60>)
    8470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8474:	9302      	str	r3, [sp, #8]
    Lpspi_Ip_EventType EventState = LPSPI_IP_EVENT_FAULT;
    8476:	2301      	movs	r3, #1
    8478:	9303      	str	r3, [sp, #12]
    
    if(TRUE == ErrorFlag)
    847a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    847e:	2b00      	cmp	r3, #0
    8480:	d005      	beq.n	848e <Lpspi_Ip_ChannelFinished+0x36>
    {
        State->Status = LPSPI_IP_FAULT;
    8482:	9b02      	ldr	r3, [sp, #8]
    8484:	2203      	movs	r2, #3
    8486:	605a      	str	r2, [r3, #4]
        EventState = LPSPI_IP_EVENT_FAULT;
    8488:	2301      	movs	r3, #1
    848a:	9303      	str	r3, [sp, #12]
    848c:	e004      	b.n	8498 <Lpspi_Ip_ChannelFinished+0x40>
    }
    else
    {
        State->Status = LPSPI_IP_IDLE;
    848e:	9b02      	ldr	r3, [sp, #8]
    8490:	2201      	movs	r2, #1
    8492:	605a      	str	r2, [r3, #4]
        EventState = LPSPI_IP_EVENT_END_TRANSFER;
    8494:	2300      	movs	r3, #0
    8496:	9303      	str	r3, [sp, #12]
    }

    if (NULL_PTR != State->Callback)
    8498:	9b02      	ldr	r3, [sp, #8]
    849a:	691b      	ldr	r3, [r3, #16]
    849c:	2b00      	cmp	r3, #0
    849e:	d006      	beq.n	84ae <Lpspi_Ip_ChannelFinished+0x56>
    {
        State->Callback(Instance, EventState);
    84a0:	9b02      	ldr	r3, [sp, #8]
    84a2:	691b      	ldr	r3, [r3, #16]
    84a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    84a8:	9903      	ldr	r1, [sp, #12]
    84aa:	4610      	mov	r0, r2
    84ac:	4798      	blx	r3
    }
}
    84ae:	bf00      	nop
    84b0:	b005      	add	sp, #20
    84b2:	f85d fb04 	ldr.w	pc, [sp], #4
    84b6:	bf00      	nop
    84b8:	1fff8dd8 	.word	0x1fff8dd8

000084bc <Lpspi_Ip_TransferProcess>:
*
* @param[in]     Instance      Index of the hardware instance.
* @return void
*/
static void Lpspi_Ip_TransferProcess(uint8 Instance)
{
    84bc:	b510      	push	{r4, lr}
    84be:	b092      	sub	sp, #72	; 0x48
    84c0:	4603      	mov	r3, r0
    84c2:	f88d 300f 	strb.w	r3, [sp, #15]
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    84c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    84ca:	4aad      	ldr	r2, [pc, #692]	; (8780 <Lpspi_Ip_TransferProcess+0x2c4>)
    84cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84d0:	9310      	str	r3, [sp, #64]	; 0x40
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    84d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    84d6:	4aab      	ldr	r2, [pc, #684]	; (8784 <Lpspi_Ip_TransferProcess+0x2c8>)
    84d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84dc:	930f      	str	r3, [sp, #60]	; 0x3c
    uint32 SrStatusRegister;
    uint8 NumberOfWrites = 0u;
    84de:	2300      	movs	r3, #0
    84e0:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    uint8 NumberOfReads = 0u;
    84e4:	2300      	movs	r3, #0
    84e6:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    boolean ErrorFlag = FALSE;
    84ea:	2300      	movs	r3, #0
    84ec:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45

    if (LPSPI_IP_BUSY == State->Status)
    84f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    84f2:	685b      	ldr	r3, [r3, #4]
    84f4:	2b02      	cmp	r3, #2
    84f6:	f040 821e 	bne.w	8936 <Lpspi_Ip_TransferProcess+0x47a>
    {
        /* Read Status and clear all flags. */
        SrStatusRegister = Base->SR;
    84fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    84fc:	695b      	ldr	r3, [r3, #20]
    84fe:	930e      	str	r3, [sp, #56]	; 0x38
        Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    8500:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8502:	695b      	ldr	r3, [r3, #20]
    8504:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    8508:	9b10      	ldr	r3, [sp, #64]	; 0x40
    850a:	615a      	str	r2, [r3, #20]
        
        if ((SrStatusRegister & (LPSPI_SR_REF_MASK | LPSPI_SR_TEF_MASK)) != 0u)
    850c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    850e:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
    8512:	2b00      	cmp	r3, #0
    8514:	d003      	beq.n	851e <Lpspi_Ip_TransferProcess+0x62>
        {
            /* mark error flag */
            ErrorFlag = TRUE;
    8516:	2301      	movs	r3, #1
    8518:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    851c:	e1f6      	b.n	890c <Lpspi_Ip_TransferProcess+0x450>
        }
        else
        {
            /* RECEIVE */
            /* Read all Data available in receive HW fifo. */
            NumberOfReads = (uint8)(((Base->FSR) & LPSPI_FSR_RXCOUNT_MASK) >> LPSPI_FSR_RXCOUNT_SHIFT);
    851e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    8522:	0c1b      	lsrs	r3, r3, #16
    8524:	b2db      	uxtb	r3, r3
    8526:	f003 0307 	and.w	r3, r3, #7
    852a:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
            if (NumberOfReads != 0u)
    852e:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    8532:	2b00      	cmp	r3, #0
    8534:	f000 80cb 	beq.w	86ce <Lpspi_Ip_TransferProcess+0x212>
            {
                if (NumberOfReads > (State->ExpectedFifoReads - State->RxIndex))
    8538:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
    853c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    853e:	8b1b      	ldrh	r3, [r3, #24]
    8540:	4619      	mov	r1, r3
    8542:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8544:	8a9b      	ldrh	r3, [r3, #20]
    8546:	1acb      	subs	r3, r1, r3
    8548:	429a      	cmp	r2, r3
    854a:	dd08      	ble.n	855e <Lpspi_Ip_TransferProcess+0xa2>
                {
                    NumberOfReads = (uint8)(State->ExpectedFifoReads - State->RxIndex);
    854c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    854e:	8b1b      	ldrh	r3, [r3, #24]
    8550:	b2da      	uxtb	r2, r3
    8552:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8554:	8a9b      	ldrh	r3, [r3, #20]
    8556:	b2db      	uxtb	r3, r3
    8558:	1ad3      	subs	r3, r2, r3
    855a:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
                }
                /* If these are the first frames of this channel. Current TXFIFO slot must be plus 1 because the slot of CMD have moved out and
                  CurrentTxFifoSlot was minus 1 when prepare TX channel */
                if (0u == State->RxIndex)
    855e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8560:	8a9b      	ldrh	r3, [r3, #20]
    8562:	2b00      	cmp	r3, #0
    8564:	d107      	bne.n	8576 <Lpspi_Ip_TransferProcess+0xba>
                {
                    State->CurrentTxFifoSlot += 1u;
    8566:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    856c:	3301      	adds	r3, #1
    856e:	b2da      	uxtb	r2, r3
    8570:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    8576:	f89d 300f 	ldrb.w	r3, [sp, #15]
    857a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    857e:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    8582:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    const LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    8586:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    858a:	4a7d      	ldr	r2, [pc, #500]	; (8780 <Lpspi_Ip_TransferProcess+0x2c4>)
    858c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8590:	930c      	str	r3, [sp, #48]	; 0x30
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    8592:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    8596:	4a7b      	ldr	r2, [pc, #492]	; (8784 <Lpspi_Ip_TransferProcess+0x2c8>)
    8598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    859c:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 Data = 0u;
    859e:	2300      	movs	r3, #0
    85a0:	930a      	str	r3, [sp, #40]	; 0x28
    uint8 Index = 0u;
    85a2:	2300      	movs	r3, #0
    85a4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    if (NULL_PTR != State->RxBuffer)
    85a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    85aa:	689b      	ldr	r3, [r3, #8]
    85ac:	2b00      	cmp	r3, #0
    85ae:	d069      	beq.n	8684 <Lpspi_Ip_TransferProcess+0x1c8>
        if (State->ExternalDevice->DeviceParams->FrameSize < 9u)
    85b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    85b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    85b4:	68db      	ldr	r3, [r3, #12]
    85b6:	881b      	ldrh	r3, [r3, #0]
    85b8:	2b08      	cmp	r3, #8
    85ba:	d81e      	bhi.n	85fa <Lpspi_Ip_TransferProcess+0x13e>
            for (Index = 0; Index < NumberOfReads; Index++)
    85bc:	2300      	movs	r3, #0
    85be:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    85c2:	e013      	b.n	85ec <Lpspi_Ip_TransferProcess+0x130>
                Data = Base->RDR;
    85c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    85c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    85c8:	930a      	str	r3, [sp, #40]	; 0x28
                *((uint8*)(&State->RxBuffer[State->RxIndex + Index])) = (uint8)Data;
    85ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    85cc:	689b      	ldr	r3, [r3, #8]
    85ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    85d0:	8a92      	ldrh	r2, [r2, #20]
    85d2:	4611      	mov	r1, r2
    85d4:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    85d8:	440a      	add	r2, r1
    85da:	4413      	add	r3, r2
    85dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    85de:	b2d2      	uxtb	r2, r2
    85e0:	701a      	strb	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    85e2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    85e6:	3301      	adds	r3, #1
    85e8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    85ec:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    85f0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    85f4:	429a      	cmp	r2, r3
    85f6:	d8e5      	bhi.n	85c4 <Lpspi_Ip_TransferProcess+0x108>
    85f8:	e055      	b.n	86a6 <Lpspi_Ip_TransferProcess+0x1ea>
        else if (State->ExternalDevice->DeviceParams->FrameSize < 17u)
    85fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    85fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    85fe:	68db      	ldr	r3, [r3, #12]
    8600:	881b      	ldrh	r3, [r3, #0]
    8602:	2b10      	cmp	r3, #16
    8604:	d81f      	bhi.n	8646 <Lpspi_Ip_TransferProcess+0x18a>
            for (Index = 0; Index < NumberOfReads; Index++)
    8606:	2300      	movs	r3, #0
    8608:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    860c:	e014      	b.n	8638 <Lpspi_Ip_TransferProcess+0x17c>
                Data = Base->RDR;
    860e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8612:	930a      	str	r3, [sp, #40]	; 0x28
                *((uint16*)(&State->RxBuffer[2u * (State->RxIndex + Index)])) = (uint16)Data;
    8614:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8616:	689a      	ldr	r2, [r3, #8]
    8618:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    861a:	8a9b      	ldrh	r3, [r3, #20]
    861c:	4619      	mov	r1, r3
    861e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8622:	440b      	add	r3, r1
    8624:	005b      	lsls	r3, r3, #1
    8626:	4413      	add	r3, r2
    8628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    862a:	b292      	uxth	r2, r2
    862c:	801a      	strh	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    862e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8632:	3301      	adds	r3, #1
    8634:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    8638:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    863c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8640:	429a      	cmp	r2, r3
    8642:	d8e4      	bhi.n	860e <Lpspi_Ip_TransferProcess+0x152>
    8644:	e02f      	b.n	86a6 <Lpspi_Ip_TransferProcess+0x1ea>
            for (Index = 0; Index < NumberOfReads; Index++)
    8646:	2300      	movs	r3, #0
    8648:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    864c:	e013      	b.n	8676 <Lpspi_Ip_TransferProcess+0x1ba>
                Data = Base->RDR;
    864e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8652:	930a      	str	r3, [sp, #40]	; 0x28
                *((uint32*)(&State->RxBuffer[4u * (State->RxIndex + Index)])) = (uint32)Data;
    8654:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8656:	689a      	ldr	r2, [r3, #8]
    8658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    865a:	8a9b      	ldrh	r3, [r3, #20]
    865c:	4619      	mov	r1, r3
    865e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8662:	440b      	add	r3, r1
    8664:	009b      	lsls	r3, r3, #2
    8666:	4413      	add	r3, r2
    8668:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    866a:	601a      	str	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    866c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8670:	3301      	adds	r3, #1
    8672:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    8676:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    867a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    867e:	429a      	cmp	r2, r3
    8680:	d8e5      	bhi.n	864e <Lpspi_Ip_TransferProcess+0x192>
    8682:	e010      	b.n	86a6 <Lpspi_Ip_TransferProcess+0x1ea>
        for (Index = 0; Index < NumberOfReads; Index++)
    8684:	2300      	movs	r3, #0
    8686:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    868a:	e006      	b.n	869a <Lpspi_Ip_TransferProcess+0x1de>
            (void)Base->RDR;
    868c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    868e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        for (Index = 0; Index < NumberOfReads; Index++)
    8690:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8694:	3301      	adds	r3, #1
    8696:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    869a:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    869e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    86a2:	429a      	cmp	r2, r3
    86a4:	d8f2      	bhi.n	868c <Lpspi_Ip_TransferProcess+0x1d0>
    State->RxIndex += NumberOfReads;
    86a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    86a8:	8a9a      	ldrh	r2, [r3, #20]
    86aa:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    86ae:	b29b      	uxth	r3, r3
    86b0:	4413      	add	r3, r2
    86b2:	b29a      	uxth	r2, r3
    86b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    86b6:	829a      	strh	r2, [r3, #20]
}
    86b8:	bf00      	nop
                }
                /* Read Data from RX FIFO */
                Lpspi_Ip_ReadDataFromFifo(Instance, NumberOfReads);
                /* Update current FIFO slots are available to fill .*/
                State->CurrentTxFifoSlot += NumberOfReads;
    86ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    86bc:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    86c0:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    86c4:	4413      	add	r3, r2
    86c6:	b2da      	uxtb	r2, r3
    86c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    86ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            to fill TX FIFO. At that time, another interrupt occurred and preemptive current interrupt, and the time to process that interrupt is longer than the time to transfer all frames 
            in TX FIFO. So TX FIFO will be empty and some frames received in RX FIFO, then the program is returned from that interrupt and fill TX FIFO until full and exist SPI interrupt function. 
            And if there is a interrupt occurred with higher priority of SPI interrupt and the time to process that interrupt is longer than the time to transfer all frames in TX FIFO. 
            So, RX FIFO can be overflow due to SPI interrupt function is not serviced to read RX FIFO.
            State->CurrentTxFifoSlot variable is used to hanlde number of frames are "on bus transfer". They are always less than FIFO size */
            if((State->CurrentTxFifoSlot != 0u) && (State->TxDoneFlag != TRUE))
    86ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    86d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    86d4:	2b00      	cmp	r3, #0
    86d6:	f000 8119 	beq.w	890c <Lpspi_Ip_TransferProcess+0x450>
    86da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    86dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    86e0:	f083 0301 	eor.w	r3, r3, #1
    86e4:	b2db      	uxtb	r3, r3
    86e6:	2b00      	cmp	r3, #0
    86e8:	f000 8110 	beq.w	890c <Lpspi_Ip_TransferProcess+0x450>
            {
                if(State->ExpectedFifoWrites != State->TxIndex)
    86ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    86ee:	8b5a      	ldrh	r2, [r3, #26]
    86f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    86f2:	8adb      	ldrh	r3, [r3, #22]
    86f4:	429a      	cmp	r2, r3
    86f6:	f000 80ca 	beq.w	888e <Lpspi_Ip_TransferProcess+0x3d2>
                {
                    NumberOfWrites = State->CurrentTxFifoSlot;
    86fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    86fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8700:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
                    /* Limits to remaining frames. */
                    if (NumberOfWrites > (State->ExpectedFifoWrites - State->TxIndex))
    8704:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
    8708:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    870a:	8b5b      	ldrh	r3, [r3, #26]
    870c:	4619      	mov	r1, r3
    870e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8710:	8adb      	ldrh	r3, [r3, #22]
    8712:	1acb      	subs	r3, r1, r3
    8714:	429a      	cmp	r2, r3
    8716:	dd08      	ble.n	872a <Lpspi_Ip_TransferProcess+0x26e>
                    {
                        NumberOfWrites = (uint8)(State->ExpectedFifoWrites - State->TxIndex);
    8718:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    871a:	8b5b      	ldrh	r3, [r3, #26]
    871c:	b2da      	uxtb	r2, r3
    871e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8720:	8adb      	ldrh	r3, [r3, #22]
    8722:	b2db      	uxtb	r3, r3
    8724:	1ad3      	subs	r3, r2, r3
    8726:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    872a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    872e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    8732:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    8736:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    873a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    873e:	4a10      	ldr	r2, [pc, #64]	; (8780 <Lpspi_Ip_TransferProcess+0x2c4>)
    8740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8744:	9308      	str	r3, [sp, #32]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    8746:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    874a:	4a0e      	ldr	r2, [pc, #56]	; (8784 <Lpspi_Ip_TransferProcess+0x2c8>)
    874c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8750:	9307      	str	r3, [sp, #28]
    uint32 Data = 0u;
    8752:	2300      	movs	r3, #0
    8754:	9306      	str	r3, [sp, #24]
    uint8 Index = 0u;
    8756:	2300      	movs	r3, #0
    8758:	f88d 3017 	strb.w	r3, [sp, #23]
    Data = State->ExternalDevice->DeviceParams->DefaultData;
    875c:	9b07      	ldr	r3, [sp, #28]
    875e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8760:	68db      	ldr	r3, [r3, #12]
    8762:	685b      	ldr	r3, [r3, #4]
    8764:	9306      	str	r3, [sp, #24]
    if (NULL_PTR != State->TxBuffer)
    8766:	9b07      	ldr	r3, [sp, #28]
    8768:	68db      	ldr	r3, [r3, #12]
    876a:	2b00      	cmp	r3, #0
    876c:	d068      	beq.n	8840 <Lpspi_Ip_TransferProcess+0x384>
        if (State->TxFrameSize < 9u)
    876e:	9b07      	ldr	r3, [sp, #28]
    8770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8772:	2b08      	cmp	r3, #8
    8774:	d822      	bhi.n	87bc <Lpspi_Ip_TransferProcess+0x300>
            for (Index = 0; Index < NumberOfWrites; Index++)
    8776:	2300      	movs	r3, #0
    8778:	f88d 3017 	strb.w	r3, [sp, #23]
    877c:	e017      	b.n	87ae <Lpspi_Ip_TransferProcess+0x2f2>
    877e:	bf00      	nop
    8780:	0001862c 	.word	0x0001862c
    8784:	1fff8dd8 	.word	0x1fff8dd8
                Data = *((const uint8*)(&State->TxBuffer[State->TxIndex + Index]));
    8788:	9b07      	ldr	r3, [sp, #28]
    878a:	68db      	ldr	r3, [r3, #12]
    878c:	9a07      	ldr	r2, [sp, #28]
    878e:	8ad2      	ldrh	r2, [r2, #22]
    8790:	4611      	mov	r1, r2
    8792:	f89d 2017 	ldrb.w	r2, [sp, #23]
    8796:	440a      	add	r2, r1
    8798:	4413      	add	r3, r2
    879a:	781b      	ldrb	r3, [r3, #0]
    879c:	9306      	str	r3, [sp, #24]
                Base->TDR = Data;
    879e:	9b08      	ldr	r3, [sp, #32]
    87a0:	9a06      	ldr	r2, [sp, #24]
    87a2:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    87a4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    87a8:	3301      	adds	r3, #1
    87aa:	f88d 3017 	strb.w	r3, [sp, #23]
    87ae:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    87b2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    87b6:	429a      	cmp	r2, r3
    87b8:	d8e6      	bhi.n	8788 <Lpspi_Ip_TransferProcess+0x2cc>
    87ba:	e053      	b.n	8864 <Lpspi_Ip_TransferProcess+0x3a8>
        else if (State->TxFrameSize < 17u)
    87bc:	9b07      	ldr	r3, [sp, #28]
    87be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    87c0:	2b10      	cmp	r3, #16
    87c2:	d81e      	bhi.n	8802 <Lpspi_Ip_TransferProcess+0x346>
            for (Index = 0; Index < NumberOfWrites; Index++)
    87c4:	2300      	movs	r3, #0
    87c6:	f88d 3017 	strb.w	r3, [sp, #23]
    87ca:	e013      	b.n	87f4 <Lpspi_Ip_TransferProcess+0x338>
                Data = *((const uint16*)(&State->TxBuffer[2u * (State->TxIndex + Index)]));
    87cc:	9b07      	ldr	r3, [sp, #28]
    87ce:	68da      	ldr	r2, [r3, #12]
    87d0:	9b07      	ldr	r3, [sp, #28]
    87d2:	8adb      	ldrh	r3, [r3, #22]
    87d4:	4619      	mov	r1, r3
    87d6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    87da:	440b      	add	r3, r1
    87dc:	005b      	lsls	r3, r3, #1
    87de:	4413      	add	r3, r2
    87e0:	881b      	ldrh	r3, [r3, #0]
    87e2:	9306      	str	r3, [sp, #24]
                Base->TDR = Data;
    87e4:	9b08      	ldr	r3, [sp, #32]
    87e6:	9a06      	ldr	r2, [sp, #24]
    87e8:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    87ea:	f89d 3017 	ldrb.w	r3, [sp, #23]
    87ee:	3301      	adds	r3, #1
    87f0:	f88d 3017 	strb.w	r3, [sp, #23]
    87f4:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    87f8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    87fc:	429a      	cmp	r2, r3
    87fe:	d8e5      	bhi.n	87cc <Lpspi_Ip_TransferProcess+0x310>
    8800:	e030      	b.n	8864 <Lpspi_Ip_TransferProcess+0x3a8>
            for (Index = 0; Index < NumberOfWrites; Index++)
    8802:	2300      	movs	r3, #0
    8804:	f88d 3017 	strb.w	r3, [sp, #23]
    8808:	e013      	b.n	8832 <Lpspi_Ip_TransferProcess+0x376>
                Data = *((const uint32*)(&State->TxBuffer[4u * (State->TxIndex + Index)]));
    880a:	9b07      	ldr	r3, [sp, #28]
    880c:	68da      	ldr	r2, [r3, #12]
    880e:	9b07      	ldr	r3, [sp, #28]
    8810:	8adb      	ldrh	r3, [r3, #22]
    8812:	4619      	mov	r1, r3
    8814:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8818:	440b      	add	r3, r1
    881a:	009b      	lsls	r3, r3, #2
    881c:	4413      	add	r3, r2
    881e:	681b      	ldr	r3, [r3, #0]
    8820:	9306      	str	r3, [sp, #24]
                Base->TDR = Data;
    8822:	9b08      	ldr	r3, [sp, #32]
    8824:	9a06      	ldr	r2, [sp, #24]
    8826:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    8828:	f89d 3017 	ldrb.w	r3, [sp, #23]
    882c:	3301      	adds	r3, #1
    882e:	f88d 3017 	strb.w	r3, [sp, #23]
    8832:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    8836:	f89d 3017 	ldrb.w	r3, [sp, #23]
    883a:	429a      	cmp	r2, r3
    883c:	d8e5      	bhi.n	880a <Lpspi_Ip_TransferProcess+0x34e>
    883e:	e011      	b.n	8864 <Lpspi_Ip_TransferProcess+0x3a8>
        for (Index = 0; Index < NumberOfWrites; Index++)
    8840:	2300      	movs	r3, #0
    8842:	f88d 3017 	strb.w	r3, [sp, #23]
    8846:	e007      	b.n	8858 <Lpspi_Ip_TransferProcess+0x39c>
            Base->TDR = Data;
    8848:	9b08      	ldr	r3, [sp, #32]
    884a:	9a06      	ldr	r2, [sp, #24]
    884c:	665a      	str	r2, [r3, #100]	; 0x64
        for (Index = 0; Index < NumberOfWrites; Index++)
    884e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8852:	3301      	adds	r3, #1
    8854:	f88d 3017 	strb.w	r3, [sp, #23]
    8858:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    885c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8860:	429a      	cmp	r2, r3
    8862:	d8f1      	bhi.n	8848 <Lpspi_Ip_TransferProcess+0x38c>
    State->TxIndex += NumberOfWrites;
    8864:	9b07      	ldr	r3, [sp, #28]
    8866:	8ada      	ldrh	r2, [r3, #22]
    8868:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    886c:	b29b      	uxth	r3, r3
    886e:	4413      	add	r3, r2
    8870:	b29a      	uxth	r2, r3
    8872:	9b07      	ldr	r3, [sp, #28]
    8874:	82da      	strh	r2, [r3, #22]
}
    8876:	bf00      	nop
                    }
                    /* Push Data into TX FIFO */
                    Lpspi_Ip_PushDataToFifo(Instance, NumberOfWrites);
                    State->CurrentTxFifoSlot -= NumberOfWrites;
    8878:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    887a:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    887e:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    8882:	1ad3      	subs	r3, r2, r3
    8884:	b2da      	uxtb	r2, r3
    8886:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    888c:	e03e      	b.n	890c <Lpspi_Ip_TransferProcess+0x450>
                }
                else
                {
                    if(TRUE == State->NextTransferConfigAvailable)
    888e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8890:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    8894:	2b00      	cmp	r3, #0
    8896:	d01c      	beq.n	88d2 <Lpspi_Ip_TransferProcess+0x416>
                    {
                        /* Initialize next transfer */
                        State->ExternalDevice->DeviceParams->DefaultData = State->DefaultDataNext;
    8898:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    889a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    889c:	68db      	ldr	r3, [r3, #12]
    889e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    88a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
    88a2:	605a      	str	r2, [r3, #4]
                        State->FirstCmd = FALSE;
    88a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    88a6:	2200      	movs	r2, #0
    88a8:	775a      	strb	r2, [r3, #29]
                        Lpspi_TransmitTxInit(Instance, State->TxBufferNext, State->FrameSizeNext, State->LsbNext, State->LengthNext);
    88aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    88ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    88ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    88b0:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    88b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    88b4:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
    88b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    88ba:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    88bc:	f89d 000f 	ldrb.w	r0, [sp, #15]
    88c0:	9300      	str	r3, [sp, #0]
    88c2:	4623      	mov	r3, r4
    88c4:	f000 fb7a 	bl	8fbc <Lpspi_TransmitTxInit>
                        State->NextTransferConfigAvailable = FALSE;
    88c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    88ca:	2200      	movs	r2, #0
    88cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    88d0:	e01c      	b.n	890c <Lpspi_Ip_TransferProcess+0x450>
                    }
                    else
                    {
                        State->TxDoneFlag = TRUE;
    88d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    88d4:	2201      	movs	r2, #1
    88d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                        /* Disable TX interrupt */
                        Base->IER &= ~LPSPI_IER_TDIE_MASK;
    88da:	9b10      	ldr	r3, [sp, #64]	; 0x40
    88dc:	699b      	ldr	r3, [r3, #24]
    88de:	f023 0201 	bic.w	r2, r3, #1
    88e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    88e4:	619a      	str	r2, [r3, #24]
                        if((FALSE == State->KeepCs) && (0u != (Base->TCR & LPSPI_TCR_CONT_MASK)))
    88e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    88e8:	7f1b      	ldrb	r3, [r3, #28]
    88ea:	f083 0301 	eor.w	r3, r3, #1
    88ee:	b2db      	uxtb	r3, r3
    88f0:	2b00      	cmp	r3, #0
    88f2:	d00b      	beq.n	890c <Lpspi_Ip_TransferProcess+0x450>
    88f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    88f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    88f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    88fc:	2b00      	cmp	r3, #0
    88fe:	d005      	beq.n	890c <Lpspi_Ip_TransferProcess+0x450>
                        {
                            /* Clear CS */
                            Base->TCR &= ~(LPSPI_TCR_CONT_MASK | LPSPI_TCR_CONTC_MASK);
    8900:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    8904:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
    8908:	9b10      	ldr	r3, [sp, #64]	; 0x40
    890a:	661a      	str	r2, [r3, #96]	; 0x60
                }
            }
        }
        
        /* End of transfer */
        if((State->RxIndex == State->ExpectedFifoReads) || (TRUE == ErrorFlag))
    890c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    890e:	8a9a      	ldrh	r2, [r3, #20]
    8910:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8912:	8b1b      	ldrh	r3, [r3, #24]
    8914:	429a      	cmp	r2, r3
    8916:	d003      	beq.n	8920 <Lpspi_Ip_TransferProcess+0x464>
    8918:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
    891c:	2b00      	cmp	r3, #0
    891e:	d00a      	beq.n	8936 <Lpspi_Ip_TransferProcess+0x47a>
                Base->TCR |= LPSPI_TCR_RXMSK(1);
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12();
            }
            #endif
            /* Disable interrupts */
            Base->IER = 0u;
    8920:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8922:	2200      	movs	r2, #0
    8924:	619a      	str	r2, [r3, #24]
            Lpspi_Ip_ChannelFinished(Instance, ErrorFlag);
    8926:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
    892a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    892e:	4611      	mov	r1, r2
    8930:	4618      	mov	r0, r3
    8932:	f7ff fd91 	bl	8458 <Lpspi_Ip_ChannelFinished>
        }
    }
}
    8936:	bf00      	nop
    8938:	b012      	add	sp, #72	; 0x48
    893a:	bd10      	pop	{r4, pc}

0000893c <Lpspi_Ip_Init>:
    OsIf_Trusted_Call1param(Lpspi_Ip_SetUserAccess, Instance);
}
#endif /* LPSPI_IP_ENABLE_USER_MODE_SUPPORT */
/*================================================================================================*/
Lpspi_Ip_StatusType Lpspi_Ip_Init(const Lpspi_Ip_ConfigType *PhyUnitConfigPtr)
{
    893c:	b500      	push	{lr}
    893e:	b087      	sub	sp, #28
    8940:	9001      	str	r0, [sp, #4]
    LPSPI_Type* Base;
    Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    8942:	2300      	movs	r3, #0
    8944:	9305      	str	r3, [sp, #20]
    uint8 Instance = 0u;
    8946:	2300      	movs	r3, #0
    8948:	f88d 3013 	strb.w	r3, [sp, #19]

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(PhyUnitConfigPtr != NULL_PTR);
    #endif
    Instance = PhyUnitConfigPtr->Instance;
    894c:	9b01      	ldr	r3, [sp, #4]
    894e:	781b      	ldrb	r3, [r3, #0]
    8950:	f88d 3013 	strb.w	r3, [sp, #19]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    8954:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8958:	4a23      	ldr	r2, [pc, #140]	; (89e8 <Lpspi_Ip_Init+0xac>)
    895a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    895e:	9303      	str	r3, [sp, #12]
    Base = Lpspi_Ip_apxBases[Instance];
    8960:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8964:	4a21      	ldr	r2, [pc, #132]	; (89ec <Lpspi_Ip_Init+0xb0>)
    8966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    896a:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(State == NULL_PTR);
    #endif
    Lpspi_Ip_apxStateStructureArray[Instance] = &Lpspi_Ip_axStateStructure[PhyUnitConfigPtr->StateIndex];
    896c:	9b01      	ldr	r3, [sp, #4]
    896e:	7c1b      	ldrb	r3, [r3, #16]
    8970:	461a      	mov	r2, r3
    8972:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8976:	0192      	lsls	r2, r2, #6
    8978:	491d      	ldr	r1, [pc, #116]	; (89f0 <Lpspi_Ip_Init+0xb4>)
    897a:	440a      	add	r2, r1
    897c:	491a      	ldr	r1, [pc, #104]	; (89e8 <Lpspi_Ip_Init+0xac>)
    897e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    8982:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8986:	4a18      	ldr	r2, [pc, #96]	; (89e8 <Lpspi_Ip_Init+0xac>)
    8988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    898c:	9303      	str	r3, [sp, #12]
    State->PhyUnitConfig = PhyUnitConfigPtr;
    898e:	9b03      	ldr	r3, [sp, #12]
    8990:	9a01      	ldr	r2, [sp, #4]
    8992:	621a      	str	r2, [r3, #32]
    /* enable in debug mode to ensure CS will be kept when CPU halts at breakpoint */
    Base->CR = PhyUnitConfigPtr->Cr | LPSPI_CR_DBGEN_MASK;
    8994:	9b01      	ldr	r3, [sp, #4]
    8996:	685b      	ldr	r3, [r3, #4]
    8998:	f043 0208 	orr.w	r2, r3, #8
    899c:	9b02      	ldr	r3, [sp, #8]
    899e:	611a      	str	r2, [r3, #16]
    Base->CFGR1 = PhyUnitConfigPtr->Cfgr1;
    89a0:	9b01      	ldr	r3, [sp, #4]
    89a2:	689a      	ldr	r2, [r3, #8]
    89a4:	9b02      	ldr	r3, [sp, #8]
    89a6:	625a      	str	r2, [r3, #36]	; 0x24
    /* Set TX WATER. it will be set again in DMA mode */
    Base->FCR = LPSPI_FCR_TXWATER((uint32)LPSPI_IP_FIFO_SIZE_U8 - (uint32)1u);
    89a8:	9b02      	ldr	r3, [sp, #8]
    89aa:	2203      	movs	r2, #3
    89ac:	659a      	str	r2, [r3, #88]	; 0x58
    #if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
    State->ClockMode = LPSPI_IP_NORMAL_CLOCK;
    #endif
    State->KeepCs = FALSE;
    89ae:	9b03      	ldr	r3, [sp, #12]
    89b0:	2200      	movs	r2, #0
    89b2:	771a      	strb	r2, [r3, #28]
    State->FirstCmd = TRUE;
    89b4:	9b03      	ldr	r3, [sp, #12]
    89b6:	2201      	movs	r2, #1
    89b8:	775a      	strb	r2, [r3, #29]
    #if ((STD_ON == LPSPI_IP_DMA_USED) && (STD_ON == LPSPI_IP_ENABLE_DMAFASTTRANSFER_SUPPORT))
    Lpspi_Ip_TxDmaTcdSGInit(Instance);
    Lpspi_Ip_RxDmaTcdSGInit(Instance);
    #endif
    /* set State to idle */
    State->Status = LPSPI_IP_IDLE;
    89ba:	9b03      	ldr	r3, [sp, #12]
    89bc:	2201      	movs	r2, #1
    89be:	605a      	str	r2, [r3, #4]
    (void)Lpspi_Ip_UpdateTransferMode(Instance, PhyUnitConfigPtr->TransferMode);
    89c0:	9b01      	ldr	r3, [sp, #4]
    89c2:	68da      	ldr	r2, [r3, #12]
    89c4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    89c8:	4611      	mov	r1, r2
    89ca:	4618      	mov	r0, r3
    89cc:	f000 fd10 	bl	93f0 <Lpspi_Ip_UpdateTransferMode>
    
    /* Enable SPI module */
    Base->CR |= LPSPI_CR_MEN_MASK;
    89d0:	9b02      	ldr	r3, [sp, #8]
    89d2:	691b      	ldr	r3, [r3, #16]
    89d4:	f043 0201 	orr.w	r2, r3, #1
    89d8:	9b02      	ldr	r3, [sp, #8]
    89da:	611a      	str	r2, [r3, #16]
    return Status;
    89dc:	9b05      	ldr	r3, [sp, #20]
}
    89de:	4618      	mov	r0, r3
    89e0:	b007      	add	sp, #28
    89e2:	f85d fb04 	ldr.w	pc, [sp], #4
    89e6:	bf00      	nop
    89e8:	1fff8dd8 	.word	0x1fff8dd8
    89ec:	0001862c 	.word	0x0001862c
    89f0:	1fff8d98 	.word	0x1fff8d98

000089f4 <Lpspi_Ip_DeInit>:
/*================================================================================================*/
Lpspi_Ip_StatusType Lpspi_Ip_DeInit(uint8 Instance)
{
    89f4:	b086      	sub	sp, #24
    89f6:	4603      	mov	r3, r0
    89f8:	f88d 3007 	strb.w	r3, [sp, #7]
    LPSPI_Type* Base;
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    89fc:	2300      	movs	r3, #0
    89fe:	9305      	str	r3, [sp, #20]

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    Base = Lpspi_Ip_apxBases[Instance];
    8a00:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8a04:	4a11      	ldr	r2, [pc, #68]	; (8a4c <Lpspi_Ip_DeInit+0x58>)
    8a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a0a:	9304      	str	r3, [sp, #16]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    8a0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8a10:	4a0f      	ldr	r2, [pc, #60]	; (8a50 <Lpspi_Ip_DeInit+0x5c>)
    8a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a16:	9303      	str	r3, [sp, #12]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    if (LPSPI_IP_BUSY == State->Status)
    8a18:	9b03      	ldr	r3, [sp, #12]
    8a1a:	685b      	ldr	r3, [r3, #4]
    8a1c:	2b02      	cmp	r3, #2
    8a1e:	d102      	bne.n	8a26 <Lpspi_Ip_DeInit+0x32>
    {
        Status = LPSPI_IP_STATUS_FAIL;
    8a20:	2301      	movs	r3, #1
    8a22:	9305      	str	r3, [sp, #20]
    8a24:	e00e      	b.n	8a44 <Lpspi_Ip_DeInit+0x50>
    }
    else
    {
        /* Use reset hardware feature. */
        Base->CR |= LPSPI_CR_RST(1u);
    8a26:	9b04      	ldr	r3, [sp, #16]
    8a28:	691b      	ldr	r3, [r3, #16]
    8a2a:	f043 0202 	orr.w	r2, r3, #2
    8a2e:	9b04      	ldr	r3, [sp, #16]
    8a30:	611a      	str	r2, [r3, #16]
        Base->CR = 0;
    8a32:	9b04      	ldr	r3, [sp, #16]
    8a34:	2200      	movs	r2, #0
    8a36:	611a      	str	r2, [r3, #16]

        Lpspi_Ip_apxStateStructureArray[Instance] = NULL_PTR;
    8a38:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8a3c:	4a04      	ldr	r2, [pc, #16]	; (8a50 <Lpspi_Ip_DeInit+0x5c>)
    8a3e:	2100      	movs	r1, #0
    8a40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    return Status;
    8a44:	9b05      	ldr	r3, [sp, #20]
}
    8a46:	4618      	mov	r0, r3
    8a48:	b006      	add	sp, #24
    8a4a:	4770      	bx	lr
    8a4c:	0001862c 	.word	0x0001862c
    8a50:	1fff8dd8 	.word	0x1fff8dd8

00008a54 <Lpspi_Ip_SyncTransmit>:
                                            const uint8 *TxBuffer,
                                            uint8 *RxBuffer,
                                            uint16 Length,
                                            uint32 TimeOut
                                         )
{
    8a54:	b510      	push	{r4, lr}
    8a56:	b09a      	sub	sp, #104	; 0x68
    8a58:	9005      	str	r0, [sp, #20]
    8a5a:	9104      	str	r1, [sp, #16]
    8a5c:	9203      	str	r2, [sp, #12]
    8a5e:	f8ad 300a 	strh.w	r3, [sp, #10]
    LPSPI_Type *Base;
    Lpspi_Ip_StateStructureType *State;
    uint8 NumberOfWrites, NumberOfReads;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    8a62:	2300      	movs	r3, #0
    8a64:	9318      	str	r3, [sp, #96]	; 0x60
    uint32 TimeoutTicks = OsIf_MicrosToTicks(TimeOut, LPSPI_IP_TIMEOUT_METHOD);
    8a66:	2100      	movs	r1, #0
    8a68:	981c      	ldr	r0, [sp, #112]	; 0x70
    8a6a:	f7f9 fa89 	bl	1f80 <OsIf_MicrosToTicks>
    8a6e:	9015      	str	r0, [sp, #84]	; 0x54
    uint32 CurrentTicks = 0u; /* initialize current counter */
    8a70:	2300      	movs	r3, #0
    8a72:	9307      	str	r3, [sp, #28]
    uint32 ElapsedTicks = 0u; /* elapsed will give timeout */
    8a74:	2300      	movs	r3, #0
    8a76:	9317      	str	r3, [sp, #92]	; 0x5c
    uint8 Instance = 0u;
    8a78:	2300      	movs	r3, #0
    8a7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    uint32 Cfgr1 = 0u;
    8a7e:	2300      	movs	r3, #0
    8a80:	9313      	str	r3, [sp, #76]	; 0x4c
    boolean TxDoneFlag = FALSE;
    8a82:	2300      	movs	r3, #0
    8a84:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
    DevAssert(ExternalDevice != NULL_PTR);
    DevAssert(0u != Length);
    DevAssert(0u != TimeOut);
    Lpspi_Ip_CheckValidParameters(ExternalDevice, Length);
    #endif
    Instance = ExternalDevice->Instance;
    8a88:	9b05      	ldr	r3, [sp, #20]
    8a8a:	781b      	ldrb	r3, [r3, #0]
    8a8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    8a90:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    8a94:	4a92      	ldr	r2, [pc, #584]	; (8ce0 <Lpspi_Ip_SyncTransmit+0x28c>)
    8a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a9a:	9312      	str	r3, [sp, #72]	; 0x48
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(State != NULL_PTR);
    #endif
    
    Base = Lpspi_Ip_apxBases[Instance];    
    8a9c:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    8aa0:	4a90      	ldr	r2, [pc, #576]	; (8ce4 <Lpspi_Ip_SyncTransmit+0x290>)
    8aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8aa6:	9311      	str	r3, [sp, #68]	; 0x44
    SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08();
    8aa8:	f00d fc88 	bl	163bc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08>
    if (LPSPI_IP_BUSY == State->Status)
    8aac:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8aae:	685b      	ldr	r3, [r3, #4]
    8ab0:	2b02      	cmp	r3, #2
    8ab2:	d104      	bne.n	8abe <Lpspi_Ip_SyncTransmit+0x6a>
    {
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08();
    8ab4:	f00d fcae 	bl	16414 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08>
        Status = LPSPI_IP_STATUS_FAIL;
    8ab8:	2301      	movs	r3, #1
    8aba:	9318      	str	r3, [sp, #96]	; 0x60
    8abc:	e276      	b.n	8fac <Lpspi_Ip_SyncTransmit+0x558>
        /* Clear some bits which support for half duplex mode at previous transfer */
        Base->CFGR1 &= ~(LPSPI_CFGR1_PCSCFG_MASK | LPSPI_CFGR1_OUTCFG_MASK | LPSPI_CFGR1_PINCFG_MASK);
        #endif
        
        /* Mark the hardware as busy. */
        State->Status = LPSPI_IP_BUSY;
    8abe:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ac0:	2202      	movs	r2, #2
    8ac2:	605a      	str	r2, [r3, #4]
        State->ExternalDevice = ExternalDevice;
    8ac4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ac6:	9a05      	ldr	r2, [sp, #20]
    8ac8:	625a      	str	r2, [r3, #36]	; 0x24
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08();
    8aca:	f00d fca3 	bl	16414 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08>
        
        /* Disable DMA requests and all interrupts */
        Base->DER = 0u;
    8ace:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8ad0:	2200      	movs	r2, #0
    8ad2:	61da      	str	r2, [r3, #28]
        Base->IER = 0u;
    8ad4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8ad6:	2200      	movs	r2, #0
    8ad8:	619a      	str	r2, [r3, #24]
        
        /* Update State structure. */
        State->NextTransferConfigAvailable = State->KeepCs;
    8ada:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8adc:	7f1a      	ldrb	r2, [r3, #28]
    8ade:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ae0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Set clock configuration */
        if(TRUE == State->FirstCmd)
    8ae4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ae6:	7f5b      	ldrb	r3, [r3, #29]
    8ae8:	2b00      	cmp	r3, #0
    8aea:	d030      	beq.n	8b4e <Lpspi_Ip_SyncTransmit+0xfa>
            /* Makes sure that FIFOs will be empty before start new transfer session. 
            There is maybe a frame in RX shifter register (previous transfer is broken and CS did not de-assert).
            So use reset FIFO do not prevent the potential issue. So reset module by software reset bit should be used here */
            /* Reset FIFOs using CR[RST] bit */
            /* store CFGR1 and restore after all registers are reset */
            Cfgr1 = Base->CFGR1;
    8aec:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8af0:	9313      	str	r3, [sp, #76]	; 0x4c
            Base->CR |= LPSPI_CR_RST_MASK;
    8af2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8af4:	691b      	ldr	r3, [r3, #16]
    8af6:	f043 0202 	orr.w	r2, r3, #2
    8afa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8afc:	611a      	str	r2, [r3, #16]
            Base->CR &= ~LPSPI_CR_RST_MASK;
    8afe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8b00:	691b      	ldr	r3, [r3, #16]
    8b02:	f023 0202 	bic.w	r2, r3, #2
    8b06:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8b08:	611a      	str	r2, [r3, #16]
            /* restore CFGR1 */
            Base->CFGR1 = Cfgr1;
    8b0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8b0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8b0e:	625a      	str	r2, [r3, #36]	; 0x24
            /* clear all flags */
            Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    8b10:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8b12:	695b      	ldr	r3, [r3, #20]
    8b14:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    8b18:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8b1a:	615a      	str	r2, [r3, #20]

            #if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
            Base->CCR = ExternalDevice->Ccr[State->ClockMode];
            #else
            Base->CCR = ExternalDevice->Ccr;
    8b1c:	9b05      	ldr	r3, [sp, #20]
    8b1e:	685a      	ldr	r2, [r3, #4]
    8b20:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8b22:	641a      	str	r2, [r3, #64]	; 0x40
            #endif
                /* Reset current FIFO slots are available to fill at beginning of job (HLD).*/
            State->CurrentTxFifoSlot = LPSPI_IP_FIFO_SIZE_U8;
    8b24:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8b26:	2204      	movs	r2, #4
    8b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            Lpspi_TransmitTxInit(Instance, (const uint8*)TxBuffer, State->ExternalDevice->DeviceParams->FrameSize, State->ExternalDevice->DeviceParams->Lsb, Length);
    8b2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b30:	68db      	ldr	r3, [r3, #12]
    8b32:	881a      	ldrh	r2, [r3, #0]
    8b34:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b38:	68db      	ldr	r3, [r3, #12]
    8b3a:	7899      	ldrb	r1, [r3, #2]
    8b3c:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    8b40:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8b44:	9300      	str	r3, [sp, #0]
    8b46:	460b      	mov	r3, r1
    8b48:	9904      	ldr	r1, [sp, #16]
    8b4a:	f000 fa37 	bl	8fbc <Lpspi_TransmitTxInit>
        }
        Lpspi_TransmitRxInit(Instance, RxBuffer, State->ExternalDevice->DeviceParams->FrameSize, Length);
    8b4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b52:	68db      	ldr	r3, [r3, #12]
    8b54:	881a      	ldrh	r2, [r3, #0]
    8b56:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8b5a:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    8b5e:	9903      	ldr	r1, [sp, #12]
    8b60:	f000 facc 	bl	90fc <Lpspi_TransmitRxInit>
        /* initialize current counter */
        CurrentTicks = OsIf_GetCounter(LPSPI_IP_TIMEOUT_METHOD);
    8b64:	2000      	movs	r0, #0
    8b66:	f7f9 f9bf 	bl	1ee8 <OsIf_GetCounter>
    8b6a:	4603      	mov	r3, r0
    8b6c:	9307      	str	r3, [sp, #28]
        while(State->RxIndex != State->ExpectedFifoReads)
    8b6e:	e202      	b.n	8f76 <Lpspi_Ip_SyncTransmit+0x522>
        {
            /* RECEIVE DATA */
            /* The receiving should be performed first because maybe have a last frame in RX FIFO from previous channel
                , it should be read to clear RXFIFO before start a new write to TXFIFO */
            /* Read all Data available in receive HW fifo. */
            NumberOfReads = (uint8)(((Base->FSR) & LPSPI_FSR_RXCOUNT_MASK) >> LPSPI_FSR_RXCOUNT_SHIFT);
    8b70:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    8b74:	0c1b      	lsrs	r3, r3, #16
    8b76:	b2db      	uxtb	r3, r3
    8b78:	f003 0307 	and.w	r3, r3, #7
    8b7c:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
            /* Limits to remaining frames. */
            
            if (NumberOfReads != 0u)
    8b80:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    8b84:	2b00      	cmp	r3, #0
    8b86:	f000 80d2 	beq.w	8d2e <Lpspi_Ip_SyncTransmit+0x2da>
            {
                if (NumberOfReads > (State->ExpectedFifoReads - State->RxIndex))
    8b8a:	f89d 2066 	ldrb.w	r2, [sp, #102]	; 0x66
    8b8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8b90:	8b1b      	ldrh	r3, [r3, #24]
    8b92:	4619      	mov	r1, r3
    8b94:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8b96:	8a9b      	ldrh	r3, [r3, #20]
    8b98:	1acb      	subs	r3, r1, r3
    8b9a:	429a      	cmp	r2, r3
    8b9c:	dd08      	ble.n	8bb0 <Lpspi_Ip_SyncTransmit+0x15c>
                {
                    NumberOfReads = (uint8)(State->ExpectedFifoReads - State->RxIndex);
    8b9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ba0:	8b1b      	ldrh	r3, [r3, #24]
    8ba2:	b2da      	uxtb	r2, r3
    8ba4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ba6:	8a9b      	ldrh	r3, [r3, #20]
    8ba8:	b2db      	uxtb	r3, r3
    8baa:	1ad3      	subs	r3, r2, r3
    8bac:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
                }
                /* If these are the first frames of this channel. Current TXFIFO slot must be plus 1 because the slot of CMD have moved out */
                if (0u == State->RxIndex)
    8bb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8bb2:	8a9b      	ldrh	r3, [r3, #20]
    8bb4:	2b00      	cmp	r3, #0
    8bb6:	d107      	bne.n	8bc8 <Lpspi_Ip_SyncTransmit+0x174>
                {
                    State->CurrentTxFifoSlot += 1u;
    8bb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8bba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8bbe:	3301      	adds	r3, #1
    8bc0:	b2da      	uxtb	r2, r3
    8bc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    8bc8:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    8bcc:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    8bd0:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    8bd4:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    const LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    8bd8:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    8bdc:	4a41      	ldr	r2, [pc, #260]	; (8ce4 <Lpspi_Ip_SyncTransmit+0x290>)
    8bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8be2:	930f      	str	r3, [sp, #60]	; 0x3c
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    8be4:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    8be8:	4a3d      	ldr	r2, [pc, #244]	; (8ce0 <Lpspi_Ip_SyncTransmit+0x28c>)
    8bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bee:	930e      	str	r3, [sp, #56]	; 0x38
    uint32 Data = 0u;
    8bf0:	2300      	movs	r3, #0
    8bf2:	930d      	str	r3, [sp, #52]	; 0x34
    uint8 Index = 0u;
    8bf4:	2300      	movs	r3, #0
    8bf6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    if (NULL_PTR != State->RxBuffer)
    8bfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8bfc:	689b      	ldr	r3, [r3, #8]
    8bfe:	2b00      	cmp	r3, #0
    8c00:	d069      	beq.n	8cd6 <Lpspi_Ip_SyncTransmit+0x282>
        if (State->ExternalDevice->DeviceParams->FrameSize < 9u)
    8c02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c06:	68db      	ldr	r3, [r3, #12]
    8c08:	881b      	ldrh	r3, [r3, #0]
    8c0a:	2b08      	cmp	r3, #8
    8c0c:	d81e      	bhi.n	8c4c <Lpspi_Ip_SyncTransmit+0x1f8>
            for (Index = 0; Index < NumberOfReads; Index++)
    8c0e:	2300      	movs	r3, #0
    8c10:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8c14:	e013      	b.n	8c3e <Lpspi_Ip_SyncTransmit+0x1ea>
                Data = Base->RDR;
    8c16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8c1a:	930d      	str	r3, [sp, #52]	; 0x34
                *((uint8*)(&State->RxBuffer[State->RxIndex + Index])) = (uint8)Data;
    8c1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8c1e:	689b      	ldr	r3, [r3, #8]
    8c20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8c22:	8a92      	ldrh	r2, [r2, #20]
    8c24:	4611      	mov	r1, r2
    8c26:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
    8c2a:	440a      	add	r2, r1
    8c2c:	4413      	add	r3, r2
    8c2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8c30:	b2d2      	uxtb	r2, r2
    8c32:	701a      	strb	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    8c34:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8c38:	3301      	adds	r3, #1
    8c3a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8c3e:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    8c42:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8c46:	429a      	cmp	r2, r3
    8c48:	d8e5      	bhi.n	8c16 <Lpspi_Ip_SyncTransmit+0x1c2>
    8c4a:	e05a      	b.n	8d02 <Lpspi_Ip_SyncTransmit+0x2ae>
        else if (State->ExternalDevice->DeviceParams->FrameSize < 17u)
    8c4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c50:	68db      	ldr	r3, [r3, #12]
    8c52:	881b      	ldrh	r3, [r3, #0]
    8c54:	2b10      	cmp	r3, #16
    8c56:	d81f      	bhi.n	8c98 <Lpspi_Ip_SyncTransmit+0x244>
            for (Index = 0; Index < NumberOfReads; Index++)
    8c58:	2300      	movs	r3, #0
    8c5a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8c5e:	e014      	b.n	8c8a <Lpspi_Ip_SyncTransmit+0x236>
                Data = Base->RDR;
    8c60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8c64:	930d      	str	r3, [sp, #52]	; 0x34
                *((uint16*)(&State->RxBuffer[2u * (State->RxIndex + Index)])) = (uint16)Data;
    8c66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8c68:	689a      	ldr	r2, [r3, #8]
    8c6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8c6c:	8a9b      	ldrh	r3, [r3, #20]
    8c6e:	4619      	mov	r1, r3
    8c70:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8c74:	440b      	add	r3, r1
    8c76:	005b      	lsls	r3, r3, #1
    8c78:	4413      	add	r3, r2
    8c7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8c7c:	b292      	uxth	r2, r2
    8c7e:	801a      	strh	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    8c80:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8c84:	3301      	adds	r3, #1
    8c86:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8c8a:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    8c8e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8c92:	429a      	cmp	r2, r3
    8c94:	d8e4      	bhi.n	8c60 <Lpspi_Ip_SyncTransmit+0x20c>
    8c96:	e034      	b.n	8d02 <Lpspi_Ip_SyncTransmit+0x2ae>
            for (Index = 0; Index < NumberOfReads; Index++)
    8c98:	2300      	movs	r3, #0
    8c9a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8c9e:	e013      	b.n	8cc8 <Lpspi_Ip_SyncTransmit+0x274>
                Data = Base->RDR;
    8ca0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8ca4:	930d      	str	r3, [sp, #52]	; 0x34
                *((uint32*)(&State->RxBuffer[4u * (State->RxIndex + Index)])) = (uint32)Data;
    8ca6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8ca8:	689a      	ldr	r2, [r3, #8]
    8caa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8cac:	8a9b      	ldrh	r3, [r3, #20]
    8cae:	4619      	mov	r1, r3
    8cb0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8cb4:	440b      	add	r3, r1
    8cb6:	009b      	lsls	r3, r3, #2
    8cb8:	4413      	add	r3, r2
    8cba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8cbc:	601a      	str	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    8cbe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8cc2:	3301      	adds	r3, #1
    8cc4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8cc8:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    8ccc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8cd0:	429a      	cmp	r2, r3
    8cd2:	d8e5      	bhi.n	8ca0 <Lpspi_Ip_SyncTransmit+0x24c>
    8cd4:	e015      	b.n	8d02 <Lpspi_Ip_SyncTransmit+0x2ae>
        for (Index = 0; Index < NumberOfReads; Index++)
    8cd6:	2300      	movs	r3, #0
    8cd8:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8cdc:	e00b      	b.n	8cf6 <Lpspi_Ip_SyncTransmit+0x2a2>
    8cde:	bf00      	nop
    8ce0:	1fff8dd8 	.word	0x1fff8dd8
    8ce4:	0001862c 	.word	0x0001862c
            (void)Base->RDR;
    8ce8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        for (Index = 0; Index < NumberOfReads; Index++)
    8cec:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8cf0:	3301      	adds	r3, #1
    8cf2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8cf6:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    8cfa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8cfe:	429a      	cmp	r2, r3
    8d00:	d8f2      	bhi.n	8ce8 <Lpspi_Ip_SyncTransmit+0x294>
    State->RxIndex += NumberOfReads;
    8d02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8d04:	8a9a      	ldrh	r2, [r3, #20]
    8d06:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    8d0a:	b29b      	uxth	r3, r3
    8d0c:	4413      	add	r3, r2
    8d0e:	b29a      	uxth	r2, r3
    8d10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8d12:	829a      	strh	r2, [r3, #20]
}
    8d14:	bf00      	nop
                }
                /* Read Data from RX FIFO */
                Lpspi_Ip_ReadDataFromFifo(Instance, NumberOfReads);
                /* Update current FIFO slots are available to fill .*/
                State->CurrentTxFifoSlot += NumberOfReads;
    8d16:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8d18:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    8d1c:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    8d20:	4413      	add	r3, r2
    8d22:	b2da      	uxtb	r2, r3
    8d24:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                ElapsedTicks = 0u;
    8d2a:	2300      	movs	r3, #0
    8d2c:	9317      	str	r3, [sp, #92]	; 0x5c
            /* After driver code read all frames in RX FIFO, if there are still some frames in TX FIFO, at the time before driver code check number of frames available in TX FIFO 
            to prepare to fill TX FIFO. At that time, interrupt occurred, and the time to process interrupt is longer than the time to transfer all frames in TX FIFO. 
            So TX FIFO will be empty and some frames received in RX FIFO, then the program is returned from interrupt and fill TX FIFO until full. 
            And there is a interrupt occurred after that before read all frames in RX FIFO, and the time to process interrupt is longer than the time to transfer all frames in TX FIFO.
            State->CurrentTxFifoSlot variable is used to hanlde number of frames are "on bus transfer". They are always less than FIFO size */
            if((State->CurrentTxFifoSlot != 0u) && (TxDoneFlag != TRUE))
    8d2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8d34:	2b00      	cmp	r3, #0
    8d36:	f000 810e 	beq.w	8f56 <Lpspi_Ip_SyncTransmit+0x502>
    8d3a:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
    8d3e:	f083 0301 	eor.w	r3, r3, #1
    8d42:	b2db      	uxtb	r3, r3
    8d44:	2b00      	cmp	r3, #0
    8d46:	f000 8106 	beq.w	8f56 <Lpspi_Ip_SyncTransmit+0x502>
            {
                if(State->ExpectedFifoWrites != State->TxIndex)
    8d4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8d4c:	8b5a      	ldrh	r2, [r3, #26]
    8d4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8d50:	8adb      	ldrh	r3, [r3, #22]
    8d52:	429a      	cmp	r2, r3
    8d54:	f000 80c7 	beq.w	8ee6 <Lpspi_Ip_SyncTransmit+0x492>
                {
                    NumberOfWrites = State->CurrentTxFifoSlot;
    8d58:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8d5e:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
                    /* Limits to remaining frames. */
                    if (NumberOfWrites > (State->ExpectedFifoWrites - State->TxIndex))
    8d62:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
    8d66:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8d68:	8b5b      	ldrh	r3, [r3, #26]
    8d6a:	4619      	mov	r1, r3
    8d6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8d6e:	8adb      	ldrh	r3, [r3, #22]
    8d70:	1acb      	subs	r3, r1, r3
    8d72:	429a      	cmp	r2, r3
    8d74:	dd08      	ble.n	8d88 <Lpspi_Ip_SyncTransmit+0x334>
                    {
                        NumberOfWrites = (uint8)(State->ExpectedFifoWrites - State->TxIndex);
    8d76:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8d78:	8b5b      	ldrh	r3, [r3, #26]
    8d7a:	b2da      	uxtb	r2, r3
    8d7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8d7e:	8adb      	ldrh	r3, [r3, #22]
    8d80:	b2db      	uxtb	r3, r3
    8d82:	1ad3      	subs	r3, r2, r3
    8d84:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    8d88:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    8d8c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    8d90:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    8d94:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    8d98:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    8d9c:	4a85      	ldr	r2, [pc, #532]	; (8fb4 <Lpspi_Ip_SyncTransmit+0x560>)
    8d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8da2:	930b      	str	r3, [sp, #44]	; 0x2c
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    8da4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    8da8:	4a83      	ldr	r2, [pc, #524]	; (8fb8 <Lpspi_Ip_SyncTransmit+0x564>)
    8daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dae:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 Data = 0u;
    8db0:	2300      	movs	r3, #0
    8db2:	9309      	str	r3, [sp, #36]	; 0x24
    uint8 Index = 0u;
    8db4:	2300      	movs	r3, #0
    8db6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Data = State->ExternalDevice->DeviceParams->DefaultData;
    8dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8dbe:	68db      	ldr	r3, [r3, #12]
    8dc0:	685b      	ldr	r3, [r3, #4]
    8dc2:	9309      	str	r3, [sp, #36]	; 0x24
    if (NULL_PTR != State->TxBuffer)
    8dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8dc6:	68db      	ldr	r3, [r3, #12]
    8dc8:	2b00      	cmp	r3, #0
    8dca:	d063      	beq.n	8e94 <Lpspi_Ip_SyncTransmit+0x440>
        if (State->TxFrameSize < 9u)
    8dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8dd0:	2b08      	cmp	r3, #8
    8dd2:	d81d      	bhi.n	8e10 <Lpspi_Ip_SyncTransmit+0x3bc>
            for (Index = 0; Index < NumberOfWrites; Index++)
    8dd4:	2300      	movs	r3, #0
    8dd6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8dda:	e012      	b.n	8e02 <Lpspi_Ip_SyncTransmit+0x3ae>
                Data = *((const uint8*)(&State->TxBuffer[State->TxIndex + Index]));
    8ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8dde:	68db      	ldr	r3, [r3, #12]
    8de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8de2:	8ad2      	ldrh	r2, [r2, #22]
    8de4:	4611      	mov	r1, r2
    8de6:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    8dea:	440a      	add	r2, r1
    8dec:	4413      	add	r3, r2
    8dee:	781b      	ldrb	r3, [r3, #0]
    8df0:	9309      	str	r3, [sp, #36]	; 0x24
                Base->TDR = Data;
    8df2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8df4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8df6:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    8df8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8dfc:	3301      	adds	r3, #1
    8dfe:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8e02:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    8e06:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8e0a:	429a      	cmp	r2, r3
    8e0c:	d8e6      	bhi.n	8ddc <Lpspi_Ip_SyncTransmit+0x388>
    8e0e:	e053      	b.n	8eb8 <Lpspi_Ip_SyncTransmit+0x464>
        else if (State->TxFrameSize < 17u)
    8e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8e14:	2b10      	cmp	r3, #16
    8e16:	d81e      	bhi.n	8e56 <Lpspi_Ip_SyncTransmit+0x402>
            for (Index = 0; Index < NumberOfWrites; Index++)
    8e18:	2300      	movs	r3, #0
    8e1a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8e1e:	e013      	b.n	8e48 <Lpspi_Ip_SyncTransmit+0x3f4>
                Data = *((const uint16*)(&State->TxBuffer[2u * (State->TxIndex + Index)]));
    8e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8e22:	68da      	ldr	r2, [r3, #12]
    8e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8e26:	8adb      	ldrh	r3, [r3, #22]
    8e28:	4619      	mov	r1, r3
    8e2a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8e2e:	440b      	add	r3, r1
    8e30:	005b      	lsls	r3, r3, #1
    8e32:	4413      	add	r3, r2
    8e34:	881b      	ldrh	r3, [r3, #0]
    8e36:	9309      	str	r3, [sp, #36]	; 0x24
                Base->TDR = Data;
    8e38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8e3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8e3c:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    8e3e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8e42:	3301      	adds	r3, #1
    8e44:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8e48:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    8e4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8e50:	429a      	cmp	r2, r3
    8e52:	d8e5      	bhi.n	8e20 <Lpspi_Ip_SyncTransmit+0x3cc>
    8e54:	e030      	b.n	8eb8 <Lpspi_Ip_SyncTransmit+0x464>
            for (Index = 0; Index < NumberOfWrites; Index++)
    8e56:	2300      	movs	r3, #0
    8e58:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8e5c:	e013      	b.n	8e86 <Lpspi_Ip_SyncTransmit+0x432>
                Data = *((const uint32*)(&State->TxBuffer[4u * (State->TxIndex + Index)]));
    8e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8e60:	68da      	ldr	r2, [r3, #12]
    8e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8e64:	8adb      	ldrh	r3, [r3, #22]
    8e66:	4619      	mov	r1, r3
    8e68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8e6c:	440b      	add	r3, r1
    8e6e:	009b      	lsls	r3, r3, #2
    8e70:	4413      	add	r3, r2
    8e72:	681b      	ldr	r3, [r3, #0]
    8e74:	9309      	str	r3, [sp, #36]	; 0x24
                Base->TDR = Data;
    8e76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8e78:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8e7a:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    8e7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8e80:	3301      	adds	r3, #1
    8e82:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8e86:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    8e8a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8e8e:	429a      	cmp	r2, r3
    8e90:	d8e5      	bhi.n	8e5e <Lpspi_Ip_SyncTransmit+0x40a>
    8e92:	e011      	b.n	8eb8 <Lpspi_Ip_SyncTransmit+0x464>
        for (Index = 0; Index < NumberOfWrites; Index++)
    8e94:	2300      	movs	r3, #0
    8e96:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8e9a:	e007      	b.n	8eac <Lpspi_Ip_SyncTransmit+0x458>
            Base->TDR = Data;
    8e9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8e9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8ea0:	665a      	str	r2, [r3, #100]	; 0x64
        for (Index = 0; Index < NumberOfWrites; Index++)
    8ea2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8ea6:	3301      	adds	r3, #1
    8ea8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8eac:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    8eb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8eb4:	429a      	cmp	r2, r3
    8eb6:	d8f1      	bhi.n	8e9c <Lpspi_Ip_SyncTransmit+0x448>
    State->TxIndex += NumberOfWrites;
    8eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8eba:	8ada      	ldrh	r2, [r3, #22]
    8ebc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    8ec0:	b29b      	uxth	r3, r3
    8ec2:	4413      	add	r3, r2
    8ec4:	b29a      	uxth	r2, r3
    8ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8ec8:	82da      	strh	r2, [r3, #22]
}
    8eca:	bf00      	nop
                    }
                    /* Push Data into TX FIFO */
                    Lpspi_Ip_PushDataToFifo(Instance, NumberOfWrites);
                    State->CurrentTxFifoSlot -= NumberOfWrites;
    8ecc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ece:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    8ed2:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    8ed6:	1ad3      	subs	r3, r2, r3
    8ed8:	b2da      	uxtb	r2, r3
    8eda:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                    ElapsedTicks = 0u;
    8ee0:	2300      	movs	r3, #0
    8ee2:	9317      	str	r3, [sp, #92]	; 0x5c
    8ee4:	e037      	b.n	8f56 <Lpspi_Ip_SyncTransmit+0x502>
                }
                else
                {
                    if(TRUE == State->NextTransferConfigAvailable)
    8ee6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ee8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    8eec:	2b00      	cmp	r3, #0
    8eee:	d01c      	beq.n	8f2a <Lpspi_Ip_SyncTransmit+0x4d6>
                    {
                        /* Initialize next transfer */
                        State->ExternalDevice->DeviceParams->DefaultData = State->DefaultDataNext;
    8ef0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8ef4:	68db      	ldr	r3, [r3, #12]
    8ef6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    8ef8:	6b52      	ldr	r2, [r2, #52]	; 0x34
    8efa:	605a      	str	r2, [r3, #4]
                        State->FirstCmd = FALSE;
    8efc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8efe:	2200      	movs	r2, #0
    8f00:	775a      	strb	r2, [r3, #29]
                        Lpspi_TransmitTxInit(Instance, State->TxBufferNext, State->FrameSizeNext, State->LsbNext, State->LengthNext);
    8f02:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8f04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    8f06:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8f08:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    8f0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8f0c:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
    8f10:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8f12:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    8f14:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    8f18:	9300      	str	r3, [sp, #0]
    8f1a:	4623      	mov	r3, r4
    8f1c:	f000 f84e 	bl	8fbc <Lpspi_TransmitTxInit>
                        State->NextTransferConfigAvailable = FALSE;
    8f20:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8f22:	2200      	movs	r2, #0
    8f24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    8f28:	e015      	b.n	8f56 <Lpspi_Ip_SyncTransmit+0x502>
                    }
                    else
                    {
                        TxDoneFlag = TRUE;
    8f2a:	2301      	movs	r3, #1
    8f2c:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
                        if((FALSE == State->KeepCs) && (0u != (Base->TCR & LPSPI_TCR_CONT_MASK)))
    8f30:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8f32:	7f1b      	ldrb	r3, [r3, #28]
    8f34:	f083 0301 	eor.w	r3, r3, #1
    8f38:	b2db      	uxtb	r3, r3
    8f3a:	2b00      	cmp	r3, #0
    8f3c:	d00b      	beq.n	8f56 <Lpspi_Ip_SyncTransmit+0x502>
    8f3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    8f42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    8f46:	2b00      	cmp	r3, #0
    8f48:	d005      	beq.n	8f56 <Lpspi_Ip_SyncTransmit+0x502>
                        {
                            /* Clear CS */
                            Base->TCR &= ~(LPSPI_TCR_CONT_MASK | LPSPI_TCR_CONTC_MASK);
    8f4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    8f4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
    8f52:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8f54:	661a      	str	r2, [r3, #96]	; 0x60
                        }
                    }
                }
            }
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, LPSPI_IP_TIMEOUT_METHOD);
    8f56:	ab07      	add	r3, sp, #28
    8f58:	2100      	movs	r1, #0
    8f5a:	4618      	mov	r0, r3
    8f5c:	f7f8 ffdd 	bl	1f1a <OsIf_GetElapsed>
    8f60:	4602      	mov	r2, r0
    8f62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    8f64:	4413      	add	r3, r2
    8f66:	9317      	str	r3, [sp, #92]	; 0x5c
            if (ElapsedTicks >= TimeoutTicks)
    8f68:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    8f6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8f6c:	429a      	cmp	r2, r3
    8f6e:	d302      	bcc.n	8f76 <Lpspi_Ip_SyncTransmit+0x522>
            {
                Status = LPSPI_IP_TIMEOUT;
    8f70:	2303      	movs	r3, #3
    8f72:	9318      	str	r3, [sp, #96]	; 0x60
                break;
    8f74:	e006      	b.n	8f84 <Lpspi_Ip_SyncTransmit+0x530>
        while(State->RxIndex != State->ExpectedFifoReads)
    8f76:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8f78:	8a9a      	ldrh	r2, [r3, #20]
    8f7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8f7c:	8b1b      	ldrh	r3, [r3, #24]
    8f7e:	429a      	cmp	r2, r3
    8f80:	f47f adf6 	bne.w	8b70 <Lpspi_Ip_SyncTransmit+0x11c>
            }
        }
        if ((LPSPI_IP_STATUS_SUCCESS != Status) || (0u == Length))
    8f84:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8f86:	2b00      	cmp	r3, #0
    8f88:	d103      	bne.n	8f92 <Lpspi_Ip_SyncTransmit+0x53e>
    8f8a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8f8e:	2b00      	cmp	r3, #0
    8f90:	d109      	bne.n	8fa6 <Lpspi_Ip_SyncTransmit+0x552>
        {
#if (STD_OFF == LPSPI_IP_DEV_ERROR_DETECT)
            /* Return Fail status if length is 0. Error Detect is enabled, nothing need to be done here */
            if (0u == Length)
    8f92:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8f96:	2b00      	cmp	r3, #0
    8f98:	d101      	bne.n	8f9e <Lpspi_Ip_SyncTransmit+0x54a>
            {
                Status = LPSPI_IP_STATUS_FAIL;
    8f9a:	2301      	movs	r3, #1
    8f9c:	9318      	str	r3, [sp, #96]	; 0x60
            }
#endif
            State->Status = LPSPI_IP_FAULT;
    8f9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8fa0:	2203      	movs	r2, #3
    8fa2:	605a      	str	r2, [r3, #4]
    8fa4:	e002      	b.n	8fac <Lpspi_Ip_SyncTransmit+0x558>
        }
        else
        {
            State->Status = LPSPI_IP_IDLE;
    8fa6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8fa8:	2201      	movs	r2, #1
    8faa:	605a      	str	r2, [r3, #4]
        }
    }
    return Status;
    8fac:	9b18      	ldr	r3, [sp, #96]	; 0x60
}
    8fae:	4618      	mov	r0, r3
    8fb0:	b01a      	add	sp, #104	; 0x68
    8fb2:	bd10      	pop	{r4, pc}
    8fb4:	0001862c 	.word	0x0001862c
    8fb8:	1fff8dd8 	.word	0x1fff8dd8

00008fbc <Lpspi_TransmitTxInit>:
                                 const uint8* TxBuffer,
                                 uint16 TxFrameSize,
                                 boolean TxLsb,
                                 uint16 BufLen
                                )
{
    8fbc:	b088      	sub	sp, #32
    8fbe:	9100      	str	r1, [sp, #0]
    8fc0:	4611      	mov	r1, r2
    8fc2:	461a      	mov	r2, r3
    8fc4:	4603      	mov	r3, r0
    8fc6:	f88d 3007 	strb.w	r3, [sp, #7]
    8fca:	460b      	mov	r3, r1
    8fcc:	f8ad 3004 	strh.w	r3, [sp, #4]
    8fd0:	4613      	mov	r3, r2
    8fd2:	f88d 3006 	strb.w	r3, [sp, #6]
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    8fd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8fda:	4a46      	ldr	r2, [pc, #280]	; (90f4 <Lpspi_TransmitTxInit+0x138>)
    8fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fe0:	9307      	str	r3, [sp, #28]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    8fe2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8fe6:	4a44      	ldr	r2, [pc, #272]	; (90f8 <Lpspi_TransmitTxInit+0x13c>)
    8fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fec:	9306      	str	r3, [sp, #24]
    uint32 TransferCommand = 0u;
    8fee:	2300      	movs	r3, #0
    8ff0:	9305      	str	r3, [sp, #20]
    uint8 LsbWriteValue = TxLsb ? 1U : 0U;
    8ff2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8ff6:	2b00      	cmp	r3, #0
    8ff8:	d001      	beq.n	8ffe <Lpspi_TransmitTxInit+0x42>
    8ffa:	2301      	movs	r3, #1
    8ffc:	e000      	b.n	9000 <Lpspi_TransmitTxInit+0x44>
    8ffe:	2300      	movs	r3, #0
    9000:	f88d 3013 	strb.w	r3, [sp, #19]

    State->TxFrameSize = TxFrameSize;
    9004:	9b06      	ldr	r3, [sp, #24]
    9006:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    900a:	851a      	strh	r2, [r3, #40]	; 0x28
    State->TxLsb = TxLsb;
    900c:	9b06      	ldr	r3, [sp, #24]
    900e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9012:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    /* Get transfer command */
#if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
    TransferCommand = State->ExternalDevice->Tcr[State->ClockMode] | LPSPI_TCR_FRAMESZ((uint32)TxFrameSize - 1u) | LPSPI_TCR_LSBF(LsbWriteValue);
#else
    TransferCommand = State->ExternalDevice->Tcr | LPSPI_TCR_FRAMESZ((uint32)TxFrameSize - 1u) | LPSPI_TCR_LSBF(LsbWriteValue);
    9016:	9b06      	ldr	r3, [sp, #24]
    9018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    901a:	689a      	ldr	r2, [r3, #8]
    901c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    9020:	3b01      	subs	r3, #1
    9022:	f3c3 030b 	ubfx	r3, r3, #0, #12
    9026:	431a      	orrs	r2, r3
    9028:	f89d 3013 	ldrb.w	r3, [sp, #19]
    902c:	05db      	lsls	r3, r3, #23
    902e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    9032:	4313      	orrs	r3, r2
    9034:	9305      	str	r3, [sp, #20]
        {
            TransferCommand &= ~LPSPI_TCR_CONT_MASK;
        }
        #endif
        
        if(TRUE == State->FirstCmd)
    9036:	9b06      	ldr	r3, [sp, #24]
    9038:	7f5b      	ldrb	r3, [r3, #29]
    903a:	2b00      	cmp	r3, #0
    903c:	d003      	beq.n	9046 <Lpspi_TransmitTxInit+0x8a>
        {
            /* Set transfer command */
            Base->TCR = TransferCommand;
    903e:	9b07      	ldr	r3, [sp, #28]
    9040:	9a05      	ldr	r2, [sp, #20]
    9042:	661a      	str	r2, [r3, #96]	; 0x60
    9044:	e00d      	b.n	9062 <Lpspi_TransmitTxInit+0xa6>
        }
        else
        {
            if (0u != (TransferCommand & LPSPI_TCR_CONT_MASK))
    9046:	9b05      	ldr	r3, [sp, #20]
    9048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    904c:	2b00      	cmp	r3, #0
    904e:	d005      	beq.n	905c <Lpspi_TransmitTxInit+0xa0>
            {
                Base->TCR = TransferCommand | LPSPI_TCR_CONTC_MASK;
    9050:	9b05      	ldr	r3, [sp, #20]
    9052:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
    9056:	9b07      	ldr	r3, [sp, #28]
    9058:	661a      	str	r2, [r3, #96]	; 0x60
    905a:	e002      	b.n	9062 <Lpspi_TransmitTxInit+0xa6>
            }
            else
            {
                Base->TCR = TransferCommand;
    905c:	9b07      	ldr	r3, [sp, #28]
    905e:	9a05      	ldr	r2, [sp, #20]
    9060:	661a      	str	r2, [r3, #96]	; 0x60
        #if (STD_ON == LPSPI_IP_HALF_DUPLEX_MODE_SUPPORT)
        if (LPSPI_IP_FULL_DUPLEX == State->ExternalDevice->DeviceParams->TransferType)
        #endif
        {
            /* CMD will take 1 slot in TXFIFO, update current TX FIFO slot. it will be plus 1 when the first frames of channel have recieved */
            State->CurrentTxFifoSlot -= 1u;
    9062:	9b06      	ldr	r3, [sp, #24]
    9064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    9068:	3b01      	subs	r3, #1
    906a:	b2da      	uxtb	r2, r3
    906c:	9b06      	ldr	r3, [sp, #24]
    906e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        }
    }
    
    /* Update State structure. */
    State->TxIndex = 0u;
    9072:	9b06      	ldr	r3, [sp, #24]
    9074:	2200      	movs	r2, #0
    9076:	82da      	strh	r2, [r3, #22]
        (void)TxBuffer;
    }
    else
    #endif
    {
        State->TxBuffer = TxBuffer;
    9078:	9b06      	ldr	r3, [sp, #24]
    907a:	9a00      	ldr	r2, [sp, #0]
    907c:	60da      	str	r2, [r3, #12]
    907e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    9082:	f8ad 3010 	strh.w	r3, [sp, #16]
    9086:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    908a:	f8ad 300e 	strh.w	r3, [sp, #14]
    if (FrameSize < 9u)
    908e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9092:	2b08      	cmp	r3, #8
    9094:	d804      	bhi.n	90a0 <Lpspi_TransmitTxInit+0xe4>
        Ret = Length;
    9096:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    909a:	f8ad 300c 	strh.w	r3, [sp, #12]
    909e:	e022      	b.n	90e6 <Lpspi_TransmitTxInit+0x12a>
    else if (FrameSize < 17u)
    90a0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    90a4:	2b10      	cmp	r3, #16
    90a6:	d80c      	bhi.n	90c2 <Lpspi_TransmitTxInit+0x106>
        Ret = (uint16)(Length / 2u) + (uint16)(Length % 2U);
    90a8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    90ac:	085b      	lsrs	r3, r3, #1
    90ae:	b29a      	uxth	r2, r3
    90b0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    90b4:	f003 0301 	and.w	r3, r3, #1
    90b8:	b29b      	uxth	r3, r3
    90ba:	4413      	add	r3, r2
    90bc:	f8ad 300c 	strh.w	r3, [sp, #12]
    90c0:	e011      	b.n	90e6 <Lpspi_TransmitTxInit+0x12a>
        Ret = (uint16)(Length / 4u) + (uint16)(((Length % 4U) == 0U) ? 0U : 1U);
    90c2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    90c6:	089b      	lsrs	r3, r3, #2
    90c8:	b29a      	uxth	r2, r3
    90ca:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    90ce:	f003 0303 	and.w	r3, r3, #3
    90d2:	b29b      	uxth	r3, r3
    90d4:	2b00      	cmp	r3, #0
    90d6:	bf14      	ite	ne
    90d8:	2301      	movne	r3, #1
    90da:	2300      	moveq	r3, #0
    90dc:	b2db      	uxtb	r3, r3
    90de:	b29b      	uxth	r3, r3
    90e0:	4413      	add	r3, r2
    90e2:	f8ad 300c 	strh.w	r3, [sp, #12]
    return Ret;
    90e6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    }

    State->ExpectedFifoWrites = Lpspi_Ip_GetWordsFromLength(BufLen, TxFrameSize);
    90ea:	9b06      	ldr	r3, [sp, #24]
    90ec:	835a      	strh	r2, [r3, #26]
}
    90ee:	bf00      	nop
    90f0:	b008      	add	sp, #32
    90f2:	4770      	bx	lr
    90f4:	0001862c 	.word	0x0001862c
    90f8:	1fff8dd8 	.word	0x1fff8dd8

000090fc <Lpspi_TransmitRxInit>:
static void Lpspi_TransmitRxInit(uint8 Instance,
                                      uint8* RxBuffer,
                                      uint16 RxFrameSize,
                                      uint16 BufLen
                                     )
{
    90fc:	b088      	sub	sp, #32
    90fe:	9102      	str	r1, [sp, #8]
    9100:	4611      	mov	r1, r2
    9102:	461a      	mov	r2, r3
    9104:	4603      	mov	r3, r0
    9106:	f88d 300f 	strb.w	r3, [sp, #15]
    910a:	460b      	mov	r3, r1
    910c:	f8ad 300c 	strh.w	r3, [sp, #12]
    9110:	4613      	mov	r3, r2
    9112:	f8ad 3006 	strh.w	r3, [sp, #6]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    9116:	f89d 300f 	ldrb.w	r3, [sp, #15]
    911a:	4a22      	ldr	r2, [pc, #136]	; (91a4 <Lpspi_TransmitRxInit+0xa8>)
    911c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9120:	9307      	str	r3, [sp, #28]
    
    /* Update State structure. */
    State->RxIndex = 0u;
    9122:	9b07      	ldr	r3, [sp, #28]
    9124:	2200      	movs	r2, #0
    9126:	829a      	strh	r2, [r3, #20]
        (void)RxBuffer; 
    }
    else
    #endif        
    {
        State->RxBuffer = RxBuffer; 
    9128:	9b07      	ldr	r3, [sp, #28]
    912a:	9a02      	ldr	r2, [sp, #8]
    912c:	609a      	str	r2, [r3, #8]
    912e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9132:	f8ad 301a 	strh.w	r3, [sp, #26]
    9136:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    913a:	f8ad 3018 	strh.w	r3, [sp, #24]
    if (FrameSize < 9u)
    913e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    9142:	2b08      	cmp	r3, #8
    9144:	d804      	bhi.n	9150 <Lpspi_TransmitRxInit+0x54>
        Ret = Length;
    9146:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    914a:	f8ad 3016 	strh.w	r3, [sp, #22]
    914e:	e022      	b.n	9196 <Lpspi_TransmitRxInit+0x9a>
    else if (FrameSize < 17u)
    9150:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    9154:	2b10      	cmp	r3, #16
    9156:	d80c      	bhi.n	9172 <Lpspi_TransmitRxInit+0x76>
        Ret = (uint16)(Length / 2u) + (uint16)(Length % 2U);
    9158:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    915c:	085b      	lsrs	r3, r3, #1
    915e:	b29a      	uxth	r2, r3
    9160:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9164:	f003 0301 	and.w	r3, r3, #1
    9168:	b29b      	uxth	r3, r3
    916a:	4413      	add	r3, r2
    916c:	f8ad 3016 	strh.w	r3, [sp, #22]
    9170:	e011      	b.n	9196 <Lpspi_TransmitRxInit+0x9a>
        Ret = (uint16)(Length / 4u) + (uint16)(((Length % 4U) == 0U) ? 0U : 1U);
    9172:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9176:	089b      	lsrs	r3, r3, #2
    9178:	b29a      	uxth	r2, r3
    917a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    917e:	f003 0303 	and.w	r3, r3, #3
    9182:	b29b      	uxth	r3, r3
    9184:	2b00      	cmp	r3, #0
    9186:	bf14      	ite	ne
    9188:	2301      	movne	r3, #1
    918a:	2300      	moveq	r3, #0
    918c:	b2db      	uxtb	r3, r3
    918e:	b29b      	uxth	r3, r3
    9190:	4413      	add	r3, r2
    9192:	f8ad 3016 	strh.w	r3, [sp, #22]
    return Ret;
    9196:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    }

    State->ExpectedFifoReads = Lpspi_Ip_GetWordsFromLength(BufLen, RxFrameSize);
    919a:	9b07      	ldr	r3, [sp, #28]
    919c:	831a      	strh	r2, [r3, #24]
}
    919e:	bf00      	nop
    91a0:	b008      	add	sp, #32
    91a2:	4770      	bx	lr
    91a4:	1fff8dd8 	.word	0x1fff8dd8

000091a8 <Lpspi_Ip_AsyncTransmit>:
                                            const uint8 *TxBuffer,
                                            uint8 *RxBuffer,
                                            uint16 Length,
                                            Lpspi_Ip_CallbackType EndCallback
                                          )
{
    91a8:	b500      	push	{lr}
    91aa:	b08b      	sub	sp, #44	; 0x2c
    91ac:	9005      	str	r0, [sp, #20]
    91ae:	9104      	str	r1, [sp, #16]
    91b0:	9203      	str	r2, [sp, #12]
    91b2:	f8ad 300a 	strh.w	r3, [sp, #10]
    LPSPI_Type* Base;
    Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    91b6:	2300      	movs	r3, #0
    91b8:	9309      	str	r3, [sp, #36]	; 0x24
    uint8 Instance = 0u;
    91ba:	2300      	movs	r3, #0
    91bc:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(ExternalDevice != NULL_PTR);
    DevAssert(0u != Length);
    Lpspi_Ip_CheckValidParameters(ExternalDevice, Length);
    #endif
    Instance = ExternalDevice->Instance;
    91c0:	9b05      	ldr	r3, [sp, #20]
    91c2:	781b      	ldrb	r3, [r3, #0]
    91c4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    91c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    91cc:	4a3d      	ldr	r2, [pc, #244]	; (92c4 <Lpspi_Ip_AsyncTransmit+0x11c>)
    91ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91d2:	9307      	str	r3, [sp, #28]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(State != NULL_PTR);
    #endif
    
    Base = Lpspi_Ip_apxBases[Instance];
    91d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    91d8:	4a3b      	ldr	r2, [pc, #236]	; (92c8 <Lpspi_Ip_AsyncTransmit+0x120>)
    91da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91de:	9306      	str	r3, [sp, #24]
    SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09();
    91e0:	f00d f93e 	bl	16460 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09>
    if (LPSPI_IP_BUSY == State->Status)
    91e4:	9b07      	ldr	r3, [sp, #28]
    91e6:	685b      	ldr	r3, [r3, #4]
    91e8:	2b02      	cmp	r3, #2
    91ea:	d104      	bne.n	91f6 <Lpspi_Ip_AsyncTransmit+0x4e>
    {
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09();
    91ec:	f00d f964 	bl	164b8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09>
        Status = LPSPI_IP_STATUS_FAIL;
    91f0:	2301      	movs	r3, #1
    91f2:	9309      	str	r3, [sp, #36]	; 0x24
    91f4:	e061      	b.n	92ba <Lpspi_Ip_AsyncTransmit+0x112>
        #if (STD_ON == LPSPI_IP_HALF_DUPLEX_MODE_SUPPORT)
        /* Clear some bits which support for half duplex mode at previous transfer */
        Base->CFGR1 &= ~(LPSPI_CFGR1_PCSCFG_MASK | LPSPI_CFGR1_OUTCFG_MASK | LPSPI_CFGR1_PINCFG_MASK);
        #endif
        /* Mark the hardware as busy. */
        State->Status = LPSPI_IP_BUSY;
    91f6:	9b07      	ldr	r3, [sp, #28]
    91f8:	2202      	movs	r2, #2
    91fa:	605a      	str	r2, [r3, #4]
        State->ExternalDevice = ExternalDevice;
    91fc:	9b07      	ldr	r3, [sp, #28]
    91fe:	9a05      	ldr	r2, [sp, #20]
    9200:	625a      	str	r2, [r3, #36]	; 0x24
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09();
    9202:	f00d f959 	bl	164b8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09>
        
        /* Update State structure. */
        State->Callback = EndCallback;
    9206:	9b07      	ldr	r3, [sp, #28]
    9208:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    920a:	611a      	str	r2, [r3, #16]
        State->NextTransferConfigAvailable = State->KeepCs;
    920c:	9b07      	ldr	r3, [sp, #28]
    920e:	7f1a      	ldrb	r2, [r3, #28]
    9210:	9b07      	ldr	r3, [sp, #28]
    9212:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Reset TX done flag */
        State->TxDoneFlag = FALSE;
    9216:	9b07      	ldr	r3, [sp, #28]
    9218:	2200      	movs	r2, #0
    921a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        
        /* Set clock configuration */
        if(TRUE == State->FirstCmd)
    921e:	9b07      	ldr	r3, [sp, #28]
    9220:	7f5b      	ldrb	r3, [r3, #29]
    9222:	2b00      	cmp	r3, #0
    9224:	d028      	beq.n	9278 <Lpspi_Ip_AsyncTransmit+0xd0>
        {
            SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11();
    9226:	f00d f9bf 	bl	165a8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11>
            /* Make sure that FIFOs will be empty before start new transfer session */
            Base->CR |= LPSPI_CR_RTF_MASK|LPSPI_CR_RRF_MASK;
    922a:	9b06      	ldr	r3, [sp, #24]
    922c:	691b      	ldr	r3, [r3, #16]
    922e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
    9232:	9b06      	ldr	r3, [sp, #24]
    9234:	611a      	str	r2, [r3, #16]
            /* clear all flags */
            Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    9236:	9b06      	ldr	r3, [sp, #24]
    9238:	695b      	ldr	r3, [r3, #20]
    923a:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    923e:	9b06      	ldr	r3, [sp, #24]
    9240:	615a      	str	r2, [r3, #20]
            #endif
            {
                #if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
                Base->CCR = ExternalDevice->Ccr[State->ClockMode];
                #else
                Base->CCR = ExternalDevice->Ccr;
    9242:	9b05      	ldr	r3, [sp, #20]
    9244:	685a      	ldr	r2, [r3, #4]
    9246:	9b06      	ldr	r3, [sp, #24]
    9248:	641a      	str	r2, [r3, #64]	; 0x40
                #endif
            }
            /* Update current FIFO slots are available to fill .*/
            State->CurrentTxFifoSlot = LPSPI_IP_FIFO_SIZE_U8;
    924a:	9b07      	ldr	r3, [sp, #28]
    924c:	2204      	movs	r2, #4
    924e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            /* In setting up Transmit command register, the RXMSK is also cleared */
            Lpspi_TransmitTxInit(Instance, (const uint8*)TxBuffer, State->ExternalDevice->DeviceParams->FrameSize, State->ExternalDevice->DeviceParams->Lsb, Length);
    9252:	9b07      	ldr	r3, [sp, #28]
    9254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9256:	68db      	ldr	r3, [r3, #12]
    9258:	881a      	ldrh	r2, [r3, #0]
    925a:	9b07      	ldr	r3, [sp, #28]
    925c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    925e:	68db      	ldr	r3, [r3, #12]
    9260:	7899      	ldrb	r1, [r3, #2]
    9262:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    9266:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    926a:	9300      	str	r3, [sp, #0]
    926c:	460b      	mov	r3, r1
    926e:	9904      	ldr	r1, [sp, #16]
    9270:	f7ff fea4 	bl	8fbc <Lpspi_TransmitTxInit>
            SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11();
    9274:	f00d f9c4 	bl	16600 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11>
        }
        Lpspi_TransmitRxInit(Instance, RxBuffer, State->ExternalDevice->DeviceParams->FrameSize, Length);
    9278:	9b07      	ldr	r3, [sp, #28]
    927a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    927c:	68db      	ldr	r3, [r3, #12]
    927e:	881a      	ldrh	r2, [r3, #0]
    9280:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    9284:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    9288:	9903      	ldr	r1, [sp, #12]
    928a:	f7ff ff37 	bl	90fc <Lpspi_TransmitRxInit>
            }
            else
            #endif
            {
                /* Set TX water */
                Base->FCR = LPSPI_FCR_TXWATER((uint32)LPSPI_IP_FIFO_SIZE_U8 - (uint32)1u);
    928e:	9b06      	ldr	r3, [sp, #24]
    9290:	2203      	movs	r2, #3
    9292:	659a      	str	r2, [r3, #88]	; 0x58
            }
            
            /* Disable DMA requests */
            Base->DER = 0u;
    9294:	9b06      	ldr	r3, [sp, #24]
    9296:	2200      	movs	r2, #0
    9298:	61da      	str	r2, [r3, #28]
            switch (State->TransferMode)
    929a:	9b07      	ldr	r3, [sp, #28]
    929c:	681b      	ldr	r3, [r3, #0]
    929e:	2b00      	cmp	r3, #0
    92a0:	d002      	beq.n	92a8 <Lpspi_Ip_AsyncTransmit+0x100>
    92a2:	2b01      	cmp	r3, #1
    92a4:	d004      	beq.n	92b0 <Lpspi_Ip_AsyncTransmit+0x108>
                case LPSPI_IP_INTERRUPT:
                    Base->IER = LPSPI_IER_RDIE_MASK | LPSPI_IER_TDIE_MASK | LPSPI_IER_REIE_MASK | LPSPI_IER_TEIE_MASK;
                    break;
                default:
                    /* Nothing to do */
                    break;
    92a6:	e008      	b.n	92ba <Lpspi_Ip_AsyncTransmit+0x112>
                    Base->IER = 0u;
    92a8:	9b06      	ldr	r3, [sp, #24]
    92aa:	2200      	movs	r2, #0
    92ac:	619a      	str	r2, [r3, #24]
                    break;
    92ae:	e004      	b.n	92ba <Lpspi_Ip_AsyncTransmit+0x112>
                    Base->IER = LPSPI_IER_RDIE_MASK | LPSPI_IER_TDIE_MASK | LPSPI_IER_REIE_MASK | LPSPI_IER_TEIE_MASK;
    92b0:	9b06      	ldr	r3, [sp, #24]
    92b2:	f641 0203 	movw	r2, #6147	; 0x1803
    92b6:	619a      	str	r2, [r3, #24]
                    break;
    92b8:	bf00      	nop
            /* Enable DMA request. */
            Base->DER = LPSPI_DER_RDDE_MASK | LPSPI_DER_TDDE_MASK;
        }
        #endif
    }
    return Status;
    92ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    92bc:	4618      	mov	r0, r3
    92be:	b00b      	add	sp, #44	; 0x2c
    92c0:	f85d fb04 	ldr.w	pc, [sp], #4
    92c4:	1fff8dd8 	.word	0x1fff8dd8
    92c8:	0001862c 	.word	0x0001862c

000092cc <Lpspi_Ip_ManageBuffers>:
}
#endif
#endif

void Lpspi_Ip_ManageBuffers(uint8 Instance)
{
    92cc:	b500      	push	{lr}
    92ce:	b085      	sub	sp, #20
    92d0:	4603      	mov	r3, r0
    92d2:	f88d 3007 	strb.w	r3, [sp, #7]
    #endif

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    Base = Lpspi_Ip_apxBases[Instance];
    92d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    92da:	4a14      	ldr	r2, [pc, #80]	; (932c <Lpspi_Ip_ManageBuffers+0x60>)
    92dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92e0:	9303      	str	r3, [sp, #12]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    92e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    92e6:	4a12      	ldr	r2, [pc, #72]	; (9330 <Lpspi_Ip_ManageBuffers+0x64>)
    92e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92ec:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    if (LPSPI_IP_POLLING == State->TransferMode)
    92ee:	9b02      	ldr	r3, [sp, #8]
    92f0:	681b      	ldr	r3, [r3, #0]
    92f2:	2b00      	cmp	r3, #0
    92f4:	d115      	bne.n	9322 <Lpspi_Ip_ManageBuffers+0x56>
                - Receive: Both TDF (push CDM) and DRF (receive data) are set.
               In half duplex Slave mode:
                - Transmit: TDF is set only, RDF will never be set by RX FIFO have masked.
                - Receive: Both TDF and RDF are set. But only process for RDF to receive data. In this case, State->CurrentTxFifoSlot will be set to 0 */
            if(
                (0u != (Base->SR & LPSPI_SR_RDF_MASK)) ||
    92f6:	9b03      	ldr	r3, [sp, #12]
    92f8:	695b      	ldr	r3, [r3, #20]
    92fa:	f003 0302 	and.w	r3, r3, #2
            if(
    92fe:	2b00      	cmp	r3, #0
    9300:	d10a      	bne.n	9318 <Lpspi_Ip_ManageBuffers+0x4c>
                ((0u != (Base->SR & LPSPI_SR_TDF_MASK)) && (0u!= State->CurrentTxFifoSlot))
    9302:	9b03      	ldr	r3, [sp, #12]
    9304:	695b      	ldr	r3, [r3, #20]
    9306:	f003 0301 	and.w	r3, r3, #1
                (0u != (Base->SR & LPSPI_SR_RDF_MASK)) ||
    930a:	2b00      	cmp	r3, #0
    930c:	d009      	beq.n	9322 <Lpspi_Ip_ManageBuffers+0x56>
                ((0u != (Base->SR & LPSPI_SR_TDF_MASK)) && (0u!= State->CurrentTxFifoSlot))
    930e:	9b02      	ldr	r3, [sp, #8]
    9310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    9314:	2b00      	cmp	r3, #0
    9316:	d004      	beq.n	9322 <Lpspi_Ip_ManageBuffers+0x56>
                    Lpspi_Ip_TransferProcessHalfDuplex(Instance);
                }
                else
                #endif
                {
                    Lpspi_Ip_TransferProcess(Instance); 
    9318:	f89d 3007 	ldrb.w	r3, [sp, #7]
    931c:	4618      	mov	r0, r3
    931e:	f7ff f8cd 	bl	84bc <Lpspi_Ip_TransferProcess>
                Lpspi_Ip_IrqTxDmaHandler(Instance);
            }
        }
        #endif
    }
}
    9322:	bf00      	nop
    9324:	b005      	add	sp, #20
    9326:	f85d fb04 	ldr.w	pc, [sp], #4
    932a:	bf00      	nop
    932c:	0001862c 	.word	0x0001862c
    9330:	1fff8dd8 	.word	0x1fff8dd8

00009334 <Lpspi_Ip_UpdateFrameSize>:
/*================================================================================================*/
Lpspi_Ip_StatusType Lpspi_Ip_UpdateFrameSize(const Lpspi_Ip_ExternalDeviceType *ExternalDevice, uint16 FrameSize)
{
    9334:	b084      	sub	sp, #16
    9336:	9001      	str	r0, [sp, #4]
    9338:	460b      	mov	r3, r1
    933a:	f8ad 3002 	strh.w	r3, [sp, #2]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    933e:	2300      	movs	r3, #0
    9340:	9303      	str	r3, [sp, #12]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != ExternalDevice);
    DevAssert(LPSPI_IP_FRAMESIZE_MAX_U16 >= FrameSize);
    DevAssert(LPSPI_IP_FRAMESIZE_MIN_U16 <= FrameSize);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[ExternalDevice->Instance];
    9342:	9b01      	ldr	r3, [sp, #4]
    9344:	781b      	ldrb	r3, [r3, #0]
    9346:	461a      	mov	r2, r3
    9348:	4b09      	ldr	r3, [pc, #36]	; (9370 <Lpspi_Ip_UpdateFrameSize+0x3c>)
    934a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    934e:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Frame size can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    9350:	9b02      	ldr	r3, [sp, #8]
    9352:	685b      	ldr	r3, [r3, #4]
    9354:	2b02      	cmp	r3, #2
    9356:	d005      	beq.n	9364 <Lpspi_Ip_UpdateFrameSize+0x30>
    {
        ExternalDevice->DeviceParams->FrameSize = FrameSize;
    9358:	9b01      	ldr	r3, [sp, #4]
    935a:	68db      	ldr	r3, [r3, #12]
    935c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    9360:	801a      	strh	r2, [r3, #0]
    9362:	e001      	b.n	9368 <Lpspi_Ip_UpdateFrameSize+0x34>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    9364:	2301      	movs	r3, #1
    9366:	9303      	str	r3, [sp, #12]
    }
    return Status;
    9368:	9b03      	ldr	r3, [sp, #12]
}
    936a:	4618      	mov	r0, r3
    936c:	b004      	add	sp, #16
    936e:	4770      	bx	lr
    9370:	1fff8dd8 	.word	0x1fff8dd8

00009374 <Lpspi_Ip_UpdateLsb>:

Lpspi_Ip_StatusType Lpspi_Ip_UpdateLsb(const Lpspi_Ip_ExternalDeviceType *ExternalDevice, boolean Lsb)
{
    9374:	b084      	sub	sp, #16
    9376:	9001      	str	r0, [sp, #4]
    9378:	460b      	mov	r3, r1
    937a:	f88d 3003 	strb.w	r3, [sp, #3]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    937e:	2300      	movs	r3, #0
    9380:	9303      	str	r3, [sp, #12]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != ExternalDevice);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[ExternalDevice->Instance];
    9382:	9b01      	ldr	r3, [sp, #4]
    9384:	781b      	ldrb	r3, [r3, #0]
    9386:	461a      	mov	r2, r3
    9388:	4b09      	ldr	r3, [pc, #36]	; (93b0 <Lpspi_Ip_UpdateLsb+0x3c>)
    938a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    938e:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Bite order can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    9390:	9b02      	ldr	r3, [sp, #8]
    9392:	685b      	ldr	r3, [r3, #4]
    9394:	2b02      	cmp	r3, #2
    9396:	d005      	beq.n	93a4 <Lpspi_Ip_UpdateLsb+0x30>
    {
        ExternalDevice->DeviceParams->Lsb = Lsb;
    9398:	9b01      	ldr	r3, [sp, #4]
    939a:	68db      	ldr	r3, [r3, #12]
    939c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    93a0:	709a      	strb	r2, [r3, #2]
    93a2:	e001      	b.n	93a8 <Lpspi_Ip_UpdateLsb+0x34>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    93a4:	2301      	movs	r3, #1
    93a6:	9303      	str	r3, [sp, #12]
    }
    return Status;
    93a8:	9b03      	ldr	r3, [sp, #12]
}
    93aa:	4618      	mov	r0, r3
    93ac:	b004      	add	sp, #16
    93ae:	4770      	bx	lr
    93b0:	1fff8dd8 	.word	0x1fff8dd8

000093b4 <Lpspi_Ip_UpdateDefaultTransmitData>:

Lpspi_Ip_StatusType Lpspi_Ip_UpdateDefaultTransmitData(const Lpspi_Ip_ExternalDeviceType *ExternalDevice, uint32 DefaultData)
{
    93b4:	b084      	sub	sp, #16
    93b6:	9001      	str	r0, [sp, #4]
    93b8:	9100      	str	r1, [sp, #0]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    93ba:	2300      	movs	r3, #0
    93bc:	9303      	str	r3, [sp, #12]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != ExternalDevice);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[ExternalDevice->Instance];
    93be:	9b01      	ldr	r3, [sp, #4]
    93c0:	781b      	ldrb	r3, [r3, #0]
    93c2:	461a      	mov	r2, r3
    93c4:	4b09      	ldr	r3, [pc, #36]	; (93ec <Lpspi_Ip_UpdateDefaultTransmitData+0x38>)
    93c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    93ca:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Bite order can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    93cc:	9b02      	ldr	r3, [sp, #8]
    93ce:	685b      	ldr	r3, [r3, #4]
    93d0:	2b02      	cmp	r3, #2
    93d2:	d004      	beq.n	93de <Lpspi_Ip_UpdateDefaultTransmitData+0x2a>
    {
        ExternalDevice->DeviceParams->DefaultData = DefaultData;
    93d4:	9b01      	ldr	r3, [sp, #4]
    93d6:	68db      	ldr	r3, [r3, #12]
    93d8:	9a00      	ldr	r2, [sp, #0]
    93da:	605a      	str	r2, [r3, #4]
    93dc:	e001      	b.n	93e2 <Lpspi_Ip_UpdateDefaultTransmitData+0x2e>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    93de:	2301      	movs	r3, #1
    93e0:	9303      	str	r3, [sp, #12]
    }
    return Status;
    93e2:	9b03      	ldr	r3, [sp, #12]
}
    93e4:	4618      	mov	r0, r3
    93e6:	b004      	add	sp, #16
    93e8:	4770      	bx	lr
    93ea:	bf00      	nop
    93ec:	1fff8dd8 	.word	0x1fff8dd8

000093f0 <Lpspi_Ip_UpdateTransferMode>:

Lpspi_Ip_StatusType Lpspi_Ip_UpdateTransferMode(uint8 Instance, Lpspi_Ip_ModeType Mode)
{
    93f0:	b084      	sub	sp, #16
    93f2:	4603      	mov	r3, r0
    93f4:	9100      	str	r1, [sp, #0]
    93f6:	f88d 3007 	strb.w	r3, [sp, #7]
    Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    93fa:	2300      	movs	r3, #0
    93fc:	9303      	str	r3, [sp, #12]

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    93fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9402:	4a09      	ldr	r2, [pc, #36]	; (9428 <Lpspi_Ip_UpdateTransferMode+0x38>)
    9404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9408:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Transfer mode can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    940a:	9b02      	ldr	r3, [sp, #8]
    940c:	685b      	ldr	r3, [r3, #4]
    940e:	2b02      	cmp	r3, #2
    9410:	d003      	beq.n	941a <Lpspi_Ip_UpdateTransferMode+0x2a>
    {
        State->TransferMode = Mode;
    9412:	9b02      	ldr	r3, [sp, #8]
    9414:	9a00      	ldr	r2, [sp, #0]
    9416:	601a      	str	r2, [r3, #0]
    9418:	e001      	b.n	941e <Lpspi_Ip_UpdateTransferMode+0x2e>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    941a:	2301      	movs	r3, #1
    941c:	9303      	str	r3, [sp, #12]
    }
    return Status;
    941e:	9b03      	ldr	r3, [sp, #12]
}
    9420:	4618      	mov	r0, r3
    9422:	b004      	add	sp, #16
    9424:	4770      	bx	lr
    9426:	bf00      	nop
    9428:	1fff8dd8 	.word	0x1fff8dd8

0000942c <Lpspi_Ip_Cancel>:

void Lpspi_Ip_Cancel(uint8 Instance)
{
    942c:	b500      	push	{lr}
    942e:	b087      	sub	sp, #28
    9430:	4603      	mov	r3, r0
    9432:	f88d 3007 	strb.w	r3, [sp, #7]
    LPSPI_Type* Base;
    Lpspi_Ip_StateStructureType* State;
    uint32 Cfgr1 = 0u;
    9436:	2300      	movs	r3, #0
    9438:	9305      	str	r3, [sp, #20]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    Base = Lpspi_Ip_apxBases[Instance];
    943a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    943e:	4a18      	ldr	r2, [pc, #96]	; (94a0 <Lpspi_Ip_Cancel+0x74>)
    9440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9444:	9304      	str	r3, [sp, #16]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    9446:	f89d 3007 	ldrb.w	r3, [sp, #7]
    944a:	4a16      	ldr	r2, [pc, #88]	; (94a4 <Lpspi_Ip_Cancel+0x78>)
    944c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9450:	9303      	str	r3, [sp, #12]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10();
    9452:	f00d f857 	bl	16504 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10>
    if (LPSPI_IP_BUSY == State->Status)
    9456:	9b03      	ldr	r3, [sp, #12]
    9458:	685b      	ldr	r3, [r3, #4]
    945a:	2b02      	cmp	r3, #2
    945c:	d11a      	bne.n	9494 <Lpspi_Ip_Cancel+0x68>
    {
        /* Mask Rx to discard received data */
        Base->TCR |= LPSPI_TCR_RXMSK(1);
    945e:	9b04      	ldr	r3, [sp, #16]
    9460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    9462:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
    9466:	9b04      	ldr	r3, [sp, #16]
    9468:	661a      	str	r2, [r3, #96]	; 0x60
        /* store CFGR1 and restore after all registers are reset */
        Cfgr1 = Base->CFGR1;
    946a:	9b04      	ldr	r3, [sp, #16]
    946c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    946e:	9305      	str	r3, [sp, #20]
        /* Disable interrupts and DMA requests. */
        /* Clear FIFO */
        /* RTF and RRF will not clear shifter, so RST must be used to ensure old Data in shifter will also be cleared. */
        Base->CR |= LPSPI_CR_RST_MASK;
    9470:	9b04      	ldr	r3, [sp, #16]
    9472:	691b      	ldr	r3, [r3, #16]
    9474:	f043 0202 	orr.w	r2, r3, #2
    9478:	9b04      	ldr	r3, [sp, #16]
    947a:	611a      	str	r2, [r3, #16]
        Base->CR &= ~LPSPI_CR_RST_MASK;
    947c:	9b04      	ldr	r3, [sp, #16]
    947e:	691b      	ldr	r3, [r3, #16]
    9480:	f023 0202 	bic.w	r2, r3, #2
    9484:	9b04      	ldr	r3, [sp, #16]
    9486:	611a      	str	r2, [r3, #16]
        /* restore CFGR1 */
        Base->CFGR1 = Cfgr1;
    9488:	9b04      	ldr	r3, [sp, #16]
    948a:	9a05      	ldr	r2, [sp, #20]
    948c:	625a      	str	r2, [r3, #36]	; 0x24
            (void)Dma_Ip_SetLogicChannelCommand(State->PhyUnitConfig->RxDmaChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
            (void)Dma_Ip_SetLogicChannelCommand(State->PhyUnitConfig->TxDmaChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
        #endif
        /* set State to idle */
        State->Status = LPSPI_IP_IDLE;
    948e:	9b03      	ldr	r3, [sp, #12]
    9490:	2201      	movs	r2, #1
    9492:	605a      	str	r2, [r3, #4]
    }
    SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10();
    9494:	f00d f862 	bl	1655c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10>
}
    9498:	bf00      	nop
    949a:	b007      	add	sp, #28
    949c:	f85d fb04 	ldr.w	pc, [sp], #4
    94a0:	0001862c 	.word	0x0001862c
    94a4:	1fff8dd8 	.word	0x1fff8dd8

000094a8 <Lpspi_Ip_IrqHandler>:
* @param[in]     Instance            Instance of the hardware unit.
*
* @implements Lpspi_Ip_IrqHandler_Activity
*/
void Lpspi_Ip_IrqHandler(uint8 Instance)
{
    94a8:	b500      	push	{lr}
    94aa:	b087      	sub	sp, #28
    94ac:	4603      	mov	r3, r0
    94ae:	f88d 3007 	strb.w	r3, [sp, #7]
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    94b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    94b6:	4a18      	ldr	r2, [pc, #96]	; (9518 <Lpspi_Ip_IrqHandler+0x70>)
    94b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94bc:	9305      	str	r3, [sp, #20]
    const Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    94be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    94c2:	4a16      	ldr	r2, [pc, #88]	; (951c <Lpspi_Ip_IrqHandler+0x74>)
    94c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94c8:	9304      	str	r3, [sp, #16]
    uint32 IrqFlags = 0u;
    94ca:	2300      	movs	r3, #0
    94cc:	9303      	str	r3, [sp, #12]

    if (NULL_PTR != State)
    94ce:	9b04      	ldr	r3, [sp, #16]
    94d0:	2b00      	cmp	r3, #0
    94d2:	d016      	beq.n	9502 <Lpspi_Ip_IrqHandler+0x5a>
    {
        /* the driver has been initialized */
        IrqFlags = Base->SR & (LPSPI_SR_TDF_MASK | LPSPI_SR_RDF_MASK | LPSPI_SR_TEF_MASK | LPSPI_SR_REF_MASK);
    94d4:	9b05      	ldr	r3, [sp, #20]
    94d6:	695a      	ldr	r2, [r3, #20]
    94d8:	f641 0303 	movw	r3, #6147	; 0x1803
    94dc:	4013      	ands	r3, r2
    94de:	9303      	str	r3, [sp, #12]
        IrqFlags &= Base->IER & (LPSPI_IER_TDIE_MASK | LPSPI_IER_RDIE_MASK | LPSPI_IER_TEIE_MASK | LPSPI_IER_REIE_MASK);
    94e0:	9b05      	ldr	r3, [sp, #20]
    94e2:	699a      	ldr	r2, [r3, #24]
    94e4:	f641 0303 	movw	r3, #6147	; 0x1803
    94e8:	4013      	ands	r3, r2
    94ea:	9a03      	ldr	r2, [sp, #12]
    94ec:	4013      	ands	r3, r2
    94ee:	9303      	str	r3, [sp, #12]
        if (0u != IrqFlags)
    94f0:	9b03      	ldr	r3, [sp, #12]
    94f2:	2b00      	cmp	r3, #0
    94f4:	d00b      	beq.n	950e <Lpspi_Ip_IrqHandler+0x66>
                Lpspi_Ip_TransferProcessHalfDuplex(Instance);    
            }
            else
            #endif
            {
                Lpspi_Ip_TransferProcess(Instance); 
    94f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    94fa:	4618      	mov	r0, r3
    94fc:	f7fe ffde 	bl	84bc <Lpspi_Ip_TransferProcess>
    {
        /* the driver has not been initialized */
        /* clear all flags */
        Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    }
}
    9500:	e005      	b.n	950e <Lpspi_Ip_IrqHandler+0x66>
        Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    9502:	9b05      	ldr	r3, [sp, #20]
    9504:	695b      	ldr	r3, [r3, #20]
    9506:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    950a:	9b05      	ldr	r3, [sp, #20]
    950c:	615a      	str	r2, [r3, #20]
}
    950e:	bf00      	nop
    9510:	b007      	add	sp, #28
    9512:	f85d fb04 	ldr.w	pc, [sp], #4
    9516:	bf00      	nop
    9518:	0001862c 	.word	0x0001862c
    951c:	1fff8dd8 	.word	0x1fff8dd8

00009520 <Lpspi_Ip_GetStatus>:
* @param[in]        Instance - SPI peripheral instance number.
*
* @return           Lpspi_Ip_HwStatusType
*/
Lpspi_Ip_HwStatusType Lpspi_Ip_GetStatus(uint8 Instance)
{
    9520:	b084      	sub	sp, #16
    9522:	4603      	mov	r3, r0
    9524:	f88d 3007 	strb.w	r3, [sp, #7]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_HwStatusType Status = LPSPI_IP_UNINIT;
    9528:	2300      	movs	r3, #0
    952a:	9303      	str	r3, [sp, #12]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    952c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9530:	4a06      	ldr	r2, [pc, #24]	; (954c <Lpspi_Ip_GetStatus+0x2c>)
    9532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9536:	9302      	str	r3, [sp, #8]
    if (State != NULL_PTR)
    9538:	9b02      	ldr	r3, [sp, #8]
    953a:	2b00      	cmp	r3, #0
    953c:	d002      	beq.n	9544 <Lpspi_Ip_GetStatus+0x24>
    {
        Status = State->Status;
    953e:	9b02      	ldr	r3, [sp, #8]
    9540:	685b      	ldr	r3, [r3, #4]
    9542:	9303      	str	r3, [sp, #12]
    }
    
    return Status;
    9544:	9b03      	ldr	r3, [sp, #12]
}
    9546:	4618      	mov	r0, r3
    9548:	b004      	add	sp, #16
    954a:	4770      	bx	lr
    954c:	1fff8dd8 	.word	0x1fff8dd8

00009550 <Spi_CheckInit>:
static inline Std_ReturnType Spi_CheckInit
    ( 
        const Spi_ConfigType *ConfigPtr,
        uint32 SpiCoreID
    )
{
    9550:	b086      	sub	sp, #24
    9552:	9001      	str	r0, [sp, #4]
    9554:	9100      	str	r1, [sp, #0]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    9556:	2300      	movs	r3, #0
    9558:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 Sequence;
#endif

#if (SPI_PRECOMPILE_SUPPORT == STD_OFF)
    /* Configuration sizes must be checked for Post Build & Link Time configurations */
    Channel  = (uint32)(ConfigPtr->SpiMaxChannel);
    955c:	9b01      	ldr	r3, [sp, #4]
    955e:	789b      	ldrb	r3, [r3, #2]
    9560:	9304      	str	r3, [sp, #16]
    Job      = (uint32)(ConfigPtr->SpiMaxJob);
    9562:	9b01      	ldr	r3, [sp, #4]
    9564:	889b      	ldrh	r3, [r3, #4]
    9566:	9303      	str	r3, [sp, #12]
    Sequence = (uint32)(ConfigPtr->SpiMaxSequence);
    9568:	9b01      	ldr	r3, [sp, #4]
    956a:	799b      	ldrb	r3, [r3, #6]
    956c:	9302      	str	r3, [sp, #8]

    if ((Channel >= SPI_MAX_CHANNEL) || (Job >= SPI_MAX_JOB) || (Sequence >= SPI_MAX_SEQUENCE))
    956e:	9b04      	ldr	r3, [sp, #16]
    9570:	2b01      	cmp	r3, #1
    9572:	d805      	bhi.n	9580 <Spi_CheckInit+0x30>
    9574:	9b03      	ldr	r3, [sp, #12]
    9576:	2b00      	cmp	r3, #0
    9578:	d102      	bne.n	9580 <Spi_CheckInit+0x30>
    957a:	9b02      	ldr	r3, [sp, #8]
    957c:	2b00      	cmp	r3, #0
    957e:	d002      	beq.n	9586 <Spi_CheckInit+0x36>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    9580:	2301      	movs	r3, #1
    9582:	f88d 3017 	strb.w	r3, [sp, #23]
#if (SPI_DEV_ERROR_DETECT == STD_ON)
        /* Call Det_ReportError */
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_INIT_ID,SPI_E_CONFIG_OUT_OF_RANGE);
#endif
    }
    if (SpiCoreID != ConfigPtr->SpiCoreUse)
    9586:	9b01      	ldr	r3, [sp, #4]
    9588:	689b      	ldr	r3, [r3, #8]
    958a:	9a00      	ldr	r2, [sp, #0]
    958c:	429a      	cmp	r2, r3
    958e:	d002      	beq.n	9596 <Spi_CheckInit+0x46>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    9590:	2301      	movs	r3, #1
    9592:	f88d 3017 	strb.w	r3, [sp, #23]
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_INIT_ID,SPI_E_INVALID_POINTER);
#endif
    }
#endif /* (SPI_PRECOMPILE_SUPPORT == STD_OFF) */

    return CheckStatus;
    9596:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    959a:	4618      	mov	r0, r3
    959c:	b006      	add	sp, #24
    959e:	4770      	bx	lr

000095a0 <Spi_SyncJobsTranfer>:
static Std_ReturnType Spi_SyncJobsTranfer
    (
        const Spi_SequenceConfigType *SequenceConfig,
        uint32 SpiCoreID
    )
{
    95a0:	b500      	push	{lr}
    95a2:	b089      	sub	sp, #36	; 0x24
    95a4:	9001      	str	r0, [sp, #4]
    95a6:	9100      	str	r1, [sp, #0]
    Spi_JobType JobsCount;
    const Spi_JobType *JobIndexList;
    Spi_JobType Job;
    Spi_JobStateType *JobState;
    const Spi_JobConfigType *JobConfig;
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    95a8:	2300      	movs	r3, #0
    95aa:	f88d 3017 	strb.w	r3, [sp, #23]
    
    /* Get the number of jobs in the sequence */
    JobsCount = SequenceConfig->NumJobs;
    95ae:	9b01      	ldr	r3, [sp, #4]
    95b0:	881b      	ldrh	r3, [r3, #0]
    95b2:	f8ad 301e 	strh.w	r3, [sp, #30]
    JobIndexList = SequenceConfig->JobIndexList;
    95b6:	9b01      	ldr	r3, [sp, #4]
    95b8:	689b      	ldr	r3, [r3, #8]
    95ba:	9306      	str	r3, [sp, #24]
    while (0u < JobsCount)
    95bc:	e072      	b.n	96a4 <Spi_SyncJobsTranfer+0x104>
    {
        /* Get the job id */
        Job = *JobIndexList;
    95be:	9b06      	ldr	r3, [sp, #24]
    95c0:	881b      	ldrh	r3, [r3, #0]
    95c2:	f8ad 3014 	strh.w	r3, [sp, #20]
        /* Set the job status as pending */
        JobState = &Spi_axSpiJobState[Job];
    95c6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    95ca:	009b      	lsls	r3, r3, #2
    95cc:	4a3a      	ldr	r2, [pc, #232]	; (96b8 <Spi_SyncJobsTranfer+0x118>)
    95ce:	4413      	add	r3, r2
    95d0:	9304      	str	r3, [sp, #16]
        JobState->Result = SPI_JOB_PENDING;
    95d2:	9b04      	ldr	r3, [sp, #16]
    95d4:	2201      	movs	r2, #1
    95d6:	601a      	str	r2, [r3, #0]
        JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    95d8:	4a38      	ldr	r2, [pc, #224]	; (96bc <Spi_SyncJobsTranfer+0x11c>)
    95da:	9b00      	ldr	r3, [sp, #0]
    95dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95e0:	691a      	ldr	r2, [r3, #16]
    95e2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    95e6:	009b      	lsls	r3, r3, #2
    95e8:	4413      	add	r3, r2
    95ea:	681b      	ldr	r3, [r3, #0]
    95ec:	9303      	str	r3, [sp, #12]
        
        /* start job notification to assert the non-cs pin,
        when non-cs pin is used as chipselect*/
        if (NULL_PTR != JobConfig->StartNotification)
    95ee:	9b03      	ldr	r3, [sp, #12]
    95f0:	68db      	ldr	r3, [r3, #12]
    95f2:	2b00      	cmp	r3, #0
    95f4:	d002      	beq.n	95fc <Spi_SyncJobsTranfer+0x5c>
        {
            JobConfig->StartNotification();
    95f6:	9b03      	ldr	r3, [sp, #12]
    95f8:	68db      	ldr	r3, [r3, #12]
    95fa:	4798      	blx	r3
        else
        {
            /* Do nothing */
        }
        /* Mark HWUnit as busy */
        Spi_axSpiHwUnitQueueArray[JobConfig->HWUnit].Status = SPI_BUSY;
    95fc:	9b03      	ldr	r3, [sp, #12]
    95fe:	7f1b      	ldrb	r3, [r3, #28]
    9600:	4619      	mov	r1, r3
    9602:	4b2f      	ldr	r3, [pc, #188]	; (96c0 <Spi_SyncJobsTranfer+0x120>)
    9604:	2202      	movs	r2, #2
    9606:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        
        Status = Spi_Ipw_SyncTransmit(JobConfig, SpiCoreID);
    960a:	9900      	ldr	r1, [sp, #0]
    960c:	9803      	ldr	r0, [sp, #12]
    960e:	f000 fc5f 	bl	9ed0 <Spi_Ipw_SyncTransmit>
    9612:	4603      	mov	r3, r0
    9614:	f88d 3017 	strb.w	r3, [sp, #23]
        
        /* release HWUnit */
        Spi_axSpiHwUnitQueueArray[JobConfig->HWUnit].Status = SPI_IDLE;
    9618:	9b03      	ldr	r3, [sp, #12]
    961a:	7f1b      	ldrb	r3, [r3, #28]
    961c:	4619      	mov	r1, r3
    961e:	4b28      	ldr	r3, [pc, #160]	; (96c0 <Spi_SyncJobsTranfer+0x120>)
    9620:	2201      	movs	r2, #1
    9622:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        
        if ((Std_ReturnType)E_OK == Status)
    9626:	f89d 3017 	ldrb.w	r3, [sp, #23]
    962a:	2b00      	cmp	r3, #0
    962c:	d10a      	bne.n	9644 <Spi_SyncJobsTranfer+0xa4>
        {
            /* Job is done set the status as OK */
            JobState->Result = SPI_JOB_OK;
    962e:	9b04      	ldr	r3, [sp, #16]
    9630:	2200      	movs	r2, #0
    9632:	601a      	str	r2, [r3, #0]
            /* Perform job EndNotification (if there is one) */
            if (NULL_PTR != JobConfig->EndNotification)
    9634:	9b03      	ldr	r3, [sp, #12]
    9636:	689b      	ldr	r3, [r3, #8]
    9638:	2b00      	cmp	r3, #0
    963a:	d02b      	beq.n	9694 <Spi_SyncJobsTranfer+0xf4>
            {
                JobConfig->EndNotification();
    963c:	9b03      	ldr	r3, [sp, #12]
    963e:	689b      	ldr	r3, [r3, #8]
    9640:	4798      	blx	r3
    9642:	e027      	b.n	9694 <Spi_SyncJobsTranfer+0xf4>
            /* transmission failed */
            /* set the remaining job status (including the current one) as FAILED */
            do
            {
                /* Set the job status as FAILED */
                Spi_axSpiJobState[*JobIndexList].Result = SPI_JOB_FAILED;
    9644:	9b06      	ldr	r3, [sp, #24]
    9646:	881b      	ldrh	r3, [r3, #0]
    9648:	4619      	mov	r1, r3
    964a:	4b1b      	ldr	r3, [pc, #108]	; (96b8 <Spi_SyncJobsTranfer+0x118>)
    964c:	2202      	movs	r2, #2
    964e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                /* Update pointer position for JobConfig */
                JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[*JobIndexList].JobCfg;
    9652:	4a1a      	ldr	r2, [pc, #104]	; (96bc <Spi_SyncJobsTranfer+0x11c>)
    9654:	9b00      	ldr	r3, [sp, #0]
    9656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    965a:	691a      	ldr	r2, [r3, #16]
    965c:	9b06      	ldr	r3, [sp, #24]
    965e:	881b      	ldrh	r3, [r3, #0]
    9660:	009b      	lsls	r3, r3, #2
    9662:	4413      	add	r3, r2
    9664:	681b      	ldr	r3, [r3, #0]
    9666:	9303      	str	r3, [sp, #12]
                /* Perform job EndNotification (if there is one) */
                if (NULL_PTR != JobConfig->EndNotification)
    9668:	9b03      	ldr	r3, [sp, #12]
    966a:	689b      	ldr	r3, [r3, #8]
    966c:	2b00      	cmp	r3, #0
    966e:	d002      	beq.n	9676 <Spi_SyncJobsTranfer+0xd6>
                {
                    JobConfig->EndNotification();
    9670:	9b03      	ldr	r3, [sp, #12]
    9672:	689b      	ldr	r3, [r3, #8]
    9674:	4798      	blx	r3
                }
                else
                {
                    /* Do nothing */
                }
                JobIndexList++;
    9676:	9b06      	ldr	r3, [sp, #24]
    9678:	3302      	adds	r3, #2
    967a:	9306      	str	r3, [sp, #24]
                JobsCount--;
    967c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    9680:	3b01      	subs	r3, #1
    9682:	f8ad 301e 	strh.w	r3, [sp, #30]
            } while (0u < JobsCount);
    9686:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    968a:	2b00      	cmp	r3, #0
    968c:	d1da      	bne.n	9644 <Spi_SyncJobsTranfer+0xa4>
            JobsCount = 1u;  /* needed to end correctly the outer loop */
    968e:	2301      	movs	r3, #1
    9690:	f8ad 301e 	strh.w	r3, [sp, #30]
        }
        /* iterate to next job in sequence */
        JobIndexList++;
    9694:	9b06      	ldr	r3, [sp, #24]
    9696:	3302      	adds	r3, #2
    9698:	9306      	str	r3, [sp, #24]
        JobsCount--;
    969a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    969e:	3b01      	subs	r3, #1
    96a0:	f8ad 301e 	strh.w	r3, [sp, #30]
    while (0u < JobsCount)
    96a4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    96a8:	2b00      	cmp	r3, #0
    96aa:	d188      	bne.n	95be <Spi_SyncJobsTranfer+0x1e>
    } /* while (JobsCount > 0u) */
    return Status;
    96ac:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    96b0:	4618      	mov	r0, r3
    96b2:	b009      	add	sp, #36	; 0x24
    96b4:	f85d fb04 	ldr.w	pc, [sp], #4
    96b8:	1fff8df4 	.word	0x1fff8df4
    96bc:	1fff8dec 	.word	0x1fff8dec
    96c0:	1fff8de4 	.word	0x1fff8de4

000096c4 <Spi_InitChannelsJobsSeqsState>:
*/
static void Spi_InitChannelsJobsSeqsState
    (
        uint32 SpiCoreID      
    )
{
    96c4:	b088      	sub	sp, #32
    96c6:	9001      	str	r0, [sp, #4]
#endif
    const Spi_ChannelConfigType *ChannelConfig;
    const Spi_JobConfigType *JobConfig;
    const Spi_SequenceConfigType *SequenceConfig;
    
    for (Channel = 0u;
    96c8:	2300      	movs	r3, #0
    96ca:	9307      	str	r3, [sp, #28]
    96cc:	e034      	b.n	9738 <Spi_InitChannelsJobsSeqsState+0x74>
        Channel <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxChannel);
        Channel++)
    {
        ChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[Channel].ChannelCfg;
    96ce:	4a4a      	ldr	r2, [pc, #296]	; (97f8 <Spi_InitChannelsJobsSeqsState+0x134>)
    96d0:	9b01      	ldr	r3, [sp, #4]
    96d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96d6:	68da      	ldr	r2, [r3, #12]
    96d8:	9b07      	ldr	r3, [sp, #28]
    96da:	009b      	lsls	r3, r3, #2
    96dc:	4413      	add	r3, r2
    96de:	681b      	ldr	r3, [r3, #0]
    96e0:	9302      	str	r3, [sp, #8]
        /* Check which channel has assigned for current core */
        if((NULL_PTR != ChannelConfig) && (SpiCoreID == ChannelConfig->SpiCoreUse))
    96e2:	9b02      	ldr	r3, [sp, #8]
    96e4:	2b00      	cmp	r3, #0
    96e6:	d024      	beq.n	9732 <Spi_InitChannelsJobsSeqsState+0x6e>
    96e8:	9b02      	ldr	r3, [sp, #8]
    96ea:	695b      	ldr	r3, [r3, #20]
    96ec:	9a01      	ldr	r2, [sp, #4]
    96ee:	429a      	cmp	r2, r3
    96f0:	d11f      	bne.n	9732 <Spi_InitChannelsJobsSeqsState+0x6e>
        {
            /* Check if configured buffers are External (EB) */
            if (EB == ChannelConfig->BufferType)
    96f2:	9b02      	ldr	r3, [sp, #8]
    96f4:	681b      	ldr	r3, [r3, #0]
    96f6:	2b01      	cmp	r3, #1
    96f8:	d10e      	bne.n	9718 <Spi_InitChannelsJobsSeqsState+0x54>
            {
                /* Initialize all buffers */
                ChannelConfig->BufferDescriptor->ExternalBufferTX = NULL_PTR;
    96fa:	9b02      	ldr	r3, [sp, #8]
    96fc:	691b      	ldr	r3, [r3, #16]
    96fe:	2200      	movs	r2, #0
    9700:	601a      	str	r2, [r3, #0]
                ChannelConfig->BufferDescriptor->BufferRX = NULL_PTR;
    9702:	9b02      	ldr	r3, [sp, #8]
    9704:	691b      	ldr	r3, [r3, #16]
    9706:	2200      	movs	r2, #0
    9708:	609a      	str	r2, [r3, #8]
    
                /* Channel length is zero for unconfigured external buffers */
                Spi_axSpiChannelState[Channel].Length = (Spi_NumberOfDataType) 0;
    970a:	4a3c      	ldr	r2, [pc, #240]	; (97fc <Spi_InitChannelsJobsSeqsState+0x138>)
    970c:	9b07      	ldr	r3, [sp, #28]
    970e:	009b      	lsls	r3, r3, #2
    9710:	4413      	add	r3, r2
    9712:	2200      	movs	r2, #0
    9714:	805a      	strh	r2, [r3, #2]
    9716:	e007      	b.n	9728 <Spi_InitChannelsJobsSeqsState+0x64>
            }
            else
            {
                /* Setup channel length according to configuration */
                Spi_axSpiChannelState[Channel].Length = ChannelConfig->Length;
    9718:	9b02      	ldr	r3, [sp, #8]
    971a:	8999      	ldrh	r1, [r3, #12]
    971c:	4a37      	ldr	r2, [pc, #220]	; (97fc <Spi_InitChannelsJobsSeqsState+0x138>)
    971e:	9b07      	ldr	r3, [sp, #28]
    9720:	009b      	lsls	r3, r3, #2
    9722:	4413      	add	r3, r2
    9724:	460a      	mov	r2, r1
    9726:	805a      	strh	r2, [r3, #2]
            }
            Spi_axSpiChannelState[Channel].Flags = SPI_CHANNEL_FLAG_TX_DEFAULT_U8;
    9728:	4a34      	ldr	r2, [pc, #208]	; (97fc <Spi_InitChannelsJobsSeqsState+0x138>)
    972a:	9b07      	ldr	r3, [sp, #28]
    972c:	2101      	movs	r1, #1
    972e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        Channel++)
    9732:	9b07      	ldr	r3, [sp, #28]
    9734:	3301      	adds	r3, #1
    9736:	9307      	str	r3, [sp, #28]
        Channel <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxChannel);
    9738:	4a2f      	ldr	r2, [pc, #188]	; (97f8 <Spi_InitChannelsJobsSeqsState+0x134>)
    973a:	9b01      	ldr	r3, [sp, #4]
    973c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9740:	789b      	ldrb	r3, [r3, #2]
    9742:	461a      	mov	r2, r3
    for (Channel = 0u;
    9744:	9b07      	ldr	r3, [sp, #28]
    9746:	4293      	cmp	r3, r2
    9748:	d9c1      	bls.n	96ce <Spi_InitChannelsJobsSeqsState+0xa>
        }
    }
    
    /* initialize job results */
    for (Job = 0u;
    974a:	2300      	movs	r3, #0
    974c:	9306      	str	r3, [sp, #24]
    974e:	e019      	b.n	9784 <Spi_InitChannelsJobsSeqsState+0xc0>
        Job <= (uint32)( Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxJob);
        Job++)
    {
        JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    9750:	4a29      	ldr	r2, [pc, #164]	; (97f8 <Spi_InitChannelsJobsSeqsState+0x134>)
    9752:	9b01      	ldr	r3, [sp, #4]
    9754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9758:	691a      	ldr	r2, [r3, #16]
    975a:	9b06      	ldr	r3, [sp, #24]
    975c:	009b      	lsls	r3, r3, #2
    975e:	4413      	add	r3, r2
    9760:	681b      	ldr	r3, [r3, #0]
    9762:	9303      	str	r3, [sp, #12]
        if((NULL_PTR != JobConfig) && (SpiCoreID == JobConfig->SpiCoreUse))
    9764:	9b03      	ldr	r3, [sp, #12]
    9766:	2b00      	cmp	r3, #0
    9768:	d009      	beq.n	977e <Spi_InitChannelsJobsSeqsState+0xba>
    976a:	9b03      	ldr	r3, [sp, #12]
    976c:	695b      	ldr	r3, [r3, #20]
    976e:	9a01      	ldr	r2, [sp, #4]
    9770:	429a      	cmp	r2, r3
    9772:	d104      	bne.n	977e <Spi_InitChannelsJobsSeqsState+0xba>
        {
            Spi_axSpiJobState[Job].Result = SPI_JOB_OK;
    9774:	4a22      	ldr	r2, [pc, #136]	; (9800 <Spi_InitChannelsJobsSeqsState+0x13c>)
    9776:	9b06      	ldr	r3, [sp, #24]
    9778:	2100      	movs	r1, #0
    977a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        Job++)
    977e:	9b06      	ldr	r3, [sp, #24]
    9780:	3301      	adds	r3, #1
    9782:	9306      	str	r3, [sp, #24]
        Job <= (uint32)( Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxJob);
    9784:	4a1c      	ldr	r2, [pc, #112]	; (97f8 <Spi_InitChannelsJobsSeqsState+0x134>)
    9786:	9b01      	ldr	r3, [sp, #4]
    9788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    978c:	889b      	ldrh	r3, [r3, #4]
    978e:	461a      	mov	r2, r3
    for (Job = 0u;
    9790:	9b06      	ldr	r3, [sp, #24]
    9792:	4293      	cmp	r3, r2
    9794:	d9dc      	bls.n	9750 <Spi_InitChannelsJobsSeqsState+0x8c>
            Spi_axSpiJobState[Job].AsyncCrtSequenceState = NULL_PTR;
        #endif
        }
    }
    
    for (Sequence = 0u;
    9796:	2300      	movs	r3, #0
    9798:	9305      	str	r3, [sp, #20]
    979a:	e01f      	b.n	97dc <Spi_InitChannelsJobsSeqsState+0x118>
        Sequence <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxSequence);
        Sequence++)
    {
        SequenceConfig = Spi_apxSpiConfigPtr[SpiCoreID]->SequenceConfig[Sequence].SeqConfig;
    979c:	4a16      	ldr	r2, [pc, #88]	; (97f8 <Spi_InitChannelsJobsSeqsState+0x134>)
    979e:	9b01      	ldr	r3, [sp, #4]
    97a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97a4:	695a      	ldr	r2, [r3, #20]
    97a6:	9b05      	ldr	r3, [sp, #20]
    97a8:	009b      	lsls	r3, r3, #2
    97aa:	4413      	add	r3, r2
    97ac:	681b      	ldr	r3, [r3, #0]
    97ae:	9304      	str	r3, [sp, #16]
        if ((NULL_PTR != SequenceConfig) && (SpiCoreID == SequenceConfig->SpiCoreUse))
    97b0:	9b04      	ldr	r3, [sp, #16]
    97b2:	2b00      	cmp	r3, #0
    97b4:	d00f      	beq.n	97d6 <Spi_InitChannelsJobsSeqsState+0x112>
    97b6:	9b04      	ldr	r3, [sp, #16]
    97b8:	685b      	ldr	r3, [r3, #4]
    97ba:	9a01      	ldr	r2, [sp, #4]
    97bc:	429a      	cmp	r2, r3
    97be:	d10a      	bne.n	97d6 <Spi_InitChannelsJobsSeqsState+0x112>
            SequenceConfig = Spi_apxSpiConfigPtr[SpiCoreID]->SequenceConfig[Sequence].SeqConfig;
            Spi_axSpiSequenceState[Sequence].Sequence = SequenceConfig;
            #endif
    
            /* initialize sequence results */
            Spi_axSpiSequenceState[Sequence].Result = SPI_SEQ_OK;
    97c0:	4a10      	ldr	r2, [pc, #64]	; (9804 <Spi_InitChannelsJobsSeqsState+0x140>)
    97c2:	9b05      	ldr	r3, [sp, #20]
    97c4:	2100      	movs	r1, #0
    97c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* SPI135: Spi_SyncTransmit() must fail if an other sync transmission
                    is ongoing.*/
            /* mark all HW units as used by the sync transmission, in order to
                force the mutual exclusion of Spi_SyncTransmit() calls */
    
            Spi_au32SpiSeqUsedHWUnits[Sequence] = 0xFFFFFFFFU;
    97ca:	4a0f      	ldr	r2, [pc, #60]	; (9808 <Spi_InitChannelsJobsSeqsState+0x144>)
    97cc:	9b05      	ldr	r3, [sp, #20]
    97ce:	f04f 31ff 	mov.w	r1, #4294967295
    97d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        Sequence++)
    97d6:	9b05      	ldr	r3, [sp, #20]
    97d8:	3301      	adds	r3, #1
    97da:	9305      	str	r3, [sp, #20]
        Sequence <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxSequence);
    97dc:	4a06      	ldr	r2, [pc, #24]	; (97f8 <Spi_InitChannelsJobsSeqsState+0x134>)
    97de:	9b01      	ldr	r3, [sp, #4]
    97e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97e4:	799b      	ldrb	r3, [r3, #6]
    97e6:	461a      	mov	r2, r3
    for (Sequence = 0u;
    97e8:	9b05      	ldr	r3, [sp, #20]
    97ea:	4293      	cmp	r3, r2
    97ec:	d9d6      	bls.n	979c <Spi_InitChannelsJobsSeqsState+0xd8>
        else
        {
            /* Do nothing */
        }
    }
}
    97ee:	bf00      	nop
    97f0:	bf00      	nop
    97f2:	b008      	add	sp, #32
    97f4:	4770      	bx	lr
    97f6:	bf00      	nop
    97f8:	1fff8dec 	.word	0x1fff8dec
    97fc:	1fff8df8 	.word	0x1fff8df8
    9800:	1fff8df4 	.word	0x1fff8df4
    9804:	1fff8df0 	.word	0x1fff8df0
    9808:	1fff8e00 	.word	0x1fff8e00

0000980c <Spi_GetStatusAsyncCheckHwBusy>:
*/
static Spi_StatusType Spi_GetStatusAsyncCheckHwBusy
    (
        uint32 SpiCoreID
    )
{
    980c:	b084      	sub	sp, #16
    980e:	9001      	str	r0, [sp, #4]
    Spi_StatusType StatusFlag = SPI_IDLE;
    9810:	2301      	movs	r3, #1
    9812:	9303      	str	r3, [sp, #12]
    Spi_HWUnitType HWUnit;
    
    for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9814:	2300      	movs	r3, #0
    9816:	f88d 300b 	strb.w	r3, [sp, #11]
    981a:	e028      	b.n	986e <Spi_GetStatusAsyncCheckHwBusy+0x62>
    {
        if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    981c:	4a18      	ldr	r2, [pc, #96]	; (9880 <Spi_GetStatusAsyncCheckHwBusy+0x74>)
    981e:	9b01      	ldr	r3, [sp, #4]
    9820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9824:	69da      	ldr	r2, [r3, #28]
    9826:	f89d 300b 	ldrb.w	r3, [sp, #11]
    982a:	009b      	lsls	r3, r3, #2
    982c:	4413      	add	r3, r2
    982e:	681b      	ldr	r3, [r3, #0]
    9830:	2b00      	cmp	r3, #0
    9832:	d017      	beq.n	9864 <Spi_GetStatusAsyncCheckHwBusy+0x58>
            (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    9834:	4a12      	ldr	r2, [pc, #72]	; (9880 <Spi_GetStatusAsyncCheckHwBusy+0x74>)
    9836:	9b01      	ldr	r3, [sp, #4]
    9838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    983c:	69da      	ldr	r2, [r3, #28]
    983e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9842:	009b      	lsls	r3, r3, #2
    9844:	4413      	add	r3, r2
    9846:	681b      	ldr	r3, [r3, #0]
    9848:	689b      	ldr	r3, [r3, #8]
        if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    984a:	9a01      	ldr	r2, [sp, #4]
    984c:	429a      	cmp	r2, r3
    984e:	d109      	bne.n	9864 <Spi_GetStatusAsyncCheckHwBusy+0x58>
           )
        {
            if (SPI_BUSY == Spi_axSpiHwUnitQueueArray[HWUnit].Status)
    9850:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9854:	4a0b      	ldr	r2, [pc, #44]	; (9884 <Spi_GetStatusAsyncCheckHwBusy+0x78>)
    9856:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    985a:	2b02      	cmp	r3, #2
    985c:	d102      	bne.n	9864 <Spi_GetStatusAsyncCheckHwBusy+0x58>
            {
                StatusFlag = SPI_BUSY;
    985e:	2302      	movs	r3, #2
    9860:	9303      	str	r3, [sp, #12]
                break;
    9862:	e008      	b.n	9876 <Spi_GetStatusAsyncCheckHwBusy+0x6a>
    for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9864:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9868:	3301      	adds	r3, #1
    986a:	f88d 300b 	strb.w	r3, [sp, #11]
    986e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9872:	2b00      	cmp	r3, #0
    9874:	d0d2      	beq.n	981c <Spi_GetStatusAsyncCheckHwBusy+0x10>
        else
        {
            /* Do nothing */
        }
    }
    return StatusFlag;
    9876:	9b03      	ldr	r3, [sp, #12]
}
    9878:	4618      	mov	r0, r3
    987a:	b004      	add	sp, #16
    987c:	4770      	bx	lr
    987e:	bf00      	nop
    9880:	1fff8dec 	.word	0x1fff8dec
    9884:	1fff8de4 	.word	0x1fff8de4

00009888 <Spi_GetVersionInfo>:
/** @implements Spi_GetVersionInfo_Activity */
void Spi_GetVersionInfo 
    (
        Std_VersionInfoType *versioninfo
    )
{
    9888:	b082      	sub	sp, #8
    988a:	9001      	str	r0, [sp, #4]
        (void)Det_ReportError((uint16)SPI_MODULE_ID,(uint8)0,SPI_GETVERSIONINFO_ID,SPI_E_PARAM_POINTER);
    }
    else
    {
#endif /* SPI_DEV_ERROR_DETECT == STD_ON */
    versioninfo->vendorID = (uint16)SPI_VENDOR_ID;
    988c:	9b01      	ldr	r3, [sp, #4]
    988e:	222b      	movs	r2, #43	; 0x2b
    9890:	801a      	strh	r2, [r3, #0]
    versioninfo->moduleID = (uint8)SPI_MODULE_ID;
    9892:	9b01      	ldr	r3, [sp, #4]
    9894:	2253      	movs	r2, #83	; 0x53
    9896:	805a      	strh	r2, [r3, #2]
    versioninfo->sw_major_version = (uint8)SPI_SW_MAJOR_VERSION;
    9898:	9b01      	ldr	r3, [sp, #4]
    989a:	2202      	movs	r2, #2
    989c:	711a      	strb	r2, [r3, #4]
    versioninfo->sw_minor_version = (uint8)SPI_SW_MINOR_VERSION;
    989e:	9b01      	ldr	r3, [sp, #4]
    98a0:	2200      	movs	r2, #0
    98a2:	715a      	strb	r2, [r3, #5]
    versioninfo->sw_patch_version = (uint8)SPI_SW_PATCH_VERSION;
    98a4:	9b01      	ldr	r3, [sp, #4]
    98a6:	2200      	movs	r2, #0
    98a8:	719a      	strb	r2, [r3, #6]
#if(SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif /* SPI_DEV_ERROR_DETECT == STD_ON */
}
    98aa:	bf00      	nop
    98ac:	b002      	add	sp, #8
    98ae:	4770      	bx	lr

000098b0 <Spi_Init>:
/** @implements Spi_Init_Activity */
void Spi_Init
    (
        const Spi_ConfigType *ConfigPtr
    )
{
    98b0:	b500      	push	{lr}
    98b2:	b085      	sub	sp, #20
    98b4:	9001      	str	r0, [sp, #4]
    Spi_HWUnitType HWUnit;
    uint32 SpiCoreID;
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    98b6:	2300      	movs	r3, #0
    98b8:	f88d 300e 	strb.w	r3, [sp, #14]

    SpiCoreID = Spi_GetCoreID;
    98bc:	2300      	movs	r3, #0
    98be:	9302      	str	r3, [sp, #8]
    CheckStatus = Spi_InitCheckDemError(SpiCoreID, ConfigPtr);
    if ((Std_ReturnType)E_OK == CheckStatus) 
    {
#endif /*(SPI_DEV_ERROR_DETECT == STD_ON)*/

    CheckStatus = Spi_CheckInit(ConfigPtr, SpiCoreID);
    98c0:	9902      	ldr	r1, [sp, #8]
    98c2:	9801      	ldr	r0, [sp, #4]
    98c4:	f7ff fe44 	bl	9550 <Spi_CheckInit>
    98c8:	4603      	mov	r3, r0
    98ca:	f88d 300e 	strb.w	r3, [sp, #14]

    if((Std_ReturnType)E_OK == CheckStatus )
    98ce:	f89d 300e 	ldrb.w	r3, [sp, #14]
    98d2:	2b00      	cmp	r3, #0
    98d4:	d144      	bne.n	9960 <Spi_Init+0xb0>
    {
    #if (SPI_PRECOMPILE_SUPPORT == STD_OFF)
        Spi_apxSpiConfigPtr[SpiCoreID] = ConfigPtr;
    98d6:	4924      	ldr	r1, [pc, #144]	; (9968 <Spi_Init+0xb8>)
    98d8:	9b02      	ldr	r3, [sp, #8]
    98da:	9a01      	ldr	r2, [sp, #4]
    98dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    #else /* (SPI_CONFIG_VARIANT == SPI_VARIANT_PRECOMPILE) */
        Spi_apxSpiConfigPtr[SpiCoreID] = Spi_PBCfgVariantPredefined[SpiCoreID];
    #endif /* (SPI_PRECOMPILE_SUPPORT == STD_OFF) */
    /* Initiate Channels, Jobs, Sequences state */
    Spi_InitChannelsJobsSeqsState(SpiCoreID);
    98e0:	9802      	ldr	r0, [sp, #8]
    98e2:	f7ff feef 	bl	96c4 <Spi_InitChannelsJobsSeqsState>
        
        /* initialize all physical HWUnits */
        for (HWUnit = (Spi_HWUnitType) 0;
    98e6:	2300      	movs	r3, #0
    98e8:	f88d 300f 	strb.w	r3, [sp, #15]
    98ec:	e034      	b.n	9958 <Spi_Init+0xa8>
            HWUnit < (Spi_HWUnitType) SPI_MAX_HWUNIT;
            HWUnit++)
        {
            if((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    98ee:	4a1e      	ldr	r2, [pc, #120]	; (9968 <Spi_Init+0xb8>)
    98f0:	9b02      	ldr	r3, [sp, #8]
    98f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98f6:	69da      	ldr	r2, [r3, #28]
    98f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    98fc:	009b      	lsls	r3, r3, #2
    98fe:	4413      	add	r3, r2
    9900:	681b      	ldr	r3, [r3, #0]
    9902:	2b00      	cmp	r3, #0
    9904:	d023      	beq.n	994e <Spi_Init+0x9e>
               (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    9906:	4a18      	ldr	r2, [pc, #96]	; (9968 <Spi_Init+0xb8>)
    9908:	9b02      	ldr	r3, [sp, #8]
    990a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    990e:	69da      	ldr	r2, [r3, #28]
    9910:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9914:	009b      	lsls	r3, r3, #2
    9916:	4413      	add	r3, r2
    9918:	681b      	ldr	r3, [r3, #0]
    991a:	689b      	ldr	r3, [r3, #8]
            if((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    991c:	9a02      	ldr	r2, [sp, #8]
    991e:	429a      	cmp	r2, r3
    9920:	d115      	bne.n	994e <Spi_Init+0x9e>
              )
            {
                Spi_Ipw_Init(HWUnit, Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig);
    9922:	4a11      	ldr	r2, [pc, #68]	; (9968 <Spi_Init+0xb8>)
    9924:	9b02      	ldr	r3, [sp, #8]
    9926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    992a:	69da      	ldr	r2, [r3, #28]
    992c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9930:	009b      	lsls	r3, r3, #2
    9932:	4413      	add	r3, r2
    9934:	681a      	ldr	r2, [r3, #0]
    9936:	f89d 300f 	ldrb.w	r3, [sp, #15]
    993a:	4611      	mov	r1, r2
    993c:	4618      	mov	r0, r3
    993e:	f000 fa8c 	bl	9e5a <Spi_Ipw_Init>

#if ((SPI_LEVEL_DELIVERED == SPI_LEVEL1) || (SPI_LEVEL_DELIVERED == SPI_LEVEL2))
                /* initialize the Job lists => no scheduled job for the unit */
                Spi_InitJobsList(HWUnit);
#endif
                Spi_axSpiHwUnitQueueArray[HWUnit].Status = SPI_IDLE;
    9942:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9946:	4a09      	ldr	r2, [pc, #36]	; (996c <Spi_Init+0xbc>)
    9948:	2101      	movs	r1, #1
    994a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
            HWUnit++)
    994e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9952:	3301      	adds	r3, #1
    9954:	f88d 300f 	strb.w	r3, [sp, #15]
        for (HWUnit = (Spi_HWUnitType) 0;
    9958:	f89d 300f 	ldrb.w	r3, [sp, #15]
    995c:	2b00      	cmp	r3, #0
    995e:	d0c6      	beq.n	98ee <Spi_Init+0x3e>
    }

#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif /*(SPI_DEV_ERROR_DETECT == STD_ON)*/
}
    9960:	bf00      	nop
    9962:	b005      	add	sp, #20
    9964:	f85d fb04 	ldr.w	pc, [sp], #4
    9968:	1fff8dec 	.word	0x1fff8dec
    996c:	1fff8de4 	.word	0x1fff8de4

00009970 <Spi_DeInit>:
*       if SPI_DEV_ERROR_DETECT is STD_ON.
*
* @implements Spi_DeInit_Activity
*/
Std_ReturnType Spi_DeInit(void)
{
    9970:	b500      	push	{lr}
    9972:	b083      	sub	sp, #12
    Std_ReturnType TempExit = (Std_ReturnType)E_OK;
    9974:	2300      	movs	r3, #0
    9976:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_HWUnitType HWUnit;
    uint32 SpiCoreID;

    SpiCoreID = Spi_GetCoreID;
    997a:	2300      	movs	r3, #0
    997c:	9300      	str	r3, [sp, #0]
    }
    else
    {
#endif
        /* Check if Spi Status is Busy */
        if (SPI_BUSY == Spi_GetStatus())
    997e:	f000 f8b1 	bl	9ae4 <Spi_GetStatus>
    9982:	4603      	mov	r3, r0
    9984:	2b02      	cmp	r3, #2
    9986:	d103      	bne.n	9990 <Spi_DeInit+0x20>
        {
            TempExit = E_NOT_OK;
    9988:	2301      	movs	r3, #1
    998a:	f88d 3007 	strb.w	r3, [sp, #7]
    998e:	e037      	b.n	9a00 <Spi_DeInit+0x90>
        }
        else
        {
            /* De-initialize all physical HWUnits */
            for (HWUnit = (Spi_HWUnitType) 0;
    9990:	2300      	movs	r3, #0
    9992:	f88d 3006 	strb.w	r3, [sp, #6]
    9996:	e02a      	b.n	99ee <Spi_DeInit+0x7e>
                 HWUnit < (Spi_HWUnitType) SPI_MAX_HWUNIT;
                 HWUnit++)
            {
                if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    9998:	4a1c      	ldr	r2, [pc, #112]	; (9a0c <Spi_DeInit+0x9c>)
    999a:	9b00      	ldr	r3, [sp, #0]
    999c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99a0:	69da      	ldr	r2, [r3, #28]
    99a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    99a6:	009b      	lsls	r3, r3, #2
    99a8:	4413      	add	r3, r2
    99aa:	681b      	ldr	r3, [r3, #0]
    99ac:	2b00      	cmp	r3, #0
    99ae:	d019      	beq.n	99e4 <Spi_DeInit+0x74>
                    (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    99b0:	4a16      	ldr	r2, [pc, #88]	; (9a0c <Spi_DeInit+0x9c>)
    99b2:	9b00      	ldr	r3, [sp, #0]
    99b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99b8:	69da      	ldr	r2, [r3, #28]
    99ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
    99be:	009b      	lsls	r3, r3, #2
    99c0:	4413      	add	r3, r2
    99c2:	681b      	ldr	r3, [r3, #0]
    99c4:	689b      	ldr	r3, [r3, #8]
                if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    99c6:	9a00      	ldr	r2, [sp, #0]
    99c8:	429a      	cmp	r2, r3
    99ca:	d10b      	bne.n	99e4 <Spi_DeInit+0x74>
                   )
                {
                    Spi_Ipw_DeInit(HWUnit, SpiCoreID);
    99cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    99d0:	9900      	ldr	r1, [sp, #0]
    99d2:	4618      	mov	r0, r3
    99d4:	f000 fa54 	bl	9e80 <Spi_Ipw_DeInit>
    
                    Spi_axSpiHwUnitQueueArray[HWUnit].Status = SPI_UNINIT;
    99d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    99dc:	4a0c      	ldr	r2, [pc, #48]	; (9a10 <Spi_DeInit+0xa0>)
    99de:	2100      	movs	r1, #0
    99e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
                 HWUnit++)
    99e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    99e8:	3301      	adds	r3, #1
    99ea:	f88d 3006 	strb.w	r3, [sp, #6]
            for (HWUnit = (Spi_HWUnitType) 0;
    99ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
    99f2:	2b00      	cmp	r3, #0
    99f4:	d0d0      	beq.n	9998 <Spi_DeInit+0x28>
                {
                    /* Do nothing */
                }
            }
            /* Reset configuration pointer */
            Spi_apxSpiConfigPtr[SpiCoreID] = NULL_PTR;
    99f6:	4a05      	ldr	r2, [pc, #20]	; (9a0c <Spi_DeInit+0x9c>)
    99f8:	9b00      	ldr	r3, [sp, #0]
    99fa:	2100      	movs	r1, #0
    99fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif

    return TempExit;
    9a00:	f89d 3007 	ldrb.w	r3, [sp, #7]
}
    9a04:	4618      	mov	r0, r3
    9a06:	b003      	add	sp, #12
    9a08:	f85d fb04 	ldr.w	pc, [sp], #4
    9a0c:	1fff8dec 	.word	0x1fff8dec
    9a10:	1fff8de4 	.word	0x1fff8de4

00009a14 <Spi_SetupEB>:
        Spi_ChannelType Channel,
        const Spi_DataBufferType  *SrcDataBufferPtr,
        Spi_DataBufferType *DesDataBufferPtr,
        Spi_NumberOfDataType Length
    )
{
    9a14:	b500      	push	{lr}
    9a16:	b089      	sub	sp, #36	; 0x24
    9a18:	9102      	str	r1, [sp, #8]
    9a1a:	9201      	str	r2, [sp, #4]
    9a1c:	461a      	mov	r2, r3
    9a1e:	4603      	mov	r3, r0
    9a20:	f88d 300f 	strb.w	r3, [sp, #15]
    9a24:	4613      	mov	r3, r2
    9a26:	f8ad 300c 	strh.w	r3, [sp, #12]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    9a2a:	2300      	movs	r3, #0
    9a2c:	f88d 301f 	strb.w	r3, [sp, #31]
    Spi_ChannelStateType *ChannelState;
    const Spi_ChannelConfigType *ChannelConfig;
    uint32 SpiCoreID;

    /* get current coreID */
    SpiCoreID = Spi_GetCoreID;
    9a30:	2300      	movs	r3, #0
    9a32:	9306      	str	r3, [sp, #24]
        Status = (Std_ReturnType)E_NOT_OK;
    }
    else
    {
#endif
        ChannelState = &Spi_axSpiChannelState[Channel];
    9a34:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9a38:	009b      	lsls	r3, r3, #2
    9a3a:	4a28      	ldr	r2, [pc, #160]	; (9adc <Spi_SetupEB+0xc8>)
    9a3c:	4413      	add	r3, r2
    9a3e:	9305      	str	r3, [sp, #20]
        ChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[Channel].ChannelCfg;
    9a40:	4a27      	ldr	r2, [pc, #156]	; (9ae0 <Spi_SetupEB+0xcc>)
    9a42:	9b06      	ldr	r3, [sp, #24]
    9a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a48:	68da      	ldr	r2, [r3, #12]
    9a4a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9a4e:	009b      	lsls	r3, r3, #2
    9a50:	4413      	add	r3, r2
    9a52:	681b      	ldr	r3, [r3, #0]
    9a54:	9304      	str	r3, [sp, #16]
        /* exit early if this is the wrong buffer type */
        if (IB == ChannelConfig->BufferType)
    9a56:	9b04      	ldr	r3, [sp, #16]
    9a58:	681b      	ldr	r3, [r3, #0]
    9a5a:	2b00      	cmp	r3, #0
    9a5c:	d103      	bne.n	9a66 <Spi_SetupEB+0x52>
        {
            /* Call Det_ReportError */
#if (SPI_DEV_ERROR_DETECT == STD_ON)
            (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_SETUPEB_ID,SPI_E_PARAM_CHANNEL);
#endif
            Status = (Std_ReturnType)E_NOT_OK;
    9a5e:	2301      	movs	r3, #1
    9a60:	f88d 301f 	strb.w	r3, [sp, #31]
    9a64:	e033      	b.n	9ace <Spi_SetupEB+0xba>
            /* Length and Framesize - aren't compatible */
            /* If 8 < Framesize =< 16: Length must be divisible by 2 */
            /* If 16 < Framesize =< 32: Length must be divisible by 4 */
            Status = Spi_SetupEbCheckLength(ChannelConfig, Length);
#endif
            SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05();
    9a66:	f00c fbb3 	bl	161d0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05>
            /* save the new parameters */
            ChannelConfig->BufferDescriptor->ExternalBufferTX = SrcDataBufferPtr;
    9a6a:	9b04      	ldr	r3, [sp, #16]
    9a6c:	691b      	ldr	r3, [r3, #16]
    9a6e:	9a02      	ldr	r2, [sp, #8]
    9a70:	601a      	str	r2, [r3, #0]
            ChannelConfig->BufferDescriptor->BufferRX = DesDataBufferPtr;
    9a72:	9b04      	ldr	r3, [sp, #16]
    9a74:	691b      	ldr	r3, [r3, #16]
    9a76:	9a01      	ldr	r2, [sp, #4]
    9a78:	609a      	str	r2, [r3, #8]

            ChannelState->Length = Length;
    9a7a:	9b05      	ldr	r3, [sp, #20]
    9a7c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9a80:	805a      	strh	r2, [r3, #2]

            /* if source data pointer is zero, transmit default value */
            if (NULL_PTR == SrcDataBufferPtr)
    9a82:	9b02      	ldr	r3, [sp, #8]
    9a84:	2b00      	cmp	r3, #0
    9a86:	d107      	bne.n	9a98 <Spi_SetupEB+0x84>
            {
                ChannelState->Flags |= SPI_CHANNEL_FLAG_TX_DEFAULT_U8;
    9a88:	9b05      	ldr	r3, [sp, #20]
    9a8a:	781b      	ldrb	r3, [r3, #0]
    9a8c:	f043 0301 	orr.w	r3, r3, #1
    9a90:	b2da      	uxtb	r2, r3
    9a92:	9b05      	ldr	r3, [sp, #20]
    9a94:	701a      	strb	r2, [r3, #0]
    9a96:	e006      	b.n	9aa6 <Spi_SetupEB+0x92>
            }
            else
            {
                ChannelState->Flags &= (uint8) (~SPI_CHANNEL_FLAG_TX_DEFAULT_U8);
    9a98:	9b05      	ldr	r3, [sp, #20]
    9a9a:	781b      	ldrb	r3, [r3, #0]
    9a9c:	f023 0301 	bic.w	r3, r3, #1
    9aa0:	b2da      	uxtb	r2, r3
    9aa2:	9b05      	ldr	r3, [sp, #20]
    9aa4:	701a      	strb	r2, [r3, #0]
            }

            /* if destination data pointer is zero, discard receiving data */
            if (NULL_PTR == DesDataBufferPtr)
    9aa6:	9b01      	ldr	r3, [sp, #4]
    9aa8:	2b00      	cmp	r3, #0
    9aaa:	d107      	bne.n	9abc <Spi_SetupEB+0xa8>
            {
                ChannelState->Flags |= SPI_CHANNEL_FLAG_RX_DISCARD_U8;
    9aac:	9b05      	ldr	r3, [sp, #20]
    9aae:	781b      	ldrb	r3, [r3, #0]
    9ab0:	f043 0302 	orr.w	r3, r3, #2
    9ab4:	b2da      	uxtb	r2, r3
    9ab6:	9b05      	ldr	r3, [sp, #20]
    9ab8:	701a      	strb	r2, [r3, #0]
    9aba:	e006      	b.n	9aca <Spi_SetupEB+0xb6>
            }
            else
            {
                ChannelState->Flags &= (uint8) (~SPI_CHANNEL_FLAG_RX_DISCARD_U8);
    9abc:	9b05      	ldr	r3, [sp, #20]
    9abe:	781b      	ldrb	r3, [r3, #0]
    9ac0:	f023 0302 	bic.w	r3, r3, #2
    9ac4:	b2da      	uxtb	r2, r3
    9ac6:	9b05      	ldr	r3, [sp, #20]
    9ac8:	701a      	strb	r2, [r3, #0]
            }
            SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05();
    9aca:	f00c fbad 	bl	16228 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05>
        }
#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif

    return Status;
    9ace:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    9ad2:	4618      	mov	r0, r3
    9ad4:	b009      	add	sp, #36	; 0x24
    9ad6:	f85d fb04 	ldr.w	pc, [sp], #4
    9ada:	bf00      	nop
    9adc:	1fff8df8 	.word	0x1fff8df8
    9ae0:	1fff8dec 	.word	0x1fff8dec

00009ae4 <Spi_GetStatus>:
*       if SPI_DEV_ERROR_DETECT is STD_ON.
*
* @implements Spi_GetStatus_Activity
*/
Spi_StatusType Spi_GetStatus(void)
{
    9ae4:	b500      	push	{lr}
    9ae6:	b085      	sub	sp, #20
    Spi_StatusType StatusFlag = SPI_IDLE;
    9ae8:	2301      	movs	r3, #1
    9aea:	9303      	str	r3, [sp, #12]
    Spi_HWUnitType HWUnit;
    uint32 SpiCoreID;
    
    /* Get current coreID */
    SpiCoreID = Spi_GetCoreID;
    9aec:	2300      	movs	r3, #0
    9aee:	9301      	str	r3, [sp, #4]

    if (NULL_PTR == Spi_apxSpiConfigPtr[SpiCoreID])
    9af0:	4a22      	ldr	r2, [pc, #136]	; (9b7c <Spi_GetStatus+0x98>)
    9af2:	9b01      	ldr	r3, [sp, #4]
    9af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9af8:	2b00      	cmp	r3, #0
    9afa:	d102      	bne.n	9b02 <Spi_GetStatus+0x1e>
        /* If Development Error Detection is enabled, report error if not */
        /* initialized */
        /* Call Det_ReportError */
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_GETSTATUS_ID,SPI_E_UNINIT);
#endif
        StatusFlag = SPI_UNINIT;
    9afc:	2300      	movs	r3, #0
    9afe:	9303      	str	r3, [sp, #12]
    9b00:	e037      	b.n	9b72 <Spi_GetStatus+0x8e>
    }
    else
    {
        /* The SPI Handler Driver software module shall be busy when any
           HWUnit is busy */
        for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9b02:	2300      	movs	r3, #0
    9b04:	f88d 300b 	strb.w	r3, [sp, #11]
    9b08:	e028      	b.n	9b5c <Spi_GetStatus+0x78>
        {
            if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    9b0a:	4a1c      	ldr	r2, [pc, #112]	; (9b7c <Spi_GetStatus+0x98>)
    9b0c:	9b01      	ldr	r3, [sp, #4]
    9b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b12:	69da      	ldr	r2, [r3, #28]
    9b14:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9b18:	009b      	lsls	r3, r3, #2
    9b1a:	4413      	add	r3, r2
    9b1c:	681b      	ldr	r3, [r3, #0]
    9b1e:	2b00      	cmp	r3, #0
    9b20:	d017      	beq.n	9b52 <Spi_GetStatus+0x6e>
                (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    9b22:	4a16      	ldr	r2, [pc, #88]	; (9b7c <Spi_GetStatus+0x98>)
    9b24:	9b01      	ldr	r3, [sp, #4]
    9b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b2a:	69da      	ldr	r2, [r3, #28]
    9b2c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9b30:	009b      	lsls	r3, r3, #2
    9b32:	4413      	add	r3, r2
    9b34:	681b      	ldr	r3, [r3, #0]
    9b36:	689b      	ldr	r3, [r3, #8]
            if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    9b38:	9a01      	ldr	r2, [sp, #4]
    9b3a:	429a      	cmp	r2, r3
    9b3c:	d109      	bne.n	9b52 <Spi_GetStatus+0x6e>
               )
            {
                if (1u == Spi_au32SpiBusySyncHWUnitsStatus[HWUnit])
    9b3e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9b42:	4a0f      	ldr	r2, [pc, #60]	; (9b80 <Spi_GetStatus+0x9c>)
    9b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b48:	2b01      	cmp	r3, #1
    9b4a:	d102      	bne.n	9b52 <Spi_GetStatus+0x6e>
                {
                    StatusFlag = SPI_BUSY;
    9b4c:	2302      	movs	r3, #2
    9b4e:	9303      	str	r3, [sp, #12]
                    break;
    9b50:	e008      	b.n	9b64 <Spi_GetStatus+0x80>
        for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9b52:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9b56:	3301      	adds	r3, #1
    9b58:	f88d 300b 	strb.w	r3, [sp, #11]
    9b5c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9b60:	2b00      	cmp	r3, #0
    9b62:	d0d2      	beq.n	9b0a <Spi_GetStatus+0x26>
            {
                /* Do nothing */
            }
        }
        /* check for busy HWUnit in async transmissions */
        if (SPI_BUSY != StatusFlag)
    9b64:	9b03      	ldr	r3, [sp, #12]
    9b66:	2b02      	cmp	r3, #2
    9b68:	d003      	beq.n	9b72 <Spi_GetStatus+0x8e>
        {
            /* Note: Checking for IsSync attribute for HWUnit is not really needed
                 It is preferable to skip this check in order to have a more compact code
            */
            StatusFlag = Spi_GetStatusAsyncCheckHwBusy(SpiCoreID);
    9b6a:	9801      	ldr	r0, [sp, #4]
    9b6c:	f7ff fe4e 	bl	980c <Spi_GetStatusAsyncCheckHwBusy>
    9b70:	9003      	str	r0, [sp, #12]
        else
        {
            /* Do notthing */
        }
    }
    return StatusFlag;
    9b72:	9b03      	ldr	r3, [sp, #12]
}
    9b74:	4618      	mov	r0, r3
    9b76:	b005      	add	sp, #20
    9b78:	f85d fb04 	ldr.w	pc, [sp], #4
    9b7c:	1fff8dec 	.word	0x1fff8dec
    9b80:	1fff8e04 	.word	0x1fff8e04

00009b84 <Spi_GetJobResult>:
/** @implements Spi_GetJobResult_Activity */
Spi_JobResultType Spi_GetJobResult
    (
        Spi_JobType Job
    )
{
    9b84:	b084      	sub	sp, #16
    9b86:	4603      	mov	r3, r0
    9b88:	f8ad 3006 	strh.w	r3, [sp, #6]
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_GETJOBRESULT_ID,SPI_E_PARAM_CONFIG);
    }
    else
    {
#endif
        JobResult = Spi_axSpiJobState[Job].Result;
    9b8c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9b90:	4a03      	ldr	r2, [pc, #12]	; (9ba0 <Spi_GetJobResult+0x1c>)
    9b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b96:	9303      	str	r3, [sp, #12]
#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif

    return JobResult;
    9b98:	9b03      	ldr	r3, [sp, #12]
}
    9b9a:	4618      	mov	r0, r3
    9b9c:	b004      	add	sp, #16
    9b9e:	4770      	bx	lr
    9ba0:	1fff8df4 	.word	0x1fff8df4

00009ba4 <Spi_GetSequenceResult>:
/** @implements Spi_GetSequenceResult_Activity */
Spi_SeqResultType Spi_GetSequenceResult
    (
        Spi_SequenceType Sequence
    )
{
    9ba4:	b084      	sub	sp, #16
    9ba6:	4603      	mov	r3, r0
    9ba8:	f88d 3007 	strb.w	r3, [sp, #7]
            (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_GETSEQUENCERESULT_ID,SPI_E_PARAM_CONFIG);
        }
        else
        {
#endif
           SequenceResult = Spi_axSpiSequenceState[Sequence].Result;
    9bac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9bb0:	4a03      	ldr	r2, [pc, #12]	; (9bc0 <Spi_GetSequenceResult+0x1c>)
    9bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bb6:	9303      	str	r3, [sp, #12]
#if (SPI_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif

    return SequenceResult;
    9bb8:	9b03      	ldr	r3, [sp, #12]
}
    9bba:	4618      	mov	r0, r3
    9bbc:	b004      	add	sp, #16
    9bbe:	4770      	bx	lr
    9bc0:	1fff8df0 	.word	0x1fff8df0

00009bc4 <Spi_SyncTransmit>:
/** @implements Spi_SyncTransmit_Activity */
Std_ReturnType Spi_SyncTransmit
    (
        Spi_SequenceType Sequence
    )
{
    9bc4:	b500      	push	{lr}
    9bc6:	b08b      	sub	sp, #44	; 0x2c
    9bc8:	4603      	mov	r3, r0
    9bca:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_SequenceStateType *SequenceState;
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    9bce:	2300      	movs	r3, #0
    9bd0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    Spi_JobType Job;
    const Spi_JobConfigType *JobConfig;
    uint32 SpiCoreID;

    /* Get current coreID */
    SpiCoreID = Spi_GetCoreID;
    9bd4:	2300      	movs	r3, #0
    9bd6:	9308      	str	r3, [sp, #32]
        Status = Spi_SynctransmitCheckJobsIsValid(SequenceConfig, SpiCoreID);

        if ((Std_ReturnType)E_NOT_OK != Status)
        {
#endif /* (SPI_DEV_ERROR_DETECT == STD_ON) */
            SequenceConfig = Spi_apxSpiConfigPtr[SpiCoreID]->SequenceConfig[Sequence].SeqConfig;
    9bd8:	4a60      	ldr	r2, [pc, #384]	; (9d5c <Spi_SyncTransmit+0x198>)
    9bda:	9b08      	ldr	r3, [sp, #32]
    9bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9be0:	695a      	ldr	r2, [r3, #20]
    9be2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9be6:	009b      	lsls	r3, r3, #2
    9be8:	4413      	add	r3, r2
    9bea:	681b      	ldr	r3, [r3, #0]
    9bec:	9307      	str	r3, [sp, #28]
            /* Get the number of jobs in the sequence */
            NumJobsInSequence = SequenceConfig->NumJobs;
    9bee:	9b07      	ldr	r3, [sp, #28]
    9bf0:	881b      	ldrh	r3, [r3, #0]
    9bf2:	f8ad 301a 	strh.w	r3, [sp, #26]

            SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06();
    9bf6:	f00c fb3d 	bl	16274 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06>
            /* check if there are HW units already running */
            for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9bfa:	2300      	movs	r3, #0
    9bfc:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    9c00:	e017      	b.n	9c32 <Spi_SyncTransmit+0x6e>
            {
                if (0u != ((Spi_au32SpiBusySyncHWUnitsStatus[HWUnit] << HWUnit) & Spi_au32SpiSeqUsedHWUnits[Sequence]))
    9c02:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9c06:	4a56      	ldr	r2, [pc, #344]	; (9d60 <Spi_SyncTransmit+0x19c>)
    9c08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    9c0c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9c10:	409a      	lsls	r2, r3
    9c12:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c16:	4953      	ldr	r1, [pc, #332]	; (9d64 <Spi_SyncTransmit+0x1a0>)
    9c18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    9c1c:	4013      	ands	r3, r2
    9c1e:	2b00      	cmp	r3, #0
    9c20:	d002      	beq.n	9c28 <Spi_SyncTransmit+0x64>
                {
                    Status = (Std_ReturnType)E_NOT_OK;
    9c22:	2301      	movs	r3, #1
    9c24:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
            for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9c28:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9c2c:	3301      	adds	r3, #1
    9c2e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    9c32:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9c36:	2b00      	cmp	r3, #0
    9c38:	d0e3      	beq.n	9c02 <Spi_SyncTransmit+0x3e>
                {
                    /* Do notthing */
                }
            }
            
            if ((Std_ReturnType)E_NOT_OK != Status)
    9c3a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9c3e:	2b01      	cmp	r3, #1
    9c40:	f000 8083 	beq.w	9d4a <Spi_SyncTransmit+0x186>
            {
                /* Set the sequence as pending */
                SequenceState = &Spi_axSpiSequenceState[Sequence];
    9c44:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c48:	009b      	lsls	r3, r3, #2
    9c4a:	4a47      	ldr	r2, [pc, #284]	; (9d68 <Spi_SyncTransmit+0x1a4>)
    9c4c:	4413      	add	r3, r2
    9c4e:	9305      	str	r3, [sp, #20]
                SequenceState->Result = SPI_SEQ_PENDING;
    9c50:	9b05      	ldr	r3, [sp, #20]
    9c52:	2201      	movs	r2, #1
    9c54:	601a      	str	r2, [r3, #0]
                /* set used HW units as busy */
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    9c56:	2300      	movs	r3, #0
    9c58:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    9c5c:	e022      	b.n	9ca4 <Spi_SyncTransmit+0xe0>
                {
                    /* Get the job id */
                    Job = SequenceConfig->JobIndexList[JobIndex];
    9c5e:	9b07      	ldr	r3, [sp, #28]
    9c60:	689a      	ldr	r2, [r3, #8]
    9c62:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9c66:	005b      	lsls	r3, r3, #1
    9c68:	4413      	add	r3, r2
    9c6a:	881b      	ldrh	r3, [r3, #0]
    9c6c:	f8ad 3012 	strh.w	r3, [sp, #18]
                    JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    9c70:	4a3a      	ldr	r2, [pc, #232]	; (9d5c <Spi_SyncTransmit+0x198>)
    9c72:	9b08      	ldr	r3, [sp, #32]
    9c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c78:	691a      	ldr	r2, [r3, #16]
    9c7a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    9c7e:	009b      	lsls	r3, r3, #2
    9c80:	4413      	add	r3, r2
    9c82:	681b      	ldr	r3, [r3, #0]
    9c84:	9303      	str	r3, [sp, #12]
                    /* Logical Spi HWUnit */
                    HWUnit = JobConfig->HWUnit;
    9c86:	9b03      	ldr	r3, [sp, #12]
    9c88:	7f1b      	ldrb	r3, [r3, #28]
    9c8a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    Spi_au32SpiBusySyncHWUnitsStatus[HWUnit] = 1u;
    9c8e:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9c92:	4a33      	ldr	r2, [pc, #204]	; (9d60 <Spi_SyncTransmit+0x19c>)
    9c94:	2101      	movs	r1, #1
    9c96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    9c9a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9c9e:	3301      	adds	r3, #1
    9ca0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    9ca4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    9ca8:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9cac:	429a      	cmp	r2, r3
    9cae:	d3d6      	bcc.n	9c5e <Spi_SyncTransmit+0x9a>
                }
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06();
    9cb0:	f00c fb0c 	bl	162cc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06>
                /* Transmit Jobs */
                Status = Spi_SyncJobsTranfer(SequenceConfig, SpiCoreID);
    9cb4:	9908      	ldr	r1, [sp, #32]
    9cb6:	9807      	ldr	r0, [sp, #28]
    9cb8:	f7ff fc72 	bl	95a0 <Spi_SyncJobsTranfer>
    9cbc:	4603      	mov	r3, r0
    9cbe:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                
                if ((Std_ReturnType)E_OK == Status)
    9cc2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9cc6:	2b00      	cmp	r3, #0
    9cc8:	d103      	bne.n	9cd2 <Spi_SyncTransmit+0x10e>
                {
                    /* Set the sequence as OK */
                    SequenceState->Result = SPI_SEQ_OK;
    9cca:	9b05      	ldr	r3, [sp, #20]
    9ccc:	2200      	movs	r2, #0
    9cce:	601a      	str	r2, [r3, #0]
    9cd0:	e002      	b.n	9cd8 <Spi_SyncTransmit+0x114>
#endif
                }
                else
                {
                    /* Set the sequence as FAILED */
                    SequenceState->Result = SPI_SEQ_FAILED;
    9cd2:	9b05      	ldr	r3, [sp, #20]
    9cd4:	2202      	movs	r2, #2
    9cd6:	601a      	str	r2, [r3, #0]
                    /* Report to DEM */
                    Spi_DemReportStatus(SpiCoreID, DEM_EVENT_STATUS_FAILED);
#endif
                }
                
                SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07();
    9cd8:	f00c fb1e 	bl	16318 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07>
                /* set used HW units as idle */
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    9cdc:	2300      	movs	r3, #0
    9cde:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    9ce2:	e022      	b.n	9d2a <Spi_SyncTransmit+0x166>
                {
                    /* Get the job id */
                    Job = SequenceConfig->JobIndexList[JobIndex];
    9ce4:	9b07      	ldr	r3, [sp, #28]
    9ce6:	689a      	ldr	r2, [r3, #8]
    9ce8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9cec:	005b      	lsls	r3, r3, #1
    9cee:	4413      	add	r3, r2
    9cf0:	881b      	ldrh	r3, [r3, #0]
    9cf2:	f8ad 3012 	strh.w	r3, [sp, #18]
                    JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    9cf6:	4a19      	ldr	r2, [pc, #100]	; (9d5c <Spi_SyncTransmit+0x198>)
    9cf8:	9b08      	ldr	r3, [sp, #32]
    9cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cfe:	691a      	ldr	r2, [r3, #16]
    9d00:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    9d04:	009b      	lsls	r3, r3, #2
    9d06:	4413      	add	r3, r2
    9d08:	681b      	ldr	r3, [r3, #0]
    9d0a:	9303      	str	r3, [sp, #12]
                    /* Logical Spi HWUnit */
                    HWUnit = JobConfig->HWUnit;
    9d0c:	9b03      	ldr	r3, [sp, #12]
    9d0e:	7f1b      	ldrb	r3, [r3, #28]
    9d10:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    Spi_au32SpiBusySyncHWUnitsStatus[HWUnit] = 0u;
    9d14:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9d18:	4a11      	ldr	r2, [pc, #68]	; (9d60 <Spi_SyncTransmit+0x19c>)
    9d1a:	2100      	movs	r1, #0
    9d1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    9d20:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9d24:	3301      	adds	r3, #1
    9d26:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    9d2a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    9d2e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9d32:	429a      	cmp	r2, r3
    9d34:	d3d6      	bcc.n	9ce4 <Spi_SyncTransmit+0x120>
                }
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07();
    9d36:	f00c fb1b 	bl	16370 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07>
                
                /* End Sequence Notification */
                if (NULL_PTR != SequenceConfig->EndNotification)
    9d3a:	9b07      	ldr	r3, [sp, #28]
    9d3c:	68db      	ldr	r3, [r3, #12]
    9d3e:	2b00      	cmp	r3, #0
    9d40:	d005      	beq.n	9d4e <Spi_SyncTransmit+0x18a>
                {
                    SequenceConfig->EndNotification();
    9d42:	9b07      	ldr	r3, [sp, #28]
    9d44:	68db      	ldr	r3, [r3, #12]
    9d46:	4798      	blx	r3
    9d48:	e001      	b.n	9d4e <Spi_SyncTransmit+0x18a>
                    /* Do nothing */
                }
            }
            else
            {
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06();
    9d4a:	f00c fabf 	bl	162cc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06>
            /* Do nothing */
        }
    }
#endif

    return Status;
    9d4e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    9d52:	4618      	mov	r0, r3
    9d54:	b00b      	add	sp, #44	; 0x2c
    9d56:	f85d fb04 	ldr.w	pc, [sp], #4
    9d5a:	bf00      	nop
    9d5c:	1fff8dec 	.word	0x1fff8dec
    9d60:	1fff8e04 	.word	0x1fff8e04
    9d64:	1fff8e00 	.word	0x1fff8e00
    9d68:	1fff8df0 	.word	0x1fff8df0

00009d6c <Spi_GetHWUnitStatus>:
/** @implements Spi_GetHWUnitStatus_Activity */
Spi_StatusType Spi_GetHWUnitStatus
    (
        Spi_HWUnitType HWUnit
    )
{
    9d6c:	b084      	sub	sp, #16
    9d6e:	4603      	mov	r3, r0
    9d70:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_StatusType Status = SPI_UNINIT;
    9d74:	2300      	movs	r3, #0
    9d76:	9303      	str	r3, [sp, #12]
        /* Do nothing */
    }
    else
    {
#endif
        Status = Spi_axSpiHwUnitQueueArray[HWUnit].Status;
    9d78:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9d7c:	4a03      	ldr	r2, [pc, #12]	; (9d8c <Spi_GetHWUnitStatus+0x20>)
    9d7e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    9d82:	9303      	str	r3, [sp, #12]

#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return Status;
    9d84:	9b03      	ldr	r3, [sp, #12]
}
    9d86:	4618      	mov	r0, r3
    9d88:	b004      	add	sp, #16
    9d8a:	4770      	bx	lr
    9d8c:	1fff8de4 	.word	0x1fff8de4

00009d90 <Spi_Cancel>:
*       undefined state due to cancelling a sequence transmission.
*
*/
/**  @implements Spi_Cancel_Activity */
void Spi_Cancel(Spi_SequenceType Sequence)
{
    9d90:	b082      	sub	sp, #8
    9d92:	4603      	mov	r3, r0
    9d94:	f88d 3007 	strb.w	r3, [sp, #7]
        }
        else
        {
#endif
            /* Set sequence state to Cancel */
            Spi_axSpiSequenceState[Sequence].Result = SPI_SEQ_CANCELLED;
    9d98:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9d9c:	4a03      	ldr	r2, [pc, #12]	; (9dac <Spi_Cancel+0x1c>)
    9d9e:	2103      	movs	r1, #3
    9da0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            #endif
#if (SPI_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif
}
    9da4:	bf00      	nop
    9da6:	b002      	add	sp, #8
    9da8:	4770      	bx	lr
    9daa:	bf00      	nop
    9dac:	1fff8df0 	.word	0x1fff8df0

00009db0 <Spi_MainFunction_Handling>:
                /*Do nothing */
            }
        }
    }
#endif /* #if ( (SPI_LEVEL_DELIVERED == SPI_LEVEL1) || (SPI_LEVEL_DELIVERED == SPI_LEVEL2) ) */
}
    9db0:	bf00      	nop
    9db2:	4770      	bx	lr

00009db4 <Spi_Ipw_SyncTransmitProcess>:
        const Spi_JobConfigType *JobConfig,
        const Spi_ChannelConfigType *ChannelConfig,
        Spi_DataBufferType *RxBuffer,
        const Spi_DataBufferType *TxBuffer
    )
{
    9db4:	b500      	push	{lr}
    9db6:	b08d      	sub	sp, #52	; 0x34
    9db8:	9005      	str	r0, [sp, #20]
    9dba:	9104      	str	r1, [sp, #16]
    9dbc:	9203      	str	r2, [sp, #12]
    9dbe:	9302      	str	r3, [sp, #8]
    Lpspi_Ip_StatusType Lpspi_spiStatus = LPSPI_IP_STATUS_SUCCESS;
    9dc0:	2300      	movs	r3, #0
    9dc2:	930b      	str	r3, [sp, #44]	; 0x2c
    const Lpspi_Ip_ExternalDeviceType* LpspiExternalDevice;
#if (SPI_IPW_SPI_FLEXIO_ENABLE == STD_ON)
    Flexio_Spi_Ip_StatusType Flexio_spiStatus = FLEXIO_SPI_IP_STATUS_SUCCESS;
    const Flexio_Spi_Ip_ExternalDeviceType* Flexio_SpiExternalDevice;
#endif
    Std_ReturnType Ipw_Status = (Std_ReturnType)E_OK;
    9dc4:	2300      	movs	r3, #0
    9dc6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    Spi_NumberOfDataType NumberOfBytes;
    Spi_Ipw_SupportedIpsType IpType = JobConfig->ExternalDeviceConfig->ExDeviceConfig->IpType;
    9dca:	9b05      	ldr	r3, [sp, #20]
    9dcc:	6a1b      	ldr	r3, [r3, #32]
    9dce:	681b      	ldr	r3, [r3, #0]
    9dd0:	681b      	ldr	r3, [r3, #0]
    9dd2:	9309      	str	r3, [sp, #36]	; 0x24
        HalfDuplexMode = LPSPI_IP_FULL_DUPLEX;
        HalfDuplexModeSupport = FALSE;
    }
#endif
    
    NumberOfBytes = ChannelConfig->ChannelState->Length;
    9dd4:	9b04      	ldr	r3, [sp, #16]
    9dd6:	699b      	ldr	r3, [r3, #24]
    9dd8:	885b      	ldrh	r3, [r3, #2]
    9dda:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    if (SPI_OVER_LPSPI == IpType)
    9dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9de0:	2b00      	cmp	r3, #0
    9de2:	d12e      	bne.n	9e42 <Spi_Ipw_SyncTransmitProcess+0x8e>
    {
        LpspiExternalDevice = JobConfig->ExternalDeviceConfig->ExDeviceConfig->ExternalDeviceConfig.LpspiExternalDeviceConfig;
    9de4:	9b05      	ldr	r3, [sp, #20]
    9de6:	6a1b      	ldr	r3, [r3, #32]
    9de8:	681b      	ldr	r3, [r3, #0]
    9dea:	689b      	ldr	r3, [r3, #8]
    9dec:	9307      	str	r3, [sp, #28]
        Lpspi_spiStatus = Lpspi_Ip_UpdateDefaultTransmitData(LpspiExternalDevice, ChannelConfig->DefaultTransmitValue);
    9dee:	9b04      	ldr	r3, [sp, #16]
    9df0:	689b      	ldr	r3, [r3, #8]
    9df2:	4619      	mov	r1, r3
    9df4:	9807      	ldr	r0, [sp, #28]
    9df6:	f7ff fadd 	bl	93b4 <Lpspi_Ip_UpdateDefaultTransmitData>
    9dfa:	900b      	str	r0, [sp, #44]	; 0x2c
        if (LPSPI_IP_STATUS_SUCCESS == Lpspi_spiStatus)
    9dfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9dfe:	2b00      	cmp	r3, #0
    9e00:	d11f      	bne.n	9e42 <Spi_Ipw_SyncTransmitProcess+0x8e>
        {
            Lpspi_spiStatus = Lpspi_Ip_UpdateFrameSize(LpspiExternalDevice, ChannelConfig->FrameSize);
    9e02:	9b04      	ldr	r3, [sp, #16]
    9e04:	791b      	ldrb	r3, [r3, #4]
    9e06:	b29b      	uxth	r3, r3
    9e08:	4619      	mov	r1, r3
    9e0a:	9807      	ldr	r0, [sp, #28]
    9e0c:	f7ff fa92 	bl	9334 <Lpspi_Ip_UpdateFrameSize>
    9e10:	900b      	str	r0, [sp, #44]	; 0x2c
            if (LPSPI_IP_STATUS_SUCCESS == Lpspi_spiStatus)
    9e12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9e14:	2b00      	cmp	r3, #0
    9e16:	d114      	bne.n	9e42 <Spi_Ipw_SyncTransmitProcess+0x8e>
            {
                Lpspi_spiStatus = Lpspi_Ip_UpdateLsb(LpspiExternalDevice, ChannelConfig->Lsb);
    9e18:	9b04      	ldr	r3, [sp, #16]
    9e1a:	795b      	ldrb	r3, [r3, #5]
    9e1c:	4619      	mov	r1, r3
    9e1e:	9807      	ldr	r0, [sp, #28]
    9e20:	f7ff faa8 	bl	9374 <Lpspi_Ip_UpdateLsb>
    9e24:	900b      	str	r0, [sp, #44]	; 0x2c
                if (LPSPI_IP_STATUS_SUCCESS == Lpspi_spiStatus)
    9e26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9e28:	2b00      	cmp	r3, #0
    9e2a:	d10a      	bne.n	9e42 <Spi_Ipw_SyncTransmitProcess+0x8e>
                        Lpspi_spiStatus = Lpspi_Ip_SyncTransmitHalfDuplex(LpspiExternalDevice, Buffer, NumberOfBytes, HalfDuplexMode, SPI_TIMEOUT_COUNTER_U32);
                    }
                    else
                    #endif
                    {
                        Lpspi_spiStatus = Lpspi_Ip_SyncTransmit(LpspiExternalDevice, (const uint8*)TxBuffer, RxBuffer, NumberOfBytes, SPI_TIMEOUT_COUNTER_U32);
    9e2c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    9e30:	f24c 3250 	movw	r2, #50000	; 0xc350
    9e34:	9200      	str	r2, [sp, #0]
    9e36:	9a03      	ldr	r2, [sp, #12]
    9e38:	9902      	ldr	r1, [sp, #8]
    9e3a:	9807      	ldr	r0, [sp, #28]
    9e3c:	f7fe fe0a 	bl	8a54 <Lpspi_Ip_SyncTransmit>
    9e40:	900b      	str	r0, [sp, #44]	; 0x2c
            }
        }
    }
    if( (LPSPI_IP_STATUS_SUCCESS != Lpspi_spiStatus) || (FLEXIO_SPI_IP_STATUS_SUCCESS != Flexio_spiStatus))
#else
    if(LPSPI_IP_STATUS_SUCCESS != Lpspi_spiStatus)
    9e42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9e44:	2b00      	cmp	r3, #0
    9e46:	d002      	beq.n	9e4e <Spi_Ipw_SyncTransmitProcess+0x9a>
#endif /*(SPI_IPW_SPI_FLEXIO_ENABLE == STD_ON)*/
    {
        Ipw_Status = (Std_ReturnType)E_NOT_OK;
    9e48:	2301      	movs	r3, #1
    9e4a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    }
    return Ipw_Status;
    9e4e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
}
    9e52:	4618      	mov	r0, r3
    9e54:	b00d      	add	sp, #52	; 0x34
    9e56:	f85d fb04 	ldr.w	pc, [sp], #4

00009e5a <Spi_Ipw_Init>:
/*==================================================================================================
*                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* Spi_Ipw_Init */
void Spi_Ipw_Init(const Spi_HWUnitType HWUnitId, const Spi_HWUnitConfigType *HWUnit)
{
    9e5a:	b500      	push	{lr}
    9e5c:	b083      	sub	sp, #12
    9e5e:	4603      	mov	r3, r0
    9e60:	9100      	str	r1, [sp, #0]
    9e62:	f88d 3007 	strb.w	r3, [sp, #7]
    if (SPI_OVER_LPSPI == HWUnit->IpType)
    9e66:	9b00      	ldr	r3, [sp, #0]
    9e68:	681b      	ldr	r3, [r3, #0]
    9e6a:	2b00      	cmp	r3, #0
    9e6c:	d104      	bne.n	9e78 <Spi_Ipw_Init+0x1e>
    #if ((SPI_LEVEL_DELIVERED == SPI_LEVEL1) || (SPI_LEVEL_DELIVERED == SPI_LEVEL2))
        Spi_Ipw_au8LpspiHWUnitMapping[HWUnit->Instance] = HWUnitId;
    #else
        (void)HWUnitId;
    #endif
        (void)Lpspi_Ip_Init(HWUnit->IpConfig.LpspiIpConfig);
    9e6e:	9b00      	ldr	r3, [sp, #0]
    9e70:	68db      	ldr	r3, [r3, #12]
    9e72:	4618      	mov	r0, r3
    9e74:	f7fe fd62 	bl	893c <Lpspi_Ip_Init>
        (void)HWUnitId;
    #endif
        (void)Flexio_Spi_Ip_Init(HWUnit->IpConfig.FlexioSpiIpConfig);
    }
#endif
}
    9e78:	bf00      	nop
    9e7a:	b003      	add	sp, #12
    9e7c:	f85d fb04 	ldr.w	pc, [sp], #4

00009e80 <Spi_Ipw_DeInit>:

/* Spi_Ipw_DeInit */
void Spi_Ipw_DeInit(Spi_HWUnitType HWUnit, uint32 SpiCoreID)
{
    9e80:	b500      	push	{lr}
    9e82:	b083      	sub	sp, #12
    9e84:	4603      	mov	r3, r0
    9e86:	9100      	str	r1, [sp, #0]
    9e88:	f88d 3007 	strb.w	r3, [sp, #7]
    if (SPI_OVER_LPSPI == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->IpType)
    9e8c:	4a0f      	ldr	r2, [pc, #60]	; (9ecc <Spi_Ipw_DeInit+0x4c>)
    9e8e:	9b00      	ldr	r3, [sp, #0]
    9e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e94:	69da      	ldr	r2, [r3, #28]
    9e96:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e9a:	009b      	lsls	r3, r3, #2
    9e9c:	4413      	add	r3, r2
    9e9e:	681b      	ldr	r3, [r3, #0]
    9ea0:	681b      	ldr	r3, [r3, #0]
    9ea2:	2b00      	cmp	r3, #0
    9ea4:	d10d      	bne.n	9ec2 <Spi_Ipw_DeInit+0x42>
    {
        (void)Lpspi_Ip_DeInit(Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->Instance);
    9ea6:	4a09      	ldr	r2, [pc, #36]	; (9ecc <Spi_Ipw_DeInit+0x4c>)
    9ea8:	9b00      	ldr	r3, [sp, #0]
    9eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9eae:	69da      	ldr	r2, [r3, #28]
    9eb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9eb4:	009b      	lsls	r3, r3, #2
    9eb6:	4413      	add	r3, r2
    9eb8:	681b      	ldr	r3, [r3, #0]
    9eba:	791b      	ldrb	r3, [r3, #4]
    9ebc:	4618      	mov	r0, r3
    9ebe:	f7fe fd99 	bl	89f4 <Lpspi_Ip_DeInit>
    else
    {
        (void)Flexio_Spi_Ip_DeInit(Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->Instance);
    }
#endif
}
    9ec2:	bf00      	nop
    9ec4:	b003      	add	sp, #12
    9ec6:	f85d fb04 	ldr.w	pc, [sp], #4
    9eca:	bf00      	nop
    9ecc:	1fff8dec 	.word	0x1fff8dec

00009ed0 <Spi_Ipw_SyncTransmit>:

/* Spi_Ipw_SyncTransmit */
#if ( (SPI_LEVEL_DELIVERED == SPI_LEVEL2) || (SPI_LEVEL_DELIVERED == SPI_LEVEL0) )
Std_ReturnType Spi_Ipw_SyncTransmit(const Spi_JobConfigType *JobConfig, uint32 SpiCoreID)
{
    9ed0:	b500      	push	{lr}
    9ed2:	b08b      	sub	sp, #44	; 0x2c
    9ed4:	9001      	str	r0, [sp, #4]
    9ed6:	9100      	str	r1, [sp, #0]

    Std_ReturnType Ipw_Status = (Std_ReturnType)E_OK;
    9ed8:	2300      	movs	r3, #0
    9eda:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    const Spi_ChannelConfigType *ChannelConfig;
    const Spi_ChannelConfigType *NextChannelConfig;
    Spi_ChannelType ChannelID;
    Spi_ChannelType NumChannelsInJob;
    Spi_ChannelType ChannelIndex;
    Spi_Ipw_SupportedIpsType IpType = JobConfig->ExternalDeviceConfig->ExDeviceConfig->IpType;
    9ede:	9b01      	ldr	r3, [sp, #4]
    9ee0:	6a1b      	ldr	r3, [r3, #32]
    9ee2:	681b      	ldr	r3, [r3, #0]
    9ee4:	681b      	ldr	r3, [r3, #0]
    9ee6:	9306      	str	r3, [sp, #24]
    
    NumChannelsInJob = JobConfig->NumChannels;
    9ee8:	9b01      	ldr	r3, [sp, #4]
    9eea:	781b      	ldrb	r3, [r3, #0]
    9eec:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChannelIndex = (Spi_ChannelType)0; ChannelIndex < NumChannelsInJob; ChannelIndex++)
    9ef0:	2300      	movs	r3, #0
    9ef2:	f88d 301f 	strb.w	r3, [sp, #31]
    9ef6:	e0e6      	b.n	a0c6 <Spi_Ipw_SyncTransmit+0x1f6>
    {
        ChannelID = JobConfig->ChannelIndexList[ChannelIndex];
    9ef8:	9b01      	ldr	r3, [sp, #4]
    9efa:	685a      	ldr	r2, [r3, #4]
    9efc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9f00:	4413      	add	r3, r2
    9f02:	781b      	ldrb	r3, [r3, #0]
    9f04:	f88d 3016 	strb.w	r3, [sp, #22]
        ChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[ChannelID].ChannelCfg;
    9f08:	4a75      	ldr	r2, [pc, #468]	; (a0e0 <Spi_Ipw_SyncTransmit+0x210>)
    9f0a:	9b00      	ldr	r3, [sp, #0]
    9f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f10:	68da      	ldr	r2, [r3, #12]
    9f12:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9f16:	009b      	lsls	r3, r3, #2
    9f18:	4413      	add	r3, r2
    9f1a:	681b      	ldr	r3, [r3, #0]
    9f1c:	9304      	str	r3, [sp, #16]
        RxBuffer = ChannelConfig->BufferDescriptor->BufferRX;
    9f1e:	9b04      	ldr	r3, [sp, #16]
    9f20:	691b      	ldr	r3, [r3, #16]
    9f22:	689b      	ldr	r3, [r3, #8]
    9f24:	9303      	str	r3, [sp, #12]
        if(0u != (ChannelConfig->ChannelState->Flags & SPI_CHANNEL_FLAG_TX_DEFAULT_U8))
    9f26:	9b04      	ldr	r3, [sp, #16]
    9f28:	699b      	ldr	r3, [r3, #24]
    9f2a:	781b      	ldrb	r3, [r3, #0]
    9f2c:	f003 0301 	and.w	r3, r3, #1
    9f30:	2b00      	cmp	r3, #0
    9f32:	d002      	beq.n	9f3a <Spi_Ipw_SyncTransmit+0x6a>
        {
            TxBuffer = NULL_PTR;
    9f34:	2300      	movs	r3, #0
    9f36:	9308      	str	r3, [sp, #32]
    9f38:	e00c      	b.n	9f54 <Spi_Ipw_SyncTransmit+0x84>
        }
        else
        {
            if(EB == ChannelConfig->BufferType)
    9f3a:	9b04      	ldr	r3, [sp, #16]
    9f3c:	681b      	ldr	r3, [r3, #0]
    9f3e:	2b01      	cmp	r3, #1
    9f40:	d104      	bne.n	9f4c <Spi_Ipw_SyncTransmit+0x7c>
            {
                TxBuffer = ChannelConfig->BufferDescriptor->ExternalBufferTX;
    9f42:	9b04      	ldr	r3, [sp, #16]
    9f44:	691b      	ldr	r3, [r3, #16]
    9f46:	681b      	ldr	r3, [r3, #0]
    9f48:	9308      	str	r3, [sp, #32]
    9f4a:	e003      	b.n	9f54 <Spi_Ipw_SyncTransmit+0x84>
            }
            else
            {
                TxBuffer = (const uint8*)(ChannelConfig->BufferDescriptor->InternalBufferTX);
    9f4c:	9b04      	ldr	r3, [sp, #16]
    9f4e:	691b      	ldr	r3, [r3, #16]
    9f50:	685b      	ldr	r3, [r3, #4]
    9f52:	9308      	str	r3, [sp, #32]
            }
        }
        
        if (SPI_OVER_LPSPI == IpType)
    9f54:	9b06      	ldr	r3, [sp, #24]
    9f56:	2b00      	cmp	r3, #0
    9f58:	f040 80a7 	bne.w	a0aa <Spi_Ipw_SyncTransmit+0x1da>
        {
            if(ChannelIndex == (NumChannelsInJob - 1u))
    9f5c:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9f60:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9f64:	3b01      	subs	r3, #1
    9f66:	429a      	cmp	r2, r3
    9f68:	d10a      	bne.n	9f80 <Spi_Ipw_SyncTransmit+0xb0>
            {
                /* Clear CS after current channel */
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->KeepCs = FALSE;
    9f6a:	9b01      	ldr	r3, [sp, #4]
    9f6c:	6a1b      	ldr	r3, [r3, #32]
    9f6e:	681b      	ldr	r3, [r3, #0]
    9f70:	791b      	ldrb	r3, [r3, #4]
    9f72:	461a      	mov	r2, r3
    9f74:	4b5b      	ldr	r3, [pc, #364]	; (a0e4 <Spi_Ipw_SyncTransmit+0x214>)
    9f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9f7a:	2200      	movs	r2, #0
    9f7c:	771a      	strb	r2, [r3, #28]
    9f7e:	e07b      	b.n	a078 <Spi_Ipw_SyncTransmit+0x1a8>
            }
            else
            {
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->KeepCs = TRUE;
    9f80:	9b01      	ldr	r3, [sp, #4]
    9f82:	6a1b      	ldr	r3, [r3, #32]
    9f84:	681b      	ldr	r3, [r3, #0]
    9f86:	791b      	ldrb	r3, [r3, #4]
    9f88:	461a      	mov	r2, r3
    9f8a:	4b56      	ldr	r3, [pc, #344]	; (a0e4 <Spi_Ipw_SyncTransmit+0x214>)
    9f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9f90:	2201      	movs	r2, #1
    9f92:	771a      	strb	r2, [r3, #28]
                MCAL_DATA_SYNC_BARRIER();
    9f94:	f3bf 8f4f 	dsb	sy
                /* update data for next transfer */
                NextChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[JobConfig->ChannelIndexList[ChannelIndex + 1u]].ChannelCfg;
    9f98:	4a51      	ldr	r2, [pc, #324]	; (a0e0 <Spi_Ipw_SyncTransmit+0x210>)
    9f9a:	9b00      	ldr	r3, [sp, #0]
    9f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fa0:	68da      	ldr	r2, [r3, #12]
    9fa2:	9b01      	ldr	r3, [sp, #4]
    9fa4:	6859      	ldr	r1, [r3, #4]
    9fa6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9faa:	3301      	adds	r3, #1
    9fac:	440b      	add	r3, r1
    9fae:	781b      	ldrb	r3, [r3, #0]
    9fb0:	009b      	lsls	r3, r3, #2
    9fb2:	4413      	add	r3, r2
    9fb4:	681b      	ldr	r3, [r3, #0]
    9fb6:	9302      	str	r3, [sp, #8]
                MCAL_DATA_SYNC_BARRIER();
    9fb8:	f3bf 8f4f 	dsb	sy
                if(0u != (NextChannelConfig->ChannelState->Flags & SPI_CHANNEL_FLAG_TX_DEFAULT_U8))
    9fbc:	9b02      	ldr	r3, [sp, #8]
    9fbe:	699b      	ldr	r3, [r3, #24]
    9fc0:	781b      	ldrb	r3, [r3, #0]
    9fc2:	f003 0301 	and.w	r3, r3, #1
    9fc6:	2b00      	cmp	r3, #0
    9fc8:	d00a      	beq.n	9fe0 <Spi_Ipw_SyncTransmit+0x110>
                {
                    Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->TxBufferNext = NULL_PTR;
    9fca:	9b01      	ldr	r3, [sp, #4]
    9fcc:	6a1b      	ldr	r3, [r3, #32]
    9fce:	681b      	ldr	r3, [r3, #0]
    9fd0:	791b      	ldrb	r3, [r3, #4]
    9fd2:	461a      	mov	r2, r3
    9fd4:	4b43      	ldr	r3, [pc, #268]	; (a0e4 <Spi_Ipw_SyncTransmit+0x214>)
    9fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9fda:	2200      	movs	r2, #0
    9fdc:	62da      	str	r2, [r3, #44]	; 0x2c
    9fde:	e01c      	b.n	a01a <Spi_Ipw_SyncTransmit+0x14a>
                }
                else
                {
                    if(EB == NextChannelConfig->BufferType)
    9fe0:	9b02      	ldr	r3, [sp, #8]
    9fe2:	681b      	ldr	r3, [r3, #0]
    9fe4:	2b01      	cmp	r3, #1
    9fe6:	d10c      	bne.n	a002 <Spi_Ipw_SyncTransmit+0x132>
                    {
                        Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->TxBufferNext = NextChannelConfig->BufferDescriptor->ExternalBufferTX;
    9fe8:	9b02      	ldr	r3, [sp, #8]
    9fea:	691a      	ldr	r2, [r3, #16]
    9fec:	9b01      	ldr	r3, [sp, #4]
    9fee:	6a1b      	ldr	r3, [r3, #32]
    9ff0:	681b      	ldr	r3, [r3, #0]
    9ff2:	791b      	ldrb	r3, [r3, #4]
    9ff4:	4619      	mov	r1, r3
    9ff6:	4b3b      	ldr	r3, [pc, #236]	; (a0e4 <Spi_Ipw_SyncTransmit+0x214>)
    9ff8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    9ffc:	6812      	ldr	r2, [r2, #0]
    9ffe:	62da      	str	r2, [r3, #44]	; 0x2c
    a000:	e00b      	b.n	a01a <Spi_Ipw_SyncTransmit+0x14a>
                    }
                    else
                    {
                        Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->TxBufferNext = NextChannelConfig->BufferDescriptor->InternalBufferTX;
    a002:	9b02      	ldr	r3, [sp, #8]
    a004:	691a      	ldr	r2, [r3, #16]
    a006:	9b01      	ldr	r3, [sp, #4]
    a008:	6a1b      	ldr	r3, [r3, #32]
    a00a:	681b      	ldr	r3, [r3, #0]
    a00c:	791b      	ldrb	r3, [r3, #4]
    a00e:	4619      	mov	r1, r3
    a010:	4b34      	ldr	r3, [pc, #208]	; (a0e4 <Spi_Ipw_SyncTransmit+0x214>)
    a012:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    a016:	6852      	ldr	r2, [r2, #4]
    a018:	62da      	str	r2, [r3, #44]	; 0x2c
                    }
                }
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->FrameSizeNext = NextChannelConfig->FrameSize;
    a01a:	9b02      	ldr	r3, [sp, #8]
    a01c:	791a      	ldrb	r2, [r3, #4]
    a01e:	9b01      	ldr	r3, [sp, #4]
    a020:	6a1b      	ldr	r3, [r3, #32]
    a022:	681b      	ldr	r3, [r3, #0]
    a024:	791b      	ldrb	r3, [r3, #4]
    a026:	4619      	mov	r1, r3
    a028:	4b2e      	ldr	r3, [pc, #184]	; (a0e4 <Spi_Ipw_SyncTransmit+0x214>)
    a02a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    a02e:	b292      	uxth	r2, r2
    a030:	861a      	strh	r2, [r3, #48]	; 0x30
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->LsbNext = NextChannelConfig->Lsb;
    a032:	9b01      	ldr	r3, [sp, #4]
    a034:	6a1b      	ldr	r3, [r3, #32]
    a036:	681b      	ldr	r3, [r3, #0]
    a038:	791b      	ldrb	r3, [r3, #4]
    a03a:	461a      	mov	r2, r3
    a03c:	4b29      	ldr	r3, [pc, #164]	; (a0e4 <Spi_Ipw_SyncTransmit+0x214>)
    a03e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a042:	9a02      	ldr	r2, [sp, #8]
    a044:	7952      	ldrb	r2, [r2, #5]
    a046:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->DefaultDataNext = NextChannelConfig->DefaultTransmitValue;
    a04a:	9b01      	ldr	r3, [sp, #4]
    a04c:	6a1b      	ldr	r3, [r3, #32]
    a04e:	681b      	ldr	r3, [r3, #0]
    a050:	791b      	ldrb	r3, [r3, #4]
    a052:	461a      	mov	r2, r3
    a054:	4b23      	ldr	r3, [pc, #140]	; (a0e4 <Spi_Ipw_SyncTransmit+0x214>)
    a056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a05a:	9a02      	ldr	r2, [sp, #8]
    a05c:	6892      	ldr	r2, [r2, #8]
    a05e:	635a      	str	r2, [r3, #52]	; 0x34
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->LengthNext = NextChannelConfig->ChannelState->Length;
    a060:	9b02      	ldr	r3, [sp, #8]
    a062:	699a      	ldr	r2, [r3, #24]
    a064:	9b01      	ldr	r3, [sp, #4]
    a066:	6a1b      	ldr	r3, [r3, #32]
    a068:	681b      	ldr	r3, [r3, #0]
    a06a:	791b      	ldrb	r3, [r3, #4]
    a06c:	4619      	mov	r1, r3
    a06e:	4b1d      	ldr	r3, [pc, #116]	; (a0e4 <Spi_Ipw_SyncTransmit+0x214>)
    a070:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    a074:	8852      	ldrh	r2, [r2, #2]
    a076:	871a      	strh	r2, [r3, #56]	; 0x38
                    Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->NextChannelIsRX = FALSE;
                }
                #endif
            }
            
            if(0u == ChannelIndex)
    a078:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a07c:	2b00      	cmp	r3, #0
    a07e:	d10a      	bne.n	a096 <Spi_Ipw_SyncTransmit+0x1c6>
            {
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->FirstCmd = TRUE;
    a080:	9b01      	ldr	r3, [sp, #4]
    a082:	6a1b      	ldr	r3, [r3, #32]
    a084:	681b      	ldr	r3, [r3, #0]
    a086:	791b      	ldrb	r3, [r3, #4]
    a088:	461a      	mov	r2, r3
    a08a:	4b16      	ldr	r3, [pc, #88]	; (a0e4 <Spi_Ipw_SyncTransmit+0x214>)
    a08c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a090:	2201      	movs	r2, #1
    a092:	775a      	strb	r2, [r3, #29]
    a094:	e009      	b.n	a0aa <Spi_Ipw_SyncTransmit+0x1da>
            }
            else
            {
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->FirstCmd = FALSE;
    a096:	9b01      	ldr	r3, [sp, #4]
    a098:	6a1b      	ldr	r3, [r3, #32]
    a09a:	681b      	ldr	r3, [r3, #0]
    a09c:	791b      	ldrb	r3, [r3, #4]
    a09e:	461a      	mov	r2, r3
    a0a0:	4b10      	ldr	r3, [pc, #64]	; (a0e4 <Spi_Ipw_SyncTransmit+0x214>)
    a0a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a0a6:	2200      	movs	r2, #0
    a0a8:	775a      	strb	r2, [r3, #29]
            }
        }
        Ipw_Status = Spi_Ipw_SyncTransmitProcess(JobConfig, ChannelConfig, RxBuffer, (const uint8*)TxBuffer);
    a0aa:	9b08      	ldr	r3, [sp, #32]
    a0ac:	9a03      	ldr	r2, [sp, #12]
    a0ae:	9904      	ldr	r1, [sp, #16]
    a0b0:	9801      	ldr	r0, [sp, #4]
    a0b2:	f7ff fe7f 	bl	9db4 <Spi_Ipw_SyncTransmitProcess>
    a0b6:	4603      	mov	r3, r0
    a0b8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    for (ChannelIndex = (Spi_ChannelType)0; ChannelIndex < NumChannelsInJob; ChannelIndex++)
    a0bc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a0c0:	3301      	adds	r3, #1
    a0c2:	f88d 301f 	strb.w	r3, [sp, #31]
    a0c6:	f89d 201f 	ldrb.w	r2, [sp, #31]
    a0ca:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a0ce:	429a      	cmp	r2, r3
    a0d0:	f4ff af12 	bcc.w	9ef8 <Spi_Ipw_SyncTransmit+0x28>
    }
    return Ipw_Status;
    a0d4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    a0d8:	4618      	mov	r0, r3
    a0da:	b00b      	add	sp, #44	; 0x2c
    a0dc:	f85d fb04 	ldr.w	pc, [sp], #4
    a0e0:	1fff8dec 	.word	0x1fff8dec
    a0e4:	1fff8dd8 	.word	0x1fff8dd8

0000a0e8 <Can_IsControllersBusy>:
        }
    }
#endif /* CAN_43_FLEXCAN_MAINFUNCTION_MULTIPLE_READ == STD_ON */

static boolean Can_IsControllersBusy(uint32 u32CoreId)
{
    a0e8:	b084      	sub	sp, #16
    a0ea:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    a0ec:	2300      	movs	r3, #0
    a0ee:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    a0f2:	2300      	movs	r3, #0
    a0f4:	f88d 300e 	strb.w	r3, [sp, #14]

    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a0f8:	2300      	movs	r3, #0
    a0fa:	f88d 300e 	strb.w	r3, [sp, #14]
    a0fe:	e01b      	b.n	a138 <Can_IsControllersBusy+0x50>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a100:	4a12      	ldr	r2, [pc, #72]	; (a14c <Can_IsControllersBusy+0x64>)
    a102:	9b01      	ldr	r3, [sp, #4]
    a104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a108:	695a      	ldr	r2, [r3, #20]
    a10a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a10e:	009b      	lsls	r3, r3, #2
    a110:	4413      	add	r3, r2
    a112:	681b      	ldr	r3, [r3, #0]
    a114:	2b00      	cmp	r3, #0
    a116:	d00a      	beq.n	a12e <Can_IsControllersBusy+0x46>
        {
            if (CAN_CS_UNINIT != Can_eControllerState[u8ControllerID])
    a118:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a11c:	4a0c      	ldr	r2, [pc, #48]	; (a150 <Can_IsControllersBusy+0x68>)
    a11e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a122:	2b00      	cmp	r3, #0
    a124:	d003      	beq.n	a12e <Can_IsControllersBusy+0x46>
                *   The function Can_Init shall raise the error CAN_E_TRANSITION if the CAN
                *   controllers are not in state UNINIT.
                */
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_TRANSITION);
            #endif
                bCtrlBusy = TRUE;
    a126:	2301      	movs	r3, #1
    a128:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    a12c:	e008      	b.n	a140 <Can_IsControllersBusy+0x58>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a12e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a132:	3301      	adds	r3, #1
    a134:	f88d 300e 	strb.w	r3, [sp, #14]
    a138:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a13c:	2b01      	cmp	r3, #1
    a13e:	d9df      	bls.n	a100 <Can_IsControllersBusy+0x18>
            }
        }
    }

    return bCtrlBusy;
    a140:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a144:	4618      	mov	r0, r3
    a146:	b004      	add	sp, #16
    a148:	4770      	bx	lr
    a14a:	bf00      	nop
    a14c:	1fff8e14 	.word	0x1fff8e14
    a150:	1fff8e0c 	.word	0x1fff8e0c

0000a154 <Can_InitControllers>:

static void Can_InitControllers(uint32 u32CoreId)
{
    a154:	b500      	push	{lr}
    a156:	b085      	sub	sp, #20
    a158:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    a15a:	2300      	movs	r3, #0
    a15c:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    a160:	2300      	movs	r3, #0
    a162:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a166:	2300      	movs	r3, #0
    a168:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a16a:	2300      	movs	r3, #0
    a16c:	f88d 300e 	strb.w	r3, [sp, #14]
    a170:	e035      	b.n	a1de <Can_InitControllers+0x8a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a172:	4a30      	ldr	r2, [pc, #192]	; (a234 <Can_InitControllers+0xe0>)
    a174:	9b01      	ldr	r3, [sp, #4]
    a176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a17a:	695a      	ldr	r2, [r3, #20]
    a17c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a180:	009b      	lsls	r3, r3, #2
    a182:	4413      	add	r3, r2
    a184:	681b      	ldr	r3, [r3, #0]
    a186:	2b00      	cmp	r3, #0
    a188:	d024      	beq.n	a1d4 <Can_InitControllers+0x80>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a18a:	4a2a      	ldr	r2, [pc, #168]	; (a234 <Can_InitControllers+0xe0>)
    a18c:	9b01      	ldr	r3, [sp, #4]
    a18e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a192:	695a      	ldr	r2, [r3, #20]
    a194:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a198:	009b      	lsls	r3, r3, #2
    a19a:	4413      	add	r3, r2
    a19c:	681b      	ldr	r3, [r3, #0]
    a19e:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    a1a0:	9b02      	ldr	r3, [sp, #8]
    a1a2:	7a1b      	ldrb	r3, [r3, #8]
    a1a4:	2b00      	cmp	r3, #0
    a1a6:	d015      	beq.n	a1d4 <Can_InitControllers+0x80>
                */
            #if ((CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) || (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON))
                Can_au16BaudrateIDConfig[u8ControllerID] = Can_pController->Can_u16DefaultBaudrateID;
            #endif
                /* Reset interrupt level to default value after re-init */
                Can_au8DisableInterruptLevel[u8ControllerID] = 0U;
    a1a8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a1ac:	4a22      	ldr	r2, [pc, #136]	; (a238 <Can_InitControllers+0xe4>)
    a1ae:	2100      	movs	r1, #0
    a1b0:	54d1      	strb	r1, [r2, r3]
            #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
                Can_apxCtrlConfigIcomIndex[u8ControllerID] = NULL_PTR;
            #endif
                /* Init the controller */
                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_Init(Can_pController))
    a1b2:	9802      	ldr	r0, [sp, #8]
    a1b4:	f000 ff82 	bl	b0bc <Can_43_FLEXCAN_Ipw_Init>
    a1b8:	4603      	mov	r3, r0
    a1ba:	2b00      	cmp	r3, #0
    a1bc:	d106      	bne.n	a1cc <Can_InitControllers+0x78>
                {
                    Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    a1be:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a1c2:	4a1e      	ldr	r2, [pc, #120]	; (a23c <Can_InitControllers+0xe8>)
    a1c4:	2102      	movs	r1, #2
    a1c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    a1ca:	e003      	b.n	a1d4 <Can_InitControllers+0x80>
                else
                {
                    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_INIT_FAILED);
                    #endif
                    bCtrlBusy = TRUE;
    a1cc:	2301      	movs	r3, #1
    a1ce:	f88d 300f 	strb.w	r3, [sp, #15]
                    break;
    a1d2:	e008      	b.n	a1e6 <Can_InitControllers+0x92>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a1d4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a1d8:	3301      	adds	r3, #1
    a1da:	f88d 300e 	strb.w	r3, [sp, #14]
    a1de:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a1e2:	2b01      	cmp	r3, #1
    a1e4:	d9c5      	bls.n	a172 <Can_InitControllers+0x1e>
    }
    /*
    *  [SWS_Can_00246] After initializing all controllers inside the HW Unit, the function Can_Init
    *   shall change the module state to CAN_READY.
    */
    if (TRUE == bCtrlBusy)
    a1e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a1ea:	2b00      	cmp	r3, #0
    a1ec:	d01e      	beq.n	a22c <Can_InitControllers+0xd8>
    {
        /* Init failed due to one or more controllers failed, reset status of all  core's current controllers */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a1ee:	2300      	movs	r3, #0
    a1f0:	f88d 300e 	strb.w	r3, [sp, #14]
    a1f4:	e016      	b.n	a224 <Can_InitControllers+0xd0>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a1f6:	4a0f      	ldr	r2, [pc, #60]	; (a234 <Can_InitControllers+0xe0>)
    a1f8:	9b01      	ldr	r3, [sp, #4]
    a1fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1fe:	695a      	ldr	r2, [r3, #20]
    a200:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a204:	009b      	lsls	r3, r3, #2
    a206:	4413      	add	r3, r2
    a208:	681b      	ldr	r3, [r3, #0]
    a20a:	2b00      	cmp	r3, #0
    a20c:	d005      	beq.n	a21a <Can_InitControllers+0xc6>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    a20e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a212:	4a0a      	ldr	r2, [pc, #40]	; (a23c <Can_InitControllers+0xe8>)
    a214:	2100      	movs	r1, #0
    a216:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a21a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a21e:	3301      	adds	r3, #1
    a220:	f88d 300e 	strb.w	r3, [sp, #14]
    a224:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a228:	2b01      	cmp	r3, #1
    a22a:	d9e4      	bls.n	a1f6 <Can_InitControllers+0xa2>
    else
    {
        Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_READY;
    }
#endif
}
    a22c:	bf00      	nop
    a22e:	b005      	add	sp, #20
    a230:	f85d fb04 	ldr.w	pc, [sp], #4
    a234:	1fff8e14 	.word	0x1fff8e14
    a238:	1fff8e08 	.word	0x1fff8e08
    a23c:	1fff8e0c 	.word	0x1fff8e0c

0000a240 <Can_DeInitControllers>:
    return bResult;
}
#endif

static void Can_DeInitControllers(uint32 u32CoreId)
{
    a240:	b500      	push	{lr}
    a242:	b085      	sub	sp, #20
    a244:	9001      	str	r0, [sp, #4]
    uint8 u8ControllerID = 0U;
    a246:	2300      	movs	r3, #0
    a248:	f88d 300f 	strb.w	r3, [sp, #15]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a24c:	2300      	movs	r3, #0
    a24e:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a250:	2300      	movs	r3, #0
    a252:	f88d 300f 	strb.w	r3, [sp, #15]
    a256:	e028      	b.n	a2aa <Can_DeInitControllers+0x6a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a258:	4a18      	ldr	r2, [pc, #96]	; (a2bc <Can_DeInitControllers+0x7c>)
    a25a:	9b01      	ldr	r3, [sp, #4]
    a25c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a260:	695a      	ldr	r2, [r3, #20]
    a262:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a266:	009b      	lsls	r3, r3, #2
    a268:	4413      	add	r3, r2
    a26a:	681b      	ldr	r3, [r3, #0]
    a26c:	2b00      	cmp	r3, #0
    a26e:	d017      	beq.n	a2a0 <Can_DeInitControllers+0x60>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a270:	4a12      	ldr	r2, [pc, #72]	; (a2bc <Can_DeInitControllers+0x7c>)
    a272:	9b01      	ldr	r3, [sp, #4]
    a274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a278:	695a      	ldr	r2, [r3, #20]
    a27a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a27e:	009b      	lsls	r3, r3, #2
    a280:	4413      	add	r3, r2
    a282:	681b      	ldr	r3, [r3, #0]
    a284:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    a286:	9b02      	ldr	r3, [sp, #8]
    a288:	7a1b      	ldrb	r3, [r3, #8]
    a28a:	2b00      	cmp	r3, #0
    a28c:	d008      	beq.n	a2a0 <Can_DeInitControllers+0x60>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    a28e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a292:	4a0b      	ldr	r2, [pc, #44]	; (a2c0 <Can_DeInitControllers+0x80>)
    a294:	2100      	movs	r1, #0
    a296:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                Can_43_FLEXCAN_Ipw_DeInit(Can_pController);
    a29a:	9802      	ldr	r0, [sp, #8]
    a29c:	f001 f81a 	bl	b2d4 <Can_43_FLEXCAN_Ipw_DeInit>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a2a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a2a4:	3301      	adds	r3, #1
    a2a6:	f88d 300f 	strb.w	r3, [sp, #15]
    a2aa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a2ae:	2b01      	cmp	r3, #1
    a2b0:	d9d2      	bls.n	a258 <Can_DeInitControllers+0x18>
            }
        }
    }
}
    a2b2:	bf00      	nop
    a2b4:	bf00      	nop
    a2b6:	b005      	add	sp, #20
    a2b8:	f85d fb04 	ldr.w	pc, [sp], #4
    a2bc:	1fff8e14 	.word	0x1fff8e14
    a2c0:	1fff8e0c 	.word	0x1fff8e0c

0000a2c4 <Can_43_FLEXCAN_Init>:
* @api
*/

/* implements     Can_Init_Activity */
void Can_43_FLEXCAN_Init(const Can_43_FLEXCAN_ConfigType * Config)
{
    a2c4:	b500      	push	{lr}
    a2c6:	b085      	sub	sp, #20
    a2c8:	9001      	str	r0, [sp, #4]
    uint32 u32CoreId = 0U;
    a2ca:	2300      	movs	r3, #0
    a2cc:	9303      	str	r3, [sp, #12]
    boolean bCtrlBusy = FALSE;
    a2ce:	2300      	movs	r3, #0
    a2d0:	f88d 300b 	strb.w	r3, [sp, #11]
#if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
    boolean bValidCoreID = FALSE;
#endif

    u32CoreId = Can_GetCoreID();
    a2d4:	2300      	movs	r3, #0
    a2d6:	9303      	str	r3, [sp, #12]
        #if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
            if (u32CoreId == Config->Can_u32CoreID)
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Copy pointer to current Can Driver configuration. */
                Can_apxConfig[u32CoreId] = Config;
    a2d8:	490c      	ldr	r1, [pc, #48]	; (a30c <Can_43_FLEXCAN_Init+0x48>)
    a2da:	9b03      	ldr	r3, [sp, #12]
    a2dc:	9a01      	ldr	r2, [sp, #4]
    a2de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (TRUE == bValidCoreID)
            {
#endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Fault Injection point to allow to test SWS_Can_00408 */
                MCAL_FAULT_INJECTION_POINT(CAN_FIP_1_CHANGE_DRIVER_TO_UNINITIALIZED);
                bCtrlBusy = Can_IsControllersBusy(u32CoreId);
    a2e2:	9803      	ldr	r0, [sp, #12]
    a2e4:	f7ff ff00 	bl	a0e8 <Can_IsControllersBusy>
    a2e8:	4603      	mov	r3, r0
    a2ea:	f88d 300b 	strb.w	r3, [sp, #11]
                if (FALSE == bCtrlBusy)
    a2ee:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a2f2:	f083 0301 	eor.w	r3, r3, #1
    a2f6:	b2db      	uxtb	r3, r3
    a2f8:	2b00      	cmp	r3, #0
    a2fa:	d002      	beq.n	a302 <Can_43_FLEXCAN_Init+0x3e>
                {
                    Can_InitControllers(u32CoreId);
    a2fc:	9803      	ldr	r0, [sp, #12]
    a2fe:	f7ff ff29 	bl	a154 <Can_InitControllers>

#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif /* (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) */
}
    a302:	bf00      	nop
    a304:	b005      	add	sp, #20
    a306:	f85d fb04 	ldr.w	pc, [sp], #4
    a30a:	bf00      	nop
    a30c:	1fff8e14 	.word	0x1fff8e14

0000a310 <Can_43_FLEXCAN_DeInit>:
* @post           Can_DeInit shall de-initialize all the controllers and set the driver in UNINIT state.
*
*/
/* implements     Can_DeInit_Activity */
void Can_43_FLEXCAN_DeInit(void)
{
    a310:	b500      	push	{lr}
    a312:	b083      	sub	sp, #12
    /* Variable for indexing the controllers. */
    uint8 u8ControllerID = 0U;
    a314:	2300      	movs	r3, #0
    a316:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean bCtrlBusy = FALSE;
    a31a:	2300      	movs	r3, #0
    a31c:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 u32CoreId = 0U;
    a320:	2300      	movs	r3, #0
    a322:	9300      	str	r3, [sp, #0]

    u32CoreId = Can_GetCoreID();
    a324:	2300      	movs	r3, #0
    a326:	9300      	str	r3, [sp, #0]
    }
    else
    {
#endif
        /* Loop through all Can controllers configured based CanControllerId parameter. */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a328:	2300      	movs	r3, #0
    a32a:	f88d 3007 	strb.w	r3, [sp, #7]
    a32e:	e01b      	b.n	a368 <Can_43_FLEXCAN_DeInit+0x58>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a330:	4a19      	ldr	r2, [pc, #100]	; (a398 <Can_43_FLEXCAN_DeInit+0x88>)
    a332:	9b00      	ldr	r3, [sp, #0]
    a334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a338:	695a      	ldr	r2, [r3, #20]
    a33a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a33e:	009b      	lsls	r3, r3, #2
    a340:	4413      	add	r3, r2
    a342:	681b      	ldr	r3, [r3, #0]
    a344:	2b00      	cmp	r3, #0
    a346:	d00a      	beq.n	a35e <Can_43_FLEXCAN_DeInit+0x4e>
            {
                if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    a348:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a34c:	4a13      	ldr	r2, [pc, #76]	; (a39c <Can_43_FLEXCAN_DeInit+0x8c>)
    a34e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a352:	2b01      	cmp	r3, #1
    a354:	d103      	bne.n	a35e <Can_43_FLEXCAN_DeInit+0x4e>
                    *   if any of the CAN controllers is in state STARTED.
                    */
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_DEINIT, (uint8)CAN_43_FLEXCAN_E_TRANSITION);
                #endif
                    /* Controller is busy */
                    bCtrlBusy =  TRUE;
    a356:	2301      	movs	r3, #1
    a358:	f88d 3006 	strb.w	r3, [sp, #6]
                    /* Skipping the loop if any of Can Controller is in state STARTED */
                    break;
    a35c:	e008      	b.n	a370 <Can_43_FLEXCAN_DeInit+0x60>
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a35e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a362:	3301      	adds	r3, #1
    a364:	f88d 3007 	strb.w	r3, [sp, #7]
    a368:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a36c:	2b01      	cmp	r3, #1
    a36e:	d9df      	bls.n	a330 <Can_43_FLEXCAN_DeInit+0x20>
                }
            }
        }
        /* All Controllers are not busy */
        if (FALSE == bCtrlBusy)
    a370:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a374:	f083 0301 	eor.w	r3, r3, #1
    a378:	b2db      	uxtb	r3, r3
    a37a:	2b00      	cmp	r3, #0
    a37c:	d007      	beq.n	a38e <Can_43_FLEXCAN_DeInit+0x7e>
            *   [SWS_Can_91010] The function Can_DeInit shall change the module state to
            *   CAN_UNINIT before de-initializing all controllers inside the HW unit
            */
            Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_UNINIT;
        #endif
            Can_DeInitControllers(u32CoreId);
    a37e:	9800      	ldr	r0, [sp, #0]
    a380:	f7ff ff5e 	bl	a240 <Can_DeInitControllers>
            Can_apxConfig[u32CoreId] = NULL_PTR;
    a384:	4a04      	ldr	r2, [pc, #16]	; (a398 <Can_43_FLEXCAN_DeInit+0x88>)
    a386:	9b00      	ldr	r3, [sp, #0]
    a388:	2100      	movs	r1, #0
    a38a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
}
    a38e:	bf00      	nop
    a390:	b003      	add	sp, #12
    a392:	f85d fb04 	ldr.w	pc, [sp], #4
    a396:	bf00      	nop
    a398:	1fff8e14 	.word	0x1fff8e14
    a39c:	1fff8e0c 	.word	0x1fff8e0c

0000a3a0 <Can_43_FLEXCAN_SetControllerMode>:
*
* @api
*/
/* implements     Can_SetControllerMode_Activity */
Std_ReturnType Can_43_FLEXCAN_SetControllerMode(uint8 Controller, Can_ControllerStateType Transition)
{
    a3a0:	b500      	push	{lr}
    a3a2:	b087      	sub	sp, #28
    a3a4:	4603      	mov	r3, r0
    a3a6:	9100      	str	r1, [sp, #0]
    a3a8:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a3ac:	2301      	movs	r3, #1
    a3ae:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a3b2:	2300      	movs	r3, #0
    a3b4:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a3b6:	2300      	movs	r3, #0
    a3b8:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a3ba:	2300      	movs	r3, #0
    a3bc:	9304      	str	r3, [sp, #16]
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    if (TRUE == Can_ValidateController(u32CoreId, Controller, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE))
    {
#endif
                Can_pController = (const Can_43_FLEXCAN_ControllerConfigType *)(Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    a3be:	4a47      	ldr	r2, [pc, #284]	; (a4dc <Can_43_FLEXCAN_SetControllerMode+0x13c>)
    a3c0:	9b04      	ldr	r3, [sp, #16]
    a3c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3c6:	695a      	ldr	r2, [r3, #20]
    a3c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3cc:	009b      	lsls	r3, r3, #2
    a3ce:	4413      	add	r3, r2
    a3d0:	681b      	ldr	r3, [r3, #0]
    a3d2:	9303      	str	r3, [sp, #12]
                /*
                *   [SWS_Can_00017] The function Can_SetControllerMode shall perform software
                *   triggered state transitions of the CAN controller State machine.
                */
                switch (Transition)
    a3d4:	9b00      	ldr	r3, [sp, #0]
    a3d6:	2b03      	cmp	r3, #3
    a3d8:	d05d      	beq.n	a496 <Can_43_FLEXCAN_SetControllerMode+0xf6>
    a3da:	9b00      	ldr	r3, [sp, #0]
    a3dc:	2b03      	cmp	r3, #3
    a3de:	d874      	bhi.n	a4ca <Can_43_FLEXCAN_SetControllerMode+0x12a>
    a3e0:	9b00      	ldr	r3, [sp, #0]
    a3e2:	2b01      	cmp	r3, #1
    a3e4:	d003      	beq.n	a3ee <Can_43_FLEXCAN_SetControllerMode+0x4e>
    a3e6:	9b00      	ldr	r3, [sp, #0]
    a3e8:	2b02      	cmp	r3, #2
    a3ea:	d01d      	beq.n	a428 <Can_43_FLEXCAN_SetControllerMode+0x88>
                        *   has been requested, the function Can_SetControllerMode shall raise the error CAN_E_TRANSITION and
                        *   return E_NOT_OK
                        */
                        (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_TRANSITION);
                    #endif
                        break;
    a3ec:	e06d      	b.n	a4ca <Can_43_FLEXCAN_SetControllerMode+0x12a>
                        if (CAN_CS_STOPPED == Can_eControllerState[Controller])
    a3ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3f2:	4a3b      	ldr	r2, [pc, #236]	; (a4e0 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a3f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3f8:	2b02      	cmp	r3, #2
    a3fa:	d168      	bne.n	a4ce <Can_43_FLEXCAN_SetControllerMode+0x12e>
                            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStartMode(Can_pController))
    a3fc:	9803      	ldr	r0, [sp, #12]
    a3fe:	f000 ffa3 	bl	b348 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>
    a402:	4603      	mov	r3, r0
    a404:	2b00      	cmp	r3, #0
    a406:	d162      	bne.n	a4ce <Can_43_FLEXCAN_SetControllerMode+0x12e>
                                Can_eControllerState[Controller] = CAN_CS_STARTED;
    a408:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a40c:	4a34      	ldr	r2, [pc, #208]	; (a4e0 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a40e:	2101      	movs	r1, #1
    a410:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STARTED);
    a414:	9b03      	ldr	r3, [sp, #12]
    a416:	781b      	ldrb	r3, [r3, #0]
    a418:	2101      	movs	r1, #1
    a41a:	4618      	mov	r0, r3
    a41c:	f00c fe94 	bl	17148 <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    a420:	2300      	movs	r3, #0
    a422:	f88d 3017 	strb.w	r3, [sp, #23]
                        break;
    a426:	e052      	b.n	a4ce <Can_43_FLEXCAN_SetControllerMode+0x12e>
                        switch (Can_eControllerState[Controller])
    a428:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a42c:	4a2c      	ldr	r2, [pc, #176]	; (a4e0 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a42e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a432:	2b01      	cmp	r3, #1
    a434:	d005      	beq.n	a442 <Can_43_FLEXCAN_SetControllerMode+0xa2>
    a436:	2b00      	cmp	r3, #0
    a438:	d029      	beq.n	a48e <Can_43_FLEXCAN_SetControllerMode+0xee>
    a43a:	3b02      	subs	r3, #2
    a43c:	2b01      	cmp	r3, #1
    a43e:	d826      	bhi.n	a48e <Can_43_FLEXCAN_SetControllerMode+0xee>
    a440:	e015      	b.n	a46e <Can_43_FLEXCAN_SetControllerMode+0xce>
                                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    a442:	9803      	ldr	r0, [sp, #12]
    a444:	f000 fff2 	bl	b42c <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    a448:	4603      	mov	r3, r0
    a44a:	2b00      	cmp	r3, #0
    a44c:	d121      	bne.n	a492 <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                    Can_eControllerState[Controller] = CAN_CS_STOPPED;
    a44e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a452:	4a23      	ldr	r2, [pc, #140]	; (a4e0 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a454:	2102      	movs	r1, #2
    a456:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                    CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    a45a:	9b03      	ldr	r3, [sp, #12]
    a45c:	781b      	ldrb	r3, [r3, #0]
    a45e:	2102      	movs	r1, #2
    a460:	4618      	mov	r0, r3
    a462:	f00c fe71 	bl	17148 <CanIf_ControllerModeIndication>
                                    eRetVal = E_OK;
    a466:	2300      	movs	r3, #0
    a468:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    a46c:	e011      	b.n	a492 <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                Can_eControllerState[Controller] = CAN_CS_STOPPED;
    a46e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a472:	4a1b      	ldr	r2, [pc, #108]	; (a4e0 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a474:	2102      	movs	r1, #2
    a476:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    a47a:	9b03      	ldr	r3, [sp, #12]
    a47c:	781b      	ldrb	r3, [r3, #0]
    a47e:	2102      	movs	r1, #2
    a480:	4618      	mov	r0, r3
    a482:	f00c fe61 	bl	17148 <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    a486:	2300      	movs	r3, #0
    a488:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    a48c:	e002      	b.n	a494 <Can_43_FLEXCAN_SetControllerMode+0xf4>
                                break;
    a48e:	bf00      	nop
    a490:	e01e      	b.n	a4d0 <Can_43_FLEXCAN_SetControllerMode+0x130>
                                break;
    a492:	bf00      	nop
                        break;
    a494:	e01c      	b.n	a4d0 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        switch (Can_eControllerState[Controller])
    a496:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a49a:	4a11      	ldr	r2, [pc, #68]	; (a4e0 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a49c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4a0:	3b02      	subs	r3, #2
    a4a2:	2b01      	cmp	r3, #1
    a4a4:	d80f      	bhi.n	a4c6 <Can_43_FLEXCAN_SetControllerMode+0x126>
                                Can_eControllerState[Controller] = CAN_CS_SLEEP;
    a4a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a4aa:	4a0d      	ldr	r2, [pc, #52]	; (a4e0 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a4ac:	2103      	movs	r1, #3
    a4ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_SLEEP);
    a4b2:	9b03      	ldr	r3, [sp, #12]
    a4b4:	781b      	ldrb	r3, [r3, #0]
    a4b6:	2103      	movs	r1, #3
    a4b8:	4618      	mov	r0, r3
    a4ba:	f00c fe45 	bl	17148 <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    a4be:	2300      	movs	r3, #0
    a4c0:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    a4c4:	e000      	b.n	a4c8 <Can_43_FLEXCAN_SetControllerMode+0x128>
                                break;
    a4c6:	bf00      	nop
                        break;
    a4c8:	e002      	b.n	a4d0 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    a4ca:	bf00      	nop
    a4cc:	e000      	b.n	a4d0 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    a4ce:	bf00      	nop
                    }
                }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eRetVal;
    a4d0:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a4d4:	4618      	mov	r0, r3
    a4d6:	b007      	add	sp, #28
    a4d8:	f85d fb04 	ldr.w	pc, [sp], #4
    a4dc:	1fff8e14 	.word	0x1fff8e14
    a4e0:	1fff8e0c 	.word	0x1fff8e0c

0000a4e4 <Can_43_FLEXCAN_DisableControllerInterrupts>:
*
* @api
*/
/* implements     Can_DisableControllerInterrupts_Activity */
void Can_43_FLEXCAN_DisableControllerInterrupts(uint8 Controller)
{
    a4e4:	b500      	push	{lr}
    a4e6:	b085      	sub	sp, #20
    a4e8:	4603      	mov	r3, r0
    a4ea:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    a4ee:	2300      	movs	r3, #0
    a4f0:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a4f2:	2300      	movs	r3, #0
    a4f4:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    a4f6:	2300      	movs	r3, #0
    a4f8:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    a4fa:	4a10      	ldr	r2, [pc, #64]	; (a53c <Can_43_FLEXCAN_DisableControllerInterrupts+0x58>)
    a4fc:	9b03      	ldr	r3, [sp, #12]
    a4fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a502:	695a      	ldr	r2, [r3, #20]
    a504:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a508:	009b      	lsls	r3, r3, #2
    a50a:	4413      	add	r3, r2
    a50c:	681b      	ldr	r3, [r3, #0]
    a50e:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    a510:	f009 fc1c 	bl	13d4c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_au8DisableInterruptLevel[Controller] += 1U;
    a514:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a518:	4a09      	ldr	r2, [pc, #36]	; (a540 <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    a51a:	5cd2      	ldrb	r2, [r2, r3]
    a51c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a520:	3201      	adds	r2, #1
    a522:	b2d1      	uxtb	r1, r2
    a524:	4a06      	ldr	r2, [pc, #24]	; (a540 <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    a526:	54d1      	strb	r1, [r2, r3]
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    a528:	f009 fc3c 	bl	13da4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(Can_pController);
    a52c:	9802      	ldr	r0, [sp, #8]
    a52e:	f000 fffb 	bl	b528 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    a532:	bf00      	nop
    a534:	b005      	add	sp, #20
    a536:	f85d fb04 	ldr.w	pc, [sp], #4
    a53a:	bf00      	nop
    a53c:	1fff8e14 	.word	0x1fff8e14
    a540:	1fff8e08 	.word	0x1fff8e08

0000a544 <Can_43_FLEXCAN_EnableControllerInterrupts>:
*
* @api
*/
/* implements     Can_EnableControllerInterrupts_Activity */
void Can_43_FLEXCAN_EnableControllerInterrupts(uint8 Controller)
{
    a544:	b500      	push	{lr}
    a546:	b085      	sub	sp, #20
    a548:	4603      	mov	r3, r0
    a54a:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    a54e:	2300      	movs	r3, #0
    a550:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a552:	2300      	movs	r3, #0
    a554:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    a556:	2300      	movs	r3, #0
    a558:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    a55a:	4a16      	ldr	r2, [pc, #88]	; (a5b4 <Can_43_FLEXCAN_EnableControllerInterrupts+0x70>)
    a55c:	9b03      	ldr	r3, [sp, #12]
    a55e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a562:	695a      	ldr	r2, [r3, #20]
    a564:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a568:	009b      	lsls	r3, r3, #2
    a56a:	4413      	add	r3, r2
    a56c:	681b      	ldr	r3, [r3, #0]
    a56e:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    a570:	f009 fc3e 	bl	13df0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>
                if (Can_au8DisableInterruptLevel[Controller] > 0U)
    a574:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a578:	4a0f      	ldr	r2, [pc, #60]	; (a5b8 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    a57a:	5cd3      	ldrb	r3, [r2, r3]
    a57c:	2b00      	cmp	r3, #0
    a57e:	d009      	beq.n	a594 <Can_43_FLEXCAN_EnableControllerInterrupts+0x50>
                {
                    Can_au8DisableInterruptLevel[Controller] -= 1U;
    a580:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a584:	4a0c      	ldr	r2, [pc, #48]	; (a5b8 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    a586:	5cd2      	ldrb	r2, [r2, r3]
    a588:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a58c:	3a01      	subs	r2, #1
    a58e:	b2d1      	uxtb	r1, r2
    a590:	4a09      	ldr	r2, [pc, #36]	; (a5b8 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    a592:	54d1      	strb	r1, [r2, r3]
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    a594:	f009 fc58 	bl	13e48 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>

                if (0U == Can_au8DisableInterruptLevel[Controller])
    a598:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a59c:	4a06      	ldr	r2, [pc, #24]	; (a5b8 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    a59e:	5cd3      	ldrb	r3, [r2, r3]
    a5a0:	2b00      	cmp	r3, #0
    a5a2:	d102      	bne.n	a5aa <Can_43_FLEXCAN_EnableControllerInterrupts+0x66>
                {
                    Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(Can_pController);
    a5a4:	9802      	ldr	r0, [sp, #8]
    a5a6:	f000 ffe9 	bl	b57c <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    a5aa:	bf00      	nop
    a5ac:	b005      	add	sp, #20
    a5ae:	f85d fb04 	ldr.w	pc, [sp], #4
    a5b2:	bf00      	nop
    a5b4:	1fff8e14 	.word	0x1fff8e14
    a5b8:	1fff8e08 	.word	0x1fff8e08

0000a5bc <Can_43_FLEXCAN_GetControllerErrorState>:
Std_ReturnType Can_43_FLEXCAN_GetControllerErrorState
(
    uint8 ControllerId,
    Can_ErrorStateType * ErrorStatePtr
)
{
    a5bc:	b500      	push	{lr}
    a5be:	b087      	sub	sp, #28
    a5c0:	4603      	mov	r3, r0
    a5c2:	9100      	str	r1, [sp, #0]
    a5c4:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a5c8:	2301      	movs	r3, #1
    a5ca:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 errorState = 0U;
    a5ce:	2300      	movs	r3, #0
    a5d0:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 u32CoreId = 0U;
    a5d4:	2300      	movs	r3, #0
    a5d6:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a5d8:	2300      	movs	r3, #0
    a5da:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a5dc:	2300      	movs	r3, #0
    a5de:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_ERROR_STATE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    a5e0:	4a18      	ldr	r2, [pc, #96]	; (a644 <Can_43_FLEXCAN_GetControllerErrorState+0x88>)
    a5e2:	9b04      	ldr	r3, [sp, #16]
    a5e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5e8:	695a      	ldr	r2, [r3, #20]
    a5ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a5ee:	009b      	lsls	r3, r3, #2
    a5f0:	4413      	add	r3, r2
    a5f2:	681b      	ldr	r3, [r3, #0]
    a5f4:	9303      	str	r3, [sp, #12]
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerErrorState(Can_pController, &errorState);
    a5f6:	f10d 030b 	add.w	r3, sp, #11
    a5fa:	4619      	mov	r1, r3
    a5fc:	9803      	ldr	r0, [sp, #12]
    a5fe:	f000 ffe9 	bl	b5d4 <Can_43_FLEXCAN_Ipw_GetControllerErrorState>
    a602:	4603      	mov	r3, r0
    a604:	f88d 3017 	strb.w	r3, [sp, #23]
                    if(eRetVal == (Std_ReturnType)E_OK)
    a608:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a60c:	2b00      	cmp	r3, #0
    a60e:	d112      	bne.n	a636 <Can_43_FLEXCAN_GetControllerErrorState+0x7a>
                    {
                        switch (errorState)
    a610:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a614:	2b00      	cmp	r3, #0
    a616:	d002      	beq.n	a61e <Can_43_FLEXCAN_GetControllerErrorState+0x62>
    a618:	2b01      	cmp	r3, #1
    a61a:	d004      	beq.n	a626 <Can_43_FLEXCAN_GetControllerErrorState+0x6a>
    a61c:	e007      	b.n	a62e <Can_43_FLEXCAN_GetControllerErrorState+0x72>
                        {
                            case 0x00U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_ACTIVE;
    a61e:	9b00      	ldr	r3, [sp, #0]
    a620:	2200      	movs	r2, #0
    a622:	601a      	str	r2, [r3, #0]
                                break;
    a624:	e008      	b.n	a638 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            case 0x01U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_PASSIVE;
    a626:	9b00      	ldr	r3, [sp, #0]
    a628:	2201      	movs	r2, #1
    a62a:	601a      	str	r2, [r3, #0]
                                break;
    a62c:	e004      	b.n	a638 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            default:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_BUSOFF;
    a62e:	9b00      	ldr	r3, [sp, #0]
    a630:	2202      	movs	r2, #2
    a632:	601a      	str	r2, [r3, #0]
                                break;
    a634:	e000      	b.n	a638 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                        }
                    }
    a636:	bf00      	nop
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                }
    }
#endif
    return eRetVal;
    a638:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a63c:	4618      	mov	r0, r3
    a63e:	b007      	add	sp, #28
    a640:	f85d fb04 	ldr.w	pc, [sp], #4
    a644:	1fff8e14 	.word	0x1fff8e14

0000a648 <Can_43_FLEXCAN_GetControllerMode>:
Std_ReturnType Can_43_FLEXCAN_GetControllerMode
(
    uint8 Controller,
    Can_ControllerStateType * ControllerModePtr
)
{
    a648:	b084      	sub	sp, #16
    a64a:	4603      	mov	r3, r0
    a64c:	9100      	str	r1, [sp, #0]
    a64e:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a652:	2301      	movs	r3, #1
    a654:	f88d 300f 	strb.w	r3, [sp, #15]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    *ControllerModePtr = Can_eControllerState[Controller];
    a658:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a65c:	4a06      	ldr	r2, [pc, #24]	; (a678 <Can_43_FLEXCAN_GetControllerMode+0x30>)
    a65e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    a662:	9b00      	ldr	r3, [sp, #0]
    a664:	601a      	str	r2, [r3, #0]
                    eRetVal = E_OK;
    a666:	2300      	movs	r3, #0
    a668:	f88d 300f 	strb.w	r3, [sp, #15]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    a66c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a670:	4618      	mov	r0, r3
    a672:	b004      	add	sp, #16
    a674:	4770      	bx	lr
    a676:	bf00      	nop
    a678:	1fff8e0c 	.word	0x1fff8e0c

0000a67c <Can_43_FLEXCAN_GetControllerRxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerRxErrorCounter
(
    uint8 ControllerId,
    uint8 * RxErrorCounterPtr
)
{
    a67c:	b500      	push	{lr}
    a67e:	b087      	sub	sp, #28
    a680:	4603      	mov	r3, r0
    a682:	9100      	str	r1, [sp, #0]
    a684:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a688:	2301      	movs	r3, #1
    a68a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a68e:	2300      	movs	r3, #0
    a690:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a692:	2300      	movs	r3, #0
    a694:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a696:	2300      	movs	r3, #0
    a698:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_RX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    a69a:	4a0c      	ldr	r2, [pc, #48]	; (a6cc <Can_43_FLEXCAN_GetControllerRxErrorCounter+0x50>)
    a69c:	9b04      	ldr	r3, [sp, #16]
    a69e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6a2:	695a      	ldr	r2, [r3, #20]
    a6a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a6a8:	009b      	lsls	r3, r3, #2
    a6aa:	4413      	add	r3, r2
    a6ac:	681b      	ldr	r3, [r3, #0]
    a6ae:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00515]: When the API Can_GetControllerRxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Rx error counter
                    *   register of Can Controller and shall return the Rx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(Can_pController, RxErrorCounterPtr);
    a6b0:	9900      	ldr	r1, [sp, #0]
    a6b2:	9803      	ldr	r0, [sp, #12]
    a6b4:	f000 ffb9 	bl	b62a <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>
    a6b8:	4603      	mov	r3, r0
    a6ba:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    a6be:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a6c2:	4618      	mov	r0, r3
    a6c4:	b007      	add	sp, #28
    a6c6:	f85d fb04 	ldr.w	pc, [sp], #4
    a6ca:	bf00      	nop
    a6cc:	1fff8e14 	.word	0x1fff8e14

0000a6d0 <Can_43_FLEXCAN_GetControllerTxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerTxErrorCounter
(
    uint8 ControllerId,
    uint8 * TxErrorCounterPtr
)
{
    a6d0:	b500      	push	{lr}
    a6d2:	b087      	sub	sp, #28
    a6d4:	4603      	mov	r3, r0
    a6d6:	9100      	str	r1, [sp, #0]
    a6d8:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a6dc:	2301      	movs	r3, #1
    a6de:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a6e2:	2300      	movs	r3, #0
    a6e4:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a6e6:	2300      	movs	r3, #0
    a6e8:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a6ea:	2300      	movs	r3, #0
    a6ec:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_TX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    a6ee:	4a0c      	ldr	r2, [pc, #48]	; (a720 <Can_43_FLEXCAN_GetControllerTxErrorCounter+0x50>)
    a6f0:	9b04      	ldr	r3, [sp, #16]
    a6f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6f6:	695a      	ldr	r2, [r3, #20]
    a6f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a6fc:	009b      	lsls	r3, r3, #2
    a6fe:	4413      	add	r3, r2
    a700:	681b      	ldr	r3, [r3, #0]
    a702:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00520]: When the API Can_GetControllerTxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Tx error counter
                    *   register of Can Controller and shall return the Tx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(Can_pController, TxErrorCounterPtr);
    a704:	9900      	ldr	r1, [sp, #0]
    a706:	9803      	ldr	r0, [sp, #12]
    a708:	f000 ff7d 	bl	b606 <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>
    a70c:	4603      	mov	r3, r0
    a70e:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    a712:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a716:	4618      	mov	r0, r3
    a718:	b007      	add	sp, #28
    a71a:	f85d fb04 	ldr.w	pc, [sp], #4
    a71e:	bf00      	nop
    a720:	1fff8e14 	.word	0x1fff8e14

0000a724 <Can_43_FLEXCAN_Write>:
Std_ReturnType Can_43_FLEXCAN_Write
(
    Can_HwHandleType Hth,
    const Can_PduType * PduInfo
)
{
    a724:	b500      	push	{lr}
    a726:	b089      	sub	sp, #36	; 0x24
    a728:	4603      	mov	r3, r0
    a72a:	9100      	str	r1, [sp, #0]
    a72c:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType eRetVal = E_NOT_OK;
    a730:	2301      	movs	r3, #1
    a732:	f88d 301f 	strb.w	r3, [sp, #31]
    uint8 u8ControllerID = 0U;
    a736:	2300      	movs	r3, #0
    a738:	f88d 301e 	strb.w	r3, [sp, #30]
    uint32 u32CoreId = 0U;
    a73c:	2300      	movs	r3, #0
    a73e:	9306      	str	r3, [sp, #24]
    Can_HwHandleType HwObjectID = 0U;
    a740:	2300      	movs	r3, #0
    a742:	f8ad 3016 	strh.w	r3, [sp, #22]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a746:	2300      	movs	r3, #0
    a748:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    a74a:	2300      	movs	r3, #0
    a74c:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a74e:	2300      	movs	r3, #0
    a750:	9306      	str	r3, [sp, #24]
    HwObjectID = Hth;
    a752:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a756:	f8ad 3016 	strh.w	r3, [sp, #22]
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_WRITE, CAN_43_FLEXCAN_E_PARAM_POINTER);
            }
            else
            {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pHwObjIDToCtrlIDMap[HwObjectID];
    a75a:	4a1d      	ldr	r2, [pc, #116]	; (a7d0 <Can_43_FLEXCAN_Write+0xac>)
    a75c:	9b06      	ldr	r3, [sp, #24]
    a75e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a762:	68da      	ldr	r2, [r3, #12]
    a764:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    a768:	4413      	add	r3, r2
    a76a:	781b      	ldrb	r3, [r3, #0]
    a76c:	f88d 301e 	strb.w	r3, [sp, #30]
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a770:	4a17      	ldr	r2, [pc, #92]	; (a7d0 <Can_43_FLEXCAN_Write+0xac>)
    a772:	9b06      	ldr	r3, [sp, #24]
    a774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a778:	695a      	ldr	r2, [r3, #20]
    a77a:	f89d 301e 	ldrb.w	r3, [sp, #30]
    a77e:	009b      	lsls	r3, r3, #2
    a780:	4413      	add	r3, r2
    a782:	681b      	ldr	r3, [r3, #0]
    a784:	9304      	str	r3, [sp, #16]
                if (NULL_PTR != Can_pController)
    a786:	9b04      	ldr	r3, [sp, #16]
    a788:	2b00      	cmp	r3, #0
    a78a:	d01b      	beq.n	a7c4 <Can_43_FLEXCAN_Write+0xa0>
                {
                    Can_pHwObject = &((Can_apxConfig[u32CoreId])->Can_pHwObjectConfig[HwObjectID]);
    a78c:	4a10      	ldr	r2, [pc, #64]	; (a7d0 <Can_43_FLEXCAN_Write+0xac>)
    a78e:	9b06      	ldr	r3, [sp, #24]
    a790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a794:	6919      	ldr	r1, [r3, #16]
    a796:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    a79a:	4613      	mov	r3, r2
    a79c:	00db      	lsls	r3, r3, #3
    a79e:	4413      	add	r3, r2
    a7a0:	009b      	lsls	r3, r3, #2
    a7a2:	440b      	add	r3, r1
    a7a4:	9303      	str	r3, [sp, #12]
                #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    if ((TRUE == Can_ValidatePdu(Can_pController, Can_pHwObject, PduInfo)) && (CAN_CS_STARTED == Can_eControllerState[u8ControllerID]))
                #else
                    /* avoid unexpected behaviour when accessing to RAM */
                    if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    a7a6:	f89d 301e 	ldrb.w	r3, [sp, #30]
    a7aa:	4a0a      	ldr	r2, [pc, #40]	; (a7d4 <Can_43_FLEXCAN_Write+0xb0>)
    a7ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7b0:	2b01      	cmp	r3, #1
    a7b2:	d107      	bne.n	a7c4 <Can_43_FLEXCAN_Write+0xa0>
                            eRetVal = CAN_BUSY;
                        }
                        else
                        {
                    #endif
                            eRetVal = Can_43_FLEXCAN_Ipw_Write(Can_pController, Can_pHwObject, PduInfo);
    a7b4:	9a00      	ldr	r2, [sp, #0]
    a7b6:	9903      	ldr	r1, [sp, #12]
    a7b8:	9804      	ldr	r0, [sp, #16]
    a7ba:	f000 ff48 	bl	b64e <Can_43_FLEXCAN_Ipw_Write>
    a7be:	4603      	mov	r3, r0
    a7c0:	f88d 301f 	strb.w	r3, [sp, #31]
                }
            #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
            }
    }
#endif
    return eRetVal;
    a7c4:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    a7c8:	4618      	mov	r0, r3
    a7ca:	b009      	add	sp, #36	; 0x24
    a7cc:	f85d fb04 	ldr.w	pc, [sp], #4
    a7d0:	1fff8e14 	.word	0x1fff8e14
    a7d4:	1fff8e0c 	.word	0x1fff8e0c

0000a7d8 <Can_43_FLEXCAN_MainFunction_Write>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON */
    }
    a7d8:	bf00      	nop
    a7da:	4770      	bx	lr

0000a7dc <Can_43_FLEXCAN_MainFunction_Read>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON */
    }
    a7dc:	bf00      	nop
    a7de:	4770      	bx	lr

0000a7e0 <Can_43_FLEXCAN_MainFunction_BusOff>:
            }
            u8ControllerID++;
        }
    }
#endif /* CAN_43_FLEXCAN_BUSOFF_POLLING_SUPPORT == STD_ON */
}
    a7e0:	bf00      	nop
    a7e2:	4770      	bx	lr

0000a7e4 <Can_43_FLEXCAN_MainFunction_Mode>:
*
* @api
*/
/* implements     Can_MainFunction_Mode_Activity */
void Can_43_FLEXCAN_MainFunction_Mode(void)
{
    a7e4:	b500      	push	{lr}
    a7e6:	b085      	sub	sp, #20
    uint8 u8ControllerID = 0U;
    a7e8:	2300      	movs	r3, #0
    a7ea:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32CoreId = 0U;
    a7ee:	2300      	movs	r3, #0
    a7f0:	9302      	str	r3, [sp, #8]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a7f2:	2300      	movs	r3, #0
    a7f4:	9301      	str	r3, [sp, #4]

    u32CoreId = Can_GetCoreID();
    a7f6:	2300      	movs	r3, #0
    a7f8:	9302      	str	r3, [sp, #8]
    if (NULL_PTR != (Can_apxConfig[u32CoreId]))
    a7fa:	4a17      	ldr	r2, [pc, #92]	; (a858 <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    a7fc:	9b02      	ldr	r3, [sp, #8]
    a7fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a802:	2b00      	cmp	r3, #0
    a804:	d024      	beq.n	a850 <Can_43_FLEXCAN_MainFunction_Mode+0x6c>
    {
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    a806:	e01f      	b.n	a848 <Can_43_FLEXCAN_MainFunction_Mode+0x64>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a808:	4a13      	ldr	r2, [pc, #76]	; (a858 <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    a80a:	9b02      	ldr	r3, [sp, #8]
    a80c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a810:	695a      	ldr	r2, [r3, #20]
    a812:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a816:	009b      	lsls	r3, r3, #2
    a818:	4413      	add	r3, r2
    a81a:	681b      	ldr	r3, [r3, #0]
    a81c:	9301      	str	r3, [sp, #4]
            if (NULL_PTR != Can_pController)
    a81e:	9b01      	ldr	r3, [sp, #4]
    a820:	2b00      	cmp	r3, #0
    a822:	d00c      	beq.n	a83e <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
            {
                if (TRUE == Can_pController->Can_bActivation)
    a824:	9b01      	ldr	r3, [sp, #4]
    a826:	7a1b      	ldrb	r3, [r3, #8]
    a828:	2b00      	cmp	r3, #0
    a82a:	d008      	beq.n	a83e <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
                {
                    Can_43_FLEXCAN_Ipw_MainFunction_Mode(Can_pController, &Can_eControllerState[u8ControllerID]);
    a82c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a830:	009b      	lsls	r3, r3, #2
    a832:	4a0a      	ldr	r2, [pc, #40]	; (a85c <Can_43_FLEXCAN_MainFunction_Mode+0x78>)
    a834:	4413      	add	r3, r2
    a836:	4619      	mov	r1, r3
    a838:	9801      	ldr	r0, [sp, #4]
    a83a:	f001 f808 	bl	b84e <Can_43_FLEXCAN_Ipw_MainFunction_Mode>
                }
            }
            u8ControllerID++;
    a83e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a842:	3301      	adds	r3, #1
    a844:	f88d 300f 	strb.w	r3, [sp, #15]
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    a848:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a84c:	2b01      	cmp	r3, #1
    a84e:	d9db      	bls.n	a808 <Can_43_FLEXCAN_MainFunction_Mode+0x24>
        }
    }
}
    a850:	bf00      	nop
    a852:	b005      	add	sp, #20
    a854:	f85d fb04 	ldr.w	pc, [sp], #4
    a858:	1fff8e14 	.word	0x1fff8e14
    a85c:	1fff8e0c 	.word	0x1fff8e0c

0000a860 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>:
(
    uint8 u8CtrlOffset,
    uint8 u8MbIdx,
    Can_43_FLEXCAN_MbType mbType
)
{
    a860:	b500      	push	{lr}
    a862:	b087      	sub	sp, #28
    a864:	4603      	mov	r3, r0
    a866:	9200      	str	r2, [sp, #0]
    a868:	f88d 3007 	strb.w	r3, [sp, #7]
    a86c:	460b      	mov	r3, r1
    a86e:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 u8ControllerID = 0U;
    a872:	2300      	movs	r3, #0
    a874:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a878:	2300      	movs	r3, #0
    a87a:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a87c:	2300      	movs	r3, #0
    a87e:	9303      	str	r3, [sp, #12]

    MCAL_FAULT_INJECTION_POINT(CAN_FIP_2_CHANGE_DRIVER_TO_UNINITIALIZED);
    u32CoreId = Can_GetCoreID();
    a880:	2300      	movs	r3, #0
    a882:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    a884:	4a16      	ldr	r2, [pc, #88]	; (a8e0 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    a886:	9b04      	ldr	r3, [sp, #16]
    a888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a88c:	2b00      	cmp	r3, #0
    a88e:	d022      	beq.n	a8d6 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    a890:	4a13      	ldr	r2, [pc, #76]	; (a8e0 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    a892:	9b04      	ldr	r3, [sp, #16]
    a894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a898:	689a      	ldr	r2, [r3, #8]
    a89a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a89e:	4413      	add	r3, r2
    a8a0:	781b      	ldrb	r3, [r3, #0]
    a8a2:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a8a6:	4a0e      	ldr	r2, [pc, #56]	; (a8e0 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    a8a8:	9b04      	ldr	r3, [sp, #16]
    a8aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8ae:	695a      	ldr	r2, [r3, #20]
    a8b0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a8b4:	009b      	lsls	r3, r3, #2
    a8b6:	4413      	add	r3, r2
    a8b8:	681b      	ldr	r3, [r3, #0]
    a8ba:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    a8bc:	9b03      	ldr	r3, [sp, #12]
    a8be:	2b00      	cmp	r3, #0
    a8c0:	d009      	beq.n	a8d6 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
        {
            Can_43_FLEXCAN_Ipw_ProcessHwObject(Can_pController, (Can_apxConfig[u32CoreId]), u8MbIdx, mbType);
    a8c2:	4a07      	ldr	r2, [pc, #28]	; (a8e0 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    a8c4:	9b04      	ldr	r3, [sp, #16]
    a8c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    a8ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a8ce:	9b00      	ldr	r3, [sp, #0]
    a8d0:	9803      	ldr	r0, [sp, #12]
    a8d2:	f000 fff2 	bl	b8ba <Can_43_FLEXCAN_Ipw_ProcessHwObject>
        }

    }
}
    a8d6:	bf00      	nop
    a8d8:	b007      	add	sp, #28
    a8da:	f85d fb04 	ldr.w	pc, [sp], #4
    a8de:	bf00      	nop
    a8e0:	1fff8e14 	.word	0x1fff8e14

0000a8e4 <Can_43_FLEXCAN_ProcessBusOffInterrupt>:
*/
void Can_43_FLEXCAN_ProcessBusOffInterrupt
(
    uint8 u8CtrlOffset
)
{
    a8e4:	b500      	push	{lr}
    a8e6:	b087      	sub	sp, #28
    a8e8:	4603      	mov	r3, r0
    a8ea:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 u8ControllerID = 0U;
    a8ee:	2300      	movs	r3, #0
    a8f0:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a8f4:	2300      	movs	r3, #0
    a8f6:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a8f8:	2300      	movs	r3, #0
    a8fa:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a8fc:	2300      	movs	r3, #0
    a8fe:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    a900:	4a19      	ldr	r2, [pc, #100]	; (a968 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    a902:	9b04      	ldr	r3, [sp, #16]
    a904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a908:	2b00      	cmp	r3, #0
    a90a:	d029      	beq.n	a960 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    a90c:	4a16      	ldr	r2, [pc, #88]	; (a968 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    a90e:	9b04      	ldr	r3, [sp, #16]
    a910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a914:	689a      	ldr	r2, [r3, #8]
    a916:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a91a:	4413      	add	r3, r2
    a91c:	781b      	ldrb	r3, [r3, #0]
    a91e:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a922:	4a11      	ldr	r2, [pc, #68]	; (a968 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    a924:	9b04      	ldr	r3, [sp, #16]
    a926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a92a:	695a      	ldr	r2, [r3, #20]
    a92c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a930:	009b      	lsls	r3, r3, #2
    a932:	4413      	add	r3, r2
    a934:	681b      	ldr	r3, [r3, #0]
    a936:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    a938:	9b03      	ldr	r3, [sp, #12]
    a93a:	2b00      	cmp	r3, #0
    a93c:	d010      	beq.n	a960 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
        {
            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    a93e:	9803      	ldr	r0, [sp, #12]
    a940:	f000 fd74 	bl	b42c <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    a944:	4603      	mov	r3, r0
    a946:	2b00      	cmp	r3, #0
    a948:	d10a      	bne.n	a960 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    a94a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a94e:	4a07      	ldr	r2, [pc, #28]	; (a96c <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x88>)
    a950:	2102      	movs	r1, #2
    a952:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                CanIf_ControllerBusOff(Can_pController->Can_u8AbstControllerID);
    a956:	9b03      	ldr	r3, [sp, #12]
    a958:	781b      	ldrb	r3, [r3, #0]
    a95a:	4618      	mov	r0, r3
    a95c:	f00c fbfc 	bl	17158 <CanIf_ControllerBusOff>
            }
        }
    }
}
    a960:	bf00      	nop
    a962:	b007      	add	sp, #28
    a964:	f85d fb04 	ldr.w	pc, [sp], #4
    a968:	1fff8e14 	.word	0x1fff8e14
    a96c:	1fff8e0c 	.word	0x1fff8e0c

0000a970 <Can_Ipw_ParseData>:
    PduInfoType * CanIf_PduInfo,
    Flexcan_Ip_MsgBuffType * pReceivedDataBuffer,
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig
)
{
    a970:	b500      	push	{lr}
    a972:	b085      	sub	sp, #20
    a974:	9003      	str	r0, [sp, #12]
    a976:	9102      	str	r1, [sp, #8]
    a978:	9201      	str	r2, [sp, #4]
    a97a:	9300      	str	r3, [sp, #0]
    CanIf_Mailbox->CanId = pReceivedDataBuffer->msgId;
    a97c:	9b01      	ldr	r3, [sp, #4]
    a97e:	685a      	ldr	r2, [r3, #4]
    a980:	9b03      	ldr	r3, [sp, #12]
    a982:	601a      	str	r2, [r3, #0]
    * convert the ID to a standardized format since the Upper layer (CANIF) does not know
    * whether the received CAN frame is a Standard CAN frame or Extended CAN frame.
    * In case of an Extended CAN frame, MSB of a received CAN frame ID needs to be
    * made as ‘1’ to mark the received CAN frame as Extended.⌋
    */
    if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_IDE_MASK) != 0U)
    a984:	9b01      	ldr	r3, [sp, #4]
    a986:	681b      	ldr	r3, [r3, #0]
    a988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    a98c:	2b00      	cmp	r3, #0
    a98e:	d005      	beq.n	a99c <Can_Ipw_ParseData+0x2c>
    {
        CanIf_Mailbox->CanId |= (uint32)0x80000000U;
    a990:	9b03      	ldr	r3, [sp, #12]
    a992:	681b      	ldr	r3, [r3, #0]
    a994:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    a998:	9b03      	ldr	r3, [sp, #12]
    a99a:	601a      	str	r2, [r3, #0]
    }

    if (CAN_RX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    a99c:	9b06      	ldr	r3, [sp, #24]
    a99e:	699b      	ldr	r3, [r3, #24]
    a9a0:	2b00      	cmp	r3, #0
    a9a2:	d10c      	bne.n	a9be <Can_Ipw_ParseData+0x4e>
    {
        /* Check if Mb Overrun */
        if ((uint32)(0x06000000U) == (pReceivedDataBuffer->cs & CAN_IPW_CS_CODE_MASK))
    a9a4:	9b01      	ldr	r3, [sp, #4]
    a9a6:	681b      	ldr	r3, [r3, #0]
    a9a8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    a9ac:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    a9b0:	d105      	bne.n	a9be <Can_Ipw_ParseData+0x4e>
        {
            (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    a9b2:	2301      	movs	r3, #1
    a9b4:	2208      	movs	r2, #8
    a9b6:	2100      	movs	r1, #0
    a9b8:	2050      	movs	r0, #80	; 0x50
    a9ba:	f00c fa2d 	bl	16e18 <Det_ReportRuntimeError>
        }
    }

    /* when legacy fifo enabled, FD must be disabled */
    if (CAN_RX_LEGACY_FIFO != Can_pHwObjectConfig->Can_eReceiveType)
    a9be:	9b06      	ldr	r3, [sp, #24]
    a9c0:	699b      	ldr	r3, [r3, #24]
    a9c2:	2b01      	cmp	r3, #1
    a9c4:	d009      	beq.n	a9da <Can_Ipw_ParseData+0x6a>
    {
        /*
        * [SWS_Can_00501] ⌈ CanDrv shall indicate whether the received message is a
        * conventional CAN frame or a CAN FD frame as described in Can_IdType.⌋
        */
        if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_EDL_MASK) != 0U)
    a9c6:	9b01      	ldr	r3, [sp, #4]
    a9c8:	681b      	ldr	r3, [r3, #0]
    a9ca:	2b00      	cmp	r3, #0
    a9cc:	da05      	bge.n	a9da <Can_Ipw_ParseData+0x6a>
        {
            CanIf_Mailbox->CanId |= (uint32)0x40000000U;
    a9ce:	9b03      	ldr	r3, [sp, #12]
    a9d0:	681b      	ldr	r3, [r3, #0]
    a9d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a9d6:	9b03      	ldr	r3, [sp, #12]
    a9d8:	601a      	str	r2, [r3, #0]
        }
    }

    if (Can_pHwObjectConfig->Can_u8PayloadLength <= pReceivedDataBuffer->dataLen)
    a9da:	9b06      	ldr	r3, [sp, #24]
    a9dc:	7c1a      	ldrb	r2, [r3, #16]
    a9de:	9b01      	ldr	r3, [sp, #4]
    a9e0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    a9e4:	429a      	cmp	r2, r3
    a9e6:	d805      	bhi.n	a9f4 <Can_Ipw_ParseData+0x84>
    {
        CanIf_PduInfo->SduLength = Can_pHwObjectConfig->Can_u8PayloadLength;
    a9e8:	9b06      	ldr	r3, [sp, #24]
    a9ea:	7c1b      	ldrb	r3, [r3, #16]
    a9ec:	461a      	mov	r2, r3
    a9ee:	9b02      	ldr	r3, [sp, #8]
    a9f0:	609a      	str	r2, [r3, #8]
    a9f2:	e005      	b.n	aa00 <Can_Ipw_ParseData+0x90>
    }
    else
    {
        CanIf_PduInfo->SduLength = pReceivedDataBuffer->dataLen;
    a9f4:	9b01      	ldr	r3, [sp, #4]
    a9f6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    a9fa:	461a      	mov	r2, r3
    a9fc:	9b02      	ldr	r3, [sp, #8]
    a9fe:	609a      	str	r2, [r3, #8]
                                                      CanIf_PduInfo->SduLength, \
                                                      &pReceivedDataBuffer->data[0]) \
                                                     )
    {
#endif
    CanIf_Mailbox->Hoh = Can_pHwObjectConfig->Can_HwObjectID;
    aa00:	9b06      	ldr	r3, [sp, #24]
    aa02:	881a      	ldrh	r2, [r3, #0]
    aa04:	9b03      	ldr	r3, [sp, #12]
    aa06:	809a      	strh	r2, [r3, #4]
    CanIf_Mailbox->ControllerId = Can_pControllerConfig->Can_u8AbstControllerID;
    aa08:	9b00      	ldr	r3, [sp, #0]
    aa0a:	781a      	ldrb	r2, [r3, #0]
    aa0c:	9b03      	ldr	r3, [sp, #12]
    aa0e:	719a      	strb	r2, [r3, #6]
    CanIf_PduInfo->SduDataPtr = &pReceivedDataBuffer->data[0];
    aa10:	9b01      	ldr	r3, [sp, #4]
    aa12:	f103 0208 	add.w	r2, r3, #8
    aa16:	9b02      	ldr	r3, [sp, #8]
    aa18:	601a      	str	r2, [r3, #0]
    CanIf_RxIndication(CanIf_Mailbox, CanIf_PduInfo);
    aa1a:	9902      	ldr	r1, [sp, #8]
    aa1c:	9803      	ldr	r0, [sp, #12]
    aa1e:	f00c fb29 	bl	17074 <CanIf_RxIndication>
#if (CAN_43_FLEXCAN_LPDU_CALLOUT_SUPPORT == STD_ON)
    }
#endif
}
    aa22:	bf00      	nop
    aa24:	b005      	add	sp, #20
    aa26:	f85d fb04 	ldr.w	pc, [sp], #4

0000aa2a <Can_Ipw_InitLegacyFifoFilter>:

static void Can_Ipw_InitLegacyFifoFilter(const Can_43_FLEXCAN_ControllerConfigType * Can_pController, const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject)
{
    aa2a:	b500      	push	{lr}
    aa2c:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
    aa30:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa34:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    aa38:	6018      	str	r0, [r3, #0]
    aa3a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa3e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aa42:	6019      	str	r1, [r3, #0]
    uint8 u8FilterIdx=0U;
    aa44:	2300      	movs	r3, #0
    aa46:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    uint8 u8HwFilterCount = 0U;
    aa4a:	2300      	movs	r3, #0
    aa4c:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
    uint32 u32HwFilterMask = (uint32)0x00000000U;
    aa50:	2300      	movs	r3, #0
    aa52:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    /* The max FIFO id filter affected by Rx individual masks*/
    uint8 u8FiFoFilterIndvCount = 0U;
    aa56:	2300      	movs	r3, #0
    aa58:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    Flexcan_Ip_RxFifoIdElementFormatType eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    aa5c:	2300      	movs	r3, #0
    aa5e:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
    /* Need to alocate a filter array with elemnets no as defined in HwObject */
    Flexcan_Ip_IdTableType RxFifoFilters[128];

    if (((Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U) <= 32U)
    aa62:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa66:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aa6a:	681b      	ldr	r3, [r3, #0]
    aa6c:	7c9b      	ldrb	r3, [r3, #18]
    aa6e:	089b      	lsrs	r3, r3, #2
    aa70:	b2db      	uxtb	r3, r3
    aa72:	3306      	adds	r3, #6
    aa74:	2b20      	cmp	r3, #32
    aa76:	d80b      	bhi.n	aa90 <Can_Ipw_InitLegacyFifoFilter+0x66>
    {
        u8FiFoFilterIndvCount = (Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U;
    aa78:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa7c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aa80:	681b      	ldr	r3, [r3, #0]
    aa82:	7c9b      	ldrb	r3, [r3, #18]
    aa84:	089b      	lsrs	r3, r3, #2
    aa86:	b2db      	uxtb	r3, r3
    aa88:	3306      	adds	r3, #6
    aa8a:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    aa8e:	e002      	b.n	aa96 <Can_Ipw_InitLegacyFifoFilter+0x6c>
    }
    else
    {
        u8FiFoFilterIndvCount = 32U;
    aa90:	2320      	movs	r3, #32
    aa92:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    }
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    aa96:	2300      	movs	r3, #0
    aa98:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    aa9c:	e169      	b.n	ad72 <Can_Ipw_InitLegacyFifoFilter+0x348>
    {
            if (CAN_LEGACY_FIFO_FORMAT_A == Can_pController->Can_eLegacyAcceptanceMode)
    aa9e:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aaa2:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    aaa6:	681b      	ldr	r3, [r3, #0]
    aaa8:	691b      	ldr	r3, [r3, #16]
    aaaa:	2b00      	cmp	r3, #0
    aaac:	d13a      	bne.n	ab24 <Can_Ipw_InitLegacyFifoFilter+0xfa>
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount;
    aaae:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aab2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aab6:	681b      	ldr	r3, [r3, #0]
    aab8:	7c9b      	ldrb	r3, [r3, #18]
    aaba:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC0000000U;
    aabe:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    aac2:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    aac6:	2300      	movs	r3, #0
    aac8:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    aacc:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aad0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aad4:	681b      	ldr	r3, [r3, #0]
    aad6:	689b      	ldr	r3, [r3, #8]
    aad8:	2b00      	cmp	r3, #0
    aada:	d011      	beq.n	ab00 <Can_Ipw_InitLegacyFifoFilter+0xd6>
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_EXT_SHIFT;
    aadc:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aae0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aae4:	681b      	ldr	r3, [r3, #0]
    aae6:	695a      	ldr	r2, [r3, #20]
    aae8:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    aaec:	00db      	lsls	r3, r3, #3
    aaee:	4413      	add	r3, r2
    aaf0:	685b      	ldr	r3, [r3, #4]
    aaf2:	005b      	lsls	r3, r3, #1
    aaf4:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    aaf8:	4313      	orrs	r3, r2
    aafa:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    aafe:	e126      	b.n	ad4e <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_STD_SHIFT;
    ab00:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab04:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab08:	681b      	ldr	r3, [r3, #0]
    ab0a:	695a      	ldr	r2, [r3, #20]
    ab0c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ab10:	00db      	lsls	r3, r3, #3
    ab12:	4413      	add	r3, r2
    ab14:	685b      	ldr	r3, [r3, #4]
    ab16:	04db      	lsls	r3, r3, #19
    ab18:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ab1c:	4313      	orrs	r3, r2
    ab1e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    ab22:	e114      	b.n	ad4e <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else if (CAN_LEGACY_FIFO_FORMAT_B == Can_pController->Can_eLegacyAcceptanceMode)
    ab24:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab28:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    ab2c:	681b      	ldr	r3, [r3, #0]
    ab2e:	691b      	ldr	r3, [r3, #16]
    ab30:	2b01      	cmp	r3, #1
    ab32:	d160      	bne.n	abf6 <Can_Ipw_InitLegacyFifoFilter+0x1cc>
            {
                u8HwFilterCount = Can_pHwObject->Can_u8HwFilterCount * 2U ;
    ab34:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab38:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab3c:	681b      	ldr	r3, [r3, #0]
    ab3e:	7c9b      	ldrb	r3, [r3, #18]
    ab40:	005b      	lsls	r3, r3, #1
    ab42:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC000C000U;
    ab46:	f04f 23c0 	mov.w	r3, #3221274624	; 0xc000c000
    ab4a:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_B;
    ab4e:	2301      	movs	r3, #1
    ab50:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    ab54:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab58:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab5c:	681b      	ldr	r3, [r3, #0]
    ab5e:	689b      	ldr	r3, [r3, #8]
    ab60:	2b00      	cmp	r3, #0
    ab62:	d024      	beq.n	abae <Can_Ipw_InitLegacyFifoFilter+0x184>
                {
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT1;
    ab64:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab68:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab6c:	681b      	ldr	r3, [r3, #0]
    ab6e:	695a      	ldr	r2, [r3, #20]
    ab70:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ab74:	011b      	lsls	r3, r3, #4
    ab76:	4413      	add	r3, r2
    ab78:	685b      	ldr	r3, [r3, #4]
    ab7a:	0bdb      	lsrs	r3, r3, #15
    ab7c:	041b      	lsls	r3, r3, #16
    ab7e:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ab82:	4313      	orrs	r3, r2
    ab84:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT2;
    ab88:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab8c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab90:	681b      	ldr	r3, [r3, #0]
    ab92:	695a      	ldr	r2, [r3, #20]
    ab94:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ab98:	011b      	lsls	r3, r3, #4
    ab9a:	3308      	adds	r3, #8
    ab9c:	4413      	add	r3, r2
    ab9e:	685b      	ldr	r3, [r3, #4]
    aba0:	0bdb      	lsrs	r3, r3, #15
    aba2:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    aba6:	4313      	orrs	r3, r2
    aba8:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    abac:	e0cf      	b.n	ad4e <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT1;
    abae:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    abb2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    abb6:	681b      	ldr	r3, [r3, #0]
    abb8:	695a      	ldr	r2, [r3, #20]
    abba:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    abbe:	011b      	lsls	r3, r3, #4
    abc0:	4413      	add	r3, r2
    abc2:	685b      	ldr	r3, [r3, #4]
    abc4:	04db      	lsls	r3, r3, #19
    abc6:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    abca:	4313      	orrs	r3, r2
    abcc:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT2;
    abd0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    abd4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    abd8:	681b      	ldr	r3, [r3, #0]
    abda:	695a      	ldr	r2, [r3, #20]
    abdc:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    abe0:	011b      	lsls	r3, r3, #4
    abe2:	3308      	adds	r3, #8
    abe4:	4413      	add	r3, r2
    abe6:	685b      	ldr	r3, [r3, #4]
    abe8:	00db      	lsls	r3, r3, #3
    abea:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    abee:	4313      	orrs	r3, r2
    abf0:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    abf4:	e0ab      	b.n	ad4e <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else /*CAN_LEGACY_FIFO_FORMAT_C == Can_pController->Can_eLegacyAcceptanceMode */
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount * 4U ;
    abf6:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    abfa:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    abfe:	681b      	ldr	r3, [r3, #0]
    ac00:	7c9b      	ldrb	r3, [r3, #18]
    ac02:	009b      	lsls	r3, r3, #2
    ac04:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0x00000000U;
    ac08:	2300      	movs	r3, #0
    ac0a:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_C;
    ac0e:	2302      	movs	r3, #2
    ac10:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    ac14:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ac18:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ac1c:	681b      	ldr	r3, [r3, #0]
    ac1e:	689b      	ldr	r3, [r3, #8]
    ac20:	2b00      	cmp	r3, #0
    ac22:	d04a      	beq.n	acba <Can_Ipw_InitLegacyFifoFilter+0x290>
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    ac24:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ac28:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ac2c:	681b      	ldr	r3, [r3, #0]
    ac2e:	695a      	ldr	r2, [r3, #20]
    ac30:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ac34:	015b      	lsls	r3, r3, #5
    ac36:	4413      	add	r3, r2
    ac38:	685b      	ldr	r3, [r3, #4]
    ac3a:	0d5b      	lsrs	r3, r3, #21
    ac3c:	061b      	lsls	r3, r3, #24
    ac3e:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ac42:	4313      	orrs	r3, r2
    ac44:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    ac48:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ac4c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ac50:	681b      	ldr	r3, [r3, #0]
    ac52:	695a      	ldr	r2, [r3, #20]
    ac54:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ac58:	015b      	lsls	r3, r3, #5
    ac5a:	3308      	adds	r3, #8
    ac5c:	4413      	add	r3, r2
    ac5e:	685b      	ldr	r3, [r3, #4]
    ac60:	0d5b      	lsrs	r3, r3, #21
    ac62:	041b      	lsls	r3, r3, #16
    ac64:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ac68:	4313      	orrs	r3, r2
    ac6a:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    ac6e:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ac72:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ac76:	681b      	ldr	r3, [r3, #0]
    ac78:	695a      	ldr	r2, [r3, #20]
    ac7a:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ac7e:	015b      	lsls	r3, r3, #5
    ac80:	3310      	adds	r3, #16
    ac82:	4413      	add	r3, r2
    ac84:	685b      	ldr	r3, [r3, #4]
    ac86:	0d5b      	lsrs	r3, r3, #21
    ac88:	021b      	lsls	r3, r3, #8
    ac8a:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ac8e:	4313      	orrs	r3, r2
    ac90:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    ac94:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ac98:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ac9c:	681b      	ldr	r3, [r3, #0]
    ac9e:	695a      	ldr	r2, [r3, #20]
    aca0:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    aca4:	015b      	lsls	r3, r3, #5
    aca6:	3318      	adds	r3, #24
    aca8:	4413      	add	r3, r2
    acaa:	685b      	ldr	r3, [r3, #4]
    acac:	0d5b      	lsrs	r3, r3, #21
    acae:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    acb2:	4313      	orrs	r3, r2
    acb4:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    acb8:	e049      	b.n	ad4e <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    acba:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    acbe:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    acc2:	681b      	ldr	r3, [r3, #0]
    acc4:	695a      	ldr	r2, [r3, #20]
    acc6:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    acca:	015b      	lsls	r3, r3, #5
    accc:	4413      	add	r3, r2
    acce:	685b      	ldr	r3, [r3, #4]
    acd0:	08db      	lsrs	r3, r3, #3
    acd2:	061b      	lsls	r3, r3, #24
    acd4:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    acd8:	4313      	orrs	r3, r2
    acda:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    acde:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ace2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ace6:	681b      	ldr	r3, [r3, #0]
    ace8:	695a      	ldr	r2, [r3, #20]
    acea:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    acee:	015b      	lsls	r3, r3, #5
    acf0:	3308      	adds	r3, #8
    acf2:	4413      	add	r3, r2
    acf4:	685b      	ldr	r3, [r3, #4]
    acf6:	08db      	lsrs	r3, r3, #3
    acf8:	041b      	lsls	r3, r3, #16
    acfa:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    acfe:	4313      	orrs	r3, r2
    ad00:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    ad04:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ad08:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ad0c:	681b      	ldr	r3, [r3, #0]
    ad0e:	695a      	ldr	r2, [r3, #20]
    ad10:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ad14:	015b      	lsls	r3, r3, #5
    ad16:	3310      	adds	r3, #16
    ad18:	4413      	add	r3, r2
    ad1a:	685b      	ldr	r3, [r3, #4]
    ad1c:	08db      	lsrs	r3, r3, #3
    ad1e:	021b      	lsls	r3, r3, #8
    ad20:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ad24:	4313      	orrs	r3, r2
    ad26:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    ad2a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ad2e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ad32:	681b      	ldr	r3, [r3, #0]
    ad34:	695a      	ldr	r2, [r3, #20]
    ad36:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ad3a:	015b      	lsls	r3, r3, #5
    ad3c:	3318      	adds	r3, #24
    ad3e:	4413      	add	r3, r2
    ad40:	685b      	ldr	r3, [r3, #4]
    ad42:	08db      	lsrs	r3, r3, #3
    ad44:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ad48:	4313      	orrs	r3, r2
    ad4a:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                }
            }
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, u8FilterIdx, u32HwFilterMask);
    ad4e:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ad52:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    ad56:	681b      	ldr	r3, [r3, #0]
    ad58:	789b      	ldrb	r3, [r3, #2]
    ad5a:	f89d 1417 	ldrb.w	r1, [sp, #1047]	; 0x417
    ad5e:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ad62:	4618      	mov	r0, r3
    ad64:	f002 fd22 	bl	d7ac <FlexCAN_Ip_SetRxIndividualMask_Privileged>
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    ad68:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ad6c:	3301      	adds	r3, #1
    ad6e:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    ad72:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    ad76:	f89d 340f 	ldrb.w	r3, [sp, #1039]	; 0x40f
    ad7a:	429a      	cmp	r2, r3
    ad7c:	d20a      	bcs.n	ad94 <Can_Ipw_InitLegacyFifoFilter+0x36a>
    ad7e:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ad82:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ad86:	681b      	ldr	r3, [r3, #0]
    ad88:	7c9b      	ldrb	r3, [r3, #18]
    ad8a:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    ad8e:	429a      	cmp	r2, r3
    ad90:	f4ff ae85 	bcc.w	aa9e <Can_Ipw_InitLegacyFifoFilter+0x74>
    }

    (void)FlexCAN_Ip_SetRxFifoGlobalMask(Can_pController->Can_u8ControllerOffset, Can_pController->Can_u32LegacyGlobalMask);
    ad94:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ad98:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    ad9c:	681b      	ldr	r3, [r3, #0]
    ad9e:	789a      	ldrb	r2, [r3, #2]
    ada0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ada4:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    ada8:	681b      	ldr	r3, [r3, #0]
    adaa:	68db      	ldr	r3, [r3, #12]
    adac:	4619      	mov	r1, r3
    adae:	4610      	mov	r0, r2
    adb0:	f002 fd4a 	bl	d848 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>
    
    if (u8HwFilterCount != 0U)
    adb4:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    adb8:	2b00      	cmp	r3, #0
    adba:	d054      	beq.n	ae66 <Can_Ipw_InitLegacyFifoFilter+0x43c>
    {
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    adbc:	2300      	movs	r3, #0
    adbe:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    adc2:	e03e      	b.n	ae42 <Can_Ipw_InitLegacyFifoFilter+0x418>
        {
            RxFifoFilters[u8FilterIdx].id = Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterCode;
    adc4:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    adc8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    adcc:	681b      	ldr	r3, [r3, #0]
    adce:	695a      	ldr	r2, [r3, #20]
    add0:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    add4:	00db      	lsls	r3, r3, #3
    add6:	441a      	add	r2, r3
    add8:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    addc:	6812      	ldr	r2, [r2, #0]
    adde:	f50d 6183 	add.w	r1, sp, #1048	; 0x418
    ade2:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
    ade6:	00db      	lsls	r3, r3, #3
    ade8:	440b      	add	r3, r1
    adea:	605a      	str	r2, [r3, #4]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    adec:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    adf0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    adf4:	681b      	ldr	r3, [r3, #0]
    adf6:	689b      	ldr	r3, [r3, #8]
    adf8:	2b00      	cmp	r3, #0
    adfa:	d00a      	beq.n	ae12 <Can_Ipw_InitLegacyFifoFilter+0x3e8>
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = TRUE;
    adfc:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ae00:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    ae04:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    ae08:	00db      	lsls	r3, r3, #3
    ae0a:	4413      	add	r3, r2
    ae0c:	2201      	movs	r2, #1
    ae0e:	705a      	strb	r2, [r3, #1]
    ae10:	e009      	b.n	ae26 <Can_Ipw_InitLegacyFifoFilter+0x3fc>
            }
            else
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = FALSE;
    ae12:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ae16:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    ae1a:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    ae1e:	00db      	lsls	r3, r3, #3
    ae20:	4413      	add	r3, r2
    ae22:	2200      	movs	r2, #0
    ae24:	705a      	strb	r2, [r3, #1]
            }
            RxFifoFilters[u8FilterIdx].isRemoteFrame = FALSE;
    ae26:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    ae2a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ae2e:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
    ae32:	2100      	movs	r1, #0
    ae34:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    ae38:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ae3c:	3301      	adds	r3, #1
    ae3e:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    ae42:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    ae46:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    ae4a:	429a      	cmp	r2, r3
    ae4c:	d3ba      	bcc.n	adc4 <Can_Ipw_InitLegacyFifoFilter+0x39a>
        }

        (void)FlexCAN_Ip_ConfigRxFifo(Can_pController->Can_u8ControllerOffset, eElementFormat, RxFifoFilters);
    ae4e:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ae52:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    ae56:	681b      	ldr	r3, [r3, #0]
    ae58:	789b      	ldrb	r3, [r3, #2]
    ae5a:	aa02      	add	r2, sp, #8
    ae5c:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    ae60:	4618      	mov	r0, r3
    ae62:	f002 f886 	bl	cf72 <FlexCAN_Ip_ConfigRxFifo_Privileged>
    }
    
}
    ae66:	bf00      	nop
    ae68:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    ae6c:	f85d fb04 	ldr.w	pc, [sp], #4

0000ae70 <Can_Ipw_InitBaudrate>:

#endif /* (CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON) */

/* Init baudrate for controller */
static void Can_Ipw_InitBaudrate(const Can_43_FLEXCAN_ControllerConfigType * ControllerConfig)
{
    ae70:	b510      	push	{r4, lr}
    ae72:	b084      	sub	sp, #16
    ae74:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
    uint16 BaudRateConfigID = Can_au16ControllerBaudRateSel[ControllerConfig->Can_u8ControllerID];
#else
    uint16 BaudRateConfigID = ControllerConfig->Can_u16DefaultBaudrateID;
    ae76:	9b01      	ldr	r3, [sp, #4]
    ae78:	8b9b      	ldrh	r3, [r3, #28]
    ae7a:	f8ad 300e 	strh.w	r3, [sp, #14]
        FlexCANTimeSeg.phaseSeg1  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg1;
        FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg2;
        FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8ResyncJumpWidth;
        (void)FlexCAN_Ip_SetBitrate(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, FALSE);
#endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
        if (TRUE == ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bFDFrame)
    ae7e:	9b01      	ldr	r3, [sp, #4]
    ae80:	6a1a      	ldr	r2, [r3, #32]
    ae82:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ae86:	2116      	movs	r1, #22
    ae88:	fb01 f303 	mul.w	r3, r1, r3
    ae8c:	4413      	add	r3, r2
    ae8e:	785b      	ldrb	r3, [r3, #1]
    ae90:	2b00      	cmp	r3, #0
    ae92:	d016      	beq.n	aec2 <Can_Ipw_InitBaudrate+0x52>
            FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg2;
            FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8ResyncJumpWidth;

            (void)FlexCAN_Ip_SetBitrateCbt(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bBitRateSwitch);
    #endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
            (void)FlexCAN_Ip_SetTDCOffset(ControllerConfig->Can_u8ControllerOffset, \
    ae94:	9b01      	ldr	r3, [sp, #4]
    ae96:	7898      	ldrb	r0, [r3, #2]
    ae98:	9b01      	ldr	r3, [sp, #4]
    ae9a:	6a1a      	ldr	r2, [r3, #32]
    ae9c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    aea0:	2116      	movs	r1, #22
    aea2:	fb01 f303 	mul.w	r3, r1, r3
    aea6:	4413      	add	r3, r2
    aea8:	7cd9      	ldrb	r1, [r3, #19]
    aeaa:	9b01      	ldr	r3, [sp, #4]
    aeac:	6a1a      	ldr	r2, [r3, #32]
    aeae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    aeb2:	2416      	movs	r4, #22
    aeb4:	fb04 f303 	mul.w	r3, r4, r3
    aeb8:	4413      	add	r3, r2
    aeba:	7d1b      	ldrb	r3, [r3, #20]
    aebc:	461a      	mov	r2, r3
    aebe:	f003 f83d 	bl	df3c <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bTrcvDelayEnable, \
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(ControllerConfig->Can_u8ControllerOffset, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TxArbitrationStartDelay);
    aec2:	9b01      	ldr	r3, [sp, #4]
    aec4:	7898      	ldrb	r0, [r3, #2]
    aec6:	9b01      	ldr	r3, [sp, #4]
    aec8:	6a1a      	ldr	r2, [r3, #32]
    aeca:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    aece:	2116      	movs	r1, #22
    aed0:	fb01 f303 	mul.w	r3, r1, r3
    aed4:	4413      	add	r3, r2
    aed6:	7c9b      	ldrb	r3, [r3, #18]
    aed8:	4619      	mov	r1, r3
    aeda:	f003 f883 	bl	dfe4 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
}
    aede:	bf00      	nop
    aee0:	b004      	add	sp, #16
    aee2:	bd10      	pop	{r4, pc}

0000aee4 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    aee4:	b500      	push	{lr}
    aee6:	b087      	sub	sp, #28
    aee8:	9003      	str	r0, [sp, #12]
    aeea:	9102      	str	r1, [sp, #8]
    aeec:	4613      	mov	r3, r2
    aeee:	f88d 3007 	strb.w	r3, [sp, #7]
        Can_HwHandleType u8HwObjectID = 0U;
    aef2:	2300      	movs	r3, #0
    aef4:	f8ad 3016 	strh.w	r3, [sp, #22]

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    aef8:	9b03      	ldr	r3, [sp, #12]
    aefa:	785b      	ldrb	r3, [r3, #1]
    aefc:	461a      	mov	r2, r3
    aefe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    af02:	491c      	ldr	r1, [pc, #112]	; (af74 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x90>)
    af04:	0152      	lsls	r2, r2, #5
    af06:	4413      	add	r3, r2
    af08:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    af0c:	f8ad 3016 	strh.w	r3, [sp, #22]
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    af10:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    af14:	f64f 72ff 	movw	r2, #65535	; 0xffff
    af18:	4293      	cmp	r3, r2
    af1a:	d027      	beq.n	af6c <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
    af1c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    af20:	4613      	mov	r3, r2
    af22:	00db      	lsls	r3, r3, #3
    af24:	4413      	add	r3, r2
    af26:	009b      	lsls	r3, r3, #2
    af28:	461a      	mov	r2, r3
    af2a:	9b02      	ldr	r3, [sp, #8]
    af2c:	4413      	add	r3, r2
    af2e:	7b1b      	ldrb	r3, [r3, #12]
    af30:	f083 0301 	eor.w	r3, r3, #1
    af34:	b2db      	uxtb	r3, r3
    af36:	2b00      	cmp	r3, #0
    af38:	d018      	beq.n	af6c <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
        {
            if (CAN_TX_NORMAL == Can_pHwObjectConfig[u8HwObjectID].Can_eReceiveType)
    af3a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    af3e:	4613      	mov	r3, r2
    af40:	00db      	lsls	r3, r3, #3
    af42:	4413      	add	r3, r2
    af44:	009b      	lsls	r3, r3, #2
    af46:	461a      	mov	r2, r3
    af48:	9b02      	ldr	r3, [sp, #8]
    af4a:	4413      	add	r3, r2
    af4c:	699b      	ldr	r3, [r3, #24]
    af4e:	2b03      	cmp	r3, #3
    af50:	d10c      	bne.n	af6c <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
            {
                CanIf_TxConfirmation(Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx]);
    af52:	9b03      	ldr	r3, [sp, #12]
    af54:	785b      	ldrb	r3, [r3, #1]
    af56:	461a      	mov	r2, r3
    af58:	f89d 3007 	ldrb.w	r3, [sp, #7]
    af5c:	4906      	ldr	r1, [pc, #24]	; (af78 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x94>)
    af5e:	0152      	lsls	r2, r2, #5
    af60:	4413      	add	r3, r2
    af62:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    af66:	4618      	mov	r0, r3
    af68:	f00c f850 	bl	1700c <CanIf_TxConfirmation>
            }
        }
    }
    af6c:	bf00      	nop
    af6e:	b007      	add	sp, #28
    af70:	f85d fb04 	ldr.w	pc, [sp], #4
    af74:	1fff92d8 	.word	0x1fff92d8
    af78:	1fff9258 	.word	0x1fff9258

0000af7c <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    af7c:	b500      	push	{lr}
    af7e:	b08f      	sub	sp, #60	; 0x3c
    af80:	9005      	str	r0, [sp, #20]
    af82:	9104      	str	r1, [sp, #16]
    af84:	4613      	mov	r3, r2
    af86:	f88d 300f 	strb.w	r3, [sp, #15]
        Can_HwHandleType u8HwObjectID = 0U;
    af8a:	2300      	movs	r3, #0
    af8c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        Can_HwType CanIf_Mailbox;
        PduInfoType CanIf_PduInfo;
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    af90:	2300      	movs	r3, #0
    af92:	930c      	str	r3, [sp, #48]	; 0x30
        Flexcan_Ip_MsgBuffType * pReceivedDataBuffer = NULL_PTR;
    af94:	2300      	movs	r3, #0
    af96:	930b      	str	r3, [sp, #44]	; 0x2c

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    af98:	9b05      	ldr	r3, [sp, #20]
    af9a:	785b      	ldrb	r3, [r3, #1]
    af9c:	461a      	mov	r2, r3
    af9e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    afa2:	4944      	ldr	r1, [pc, #272]	; (b0b4 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x138>)
    afa4:	0152      	lsls	r2, r2, #5
    afa6:	4413      	add	r3, r2
    afa8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    afac:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    afb0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    afb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    afb8:	4293      	cmp	r3, r2
    afba:	d076      	beq.n	b0aa <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
    afbc:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    afc0:	4613      	mov	r3, r2
    afc2:	00db      	lsls	r3, r3, #3
    afc4:	4413      	add	r3, r2
    afc6:	009b      	lsls	r3, r3, #2
    afc8:	461a      	mov	r2, r3
    afca:	9b04      	ldr	r3, [sp, #16]
    afcc:	4413      	add	r3, r2
    afce:	7b1b      	ldrb	r3, [r3, #12]
    afd0:	f083 0301 	eor.w	r3, r3, #1
    afd4:	b2db      	uxtb	r3, r3
    afd6:	2b00      	cmp	r3, #0
    afd8:	d067      	beq.n	b0aa <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
        {
            Can_pHwObject = &Can_pHwObjectConfig[u8HwObjectID];
    afda:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    afde:	4613      	mov	r3, r2
    afe0:	00db      	lsls	r3, r3, #3
    afe2:	4413      	add	r3, r2
    afe4:	009b      	lsls	r3, r3, #2
    afe6:	461a      	mov	r2, r3
    afe8:	9b04      	ldr	r3, [sp, #16]
    afea:	4413      	add	r3, r2
    afec:	930c      	str	r3, [sp, #48]	; 0x30

            if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    afee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    aff0:	699b      	ldr	r3, [r3, #24]
    aff2:	2b00      	cmp	r3, #0
    aff4:	d11d      	bne.n	b032 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xb6>
            {
                pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    aff6:	9b05      	ldr	r3, [sp, #20]
    aff8:	785b      	ldrb	r3, [r3, #1]
    affa:	461a      	mov	r2, r3
    affc:	4b2e      	ldr	r3, [pc, #184]	; (b0b8 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x13c>)
    affe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    b002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b004:	7f1b      	ldrb	r3, [r3, #28]
    b006:	011b      	lsls	r3, r3, #4
    b008:	4413      	add	r3, r2
    b00a:	681b      	ldr	r3, [r3, #0]
    b00c:	930b      	str	r3, [sp, #44]	; 0x2c
                Can_Ipw_ParseData(&CanIf_Mailbox, \
    b00e:	a906      	add	r1, sp, #24
    b010:	a809      	add	r0, sp, #36	; 0x24
    b012:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b014:	9300      	str	r3, [sp, #0]
    b016:	9b05      	ldr	r3, [sp, #20]
    b018:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b01a:	f7ff fca9 	bl	a970 <Can_Ipw_ParseData>
                                  pReceivedDataBuffer, \
                                  Can_pControllerConfig, \
                                  Can_pHwObject \
                                 );
                /* ready to receive in next time */
                (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    b01e:	9b05      	ldr	r3, [sp, #20]
    b020:	7898      	ldrb	r0, [r3, #2]
    b022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b024:	7f19      	ldrb	r1, [r3, #28]
    b026:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b028:	7b1b      	ldrb	r3, [r3, #12]
    b02a:	2200      	movs	r2, #0
    b02c:	f001 fe70 	bl	cd10 <FlexCAN_Ip_Receive>
            else
            {
                /* prevent misra */
            }
        }
    }
    b030:	e03b      	b.n	b0aa <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
            else if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    b032:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b034:	699b      	ldr	r3, [r3, #24]
    b036:	2b01      	cmp	r3, #1
    b038:	d137      	bne.n	b0aa <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                if ((uint8)7U == u8MbIdx)
    b03a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b03e:	2b07      	cmp	r3, #7
    b040:	d10d      	bne.n	b05e <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xe2>
                    (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    b042:	2301      	movs	r3, #1
    b044:	2208      	movs	r2, #8
    b046:	2100      	movs	r1, #0
    b048:	2050      	movs	r0, #80	; 0x50
    b04a:	f00b fee5 	bl	16e18 <Det_ReportRuntimeError>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoOvfNotif)
    b04e:	9b05      	ldr	r3, [sp, #20]
    b050:	699b      	ldr	r3, [r3, #24]
    b052:	2b00      	cmp	r3, #0
    b054:	d029      	beq.n	b0aa <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                        Can_pControllerConfig->Can_pLegacyFiFoOvfNotif();
    b056:	9b05      	ldr	r3, [sp, #20]
    b058:	699b      	ldr	r3, [r3, #24]
    b05a:	4798      	blx	r3
    }
    b05c:	e025      	b.n	b0aa <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                else if ((uint8)6U == u8MbIdx)
    b05e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b062:	2b06      	cmp	r3, #6
    b064:	d107      	bne.n	b076 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xfa>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoWarnNotif)
    b066:	9b05      	ldr	r3, [sp, #20]
    b068:	695b      	ldr	r3, [r3, #20]
    b06a:	2b00      	cmp	r3, #0
    b06c:	d01d      	beq.n	b0aa <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                        Can_pControllerConfig->Can_pLegacyFiFoWarnNotif();
    b06e:	9b05      	ldr	r3, [sp, #20]
    b070:	695b      	ldr	r3, [r3, #20]
    b072:	4798      	blx	r3
    }
    b074:	e019      	b.n	b0aa <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                    pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    b076:	9b05      	ldr	r3, [sp, #20]
    b078:	785b      	ldrb	r3, [r3, #1]
    b07a:	461a      	mov	r2, r3
    b07c:	4b0e      	ldr	r3, [pc, #56]	; (b0b8 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x13c>)
    b07e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    b082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b084:	7f1b      	ldrb	r3, [r3, #28]
    b086:	011b      	lsls	r3, r3, #4
    b088:	4413      	add	r3, r2
    b08a:	681b      	ldr	r3, [r3, #0]
    b08c:	930b      	str	r3, [sp, #44]	; 0x2c
                    Can_Ipw_ParseData(&CanIf_Mailbox, \
    b08e:	a906      	add	r1, sp, #24
    b090:	a809      	add	r0, sp, #36	; 0x24
    b092:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b094:	9300      	str	r3, [sp, #0]
    b096:	9b05      	ldr	r3, [sp, #20]
    b098:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b09a:	f7ff fc69 	bl	a970 <Can_Ipw_ParseData>
                    (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    b09e:	9b05      	ldr	r3, [sp, #20]
    b0a0:	789b      	ldrb	r3, [r3, #2]
    b0a2:	2100      	movs	r1, #0
    b0a4:	4618      	mov	r0, r3
    b0a6:	f001 ff31 	bl	cf0c <FlexCAN_Ip_RxFifo>
    }
    b0aa:	bf00      	nop
    b0ac:	b00f      	add	sp, #60	; 0x3c
    b0ae:	f85d fb04 	ldr.w	pc, [sp], #4
    b0b2:	bf00      	nop
    b0b4:	1fff92d8 	.word	0x1fff92d8
    b0b8:	00018638 	.word	0x00018638

0000b0bc <Can_43_FLEXCAN_Ipw_Init>:
#endif /* (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON) */
/*==================================================================================================
*                                       GLOBAL FUNCTIONS
==================================================================================================*/
Std_ReturnType Can_43_FLEXCAN_Ipw_Init(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b0bc:	b510      	push	{r4, lr}
    b0be:	b084      	sub	sp, #16
    b0c0:	9001      	str	r0, [sp, #4]
    Std_ReturnType eRetVal = (Std_ReturnType)FLEXCAN_STATUS_ERROR;
    b0c2:	2301      	movs	r3, #1
    b0c4:	f88d 300c 	strb.w	r3, [sp, #12]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    /* The Index of Hoh in a group that refer to a controller */
    uint8 u8HwObjRefIdx = 0U;
    b0c8:	2300      	movs	r3, #0
    b0ca:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ObjIdx = 0U;
    b0ce:	2300      	movs	r3, #0
    b0d0:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    b0d4:	2300      	movs	r3, #0
    b0d6:	9302      	str	r3, [sp, #8]
    uint8 u8HwBufferCount = 0U;
    b0d8:	2300      	movs	r3, #0
    b0da:	f88d 300d 	strb.w	r3, [sp, #13]
    {
        Can_Ipw_u32Seconds = 0U;
    }
#endif
    /* @violates @ref Can_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    eRetVal = (Std_ReturnType)Call_Can_FlexCan_Init(Can_pControllerConfig->Can_u8ControllerOffset, Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);
    b0de:	9b01      	ldr	r3, [sp, #4]
    b0e0:	7898      	ldrb	r0, [r3, #2]
    b0e2:	9b01      	ldr	r3, [sp, #4]
    b0e4:	785b      	ldrb	r3, [r3, #1]
    b0e6:	461a      	mov	r2, r3
    b0e8:	4b77      	ldr	r3, [pc, #476]	; (b2c8 <Can_43_FLEXCAN_Ipw_Init+0x20c>)
    b0ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    b0ee:	9b01      	ldr	r3, [sp, #4]
    b0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b0f2:	681b      	ldr	r3, [r3, #0]
    b0f4:	461a      	mov	r2, r3
    b0f6:	f001 fcff 	bl	caf8 <FlexCAN_Ip_Init_Privileged>
    b0fa:	4603      	mov	r3, r0
    b0fc:	f88d 300c 	strb.w	r3, [sp, #12]
    
    /* by defaut, enable interrupt when setcontroller to start */
    Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    b100:	9b01      	ldr	r3, [sp, #4]
    b102:	785b      	ldrb	r3, [r3, #1]
    b104:	461a      	mov	r2, r3
    b106:	4b71      	ldr	r3, [pc, #452]	; (b2cc <Can_43_FLEXCAN_Ipw_Init+0x210>)
    b108:	2101      	movs	r1, #1
    b10a:	5499      	strb	r1, [r3, r2]
    if ((Std_ReturnType)FLEXCAN_STATUS_SUCCESS == eRetVal)
    b10c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    b110:	2b00      	cmp	r3, #0
    b112:	d13b      	bne.n	b18c <Can_43_FLEXCAN_Ipw_Init+0xd0>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b114:	9b01      	ldr	r3, [sp, #4]
    b116:	789b      	ldrb	r3, [r3, #2]
    b118:	4618      	mov	r0, r3
    b11a:	f003 f821 	bl	e160 <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* If the FlexCAN_Init retuns SUCCESS then the module is already in freezemode, and FlexCAN_Ip_SetTDCOffset and FlexCAN_Ip_SetTxArbitrationStartDelay will always retun success */
        if (Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bFDFrame)
    b11e:	9b01      	ldr	r3, [sp, #4]
    b120:	6a1a      	ldr	r2, [r3, #32]
    b122:	9b01      	ldr	r3, [sp, #4]
    b124:	8b9b      	ldrh	r3, [r3, #28]
    b126:	4619      	mov	r1, r3
    b128:	2316      	movs	r3, #22
    b12a:	fb01 f303 	mul.w	r3, r1, r3
    b12e:	4413      	add	r3, r2
    b130:	785b      	ldrb	r3, [r3, #1]
    b132:	2b00      	cmp	r3, #0
    b134:	d018      	beq.n	b168 <Can_43_FLEXCAN_Ipw_Init+0xac>
        {
            (void)FlexCAN_Ip_SetTDCOffset(Can_pControllerConfig->Can_u8ControllerOffset, \
    b136:	9b01      	ldr	r3, [sp, #4]
    b138:	7898      	ldrb	r0, [r3, #2]
    b13a:	9b01      	ldr	r3, [sp, #4]
    b13c:	6a1a      	ldr	r2, [r3, #32]
    b13e:	9b01      	ldr	r3, [sp, #4]
    b140:	8b9b      	ldrh	r3, [r3, #28]
    b142:	4619      	mov	r1, r3
    b144:	2316      	movs	r3, #22
    b146:	fb01 f303 	mul.w	r3, r1, r3
    b14a:	4413      	add	r3, r2
    b14c:	7cd9      	ldrb	r1, [r3, #19]
    b14e:	9b01      	ldr	r3, [sp, #4]
    b150:	6a1a      	ldr	r2, [r3, #32]
    b152:	9b01      	ldr	r3, [sp, #4]
    b154:	8b9b      	ldrh	r3, [r3, #28]
    b156:	461c      	mov	r4, r3
    b158:	2316      	movs	r3, #22
    b15a:	fb04 f303 	mul.w	r3, r4, r3
    b15e:	4413      	add	r3, r2
    b160:	7d1b      	ldrb	r3, [r3, #20]
    b162:	461a      	mov	r2, r3
    b164:	f002 feea 	bl	df3c <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bTrcvDelayEnable, \
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(Can_pControllerConfig->Can_u8ControllerOffset, \
    b168:	9b01      	ldr	r3, [sp, #4]
    b16a:	7898      	ldrb	r0, [r3, #2]
    b16c:	9b01      	ldr	r3, [sp, #4]
    b16e:	6a1a      	ldr	r2, [r3, #32]
    b170:	9b01      	ldr	r3, [sp, #4]
    b172:	8b9b      	ldrh	r3, [r3, #28]
    b174:	4619      	mov	r1, r3
    b176:	2316      	movs	r3, #22
    b178:	fb01 f303 	mul.w	r3, r1, r3
    b17c:	4413      	add	r3, r2
    b17e:	7c9b      	ldrb	r3, [r3, #18]
    b180:	4619      	mov	r1, r3
    b182:	f002 ff2f 	bl	dfe4 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
                                                    Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TxArbitrationStartDelay);
        
        /* Init all Rx objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    b186:	9801      	ldr	r0, [sp, #4]
    b188:	f000 fb0a 	bl	b7a0 <Can_Ipw_InitRx>
    }

#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    b18c:	2300      	movs	r3, #0
    b18e:	f88d 300d 	strb.w	r3, [sp, #13]
    b192:	e010      	b.n	b1b6 <Can_43_FLEXCAN_Ipw_Init+0xfa>
    {
        Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8HwBufferCount] = CAN_43_FLEXCAN_HWOBJ_UNMAPPED;
    b194:	9b01      	ldr	r3, [sp, #4]
    b196:	785b      	ldrb	r3, [r3, #1]
    b198:	461a      	mov	r2, r3
    b19a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b19e:	494c      	ldr	r1, [pc, #304]	; (b2d0 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b1a0:	0152      	lsls	r2, r2, #5
    b1a2:	4413      	add	r3, r2
    b1a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    b1a8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    b1ac:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b1b0:	3301      	adds	r3, #1
    b1b2:	f88d 300d 	strb.w	r3, [sp, #13]
    b1b6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b1ba:	2b1f      	cmp	r3, #31
    b1bc:	d9ea      	bls.n	b194 <Can_43_FLEXCAN_Ipw_Init+0xd8>
    }
    /* Map MB index to hardware object ID */
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b1be:	2300      	movs	r3, #0
    b1c0:	f88d 300f 	strb.w	r3, [sp, #15]
    b1c4:	e06b      	b.n	b29e <Can_43_FLEXCAN_Ipw_Init+0x1e2>
    {
        Can_pHwObject = Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    b1c6:	9b01      	ldr	r3, [sp, #4]
    b1c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b1ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b1ce:	009b      	lsls	r3, r3, #2
    b1d0:	4413      	add	r3, r2
    b1d2:	681b      	ldr	r3, [r3, #0]
    b1d4:	9302      	str	r3, [sp, #8]
        switch (Can_pHwObject->Can_eReceiveType)
    b1d6:	9b02      	ldr	r3, [sp, #8]
    b1d8:	699b      	ldr	r3, [r3, #24]
    b1da:	2b03      	cmp	r3, #3
    b1dc:	d006      	beq.n	b1ec <Can_43_FLEXCAN_Ipw_Init+0x130>
    b1de:	2b03      	cmp	r3, #3
    b1e0:	d857      	bhi.n	b292 <Can_43_FLEXCAN_Ipw_Init+0x1d6>
    b1e2:	2b00      	cmp	r3, #0
    b1e4:	d023      	beq.n	b22e <Can_43_FLEXCAN_Ipw_Init+0x172>
    b1e6:	2b01      	cmp	r3, #1
    b1e8:	d02f      	beq.n	b24a <Can_43_FLEXCAN_Ipw_Init+0x18e>
                break;
            }
            default:
            {
                /* don't map for enhance fifo object because of out of message buffer memory */
                break;
    b1ea:	e052      	b.n	b292 <Can_43_FLEXCAN_Ipw_Init+0x1d6>
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    b1ec:	2300      	movs	r3, #0
    b1ee:	f88d 300e 	strb.w	r3, [sp, #14]
    b1f2:	e015      	b.n	b220 <Can_43_FLEXCAN_Ipw_Init+0x164>
                    Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex + u8ObjIdx] = Can_pHwObject->Can_HwObjectID;
    b1f4:	9b01      	ldr	r3, [sp, #4]
    b1f6:	785b      	ldrb	r3, [r3, #1]
    b1f8:	461c      	mov	r4, r3
    b1fa:	9b02      	ldr	r3, [sp, #8]
    b1fc:	7f1b      	ldrb	r3, [r3, #28]
    b1fe:	461a      	mov	r2, r3
    b200:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b204:	4413      	add	r3, r2
    b206:	9a02      	ldr	r2, [sp, #8]
    b208:	8810      	ldrh	r0, [r2, #0]
    b20a:	4931      	ldr	r1, [pc, #196]	; (b2d0 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b20c:	0162      	lsls	r2, r4, #5
    b20e:	4413      	add	r3, r2
    b210:	4602      	mov	r2, r0
    b212:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    b216:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b21a:	3301      	adds	r3, #1
    b21c:	f88d 300e 	strb.w	r3, [sp, #14]
    b220:	9b02      	ldr	r3, [sp, #8]
    b222:	7b9b      	ldrb	r3, [r3, #14]
    b224:	f89d 200e 	ldrb.w	r2, [sp, #14]
    b228:	429a      	cmp	r2, r3
    b22a:	d3e3      	bcc.n	b1f4 <Can_43_FLEXCAN_Ipw_Init+0x138>
                break;
    b22c:	e032      	b.n	b294 <Can_43_FLEXCAN_Ipw_Init+0x1d8>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    b22e:	9b01      	ldr	r3, [sp, #4]
    b230:	785b      	ldrb	r3, [r3, #1]
    b232:	461c      	mov	r4, r3
    b234:	9b02      	ldr	r3, [sp, #8]
    b236:	7f1b      	ldrb	r3, [r3, #28]
    b238:	4618      	mov	r0, r3
    b23a:	9b02      	ldr	r3, [sp, #8]
    b23c:	8819      	ldrh	r1, [r3, #0]
    b23e:	4a24      	ldr	r2, [pc, #144]	; (b2d0 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b240:	0163      	lsls	r3, r4, #5
    b242:	4403      	add	r3, r0
    b244:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                break;
    b248:	e024      	b.n	b294 <Can_43_FLEXCAN_Ipw_Init+0x1d8>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    b24a:	9b01      	ldr	r3, [sp, #4]
    b24c:	785b      	ldrb	r3, [r3, #1]
    b24e:	461c      	mov	r4, r3
    b250:	9b02      	ldr	r3, [sp, #8]
    b252:	7f1b      	ldrb	r3, [r3, #28]
    b254:	4618      	mov	r0, r3
    b256:	9b02      	ldr	r3, [sp, #8]
    b258:	8819      	ldrh	r1, [r3, #0]
    b25a:	4a1d      	ldr	r2, [pc, #116]	; (b2d0 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b25c:	0163      	lsls	r3, r4, #5
    b25e:	4403      	add	r3, r0
    b260:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][6U] = Can_pHwObject->Can_HwObjectID;
    b264:	9b01      	ldr	r3, [sp, #4]
    b266:	785b      	ldrb	r3, [r3, #1]
    b268:	4618      	mov	r0, r3
    b26a:	9b02      	ldr	r3, [sp, #8]
    b26c:	8819      	ldrh	r1, [r3, #0]
    b26e:	4a18      	ldr	r2, [pc, #96]	; (b2d0 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b270:	0183      	lsls	r3, r0, #6
    b272:	4413      	add	r3, r2
    b274:	330c      	adds	r3, #12
    b276:	460a      	mov	r2, r1
    b278:	801a      	strh	r2, [r3, #0]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][7U] = Can_pHwObject->Can_HwObjectID;
    b27a:	9b01      	ldr	r3, [sp, #4]
    b27c:	785b      	ldrb	r3, [r3, #1]
    b27e:	4618      	mov	r0, r3
    b280:	9b02      	ldr	r3, [sp, #8]
    b282:	8819      	ldrh	r1, [r3, #0]
    b284:	4a12      	ldr	r2, [pc, #72]	; (b2d0 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b286:	0183      	lsls	r3, r0, #6
    b288:	4413      	add	r3, r2
    b28a:	330e      	adds	r3, #14
    b28c:	460a      	mov	r2, r1
    b28e:	801a      	strh	r2, [r3, #0]
                break;
    b290:	e000      	b.n	b294 <Can_43_FLEXCAN_Ipw_Init+0x1d8>
                break;
    b292:	bf00      	nop
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b294:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b298:	3301      	adds	r3, #1
    b29a:	f88d 300f 	strb.w	r3, [sp, #15]
    b29e:	9b01      	ldr	r3, [sp, #4]
    b2a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    b2a4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    b2a8:	429a      	cmp	r2, r3
    b2aa:	d38c      	bcc.n	b1c6 <Can_43_FLEXCAN_Ipw_Init+0x10a>
            }
        }
    }
#endif /* MB_INTERRUPT_SUPPORT */
    eRetVal = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    b2ac:	9b01      	ldr	r3, [sp, #4]
    b2ae:	789b      	ldrb	r3, [r3, #2]
    b2b0:	4618      	mov	r0, r3
    b2b2:	f002 fca5 	bl	dc00 <FlexCAN_Ip_SetStopMode_Privileged>
    b2b6:	4603      	mov	r3, r0
    b2b8:	f88d 300c 	strb.w	r3, [sp, #12]

    return (Std_ReturnType)eRetVal;
    b2bc:	f89d 300c 	ldrb.w	r3, [sp, #12]
}
    b2c0:	4618      	mov	r0, r3
    b2c2:	b004      	add	sp, #16
    b2c4:	bd10      	pop	{r4, pc}
    b2c6:	bf00      	nop
    b2c8:	00018638 	.word	0x00018638
    b2cc:	1fff9358 	.word	0x1fff9358
    b2d0:	1fff92d8 	.word	0x1fff92d8

0000b2d4 <Can_43_FLEXCAN_Ipw_DeInit>:

/**
*   @brief      De-Initialize Controller
*/
void Can_43_FLEXCAN_Ipw_DeInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b2d4:	b500      	push	{lr}
    b2d6:	b083      	sub	sp, #12
    b2d8:	9001      	str	r0, [sp, #4]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    (void)FlexCAN_Ip_Deinit(Can_pControllerConfig->Can_u8ControllerOffset);
    b2da:	9b01      	ldr	r3, [sp, #4]
    b2dc:	789b      	ldrb	r3, [r3, #2]
    b2de:	4618      	mov	r0, r3
    b2e0:	f002 fafa 	bl	d8d8 <FlexCAN_Ip_Deinit_Privileged>
}
    b2e4:	bf00      	nop
    b2e6:	b003      	add	sp, #12
    b2e8:	f85d fb04 	ldr.w	pc, [sp], #4

0000b2ec <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>:

/**
*   @brief      Set Error Initialization and set Controller to start Mode.
*/
static Std_ReturnType Can_43_FLEXCAN_Ipw_SetControlerErrorInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b2ec:	b500      	push	{lr}
    b2ee:	b085      	sub	sp, #20
    b2f0:	9001      	str	r0, [sp, #4]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_SUCCESS;
    b2f2:	2300      	movs	r3, #0
    b2f4:	9303      	str	r3, [sp, #12]

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    b2f6:	9b01      	ldr	r3, [sp, #4]
    b2f8:	785b      	ldrb	r3, [r3, #1]
    b2fa:	461a      	mov	r2, r3
    b2fc:	4b11      	ldr	r3, [pc, #68]	; (b344 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x58>)
    b2fe:	5c9b      	ldrb	r3, [r3, r2]
    b300:	2b00      	cmp	r3, #0
    b302:	d012      	beq.n	b32a <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x3e>
    {
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    b304:	9b01      	ldr	r3, [sp, #4]
    b306:	7a5b      	ldrb	r3, [r3, #9]
    b308:	f083 0301 	eor.w	r3, r3, #1
    b30c:	b2db      	uxtb	r3, r3
    b30e:	2b00      	cmp	r3, #0
    b310:	d006      	beq.n	b320 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x34>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    b312:	9b01      	ldr	r3, [sp, #4]
    b314:	789b      	ldrb	r3, [r3, #2]
    b316:	2201      	movs	r2, #1
    b318:	2104      	movs	r1, #4
    b31a:	4618      	mov	r0, r3
    b31c:	f002 ff4c 	bl	e1b8 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b320:	9b01      	ldr	r3, [sp, #4]
    b322:	789b      	ldrb	r3, [r3, #2]
    b324:	4618      	mov	r0, r3
    b326:	f002 feed 	bl	e104 <FlexCAN_Ip_EnableInterrupts_Privileged>
    }
    eRetVal = FlexCAN_Ip_SetStartMode(Can_pControllerConfig->Can_u8ControllerOffset);
    b32a:	9b01      	ldr	r3, [sp, #4]
    b32c:	789b      	ldrb	r3, [r3, #2]
    b32e:	4618      	mov	r0, r3
    b330:	f002 fc46 	bl	dbc0 <FlexCAN_Ip_SetStartMode_Privileged>
    b334:	9003      	str	r0, [sp, #12]

    return (Std_ReturnType)eRetVal;
    b336:	9b03      	ldr	r3, [sp, #12]
    b338:	b2db      	uxtb	r3, r3
}
    b33a:	4618      	mov	r0, r3
    b33c:	b005      	add	sp, #20
    b33e:	f85d fb04 	ldr.w	pc, [sp], #4
    b342:	bf00      	nop
    b344:	1fff9358 	.word	0x1fff9358

0000b348 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>:

/**
*   @brief      Set Controller to participate the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStartMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b348:	b500      	push	{lr}
    b34a:	b087      	sub	sp, #28
    b34c:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    uint8 u8HwObjRefIdx = 0U;
    b34e:	2300      	movs	r3, #0
    b350:	f88d 3017 	strb.w	r3, [sp, #23]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    b354:	2300      	movs	r3, #0
    b356:	9303      	str	r3, [sp, #12]
        {
            Can_Ipw_u32CurrentCompareVal = Stm_Ip_GetCompareValue(CAN_43_FLEXCAN_TS_STM_INSTANCE, CAN_43_FLEXCAN_TS_STM_CHANNEL);
        }
    }
#endif
    eRetVal = FlexCAN_Ip_Init(Can_pControllerConfig->Can_u8ControllerOffset, \
    b358:	9b01      	ldr	r3, [sp, #4]
    b35a:	7898      	ldrb	r0, [r3, #2]
    b35c:	9b01      	ldr	r3, [sp, #4]
    b35e:	785b      	ldrb	r3, [r3, #1]
    b360:	461a      	mov	r2, r3
    b362:	4b31      	ldr	r3, [pc, #196]	; (b428 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xe0>)
    b364:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    b368:	9b01      	ldr	r3, [sp, #4]
    b36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b36c:	681b      	ldr	r3, [r3, #0]
    b36e:	461a      	mov	r2, r3
    b370:	f001 fbc2 	bl	caf8 <FlexCAN_Ip_Init_Privileged>
    b374:	9004      	str	r0, [sp, #16]
                                                    Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], \
                                                    Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);

    if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    b376:	9b04      	ldr	r3, [sp, #16]
    b378:	2b00      	cmp	r3, #0
    b37a:	d14f      	bne.n	b41c <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xd4>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b37c:	9b01      	ldr	r3, [sp, #4]
    b37e:	789b      	ldrb	r3, [r3, #2]
    b380:	4618      	mov	r0, r3
    b382:	f002 feed 	bl	e160 <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* Re-Init baudrate */
        Can_Ipw_InitBaudrate(Can_pControllerConfig);
    b386:	9801      	ldr	r0, [sp, #4]
    b388:	f7ff fd72 	bl	ae70 <Can_Ipw_InitBaudrate>

        /* Re-Init all Rx Objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    b38c:	9801      	ldr	r0, [sp, #4]
    b38e:	f000 fa07 	bl	b7a0 <Can_Ipw_InitRx>
            Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][MbIdx] = FALSE;
        }
    #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */

    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b392:	2300      	movs	r3, #0
    b394:	f88d 3017 	strb.w	r3, [sp, #23]
    b398:	e02f      	b.n	b3fa <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xb2>
        {
            Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    b39a:	9b01      	ldr	r3, [sp, #4]
    b39c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b39e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b3a2:	009b      	lsls	r3, r3, #2
    b3a4:	4413      	add	r3, r2
    b3a6:	681b      	ldr	r3, [r3, #0]
    b3a8:	9303      	str	r3, [sp, #12]

            if (FALSE == Can_pHwObject->Can_bHwObjectUsesPolling)
    b3aa:	9b03      	ldr	r3, [sp, #12]
    b3ac:	7b1b      	ldrb	r3, [r3, #12]
    b3ae:	f083 0301 	eor.w	r3, r3, #1
    b3b2:	b2db      	uxtb	r3, r3
    b3b4:	2b00      	cmp	r3, #0
    b3b6:	d018      	beq.n	b3ea <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa2>
            {
                switch (Can_pHwObject->Can_eReceiveType)
    b3b8:	9b03      	ldr	r3, [sp, #12]
    b3ba:	699b      	ldr	r3, [r3, #24]
    b3bc:	2b00      	cmp	r3, #0
    b3be:	d003      	beq.n	b3c8 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x80>
    b3c0:	3b01      	subs	r3, #1
    b3c2:	2b01      	cmp	r3, #1
    b3c4:	d813      	bhi.n	b3ee <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa6>
    b3c6:	e009      	b.n	b3dc <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x94>
                {
                    case CAN_RX_NORMAL:
                    {
                        (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    b3c8:	9b01      	ldr	r3, [sp, #4]
    b3ca:	7898      	ldrb	r0, [r3, #2]
    b3cc:	9b03      	ldr	r3, [sp, #12]
    b3ce:	7f19      	ldrb	r1, [r3, #28]
    b3d0:	9b03      	ldr	r3, [sp, #12]
    b3d2:	7b1b      	ldrb	r3, [r3, #12]
    b3d4:	2200      	movs	r2, #0
    b3d6:	f001 fc9b 	bl	cd10 <FlexCAN_Ip_Receive>
                                                 Can_pHwObject->Can_u8HwBufferIndex, \
                                                 NULL_PTR, \
                                                 Can_pHwObject->Can_bHwObjectUsesPolling \
                                                );
                        break;
    b3da:	e009      	b.n	b3f0 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa8>
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, Can_pControllerConfig->pDmaDstAddr);
                        }
                        else
                    #endif
                        {
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    b3dc:	9b01      	ldr	r3, [sp, #4]
    b3de:	789b      	ldrb	r3, [r3, #2]
    b3e0:	2100      	movs	r1, #0
    b3e2:	4618      	mov	r0, r3
    b3e4:	f001 fd92 	bl	cf0c <FlexCAN_Ip_RxFifo>
                        }
                        break;
    b3e8:	e002      	b.n	b3f0 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa8>
                    {
                        /* nothing to do(TX object) */
                        break;
                    }
                }
            }
    b3ea:	bf00      	nop
    b3ec:	e000      	b.n	b3f0 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa8>
                        break;
    b3ee:	bf00      	nop
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b3f0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b3f4:	3301      	adds	r3, #1
    b3f6:	f88d 3017 	strb.w	r3, [sp, #23]
    b3fa:	9b01      	ldr	r3, [sp, #4]
    b3fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    b400:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b404:	429a      	cmp	r2, r3
    b406:	d3c8      	bcc.n	b39a <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x52>
        }
    #endif /* CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON */
        eRetVal = ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControlerErrorInit(Can_pControllerConfig)) ? (FLEXCAN_STATUS_SUCCESS) : (FLEXCAN_STATUS_ERROR);
    b408:	9801      	ldr	r0, [sp, #4]
    b40a:	f7ff ff6f 	bl	b2ec <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>
    b40e:	4603      	mov	r3, r0
    b410:	2b00      	cmp	r3, #0
    b412:	bf14      	ite	ne
    b414:	2301      	movne	r3, #1
    b416:	2300      	moveq	r3, #0
    b418:	b2db      	uxtb	r3, r3
    b41a:	9304      	str	r3, [sp, #16]
    }
    return (Std_ReturnType)eRetVal;
    b41c:	9b04      	ldr	r3, [sp, #16]
    b41e:	b2db      	uxtb	r3, r3
}
    b420:	4618      	mov	r0, r3
    b422:	b007      	add	sp, #28
    b424:	f85d fb04 	ldr.w	pc, [sp], #4
    b428:	00018638 	.word	0x00018638

0000b42c <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>:

/**
*   @brief      Set Controller to stop participating the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStopMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b42c:	b500      	push	{lr}
    b42e:	b085      	sub	sp, #20
    b430:	9001      	str	r0, [sp, #4]
    * that are not allowed in the new state. ⌋
    * [SWS_Can_00426] ⌈ Disabling of CAN interrupts shall not be executed, when CAN
    * interrupts have been disabled by function Can_DisableControllerInterrupts.⌋
    */
    Std_ReturnType eReturnValue;
    uint8 u8HwObjRefIdx = 0U;
    b432:	2300      	movs	r3, #0
    b434:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    uint8 u8Idx = 0U;
    b438:	2300      	movs	r3, #0
    b43a:	f88d 300d 	strb.w	r3, [sp, #13]

    if (FLEXCAN_STATUS_SUCCESS == FlexCAN_Ip_EnterFreezeMode(Can_pControllerConfig->Can_u8ControllerOffset))
    b43e:	9b01      	ldr	r3, [sp, #4]
    b440:	789b      	ldrb	r3, [r3, #2]
    b442:	4618      	mov	r0, r3
    b444:	f002 f986 	bl	d754 <FlexCAN_Ip_EnterFreezeMode_Privileged>
    b448:	4603      	mov	r3, r0
    b44a:	2b00      	cmp	r3, #0
    b44c:	d160      	bne.n	b510 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xe4>
    {
    #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_ConfigPN(Can_pControllerConfig->Can_u8ControllerOffset, FALSE, NULL_PTR);
    #endif

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    b44e:	9b01      	ldr	r3, [sp, #4]
    b450:	785b      	ldrb	r3, [r3, #1]
    b452:	461a      	mov	r2, r3
    b454:	4b33      	ldr	r3, [pc, #204]	; (b524 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xf8>)
    b456:	5c9b      	ldrb	r3, [r3, r2]
    b458:	2b00      	cmp	r3, #0
    b45a:	d012      	beq.n	b482 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
    {
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b45c:	9b01      	ldr	r3, [sp, #4]
    b45e:	789b      	ldrb	r3, [r3, #2]
    b460:	4618      	mov	r0, r3
    b462:	f002 fe7d 	bl	e160 <FlexCAN_Ip_DisableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    b466:	9b01      	ldr	r3, [sp, #4]
    b468:	7a5b      	ldrb	r3, [r3, #9]
    b46a:	f083 0301 	eor.w	r3, r3, #1
    b46e:	b2db      	uxtb	r3, r3
    b470:	2b00      	cmp	r3, #0
    b472:	d006      	beq.n	b482 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    b474:	9b01      	ldr	r3, [sp, #4]
    b476:	789b      	ldrb	r3, [r3, #2]
    b478:	2200      	movs	r2, #0
    b47a:	2104      	movs	r1, #4
    b47c:	4618      	mov	r0, r3
    b47e:	f002 fe9b 	bl	e1b8 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b482:	2300      	movs	r3, #0
    b484:	f88d 300e 	strb.w	r3, [sp, #14]
    b488:	e032      	b.n	b4f0 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xc4>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    b48a:	9b01      	ldr	r3, [sp, #4]
    b48c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b48e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b492:	009b      	lsls	r3, r3, #2
    b494:	4413      	add	r3, r2
    b496:	681b      	ldr	r3, [r3, #0]
    b498:	9302      	str	r3, [sp, #8]

        if (CAN_TX_NORMAL == Can_pHwObject->Can_eReceiveType)
    b49a:	9b02      	ldr	r3, [sp, #8]
    b49c:	699b      	ldr	r3, [r3, #24]
    b49e:	2b03      	cmp	r3, #3
    b4a0:	d119      	bne.n	b4d6 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xaa>
        {
            u8Idx = 0U;
    b4a2:	2300      	movs	r3, #0
    b4a4:	f88d 300d 	strb.w	r3, [sp, #13]
            do
            {
                (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex + u8Idx);
    b4a8:	9b01      	ldr	r3, [sp, #4]
    b4aa:	7898      	ldrb	r0, [r3, #2]
    b4ac:	9b02      	ldr	r3, [sp, #8]
    b4ae:	7f1a      	ldrb	r2, [r3, #28]
    b4b0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b4b4:	4413      	add	r3, r2
    b4b6:	b2db      	uxtb	r3, r3
    b4b8:	4619      	mov	r1, r3
    b4ba:	f002 ff03 	bl	e2c4 <FlexCAN_Ip_AbortTransfer>
                u8Idx++;
    b4be:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b4c2:	3301      	adds	r3, #1
    b4c4:	f88d 300d 	strb.w	r3, [sp, #13]
            }while (u8Idx < Can_pHwObject->Can_u8ObjectCount);
    b4c8:	9b02      	ldr	r3, [sp, #8]
    b4ca:	7b9b      	ldrb	r3, [r3, #14]
    b4cc:	f89d 200d 	ldrb.w	r2, [sp, #13]
    b4d0:	429a      	cmp	r2, r3
    b4d2:	d3e9      	bcc.n	b4a8 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x7c>
    b4d4:	e007      	b.n	b4e6 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xba>
        }
        else
        {
            (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex);
    b4d6:	9b01      	ldr	r3, [sp, #4]
    b4d8:	789a      	ldrb	r2, [r3, #2]
    b4da:	9b02      	ldr	r3, [sp, #8]
    b4dc:	7f1b      	ldrb	r3, [r3, #28]
    b4de:	4619      	mov	r1, r3
    b4e0:	4610      	mov	r0, r2
    b4e2:	f002 feef 	bl	e2c4 <FlexCAN_Ip_AbortTransfer>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b4e6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b4ea:	3301      	adds	r3, #1
    b4ec:	f88d 300e 	strb.w	r3, [sp, #14]
    b4f0:	9b01      	ldr	r3, [sp, #4]
    b4f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    b4f6:	f89d 200e 	ldrb.w	r2, [sp, #14]
    b4fa:	429a      	cmp	r2, r3
    b4fc:	d3c5      	bcc.n	b48a <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x5e>
        }
    }
    eReturnValue = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    b4fe:	9b01      	ldr	r3, [sp, #4]
    b500:	789b      	ldrb	r3, [r3, #2]
    b502:	4618      	mov	r0, r3
    b504:	f002 fb7c 	bl	dc00 <FlexCAN_Ip_SetStopMode_Privileged>
    b508:	4603      	mov	r3, r0
    b50a:	f88d 300f 	strb.w	r3, [sp, #15]
    b50e:	e002      	b.n	b516 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xea>
    }
    else
    {
        eReturnValue = E_NOT_OK;
    b510:	2301      	movs	r3, #1
    b512:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return eReturnValue;
    b516:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    b51a:	4618      	mov	r0, r3
    b51c:	b005      	add	sp, #20
    b51e:	f85d fb04 	ldr.w	pc, [sp], #4
    b522:	bf00      	nop
    b524:	1fff9358 	.word	0x1fff9358

0000b528 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>:
/**
*   @brief      Disable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b528:	b500      	push	{lr}
    b52a:	b083      	sub	sp, #12
    b52c:	9001      	str	r0, [sp, #4]
    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    b52e:	9b01      	ldr	r3, [sp, #4]
    b530:	785b      	ldrb	r3, [r3, #1]
    b532:	461a      	mov	r2, r3
    b534:	4b10      	ldr	r3, [pc, #64]	; (b578 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    b536:	5c9b      	ldrb	r3, [r3, r2]
    b538:	2b00      	cmp	r3, #0
    b53a:	d018      	beq.n	b56e <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b53c:	9b01      	ldr	r3, [sp, #4]
    b53e:	789b      	ldrb	r3, [r3, #2]
    b540:	4618      	mov	r0, r3
    b542:	f002 fe0d 	bl	e160 <FlexCAN_Ip_DisableInterrupts_Privileged>
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = FALSE;
    b546:	9b01      	ldr	r3, [sp, #4]
    b548:	785b      	ldrb	r3, [r3, #1]
    b54a:	461a      	mov	r2, r3
    b54c:	4b0a      	ldr	r3, [pc, #40]	; (b578 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    b54e:	2100      	movs	r1, #0
    b550:	5499      	strb	r1, [r3, r2]
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    b552:	9b01      	ldr	r3, [sp, #4]
    b554:	7a5b      	ldrb	r3, [r3, #9]
    b556:	f083 0301 	eor.w	r3, r3, #1
    b55a:	b2db      	uxtb	r3, r3
    b55c:	2b00      	cmp	r3, #0
    b55e:	d006      	beq.n	b56e <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    b560:	9b01      	ldr	r3, [sp, #4]
    b562:	789b      	ldrb	r3, [r3, #2]
    b564:	2200      	movs	r2, #0
    b566:	2104      	movs	r1, #4
    b568:	4618      	mov	r0, r3
    b56a:	f002 fe25 	bl	e1b8 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
}
    b56e:	bf00      	nop
    b570:	b003      	add	sp, #12
    b572:	f85d fb04 	ldr.w	pc, [sp], #4
    b576:	bf00      	nop
    b578:	1fff9358 	.word	0x1fff9358

0000b57c <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>:

/**
*   @brief      Enable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b57c:	b500      	push	{lr}
    b57e:	b083      	sub	sp, #12
    b580:	9001      	str	r0, [sp, #4]
    /*
    * [SWS_Can_00208] ⌈ The function Can_EnableControllerInterrupts shall perform no
    * action when Can_DisableControllerInterrupts has not been called before.⌋
    */
    if (FALSE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    b582:	9b01      	ldr	r3, [sp, #4]
    b584:	785b      	ldrb	r3, [r3, #1]
    b586:	461a      	mov	r2, r3
    b588:	4b11      	ldr	r3, [pc, #68]	; (b5d0 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    b58a:	5c9b      	ldrb	r3, [r3, r2]
    b58c:	f083 0301 	eor.w	r3, r3, #1
    b590:	b2db      	uxtb	r3, r3
    b592:	2b00      	cmp	r3, #0
    b594:	d018      	beq.n	b5c8 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x4c>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b596:	9b01      	ldr	r3, [sp, #4]
    b598:	789b      	ldrb	r3, [r3, #2]
    b59a:	4618      	mov	r0, r3
    b59c:	f002 fdb2 	bl	e104 <FlexCAN_Ip_EnableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    b5a0:	9b01      	ldr	r3, [sp, #4]
    b5a2:	7a5b      	ldrb	r3, [r3, #9]
    b5a4:	f083 0301 	eor.w	r3, r3, #1
    b5a8:	b2db      	uxtb	r3, r3
    b5aa:	2b00      	cmp	r3, #0
    b5ac:	d006      	beq.n	b5bc <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x40>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    b5ae:	9b01      	ldr	r3, [sp, #4]
    b5b0:	789b      	ldrb	r3, [r3, #2]
    b5b2:	2201      	movs	r2, #1
    b5b4:	2104      	movs	r1, #4
    b5b6:	4618      	mov	r0, r3
    b5b8:	f002 fdfe 	bl	e1b8 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        /* update status */
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    b5bc:	9b01      	ldr	r3, [sp, #4]
    b5be:	785b      	ldrb	r3, [r3, #1]
    b5c0:	461a      	mov	r2, r3
    b5c2:	4b03      	ldr	r3, [pc, #12]	; (b5d0 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    b5c4:	2101      	movs	r1, #1
    b5c6:	5499      	strb	r1, [r3, r2]
    }
}
    b5c8:	bf00      	nop
    b5ca:	b003      	add	sp, #12
    b5cc:	f85d fb04 	ldr.w	pc, [sp], #4
    b5d0:	1fff9358 	.word	0x1fff9358

0000b5d4 <Can_43_FLEXCAN_Ipw_GetControllerErrorState>:

/**
*   @brief      Get Controller Error State
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerErrorState(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    b5d4:	b500      	push	{lr}
    b5d6:	b085      	sub	sp, #20
    b5d8:	9001      	str	r0, [sp, #4]
    b5da:	9100      	str	r1, [sp, #0]
    uint32 Error = 0U;
    b5dc:	2300      	movs	r3, #0
    b5de:	9303      	str	r3, [sp, #12]

    Error = FlexCAN_Ip_GetErrorStatus(Can_pControllerConfig->Can_u8ControllerOffset);
    b5e0:	9b01      	ldr	r3, [sp, #4]
    b5e2:	789b      	ldrb	r3, [r3, #2]
    b5e4:	4618      	mov	r0, r3
    b5e6:	f001 fe81 	bl	d2ec <FlexCAN_Ip_GetErrorStatus>
    b5ea:	9003      	str	r0, [sp, #12]

    *pValue = (uint8)((Error & FLEXCAN_ESR1_FLTCONF_MASK)>>FLEXCAN_ESR1_FLTCONF_SHIFT);
    b5ec:	9b03      	ldr	r3, [sp, #12]
    b5ee:	091b      	lsrs	r3, r3, #4
    b5f0:	b2db      	uxtb	r3, r3
    b5f2:	f003 0303 	and.w	r3, r3, #3
    b5f6:	b2da      	uxtb	r2, r3
    b5f8:	9b00      	ldr	r3, [sp, #0]
    b5fa:	701a      	strb	r2, [r3, #0]
    return E_OK;
    b5fc:	2300      	movs	r3, #0
}
    b5fe:	4618      	mov	r0, r3
    b600:	b005      	add	sp, #20
    b602:	f85d fb04 	ldr.w	pc, [sp], #4

0000b606 <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>:

/**
*   @brief      Get Controller Tx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    b606:	b500      	push	{lr}
    b608:	b083      	sub	sp, #12
    b60a:	9001      	str	r0, [sp, #4]
    b60c:	9100      	str	r1, [sp, #0]
     *pValue = FlexCAN_Ip_GetControllerTxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    b60e:	9b01      	ldr	r3, [sp, #4]
    b610:	789b      	ldrb	r3, [r3, #2]
    b612:	4618      	mov	r0, r3
    b614:	f001 fe7c 	bl	d310 <FlexCAN_Ip_GetControllerTxErrorCounter>
    b618:	4603      	mov	r3, r0
    b61a:	461a      	mov	r2, r3
    b61c:	9b00      	ldr	r3, [sp, #0]
    b61e:	701a      	strb	r2, [r3, #0]
     return E_OK;
    b620:	2300      	movs	r3, #0
}
    b622:	4618      	mov	r0, r3
    b624:	b003      	add	sp, #12
    b626:	f85d fb04 	ldr.w	pc, [sp], #4

0000b62a <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>:

/**
*   @brief      Get Controller Rx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    b62a:	b500      	push	{lr}
    b62c:	b083      	sub	sp, #12
    b62e:	9001      	str	r0, [sp, #4]
    b630:	9100      	str	r1, [sp, #0]

    *pValue = FlexCAN_Ip_GetControllerRxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    b632:	9b01      	ldr	r3, [sp, #4]
    b634:	789b      	ldrb	r3, [r3, #2]
    b636:	4618      	mov	r0, r3
    b638:	f001 fe7c 	bl	d334 <FlexCAN_Ip_GetControllerRxErrorCounter>
    b63c:	4603      	mov	r3, r0
    b63e:	461a      	mov	r2, r3
    b640:	9b00      	ldr	r3, [sp, #0]
    b642:	701a      	strb	r2, [r3, #0]
    return E_OK;
    b644:	2300      	movs	r3, #0
}
    b646:	4618      	mov	r0, r3
    b648:	b003      	add	sp, #12
    b64a:	f85d fb04 	ldr.w	pc, [sp], #4

0000b64e <Can_43_FLEXCAN_Ipw_Write>:
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
    const Can_PduType * PduInfo
)
{
    b64e:	b510      	push	{r4, lr}
    b650:	b08c      	sub	sp, #48	; 0x30
    b652:	9005      	str	r0, [sp, #20]
    b654:	9104      	str	r1, [sp, #16]
    b656:	9203      	str	r2, [sp, #12]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    b658:	2301      	movs	r3, #1
    b65a:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_DataInfoType DataInfo;
    uint8 u8ObjIdx = 0U;
    b65c:	2300      	movs	r3, #0
    b65e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
#if (CAN_43_FLEXCAN_TRIGGER_TRANSMIT_USED == STD_ON)
    PduInfoType CanIf_PduInfo;
    uint8 Data[64U];
#endif

    DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    b662:	2300      	movs	r3, #0
    b664:	9306      	str	r3, [sp, #24]
    DataInfo.data_length = 0U;
    b666:	2300      	movs	r3, #0
    b668:	9307      	str	r3, [sp, #28]
    DataInfo.fd_padding = 0U;
    b66a:	2300      	movs	r3, #0
    b66c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    DataInfo.fd_enable = FALSE;
    b670:	2300      	movs	r3, #0
    b672:	f88d 3020 	strb.w	r3, [sp, #32]
    DataInfo.enable_brs = FALSE;
    b676:	2300      	movs	r3, #0
    b678:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    DataInfo.is_remote = FALSE;
    b67c:	2300      	movs	r3, #0
    b67e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    DataInfo.is_polling = FALSE;
    b682:	2300      	movs	r3, #0
    b684:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if (CAN_TX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    b688:	9b04      	ldr	r3, [sp, #16]
    b68a:	699b      	ldr	r3, [r3, #24]
    b68c:	2b03      	cmp	r3, #3
    b68e:	d173      	bne.n	b778 <Can_43_FLEXCAN_Ipw_Write+0x12a>
    {
        DataInfo.msg_id_type = ((PduInfo->id & CAN_43_FLEXCAN_EXTENDED_ID_U32) != 0U) ? FLEXCAN_MSG_ID_EXT : FLEXCAN_MSG_ID_STD;
    b690:	9b03      	ldr	r3, [sp, #12]
    b692:	681b      	ldr	r3, [r3, #0]
    b694:	0fdb      	lsrs	r3, r3, #31
    b696:	9306      	str	r3, [sp, #24]
        if (Can_pHwObjectConfig->Can_u8PayloadLength <=  PduInfo->length)
    b698:	9b04      	ldr	r3, [sp, #16]
    b69a:	7c1a      	ldrb	r2, [r3, #16]
    b69c:	9b03      	ldr	r3, [sp, #12]
    b69e:	799b      	ldrb	r3, [r3, #6]
    b6a0:	429a      	cmp	r2, r3
    b6a2:	d803      	bhi.n	b6ac <Can_43_FLEXCAN_Ipw_Write+0x5e>
        {
            DataInfo.data_length = Can_pHwObjectConfig->Can_u8PayloadLength;
    b6a4:	9b04      	ldr	r3, [sp, #16]
    b6a6:	7c1b      	ldrb	r3, [r3, #16]
    b6a8:	9307      	str	r3, [sp, #28]
    b6aa:	e002      	b.n	b6b2 <Can_43_FLEXCAN_Ipw_Write+0x64>
        }
        else
        {
            DataInfo.data_length = PduInfo->length;
    b6ac:	9b03      	ldr	r3, [sp, #12]
    b6ae:	799b      	ldrb	r3, [r3, #6]
    b6b0:	9307      	str	r3, [sp, #28]
        }
#if (CAN_43_FLEXCAN_FEATURE_HAS_FD == STD_ON)
        DataInfo.fd_padding = Can_pHwObjectConfig->Can_u8PaddingValue;
    b6b2:	9b04      	ldr	r3, [sp, #16]
    b6b4:	7c5b      	ldrb	r3, [r3, #17]
    b6b6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        DataInfo.fd_enable = ((PduInfo->id & CAN_43_FLEXCAN_FD_FRAME_U32) != 0U) ? TRUE : FALSE;
    b6ba:	9b03      	ldr	r3, [sp, #12]
    b6bc:	681b      	ldr	r3, [r3, #0]
    b6be:	0f9b      	lsrs	r3, r3, #30
    b6c0:	f003 0301 	and.w	r3, r3, #1
    b6c4:	2b00      	cmp	r3, #0
    b6c6:	bf14      	ite	ne
    b6c8:	2301      	movne	r3, #1
    b6ca:	2300      	moveq	r3, #0
    b6cc:	b2db      	uxtb	r3, r3
    b6ce:	f88d 3020 	strb.w	r3, [sp, #32]
    #if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
            DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID]].Can_bBitRateSwitch;
    #else
        DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bBitRateSwitch;
    b6d2:	9b05      	ldr	r3, [sp, #20]
    b6d4:	6a1a      	ldr	r2, [r3, #32]
    b6d6:	9b05      	ldr	r3, [sp, #20]
    b6d8:	8b9b      	ldrh	r3, [r3, #28]
    b6da:	4619      	mov	r1, r3
    b6dc:	2316      	movs	r3, #22
    b6de:	fb01 f303 	mul.w	r3, r1, r3
    b6e2:	4413      	add	r3, r2
    b6e4:	781b      	ldrb	r3, [r3, #0]
    b6e6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    #endif
#endif
        DataInfo.is_remote = FALSE;
    b6ea:	2300      	movs	r3, #0
    b6ec:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
        DataInfo.is_polling = Can_pHwObjectConfig->Can_bHwObjectUsesPolling;
    b6f0:	9b04      	ldr	r3, [sp, #16]
    b6f2:	7b1b      	ldrb	r3, [r3, #12]
    b6f4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        do
        {
            eRetVal = FlexCAN_Ip_GetTransferStatus(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx);
    b6f8:	9b05      	ldr	r3, [sp, #20]
    b6fa:	7898      	ldrb	r0, [r3, #2]
    b6fc:	9b04      	ldr	r3, [sp, #16]
    b6fe:	7f1a      	ldrb	r2, [r3, #28]
    b700:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    b704:	4413      	add	r3, r2
    b706:	b2db      	uxtb	r3, r3
    b708:	4619      	mov	r1, r3
    b70a:	f001 fcdd 	bl	d0c8 <FlexCAN_Ip_GetTransferStatus>
    b70e:	900b      	str	r0, [sp, #44]	; 0x2c
            if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    b710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b712:	2b00      	cmp	r3, #0
    b714:	d122      	bne.n	b75c <Can_43_FLEXCAN_Ipw_Write+0x10e>
            {
                #if ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))
                Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = PduInfo->swPduHandle;
    b716:	9b05      	ldr	r3, [sp, #20]
    b718:	785b      	ldrb	r3, [r3, #1]
    b71a:	461c      	mov	r4, r3
    b71c:	9b04      	ldr	r3, [sp, #16]
    b71e:	7f1b      	ldrb	r3, [r3, #28]
    b720:	461a      	mov	r2, r3
    b722:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    b726:	4413      	add	r3, r2
    b728:	9a03      	ldr	r2, [sp, #12]
    b72a:	8890      	ldrh	r0, [r2, #4]
    b72c:	491b      	ldr	r1, [pc, #108]	; (b79c <Can_43_FLEXCAN_Ipw_Write+0x14e>)
    b72e:	0162      	lsls	r2, r4, #5
    b730:	4413      	add	r3, r2
    b732:	4602      	mov	r2, r0
    b734:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                    }
                }
                else
                {
            #endif
                    eRetVal = FlexCAN_Ip_Send(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx, &DataInfo, PduInfo->id, PduInfo->sdu);
    b738:	9b05      	ldr	r3, [sp, #20]
    b73a:	7898      	ldrb	r0, [r3, #2]
    b73c:	9b04      	ldr	r3, [sp, #16]
    b73e:	7f1a      	ldrb	r2, [r3, #28]
    b740:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    b744:	4413      	add	r3, r2
    b746:	b2d9      	uxtb	r1, r3
    b748:	9b03      	ldr	r3, [sp, #12]
    b74a:	681c      	ldr	r4, [r3, #0]
    b74c:	9b03      	ldr	r3, [sp, #12]
    b74e:	689b      	ldr	r3, [r3, #8]
    b750:	aa06      	add	r2, sp, #24
    b752:	9300      	str	r3, [sp, #0]
    b754:	4623      	mov	r3, r4
    b756:	f001 fa4b 	bl	cbf0 <FlexCAN_Ip_Send>
    b75a:	900b      	str	r0, [sp, #44]	; 0x2c
                /* Revert to FALSE due to the MB was not transmitted successfully */
                Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = FALSE;
            }
            #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */
            }
            u8ObjIdx++;
    b75c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    b760:	3301      	adds	r3, #1
    b762:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        } while ((u8ObjIdx < Can_pHwObjectConfig->Can_u8ObjectCount) && (FLEXCAN_STATUS_BUSY == eRetVal));
    b766:	9b04      	ldr	r3, [sp, #16]
    b768:	7b9b      	ldrb	r3, [r3, #14]
    b76a:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    b76e:	429a      	cmp	r2, r3
    b770:	d202      	bcs.n	b778 <Can_43_FLEXCAN_Ipw_Write+0x12a>
    b772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b774:	2b02      	cmp	r3, #2
    b776:	d0bf      	beq.n	b6f8 <Can_43_FLEXCAN_Ipw_Write+0xaa>
    }

    if ((FLEXCAN_STATUS_SUCCESS != eRetVal) && (FLEXCAN_STATUS_BUSY != eRetVal))
    b778:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b77a:	2b00      	cmp	r3, #0
    b77c:	d004      	beq.n	b788 <Can_43_FLEXCAN_Ipw_Write+0x13a>
    b77e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b780:	2b02      	cmp	r3, #2
    b782:	d001      	beq.n	b788 <Can_43_FLEXCAN_Ipw_Write+0x13a>
    {
        eRetVal = FLEXCAN_STATUS_ERROR;
    b784:	2301      	movs	r3, #1
    b786:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    return ((FLEXCAN_STATUS_BUSY == eRetVal) ? ((Std_ReturnType)CAN_BUSY) : ((Std_ReturnType)eRetVal));
    b788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b78a:	2b02      	cmp	r3, #2
    b78c:	d002      	beq.n	b794 <Can_43_FLEXCAN_Ipw_Write+0x146>
    b78e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b790:	b2db      	uxtb	r3, r3
    b792:	e000      	b.n	b796 <Can_43_FLEXCAN_Ipw_Write+0x148>
    b794:	2302      	movs	r3, #2
}
    b796:	4618      	mov	r0, r3
    b798:	b00c      	add	sp, #48	; 0x30
    b79a:	bd10      	pop	{r4, pc}
    b79c:	1fff9258 	.word	0x1fff9258

0000b7a0 <Can_Ipw_InitRx>:

static void Can_Ipw_InitRx(const Can_43_FLEXCAN_ControllerConfigType * Can_pController)
{
    b7a0:	b500      	push	{lr}
    b7a2:	b089      	sub	sp, #36	; 0x24
    b7a4:	9001      	str	r0, [sp, #4]
    uint8 u8HwObjRefIdx = 0U;
    b7a6:	2300      	movs	r3, #0
    b7a8:	f88d 301f 	strb.w	r3, [sp, #31]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    Flexcan_Ip_DataInfoType DataInfo;

    /* This function just is called only if controller is in freeze mode */
    /* Always enable individual mask , Already in freeze mode */
    (void)FlexCAN_Ip_SetRxMaskType(Can_pController->Can_u8ControllerOffset, FLEXCAN_RX_MASK_INDIVIDUAL);
    b7ac:	9b01      	ldr	r3, [sp, #4]
    b7ae:	789b      	ldrb	r3, [r3, #2]
    b7b0:	2101      	movs	r1, #1
    b7b2:	4618      	mov	r0, r3
    b7b4:	f002 fa42 	bl	dc3c <FlexCAN_Ip_SetRxMaskType_Privileged>

    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b7b8:	2300      	movs	r3, #0
    b7ba:	f88d 301f 	strb.w	r3, [sp, #31]
    b7be:	e03a      	b.n	b836 <Can_Ipw_InitRx+0x96>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pController->Can_ppHwObject[u8HwObjRefIdx];
    b7c0:	9b01      	ldr	r3, [sp, #4]
    b7c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b7c4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b7c8:	009b      	lsls	r3, r3, #2
    b7ca:	4413      	add	r3, r2
    b7cc:	681b      	ldr	r3, [r3, #0]
    b7ce:	9306      	str	r3, [sp, #24]

        if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    b7d0:	9b06      	ldr	r3, [sp, #24]
    b7d2:	699b      	ldr	r3, [r3, #24]
    b7d4:	2b00      	cmp	r3, #0
    b7d6:	d121      	bne.n	b81c <Can_Ipw_InitRx+0x7c>
        {
            DataInfo.fd_enable = FALSE;
    b7d8:	2300      	movs	r3, #0
    b7da:	f88d 3010 	strb.w	r3, [sp, #16]
            DataInfo.data_length = 0U;
    b7de:	2300      	movs	r3, #0
    b7e0:	9303      	str	r3, [sp, #12]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    b7e2:	9b06      	ldr	r3, [sp, #24]
    b7e4:	689b      	ldr	r3, [r3, #8]
    b7e6:	2b00      	cmp	r3, #0
    b7e8:	d002      	beq.n	b7f0 <Can_Ipw_InitRx+0x50>
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_EXT;
    b7ea:	2301      	movs	r3, #1
    b7ec:	9302      	str	r3, [sp, #8]
    b7ee:	e001      	b.n	b7f4 <Can_Ipw_InitRx+0x54>
            }
            else
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    b7f0:	2300      	movs	r3, #0
    b7f2:	9302      	str	r3, [sp, #8]
            }
            (void)FlexCAN_Ip_ConfigRxMb(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, &DataInfo, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterCode);
    b7f4:	9b01      	ldr	r3, [sp, #4]
    b7f6:	7898      	ldrb	r0, [r3, #2]
    b7f8:	9b06      	ldr	r3, [sp, #24]
    b7fa:	7f19      	ldrb	r1, [r3, #28]
    b7fc:	9b06      	ldr	r3, [sp, #24]
    b7fe:	695b      	ldr	r3, [r3, #20]
    b800:	681b      	ldr	r3, [r3, #0]
    b802:	aa02      	add	r2, sp, #8
    b804:	f001 fa40 	bl	cc88 <FlexCAN_Ip_ConfigRxMb>
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterMask);
    b808:	9b01      	ldr	r3, [sp, #4]
    b80a:	7898      	ldrb	r0, [r3, #2]
    b80c:	9b06      	ldr	r3, [sp, #24]
    b80e:	7f19      	ldrb	r1, [r3, #28]
    b810:	9b06      	ldr	r3, [sp, #24]
    b812:	695b      	ldr	r3, [r3, #20]
    b814:	685b      	ldr	r3, [r3, #4]
    b816:	461a      	mov	r2, r3
    b818:	f001 ffc8 	bl	d7ac <FlexCAN_Ip_SetRxIndividualMask_Privileged>
        }

        if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    b81c:	9b06      	ldr	r3, [sp, #24]
    b81e:	699b      	ldr	r3, [r3, #24]
    b820:	2b01      	cmp	r3, #1
    b822:	d103      	bne.n	b82c <Can_Ipw_InitRx+0x8c>
        {
            Can_Ipw_InitLegacyFifoFilter(Can_pController, Can_pHwObject);
    b824:	9906      	ldr	r1, [sp, #24]
    b826:	9801      	ldr	r0, [sp, #4]
    b828:	f7ff f8ff 	bl	aa2a <Can_Ipw_InitLegacyFifoFilter>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b82c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b830:	3301      	adds	r3, #1
    b832:	f88d 301f 	strb.w	r3, [sp, #31]
    b836:	9b01      	ldr	r3, [sp, #4]
    b838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    b83c:	f89d 201f 	ldrb.w	r2, [sp, #31]
    b840:	429a      	cmp	r2, r3
    b842:	d3bd      	bcc.n	b7c0 <Can_Ipw_InitRx+0x20>
        }
    }
}
    b844:	bf00      	nop
    b846:	bf00      	nop
    b848:	b009      	add	sp, #36	; 0x24
    b84a:	f85d fb04 	ldr.w	pc, [sp], #4

0000b84e <Can_43_FLEXCAN_Ipw_MainFunction_Mode>:
void Can_43_FLEXCAN_Ipw_MainFunction_Mode
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    Can_ControllerStateType * Can_pControllerState
)
{
    b84e:	b500      	push	{lr}
    b850:	b083      	sub	sp, #12
    b852:	9001      	str	r0, [sp, #4]
    b854:	9100      	str	r1, [sp, #0]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    if (CAN_CS_STARTED == *Can_pControllerState)
    b856:	9b00      	ldr	r3, [sp, #0]
    b858:	681b      	ldr	r3, [r3, #0]
    b85a:	2b01      	cmp	r3, #1
    b85c:	d114      	bne.n	b888 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x3a>
    {
        if (FALSE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    b85e:	9b01      	ldr	r3, [sp, #4]
    b860:	789b      	ldrb	r3, [r3, #2]
    b862:	4618      	mov	r0, r3
    b864:	f002 f994 	bl	db90 <FlexCAN_Ip_GetStartMode_Privileged>
    b868:	4603      	mov	r3, r0
    b86a:	f083 0301 	eor.w	r3, r3, #1
    b86e:	b2db      	uxtb	r3, r3
    b870:	2b00      	cmp	r3, #0
    b872:	d01e      	beq.n	b8b2 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        {
            *Can_pControllerState = CAN_CS_STOPPED;
    b874:	9b00      	ldr	r3, [sp, #0]
    b876:	2202      	movs	r2, #2
    b878:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STOPPED);
    b87a:	9b01      	ldr	r3, [sp, #4]
    b87c:	781b      	ldrb	r3, [r3, #0]
    b87e:	2102      	movs	r1, #2
    b880:	4618      	mov	r0, r3
    b882:	f00b fc61 	bl	17148 <CanIf_ControllerModeIndication>
    }
    else
    {
        /* nothing to do */
    }
}
    b886:	e014      	b.n	b8b2 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
    else if (CAN_CS_STOPPED == *Can_pControllerState)
    b888:	9b00      	ldr	r3, [sp, #0]
    b88a:	681b      	ldr	r3, [r3, #0]
    b88c:	2b02      	cmp	r3, #2
    b88e:	d110      	bne.n	b8b2 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        if (TRUE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    b890:	9b01      	ldr	r3, [sp, #4]
    b892:	789b      	ldrb	r3, [r3, #2]
    b894:	4618      	mov	r0, r3
    b896:	f002 f97b 	bl	db90 <FlexCAN_Ip_GetStartMode_Privileged>
    b89a:	4603      	mov	r3, r0
    b89c:	2b00      	cmp	r3, #0
    b89e:	d008      	beq.n	b8b2 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
            *Can_pControllerState = CAN_CS_STARTED;
    b8a0:	9b00      	ldr	r3, [sp, #0]
    b8a2:	2201      	movs	r2, #1
    b8a4:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STARTED);
    b8a6:	9b01      	ldr	r3, [sp, #4]
    b8a8:	781b      	ldrb	r3, [r3, #0]
    b8aa:	2101      	movs	r1, #1
    b8ac:	4618      	mov	r0, r3
    b8ae:	f00b fc4b 	bl	17148 <CanIf_ControllerModeIndication>
}
    b8b2:	bf00      	nop
    b8b4:	b003      	add	sp, #12
    b8b6:	f85d fb04 	ldr.w	pc, [sp], #4

0000b8ba <Can_43_FLEXCAN_Ipw_ProcessHwObject>:
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_ConfigType * Can_pConfig,
        uint8 u8MbIdx,
        Can_43_FLEXCAN_MbType mbType
    )
    {
    b8ba:	b500      	push	{lr}
    b8bc:	b085      	sub	sp, #20
    b8be:	9003      	str	r0, [sp, #12]
    b8c0:	9102      	str	r1, [sp, #8]
    b8c2:	9300      	str	r3, [sp, #0]
    b8c4:	4613      	mov	r3, r2
    b8c6:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (mbType)
    b8ca:	9b00      	ldr	r3, [sp, #0]
    b8cc:	2b03      	cmp	r3, #3
    b8ce:	d009      	beq.n	b8e4 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x2a>
    b8d0:	9b00      	ldr	r3, [sp, #0]
    b8d2:	2b03      	cmp	r3, #3
    b8d4:	d821      	bhi.n	b91a <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
    b8d6:	9b00      	ldr	r3, [sp, #0]
    b8d8:	2b00      	cmp	r3, #0
    b8da:	d00c      	beq.n	b8f6 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x3c>
    b8dc:	9b00      	ldr	r3, [sp, #0]
    b8de:	2b01      	cmp	r3, #1
    b8e0:	d012      	beq.n	b908 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x4e>
                break;
            }
            default:
            {
                /* prevent misra */
                break;
    b8e2:	e01a      	b.n	b91a <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
                Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    b8e4:	9b02      	ldr	r3, [sp, #8]
    b8e6:	691b      	ldr	r3, [r3, #16]
    b8e8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    b8ec:	4619      	mov	r1, r3
    b8ee:	9803      	ldr	r0, [sp, #12]
    b8f0:	f7ff faf8 	bl	aee4 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>
                break;
    b8f4:	e012      	b.n	b91c <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    b8f6:	9b02      	ldr	r3, [sp, #8]
    b8f8:	691b      	ldr	r3, [r3, #16]
    b8fa:	f89d 2007 	ldrb.w	r2, [sp, #7]
    b8fe:	4619      	mov	r1, r3
    b900:	9803      	ldr	r0, [sp, #12]
    b902:	f7ff fb3b 	bl	af7c <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    b906:	e009      	b.n	b91c <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                    Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    b908:	9b02      	ldr	r3, [sp, #8]
    b90a:	691b      	ldr	r3, [r3, #16]
    b90c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    b910:	4619      	mov	r1, r3
    b912:	9803      	ldr	r0, [sp, #12]
    b914:	f7ff fb32 	bl	af7c <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    b918:	e000      	b.n	b91c <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                break;
    b91a:	bf00      	nop
            }
        }
    }
    b91c:	bf00      	nop
    b91e:	b005      	add	sp, #20
    b920:	f85d fb04 	ldr.w	pc, [sp], #4

0000b924 <Can_43_FLEXCAN_CommonIrqCallback>:
void Can_43_FLEXCAN_CommonIrqCallback(uint8 u8Instance,
                           Flexcan_Ip_EventType event,
                           uint32 u32buffIdx,
                           const Flexcan_Ip_StateType *driverState
                          )
{
    b924:	b500      	push	{lr}
    b926:	b085      	sub	sp, #20
    b928:	9102      	str	r1, [sp, #8]
    b92a:	9201      	str	r2, [sp, #4]
    b92c:	9300      	str	r3, [sp, #0]
    b92e:	4603      	mov	r3, r0
    b930:	f88d 300f 	strb.w	r3, [sp, #15]
    else
    {
#endif /* CAN_43_FLEXCAN_FEATURE_HAS_ENHANCED_RX_FIFO */
    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        /* This callback is just used for interrupt buffter */
        if (FALSE == (driverState->mbs[u32buffIdx].isPolling))
    b934:	9a00      	ldr	r2, [sp, #0]
    b936:	9b01      	ldr	r3, [sp, #4]
    b938:	011b      	lsls	r3, r3, #4
    b93a:	4413      	add	r3, r2
    b93c:	3308      	adds	r3, #8
    b93e:	781b      	ldrb	r3, [r3, #0]
    b940:	f083 0301 	eor.w	r3, r3, #1
    b944:	b2db      	uxtb	r3, r3
    b946:	2b00      	cmp	r3, #0
    b948:	d03b      	beq.n	b9c2 <Can_43_FLEXCAN_CommonIrqCallback+0x9e>
    b94a:	9b02      	ldr	r3, [sp, #8]
    b94c:	2b04      	cmp	r3, #4
    b94e:	d83a      	bhi.n	b9c6 <Can_43_FLEXCAN_CommonIrqCallback+0xa2>
    b950:	a201      	add	r2, pc, #4	; (adr r2, b958 <Can_43_FLEXCAN_CommonIrqCallback+0x34>)
    b952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b956:	bf00      	nop
    b958:	0000b97f 	.word	0x0000b97f
    b95c:	0000b991 	.word	0x0000b991
    b960:	0000b9a3 	.word	0x0000b9a3
    b964:	0000b9b3 	.word	0x0000b9b3
    b968:	0000b96d 	.word	0x0000b96d
        {
            switch (event)
            {
                case FLEXCAN_EVENT_TX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_TX_NORMAL);
    b96c:	9b01      	ldr	r3, [sp, #4]
    b96e:	b2d9      	uxtb	r1, r3
    b970:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b974:	2203      	movs	r2, #3
    b976:	4618      	mov	r0, r3
    b978:	f7fe ff72 	bl	a860 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b97c:	e024      	b.n	b9c8 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_NORMAL);
    b97e:	9b01      	ldr	r3, [sp, #4]
    b980:	b2d9      	uxtb	r1, r3
    b982:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b986:	2200      	movs	r2, #0
    b988:	4618      	mov	r0, r3
    b98a:	f7fe ff69 	bl	a860 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b98e:	e01b      	b.n	b9c8 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_LEGACY_FIFO);
    b990:	9b01      	ldr	r3, [sp, #4]
    b992:	b2d9      	uxtb	r1, r3
    b994:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b998:	2201      	movs	r2, #1
    b99a:	4618      	mov	r0, r3
    b99c:	f7fe ff60 	bl	a860 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b9a0:	e012      	b.n	b9c8 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_WARNING:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 6U, CAN_RX_LEGACY_FIFO);
    b9a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b9a6:	2201      	movs	r2, #1
    b9a8:	2106      	movs	r1, #6
    b9aa:	4618      	mov	r0, r3
    b9ac:	f7fe ff58 	bl	a860 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b9b0:	e00a      	b.n	b9c8 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_OVERFLOW:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 7U, CAN_RX_LEGACY_FIFO);
    b9b2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b9b6:	2201      	movs	r2, #1
    b9b8:	2107      	movs	r1, #7
    b9ba:	4618      	mov	r0, r3
    b9bc:	f7fe ff50 	bl	a860 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b9c0:	e002      	b.n	b9c8 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                {
                    /* nothing to do */
                    break;
                }
            }
        }
    b9c2:	bf00      	nop
    b9c4:	e000      	b.n	b9c8 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                    break;
    b9c6:	bf00      	nop
        Can_43_FLEXCAN_ProcessPNInterrupt(u8Instance);
    }
#endif /* (CAN_43_FLEXCAN_FEATURE_HAS_PRETENDED_NETWORKING == STD_ON) */
    (void)u32buffIdx;
    (void)driverState;
}
    b9c8:	bf00      	nop
    b9ca:	b005      	add	sp, #20
    b9cc:	f85d fb04 	ldr.w	pc, [sp], #4

0000b9d0 <Can_43_FLEXCAN_ErrorIrqCallback>:
void Can_43_FLEXCAN_ErrorIrqCallback(uint8 u8Instance,
                          Flexcan_Ip_EventType event,
                          uint32 u32ErrStatus,
                          const Flexcan_Ip_StateType *driverState
                         )
{
    b9d0:	b500      	push	{lr}
    b9d2:	b085      	sub	sp, #20
    b9d4:	9102      	str	r1, [sp, #8]
    b9d6:	9201      	str	r2, [sp, #4]
    b9d8:	9300      	str	r3, [sp, #0]
    b9da:	4603      	mov	r3, r0
    b9dc:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) driverState; /* not used yet */
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON)
    (void) u32ErrStatus; /* prevent compiler warning */
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON) */

    switch (event)
    b9e0:	9b02      	ldr	r3, [sp, #8]
    b9e2:	2b07      	cmp	r3, #7
    b9e4:	d105      	bne.n	b9f2 <Can_43_FLEXCAN_ErrorIrqCallback+0x22>
        }
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON) */
        /* this function is called for both interrupt & polling */
        case FLEXCAN_EVENT_BUSOFF:
        {
            Can_43_FLEXCAN_ProcessBusOffInterrupt(u8Instance);
    b9e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b9ea:	4618      	mov	r0, r3
    b9ec:	f7fe ff7a 	bl	a8e4 <Can_43_FLEXCAN_ProcessBusOffInterrupt>
            break;
    b9f0:	e000      	b.n	b9f4 <Can_43_FLEXCAN_ErrorIrqCallback+0x24>
        }
        default:
        {
            /* nothing to do */
            break;
    b9f2:	bf00      	nop
        }
    }
}
    b9f4:	bf00      	nop
    b9f6:	b005      	add	sp, #20
    b9f8:	f85d fb04 	ldr.w	pc, [sp], #4

0000b9fc <FlexCAN_SetRxFifoGlobalMask>:
 *
 * @param[in]   base  The FlexCAN base address
 * @param[in]   Mask     Sets mask
 */
static inline void FlexCAN_SetRxFifoGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    b9fc:	b082      	sub	sp, #8
    b9fe:	9001      	str	r0, [sp, #4]
    ba00:	9100      	str	r1, [sp, #0]
    (base->RXFGMASK) = Mask;
    ba02:	9b01      	ldr	r3, [sp, #4]
    ba04:	9a00      	ldr	r2, [sp, #0]
    ba06:	649a      	str	r2, [r3, #72]	; 0x48
}
    ba08:	bf00      	nop
    ba0a:	b002      	add	sp, #8
    ba0c:	4770      	bx	lr

0000ba0e <FlexCAN_SetTDCOffset>:
 */
static inline void FlexCAN_SetTDCOffset(FLEXCAN_Type * base,
                                        boolean enable,
                                        uint8 offset
                                       )
{
    ba0e:	b084      	sub	sp, #16
    ba10:	9001      	str	r0, [sp, #4]
    ba12:	460b      	mov	r3, r1
    ba14:	f88d 3003 	strb.w	r3, [sp, #3]
    ba18:	4613      	mov	r3, r2
    ba1a:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 tmp;

    tmp = base->FDCTRL;
    ba1e:	9b01      	ldr	r3, [sp, #4]
    ba20:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    ba24:	9303      	str	r3, [sp, #12]
    tmp &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    ba26:	9b03      	ldr	r3, [sp, #12]
    ba28:	f423 431f 	bic.w	r3, r3, #40704	; 0x9f00
    ba2c:	9303      	str	r3, [sp, #12]

    if (enable)
    ba2e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ba32:	2b00      	cmp	r3, #0
    ba34:	d00b      	beq.n	ba4e <FlexCAN_SetTDCOffset+0x40>
    {
        tmp = tmp | FLEXCAN_FDCTRL_TDCEN_MASK;
    ba36:	9b03      	ldr	r3, [sp, #12]
    ba38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    ba3c:	9303      	str	r3, [sp, #12]
        tmp = tmp | FLEXCAN_FDCTRL_TDCOFF(offset);
    ba3e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    ba42:	021b      	lsls	r3, r3, #8
    ba44:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    ba48:	9a03      	ldr	r2, [sp, #12]
    ba4a:	4313      	orrs	r3, r2
    ba4c:	9303      	str	r3, [sp, #12]
    }

    base->FDCTRL = tmp;
    ba4e:	9b01      	ldr	r3, [sp, #4]
    ba50:	9a03      	ldr	r2, [sp, #12]
    ba52:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    ba56:	bf00      	nop
    ba58:	b004      	add	sp, #16
    ba5a:	4770      	bx	lr

0000ba5c <FlexCAN_IsEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsEnabled(const FLEXCAN_Type * pBase)
{
    ba5c:	b082      	sub	sp, #8
    ba5e:	9001      	str	r0, [sp, #4]
    return (((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U) ? FALSE : TRUE;
    ba60:	9b01      	ldr	r3, [sp, #4]
    ba62:	681b      	ldr	r3, [r3, #0]
    ba64:	43db      	mvns	r3, r3
    ba66:	0fdb      	lsrs	r3, r3, #31
    ba68:	b2db      	uxtb	r3, r3
}
    ba6a:	4618      	mov	r0, r3
    ba6c:	b002      	add	sp, #8
    ba6e:	4770      	bx	lr

0000ba70 <FlexCAN_SetFDEnabled>:
 */
static inline void FlexCAN_SetFDEnabled(FLEXCAN_Type * base,
                                        boolean enableFD,
                                        boolean enableBRS
                                       )
{
    ba70:	b082      	sub	sp, #8
    ba72:	9001      	str	r0, [sp, #4]
    ba74:	460b      	mov	r3, r1
    ba76:	f88d 3003 	strb.w	r3, [sp, #3]
    ba7a:	4613      	mov	r3, r2
    ba7c:	f88d 3002 	strb.w	r3, [sp, #2]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FDEN_MASK) | FLEXCAN_MCR_FDEN(enableFD ? 1UL : 0UL);
    ba80:	9b01      	ldr	r3, [sp, #4]
    ba82:	681b      	ldr	r3, [r3, #0]
    ba84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    ba88:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ba8c:	2a00      	cmp	r2, #0
    ba8e:	d002      	beq.n	ba96 <FlexCAN_SetFDEnabled+0x26>
    ba90:	f44f 6200 	mov.w	r2, #2048	; 0x800
    ba94:	e000      	b.n	ba98 <FlexCAN_SetFDEnabled+0x28>
    ba96:	2200      	movs	r2, #0
    ba98:	431a      	orrs	r2, r3
    ba9a:	9b01      	ldr	r3, [sp, #4]
    ba9c:	601a      	str	r2, [r3, #0]

    /* Enable BitRate Switch support from BRS_TX_MB field or ignore it */
    base->FDCTRL = (base->FDCTRL & ~FLEXCAN_FDCTRL_FDRATE_MASK) | FLEXCAN_FDCTRL_FDRATE(enableBRS ? 1UL : 0UL);
    ba9e:	9b01      	ldr	r3, [sp, #4]
    baa0:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    baa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    baa8:	f89d 2002 	ldrb.w	r2, [sp, #2]
    baac:	2a00      	cmp	r2, #0
    baae:	d002      	beq.n	bab6 <FlexCAN_SetFDEnabled+0x46>
    bab0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    bab4:	e000      	b.n	bab8 <FlexCAN_SetFDEnabled+0x48>
    bab6:	2200      	movs	r2, #0
    bab8:	431a      	orrs	r2, r3
    baba:	9b01      	ldr	r3, [sp, #4]
    babc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00

    /* Disable Transmission Delay Compensation by default */
    base->FDCTRL &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    bac0:	9b01      	ldr	r3, [sp, #4]
    bac2:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    bac6:	f423 421f 	bic.w	r2, r3, #40704	; 0x9f00
    baca:	9b01      	ldr	r3, [sp, #4]
    bacc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    bad0:	bf00      	nop
    bad2:	b002      	add	sp, #8
    bad4:	4770      	bx	lr

0000bad6 <FlexCAN_SetListenOnlyMode>:
 *
 * @param   base    The FlexCAN base address
 * @param   enable  TRUE to enable; FALSE to disable
 */
static inline void FlexCAN_SetListenOnlyMode(FLEXCAN_Type * base, boolean enableListenOnly)
{
    bad6:	b082      	sub	sp, #8
    bad8:	9001      	str	r0, [sp, #4]
    bada:	460b      	mov	r3, r1
    badc:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(enableListenOnly ? 1UL : 0UL);
    bae0:	9b01      	ldr	r3, [sp, #4]
    bae2:	685b      	ldr	r3, [r3, #4]
    bae4:	f023 0308 	bic.w	r3, r3, #8
    bae8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    baec:	2a00      	cmp	r2, #0
    baee:	d001      	beq.n	baf4 <FlexCAN_SetListenOnlyMode+0x1e>
    baf0:	2208      	movs	r2, #8
    baf2:	e000      	b.n	baf6 <FlexCAN_SetListenOnlyMode+0x20>
    baf4:	2200      	movs	r2, #0
    baf6:	431a      	orrs	r2, r3
    baf8:	9b01      	ldr	r3, [sp, #4]
    bafa:	605a      	str	r2, [r3, #4]
}
    bafc:	bf00      	nop
    bafe:	b002      	add	sp, #8
    bb00:	4770      	bx	lr

0000bb02 <FlexCAN_UnlockRxMsgBuff>:
 * @brief Unlocks the FlexCAN Rx message buffer.
 *
 * @param   base     The FlexCAN base address
 */
static inline void FlexCAN_UnlockRxMsgBuff(const FLEXCAN_Type * base)
{
    bb02:	b082      	sub	sp, #8
    bb04:	9001      	str	r0, [sp, #4]
    /* Unlock the mailbox by reading the free running timer */
    (void)base->TIMER;
    bb06:	9b01      	ldr	r3, [sp, #4]
    bb08:	689b      	ldr	r3, [r3, #8]
}
    bb0a:	bf00      	nop
    bb0c:	b002      	add	sp, #8
    bb0e:	4770      	bx	lr

0000bb10 <FlexCAN_ClearMsgBuffIntStatusFlag>:
 *
 * @param   base        The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 */
static inline void FlexCAN_ClearMsgBuffIntStatusFlag(FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    bb10:	b084      	sub	sp, #16
    bb12:	9001      	str	r0, [sp, #4]
    bb14:	9100      	str	r1, [sp, #0]
    uint32 flag = ((uint32)1U << (msgBuffIdx % 32U));
    bb16:	9b00      	ldr	r3, [sp, #0]
    bb18:	f003 031f 	and.w	r3, r3, #31
    bb1c:	2201      	movs	r2, #1
    bb1e:	fa02 f303 	lsl.w	r3, r2, r3
    bb22:	9303      	str	r3, [sp, #12]

    /* Clear the corresponding message buffer interrupt flag*/
    if (msgBuffIdx < 32U)
    bb24:	9b00      	ldr	r3, [sp, #0]
    bb26:	2b1f      	cmp	r3, #31
    bb28:	d802      	bhi.n	bb30 <FlexCAN_ClearMsgBuffIntStatusFlag+0x20>
    {
        (base->IFLAG1) = (flag);
    bb2a:	9b01      	ldr	r3, [sp, #4]
    bb2c:	9a03      	ldr	r2, [sp, #12]
    bb2e:	631a      	str	r2, [r3, #48]	; 0x30
    else
    {
        (base->IFLAG4) = (flag);
    }
#endif
}
    bb30:	bf00      	nop
    bb32:	b004      	add	sp, #16
    bb34:	4770      	bx	lr

0000bb36 <FlexCAN_GetBuffStatusFlag>:
 * @param   base                The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 * @return  flag        The value of interrupt flag of the message buffer.
 */
static inline uint8 FlexCAN_GetBuffStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    bb36:	b084      	sub	sp, #16
    bb38:	9001      	str	r0, [sp, #4]
    bb3a:	9100      	str	r1, [sp, #0]
    uint32 flag = 0U;
    bb3c:	2300      	movs	r3, #0
    bb3e:	9303      	str	r3, [sp, #12]

    if (msgBuffIdx < 32U)
    bb40:	9b00      	ldr	r3, [sp, #0]
    bb42:	2b1f      	cmp	r3, #31
    bb44:	d80e      	bhi.n	bb64 <FlexCAN_GetBuffStatusFlag+0x2e>
    {
        flag = ((base->IFLAG1 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    bb46:	9b01      	ldr	r3, [sp, #4]
    bb48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    bb4a:	9b00      	ldr	r3, [sp, #0]
    bb4c:	f003 031f 	and.w	r3, r3, #31
    bb50:	2101      	movs	r1, #1
    bb52:	fa01 f303 	lsl.w	r3, r1, r3
    bb56:	401a      	ands	r2, r3
    bb58:	9b00      	ldr	r3, [sp, #0]
    bb5a:	f003 031f 	and.w	r3, r3, #31
    bb5e:	fa22 f303 	lsr.w	r3, r2, r3
    bb62:	9303      	str	r3, [sp, #12]
    {
        flag = ((base->IFLAG4 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    }
#endif

    return (uint8)flag;
    bb64:	9b03      	ldr	r3, [sp, #12]
    bb66:	b2db      	uxtb	r3, r3
}
    bb68:	4618      	mov	r0, r3
    bb6a:	b004      	add	sp, #16
    bb6c:	4770      	bx	lr

0000bb6e <FlexCAN_SetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetFDTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bb6e:	b082      	sub	sp, #8
    bb70:	9001      	str	r0, [sp, #4]
    bb72:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* Set FlexCAN time segments*/
    (base->FDCBT) = ((base->FDCBT) & ~((FLEXCAN_FDCBT_FPROPSEG_MASK | FLEXCAN_FDCBT_FPSEG2_MASK |
    bb74:	9b01      	ldr	r3, [sp, #4]
    bb76:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    bb7a:	4b15      	ldr	r3, [pc, #84]	; (bbd0 <FlexCAN_SetFDTimeSegments+0x62>)
    bb7c:	4013      	ands	r3, r2
    bb7e:	9a01      	ldr	r2, [sp, #4]
    bb80:	f8c2 3c04 	str.w	r3, [r2, #3076]	; 0xc04
                                        FLEXCAN_FDCBT_FPSEG1_MASK | FLEXCAN_FDCBT_FPRESDIV_MASK
                                       ) | FLEXCAN_FDCBT_FRJW_MASK
                                      )
                    );

    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    bb84:	9b01      	ldr	r3, [sp, #4]
    bb86:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    bb8a:	9b00      	ldr	r3, [sp, #0]
    bb8c:	681b      	ldr	r3, [r3, #0]
    bb8e:	029b      	lsls	r3, r3, #10
    bb90:	f403 41f8 	and.w	r1, r3, #31744	; 0x7c00
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    bb94:	9b00      	ldr	r3, [sp, #0]
    bb96:	689b      	ldr	r3, [r3, #8]
    bb98:	f003 0307 	and.w	r3, r3, #7
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    bb9c:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    bb9e:	9b00      	ldr	r3, [sp, #0]
    bba0:	685b      	ldr	r3, [r3, #4]
    bba2:	015b      	lsls	r3, r3, #5
    bba4:	b2db      	uxtb	r3, r3
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    bba6:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    bba8:	9b00      	ldr	r3, [sp, #0]
    bbaa:	68db      	ldr	r3, [r3, #12]
    bbac:	0518      	lsls	r0, r3, #20
    bbae:	4b09      	ldr	r3, [pc, #36]	; (bbd4 <FlexCAN_SetFDTimeSegments+0x66>)
    bbb0:	4003      	ands	r3, r0
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    bbb2:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FRJW(timeSeg->rJumpwidth)
    bbb4:	9b00      	ldr	r3, [sp, #0]
    bbb6:	691b      	ldr	r3, [r3, #16]
    bbb8:	041b      	lsls	r3, r3, #16
    bbba:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    bbbe:	430b      	orrs	r3, r1
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    bbc0:	431a      	orrs	r2, r3
    bbc2:	9b01      	ldr	r3, [sp, #4]
    bbc4:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
                                     )
                    );
}
    bbc8:	bf00      	nop
    bbca:	b002      	add	sp, #8
    bbcc:	4770      	bx	lr
    bbce:	bf00      	nop
    bbd0:	c0088318 	.word	0xc0088318
    bbd4:	3ff00000 	.word	0x3ff00000

0000bbd8 <FlexCAN_SetTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bbd8:	b082      	sub	sp, #8
    bbda:	9001      	str	r0, [sp, #4]
    bbdc:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    (base->CTRL1) = ((base->CTRL1) & ~((FLEXCAN_CTRL1_PROPSEG_MASK | FLEXCAN_CTRL1_PSEG2_MASK |
    bbde:	9b01      	ldr	r3, [sp, #4]
    bbe0:	685a      	ldr	r2, [r3, #4]
    bbe2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    bbe6:	4013      	ands	r3, r2
    bbe8:	9a01      	ldr	r2, [sp, #4]
    bbea:	6053      	str	r3, [r2, #4]
                                        FLEXCAN_CTRL1_PSEG1_MASK | FLEXCAN_CTRL1_PRESDIV_MASK
                                       ) | FLEXCAN_CTRL1_RJW_MASK
                                      )
                    );

    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    bbec:	9b01      	ldr	r3, [sp, #4]
    bbee:	685a      	ldr	r2, [r3, #4]
    bbf0:	9b00      	ldr	r3, [sp, #0]
    bbf2:	681b      	ldr	r3, [r3, #0]
    bbf4:	f003 0107 	and.w	r1, r3, #7
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    bbf8:	9b00      	ldr	r3, [sp, #0]
    bbfa:	689b      	ldr	r3, [r3, #8]
    bbfc:	041b      	lsls	r3, r3, #16
    bbfe:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    bc02:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    bc04:	9b00      	ldr	r3, [sp, #0]
    bc06:	685b      	ldr	r3, [r3, #4]
    bc08:	04db      	lsls	r3, r3, #19
    bc0a:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    bc0e:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    bc10:	9b00      	ldr	r3, [sp, #0]
    bc12:	68db      	ldr	r3, [r3, #12]
    bc14:	061b      	lsls	r3, r3, #24
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    bc16:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_RJW(timeSeg->rJumpwidth)
    bc18:	9b00      	ldr	r3, [sp, #0]
    bc1a:	691b      	ldr	r3, [r3, #16]
    bc1c:	059b      	lsls	r3, r3, #22
    bc1e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    bc22:	430b      	orrs	r3, r1
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    bc24:	431a      	orrs	r2, r3
    bc26:	9b01      	ldr	r3, [sp, #4]
    bc28:	605a      	str	r2, [r3, #4]
                                     )
                    );
}
    bc2a:	bf00      	nop
    bc2c:	b002      	add	sp, #8
    bc2e:	4770      	bx	lr

0000bc30 <FlexCAN_SetExtendedTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetExtendedTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bc30:	b082      	sub	sp, #8
    bc32:	9001      	str	r0, [sp, #4]
    bc34:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* If extended bit time definitions are enabled, use CBT register */
    (base->CBT) = ((base->CBT) & ~((FLEXCAN_CBT_EPROPSEG_MASK | FLEXCAN_CBT_EPSEG2_MASK |
    bc36:	9b01      	ldr	r3, [sp, #4]
    bc38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bc3a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
    bc3e:	9b01      	ldr	r3, [sp, #4]
    bc40:	651a      	str	r2, [r3, #80]	; 0x50
                                    FLEXCAN_CBT_EPSEG1_MASK | FLEXCAN_CBT_EPRESDIV_MASK
                                   ) | FLEXCAN_CBT_ERJW_MASK
                                  )
                  );

    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    bc42:	9b01      	ldr	r3, [sp, #4]
    bc44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    bc46:	9b00      	ldr	r3, [sp, #0]
    bc48:	681b      	ldr	r3, [r3, #0]
    bc4a:	029b      	lsls	r3, r3, #10
    bc4c:	b299      	uxth	r1, r3
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    bc4e:	9b00      	ldr	r3, [sp, #0]
    bc50:	689b      	ldr	r3, [r3, #8]
    bc52:	f003 031f 	and.w	r3, r3, #31
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    bc56:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    bc58:	9b00      	ldr	r3, [sp, #0]
    bc5a:	685b      	ldr	r3, [r3, #4]
    bc5c:	015b      	lsls	r3, r3, #5
    bc5e:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    bc62:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    bc64:	9b00      	ldr	r3, [sp, #0]
    bc66:	68db      	ldr	r3, [r3, #12]
    bc68:	0558      	lsls	r0, r3, #21
    bc6a:	4b07      	ldr	r3, [pc, #28]	; (bc88 <FlexCAN_SetExtendedTimeSegments+0x58>)
    bc6c:	4003      	ands	r3, r0
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    bc6e:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_ERJW(timeSeg->rJumpwidth)
    bc70:	9b00      	ldr	r3, [sp, #0]
    bc72:	691b      	ldr	r3, [r3, #16]
    bc74:	041b      	lsls	r3, r3, #16
    bc76:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    bc7a:	430b      	orrs	r3, r1
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    bc7c:	431a      	orrs	r2, r3
    bc7e:	9b01      	ldr	r3, [sp, #4]
    bc80:	651a      	str	r2, [r3, #80]	; 0x50
                                 )
                  );
}
    bc82:	bf00      	nop
    bc84:	b002      	add	sp, #8
    bc86:	4770      	bx	lr
    bc88:	7fe00000 	.word	0x7fe00000

0000bc8c <FlexCAN_GetExtendedTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetExtendedTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bc8c:	b082      	sub	sp, #8
    bc8e:	9001      	str	r0, [sp, #4]
    bc90:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CBT) & FLEXCAN_CBT_EPRESDIV_MASK) >> FLEXCAN_CBT_EPRESDIV_SHIFT;
    bc92:	9b01      	ldr	r3, [sp, #4]
    bc94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bc96:	0d5b      	lsrs	r3, r3, #21
    bc98:	f3c3 0209 	ubfx	r2, r3, #0, #10
    bc9c:	9b00      	ldr	r3, [sp, #0]
    bc9e:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CBT) & FLEXCAN_CBT_EPROPSEG_MASK) >> FLEXCAN_CBT_EPROPSEG_SHIFT;
    bca0:	9b01      	ldr	r3, [sp, #4]
    bca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bca4:	0a9b      	lsrs	r3, r3, #10
    bca6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    bcaa:	9b00      	ldr	r3, [sp, #0]
    bcac:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CBT) & FLEXCAN_CBT_EPSEG1_MASK) >> FLEXCAN_CBT_EPSEG1_SHIFT;
    bcae:	9b01      	ldr	r3, [sp, #4]
    bcb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bcb2:	095b      	lsrs	r3, r3, #5
    bcb4:	f003 021f 	and.w	r2, r3, #31
    bcb8:	9b00      	ldr	r3, [sp, #0]
    bcba:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CBT) & FLEXCAN_CBT_EPSEG2_MASK) >> FLEXCAN_CBT_EPSEG2_SHIFT;
    bcbc:	9b01      	ldr	r3, [sp, #4]
    bcbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bcc0:	f003 021f 	and.w	r2, r3, #31
    bcc4:	9b00      	ldr	r3, [sp, #0]
    bcc6:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CBT) & FLEXCAN_CBT_ERJW_MASK) >> FLEXCAN_CBT_ERJW_SHIFT;
    bcc8:	9b01      	ldr	r3, [sp, #4]
    bcca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bccc:	0c1b      	lsrs	r3, r3, #16
    bcce:	f003 021f 	and.w	r2, r3, #31
    bcd2:	9b00      	ldr	r3, [sp, #0]
    bcd4:	611a      	str	r2, [r3, #16]
}
    bcd6:	bf00      	nop
    bcd8:	b002      	add	sp, #8
    bcda:	4770      	bx	lr

0000bcdc <FlexCAN_GetTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bcdc:	b082      	sub	sp, #8
    bcde:	9001      	str	r0, [sp, #4]
    bce0:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CTRL1) & FLEXCAN_CTRL1_PRESDIV_MASK) >> FLEXCAN_CTRL1_PRESDIV_SHIFT;
    bce2:	9b01      	ldr	r3, [sp, #4]
    bce4:	685b      	ldr	r3, [r3, #4]
    bce6:	0e1b      	lsrs	r3, r3, #24
    bce8:	b2da      	uxtb	r2, r3
    bcea:	9b00      	ldr	r3, [sp, #0]
    bcec:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CTRL1) & FLEXCAN_CTRL1_PROPSEG_MASK) >> FLEXCAN_CTRL1_PROPSEG_SHIFT;
    bcee:	9b01      	ldr	r3, [sp, #4]
    bcf0:	685b      	ldr	r3, [r3, #4]
    bcf2:	f003 0207 	and.w	r2, r3, #7
    bcf6:	9b00      	ldr	r3, [sp, #0]
    bcf8:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG1_MASK) >> FLEXCAN_CTRL1_PSEG1_SHIFT;
    bcfa:	9b01      	ldr	r3, [sp, #4]
    bcfc:	685b      	ldr	r3, [r3, #4]
    bcfe:	0cdb      	lsrs	r3, r3, #19
    bd00:	f003 0207 	and.w	r2, r3, #7
    bd04:	9b00      	ldr	r3, [sp, #0]
    bd06:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG2_MASK) >> FLEXCAN_CTRL1_PSEG2_SHIFT;
    bd08:	9b01      	ldr	r3, [sp, #4]
    bd0a:	685b      	ldr	r3, [r3, #4]
    bd0c:	0c1b      	lsrs	r3, r3, #16
    bd0e:	f003 0207 	and.w	r2, r3, #7
    bd12:	9b00      	ldr	r3, [sp, #0]
    bd14:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CTRL1) & FLEXCAN_CTRL1_RJW_MASK) >> FLEXCAN_CTRL1_RJW_SHIFT;
    bd16:	9b01      	ldr	r3, [sp, #4]
    bd18:	685b      	ldr	r3, [r3, #4]
    bd1a:	0d9b      	lsrs	r3, r3, #22
    bd1c:	f003 0203 	and.w	r2, r3, #3
    bd20:	9b00      	ldr	r3, [sp, #0]
    bd22:	611a      	str	r2, [r3, #16]
}
    bd24:	bf00      	nop
    bd26:	b002      	add	sp, #8
    bd28:	4770      	bx	lr

0000bd2a <FlexCAN_GetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetFDTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bd2a:	b082      	sub	sp, #8
    bd2c:	9001      	str	r0, [sp, #4]
    bd2e:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->FDCBT) & FLEXCAN_FDCBT_FPRESDIV_MASK) >> FLEXCAN_FDCBT_FPRESDIV_SHIFT;
    bd30:	9b01      	ldr	r3, [sp, #4]
    bd32:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bd36:	0d1b      	lsrs	r3, r3, #20
    bd38:	f3c3 0209 	ubfx	r2, r3, #0, #10
    bd3c:	9b00      	ldr	r3, [sp, #0]
    bd3e:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->FDCBT) & FLEXCAN_FDCBT_FPROPSEG_MASK) >> FLEXCAN_FDCBT_FPROPSEG_SHIFT;
    bd40:	9b01      	ldr	r3, [sp, #4]
    bd42:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bd46:	0a9b      	lsrs	r3, r3, #10
    bd48:	f003 021f 	and.w	r2, r3, #31
    bd4c:	9b00      	ldr	r3, [sp, #0]
    bd4e:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG1_MASK) >> FLEXCAN_FDCBT_FPSEG1_SHIFT;
    bd50:	9b01      	ldr	r3, [sp, #4]
    bd52:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bd56:	095b      	lsrs	r3, r3, #5
    bd58:	f003 0207 	and.w	r2, r3, #7
    bd5c:	9b00      	ldr	r3, [sp, #0]
    bd5e:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG2_MASK) >> FLEXCAN_FDCBT_FPSEG2_SHIFT;
    bd60:	9b01      	ldr	r3, [sp, #4]
    bd62:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bd66:	f003 0207 	and.w	r2, r3, #7
    bd6a:	9b00      	ldr	r3, [sp, #0]
    bd6c:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->FDCBT) & FLEXCAN_FDCBT_FRJW_MASK) >> FLEXCAN_FDCBT_FRJW_SHIFT;
    bd6e:	9b01      	ldr	r3, [sp, #4]
    bd70:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bd74:	0c1b      	lsrs	r3, r3, #16
    bd76:	f003 0207 	and.w	r2, r3, #7
    bd7a:	9b00      	ldr	r3, [sp, #0]
    bd7c:	611a      	str	r2, [r3, #16]
}
    bd7e:	bf00      	nop
    bd80:	b002      	add	sp, #8
    bd82:	4770      	bx	lr

0000bd84 <FlexCAN_IsExCbtEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsExCbtEnabled(const FLEXCAN_Type * pBase)
{
    bd84:	b082      	sub	sp, #8
    bd86:	9001      	str	r0, [sp, #4]
    return (0U == ((pBase->CBT & FLEXCAN_CBT_BTF_MASK) >> FLEXCAN_CBT_BTF_SHIFT)) ? FALSE : TRUE;
    bd88:	9b01      	ldr	r3, [sp, #4]
    bd8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bd8c:	0fdb      	lsrs	r3, r3, #31
    bd8e:	b2db      	uxtb	r3, r3
}
    bd90:	4618      	mov	r0, r3
    bd92:	b002      	add	sp, #8
    bd94:	4770      	bx	lr

0000bd96 <FlexCAN_EnableExtCbt>:
 *
 * @param   base    The FlexCAN base address
 * @param   enableCBT Enable/Disable use of Extent Time Segments
 */
static inline void FlexCAN_EnableExtCbt(FLEXCAN_Type * base, boolean enableCBT)
{   /* Enable the use of extended bit time definitions */
    bd96:	b082      	sub	sp, #8
    bd98:	9001      	str	r0, [sp, #4]
    bd9a:	460b      	mov	r3, r1
    bd9c:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CBT = (base->CBT & ~FLEXCAN_CBT_BTF_MASK) | FLEXCAN_CBT_BTF(enableCBT ? 1UL : 0UL);
    bda0:	9b01      	ldr	r3, [sp, #4]
    bda2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bda4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    bda8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bdac:	2a00      	cmp	r2, #0
    bdae:	d002      	beq.n	bdb6 <FlexCAN_EnableExtCbt+0x20>
    bdb0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    bdb4:	e000      	b.n	bdb8 <FlexCAN_EnableExtCbt+0x22>
    bdb6:	2200      	movs	r2, #0
    bdb8:	431a      	orrs	r2, r3
    bdba:	9b01      	ldr	r3, [sp, #4]
    bdbc:	651a      	str	r2, [r3, #80]	; 0x50
}
    bdbe:	bf00      	nop
    bdc0:	b002      	add	sp, #8
    bdc2:	4770      	bx	lr

0000bdc4 <FlexCAN_SetSelfReception>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Enable/Disable Self Reception
 */
static inline void FlexCAN_SetSelfReception(FLEXCAN_Type * base, boolean enable)
{
    bdc4:	b082      	sub	sp, #8
    bdc6:	9001      	str	r0, [sp, #4]
    bdc8:	460b      	mov	r3, r1
    bdca:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    bdce:	9b01      	ldr	r3, [sp, #4]
    bdd0:	681b      	ldr	r3, [r3, #0]
    bdd2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    bdd6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bdda:	2a00      	cmp	r2, #0
    bddc:	d001      	beq.n	bde2 <FlexCAN_SetSelfReception+0x1e>
    bdde:	2200      	movs	r2, #0
    bde0:	e001      	b.n	bde6 <FlexCAN_SetSelfReception+0x22>
    bde2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    bde6:	431a      	orrs	r2, r3
    bde8:	9b01      	ldr	r3, [sp, #4]
    bdea:	601a      	str	r2, [r3, #0]
}
    bdec:	bf00      	nop
    bdee:	b002      	add	sp, #8
    bdf0:	4770      	bx	lr

0000bdf2 <FlexCAN_IsFDEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsFDEnabled(const FLEXCAN_Type * base)
{
    bdf2:	b082      	sub	sp, #8
    bdf4:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    bdf6:	9b01      	ldr	r3, [sp, #4]
    bdf8:	681b      	ldr	r3, [r3, #0]
    bdfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    bdfe:	2b00      	cmp	r3, #0
    be00:	bf14      	ite	ne
    be02:	2301      	movne	r3, #1
    be04:	2300      	moveq	r3, #0
    be06:	b2db      	uxtb	r3, r3
}
    be08:	4618      	mov	r0, r3
    be0a:	b002      	add	sp, #8
    be0c:	4770      	bx	lr

0000be0e <FlexCAN_IsListenOnlyModeEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsListenOnlyModeEnabled(const FLEXCAN_Type * base)
{
    be0e:	b082      	sub	sp, #8
    be10:	9001      	str	r0, [sp, #4]
    return (((base->CTRL1 & (FLEXCAN_CTRL1_LOM_MASK)) != 0U) ? TRUE : FALSE);
    be12:	9b01      	ldr	r3, [sp, #4]
    be14:	685b      	ldr	r3, [r3, #4]
    be16:	f003 0308 	and.w	r3, r3, #8
    be1a:	2b00      	cmp	r3, #0
    be1c:	bf14      	ite	ne
    be1e:	2301      	movne	r3, #1
    be20:	2300      	moveq	r3, #0
    be22:	b2db      	uxtb	r3, r3
}
    be24:	4618      	mov	r0, r3
    be26:	b002      	add	sp, #8
    be28:	4770      	bx	lr

0000be2a <RxFifoOcuppiedLastMsgBuff>:
 *
 * @param   x    Number of Configured RxFIFO Filters
 * @return  number of last MB occupied by RxFIFO
 */
static inline uint32 RxFifoOcuppiedLastMsgBuff(uint8 x)
{
    be2a:	b082      	sub	sp, #8
    be2c:	4603      	mov	r3, r0
    be2e:	f88d 3007 	strb.w	r3, [sp, #7]
    return 5U + (((((uint32)x) + 1U) * 8U) / 4U);
    be32:	f89d 3007 	ldrb.w	r3, [sp, #7]
    be36:	3301      	adds	r3, #1
    be38:	00db      	lsls	r3, r3, #3
    be3a:	089b      	lsrs	r3, r3, #2
    be3c:	3305      	adds	r3, #5
}
    be3e:	4618      	mov	r0, r3
    be40:	b002      	add	sp, #8
    be42:	4770      	bx	lr

0000be44 <FlexCAN_SetClkSrc>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Specifies if The CAN engine clock source is the oscillator clock(FALSE) or peripheral clock(TRUE).
 */
static inline void FlexCAN_SetClkSrc(FLEXCAN_Type * base, boolean enable)
{
    be44:	b082      	sub	sp, #8
    be46:	9001      	str	r0, [sp, #4]
    be48:	460b      	mov	r3, r1
    be4a:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_CLKSRC_MASK) | FLEXCAN_CTRL1_CLKSRC(enable ? 1UL : 0UL);
    be4e:	9b01      	ldr	r3, [sp, #4]
    be50:	685b      	ldr	r3, [r3, #4]
    be52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    be56:	f89d 2003 	ldrb.w	r2, [sp, #3]
    be5a:	2a00      	cmp	r2, #0
    be5c:	d002      	beq.n	be64 <FlexCAN_SetClkSrc+0x20>
    be5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    be62:	e000      	b.n	be66 <FlexCAN_SetClkSrc+0x22>
    be64:	2200      	movs	r2, #0
    be66:	431a      	orrs	r2, r3
    be68:	9b01      	ldr	r3, [sp, #4]
    be6a:	605a      	str	r2, [r3, #4]
}
    be6c:	bf00      	nop
    be6e:	b002      	add	sp, #8
    be70:	4770      	bx	lr

0000be72 <FlexCAN_GetMsgBuffIntStatusFlag>:
 * @param   base  The FlexCAN base address
 * @param   msgBuffIdx       Index of the message buffer
 * @return  the individual Message Buffer interrupt flag (0 and 1 are the flag value)
 */
static inline uint8 FlexCAN_GetMsgBuffIntStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    be72:	b084      	sub	sp, #16
    be74:	9001      	str	r0, [sp, #4]
    be76:	9100      	str	r1, [sp, #0]
    /* TODO: This need to be protected multithread access*/
    uint8 flag = 0;
    be78:	2300      	movs	r3, #0
    be7a:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 mask;

    if (msgBuffIdx < 32U)
    be7e:	9b00      	ldr	r3, [sp, #0]
    be80:	2b1f      	cmp	r3, #31
    be82:	d810      	bhi.n	bea6 <FlexCAN_GetMsgBuffIntStatusFlag+0x34>
    {
        mask = base->IMASK1 & FLEXCAN_IMASK1_BUF31TO0M_MASK;
    be84:	9b01      	ldr	r3, [sp, #4]
    be86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    be88:	9302      	str	r3, [sp, #8]
        flag = (uint8)(((base->IFLAG1 & mask) >> (msgBuffIdx % 32U)) & 1U);
    be8a:	9b01      	ldr	r3, [sp, #4]
    be8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    be8e:	9b02      	ldr	r3, [sp, #8]
    be90:	401a      	ands	r2, r3
    be92:	9b00      	ldr	r3, [sp, #0]
    be94:	f003 031f 	and.w	r3, r3, #31
    be98:	fa22 f303 	lsr.w	r3, r2, r3
    be9c:	b2db      	uxtb	r3, r3
    be9e:	f003 0301 	and.w	r3, r3, #1
    bea2:	f88d 300f 	strb.w	r3, [sp, #15]
        mask = base->IMASK4 & FLEXCAN_IMASK4_BUF127TO96M_MASK;
        flag = (uint8)(((base->IFLAG4 & mask) >> (msgBuffIdx % 32U)) & 1U);
    }
#endif

    return flag;
    bea6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    beaa:	4618      	mov	r0, r3
    beac:	b004      	add	sp, #16
    beae:	4770      	bx	lr

0000beb0 <FlexCAN_SetRxMsgBuffGlobalMask>:
 *
 * @param   base  The FlexCAN base address
 * @param   Mask  Mask Value
 */
static inline void FlexCAN_SetRxMsgBuffGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    beb0:	b082      	sub	sp, #8
    beb2:	9001      	str	r0, [sp, #4]
    beb4:	9100      	str	r1, [sp, #0]
    (base->RXMGMASK) = Mask;
    beb6:	9b01      	ldr	r3, [sp, #4]
    beb8:	9a00      	ldr	r2, [sp, #0]
    beba:	611a      	str	r2, [r3, #16]
}
    bebc:	bf00      	nop
    bebe:	b002      	add	sp, #8
    bec0:	4770      	bx	lr

0000bec2 <FlexCAN_SetRxIndividualMask>:
 */
static inline void FlexCAN_SetRxIndividualMask(FLEXCAN_Type * base,
                                               uint32 msgBuffIdx,
                                               uint32 mask
                                              )
{
    bec2:	b084      	sub	sp, #16
    bec4:	9003      	str	r0, [sp, #12]
    bec6:	9102      	str	r1, [sp, #8]
    bec8:	9201      	str	r2, [sp, #4]
    base->RXIMR[msgBuffIdx] = mask;
    beca:	9b03      	ldr	r3, [sp, #12]
    becc:	9a02      	ldr	r2, [sp, #8]
    bece:	f502 7208 	add.w	r2, r2, #544	; 0x220
    bed2:	9901      	ldr	r1, [sp, #4]
    bed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    bed8:	bf00      	nop
    beda:	b004      	add	sp, #16
    bedc:	4770      	bx	lr

0000bede <FlexCAN_SetTxArbitrationStartDelay>:
 *
 * @param   base  The FlexCAN base address
 * @param   tasd  The Tx arbitration start delay value
 */
static inline void FlexCAN_SetTxArbitrationStartDelay(FLEXCAN_Type * base, uint8 tasd)
{
    bede:	b082      	sub	sp, #8
    bee0:	9001      	str	r0, [sp, #4]
    bee2:	460b      	mov	r3, r1
    bee4:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_TASD_MASK) | FLEXCAN_CTRL2_TASD(tasd);
    bee8:	9b01      	ldr	r3, [sp, #4]
    beea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    beec:	f423 0278 	bic.w	r2, r3, #16252928	; 0xf80000
    bef0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bef4:	04db      	lsls	r3, r3, #19
    bef6:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
    befa:	431a      	orrs	r2, r3
    befc:	9b01      	ldr	r3, [sp, #4]
    befe:	635a      	str	r2, [r3, #52]	; 0x34
}
    bf00:	bf00      	nop
    bf02:	b002      	add	sp, #8
    bf04:	4770      	bx	lr

0000bf06 <FlexCAN_SetRxMaskType>:
 *
 * @param   base  The FlexCAN base address
 * @param   type         The FlexCAN Rx mask type
 */
static inline void FlexCAN_SetRxMaskType(FLEXCAN_Type * base, Flexcan_Ip_RxMaskType type)
{
    bf06:	b082      	sub	sp, #8
    bf08:	9001      	str	r0, [sp, #4]
    bf0a:	9100      	str	r1, [sp, #0]
    /* Set RX masking type (RX global mask or RX individual mask)*/
    if (FLEXCAN_RX_MASK_GLOBAL == type)
    bf0c:	9b00      	ldr	r3, [sp, #0]
    bf0e:	2b00      	cmp	r3, #0
    bf10:	d106      	bne.n	bf20 <FlexCAN_SetRxMaskType+0x1a>
    {
        /* Enable Global RX masking */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(0U);
    bf12:	9b01      	ldr	r3, [sp, #4]
    bf14:	681b      	ldr	r3, [r3, #0]
    bf16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
    bf1a:	9b01      	ldr	r3, [sp, #4]
    bf1c:	601a      	str	r2, [r3, #0]
    else
    {
        /* Enable Individual Rx Masking and Queue */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    }
}
    bf1e:	e005      	b.n	bf2c <FlexCAN_SetRxMaskType+0x26>
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    bf20:	9b01      	ldr	r3, [sp, #4]
    bf22:	681b      	ldr	r3, [r3, #0]
    bf24:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    bf28:	9b01      	ldr	r3, [sp, #4]
    bf2a:	601a      	str	r2, [r3, #0]
}
    bf2c:	bf00      	nop
    bf2e:	b002      	add	sp, #8
    bf30:	4770      	bx	lr

0000bf32 <FlexCAN_SetRegDefaultVal>:
 * @brief Will set Flexcan Peripheral Register to default val.
 *
 * @param   base    The FlexCAN base address
 */
static inline void FlexCAN_SetRegDefaultVal(FLEXCAN_Type * base)
{
    bf32:	b500      	push	{lr}
    bf34:	b083      	sub	sp, #12
    bf36:	9001      	str	r0, [sp, #4]
        base->ERFCR = FLEXCAN_IP_ERFCR_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    bf38:	9801      	ldr	r0, [sp, #4]
    bf3a:	f002 ff85 	bl	ee48 <FlexCAN_IsFDAvailable>
    bf3e:	4603      	mov	r3, r0
    bf40:	2b00      	cmp	r3, #0
    bf42:	d007      	beq.n	bf54 <FlexCAN_SetRegDefaultVal+0x22>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    bf44:	9b01      	ldr	r3, [sp, #4]
    bf46:	2200      	movs	r2, #0
    bf48:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    bf4c:	9b01      	ldr	r3, [sp, #4]
    bf4e:	4a12      	ldr	r2, [pc, #72]	; (bf98 <FlexCAN_SetRegDefaultVal+0x66>)
    bf50:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    {
        base->IFLAG2 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
        base->IMASK2 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */
    base->IFLAG1 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
    bf54:	9b01      	ldr	r3, [sp, #4]
    bf56:	f04f 32ff 	mov.w	r2, #4294967295
    bf5a:	631a      	str	r2, [r3, #48]	; 0x30
    base->IMASK1 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    bf5c:	9b01      	ldr	r3, [sp, #4]
    bf5e:	2200      	movs	r2, #0
    bf60:	629a      	str	r2, [r3, #40]	; 0x28
    base->CBT = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    bf62:	9b01      	ldr	r3, [sp, #4]
    bf64:	2200      	movs	r2, #0
    bf66:	651a      	str	r2, [r3, #80]	; 0x50
    base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    bf68:	9b01      	ldr	r3, [sp, #4]
    bf6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    bf6e:	635a      	str	r2, [r3, #52]	; 0x34
    base->ESR1 = FLEXCAN_IP_ESR1_DEFAULT_VALUE_U32;
    bf70:	9b01      	ldr	r3, [sp, #4]
    bf72:	4a0a      	ldr	r2, [pc, #40]	; (bf9c <FlexCAN_SetRegDefaultVal+0x6a>)
    bf74:	621a      	str	r2, [r3, #32]
    base->ECR = FLEXCAN_IP_ECR_DEFAULT_VALUE_U32;
    bf76:	9b01      	ldr	r3, [sp, #4]
    bf78:	2200      	movs	r2, #0
    bf7a:	61da      	str	r2, [r3, #28]
    base->TIMER = FLEXCAN_IP_TIMER_DEFAULT_VALUE_U32;
    bf7c:	9b01      	ldr	r3, [sp, #4]
    bf7e:	2200      	movs	r2, #0
    bf80:	609a      	str	r2, [r3, #8]
    base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    bf82:	9b01      	ldr	r3, [sp, #4]
    bf84:	2200      	movs	r2, #0
    bf86:	605a      	str	r2, [r3, #4]
    base->EPRS  = FLEXCAN_IP_EPRS_DEFAULT_VALUE_U32;
    base->ENCBT = FLEXCAN_IP_ENCBT_DEFAULT_VALUE_U32;
    base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
    base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
    base->MCR = FLEXCAN_IP_MCR_DEFAULT_VALUE_U32;
    bf88:	9b01      	ldr	r3, [sp, #4]
    bf8a:	4a05      	ldr	r2, [pc, #20]	; (bfa0 <FlexCAN_SetRegDefaultVal+0x6e>)
    bf8c:	601a      	str	r2, [r3, #0]
}
    bf8e:	bf00      	nop
    bf90:	b003      	add	sp, #12
    bf92:	f85d fb04 	ldr.w	pc, [sp], #4
    bf96:	bf00      	nop
    bf98:	80004100 	.word	0x80004100
    bf9c:	0003b006 	.word	0x0003b006
    bfa0:	d890000f 	.word	0xd890000f

0000bfa4 <FlexCAN_InitRxFifo>:
 * Description   : Initialize fifo and dma if requested.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitRxFifo(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    bfa4:	b500      	push	{lr}
    bfa6:	b085      	sub	sp, #20
    bfa8:	9001      	str	r0, [sp, #4]
    bfaa:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    bfac:	2300      	movs	r3, #0
    bfae:	9303      	str	r3, [sp, #12]

    /* Enable RxFIFO feature, if requested. This might fail if the FD mode is enabled. */
    if (Flexcan_Ip_pData->is_rx_fifo_needed)
    bfb0:	9b00      	ldr	r3, [sp, #0]
    bfb2:	7a1b      	ldrb	r3, [r3, #8]
    bfb4:	2b00      	cmp	r3, #0
    bfb6:	d006      	beq.n	bfc6 <FlexCAN_InitRxFifo+0x22>
    {
        eResult = FlexCAN_EnableRxFifo(pBase, (uint32)Flexcan_Ip_pData->num_id_filters);
    bfb8:	9b00      	ldr	r3, [sp, #0]
    bfba:	685b      	ldr	r3, [r3, #4]
    bfbc:	4619      	mov	r1, r3
    bfbe:	9801      	ldr	r0, [sp, #4]
    bfc0:	f002 fefe 	bl	edc0 <FlexCAN_EnableRxFifo>
    bfc4:	9003      	str	r0, [sp, #12]
        FlexCAN_SetRxFifoDMA(pBase, FALSE);
    }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    return eResult;
    bfc6:	9b03      	ldr	r3, [sp, #12]
}
    bfc8:	4618      	mov	r0, r3
    bfca:	b005      	add	sp, #20
    bfcc:	f85d fb04 	ldr.w	pc, [sp], #4

0000bfd0 <FlexCAN_InitCtroll>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitCtroll(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    bfd0:	b500      	push	{lr}
    bfd2:	b085      	sub	sp, #20
    bfd4:	9001      	str	r0, [sp, #4]
    bfd6:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    bfd8:	2300      	movs	r3, #0
    bfda:	9303      	str	r3, [sp, #12]
    /* Disable the self reception feature if FlexCAN is not in loopback mode. */
    if (Flexcan_Ip_pData->flexcanMode != FLEXCAN_LOOPBACK_MODE)
    bfdc:	9b00      	ldr	r3, [sp, #0]
    bfde:	68db      	ldr	r3, [r3, #12]
    bfe0:	2b02      	cmp	r3, #2
    bfe2:	d003      	beq.n	bfec <FlexCAN_InitCtroll+0x1c>
    {
        FlexCAN_SetSelfReception(pBase, FALSE);
    bfe4:	2100      	movs	r1, #0
    bfe6:	9801      	ldr	r0, [sp, #4]
    bfe8:	f7ff feec 	bl	bdc4 <FlexCAN_SetSelfReception>
    }

    /* Init legacy fifo, enhanced fifo if requested. */
    eResult = FlexCAN_InitRxFifo(pBase, Flexcan_Ip_pData);
    bfec:	9900      	ldr	r1, [sp, #0]
    bfee:	9801      	ldr	r0, [sp, #4]
    bff0:	f7ff ffd8 	bl	bfa4 <FlexCAN_InitRxFifo>
    bff4:	9003      	str	r0, [sp, #12]
    if (eResult != FLEXCAN_STATUS_SUCCESS)
    bff6:	9b03      	ldr	r3, [sp, #12]
    bff8:	2b00      	cmp	r3, #0
    bffa:	d006      	beq.n	c00a <FlexCAN_InitCtroll+0x3a>
    {
        /* To enter Disable Mode requires FreezMode first */
        (void)FlexCAN_EnterFreezeMode(pBase);
    bffc:	9801      	ldr	r0, [sp, #4]
    bffe:	f002 fd03 	bl	ea08 <FlexCAN_EnterFreezeMode>
        (void)FlexCAN_Disable(pBase);
    c002:	9801      	ldr	r0, [sp, #4]
    c004:	f002 fdca 	bl	eb9c <FlexCAN_Disable>
    c008:	e00b      	b.n	c022 <FlexCAN_InitCtroll+0x52>
    }
    else
    {
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set payload size. */
        FlexCAN_SetPayloadSize(pBase, &Flexcan_Ip_pData->payload);
    c00a:	9b00      	ldr	r3, [sp, #0]
    c00c:	3314      	adds	r3, #20
    c00e:	4619      	mov	r1, r3
    c010:	9801      	ldr	r0, [sp, #4]
    c012:	f002 ff3b 	bl	ee8c <FlexCAN_SetPayloadSize>
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
            (void)FlexCAN_Disable(pBase);
        }
    #else
        (void)FlexCAN_SetMaxMsgBuffNum(pBase, Flexcan_Ip_pData->max_num_mb);
    c016:	9b00      	ldr	r3, [sp, #0]
    c018:	681b      	ldr	r3, [r3, #0]
    c01a:	4619      	mov	r1, r3
    c01c:	9801      	ldr	r0, [sp, #4]
    c01e:	f003 fab7 	bl	f590 <FlexCAN_SetMaxMsgBuffNum>
    #endif /* FLEXCAN_IP_DEV_ERROR_DETECT */
    }
    return eResult;
    c022:	9b03      	ldr	r3, [sp, #12]
}
    c024:	4618      	mov	r0, r3
    c026:	b005      	add	sp, #20
    c028:	f85d fb04 	ldr.w	pc, [sp], #4

0000c02c <FlexCAN_InitController>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitController(uint8 Instance, FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    c02c:	b500      	push	{lr}
    c02e:	b087      	sub	sp, #28
    c030:	4603      	mov	r3, r0
    c032:	9102      	str	r1, [sp, #8]
    c034:	9201      	str	r2, [sp, #4]
    c036:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    c03a:	2300      	movs	r3, #0
    c03c:	9305      	str	r3, [sp, #20]

    if (FlexCAN_IsEnabled(pBase))
    c03e:	9802      	ldr	r0, [sp, #8]
    c040:	f7ff fd0c 	bl	ba5c <FlexCAN_IsEnabled>
    c044:	4603      	mov	r3, r0
    c046:	2b00      	cmp	r3, #0
    c048:	d00a      	beq.n	c060 <FlexCAN_InitController+0x34>
    {
        /* To enter Disable Mode requires FreezMode first */
        eResult = FlexCAN_EnterFreezeMode(pBase);
    c04a:	9802      	ldr	r0, [sp, #8]
    c04c:	f002 fcdc 	bl	ea08 <FlexCAN_EnterFreezeMode>
    c050:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == eResult)
    c052:	9b05      	ldr	r3, [sp, #20]
    c054:	2b00      	cmp	r3, #0
    c056:	d103      	bne.n	c060 <FlexCAN_InitController+0x34>
        {
            eResult = FlexCAN_Disable(pBase);
    c058:	9802      	ldr	r0, [sp, #8]
    c05a:	f002 fd9f 	bl	eb9c <FlexCAN_Disable>
    c05e:	9005      	str	r0, [sp, #20]
        }
    }

    if (FLEXCAN_STATUS_SUCCESS == eResult)
    c060:	9b05      	ldr	r3, [sp, #20]
    c062:	2b00      	cmp	r3, #0
    c064:	d137      	bne.n	c0d6 <FlexCAN_InitController+0xaa>
    {
    #if (FLEXCAN_IP_FEATURE_HAS_PE_CLKSRC_SELECT == STD_ON)
        /* Select a source clock for the FlexCAN engine */
        FlexCAN_SetClkSrc(pBase, Flexcan_Ip_pData->is_pe_clock);
    c066:	9b01      	ldr	r3, [sp, #4]
    c068:	7e5b      	ldrb	r3, [r3, #25]
    c06a:	4619      	mov	r1, r3
    c06c:	9802      	ldr	r0, [sp, #8]
    c06e:	f7ff fee9 	bl	be44 <FlexCAN_SetClkSrc>
    #endif
        /* Enable FlexCAN Module need to perform SoftReset & ClearRam */
        pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    c072:	9b02      	ldr	r3, [sp, #8]
    c074:	681b      	ldr	r3, [r3, #0]
    c076:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    c07a:	9b02      	ldr	r3, [sp, #8]
    c07c:	601a      	str	r2, [r3, #0]
        /* Initialize FLEXCAN device */
        eResult = FlexCAN_Init(pBase);
    c07e:	9802      	ldr	r0, [sp, #8]
    c080:	f002 fe28 	bl	ecd4 <FlexCAN_Init>
    c084:	9005      	str	r0, [sp, #20]
        if (eResult != FLEXCAN_STATUS_SUCCESS)
    c086:	9b05      	ldr	r3, [sp, #20]
    c088:	2b00      	cmp	r3, #0
    c08a:	d006      	beq.n	c09a <FlexCAN_InitController+0x6e>
        {
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
    c08c:	9802      	ldr	r0, [sp, #8]
    c08e:	f002 fcbb 	bl	ea08 <FlexCAN_EnterFreezeMode>
            (void)FlexCAN_Disable(pBase);
    c092:	9802      	ldr	r0, [sp, #8]
    c094:	f002 fd82 	bl	eb9c <FlexCAN_Disable>
    c098:	e01d      	b.n	c0d6 <FlexCAN_InitController+0xaa>
            /* Disable the Protection again because is enabled by soft reset */
            FlexCAN_DisableMemErrorDetection(pBase);
        #endif

        #if defined(CAN_FEATURE_S32K1XX)
            if (TRUE == FlexCAN_IsFDAvailable(pBase))
    c09a:	9802      	ldr	r0, [sp, #8]
    c09c:	f002 fed4 	bl	ee48 <FlexCAN_IsFDAvailable>
    c0a0:	4603      	mov	r3, r0
    c0a2:	2b00      	cmp	r3, #0
    c0a4:	d007      	beq.n	c0b6 <FlexCAN_InitController+0x8a>
            {
        #endif /* defined(CAN_FEATURE_S32K1XX) */
                /* Enable/Disable FD and check FD was set as expected. Setting FD as enabled
                 * might fail if the current CAN instance does not support FD. */
                FlexCAN_SetFDEnabled(pBase, Flexcan_Ip_pData->fd_enable, Flexcan_Ip_pData->bitRateSwitch);
    c0a6:	9b01      	ldr	r3, [sp, #4]
    c0a8:	7e19      	ldrb	r1, [r3, #24]
    c0aa:	9b01      	ldr	r3, [sp, #4]
    c0ac:	7edb      	ldrb	r3, [r3, #27]
    c0ae:	461a      	mov	r2, r3
    c0b0:	9802      	ldr	r0, [sp, #8]
    c0b2:	f7ff fcdd 	bl	ba70 <FlexCAN_SetFDEnabled>
                }*/
        #if defined(CAN_FEATURE_S32K1XX)
            }
        #endif /* defined(CAN_FEATURE_S32K1XX) */
            /* configure depends on controller options. */
            FlexCAN_ConfigCtrlOptions(pBase, Flexcan_Ip_pData->ctrlOptions);
    c0b6:	9b01      	ldr	r3, [sp, #4]
    c0b8:	691b      	ldr	r3, [r3, #16]
    c0ba:	4619      	mov	r1, r3
    c0bc:	9802      	ldr	r0, [sp, #8]
    c0be:	f003 fdeb 	bl	fc98 <FlexCAN_ConfigCtrlOptions>
            /* reset Imask buffers */
            FlexCAN_ResetImaskBuff(Instance);
    c0c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c0c6:	4618      	mov	r0, r3
    c0c8:	f003 fe56 	bl	fd78 <FlexCAN_ResetImaskBuff>
            eResult = FlexCAN_InitCtroll(pBase, Flexcan_Ip_pData);
    c0cc:	9901      	ldr	r1, [sp, #4]
    c0ce:	9802      	ldr	r0, [sp, #8]
    c0d0:	f7ff ff7e 	bl	bfd0 <FlexCAN_InitCtroll>
    c0d4:	9005      	str	r0, [sp, #20]
        }
    }
    return eResult;
    c0d6:	9b05      	ldr	r3, [sp, #20]
}
    c0d8:	4618      	mov	r0, r3
    c0da:	b007      	add	sp, #28
    c0dc:	f85d fb04 	ldr.w	pc, [sp], #4

0000c0e0 <FlexCAN_InitBaudrate>:
 * Description   : Init baudrate for given controller.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_InitBaudrate(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    c0e0:	b500      	push	{lr}
    c0e2:	b083      	sub	sp, #12
    c0e4:	9001      	str	r0, [sp, #4]
    c0e6:	9100      	str	r1, [sp, #0]
    /* Enable the use of extended bit time definitions */
    FlexCAN_EnableExtCbt(pBase, Flexcan_Ip_pData->fd_enable);
    c0e8:	9b00      	ldr	r3, [sp, #0]
    c0ea:	7e1b      	ldrb	r3, [r3, #24]
    c0ec:	4619      	mov	r1, r3
    c0ee:	9801      	ldr	r0, [sp, #4]
    c0f0:	f7ff fe51 	bl	bd96 <FlexCAN_EnableExtCbt>
        /* Disable Enhanced CBT time segments */
        pBase->CTRL2 &= ~FLEXCAN_CTRL2_BTE_MASK;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set bit rate. */
        if (Flexcan_Ip_pData->fd_enable)
    c0f4:	9b00      	ldr	r3, [sp, #0]
    c0f6:	7e1b      	ldrb	r3, [r3, #24]
    c0f8:	2b00      	cmp	r3, #0
    c0fa:	d00c      	beq.n	c116 <FlexCAN_InitBaudrate+0x36>
        {
            /* Write Normal bit time configuration to CBT register */
            FlexCAN_SetExtendedTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    c0fc:	9b00      	ldr	r3, [sp, #0]
    c0fe:	331c      	adds	r3, #28
    c100:	4619      	mov	r1, r3
    c102:	9801      	ldr	r0, [sp, #4]
    c104:	f7ff fd94 	bl	bc30 <FlexCAN_SetExtendedTimeSegments>
            /* Write Data bit time configuration to FDCBT register */
            FlexCAN_SetFDTimeSegments(pBase, &Flexcan_Ip_pData->bitrate_cbt);
    c108:	9b00      	ldr	r3, [sp, #0]
    c10a:	3330      	adds	r3, #48	; 0x30
    c10c:	4619      	mov	r1, r3
    c10e:	9801      	ldr	r0, [sp, #4]
    c110:	f7ff fd2d 	bl	bb6e <FlexCAN_SetFDTimeSegments>
            /* Write Normal bit time configuration to CTRL1 register */
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
        }
#endif
    }
}
    c114:	e005      	b.n	c122 <FlexCAN_InitBaudrate+0x42>
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    c116:	9b00      	ldr	r3, [sp, #0]
    c118:	331c      	adds	r3, #28
    c11a:	4619      	mov	r1, r3
    c11c:	9801      	ldr	r0, [sp, #4]
    c11e:	f7ff fd5b 	bl	bbd8 <FlexCAN_SetTimeSegments>
}
    c122:	bf00      	nop
    c124:	b003      	add	sp, #12
    c126:	f85d fb04 	ldr.w	pc, [sp], #4

0000c12a <FlexCAN_ProccessLegacyRxFIFO>:
 * Description   : This function will process the enhanced RxFIFO in blocking mode.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_ProccessLegacyRxFIFO(uint8 u8Instance, uint32 u32TimeoutMs)
{
    c12a:	b500      	push	{lr}
    c12c:	b08d      	sub	sp, #52	; 0x34
    c12e:	4603      	mov	r3, r0
    c130:	9102      	str	r1, [sp, #8]
    c132:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    c136:	2300      	movs	r3, #0
    c138:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    c13a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c13e:	4a46      	ldr	r2, [pc, #280]	; (c258 <FlexCAN_ProccessLegacyRxFIFO+0x12e>)
    c140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c144:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    c146:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c14a:	4a44      	ldr	r2, [pc, #272]	; (c25c <FlexCAN_ProccessLegacyRxFIFO+0x132>)
    c14c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c150:	9307      	str	r3, [sp, #28]
    uint32 timeStart = 0U;
    c152:	2300      	movs	r3, #0
    c154:	9305      	str	r3, [sp, #20]
    uint32 timeElapsed = 0U;
    c156:	2300      	movs	r3, #0
    c158:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c15a:	9b02      	ldr	r3, [sp, #8]
    c15c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c160:	fb02 f303 	mul.w	r3, r2, r3
    c164:	2100      	movs	r1, #0
    c166:	4618      	mov	r0, r3
    c168:	f7f5 ff0a 	bl	1f80 <OsIf_MicrosToTicks>
    c16c:	9006      	str	r0, [sp, #24]
    uint32 u32intType = 0U;
    c16e:	2300      	movs	r3, #0
    c170:	9309      	str	r3, [sp, #36]	; 0x24

        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c172:	2000      	movs	r0, #0
    c174:	f7f5 feb8 	bl	1ee8 <OsIf_GetCounter>
    c178:	4603      	mov	r3, r0
    c17a:	9305      	str	r3, [sp, #20]

        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c17c:	e02a      	b.n	c1d4 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
        {
            if (FLEXCAN_RXFIFO_USING_POLLING == pState->transferType)
    c17e:	9b08      	ldr	r3, [sp, #32]
    c180:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    c184:	2b01      	cmp	r3, #1
    c186:	d115      	bne.n	c1b4 <FlexCAN_ProccessLegacyRxFIFO+0x8a>
            {
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    c188:	2307      	movs	r3, #7
    c18a:	9309      	str	r3, [sp, #36]	; 0x24
    c18c:	e00f      	b.n	c1ae <FlexCAN_ProccessLegacyRxFIFO+0x84>
                     u32intType >= FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE; \
                     u32intType--)
                {
                    if (FlexCAN_GetBuffStatusFlag(pBase, u32intType) != 0U)
    c18e:	9909      	ldr	r1, [sp, #36]	; 0x24
    c190:	9807      	ldr	r0, [sp, #28]
    c192:	f7ff fcd0 	bl	bb36 <FlexCAN_GetBuffStatusFlag>
    c196:	4603      	mov	r3, r0
    c198:	2b00      	cmp	r3, #0
    c19a:	d005      	beq.n	c1a8 <FlexCAN_ProccessLegacyRxFIFO+0x7e>
                    {
                        FlexCAN_IRQHandlerRxFIFO(u8Instance, u32intType);
    c19c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c1a0:	9909      	ldr	r1, [sp, #36]	; 0x24
    c1a2:	4618      	mov	r0, r3
    c1a4:	f000 fb06 	bl	c7b4 <FlexCAN_IRQHandlerRxFIFO>
                     u32intType--)
    c1a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c1aa:	3b01      	subs	r3, #1
    c1ac:	9309      	str	r3, [sp, #36]	; 0x24
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    c1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c1b0:	2b04      	cmp	r3, #4
    c1b2:	d8ec      	bhi.n	c18e <FlexCAN_ProccessLegacyRxFIFO+0x64>
                    }
                }
            }

            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c1b4:	ab05      	add	r3, sp, #20
    c1b6:	2100      	movs	r1, #0
    c1b8:	4618      	mov	r0, r3
    c1ba:	f7f5 feae 	bl	1f1a <OsIf_GetElapsed>
    c1be:	4602      	mov	r2, r0
    c1c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c1c2:	4413      	add	r3, r2
    c1c4:	930a      	str	r3, [sp, #40]	; 0x28
            if (timeElapsed >= mS2Ticks)
    c1c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c1c8:	9b06      	ldr	r3, [sp, #24]
    c1ca:	429a      	cmp	r2, r3
    c1cc:	d302      	bcc.n	c1d4 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
            {
                eResult = FLEXCAN_STATUS_TIMEOUT;
    c1ce:	2303      	movs	r3, #3
    c1d0:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    c1d2:	e003      	b.n	c1dc <FlexCAN_ProccessLegacyRxFIFO+0xb2>
        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c1d4:	9b08      	ldr	r3, [sp, #32]
    c1d6:	685b      	ldr	r3, [r3, #4]
    c1d8:	2b01      	cmp	r3, #1
    c1da:	d0d0      	beq.n	c17e <FlexCAN_ProccessLegacyRxFIFO+0x54>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == eResult) && (FLEXCAN_RXFIFO_USING_POLLING != pState->transferType))
    c1dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c1de:	2b03      	cmp	r3, #3
    c1e0:	d125      	bne.n	c22e <FlexCAN_ProccessLegacyRxFIFO+0x104>
    c1e2:	9b08      	ldr	r3, [sp, #32]
    c1e4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    c1e8:	2b01      	cmp	r3, #1
    c1ea:	d020      	beq.n	c22e <FlexCAN_ProccessLegacyRxFIFO+0x104>
        {
            /* Disable RX FIFO interrupts*/
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, pState->isIntActive);
    c1ec:	9b08      	ldr	r3, [sp, #32]
    c1ee:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c1f2:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c1f6:	9300      	str	r3, [sp, #0]
    c1f8:	2300      	movs	r3, #0
    c1fa:	2205      	movs	r2, #5
    c1fc:	9807      	ldr	r0, [sp, #28]
    c1fe:	f002 feef 	bl	efe0 <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, pState->isIntActive);
    c202:	9b08      	ldr	r3, [sp, #32]
    c204:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c208:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c20c:	9300      	str	r3, [sp, #0]
    c20e:	2300      	movs	r3, #0
    c210:	2206      	movs	r2, #6
    c212:	9807      	ldr	r0, [sp, #28]
    c214:	f002 fee4 	bl	efe0 <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, pState->isIntActive);
    c218:	9b08      	ldr	r3, [sp, #32]
    c21a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c21e:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c222:	9300      	str	r3, [sp, #0]
    c224:	2300      	movs	r3, #0
    c226:	2207      	movs	r2, #7
    c228:	9807      	ldr	r0, [sp, #28]
    c22a:	f002 fed9 	bl	efe0 <FlexCAN_SetMsgBuffIntCmd>
                (void)Dma_Ip_SetLogicChannelCommand(pState->rxFifoDMAChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
            }
#endif
        }

        switch (pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c22e:	9b08      	ldr	r3, [sp, #32]
    c230:	685b      	ldr	r3, [r3, #4]
    c232:	2b00      	cmp	r3, #0
    c234:	d005      	beq.n	c242 <FlexCAN_ProccessLegacyRxFIFO+0x118>
    c236:	2b01      	cmp	r3, #1
    c238:	d106      	bne.n	c248 <FlexCAN_ProccessLegacyRxFIFO+0x11e>
        {
            case FLEXCAN_MB_RX_BUSY:
                pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    c23a:	9b08      	ldr	r3, [sp, #32]
    c23c:	2200      	movs	r2, #0
    c23e:	605a      	str	r2, [r3, #4]
                break;
    c240:	e005      	b.n	c24e <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_IDLE:
                eResult = FLEXCAN_STATUS_SUCCESS;
    c242:	2300      	movs	r3, #0
    c244:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    c246:	e002      	b.n	c24e <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_DMA_ERROR:
                eResult = FLEXCAN_STATUS_ERROR;
                break;
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
            default:
                eResult = FLEXCAN_STATUS_ERROR;
    c248:	2301      	movs	r3, #1
    c24a:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    c24c:	bf00      	nop
        }

    return eResult;
    c24e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    c250:	4618      	mov	r0, r3
    c252:	b00d      	add	sp, #52	; 0x34
    c254:	f85d fb04 	ldr.w	pc, [sp], #4
    c258:	1fff935c 	.word	0x1fff935c
    c25c:	00018640 	.word	0x00018640

0000c260 <FlexCAN_StartRxMessageBufferData>:
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageBufferData(uint8 instance,
                                                              uint8 mb_idx,
                                                              Flexcan_Ip_MsgBuffType * data,
                                                              boolean isPolling
                                                             )
{
    c260:	b084      	sub	sp, #16
    c262:	9200      	str	r2, [sp, #0]
    c264:	461a      	mov	r2, r3
    c266:	4603      	mov	r3, r0
    c268:	f88d 3007 	strb.w	r3, [sp, #7]
    c26c:	460b      	mov	r3, r1
    c26e:	f88d 3006 	strb.w	r3, [sp, #6]
    c272:	4613      	mov	r3, r2
    c274:	f88d 3005 	strb.w	r3, [sp, #5]

    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    c278:	2300      	movs	r3, #0
    c27a:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    c27c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c280:	4a15      	ldr	r2, [pc, #84]	; (c2d8 <FlexCAN_StartRxMessageBufferData+0x78>)
    c282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c286:	9302      	str	r3, [sp, #8]
    }
    else
    {
#endif
        /* Start receiving mailbox */
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    c288:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c28c:	9a02      	ldr	r2, [sp, #8]
    c28e:	011b      	lsls	r3, r3, #4
    c290:	4413      	add	r3, r2
    c292:	3304      	adds	r3, #4
    c294:	681b      	ldr	r3, [r3, #0]
    c296:	2b00      	cmp	r3, #0
    c298:	d002      	beq.n	c2a0 <FlexCAN_StartRxMessageBufferData+0x40>
        {
            result = FLEXCAN_STATUS_BUSY;
    c29a:	2302      	movs	r3, #2
    c29c:	9303      	str	r3, [sp, #12]
    c29e:	e017      	b.n	c2d0 <FlexCAN_StartRxMessageBufferData+0x70>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_RX_BUSY;
    c2a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c2a4:	9a02      	ldr	r2, [sp, #8]
    c2a6:	011b      	lsls	r3, r3, #4
    c2a8:	4413      	add	r3, r2
    c2aa:	3304      	adds	r3, #4
    c2ac:	2201      	movs	r2, #1
    c2ae:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].pMBmessage = data;
    c2b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c2b4:	9a02      	ldr	r2, [sp, #8]
    c2b6:	011b      	lsls	r3, r3, #4
    c2b8:	4413      	add	r3, r2
    c2ba:	9a00      	ldr	r2, [sp, #0]
    c2bc:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = isPolling;
    c2be:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c2c2:	9a02      	ldr	r2, [sp, #8]
    c2c4:	011b      	lsls	r3, r3, #4
    c2c6:	4413      	add	r3, r2
    c2c8:	3308      	adds	r3, #8
    c2ca:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c2ce:	701a      	strb	r2, [r3, #0]
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    c2d0:	9b03      	ldr	r3, [sp, #12]
}
    c2d2:	4618      	mov	r0, r3
    c2d4:	b004      	add	sp, #16
    c2d6:	4770      	bx	lr
    c2d8:	1fff935c 	.word	0x1fff935c

0000c2dc <FlexCAN_StartSendData>:
                                                   uint8 mb_idx,
                                                   const Flexcan_Ip_DataInfoType * tx_info,
                                                   uint32 msg_id,
                                                   const uint8 * mb_data
                                                  )
{
    c2dc:	b500      	push	{lr}
    c2de:	b08f      	sub	sp, #60	; 0x3c
    c2e0:	9204      	str	r2, [sp, #16]
    c2e2:	9303      	str	r3, [sp, #12]
    c2e4:	4603      	mov	r3, r0
    c2e6:	f88d 3017 	strb.w	r3, [sp, #23]
    c2ea:	460b      	mov	r3, r1
    c2ec:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    c2f0:	2300      	movs	r3, #0
    c2f2:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[Flexcan_Ip_u8Instance];
    c2f4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c2f8:	4a38      	ldr	r2, [pc, #224]	; (c3dc <FlexCAN_StartSendData+0x100>)
    c2fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2fe:	930c      	str	r3, [sp, #48]	; 0x30
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    c300:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c304:	4a36      	ldr	r2, [pc, #216]	; (c3e0 <FlexCAN_StartSendData+0x104>)
    c306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c30a:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    c30c:	2300      	movs	r3, #0
    c30e:	930a      	str	r3, [sp, #40]	; 0x28
        eResult = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
    else
    {
#endif
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    c310:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c314:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c316:	011b      	lsls	r3, r3, #4
    c318:	4413      	add	r3, r2
    c31a:	3304      	adds	r3, #4
    c31c:	681b      	ldr	r3, [r3, #0]
    c31e:	2b00      	cmp	r3, #0
    c320:	d002      	beq.n	c328 <FlexCAN_StartSendData+0x4c>
        {
            eResult = FLEXCAN_STATUS_BUSY;
    c322:	2302      	movs	r3, #2
    c324:	930d      	str	r3, [sp, #52]	; 0x34
    c326:	e053      	b.n	c3d0 <FlexCAN_StartSendData+0xf4>
        }
        else
        {
            /* Clear message buffer flag */
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c328:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c32c:	4619      	mov	r1, r3
    c32e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c330:	f7ff fbee 	bl	bb10 <FlexCAN_ClearMsgBuffIntStatusFlag>

            state->mbs[mb_idx].state = FLEXCAN_MB_TX_BUSY;
    c334:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c338:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c33a:	011b      	lsls	r3, r3, #4
    c33c:	4413      	add	r3, r2
    c33e:	3304      	adds	r3, #4
    c340:	2202      	movs	r2, #2
    c342:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].time_stamp = 0U;
    c344:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c348:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c34a:	011b      	lsls	r3, r3, #4
    c34c:	4413      	add	r3, r2
    c34e:	330c      	adds	r3, #12
    c350:	2200      	movs	r2, #0
    c352:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = tx_info->is_polling;
    c354:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c358:	9a04      	ldr	r2, [sp, #16]
    c35a:	7b11      	ldrb	r1, [r2, #12]
    c35c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c35e:	011b      	lsls	r3, r3, #4
    c360:	4413      	add	r3, r2
    c362:	3308      	adds	r3, #8
    c364:	460a      	mov	r2, r1
    c366:	701a      	strb	r2, [r3, #0]
            state->mbs[mb_idx].isRemote = tx_info->is_remote;
    c368:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c36c:	9a04      	ldr	r2, [sp, #16]
    c36e:	7ad1      	ldrb	r1, [r2, #11]
    c370:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c372:	011b      	lsls	r3, r3, #4
    c374:	4413      	add	r3, r2
    c376:	3309      	adds	r3, #9
    c378:	460a      	mov	r2, r1
    c37a:	701a      	strb	r2, [r3, #0]

            cs.dataLen = tx_info->data_length;
    c37c:	9b04      	ldr	r3, [sp, #16]
    c37e:	685b      	ldr	r3, [r3, #4]
    c380:	9308      	str	r3, [sp, #32]

            cs.msgIdType = tx_info->msg_id_type;
    c382:	9b04      	ldr	r3, [sp, #16]
    c384:	681b      	ldr	r3, [r3, #0]
    c386:	9307      	str	r3, [sp, #28]

        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            cs.fd_enable = tx_info->fd_enable;
    c388:	9b04      	ldr	r3, [sp, #16]
    c38a:	7a1b      	ldrb	r3, [r3, #8]
    c38c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            cs.fd_padding = tx_info->fd_padding;
    c390:	9b04      	ldr	r3, [sp, #16]
    c392:	7a5b      	ldrb	r3, [r3, #9]
    c394:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
            cs.enable_brs = tx_info->enable_brs;
    c398:	9b04      	ldr	r3, [sp, #16]
    c39a:	7a9b      	ldrb	r3, [r3, #10]
    c39c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        #endif

            if (tx_info->is_remote)
    c3a0:	9b04      	ldr	r3, [sp, #16]
    c3a2:	7adb      	ldrb	r3, [r3, #11]
    c3a4:	2b00      	cmp	r3, #0
    c3a6:	d002      	beq.n	c3ae <FlexCAN_StartSendData+0xd2>
            {
                cs.code = (uint32)FLEXCAN_TX_REMOTE;
    c3a8:	231c      	movs	r3, #28
    c3aa:	9306      	str	r3, [sp, #24]
    c3ac:	e001      	b.n	c3b2 <FlexCAN_StartSendData+0xd6>
            }
            else
            {
                cs.code = (uint32)FLEXCAN_TX_DATA;
    c3ae:	230c      	movs	r3, #12
    c3b0:	9306      	str	r3, [sp, #24]
            }
            pMbAddr = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    c3b2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c3b6:	4619      	mov	r1, r3
    c3b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c3ba:	f002 fa89 	bl	e8d0 <FlexCAN_GetMsgBuffRegion>
    c3be:	900a      	str	r0, [sp, #40]	; 0x28
            FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, FALSE);
    c3c0:	a906      	add	r1, sp, #24
    c3c2:	2300      	movs	r3, #0
    c3c4:	9300      	str	r3, [sp, #0]
    c3c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c3c8:	9a03      	ldr	r2, [sp, #12]
    c3ca:	980a      	ldr	r0, [sp, #40]	; 0x28
    c3cc:	f002 ffd2 	bl	f374 <FlexCAN_SetTxMsgBuff>
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    c3d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    c3d2:	4618      	mov	r0, r3
    c3d4:	b00f      	add	sp, #60	; 0x3c
    c3d6:	f85d fb04 	ldr.w	pc, [sp], #4
    c3da:	bf00      	nop
    c3dc:	1fff935c 	.word	0x1fff935c
    c3e0:	00018640 	.word	0x00018640

0000c3e4 <FlexCAN_StartRxMessageFifoData>:
 * receiving data and enabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageFifoData(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    c3e4:	b500      	push	{lr}
    c3e6:	b089      	sub	sp, #36	; 0x24
    c3e8:	4603      	mov	r3, r0
    c3ea:	9102      	str	r1, [sp, #8]
    c3ec:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = NULL_PTR;
    c3f0:	2300      	movs	r3, #0
    c3f2:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StateType * state = NULL_PTR;
    c3f4:	2300      	movs	r3, #0
    c3f6:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    c3f8:	2300      	movs	r3, #0
    c3fa:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base = Flexcan_Ip_apxBase[instance];
    c3fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c400:	4a26      	ldr	r2, [pc, #152]	; (c49c <FlexCAN_StartRxMessageFifoData+0xb8>)
    c402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c406:	9306      	str	r3, [sp, #24]
    state = Flexcan_Ip_apxState[instance];
    c408:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c40c:	4a24      	ldr	r2, [pc, #144]	; (c4a0 <FlexCAN_StartRxMessageFifoData+0xbc>)
    c40e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c412:	9305      	str	r3, [sp, #20]
    #endif
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    /* Start receiving fifo */
    if (state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state == FLEXCAN_MB_RX_BUSY)
    c414:	9b05      	ldr	r3, [sp, #20]
    c416:	685b      	ldr	r3, [r3, #4]
    c418:	2b01      	cmp	r3, #1
    c41a:	d102      	bne.n	c422 <FlexCAN_StartRxMessageFifoData+0x3e>
    {
        eResult = FLEXCAN_STATUS_BUSY;
    c41c:	2302      	movs	r3, #2
    c41e:	9307      	str	r3, [sp, #28]
    c420:	e036      	b.n	c490 <FlexCAN_StartRxMessageFifoData+0xac>
    }
    else
    {
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_RX_BUSY;
    c422:	9b05      	ldr	r3, [sp, #20]
    c424:	2201      	movs	r2, #1
    c426:	605a      	str	r2, [r3, #4]
    if (FLEXCAN_RXFIFO_USING_POLLING == state->transferType)
    c428:	9b05      	ldr	r3, [sp, #20]
    c42a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    c42e:	2b01      	cmp	r3, #1
    c430:	d102      	bne.n	c438 <FlexCAN_StartRxMessageFifoData+0x54>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    c432:	9b05      	ldr	r3, [sp, #20]
    c434:	2201      	movs	r2, #1
    c436:	721a      	strb	r2, [r3, #8]
    }

    /* This will get filled by the interrupt handler */
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = data;
    c438:	9b05      	ldr	r3, [sp, #20]
    c43a:	9a02      	ldr	r2, [sp, #8]
    c43c:	601a      	str	r2, [r3, #0]

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    c43e:	9b05      	ldr	r3, [sp, #20]
    c440:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    c444:	2b00      	cmp	r3, #0
    c446:	d123      	bne.n	c490 <FlexCAN_StartRxMessageFifoData+0xac>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = FALSE;
    c448:	9b05      	ldr	r3, [sp, #20]
    c44a:	2200      	movs	r2, #0
    c44c:	721a      	strb	r2, [r3, #8]
        /* Enable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, TRUE, state->isIntActive);
    c44e:	9b05      	ldr	r3, [sp, #20]
    c450:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c454:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c458:	9300      	str	r3, [sp, #0]
    c45a:	2301      	movs	r3, #1
    c45c:	2206      	movs	r2, #6
    c45e:	9806      	ldr	r0, [sp, #24]
    c460:	f002 fdbe 	bl	efe0 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, TRUE, state->isIntActive);
    c464:	9b05      	ldr	r3, [sp, #20]
    c466:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c46a:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c46e:	9300      	str	r3, [sp, #0]
    c470:	2301      	movs	r3, #1
    c472:	2207      	movs	r2, #7
    c474:	9806      	ldr	r0, [sp, #24]
    c476:	f002 fdb3 	bl	efe0 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, TRUE, state->isIntActive);
    c47a:	9b05      	ldr	r3, [sp, #20]
    c47c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c480:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c484:	9300      	str	r3, [sp, #0]
    c486:	2301      	movs	r3, #1
    c488:	2205      	movs	r2, #5
    c48a:	9806      	ldr	r0, [sp, #24]
    c48c:	f002 fda8 	bl	efe0 <FlexCAN_SetMsgBuffIntCmd>
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    c490:	9b07      	ldr	r3, [sp, #28]
}
    c492:	4618      	mov	r0, r3
    c494:	b009      	add	sp, #36	; 0x24
    c496:	f85d fb04 	ldr.w	pc, [sp], #4
    c49a:	bf00      	nop
    c49c:	00018640 	.word	0x00018640
    c4a0:	1fff935c 	.word	0x1fff935c

0000c4a4 <FlexCAN_IRQHandlerRxMB>:
 *
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerRxMB(uint8 instance, uint32 mb_idx)
{
    c4a4:	b510      	push	{r4, lr}
    c4a6:	b09e      	sub	sp, #120	; 0x78
    c4a8:	4603      	mov	r3, r0
    c4aa:	9102      	str	r1, [sp, #8]
    c4ac:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    c4b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c4b4:	4a70      	ldr	r2, [pc, #448]	; (c678 <FlexCAN_IRQHandlerRxMB+0x1d4>)
    c4b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4ba:	931c      	str	r3, [sp, #112]	; 0x70
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    c4bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c4c0:	4a6e      	ldr	r2, [pc, #440]	; (c67c <FlexCAN_IRQHandlerRxMB+0x1d8>)
    c4c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4c6:	931b      	str	r3, [sp, #108]	; 0x6c
    Flexcan_Ip_MsgBuffType data;
    boolean bCurrentIntStat = FALSE;
    c4c8:	2300      	movs	r3, #0
    c4ca:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[mb_idx].pMBmessage  */
    if (NULL_PTR == state->mbs[mb_idx].pMBmessage)
    c4ce:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c4d0:	9b02      	ldr	r3, [sp, #8]
    c4d2:	011b      	lsls	r3, r3, #4
    c4d4:	4413      	add	r3, r2
    c4d6:	681b      	ldr	r3, [r3, #0]
    c4d8:	2b00      	cmp	r3, #0
    c4da:	d105      	bne.n	c4e8 <FlexCAN_IRQHandlerRxMB+0x44>
    {
        state->mbs[mb_idx].pMBmessage = &data;
    c4dc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c4de:	9b02      	ldr	r3, [sp, #8]
    c4e0:	011b      	lsls	r3, r3, #4
    c4e2:	4413      	add	r3, r2
    c4e4:	aa05      	add	r2, sp, #20
    c4e6:	601a      	str	r2, [r3, #0]
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    boolean bIsCriticalSectionNeeded = FALSE;
    c4e8:	2300      	movs	r3, #0
    c4ea:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77

    /* Expectation: the sequence will not be interrupted when it already in interupt context */
    if (TRUE == state->mbs[mb_idx].isPolling)
    c4ee:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c4f0:	9b02      	ldr	r3, [sp, #8]
    c4f2:	011b      	lsls	r3, r3, #4
    c4f4:	4413      	add	r3, r2
    c4f6:	3308      	adds	r3, #8
    c4f8:	781b      	ldrb	r3, [r3, #0]
    c4fa:	2b00      	cmp	r3, #0
    c4fc:	d008      	beq.n	c510 <FlexCAN_IRQHandlerRxMB+0x6c>
        if ((state->bIsLegacyFifoEn ||  state->bIsEnhancedFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #else
        if ((state->bIsLegacyFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    #elif defined (ERR_IPV_FLEXCAN_E050246)
        if (state->bIsLegacyFifoEn)
    c4fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c500:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    c504:	2b00      	cmp	r3, #0
    c506:	d003      	beq.n	c510 <FlexCAN_IRQHandlerRxMB+0x6c>
    #endif
        {
            bIsCriticalSectionNeeded = TRUE;
    c508:	2301      	movs	r3, #1
    c50a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
            /* Disable all IRQs */
            OsIf_SuspendAllInterrupts();
    c50e:	b672      	cpsid	i
        }
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    /* Lock RX message buffer and RX FIFO*/
    FlexCAN_LockRxMsgBuff(base, mb_idx);
    c510:	9902      	ldr	r1, [sp, #8]
    c512:	981c      	ldr	r0, [sp, #112]	; 0x70
    c514:	f002 fd55 	bl	efc2 <FlexCAN_LockRxMsgBuff>

    /* Get RX MB field values*/
    FlexCAN_GetMsgBuff(base, mb_idx, state->mbs[mb_idx].pMBmessage);
    c518:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c51a:	9b02      	ldr	r3, [sp, #8]
    c51c:	011b      	lsls	r3, r3, #4
    c51e:	4413      	add	r3, r2
    c520:	681b      	ldr	r3, [r3, #0]
    c522:	461a      	mov	r2, r3
    c524:	9902      	ldr	r1, [sp, #8]
    c526:	981c      	ldr	r0, [sp, #112]	; 0x70
    c528:	f002 fe7a 	bl	f220 <FlexCAN_GetMsgBuff>

    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c52c:	9902      	ldr	r1, [sp, #8]
    c52e:	981c      	ldr	r0, [sp, #112]	; 0x70
    c530:	f7ff faee 	bl	bb10 <FlexCAN_ClearMsgBuffIntStatusFlag>

#if defined (ERR_IPV_FLEXCAN_E050246)
    /* the CODE field is updated with an incorrect value when MBx is locked by software for more than 20 CAN bit times and FIFO enable.
    When the CODE field is corrupted, it's probably updated with any value that is invalid. Except EMPTY, FULL and OVERRUN other values can not make MB unlocked and move-in process. */
    if ((state->bIsLegacyFifoEn) && \
    c534:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c536:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    c53a:	2b00      	cmp	r3, #0
    c53c:	d032      	beq.n	c5a4 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    c53e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c540:	9b02      	ldr	r3, [sp, #8]
    c542:	011b      	lsls	r3, r3, #4
    c544:	4413      	add	r3, r2
    c546:	681b      	ldr	r3, [r3, #0]
    c548:	681b      	ldr	r3, [r3, #0]
    c54a:	0e1b      	lsrs	r3, r3, #24
    c54c:	f003 030f 	and.w	r3, r3, #15
    if ((state->bIsLegacyFifoEn) && \
    c550:	2b02      	cmp	r3, #2
    c552:	d027      	beq.n	c5a4 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    c554:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c556:	9b02      	ldr	r3, [sp, #8]
    c558:	011b      	lsls	r3, r3, #4
    c55a:	4413      	add	r3, r2
    c55c:	681b      	ldr	r3, [r3, #0]
    c55e:	681b      	ldr	r3, [r3, #0]
    c560:	0e1b      	lsrs	r3, r3, #24
    c562:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    c566:	2b04      	cmp	r3, #4
    c568:	d01c      	beq.n	c5a4 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_OVERRUN != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)))
    c56a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c56c:	9b02      	ldr	r3, [sp, #8]
    c56e:	011b      	lsls	r3, r3, #4
    c570:	4413      	add	r3, r2
    c572:	681b      	ldr	r3, [r3, #0]
    c574:	681b      	ldr	r3, [r3, #0]
    c576:	0e1b      	lsrs	r3, r3, #24
    c578:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    c57c:	2b06      	cmp	r3, #6
    c57e:	d011      	beq.n	c5a4 <FlexCAN_IRQHandlerRxMB+0x100>
    {
        /* Update the cs code for next sequence move in MB.
        A CPU write into the C/S word also unlocks the MB */
        volatile uint32 *flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    c580:	9902      	ldr	r1, [sp, #8]
    c582:	981c      	ldr	r0, [sp, #112]	; 0x70
    c584:	f002 f9a4 	bl	e8d0 <FlexCAN_GetMsgBuffRegion>
    c588:	9019      	str	r0, [sp, #100]	; 0x64
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    c58a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c58c:	681b      	ldr	r3, [r3, #0]
    c58e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    c592:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c594:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (((uint32)FLEXCAN_RX_EMPTY) << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    c596:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c598:	681b      	ldr	r3, [r3, #0]
    c59a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
    c59e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c5a0:	601a      	str	r2, [r3, #0]
    {
    c5a2:	e002      	b.n	c5aa <FlexCAN_IRQHandlerRxMB+0x106>
    }
    else
#endif
    {
    /* Unlock RX message buffer and RX FIFO*/
    FlexCAN_UnlockRxMsgBuff(base);
    c5a4:	981c      	ldr	r0, [sp, #112]	; 0x70
    c5a6:	f7ff faac 	bl	bb02 <FlexCAN_UnlockRxMsgBuff>
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    /* To ensure that interrupts are resumed when they are suspended */
    if (TRUE == bIsCriticalSectionNeeded)
    c5aa:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
    c5ae:	2b00      	cmp	r3, #0
    c5b0:	d000      	beq.n	c5b4 <FlexCAN_IRQHandlerRxMB+0x110>
    {
        /* Enable all IRQs */
        OsIf_ResumeAllInterrupts();
    c5b2:	b662      	cpsie	i
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    c5b4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c5b6:	9b02      	ldr	r3, [sp, #8]
    c5b8:	011b      	lsls	r3, r3, #4
    c5ba:	4413      	add	r3, r2
    c5bc:	3304      	adds	r3, #4
    c5be:	2200      	movs	r2, #0
    c5c0:	601a      	str	r2, [r3, #0]

    bCurrentIntStat = state->mbs[mb_idx].isPolling;
    c5c2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c5c4:	9b02      	ldr	r3, [sp, #8]
    c5c6:	011b      	lsls	r3, r3, #4
    c5c8:	4413      	add	r3, r2
    c5ca:	3308      	adds	r3, #8
    c5cc:	781b      	ldrb	r3, [r3, #0]
    c5ce:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* Invoke callback */
    if (state->callback != NULL_PTR)
    c5d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c5d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c5d8:	2b00      	cmp	r3, #0
    c5da:	d008      	beq.n	c5ee <FlexCAN_IRQHandlerRxMB+0x14a>
    {
        state->callback(instance, FLEXCAN_EVENT_RX_COMPLETE, mb_idx, state);
    c5dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c5de:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c5e2:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c5e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c5e8:	9a02      	ldr	r2, [sp, #8]
    c5ea:	2100      	movs	r1, #0
    c5ec:	47a0      	blx	r4
    }

    if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state) && (FALSE == state->mbs[mb_idx].isPolling))
    c5ee:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c5f0:	9b02      	ldr	r3, [sp, #8]
    c5f2:	011b      	lsls	r3, r3, #4
    c5f4:	4413      	add	r3, r2
    c5f6:	3304      	adds	r3, #4
    c5f8:	681b      	ldr	r3, [r3, #0]
    c5fa:	2b00      	cmp	r3, #0
    c5fc:	d11e      	bne.n	c63c <FlexCAN_IRQHandlerRxMB+0x198>
    c5fe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c600:	9b02      	ldr	r3, [sp, #8]
    c602:	011b      	lsls	r3, r3, #4
    c604:	4413      	add	r3, r2
    c606:	3308      	adds	r3, #8
    c608:	781b      	ldrb	r3, [r3, #0]
    c60a:	f083 0301 	eor.w	r3, r3, #1
    c60e:	b2db      	uxtb	r3, r3
    c610:	2b00      	cmp	r3, #0
    c612:	d013      	beq.n	c63c <FlexCAN_IRQHandlerRxMB+0x198>
    {
        /* callback is not called, need to reset to default value */
        state->mbs[mb_idx].isPolling = TRUE;
    c614:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c616:	9b02      	ldr	r3, [sp, #8]
    c618:	011b      	lsls	r3, r3, #4
    c61a:	4413      	add	r3, r2
    c61c:	3308      	adds	r3, #8
    c61e:	2201      	movs	r2, #1
    c620:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    c622:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c624:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c628:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c62c:	9300      	str	r3, [sp, #0]
    c62e:	2300      	movs	r3, #0
    c630:	9a02      	ldr	r2, [sp, #8]
    c632:	981c      	ldr	r0, [sp, #112]	; 0x70
    c634:	f002 fcd4 	bl	efe0 <FlexCAN_SetMsgBuffIntCmd>
    c638:	bf00      	nop
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    c63a:	e019      	b.n	c670 <FlexCAN_IRQHandlerRxMB+0x1cc>
    else if ((FALSE == bCurrentIntStat) && (TRUE == state->mbs[mb_idx].isPolling))
    c63c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
    c640:	f083 0301 	eor.w	r3, r3, #1
    c644:	b2db      	uxtb	r3, r3
    c646:	2b00      	cmp	r3, #0
    c648:	d012      	beq.n	c670 <FlexCAN_IRQHandlerRxMB+0x1cc>
    c64a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c64c:	9b02      	ldr	r3, [sp, #8]
    c64e:	011b      	lsls	r3, r3, #4
    c650:	4413      	add	r3, r2
    c652:	3308      	adds	r3, #8
    c654:	781b      	ldrb	r3, [r3, #0]
    c656:	2b00      	cmp	r3, #0
    c658:	d00a      	beq.n	c670 <FlexCAN_IRQHandlerRxMB+0x1cc>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    c65a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c65c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c660:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c664:	9300      	str	r3, [sp, #0]
    c666:	2300      	movs	r3, #0
    c668:	9a02      	ldr	r2, [sp, #8]
    c66a:	981c      	ldr	r0, [sp, #112]	; 0x70
    c66c:	f002 fcb8 	bl	efe0 <FlexCAN_SetMsgBuffIntCmd>
}
    c670:	bf00      	nop
    c672:	b01e      	add	sp, #120	; 0x78
    c674:	bd10      	pop	{r4, pc}
    c676:	bf00      	nop
    c678:	00018640 	.word	0x00018640
    c67c:	1fff935c 	.word	0x1fff935c

0000c680 <FlexCAN_IRQHandlerTxMB>:
 * note: just using in interrupt mode
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerTxMB(uint8 u8Instance, uint32 u32MbIdx)
{
    c680:	b510      	push	{r4, lr}
    c682:	b09a      	sub	sp, #104	; 0x68
    c684:	4603      	mov	r3, r0
    c686:	9102      	str	r1, [sp, #8]
    c688:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    c68c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c690:	4a46      	ldr	r2, [pc, #280]	; (c7ac <FlexCAN_IRQHandlerTxMB+0x12c>)
    c692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c696:	9319      	str	r3, [sp, #100]	; 0x64
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    c698:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c69c:	4a44      	ldr	r2, [pc, #272]	; (c7b0 <FlexCAN_IRQHandlerTxMB+0x130>)
    c69e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6a2:	9318      	str	r3, [sp, #96]	; 0x60
    Flexcan_Ip_MsgBuffType mb;
    mb.cs = 0U;
    c6a4:	2300      	movs	r3, #0
    c6a6:	9304      	str	r3, [sp, #16]
    mb.time_stamp = 0U;
    c6a8:	2300      	movs	r3, #0
    c6aa:	9317      	str	r3, [sp, #92]	; 0x5c
    if (pState->mbs[u32MbIdx].isRemote)
    c6ac:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c6ae:	9b02      	ldr	r3, [sp, #8]
    c6b0:	011b      	lsls	r3, r3, #4
    c6b2:	4413      	add	r3, r2
    c6b4:	3309      	adds	r3, #9
    c6b6:	781b      	ldrb	r3, [r3, #0]
    c6b8:	2b00      	cmp	r3, #0
    c6ba:	d01e      	beq.n	c6fa <FlexCAN_IRQHandlerTxMB+0x7a>
    {
        FlexCAN_LockRxMsgBuff(pBase, u32MbIdx);
    c6bc:	9902      	ldr	r1, [sp, #8]
    c6be:	9819      	ldr	r0, [sp, #100]	; 0x64
    c6c0:	f002 fc7f 	bl	efc2 <FlexCAN_LockRxMsgBuff>
        FlexCAN_GetMsgBuff(pBase, u32MbIdx, &mb);
    c6c4:	ab04      	add	r3, sp, #16
    c6c6:	461a      	mov	r2, r3
    c6c8:	9902      	ldr	r1, [sp, #8]
    c6ca:	9819      	ldr	r0, [sp, #100]	; 0x64
    c6cc:	f002 fda8 	bl	f220 <FlexCAN_GetMsgBuff>
        FlexCAN_UnlockRxMsgBuff(pBase);
    c6d0:	9819      	ldr	r0, [sp, #100]	; 0x64
    c6d2:	f7ff fa16 	bl	bb02 <FlexCAN_UnlockRxMsgBuff>
        pState->mbs[u32MbIdx].time_stamp = mb.time_stamp;
    c6d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    c6d8:	9918      	ldr	r1, [sp, #96]	; 0x60
    c6da:	9b02      	ldr	r3, [sp, #8]
    c6dc:	011b      	lsls	r3, r3, #4
    c6de:	440b      	add	r3, r1
    c6e0:	330c      	adds	r3, #12
    c6e2:	601a      	str	r2, [r3, #0]
        /* If the frame was a remote frame, clear the flag only if the response was
        * not received yet. If the response was received, leave the flag set in order
        * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
        if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    c6e4:	9b04      	ldr	r3, [sp, #16]
    c6e6:	0e1b      	lsrs	r3, r3, #24
    c6e8:	f003 030f 	and.w	r3, r3, #15
    c6ec:	2b04      	cmp	r3, #4
    c6ee:	d116      	bne.n	c71e <FlexCAN_IRQHandlerTxMB+0x9e>
        {
            FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    c6f0:	9902      	ldr	r1, [sp, #8]
    c6f2:	9819      	ldr	r0, [sp, #100]	; 0x64
    c6f4:	f7ff fa0c 	bl	bb10 <FlexCAN_ClearMsgBuffIntStatusFlag>
    c6f8:	e011      	b.n	c71e <FlexCAN_IRQHandlerTxMB+0x9e>
        }
    }
    else
    {
        pState->mbs[u32MbIdx].time_stamp = FlexCAN_GetMsgBuffTimestamp(pBase, u32MbIdx);
    c6fa:	9902      	ldr	r1, [sp, #8]
    c6fc:	9819      	ldr	r0, [sp, #100]	; 0x64
    c6fe:	f002 fd7b 	bl	f1f8 <FlexCAN_GetMsgBuffTimestamp>
    c702:	4601      	mov	r1, r0
    c704:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c706:	9b02      	ldr	r3, [sp, #8]
    c708:	011b      	lsls	r3, r3, #4
    c70a:	4413      	add	r3, r2
    c70c:	330c      	adds	r3, #12
    c70e:	6019      	str	r1, [r3, #0]
        FlexCAN_UnlockRxMsgBuff(pBase);
    c710:	9819      	ldr	r0, [sp, #100]	; 0x64
    c712:	f7ff f9f6 	bl	bb02 <FlexCAN_UnlockRxMsgBuff>
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    c716:	9902      	ldr	r1, [sp, #8]
    c718:	9819      	ldr	r0, [sp, #100]	; 0x64
    c71a:	f7ff f9f9 	bl	bb10 <FlexCAN_ClearMsgBuffIntStatusFlag>
    }

    pState->mbs[u32MbIdx].state = FLEXCAN_MB_IDLE;
    c71e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c720:	9b02      	ldr	r3, [sp, #8]
    c722:	011b      	lsls	r3, r3, #4
    c724:	4413      	add	r3, r2
    c726:	3304      	adds	r3, #4
    c728:	2200      	movs	r2, #0
    c72a:	601a      	str	r2, [r3, #0]

    /* Invoke callback */
    if (pState->callback != NULL_PTR)
    c72c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c72e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c732:	2b00      	cmp	r3, #0
    c734:	d008      	beq.n	c748 <FlexCAN_IRQHandlerTxMB+0xc8>
    {
        pState->callback(u8Instance, FLEXCAN_EVENT_TX_COMPLETE, u32MbIdx, pState);
    c736:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c738:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c73c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c740:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c742:	9a02      	ldr	r2, [sp, #8]
    c744:	2104      	movs	r1, #4
    c746:	47a0      	blx	r4
    }

    if (FLEXCAN_MB_IDLE == pState->mbs[u32MbIdx].state)
    c748:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c74a:	9b02      	ldr	r3, [sp, #8]
    c74c:	011b      	lsls	r3, r3, #4
    c74e:	4413      	add	r3, r2
    c750:	3304      	adds	r3, #4
    c752:	681b      	ldr	r3, [r3, #0]
    c754:	2b00      	cmp	r3, #0
    c756:	d112      	bne.n	c77e <FlexCAN_IRQHandlerTxMB+0xfe>
    {
        /* callback is not called, need to reset to default value */
        pState->mbs[u32MbIdx].isPolling = TRUE;
    c758:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c75a:	9b02      	ldr	r3, [sp, #8]
    c75c:	011b      	lsls	r3, r3, #4
    c75e:	4413      	add	r3, r2
    c760:	3308      	adds	r3, #8
    c762:	2201      	movs	r2, #1
    c764:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    c766:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c768:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c76c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c770:	9300      	str	r3, [sp, #0]
    c772:	2300      	movs	r3, #0
    c774:	9a02      	ldr	r2, [sp, #8]
    c776:	9819      	ldr	r0, [sp, #100]	; 0x64
    c778:	f002 fc32 	bl	efe0 <FlexCAN_SetMsgBuffIntCmd>
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    c77c:	e012      	b.n	c7a4 <FlexCAN_IRQHandlerTxMB+0x124>
    else if (TRUE == pState->mbs[u32MbIdx].isPolling)
    c77e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c780:	9b02      	ldr	r3, [sp, #8]
    c782:	011b      	lsls	r3, r3, #4
    c784:	4413      	add	r3, r2
    c786:	3308      	adds	r3, #8
    c788:	781b      	ldrb	r3, [r3, #0]
    c78a:	2b00      	cmp	r3, #0
    c78c:	d00a      	beq.n	c7a4 <FlexCAN_IRQHandlerTxMB+0x124>
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    c78e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c790:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c794:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c798:	9300      	str	r3, [sp, #0]
    c79a:	2300      	movs	r3, #0
    c79c:	9a02      	ldr	r2, [sp, #8]
    c79e:	9819      	ldr	r0, [sp, #100]	; 0x64
    c7a0:	f002 fc1e 	bl	efe0 <FlexCAN_SetMsgBuffIntCmd>
}
    c7a4:	bf00      	nop
    c7a6:	b01a      	add	sp, #104	; 0x68
    c7a8:	bd10      	pop	{r4, pc}
    c7aa:	bf00      	nop
    c7ac:	00018640 	.word	0x00018640
    c7b0:	1fff935c 	.word	0x1fff935c

0000c7b4 <FlexCAN_IRQHandlerRxFIFO>:
 * Function Name : FlexCAN_IRQHandlerRxFIFO
 * Description   : Process IRQHandler in case of RxFIFO mode selection for CAN interface.
 *
 *END**************************************************************************/
static inline void FlexCAN_IRQHandlerRxFIFO(uint8 instance, uint32 mb_idx)
{
    c7b4:	b510      	push	{r4, lr}
    c7b6:	b098      	sub	sp, #96	; 0x60
    c7b8:	4603      	mov	r3, r0
    c7ba:	9100      	str	r1, [sp, #0]
    c7bc:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    c7c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c7c4:	4a3c      	ldr	r2, [pc, #240]	; (c8b8 <FlexCAN_IRQHandlerRxFIFO+0x104>)
    c7c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7ca:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    c7cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c7d0:	4a3a      	ldr	r2, [pc, #232]	; (c8bc <FlexCAN_IRQHandlerRxFIFO+0x108>)
    c7d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7d6:	9316      	str	r3, [sp, #88]	; 0x58
    Flexcan_Ip_MsgBuffType data;

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage  */
    if (NULL_PTR == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage)
    c7d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7da:	681b      	ldr	r3, [r3, #0]
    c7dc:	2b00      	cmp	r3, #0
    c7de:	d102      	bne.n	c7e6 <FlexCAN_IRQHandlerRxFIFO+0x32>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = &data;
    c7e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7e2:	aa02      	add	r2, sp, #8
    c7e4:	601a      	str	r2, [r3, #0]
    }
    switch (mb_idx)
    c7e6:	9b00      	ldr	r3, [sp, #0]
    c7e8:	2b07      	cmp	r3, #7
    c7ea:	d048      	beq.n	c87e <FlexCAN_IRQHandlerRxFIFO+0xca>
    c7ec:	9b00      	ldr	r3, [sp, #0]
    c7ee:	2b07      	cmp	r3, #7
    c7f0:	d858      	bhi.n	c8a4 <FlexCAN_IRQHandlerRxFIFO+0xf0>
    c7f2:	9b00      	ldr	r3, [sp, #0]
    c7f4:	2b05      	cmp	r3, #5
    c7f6:	d003      	beq.n	c800 <FlexCAN_IRQHandlerRxFIFO+0x4c>
    c7f8:	9b00      	ldr	r3, [sp, #0]
    c7fa:	2b06      	cmp	r3, #6
    c7fc:	d02c      	beq.n	c858 <FlexCAN_IRQHandlerRxFIFO+0xa4>
            }

            break;
        default:
            /* Do Nothing */
            break;
    c7fe:	e051      	b.n	c8a4 <FlexCAN_IRQHandlerRxFIFO+0xf0>
            if (FLEXCAN_MB_RX_BUSY == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c800:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c802:	685b      	ldr	r3, [r3, #4]
    c804:	2b01      	cmp	r3, #1
    c806:	d14f      	bne.n	c8a8 <FlexCAN_IRQHandlerRxFIFO+0xf4>
                FlexCAN_ReadRxFifo(base, state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage);
    c808:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c80a:	681b      	ldr	r3, [r3, #0]
    c80c:	4619      	mov	r1, r3
    c80e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    c810:	f003 f98d 	bl	fb2e <FlexCAN_ReadRxFifo>
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c814:	9900      	ldr	r1, [sp, #0]
    c816:	9817      	ldr	r0, [sp, #92]	; 0x5c
    c818:	f7ff f97a 	bl	bb10 <FlexCAN_ClearMsgBuffIntStatusFlag>
                state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    c81c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c81e:	2200      	movs	r2, #0
    c820:	605a      	str	r2, [r3, #4]
                if (state->callback != NULL_PTR)
    c822:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c824:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c828:	2b00      	cmp	r3, #0
    c82a:	d008      	beq.n	c83e <FlexCAN_IRQHandlerRxFIFO+0x8a>
                    state->callback(instance, FLEXCAN_EVENT_RXFIFO_COMPLETE, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    c82c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c82e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c832:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c836:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c838:	2200      	movs	r2, #0
    c83a:	2101      	movs	r1, #1
    c83c:	47a0      	blx	r4
                if (FLEXCAN_MB_IDLE == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c83e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c840:	685b      	ldr	r3, [r3, #4]
    c842:	2b00      	cmp	r3, #0
    c844:	d130      	bne.n	c8a8 <FlexCAN_IRQHandlerRxFIFO+0xf4>
                    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    c846:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c848:	2201      	movs	r2, #1
    c84a:	721a      	strb	r2, [r3, #8]
                    FlexCAN_CompleteRxMessageFifoData(instance);
    c84c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c850:	4618      	mov	r0, r3
    c852:	f000 fc61 	bl	d118 <FlexCAN_CompleteRxMessageFifoData>
            break;
    c856:	e027      	b.n	c8a8 <FlexCAN_IRQHandlerRxFIFO+0xf4>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c858:	9900      	ldr	r1, [sp, #0]
    c85a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    c85c:	f7ff f958 	bl	bb10 <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    c860:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c862:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c866:	2b00      	cmp	r3, #0
    c868:	d020      	beq.n	c8ac <FlexCAN_IRQHandlerRxFIFO+0xf8>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_WARNING, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    c86a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c86c:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c870:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c874:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c876:	2200      	movs	r2, #0
    c878:	2102      	movs	r1, #2
    c87a:	47a0      	blx	r4
            break;
    c87c:	e016      	b.n	c8ac <FlexCAN_IRQHandlerRxFIFO+0xf8>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c87e:	9900      	ldr	r1, [sp, #0]
    c880:	9817      	ldr	r0, [sp, #92]	; 0x5c
    c882:	f7ff f945 	bl	bb10 <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    c886:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c888:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c88c:	2b00      	cmp	r3, #0
    c88e:	d00f      	beq.n	c8b0 <FlexCAN_IRQHandlerRxFIFO+0xfc>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_OVERFLOW, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    c890:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c892:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c896:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c89a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c89c:	2200      	movs	r2, #0
    c89e:	2103      	movs	r1, #3
    c8a0:	47a0      	blx	r4
            break;
    c8a2:	e005      	b.n	c8b0 <FlexCAN_IRQHandlerRxFIFO+0xfc>
            break;
    c8a4:	bf00      	nop
    c8a6:	e004      	b.n	c8b2 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    c8a8:	bf00      	nop
    c8aa:	e002      	b.n	c8b2 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    c8ac:	bf00      	nop
    c8ae:	e000      	b.n	c8b2 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    c8b0:	bf00      	nop
    }
}
    c8b2:	bf00      	nop
    c8b4:	b018      	add	sp, #96	; 0x60
    c8b6:	bd10      	pop	{r4, pc}
    c8b8:	00018640 	.word	0x00018640
    c8bc:	1fff935c 	.word	0x1fff935c

0000c8c0 <FlexCAN_AbortTxTransfer>:
 * Description   : Abort transfer for Tx buffer.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_AbortTxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    c8c0:	b500      	push	{lr}
    c8c2:	b08b      	sub	sp, #44	; 0x2c
    c8c4:	4603      	mov	r3, r0
    c8c6:	460a      	mov	r2, r1
    c8c8:	f88d 3007 	strb.w	r3, [sp, #7]
    c8cc:	4613      	mov	r3, r2
    c8ce:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    c8d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c8d6:	4a3c      	ldr	r2, [pc, #240]	; (c9c8 <FlexCAN_AbortTxTransfer+0x108>)
    c8d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8dc:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    c8de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c8e2:	4a3a      	ldr	r2, [pc, #232]	; (c9cc <FlexCAN_AbortTxTransfer+0x10c>)
    c8e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8e8:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    c8ea:	2300      	movs	r3, #0
    c8ec:	9309      	str	r3, [sp, #36]	; 0x24

    uint32 timeStart = 0U;
    c8ee:	2300      	movs	r3, #0
    c8f0:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    c8f2:	2300      	movs	r3, #0
    c8f4:	9308      	str	r3, [sp, #32]
    uint32 flexcan_mb_config = 0;
    c8f6:	2300      	movs	r3, #0
    c8f8:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = 0U;
    c8fa:	2300      	movs	r3, #0
    c8fc:	9304      	str	r3, [sp, #16]
    volatile uint32 * flexcan_mb = NULL_PTR;
    c8fe:	2300      	movs	r3, #0
    c900:	9303      	str	r3, [sp, #12]

    flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    c902:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c906:	4619      	mov	r1, r3
    c908:	9807      	ldr	r0, [sp, #28]
    c90a:	f001 ffe1 	bl	e8d0 <FlexCAN_GetMsgBuffRegion>
    c90e:	9003      	str	r0, [sp, #12]
    flexcan_mb_config = * flexcan_mb;
    c910:	9b03      	ldr	r3, [sp, #12]
    c912:	681b      	ldr	r3, [r3, #0]
    c914:	9305      	str	r3, [sp, #20]
    /* Reset the code */
    flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    c916:	9b05      	ldr	r3, [sp, #20]
    c918:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    c91c:	9305      	str	r3, [sp, #20]
    flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    c91e:	9b05      	ldr	r3, [sp, #20]
    c920:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    c924:	9305      	str	r3, [sp, #20]
    *flexcan_mb = flexcan_mb_config;
    c926:	9b03      	ldr	r3, [sp, #12]
    c928:	9a05      	ldr	r2, [sp, #20]
    c92a:	601a      	str	r2, [r3, #0]

    /* Wait to finish abort operation */
    uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c92c:	2100      	movs	r1, #0
    c92e:	4828      	ldr	r0, [pc, #160]	; (c9d0 <FlexCAN_AbortTxTransfer+0x110>)
    c930:	f7f5 fb26 	bl	1f80 <OsIf_MicrosToTicks>
    c934:	9004      	str	r0, [sp, #16]
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c936:	2000      	movs	r0, #0
    c938:	f7f5 fad6 	bl	1ee8 <OsIf_GetCounter>
    c93c:	4603      	mov	r3, r0
    c93e:	9302      	str	r3, [sp, #8]
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    c940:	e00f      	b.n	c962 <FlexCAN_AbortTxTransfer+0xa2>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c942:	ab02      	add	r3, sp, #8
    c944:	2100      	movs	r1, #0
    c946:	4618      	mov	r0, r3
    c948:	f7f5 fae7 	bl	1f1a <OsIf_GetElapsed>
    c94c:	4602      	mov	r2, r0
    c94e:	9b08      	ldr	r3, [sp, #32]
    c950:	4413      	add	r3, r2
    c952:	9308      	str	r3, [sp, #32]
        if (timeElapsed >= uS2Ticks)
    c954:	9a08      	ldr	r2, [sp, #32]
    c956:	9b04      	ldr	r3, [sp, #16]
    c958:	429a      	cmp	r2, r3
    c95a:	d302      	bcc.n	c962 <FlexCAN_AbortTxTransfer+0xa2>
        {
            result = FLEXCAN_STATUS_TIMEOUT;
    c95c:	2303      	movs	r3, #3
    c95e:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    c960:	e008      	b.n	c974 <FlexCAN_AbortTxTransfer+0xb4>
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    c962:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c966:	4619      	mov	r1, r3
    c968:	9807      	ldr	r0, [sp, #28]
    c96a:	f7ff f8e4 	bl	bb36 <FlexCAN_GetBuffStatusFlag>
    c96e:	4603      	mov	r3, r0
    c970:	2b00      	cmp	r3, #0
    c972:	d0e6      	beq.n	c942 <FlexCAN_AbortTxTransfer+0x82>
        }
    }
    if (result != FLEXCAN_STATUS_TIMEOUT)
    c974:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c976:	2b03      	cmp	r3, #3
    c978:	d012      	beq.n	c9a0 <FlexCAN_AbortTxTransfer+0xe0>
    {
        flexcan_mb_config = *flexcan_mb;
    c97a:	9b03      	ldr	r3, [sp, #12]
    c97c:	681b      	ldr	r3, [r3, #0]
    c97e:	9305      	str	r3, [sp, #20]
        /* Check if the MBs have been safely Inactivated */
        if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    c980:	9b05      	ldr	r3, [sp, #20]
    c982:	0e1b      	lsrs	r3, r3, #24
    c984:	f003 030f 	and.w	r3, r3, #15
    c988:	2b08      	cmp	r3, #8
    c98a:	d101      	bne.n	c990 <FlexCAN_AbortTxTransfer+0xd0>
        {
            /* Transmission have occurred */
            result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    c98c:	2305      	movs	r3, #5
    c98e:	9309      	str	r3, [sp, #36]	; 0x24
        }

        if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    c990:	9b05      	ldr	r3, [sp, #20]
    c992:	0e1b      	lsrs	r3, r3, #24
    c994:	f003 030f 	and.w	r3, r3, #15
    c998:	2b09      	cmp	r3, #9
    c99a:	d101      	bne.n	c9a0 <FlexCAN_AbortTxTransfer+0xe0>
        {
            /* Transmission have been aborted */
            result = FLEXCAN_STATUS_SUCCESS;
    c99c:	2300      	movs	r3, #0
    c99e:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    c9a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c9a4:	4619      	mov	r1, r3
    c9a6:	9807      	ldr	r0, [sp, #28]
    c9a8:	f7ff f8b2 	bl	bb10 <FlexCAN_ClearMsgBuffIntStatusFlag>
    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    c9ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c9b0:	9a06      	ldr	r2, [sp, #24]
    c9b2:	011b      	lsls	r3, r3, #4
    c9b4:	4413      	add	r3, r2
    c9b6:	3304      	adds	r3, #4
    c9b8:	2200      	movs	r2, #0
    c9ba:	601a      	str	r2, [r3, #0]

    return result;
    c9bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    c9be:	4618      	mov	r0, r3
    c9c0:	b00b      	add	sp, #44	; 0x2c
    c9c2:	f85d fb04 	ldr.w	pc, [sp], #4
    c9c6:	bf00      	nop
    c9c8:	00018640 	.word	0x00018640
    c9cc:	1fff935c 	.word	0x1fff935c
    c9d0:	000f4240 	.word	0x000f4240

0000c9d4 <FlexCAN_AbortRxTransfer>:
 * Description   : Abort transfer for Rx normal or legacy fifo if enabled.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static void FlexCAN_AbortRxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    c9d4:	b500      	push	{lr}
    c9d6:	b089      	sub	sp, #36	; 0x24
    c9d8:	4603      	mov	r3, r0
    c9da:	460a      	mov	r2, r1
    c9dc:	f88d 3007 	strb.w	r3, [sp, #7]
    c9e0:	4613      	mov	r3, r2
    c9e2:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    c9e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c9ea:	4a41      	ldr	r2, [pc, #260]	; (caf0 <FlexCAN_AbortRxTransfer+0x11c>)
    c9ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9f0:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    c9f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c9f6:	4a3f      	ldr	r2, [pc, #252]	; (caf4 <FlexCAN_AbortRxTransfer+0x120>)
    c9f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9fc:	9306      	str	r3, [sp, #24]
    uint8 val1 = 0U;
    c9fe:	2300      	movs	r3, #0
    ca00:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 val2 = 0U;
    ca04:	2300      	movs	r3, #0
    ca06:	9304      	str	r3, [sp, #16]
    uint32 flexcan_mb_config = 0;
    ca08:	2300      	movs	r3, #0
    ca0a:	9303      	str	r3, [sp, #12]
    volatile uint32 * flexcan_mb = NULL_PTR;
    ca0c:	2300      	movs	r3, #0
    ca0e:	9302      	str	r3, [sp, #8]

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    ca10:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ca14:	9a06      	ldr	r2, [sp, #24]
    ca16:	011b      	lsls	r3, r3, #4
    ca18:	4413      	add	r3, r2
    ca1a:	3304      	adds	r3, #4
    ca1c:	2200      	movs	r2, #0
    ca1e:	601a      	str	r2, [r3, #0]
    /* Check if fifo enabled */
    if (TRUE == state->bIsLegacyFifoEn)
    ca20:	9b06      	ldr	r3, [sp, #24]
    ca22:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    ca26:	2b00      	cmp	r3, #0
    ca28:	d03c      	beq.n	caa4 <FlexCAN_AbortRxTransfer+0xd0>
    {
        /* Get the number of RX FIFO Filters*/
        val1 = (uint8)(((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    ca2a:	9b07      	ldr	r3, [sp, #28]
    ca2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ca2e:	0e1b      	lsrs	r3, r3, #24
    ca30:	b2db      	uxtb	r3, r3
    ca32:	f003 030f 	and.w	r3, r3, #15
    ca36:	f88d 3017 	strb.w	r3, [sp, #23]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        val2 = RxFifoOcuppiedLastMsgBuff(val1);
    ca3a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ca3e:	4618      	mov	r0, r3
    ca40:	f7ff f9f3 	bl	be2a <RxFifoOcuppiedLastMsgBuff>
    ca44:	9004      	str	r0, [sp, #16]
        if (mb_idx > val2)
    ca46:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ca4a:	9a04      	ldr	r2, [sp, #16]
    ca4c:	429a      	cmp	r2, r3
    ca4e:	d21b      	bcs.n	ca88 <FlexCAN_AbortRxTransfer+0xb4>
        {
            /* This operation is not allowed for MB that are part of RxFIFO */
            flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    ca50:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ca54:	4619      	mov	r1, r3
    ca56:	9807      	ldr	r0, [sp, #28]
    ca58:	f001 ff3a 	bl	e8d0 <FlexCAN_GetMsgBuffRegion>
    ca5c:	9002      	str	r0, [sp, #8]
            flexcan_mb_config = * flexcan_mb;
    ca5e:	9b02      	ldr	r3, [sp, #8]
    ca60:	681b      	ldr	r3, [r3, #0]
    ca62:	9303      	str	r3, [sp, #12]
            /* Reset the code and unlock the MB */
            flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    ca64:	9b03      	ldr	r3, [sp, #12]
    ca66:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    ca6a:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
            *flexcan_mb = flexcan_mb_config;
    ca6c:	9b02      	ldr	r3, [sp, #8]
    ca6e:	9a03      	ldr	r2, [sp, #12]
    ca70:	601a      	str	r2, [r3, #0]
            /* Reconfigure The MB as left by RxMBconfig */
            flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    ca72:	9b03      	ldr	r3, [sp, #12]
    ca74:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    ca78:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    ca7a:	9b03      	ldr	r3, [sp, #12]
    ca7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    ca80:	9303      	str	r3, [sp, #12]
            *flexcan_mb = flexcan_mb_config;
    ca82:	9b02      	ldr	r3, [sp, #8]
    ca84:	9a03      	ldr	r2, [sp, #12]
    ca86:	601a      	str	r2, [r3, #0]
        }
        if (FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    ca88:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ca8c:	2b00      	cmp	r3, #0
    ca8e:	d125      	bne.n	cadc <FlexCAN_AbortRxTransfer+0x108>
        {
            FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, state->isIntActive);
    ca90:	9b06      	ldr	r3, [sp, #24]
    ca92:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    ca96:	f89d 1007 	ldrb.w	r1, [sp, #7]
    ca9a:	2205      	movs	r2, #5
    ca9c:	9807      	ldr	r0, [sp, #28]
    ca9e:	f002 faf5 	bl	f08c <FLEXCAN_ClearMsgBuffIntCmd>
    caa2:	e01b      	b.n	cadc <FlexCAN_AbortRxTransfer+0x108>
        }
    }
    else
    {
        /* This operation is not allowed for MB that are part of RxFIFO */
        flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    caa4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    caa8:	4619      	mov	r1, r3
    caaa:	9807      	ldr	r0, [sp, #28]
    caac:	f001 ff10 	bl	e8d0 <FlexCAN_GetMsgBuffRegion>
    cab0:	9002      	str	r0, [sp, #8]
        flexcan_mb_config = * flexcan_mb;
    cab2:	9b02      	ldr	r3, [sp, #8]
    cab4:	681b      	ldr	r3, [r3, #0]
    cab6:	9303      	str	r3, [sp, #12]
        /* Reset the code and unlock the MB */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    cab8:	9b03      	ldr	r3, [sp, #12]
    caba:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    cabe:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
        *flexcan_mb = flexcan_mb_config;
    cac0:	9b02      	ldr	r3, [sp, #8]
    cac2:	9a03      	ldr	r2, [sp, #12]
    cac4:	601a      	str	r2, [r3, #0]
        /* Reconfigure The MB as left by RxMBconfig */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    cac6:	9b03      	ldr	r3, [sp, #12]
    cac8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    cacc:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    cace:	9b03      	ldr	r3, [sp, #12]
    cad0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    cad4:	9303      	str	r3, [sp, #12]
        *flexcan_mb = flexcan_mb_config;
    cad6:	9b02      	ldr	r3, [sp, #8]
    cad8:	9a03      	ldr	r2, [sp, #12]
    cada:	601a      	str	r2, [r3, #0]
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    cadc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    cae0:	4619      	mov	r1, r3
    cae2:	9807      	ldr	r0, [sp, #28]
    cae4:	f7ff f814 	bl	bb10 <FlexCAN_ClearMsgBuffIntStatusFlag>
}
    cae8:	bf00      	nop
    caea:	b009      	add	sp, #36	; 0x24
    caec:	f85d fb04 	ldr.w	pc, [sp], #4
    caf0:	00018640 	.word	0x00018640
    caf4:	1fff935c 	.word	0x1fff935c

0000caf8 <FlexCAN_Ip_Init_Privileged>:
/* implements FlexCAN_Ip_Init_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Init_Privileged(uint8 Flexcan_Ip_u8Instance,
                                                 Flexcan_Ip_StateType * Flexcan_Ip_pState,
                                                 const Flexcan_Ip_ConfigType * Flexcan_Ip_pData
                                                )
{
    caf8:	b500      	push	{lr}
    cafa:	b089      	sub	sp, #36	; 0x24
    cafc:	4603      	mov	r3, r0
    cafe:	9102      	str	r1, [sp, #8]
    cb00:	9201      	str	r2, [sp, #4]
    cb02:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    cb06:	2300      	movs	r3, #0
    cb08:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    cb0a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cb0e:	4a36      	ldr	r2, [pc, #216]	; (cbe8 <FlexCAN_Ip_Init_Privileged+0xf0>)
    cb10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb14:	9305      	str	r3, [sp, #20]
    {
        OsIf_Trusted_Call1param(FlexCAN_SetUserAccessAllowed, pBase);
    }
#endif

    eResult = FlexCAN_InitController(Flexcan_Ip_u8Instance, pBase, Flexcan_Ip_pData);
    cb16:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cb1a:	9a01      	ldr	r2, [sp, #4]
    cb1c:	9905      	ldr	r1, [sp, #20]
    cb1e:	4618      	mov	r0, r3
    cb20:	f7ff fa84 	bl	c02c <FlexCAN_InitController>
    cb24:	9006      	str	r0, [sp, #24]
    if (FLEXCAN_STATUS_SUCCESS == eResult)
    cb26:	9b06      	ldr	r3, [sp, #24]
    cb28:	2b00      	cmp	r3, #0
    cb2a:	d158      	bne.n	cbde <FlexCAN_Ip_Init_Privileged+0xe6>
    {
        /* Init Baudrate */
        FlexCAN_InitBaudrate(pBase, Flexcan_Ip_pData);
    cb2c:	9901      	ldr	r1, [sp, #4]
    cb2e:	9805      	ldr	r0, [sp, #20]
    cb30:	f7ff fad6 	bl	c0e0 <FlexCAN_InitBaudrate>
        /* Select mode */
        FlexCAN_SetOperationMode(pBase, Flexcan_Ip_pData->flexcanMode);
    cb34:	9b01      	ldr	r3, [sp, #4]
    cb36:	68db      	ldr	r3, [r3, #12]
    cb38:	4619      	mov	r1, r3
    cb3a:	9805      	ldr	r0, [sp, #20]
    cb3c:	f002 fdb8 	bl	f6b0 <FlexCAN_SetOperationMode>

#if (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON)
        FlexCAN_ConfigTimestamp(Flexcan_Ip_u8Instance, pBase, (const Flexcan_Ip_TimeStampConfigType *)(&Flexcan_Ip_pData->time_stamp));
#endif   /* (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON) */

        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    cb40:	2300      	movs	r3, #0
    cb42:	9307      	str	r3, [sp, #28]
    cb44:	e01d      	b.n	cb82 <FlexCAN_Ip_Init_Privileged+0x8a>
        {
            /* Check if blocking need to be any more present in sync\async discussions */
            /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
            Flexcan_Ip_pState->mbs[i].isPolling = TRUE;
    cb46:	9a02      	ldr	r2, [sp, #8]
    cb48:	9b07      	ldr	r3, [sp, #28]
    cb4a:	011b      	lsls	r3, r3, #4
    cb4c:	4413      	add	r3, r2
    cb4e:	3308      	adds	r3, #8
    cb50:	2201      	movs	r2, #1
    cb52:	701a      	strb	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].pMBmessage = NULL_PTR;
    cb54:	9a02      	ldr	r2, [sp, #8]
    cb56:	9b07      	ldr	r3, [sp, #28]
    cb58:	011b      	lsls	r3, r3, #4
    cb5a:	4413      	add	r3, r2
    cb5c:	2200      	movs	r2, #0
    cb5e:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].state = FLEXCAN_MB_IDLE;
    cb60:	9a02      	ldr	r2, [sp, #8]
    cb62:	9b07      	ldr	r3, [sp, #28]
    cb64:	011b      	lsls	r3, r3, #4
    cb66:	4413      	add	r3, r2
    cb68:	3304      	adds	r3, #4
    cb6a:	2200      	movs	r2, #0
    cb6c:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].time_stamp = 0U;
    cb6e:	9a02      	ldr	r2, [sp, #8]
    cb70:	9b07      	ldr	r3, [sp, #28]
    cb72:	011b      	lsls	r3, r3, #4
    cb74:	4413      	add	r3, r2
    cb76:	330c      	adds	r3, #12
    cb78:	2200      	movs	r2, #0
    cb7a:	601a      	str	r2, [r3, #0]
        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    cb7c:	9b07      	ldr	r3, [sp, #28]
    cb7e:	3301      	adds	r3, #1
    cb80:	9307      	str	r3, [sp, #28]
    cb82:	9b07      	ldr	r3, [sp, #28]
    cb84:	2b1f      	cmp	r3, #31
    cb86:	d9de      	bls.n	cb46 <FlexCAN_Ip_Init_Privileged+0x4e>
        /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
        Flexcan_Ip_pState->enhancedFifoOutput.isPolling = TRUE;
        Flexcan_Ip_pState->enhancedFifoOutput.state = FLEXCAN_MB_IDLE;
#endif

        Flexcan_Ip_pState->transferType = Flexcan_Ip_pData->transfer_type;
    cb88:	9b01      	ldr	r3, [sp, #4]
    cb8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    cb8c:	9b02      	ldr	r3, [sp, #8]
    cb8e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        Flexcan_Ip_pState->u32NumOfMbTransferByDMA = Flexcan_Ip_pData->num_enhanced_watermark;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

        /* Clear Callbacks in case of autovariables garbage */
        Flexcan_Ip_pState->callback = Flexcan_Ip_pData->Callback;
    cb92:	9b01      	ldr	r3, [sp, #4]
    cb94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    cb96:	9b02      	ldr	r3, [sp, #8]
    cb98:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        Flexcan_Ip_pState->callbackParam = NULL_PTR;
    cb9c:	9b02      	ldr	r3, [sp, #8]
    cb9e:	2200      	movs	r2, #0
    cba0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
        Flexcan_Ip_pState->error_callback = Flexcan_Ip_pData->ErrorCallback;
    cba4:	9b01      	ldr	r3, [sp, #4]
    cba6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    cba8:	9b02      	ldr	r3, [sp, #8]
    cbaa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        Flexcan_Ip_pState->errorCallbackParam = NULL_PTR;
    cbae:	9b02      	ldr	r3, [sp, #8]
    cbb0:	2200      	movs	r2, #0
    cbb2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
        Flexcan_Ip_pState->bIsLegacyFifoEn = Flexcan_Ip_pData->is_rx_fifo_needed;
    cbb6:	9b01      	ldr	r3, [sp, #4]
    cbb8:	7a1a      	ldrb	r2, [r3, #8]
    cbba:	9b02      	ldr	r3, [sp, #8]
    cbbc:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
        Flexcan_Ip_pState->bIsEnhancedFifoEn = Flexcan_Ip_pData->is_enhanced_rx_fifo_needed;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
        Flexcan_Ip_pState->u32MaxMbNum = Flexcan_Ip_pData->max_num_mb;
    cbc0:	9b01      	ldr	r3, [sp, #4]
    cbc2:	681a      	ldr	r2, [r3, #0]
    cbc4:	9b02      	ldr	r3, [sp, #8]
    cbc6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
        Flexcan_Ip_pState->isIntActive = TRUE;
    cbca:	9b02      	ldr	r3, [sp, #8]
    cbcc:	2201      	movs	r2, #1
    cbce:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        /* Save runtime structure pointers so irq handler can point to the correct state structure */
        Flexcan_Ip_apxState[Flexcan_Ip_u8Instance] = Flexcan_Ip_pState;
    cbd2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cbd6:	4905      	ldr	r1, [pc, #20]	; (cbec <FlexCAN_Ip_Init_Privileged+0xf4>)
    cbd8:	9a02      	ldr	r2, [sp, #8]
    cbda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    return eResult;
    cbde:	9b06      	ldr	r3, [sp, #24]
}
    cbe0:	4618      	mov	r0, r3
    cbe2:	b009      	add	sp, #36	; 0x24
    cbe4:	f85d fb04 	ldr.w	pc, [sp], #4
    cbe8:	00018640 	.word	0x00018640
    cbec:	1fff935c 	.word	0x1fff935c

0000cbf0 <FlexCAN_Ip_Send>:
                                      uint8 mb_idx,
                                      const Flexcan_Ip_DataInfoType * tx_info,
                                      uint32 msg_id,
                                      const uint8 * mb_data
                                     )
{
    cbf0:	b500      	push	{lr}
    cbf2:	b08b      	sub	sp, #44	; 0x2c
    cbf4:	9204      	str	r2, [sp, #16]
    cbf6:	9303      	str	r3, [sp, #12]
    cbf8:	4603      	mov	r3, r0
    cbfa:	f88d 3017 	strb.w	r3, [sp, #23]
    cbfe:	460b      	mov	r3, r1
    cc00:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    cc04:	2301      	movs	r3, #1
    cc06:	9309      	str	r3, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    cc08:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cc0c:	4a1c      	ldr	r2, [pc, #112]	; (cc80 <FlexCAN_Ip_Send+0x90>)
    cc0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc12:	9308      	str	r3, [sp, #32]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    cc14:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cc18:	4a1a      	ldr	r2, [pc, #104]	; (cc84 <FlexCAN_Ip_Send+0x94>)
    cc1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc1e:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif
    if (!FlexCAN_IsListenOnlyModeEnabled(base))
    cc20:	9808      	ldr	r0, [sp, #32]
    cc22:	f7ff f8f4 	bl	be0e <FlexCAN_IsListenOnlyModeEnabled>
    cc26:	4603      	mov	r3, r0
    cc28:	f083 0301 	eor.w	r3, r3, #1
    cc2c:	b2db      	uxtb	r3, r3
    cc2e:	2b00      	cmp	r3, #0
    cc30:	d021      	beq.n	cc76 <FlexCAN_Ip_Send+0x86>
    {
        result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    cc32:	f89d 1016 	ldrb.w	r1, [sp, #22]
    cc36:	f89d 0017 	ldrb.w	r0, [sp, #23]
    cc3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cc3c:	9300      	str	r3, [sp, #0]
    cc3e:	9b03      	ldr	r3, [sp, #12]
    cc40:	9a04      	ldr	r2, [sp, #16]
    cc42:	f7ff fb4b 	bl	c2dc <FlexCAN_StartSendData>
    cc46:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        if ((FLEXCAN_STATUS_SUCCESS ==  result) && (FALSE == tx_info->is_polling))
    cc48:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cc4a:	2b00      	cmp	r3, #0
    cc4c:	d113      	bne.n	cc76 <FlexCAN_Ip_Send+0x86>
    cc4e:	9b04      	ldr	r3, [sp, #16]
    cc50:	7b1b      	ldrb	r3, [r3, #12]
    cc52:	f083 0301 	eor.w	r3, r3, #1
    cc56:	b2db      	uxtb	r3, r3
    cc58:	2b00      	cmp	r3, #0
    cc5a:	d00c      	beq.n	cc76 <FlexCAN_Ip_Send+0x86>
        {
            /* Enable message buffer interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    cc5c:	f89d 2016 	ldrb.w	r2, [sp, #22]
    cc60:	9b07      	ldr	r3, [sp, #28]
    cc62:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    cc66:	f89d 1017 	ldrb.w	r1, [sp, #23]
    cc6a:	9300      	str	r3, [sp, #0]
    cc6c:	2301      	movs	r3, #1
    cc6e:	9808      	ldr	r0, [sp, #32]
    cc70:	f002 f9b6 	bl	efe0 <FlexCAN_SetMsgBuffIntCmd>
    cc74:	9009      	str	r0, [sp, #36]	; 0x24
        }
#endif
    }
    return result;
    cc76:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    cc78:	4618      	mov	r0, r3
    cc7a:	b00b      	add	sp, #44	; 0x2c
    cc7c:	f85d fb04 	ldr.w	pc, [sp], #4
    cc80:	00018640 	.word	0x00018640
    cc84:	1fff935c 	.word	0x1fff935c

0000cc88 <FlexCAN_Ip_ConfigRxMb>:
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxMb(uint8 instance,
                                            uint8 mb_idx,
                                            const Flexcan_Ip_DataInfoType * rx_info,
                                            uint32 msg_id
                                           )
{
    cc88:	b500      	push	{lr}
    cc8a:	b08b      	sub	sp, #44	; 0x2c
    cc8c:	9202      	str	r2, [sp, #8]
    cc8e:	9301      	str	r3, [sp, #4]
    cc90:	4603      	mov	r3, r0
    cc92:	f88d 300f 	strb.w	r3, [sp, #15]
    cc96:	460b      	mov	r3, r1
    cc98:	f88d 300e 	strb.w	r3, [sp, #14]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    cc9c:	2300      	movs	r3, #0
    cc9e:	9309      	str	r3, [sp, #36]	; 0x24
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    cca0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cca4:	4a19      	ldr	r2, [pc, #100]	; (cd0c <FlexCAN_Ip_ConfigRxMb+0x84>)
    cca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccaa:	9308      	str	r3, [sp, #32]
    }
    else
    {
#endif
        /* Clear the message buffer flag if previous remained triggered */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    ccac:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ccb0:	4619      	mov	r1, r3
    ccb2:	9808      	ldr	r0, [sp, #32]
    ccb4:	f7fe ff2c 	bl	bb10 <FlexCAN_ClearMsgBuffIntStatusFlag>

        cs.dataLen = rx_info->data_length;
    ccb8:	9b02      	ldr	r3, [sp, #8]
    ccba:	685b      	ldr	r3, [r3, #4]
    ccbc:	9306      	str	r3, [sp, #24]
        cs.msgIdType = rx_info->msg_id_type;
    ccbe:	9b02      	ldr	r3, [sp, #8]
    ccc0:	681b      	ldr	r3, [r3, #0]
    ccc2:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = rx_info->fd_enable;
    ccc4:	9b02      	ldr	r3, [sp, #8]
    ccc6:	7a1b      	ldrb	r3, [r3, #8]
    ccc8:	f88d 301c 	strb.w	r3, [sp, #28]
    #endif

        /* Initialize rx mb*/
        cs.code = (uint32)FLEXCAN_RX_NOT_USED;
    cccc:	230f      	movs	r3, #15
    ccce:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    ccd0:	f89d 100e 	ldrb.w	r1, [sp, #14]
    ccd4:	aa04      	add	r2, sp, #16
    ccd6:	9b01      	ldr	r3, [sp, #4]
    ccd8:	9808      	ldr	r0, [sp, #32]
    ccda:	f002 fa25 	bl	f128 <FlexCAN_SetRxMsgBuff>

        /* Initialize receive MB*/
        cs.code = (uint32)FLEXCAN_RX_INACTIVE;
    ccde:	2300      	movs	r3, #0
    cce0:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    cce2:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cce6:	aa04      	add	r2, sp, #16
    cce8:	9b01      	ldr	r3, [sp, #4]
    ccea:	9808      	ldr	r0, [sp, #32]
    ccec:	f002 fa1c 	bl	f128 <FlexCAN_SetRxMsgBuff>

        /* Set up FlexCAN message buffer fields for receiving data*/
        cs.code = (uint32)FLEXCAN_RX_EMPTY;
    ccf0:	2304      	movs	r3, #4
    ccf2:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    ccf4:	f89d 100e 	ldrb.w	r1, [sp, #14]
    ccf8:	aa04      	add	r2, sp, #16
    ccfa:	9b01      	ldr	r3, [sp, #4]
    ccfc:	9808      	ldr	r0, [sp, #32]
    ccfe:	f002 fa13 	bl	f128 <FlexCAN_SetRxMsgBuff>
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    cd02:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    cd04:	4618      	mov	r0, r3
    cd06:	b00b      	add	sp, #44	; 0x2c
    cd08:	f85d fb04 	ldr.w	pc, [sp], #4
    cd0c:	00018640 	.word	0x00018640

0000cd10 <FlexCAN_Ip_Receive>:
Flexcan_Ip_StatusType FlexCAN_Ip_Receive(uint8 instance,
                                         uint8 mb_idx,
                                         Flexcan_Ip_MsgBuffType * data,
                                         boolean isPolling
                                        )
{
    cd10:	b500      	push	{lr}
    cd12:	b089      	sub	sp, #36	; 0x24
    cd14:	9202      	str	r2, [sp, #8]
    cd16:	461a      	mov	r2, r3
    cd18:	4603      	mov	r3, r0
    cd1a:	f88d 300f 	strb.w	r3, [sp, #15]
    cd1e:	460b      	mov	r3, r1
    cd20:	f88d 300e 	strb.w	r3, [sp, #14]
    cd24:	4613      	mov	r3, r2
    cd26:	f88d 300d 	strb.w	r3, [sp, #13]

    Flexcan_Ip_StatusType result;
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    cd2a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cd2e:	4a18      	ldr	r2, [pc, #96]	; (cd90 <FlexCAN_Ip_Receive+0x80>)
    cd30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd34:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    cd36:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cd3a:	4a16      	ldr	r2, [pc, #88]	; (cd94 <FlexCAN_Ip_Receive+0x84>)
    cd3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd40:	9305      	str	r3, [sp, #20]
#endif
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    #endif

    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    cd42:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cd46:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cd4a:	f89d 000f 	ldrb.w	r0, [sp, #15]
    cd4e:	9a02      	ldr	r2, [sp, #8]
    cd50:	f7ff fa86 	bl	c260 <FlexCAN_StartRxMessageBufferData>
    cd54:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    cd56:	9b07      	ldr	r3, [sp, #28]
    cd58:	2b00      	cmp	r3, #0
    cd5a:	d113      	bne.n	cd84 <FlexCAN_Ip_Receive+0x74>
    cd5c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cd60:	f083 0301 	eor.w	r3, r3, #1
    cd64:	b2db      	uxtb	r3, r3
    cd66:	2b00      	cmp	r3, #0
    cd68:	d00c      	beq.n	cd84 <FlexCAN_Ip_Receive+0x74>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    cd6a:	f89d 200e 	ldrb.w	r2, [sp, #14]
    cd6e:	9b05      	ldr	r3, [sp, #20]
    cd70:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    cd74:	f89d 100f 	ldrb.w	r1, [sp, #15]
    cd78:	9300      	str	r3, [sp, #0]
    cd7a:	2301      	movs	r3, #1
    cd7c:	9806      	ldr	r0, [sp, #24]
    cd7e:	f002 f92f 	bl	efe0 <FlexCAN_SetMsgBuffIntCmd>
    cd82:	9007      	str	r0, [sp, #28]
    }
#endif
    return result;
    cd84:	9b07      	ldr	r3, [sp, #28]
}
    cd86:	4618      	mov	r0, r3
    cd88:	b009      	add	sp, #36	; 0x24
    cd8a:	f85d fb04 	ldr.w	pc, [sp], #4
    cd8e:	bf00      	nop
    cd90:	00018640 	.word	0x00018640
    cd94:	1fff935c 	.word	0x1fff935c

0000cd98 <FlexCAN_Ip_ReceiveBlocking>:
                                                 uint8 mb_idx,
                                                 Flexcan_Ip_MsgBuffType * data,
                                                 boolean isPolling,
                                                 uint32 u32TimeoutMs
                                                )
{
    cd98:	b500      	push	{lr}
    cd9a:	b08b      	sub	sp, #44	; 0x2c
    cd9c:	9202      	str	r2, [sp, #8]
    cd9e:	461a      	mov	r2, r3
    cda0:	4603      	mov	r3, r0
    cda2:	f88d 300f 	strb.w	r3, [sp, #15]
    cda6:	460b      	mov	r3, r1
    cda8:	f88d 300e 	strb.w	r3, [sp, #14]
    cdac:	4613      	mov	r3, r2
    cdae:	f88d 300d 	strb.w	r3, [sp, #13]
    Flexcan_Ip_StatusType result;
    uint32 timeStart = 0U;
    cdb2:	2300      	movs	r3, #0
    cdb4:	9304      	str	r3, [sp, #16]
    uint32 timeElapsed = 0U;
    cdb6:	2300      	movs	r3, #0
    cdb8:	9308      	str	r3, [sp, #32]
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    cdba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cdbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cdc0:	fb02 f303 	mul.w	r3, r2, r3
    cdc4:	2100      	movs	r1, #0
    cdc6:	4618      	mov	r0, r3
    cdc8:	f7f5 f8da 	bl	1f80 <OsIf_MicrosToTicks>
    cdcc:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    cdce:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cdd2:	4a4c      	ldr	r2, [pc, #304]	; (cf04 <FlexCAN_Ip_ReceiveBlocking+0x16c>)
    cdd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cdd8:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    cdda:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cdde:	4a4a      	ldr	r2, [pc, #296]	; (cf08 <FlexCAN_Ip_ReceiveBlocking+0x170>)
    cde0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cde4:	9305      	str	r3, [sp, #20]
#else
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    cde6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cdea:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cdee:	f89d 000f 	ldrb.w	r0, [sp, #15]
    cdf2:	9a02      	ldr	r2, [sp, #8]
    cdf4:	f7ff fa34 	bl	c260 <FlexCAN_StartRxMessageBufferData>
    cdf8:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    cdfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cdfc:	2b00      	cmp	r3, #0
    cdfe:	d113      	bne.n	ce28 <FlexCAN_Ip_ReceiveBlocking+0x90>
    ce00:	f89d 300d 	ldrb.w	r3, [sp, #13]
    ce04:	f083 0301 	eor.w	r3, r3, #1
    ce08:	b2db      	uxtb	r3, r3
    ce0a:	2b00      	cmp	r3, #0
    ce0c:	d00c      	beq.n	ce28 <FlexCAN_Ip_ReceiveBlocking+0x90>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    ce0e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    ce12:	9b06      	ldr	r3, [sp, #24]
    ce14:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    ce18:	f89d 100f 	ldrb.w	r1, [sp, #15]
    ce1c:	9300      	str	r3, [sp, #0]
    ce1e:	2301      	movs	r3, #1
    ce20:	9805      	ldr	r0, [sp, #20]
    ce22:	f002 f8dd 	bl	efe0 <FlexCAN_SetMsgBuffIntCmd>
    ce26:	9009      	str	r0, [sp, #36]	; 0x24
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    ce28:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ce2a:	2b00      	cmp	r3, #0
    ce2c:	d133      	bne.n	ce96 <FlexCAN_Ip_ReceiveBlocking+0xfe>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ce2e:	2000      	movs	r0, #0
    ce30:	f7f5 f85a 	bl	1ee8 <OsIf_GetCounter>
    ce34:	4603      	mov	r3, r0
    ce36:	9304      	str	r3, [sp, #16]
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    ce38:	e024      	b.n	ce84 <FlexCAN_Ip_ReceiveBlocking+0xec>
        {
            if (TRUE == isPolling)
    ce3a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    ce3e:	2b00      	cmp	r3, #0
    ce40:	d010      	beq.n	ce64 <FlexCAN_Ip_ReceiveBlocking+0xcc>
            {
                if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    ce42:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ce46:	4619      	mov	r1, r3
    ce48:	9805      	ldr	r0, [sp, #20]
    ce4a:	f7fe fe74 	bl	bb36 <FlexCAN_GetBuffStatusFlag>
    ce4e:	4603      	mov	r3, r0
    ce50:	2b00      	cmp	r3, #0
    ce52:	d007      	beq.n	ce64 <FlexCAN_Ip_ReceiveBlocking+0xcc>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    ce54:	f89d 200e 	ldrb.w	r2, [sp, #14]
    ce58:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ce5c:	4611      	mov	r1, r2
    ce5e:	4618      	mov	r0, r3
    ce60:	f7ff fb20 	bl	c4a4 <FlexCAN_IRQHandlerRxMB>
                }
            }
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ce64:	ab04      	add	r3, sp, #16
    ce66:	2100      	movs	r1, #0
    ce68:	4618      	mov	r0, r3
    ce6a:	f7f5 f856 	bl	1f1a <OsIf_GetElapsed>
    ce6e:	4602      	mov	r2, r0
    ce70:	9b08      	ldr	r3, [sp, #32]
    ce72:	4413      	add	r3, r2
    ce74:	9308      	str	r3, [sp, #32]
            if (timeElapsed >= mS2Ticks)
    ce76:	9a08      	ldr	r2, [sp, #32]
    ce78:	9b07      	ldr	r3, [sp, #28]
    ce7a:	429a      	cmp	r2, r3
    ce7c:	d302      	bcc.n	ce84 <FlexCAN_Ip_ReceiveBlocking+0xec>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    ce7e:	2303      	movs	r3, #3
    ce80:	9309      	str	r3, [sp, #36]	; 0x24
                break;
    ce82:	e008      	b.n	ce96 <FlexCAN_Ip_ReceiveBlocking+0xfe>
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    ce84:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ce88:	9a06      	ldr	r2, [sp, #24]
    ce8a:	011b      	lsls	r3, r3, #4
    ce8c:	4413      	add	r3, r2
    ce8e:	3304      	adds	r3, #4
    ce90:	681b      	ldr	r3, [r3, #0]
    ce92:	2b01      	cmp	r3, #1
    ce94:	d0d1      	beq.n	ce3a <FlexCAN_Ip_ReceiveBlocking+0xa2>
            }
        }
    }

    if ((FLEXCAN_STATUS_TIMEOUT == result) && (FALSE == isPolling))
    ce96:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ce98:	2b03      	cmp	r3, #3
    ce9a:	d112      	bne.n	cec2 <FlexCAN_Ip_ReceiveBlocking+0x12a>
    ce9c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cea0:	f083 0301 	eor.w	r3, r3, #1
    cea4:	b2db      	uxtb	r3, r3
    cea6:	2b00      	cmp	r3, #0
    cea8:	d00b      	beq.n	cec2 <FlexCAN_Ip_ReceiveBlocking+0x12a>
    {
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        /* Disable Mb interrupt*/
       (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    ceaa:	f89d 200e 	ldrb.w	r2, [sp, #14]
    ceae:	9b06      	ldr	r3, [sp, #24]
    ceb0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    ceb4:	f89d 100f 	ldrb.w	r1, [sp, #15]
    ceb8:	9300      	str	r3, [sp, #0]
    ceba:	2300      	movs	r3, #0
    cebc:	9805      	ldr	r0, [sp, #20]
    cebe:	f002 f88f 	bl	efe0 <FlexCAN_SetMsgBuffIntCmd>
#endif
    }

    if ((FLEXCAN_STATUS_BUFF_OUT_OF_RANGE != result) && (FLEXCAN_STATUS_BUSY != result))
    cec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cec4:	2b04      	cmp	r3, #4
    cec6:	d018      	beq.n	cefa <FlexCAN_Ip_ReceiveBlocking+0x162>
    cec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ceca:	2b02      	cmp	r3, #2
    cecc:	d015      	beq.n	cefa <FlexCAN_Ip_ReceiveBlocking+0x162>
    {
        if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state))
    cece:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ced2:	9a06      	ldr	r2, [sp, #24]
    ced4:	011b      	lsls	r3, r3, #4
    ced6:	4413      	add	r3, r2
    ced8:	3304      	adds	r3, #4
    ceda:	681b      	ldr	r3, [r3, #0]
    cedc:	2b00      	cmp	r3, #0
    cede:	d102      	bne.n	cee6 <FlexCAN_Ip_ReceiveBlocking+0x14e>
        {
            result = FLEXCAN_STATUS_SUCCESS;
    cee0:	2300      	movs	r3, #0
    cee2:	9309      	str	r3, [sp, #36]	; 0x24
    cee4:	e009      	b.n	cefa <FlexCAN_Ip_ReceiveBlocking+0x162>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    cee6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ceea:	9a06      	ldr	r2, [sp, #24]
    ceec:	011b      	lsls	r3, r3, #4
    ceee:	4413      	add	r3, r2
    cef0:	3304      	adds	r3, #4
    cef2:	2200      	movs	r2, #0
    cef4:	601a      	str	r2, [r3, #0]
            result = FLEXCAN_STATUS_TIMEOUT;
    cef6:	2303      	movs	r3, #3
    cef8:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    return result;
    cefa:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    cefc:	4618      	mov	r0, r3
    cefe:	b00b      	add	sp, #44	; 0x2c
    cf00:	f85d fb04 	ldr.w	pc, [sp], #4
    cf04:	1fff935c 	.word	0x1fff935c
    cf08:	00018640 	.word	0x00018640

0000cf0c <FlexCAN_Ip_RxFifo>:
 * after the frame was received and read into the specified buffer.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_RxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifo(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    cf0c:	b500      	push	{lr}
    cf0e:	b085      	sub	sp, #20
    cf10:	4603      	mov	r3, r0
    cf12:	9100      	str	r1, [sp, #0]
    cf14:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    cf18:	2300      	movs	r3, #0
    cf1a:	9303      	str	r3, [sp, #12]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    cf1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cf20:	9900      	ldr	r1, [sp, #0]
    cf22:	4618      	mov	r0, r3
    cf24:	f7ff fa5e 	bl	c3e4 <FlexCAN_StartRxMessageFifoData>
    cf28:	9003      	str	r0, [sp, #12]
    }
    return result;
    cf2a:	9b03      	ldr	r3, [sp, #12]
}
    cf2c:	4618      	mov	r0, r3
    cf2e:	b005      	add	sp, #20
    cf30:	f85d fb04 	ldr.w	pc, [sp], #4

0000cf34 <FlexCAN_Ip_RxFifoBlocking>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_RxFifoBlocking_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifoBlocking(uint8 instance, Flexcan_Ip_MsgBuffType *data, uint32 timeout)
{
    cf34:	b500      	push	{lr}
    cf36:	b087      	sub	sp, #28
    cf38:	4603      	mov	r3, r0
    cf3a:	9102      	str	r1, [sp, #8]
    cf3c:	9201      	str	r2, [sp, #4]
    cf3e:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    cf42:	2300      	movs	r3, #0
    cf44:	9305      	str	r3, [sp, #20]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    cf46:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cf4a:	9902      	ldr	r1, [sp, #8]
    cf4c:	4618      	mov	r0, r3
    cf4e:	f7ff fa49 	bl	c3e4 <FlexCAN_StartRxMessageFifoData>
    cf52:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == result)
    cf54:	9b05      	ldr	r3, [sp, #20]
    cf56:	2b00      	cmp	r3, #0
    cf58:	d106      	bne.n	cf68 <FlexCAN_Ip_RxFifoBlocking+0x34>
        {
            result = FlexCAN_ProccessLegacyRxFIFO(instance, timeout);
    cf5a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cf5e:	9901      	ldr	r1, [sp, #4]
    cf60:	4618      	mov	r0, r3
    cf62:	f7ff f8e2 	bl	c12a <FlexCAN_ProccessLegacyRxFIFO>
    cf66:	9005      	str	r0, [sp, #20]
        }
    }
    return result;
    cf68:	9b05      	ldr	r3, [sp, #20]
}
    cf6a:	4618      	mov	r0, r3
    cf6c:	b007      	add	sp, #28
    cf6e:	f85d fb04 	ldr.w	pc, [sp], #4

0000cf72 <FlexCAN_Ip_ConfigRxFifo_Privileged>:
/* implements FlexCAN_Ip_ConfigRxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxFifo_Privileged(uint8 instance,
                                                         Flexcan_Ip_RxFifoIdElementFormatType id_format,
                                                         const Flexcan_Ip_IdTableType * id_filter_table
                                                        )
{
    cf72:	b500      	push	{lr}
    cf74:	b089      	sub	sp, #36	; 0x24
    cf76:	4603      	mov	r3, r0
    cf78:	9102      	str	r1, [sp, #8]
    cf7a:	9201      	str	r2, [sp, #4]
    cf7c:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    cf80:	2300      	movs	r3, #0
    cf82:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    cf84:	2300      	movs	r3, #0
    cf86:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    cf88:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cf8c:	4a1c      	ldr	r2, [pc, #112]	; (d000 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x8e>)
    cf8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf92:	9305      	str	r3, [sp, #20]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    cf94:	9805      	ldr	r0, [sp, #20]
    cf96:	f7fe fd61 	bl	ba5c <FlexCAN_IsEnabled>
    cf9a:	4603      	mov	r3, r0
    cf9c:	2b00      	cmp	r3, #0
    cf9e:	bf14      	ite	ne
    cfa0:	2301      	movne	r3, #1
    cfa2:	2300      	moveq	r3, #0
    cfa4:	b2db      	uxtb	r3, r3
    cfa6:	f083 0301 	eor.w	r3, r3, #1
    cfaa:	b2db      	uxtb	r3, r3
    cfac:	f88d 3013 	strb.w	r3, [sp, #19]
    cfb0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    cfb4:	f003 0301 	and.w	r3, r3, #1
    cfb8:	f88d 3013 	strb.w	r3, [sp, #19]

    if (TRUE == disabled)
    cfbc:	f89d 3013 	ldrb.w	r3, [sp, #19]
    cfc0:	2b00      	cmp	r3, #0
    cfc2:	d003      	beq.n	cfcc <FlexCAN_Ip_ConfigRxFifo_Privileged+0x5a>
    {
        result = FlexCAN_Enable(pBase);
    cfc4:	9805      	ldr	r0, [sp, #20]
    cfc6:	f001 fd6b 	bl	eaa0 <FlexCAN_Enable>
    cfca:	9007      	str	r0, [sp, #28]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    cfcc:	9b07      	ldr	r3, [sp, #28]
    cfce:	2b00      	cmp	r3, #0
    cfd0:	d104      	bne.n	cfdc <FlexCAN_Ip_ConfigRxFifo_Privileged+0x6a>
    {
        /* Initialize rx fifo*/
        FlexCAN_SetRxFifoFilter(pBase, id_format, id_filter_table);
    cfd2:	9a01      	ldr	r2, [sp, #4]
    cfd4:	9902      	ldr	r1, [sp, #8]
    cfd6:	9805      	ldr	r0, [sp, #20]
    cfd8:	f002 fba5 	bl	f726 <FlexCAN_SetRxFifoFilter>
    }

    if (TRUE == disabled)
    cfdc:	f89d 3013 	ldrb.w	r3, [sp, #19]
    cfe0:	2b00      	cmp	r3, #0
    cfe2:	d008      	beq.n	cff6 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
    {
        status = FlexCAN_Disable(pBase);
    cfe4:	9805      	ldr	r0, [sp, #20]
    cfe6:	f001 fdd9 	bl	eb9c <FlexCAN_Disable>
    cfea:	9006      	str	r0, [sp, #24]
        if (FLEXCAN_STATUS_SUCCESS != status)
    cfec:	9b06      	ldr	r3, [sp, #24]
    cfee:	2b00      	cmp	r3, #0
    cff0:	d001      	beq.n	cff6 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
        {
            result = status;
    cff2:	9b06      	ldr	r3, [sp, #24]
    cff4:	9307      	str	r3, [sp, #28]
        }
    }

    return result;
    cff6:	9b07      	ldr	r3, [sp, #28]
}
    cff8:	4618      	mov	r0, r3
    cffa:	b009      	add	sp, #36	; 0x24
    cffc:	f85d fb04 	ldr.w	pc, [sp], #4
    d000:	00018640 	.word	0x00018640

0000d004 <FlexCAN_Ip_ConfigRemoteResponseMb>:
                                                        uint8 mb_idx,
                                                        const Flexcan_Ip_DataInfoType *tx_info,
                                                        uint32 msg_id,
                                                        const uint8 *mb_data
                                                       )
{
    d004:	b500      	push	{lr}
    d006:	b08f      	sub	sp, #60	; 0x3c
    d008:	9204      	str	r2, [sp, #16]
    d00a:	9303      	str	r3, [sp, #12]
    d00c:	4603      	mov	r3, r0
    d00e:	f88d 3017 	strb.w	r3, [sp, #23]
    d012:	460b      	mov	r3, r1
    d014:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    d018:	2300      	movs	r3, #0
    d01a:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    d01c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d020:	4a27      	ldr	r2, [pc, #156]	; (d0c0 <FlexCAN_Ip_ConfigRemoteResponseMb+0xbc>)
    d022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d026:	930c      	str	r3, [sp, #48]	; 0x30
    const Flexcan_Ip_StateType * const state = Flexcan_Ip_apxState[instance];
    d028:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d02c:	4a25      	ldr	r2, [pc, #148]	; (d0c4 <FlexCAN_Ip_ConfigRemoteResponseMb+0xc0>)
    d02e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d032:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    d034:	2300      	movs	r3, #0
    d036:	930a      	str	r3, [sp, #40]	; 0x28
    if (TRUE == FlexCAN_IsMbOutOfRange(pBase, mb_idx, state->bIsLegacyFifoEn, state->u32MaxMbNum))
    {
        result = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    d038:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d03a:	2b00      	cmp	r3, #0
    d03c:	d13a      	bne.n	d0b4 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
    {
        /* Initialize transmit mb*/
        cs.dataLen = tx_info->data_length;
    d03e:	9b04      	ldr	r3, [sp, #16]
    d040:	685b      	ldr	r3, [r3, #4]
    d042:	9308      	str	r3, [sp, #32]
        cs.msgIdType = tx_info->msg_id_type;
    d044:	9b04      	ldr	r3, [sp, #16]
    d046:	681b      	ldr	r3, [r3, #0]
    d048:	9307      	str	r3, [sp, #28]
        cs.code = (uint32)FLEXCAN_RX_RANSWER;
    d04a:	230a      	movs	r3, #10
    d04c:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = FALSE;
    d04e:	2300      	movs	r3, #0
    d050:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        cs.enable_brs = FALSE;
    d054:	2300      	movs	r3, #0
    d056:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        cs.fd_padding = 0x00U;
    d05a:	2300      	movs	r3, #0
    d05c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
#endif
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    d060:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d064:	4619      	mov	r1, r3
    d066:	980c      	ldr	r0, [sp, #48]	; 0x30
    d068:	f7fe fd52 	bl	bb10 <FlexCAN_ClearMsgBuffIntStatusFlag>
        pMbAddr = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    d06c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d070:	4619      	mov	r1, r3
    d072:	980c      	ldr	r0, [sp, #48]	; 0x30
    d074:	f001 fc2c 	bl	e8d0 <FlexCAN_GetMsgBuffRegion>
    d078:	900a      	str	r0, [sp, #40]	; 0x28
        FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, tx_info->is_remote);
    d07a:	9b04      	ldr	r3, [sp, #16]
    d07c:	7adb      	ldrb	r3, [r3, #11]
    d07e:	a906      	add	r1, sp, #24
    d080:	9300      	str	r3, [sp, #0]
    d082:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d084:	9a03      	ldr	r2, [sp, #12]
    d086:	980a      	ldr	r0, [sp, #40]	; 0x28
    d088:	f002 f974 	bl	f374 <FlexCAN_SetTxMsgBuff>
        if (FALSE == tx_info->is_polling)
    d08c:	9b04      	ldr	r3, [sp, #16]
    d08e:	7b1b      	ldrb	r3, [r3, #12]
    d090:	f083 0301 	eor.w	r3, r3, #1
    d094:	b2db      	uxtb	r3, r3
    d096:	2b00      	cmp	r3, #0
    d098:	d00c      	beq.n	d0b4 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
        {
            /* Enable MB interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(pBase, instance, mb_idx, TRUE, state->isIntActive);
    d09a:	f89d 2016 	ldrb.w	r2, [sp, #22]
    d09e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d0a0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    d0a4:	f89d 1017 	ldrb.w	r1, [sp, #23]
    d0a8:	9300      	str	r3, [sp, #0]
    d0aa:	2301      	movs	r3, #1
    d0ac:	980c      	ldr	r0, [sp, #48]	; 0x30
    d0ae:	f001 ff97 	bl	efe0 <FlexCAN_SetMsgBuffIntCmd>
    d0b2:	900d      	str	r0, [sp, #52]	; 0x34
        }
    }
    return result;
    d0b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    d0b6:	4618      	mov	r0, r3
    d0b8:	b00f      	add	sp, #60	; 0x3c
    d0ba:	f85d fb04 	ldr.w	pc, [sp], #4
    d0be:	bf00      	nop
    d0c0:	00018640 	.word	0x00018640
    d0c4:	1fff935c 	.word	0x1fff935c

0000d0c8 <FlexCAN_Ip_GetTransferStatus>:
 * or complete (success). In case Enhanced Rx Fifo, mb_idx will be 255.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetTransferStatus_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_GetTransferStatus(uint8 instance, uint8 mb_idx)
{
    d0c8:	b084      	sub	sp, #16
    d0ca:	4603      	mov	r3, r0
    d0cc:	460a      	mov	r2, r1
    d0ce:	f88d 3007 	strb.w	r3, [sp, #7]
    d0d2:	4613      	mov	r3, r2
    d0d4:	f88d 3006 	strb.w	r3, [sp, #6]

    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d0d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d0dc:	4a0d      	ldr	r2, [pc, #52]	; (d114 <FlexCAN_Ip_GetTransferStatus+0x4c>)
    d0de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0e2:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_ERROR;
    d0e4:	2301      	movs	r3, #1
    d0e6:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
#endif

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    d0e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d0ec:	2b1f      	cmp	r3, #31
    d0ee:	d80d      	bhi.n	d10c <FlexCAN_Ip_GetTransferStatus+0x44>
    {
        if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    d0f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d0f4:	9a02      	ldr	r2, [sp, #8]
    d0f6:	011b      	lsls	r3, r3, #4
    d0f8:	4413      	add	r3, r2
    d0fa:	3304      	adds	r3, #4
    d0fc:	681b      	ldr	r3, [r3, #0]
    d0fe:	2b00      	cmp	r3, #0
    d100:	d102      	bne.n	d108 <FlexCAN_Ip_GetTransferStatus+0x40>
        {
            status = FLEXCAN_STATUS_SUCCESS;
    d102:	2300      	movs	r3, #0
    d104:	9303      	str	r3, [sp, #12]
    d106:	e001      	b.n	d10c <FlexCAN_Ip_GetTransferStatus+0x44>
            status = FLEXCAN_STATUS_ERROR;
        }
#endif
        else
        {
            status = FLEXCAN_STATUS_BUSY;
    d108:	2302      	movs	r3, #2
    d10a:	9303      	str	r3, [sp, #12]
            status = FLEXCAN_STATUS_BUSY;
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return status;
    d10c:	9b03      	ldr	r3, [sp, #12]
}
    d10e:	4618      	mov	r0, r3
    d110:	b004      	add	sp, #16
    d112:	4770      	bx	lr
    d114:	1fff935c 	.word	0x1fff935c

0000d118 <FlexCAN_CompleteRxMessageFifoData>:
 * data and disabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_CompleteRxMessageFifoData(uint8 instance)
{
    d118:	b500      	push	{lr}
    d11a:	b087      	sub	sp, #28
    d11c:	4603      	mov	r3, r0
    d11e:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d122:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d126:	4a1d      	ldr	r2, [pc, #116]	; (d19c <FlexCAN_CompleteRxMessageFifoData+0x84>)
    d128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d12c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d12e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d132:	4a1b      	ldr	r2, [pc, #108]	; (d1a0 <FlexCAN_CompleteRxMessageFifoData+0x88>)
    d134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d138:	9304      	str	r3, [sp, #16]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    d13a:	9b04      	ldr	r3, [sp, #16]
    d13c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    d140:	2b00      	cmp	r3, #0
    d142:	d120      	bne.n	d186 <FlexCAN_CompleteRxMessageFifoData+0x6e>
    {
        /* Disable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, state->isIntActive);
    d144:	9b04      	ldr	r3, [sp, #16]
    d146:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    d14a:	f89d 100f 	ldrb.w	r1, [sp, #15]
    d14e:	9300      	str	r3, [sp, #0]
    d150:	2300      	movs	r3, #0
    d152:	2205      	movs	r2, #5
    d154:	9805      	ldr	r0, [sp, #20]
    d156:	f001 ff43 	bl	efe0 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, state->isIntActive);
    d15a:	9b04      	ldr	r3, [sp, #16]
    d15c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    d160:	f89d 100f 	ldrb.w	r1, [sp, #15]
    d164:	9300      	str	r3, [sp, #0]
    d166:	2300      	movs	r3, #0
    d168:	2206      	movs	r2, #6
    d16a:	9805      	ldr	r0, [sp, #20]
    d16c:	f001 ff38 	bl	efe0 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, state->isIntActive);
    d170:	9b04      	ldr	r3, [sp, #16]
    d172:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    d176:	f89d 100f 	ldrb.w	r1, [sp, #15]
    d17a:	9300      	str	r3, [sp, #0]
    d17c:	2300      	movs	r3, #0
    d17e:	2207      	movs	r2, #7
    d180:	9805      	ldr	r0, [sp, #20]
    d182:	f001 ff2d 	bl	efe0 <FlexCAN_SetMsgBuffIntCmd>
    {
        /* do nothing when transferType is POLLING */
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    /* Clear fifo message*/
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = NULL_PTR;
    d186:	9b04      	ldr	r3, [sp, #16]
    d188:	2200      	movs	r2, #0
    d18a:	601a      	str	r2, [r3, #0]
            state->callback(instance, FLEXCAN_EVENT_DMA_ERROR, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
        }
    }

#else
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    d18c:	9b04      	ldr	r3, [sp, #16]
    d18e:	2200      	movs	r2, #0
    d190:	605a      	str	r2, [r3, #4]
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
}
    d192:	bf00      	nop
    d194:	b007      	add	sp, #28
    d196:	f85d fb04 	ldr.w	pc, [sp], #4
    d19a:	bf00      	nop
    d19c:	00018640 	.word	0x00018640
    d1a0:	1fff935c 	.word	0x1fff935c

0000d1a4 <FlexCAN_IRQHandler>:
    uint32 endMbIdx
    #if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    ,boolean bEnhancedFifoExisted
    #endif
)
{
    d1a4:	b500      	push	{lr}
    d1a6:	b08b      	sub	sp, #44	; 0x2c
    d1a8:	4603      	mov	r3, r0
    d1aa:	9102      	str	r1, [sp, #8]
    d1ac:	9201      	str	r2, [sp, #4]
    d1ae:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32MbHandle = 0U;
    d1b2:	2300      	movs	r3, #0
    d1b4:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 flag_reg = 0;
    d1b6:	2300      	movs	r3, #0
    d1b8:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d1ba:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d1be:	4a3f      	ldr	r2, [pc, #252]	; (d2bc <FlexCAN_IRQHandler+0x118>)
    d1c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1c4:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d1c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d1ca:	4a3d      	ldr	r2, [pc, #244]	; (d2c0 <FlexCAN_IRQHandler+0x11c>)
    d1cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1d0:	9305      	str	r3, [sp, #20]

    /* Get the interrupts that are enabled and ready */
    uint32 mb_idx = endMbIdx;
    d1d2:	9b01      	ldr	r3, [sp, #4]
    d1d4:	9307      	str	r3, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(endMbIdx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM);
#endif
    /* Check if instance initialized */
    if (NULL_PTR != state)
    d1d6:	9b05      	ldr	r3, [sp, #20]
    d1d8:	2b00      	cmp	r3, #0
    d1da:	d05c      	beq.n	d296 <FlexCAN_IRQHandler+0xf2>
    {
        flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    d1dc:	9907      	ldr	r1, [sp, #28]
    d1de:	9806      	ldr	r0, [sp, #24]
    d1e0:	f7fe fe47 	bl	be72 <FlexCAN_GetMsgBuffIntStatusFlag>
    d1e4:	4603      	mov	r3, r0
    d1e6:	9308      	str	r3, [sp, #32]

        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    d1e8:	e008      	b.n	d1fc <FlexCAN_IRQHandler+0x58>
        {
            mb_idx--;
    d1ea:	9b07      	ldr	r3, [sp, #28]
    d1ec:	3b01      	subs	r3, #1
    d1ee:	9307      	str	r3, [sp, #28]
            flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    d1f0:	9907      	ldr	r1, [sp, #28]
    d1f2:	9806      	ldr	r0, [sp, #24]
    d1f4:	f7fe fe3d 	bl	be72 <FlexCAN_GetMsgBuffIntStatusFlag>
    d1f8:	4603      	mov	r3, r0
    d1fa:	9308      	str	r3, [sp, #32]
        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    d1fc:	9b08      	ldr	r3, [sp, #32]
    d1fe:	2b00      	cmp	r3, #0
    d200:	d103      	bne.n	d20a <FlexCAN_IRQHandler+0x66>
    d202:	9a07      	ldr	r2, [sp, #28]
    d204:	9b02      	ldr	r3, [sp, #8]
    d206:	429a      	cmp	r2, r3
    d208:	d8ef      	bhi.n	d1ea <FlexCAN_IRQHandler+0x46>
        }

        /* Check Tx/Rx interrupt flag and clear the interrupt */
        if (flag_reg != 0U)
    d20a:	9b08      	ldr	r3, [sp, #32]
    d20c:	2b00      	cmp	r3, #0
    d20e:	d050      	beq.n	d2b2 <FlexCAN_IRQHandler+0x10e>
        {
            /* For legacy fifo, mb handler is FLEXCAN_IP_MB_HANDLE_RXFIFO(0) */
            u32MbHandle = mb_idx;
    d210:	9b07      	ldr	r3, [sp, #28]
    d212:	9309      	str	r3, [sp, #36]	; 0x24

            if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    d214:	9b05      	ldr	r3, [sp, #20]
    d216:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    d21a:	2b00      	cmp	r3, #0
    d21c:	d00b      	beq.n	d236 <FlexCAN_IRQHandler+0x92>
    d21e:	9b07      	ldr	r3, [sp, #28]
    d220:	2b07      	cmp	r3, #7
    d222:	d808      	bhi.n	d236 <FlexCAN_IRQHandler+0x92>
            {
                FlexCAN_IRQHandlerRxFIFO(instance, mb_idx);
    d224:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d228:	9907      	ldr	r1, [sp, #28]
    d22a:	4618      	mov	r0, r3
    d22c:	f7ff fac2 	bl	c7b4 <FlexCAN_IRQHandlerRxFIFO>
                u32MbHandle = (uint32)FLEXCAN_IP_MB_HANDLE_RXFIFO;
    d230:	2300      	movs	r3, #0
    d232:	9309      	str	r3, [sp, #36]	; 0x24
    d234:	e00d      	b.n	d252 <FlexCAN_IRQHandler+0xae>
            }
            else
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[u32MbHandle].state)
    d236:	9a05      	ldr	r2, [sp, #20]
    d238:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d23a:	011b      	lsls	r3, r3, #4
    d23c:	4413      	add	r3, r2
    d23e:	3304      	adds	r3, #4
    d240:	681b      	ldr	r3, [r3, #0]
    d242:	2b01      	cmp	r3, #1
    d244:	d105      	bne.n	d252 <FlexCAN_IRQHandler+0xae>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    d246:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d24a:	9907      	ldr	r1, [sp, #28]
    d24c:	4618      	mov	r0, r3
    d24e:	f7ff f929 	bl	c4a4 <FlexCAN_IRQHandlerRxMB>
                }
            }

            /* Check mailbox completed transmission */
            if (FLEXCAN_MB_TX_BUSY == state->mbs[u32MbHandle].state)
    d252:	9a05      	ldr	r2, [sp, #20]
    d254:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d256:	011b      	lsls	r3, r3, #4
    d258:	4413      	add	r3, r2
    d25a:	3304      	adds	r3, #4
    d25c:	681b      	ldr	r3, [r3, #0]
    d25e:	2b02      	cmp	r3, #2
    d260:	d105      	bne.n	d26e <FlexCAN_IRQHandler+0xca>
            {
                FlexCAN_IRQHandlerTxMB(instance, mb_idx);
    d262:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d266:	9907      	ldr	r1, [sp, #28]
    d268:	4618      	mov	r0, r3
    d26a:	f7ff fa09 	bl	c680 <FlexCAN_IRQHandlerTxMB>
            }

            /* Check for spurious interrupt */
            if (FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx) != 0U)
    d26e:	9907      	ldr	r1, [sp, #28]
    d270:	9806      	ldr	r0, [sp, #24]
    d272:	f7fe fdfe 	bl	be72 <FlexCAN_GetMsgBuffIntStatusFlag>
    d276:	4603      	mov	r3, r0
    d278:	2b00      	cmp	r3, #0
    d27a:	d01a      	beq.n	d2b2 <FlexCAN_IRQHandler+0x10e>
            {
                if (state->mbs[u32MbHandle].state == FLEXCAN_MB_IDLE)
    d27c:	9a05      	ldr	r2, [sp, #20]
    d27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d280:	011b      	lsls	r3, r3, #4
    d282:	4413      	add	r3, r2
    d284:	3304      	adds	r3, #4
    d286:	681b      	ldr	r3, [r3, #0]
    d288:	2b00      	cmp	r3, #0
    d28a:	d112      	bne.n	d2b2 <FlexCAN_IRQHandler+0x10e>
                {
                    /* In case of desynchronized status of the MB to avoid trapping in ISR
                    * clear the MB flag */
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    d28c:	9907      	ldr	r1, [sp, #28]
    d28e:	9806      	ldr	r0, [sp, #24]
    d290:	f7fe fc3e 	bl	bb10 <FlexCAN_ClearMsgBuffIntStatusFlag>
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_UNDERFLOW);
        }
    #endif /* End of (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    }
}
    d294:	e00d      	b.n	d2b2 <FlexCAN_IRQHandler+0x10e>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    d296:	9b02      	ldr	r3, [sp, #8]
    d298:	9307      	str	r3, [sp, #28]
    d29a:	e006      	b.n	d2aa <FlexCAN_IRQHandler+0x106>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    d29c:	9907      	ldr	r1, [sp, #28]
    d29e:	9806      	ldr	r0, [sp, #24]
    d2a0:	f7fe fc36 	bl	bb10 <FlexCAN_ClearMsgBuffIntStatusFlag>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    d2a4:	9b07      	ldr	r3, [sp, #28]
    d2a6:	3301      	adds	r3, #1
    d2a8:	9307      	str	r3, [sp, #28]
    d2aa:	9a07      	ldr	r2, [sp, #28]
    d2ac:	9b01      	ldr	r3, [sp, #4]
    d2ae:	429a      	cmp	r2, r3
    d2b0:	d9f4      	bls.n	d29c <FlexCAN_IRQHandler+0xf8>
}
    d2b2:	bf00      	nop
    d2b4:	b00b      	add	sp, #44	; 0x2c
    d2b6:	f85d fb04 	ldr.w	pc, [sp], #4
    d2ba:	bf00      	nop
    d2bc:	00018640 	.word	0x00018640
    d2c0:	1fff935c 	.word	0x1fff935c

0000d2c4 <FlexCAN_Ip_ClearErrorStatus>:
 *                 transmission of a CAN frame.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearErrorStatus_Activity */
void FlexCAN_Ip_ClearErrorStatus(uint8 instance, uint32 error)
{
    d2c4:	b084      	sub	sp, #16
    d2c6:	4603      	mov	r3, r0
    d2c8:	9100      	str	r1, [sp, #0]
    d2ca:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d2ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d2d2:	4a05      	ldr	r2, [pc, #20]	; (d2e8 <FlexCAN_Ip_ClearErrorStatus+0x24>)
    d2d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2d8:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base->ESR1 = error;
    d2da:	9b03      	ldr	r3, [sp, #12]
    d2dc:	9a00      	ldr	r2, [sp, #0]
    d2de:	621a      	str	r2, [r3, #32]
}
    d2e0:	bf00      	nop
    d2e2:	b004      	add	sp, #16
    d2e4:	4770      	bx	lr
    d2e6:	bf00      	nop
    d2e8:	00018640 	.word	0x00018640

0000d2ec <FlexCAN_Ip_GetErrorStatus>:
 *                 transmission of a CAN frame and some general status of the device.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetErrorStatus_Activity */
uint32 FlexCAN_Ip_GetErrorStatus(uint8 instance)
{
    d2ec:	b084      	sub	sp, #16
    d2ee:	4603      	mov	r3, r0
    d2f0:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d2f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d2f8:	4a04      	ldr	r2, [pc, #16]	; (d30c <FlexCAN_Ip_GetErrorStatus+0x20>)
    d2fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2fe:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint32)(base->ESR1);
    d300:	9b03      	ldr	r3, [sp, #12]
    d302:	6a1b      	ldr	r3, [r3, #32]
}
    d304:	4618      	mov	r0, r3
    d306:	b004      	add	sp, #16
    d308:	4770      	bx	lr
    d30a:	bf00      	nop
    d30c:	00018640 	.word	0x00018640

0000d310 <FlexCAN_Ip_GetControllerTxErrorCounter>:
 *                 transmitted messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerTxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerTxErrorCounter(uint8 instance)
{
    d310:	b084      	sub	sp, #16
    d312:	4603      	mov	r3, r0
    d314:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d318:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d31c:	4a04      	ldr	r2, [pc, #16]	; (d330 <FlexCAN_Ip_GetControllerTxErrorCounter+0x20>)
    d31e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d322:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_TXERRCNT_MASK) >> FLEXCAN_ECR_TXERRCNT_SHIFT);
    d324:	9b03      	ldr	r3, [sp, #12]
    d326:	69db      	ldr	r3, [r3, #28]
    d328:	b2db      	uxtb	r3, r3
}
    d32a:	4618      	mov	r0, r3
    d32c:	b004      	add	sp, #16
    d32e:	4770      	bx	lr
    d330:	00018640 	.word	0x00018640

0000d334 <FlexCAN_Ip_GetControllerRxErrorCounter>:
 *                 received messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerRxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerRxErrorCounter(uint8 instance)
{
    d334:	b084      	sub	sp, #16
    d336:	4603      	mov	r3, r0
    d338:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d33c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d340:	4a05      	ldr	r2, [pc, #20]	; (d358 <FlexCAN_Ip_GetControllerRxErrorCounter+0x24>)
    d342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d346:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_RXERRCNT_MASK) >> FLEXCAN_ECR_RXERRCNT_SHIFT);
    d348:	9b03      	ldr	r3, [sp, #12]
    d34a:	69db      	ldr	r3, [r3, #28]
    d34c:	0a1b      	lsrs	r3, r3, #8
    d34e:	b2db      	uxtb	r3, r3
}
    d350:	4618      	mov	r0, r3
    d352:	b004      	add	sp, #16
    d354:	4770      	bx	lr
    d356:	bf00      	nop
    d358:	00018640 	.word	0x00018640

0000d35c <FlexCAN_Error_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements  CAN_X_ERROR_ISR_Activity */
void FlexCAN_Error_IRQHandler(uint8 instance)
{
    d35c:	b510      	push	{r4, lr}
    d35e:	b086      	sub	sp, #24
    d360:	4603      	mov	r3, r0
    d362:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    d366:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d36a:	4a29      	ldr	r2, [pc, #164]	; (d410 <FlexCAN_Error_IRQHandler+0xb4>)
    d36c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d370:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d372:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d376:	4a27      	ldr	r2, [pc, #156]	; (d414 <FlexCAN_Error_IRQHandler+0xb8>)
    d378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d37c:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    d37e:	2300      	movs	r3, #0
    d380:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check if the instance initialized */
    if (NULL_PTR != state)
    d382:	9b03      	ldr	r3, [sp, #12]
    d384:	2b00      	cmp	r3, #0
    d386:	d03d      	beq.n	d404 <FlexCAN_Error_IRQHandler+0xa8>
    {
        /* Get error status to get value updated */
        u32ErrStatus = pBase->ESR1;
    d388:	9b04      	ldr	r3, [sp, #16]
    d38a:	6a1b      	ldr	r3, [r3, #32]
    d38c:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_MASK))) && ((uint32)0U != (pBase->CTRL1 & ((uint32)FLEXCAN_CTRL1_ERRMSK_MASK))))
    d38e:	9b05      	ldr	r3, [sp, #20]
    d390:	f003 0302 	and.w	r3, r3, #2
    d394:	2b00      	cmp	r3, #0
    d396:	d019      	beq.n	d3cc <FlexCAN_Error_IRQHandler+0x70>
    d398:	9b04      	ldr	r3, [sp, #16]
    d39a:	685b      	ldr	r3, [r3, #4]
    d39c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    d3a0:	2b00      	cmp	r3, #0
    d3a2:	d013      	beq.n	d3cc <FlexCAN_Error_IRQHandler+0x70>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_MASK;
    d3a4:	9b04      	ldr	r3, [sp, #16]
    d3a6:	2202      	movs	r2, #2
    d3a8:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d3aa:	9b03      	ldr	r3, [sp, #12]
    d3ac:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d3b0:	2b00      	cmp	r3, #0
    d3b2:	d00b      	beq.n	d3cc <FlexCAN_Error_IRQHandler+0x70>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR, u32ErrStatus, state);
    d3b4:	9b03      	ldr	r3, [sp, #12]
    d3b6:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d3ba:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d3be:	9b03      	ldr	r3, [sp, #12]
    d3c0:	9a05      	ldr	r2, [sp, #20]
    d3c2:	2105      	movs	r1, #5
    d3c4:	47a0      	blx	r4
            #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = pBase->ESR1;
    d3c6:	9b04      	ldr	r3, [sp, #16]
    d3c8:	6a1b      	ldr	r3, [r3, #32]
    d3ca:	9305      	str	r3, [sp, #20]
            }
        }

    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Check if this is spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_FAST_MASK))) && ((uint32)0U != (pBase->CTRL2 & ((uint32)FLEXCAN_CTRL2_ERRMSK_FAST_MASK))))
    d3cc:	9b05      	ldr	r3, [sp, #20]
    d3ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    d3d2:	2b00      	cmp	r3, #0
    d3d4:	d019      	beq.n	d40a <FlexCAN_Error_IRQHandler+0xae>
    d3d6:	9b04      	ldr	r3, [sp, #16]
    d3d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d3da:	2b00      	cmp	r3, #0
    d3dc:	da15      	bge.n	d40a <FlexCAN_Error_IRQHandler+0xae>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_FAST_MASK;
    d3de:	9b04      	ldr	r3, [sp, #16]
    d3e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    d3e4:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d3e6:	9b03      	ldr	r3, [sp, #12]
    d3e8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d3ec:	2b00      	cmp	r3, #0
    d3ee:	d00c      	beq.n	d40a <FlexCAN_Error_IRQHandler+0xae>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR_FAST, u32ErrStatus, state);
    d3f0:	9b03      	ldr	r3, [sp, #12]
    d3f2:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d3f6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d3fa:	9b03      	ldr	r3, [sp, #12]
    d3fc:	9a05      	ldr	r2, [sp, #20]
    d3fe:	2106      	movs	r1, #6
    d400:	47a0      	blx	r4
    }
    else
    {
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    }
}
    d402:	e002      	b.n	d40a <FlexCAN_Error_IRQHandler+0xae>
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    d404:	9b04      	ldr	r3, [sp, #16]
    d406:	4a04      	ldr	r2, [pc, #16]	; (d418 <FlexCAN_Error_IRQHandler+0xbc>)
    d408:	621a      	str	r2, [r3, #32]
}
    d40a:	bf00      	nop
    d40c:	b006      	add	sp, #24
    d40e:	bd10      	pop	{r4, pc}
    d410:	00018640 	.word	0x00018640
    d414:	1fff935c 	.word	0x1fff935c
    d418:	00300002 	.word	0x00300002

0000d41c <FlexCAN_BusOff_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements CAN_X_BUSOFF_ISR_Activity */
void FlexCAN_BusOff_IRQHandler(uint8 instance)
{
    d41c:	b510      	push	{r4, lr}
    d41e:	b086      	sub	sp, #24
    d420:	4603      	mov	r3, r0
    d422:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d426:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d42a:	4a3a      	ldr	r2, [pc, #232]	; (d514 <FlexCAN_BusOff_IRQHandler+0xf8>)
    d42c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d430:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d432:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d436:	4a38      	ldr	r2, [pc, #224]	; (d518 <FlexCAN_BusOff_IRQHandler+0xfc>)
    d438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d43c:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    d43e:	2300      	movs	r3, #0
    d440:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check If Driver initialized */
    if (NULL_PTR != state)
    d442:	9b03      	ldr	r3, [sp, #12]
    d444:	2b00      	cmp	r3, #0
    d446:	d05f      	beq.n	d508 <FlexCAN_BusOff_IRQHandler+0xec>
    {
        /* Get error status to get value updated */
        u32ErrStatus = base->ESR1;
    d448:	9b04      	ldr	r3, [sp, #16]
    d44a:	6a1b      	ldr	r3, [r3, #32]
    d44c:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_TWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_TWRNMSK_MASK))))
    d44e:	9b05      	ldr	r3, [sp, #20]
    d450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    d454:	2b00      	cmp	r3, #0
    d456:	d01a      	beq.n	d48e <FlexCAN_BusOff_IRQHandler+0x72>
    d458:	9b04      	ldr	r3, [sp, #16]
    d45a:	685b      	ldr	r3, [r3, #4]
    d45c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    d460:	2b00      	cmp	r3, #0
    d462:	d014      	beq.n	d48e <FlexCAN_BusOff_IRQHandler+0x72>
        {
            base->ESR1 = FLEXCAN_ESR1_TWRNINT_MASK;
    d464:	9b04      	ldr	r3, [sp, #16]
    d466:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    d46a:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d46c:	9b03      	ldr	r3, [sp, #12]
    d46e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d472:	2b00      	cmp	r3, #0
    d474:	d00b      	beq.n	d48e <FlexCAN_BusOff_IRQHandler+0x72>
            {
                state->error_callback(instance, FLEXCAN_EVENT_TX_WARNING, u32ErrStatus, state);
    d476:	9b03      	ldr	r3, [sp, #12]
    d478:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d47c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d480:	9b03      	ldr	r3, [sp, #12]
    d482:	9a05      	ldr	r2, [sp, #20]
    d484:	2109      	movs	r1, #9
    d486:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    d488:	9b04      	ldr	r3, [sp, #16]
    d48a:	6a1b      	ldr	r3, [r3, #32]
    d48c:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_RWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_RWRNMSK_MASK))))
    d48e:	9b05      	ldr	r3, [sp, #20]
    d490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    d494:	2b00      	cmp	r3, #0
    d496:	d01a      	beq.n	d4ce <FlexCAN_BusOff_IRQHandler+0xb2>
    d498:	9b04      	ldr	r3, [sp, #16]
    d49a:	685b      	ldr	r3, [r3, #4]
    d49c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    d4a0:	2b00      	cmp	r3, #0
    d4a2:	d014      	beq.n	d4ce <FlexCAN_BusOff_IRQHandler+0xb2>
        {
            base->ESR1 = FLEXCAN_ESR1_RWRNINT_MASK;
    d4a4:	9b04      	ldr	r3, [sp, #16]
    d4a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    d4aa:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d4ac:	9b03      	ldr	r3, [sp, #12]
    d4ae:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d4b2:	2b00      	cmp	r3, #0
    d4b4:	d00b      	beq.n	d4ce <FlexCAN_BusOff_IRQHandler+0xb2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_RX_WARNING, u32ErrStatus, state);
    d4b6:	9b03      	ldr	r3, [sp, #12]
    d4b8:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d4bc:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d4c0:	9b03      	ldr	r3, [sp, #12]
    d4c2:	9a05      	ldr	r2, [sp, #20]
    d4c4:	2108      	movs	r1, #8
    d4c6:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    d4c8:	9b04      	ldr	r3, [sp, #16]
    d4ca:	6a1b      	ldr	r3, [r3, #32]
    d4cc:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_BOFFINT_MASK))) && ((uint32)0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_BOFFMSK_MASK))))
    d4ce:	9b05      	ldr	r3, [sp, #20]
    d4d0:	f003 0304 	and.w	r3, r3, #4
    d4d4:	2b00      	cmp	r3, #0
    d4d6:	d01a      	beq.n	d50e <FlexCAN_BusOff_IRQHandler+0xf2>
    d4d8:	9b04      	ldr	r3, [sp, #16]
    d4da:	685b      	ldr	r3, [r3, #4]
    d4dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    d4e0:	2b00      	cmp	r3, #0
    d4e2:	d014      	beq.n	d50e <FlexCAN_BusOff_IRQHandler+0xf2>
        {
            base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    d4e4:	9b04      	ldr	r3, [sp, #16]
    d4e6:	2204      	movs	r2, #4
    d4e8:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d4ea:	9b03      	ldr	r3, [sp, #12]
    d4ec:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d4f0:	2b00      	cmp	r3, #0
    d4f2:	d00c      	beq.n	d50e <FlexCAN_BusOff_IRQHandler+0xf2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    d4f4:	9b03      	ldr	r3, [sp, #12]
    d4f6:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d4fa:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d4fe:	9b03      	ldr	r3, [sp, #12]
    d500:	9a05      	ldr	r2, [sp, #20]
    d502:	2107      	movs	r1, #7
    d504:	47a0      	blx	r4
    }
    else
    {
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    }
}
    d506:	e002      	b.n	d50e <FlexCAN_BusOff_IRQHandler+0xf2>
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    d508:	9b04      	ldr	r3, [sp, #16]
    d50a:	4a04      	ldr	r2, [pc, #16]	; (d51c <FlexCAN_BusOff_IRQHandler+0x100>)
    d50c:	621a      	str	r2, [r3, #32]
}
    d50e:	bf00      	nop
    d510:	b006      	add	sp, #24
    d512:	bd10      	pop	{r4, pc}
    d514:	00018640 	.word	0x00018640
    d518:	1fff935c 	.word	0x1fff935c
    d51c:	000b0004 	.word	0x000b0004

0000d520 <FlexCAN_Ip_SendBlocking>:
                                              const Flexcan_Ip_DataInfoType * tx_info,
                                              uint32 msg_id,
                                              const uint8 * mb_data,
                                              uint32 timeout_ms
                                             )
{
    d520:	b500      	push	{lr}
    d522:	b091      	sub	sp, #68	; 0x44
    d524:	9204      	str	r2, [sp, #16]
    d526:	9303      	str	r3, [sp, #12]
    d528:	4603      	mov	r3, r0
    d52a:	f88d 3017 	strb.w	r3, [sp, #23]
    d52e:	460b      	mov	r3, r1
    d530:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d534:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d538:	4a5f      	ldr	r2, [pc, #380]	; (d6b8 <FlexCAN_Ip_SendBlocking+0x198>)
    d53a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d53e:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d540:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d544:	4a5d      	ldr	r2, [pc, #372]	; (d6bc <FlexCAN_Ip_SendBlocking+0x19c>)
    d546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d54a:	930c      	str	r3, [sp, #48]	; 0x30

    uint32 timeStart = 0U;
    d54c:	2300      	movs	r3, #0
    d54e:	9307      	str	r3, [sp, #28]
    uint32 timeElapsed = 0U;
    d550:	2300      	movs	r3, #0
    d552:	930e      	str	r3, [sp, #56]	; 0x38
    uint32 mS2Ticks = OsIf_MicrosToTicks((timeout_ms * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d554:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d556:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d55a:	fb02 f303 	mul.w	r3, r2, r3
    d55e:	2100      	movs	r1, #0
    d560:	4618      	mov	r0, r3
    d562:	f7f4 fd0d 	bl	1f80 <OsIf_MicrosToTicks>
    d566:	900b      	str	r0, [sp, #44]	; 0x2c
    uint32 uS2Ticks = 0U;
    d568:	2300      	movs	r3, #0
    d56a:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 flexcan_mb_config = 0;
    d56c:	2300      	movs	r3, #0
    d56e:	9309      	str	r3, [sp, #36]	; 0x24

    volatile uint32 * flexcan_mb = NULL_PTR;
    d570:	2300      	movs	r3, #0
    d572:	9308      	str	r3, [sp, #32]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif

    result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    d574:	f89d 1016 	ldrb.w	r1, [sp, #22]
    d578:	f89d 0017 	ldrb.w	r0, [sp, #23]
    d57c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d57e:	9300      	str	r3, [sp, #0]
    d580:	9b03      	ldr	r3, [sp, #12]
    d582:	9a04      	ldr	r2, [sp, #16]
    d584:	f7fe feaa 	bl	c2dc <FlexCAN_StartSendData>
    d588:	900f      	str	r0, [sp, #60]	; 0x3c

    if (FLEXCAN_STATUS_SUCCESS == result)
    d58a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d58c:	2b00      	cmp	r3, #0
    d58e:	f040 808d 	bne.w	d6ac <FlexCAN_Ip_SendBlocking+0x18c>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d592:	2000      	movs	r0, #0
    d594:	f7f4 fca8 	bl	1ee8 <OsIf_GetCounter>
    d598:	4603      	mov	r3, r0
    d59a:	9307      	str	r3, [sp, #28]
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    d59c:	e00f      	b.n	d5be <FlexCAN_Ip_SendBlocking+0x9e>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d59e:	ab07      	add	r3, sp, #28
    d5a0:	2100      	movs	r1, #0
    d5a2:	4618      	mov	r0, r3
    d5a4:	f7f4 fcb9 	bl	1f1a <OsIf_GetElapsed>
    d5a8:	4602      	mov	r2, r0
    d5aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d5ac:	4413      	add	r3, r2
    d5ae:	930e      	str	r3, [sp, #56]	; 0x38
            if (timeElapsed >= mS2Ticks)
    d5b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d5b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d5b4:	429a      	cmp	r2, r3
    d5b6:	d302      	bcc.n	d5be <FlexCAN_Ip_SendBlocking+0x9e>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    d5b8:	2303      	movs	r3, #3
    d5ba:	930f      	str	r3, [sp, #60]	; 0x3c
                break;
    d5bc:	e008      	b.n	d5d0 <FlexCAN_Ip_SendBlocking+0xb0>
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    d5be:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d5c2:	4619      	mov	r1, r3
    d5c4:	980d      	ldr	r0, [sp, #52]	; 0x34
    d5c6:	f7fe fab6 	bl	bb36 <FlexCAN_GetBuffStatusFlag>
    d5ca:	4603      	mov	r3, r0
    d5cc:	2b01      	cmp	r3, #1
    d5ce:	d1e6      	bne.n	d59e <FlexCAN_Ip_SendBlocking+0x7e>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == result) && (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE))
    d5d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d5d2:	2b03      	cmp	r3, #3
    d5d4:	d15c      	bne.n	d690 <FlexCAN_Ip_SendBlocking+0x170>
    d5d6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d5da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d5dc:	011b      	lsls	r3, r3, #4
    d5de:	4413      	add	r3, r2
    d5e0:	3304      	adds	r3, #4
    d5e2:	681b      	ldr	r3, [r3, #0]
    d5e4:	2b00      	cmp	r3, #0
    d5e6:	d053      	beq.n	d690 <FlexCAN_Ip_SendBlocking+0x170>
        {
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    d5e8:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d5ec:	4619      	mov	r1, r3
    d5ee:	980d      	ldr	r0, [sp, #52]	; 0x34
    d5f0:	f7fe fa8e 	bl	bb10 <FlexCAN_ClearMsgBuffIntStatusFlag>
                flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    d5f4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d5f8:	4619      	mov	r1, r3
    d5fa:	980d      	ldr	r0, [sp, #52]	; 0x34
    d5fc:	f001 f968 	bl	e8d0 <FlexCAN_GetMsgBuffRegion>
    d600:	9008      	str	r0, [sp, #32]
                flexcan_mb_config = * flexcan_mb;
    d602:	9b08      	ldr	r3, [sp, #32]
    d604:	681b      	ldr	r3, [r3, #0]
    d606:	9309      	str	r3, [sp, #36]	; 0x24
                /* Reset the code */
                flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    d608:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d60a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    d60e:	9309      	str	r3, [sp, #36]	; 0x24
                flexcan_mb_config |= ((uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    d610:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d612:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    d616:	9309      	str	r3, [sp, #36]	; 0x24
                *flexcan_mb = flexcan_mb_config;
    d618:	9b08      	ldr	r3, [sp, #32]
    d61a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d61c:	601a      	str	r2, [r3, #0]

                /* Wait to finish abort operation */
                uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d61e:	2100      	movs	r1, #0
    d620:	4827      	ldr	r0, [pc, #156]	; (d6c0 <FlexCAN_Ip_SendBlocking+0x1a0>)
    d622:	f7f4 fcad 	bl	1f80 <OsIf_MicrosToTicks>
    d626:	900a      	str	r0, [sp, #40]	; 0x28
                timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d628:	2000      	movs	r0, #0
    d62a:	f7f4 fc5d 	bl	1ee8 <OsIf_GetCounter>
    d62e:	4603      	mov	r3, r0
    d630:	9307      	str	r3, [sp, #28]
                 timeElapsed = 0U;
    d632:	2300      	movs	r3, #0
    d634:	930e      	str	r3, [sp, #56]	; 0x38
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    d636:	e00f      	b.n	d658 <FlexCAN_Ip_SendBlocking+0x138>
                {
                    timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d638:	ab07      	add	r3, sp, #28
    d63a:	2100      	movs	r1, #0
    d63c:	4618      	mov	r0, r3
    d63e:	f7f4 fc6c 	bl	1f1a <OsIf_GetElapsed>
    d642:	4602      	mov	r2, r0
    d644:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d646:	4413      	add	r3, r2
    d648:	930e      	str	r3, [sp, #56]	; 0x38
                    if (timeElapsed >= uS2Ticks)
    d64a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d64c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d64e:	429a      	cmp	r2, r3
    d650:	d302      	bcc.n	d658 <FlexCAN_Ip_SendBlocking+0x138>
                    {
                        result = FLEXCAN_STATUS_TIMEOUT;
    d652:	2303      	movs	r3, #3
    d654:	930f      	str	r3, [sp, #60]	; 0x3c
                        break;
    d656:	e008      	b.n	d66a <FlexCAN_Ip_SendBlocking+0x14a>
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    d658:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d65c:	4619      	mov	r1, r3
    d65e:	980d      	ldr	r0, [sp, #52]	; 0x34
    d660:	f7fe fa69 	bl	bb36 <FlexCAN_GetBuffStatusFlag>
    d664:	4603      	mov	r3, r0
    d666:	2b00      	cmp	r3, #0
    d668:	d0e6      	beq.n	d638 <FlexCAN_Ip_SendBlocking+0x118>
                    }
                }

                flexcan_mb_config = *flexcan_mb;
    d66a:	9b08      	ldr	r3, [sp, #32]
    d66c:	681b      	ldr	r3, [r3, #0]
    d66e:	9309      	str	r3, [sp, #36]	; 0x24
                /* Check if the MBs have been safely Inactivated */
                if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    d670:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d672:	0e1b      	lsrs	r3, r3, #24
    d674:	f003 030f 	and.w	r3, r3, #15
    d678:	2b08      	cmp	r3, #8
    d67a:	d101      	bne.n	d680 <FlexCAN_Ip_SendBlocking+0x160>
                {
                    /* Transmission have occurred */
                    result = FLEXCAN_STATUS_SUCCESS;
    d67c:	2300      	movs	r3, #0
    d67e:	930f      	str	r3, [sp, #60]	; 0x3c
                }

                if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    d680:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d682:	0e1b      	lsrs	r3, r3, #24
    d684:	f003 030f 	and.w	r3, r3, #15
    d688:	2b09      	cmp	r3, #9
    d68a:	d101      	bne.n	d690 <FlexCAN_Ip_SendBlocking+0x170>
                {
                    /* Transmission have been aborted */
                    result = FLEXCAN_STATUS_TIMEOUT;
    d68c:	2303      	movs	r3, #3
    d68e:	930f      	str	r3, [sp, #60]	; 0x3c
                }
        }

        /* Clear message buffer flag */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    d690:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d694:	4619      	mov	r1, r3
    d696:	980d      	ldr	r0, [sp, #52]	; 0x34
    d698:	f7fe fa3a 	bl	bb10 <FlexCAN_ClearMsgBuffIntStatusFlag>

        state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    d69c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d6a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d6a2:	011b      	lsls	r3, r3, #4
    d6a4:	4413      	add	r3, r2
    d6a6:	3304      	adds	r3, #4
    d6a8:	2200      	movs	r2, #0
    d6aa:	601a      	str	r2, [r3, #0]
    }
    return result;
    d6ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
}
    d6ae:	4618      	mov	r0, r3
    d6b0:	b011      	add	sp, #68	; 0x44
    d6b2:	f85d fb04 	ldr.w	pc, [sp], #4
    d6b6:	bf00      	nop
    d6b8:	00018640 	.word	0x00018640
    d6bc:	1fff935c 	.word	0x1fff935c
    d6c0:	000f4240 	.word	0x000f4240

0000d6c4 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_SetRxMbGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMbGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    d6c4:	b500      	push	{lr}
    d6c6:	b087      	sub	sp, #28
    d6c8:	4603      	mov	r3, r0
    d6ca:	9100      	str	r1, [sp, #0]
    d6cc:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    d6d0:	2300      	movs	r3, #0
    d6d2:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    d6d4:	2300      	movs	r3, #0
    d6d6:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    d6d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d6dc:	4a1c      	ldr	r2, [pc, #112]	; (d750 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x8c>)
    d6de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6e2:	9303      	str	r3, [sp, #12]
#endif

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    d6e4:	9803      	ldr	r0, [sp, #12]
    d6e6:	f7fe f9b9 	bl	ba5c <FlexCAN_IsEnabled>
    d6ea:	4603      	mov	r3, r0
    d6ec:	2b00      	cmp	r3, #0
    d6ee:	bf14      	ite	ne
    d6f0:	2301      	movne	r3, #1
    d6f2:	2300      	moveq	r3, #0
    d6f4:	b2db      	uxtb	r3, r3
    d6f6:	f083 0301 	eor.w	r3, r3, #1
    d6fa:	b2db      	uxtb	r3, r3
    d6fc:	f88d 300b 	strb.w	r3, [sp, #11]
    d700:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d704:	f003 0301 	and.w	r3, r3, #1
    d708:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    d70c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d710:	2b00      	cmp	r3, #0
    d712:	d003      	beq.n	d71c <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    d714:	9803      	ldr	r0, [sp, #12]
    d716:	f001 f9c3 	bl	eaa0 <FlexCAN_Enable>
    d71a:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    d71c:	9b05      	ldr	r3, [sp, #20]
    d71e:	2b00      	cmp	r3, #0
    d720:	d103      	bne.n	d72a <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxMsgBuffGlobalMask(pBase, mask);
    d722:	9900      	ldr	r1, [sp, #0]
    d724:	9803      	ldr	r0, [sp, #12]
    d726:	f7fe fbc3 	bl	beb0 <FlexCAN_SetRxMsgBuffGlobalMask>
    }

    if (TRUE == disabled)
    d72a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d72e:	2b00      	cmp	r3, #0
    d730:	d008      	beq.n	d744 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    d732:	9803      	ldr	r0, [sp, #12]
    d734:	f001 fa32 	bl	eb9c <FlexCAN_Disable>
    d738:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    d73a:	9b04      	ldr	r3, [sp, #16]
    d73c:	2b00      	cmp	r3, #0
    d73e:	d001      	beq.n	d744 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
        {
            result = status;
    d740:	9b04      	ldr	r3, [sp, #16]
    d742:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    d744:	9b05      	ldr	r3, [sp, #20]
}
    d746:	4618      	mov	r0, r3
    d748:	b007      	add	sp, #28
    d74a:	f85d fb04 	ldr.w	pc, [sp], #4
    d74e:	bf00      	nop
    d750:	00018640 	.word	0x00018640

0000d754 <FlexCAN_Ip_EnterFreezeMode_Privileged>:
 * Description   : Enter Driver In freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnterFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnterFreezeMode_Privileged(uint8 instance)
{
    d754:	b500      	push	{lr}
    d756:	b085      	sub	sp, #20
    d758:	4603      	mov	r3, r0
    d75a:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d75e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d762:	4a06      	ldr	r2, [pc, #24]	; (d77c <FlexCAN_Ip_EnterFreezeMode_Privileged+0x28>)
    d764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d768:	9303      	str	r3, [sp, #12]
        return FlexCAN_EnterFreezeMode(base);
    d76a:	9803      	ldr	r0, [sp, #12]
    d76c:	f001 f94c 	bl	ea08 <FlexCAN_EnterFreezeMode>
    d770:	4603      	mov	r3, r0
}
    d772:	4618      	mov	r0, r3
    d774:	b005      	add	sp, #20
    d776:	f85d fb04 	ldr.w	pc, [sp], #4
    d77a:	bf00      	nop
    d77c:	00018640 	.word	0x00018640

0000d780 <FlexCAN_Ip_ExitFreezeMode_Privileged>:
 * Description   : Exit Driver from freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ExitFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ExitFreezeMode_Privileged(uint8 instance)
{
    d780:	b500      	push	{lr}
    d782:	b085      	sub	sp, #20
    d784:	4603      	mov	r3, r0
    d786:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d78a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d78e:	4a06      	ldr	r2, [pc, #24]	; (d7a8 <FlexCAN_Ip_ExitFreezeMode_Privileged+0x28>)
    d790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d794:	9303      	str	r3, [sp, #12]
        return FlexCAN_ExitFreezeMode(base);
    d796:	9803      	ldr	r0, [sp, #12]
    d798:	f001 f9be 	bl	eb18 <FlexCAN_ExitFreezeMode>
    d79c:	4603      	mov	r3, r0
}
    d79e:	4618      	mov	r0, r3
    d7a0:	b005      	add	sp, #20
    d7a2:	f85d fb04 	ldr.w	pc, [sp], #4
    d7a6:	bf00      	nop
    d7a8:	00018640 	.word	0x00018640

0000d7ac <FlexCAN_Ip_SetRxIndividualMask_Privileged>:
 * Description   : Set Rx individual mask as absolute value provided by mask parameter
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxIndividualMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxIndividualMask_Privileged(uint8 instance, uint8 mb_idx, uint32 mask)
{
    d7ac:	b500      	push	{lr}
    d7ae:	b087      	sub	sp, #28
    d7b0:	4603      	mov	r3, r0
    d7b2:	9200      	str	r2, [sp, #0]
    d7b4:	f88d 3007 	strb.w	r3, [sp, #7]
    d7b8:	460b      	mov	r3, r1
    d7ba:	f88d 3006 	strb.w	r3, [sp, #6]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    d7be:	2300      	movs	r3, #0
    d7c0:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    d7c2:	2300      	movs	r3, #0
    d7c4:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    d7c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d7ca:	4a1e      	ldr	r2, [pc, #120]	; (d844 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x98>)
    d7cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7d0:	9303      	str	r3, [sp, #12]
    }
    else
    {
#endif

    boolean disabled = !FlexCAN_IsEnabled(pBase);
    d7d2:	9803      	ldr	r0, [sp, #12]
    d7d4:	f7fe f942 	bl	ba5c <FlexCAN_IsEnabled>
    d7d8:	4603      	mov	r3, r0
    d7da:	2b00      	cmp	r3, #0
    d7dc:	bf14      	ite	ne
    d7de:	2301      	movne	r3, #1
    d7e0:	2300      	moveq	r3, #0
    d7e2:	b2db      	uxtb	r3, r3
    d7e4:	f083 0301 	eor.w	r3, r3, #1
    d7e8:	b2db      	uxtb	r3, r3
    d7ea:	f88d 300b 	strb.w	r3, [sp, #11]
    d7ee:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d7f2:	f003 0301 	and.w	r3, r3, #1
    d7f6:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    d7fa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d7fe:	2b00      	cmp	r3, #0
    d800:	d003      	beq.n	d80a <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    d802:	9803      	ldr	r0, [sp, #12]
    d804:	f001 f94c 	bl	eaa0 <FlexCAN_Enable>
    d808:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    d80a:	9b05      	ldr	r3, [sp, #20]
    d80c:	2b00      	cmp	r3, #0
    d80e:	d106      	bne.n	d81e <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x72>
    {
        FlexCAN_SetRxIndividualMask(pBase, mb_idx, mask);
    d810:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d814:	9a00      	ldr	r2, [sp, #0]
    d816:	4619      	mov	r1, r3
    d818:	9803      	ldr	r0, [sp, #12]
    d81a:	f7fe fb52 	bl	bec2 <FlexCAN_SetRxIndividualMask>
    }

    if (TRUE == disabled)
    d81e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d822:	2b00      	cmp	r3, #0
    d824:	d008      	beq.n	d838 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    d826:	9803      	ldr	r0, [sp, #12]
    d828:	f001 f9b8 	bl	eb9c <FlexCAN_Disable>
    d82c:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    d82e:	9b04      	ldr	r3, [sp, #16]
    d830:	2b00      	cmp	r3, #0
    d832:	d001      	beq.n	d838 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
        {
            result = status;
    d834:	9b04      	ldr	r3, [sp, #16]
    d836:	9305      	str	r3, [sp, #20]
        }
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    d838:	9b05      	ldr	r3, [sp, #20]
}
    d83a:	4618      	mov	r0, r3
    d83c:	b007      	add	sp, #28
    d83e:	f85d fb04 	ldr.w	pc, [sp], #4
    d842:	bf00      	nop
    d844:	00018640 	.word	0x00018640

0000d848 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>:
 * Description   : Set RxFifo Global Mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxFifoGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxFifoGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    d848:	b500      	push	{lr}
    d84a:	b087      	sub	sp, #28
    d84c:	4603      	mov	r3, r0
    d84e:	9100      	str	r1, [sp, #0]
    d850:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    d854:	2300      	movs	r3, #0
    d856:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    d858:	2300      	movs	r3, #0
    d85a:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    d85c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d860:	4a1c      	ldr	r2, [pc, #112]	; (d8d4 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x8c>)
    d862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d866:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    d868:	9803      	ldr	r0, [sp, #12]
    d86a:	f7fe f8f7 	bl	ba5c <FlexCAN_IsEnabled>
    d86e:	4603      	mov	r3, r0
    d870:	2b00      	cmp	r3, #0
    d872:	bf14      	ite	ne
    d874:	2301      	movne	r3, #1
    d876:	2300      	moveq	r3, #0
    d878:	b2db      	uxtb	r3, r3
    d87a:	f083 0301 	eor.w	r3, r3, #1
    d87e:	b2db      	uxtb	r3, r3
    d880:	f88d 300b 	strb.w	r3, [sp, #11]
    d884:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d888:	f003 0301 	and.w	r3, r3, #1
    d88c:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    d890:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d894:	2b00      	cmp	r3, #0
    d896:	d003      	beq.n	d8a0 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    d898:	9803      	ldr	r0, [sp, #12]
    d89a:	f001 f901 	bl	eaa0 <FlexCAN_Enable>
    d89e:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    d8a0:	9b05      	ldr	r3, [sp, #20]
    d8a2:	2b00      	cmp	r3, #0
    d8a4:	d103      	bne.n	d8ae <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxFifoGlobalMask(pBase, mask);
    d8a6:	9900      	ldr	r1, [sp, #0]
    d8a8:	9803      	ldr	r0, [sp, #12]
    d8aa:	f7fe f8a7 	bl	b9fc <FlexCAN_SetRxFifoGlobalMask>
    }

    if (TRUE == disabled)
    d8ae:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d8b2:	2b00      	cmp	r3, #0
    d8b4:	d008      	beq.n	d8c8 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    d8b6:	9803      	ldr	r0, [sp, #12]
    d8b8:	f001 f970 	bl	eb9c <FlexCAN_Disable>
    d8bc:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    d8be:	9b04      	ldr	r3, [sp, #16]
    d8c0:	2b00      	cmp	r3, #0
    d8c2:	d001      	beq.n	d8c8 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
        {
            result = status;
    d8c4:	9b04      	ldr	r3, [sp, #16]
    d8c6:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    d8c8:	9b05      	ldr	r3, [sp, #20]
}
    d8ca:	4618      	mov	r0, r3
    d8cc:	b007      	add	sp, #28
    d8ce:	f85d fb04 	ldr.w	pc, [sp], #4
    d8d2:	bf00      	nop
    d8d4:	00018640 	.word	0x00018640

0000d8d8 <FlexCAN_Ip_Deinit_Privileged>:
 * This function will disable all FlexCAN interrupts, and disable the FlexCAN.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_Deinit_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Deinit_Privileged(uint8 instance)
{
    d8d8:	b500      	push	{lr}
    d8da:	b085      	sub	sp, #20
    d8dc:	4603      	mov	r3, r0
    d8de:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d8e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d8e6:	4a0e      	ldr	r2, [pc, #56]	; (d920 <FlexCAN_Ip_Deinit_Privileged+0x48>)
    d8e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8ec:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Enter Freeze Mode Required before to enter Disabled Mode */
    result = FlexCAN_EnterFreezeMode(base);
    d8ee:	9803      	ldr	r0, [sp, #12]
    d8f0:	f001 f88a 	bl	ea08 <FlexCAN_EnterFreezeMode>
    d8f4:	9002      	str	r0, [sp, #8]
    if (FLEXCAN_STATUS_SUCCESS == result)
    d8f6:	9b02      	ldr	r3, [sp, #8]
    d8f8:	2b00      	cmp	r3, #0
    d8fa:	d10b      	bne.n	d914 <FlexCAN_Ip_Deinit_Privileged+0x3c>
    {
        /* Reset registers */
        FlexCAN_SetRegDefaultVal(base);
    d8fc:	9803      	ldr	r0, [sp, #12]
    d8fe:	f7fe fb18 	bl	bf32 <FlexCAN_SetRegDefaultVal>
        /* wait for disable */
        (void)FlexCAN_Disable(base);
    d902:	9803      	ldr	r0, [sp, #12]
    d904:	f001 f94a 	bl	eb9c <FlexCAN_Disable>
        /* Clear state pointer that is checked by FLEXCAN_DRV_Init */
        Flexcan_Ip_apxState[instance] = NULL_PTR;
    d908:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d90c:	4a05      	ldr	r2, [pc, #20]	; (d924 <FlexCAN_Ip_Deinit_Privileged+0x4c>)
    d90e:	2100      	movs	r1, #0
    d910:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OsIf_Trusted_Call1param(FlexCAN_ClrUserAccessAllowed, base);
        }
    #endif
    }

    return result;
    d914:	9b02      	ldr	r3, [sp, #8]
}
    d916:	4618      	mov	r0, r3
    d918:	b005      	add	sp, #20
    d91a:	f85d fb04 	ldr.w	pc, [sp], #4
    d91e:	bf00      	nop
    d920:	00018640 	.word	0x00018640
    d924:	1fff935c 	.word	0x1fff935c

0000d928 <FlexCAN_Ip_MainFunctionRead>:
 * This function read the messages received as pulling or if the Interrupts are disabled.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionRead_Activity */
void FlexCAN_Ip_MainFunctionRead(uint8 instance, uint8 mb_idx)
{
    d928:	b500      	push	{lr}
    d92a:	b085      	sub	sp, #20
    d92c:	4603      	mov	r3, r0
    d92e:	460a      	mov	r2, r1
    d930:	f88d 3007 	strb.w	r3, [sp, #7]
    d934:	4613      	mov	r3, r2
    d936:	f88d 3006 	strb.w	r3, [sp, #6]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d93a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d93e:	4a22      	ldr	r2, [pc, #136]	; (d9c8 <FlexCAN_Ip_MainFunctionRead+0xa0>)
    d940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d944:	9303      	str	r3, [sp, #12]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d946:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d94a:	4a20      	ldr	r2, [pc, #128]	; (d9cc <FlexCAN_Ip_MainFunctionRead+0xa4>)
    d94c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d950:	9302      	str	r3, [sp, #8]
        }
    }
    else
    {
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
        if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    d952:	9b02      	ldr	r3, [sp, #8]
    d954:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    d958:	2b00      	cmp	r3, #0
    d95a:	d015      	beq.n	d988 <FlexCAN_Ip_MainFunctionRead+0x60>
    d95c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d960:	2b07      	cmp	r3, #7
    d962:	d811      	bhi.n	d988 <FlexCAN_Ip_MainFunctionRead+0x60>
        {
            /* just process available legacy fifo event only */
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    d964:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d968:	2b00      	cmp	r3, #0
    d96a:	d128      	bne.n	d9be <FlexCAN_Ip_MainFunctionRead+0x96>
            {
                if (FlexCAN_GetBuffStatusFlag(base, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE) != 0U)
    d96c:	2105      	movs	r1, #5
    d96e:	9803      	ldr	r0, [sp, #12]
    d970:	f7fe f8e1 	bl	bb36 <FlexCAN_GetBuffStatusFlag>
    d974:	4603      	mov	r3, r0
    d976:	2b00      	cmp	r3, #0
    d978:	d021      	beq.n	d9be <FlexCAN_Ip_MainFunctionRead+0x96>
                {
                    FlexCAN_IRQHandlerRxFIFO(instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE);
    d97a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d97e:	2105      	movs	r1, #5
    d980:	4618      	mov	r0, r3
    d982:	f7fe ff17 	bl	c7b4 <FlexCAN_IRQHandlerRxFIFO>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    d986:	e01a      	b.n	d9be <FlexCAN_Ip_MainFunctionRead+0x96>
                }
            }
        }
        else
        {
            if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    d988:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d98c:	4619      	mov	r1, r3
    d98e:	9803      	ldr	r0, [sp, #12]
    d990:	f7fe f8d1 	bl	bb36 <FlexCAN_GetBuffStatusFlag>
    d994:	4603      	mov	r3, r0
    d996:	2b00      	cmp	r3, #0
    d998:	d012      	beq.n	d9c0 <FlexCAN_Ip_MainFunctionRead+0x98>
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    d99a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d99e:	9a02      	ldr	r2, [sp, #8]
    d9a0:	011b      	lsls	r3, r3, #4
    d9a2:	4413      	add	r3, r2
    d9a4:	3304      	adds	r3, #4
    d9a6:	681b      	ldr	r3, [r3, #0]
    d9a8:	2b01      	cmp	r3, #1
    d9aa:	d109      	bne.n	d9c0 <FlexCAN_Ip_MainFunctionRead+0x98>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    d9ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
    d9b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d9b4:	4611      	mov	r1, r2
    d9b6:	4618      	mov	r0, r3
    d9b8:	f7fe fd74 	bl	c4a4 <FlexCAN_IRQHandlerRxMB>
            }
        }
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
}
    d9bc:	e000      	b.n	d9c0 <FlexCAN_Ip_MainFunctionRead+0x98>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    d9be:	bf00      	nop
}
    d9c0:	bf00      	nop
    d9c2:	b005      	add	sp, #20
    d9c4:	f85d fb04 	ldr.w	pc, [sp], #4
    d9c8:	00018640 	.word	0x00018640
    d9cc:	1fff935c 	.word	0x1fff935c

0000d9d0 <FlexCAN_Ip_MainFunctionBusOff_Privileged>:
 * This function check the bus off event.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionBusOff_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_MainFunctionBusOff_Privileged(uint8 instance)
{
    d9d0:	b510      	push	{r4, lr}
    d9d2:	b086      	sub	sp, #24
    d9d4:	4603      	mov	r3, r0
    d9d6:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    d9da:	2301      	movs	r3, #1
    d9dc:	9305      	str	r3, [sp, #20]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d9de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d9e2:	4a15      	ldr	r2, [pc, #84]	; (da38 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x68>)
    d9e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9e8:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d9ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d9ee:	4a13      	ldr	r2, [pc, #76]	; (da3c <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x6c>)
    d9f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9f4:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    d9f6:	2300      	movs	r3, #0
    d9f8:	9302      	str	r3, [sp, #8]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Get error status */
    u32ErrStatus = base->ESR1;
    d9fa:	9b04      	ldr	r3, [sp, #16]
    d9fc:	6a1b      	ldr	r3, [r3, #32]
    d9fe:	9302      	str	r3, [sp, #8]

    if (0U != (u32ErrStatus & FLEXCAN_ESR1_BOFFINT_MASK))
    da00:	9b02      	ldr	r3, [sp, #8]
    da02:	f003 0304 	and.w	r3, r3, #4
    da06:	2b00      	cmp	r3, #0
    da08:	d012      	beq.n	da30 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x60>
    {
        /* Invoke callback */
        if (state->error_callback != NULL_PTR)
    da0a:	9b03      	ldr	r3, [sp, #12]
    da0c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    da10:	2b00      	cmp	r3, #0
    da12:	d008      	beq.n	da26 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x56>
        {
            state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    da14:	9b03      	ldr	r3, [sp, #12]
    da16:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    da1a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    da1e:	9b03      	ldr	r3, [sp, #12]
    da20:	9a02      	ldr	r2, [sp, #8]
    da22:	2107      	movs	r1, #7
    da24:	47a0      	blx	r4
        }
        /* Clear BusOff Status Flag */
        base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    da26:	9b04      	ldr	r3, [sp, #16]
    da28:	2204      	movs	r2, #4
    da2a:	621a      	str	r2, [r3, #32]
        eRetVal = FLEXCAN_STATUS_SUCCESS;
    da2c:	2300      	movs	r3, #0
    da2e:	9305      	str	r3, [sp, #20]
    }
    return eRetVal;
    da30:	9b05      	ldr	r3, [sp, #20]
}
    da32:	4618      	mov	r0, r3
    da34:	b006      	add	sp, #24
    da36:	bd10      	pop	{r4, pc}
    da38:	00018640 	.word	0x00018640
    da3c:	1fff935c 	.word	0x1fff935c

0000da40 <FlexCAN_Ip_MainFunctionWrite>:
 * This function check the message if have been sent.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionWrite_Activity */
void FlexCAN_Ip_MainFunctionWrite(uint8 instance, uint8 mb_idx)
{
    da40:	b510      	push	{r4, lr}
    da42:	b098      	sub	sp, #96	; 0x60
    da44:	4603      	mov	r3, r0
    da46:	460a      	mov	r2, r1
    da48:	f88d 3007 	strb.w	r3, [sp, #7]
    da4c:	4613      	mov	r3, r2
    da4e:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    da52:	f89d 3007 	ldrb.w	r3, [sp, #7]
    da56:	4a3f      	ldr	r2, [pc, #252]	; (db54 <FlexCAN_Ip_MainFunctionWrite+0x114>)
    da58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da5c:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    da5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    da62:	4a3d      	ldr	r2, [pc, #244]	; (db58 <FlexCAN_Ip_MainFunctionWrite+0x118>)
    da64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da68:	9316      	str	r3, [sp, #88]	; 0x58

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    da6a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    da6e:	4619      	mov	r1, r3
    da70:	9817      	ldr	r0, [sp, #92]	; 0x5c
    da72:	f7fe f860 	bl	bb36 <FlexCAN_GetBuffStatusFlag>
    da76:	4603      	mov	r3, r0
    da78:	2b00      	cmp	r3, #0
    da7a:	d068      	beq.n	db4e <FlexCAN_Ip_MainFunctionWrite+0x10e>
    {
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    da7c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    da80:	9a16      	ldr	r2, [sp, #88]	; 0x58
    da82:	011b      	lsls	r3, r3, #4
    da84:	4413      	add	r3, r2
    da86:	3304      	adds	r3, #4
    da88:	681b      	ldr	r3, [r3, #0]
    da8a:	2b02      	cmp	r3, #2
    da8c:	d15f      	bne.n	db4e <FlexCAN_Ip_MainFunctionWrite+0x10e>
        {
            if (state->mbs[mb_idx].isRemote)
    da8e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    da92:	9a16      	ldr	r2, [sp, #88]	; 0x58
    da94:	011b      	lsls	r3, r3, #4
    da96:	4413      	add	r3, r2
    da98:	3309      	adds	r3, #9
    da9a:	781b      	ldrb	r3, [r3, #0]
    da9c:	2b00      	cmp	r3, #0
    da9e:	d028      	beq.n	daf2 <FlexCAN_Ip_MainFunctionWrite+0xb2>
            {
                Flexcan_Ip_MsgBuffType mb;
                mb.cs = 0U;
    daa0:	2300      	movs	r3, #0
    daa2:	9302      	str	r3, [sp, #8]
                mb.time_stamp = 0U;
    daa4:	2300      	movs	r3, #0
    daa6:	9315      	str	r3, [sp, #84]	; 0x54
                FlexCAN_LockRxMsgBuff(base, mb_idx);
    daa8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    daac:	4619      	mov	r1, r3
    daae:	9817      	ldr	r0, [sp, #92]	; 0x5c
    dab0:	f001 fa87 	bl	efc2 <FlexCAN_LockRxMsgBuff>
                FlexCAN_GetMsgBuff(base, mb_idx, &mb);
    dab4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dab8:	aa02      	add	r2, sp, #8
    daba:	4619      	mov	r1, r3
    dabc:	9817      	ldr	r0, [sp, #92]	; 0x5c
    dabe:	f001 fbaf 	bl	f220 <FlexCAN_GetMsgBuff>
                FlexCAN_UnlockRxMsgBuff(base);
    dac2:	9817      	ldr	r0, [sp, #92]	; 0x5c
    dac4:	f7fe f81d 	bl	bb02 <FlexCAN_UnlockRxMsgBuff>
                state->mbs[mb_idx].time_stamp = mb.time_stamp;
    dac8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dacc:	9a15      	ldr	r2, [sp, #84]	; 0x54
    dace:	9916      	ldr	r1, [sp, #88]	; 0x58
    dad0:	011b      	lsls	r3, r3, #4
    dad2:	440b      	add	r3, r1
    dad4:	330c      	adds	r3, #12
    dad6:	601a      	str	r2, [r3, #0]
                /* If the frame was a remote frame, clear the flag only if the response was
                * not received yet. If the response was received, leave the flag set in order
                * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
                if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    dad8:	9b02      	ldr	r3, [sp, #8]
    dada:	0e1b      	lsrs	r3, r3, #24
    dadc:	f003 030f 	and.w	r3, r3, #15
    dae0:	2b04      	cmp	r3, #4
    dae2:	d11d      	bne.n	db20 <FlexCAN_Ip_MainFunctionWrite+0xe0>
                {
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    dae4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dae8:	4619      	mov	r1, r3
    daea:	9817      	ldr	r0, [sp, #92]	; 0x5c
    daec:	f7fe f810 	bl	bb10 <FlexCAN_ClearMsgBuffIntStatusFlag>
    daf0:	e016      	b.n	db20 <FlexCAN_Ip_MainFunctionWrite+0xe0>
                }
            }
            else
            {
                state->mbs[mb_idx].time_stamp = FlexCAN_GetMsgBuffTimestamp(base, mb_idx);
    daf2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    daf6:	f89d 4006 	ldrb.w	r4, [sp, #6]
    dafa:	4619      	mov	r1, r3
    dafc:	9817      	ldr	r0, [sp, #92]	; 0x5c
    dafe:	f001 fb7b 	bl	f1f8 <FlexCAN_GetMsgBuffTimestamp>
    db02:	4601      	mov	r1, r0
    db04:	9a16      	ldr	r2, [sp, #88]	; 0x58
    db06:	0123      	lsls	r3, r4, #4
    db08:	4413      	add	r3, r2
    db0a:	330c      	adds	r3, #12
    db0c:	6019      	str	r1, [r3, #0]
                FlexCAN_UnlockRxMsgBuff(base);
    db0e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    db10:	f7fd fff7 	bl	bb02 <FlexCAN_UnlockRxMsgBuff>
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    db14:	f89d 3006 	ldrb.w	r3, [sp, #6]
    db18:	4619      	mov	r1, r3
    db1a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    db1c:	f7fd fff8 	bl	bb10 <FlexCAN_ClearMsgBuffIntStatusFlag>
            }

            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    db20:	f89d 3006 	ldrb.w	r3, [sp, #6]
    db24:	9a16      	ldr	r2, [sp, #88]	; 0x58
    db26:	011b      	lsls	r3, r3, #4
    db28:	4413      	add	r3, r2
    db2a:	3304      	adds	r3, #4
    db2c:	2200      	movs	r2, #0
    db2e:	601a      	str	r2, [r3, #0]

            /* Invoke callback */
            if (state->callback != NULL_PTR)
    db30:	9b16      	ldr	r3, [sp, #88]	; 0x58
    db32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    db36:	2b00      	cmp	r3, #0
    db38:	d009      	beq.n	db4e <FlexCAN_Ip_MainFunctionWrite+0x10e>
            {
                state->callback(instance, FLEXCAN_EVENT_TX_COMPLETE, mb_idx, state);
    db3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    db3c:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    db40:	f89d 2006 	ldrb.w	r2, [sp, #6]
    db44:	f89d 0007 	ldrb.w	r0, [sp, #7]
    db48:	9b16      	ldr	r3, [sp, #88]	; 0x58
    db4a:	2104      	movs	r1, #4
    db4c:	47a0      	blx	r4
            }
        }
    }
}
    db4e:	bf00      	nop
    db50:	b018      	add	sp, #96	; 0x60
    db52:	bd10      	pop	{r4, pc}
    db54:	00018640 	.word	0x00018640
    db58:	1fff935c 	.word	0x1fff935c

0000db5c <FlexCAN_Ip_GetStopMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STOPPED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStopMode_Activity */
boolean FlexCAN_Ip_GetStopMode_Privileged(uint8 instance)
{
    db5c:	b084      	sub	sp, #16
    db5e:	4603      	mov	r3, r0
    db60:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    db64:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db68:	4a08      	ldr	r2, [pc, #32]	; (db8c <FlexCAN_Ip_GetStopMode_Privileged+0x30>)
    db6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db6e:	9303      	str	r3, [sp, #12]
    return ((FLEXCAN_MCR_LPMACK_MASK == (base->MCR & FLEXCAN_MCR_LPMACK_MASK)) ? TRUE : FALSE);
    db70:	9b03      	ldr	r3, [sp, #12]
    db72:	681b      	ldr	r3, [r3, #0]
    db74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    db78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    db7c:	bf0c      	ite	eq
    db7e:	2301      	moveq	r3, #1
    db80:	2300      	movne	r3, #0
    db82:	b2db      	uxtb	r3, r3
}
    db84:	4618      	mov	r0, r3
    db86:	b004      	add	sp, #16
    db88:	4770      	bx	lr
    db8a:	bf00      	nop
    db8c:	00018640 	.word	0x00018640

0000db90 <FlexCAN_Ip_GetStartMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STARTED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStartMode_Activity */
boolean FlexCAN_Ip_GetStartMode_Privileged(uint8 instance)
{
    db90:	b084      	sub	sp, #16
    db92:	4603      	mov	r3, r0
    db94:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    db98:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db9c:	4a07      	ldr	r2, [pc, #28]	; (dbbc <FlexCAN_Ip_GetStartMode_Privileged+0x2c>)
    db9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dba2:	9303      	str	r3, [sp, #12]
    return ((0U == (base->MCR & (FLEXCAN_MCR_LPMACK_MASK | FLEXCAN_MCR_FRZACK_MASK))) ? TRUE : FALSE);
    dba4:	9b03      	ldr	r3, [sp, #12]
    dba6:	681b      	ldr	r3, [r3, #0]
    dba8:	f003 7388 	and.w	r3, r3, #17825792	; 0x1100000
    dbac:	2b00      	cmp	r3, #0
    dbae:	bf0c      	ite	eq
    dbb0:	2301      	moveq	r3, #1
    dbb2:	2300      	movne	r3, #0
    dbb4:	b2db      	uxtb	r3, r3
}
    dbb6:	4618      	mov	r0, r3
    dbb8:	b004      	add	sp, #16
    dbba:	4770      	bx	lr
    dbbc:	00018640 	.word	0x00018640

0000dbc0 <FlexCAN_Ip_SetStartMode_Privileged>:
 * Description   : Set the FlexCAN instance in START mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStartMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStartMode_Privileged(uint8 instance)
{
    dbc0:	b500      	push	{lr}
    dbc2:	b085      	sub	sp, #20
    dbc4:	4603      	mov	r3, r0
    dbc6:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dbca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dbce:	4a0b      	ldr	r2, [pc, #44]	; (dbfc <FlexCAN_Ip_SetStartMode_Privileged+0x3c>)
    dbd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbd4:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    dbd6:	f006 faf7 	bl	141c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>
    /* Enable Flexcan Module */
    pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    dbda:	9b03      	ldr	r3, [sp, #12]
    dbdc:	681b      	ldr	r3, [r3, #0]
    dbde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    dbe2:	9b03      	ldr	r3, [sp, #12]
    dbe4:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    dbe6:	f006 fb1b 	bl	14220 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>

    return (FlexCAN_ExitFreezeMode(pBase));
    dbea:	9803      	ldr	r0, [sp, #12]
    dbec:	f000 ff94 	bl	eb18 <FlexCAN_ExitFreezeMode>
    dbf0:	4603      	mov	r3, r0
}
    dbf2:	4618      	mov	r0, r3
    dbf4:	b005      	add	sp, #20
    dbf6:	f85d fb04 	ldr.w	pc, [sp], #4
    dbfa:	bf00      	nop
    dbfc:	00018640 	.word	0x00018640

0000dc00 <FlexCAN_Ip_SetStopMode_Privileged>:
 * Description   : Set the FlexCAN instance in STOP mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStopMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStopMode_Privileged(uint8 instance)
{
    dc00:	b500      	push	{lr}
    dc02:	b085      	sub	sp, #20
    dc04:	4603      	mov	r3, r0
    dc06:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dc0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dc0e:	4a0a      	ldr	r2, [pc, #40]	; (dc38 <FlexCAN_Ip_SetStopMode_Privileged+0x38>)
    dc10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc14:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status;
    status = FlexCAN_EnterFreezeMode(pBase);
    dc16:	9802      	ldr	r0, [sp, #8]
    dc18:	f000 fef6 	bl	ea08 <FlexCAN_EnterFreezeMode>
    dc1c:	9003      	str	r0, [sp, #12]
    if (FLEXCAN_STATUS_SUCCESS == status)
    dc1e:	9b03      	ldr	r3, [sp, #12]
    dc20:	2b00      	cmp	r3, #0
    dc22:	d103      	bne.n	dc2c <FlexCAN_Ip_SetStopMode_Privileged+0x2c>

        /* TODO: reset MB status */

        /* TODO: disable all interrupt */

        status = FlexCAN_Disable(pBase);
    dc24:	9802      	ldr	r0, [sp, #8]
    dc26:	f000 ffb9 	bl	eb9c <FlexCAN_Disable>
    dc2a:	9003      	str	r0, [sp, #12]
    }
    return status;
    dc2c:	9b03      	ldr	r3, [sp, #12]
}
    dc2e:	4618      	mov	r0, r3
    dc30:	b005      	add	sp, #20
    dc32:	f85d fb04 	ldr.w	pc, [sp], #4
    dc36:	bf00      	nop
    dc38:	00018640 	.word	0x00018640

0000dc3c <FlexCAN_Ip_SetRxMaskType_Privileged>:
 * mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxMaskType_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMaskType_Privileged(uint8 instance, Flexcan_Ip_RxMaskType type)
{
    dc3c:	b500      	push	{lr}
    dc3e:	b087      	sub	sp, #28
    dc40:	4603      	mov	r3, r0
    dc42:	9100      	str	r1, [sp, #0]
    dc44:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    dc48:	2300      	movs	r3, #0
    dc4a:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    dc4c:	2300      	movs	r3, #0
    dc4e:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dc50:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dc54:	4a1e      	ldr	r2, [pc, #120]	; (dcd0 <FlexCAN_Ip_SetRxMaskType_Privileged+0x94>)
    dc56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc5a:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    dc5c:	9803      	ldr	r0, [sp, #12]
    dc5e:	f7fd fefd 	bl	ba5c <FlexCAN_IsEnabled>
    dc62:	4603      	mov	r3, r0
    dc64:	2b00      	cmp	r3, #0
    dc66:	bf14      	ite	ne
    dc68:	2301      	movne	r3, #1
    dc6a:	2300      	moveq	r3, #0
    dc6c:	b2db      	uxtb	r3, r3
    dc6e:	f083 0301 	eor.w	r3, r3, #1
    dc72:	b2db      	uxtb	r3, r3
    dc74:	f88d 300b 	strb.w	r3, [sp, #11]
    dc78:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dc7c:	f003 0301 	and.w	r3, r3, #1
    dc80:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    dc84:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dc88:	2b00      	cmp	r3, #0
    dc8a:	d003      	beq.n	dc94 <FlexCAN_Ip_SetRxMaskType_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    dc8c:	9803      	ldr	r0, [sp, #12]
    dc8e:	f000 ff07 	bl	eaa0 <FlexCAN_Enable>
    dc92:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    dc94:	9b05      	ldr	r3, [sp, #20]
    dc96:	2b00      	cmp	r3, #0
    dc98:	d107      	bne.n	dcaa <FlexCAN_Ip_SetRxMaskType_Privileged+0x6e>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    dc9a:	f006 fae7 	bl	1426c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
        FlexCAN_SetRxMaskType(pBase, type);
    dc9e:	9900      	ldr	r1, [sp, #0]
    dca0:	9803      	ldr	r0, [sp, #12]
    dca2:	f7fe f930 	bl	bf06 <FlexCAN_SetRxMaskType>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    dca6:	f006 fb0d 	bl	142c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
    }

    if (TRUE == disabled)
    dcaa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dcae:	2b00      	cmp	r3, #0
    dcb0:	d008      	beq.n	dcc4 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
    {
        status = FlexCAN_Disable(pBase);
    dcb2:	9803      	ldr	r0, [sp, #12]
    dcb4:	f000 ff72 	bl	eb9c <FlexCAN_Disable>
    dcb8:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    dcba:	9b04      	ldr	r3, [sp, #16]
    dcbc:	2b00      	cmp	r3, #0
    dcbe:	d001      	beq.n	dcc4 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
        {
            result = status;
    dcc0:	9b04      	ldr	r3, [sp, #16]
    dcc2:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    dcc4:	9b05      	ldr	r3, [sp, #20]
}
    dcc6:	4618      	mov	r0, r3
    dcc8:	b007      	add	sp, #28
    dcca:	f85d fb04 	ldr.w	pc, [sp], #4
    dcce:	bf00      	nop
    dcd0:	00018640 	.word	0x00018640

0000dcd4 <FlexCAN_Ip_SetBitrate_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrate_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrate_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean enhExt)
{
    dcd4:	b500      	push	{lr}
    dcd6:	b087      	sub	sp, #28
    dcd8:	4603      	mov	r3, r0
    dcda:	9100      	str	r1, [sp, #0]
    dcdc:	f88d 3007 	strb.w	r3, [sp, #7]
    dce0:	4613      	mov	r3, r2
    dce2:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    dce6:	2300      	movs	r3, #0
    dce8:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    dcea:	2300      	movs	r3, #0
    dcec:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dcee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dcf2:	4a1c      	ldr	r2, [pc, #112]	; (dd64 <FlexCAN_Ip_SetBitrate_Privileged+0x90>)
    dcf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcf8:	9303      	str	r3, [sp, #12]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    dcfa:	9b03      	ldr	r3, [sp, #12]
    dcfc:	681b      	ldr	r3, [r3, #0]
    dcfe:	0fdb      	lsrs	r3, r3, #31
    dd00:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_OFF)
    (void)enhExt;
#endif
    if (TRUE == disabled)
    dd04:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dd08:	2b00      	cmp	r3, #0
    dd0a:	d003      	beq.n	dd14 <FlexCAN_Ip_SetBitrate_Privileged+0x40>
    {
        result = FlexCAN_Enable(pBase);
    dd0c:	9803      	ldr	r0, [sp, #12]
    dd0e:	f000 fec7 	bl	eaa0 <FlexCAN_Enable>
    dd12:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    dd14:	9b05      	ldr	r3, [sp, #20]
    dd16:	2b00      	cmp	r3, #0
    dd18:	d112      	bne.n	dd40 <FlexCAN_Ip_SetBitrate_Privileged+0x6c>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    dd1a:	f006 fc93 	bl	14644 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
            FlexCAN_SetEnhancedNominalTimeSegments(pBase, bitrate);
        }
        else
#endif
        {
            if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    dd1e:	9803      	ldr	r0, [sp, #12]
    dd20:	f7fe f830 	bl	bd84 <FlexCAN_IsExCbtEnabled>
    dd24:	4603      	mov	r3, r0
    dd26:	2b00      	cmp	r3, #0
    dd28:	d004      	beq.n	dd34 <FlexCAN_Ip_SetBitrate_Privileged+0x60>
            {
                FlexCAN_SetExtendedTimeSegments(pBase, bitrate);
    dd2a:	9900      	ldr	r1, [sp, #0]
    dd2c:	9803      	ldr	r0, [sp, #12]
    dd2e:	f7fd ff7f 	bl	bc30 <FlexCAN_SetExtendedTimeSegments>
    dd32:	e003      	b.n	dd3c <FlexCAN_Ip_SetBitrate_Privileged+0x68>
            }
            else
            {
                FlexCAN_SetTimeSegments(pBase, bitrate);
    dd34:	9900      	ldr	r1, [sp, #0]
    dd36:	9803      	ldr	r0, [sp, #12]
    dd38:	f7fd ff4e 	bl	bbd8 <FlexCAN_SetTimeSegments>
            }
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    dd3c:	f006 fcae 	bl	1469c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
    }

    if (TRUE == disabled)
    dd40:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dd44:	2b00      	cmp	r3, #0
    dd46:	d008      	beq.n	dd5a <FlexCAN_Ip_SetBitrate_Privileged+0x86>
    {
        status = FlexCAN_Disable(pBase);
    dd48:	9803      	ldr	r0, [sp, #12]
    dd4a:	f000 ff27 	bl	eb9c <FlexCAN_Disable>
    dd4e:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    dd50:	9b04      	ldr	r3, [sp, #16]
    dd52:	2b00      	cmp	r3, #0
    dd54:	d001      	beq.n	dd5a <FlexCAN_Ip_SetBitrate_Privileged+0x86>
        {
            result = status;
    dd56:	9b04      	ldr	r3, [sp, #16]
    dd58:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    dd5a:	9b05      	ldr	r3, [sp, #20]
}
    dd5c:	4618      	mov	r0, r3
    dd5e:	b007      	add	sp, #28
    dd60:	f85d fb04 	ldr.w	pc, [sp], #4
    dd64:	00018640 	.word	0x00018640

0000dd68 <FlexCAN_Ip_GetBitrate>:
 * or the arbitration phase of FD frames.
 *
 *END**************************************************************************/
 /* implements   FlexCAN_Ip_GetBitrate_Activity */
boolean FlexCAN_Ip_GetBitrate(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    dd68:	b500      	push	{lr}
    dd6a:	b085      	sub	sp, #20
    dd6c:	4603      	mov	r3, r0
    dd6e:	9100      	str	r1, [sp, #0]
    dd70:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dd74:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dd78:	4a0d      	ldr	r2, [pc, #52]	; (ddb0 <FlexCAN_Ip_GetBitrate+0x48>)
    dd7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd7e:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    dd80:	2300      	movs	r3, #0
    dd82:	f88d 300b 	strb.w	r3, [sp, #11]
        FlexCAN_GetEnhancedNominalTimeSegments(pBase, bitrate);
    }
    else
#endif
    {
        if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    dd86:	9803      	ldr	r0, [sp, #12]
    dd88:	f7fd fffc 	bl	bd84 <FlexCAN_IsExCbtEnabled>
    dd8c:	4603      	mov	r3, r0
    dd8e:	2b00      	cmp	r3, #0
    dd90:	d004      	beq.n	dd9c <FlexCAN_Ip_GetBitrate+0x34>
        {
            /* Get the Extended time segments*/
            FlexCAN_GetExtendedTimeSegments(pBase, bitrate);
    dd92:	9900      	ldr	r1, [sp, #0]
    dd94:	9803      	ldr	r0, [sp, #12]
    dd96:	f7fd ff79 	bl	bc8c <FlexCAN_GetExtendedTimeSegments>
    dd9a:	e003      	b.n	dda4 <FlexCAN_Ip_GetBitrate+0x3c>
        }
        else
        {
            /* Get the time segments*/
            FlexCAN_GetTimeSegments(pBase, bitrate);
    dd9c:	9900      	ldr	r1, [sp, #0]
    dd9e:	9803      	ldr	r0, [sp, #12]
    dda0:	f7fd ff9c 	bl	bcdc <FlexCAN_GetTimeSegments>
        }
    }
    return enhCbt;
    dda4:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    dda8:	4618      	mov	r0, r3
    ddaa:	b005      	add	sp, #20
    ddac:	f85d fb04 	ldr.w	pc, [sp], #4
    ddb0:	00018640 	.word	0x00018640

0000ddb4 <FlexCAN_Ip_ClearTDCFail>:
 * Description   : This function clear the TDC Fail flag.
 *
 *END**************************************************************************/
/* implements   FlexCAN_Ip_ClearTDCFail_Activity */
void FlexCAN_Ip_ClearTDCFail(uint8 u8Instance)
{
    ddb4:	b500      	push	{lr}
    ddb6:	b085      	sub	sp, #20
    ddb8:	4603      	mov	r3, r0
    ddba:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    ddbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ddc2:	4a0a      	ldr	r2, [pc, #40]	; (ddec <FlexCAN_Ip_ClearTDCFail+0x38>)
    ddc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddc8:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    ddca:	f006 faa1 	bl	14310 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
        pBase->ETDC |=  FLEXCAN_ETDC_ETDCFAIL_MASK;
    }
    else
#endif
    {
        pBase->FDCTRL |= FLEXCAN_FDCTRL_TDCFAIL_MASK;
    ddce:	9b03      	ldr	r3, [sp, #12]
    ddd0:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    ddd4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    ddd8:	9b03      	ldr	r3, [sp, #12]
    ddda:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    ddde:	f006 fac3 	bl	14368 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
}
    dde2:	bf00      	nop
    dde4:	b005      	add	sp, #20
    dde6:	f85d fb04 	ldr.w	pc, [sp], #4
    ddea:	bf00      	nop
    ddec:	00018640 	.word	0x00018640

0000ddf0 <FlexCAN_Ip_GetTDCFail>:
 *
 *END**************************************************************************/

/* implements    FlexCAN_Ip_GetTDCFail_Activity */
boolean FlexCAN_Ip_GetTDCFail(uint8 u8Instance)
{
    ddf0:	b084      	sub	sp, #16
    ddf2:	4603      	mov	r3, r0
    ddf4:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean value=FALSE;
    ddf8:	2300      	movs	r3, #0
    ddfa:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    ddfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    de02:	4a0a      	ldr	r2, [pc, #40]	; (de2c <FlexCAN_Ip_GetTDCFail+0x3c>)
    de04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de08:	9302      	str	r3, [sp, #8]
        value = ((pBase->ETDC & FLEXCAN_ETDC_ETDCFAIL_MASK) == FLEXCAN_ETDC_ETDCFAIL_MASK) ? TRUE : FALSE;
    }
    else
#endif
    {
        value = ((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCFAIL_MASK) == FLEXCAN_FDCTRL_TDCFAIL_MASK) ? TRUE : FALSE;
    de0a:	9b02      	ldr	r3, [sp, #8]
    de0c:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    de10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    de14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    de18:	bf0c      	ite	eq
    de1a:	2301      	moveq	r3, #1
    de1c:	2300      	movne	r3, #0
    de1e:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    de22:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    de26:	4618      	mov	r0, r3
    de28:	b004      	add	sp, #16
    de2a:	4770      	bx	lr
    de2c:	00018640 	.word	0x00018640

0000de30 <FlexCAN_Ip_GetTDCValue>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_GetTDCValue_Activity */
uint8 FlexCAN_Ip_GetTDCValue(uint8 u8Instance)
{
    de30:	b084      	sub	sp, #16
    de32:	4603      	mov	r3, r0
    de34:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 value = 0;
    de38:	2300      	movs	r3, #0
    de3a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    de3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    de42:	4a08      	ldr	r2, [pc, #32]	; (de64 <FlexCAN_Ip_GetTDCValue+0x34>)
    de44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de48:	9302      	str	r3, [sp, #8]
        value = (uint8)((pBase->ETDC& FLEXCAN_ETDC_ETDCVAL_MASK) >> FLEXCAN_ETDC_ETDCVAL_SHIFT);
    }
    else
#endif
    {
        value = (uint8)((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCVAL_MASK) >> FLEXCAN_FDCTRL_TDCVAL_SHIFT);
    de4a:	9b02      	ldr	r3, [sp, #8]
    de4c:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    de50:	b2db      	uxtb	r3, r3
    de52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    de56:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    de5a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    de5e:	4618      	mov	r0, r3
    de60:	b004      	add	sp, #16
    de62:	4770      	bx	lr
    de64:	00018640 	.word	0x00018640

0000de68 <FlexCAN_Ip_SetBitrateCbt_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrateCbt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrateCbt_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean bitRateSwitch)
{
    de68:	b500      	push	{lr}
    de6a:	b087      	sub	sp, #28
    de6c:	4603      	mov	r3, r0
    de6e:	9100      	str	r1, [sp, #0]
    de70:	f88d 3007 	strb.w	r3, [sp, #7]
    de74:	4613      	mov	r3, r2
    de76:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    de7a:	2300      	movs	r3, #0
    de7c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    de7e:	2300      	movs	r3, #0
    de80:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    de82:	f89d 3007 	ldrb.w	r3, [sp, #7]
    de86:	4a1e      	ldr	r2, [pc, #120]	; (df00 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x98>)
    de88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de8c:	9303      	str	r3, [sp, #12]
    boolean fd_enable = FlexCAN_IsFDEnabled(pBase);
    de8e:	9803      	ldr	r0, [sp, #12]
    de90:	f7fd ffaf 	bl	bdf2 <FlexCAN_IsFDEnabled>
    de94:	4603      	mov	r3, r0
    de96:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    de9a:	9b03      	ldr	r3, [sp, #12]
    de9c:	681b      	ldr	r3, [r3, #0]
    de9e:	0fdb      	lsrs	r3, r3, #31
    dea0:	f88d 300a 	strb.w	r3, [sp, #10]

    if (TRUE == disabled)
    dea4:	f89d 300a 	ldrb.w	r3, [sp, #10]
    dea8:	2b00      	cmp	r3, #0
    deaa:	d003      	beq.n	deb4 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x4c>
    {
        result = FlexCAN_Enable(pBase);
    deac:	9803      	ldr	r0, [sp, #12]
    deae:	f000 fdf7 	bl	eaa0 <FlexCAN_Enable>
    deb2:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    deb4:	9b05      	ldr	r3, [sp, #20]
    deb6:	2b00      	cmp	r3, #0
    deb8:	d10f      	bne.n	deda <FlexCAN_Ip_SetBitrateCbt_Privileged+0x72>
    {
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_ON)
        boolean enhCbt = FlexCAN_IsEnhCbtEnabled(pBase);
#endif
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    deba:	f006 fc15 	bl	146e8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
        FlexCAN_SetFDEnabled(pBase, fd_enable, bitRateSwitch);
    debe:	f89d 2006 	ldrb.w	r2, [sp, #6]
    dec2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dec6:	4619      	mov	r1, r3
    dec8:	9803      	ldr	r0, [sp, #12]
    deca:	f7fd fdd1 	bl	ba70 <FlexCAN_SetFDEnabled>
        }
        else
#endif
        {
            /* Set time segments*/
            FlexCAN_SetFDTimeSegments(pBase, bitrate);
    dece:	9900      	ldr	r1, [sp, #0]
    ded0:	9803      	ldr	r0, [sp, #12]
    ded2:	f7fd fe4c 	bl	bb6e <FlexCAN_SetFDTimeSegments>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    ded6:	f006 fc33 	bl	14740 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
    }

    if (TRUE == disabled)
    deda:	f89d 300a 	ldrb.w	r3, [sp, #10]
    dede:	2b00      	cmp	r3, #0
    dee0:	d008      	beq.n	def4 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    dee2:	9803      	ldr	r0, [sp, #12]
    dee4:	f000 fe5a 	bl	eb9c <FlexCAN_Disable>
    dee8:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    deea:	9b04      	ldr	r3, [sp, #16]
    deec:	2b00      	cmp	r3, #0
    deee:	d001      	beq.n	def4 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
        {
            result = status;
    def0:	9b04      	ldr	r3, [sp, #16]
    def2:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    def4:	9b05      	ldr	r3, [sp, #20]
}
    def6:	4618      	mov	r0, r3
    def8:	b007      	add	sp, #28
    defa:	f85d fb04 	ldr.w	pc, [sp], #4
    defe:	bf00      	nop
    df00:	00018640 	.word	0x00018640

0000df04 <FlexCAN_Ip_GetBitrateFD>:
 * of FD frames.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBitrateFD_Activity */
boolean FlexCAN_Ip_GetBitrateFD(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    df04:	b500      	push	{lr}
    df06:	b085      	sub	sp, #20
    df08:	4603      	mov	r3, r0
    df0a:	9100      	str	r1, [sp, #0]
    df0c:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    df10:	f89d 3007 	ldrb.w	r3, [sp, #7]
    df14:	4a08      	ldr	r2, [pc, #32]	; (df38 <FlexCAN_Ip_GetBitrateFD+0x34>)
    df16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df1a:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    df1c:	2300      	movs	r3, #0
    df1e:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    else
#endif
    {
        /* Get the time segments*/
        FlexCAN_GetFDTimeSegments(pBase, bitrate);
    df22:	9900      	ldr	r1, [sp, #0]
    df24:	9803      	ldr	r0, [sp, #12]
    df26:	f7fd ff00 	bl	bd2a <FlexCAN_GetFDTimeSegments>
    }
    return enhCbt;
    df2a:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    df2e:	4618      	mov	r0, r3
    df30:	b005      	add	sp, #20
    df32:	f85d fb04 	ldr.w	pc, [sp], #4
    df36:	bf00      	nop
    df38:	00018640 	.word	0x00018640

0000df3c <FlexCAN_Ip_SetTDCOffset_Privileged>:
 * the Transceiver Delay Compensation Offset.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTDCOffset_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTDCOffset_Privileged(uint8 instance, boolean enable, uint8 offset)
{
    df3c:	b500      	push	{lr}
    df3e:	b087      	sub	sp, #28
    df40:	4603      	mov	r3, r0
    df42:	f88d 3007 	strb.w	r3, [sp, #7]
    df46:	460b      	mov	r3, r1
    df48:	f88d 3006 	strb.w	r3, [sp, #6]
    df4c:	4613      	mov	r3, r2
    df4e:	f88d 3005 	strb.w	r3, [sp, #5]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    df52:	2300      	movs	r3, #0
    df54:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    df56:	2300      	movs	r3, #0
    df58:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    df5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    df5e:	4a20      	ldr	r2, [pc, #128]	; (dfe0 <FlexCAN_Ip_SetTDCOffset_Privileged+0xa4>)
    df60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df64:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    df66:	9803      	ldr	r0, [sp, #12]
    df68:	f7fd fd78 	bl	ba5c <FlexCAN_IsEnabled>
    df6c:	4603      	mov	r3, r0
    df6e:	2b00      	cmp	r3, #0
    df70:	bf14      	ite	ne
    df72:	2301      	movne	r3, #1
    df74:	2300      	moveq	r3, #0
    df76:	b2db      	uxtb	r3, r3
    df78:	f083 0301 	eor.w	r3, r3, #1
    df7c:	b2db      	uxtb	r3, r3
    df7e:	f88d 300b 	strb.w	r3, [sp, #11]
    df82:	f89d 300b 	ldrb.w	r3, [sp, #11]
    df86:	f003 0301 	and.w	r3, r3, #1
    df8a:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    df8e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    df92:	2b00      	cmp	r3, #0
    df94:	d003      	beq.n	df9e <FlexCAN_Ip_SetTDCOffset_Privileged+0x62>
    {
        result = FlexCAN_Enable(pBase);
    df96:	9803      	ldr	r0, [sp, #12]
    df98:	f000 fd82 	bl	eaa0 <FlexCAN_Enable>
    df9c:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    df9e:	9b05      	ldr	r3, [sp, #20]
    dfa0:	2b00      	cmp	r3, #0
    dfa2:	d10b      	bne.n	dfbc <FlexCAN_Ip_SetTDCOffset_Privileged+0x80>
    {
        /* Check if enhaced CBT is Enabled */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    dfa4:	f006 fbf2 	bl	1478c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        }
        else
#endif
        {
            /* Enable/Disable TDC and set the TDC Offset */
            FlexCAN_SetTDCOffset(pBase, enable, offset);
    dfa8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    dfac:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dfb0:	4619      	mov	r1, r3
    dfb2:	9803      	ldr	r0, [sp, #12]
    dfb4:	f7fd fd2b 	bl	ba0e <FlexCAN_SetTDCOffset>
        }
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    dfb8:	f006 fc14 	bl	147e4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        /* Check if enhaced CBT is Enabled */
    }

    if (TRUE == disabled)
    dfbc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dfc0:	2b00      	cmp	r3, #0
    dfc2:	d008      	beq.n	dfd6 <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
    {
        status = FlexCAN_Disable(pBase);
    dfc4:	9803      	ldr	r0, [sp, #12]
    dfc6:	f000 fde9 	bl	eb9c <FlexCAN_Disable>
    dfca:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    dfcc:	9b04      	ldr	r3, [sp, #16]
    dfce:	2b00      	cmp	r3, #0
    dfd0:	d001      	beq.n	dfd6 <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
        {
            result = status;
    dfd2:	9b04      	ldr	r3, [sp, #16]
    dfd4:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    dfd6:	9b05      	ldr	r3, [sp, #20]
}
    dfd8:	4618      	mov	r0, r3
    dfda:	b007      	add	sp, #28
    dfdc:	f85d fb04 	ldr.w	pc, [sp], #4
    dfe0:	00018640 	.word	0x00018640

0000dfe4 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>:
 * be delayed from the first bit of CRC field on CAN bus.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTxArbitrationStartDelay_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged(uint8 instance,  uint8 value)
{
    dfe4:	b500      	push	{lr}
    dfe6:	b087      	sub	sp, #28
    dfe8:	4603      	mov	r3, r0
    dfea:	460a      	mov	r2, r1
    dfec:	f88d 3007 	strb.w	r3, [sp, #7]
    dff0:	4613      	mov	r3, r2
    dff2:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    dff6:	2300      	movs	r3, #0
    dff8:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    dffa:	2300      	movs	r3, #0
    dffc:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dffe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e002:	4a1f      	ldr	r2, [pc, #124]	; (e080 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x9c>)
    e004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e008:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    e00a:	9803      	ldr	r0, [sp, #12]
    e00c:	f7fd fd26 	bl	ba5c <FlexCAN_IsEnabled>
    e010:	4603      	mov	r3, r0
    e012:	2b00      	cmp	r3, #0
    e014:	bf14      	ite	ne
    e016:	2301      	movne	r3, #1
    e018:	2300      	moveq	r3, #0
    e01a:	b2db      	uxtb	r3, r3
    e01c:	f083 0301 	eor.w	r3, r3, #1
    e020:	b2db      	uxtb	r3, r3
    e022:	f88d 300b 	strb.w	r3, [sp, #11]
    e026:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e02a:	f003 0301 	and.w	r3, r3, #1
    e02e:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    e032:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e036:	2b00      	cmp	r3, #0
    e038:	d003      	beq.n	e042 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    e03a:	9803      	ldr	r0, [sp, #12]
    e03c:	f000 fd30 	bl	eaa0 <FlexCAN_Enable>
    e040:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    e042:	9b05      	ldr	r3, [sp, #20]
    e044:	2b00      	cmp	r3, #0
    e046:	d109      	bne.n	e05c <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    e048:	f006 fbf2 	bl	14830 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
        FlexCAN_SetTxArbitrationStartDelay(pBase, value);
    e04c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e050:	4619      	mov	r1, r3
    e052:	9803      	ldr	r0, [sp, #12]
    e054:	f7fd ff43 	bl	bede <FlexCAN_SetTxArbitrationStartDelay>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    e058:	f006 fc16 	bl	14888 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
    }

    if (TRUE == disabled)
    e05c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e060:	2b00      	cmp	r3, #0
    e062:	d008      	beq.n	e076 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    e064:	9803      	ldr	r0, [sp, #12]
    e066:	f000 fd99 	bl	eb9c <FlexCAN_Disable>
    e06a:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    e06c:	9b04      	ldr	r3, [sp, #16]
    e06e:	2b00      	cmp	r3, #0
    e070:	d001      	beq.n	e076 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
        {
            result = status;
    e072:	9b04      	ldr	r3, [sp, #16]
    e074:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    e076:	9b05      	ldr	r3, [sp, #20]
}
    e078:	4618      	mov	r0, r3
    e07a:	b007      	add	sp, #28
    e07c:	f85d fb04 	ldr.w	pc, [sp], #4
    e080:	00018640 	.word	0x00018640

0000e084 <FlexCAN_Ip_GetBuffStatusFlag>:
 * In case of a complete operation this flag is set.
 * In case msgBuff is 255 will return Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBuffStatusFlag_Activity */
boolean FlexCAN_Ip_GetBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    e084:	b500      	push	{lr}
    e086:	b085      	sub	sp, #20
    e088:	4603      	mov	r3, r0
    e08a:	460a      	mov	r2, r1
    e08c:	f88d 3007 	strb.w	r3, [sp, #7]
    e090:	4613      	mov	r3, r2
    e092:	f88d 3006 	strb.w	r3, [sp, #6]
    boolean returnResult;
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    e096:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e09a:	4a0b      	ldr	r2, [pc, #44]	; (e0c8 <FlexCAN_Ip_GetBuffStatusFlag+0x44>)
    e09c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0a0:	9303      	str	r3, [sp, #12]
        returnResult = ((1U == FlexCAN_GetEnhancedRxFIFOStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW)) ? TRUE : FALSE);
    }
    else
#endif
    {
        returnResult = ((1U == FlexCAN_GetBuffStatusFlag(pBase, msgBuffIdx)) ? TRUE : FALSE);
    e0a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e0a6:	4619      	mov	r1, r3
    e0a8:	9803      	ldr	r0, [sp, #12]
    e0aa:	f7fd fd44 	bl	bb36 <FlexCAN_GetBuffStatusFlag>
    e0ae:	4603      	mov	r3, r0
    e0b0:	2b01      	cmp	r3, #1
    e0b2:	bf0c      	ite	eq
    e0b4:	2301      	moveq	r3, #1
    e0b6:	2300      	movne	r3, #0
    e0b8:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    return returnResult;
    e0bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    e0c0:	4618      	mov	r0, r3
    e0c2:	b005      	add	sp, #20
    e0c4:	f85d fb04 	ldr.w	pc, [sp], #4
    e0c8:	00018640 	.word	0x00018640

0000e0cc <FlexCAN_Ip_ClearBuffStatusFlag>:
 * Description   : Clear FlexCAN Message Buffer Status Flag.
 * In case msgBuff is 255 will clear Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearBuffStatusFlag_Activity */
void FlexCAN_Ip_ClearBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    e0cc:	b500      	push	{lr}
    e0ce:	b085      	sub	sp, #20
    e0d0:	4603      	mov	r3, r0
    e0d2:	460a      	mov	r2, r1
    e0d4:	f88d 3007 	strb.w	r3, [sp, #7]
    e0d8:	4613      	mov	r3, r2
    e0da:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    e0de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e0e2:	4a07      	ldr	r2, [pc, #28]	; (e100 <FlexCAN_Ip_ClearBuffStatusFlag+0x34>)
    e0e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0e8:	9303      	str	r3, [sp, #12]
        FlexCAN_ClearEnhancedRxFifoIntStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
    }
    else
#endif
    {
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, msgBuffIdx);
    e0ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e0ee:	4619      	mov	r1, r3
    e0f0:	9803      	ldr	r0, [sp, #12]
    e0f2:	f7fd fd0d 	bl	bb10 <FlexCAN_ClearMsgBuffIntStatusFlag>
    }
}
    e0f6:	bf00      	nop
    e0f8:	b005      	add	sp, #20
    e0fa:	f85d fb04 	ldr.w	pc, [sp], #4
    e0fe:	bf00      	nop
    e100:	00018640 	.word	0x00018640

0000e104 <FlexCAN_Ip_EnableInterrupts_Privileged>:
 * Description   : Enable all mb interrupts configured.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnableInterrupts_Privileged(uint8 u8Instance)
{
    e104:	b500      	push	{lr}
    e106:	b087      	sub	sp, #28
    e108:	4603      	mov	r3, r0
    e10a:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    e10e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e112:	4a11      	ldr	r2, [pc, #68]	; (e158 <FlexCAN_Ip_EnableInterrupts_Privileged+0x54>)
    e114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e118:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    e11a:	2301      	movs	r3, #1
    e11c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    e11e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e122:	4a0e      	ldr	r2, [pc, #56]	; (e15c <FlexCAN_Ip_EnableInterrupts_Privileged+0x58>)
    e124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e128:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    e12a:	9804      	ldr	r0, [sp, #16]
    e12c:	f7fd fc96 	bl	ba5c <FlexCAN_IsEnabled>
    e130:	4603      	mov	r3, r0
    e132:	2b00      	cmp	r3, #0
    e134:	d00b      	beq.n	e14e <FlexCAN_Ip_EnableInterrupts_Privileged+0x4a>
    {
        FlexCAN_EnableInterrupts(pBase, u8Instance);
    e136:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e13a:	4619      	mov	r1, r3
    e13c:	9804      	ldr	r0, [sp, #16]
    e13e:	f000 ffe1 	bl	f104 <FlexCAN_EnableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, TRUE);
            }
        }
    #endif
        state->isIntActive = TRUE;
    e142:	9b03      	ldr	r3, [sp, #12]
    e144:	2201      	movs	r2, #1
    e146:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    e14a:	2300      	movs	r3, #0
    e14c:	9305      	str	r3, [sp, #20]
    }

    return result;
    e14e:	9b05      	ldr	r3, [sp, #20]
}
    e150:	4618      	mov	r0, r3
    e152:	b007      	add	sp, #28
    e154:	f85d fb04 	ldr.w	pc, [sp], #4
    e158:	00018640 	.word	0x00018640
    e15c:	1fff935c 	.word	0x1fff935c

0000e160 <FlexCAN_Ip_DisableInterrupts_Privileged>:
 * Description   : Enable all interrupts configured.
 *
 *END**************************************************************************/
 /* implements FlexCAN_Ip_DisableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_DisableInterrupts_Privileged(uint8 u8Instance)
{
    e160:	b500      	push	{lr}
    e162:	b087      	sub	sp, #28
    e164:	4603      	mov	r3, r0
    e166:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    e16a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e16e:	4a10      	ldr	r2, [pc, #64]	; (e1b0 <FlexCAN_Ip_DisableInterrupts_Privileged+0x50>)
    e170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e174:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    e176:	2301      	movs	r3, #1
    e178:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    e17a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e17e:	4a0d      	ldr	r2, [pc, #52]	; (e1b4 <FlexCAN_Ip_DisableInterrupts_Privileged+0x54>)
    e180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e184:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    e186:	9804      	ldr	r0, [sp, #16]
    e188:	f7fd fc68 	bl	ba5c <FlexCAN_IsEnabled>
    e18c:	4603      	mov	r3, r0
    e18e:	2b00      	cmp	r3, #0
    e190:	d008      	beq.n	e1a4 <FlexCAN_Ip_DisableInterrupts_Privileged+0x44>
    {
        FlexCAN_DisableInterrupts(pBase);
    e192:	9804      	ldr	r0, [sp, #16]
    e194:	f000 ffae 	bl	f0f4 <FlexCAN_DisableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, FALSE);
            }
        }
#endif
        state->isIntActive = FALSE;
    e198:	9b03      	ldr	r3, [sp, #12]
    e19a:	2200      	movs	r2, #0
    e19c:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    e1a0:	2300      	movs	r3, #0
    e1a2:	9305      	str	r3, [sp, #20]
    }

    return result;
    e1a4:	9b05      	ldr	r3, [sp, #20]
}
    e1a6:	4618      	mov	r0, r3
    e1a8:	b007      	add	sp, #28
    e1aa:	f85d fb04 	ldr.w	pc, [sp], #4
    e1ae:	bf00      	nop
    e1b0:	00018640 	.word	0x00018640
    e1b4:	1fff935c 	.word	0x1fff935c

0000e1b8 <FlexCAN_Ip_SetErrorInt_Privileged>:
 * Description   : Enable\Disable Error or BusOff Interrupt
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetErrorInt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetErrorInt_Privileged(uint8 u8Instance, Flexcan_Ip_ErrorIntType type, boolean enable)
{
    e1b8:	b500      	push	{lr}
    e1ba:	b087      	sub	sp, #28
    e1bc:	4603      	mov	r3, r0
    e1be:	9100      	str	r1, [sp, #0]
    e1c0:	f88d 3007 	strb.w	r3, [sp, #7]
    e1c4:	4613      	mov	r3, r2
    e1c6:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e1ca:	2300      	movs	r3, #0
    e1cc:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    e1ce:	2300      	movs	r3, #0
    e1d0:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    e1d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e1d6:	4a3a      	ldr	r2, [pc, #232]	; (e2c0 <FlexCAN_Ip_SetErrorInt_Privileged+0x108>)
    e1d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1dc:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    e1de:	9803      	ldr	r0, [sp, #12]
    e1e0:	f7fd fc3c 	bl	ba5c <FlexCAN_IsEnabled>
    e1e4:	4603      	mov	r3, r0
    e1e6:	2b00      	cmp	r3, #0
    e1e8:	bf14      	ite	ne
    e1ea:	2301      	movne	r3, #1
    e1ec:	2300      	moveq	r3, #0
    e1ee:	b2db      	uxtb	r3, r3
    e1f0:	f083 0301 	eor.w	r3, r3, #1
    e1f4:	b2db      	uxtb	r3, r3
    e1f6:	f88d 300b 	strb.w	r3, [sp, #11]
    e1fa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e1fe:	f003 0301 	and.w	r3, r3, #1
    e202:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    e206:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e20a:	2b00      	cmp	r3, #0
    e20c:	d003      	beq.n	e216 <FlexCAN_Ip_SetErrorInt_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    e20e:	9803      	ldr	r0, [sp, #12]
    e210:	f000 fc46 	bl	eaa0 <FlexCAN_Enable>
    e214:	9005      	str	r0, [sp, #20]
    }

    if (FLEXCAN_STATUS_SUCCESS == result)
    e216:	9b05      	ldr	r3, [sp, #20]
    e218:	2b00      	cmp	r3, #0
    e21a:	d13c      	bne.n	e296 <FlexCAN_Ip_SetErrorInt_Privileged+0xde>
    e21c:	9b00      	ldr	r3, [sp, #0]
    e21e:	2b04      	cmp	r3, #4
    e220:	d83b      	bhi.n	e29a <FlexCAN_Ip_SetErrorInt_Privileged+0xe2>
    e222:	a201      	add	r2, pc, #4	; (adr r2, e228 <FlexCAN_Ip_SetErrorInt_Privileged+0x70>)
    e224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e228:	0000e273 	.word	0x0000e273
    e22c:	0000e285 	.word	0x0000e285
    e230:	0000e24f 	.word	0x0000e24f
    e234:	0000e261 	.word	0x0000e261
    e238:	0000e23d 	.word	0x0000e23d
    {
        switch (type)
        {
            case FLEXCAN_IP_INT_BUSOFF:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_BUSOFF, enable);
    e23c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e240:	461a      	mov	r2, r3
    e242:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    e246:	9803      	ldr	r0, [sp, #12]
    e248:	f000 fce8 	bl	ec1c <FlexCAN_SetErrIntCmd>
                break;
    e24c:	e026      	b.n	e29c <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR, enable);
    e24e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e252:	461a      	mov	r2, r3
    e254:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    e258:	9803      	ldr	r0, [sp, #12]
    e25a:	f000 fcdf 	bl	ec1c <FlexCAN_SetErrIntCmd>
                break;
    e25e:	e01d      	b.n	e29c <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR_FAST :
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR_FAST, enable);
    e260:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e264:	461a      	mov	r2, r3
    e266:	f244 0101 	movw	r1, #16385	; 0x4001
    e26a:	9803      	ldr	r0, [sp, #12]
    e26c:	f000 fcd6 	bl	ec1c <FlexCAN_SetErrIntCmd>
                break;
    e270:	e014      	b.n	e29c <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_RX_WARNING, enable);
    e272:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e276:	461a      	mov	r2, r3
    e278:	f44f 6180 	mov.w	r1, #1024	; 0x400
    e27c:	9803      	ldr	r0, [sp, #12]
    e27e:	f000 fccd 	bl	ec1c <FlexCAN_SetErrIntCmd>
                }
                break;
    e282:	e00b      	b.n	e29c <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_TX_WARNING, enable);
    e284:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e288:	461a      	mov	r2, r3
    e28a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    e28e:	9803      	ldr	r0, [sp, #12]
    e290:	f000 fcc4 	bl	ec1c <FlexCAN_SetErrIntCmd>
                }
                break;
    e294:	e002      	b.n	e29c <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    /* Should not get here */
                #endif
                break;
            }
        }
    }
    e296:	bf00      	nop
    e298:	e000      	b.n	e29c <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                break;
    e29a:	bf00      	nop

    if (TRUE == disabled)
    e29c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e2a0:	2b00      	cmp	r3, #0
    e2a2:	d008      	beq.n	e2b6 <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
    {
        status = FlexCAN_Disable(pBase);
    e2a4:	9803      	ldr	r0, [sp, #12]
    e2a6:	f000 fc79 	bl	eb9c <FlexCAN_Disable>
    e2aa:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    e2ac:	9b04      	ldr	r3, [sp, #16]
    e2ae:	2b00      	cmp	r3, #0
    e2b0:	d001      	beq.n	e2b6 <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
        {
            result = status;
    e2b2:	9b04      	ldr	r3, [sp, #16]
    e2b4:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    e2b6:	9b05      	ldr	r3, [sp, #20]
}
    e2b8:	4618      	mov	r0, r3
    e2ba:	b007      	add	sp, #28
    e2bc:	f85d fb04 	ldr.w	pc, [sp], #4
    e2c0:	00018640 	.word	0x00018640

0000e2c4 <FlexCAN_Ip_AbortTransfer>:
 * receiver.
 *
 *END**************************************************************************/
/* implements    FlexCAN_Ip_AbortTransfer_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_AbortTransfer(uint8 u8Instance, uint8 mb_idx)
{
    e2c4:	b500      	push	{lr}
    e2c6:	b087      	sub	sp, #28
    e2c8:	4603      	mov	r3, r0
    e2ca:	460a      	mov	r2, r1
    e2cc:	f88d 3007 	strb.w	r3, [sp, #7]
    e2d0:	4613      	mov	r3, r2
    e2d2:	f88d 3006 	strb.w	r3, [sp, #6]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
        DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
    #endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    e2d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e2da:	4a27      	ldr	r2, [pc, #156]	; (e378 <FlexCAN_Ip_AbortTransfer+0xb4>)
    e2dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2e0:	9304      	str	r3, [sp, #16]
#if ((FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON))
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
#else
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    e2e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e2e6:	4a25      	ldr	r2, [pc, #148]	; (e37c <FlexCAN_Ip_AbortTransfer+0xb8>)
    e2e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2ec:	9303      	str	r3, [sp, #12]
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON) */
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e2ee:	2300      	movs	r3, #0
    e2f0:	9305      	str	r3, [sp, #20]

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    e2f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e2f6:	2b1f      	cmp	r3, #31
    e2f8:	d838      	bhi.n	e36c <FlexCAN_Ip_AbortTransfer+0xa8>
    {

    if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    e2fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e2fe:	9a03      	ldr	r2, [sp, #12]
    e300:	011b      	lsls	r3, r3, #4
    e302:	4413      	add	r3, r2
    e304:	3304      	adds	r3, #4
    e306:	681b      	ldr	r3, [r3, #0]
    e308:	2b00      	cmp	r3, #0
    e30a:	d102      	bne.n	e312 <FlexCAN_Ip_AbortTransfer+0x4e>
    {
        result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    e30c:	2305      	movs	r3, #5
    e30e:	9305      	str	r3, [sp, #20]
    e310:	e02c      	b.n	e36c <FlexCAN_Ip_AbortTransfer+0xa8>
    }
    else
    {
        FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, mb_idx, state->isIntActive);
    e312:	f89d 2006 	ldrb.w	r2, [sp, #6]
    e316:	9b03      	ldr	r3, [sp, #12]
    e318:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    e31c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    e320:	9804      	ldr	r0, [sp, #16]
    e322:	f000 feb3 	bl	f08c <FLEXCAN_ClearMsgBuffIntCmd>
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    e326:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e32a:	9a03      	ldr	r2, [sp, #12]
    e32c:	011b      	lsls	r3, r3, #4
    e32e:	4413      	add	r3, r2
    e330:	3304      	adds	r3, #4
    e332:	681b      	ldr	r3, [r3, #0]
    e334:	2b02      	cmp	r3, #2
    e336:	d108      	bne.n	e34a <FlexCAN_Ip_AbortTransfer+0x86>
        {
            result = FlexCAN_AbortTxTransfer(u8Instance, mb_idx);
    e338:	f89d 2006 	ldrb.w	r2, [sp, #6]
    e33c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e340:	4611      	mov	r1, r2
    e342:	4618      	mov	r0, r3
    e344:	f7fe fabc 	bl	c8c0 <FlexCAN_AbortTxTransfer>
    e348:	9005      	str	r0, [sp, #20]
        }

        if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    e34a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e34e:	9a03      	ldr	r2, [sp, #12]
    e350:	011b      	lsls	r3, r3, #4
    e352:	4413      	add	r3, r2
    e354:	3304      	adds	r3, #4
    e356:	681b      	ldr	r3, [r3, #0]
    e358:	2b01      	cmp	r3, #1
    e35a:	d107      	bne.n	e36c <FlexCAN_Ip_AbortTransfer+0xa8>
        {
            FlexCAN_AbortRxTransfer(u8Instance, mb_idx);
    e35c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    e360:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e364:	4611      	mov	r1, r2
    e366:	4618      	mov	r0, r3
    e368:	f7fe fb34 	bl	c9d4 <FlexCAN_AbortRxTransfer>
        }
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
#endif /* if FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return result;
    e36c:	9b05      	ldr	r3, [sp, #20]
}
    e36e:	4618      	mov	r0, r3
    e370:	b007      	add	sp, #28
    e372:	f85d fb04 	ldr.w	pc, [sp], #4
    e376:	bf00      	nop
    e378:	00018640 	.word	0x00018640
    e37c:	1fff935c 	.word	0x1fff935c

0000e380 <FlexCAN_Ip_SetRxMb14Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb14Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb14Mask_Privileged(uint8 instance, uint32 mask)
{
    e380:	b500      	push	{lr}
    e382:	b087      	sub	sp, #28
    e384:	4603      	mov	r3, r0
    e386:	9100      	str	r1, [sp, #0]
    e388:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e38c:	2300      	movs	r3, #0
    e38e:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    e390:	2300      	movs	r3, #0
    e392:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    e394:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e398:	4a1b      	ldr	r2, [pc, #108]	; (e408 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x88>)
    e39a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e39e:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    e3a0:	9803      	ldr	r0, [sp, #12]
    e3a2:	f7fd fb5b 	bl	ba5c <FlexCAN_IsEnabled>
    e3a6:	4603      	mov	r3, r0
    e3a8:	2b00      	cmp	r3, #0
    e3aa:	bf14      	ite	ne
    e3ac:	2301      	movne	r3, #1
    e3ae:	2300      	moveq	r3, #0
    e3b0:	b2db      	uxtb	r3, r3
    e3b2:	f083 0301 	eor.w	r3, r3, #1
    e3b6:	b2db      	uxtb	r3, r3
    e3b8:	f88d 300b 	strb.w	r3, [sp, #11]
    e3bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e3c0:	f003 0301 	and.w	r3, r3, #1
    e3c4:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    e3c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e3cc:	2b00      	cmp	r3, #0
    e3ce:	d003      	beq.n	e3d8 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    e3d0:	9803      	ldr	r0, [sp, #12]
    e3d2:	f000 fb65 	bl	eaa0 <FlexCAN_Enable>
    e3d6:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    e3d8:	9b05      	ldr	r3, [sp, #20]
    e3da:	2b00      	cmp	r3, #0
    e3dc:	d102      	bne.n	e3e4 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x64>
    {
        pBase->RX14MASK = mask;
    e3de:	9b03      	ldr	r3, [sp, #12]
    e3e0:	9a00      	ldr	r2, [sp, #0]
    e3e2:	615a      	str	r2, [r3, #20]
    }
    if (TRUE == disabled)
    e3e4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e3e8:	2b00      	cmp	r3, #0
    e3ea:	d008      	beq.n	e3fe <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    e3ec:	9803      	ldr	r0, [sp, #12]
    e3ee:	f000 fbd5 	bl	eb9c <FlexCAN_Disable>
    e3f2:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    e3f4:	9b04      	ldr	r3, [sp, #16]
    e3f6:	2b00      	cmp	r3, #0
    e3f8:	d001      	beq.n	e3fe <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
        {
            result = status;
    e3fa:	9b04      	ldr	r3, [sp, #16]
    e3fc:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    e3fe:	9b05      	ldr	r3, [sp, #20]
}
    e400:	4618      	mov	r0, r3
    e402:	b007      	add	sp, #28
    e404:	f85d fb04 	ldr.w	pc, [sp], #4
    e408:	00018640 	.word	0x00018640

0000e40c <FlexCAN_Ip_SetRxMb15Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb15Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb15Mask_Privileged(uint8 instance, uint32 mask)
{
    e40c:	b500      	push	{lr}
    e40e:	b087      	sub	sp, #28
    e410:	4603      	mov	r3, r0
    e412:	9100      	str	r1, [sp, #0]
    e414:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e418:	2300      	movs	r3, #0
    e41a:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    e41c:	2300      	movs	r3, #0
    e41e:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    e420:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e424:	4a1b      	ldr	r2, [pc, #108]	; (e494 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x88>)
    e426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e42a:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    e42c:	9803      	ldr	r0, [sp, #12]
    e42e:	f7fd fb15 	bl	ba5c <FlexCAN_IsEnabled>
    e432:	4603      	mov	r3, r0
    e434:	2b00      	cmp	r3, #0
    e436:	bf14      	ite	ne
    e438:	2301      	movne	r3, #1
    e43a:	2300      	moveq	r3, #0
    e43c:	b2db      	uxtb	r3, r3
    e43e:	f083 0301 	eor.w	r3, r3, #1
    e442:	b2db      	uxtb	r3, r3
    e444:	f88d 300b 	strb.w	r3, [sp, #11]
    e448:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e44c:	f003 0301 	and.w	r3, r3, #1
    e450:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    e454:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e458:	2b00      	cmp	r3, #0
    e45a:	d003      	beq.n	e464 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    e45c:	9803      	ldr	r0, [sp, #12]
    e45e:	f000 fb1f 	bl	eaa0 <FlexCAN_Enable>
    e462:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    e464:	9b05      	ldr	r3, [sp, #20]
    e466:	2b00      	cmp	r3, #0
    e468:	d102      	bne.n	e470 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x64>
    {
        pBase->RX15MASK = mask;
    e46a:	9b03      	ldr	r3, [sp, #12]
    e46c:	9a00      	ldr	r2, [sp, #0]
    e46e:	619a      	str	r2, [r3, #24]
    }

    if (TRUE == disabled)
    e470:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e474:	2b00      	cmp	r3, #0
    e476:	d008      	beq.n	e48a <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    e478:	9803      	ldr	r0, [sp, #12]
    e47a:	f000 fb8f 	bl	eb9c <FlexCAN_Disable>
    e47e:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    e480:	9b04      	ldr	r3, [sp, #16]
    e482:	2b00      	cmp	r3, #0
    e484:	d001      	beq.n	e48a <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
        {
            result = status;
    e486:	9b04      	ldr	r3, [sp, #16]
    e488:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    e48a:	9b05      	ldr	r3, [sp, #20]
}
    e48c:	4618      	mov	r0, r3
    e48e:	b007      	add	sp, #28
    e490:	f85d fb04 	ldr.w	pc, [sp], #4
    e494:	00018640 	.word	0x00018640

0000e498 <FlexCAN_Ip_SetListenOnlyMode_Privileged>:
 * This function will enable or disable Listen Only mode.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_SetListenOnlyMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetListenOnlyMode_Privileged(uint8 instance, const boolean enable)
{
    e498:	b500      	push	{lr}
    e49a:	b087      	sub	sp, #28
    e49c:	4603      	mov	r3, r0
    e49e:	460a      	mov	r2, r1
    e4a0:	f88d 3007 	strb.w	r3, [sp, #7]
    e4a4:	4613      	mov	r3, r2
    e4a6:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e4aa:	2300      	movs	r3, #0
    e4ac:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    e4ae:	2300      	movs	r3, #0
    e4b0:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    e4b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e4b6:	4a1f      	ldr	r2, [pc, #124]	; (e534 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x9c>)
    e4b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4bc:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    e4be:	9803      	ldr	r0, [sp, #12]
    e4c0:	f7fd facc 	bl	ba5c <FlexCAN_IsEnabled>
    e4c4:	4603      	mov	r3, r0
    e4c6:	2b00      	cmp	r3, #0
    e4c8:	bf14      	ite	ne
    e4ca:	2301      	movne	r3, #1
    e4cc:	2300      	moveq	r3, #0
    e4ce:	b2db      	uxtb	r3, r3
    e4d0:	f083 0301 	eor.w	r3, r3, #1
    e4d4:	b2db      	uxtb	r3, r3
    e4d6:	f88d 300b 	strb.w	r3, [sp, #11]
    e4da:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e4de:	f003 0301 	and.w	r3, r3, #1
    e4e2:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    e4e6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e4ea:	2b00      	cmp	r3, #0
    e4ec:	d003      	beq.n	e4f6 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    e4ee:	9803      	ldr	r0, [sp, #12]
    e4f0:	f000 fad6 	bl	eaa0 <FlexCAN_Enable>
    e4f4:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    e4f6:	9b05      	ldr	r3, [sp, #20]
    e4f8:	2b00      	cmp	r3, #0
    e4fa:	d109      	bne.n	e510 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    e4fc:	f005 ff5a 	bl	143b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
        FlexCAN_SetListenOnlyMode(pBase, enable);
    e500:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e504:	4619      	mov	r1, r3
    e506:	9803      	ldr	r0, [sp, #12]
    e508:	f7fd fae5 	bl	bad6 <FlexCAN_SetListenOnlyMode>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    e50c:	f005 ff7e 	bl	1440c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
    }

    if (TRUE == disabled)
    e510:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e514:	2b00      	cmp	r3, #0
    e516:	d008      	beq.n	e52a <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    e518:	9803      	ldr	r0, [sp, #12]
    e51a:	f000 fb3f 	bl	eb9c <FlexCAN_Disable>
    e51e:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    e520:	9b04      	ldr	r3, [sp, #16]
    e522:	2b00      	cmp	r3, #0
    e524:	d001      	beq.n	e52a <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
        {
            result = status;
    e526:	9b04      	ldr	r3, [sp, #16]
    e528:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    e52a:	9b05      	ldr	r3, [sp, #20]
}
    e52c:	4618      	mov	r0, r3
    e52e:	b007      	add	sp, #28
    e530:	f85d fb04 	ldr.w	pc, [sp], #4
    e534:	00018640 	.word	0x00018640

0000e538 <FlexCAN_Ip_GetListenOnlyMode>:
 * Description   : Check if Listen Only mode is ENABLE.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_GetListenOnlyMode_Activity */
boolean FlexCAN_Ip_GetListenOnlyMode(uint8 instance)
{
    e538:	b500      	push	{lr}
    e53a:	b085      	sub	sp, #20
    e53c:	4603      	mov	r3, r0
    e53e:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    e542:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e546:	4a06      	ldr	r2, [pc, #24]	; (e560 <FlexCAN_Ip_GetListenOnlyMode+0x28>)
    e548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e54c:	9303      	str	r3, [sp, #12]
    return FlexCAN_IsListenOnlyModeEnabled(base);
    e54e:	9803      	ldr	r0, [sp, #12]
    e550:	f7fd fc5d 	bl	be0e <FlexCAN_IsListenOnlyModeEnabled>
    e554:	4603      	mov	r3, r0
}
    e556:	4618      	mov	r0, r3
    e558:	b005      	add	sp, #20
    e55a:	f85d fb04 	ldr.w	pc, [sp], #4
    e55e:	bf00      	nop
    e560:	00018640 	.word	0x00018640

0000e564 <FlexCAN_Ip_ManualBusOffRecovery>:
 * Description   : Recover manually from bus-off if possible.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_ManualBusOffRecovery_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ManualBusOffRecovery(uint8 Instance)
{
    e564:	b500      	push	{lr}
    e566:	b089      	sub	sp, #36	; 0x24
    e568:	4603      	mov	r3, r0
    e56a:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * Base = Flexcan_Ip_apxBase[Instance];
    e56e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e572:	4a27      	ldr	r2, [pc, #156]	; (e610 <FlexCAN_Ip_ManualBusOffRecovery+0xac>)
    e574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e578:	9305      	str	r3, [sp, #20]
    uint32 timeStart = 0U;
    e57a:	2300      	movs	r3, #0
    e57c:	9303      	str	r3, [sp, #12]
    uint32 timeElapsed = 0U;
    e57e:	2300      	movs	r3, #0
    e580:	9307      	str	r3, [sp, #28]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e582:	2100      	movs	r1, #0
    e584:	4823      	ldr	r0, [pc, #140]	; (e614 <FlexCAN_Ip_ManualBusOffRecovery+0xb0>)
    e586:	f7f3 fcfb 	bl	1f80 <OsIf_MicrosToTicks>
    e58a:	9004      	str	r0, [sp, #16]
    Flexcan_Ip_StatusType RetVal = FLEXCAN_STATUS_ERROR;
    e58c:	2301      	movs	r3, #1
    e58e:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Recover from bus-off when Automatic recovering from Bus Off state disabled. */
    if ((Base->CTRL1 & FLEXCAN_CTRL1_BOFFREC_MASK) != 0U)
    e590:	9b05      	ldr	r3, [sp, #20]
    e592:	685b      	ldr	r3, [r3, #4]
    e594:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e598:	2b00      	cmp	r3, #0
    e59a:	d033      	beq.n	e604 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
    {
        RetVal = FLEXCAN_STATUS_SUCCESS;
    e59c:	2300      	movs	r3, #0
    e59e:	9306      	str	r3, [sp, #24]
        /* return success if the controller is not in bus-off */
        if ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    e5a0:	9b05      	ldr	r3, [sp, #20]
    e5a2:	6a1b      	ldr	r3, [r3, #32]
    e5a4:	f003 0320 	and.w	r3, r3, #32
    e5a8:	2b00      	cmp	r3, #0
    e5aa:	d02b      	beq.n	e604 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
        {
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    e5ac:	f006 fa36 	bl	14a1c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* negate to recover from bus-off */
            Base->CTRL1 &= ~FLEXCAN_CTRL1_BOFFREC_MASK;
    e5b0:	9b05      	ldr	r3, [sp, #20]
    e5b2:	685b      	ldr	r3, [r3, #4]
    e5b4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    e5b8:	9b05      	ldr	r3, [sp, #20]
    e5ba:	605a      	str	r2, [r3, #4]
            /* re-assert to disable bus-off auto reocvery */
            Base->CTRL1 |= FLEXCAN_CTRL1_BOFFREC_MASK;
    e5bc:	9b05      	ldr	r3, [sp, #20]
    e5be:	685b      	ldr	r3, [r3, #4]
    e5c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    e5c4:	9b05      	ldr	r3, [sp, #20]
    e5c6:	605a      	str	r2, [r3, #4]
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    e5c8:	f006 fa54 	bl	14a74 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* Wait till exit bus-off */
            timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e5cc:	2000      	movs	r0, #0
    e5ce:	f7f3 fc8b 	bl	1ee8 <OsIf_GetCounter>
    e5d2:	4603      	mov	r3, r0
    e5d4:	9303      	str	r3, [sp, #12]

            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    e5d6:	e00f      	b.n	e5f8 <FlexCAN_Ip_ManualBusOffRecovery+0x94>
            {
                timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e5d8:	ab03      	add	r3, sp, #12
    e5da:	2100      	movs	r1, #0
    e5dc:	4618      	mov	r0, r3
    e5de:	f7f3 fc9c 	bl	1f1a <OsIf_GetElapsed>
    e5e2:	4602      	mov	r2, r0
    e5e4:	9b07      	ldr	r3, [sp, #28]
    e5e6:	4413      	add	r3, r2
    e5e8:	9307      	str	r3, [sp, #28]
                if (timeElapsed >= uS2Ticks)
    e5ea:	9a07      	ldr	r2, [sp, #28]
    e5ec:	9b04      	ldr	r3, [sp, #16]
    e5ee:	429a      	cmp	r2, r3
    e5f0:	d302      	bcc.n	e5f8 <FlexCAN_Ip_ManualBusOffRecovery+0x94>
                {
                    RetVal = FLEXCAN_STATUS_TIMEOUT;
    e5f2:	2303      	movs	r3, #3
    e5f4:	9306      	str	r3, [sp, #24]
                    break;
    e5f6:	e005      	b.n	e604 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    e5f8:	9b05      	ldr	r3, [sp, #20]
    e5fa:	6a1b      	ldr	r3, [r3, #32]
    e5fc:	f003 0320 	and.w	r3, r3, #32
    e600:	2b00      	cmp	r3, #0
    e602:	d1e9      	bne.n	e5d8 <FlexCAN_Ip_ManualBusOffRecovery+0x74>
                }
            }
        }
    }

    return RetVal;
    e604:	9b06      	ldr	r3, [sp, #24]
}
    e606:	4618      	mov	r0, r3
    e608:	b009      	add	sp, #36	; 0x24
    e60a:	f85d fb04 	ldr.w	pc, [sp], #4
    e60e:	bf00      	nop
    e610:	00018640 	.word	0x00018640
    e614:	000f4240 	.word	0x000f4240

0000e618 <FlexCAN_SetSelfReception>:
{
    e618:	b082      	sub	sp, #8
    e61a:	9001      	str	r0, [sp, #4]
    e61c:	460b      	mov	r3, r1
    e61e:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    e622:	9b01      	ldr	r3, [sp, #4]
    e624:	681b      	ldr	r3, [r3, #0]
    e626:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    e62a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e62e:	2a00      	cmp	r2, #0
    e630:	d001      	beq.n	e636 <FlexCAN_SetSelfReception+0x1e>
    e632:	2200      	movs	r2, #0
    e634:	e001      	b.n	e63a <FlexCAN_SetSelfReception+0x22>
    e636:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e63a:	431a      	orrs	r2, r3
    e63c:	9b01      	ldr	r3, [sp, #4]
    e63e:	601a      	str	r2, [r3, #0]
}
    e640:	bf00      	nop
    e642:	b002      	add	sp, #8
    e644:	4770      	bx	lr

0000e646 <FlexCAN_IsFDEnabled>:
{
    e646:	b082      	sub	sp, #8
    e648:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    e64a:	9b01      	ldr	r3, [sp, #4]
    e64c:	681b      	ldr	r3, [r3, #0]
    e64e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    e652:	2b00      	cmp	r3, #0
    e654:	bf14      	ite	ne
    e656:	2301      	movne	r3, #1
    e658:	2300      	moveq	r3, #0
    e65a:	b2db      	uxtb	r3, r3
}
    e65c:	4618      	mov	r0, r3
    e65e:	b002      	add	sp, #8
    e660:	4770      	bx	lr

0000e662 <FlexCAN_SetIsoCan>:
{
    e662:	b082      	sub	sp, #8
    e664:	9001      	str	r0, [sp, #4]
    e666:	460b      	mov	r3, r1
    e668:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ISOCANFDEN_MASK) | FLEXCAN_CTRL2_ISOCANFDEN(enable ? 1UL : 0UL);
    e66c:	9b01      	ldr	r3, [sp, #4]
    e66e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e670:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    e674:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e678:	2a00      	cmp	r2, #0
    e67a:	d002      	beq.n	e682 <FlexCAN_SetIsoCan+0x20>
    e67c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e680:	e000      	b.n	e684 <FlexCAN_SetIsoCan+0x22>
    e682:	2200      	movs	r2, #0
    e684:	431a      	orrs	r2, r3
    e686:	9b01      	ldr	r3, [sp, #4]
    e688:	635a      	str	r2, [r3, #52]	; 0x34
}
    e68a:	bf00      	nop
    e68c:	b002      	add	sp, #8
    e68e:	4770      	bx	lr

0000e690 <FlexCAN_SetEntireFrameArbitrationFieldComparison>:
{
    e690:	b082      	sub	sp, #8
    e692:	9001      	str	r0, [sp, #4]
    e694:	460b      	mov	r3, r1
    e696:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EACEN_MASK) | FLEXCAN_CTRL2_EACEN(enable ? 1UL : 0UL);
    e69a:	9b01      	ldr	r3, [sp, #4]
    e69c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e69e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    e6a2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e6a6:	2a00      	cmp	r2, #0
    e6a8:	d002      	beq.n	e6b0 <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x20>
    e6aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    e6ae:	e000      	b.n	e6b2 <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x22>
    e6b0:	2200      	movs	r2, #0
    e6b2:	431a      	orrs	r2, r3
    e6b4:	9b01      	ldr	r3, [sp, #4]
    e6b6:	635a      	str	r2, [r3, #52]	; 0x34
}
    e6b8:	bf00      	nop
    e6ba:	b002      	add	sp, #8
    e6bc:	4770      	bx	lr

0000e6be <FlexCAN_SetProtocolException>:
{
    e6be:	b082      	sub	sp, #8
    e6c0:	9001      	str	r0, [sp, #4]
    e6c2:	460b      	mov	r3, r1
    e6c4:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_PREXCEN_MASK) | FLEXCAN_CTRL2_PREXCEN(enable ? 1UL : 0UL);
    e6c8:	9b01      	ldr	r3, [sp, #4]
    e6ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e6cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    e6d0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e6d4:	2a00      	cmp	r2, #0
    e6d6:	d002      	beq.n	e6de <FlexCAN_SetProtocolException+0x20>
    e6d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    e6dc:	e000      	b.n	e6e0 <FlexCAN_SetProtocolException+0x22>
    e6de:	2200      	movs	r2, #0
    e6e0:	431a      	orrs	r2, r3
    e6e2:	9b01      	ldr	r3, [sp, #4]
    e6e4:	635a      	str	r2, [r3, #52]	; 0x34
}
    e6e6:	bf00      	nop
    e6e8:	b002      	add	sp, #8
    e6ea:	4770      	bx	lr

0000e6ec <FlexCAN_SetRemoteReqStore>:
{
    e6ec:	b082      	sub	sp, #8
    e6ee:	9001      	str	r0, [sp, #4]
    e6f0:	460b      	mov	r3, r1
    e6f2:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RRS_MASK) | FLEXCAN_CTRL2_RRS(enable ? 1UL : 0UL);
    e6f6:	9b01      	ldr	r3, [sp, #4]
    e6f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e6fa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    e6fe:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e702:	2a00      	cmp	r2, #0
    e704:	d002      	beq.n	e70c <FlexCAN_SetRemoteReqStore+0x20>
    e706:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e70a:	e000      	b.n	e70e <FlexCAN_SetRemoteReqStore+0x22>
    e70c:	2200      	movs	r2, #0
    e70e:	431a      	orrs	r2, r3
    e710:	9b01      	ldr	r3, [sp, #4]
    e712:	635a      	str	r2, [r3, #52]	; 0x34
}
    e714:	bf00      	nop
    e716:	b002      	add	sp, #8
    e718:	4770      	bx	lr

0000e71a <FlexCAN_SetBusOffAutorecovery>:
{
    e71a:	b082      	sub	sp, #8
    e71c:	9001      	str	r0, [sp, #4]
    e71e:	460b      	mov	r3, r1
    e720:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_BOFFREC_MASK) | FLEXCAN_CTRL1_BOFFREC(enable ? 0UL : 1UL);
    e724:	9b01      	ldr	r3, [sp, #4]
    e726:	685b      	ldr	r3, [r3, #4]
    e728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    e72c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e730:	2a00      	cmp	r2, #0
    e732:	d001      	beq.n	e738 <FlexCAN_SetBusOffAutorecovery+0x1e>
    e734:	2200      	movs	r2, #0
    e736:	e000      	b.n	e73a <FlexCAN_SetBusOffAutorecovery+0x20>
    e738:	2240      	movs	r2, #64	; 0x40
    e73a:	431a      	orrs	r2, r3
    e73c:	9b01      	ldr	r3, [sp, #4]
    e73e:	605a      	str	r2, [r3, #4]
}
    e740:	bf00      	nop
    e742:	b002      	add	sp, #8
    e744:	4770      	bx	lr

0000e746 <FlexCAN_SetEdgeFilter>:
{
    e746:	b082      	sub	sp, #8
    e748:	9001      	str	r0, [sp, #4]
    e74a:	460b      	mov	r3, r1
    e74c:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EDFLTDIS_MASK) | FLEXCAN_CTRL2_EDFLTDIS(enable ? 0UL : 1UL);
    e750:	9b01      	ldr	r3, [sp, #4]
    e752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e754:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    e758:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e75c:	2a00      	cmp	r2, #0
    e75e:	d001      	beq.n	e764 <FlexCAN_SetEdgeFilter+0x1e>
    e760:	2200      	movs	r2, #0
    e762:	e001      	b.n	e768 <FlexCAN_SetEdgeFilter+0x22>
    e764:	f44f 6200 	mov.w	r2, #2048	; 0x800
    e768:	431a      	orrs	r2, r3
    e76a:	9b01      	ldr	r3, [sp, #4]
    e76c:	635a      	str	r2, [r3, #52]	; 0x34
}
    e76e:	bf00      	nop
    e770:	b002      	add	sp, #8
    e772:	4770      	bx	lr

0000e774 <FlexCAN_CanBitSampling>:
{
    e774:	b082      	sub	sp, #8
    e776:	9001      	str	r0, [sp, #4]
    e778:	460b      	mov	r3, r1
    e77a:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_SMP_MASK) | FLEXCAN_CTRL1_SMP(enable ? 1UL : 0UL);
    e77e:	9b01      	ldr	r3, [sp, #4]
    e780:	685b      	ldr	r3, [r3, #4]
    e782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    e786:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e78a:	2a00      	cmp	r2, #0
    e78c:	d001      	beq.n	e792 <FlexCAN_CanBitSampling+0x1e>
    e78e:	2280      	movs	r2, #128	; 0x80
    e790:	e000      	b.n	e794 <FlexCAN_CanBitSampling+0x20>
    e792:	2200      	movs	r2, #0
    e794:	431a      	orrs	r2, r3
    e796:	9b01      	ldr	r3, [sp, #4]
    e798:	605a      	str	r2, [r3, #4]
}
    e79a:	bf00      	nop
    e79c:	b002      	add	sp, #8
    e79e:	4770      	bx	lr

0000e7a0 <FlexCAN_ComputeDLCValue>:
 * Function Name: FLEXCAN_ComputeDLCValue
 * Description  : Computes the DLC field value, given a payload size (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_ComputeDLCValue(uint8 payloadSize)
{
    e7a0:	b084      	sub	sp, #16
    e7a2:	4603      	mov	r3, r0
    e7a4:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 ret = 0xFFU;                   /* 0,  1,  2,  3,  4,  5,  6,  7,  8, */
    e7a8:	23ff      	movs	r3, #255	; 0xff
    e7aa:	9303      	str	r3, [sp, #12]
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES
                                          };

    if (payloadSize <= 64U)
    e7ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e7b0:	2b40      	cmp	r3, #64	; 0x40
    e7b2:	d804      	bhi.n	e7be <FlexCAN_ComputeDLCValue+0x1e>
    {
        ret = payload_code[payloadSize];
    e7b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e7b8:	4a03      	ldr	r2, [pc, #12]	; (e7c8 <FlexCAN_ComputeDLCValue+0x28>)
    e7ba:	5cd3      	ldrb	r3, [r2, r3]
    e7bc:	9303      	str	r3, [sp, #12]
    else
    {
        /* The argument is not a valid payload size will return 0xFF*/
    }

    return (uint8)ret;
    e7be:	9b03      	ldr	r3, [sp, #12]
    e7c0:	b2db      	uxtb	r3, r3
}
    e7c2:	4618      	mov	r0, r3
    e7c4:	b004      	add	sp, #16
    e7c6:	4770      	bx	lr
    e7c8:	0001864c 	.word	0x0001864c

0000e7cc <FlexCAN_ClearRAM>:
 * Function Name : FLEXCAN_ClearRAM
 * Description   : Clears FlexCAN memory positions that require initialization.
 *
 *END**************************************************************************/
static void FlexCAN_ClearRAM(FLEXCAN_Type * base)
{
    e7cc:	b500      	push	{lr}
    e7ce:	b087      	sub	sp, #28
    e7d0:	9001      	str	r0, [sp, #4]
    uint32 databyte;
    uint32 RAM_size   = FlexCAN_GetMaxMbNum(base) * 4U;
    e7d2:	9801      	ldr	r0, [sp, #4]
    e7d4:	f000 f8f6 	bl	e9c4 <FlexCAN_GetMaxMbNum>
    e7d8:	4603      	mov	r3, r0
    e7da:	009b      	lsls	r3, r3, #2
    e7dc:	9304      	str	r3, [sp, #16]
    uint32 RXIMR_size = FlexCAN_GetMaxMbNum(base);
    e7de:	9801      	ldr	r0, [sp, #4]
    e7e0:	f000 f8f0 	bl	e9c4 <FlexCAN_GetMaxMbNum>
    e7e4:	9003      	str	r0, [sp, #12]
    /* Address of base + ram offset to point to MB start address */
    volatile uint32 * RAM = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    e7e6:	9b01      	ldr	r3, [sp, #4]
    e7e8:	3380      	adds	r3, #128	; 0x80
    e7ea:	9302      	str	r3, [sp, #8]
    /* Clear MB region */
    for (databyte = 0U; databyte < RAM_size; databyte++)
    e7ec:	2300      	movs	r3, #0
    e7ee:	9305      	str	r3, [sp, #20]
    e7f0:	e008      	b.n	e804 <FlexCAN_ClearRAM+0x38>
    {
        RAM[databyte] = 0x0U;
    e7f2:	9b05      	ldr	r3, [sp, #20]
    e7f4:	009b      	lsls	r3, r3, #2
    e7f6:	9a02      	ldr	r2, [sp, #8]
    e7f8:	4413      	add	r3, r2
    e7fa:	2200      	movs	r2, #0
    e7fc:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RAM_size; databyte++)
    e7fe:	9b05      	ldr	r3, [sp, #20]
    e800:	3301      	adds	r3, #1
    e802:	9305      	str	r3, [sp, #20]
    e804:	9a05      	ldr	r2, [sp, #20]
    e806:	9b04      	ldr	r3, [sp, #16]
    e808:	429a      	cmp	r2, r3
    e80a:	d3f2      	bcc.n	e7f2 <FlexCAN_ClearRAM+0x26>
    }
    RAM = (volatile uint32 *)base->RXIMR;
    e80c:	9b01      	ldr	r3, [sp, #4]
    e80e:	f503 6308 	add.w	r3, r3, #2176	; 0x880
    e812:	9302      	str	r3, [sp, #8]
    /* Clear RXIMR region */
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    e814:	2300      	movs	r3, #0
    e816:	9305      	str	r3, [sp, #20]
    e818:	e008      	b.n	e82c <FlexCAN_ClearRAM+0x60>
    {
        RAM[databyte] = 0x0U;
    e81a:	9b05      	ldr	r3, [sp, #20]
    e81c:	009b      	lsls	r3, r3, #2
    e81e:	9a02      	ldr	r2, [sp, #8]
    e820:	4413      	add	r3, r2
    e822:	2200      	movs	r2, #0
    e824:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    e826:	9b05      	ldr	r3, [sp, #20]
    e828:	3301      	adds	r3, #1
    e82a:	9305      	str	r3, [sp, #20]
    e82c:	9a05      	ldr	r2, [sp, #20]
    e82e:	9b03      	ldr	r3, [sp, #12]
    e830:	429a      	cmp	r2, r3
    e832:	d3f2      	bcc.n	e81a <FlexCAN_ClearRAM+0x4e>
    }
#endif
    /* Clear WRMFRZ bit in CTRL2 Register to restrict write access to memory */
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_WRMFRZ_MASK) | FLEXCAN_CTRL2_WRMFRZ(0U);
#endif /* if FLEXCAN_IP_FEATURE_HAS_MEM_ERR_DET */
}
    e834:	bf00      	nop
    e836:	bf00      	nop
    e838:	b007      	add	sp, #28
    e83a:	f85d fb04 	ldr.w	pc, [sp], #4

0000e83e <FlexCAN_ComputePayloadSize>:
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#else
static uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
{
    e83e:	b084      	sub	sp, #16
    e840:	4603      	mov	r3, r0
    e842:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ret = 8U;
    e846:	2308      	movs	r3, #8
    e848:	f88d 300f 	strb.w	r3, [sp, #15]

    if (dlcValue <= 8U)
    e84c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e850:	2b08      	cmp	r3, #8
    e852:	d804      	bhi.n	e85e <FlexCAN_ComputePayloadSize+0x20>
    {
        ret = dlcValue;
    e854:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e858:	f88d 300f 	strb.w	r3, [sp, #15]
    e85c:	e033      	b.n	e8c6 <FlexCAN_ComputePayloadSize+0x88>
    }
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    else
    {
        switch (dlcValue)
    e85e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e862:	3b09      	subs	r3, #9
    e864:	2b06      	cmp	r3, #6
    e866:	d82d      	bhi.n	e8c4 <FlexCAN_ComputePayloadSize+0x86>
    e868:	a201      	add	r2, pc, #4	; (adr r2, e870 <FlexCAN_ComputePayloadSize+0x32>)
    e86a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e86e:	bf00      	nop
    e870:	0000e88d 	.word	0x0000e88d
    e874:	0000e895 	.word	0x0000e895
    e878:	0000e89d 	.word	0x0000e89d
    e87c:	0000e8a5 	.word	0x0000e8a5
    e880:	0000e8ad 	.word	0x0000e8ad
    e884:	0000e8b5 	.word	0x0000e8b5
    e888:	0000e8bd 	.word	0x0000e8bd
        {
            case FLEXCAN_IP_DLC_VALUE_12_BYTES:
                ret = 12U;
    e88c:	230c      	movs	r3, #12
    e88e:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e892:	e018      	b.n	e8c6 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_16_BYTES:
                ret = 16U;
    e894:	2310      	movs	r3, #16
    e896:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e89a:	e014      	b.n	e8c6 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_20_BYTES:
                ret = 20U;
    e89c:	2314      	movs	r3, #20
    e89e:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e8a2:	e010      	b.n	e8c6 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_24_BYTES:
                ret = 24U;
    e8a4:	2318      	movs	r3, #24
    e8a6:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e8aa:	e00c      	b.n	e8c6 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_32_BYTES:
                ret = 32U;
    e8ac:	2320      	movs	r3, #32
    e8ae:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e8b2:	e008      	b.n	e8c6 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_48_BYTES:
                ret = 48U;
    e8b4:	2330      	movs	r3, #48	; 0x30
    e8b6:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e8ba:	e004      	b.n	e8c6 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_64_BYTES:
                ret = 64U;
    e8bc:	2340      	movs	r3, #64	; 0x40
    e8be:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e8c2:	e000      	b.n	e8c6 <FlexCAN_ComputePayloadSize+0x88>
            default:
                /* The argument is not a valid DLC size */
                break;
    e8c4:	bf00      	nop
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    return ret;
    e8c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    e8ca:	4618      	mov	r0, r3
    e8cc:	b004      	add	sp, #16
    e8ce:	4770      	bx	lr

0000e8d0 <FlexCAN_GetMsgBuffRegion>:
 * Function Name : FLEXCAN_GetMsgBuffRegion
 * Description   : Returns the start of a MB area, based on its index.
 *
 *END**************************************************************************/
volatile uint32 * FlexCAN_GetMsgBuffRegion(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    e8d0:	b500      	push	{lr}
    e8d2:	b08b      	sub	sp, #44	; 0x2c
    e8d4:	9001      	str	r0, [sp, #4]
    e8d6:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    e8d8:	2308      	movs	r3, #8
    e8da:	f88d 3020 	strb.w	r3, [sp, #32]
    uint8 mb_size = 0U;
    e8de:	2300      	movs	r3, #0
    e8e0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ramBlockSize = 512U;
    e8e4:	f44f 7300 	mov.w	r3, #512	; 0x200
    e8e8:	9307      	str	r3, [sp, #28]
    uint16 ramBlockOffset = 0;
    e8ea:	2300      	movs	r3, #0
    e8ec:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    uint8 msgBuffIdxBackup = (uint8)msgBuffIdx;
    e8f0:	9b00      	ldr	r3, [sp, #0]
    e8f2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint8 i=0U;
    e8f6:	2300      	movs	r3, #0
    e8f8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    uint8 maxMbNum=0U;
    e8fc:	2300      	movs	r3, #0
    e8fe:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    uint32 mb_index=0U;
    e902:	2300      	movs	r3, #0
    e904:	9306      	str	r3, [sp, #24]
    uint8 payload_size=0U;
    e906:	2300      	movs	r3, #0
    e908:	f88d 3017 	strb.w	r3, [sp, #23]
    volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    e90c:	9b01      	ldr	r3, [sp, #4]
    e90e:	3380      	adds	r3, #128	; 0x80
    e910:	9304      	str	r3, [sp, #16]
    volatile uint32 * pAddressRet = NULL_PTR;
    e912:	2300      	movs	r3, #0
    e914:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY == STD_ON)
    volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    e916:	2300      	movs	r3, #0
    e918:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    e91c:	e02d      	b.n	e97a <FlexCAN_GetMsgBuffRegion+0xaa>
    {
        payload_size = FlexCAN_GetPayloadSize(base, i);
    e91e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e922:	4619      	mov	r1, r3
    e924:	9801      	ldr	r0, [sp, #4]
    e926:	f000 fad1 	bl	eecc <FlexCAN_GetPayloadSize>
    e92a:	4603      	mov	r3, r0
    e92c:	f88d 3017 	strb.w	r3, [sp, #23]
        mb_size = (uint8)(payload_size + arbitration_field_size);
    e930:	f89d 2017 	ldrb.w	r2, [sp, #23]
    e934:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e938:	4413      	add	r3, r2
    e93a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        maxMbNum = (uint8)(ramBlockSize / mb_size);
    e93e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    e942:	9a07      	ldr	r2, [sp, #28]
    e944:	fbb2 f3f3 	udiv	r3, r2, r3
    e948:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        if (maxMbNum > msgBuffIdxBackup)
    e94c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    e950:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    e954:	429a      	cmp	r2, r3
    e956:	d815      	bhi.n	e984 <FlexCAN_GetMsgBuffRegion+0xb4>
        {
            break;
        }
        ramBlockOffset += 128U;
    e958:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    e95c:	3380      	adds	r3, #128	; 0x80
    e95e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        msgBuffIdxBackup -= maxMbNum;
    e962:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    e966:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e96a:	1ad3      	subs	r3, r2, r3
    e96c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    e970:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e974:	3301      	adds	r3, #1
    e976:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    e97a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e97e:	2b00      	cmp	r3, #0
    e980:	d0cd      	beq.n	e91e <FlexCAN_GetMsgBuffRegion+0x4e>
    e982:	e000      	b.n	e986 <FlexCAN_GetMsgBuffRegion+0xb6>
            break;
    e984:	bf00      	nop
    }
    else
#endif
    {
        /* Multiply the MB index by the MB size (in words) */
        mb_index = (uint32)ramBlockOffset + (((uint32)msgBuffIdxBackup % (uint32)maxMbNum) * ((uint32)mb_size >> 2U));
    e986:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    e98a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    e98e:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    e992:	fbb3 f0f2 	udiv	r0, r3, r2
    e996:	fb00 f202 	mul.w	r2, r0, r2
    e99a:	1a9b      	subs	r3, r3, r2
    e99c:	b2db      	uxtb	r3, r3
    e99e:	461a      	mov	r2, r3
    e9a0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    e9a4:	089b      	lsrs	r3, r3, #2
    e9a6:	b2db      	uxtb	r3, r3
    e9a8:	fb02 f303 	mul.w	r3, r2, r3
    e9ac:	440b      	add	r3, r1
    e9ae:	9306      	str	r3, [sp, #24]
        pAddressRet = &(RAM[mb_index]);
    e9b0:	9b06      	ldr	r3, [sp, #24]
    e9b2:	009b      	lsls	r3, r3, #2
    e9b4:	9a04      	ldr	r2, [sp, #16]
    e9b6:	4413      	add	r3, r2
    e9b8:	9303      	str	r3, [sp, #12]
    }

    return pAddressRet;
    e9ba:	9b03      	ldr	r3, [sp, #12]
}
    e9bc:	4618      	mov	r0, r3
    e9be:	b00b      	add	sp, #44	; 0x2c
    e9c0:	f85d fb04 	ldr.w	pc, [sp], #4

0000e9c4 <FlexCAN_GetMaxMbNum>:
 * Function Name : FlexCAN_GetMaxMbNum
 * Description   : Computes the maximum RAM size occupied by MBs.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMaxMbNum(const FLEXCAN_Type * base)
{
    e9c4:	b084      	sub	sp, #16
    e9c6:	9001      	str	r0, [sp, #4]
    uint32 i, ret = 0u;
    e9c8:	2300      	movs	r3, #0
    e9ca:	9302      	str	r3, [sp, #8]
    static FLEXCAN_Type * const flexcanBase[] = IP_FLEXCAN_BASE_PTRS;
    static const uint32 maxMbNum[] = FLEXCAN_IP_FEATURE_MAX_MB_NUM_ARRAY;

    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    e9cc:	2300      	movs	r3, #0
    e9ce:	9303      	str	r3, [sp, #12]
    e9d0:	e00e      	b.n	e9f0 <FlexCAN_GetMaxMbNum+0x2c>
    {
        if (base == flexcanBase[i])
    e9d2:	4a0b      	ldr	r2, [pc, #44]	; (ea00 <FlexCAN_GetMaxMbNum+0x3c>)
    e9d4:	9b03      	ldr	r3, [sp, #12]
    e9d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9da:	9a01      	ldr	r2, [sp, #4]
    e9dc:	429a      	cmp	r2, r3
    e9de:	d104      	bne.n	e9ea <FlexCAN_GetMaxMbNum+0x26>
        {
            ret = maxMbNum[i];
    e9e0:	4a08      	ldr	r2, [pc, #32]	; (ea04 <FlexCAN_GetMaxMbNum+0x40>)
    e9e2:	9b03      	ldr	r3, [sp, #12]
    e9e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9e8:	9302      	str	r3, [sp, #8]
    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    e9ea:	9b03      	ldr	r3, [sp, #12]
    e9ec:	3301      	adds	r3, #1
    e9ee:	9303      	str	r3, [sp, #12]
    e9f0:	9b03      	ldr	r3, [sp, #12]
    e9f2:	2b02      	cmp	r3, #2
    e9f4:	d9ed      	bls.n	e9d2 <FlexCAN_GetMaxMbNum+0xe>
        }
    }
    return ret;
    e9f6:	9b02      	ldr	r3, [sp, #8]
}
    e9f8:	4618      	mov	r0, r3
    e9fa:	b004      	add	sp, #16
    e9fc:	4770      	bx	lr
    e9fe:	bf00      	nop
    ea00:	00018690 	.word	0x00018690
    ea04:	0001869c 	.word	0x0001869c

0000ea08 <FlexCAN_EnterFreezeMode>:
 * Function Name : FLEXCAN_EnterFreezeMode
 * Description   : Enter the freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnterFreezeMode(FLEXCAN_Type * base)
{
    ea08:	b500      	push	{lr}
    ea0a:	b087      	sub	sp, #28
    ea0c:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    ea0e:	2300      	movs	r3, #0
    ea10:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    ea12:	2300      	movs	r3, #0
    ea14:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ea16:	2100      	movs	r1, #0
    ea18:	4820      	ldr	r0, [pc, #128]	; (ea9c <FlexCAN_EnterFreezeMode+0x94>)
    ea1a:	f7f3 fab1 	bl	1f80 <OsIf_MicrosToTicks>
    ea1e:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    ea20:	2300      	movs	r3, #0
    ea22:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    ea24:	f005 fa36 	bl	13e94 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(1U);
    ea28:	9b01      	ldr	r3, [sp, #4]
    ea2a:	681b      	ldr	r3, [r3, #0]
    ea2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    ea30:	9b01      	ldr	r3, [sp, #4]
    ea32:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(1U);
    ea34:	9b01      	ldr	r3, [sp, #4]
    ea36:	681b      	ldr	r3, [r3, #0]
    ea38:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
    ea3c:	9b01      	ldr	r3, [sp, #4]
    ea3e:	601a      	str	r2, [r3, #0]
    if (((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U)
    ea40:	9b01      	ldr	r3, [sp, #4]
    ea42:	681b      	ldr	r3, [r3, #0]
    ea44:	2b00      	cmp	r3, #0
    ea46:	da05      	bge.n	ea54 <FlexCAN_EnterFreezeMode+0x4c>
    {
        base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    ea48:	9b01      	ldr	r3, [sp, #4]
    ea4a:	681b      	ldr	r3, [r3, #0]
    ea4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    ea50:	9b01      	ldr	r3, [sp, #4]
    ea52:	601a      	str	r2, [r3, #0]
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    ea54:	f005 fa4a 	bl	13eec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ea58:	2000      	movs	r0, #0
    ea5a:	f7f3 fa45 	bl	1ee8 <OsIf_GetCounter>
    ea5e:	4603      	mov	r3, r0
    ea60:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    ea62:	e00f      	b.n	ea84 <FlexCAN_EnterFreezeMode+0x7c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ea64:	ab02      	add	r3, sp, #8
    ea66:	2100      	movs	r1, #0
    ea68:	4618      	mov	r0, r3
    ea6a:	f7f3 fa56 	bl	1f1a <OsIf_GetElapsed>
    ea6e:	4602      	mov	r2, r0
    ea70:	9b05      	ldr	r3, [sp, #20]
    ea72:	4413      	add	r3, r2
    ea74:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    ea76:	9a05      	ldr	r2, [sp, #20]
    ea78:	9b03      	ldr	r3, [sp, #12]
    ea7a:	429a      	cmp	r2, r3
    ea7c:	d302      	bcc.n	ea84 <FlexCAN_EnterFreezeMode+0x7c>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    ea7e:	2303      	movs	r3, #3
    ea80:	9304      	str	r3, [sp, #16]
            break;
    ea82:	e005      	b.n	ea90 <FlexCAN_EnterFreezeMode+0x88>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    ea84:	9b01      	ldr	r3, [sp, #4]
    ea86:	681b      	ldr	r3, [r3, #0]
    ea88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    ea8c:	2b00      	cmp	r3, #0
    ea8e:	d0e9      	beq.n	ea64 <FlexCAN_EnterFreezeMode+0x5c>
        }
    }

    return returnResult;
    ea90:	9b04      	ldr	r3, [sp, #16]
}
    ea92:	4618      	mov	r0, r3
    ea94:	b007      	add	sp, #28
    ea96:	f85d fb04 	ldr.w	pc, [sp], #4
    ea9a:	bf00      	nop
    ea9c:	000f4240 	.word	0x000f4240

0000eaa0 <FlexCAN_Enable>:
 * Function Name : FlexCAN_Enable
 * Description   : Enable the clock for FlexCAN Module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Enable(FLEXCAN_Type * base)
{
    eaa0:	b500      	push	{lr}
    eaa2:	b087      	sub	sp, #28
    eaa4:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    eaa6:	2300      	movs	r3, #0
    eaa8:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    eaaa:	2300      	movs	r3, #0
    eaac:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    eaae:	2100      	movs	r1, #0
    eab0:	4818      	ldr	r0, [pc, #96]	; (eb14 <FlexCAN_Enable+0x74>)
    eab2:	f7f3 fa65 	bl	1f80 <OsIf_MicrosToTicks>
    eab6:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    eab8:	2300      	movs	r3, #0
    eaba:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    eabc:	f005 fa3c 	bl	13f38 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>

    /* Enable Module */
    base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    eac0:	9b01      	ldr	r3, [sp, #4]
    eac2:	681b      	ldr	r3, [r3, #0]
    eac4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    eac8:	9b01      	ldr	r3, [sp, #4]
    eaca:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    eacc:	f005 fa60 	bl	13f90 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ead0:	2000      	movs	r0, #0
    ead2:	f7f3 fa09 	bl	1ee8 <OsIf_GetCounter>
    ead6:	4603      	mov	r3, r0
    ead8:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    eada:	e00f      	b.n	eafc <FlexCAN_Enable+0x5c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    eadc:	ab02      	add	r3, sp, #8
    eade:	2100      	movs	r1, #0
    eae0:	4618      	mov	r0, r3
    eae2:	f7f3 fa1a 	bl	1f1a <OsIf_GetElapsed>
    eae6:	4602      	mov	r2, r0
    eae8:	9b05      	ldr	r3, [sp, #20]
    eaea:	4413      	add	r3, r2
    eaec:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    eaee:	9a05      	ldr	r2, [sp, #20]
    eaf0:	9b03      	ldr	r3, [sp, #12]
    eaf2:	429a      	cmp	r2, r3
    eaf4:	d302      	bcc.n	eafc <FlexCAN_Enable+0x5c>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    eaf6:	2303      	movs	r3, #3
    eaf8:	9304      	str	r3, [sp, #16]
            break;
    eafa:	e005      	b.n	eb08 <FlexCAN_Enable+0x68>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    eafc:	9b01      	ldr	r3, [sp, #4]
    eafe:	681b      	ldr	r3, [r3, #0]
    eb00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    eb04:	2b00      	cmp	r3, #0
    eb06:	d0e9      	beq.n	eadc <FlexCAN_Enable+0x3c>
        }
    }
    return returnValue;
    eb08:	9b04      	ldr	r3, [sp, #16]
}
    eb0a:	4618      	mov	r0, r3
    eb0c:	b007      	add	sp, #28
    eb0e:	f85d fb04 	ldr.w	pc, [sp], #4
    eb12:	bf00      	nop
    eb14:	000f4240 	.word	0x000f4240

0000eb18 <FlexCAN_ExitFreezeMode>:
 * Function Name : FLEXCAN_ExitFreezeMode
 * Description   : Exit of freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_ExitFreezeMode(FLEXCAN_Type * base)
{
    eb18:	b500      	push	{lr}
    eb1a:	b087      	sub	sp, #28
    eb1c:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    eb1e:	2300      	movs	r3, #0
    eb20:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    eb22:	2300      	movs	r3, #0
    eb24:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    eb26:	2100      	movs	r1, #0
    eb28:	481b      	ldr	r0, [pc, #108]	; (eb98 <FlexCAN_ExitFreezeMode+0x80>)
    eb2a:	f7f3 fa29 	bl	1f80 <OsIf_MicrosToTicks>
    eb2e:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    eb30:	2300      	movs	r3, #0
    eb32:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    eb34:	f005 fa52 	bl	13fdc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(0U);
    eb38:	9b01      	ldr	r3, [sp, #4]
    eb3a:	681b      	ldr	r3, [r3, #0]
    eb3c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
    eb40:	9b01      	ldr	r3, [sp, #4]
    eb42:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(0U);
    eb44:	9b01      	ldr	r3, [sp, #4]
    eb46:	681b      	ldr	r3, [r3, #0]
    eb48:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    eb4c:	9b01      	ldr	r3, [sp, #4]
    eb4e:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    eb50:	f005 fa70 	bl	14034 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    /* Wait till exit freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    eb54:	2000      	movs	r0, #0
    eb56:	f7f3 f9c7 	bl	1ee8 <OsIf_GetCounter>
    eb5a:	4603      	mov	r3, r0
    eb5c:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    eb5e:	e00f      	b.n	eb80 <FlexCAN_ExitFreezeMode+0x68>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    eb60:	ab02      	add	r3, sp, #8
    eb62:	2100      	movs	r1, #0
    eb64:	4618      	mov	r0, r3
    eb66:	f7f3 f9d8 	bl	1f1a <OsIf_GetElapsed>
    eb6a:	4602      	mov	r2, r0
    eb6c:	9b05      	ldr	r3, [sp, #20]
    eb6e:	4413      	add	r3, r2
    eb70:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    eb72:	9a05      	ldr	r2, [sp, #20]
    eb74:	9b03      	ldr	r3, [sp, #12]
    eb76:	429a      	cmp	r2, r3
    eb78:	d302      	bcc.n	eb80 <FlexCAN_ExitFreezeMode+0x68>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    eb7a:	2303      	movs	r3, #3
    eb7c:	9304      	str	r3, [sp, #16]
            break;
    eb7e:	e005      	b.n	eb8c <FlexCAN_ExitFreezeMode+0x74>
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    eb80:	9b01      	ldr	r3, [sp, #4]
    eb82:	681b      	ldr	r3, [r3, #0]
    eb84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    eb88:	2b00      	cmp	r3, #0
    eb8a:	d1e9      	bne.n	eb60 <FlexCAN_ExitFreezeMode+0x48>
        }
    }
    return returnValue;
    eb8c:	9b04      	ldr	r3, [sp, #16]
}
    eb8e:	4618      	mov	r0, r3
    eb90:	b007      	add	sp, #28
    eb92:	f85d fb04 	ldr.w	pc, [sp], #4
    eb96:	bf00      	nop
    eb98:	000f4240 	.word	0x000f4240

0000eb9c <FlexCAN_Disable>:
 * Description   : Disable FlexCAN module.
 * This function will disable FlexCAN module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Disable(FLEXCAN_Type * base)
{
    eb9c:	b500      	push	{lr}
    eb9e:	b087      	sub	sp, #28
    eba0:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    eba2:	2300      	movs	r3, #0
    eba4:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    eba6:	2300      	movs	r3, #0
    eba8:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ebaa:	2100      	movs	r1, #0
    ebac:	481a      	ldr	r0, [pc, #104]	; (ec18 <FlexCAN_Disable+0x7c>)
    ebae:	f7f3 f9e7 	bl	1f80 <OsIf_MicrosToTicks>
    ebb2:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    ebb4:	2300      	movs	r3, #0
    ebb6:	9304      	str	r3, [sp, #16]

    /* To access the memory mapped registers */
    /* Enter disable mode (hard reset). */
    if (0U == ((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT))
    ebb8:	9b01      	ldr	r3, [sp, #4]
    ebba:	681b      	ldr	r3, [r3, #0]
    ebbc:	2b00      	cmp	r3, #0
    ebbe:	db25      	blt.n	ec0c <FlexCAN_Disable+0x70>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    ebc0:	f005 fa5e 	bl	14080 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Clock disable (module) */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MDIS_MASK) | FLEXCAN_MCR_MDIS(1U);
    ebc4:	9b01      	ldr	r3, [sp, #4]
    ebc6:	681b      	ldr	r3, [r3, #0]
    ebc8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    ebcc:	9b01      	ldr	r3, [sp, #4]
    ebce:	601a      	str	r2, [r3, #0]
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    ebd0:	f005 fa82 	bl	140d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Wait until disable mode acknowledged */
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ebd4:	2000      	movs	r0, #0
    ebd6:	f7f3 f987 	bl	1ee8 <OsIf_GetCounter>
    ebda:	4603      	mov	r3, r0
    ebdc:	9302      	str	r3, [sp, #8]
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    ebde:	e00f      	b.n	ec00 <FlexCAN_Disable+0x64>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ebe0:	ab02      	add	r3, sp, #8
    ebe2:	2100      	movs	r1, #0
    ebe4:	4618      	mov	r0, r3
    ebe6:	f7f3 f998 	bl	1f1a <OsIf_GetElapsed>
    ebea:	4602      	mov	r2, r0
    ebec:	9b05      	ldr	r3, [sp, #20]
    ebee:	4413      	add	r3, r2
    ebf0:	9305      	str	r3, [sp, #20]
            if (timeElapsed >= uS2Ticks)
    ebf2:	9a05      	ldr	r2, [sp, #20]
    ebf4:	9b03      	ldr	r3, [sp, #12]
    ebf6:	429a      	cmp	r2, r3
    ebf8:	d302      	bcc.n	ec00 <FlexCAN_Disable+0x64>
            {
                returnResult = FLEXCAN_STATUS_TIMEOUT;
    ebfa:	2303      	movs	r3, #3
    ebfc:	9304      	str	r3, [sp, #16]
                break;
    ebfe:	e005      	b.n	ec0c <FlexCAN_Disable+0x70>
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    ec00:	9b01      	ldr	r3, [sp, #4]
    ec02:	681b      	ldr	r3, [r3, #0]
    ec04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    ec08:	2b00      	cmp	r3, #0
    ec0a:	d0e9      	beq.n	ebe0 <FlexCAN_Disable+0x44>
            }
        }
    }
    return returnResult;
    ec0c:	9b04      	ldr	r3, [sp, #16]
}
    ec0e:	4618      	mov	r0, r3
    ec10:	b007      	add	sp, #28
    ec12:	f85d fb04 	ldr.w	pc, [sp], #4
    ec16:	bf00      	nop
    ec18:	000f4240 	.word	0x000f4240

0000ec1c <FlexCAN_SetErrIntCmd>:
 * Description   : Enable the error interrupts.
 * This function will enable Error interrupt.
 *
 *END**************************************************************************/
void FlexCAN_SetErrIntCmd(FLEXCAN_Type * base, flexcan_int_type_t errType, boolean enable)
{
    ec1c:	b500      	push	{lr}
    ec1e:	b087      	sub	sp, #28
    ec20:	9003      	str	r0, [sp, #12]
    ec22:	9102      	str	r1, [sp, #8]
    ec24:	4613      	mov	r3, r2
    ec26:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 temp = (uint32)errType;
    ec2a:	9b02      	ldr	r3, [sp, #8]
    ec2c:	9305      	str	r3, [sp, #20]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    ec2e:	f005 fa79 	bl	14124 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
    if (enable)
    ec32:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ec36:	2b00      	cmp	r3, #0
    ec38:	d020      	beq.n	ec7c <FlexCAN_SetErrIntCmd+0x60>
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    ec3a:	9b02      	ldr	r3, [sp, #8]
    ec3c:	f244 0201 	movw	r2, #16385	; 0x4001
    ec40:	4293      	cmp	r3, r2
    ec42:	d106      	bne.n	ec52 <FlexCAN_SetErrIntCmd+0x36>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(1U);
    ec44:	9b03      	ldr	r3, [sp, #12]
    ec46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ec48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    ec4c:	9b03      	ldr	r3, [sp, #12]
    ec4e:	635a      	str	r2, [r3, #52]	; 0x34
    ec50:	e03a      	b.n	ecc8 <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            if ((FLEXCAN_INT_RX_WARNING == errType) || (FLEXCAN_INT_TX_WARNING == errType))
    ec52:	9b02      	ldr	r3, [sp, #8]
    ec54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    ec58:	d003      	beq.n	ec62 <FlexCAN_SetErrIntCmd+0x46>
    ec5a:	9b02      	ldr	r3, [sp, #8]
    ec5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    ec60:	d105      	bne.n	ec6e <FlexCAN_SetErrIntCmd+0x52>
            {
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(1U);
    ec62:	9b03      	ldr	r3, [sp, #12]
    ec64:	681b      	ldr	r3, [r3, #0]
    ec66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    ec6a:	9b03      	ldr	r3, [sp, #12]
    ec6c:	601a      	str	r2, [r3, #0]
            }
            (base->CTRL1) = ((base->CTRL1) | (temp));
    ec6e:	9b03      	ldr	r3, [sp, #12]
    ec70:	685a      	ldr	r2, [r3, #4]
    ec72:	9b05      	ldr	r3, [sp, #20]
    ec74:	431a      	orrs	r2, r3
    ec76:	9b03      	ldr	r3, [sp, #12]
    ec78:	605a      	str	r2, [r3, #4]
    ec7a:	e025      	b.n	ecc8 <FlexCAN_SetErrIntCmd+0xac>
        }
    }
    else
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    ec7c:	9b02      	ldr	r3, [sp, #8]
    ec7e:	f244 0201 	movw	r2, #16385	; 0x4001
    ec82:	4293      	cmp	r3, r2
    ec84:	d106      	bne.n	ec94 <FlexCAN_SetErrIntCmd+0x78>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(0U);
    ec86:	9b03      	ldr	r3, [sp, #12]
    ec88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ec8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    ec8e:	9b03      	ldr	r3, [sp, #12]
    ec90:	635a      	str	r2, [r3, #52]	; 0x34
    ec92:	e019      	b.n	ecc8 <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            (base->CTRL1) = ((base->CTRL1) & ~(temp));
    ec94:	9b03      	ldr	r3, [sp, #12]
    ec96:	685a      	ldr	r2, [r3, #4]
    ec98:	9b05      	ldr	r3, [sp, #20]
    ec9a:	43db      	mvns	r3, r3
    ec9c:	401a      	ands	r2, r3
    ec9e:	9b03      	ldr	r3, [sp, #12]
    eca0:	605a      	str	r2, [r3, #4]
            temp = base->CTRL1;
    eca2:	9b03      	ldr	r3, [sp, #12]
    eca4:	685b      	ldr	r3, [r3, #4]
    eca6:	9305      	str	r3, [sp, #20]
            if ((0U == (temp & (uint32)FLEXCAN_INT_RX_WARNING)) && (0U == (temp & (uint32)FLEXCAN_INT_TX_WARNING)))
    eca8:	9b05      	ldr	r3, [sp, #20]
    ecaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    ecae:	2b00      	cmp	r3, #0
    ecb0:	d10a      	bne.n	ecc8 <FlexCAN_SetErrIntCmd+0xac>
    ecb2:	9b05      	ldr	r3, [sp, #20]
    ecb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    ecb8:	2b00      	cmp	r3, #0
    ecba:	d105      	bne.n	ecc8 <FlexCAN_SetErrIntCmd+0xac>
            {
                /* If WRNEN disabled then both FLEXCAN_INT_RX_WARNING and FLEXCAN_INT_TX_WARNING will be disabled */
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(0U);
    ecbc:	9b03      	ldr	r3, [sp, #12]
    ecbe:	681b      	ldr	r3, [r3, #0]
    ecc0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
    ecc4:	9b03      	ldr	r3, [sp, #12]
    ecc6:	601a      	str	r2, [r3, #0]
            }
        }
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    ecc8:	f005 fa58 	bl	1417c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
}
    eccc:	bf00      	nop
    ecce:	b007      	add	sp, #28
    ecd0:	f85d fb04 	ldr.w	pc, [sp], #4

0000ecd4 <FlexCAN_Init>:
 * buffers, initialize all message buffers as inactive, enable RX FIFO
 * if needed, mask all mask bits, and disable all MB interrupts.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Init(FLEXCAN_Type * base)
{
    ecd4:	b500      	push	{lr}
    ecd6:	b087      	sub	sp, #28
    ecd8:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    ecda:	2300      	movs	r3, #0
    ecdc:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    ecde:	2300      	movs	r3, #0
    ece0:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ece2:	2100      	movs	r1, #0
    ece4:	4833      	ldr	r0, [pc, #204]	; (edb4 <FlexCAN_Init+0xe0>)
    ece6:	f7f3 f94b 	bl	1f80 <OsIf_MicrosToTicks>
    ecea:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    ecec:	2300      	movs	r3, #0
    ecee:	9304      	str	r3, [sp, #16]

    /* Reset the FLEXCAN */
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SOFTRST_MASK) | FLEXCAN_MCR_SOFTRST(1U);
    ecf0:	9b01      	ldr	r3, [sp, #4]
    ecf2:	681b      	ldr	r3, [r3, #0]
    ecf4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
    ecf8:	9b01      	ldr	r3, [sp, #4]
    ecfa:	601a      	str	r2, [r3, #0]
    /* Wait for reset cycle to complete */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ecfc:	2000      	movs	r0, #0
    ecfe:	f7f3 f8f3 	bl	1ee8 <OsIf_GetCounter>
    ed02:	4603      	mov	r3, r0
    ed04:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    ed06:	e00f      	b.n	ed28 <FlexCAN_Init+0x54>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ed08:	ab02      	add	r3, sp, #8
    ed0a:	2100      	movs	r1, #0
    ed0c:	4618      	mov	r0, r3
    ed0e:	f7f3 f904 	bl	1f1a <OsIf_GetElapsed>
    ed12:	4602      	mov	r2, r0
    ed14:	9b05      	ldr	r3, [sp, #20]
    ed16:	4413      	add	r3, r2
    ed18:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    ed1a:	9a05      	ldr	r2, [sp, #20]
    ed1c:	9b03      	ldr	r3, [sp, #12]
    ed1e:	429a      	cmp	r2, r3
    ed20:	d302      	bcc.n	ed28 <FlexCAN_Init+0x54>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    ed22:	2303      	movs	r3, #3
    ed24:	9304      	str	r3, [sp, #16]
            break;
    ed26:	e005      	b.n	ed34 <FlexCAN_Init+0x60>
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    ed28:	9b01      	ldr	r3, [sp, #4]
    ed2a:	681b      	ldr	r3, [r3, #0]
    ed2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    ed30:	2b00      	cmp	r3, #0
    ed32:	d1e9      	bne.n	ed08 <FlexCAN_Init+0x34>
        }
    }
    if (FLEXCAN_STATUS_SUCCESS == returnResult)
    ed34:	9b04      	ldr	r3, [sp, #16]
    ed36:	2b00      	cmp	r3, #0
    ed38:	d136      	bne.n	eda8 <FlexCAN_Init+0xd4>
    {
        /* Avoid Abort Transmission, use Inactive MB */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_AEN_MASK) | FLEXCAN_MCR_AEN(1U);
    ed3a:	9b01      	ldr	r3, [sp, #4]
    ed3c:	681b      	ldr	r3, [r3, #0]
    ed3e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    ed42:	9b01      	ldr	r3, [sp, #4]
    ed44:	601a      	str	r2, [r3, #0]
        /* Clear FlexCAN memory */
        FlexCAN_ClearRAM(base);
    ed46:	9801      	ldr	r0, [sp, #4]
    ed48:	f7ff fd40 	bl	e7cc <FlexCAN_ClearRAM>
        /* Rx global mask*/
        (base->RXMGMASK) = (uint32)(FLEXCAN_RXMGMASK_MG_MASK);
    ed4c:	9b01      	ldr	r3, [sp, #4]
    ed4e:	f04f 32ff 	mov.w	r2, #4294967295
    ed52:	611a      	str	r2, [r3, #16]
        /* Rx reg 14 mask*/
        (base->RX14MASK) =  (uint32)(FLEXCAN_RX14MASK_RX14M_MASK);
    ed54:	9b01      	ldr	r3, [sp, #4]
    ed56:	f04f 32ff 	mov.w	r2, #4294967295
    ed5a:	615a      	str	r2, [r3, #20]
        /* Rx reg 15 mask*/
        (base->RX15MASK) = (uint32)(FLEXCAN_RX15MASK_RX15M_MASK);
    ed5c:	9b01      	ldr	r3, [sp, #4]
    ed5e:	f04f 32ff 	mov.w	r2, #4294967295
    ed62:	619a      	str	r2, [r3, #24]
        /* Disable all MB interrupts */
        (base->IMASK1) = 0x0;
    ed64:	9b01      	ldr	r3, [sp, #4]
    ed66:	2200      	movs	r2, #0
    ed68:	629a      	str	r2, [r3, #40]	; 0x28
        /* Clear all MB interrupt flags */
        (base->IFLAG1) = FLEXCAN_IMASK1_BUF31TO0M_MASK;
    ed6a:	9b01      	ldr	r3, [sp, #4]
    ed6c:	f04f 32ff 	mov.w	r2, #4294967295
    ed70:	631a      	str	r2, [r3, #48]	; 0x30
            (base->IMASK4) = 0x0;
            (base->IFLAG4) = FLEXCAN_IMASK4_BUF127TO96M_MASK;
        }
#endif
        /* Clear all error interrupt flags */
        (base->ESR1) = FLEXCAN_IP_ALL_INT;
    ed72:	9b01      	ldr	r3, [sp, #4]
    ed74:	4a10      	ldr	r2, [pc, #64]	; (edb8 <FlexCAN_Init+0xe4>)
    ed76:	621a      	str	r2, [r3, #32]
        /* clear registers which are not effected by soft reset */
        base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    ed78:	9b01      	ldr	r3, [sp, #4]
    ed7a:	2200      	movs	r2, #0
    ed7c:	605a      	str	r2, [r3, #4]
        base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    ed7e:	9b01      	ldr	r3, [sp, #4]
    ed80:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    ed84:	635a      	str	r2, [r3, #52]	; 0x34
        base->CBT   = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    ed86:	9b01      	ldr	r3, [sp, #4]
    ed88:	2200      	movs	r2, #0
    ed8a:	651a      	str	r2, [r3, #80]	; 0x50
        base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
        base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    ed8c:	9801      	ldr	r0, [sp, #4]
    ed8e:	f000 f85b 	bl	ee48 <FlexCAN_IsFDAvailable>
    ed92:	4603      	mov	r3, r0
    ed94:	2b00      	cmp	r3, #0
    ed96:	d007      	beq.n	eda8 <FlexCAN_Init+0xd4>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    ed98:	9b01      	ldr	r3, [sp, #4]
    ed9a:	2200      	movs	r2, #0
    ed9c:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    eda0:	9b01      	ldr	r3, [sp, #4]
    eda2:	4a06      	ldr	r2, [pc, #24]	; (edbc <FlexCAN_Init+0xe8>)
    eda4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    #if defined(CAN_FEATURE_S32K1XX)
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
#endif /* (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON) */
    }
    return returnResult;
    eda8:	9b04      	ldr	r3, [sp, #16]
}
    edaa:	4618      	mov	r0, r3
    edac:	b007      	add	sp, #28
    edae:	f85d fb04 	ldr.w	pc, [sp], #4
    edb2:	bf00      	nop
    edb4:	000f4240 	.word	0x000f4240
    edb8:	003b0006 	.word	0x003b0006
    edbc:	80004100 	.word	0x80004100

0000edc0 <FlexCAN_EnableRxFifo>:
 * This function will enable the Rx FIFO feature.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnableRxFifo(FLEXCAN_Type * base,
                                         uint32 numOfFilters)
{
    edc0:	b500      	push	{lr}
    edc2:	b087      	sub	sp, #28
    edc4:	9001      	str	r0, [sp, #4]
    edc6:	9100      	str	r1, [sp, #0]
    uint32 i;
    uint16 noOfMbx = (uint16)FlexCAN_GetMaxMbNum(base);
    edc8:	9801      	ldr	r0, [sp, #4]
    edca:	f7ff fdfb 	bl	e9c4 <FlexCAN_GetMaxMbNum>
    edce:	4603      	mov	r3, r0
    edd0:	f8ad 300e 	strh.w	r3, [sp, #14]
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    edd4:	2300      	movs	r3, #0
    edd6:	9304      	str	r3, [sp, #16]

    /* RxFIFO cannot be enabled if FD is enabled */
    if (((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U)
    edd8:	9b01      	ldr	r3, [sp, #4]
    edda:	681b      	ldr	r3, [r3, #0]
    eddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    ede0:	2b00      	cmp	r3, #0
    ede2:	d001      	beq.n	ede8 <FlexCAN_EnableRxFifo+0x28>
    {
        stat = FLEXCAN_STATUS_ERROR;
    ede4:	2301      	movs	r3, #1
    ede6:	9304      	str	r3, [sp, #16]
    }
    if (FLEXCAN_STATUS_SUCCESS == stat)
    ede8:	9b04      	ldr	r3, [sp, #16]
    edea:	2b00      	cmp	r3, #0
    edec:	d127      	bne.n	ee3e <FlexCAN_EnableRxFifo+0x7e>
    {
        /* Enable RX FIFO */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_RFEN_MASK) | FLEXCAN_MCR_RFEN(1U);
    edee:	9b01      	ldr	r3, [sp, #4]
    edf0:	681b      	ldr	r3, [r3, #0]
    edf2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
    edf6:	9b01      	ldr	r3, [sp, #4]
    edf8:	601a      	str	r2, [r3, #0]
        /* Set the number of the RX FIFO filters needed */
        base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RFFN_MASK) | ((numOfFilters << FLEXCAN_CTRL2_RFFN_SHIFT) & FLEXCAN_CTRL2_RFFN_MASK);
    edfa:	9b01      	ldr	r3, [sp, #4]
    edfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    edfe:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    ee02:	9b00      	ldr	r3, [sp, #0]
    ee04:	061b      	lsls	r3, r3, #24
    ee06:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    ee0a:	431a      	orrs	r2, r3
    ee0c:	9b01      	ldr	r3, [sp, #4]
    ee0e:	635a      	str	r2, [r3, #52]	; 0x34
        /* RX FIFO global mask, take in consideration all filter fields*/
        (base->RXFGMASK) = FLEXCAN_RXFGMASK_FGM_MASK;
    ee10:	9b01      	ldr	r3, [sp, #4]
    ee12:	f04f 32ff 	mov.w	r2, #4294967295
    ee16:	649a      	str	r2, [r3, #72]	; 0x48

        for (i = 0U; i < noOfMbx; i++)
    ee18:	2300      	movs	r3, #0
    ee1a:	9305      	str	r3, [sp, #20]
    ee1c:	e00a      	b.n	ee34 <FlexCAN_EnableRxFifo+0x74>
        {
            /* RX individual mask */
            base->RXIMR[i] = (FLEXCAN_RXIMR_MI_MASK << FLEXCAN_IP_ID_EXT_SHIFT) & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    ee1e:	9b01      	ldr	r3, [sp, #4]
    ee20:	9a05      	ldr	r2, [sp, #20]
    ee22:	f502 7208 	add.w	r2, r2, #544	; 0x220
    ee26:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    ee2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = 0U; i < noOfMbx; i++)
    ee2e:	9b05      	ldr	r3, [sp, #20]
    ee30:	3301      	adds	r3, #1
    ee32:	9305      	str	r3, [sp, #20]
    ee34:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ee38:	9a05      	ldr	r2, [sp, #20]
    ee3a:	429a      	cmp	r2, r3
    ee3c:	d3ef      	bcc.n	ee1e <FlexCAN_EnableRxFifo+0x5e>
        }
    }
    return stat;
    ee3e:	9b04      	ldr	r3, [sp, #16]
}
    ee40:	4618      	mov	r0, r3
    ee42:	b007      	add	sp, #28
    ee44:	f85d fb04 	ldr.w	pc, [sp], #4

0000ee48 <FlexCAN_IsFDAvailable>:
 * Description   : Checks if FlexCAN has FD Support.
 * This function is private.
 *
 *END**************************************************************************/
boolean FlexCAN_IsFDAvailable(const FLEXCAN_Type * base)
{
    ee48:	b084      	sub	sp, #16
    ee4a:	9001      	str	r0, [sp, #4]
    uint32 i=0U;
    ee4c:	2300      	movs	r3, #0
    ee4e:	9303      	str	r3, [sp, #12]
    static FLEXCAN_Type * const flexcanBase[] = CAN_BASE_PTRS_HAS_FD;
    boolean returnValue = FALSE;
    ee50:	2300      	movs	r3, #0
    ee52:	f88d 300b 	strb.w	r3, [sp, #11]
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    ee56:	2300      	movs	r3, #0
    ee58:	9303      	str	r3, [sp, #12]
    ee5a:	e00d      	b.n	ee78 <FlexCAN_IsFDAvailable+0x30>
    {
        if (base == flexcanBase[i])
    ee5c:	4a0a      	ldr	r2, [pc, #40]	; (ee88 <FlexCAN_IsFDAvailable+0x40>)
    ee5e:	9b03      	ldr	r3, [sp, #12]
    ee60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee64:	9a01      	ldr	r2, [sp, #4]
    ee66:	429a      	cmp	r2, r3
    ee68:	d103      	bne.n	ee72 <FlexCAN_IsFDAvailable+0x2a>
        {
            returnValue = TRUE;
    ee6a:	2301      	movs	r3, #1
    ee6c:	f88d 300b 	strb.w	r3, [sp, #11]
            break;
    ee70:	e005      	b.n	ee7e <FlexCAN_IsFDAvailable+0x36>
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    ee72:	9b03      	ldr	r3, [sp, #12]
    ee74:	3301      	adds	r3, #1
    ee76:	9303      	str	r3, [sp, #12]
    ee78:	9b03      	ldr	r3, [sp, #12]
    ee7a:	2b00      	cmp	r3, #0
    ee7c:	d0ee      	beq.n	ee5c <FlexCAN_IsFDAvailable+0x14>
        }
    }

    return returnValue;
    ee7e:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    ee82:	4618      	mov	r0, r3
    ee84:	b004      	add	sp, #16
    ee86:	4770      	bx	lr
    ee88:	000186a8 	.word	0x000186a8

0000ee8c <FlexCAN_SetPayloadSize>:
 * Description   : Sets the payload size of the MBs.
 *
 *END**************************************************************************/
void FlexCAN_SetPayloadSize(FLEXCAN_Type * base,
                            const Flexcan_Ip_PayloadSizeType * payloadSize)
{
    ee8c:	b500      	push	{lr}
    ee8e:	b085      	sub	sp, #20
    ee90:	9001      	str	r0, [sp, #4]
    ee92:	9100      	str	r1, [sp, #0]
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
    DevAssert(FlexCAN_IsFDEnabled(base) || (FLEXCAN_PAYLOAD_SIZE_8 == payloadSize->payloadBlock3));
    #endif
#endif
    /* If FD is not enabled, only 8 bytes payload is supported */
    if (FlexCAN_IsFDEnabled(base))
    ee94:	9801      	ldr	r0, [sp, #4]
    ee96:	f7ff fbd6 	bl	e646 <FlexCAN_IsFDEnabled>
    ee9a:	4603      	mov	r3, r0
    ee9c:	2b00      	cmp	r3, #0
    ee9e:	d011      	beq.n	eec4 <FlexCAN_SetPayloadSize+0x38>
    {
        tmp = base->FDCTRL;
    eea0:	9b01      	ldr	r3, [sp, #4]
    eea2:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    eea6:	9303      	str	r3, [sp, #12]
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR0_MASK);
    eea8:	9b03      	ldr	r3, [sp, #12]
    eeaa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    eeae:	9303      	str	r3, [sp, #12]
        tmp |= ((uint32)payloadSize->payloadBlock0) << FLEXCAN_FDCTRL_MBDSR0_SHIFT;
    eeb0:	9b00      	ldr	r3, [sp, #0]
    eeb2:	681b      	ldr	r3, [r3, #0]
    eeb4:	041b      	lsls	r3, r3, #16
    eeb6:	9a03      	ldr	r2, [sp, #12]
    eeb8:	4313      	orrs	r3, r2
    eeba:	9303      	str	r3, [sp, #12]
#endif
#if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR3_MASK);
        tmp |= ((uint32)payloadSize->payloadBlock3) << FLEXCAN_FDCTRL_MBDSR3_SHIFT;
#endif
        base->FDCTRL = tmp;
    eebc:	9b01      	ldr	r3, [sp, #4]
    eebe:	9a03      	ldr	r2, [sp, #12]
    eec0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
}
    eec4:	bf00      	nop
    eec6:	b005      	add	sp, #20
    eec8:	f85d fb04 	ldr.w	pc, [sp], #4

0000eecc <FlexCAN_GetPayloadSize>:
 * Function Name : FLEXCAN_GetPayloadSize
 * Description   : Returns the payload size of the MBs (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_GetPayloadSize(const FLEXCAN_Type * base, uint8 mbdsrIdx)
{
    eecc:	b500      	push	{lr}
    eece:	b085      	sub	sp, #20
    eed0:	9001      	str	r0, [sp, #4]
    eed2:	460b      	mov	r3, r1
    eed4:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 payloadSize = 0U;
    eed8:	2300      	movs	r3, #0
    eeda:	9303      	str	r3, [sp, #12]

#if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    eedc:	9801      	ldr	r0, [sp, #4]
    eede:	f7ff ffb3 	bl	ee48 <FlexCAN_IsFDAvailable>
    eee2:	4603      	mov	r3, r0
    eee4:	2b00      	cmp	r3, #0
    eee6:	d019      	beq.n	ef1c <FlexCAN_GetPayloadSize+0x50>
    {
#endif /* defined(CAN_FEATURE_S32K1XX) */
    switch (mbdsrIdx)
    eee8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    eeec:	2b00      	cmp	r3, #0
    eeee:	d10a      	bne.n	ef06 <FlexCAN_GetPayloadSize+0x3a>
    {
        case 0 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    eef0:	9b01      	ldr	r3, [sp, #4]
    eef2:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    eef6:	0c1b      	lsrs	r3, r3, #16
    eef8:	f003 0303 	and.w	r3, r3, #3
    eefc:	2208      	movs	r2, #8
    eefe:	fa02 f303 	lsl.w	r3, r2, r3
    ef02:	9303      	str	r3, [sp, #12]
    ef04:	e00c      	b.n	ef20 <FlexCAN_GetPayloadSize+0x54>
        case 2 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR2_MASK) >> FLEXCAN_FDCTRL_MBDSR2_SHIFT); } break;
    #endif
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        case 3 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR3_MASK) >> FLEXCAN_FDCTRL_MBDSR3_SHIFT); } break;
    #endif
        default :{  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    ef06:	9b01      	ldr	r3, [sp, #4]
    ef08:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    ef0c:	0c1b      	lsrs	r3, r3, #16
    ef0e:	f003 0303 	and.w	r3, r3, #3
    ef12:	2208      	movs	r2, #8
    ef14:	fa02 f303 	lsl.w	r3, r2, r3
    ef18:	9303      	str	r3, [sp, #12]
    ef1a:	e001      	b.n	ef20 <FlexCAN_GetPayloadSize+0x54>
    }
    #if defined(CAN_FEATURE_S32K1XX)
    }
    else
    {
        payloadSize = 8U;
    ef1c:	2308      	movs	r3, #8
    ef1e:	9303      	str	r3, [sp, #12]
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
    return (uint8)payloadSize;
    ef20:	9b03      	ldr	r3, [sp, #12]
    ef22:	b2db      	uxtb	r3, r3
}
    ef24:	4618      	mov	r0, r3
    ef26:	b005      	add	sp, #20
    ef28:	f85d fb04 	ldr.w	pc, [sp], #4

0000ef2c <FlexCAN_GetMbPayloadSize>:



uint8 FlexCAN_GetMbPayloadSize(const FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    ef2c:	b500      	push	{lr}
    ef2e:	b087      	sub	sp, #28
    ef30:	9001      	str	r0, [sp, #4]
    ef32:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    ef34:	2308      	movs	r3, #8
    ef36:	f88d 3014 	strb.w	r3, [sp, #20]
    uint32 ramBlockSize = 512U;
    ef3a:	f44f 7300 	mov.w	r3, #512	; 0x200
    ef3e:	9304      	str	r3, [sp, #16]
    uint8 can_real_payload = 8U;
    ef40:	2308      	movs	r3, #8
    ef42:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 maxMbBlockNum = 0U;
    ef46:	2300      	movs	r3, #0
    ef48:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8 i=0U;
    ef4c:	2300      	movs	r3, #0
    ef4e:	f88d 3015 	strb.w	r3, [sp, #21]
    uint8 mb_size = 0U;
    ef52:	2300      	movs	r3, #0
    ef54:	f88d 300f 	strb.w	r3, [sp, #15]

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    ef58:	2300      	movs	r3, #0
    ef5a:	f88d 3015 	strb.w	r3, [sp, #21]
    ef5e:	e024      	b.n	efaa <FlexCAN_GetMbPayloadSize+0x7e>
    {
        /* Check that the number of MBs is supported based on the payload size*/
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        can_real_payload = FlexCAN_GetPayloadSize(base, i);
    ef60:	f89d 3015 	ldrb.w	r3, [sp, #21]
    ef64:	4619      	mov	r1, r3
    ef66:	9801      	ldr	r0, [sp, #4]
    ef68:	f7ff ffb0 	bl	eecc <FlexCAN_GetPayloadSize>
    ef6c:	4603      	mov	r3, r0
    ef6e:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* Else can_real_payload will remain as 8 payload size */
        mb_size = (uint8)(can_real_payload + arbitration_field_size);
    ef72:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ef76:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ef7a:	4413      	add	r3, r2
    ef7c:	f88d 300f 	strb.w	r3, [sp, #15]
        maxMbBlockNum += (uint8)(ramBlockSize / mb_size);
    ef80:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ef84:	9a04      	ldr	r2, [sp, #16]
    ef86:	fbb2 f3f3 	udiv	r3, r2, r3
    ef8a:	b2da      	uxtb	r2, r3
    ef8c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ef90:	4413      	add	r3, r2
    ef92:	f88d 3016 	strb.w	r3, [sp, #22]
        if (maxMbBlockNum > maxMsgBuffNum)
    ef96:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ef9a:	9a00      	ldr	r2, [sp, #0]
    ef9c:	429a      	cmp	r2, r3
    ef9e:	d309      	bcc.n	efb4 <FlexCAN_GetMbPayloadSize+0x88>
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    efa0:	f89d 3015 	ldrb.w	r3, [sp, #21]
    efa4:	3301      	adds	r3, #1
    efa6:	f88d 3015 	strb.w	r3, [sp, #21]
    efaa:	f89d 3015 	ldrb.w	r3, [sp, #21]
    efae:	2b00      	cmp	r3, #0
    efb0:	d0d6      	beq.n	ef60 <FlexCAN_GetMbPayloadSize+0x34>
    efb2:	e000      	b.n	efb6 <FlexCAN_GetMbPayloadSize+0x8a>
        {
            break;
    efb4:	bf00      	nop
    {
        can_real_payload = 64U;
    }
 #endif

    return can_real_payload;
    efb6:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    efba:	4618      	mov	r0, r3
    efbc:	b007      	add	sp, #28
    efbe:	f85d fb04 	ldr.w	pc, [sp], #4

0000efc2 <FlexCAN_LockRxMsgBuff>:
 * Description   : Lock the RX message buffer.
 * This function will lock the RX message buffer.
 *
 *END**************************************************************************/
void FlexCAN_LockRxMsgBuff(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    efc2:	b500      	push	{lr}
    efc4:	b085      	sub	sp, #20
    efc6:	9001      	str	r0, [sp, #4]
    efc8:	9100      	str	r1, [sp, #0]
    volatile const uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    efca:	9900      	ldr	r1, [sp, #0]
    efcc:	9801      	ldr	r0, [sp, #4]
    efce:	f7ff fc7f 	bl	e8d0 <FlexCAN_GetMsgBuffRegion>
    efd2:	9003      	str	r0, [sp, #12]

    /* Lock the mailbox by reading it */
    (void)*flexcan_mb;
    efd4:	9b03      	ldr	r3, [sp, #12]
    efd6:	681b      	ldr	r3, [r3, #0]
}
    efd8:	bf00      	nop
    efda:	b005      	add	sp, #20
    efdc:	f85d fb04 	ldr.w	pc, [sp], #4

0000efe0 <FlexCAN_SetMsgBuffIntCmd>:
                                               uint8 u8Instance,
                                               uint32 msgBuffIdx,
                                               boolean enable,
                                               boolean bIsIntActive
                                              )
{
    efe0:	b500      	push	{lr}
    efe2:	b087      	sub	sp, #28
    efe4:	9003      	str	r0, [sp, #12]
    efe6:	9201      	str	r2, [sp, #4]
    efe8:	461a      	mov	r2, r3
    efea:	460b      	mov	r3, r1
    efec:	f88d 300b 	strb.w	r3, [sp, #11]
    eff0:	4613      	mov	r3, r2
    eff2:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp;
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    eff6:	2300      	movs	r3, #0
    eff8:	9305      	str	r3, [sp, #20]

        /* Enable the corresponding message buffer Interrupt */
        temp = 1UL << (msgBuffIdx % 32U);
    effa:	9b01      	ldr	r3, [sp, #4]
    effc:	f003 031f 	and.w	r3, r3, #31
    f000:	2201      	movs	r2, #1
    f002:	fa02 f303 	lsl.w	r3, r2, r3
    f006:	9304      	str	r3, [sp, #16]
        if (msgBuffIdx < 32U)
    f008:	9b01      	ldr	r3, [sp, #4]
    f00a:	2b1f      	cmp	r3, #31
    f00c:	d837      	bhi.n	f07e <FlexCAN_SetMsgBuffIntCmd+0x9e>
        {
            if (enable)
    f00e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f012:	2b00      	cmp	r3, #0
    f014:	d01b      	beq.n	f04e <FlexCAN_SetMsgBuffIntCmd+0x6e>
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    f016:	f005 fc5d 	bl	148d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) | (temp));
    f01a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f01e:	4a1a      	ldr	r2, [pc, #104]	; (f088 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    f020:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    f024:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f028:	9a04      	ldr	r2, [sp, #16]
    f02a:	430a      	orrs	r2, r1
    f02c:	4916      	ldr	r1, [pc, #88]	; (f088 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    f02e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (TRUE == bIsIntActive)
    f032:	f89d 3020 	ldrb.w	r3, [sp, #32]
    f036:	2b00      	cmp	r3, #0
    f038:	d006      	beq.n	f048 <FlexCAN_SetMsgBuffIntCmd+0x68>
                {
                    base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    f03a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f03e:	4a12      	ldr	r2, [pc, #72]	; (f088 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    f040:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    f044:	9b03      	ldr	r3, [sp, #12]
    f046:	629a      	str	r2, [r3, #40]	; 0x28
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    f048:	f005 fc70 	bl	1492c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
    f04c:	e017      	b.n	f07e <FlexCAN_SetMsgBuffIntCmd+0x9e>
            }
            else
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    f04e:	f005 fc41 	bl	148d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) & ~(temp));
    f052:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f056:	4a0c      	ldr	r2, [pc, #48]	; (f088 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    f058:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    f05c:	9b04      	ldr	r3, [sp, #16]
    f05e:	43da      	mvns	r2, r3
    f060:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f064:	400a      	ands	r2, r1
    f066:	4908      	ldr	r1, [pc, #32]	; (f088 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    f068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    f06c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f070:	4a05      	ldr	r2, [pc, #20]	; (f088 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    f072:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    f076:	9b03      	ldr	r3, [sp, #12]
    f078:	629a      	str	r2, [r3, #40]	; 0x28
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    f07a:	f005 fc57 	bl	1492c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
            }
        }
#endif /* if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */

    return stat;
    f07e:	9b05      	ldr	r3, [sp, #20]
}
    f080:	4618      	mov	r0, r3
    f082:	b007      	add	sp, #28
    f084:	f85d fb04 	ldr.w	pc, [sp], #4
    f088:	1fff9368 	.word	0x1fff9368

0000f08c <FLEXCAN_ClearMsgBuffIntCmd>:
void FLEXCAN_ClearMsgBuffIntCmd(FLEXCAN_Type * pBase,
                                uint8 u8Instance,
                                uint32 mb_idx,
                                boolean bIsIntActive
                               )
{
    f08c:	b500      	push	{lr}
    f08e:	b087      	sub	sp, #28
    f090:	9003      	str	r0, [sp, #12]
    f092:	9201      	str	r2, [sp, #4]
    f094:	461a      	mov	r2, r3
    f096:	460b      	mov	r3, r1
    f098:	f88d 300b 	strb.w	r3, [sp, #11]
    f09c:	4613      	mov	r3, r2
    f09e:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp = (1UL << (mb_idx % 32U));
    f0a2:	9b01      	ldr	r3, [sp, #4]
    f0a4:	f003 031f 	and.w	r3, r3, #31
    f0a8:	2201      	movs	r2, #1
    f0aa:	fa02 f303 	lsl.w	r3, r2, r3
    f0ae:	9305      	str	r3, [sp, #20]

 /* Stop the running transfer. */
    if (mb_idx < 32U)
    f0b0:	9b01      	ldr	r3, [sp, #4]
    f0b2:	2b1f      	cmp	r3, #31
    f0b4:	d818      	bhi.n	f0e8 <FLEXCAN_ClearMsgBuffIntCmd+0x5c>
    {
          /* Start critical section: implementation depends on integrator */
          SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    f0b6:	f005 f9cf 	bl	14458 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
          FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = (pBase->IMASK1 & (~temp));
    f0ba:	9b03      	ldr	r3, [sp, #12]
    f0bc:	6a99      	ldr	r1, [r3, #40]	; 0x28
    f0be:	9b05      	ldr	r3, [sp, #20]
    f0c0:	43da      	mvns	r2, r3
    f0c2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f0c6:	400a      	ands	r2, r1
    f0c8:	4909      	ldr	r1, [pc, #36]	; (f0f0 <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    f0ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          if (TRUE == bIsIntActive)
    f0ce:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f0d2:	2b00      	cmp	r3, #0
    f0d4:	d006      	beq.n	f0e4 <FLEXCAN_ClearMsgBuffIntCmd+0x58>
          {
              pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    f0d6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f0da:	4a05      	ldr	r2, [pc, #20]	; (f0f0 <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    f0dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    f0e0:	9b03      	ldr	r3, [sp, #12]
    f0e2:	629a      	str	r2, [r3, #40]	; 0x28
          }
          /* End critical section: implementation depends on integrator */
          SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    f0e4:	f005 f9e4 	bl	144b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    }
#endif /* #if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */
}
    f0e8:	bf00      	nop
    f0ea:	b007      	add	sp, #28
    f0ec:	f85d fb04 	ldr.w	pc, [sp], #4
    f0f0:	1fff9368 	.word	0x1fff9368

0000f0f4 <FlexCAN_DisableInterrupts>:


void FlexCAN_DisableInterrupts(FLEXCAN_Type * pBase)
{
    f0f4:	b082      	sub	sp, #8
    f0f6:	9001      	str	r0, [sp, #4]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = 0U;
    f0f8:	9b01      	ldr	r3, [sp, #4]
    f0fa:	2200      	movs	r2, #0
    f0fc:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = 0U;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    f0fe:	bf00      	nop
    f100:	b002      	add	sp, #8
    f102:	4770      	bx	lr

0000f104 <FlexCAN_EnableInterrupts>:

void FlexCAN_EnableInterrupts(FLEXCAN_Type * pBase, uint8 u8Instance)
{
    f104:	b082      	sub	sp, #8
    f106:	9001      	str	r0, [sp, #4]
    f108:	460b      	mov	r3, r1
    f10a:	f88d 3003 	strb.w	r3, [sp, #3]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    f10e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    f112:	4a04      	ldr	r2, [pc, #16]	; (f124 <FlexCAN_EnableInterrupts+0x20>)
    f114:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    f118:	9b01      	ldr	r3, [sp, #4]
    f11a:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = FlexCAN_Ip_au32ImaskBuff[u8Instance][3U];
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    f11c:	bf00      	nop
    f11e:	b002      	add	sp, #8
    f120:	4770      	bx	lr
    f122:	bf00      	nop
    f124:	1fff9368 	.word	0x1fff9368

0000f128 <FlexCAN_SetRxMsgBuff>:
void FlexCAN_SetRxMsgBuff(const FLEXCAN_Type * base,
                          uint32 msgBuffIdx,
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId
                         )
{
    f128:	b500      	push	{lr}
    f12a:	b087      	sub	sp, #28
    f12c:	9003      	str	r0, [sp, #12]
    f12e:	9102      	str	r1, [sp, #8]
    f130:	9201      	str	r2, [sp, #4]
    f132:	9300      	str	r3, [sp, #0]
    volatile uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    f134:	9902      	ldr	r1, [sp, #8]
    f136:	9803      	ldr	r0, [sp, #12]
    f138:	f7ff fbca 	bl	e8d0 <FlexCAN_GetMsgBuffRegion>
    f13c:	9005      	str	r0, [sp, #20]
    volatile uint32 * flexcan_mb_id = &flexcan_mb[1];
    f13e:	9b05      	ldr	r3, [sp, #20]
    f140:	3304      	adds	r3, #4
    f142:	9304      	str	r3, [sp, #16]
    DevAssert(cs != NULL_PTR);
#endif


    /* Clean up the arbitration field area */
    *flexcan_mb = 0;
    f144:	9b05      	ldr	r3, [sp, #20]
    f146:	2200      	movs	r2, #0
    f148:	601a      	str	r2, [r3, #0]
    *flexcan_mb_id = 0;
    f14a:	9b04      	ldr	r3, [sp, #16]
    f14c:	2200      	movs	r2, #0
    f14e:	601a      	str	r2, [r3, #0]

    /* Set the ID according the format structure */
    if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    f150:	9b01      	ldr	r3, [sp, #4]
    f152:	685b      	ldr	r3, [r3, #4]
    f154:	2b01      	cmp	r3, #1
    f156:	d119      	bne.n	f18c <FlexCAN_SetRxMsgBuff+0x64>
    {
        /* Set IDE */
        *flexcan_mb |= FLEXCAN_IP_CS_IDE_MASK;
    f158:	9b05      	ldr	r3, [sp, #20]
    f15a:	681b      	ldr	r3, [r3, #0]
    f15c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    f160:	9b05      	ldr	r3, [sp, #20]
    f162:	601a      	str	r2, [r3, #0]

        /* Clear SRR bit */
        *flexcan_mb &= ~FLEXCAN_IP_CS_SRR_MASK;
    f164:	9b05      	ldr	r3, [sp, #20]
    f166:	681b      	ldr	r3, [r3, #0]
    f168:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
    f16c:	9b05      	ldr	r3, [sp, #20]
    f16e:	601a      	str	r2, [r3, #0]

        /* ID [28-0] */
        *flexcan_mb_id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    f170:	9b04      	ldr	r3, [sp, #16]
    f172:	681b      	ldr	r3, [r3, #0]
    f174:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    f178:	9b04      	ldr	r3, [sp, #16]
    f17a:	601a      	str	r2, [r3, #0]
        *flexcan_mb_id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    f17c:	9b04      	ldr	r3, [sp, #16]
    f17e:	681a      	ldr	r2, [r3, #0]
    f180:	9b00      	ldr	r3, [sp, #0]
    f182:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    f186:	431a      	orrs	r2, r3
    f188:	9b04      	ldr	r3, [sp, #16]
    f18a:	601a      	str	r2, [r3, #0]
    }

    if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    f18c:	9b01      	ldr	r3, [sp, #4]
    f18e:	685b      	ldr	r3, [r3, #4]
    f190:	2b00      	cmp	r3, #0
    f192:	d116      	bne.n	f1c2 <FlexCAN_SetRxMsgBuff+0x9a>
    {
        /* Make sure IDE and SRR are not set */
        *flexcan_mb &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    f194:	9b05      	ldr	r3, [sp, #20]
    f196:	681b      	ldr	r3, [r3, #0]
    f198:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
    f19c:	9b05      	ldr	r3, [sp, #20]
    f19e:	601a      	str	r2, [r3, #0]

        /* ID[28-18] */
        *flexcan_mb_id &= ~FLEXCAN_IP_ID_STD_MASK;
    f1a0:	9b04      	ldr	r3, [sp, #16]
    f1a2:	681b      	ldr	r3, [r3, #0]
    f1a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    f1a8:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    f1ac:	9a04      	ldr	r2, [sp, #16]
    f1ae:	6013      	str	r3, [r2, #0]
        *flexcan_mb_id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    f1b0:	9b04      	ldr	r3, [sp, #16]
    f1b2:	681a      	ldr	r2, [r3, #0]
    f1b4:	9b00      	ldr	r3, [sp, #0]
    f1b6:	0499      	lsls	r1, r3, #18
    f1b8:	4b0e      	ldr	r3, [pc, #56]	; (f1f4 <FlexCAN_SetRxMsgBuff+0xcc>)
    f1ba:	400b      	ands	r3, r1
    f1bc:	431a      	orrs	r2, r3
    f1be:	9b04      	ldr	r3, [sp, #16]
    f1c0:	601a      	str	r2, [r3, #0]
    }

    /* Set MB CODE */
    if ((uint32)FLEXCAN_RX_NOT_USED != cs->code)
    f1c2:	9b01      	ldr	r3, [sp, #4]
    f1c4:	681b      	ldr	r3, [r3, #0]
    f1c6:	2b0f      	cmp	r3, #15
    f1c8:	d00f      	beq.n	f1ea <FlexCAN_SetRxMsgBuff+0xc2>
    {
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    f1ca:	9b05      	ldr	r3, [sp, #20]
    f1cc:	681b      	ldr	r3, [r3, #0]
    f1ce:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    f1d2:	9b05      	ldr	r3, [sp, #20]
    f1d4:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    f1d6:	9b05      	ldr	r3, [sp, #20]
    f1d8:	681a      	ldr	r2, [r3, #0]
    f1da:	9b01      	ldr	r3, [sp, #4]
    f1dc:	681b      	ldr	r3, [r3, #0]
    f1de:	061b      	lsls	r3, r3, #24
    f1e0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    f1e4:	431a      	orrs	r2, r3
    f1e6:	9b05      	ldr	r3, [sp, #20]
    f1e8:	601a      	str	r2, [r3, #0]
    }
}
    f1ea:	bf00      	nop
    f1ec:	b007      	add	sp, #28
    f1ee:	f85d fb04 	ldr.w	pc, [sp], #4
    f1f2:	bf00      	nop
    f1f4:	1ffc0000 	.word	0x1ffc0000

0000f1f8 <FlexCAN_GetMsgBuffTimestamp>:
 * Function Name : FlexCAN_GetMsgBuffTimestamp
 * Description   : Get a message buffer timestamp value.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMsgBuffTimestamp(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    f1f8:	b500      	push	{lr}
    f1fa:	b085      	sub	sp, #20
    f1fc:	9001      	str	r0, [sp, #4]
    f1fe:	9100      	str	r1, [sp, #0]
    uint32 TimeStamp = 0U;
    f200:	2300      	movs	r3, #0
    f202:	9303      	str	r3, [sp, #12]
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    f204:	9900      	ldr	r1, [sp, #0]
    f206:	9801      	ldr	r0, [sp, #4]
    f208:	f7ff fb62 	bl	e8d0 <FlexCAN_GetMsgBuffRegion>
    f20c:	9002      	str	r0, [sp, #8]
        TimeStamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        TimeStamp = (uint32)((*Flexcan_Mb & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    f20e:	9b02      	ldr	r3, [sp, #8]
    f210:	681b      	ldr	r3, [r3, #0]
    f212:	b29b      	uxth	r3, r3
    f214:	9303      	str	r3, [sp, #12]
    }
    return TimeStamp;
    f216:	9b03      	ldr	r3, [sp, #12]
}
    f218:	4618      	mov	r0, r3
    f21a:	b005      	add	sp, #20
    f21c:	f85d fb04 	ldr.w	pc, [sp], #4

0000f220 <FlexCAN_GetMsgBuff>:
 *END**************************************************************************/
void FlexCAN_GetMsgBuff(const FLEXCAN_Type * base,
                        uint32 msgBuffIdx,
                        Flexcan_Ip_MsgBuffType * msgBuff
                       )
{
    f220:	b500      	push	{lr}
    f222:	b08d      	sub	sp, #52	; 0x34
    f224:	9003      	str	r0, [sp, #12]
    f226:	9102      	str	r1, [sp, #8]
    f228:	9201      	str	r2, [sp, #4]

    uint8 i;
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    f22a:	9902      	ldr	r1, [sp, #8]
    f22c:	9803      	ldr	r0, [sp, #12]
    f22e:	f7ff fb4f 	bl	e8d0 <FlexCAN_GetMsgBuffRegion>
    f232:	900a      	str	r0, [sp, #40]	; 0x28
    volatile const uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    f234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f236:	3304      	adds	r3, #4
    f238:	9309      	str	r3, [sp, #36]	; 0x24
    volatile const uint8 * Flexcan_Mb_Data = (volatile const uint8 *)(&Flexcan_Mb[2]);
    f23a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f23c:	3308      	adds	r3, #8
    f23e:	9308      	str	r3, [sp, #32]
    volatile const uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    f240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f242:	3308      	adds	r3, #8
    f244:	9307      	str	r3, [sp, #28]
    uint32 * MsgBuff_Data_32 = NULL_PTR;
    f246:	2300      	movs	r3, #0
    f248:	9306      	str	r3, [sp, #24]
    uint32 MbWord;

    uint8 Flexcan_Mb_Dlc_Value = (uint8)(((*Flexcan_Mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    f24a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f24c:	681b      	ldr	r3, [r3, #0]
    f24e:	0c1b      	lsrs	r3, r3, #16
    f250:	b2db      	uxtb	r3, r3
    f252:	f003 030f 	and.w	r3, r3, #15
    f256:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Payload_Size = FlexCAN_ComputePayloadSize(Flexcan_Mb_Dlc_Value);
    f25a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    f25e:	4618      	mov	r0, r3
    f260:	f7ff faed 	bl	e83e <FlexCAN_ComputePayloadSize>
    f264:	4603      	mov	r3, r0
    f266:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(msgBuff != NULL_PTR);
#endif
    /* Asign after NULL Check */
    MsgBuff_Data_32 = (uint32 *)(msgBuff->data);
    f26a:	9b01      	ldr	r3, [sp, #4]
    f26c:	3308      	adds	r3, #8
    f26e:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    /* Payload Size is based on MBDSR for 1 MBDSR corresponds 32 * 8Bytes MBs  */
    if (Payload_Size > FlexCAN_GetMbPayloadSize(base, msgBuffIdx))
    f270:	9902      	ldr	r1, [sp, #8]
    f272:	9803      	ldr	r0, [sp, #12]
    f274:	f7ff fe5a 	bl	ef2c <FlexCAN_GetMbPayloadSize>
    f278:	4603      	mov	r3, r0
    f27a:	461a      	mov	r2, r3
    f27c:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    f280:	4293      	cmp	r3, r2
    f282:	d906      	bls.n	f292 <FlexCAN_GetMsgBuff+0x72>
    {
        Payload_Size = FlexCAN_GetMbPayloadSize(base, msgBuffIdx);
    f284:	9902      	ldr	r1, [sp, #8]
    f286:	9803      	ldr	r0, [sp, #12]
    f288:	f7ff fe50 	bl	ef2c <FlexCAN_GetMbPayloadSize>
    f28c:	4603      	mov	r3, r0
    f28e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    msgBuff->dataLen = Payload_Size;
    f292:	9b01      	ldr	r3, [sp, #4]
    f294:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    f298:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Get a MB field values */
    msgBuff->cs = *Flexcan_Mb;
    f29c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f29e:	681a      	ldr	r2, [r3, #0]
    f2a0:	9b01      	ldr	r3, [sp, #4]
    f2a2:	601a      	str	r2, [r3, #0]
    if ((msgBuff->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    f2a4:	9b01      	ldr	r3, [sp, #4]
    f2a6:	681b      	ldr	r3, [r3, #0]
    f2a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    f2ac:	2b00      	cmp	r3, #0
    f2ae:	d004      	beq.n	f2ba <FlexCAN_GetMsgBuff+0x9a>
    {
        msgBuff->msgId = (*Flexcan_Mb_Id);
    f2b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f2b2:	681a      	ldr	r2, [r3, #0]
    f2b4:	9b01      	ldr	r3, [sp, #4]
    f2b6:	605a      	str	r2, [r3, #4]
    f2b8:	e004      	b.n	f2c4 <FlexCAN_GetMsgBuff+0xa4>
    }
    else
    {
        msgBuff->msgId = (*Flexcan_Mb_Id) >> FLEXCAN_IP_ID_STD_SHIFT;
    f2ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f2bc:	681b      	ldr	r3, [r3, #0]
    f2be:	0c9a      	lsrs	r2, r3, #18
    f2c0:	9b01      	ldr	r3, [sp, #4]
    f2c2:	605a      	str	r2, [r3, #4]
        msgBuff->time_stamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        msgBuff->time_stamp = (uint32)((msgBuff->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    f2c4:	9b01      	ldr	r3, [sp, #4]
    f2c6:	681b      	ldr	r3, [r3, #0]
    f2c8:	b29a      	uxth	r2, r3
    f2ca:	9b01      	ldr	r3, [sp, #4]
    f2cc:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, MsgBuff_Data_32[i >> 2U]);
        }
    }

#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    f2ce:	2300      	movs	r3, #0
    f2d0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    f2d4:	e025      	b.n	f322 <FlexCAN_GetMsgBuff+0x102>
    {
        MbWord = Flexcan_Mb_Data_32[i >> 2U];
    f2d6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f2da:	089b      	lsrs	r3, r3, #2
    f2dc:	b2db      	uxtb	r3, r3
    f2de:	009b      	lsls	r3, r3, #2
    f2e0:	9a07      	ldr	r2, [sp, #28]
    f2e2:	4413      	add	r3, r2
    f2e4:	681b      	ldr	r3, [r3, #0]
    f2e6:	9304      	str	r3, [sp, #16]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (MsgBuff_Data_32[i >> 2U]));
    f2e8:	9b04      	ldr	r3, [sp, #16]
    f2ea:	0e1a      	lsrs	r2, r3, #24
    f2ec:	9b04      	ldr	r3, [sp, #16]
    f2ee:	0a1b      	lsrs	r3, r3, #8
    f2f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    f2f4:	431a      	orrs	r2, r3
    f2f6:	9b04      	ldr	r3, [sp, #16]
    f2f8:	021b      	lsls	r3, r3, #8
    f2fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    f2fe:	ea42 0103 	orr.w	r1, r2, r3
    f302:	9b04      	ldr	r3, [sp, #16]
    f304:	061a      	lsls	r2, r3, #24
    f306:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f30a:	089b      	lsrs	r3, r3, #2
    f30c:	b2db      	uxtb	r3, r3
    f30e:	009b      	lsls	r3, r3, #2
    f310:	9806      	ldr	r0, [sp, #24]
    f312:	4403      	add	r3, r0
    f314:	430a      	orrs	r2, r1
    f316:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    f318:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f31c:	3304      	adds	r3, #4
    f31e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    f322:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    f326:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    f32a:	f023 0303 	bic.w	r3, r3, #3
    f32e:	429a      	cmp	r2, r3
    f330:	d3d1      	bcc.n	f2d6 <FlexCAN_GetMsgBuff+0xb6>
    }

#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (; i < Payload_Size; i++)
    f332:	e014      	b.n	f35e <FlexCAN_GetMsgBuff+0x13e>
    {   /* Max allowed value for index is 63 */
        msgBuff->data[i] = Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(i)];
    f334:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f338:	f083 0303 	eor.w	r3, r3, #3
    f33c:	b2db      	uxtb	r3, r3
    f33e:	461a      	mov	r2, r3
    f340:	9b08      	ldr	r3, [sp, #32]
    f342:	441a      	add	r2, r3
    f344:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f348:	7812      	ldrb	r2, [r2, #0]
    f34a:	b2d1      	uxtb	r1, r2
    f34c:	9a01      	ldr	r2, [sp, #4]
    f34e:	4413      	add	r3, r2
    f350:	460a      	mov	r2, r1
    f352:	721a      	strb	r2, [r3, #8]
    for (; i < Payload_Size; i++)
    f354:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f358:	3301      	adds	r3, #1
    f35a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    f35e:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    f362:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    f366:	429a      	cmp	r2, r3
    f368:	d3e4      	bcc.n	f334 <FlexCAN_GetMsgBuff+0x114>
    }
}
    f36a:	bf00      	nop
    f36c:	bf00      	nop
    f36e:	b00d      	add	sp, #52	; 0x34
    f370:	f85d fb04 	ldr.w	pc, [sp], #4

0000f374 <FlexCAN_SetTxMsgBuff>:
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId,
                          const uint8 * msgData,
                          const boolean isRemote
                         )
{
    f374:	b500      	push	{lr}
    f376:	b08d      	sub	sp, #52	; 0x34
    f378:	9003      	str	r0, [sp, #12]
    f37a:	9102      	str	r1, [sp, #8]
    f37c:	9201      	str	r2, [sp, #4]
    f37e:	9300      	str	r3, [sp, #0]
    uint32 Flexcan_Mb_Config = 0;
    f380:	2300      	movs	r3, #0
    f382:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 DataByte;
    uint8 Dlc_Value;
    uint8 Payload_Size;
    volatile uint32 * Flexcan_Mb = pMbAddr;
    f384:	9b03      	ldr	r3, [sp, #12]
    f386:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    f388:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f38a:	3304      	adds	r3, #4
    f38c:	9308      	str	r3, [sp, #32]
    volatile uint8 * Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    f38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f390:	3308      	adds	r3, #8
    f392:	9307      	str	r3, [sp, #28]
    volatile uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    f394:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f396:	3308      	adds	r3, #8
    f398:	9306      	str	r3, [sp, #24]
    const uint32 * MsgData_32 = (const uint32*)msgData;
    f39a:	9b00      	ldr	r3, [sp, #0]
    f39c:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(cs != NULL_PTR);
    #endif

        /* Clean up the arbitration field area and set TxMB Inactive */
        *Flexcan_Mb = (uint32)((((uint32)FLEXCAN_TX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    f39e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f3a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    f3a4:	601a      	str	r2, [r3, #0]
        *Flexcan_Mb_Id = 0;
    f3a6:	9b08      	ldr	r3, [sp, #32]
    f3a8:	2200      	movs	r2, #0
    f3aa:	601a      	str	r2, [r3, #0]

        /* Compute the value of the DLC field */
        Dlc_Value = FlexCAN_ComputeDLCValue((uint8)cs->dataLen);
    f3ac:	9b02      	ldr	r3, [sp, #8]
    f3ae:	689b      	ldr	r3, [r3, #8]
    f3b0:	b2db      	uxtb	r3, r3
    f3b2:	4618      	mov	r0, r3
    f3b4:	f7ff f9f4 	bl	e7a0 <FlexCAN_ComputeDLCValue>
    f3b8:	4603      	mov	r3, r0
    f3ba:	f88d 3013 	strb.w	r3, [sp, #19]
        /* Copy user's buffer into the message buffer data area */
        if (msgData != NULL_PTR)
    f3be:	9b00      	ldr	r3, [sp, #0]
    f3c0:	2b00      	cmp	r3, #0
    f3c2:	d065      	beq.n	f490 <FlexCAN_SetTxMsgBuff+0x11c>
        {
#if (defined(S32K116) || defined (S32K118))
            (void)MsgData_32;
            DataByte = FlexCAN_DataTransferTxMsgBuff(Flexcan_Mb_Data_32, cs, msgData);
#else
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    f3c4:	2300      	movs	r3, #0
    f3c6:	930a      	str	r3, [sp, #40]	; 0x28
    f3c8:	e02c      	b.n	f424 <FlexCAN_SetTxMsgBuff+0xb0>
            {
                FLEXCAN_IP_SWAP_BYTES_IN_WORD((MsgData_32[DataByte >> 2U]), (Flexcan_Mb_Data_32[DataByte >> 2U]));
    f3ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f3cc:	089b      	lsrs	r3, r3, #2
    f3ce:	009b      	lsls	r3, r3, #2
    f3d0:	9a05      	ldr	r2, [sp, #20]
    f3d2:	4413      	add	r3, r2
    f3d4:	681b      	ldr	r3, [r3, #0]
    f3d6:	0e1a      	lsrs	r2, r3, #24
    f3d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f3da:	089b      	lsrs	r3, r3, #2
    f3dc:	009b      	lsls	r3, r3, #2
    f3de:	9905      	ldr	r1, [sp, #20]
    f3e0:	440b      	add	r3, r1
    f3e2:	681b      	ldr	r3, [r3, #0]
    f3e4:	0a1b      	lsrs	r3, r3, #8
    f3e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    f3ea:	431a      	orrs	r2, r3
    f3ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f3ee:	089b      	lsrs	r3, r3, #2
    f3f0:	009b      	lsls	r3, r3, #2
    f3f2:	9905      	ldr	r1, [sp, #20]
    f3f4:	440b      	add	r3, r1
    f3f6:	681b      	ldr	r3, [r3, #0]
    f3f8:	021b      	lsls	r3, r3, #8
    f3fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    f3fe:	ea42 0103 	orr.w	r1, r2, r3
    f402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f404:	089b      	lsrs	r3, r3, #2
    f406:	009b      	lsls	r3, r3, #2
    f408:	9a05      	ldr	r2, [sp, #20]
    f40a:	4413      	add	r3, r2
    f40c:	681b      	ldr	r3, [r3, #0]
    f40e:	061a      	lsls	r2, r3, #24
    f410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f412:	089b      	lsrs	r3, r3, #2
    f414:	009b      	lsls	r3, r3, #2
    f416:	9806      	ldr	r0, [sp, #24]
    f418:	4403      	add	r3, r0
    f41a:	430a      	orrs	r2, r1
    f41c:	601a      	str	r2, [r3, #0]
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    f41e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f420:	3304      	adds	r3, #4
    f422:	930a      	str	r3, [sp, #40]	; 0x28
    f424:	9b02      	ldr	r3, [sp, #8]
    f426:	689b      	ldr	r3, [r3, #8]
    f428:	f023 0303 	bic.w	r3, r3, #3
    f42c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f42e:	429a      	cmp	r2, r3
    f430:	d3cb      	bcc.n	f3ca <FlexCAN_SetTxMsgBuff+0x56>
            }
#endif /* (defined(S32K116) || defined (S32K118)) */
            for ( ; DataByte < cs->dataLen; DataByte++)
    f432:	e00c      	b.n	f44e <FlexCAN_SetTxMsgBuff+0xda>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] =  msgData[DataByte];
    f434:	9a00      	ldr	r2, [sp, #0]
    f436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f438:	441a      	add	r2, r3
    f43a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f43c:	f083 0303 	eor.w	r3, r3, #3
    f440:	9907      	ldr	r1, [sp, #28]
    f442:	440b      	add	r3, r1
    f444:	7812      	ldrb	r2, [r2, #0]
    f446:	701a      	strb	r2, [r3, #0]
            for ( ; DataByte < cs->dataLen; DataByte++)
    f448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f44a:	3301      	adds	r3, #1
    f44c:	930a      	str	r3, [sp, #40]	; 0x28
    f44e:	9b02      	ldr	r3, [sp, #8]
    f450:	689b      	ldr	r3, [r3, #8]
    f452:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f454:	429a      	cmp	r2, r3
    f456:	d3ed      	bcc.n	f434 <FlexCAN_SetTxMsgBuff+0xc0>
            }
        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            Payload_Size = FlexCAN_ComputePayloadSize(Dlc_Value);
    f458:	f89d 3013 	ldrb.w	r3, [sp, #19]
    f45c:	4618      	mov	r0, r3
    f45e:	f7ff f9ee 	bl	e83e <FlexCAN_ComputePayloadSize>
    f462:	4603      	mov	r3, r0
    f464:	f88d 3012 	strb.w	r3, [sp, #18]
            /* Add padding, if needed */
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    f468:	9b02      	ldr	r3, [sp, #8]
    f46a:	689b      	ldr	r3, [r3, #8]
    f46c:	930a      	str	r3, [sp, #40]	; 0x28
    f46e:	e00a      	b.n	f486 <FlexCAN_SetTxMsgBuff+0x112>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] = cs->fd_padding;
    f470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f472:	f083 0303 	eor.w	r3, r3, #3
    f476:	9a07      	ldr	r2, [sp, #28]
    f478:	4413      	add	r3, r2
    f47a:	9a02      	ldr	r2, [sp, #8]
    f47c:	7b52      	ldrb	r2, [r2, #13]
    f47e:	701a      	strb	r2, [r3, #0]
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    f480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f482:	3301      	adds	r3, #1
    f484:	930a      	str	r3, [sp, #40]	; 0x28
    f486:	f89d 3012 	ldrb.w	r3, [sp, #18]
    f48a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f48c:	429a      	cmp	r2, r3
    f48e:	d3ef      	bcc.n	f470 <FlexCAN_SetTxMsgBuff+0xfc>
            }
        #endif /* FLEXCAN_IP_FEATURE_HAS_FD */
        }
        /* Set the ID according the format structure */
        if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    f490:	9b02      	ldr	r3, [sp, #8]
    f492:	685b      	ldr	r3, [r3, #4]
    f494:	2b01      	cmp	r3, #1
    f496:	d111      	bne.n	f4bc <FlexCAN_SetTxMsgBuff+0x148>
        {
            /* ID [28-0] */
            *Flexcan_Mb_Id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    f498:	9b08      	ldr	r3, [sp, #32]
    f49a:	681b      	ldr	r3, [r3, #0]
    f49c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    f4a0:	9b08      	ldr	r3, [sp, #32]
    f4a2:	601a      	str	r2, [r3, #0]
            *Flexcan_Mb_Id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    f4a4:	9b08      	ldr	r3, [sp, #32]
    f4a6:	681a      	ldr	r2, [r3, #0]
    f4a8:	9b01      	ldr	r3, [sp, #4]
    f4aa:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    f4ae:	431a      	orrs	r2, r3
    f4b0:	9b08      	ldr	r3, [sp, #32]
    f4b2:	601a      	str	r2, [r3, #0]
            /* Set IDE and SRR bit*/
            Flexcan_Mb_Config |= (FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    f4b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f4b6:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
    f4ba:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    f4bc:	9b02      	ldr	r3, [sp, #8]
    f4be:	685b      	ldr	r3, [r3, #4]
    f4c0:	2b00      	cmp	r3, #0
    f4c2:	d114      	bne.n	f4ee <FlexCAN_SetTxMsgBuff+0x17a>
        {
            /* ID[28-18] */
            *Flexcan_Mb_Id &= ~FLEXCAN_IP_ID_STD_MASK;
    f4c4:	9b08      	ldr	r3, [sp, #32]
    f4c6:	681b      	ldr	r3, [r3, #0]
    f4c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    f4cc:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    f4d0:	9a08      	ldr	r2, [sp, #32]
    f4d2:	6013      	str	r3, [r2, #0]
            *Flexcan_Mb_Id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    f4d4:	9b08      	ldr	r3, [sp, #32]
    f4d6:	681a      	ldr	r2, [r3, #0]
    f4d8:	9b01      	ldr	r3, [sp, #4]
    f4da:	0499      	lsls	r1, r3, #18
    f4dc:	4b2b      	ldr	r3, [pc, #172]	; (f58c <FlexCAN_SetTxMsgBuff+0x218>)
    f4de:	400b      	ands	r3, r1
    f4e0:	431a      	orrs	r2, r3
    f4e2:	9b08      	ldr	r3, [sp, #32]
    f4e4:	601a      	str	r2, [r3, #0]
            /* make sure IDE and SRR are not set */
            Flexcan_Mb_Config &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    f4e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f4e8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
    f4ec:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        /* Set the length of data in bytes */
        Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_DLC_MASK;
    f4ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f4f0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    f4f4:	930b      	str	r3, [sp, #44]	; 0x2c
        Flexcan_Mb_Config |= ((uint32)Dlc_Value << FLEXCAN_IP_CS_DLC_SHIFT) & FLEXCAN_IP_CS_DLC_MASK;
    f4f6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    f4fa:	041b      	lsls	r3, r3, #16
    f4fc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    f500:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f502:	4313      	orrs	r3, r2
    f504:	930b      	str	r3, [sp, #44]	; 0x2c
        /* Set MB CODE */
        if (cs->code != (uint32)FLEXCAN_TX_NOT_USED)
    f506:	9b02      	ldr	r3, [sp, #8]
    f508:	681b      	ldr	r3, [r3, #0]
    f50a:	2b0f      	cmp	r3, #15
    f50c:	d03a      	beq.n	f584 <FlexCAN_SetTxMsgBuff+0x210>
        {
            if ((uint32)FLEXCAN_TX_REMOTE == cs->code)
    f50e:	9b02      	ldr	r3, [sp, #8]
    f510:	681b      	ldr	r3, [r3, #0]
    f512:	2b1c      	cmp	r3, #28
    f514:	d104      	bne.n	f520 <FlexCAN_SetTxMsgBuff+0x1ac>
            {
                /* Set RTR bit */
                Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    f516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f51c:	930b      	str	r3, [sp, #44]	; 0x2c
    f51e:	e007      	b.n	f530 <FlexCAN_SetTxMsgBuff+0x1bc>
            }
            else
            {
                if (TRUE == isRemote)
    f520:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    f524:	2b00      	cmp	r3, #0
    f526:	d003      	beq.n	f530 <FlexCAN_SetTxMsgBuff+0x1bc>
                {
                    /* Set RTR bit */
                    Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    f528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f52a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f52e:	930b      	str	r3, [sp, #44]	; 0x2c
                }
            }
            /* Reset the code */
            Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_CODE_MASK;
    f530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    f536:	930b      	str	r3, [sp, #44]	; 0x2c
            /* Set the code */
            if (cs->fd_enable)
    f538:	9b02      	ldr	r3, [sp, #8]
    f53a:	7b1b      	ldrb	r3, [r3, #12]
    f53c:	2b00      	cmp	r3, #0
    f53e:	d00e      	beq.n	f55e <FlexCAN_SetTxMsgBuff+0x1ea>
            {
                Flexcan_Mb_Config |= ((cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK) | FLEXCAN_IP_MB_EDL_MASK;
    f540:	9b02      	ldr	r3, [sp, #8]
    f542:	681b      	ldr	r3, [r3, #0]
    f544:	061b      	lsls	r3, r3, #24
    f546:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
    f54a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f54c:	4313      	orrs	r3, r2
    f54e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    f552:	930b      	str	r3, [sp, #44]	; 0x2c
                /* In case of FD frame not supported RTR */
                Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_RTR_MASK;
    f554:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f556:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    f55a:	930b      	str	r3, [sp, #44]	; 0x2c
    f55c:	e007      	b.n	f56e <FlexCAN_SetTxMsgBuff+0x1fa>
            }
            else
            {
                Flexcan_Mb_Config |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    f55e:	9b02      	ldr	r3, [sp, #8]
    f560:	681b      	ldr	r3, [r3, #0]
    f562:	061b      	lsls	r3, r3, #24
    f564:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    f568:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f56a:	4313      	orrs	r3, r2
    f56c:	930b      	str	r3, [sp, #44]	; 0x2c
            }

            if (cs->enable_brs)
    f56e:	9b02      	ldr	r3, [sp, #8]
    f570:	7b9b      	ldrb	r3, [r3, #14]
    f572:	2b00      	cmp	r3, #0
    f574:	d003      	beq.n	f57e <FlexCAN_SetTxMsgBuff+0x20a>
            {
                Flexcan_Mb_Config |= FLEXCAN_IP_MB_BRS_MASK;
    f576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f578:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    f57c:	930b      	str	r3, [sp, #44]	; 0x2c
            }
            *Flexcan_Mb = Flexcan_Mb_Config;
    f57e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f580:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f582:	601a      	str	r2, [r3, #0]
        }
}
    f584:	bf00      	nop
    f586:	b00d      	add	sp, #52	; 0x34
    f588:	f85d fb04 	ldr.w	pc, [sp], #4
    f58c:	1ffc0000 	.word	0x1ffc0000

0000f590 <FlexCAN_SetMaxMsgBuffNum>:
 * Description   : Set the number of the last Message Buffers.
 * This function will define the number of the last Message Buffers
 *
 *END***************************************************************************/
Flexcan_Ip_StatusType FlexCAN_SetMaxMsgBuffNum(FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    f590:	b500      	push	{lr}
    f592:	b08f      	sub	sp, #60	; 0x3c
    f594:	9001      	str	r0, [sp, #4]
    f596:	9100      	str	r1, [sp, #0]
    uint32 MsgBuffIdx;
    uint32 DataByte;
    const volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    f598:	9b01      	ldr	r3, [sp, #4]
    f59a:	3380      	adds	r3, #128	; 0x80
    f59c:	930a      	str	r3, [sp, #40]	; 0x28
#if (STD_ON == FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY)
    const volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */
    const volatile uint32 * ValEndMbPointer = NULL_PTR;
    f59e:	2300      	movs	r3, #0
    f5a0:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 *Flexcan_Mb = NULL_PTR;
    f5a2:	2300      	movs	r3, #0
    f5a4:	9308      	str	r3, [sp, #32]
    volatile uint32 *Flexcan_Mb_Id   = NULL_PTR ;
    f5a6:	2300      	movs	r3, #0
    f5a8:	9307      	str	r3, [sp, #28]
    volatile uint8  *Flexcan_Mb_Data = NULL_PTR;
    f5aa:	2300      	movs	r3, #0
    f5ac:	9306      	str	r3, [sp, #24]
    uint8 Arbitration_Field_Size = 8U;
    f5ae:	2308      	movs	r3, #8
    f5b0:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, maxMsgBuffNum - (uint32)1U);
    f5b4:	9b00      	ldr	r3, [sp, #0]
    f5b6:	3b01      	subs	r3, #1
    f5b8:	4619      	mov	r1, r3
    f5ba:	9801      	ldr	r0, [sp, #4]
    f5bc:	f7ff fcb6 	bl	ef2c <FlexCAN_GetMbPayloadSize>
    f5c0:	4603      	mov	r3, r0
    f5c2:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_PtrSizeType ValEndMb = 0U;
    f5c6:	2300      	movs	r3, #0
    f5c8:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_PtrSizeType ValEndRam = 0U;
    f5ca:	2300      	movs	r3, #0
    f5cc:	9303      	str	r3, [sp, #12]
    Flexcan_Ip_StatusType Status = FLEXCAN_STATUS_SUCCESS;
    f5ce:	2300      	movs	r3, #0
    f5d0:	930b      	str	r3, [sp, #44]	; 0x2c

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(maxMsgBuffNum>0U);
    #endif

    ValEndMbPointer = FlexCAN_GetMsgBuffRegion(base, (maxMsgBuffNum - (uint32)1U));
    f5d2:	9b00      	ldr	r3, [sp, #0]
    f5d4:	3b01      	subs	r3, #1
    f5d6:	4619      	mov	r1, r3
    f5d8:	9801      	ldr	r0, [sp, #4]
    f5da:	f7ff f979 	bl	e8d0 <FlexCAN_GetMsgBuffRegion>
    f5de:	9009      	str	r0, [sp, #36]	; 0x24

    ValEndMb = (Flexcan_Ip_PtrSizeType)ValEndMbPointer + Can_Real_Payload + Arbitration_Field_Size;
    f5e0:	f89d 2016 	ldrb.w	r2, [sp, #22]
    f5e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f5e6:	441a      	add	r2, r3
    f5e8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    f5ec:	4413      	add	r3, r2
    f5ee:	9304      	str	r3, [sp, #16]
    else
    {
        ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    }
#else
    ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    f5f0:	9801      	ldr	r0, [sp, #4]
    f5f2:	f7ff f9e7 	bl	e9c4 <FlexCAN_GetMaxMbNum>
    f5f6:	4603      	mov	r3, r0
    f5f8:	011b      	lsls	r3, r3, #4
    f5fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f5fc:	4413      	add	r3, r2
    f5fe:	9303      	str	r3, [sp, #12]
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */

    if ((ValEndMb > ValEndRam) || (maxMsgBuffNum > FlexCAN_GetMaxMbNum(base)))
    f600:	9a04      	ldr	r2, [sp, #16]
    f602:	9b03      	ldr	r3, [sp, #12]
    f604:	429a      	cmp	r2, r3
    f606:	d806      	bhi.n	f616 <FlexCAN_SetMaxMsgBuffNum+0x86>
    f608:	9801      	ldr	r0, [sp, #4]
    f60a:	f7ff f9db 	bl	e9c4 <FlexCAN_GetMaxMbNum>
    f60e:	4602      	mov	r2, r0
    f610:	9b00      	ldr	r3, [sp, #0]
    f612:	4293      	cmp	r3, r2
    f614:	d901      	bls.n	f61a <FlexCAN_SetMaxMsgBuffNum+0x8a>
    {
        Status = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    f616:	2304      	movs	r3, #4
    f618:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    if (FLEXCAN_STATUS_SUCCESS == Status)
    f61a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f61c:	2b00      	cmp	r3, #0
    f61e:	d142      	bne.n	f6a6 <FlexCAN_SetMaxMsgBuffNum+0x116>
    {
        /* Set the maximum number of MBs*/
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MAXMB_MASK) | (((maxMsgBuffNum-1U) << FLEXCAN_MCR_MAXMB_SHIFT) & FLEXCAN_MCR_MAXMB_MASK);
    f620:	9b01      	ldr	r3, [sp, #4]
    f622:	681b      	ldr	r3, [r3, #0]
    f624:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
    f628:	9b00      	ldr	r3, [sp, #0]
    f62a:	3b01      	subs	r3, #1
    f62c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f630:	431a      	orrs	r2, r3
    f632:	9b01      	ldr	r3, [sp, #4]
    f634:	601a      	str	r2, [r3, #0]
        if (!(((base->MCR & FLEXCAN_MCR_RFEN_MASK) >> FLEXCAN_MCR_RFEN_SHIFT) != 0U))
    f636:	9b01      	ldr	r3, [sp, #4]
    f638:	681b      	ldr	r3, [r3, #0]
    f63a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    f63e:	2b00      	cmp	r3, #0
    f640:	d131      	bne.n	f6a6 <FlexCAN_SetMaxMsgBuffNum+0x116>
        {
            /* Initialize all message buffers as inactive */
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    f642:	2300      	movs	r3, #0
    f644:	930d      	str	r3, [sp, #52]	; 0x34
    f646:	e02a      	b.n	f69e <FlexCAN_SetMaxMsgBuffNum+0x10e>
            {
                Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, MsgBuffIdx);
    f648:	990d      	ldr	r1, [sp, #52]	; 0x34
    f64a:	9801      	ldr	r0, [sp, #4]
    f64c:	f7ff f940 	bl	e8d0 <FlexCAN_GetMsgBuffRegion>
    f650:	9008      	str	r0, [sp, #32]
                Flexcan_Mb_Id   = &Flexcan_Mb[1];
    f652:	9b08      	ldr	r3, [sp, #32]
    f654:	3304      	adds	r3, #4
    f656:	9307      	str	r3, [sp, #28]
                Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    f658:	9b08      	ldr	r3, [sp, #32]
    f65a:	3308      	adds	r3, #8
    f65c:	9306      	str	r3, [sp, #24]
                *Flexcan_Mb = 0x0U;
    f65e:	9b08      	ldr	r3, [sp, #32]
    f660:	2200      	movs	r2, #0
    f662:	601a      	str	r2, [r3, #0]
                *Flexcan_Mb_Id = 0x0U;
    f664:	9b07      	ldr	r3, [sp, #28]
    f666:	2200      	movs	r2, #0
    f668:	601a      	str	r2, [r3, #0]
                Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, MsgBuffIdx);
    f66a:	990d      	ldr	r1, [sp, #52]	; 0x34
    f66c:	9801      	ldr	r0, [sp, #4]
    f66e:	f7ff fc5d 	bl	ef2c <FlexCAN_GetMbPayloadSize>
    f672:	4603      	mov	r3, r0
    f674:	f88d 3016 	strb.w	r3, [sp, #22]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    f678:	2300      	movs	r3, #0
    f67a:	930c      	str	r3, [sp, #48]	; 0x30
    f67c:	e007      	b.n	f68e <FlexCAN_SetMaxMsgBuffNum+0xfe>
                {
                   Flexcan_Mb_Data[DataByte] = 0x0U;
    f67e:	9a06      	ldr	r2, [sp, #24]
    f680:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f682:	4413      	add	r3, r2
    f684:	2200      	movs	r2, #0
    f686:	701a      	strb	r2, [r3, #0]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    f688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f68a:	3301      	adds	r3, #1
    f68c:	930c      	str	r3, [sp, #48]	; 0x30
    f68e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    f692:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f694:	429a      	cmp	r2, r3
    f696:	d3f2      	bcc.n	f67e <FlexCAN_SetMaxMsgBuffNum+0xee>
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    f698:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f69a:	3301      	adds	r3, #1
    f69c:	930d      	str	r3, [sp, #52]	; 0x34
    f69e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f6a0:	9b00      	ldr	r3, [sp, #0]
    f6a2:	429a      	cmp	r2, r3
    f6a4:	d3d0      	bcc.n	f648 <FlexCAN_SetMaxMsgBuffNum+0xb8>
                }
            }
        }
    }
    return Status;
    f6a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    f6a8:	4618      	mov	r0, r3
    f6aa:	b00f      	add	sp, #60	; 0x3c
    f6ac:	f85d fb04 	ldr.w	pc, [sp], #4

0000f6b0 <FlexCAN_SetOperationMode>:
 * Description   : Enable a FlexCAN operation mode.
 * This function will enable one of the modes listed in flexcan_operation_modes_t.
 *
 *END**************************************************************************/
void FlexCAN_SetOperationMode(FLEXCAN_Type * base, Flexcan_Ip_ModesType mode)
{
    f6b0:	b500      	push	{lr}
    f6b2:	b083      	sub	sp, #12
    f6b4:	9001      	str	r0, [sp, #4]
    f6b6:	9100      	str	r1, [sp, #0]
    switch (mode)
    f6b8:	9b00      	ldr	r3, [sp, #0]
    f6ba:	2b02      	cmp	r3, #2
    f6bc:	d01d      	beq.n	f6fa <FlexCAN_SetOperationMode+0x4a>
    f6be:	9b00      	ldr	r3, [sp, #0]
    f6c0:	2b02      	cmp	r3, #2
    f6c2:	d82b      	bhi.n	f71c <FlexCAN_SetOperationMode+0x6c>
    f6c4:	9b00      	ldr	r3, [sp, #0]
    f6c6:	2b00      	cmp	r3, #0
    f6c8:	d003      	beq.n	f6d2 <FlexCAN_SetOperationMode+0x22>
    f6ca:	9b00      	ldr	r3, [sp, #0]
    f6cc:	2b01      	cmp	r3, #1
    f6ce:	d00d      	beq.n	f6ec <FlexCAN_SetOperationMode+0x3c>
            /* Enable Self Reception */
            FlexCAN_SetSelfReception(base, TRUE);
            break;
        default:
            /* Should not get here */
            break;
    f6d0:	e024      	b.n	f71c <FlexCAN_SetOperationMode+0x6c>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    f6d2:	9b01      	ldr	r3, [sp, #4]
    f6d4:	685b      	ldr	r3, [r3, #4]
    f6d6:	f023 0208 	bic.w	r2, r3, #8
    f6da:	9b01      	ldr	r3, [sp, #4]
    f6dc:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(0U);
    f6de:	9b01      	ldr	r3, [sp, #4]
    f6e0:	685b      	ldr	r3, [r3, #4]
    f6e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    f6e6:	9b01      	ldr	r3, [sp, #4]
    f6e8:	605a      	str	r2, [r3, #4]
            break;
    f6ea:	e018      	b.n	f71e <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(1U);
    f6ec:	9b01      	ldr	r3, [sp, #4]
    f6ee:	685b      	ldr	r3, [r3, #4]
    f6f0:	f043 0208 	orr.w	r2, r3, #8
    f6f4:	9b01      	ldr	r3, [sp, #4]
    f6f6:	605a      	str	r2, [r3, #4]
            break;
    f6f8:	e011      	b.n	f71e <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(1U);
    f6fa:	9b01      	ldr	r3, [sp, #4]
    f6fc:	685b      	ldr	r3, [r3, #4]
    f6fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    f702:	9b01      	ldr	r3, [sp, #4]
    f704:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    f706:	9b01      	ldr	r3, [sp, #4]
    f708:	685b      	ldr	r3, [r3, #4]
    f70a:	f023 0208 	bic.w	r2, r3, #8
    f70e:	9b01      	ldr	r3, [sp, #4]
    f710:	605a      	str	r2, [r3, #4]
            FlexCAN_SetSelfReception(base, TRUE);
    f712:	2101      	movs	r1, #1
    f714:	9801      	ldr	r0, [sp, #4]
    f716:	f7fe ff7f 	bl	e618 <FlexCAN_SetSelfReception>
            break;
    f71a:	e000      	b.n	f71e <FlexCAN_SetOperationMode+0x6e>
            break;
    f71c:	bf00      	nop
    }
}
    f71e:	bf00      	nop
    f720:	b003      	add	sp, #12
    f722:	f85d fb04 	ldr.w	pc, [sp], #4

0000f726 <FlexCAN_SetRxFifoFilter>:
 *END**************************************************************************/
void FlexCAN_SetRxFifoFilter(FLEXCAN_Type * base,
                             Flexcan_Ip_RxFifoIdElementFormatType idFormat,
                             const Flexcan_Ip_IdTableType * idFilterTable
                            )
{
    f726:	b500      	push	{lr}
    f728:	b08d      	sub	sp, #52	; 0x34
    f72a:	9003      	str	r0, [sp, #12]
    f72c:	9102      	str	r1, [sp, #8]
    f72e:	9201      	str	r2, [sp, #4]

    /* Set RX FIFO ID filter table elements*/
    uint32 i, j, NumOfFilters;
    uint32 Val1 = 0UL, Val2 = 0UL, Val = 0UL;
    f730:	2300      	movs	r3, #0
    f732:	9309      	str	r3, [sp, #36]	; 0x24
    f734:	2300      	movs	r3, #0
    f736:	9308      	str	r3, [sp, #32]
    f738:	2300      	movs	r3, #0
    f73a:	9307      	str	r3, [sp, #28]
    volatile uint32 * FilterTable = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_RX_FIFO_FILTER_TABLE_OFFSET);
    f73c:	9b03      	ldr	r3, [sp, #12]
    f73e:	33e0      	adds	r3, #224	; 0xe0
    f740:	9306      	str	r3, [sp, #24]

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert((idFilterTable != NULL_PTR) || (FLEXCAN_RX_FIFO_ID_FORMAT_D == idFormat));
    #endif

    NumOfFilters = (((base->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    f742:	9b03      	ldr	r3, [sp, #12]
    f744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f746:	0e1b      	lsrs	r3, r3, #24
    f748:	f003 030f 	and.w	r3, r3, #15
    f74c:	9305      	str	r3, [sp, #20]
    f74e:	9b02      	ldr	r3, [sp, #8]
    f750:	2b03      	cmp	r3, #3
    f752:	f200 81e7 	bhi.w	fb24 <FlexCAN_SetRxFifoFilter+0x3fe>
    f756:	a201      	add	r2, pc, #4	; (adr r2, f75c <FlexCAN_SetRxFifoFilter+0x36>)
    f758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f75c:	0000f76d 	.word	0x0000f76d
    f760:	0000f807 	.word	0x0000f807
    f764:	0000f941 	.word	0x0000f941
    f768:	0000fb0f 	.word	0x0000fb0f
    switch (idFormat)
    {
        case (FLEXCAN_RX_FIFO_ID_FORMAT_A):
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f76c:	f004 ff18 	bl	145a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            /* One full ID (standard and extended) per ID Filter Table element.*/
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    f770:	9b03      	ldr	r3, [sp, #12]
    f772:	681b      	ldr	r3, [r3, #0]
    f774:	f423 7240 	bic.w	r2, r3, #768	; 0x300
            (base->MCR) =
    f778:	9b03      	ldr	r3, [sp, #12]
    f77a:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_A)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f77c:	f004 ff3c 	bl	145f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f780:	2300      	movs	r3, #0
    f782:	930b      	str	r3, [sp, #44]	; 0x2c
    f784:	e038      	b.n	f7f8 <FlexCAN_SetRxFifoFilter+0xd2>
            {
                Val = 0UL;
    f786:	2300      	movs	r3, #0
    f788:	9307      	str	r3, [sp, #28]

                if (idFilterTable[i].isRemoteFrame)
    f78a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f78c:	00db      	lsls	r3, r3, #3
    f78e:	9a01      	ldr	r2, [sp, #4]
    f790:	4413      	add	r3, r2
    f792:	781b      	ldrb	r3, [r3, #0]
    f794:	2b00      	cmp	r3, #0
    f796:	d002      	beq.n	f79e <FlexCAN_SetRxFifoFilter+0x78>
                {
                    Val = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    f798:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    f79c:	9307      	str	r3, [sp, #28]
                }

                if (idFilterTable[i].isExtendedFrame)
    f79e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f7a0:	00db      	lsls	r3, r3, #3
    f7a2:	9a01      	ldr	r2, [sp, #4]
    f7a4:	4413      	add	r3, r2
    f7a6:	785b      	ldrb	r3, [r3, #1]
    f7a8:	2b00      	cmp	r3, #0
    f7aa:	d013      	beq.n	f7d4 <FlexCAN_SetRxFifoFilter+0xae>
                {
                    Val |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    f7ac:	9b07      	ldr	r3, [sp, #28]
    f7ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    f7b2:	9307      	str	r3, [sp, #28]
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_SHIFT) &
    f7b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f7b6:	00db      	lsls	r3, r3, #3
    f7b8:	9a01      	ldr	r2, [sp, #4]
    f7ba:	4413      	add	r3, r2
    f7bc:	685b      	ldr	r3, [r3, #4]
    f7be:	005b      	lsls	r3, r3, #1
    f7c0:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
    f7c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f7c6:	009b      	lsls	r3, r3, #2
    f7c8:	9a06      	ldr	r2, [sp, #24]
    f7ca:	4413      	add	r3, r2
    f7cc:	9a07      	ldr	r2, [sp, #28]
    f7ce:	440a      	add	r2, r1
    f7d0:	601a      	str	r2, [r3, #0]
    f7d2:	e00e      	b.n	f7f2 <FlexCAN_SetRxFifoFilter+0xcc>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_MASK
                                           );
                }
                else
                {
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_SHIFT) &
    f7d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f7d6:	00db      	lsls	r3, r3, #3
    f7d8:	9a01      	ldr	r2, [sp, #4]
    f7da:	4413      	add	r3, r2
    f7dc:	685b      	ldr	r3, [r3, #4]
    f7de:	04da      	lsls	r2, r3, #19
    f7e0:	4b9d      	ldr	r3, [pc, #628]	; (fa58 <FlexCAN_SetRxFifoFilter+0x332>)
    f7e2:	4013      	ands	r3, r2
    f7e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f7e6:	0092      	lsls	r2, r2, #2
    f7e8:	9906      	ldr	r1, [sp, #24]
    f7ea:	440a      	add	r2, r1
    f7ec:	9907      	ldr	r1, [sp, #28]
    f7ee:	440b      	add	r3, r1
    f7f0:	6013      	str	r3, [r2, #0]
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f7f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f7f4:	3301      	adds	r3, #1
    f7f6:	930b      	str	r3, [sp, #44]	; 0x2c
    f7f8:	9b05      	ldr	r3, [sp, #20]
    f7fa:	3301      	adds	r3, #1
    f7fc:	00db      	lsls	r3, r3, #3
    f7fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f800:	429a      	cmp	r2, r3
    f802:	d3c0      	bcc.n	f786 <FlexCAN_SetRxFifoFilter+0x60>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_MASK
                                           );
                }
            }
            break;
    f804:	e18f      	b.n	fb26 <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_B):
            /* Two full standard IDs or two partial 14-bit (standard and extended) IDs*/
            /* per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f806:	f004 fecb 	bl	145a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) | ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_B)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
    f80a:	9b03      	ldr	r3, [sp, #12]
    f80c:	681b      	ldr	r3, [r3, #0]
    f80e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    f812:	f443 7280 	orr.w	r2, r3, #256	; 0x100
            (base->MCR) =
    f816:	9b03      	ldr	r3, [sp, #12]
    f818:	601a      	str	r2, [r3, #0]
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f81a:	f004 feed 	bl	145f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    f81e:	2300      	movs	r3, #0
    f820:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f822:	2300      	movs	r3, #0
    f824:	930b      	str	r3, [sp, #44]	; 0x2c
    f826:	e083      	b.n	f930 <FlexCAN_SetRxFifoFilter+0x20a>
            {
                Val1 = 0U;
    f828:	2300      	movs	r3, #0
    f82a:	9309      	str	r3, [sp, #36]	; 0x24
                Val2 = 0U;
    f82c:	2300      	movs	r3, #0
    f82e:	9308      	str	r3, [sp, #32]

                if (idFilterTable[j].isRemoteFrame)
    f830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f832:	00db      	lsls	r3, r3, #3
    f834:	9a01      	ldr	r2, [sp, #4]
    f836:	4413      	add	r3, r2
    f838:	781b      	ldrb	r3, [r3, #0]
    f83a:	2b00      	cmp	r3, #0
    f83c:	d002      	beq.n	f844 <FlexCAN_SetRxFifoFilter+0x11e>
                {
                    Val1 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    f83e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    f842:	9309      	str	r3, [sp, #36]	; 0x24
                }

                if (idFilterTable[j + 1U].isRemoteFrame)
    f844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f846:	3301      	adds	r3, #1
    f848:	00db      	lsls	r3, r3, #3
    f84a:	9a01      	ldr	r2, [sp, #4]
    f84c:	4413      	add	r3, r2
    f84e:	781b      	ldrb	r3, [r3, #0]
    f850:	2b00      	cmp	r3, #0
    f852:	d002      	beq.n	f85a <FlexCAN_SetRxFifoFilter+0x134>
                {
                    Val2 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_RTR_SHIFT;
    f854:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    f858:	9308      	str	r3, [sp, #32]
                }

                if (idFilterTable[j].isExtendedFrame)
    f85a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f85c:	00db      	lsls	r3, r3, #3
    f85e:	9a01      	ldr	r2, [sp, #4]
    f860:	4413      	add	r3, r2
    f862:	785b      	ldrb	r3, [r3, #1]
    f864:	2b00      	cmp	r3, #0
    f866:	d014      	beq.n	f892 <FlexCAN_SetRxFifoFilter+0x16c>
                {
                    Val1 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    f868:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f86a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    f86e:	9309      	str	r3, [sp, #36]	; 0x24

                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    f870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f872:	00db      	lsls	r3, r3, #3
    f874:	9a01      	ldr	r2, [sp, #4]
    f876:	4413      	add	r3, r2
    f878:	685b      	ldr	r3, [r3, #4]
    f87a:	0bdb      	lsrs	r3, r3, #15
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT1
    f87c:	041a      	lsls	r2, r3, #16
    f87e:	4b77      	ldr	r3, [pc, #476]	; (fa5c <FlexCAN_SetRxFifoFilter+0x336>)
    f880:	4013      	ands	r3, r2
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    f882:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f884:	0092      	lsls	r2, r2, #2
    f886:	9906      	ldr	r1, [sp, #24]
    f888:	440a      	add	r2, r1
    f88a:	9909      	ldr	r1, [sp, #36]	; 0x24
    f88c:	440b      	add	r3, r1
    f88e:	6013      	str	r3, [r2, #0]
    f890:	e00e      	b.n	f8b0 <FlexCAN_SetRxFifoFilter+0x18a>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + ((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    f892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f894:	00db      	lsls	r3, r3, #3
    f896:	9a01      	ldr	r2, [sp, #4]
    f898:	4413      	add	r3, r2
    f89a:	685b      	ldr	r3, [r3, #4]
    f89c:	04da      	lsls	r2, r3, #19
    f89e:	4b6e      	ldr	r3, [pc, #440]	; (fa58 <FlexCAN_SetRxFifoFilter+0x332>)
    f8a0:	4013      	ands	r3, r2
    f8a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f8a4:	0092      	lsls	r2, r2, #2
    f8a6:	9906      	ldr	r1, [sp, #24]
    f8a8:	440a      	add	r2, r1
    f8aa:	9909      	ldr	r1, [sp, #36]	; 0x24
    f8ac:	440b      	add	r3, r1
    f8ae:	6013      	str	r3, [r2, #0]
                                              FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT1
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    f8b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f8b2:	3301      	adds	r3, #1
    f8b4:	00db      	lsls	r3, r3, #3
    f8b6:	9a01      	ldr	r2, [sp, #4]
    f8b8:	4413      	add	r3, r2
    f8ba:	785b      	ldrb	r3, [r3, #1]
    f8bc:	2b00      	cmp	r3, #0
    f8be:	d01a      	beq.n	f8f6 <FlexCAN_SetRxFifoFilter+0x1d0>
                {
                    Val2 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_IDE_SHIFT;
    f8c0:	9b08      	ldr	r3, [sp, #32]
    f8c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    f8c6:	9308      	str	r3, [sp, #32]

                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    f8c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8ca:	009b      	lsls	r3, r3, #2
    f8cc:	9a06      	ldr	r2, [sp, #24]
    f8ce:	4413      	add	r3, r2
    f8d0:	6819      	ldr	r1, [r3, #0]
    f8d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f8d4:	3301      	adds	r3, #1
    f8d6:	00db      	lsls	r3, r3, #3
    f8d8:	9a01      	ldr	r2, [sp, #4]
    f8da:	4413      	add	r3, r2
    f8dc:	685b      	ldr	r3, [r3, #4]
    f8de:	0bdb      	lsrs	r3, r3, #15
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT2
    f8e0:	f3c3 020d 	ubfx	r2, r3, #0, #14
                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    f8e4:	9b08      	ldr	r3, [sp, #32]
    f8e6:	441a      	add	r2, r3
    f8e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8ea:	009b      	lsls	r3, r3, #2
    f8ec:	9806      	ldr	r0, [sp, #24]
    f8ee:	4403      	add	r3, r0
    f8f0:	430a      	orrs	r2, r1
    f8f2:	601a      	str	r2, [r3, #0]
    f8f4:	e016      	b.n	f924 <FlexCAN_SetRxFifoFilter+0x1fe>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val2 + ((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    f8f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8f8:	009b      	lsls	r3, r3, #2
    f8fa:	9a06      	ldr	r2, [sp, #24]
    f8fc:	4413      	add	r3, r2
    f8fe:	6819      	ldr	r1, [r3, #0]
    f900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f902:	3301      	adds	r3, #1
    f904:	00db      	lsls	r3, r3, #3
    f906:	9a01      	ldr	r2, [sp, #4]
    f908:	4413      	add	r3, r2
    f90a:	685b      	ldr	r3, [r3, #4]
    f90c:	00da      	lsls	r2, r3, #3
    f90e:	f643 73f8 	movw	r3, #16376	; 0x3ff8
    f912:	4013      	ands	r3, r2
    f914:	9a08      	ldr	r2, [sp, #32]
    f916:	441a      	add	r2, r3
    f918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f91a:	009b      	lsls	r3, r3, #2
    f91c:	9806      	ldr	r0, [sp, #24]
    f91e:	4403      	add	r3, r0
    f920:	430a      	orrs	r2, r1
    f922:	601a      	str	r2, [r3, #0]
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT2
                                             );
                }

                j = j + 2U;
    f924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f926:	3302      	adds	r3, #2
    f928:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f92a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f92c:	3301      	adds	r3, #1
    f92e:	930b      	str	r3, [sp, #44]	; 0x2c
    f930:	9b05      	ldr	r3, [sp, #20]
    f932:	3301      	adds	r3, #1
    f934:	00db      	lsls	r3, r3, #3
    f936:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f938:	429a      	cmp	r2, r3
    f93a:	f4ff af75 	bcc.w	f828 <FlexCAN_SetRxFifoFilter+0x102>
            }
            break;
    f93e:	e0f2      	b.n	fb26 <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_C):
            /* Four partial 8-bit Standard IDs per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f940:	f004 fe2e 	bl	145a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    f944:	9b03      	ldr	r3, [sp, #12]
    f946:	681b      	ldr	r3, [r3, #0]
    f948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    f94c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
            (base->MCR) =
    f950:	9b03      	ldr	r3, [sp, #12]
    f952:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_C)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f954:	f004 fe50 	bl	145f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    f958:	2300      	movs	r3, #0
    f95a:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f95c:	2300      	movs	r3, #0
    f95e:	930b      	str	r3, [sp, #44]	; 0x2c
    f960:	e0cd      	b.n	fafe <FlexCAN_SetRxFifoFilter+0x3d8>
            {
                if (idFilterTable[j].isExtendedFrame)
    f962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f964:	00db      	lsls	r3, r3, #3
    f966:	9a01      	ldr	r2, [sp, #4]
    f968:	4413      	add	r3, r2
    f96a:	785b      	ldrb	r3, [r3, #1]
    f96c:	2b00      	cmp	r3, #0
    f96e:	d00e      	beq.n	f98e <FlexCAN_SetRxFifoFilter+0x268>
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f972:	00db      	lsls	r3, r3, #3
    f974:	9a01      	ldr	r2, [sp, #4]
    f976:	4413      	add	r3, r2
    f978:	685b      	ldr	r3, [r3, #4]
    f97a:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    f97c:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f97e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f980:	009b      	lsls	r3, r3, #2
    f982:	9a06      	ldr	r2, [sp, #24]
    f984:	4413      	add	r3, r2
    f986:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f988:	440a      	add	r2, r1
    f98a:	601a      	str	r2, [r3, #0]
    f98c:	e00d      	b.n	f9aa <FlexCAN_SetRxFifoFilter+0x284>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f98e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f990:	00db      	lsls	r3, r3, #3
    f992:	9a01      	ldr	r2, [sp, #4]
    f994:	4413      	add	r3, r2
    f996:	685b      	ldr	r3, [r3, #4]
    f998:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    f99a:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f99c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f99e:	009b      	lsls	r3, r3, #2
    f9a0:	9a06      	ldr	r2, [sp, #24]
    f9a2:	4413      	add	r3, r2
    f9a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f9a6:	440a      	add	r2, r1
    f9a8:	601a      	str	r2, [r3, #0]
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    f9aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f9ac:	3301      	adds	r3, #1
    f9ae:	00db      	lsls	r3, r3, #3
    f9b0:	9a01      	ldr	r2, [sp, #4]
    f9b2:	4413      	add	r3, r2
    f9b4:	785b      	ldrb	r3, [r3, #1]
    f9b6:	2b00      	cmp	r3, #0
    f9b8:	d017      	beq.n	f9ea <FlexCAN_SetRxFifoFilter+0x2c4>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f9ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f9bc:	009b      	lsls	r3, r3, #2
    f9be:	9a06      	ldr	r2, [sp, #24]
    f9c0:	4413      	add	r3, r2
    f9c2:	6819      	ldr	r1, [r3, #0]
    f9c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f9c6:	3301      	adds	r3, #1
    f9c8:	00db      	lsls	r3, r3, #3
    f9ca:	9a01      	ldr	r2, [sp, #4]
    f9cc:	4413      	add	r3, r2
    f9ce:	685b      	ldr	r3, [r3, #4]
    f9d0:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    f9d2:	041b      	lsls	r3, r3, #16
    f9d4:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f9d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f9da:	441a      	add	r2, r3
    f9dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f9de:	009b      	lsls	r3, r3, #2
    f9e0:	9806      	ldr	r0, [sp, #24]
    f9e2:	4403      	add	r3, r0
    f9e4:	430a      	orrs	r2, r1
    f9e6:	601a      	str	r2, [r3, #0]
    f9e8:	e016      	b.n	fa18 <FlexCAN_SetRxFifoFilter+0x2f2>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f9ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f9ec:	009b      	lsls	r3, r3, #2
    f9ee:	9a06      	ldr	r2, [sp, #24]
    f9f0:	4413      	add	r3, r2
    f9f2:	6819      	ldr	r1, [r3, #0]
    f9f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f9f6:	3301      	adds	r3, #1
    f9f8:	00db      	lsls	r3, r3, #3
    f9fa:	9a01      	ldr	r2, [sp, #4]
    f9fc:	4413      	add	r3, r2
    f9fe:	685b      	ldr	r3, [r3, #4]
    fa00:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    fa02:	041b      	lsls	r3, r3, #16
    fa04:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    fa08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fa0a:	441a      	add	r2, r3
    fa0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa0e:	009b      	lsls	r3, r3, #2
    fa10:	9806      	ldr	r0, [sp, #24]
    fa12:	4403      	add	r3, r0
    fa14:	430a      	orrs	r2, r1
    fa16:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 2U].isExtendedFrame)
    fa18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fa1a:	3302      	adds	r3, #2
    fa1c:	00db      	lsls	r3, r3, #3
    fa1e:	9a01      	ldr	r2, [sp, #4]
    fa20:	4413      	add	r3, r2
    fa22:	785b      	ldrb	r3, [r3, #1]
    fa24:	2b00      	cmp	r3, #0
    fa26:	d01b      	beq.n	fa60 <FlexCAN_SetRxFifoFilter+0x33a>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    fa28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa2a:	009b      	lsls	r3, r3, #2
    fa2c:	9a06      	ldr	r2, [sp, #24]
    fa2e:	4413      	add	r3, r2
    fa30:	6819      	ldr	r1, [r3, #0]
    fa32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fa34:	3302      	adds	r3, #2
    fa36:	00db      	lsls	r3, r3, #3
    fa38:	9a01      	ldr	r2, [sp, #4]
    fa3a:	4413      	add	r3, r2
    fa3c:	685b      	ldr	r3, [r3, #4]
    fa3e:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    fa40:	021b      	lsls	r3, r3, #8
    fa42:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    fa44:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fa46:	441a      	add	r2, r3
    fa48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa4a:	009b      	lsls	r3, r3, #2
    fa4c:	9806      	ldr	r0, [sp, #24]
    fa4e:	4403      	add	r3, r0
    fa50:	430a      	orrs	r2, r1
    fa52:	601a      	str	r2, [r3, #0]
    fa54:	e01a      	b.n	fa8c <FlexCAN_SetRxFifoFilter+0x366>
    fa56:	bf00      	nop
    fa58:	3ff80000 	.word	0x3ff80000
    fa5c:	3fff0000 	.word	0x3fff0000
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    fa60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa62:	009b      	lsls	r3, r3, #2
    fa64:	9a06      	ldr	r2, [sp, #24]
    fa66:	4413      	add	r3, r2
    fa68:	6819      	ldr	r1, [r3, #0]
    fa6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fa6c:	3302      	adds	r3, #2
    fa6e:	00db      	lsls	r3, r3, #3
    fa70:	9a01      	ldr	r2, [sp, #4]
    fa72:	4413      	add	r3, r2
    fa74:	685b      	ldr	r3, [r3, #4]
    fa76:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    fa78:	021b      	lsls	r3, r3, #8
    fa7a:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    fa7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fa7e:	441a      	add	r2, r3
    fa80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa82:	009b      	lsls	r3, r3, #2
    fa84:	9806      	ldr	r0, [sp, #24]
    fa86:	4403      	add	r3, r0
    fa88:	430a      	orrs	r2, r1
    fa8a:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 3U].isExtendedFrame)
    fa8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fa8e:	3303      	adds	r3, #3
    fa90:	00db      	lsls	r3, r3, #3
    fa92:	9a01      	ldr	r2, [sp, #4]
    fa94:	4413      	add	r3, r2
    fa96:	785b      	ldrb	r3, [r3, #1]
    fa98:	2b00      	cmp	r3, #0
    fa9a:	d015      	beq.n	fac8 <FlexCAN_SetRxFifoFilter+0x3a2>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    fa9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa9e:	009b      	lsls	r3, r3, #2
    faa0:	9a06      	ldr	r2, [sp, #24]
    faa2:	4413      	add	r3, r2
    faa4:	6819      	ldr	r1, [r3, #0]
    faa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    faa8:	3303      	adds	r3, #3
    faaa:	00db      	lsls	r3, r3, #3
    faac:	9a01      	ldr	r2, [sp, #4]
    faae:	4413      	add	r3, r2
    fab0:	685b      	ldr	r3, [r3, #4]
    fab2:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    fab4:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    fab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fab8:	441a      	add	r2, r3
    faba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fabc:	009b      	lsls	r3, r3, #2
    fabe:	9806      	ldr	r0, [sp, #24]
    fac0:	4403      	add	r3, r0
    fac2:	430a      	orrs	r2, r1
    fac4:	601a      	str	r2, [r3, #0]
    fac6:	e014      	b.n	faf2 <FlexCAN_SetRxFifoFilter+0x3cc>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 +
    fac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    faca:	009b      	lsls	r3, r3, #2
    facc:	9a06      	ldr	r2, [sp, #24]
    face:	4413      	add	r3, r2
    fad0:	6819      	ldr	r1, [r3, #0]
                                      (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    fad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fad4:	3303      	adds	r3, #3
    fad6:	00db      	lsls	r3, r3, #3
    fad8:	9a01      	ldr	r2, [sp, #4]
    fada:	4413      	add	r3, r2
    fadc:	685b      	ldr	r3, [r3, #4]
    fade:	08db      	lsrs	r3, r3, #3
                                        FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                       ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    fae0:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 +
    fae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fae4:	441a      	add	r2, r3
    fae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fae8:	009b      	lsls	r3, r3, #2
    faea:	9806      	ldr	r0, [sp, #24]
    faec:	4403      	add	r3, r0
    faee:	430a      	orrs	r2, r1
    faf0:	601a      	str	r2, [r3, #0]
                                      );
                }

                j = j + 4U;
    faf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    faf4:	3304      	adds	r3, #4
    faf6:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    faf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fafa:	3301      	adds	r3, #1
    fafc:	930b      	str	r3, [sp, #44]	; 0x2c
    fafe:	9b05      	ldr	r3, [sp, #20]
    fb00:	3301      	adds	r3, #1
    fb02:	00db      	lsls	r3, r3, #3
    fb04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    fb06:	429a      	cmp	r2, r3
    fb08:	f4ff af2b 	bcc.w	f962 <FlexCAN_SetRxFifoFilter+0x23c>
            }
            break;
    fb0c:	e00b      	b.n	fb26 <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_D):
            /* All frames rejected.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    fb0e:	f004 fd47 	bl	145a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    fb12:	9b03      	ldr	r3, [sp, #12]
    fb14:	681b      	ldr	r3, [r3, #0]
    fb16:	f443 7240 	orr.w	r2, r3, #768	; 0x300
            (base->MCR) =
    fb1a:	9b03      	ldr	r3, [sp, #12]
    fb1c:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_D)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    fb1e:	f004 fd6b 	bl	145f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            break;
    fb22:	e000      	b.n	fb26 <FlexCAN_SetRxFifoFilter+0x400>
        default:
            /* Should not get here */
            break;
    fb24:	bf00      	nop
    }
}
    fb26:	bf00      	nop
    fb28:	b00d      	add	sp, #52	; 0x34
    fb2a:	f85d fb04 	ldr.w	pc, [sp], #4

0000fb2e <FlexCAN_ReadRxFifo>:
 * Description   : Read Rx FIFO data.
 * This function will copy MB[0] data field into user's buffer.
 *
 *END**************************************************************************/
void FlexCAN_ReadRxFifo(const FLEXCAN_Type * base, Flexcan_Ip_MsgBuffType * rxFifo)
{
    fb2e:	b500      	push	{lr}
    fb30:	b08b      	sub	sp, #44	; 0x2c
    fb32:	9001      	str	r0, [sp, #4]
    fb34:	9100      	str	r1, [sp, #0]
    uint32 x;
    uint8 Index;
    const uint8 * p;
    #endif

    volatile const uint32 * flexcan_mb = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    fb36:	9b01      	ldr	r3, [sp, #4]
    fb38:	3380      	adds	r3, #128	; 0x80
    fb3a:	9307      	str	r3, [sp, #28]
    volatile const uint32 * flexcan_mb_id = &flexcan_mb[1];
    fb3c:	9b07      	ldr	r3, [sp, #28]
    fb3e:	3304      	adds	r3, #4
    fb40:	9306      	str	r3, [sp, #24]
    volatile const uint32 * flexcan_mb_data_32 = &flexcan_mb[2];
    fb42:	9b07      	ldr	r3, [sp, #28]
    fb44:	3308      	adds	r3, #8
    fb46:	9305      	str	r3, [sp, #20]
    uint32 * msgData_32 = NULL_PTR;
    fb48:	2300      	movs	r3, #0
    fb4a:	9304      	str	r3, [sp, #16]
    uint8 flexcan_mb_dlc_value = (uint8)(((*flexcan_mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    fb4c:	9b07      	ldr	r3, [sp, #28]
    fb4e:	681b      	ldr	r3, [r3, #0]
    fb50:	0c1b      	lsrs	r3, r3, #16
    fb52:	b2db      	uxtb	r3, r3
    fb54:	f003 030f 	and.w	r3, r3, #15
    fb58:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 can_real_payload = FlexCAN_ComputePayloadSize(flexcan_mb_dlc_value);
    fb5c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fb60:	4618      	mov	r0, r3
    fb62:	f7fe fe6c 	bl	e83e <FlexCAN_ComputePayloadSize>
    fb66:	4603      	mov	r3, r0
    fb68:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(rxFifo != NULL_PTR);
    #endif
    msgData_32 = (uint32 *)(rxFifo->data);
    fb6c:	9b00      	ldr	r3, [sp, #0]
    fb6e:	3308      	adds	r3, #8
    fb70:	9304      	str	r3, [sp, #16]
       Check if the length of received data packet bigger than the maximum length accepted,
       then processing flow shall continue with the maximum length defined by configuration.
       Legacy FIFO just support in normal mode.
    */
    /* no need to check if FD enabled or not because this function just is invoked when legacy fifo enabled only ! */
    if (can_real_payload > 8U)
    fb72:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    fb76:	2b08      	cmp	r3, #8
    fb78:	d902      	bls.n	fb80 <FlexCAN_ReadRxFifo+0x52>
    {
        can_real_payload = 8U;
    fb7a:	2308      	movs	r3, #8
    fb7c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    }

    rxFifo->dataLen = can_real_payload;
    fb80:	9b00      	ldr	r3, [sp, #0]
    fb82:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    fb86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    rxFifo->cs = *flexcan_mb;
    fb8a:	9b07      	ldr	r3, [sp, #28]
    fb8c:	681a      	ldr	r2, [r3, #0]
    fb8e:	9b00      	ldr	r3, [sp, #0]
    fb90:	601a      	str	r2, [r3, #0]
    if ((rxFifo->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    fb92:	9b00      	ldr	r3, [sp, #0]
    fb94:	681b      	ldr	r3, [r3, #0]
    fb96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    fb9a:	2b00      	cmp	r3, #0
    fb9c:	d004      	beq.n	fba8 <FlexCAN_ReadRxFifo+0x7a>
    {
        rxFifo->msgId = *flexcan_mb_id;
    fb9e:	9b06      	ldr	r3, [sp, #24]
    fba0:	681a      	ldr	r2, [r3, #0]
    fba2:	9b00      	ldr	r3, [sp, #0]
    fba4:	605a      	str	r2, [r3, #4]
    fba6:	e004      	b.n	fbb2 <FlexCAN_ReadRxFifo+0x84>
    }
    else
    {
        rxFifo->msgId = (*flexcan_mb_id) >> FLEXCAN_IP_ID_STD_SHIFT;
    fba8:	9b06      	ldr	r3, [sp, #24]
    fbaa:	681b      	ldr	r3, [r3, #0]
    fbac:	0c9a      	lsrs	r2, r3, #18
    fbae:	9b00      	ldr	r3, [sp, #0]
    fbb0:	605a      	str	r2, [r3, #4]
    }
    /* Extract the IDHIT */
    rxFifo->id_hit = (uint8)base->RXFIR;
    fbb2:	9b01      	ldr	r3, [sp, #4]
    fbb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    fbb6:	b2da      	uxtb	r2, r3
    fbb8:	9b00      	ldr	r3, [sp, #0]
    fbba:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    /* Extract the Time Stamp */
    rxFifo->time_stamp = (uint32)((rxFifo->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    fbbe:	9b00      	ldr	r3, [sp, #0]
    fbc0:	681b      	ldr	r3, [r3, #0]
    fbc2:	b29a      	uxth	r2, r3
    fbc4:	9b00      	ldr	r3, [sp, #0]
    fbc6:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, msgData_32[DataByte >> 2U]);
        }
    }
#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
      /* Copy MB[0] data field into user's buffer */
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    fbc8:	2300      	movs	r3, #0
    fbca:	9309      	str	r3, [sp, #36]	; 0x24
    fbcc:	e01f      	b.n	fc0e <FlexCAN_ReadRxFifo+0xe0>
    {
        MbWord = flexcan_mb_data_32[DataByte >> 2U];
    fbce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fbd0:	089b      	lsrs	r3, r3, #2
    fbd2:	009b      	lsls	r3, r3, #2
    fbd4:	9a05      	ldr	r2, [sp, #20]
    fbd6:	4413      	add	r3, r2
    fbd8:	681b      	ldr	r3, [r3, #0]
    fbda:	9302      	str	r3, [sp, #8]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (msgData_32[DataByte >> 2U]));
    fbdc:	9b02      	ldr	r3, [sp, #8]
    fbde:	0e1a      	lsrs	r2, r3, #24
    fbe0:	9b02      	ldr	r3, [sp, #8]
    fbe2:	0a1b      	lsrs	r3, r3, #8
    fbe4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    fbe8:	431a      	orrs	r2, r3
    fbea:	9b02      	ldr	r3, [sp, #8]
    fbec:	021b      	lsls	r3, r3, #8
    fbee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    fbf2:	ea42 0103 	orr.w	r1, r2, r3
    fbf6:	9b02      	ldr	r3, [sp, #8]
    fbf8:	061a      	lsls	r2, r3, #24
    fbfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fbfc:	089b      	lsrs	r3, r3, #2
    fbfe:	009b      	lsls	r3, r3, #2
    fc00:	9804      	ldr	r0, [sp, #16]
    fc02:	4403      	add	r3, r0
    fc04:	430a      	orrs	r2, r1
    fc06:	601a      	str	r2, [r3, #0]
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    fc08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fc0a:	3304      	adds	r3, #4
    fc0c:	9309      	str	r3, [sp, #36]	; 0x24
    fc0e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    fc12:	9a09      	ldr	r2, [sp, #36]	; 0x24
    fc14:	429a      	cmp	r2, r3
    fc16:	d3da      	bcc.n	fbce <FlexCAN_ReadRxFifo+0xa0>
    }
#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
}
    fc18:	bf00      	nop
    fc1a:	bf00      	nop
    fc1c:	b00b      	add	sp, #44	; 0x2c
    fc1e:	f85d fb04 	ldr.w	pc, [sp], #4

0000fc22 <FlexCAN_IsMbOutOfRange>:
    const FLEXCAN_Type * pBase,
    uint8 u8MbIndex,
    boolean bIsLegacyFifoEn,
    uint32 u32MaxMbNum
)
{
    fc22:	b088      	sub	sp, #32
    fc24:	9003      	str	r0, [sp, #12]
    fc26:	9301      	str	r3, [sp, #4]
    fc28:	460b      	mov	r3, r1
    fc2a:	f88d 300b 	strb.w	r3, [sp, #11]
    fc2e:	4613      	mov	r3, r2
    fc30:	f88d 300a 	strb.w	r3, [sp, #10]
    boolean ReturnValue = FALSE;
    fc34:	2300      	movs	r3, #0
    fc36:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32NumOfFiFoElement = 0U;
    fc3a:	2300      	movs	r3, #0
    fc3c:	9306      	str	r3, [sp, #24]
    uint32 u32NumOfMbOccupiedByFiFo = 0U;
    fc3e:	2300      	movs	r3, #0
    fc40:	9305      	str	r3, [sp, #20]

    if (u8MbIndex >= (uint8)u32MaxMbNum)
    fc42:	9b01      	ldr	r3, [sp, #4]
    fc44:	b2db      	uxtb	r3, r3
    fc46:	f89d 200b 	ldrb.w	r2, [sp, #11]
    fc4a:	429a      	cmp	r2, r3
    fc4c:	d303      	bcc.n	fc56 <FlexCAN_IsMbOutOfRange+0x34>
    {
       ReturnValue = TRUE;
    fc4e:	2301      	movs	r3, #1
    fc50:	f88d 301f 	strb.w	r3, [sp, #31]
    fc54:	e01b      	b.n	fc8e <FlexCAN_IsMbOutOfRange+0x6c>
    }
    /* Check if RX FIFO is enabled*/
    else if (TRUE == bIsLegacyFifoEn)
    fc56:	f89d 300a 	ldrb.w	r3, [sp, #10]
    fc5a:	2b00      	cmp	r3, #0
    fc5c:	d014      	beq.n	fc88 <FlexCAN_IsMbOutOfRange+0x66>
    {
        /* Get the number of RX FIFO Filters*/
        u32NumOfFiFoElement = (((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    fc5e:	9b03      	ldr	r3, [sp, #12]
    fc60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    fc62:	0e1b      	lsrs	r3, r3, #24
    fc64:	f003 030f 	and.w	r3, r3, #15
    fc68:	9306      	str	r3, [sp, #24]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        u32NumOfMbOccupiedByFiFo = 5U + ((((u32NumOfFiFoElement) + 1U) * 8U) / 4U);
    fc6a:	9b06      	ldr	r3, [sp, #24]
    fc6c:	3301      	adds	r3, #1
    fc6e:	00db      	lsls	r3, r3, #3
    fc70:	089b      	lsrs	r3, r3, #2
    fc72:	3305      	adds	r3, #5
    fc74:	9305      	str	r3, [sp, #20]
        if (u8MbIndex <= u32NumOfMbOccupiedByFiFo)
    fc76:	f89d 300b 	ldrb.w	r3, [sp, #11]
    fc7a:	9a05      	ldr	r2, [sp, #20]
    fc7c:	429a      	cmp	r2, r3
    fc7e:	d306      	bcc.n	fc8e <FlexCAN_IsMbOutOfRange+0x6c>
        {
            ReturnValue = TRUE;
    fc80:	2301      	movs	r3, #1
    fc82:	f88d 301f 	strb.w	r3, [sp, #31]
    fc86:	e002      	b.n	fc8e <FlexCAN_IsMbOutOfRange+0x6c>
        }
    }
    else
    {
        ReturnValue = FALSE;
    fc88:	2300      	movs	r3, #0
    fc8a:	f88d 301f 	strb.w	r3, [sp, #31]
    }

    return ReturnValue;
    fc8e:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    fc92:	4618      	mov	r0, r3
    fc94:	b008      	add	sp, #32
    fc96:	4770      	bx	lr

0000fc98 <FlexCAN_ConfigCtrlOptions>:
 * Description   : configure controller depending on options
 * note: should be call after FD configuration.
 *
 *END**************************************************************************/
void FlexCAN_ConfigCtrlOptions(FLEXCAN_Type * pBase, uint32 u32Options)
{
    fc98:	b500      	push	{lr}
    fc9a:	b083      	sub	sp, #12
    fc9c:	9001      	str	r0, [sp, #4]
    fc9e:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON)
    /* If the FD feature is enabled, in order to be ISO-compliant. */
    if ((u32Options & FLEXCAN_IP_ISO_U32) != 0U)
    fca0:	9b00      	ldr	r3, [sp, #0]
    fca2:	f003 0320 	and.w	r3, r3, #32
    fca6:	2b00      	cmp	r3, #0
    fca8:	d004      	beq.n	fcb4 <FlexCAN_ConfigCtrlOptions+0x1c>
    {
        FlexCAN_SetIsoCan(pBase, TRUE);
    fcaa:	2101      	movs	r1, #1
    fcac:	9801      	ldr	r0, [sp, #4]
    fcae:	f7fe fcd8 	bl	e662 <FlexCAN_SetIsoCan>
    fcb2:	e003      	b.n	fcbc <FlexCAN_ConfigCtrlOptions+0x24>
    }
    else
    {
        /* This maybe don't have sense if the Deinit returns the state of registers at init values */
        FlexCAN_SetIsoCan(pBase, FALSE);
    fcb4:	2100      	movs	r1, #0
    fcb6:	9801      	ldr	r0, [sp, #4]
    fcb8:	f7fe fcd3 	bl	e662 <FlexCAN_SetIsoCan>
    }
#endif /*(FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON) */
    /* Set Entire Frame Arbitration Field Comparison. */
    if ((u32Options & FLEXCAN_IP_EACEN_U32) != 0U)
    fcbc:	9b00      	ldr	r3, [sp, #0]
    fcbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
    fcc2:	2b00      	cmp	r3, #0
    fcc4:	d004      	beq.n	fcd0 <FlexCAN_ConfigCtrlOptions+0x38>
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, TRUE);
    fcc6:	2101      	movs	r1, #1
    fcc8:	9801      	ldr	r0, [sp, #4]
    fcca:	f7fe fce1 	bl	e690 <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    fcce:	e003      	b.n	fcd8 <FlexCAN_ConfigCtrlOptions+0x40>
    }
    else
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, FALSE);
    fcd0:	2100      	movs	r1, #0
    fcd2:	9801      	ldr	r0, [sp, #4]
    fcd4:	f7fe fcdc 	bl	e690 <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    }
#if (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)
    /* Set protocol Exception */
    if ((u32Options & FLEXCAN_IP_PROTOCOL_EXCEPTION_U32) != 0U)
    fcd8:	9b00      	ldr	r3, [sp, #0]
    fcda:	f003 0308 	and.w	r3, r3, #8
    fcde:	2b00      	cmp	r3, #0
    fce0:	d004      	beq.n	fcec <FlexCAN_ConfigCtrlOptions+0x54>
    {
        FlexCAN_SetProtocolException(pBase, TRUE);
    fce2:	2101      	movs	r1, #1
    fce4:	9801      	ldr	r0, [sp, #4]
    fce6:	f7fe fcea 	bl	e6be <FlexCAN_SetProtocolException>
    fcea:	e003      	b.n	fcf4 <FlexCAN_ConfigCtrlOptions+0x5c>
    }
    else
    {
        FlexCAN_SetProtocolException(pBase, FALSE);
    fcec:	2100      	movs	r1, #0
    fcee:	9801      	ldr	r0, [sp, #4]
    fcf0:	f7fe fce5 	bl	e6be <FlexCAN_SetProtocolException>
    }
#endif /* Endif  (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)  */
    /* Set CAN Bit Sampling */
    if (((u32Options & FLEXCAN_IP_THREE_SAMPLES_U32) != 0U) && (0U == (pBase->MCR & FLEXCAN_MCR_FDEN_MASK)))
    fcf4:	9b00      	ldr	r3, [sp, #0]
    fcf6:	f003 0302 	and.w	r3, r3, #2
    fcfa:	2b00      	cmp	r3, #0
    fcfc:	d00a      	beq.n	fd14 <FlexCAN_ConfigCtrlOptions+0x7c>
    fcfe:	9b01      	ldr	r3, [sp, #4]
    fd00:	681b      	ldr	r3, [r3, #0]
    fd02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    fd06:	2b00      	cmp	r3, #0
    fd08:	d104      	bne.n	fd14 <FlexCAN_ConfigCtrlOptions+0x7c>
    {
        FlexCAN_CanBitSampling(pBase, TRUE);
    fd0a:	2101      	movs	r1, #1
    fd0c:	9801      	ldr	r0, [sp, #4]
    fd0e:	f7fe fd31 	bl	e774 <FlexCAN_CanBitSampling>
    fd12:	e003      	b.n	fd1c <FlexCAN_ConfigCtrlOptions+0x84>
    }
    else
    {
        FlexCAN_CanBitSampling(pBase, FALSE);
    fd14:	2100      	movs	r1, #0
    fd16:	9801      	ldr	r0, [sp, #4]
    fd18:	f7fe fd2c 	bl	e774 <FlexCAN_CanBitSampling>
    }

    /* Set AutoBusOff Recovery */
    if ((u32Options & FLEXCAN_IP_BUSOFF_RECOVERY_U32) != 0U)
    fd1c:	9b00      	ldr	r3, [sp, #0]
    fd1e:	f003 0304 	and.w	r3, r3, #4
    fd22:	2b00      	cmp	r3, #0
    fd24:	d004      	beq.n	fd30 <FlexCAN_ConfigCtrlOptions+0x98>
    {
        FlexCAN_SetBusOffAutorecovery(pBase, TRUE);
    fd26:	2101      	movs	r1, #1
    fd28:	9801      	ldr	r0, [sp, #4]
    fd2a:	f7fe fcf6 	bl	e71a <FlexCAN_SetBusOffAutorecovery>
    fd2e:	e003      	b.n	fd38 <FlexCAN_ConfigCtrlOptions+0xa0>
    }
    else
    {
        FlexCAN_SetBusOffAutorecovery(pBase, FALSE);
    fd30:	2100      	movs	r1, #0
    fd32:	9801      	ldr	r0, [sp, #4]
    fd34:	f7fe fcf1 	bl	e71a <FlexCAN_SetBusOffAutorecovery>
    }
    /* Set Remote Request Store for received of Remote Request Frames */
    if ((u32Options & FLEXCAN_IP_REM_STORE_U32) != 0U)
    fd38:	9b00      	ldr	r3, [sp, #0]
    fd3a:	f003 0301 	and.w	r3, r3, #1
    fd3e:	2b00      	cmp	r3, #0
    fd40:	d004      	beq.n	fd4c <FlexCAN_ConfigCtrlOptions+0xb4>
    {
        FlexCAN_SetRemoteReqStore(pBase, TRUE);
    fd42:	2101      	movs	r1, #1
    fd44:	9801      	ldr	r0, [sp, #4]
    fd46:	f7fe fcd1 	bl	e6ec <FlexCAN_SetRemoteReqStore>
    fd4a:	e003      	b.n	fd54 <FlexCAN_ConfigCtrlOptions+0xbc>
    }
    else
    {
        FlexCAN_SetRemoteReqStore(pBase, FALSE);
    fd4c:	2100      	movs	r1, #0
    fd4e:	9801      	ldr	r0, [sp, #4]
    fd50:	f7fe fccc 	bl	e6ec <FlexCAN_SetRemoteReqStore>
    }
#if (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)
    /* Set Edge Filter */
    if ((u32Options & FLEXCAN_IP_EDGE_FILTER_U32) != 0U)
    fd54:	9b00      	ldr	r3, [sp, #0]
    fd56:	f003 0310 	and.w	r3, r3, #16
    fd5a:	2b00      	cmp	r3, #0
    fd5c:	d004      	beq.n	fd68 <FlexCAN_ConfigCtrlOptions+0xd0>
    {
        FlexCAN_SetEdgeFilter(pBase, TRUE);
    fd5e:	2101      	movs	r1, #1
    fd60:	9801      	ldr	r0, [sp, #4]
    fd62:	f7fe fcf0 	bl	e746 <FlexCAN_SetEdgeFilter>
    else
    {
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    }
#endif /* End of (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)  */
}
    fd66:	e003      	b.n	fd70 <FlexCAN_ConfigCtrlOptions+0xd8>
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    fd68:	2100      	movs	r1, #0
    fd6a:	9801      	ldr	r0, [sp, #4]
    fd6c:	f7fe fceb 	bl	e746 <FlexCAN_SetEdgeFilter>
}
    fd70:	bf00      	nop
    fd72:	b003      	add	sp, #12
    fd74:	f85d fb04 	ldr.w	pc, [sp], #4

0000fd78 <FlexCAN_ResetImaskBuff>:
 * Function Name : FlexCAN_ResetImaskBuff (uses in FlexCAN_Ip_Init function only)
 * Description   : Reset Imask Buffers.
 *
 *END**************************************************************************/
void FlexCAN_ResetImaskBuff(uint8 Instance)
{
    fd78:	b084      	sub	sp, #16
    fd7a:	4603      	mov	r3, r0
    fd7c:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ImaskCnt = 0U;
    fd80:	2300      	movs	r3, #0
    fd82:	f88d 300f 	strb.w	r3, [sp, #15]

    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    fd86:	2300      	movs	r3, #0
    fd88:	f88d 300f 	strb.w	r3, [sp, #15]
    fd8c:	e00d      	b.n	fdaa <FlexCAN_ResetImaskBuff+0x32>
    {
        FlexCAN_Ip_au32ImaskBuff[Instance][ImaskCnt] = 0U;
    fd8e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    fd92:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fd96:	4909      	ldr	r1, [pc, #36]	; (fdbc <FlexCAN_ResetImaskBuff+0x44>)
    fd98:	4413      	add	r3, r2
    fd9a:	2200      	movs	r2, #0
    fd9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    fda0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fda4:	3301      	adds	r3, #1
    fda6:	f88d 300f 	strb.w	r3, [sp, #15]
    fdaa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fdae:	2b00      	cmp	r3, #0
    fdb0:	d0ed      	beq.n	fd8e <FlexCAN_ResetImaskBuff+0x16>
    }
}
    fdb2:	bf00      	nop
    fdb4:	bf00      	nop
    fdb6:	b004      	add	sp, #16
    fdb8:	4770      	bx	lr
    fdba:	bf00      	nop
    fdbc:	1fff9368 	.word	0x1fff9368

0000fdc0 <CAN0_ORED_IRQHandler>:

#else

/* Implementation of CAN0 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN0_ORED_IRQHandler)
{
    fdc0:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(0U);
    fdc2:	2000      	movs	r0, #0
    fdc4:	f7fd fb2a 	bl	d41c <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    fdc8:	f3bf 8f4f 	dsb	sy
}
    fdcc:	bf00      	nop
    fdce:	bd08      	pop	{r3, pc}

0000fdd0 <CAN0_Error_IRQHandler>:

/* Implementation of CAN0 handler named in startup code for processing of Errors reporting. */
ISR(CAN0_Error_IRQHandler)
{
    fdd0:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(0U);
    fdd2:	2000      	movs	r0, #0
    fdd4:	f7fd fac2 	bl	d35c <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    fdd8:	f3bf 8f4f 	dsb	sy
}
    fddc:	bf00      	nop
    fdde:	bd08      	pop	{r3, pc}

0000fde0 <CAN0_ORED_0_15_MB_IRQHandler>:
}
#endif
/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN0_ORED_0_15_MB_IRQHandler)
{
    fde0:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 0U, 15U);
    fde2:	220f      	movs	r2, #15
    fde4:	2100      	movs	r1, #0
    fde6:	2000      	movs	r0, #0
    fde8:	f7fd f9dc 	bl	d1a4 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fdec:	f3bf 8f4f 	dsb	sy
}
    fdf0:	bf00      	nop
    fdf2:	bd08      	pop	{r3, pc}

0000fdf4 <CAN0_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN0_ORED_16_31_MB_IRQHandler)
{
    fdf4:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 16U, 31U);
    fdf6:	221f      	movs	r2, #31
    fdf8:	2110      	movs	r1, #16
    fdfa:	2000      	movs	r0, #0
    fdfc:	f7fd f9d2 	bl	d1a4 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fe00:	f3bf 8f4f 	dsb	sy
}
    fe04:	bf00      	nop
    fe06:	bd08      	pop	{r3, pc}

0000fe08 <CAN1_ORED_IRQHandler>:
#endif /* (defined(S32K142W) || defined(S32K144W) || defined(S32M243) || defined(S32M244)) */

#if (FLEXCAN_INSTANCE_COUNT > 1U)
/* Implementation of CAN1 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN1_ORED_IRQHandler)
{
    fe08:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(1U);
    fe0a:	2001      	movs	r0, #1
    fe0c:	f7fd fb06 	bl	d41c <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    fe10:	f3bf 8f4f 	dsb	sy
}
    fe14:	bf00      	nop
    fe16:	bd08      	pop	{r3, pc}

0000fe18 <CAN1_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN1_Error_IRQHandler)
{
    fe18:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(1U);
    fe1a:	2001      	movs	r0, #1
    fe1c:	f7fd fa9e 	bl	d35c <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    fe20:	f3bf 8f4f 	dsb	sy
}
    fe24:	bf00      	nop
    fe26:	bd08      	pop	{r3, pc}

0000fe28 <CAN1_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN1_ORED_0_15_MB_IRQHandler)
{
    fe28:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 0U, 15U);
    fe2a:	220f      	movs	r2, #15
    fe2c:	2100      	movs	r1, #0
    fe2e:	2001      	movs	r0, #1
    fe30:	f7fd f9b8 	bl	d1a4 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fe34:	f3bf 8f4f 	dsb	sy
}
    fe38:	bf00      	nop
    fe3a:	bd08      	pop	{r3, pc}

0000fe3c <CAN1_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN1_ORED_16_31_MB_IRQHandler)
{
    fe3c:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 16U, 31U);
    fe3e:	221f      	movs	r2, #31
    fe40:	2110      	movs	r1, #16
    fe42:	2001      	movs	r0, #1
    fe44:	f7fd f9ae 	bl	d1a4 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fe48:	f3bf 8f4f 	dsb	sy
}
    fe4c:	bf00      	nop
    fe4e:	bd08      	pop	{r3, pc}

0000fe50 <CAN2_ORED_IRQHandler>:
#endif /* (FLEXCAN_INSTANCE_COUNT > 1U) */

#if (FLEXCAN_INSTANCE_COUNT > 2U)
/* Implementation of CAN2 handler named in startup code for processing of Errors and Bus Off reporting. */
ISR(CAN2_ORED_IRQHandler)
{
    fe50:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(2U);
    fe52:	2002      	movs	r0, #2
    fe54:	f7fd fae2 	bl	d41c <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    fe58:	f3bf 8f4f 	dsb	sy
}
    fe5c:	bf00      	nop
    fe5e:	bd08      	pop	{r3, pc}

0000fe60 <CAN2_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN2_Error_IRQHandler)
{
    fe60:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(2U);
    fe62:	2002      	movs	r0, #2
    fe64:	f7fd fa7a 	bl	d35c <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    fe68:	f3bf 8f4f 	dsb	sy
}
    fe6c:	bf00      	nop
    fe6e:	bd08      	pop	{r3, pc}

0000fe70 <CAN2_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN2 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN2_ORED_0_15_MB_IRQHandler)
{
    fe70:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(2U, 0U, 15U);
    fe72:	220f      	movs	r2, #15
    fe74:	2100      	movs	r1, #0
    fe76:	2002      	movs	r0, #2
    fe78:	f7fd f994 	bl	d1a4 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fe7c:	f3bf 8f4f 	dsb	sy
}
    fe80:	bf00      	nop
    fe82:	bd08      	pop	{r3, pc}

0000fe84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    fe84:	b500      	push	{lr}
    fe86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe88:	f7f0 ff26 	bl	cd8 <Sys_GetCoreID>
    fe8c:	4603      	mov	r3, r0
    fe8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId])
    fe90:	4a10      	ldr	r2, [pc, #64]	; (fed4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    fe92:	9b01      	ldr	r3, [sp, #4]
    fe94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe98:	2b00      	cmp	r3, #0
    fe9a:	d10d      	bne.n	feb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fe9c:	f7f0 fd7c 	bl	998 <Adc_schm_read_msr>
    fea0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fea2:	9b00      	ldr	r3, [sp, #0]
    fea4:	f003 0301 	and.w	r3, r3, #1
    fea8:	2b00      	cmp	r3, #0
    feaa:	d100      	bne.n	feae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    feac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    feae:	490a      	ldr	r1, [pc, #40]	; (fed8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x54>)
    feb0:	9b01      	ldr	r3, [sp, #4]
    feb2:	9a00      	ldr	r2, [sp, #0]
    feb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]++;
    feb8:	4a06      	ldr	r2, [pc, #24]	; (fed4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    feba:	9b01      	ldr	r3, [sp, #4]
    febc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fec0:	1c5a      	adds	r2, r3, #1
    fec2:	4904      	ldr	r1, [pc, #16]	; (fed4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    fec4:	9b01      	ldr	r3, [sp, #4]
    fec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    feca:	bf00      	nop
    fecc:	b003      	add	sp, #12
    fece:	f85d fb04 	ldr.w	pc, [sp], #4
    fed2:	bf00      	nop
    fed4:	1fff9378 	.word	0x1fff9378
    fed8:	1fff9374 	.word	0x1fff9374

0000fedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    fedc:	b500      	push	{lr}
    fede:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fee0:	f7f0 fefa 	bl	cd8 <Sys_GetCoreID>
    fee4:	4603      	mov	r3, r0
    fee6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]--;
    fee8:	4a0d      	ldr	r2, [pc, #52]	; (ff20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    feea:	9b01      	ldr	r3, [sp, #4]
    feec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fef0:	1e5a      	subs	r2, r3, #1
    fef2:	490b      	ldr	r1, [pc, #44]	; (ff20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    fef4:	9b01      	ldr	r3, [sp, #4]
    fef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    fefa:	4a0a      	ldr	r2, [pc, #40]	; (ff24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x48>)
    fefc:	9b01      	ldr	r3, [sp, #4]
    fefe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff02:	f003 0301 	and.w	r3, r3, #1
    ff06:	2b00      	cmp	r3, #0
    ff08:	d106      	bne.n	ff18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    ff0a:	4a05      	ldr	r2, [pc, #20]	; (ff20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    ff0c:	9b01      	ldr	r3, [sp, #4]
    ff0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff12:	2b00      	cmp	r3, #0
    ff14:	d100      	bne.n	ff18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ff16:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ff18:	bf00      	nop
    ff1a:	b003      	add	sp, #12
    ff1c:	f85d fb04 	ldr.w	pc, [sp], #4
    ff20:	1fff9378 	.word	0x1fff9378
    ff24:	1fff9374 	.word	0x1fff9374

0000ff28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    ff28:	b500      	push	{lr}
    ff2a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff2c:	f7f0 fed4 	bl	cd8 <Sys_GetCoreID>
    ff30:	4603      	mov	r3, r0
    ff32:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId])
    ff34:	4a10      	ldr	r2, [pc, #64]	; (ff78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    ff36:	9b01      	ldr	r3, [sp, #4]
    ff38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff3c:	2b00      	cmp	r3, #0
    ff3e:	d10d      	bne.n	ff5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ff40:	f7f0 fd2a 	bl	998 <Adc_schm_read_msr>
    ff44:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ff46:	9b00      	ldr	r3, [sp, #0]
    ff48:	f003 0301 	and.w	r3, r3, #1
    ff4c:	2b00      	cmp	r3, #0
    ff4e:	d100      	bne.n	ff52 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ff50:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    ff52:	490a      	ldr	r1, [pc, #40]	; (ff7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x54>)
    ff54:	9b01      	ldr	r3, [sp, #4]
    ff56:	9a00      	ldr	r2, [sp, #0]
    ff58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]++;
    ff5c:	4a06      	ldr	r2, [pc, #24]	; (ff78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    ff5e:	9b01      	ldr	r3, [sp, #4]
    ff60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff64:	1c5a      	adds	r2, r3, #1
    ff66:	4904      	ldr	r1, [pc, #16]	; (ff78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    ff68:	9b01      	ldr	r3, [sp, #4]
    ff6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ff6e:	bf00      	nop
    ff70:	b003      	add	sp, #12
    ff72:	f85d fb04 	ldr.w	pc, [sp], #4
    ff76:	bf00      	nop
    ff78:	1fff9380 	.word	0x1fff9380
    ff7c:	1fff937c 	.word	0x1fff937c

0000ff80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    ff80:	b500      	push	{lr}
    ff82:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff84:	f7f0 fea8 	bl	cd8 <Sys_GetCoreID>
    ff88:	4603      	mov	r3, r0
    ff8a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]--;
    ff8c:	4a0d      	ldr	r2, [pc, #52]	; (ffc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    ff8e:	9b01      	ldr	r3, [sp, #4]
    ff90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff94:	1e5a      	subs	r2, r3, #1
    ff96:	490b      	ldr	r1, [pc, #44]	; (ffc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    ff98:	9b01      	ldr	r3, [sp, #4]
    ff9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    ff9e:	4a0a      	ldr	r2, [pc, #40]	; (ffc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x48>)
    ffa0:	9b01      	ldr	r3, [sp, #4]
    ffa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffa6:	f003 0301 	and.w	r3, r3, #1
    ffaa:	2b00      	cmp	r3, #0
    ffac:	d106      	bne.n	ffbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    ffae:	4a05      	ldr	r2, [pc, #20]	; (ffc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    ffb0:	9b01      	ldr	r3, [sp, #4]
    ffb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffb6:	2b00      	cmp	r3, #0
    ffb8:	d100      	bne.n	ffbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ffba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ffbc:	bf00      	nop
    ffbe:	b003      	add	sp, #12
    ffc0:	f85d fb04 	ldr.w	pc, [sp], #4
    ffc4:	1fff9380 	.word	0x1fff9380
    ffc8:	1fff937c 	.word	0x1fff937c

0000ffcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    ffcc:	b500      	push	{lr}
    ffce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ffd0:	f7f0 fe82 	bl	cd8 <Sys_GetCoreID>
    ffd4:	4603      	mov	r3, r0
    ffd6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId])
    ffd8:	4a10      	ldr	r2, [pc, #64]	; (1001c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    ffda:	9b01      	ldr	r3, [sp, #4]
    ffdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffe0:	2b00      	cmp	r3, #0
    ffe2:	d10d      	bne.n	10000 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ffe4:	f7f0 fcd8 	bl	998 <Adc_schm_read_msr>
    ffe8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ffea:	9b00      	ldr	r3, [sp, #0]
    ffec:	f003 0301 	and.w	r3, r3, #1
    fff0:	2b00      	cmp	r3, #0
    fff2:	d100      	bne.n	fff6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fff4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    fff6:	490a      	ldr	r1, [pc, #40]	; (10020 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x54>)
    fff8:	9b01      	ldr	r3, [sp, #4]
    fffa:	9a00      	ldr	r2, [sp, #0]
    fffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]++;
   10000:	4a06      	ldr	r2, [pc, #24]	; (1001c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
   10002:	9b01      	ldr	r3, [sp, #4]
   10004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10008:	1c5a      	adds	r2, r3, #1
   1000a:	4904      	ldr	r1, [pc, #16]	; (1001c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
   1000c:	9b01      	ldr	r3, [sp, #4]
   1000e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10012:	bf00      	nop
   10014:	b003      	add	sp, #12
   10016:	f85d fb04 	ldr.w	pc, [sp], #4
   1001a:	bf00      	nop
   1001c:	1fff9388 	.word	0x1fff9388
   10020:	1fff9384 	.word	0x1fff9384

00010024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
   10024:	b500      	push	{lr}
   10026:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10028:	f7f0 fe56 	bl	cd8 <Sys_GetCoreID>
   1002c:	4603      	mov	r3, r0
   1002e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]--;
   10030:	4a0d      	ldr	r2, [pc, #52]	; (10068 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
   10032:	9b01      	ldr	r3, [sp, #4]
   10034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10038:	1e5a      	subs	r2, r3, #1
   1003a:	490b      	ldr	r1, [pc, #44]	; (10068 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
   1003c:	9b01      	ldr	r3, [sp, #4]
   1003e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   10042:	4a0a      	ldr	r2, [pc, #40]	; (1006c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x48>)
   10044:	9b01      	ldr	r3, [sp, #4]
   10046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1004a:	f003 0301 	and.w	r3, r3, #1
   1004e:	2b00      	cmp	r3, #0
   10050:	d106      	bne.n	10060 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
   10052:	4a05      	ldr	r2, [pc, #20]	; (10068 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
   10054:	9b01      	ldr	r3, [sp, #4]
   10056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1005a:	2b00      	cmp	r3, #0
   1005c:	d100      	bne.n	10060 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1005e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10060:	bf00      	nop
   10062:	b003      	add	sp, #12
   10064:	f85d fb04 	ldr.w	pc, [sp], #4
   10068:	1fff9388 	.word	0x1fff9388
   1006c:	1fff9384 	.word	0x1fff9384

00010070 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
   10070:	b500      	push	{lr}
   10072:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10074:	f7f0 fe30 	bl	cd8 <Sys_GetCoreID>
   10078:	4603      	mov	r3, r0
   1007a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId])
   1007c:	4a10      	ldr	r2, [pc, #64]	; (100c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
   1007e:	9b01      	ldr	r3, [sp, #4]
   10080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10084:	2b00      	cmp	r3, #0
   10086:	d10d      	bne.n	100a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10088:	f7f0 fc86 	bl	998 <Adc_schm_read_msr>
   1008c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1008e:	9b00      	ldr	r3, [sp, #0]
   10090:	f003 0301 	and.w	r3, r3, #1
   10094:	2b00      	cmp	r3, #0
   10096:	d100      	bne.n	1009a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10098:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   1009a:	490a      	ldr	r1, [pc, #40]	; (100c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x54>)
   1009c:	9b01      	ldr	r3, [sp, #4]
   1009e:	9a00      	ldr	r2, [sp, #0]
   100a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]++;
   100a4:	4a06      	ldr	r2, [pc, #24]	; (100c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
   100a6:	9b01      	ldr	r3, [sp, #4]
   100a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100ac:	1c5a      	adds	r2, r3, #1
   100ae:	4904      	ldr	r1, [pc, #16]	; (100c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
   100b0:	9b01      	ldr	r3, [sp, #4]
   100b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   100b6:	bf00      	nop
   100b8:	b003      	add	sp, #12
   100ba:	f85d fb04 	ldr.w	pc, [sp], #4
   100be:	bf00      	nop
   100c0:	1fff9390 	.word	0x1fff9390
   100c4:	1fff938c 	.word	0x1fff938c

000100c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
   100c8:	b500      	push	{lr}
   100ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   100cc:	f7f0 fe04 	bl	cd8 <Sys_GetCoreID>
   100d0:	4603      	mov	r3, r0
   100d2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]--;
   100d4:	4a0d      	ldr	r2, [pc, #52]	; (1010c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
   100d6:	9b01      	ldr	r3, [sp, #4]
   100d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100dc:	1e5a      	subs	r2, r3, #1
   100de:	490b      	ldr	r1, [pc, #44]	; (1010c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
   100e0:	9b01      	ldr	r3, [sp, #4]
   100e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   100e6:	4a0a      	ldr	r2, [pc, #40]	; (10110 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x48>)
   100e8:	9b01      	ldr	r3, [sp, #4]
   100ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100ee:	f003 0301 	and.w	r3, r3, #1
   100f2:	2b00      	cmp	r3, #0
   100f4:	d106      	bne.n	10104 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
   100f6:	4a05      	ldr	r2, [pc, #20]	; (1010c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
   100f8:	9b01      	ldr	r3, [sp, #4]
   100fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100fe:	2b00      	cmp	r3, #0
   10100:	d100      	bne.n	10104 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10102:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10104:	bf00      	nop
   10106:	b003      	add	sp, #12
   10108:	f85d fb04 	ldr.w	pc, [sp], #4
   1010c:	1fff9390 	.word	0x1fff9390
   10110:	1fff938c 	.word	0x1fff938c

00010114 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
   10114:	b500      	push	{lr}
   10116:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10118:	f7f0 fdde 	bl	cd8 <Sys_GetCoreID>
   1011c:	4603      	mov	r3, r0
   1011e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId])
   10120:	4a10      	ldr	r2, [pc, #64]	; (10164 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   10122:	9b01      	ldr	r3, [sp, #4]
   10124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10128:	2b00      	cmp	r3, #0
   1012a:	d10d      	bne.n	10148 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1012c:	f7f0 fc34 	bl	998 <Adc_schm_read_msr>
   10130:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10132:	9b00      	ldr	r3, [sp, #0]
   10134:	f003 0301 	and.w	r3, r3, #1
   10138:	2b00      	cmp	r3, #0
   1013a:	d100      	bne.n	1013e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1013c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   1013e:	490a      	ldr	r1, [pc, #40]	; (10168 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x54>)
   10140:	9b01      	ldr	r3, [sp, #4]
   10142:	9a00      	ldr	r2, [sp, #0]
   10144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]++;
   10148:	4a06      	ldr	r2, [pc, #24]	; (10164 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   1014a:	9b01      	ldr	r3, [sp, #4]
   1014c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10150:	1c5a      	adds	r2, r3, #1
   10152:	4904      	ldr	r1, [pc, #16]	; (10164 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   10154:	9b01      	ldr	r3, [sp, #4]
   10156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1015a:	bf00      	nop
   1015c:	b003      	add	sp, #12
   1015e:	f85d fb04 	ldr.w	pc, [sp], #4
   10162:	bf00      	nop
   10164:	1fff9398 	.word	0x1fff9398
   10168:	1fff9394 	.word	0x1fff9394

0001016c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
   1016c:	b500      	push	{lr}
   1016e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10170:	f7f0 fdb2 	bl	cd8 <Sys_GetCoreID>
   10174:	4603      	mov	r3, r0
   10176:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]--;
   10178:	4a0d      	ldr	r2, [pc, #52]	; (101b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   1017a:	9b01      	ldr	r3, [sp, #4]
   1017c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10180:	1e5a      	subs	r2, r3, #1
   10182:	490b      	ldr	r1, [pc, #44]	; (101b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   10184:	9b01      	ldr	r3, [sp, #4]
   10186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   1018a:	4a0a      	ldr	r2, [pc, #40]	; (101b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x48>)
   1018c:	9b01      	ldr	r3, [sp, #4]
   1018e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10192:	f003 0301 	and.w	r3, r3, #1
   10196:	2b00      	cmp	r3, #0
   10198:	d106      	bne.n	101a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
   1019a:	4a05      	ldr	r2, [pc, #20]	; (101b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   1019c:	9b01      	ldr	r3, [sp, #4]
   1019e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101a2:	2b00      	cmp	r3, #0
   101a4:	d100      	bne.n	101a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   101a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   101a8:	bf00      	nop
   101aa:	b003      	add	sp, #12
   101ac:	f85d fb04 	ldr.w	pc, [sp], #4
   101b0:	1fff9398 	.word	0x1fff9398
   101b4:	1fff9394 	.word	0x1fff9394

000101b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
   101b8:	b500      	push	{lr}
   101ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   101bc:	f7f0 fd8c 	bl	cd8 <Sys_GetCoreID>
   101c0:	4603      	mov	r3, r0
   101c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId])
   101c4:	4a10      	ldr	r2, [pc, #64]	; (10208 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   101c6:	9b01      	ldr	r3, [sp, #4]
   101c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101cc:	2b00      	cmp	r3, #0
   101ce:	d10d      	bne.n	101ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   101d0:	f7f0 fbe2 	bl	998 <Adc_schm_read_msr>
   101d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   101d6:	9b00      	ldr	r3, [sp, #0]
   101d8:	f003 0301 	and.w	r3, r3, #1
   101dc:	2b00      	cmp	r3, #0
   101de:	d100      	bne.n	101e2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   101e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   101e2:	490a      	ldr	r1, [pc, #40]	; (1020c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x54>)
   101e4:	9b01      	ldr	r3, [sp, #4]
   101e6:	9a00      	ldr	r2, [sp, #0]
   101e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]++;
   101ec:	4a06      	ldr	r2, [pc, #24]	; (10208 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   101ee:	9b01      	ldr	r3, [sp, #4]
   101f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101f4:	1c5a      	adds	r2, r3, #1
   101f6:	4904      	ldr	r1, [pc, #16]	; (10208 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   101f8:	9b01      	ldr	r3, [sp, #4]
   101fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   101fe:	bf00      	nop
   10200:	b003      	add	sp, #12
   10202:	f85d fb04 	ldr.w	pc, [sp], #4
   10206:	bf00      	nop
   10208:	1fff93a0 	.word	0x1fff93a0
   1020c:	1fff939c 	.word	0x1fff939c

00010210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
   10210:	b500      	push	{lr}
   10212:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10214:	f7f0 fd60 	bl	cd8 <Sys_GetCoreID>
   10218:	4603      	mov	r3, r0
   1021a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]--;
   1021c:	4a0d      	ldr	r2, [pc, #52]	; (10254 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   1021e:	9b01      	ldr	r3, [sp, #4]
   10220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10224:	1e5a      	subs	r2, r3, #1
   10226:	490b      	ldr	r1, [pc, #44]	; (10254 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   10228:	9b01      	ldr	r3, [sp, #4]
   1022a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   1022e:	4a0a      	ldr	r2, [pc, #40]	; (10258 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x48>)
   10230:	9b01      	ldr	r3, [sp, #4]
   10232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10236:	f003 0301 	and.w	r3, r3, #1
   1023a:	2b00      	cmp	r3, #0
   1023c:	d106      	bne.n	1024c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
   1023e:	4a05      	ldr	r2, [pc, #20]	; (10254 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   10240:	9b01      	ldr	r3, [sp, #4]
   10242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10246:	2b00      	cmp	r3, #0
   10248:	d100      	bne.n	1024c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1024a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1024c:	bf00      	nop
   1024e:	b003      	add	sp, #12
   10250:	f85d fb04 	ldr.w	pc, [sp], #4
   10254:	1fff93a0 	.word	0x1fff93a0
   10258:	1fff939c 	.word	0x1fff939c

0001025c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
   1025c:	b500      	push	{lr}
   1025e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10260:	f7f0 fd3a 	bl	cd8 <Sys_GetCoreID>
   10264:	4603      	mov	r3, r0
   10266:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId])
   10268:	4a10      	ldr	r2, [pc, #64]	; (102ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   1026a:	9b01      	ldr	r3, [sp, #4]
   1026c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10270:	2b00      	cmp	r3, #0
   10272:	d10d      	bne.n	10290 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10274:	f7f0 fb90 	bl	998 <Adc_schm_read_msr>
   10278:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1027a:	9b00      	ldr	r3, [sp, #0]
   1027c:	f003 0301 	and.w	r3, r3, #1
   10280:	2b00      	cmp	r3, #0
   10282:	d100      	bne.n	10286 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10284:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   10286:	490a      	ldr	r1, [pc, #40]	; (102b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x54>)
   10288:	9b01      	ldr	r3, [sp, #4]
   1028a:	9a00      	ldr	r2, [sp, #0]
   1028c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]++;
   10290:	4a06      	ldr	r2, [pc, #24]	; (102ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   10292:	9b01      	ldr	r3, [sp, #4]
   10294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10298:	1c5a      	adds	r2, r3, #1
   1029a:	4904      	ldr	r1, [pc, #16]	; (102ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   1029c:	9b01      	ldr	r3, [sp, #4]
   1029e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   102a2:	bf00      	nop
   102a4:	b003      	add	sp, #12
   102a6:	f85d fb04 	ldr.w	pc, [sp], #4
   102aa:	bf00      	nop
   102ac:	1fff93a8 	.word	0x1fff93a8
   102b0:	1fff93a4 	.word	0x1fff93a4

000102b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
   102b4:	b500      	push	{lr}
   102b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   102b8:	f7f0 fd0e 	bl	cd8 <Sys_GetCoreID>
   102bc:	4603      	mov	r3, r0
   102be:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]--;
   102c0:	4a0d      	ldr	r2, [pc, #52]	; (102f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   102c2:	9b01      	ldr	r3, [sp, #4]
   102c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102c8:	1e5a      	subs	r2, r3, #1
   102ca:	490b      	ldr	r1, [pc, #44]	; (102f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   102cc:	9b01      	ldr	r3, [sp, #4]
   102ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   102d2:	4a0a      	ldr	r2, [pc, #40]	; (102fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x48>)
   102d4:	9b01      	ldr	r3, [sp, #4]
   102d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102da:	f003 0301 	and.w	r3, r3, #1
   102de:	2b00      	cmp	r3, #0
   102e0:	d106      	bne.n	102f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
   102e2:	4a05      	ldr	r2, [pc, #20]	; (102f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   102e4:	9b01      	ldr	r3, [sp, #4]
   102e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102ea:	2b00      	cmp	r3, #0
   102ec:	d100      	bne.n	102f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   102ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   102f0:	bf00      	nop
   102f2:	b003      	add	sp, #12
   102f4:	f85d fb04 	ldr.w	pc, [sp], #4
   102f8:	1fff93a8 	.word	0x1fff93a8
   102fc:	1fff93a4 	.word	0x1fff93a4

00010300 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
   10300:	b500      	push	{lr}
   10302:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10304:	f7f0 fce8 	bl	cd8 <Sys_GetCoreID>
   10308:	4603      	mov	r3, r0
   1030a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId])
   1030c:	4a10      	ldr	r2, [pc, #64]	; (10350 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   1030e:	9b01      	ldr	r3, [sp, #4]
   10310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10314:	2b00      	cmp	r3, #0
   10316:	d10d      	bne.n	10334 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10318:	f7f0 fb3e 	bl	998 <Adc_schm_read_msr>
   1031c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1031e:	9b00      	ldr	r3, [sp, #0]
   10320:	f003 0301 	and.w	r3, r3, #1
   10324:	2b00      	cmp	r3, #0
   10326:	d100      	bne.n	1032a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10328:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_100[u32CoreId] = msr;
   1032a:	490a      	ldr	r1, [pc, #40]	; (10354 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x54>)
   1032c:	9b01      	ldr	r3, [sp, #4]
   1032e:	9a00      	ldr	r2, [sp, #0]
   10330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]++;
   10334:	4a06      	ldr	r2, [pc, #24]	; (10350 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   10336:	9b01      	ldr	r3, [sp, #4]
   10338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1033c:	1c5a      	adds	r2, r3, #1
   1033e:	4904      	ldr	r1, [pc, #16]	; (10350 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   10340:	9b01      	ldr	r3, [sp, #4]
   10342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10346:	bf00      	nop
   10348:	b003      	add	sp, #12
   1034a:	f85d fb04 	ldr.w	pc, [sp], #4
   1034e:	bf00      	nop
   10350:	1fff93b0 	.word	0x1fff93b0
   10354:	1fff93ac 	.word	0x1fff93ac

00010358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
   10358:	b500      	push	{lr}
   1035a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1035c:	f7f0 fcbc 	bl	cd8 <Sys_GetCoreID>
   10360:	4603      	mov	r3, r0
   10362:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]--;
   10364:	4a0d      	ldr	r2, [pc, #52]	; (1039c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   10366:	9b01      	ldr	r3, [sp, #4]
   10368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1036c:	1e5a      	subs	r2, r3, #1
   1036e:	490b      	ldr	r1, [pc, #44]	; (1039c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   10370:	9b01      	ldr	r3, [sp, #4]
   10372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_100[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]))         /*if interrupts were enabled*/
   10376:	4a0a      	ldr	r2, [pc, #40]	; (103a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x48>)
   10378:	9b01      	ldr	r3, [sp, #4]
   1037a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1037e:	f003 0301 	and.w	r3, r3, #1
   10382:	2b00      	cmp	r3, #0
   10384:	d106      	bne.n	10394 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
   10386:	4a05      	ldr	r2, [pc, #20]	; (1039c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   10388:	9b01      	ldr	r3, [sp, #4]
   1038a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1038e:	2b00      	cmp	r3, #0
   10390:	d100      	bne.n	10394 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10392:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10394:	bf00      	nop
   10396:	b003      	add	sp, #12
   10398:	f85d fb04 	ldr.w	pc, [sp], #4
   1039c:	1fff93b0 	.word	0x1fff93b0
   103a0:	1fff93ac 	.word	0x1fff93ac

000103a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
   103a4:	b500      	push	{lr}
   103a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   103a8:	f7f0 fc96 	bl	cd8 <Sys_GetCoreID>
   103ac:	4603      	mov	r3, r0
   103ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId])
   103b0:	4a10      	ldr	r2, [pc, #64]	; (103f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   103b2:	9b01      	ldr	r3, [sp, #4]
   103b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103b8:	2b00      	cmp	r3, #0
   103ba:	d10d      	bne.n	103d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   103bc:	f7f0 faec 	bl	998 <Adc_schm_read_msr>
   103c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   103c2:	9b00      	ldr	r3, [sp, #0]
   103c4:	f003 0301 	and.w	r3, r3, #1
   103c8:	2b00      	cmp	r3, #0
   103ca:	d100      	bne.n	103ce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   103cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_101[u32CoreId] = msr;
   103ce:	490a      	ldr	r1, [pc, #40]	; (103f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x54>)
   103d0:	9b01      	ldr	r3, [sp, #4]
   103d2:	9a00      	ldr	r2, [sp, #0]
   103d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]++;
   103d8:	4a06      	ldr	r2, [pc, #24]	; (103f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   103da:	9b01      	ldr	r3, [sp, #4]
   103dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103e0:	1c5a      	adds	r2, r3, #1
   103e2:	4904      	ldr	r1, [pc, #16]	; (103f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   103e4:	9b01      	ldr	r3, [sp, #4]
   103e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   103ea:	bf00      	nop
   103ec:	b003      	add	sp, #12
   103ee:	f85d fb04 	ldr.w	pc, [sp], #4
   103f2:	bf00      	nop
   103f4:	1fff93b8 	.word	0x1fff93b8
   103f8:	1fff93b4 	.word	0x1fff93b4

000103fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
   103fc:	b500      	push	{lr}
   103fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10400:	f7f0 fc6a 	bl	cd8 <Sys_GetCoreID>
   10404:	4603      	mov	r3, r0
   10406:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]--;
   10408:	4a0d      	ldr	r2, [pc, #52]	; (10440 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   1040a:	9b01      	ldr	r3, [sp, #4]
   1040c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10410:	1e5a      	subs	r2, r3, #1
   10412:	490b      	ldr	r1, [pc, #44]	; (10440 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   10414:	9b01      	ldr	r3, [sp, #4]
   10416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_101[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]))         /*if interrupts were enabled*/
   1041a:	4a0a      	ldr	r2, [pc, #40]	; (10444 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x48>)
   1041c:	9b01      	ldr	r3, [sp, #4]
   1041e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10422:	f003 0301 	and.w	r3, r3, #1
   10426:	2b00      	cmp	r3, #0
   10428:	d106      	bne.n	10438 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
   1042a:	4a05      	ldr	r2, [pc, #20]	; (10440 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   1042c:	9b01      	ldr	r3, [sp, #4]
   1042e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10432:	2b00      	cmp	r3, #0
   10434:	d100      	bne.n	10438 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10436:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10438:	bf00      	nop
   1043a:	b003      	add	sp, #12
   1043c:	f85d fb04 	ldr.w	pc, [sp], #4
   10440:	1fff93b8 	.word	0x1fff93b8
   10444:	1fff93b4 	.word	0x1fff93b4

00010448 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
   10448:	b500      	push	{lr}
   1044a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1044c:	f7f0 fc44 	bl	cd8 <Sys_GetCoreID>
   10450:	4603      	mov	r3, r0
   10452:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId])
   10454:	4a10      	ldr	r2, [pc, #64]	; (10498 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   10456:	9b01      	ldr	r3, [sp, #4]
   10458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1045c:	2b00      	cmp	r3, #0
   1045e:	d10d      	bne.n	1047c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10460:	f7f0 fa9a 	bl	998 <Adc_schm_read_msr>
   10464:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10466:	9b00      	ldr	r3, [sp, #0]
   10468:	f003 0301 	and.w	r3, r3, #1
   1046c:	2b00      	cmp	r3, #0
   1046e:	d100      	bne.n	10472 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10470:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_102[u32CoreId] = msr;
   10472:	490a      	ldr	r1, [pc, #40]	; (1049c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x54>)
   10474:	9b01      	ldr	r3, [sp, #4]
   10476:	9a00      	ldr	r2, [sp, #0]
   10478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]++;
   1047c:	4a06      	ldr	r2, [pc, #24]	; (10498 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   1047e:	9b01      	ldr	r3, [sp, #4]
   10480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10484:	1c5a      	adds	r2, r3, #1
   10486:	4904      	ldr	r1, [pc, #16]	; (10498 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   10488:	9b01      	ldr	r3, [sp, #4]
   1048a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1048e:	bf00      	nop
   10490:	b003      	add	sp, #12
   10492:	f85d fb04 	ldr.w	pc, [sp], #4
   10496:	bf00      	nop
   10498:	1fff93c0 	.word	0x1fff93c0
   1049c:	1fff93bc 	.word	0x1fff93bc

000104a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
   104a0:	b500      	push	{lr}
   104a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   104a4:	f7f0 fc18 	bl	cd8 <Sys_GetCoreID>
   104a8:	4603      	mov	r3, r0
   104aa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]--;
   104ac:	4a0d      	ldr	r2, [pc, #52]	; (104e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   104ae:	9b01      	ldr	r3, [sp, #4]
   104b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104b4:	1e5a      	subs	r2, r3, #1
   104b6:	490b      	ldr	r1, [pc, #44]	; (104e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   104b8:	9b01      	ldr	r3, [sp, #4]
   104ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_102[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]))         /*if interrupts were enabled*/
   104be:	4a0a      	ldr	r2, [pc, #40]	; (104e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x48>)
   104c0:	9b01      	ldr	r3, [sp, #4]
   104c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104c6:	f003 0301 	and.w	r3, r3, #1
   104ca:	2b00      	cmp	r3, #0
   104cc:	d106      	bne.n	104dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
   104ce:	4a05      	ldr	r2, [pc, #20]	; (104e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   104d0:	9b01      	ldr	r3, [sp, #4]
   104d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104d6:	2b00      	cmp	r3, #0
   104d8:	d100      	bne.n	104dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   104da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   104dc:	bf00      	nop
   104de:	b003      	add	sp, #12
   104e0:	f85d fb04 	ldr.w	pc, [sp], #4
   104e4:	1fff93c0 	.word	0x1fff93c0
   104e8:	1fff93bc 	.word	0x1fff93bc

000104ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
   104ec:	b500      	push	{lr}
   104ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   104f0:	f7f0 fbf2 	bl	cd8 <Sys_GetCoreID>
   104f4:	4603      	mov	r3, r0
   104f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId])
   104f8:	4a10      	ldr	r2, [pc, #64]	; (1053c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   104fa:	9b01      	ldr	r3, [sp, #4]
   104fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10500:	2b00      	cmp	r3, #0
   10502:	d10d      	bne.n	10520 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10504:	f7f0 fa48 	bl	998 <Adc_schm_read_msr>
   10508:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1050a:	9b00      	ldr	r3, [sp, #0]
   1050c:	f003 0301 	and.w	r3, r3, #1
   10510:	2b00      	cmp	r3, #0
   10512:	d100      	bne.n	10516 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10514:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_103[u32CoreId] = msr;
   10516:	490a      	ldr	r1, [pc, #40]	; (10540 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x54>)
   10518:	9b01      	ldr	r3, [sp, #4]
   1051a:	9a00      	ldr	r2, [sp, #0]
   1051c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]++;
   10520:	4a06      	ldr	r2, [pc, #24]	; (1053c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   10522:	9b01      	ldr	r3, [sp, #4]
   10524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10528:	1c5a      	adds	r2, r3, #1
   1052a:	4904      	ldr	r1, [pc, #16]	; (1053c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   1052c:	9b01      	ldr	r3, [sp, #4]
   1052e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10532:	bf00      	nop
   10534:	b003      	add	sp, #12
   10536:	f85d fb04 	ldr.w	pc, [sp], #4
   1053a:	bf00      	nop
   1053c:	1fff93c8 	.word	0x1fff93c8
   10540:	1fff93c4 	.word	0x1fff93c4

00010544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
   10544:	b500      	push	{lr}
   10546:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10548:	f7f0 fbc6 	bl	cd8 <Sys_GetCoreID>
   1054c:	4603      	mov	r3, r0
   1054e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]--;
   10550:	4a0d      	ldr	r2, [pc, #52]	; (10588 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   10552:	9b01      	ldr	r3, [sp, #4]
   10554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10558:	1e5a      	subs	r2, r3, #1
   1055a:	490b      	ldr	r1, [pc, #44]	; (10588 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   1055c:	9b01      	ldr	r3, [sp, #4]
   1055e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_103[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]))         /*if interrupts were enabled*/
   10562:	4a0a      	ldr	r2, [pc, #40]	; (1058c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x48>)
   10564:	9b01      	ldr	r3, [sp, #4]
   10566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1056a:	f003 0301 	and.w	r3, r3, #1
   1056e:	2b00      	cmp	r3, #0
   10570:	d106      	bne.n	10580 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
   10572:	4a05      	ldr	r2, [pc, #20]	; (10588 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   10574:	9b01      	ldr	r3, [sp, #4]
   10576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1057a:	2b00      	cmp	r3, #0
   1057c:	d100      	bne.n	10580 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1057e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10580:	bf00      	nop
   10582:	b003      	add	sp, #12
   10584:	f85d fb04 	ldr.w	pc, [sp], #4
   10588:	1fff93c8 	.word	0x1fff93c8
   1058c:	1fff93c4 	.word	0x1fff93c4

00010590 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
   10590:	b500      	push	{lr}
   10592:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10594:	f7f0 fba0 	bl	cd8 <Sys_GetCoreID>
   10598:	4603      	mov	r3, r0
   1059a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId])
   1059c:	4a10      	ldr	r2, [pc, #64]	; (105e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   1059e:	9b01      	ldr	r3, [sp, #4]
   105a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105a4:	2b00      	cmp	r3, #0
   105a6:	d10d      	bne.n	105c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   105a8:	f7f0 f9f6 	bl	998 <Adc_schm_read_msr>
   105ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   105ae:	9b00      	ldr	r3, [sp, #0]
   105b0:	f003 0301 	and.w	r3, r3, #1
   105b4:	2b00      	cmp	r3, #0
   105b6:	d100      	bne.n	105ba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   105b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   105ba:	490a      	ldr	r1, [pc, #40]	; (105e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x54>)
   105bc:	9b01      	ldr	r3, [sp, #4]
   105be:	9a00      	ldr	r2, [sp, #0]
   105c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]++;
   105c4:	4a06      	ldr	r2, [pc, #24]	; (105e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   105c6:	9b01      	ldr	r3, [sp, #4]
   105c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105cc:	1c5a      	adds	r2, r3, #1
   105ce:	4904      	ldr	r1, [pc, #16]	; (105e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   105d0:	9b01      	ldr	r3, [sp, #4]
   105d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   105d6:	bf00      	nop
   105d8:	b003      	add	sp, #12
   105da:	f85d fb04 	ldr.w	pc, [sp], #4
   105de:	bf00      	nop
   105e0:	1fff93d0 	.word	0x1fff93d0
   105e4:	1fff93cc 	.word	0x1fff93cc

000105e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
   105e8:	b500      	push	{lr}
   105ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   105ec:	f7f0 fb74 	bl	cd8 <Sys_GetCoreID>
   105f0:	4603      	mov	r3, r0
   105f2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]--;
   105f4:	4a0d      	ldr	r2, [pc, #52]	; (1062c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   105f6:	9b01      	ldr	r3, [sp, #4]
   105f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105fc:	1e5a      	subs	r2, r3, #1
   105fe:	490b      	ldr	r1, [pc, #44]	; (1062c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   10600:	9b01      	ldr	r3, [sp, #4]
   10602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   10606:	4a0a      	ldr	r2, [pc, #40]	; (10630 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x48>)
   10608:	9b01      	ldr	r3, [sp, #4]
   1060a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1060e:	f003 0301 	and.w	r3, r3, #1
   10612:	2b00      	cmp	r3, #0
   10614:	d106      	bne.n	10624 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
   10616:	4a05      	ldr	r2, [pc, #20]	; (1062c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   10618:	9b01      	ldr	r3, [sp, #4]
   1061a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1061e:	2b00      	cmp	r3, #0
   10620:	d100      	bne.n	10624 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10622:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10624:	bf00      	nop
   10626:	b003      	add	sp, #12
   10628:	f85d fb04 	ldr.w	pc, [sp], #4
   1062c:	1fff93d0 	.word	0x1fff93d0
   10630:	1fff93cc 	.word	0x1fff93cc

00010634 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
   10634:	b500      	push	{lr}
   10636:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10638:	f7f0 fb4e 	bl	cd8 <Sys_GetCoreID>
   1063c:	4603      	mov	r3, r0
   1063e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId])
   10640:	4a10      	ldr	r2, [pc, #64]	; (10684 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   10642:	9b01      	ldr	r3, [sp, #4]
   10644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10648:	2b00      	cmp	r3, #0
   1064a:	d10d      	bne.n	10668 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1064c:	f7f0 f9a4 	bl	998 <Adc_schm_read_msr>
   10650:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10652:	9b00      	ldr	r3, [sp, #0]
   10654:	f003 0301 	and.w	r3, r3, #1
   10658:	2b00      	cmp	r3, #0
   1065a:	d100      	bne.n	1065e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1065c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   1065e:	490a      	ldr	r1, [pc, #40]	; (10688 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x54>)
   10660:	9b01      	ldr	r3, [sp, #4]
   10662:	9a00      	ldr	r2, [sp, #0]
   10664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]++;
   10668:	4a06      	ldr	r2, [pc, #24]	; (10684 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   1066a:	9b01      	ldr	r3, [sp, #4]
   1066c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10670:	1c5a      	adds	r2, r3, #1
   10672:	4904      	ldr	r1, [pc, #16]	; (10684 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   10674:	9b01      	ldr	r3, [sp, #4]
   10676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1067a:	bf00      	nop
   1067c:	b003      	add	sp, #12
   1067e:	f85d fb04 	ldr.w	pc, [sp], #4
   10682:	bf00      	nop
   10684:	1fff93d8 	.word	0x1fff93d8
   10688:	1fff93d4 	.word	0x1fff93d4

0001068c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
   1068c:	b500      	push	{lr}
   1068e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10690:	f7f0 fb22 	bl	cd8 <Sys_GetCoreID>
   10694:	4603      	mov	r3, r0
   10696:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]--;
   10698:	4a0d      	ldr	r2, [pc, #52]	; (106d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   1069a:	9b01      	ldr	r3, [sp, #4]
   1069c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106a0:	1e5a      	subs	r2, r3, #1
   106a2:	490b      	ldr	r1, [pc, #44]	; (106d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   106a4:	9b01      	ldr	r3, [sp, #4]
   106a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   106aa:	4a0a      	ldr	r2, [pc, #40]	; (106d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x48>)
   106ac:	9b01      	ldr	r3, [sp, #4]
   106ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106b2:	f003 0301 	and.w	r3, r3, #1
   106b6:	2b00      	cmp	r3, #0
   106b8:	d106      	bne.n	106c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
   106ba:	4a05      	ldr	r2, [pc, #20]	; (106d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   106bc:	9b01      	ldr	r3, [sp, #4]
   106be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106c2:	2b00      	cmp	r3, #0
   106c4:	d100      	bne.n	106c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   106c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   106c8:	bf00      	nop
   106ca:	b003      	add	sp, #12
   106cc:	f85d fb04 	ldr.w	pc, [sp], #4
   106d0:	1fff93d8 	.word	0x1fff93d8
   106d4:	1fff93d4 	.word	0x1fff93d4

000106d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
   106d8:	b500      	push	{lr}
   106da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   106dc:	f7f0 fafc 	bl	cd8 <Sys_GetCoreID>
   106e0:	4603      	mov	r3, r0
   106e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId])
   106e4:	4a10      	ldr	r2, [pc, #64]	; (10728 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   106e6:	9b01      	ldr	r3, [sp, #4]
   106e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106ec:	2b00      	cmp	r3, #0
   106ee:	d10d      	bne.n	1070c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   106f0:	f7f0 f952 	bl	998 <Adc_schm_read_msr>
   106f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   106f6:	9b00      	ldr	r3, [sp, #0]
   106f8:	f003 0301 	and.w	r3, r3, #1
   106fc:	2b00      	cmp	r3, #0
   106fe:	d100      	bne.n	10702 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10700:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   10702:	490a      	ldr	r1, [pc, #40]	; (1072c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x54>)
   10704:	9b01      	ldr	r3, [sp, #4]
   10706:	9a00      	ldr	r2, [sp, #0]
   10708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]++;
   1070c:	4a06      	ldr	r2, [pc, #24]	; (10728 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   1070e:	9b01      	ldr	r3, [sp, #4]
   10710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10714:	1c5a      	adds	r2, r3, #1
   10716:	4904      	ldr	r1, [pc, #16]	; (10728 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   10718:	9b01      	ldr	r3, [sp, #4]
   1071a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1071e:	bf00      	nop
   10720:	b003      	add	sp, #12
   10722:	f85d fb04 	ldr.w	pc, [sp], #4
   10726:	bf00      	nop
   10728:	1fff93e0 	.word	0x1fff93e0
   1072c:	1fff93dc 	.word	0x1fff93dc

00010730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
   10730:	b500      	push	{lr}
   10732:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10734:	f7f0 fad0 	bl	cd8 <Sys_GetCoreID>
   10738:	4603      	mov	r3, r0
   1073a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]--;
   1073c:	4a0d      	ldr	r2, [pc, #52]	; (10774 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   1073e:	9b01      	ldr	r3, [sp, #4]
   10740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10744:	1e5a      	subs	r2, r3, #1
   10746:	490b      	ldr	r1, [pc, #44]	; (10774 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   10748:	9b01      	ldr	r3, [sp, #4]
   1074a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   1074e:	4a0a      	ldr	r2, [pc, #40]	; (10778 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x48>)
   10750:	9b01      	ldr	r3, [sp, #4]
   10752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10756:	f003 0301 	and.w	r3, r3, #1
   1075a:	2b00      	cmp	r3, #0
   1075c:	d106      	bne.n	1076c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
   1075e:	4a05      	ldr	r2, [pc, #20]	; (10774 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   10760:	9b01      	ldr	r3, [sp, #4]
   10762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10766:	2b00      	cmp	r3, #0
   10768:	d100      	bne.n	1076c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1076a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1076c:	bf00      	nop
   1076e:	b003      	add	sp, #12
   10770:	f85d fb04 	ldr.w	pc, [sp], #4
   10774:	1fff93e0 	.word	0x1fff93e0
   10778:	1fff93dc 	.word	0x1fff93dc

0001077c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
   1077c:	b500      	push	{lr}
   1077e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10780:	f7f0 faaa 	bl	cd8 <Sys_GetCoreID>
   10784:	4603      	mov	r3, r0
   10786:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId])
   10788:	4a10      	ldr	r2, [pc, #64]	; (107cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   1078a:	9b01      	ldr	r3, [sp, #4]
   1078c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10790:	2b00      	cmp	r3, #0
   10792:	d10d      	bne.n	107b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10794:	f7f0 f900 	bl	998 <Adc_schm_read_msr>
   10798:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1079a:	9b00      	ldr	r3, [sp, #0]
   1079c:	f003 0301 	and.w	r3, r3, #1
   107a0:	2b00      	cmp	r3, #0
   107a2:	d100      	bne.n	107a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   107a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   107a6:	490a      	ldr	r1, [pc, #40]	; (107d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x54>)
   107a8:	9b01      	ldr	r3, [sp, #4]
   107aa:	9a00      	ldr	r2, [sp, #0]
   107ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]++;
   107b0:	4a06      	ldr	r2, [pc, #24]	; (107cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   107b2:	9b01      	ldr	r3, [sp, #4]
   107b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107b8:	1c5a      	adds	r2, r3, #1
   107ba:	4904      	ldr	r1, [pc, #16]	; (107cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   107bc:	9b01      	ldr	r3, [sp, #4]
   107be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   107c2:	bf00      	nop
   107c4:	b003      	add	sp, #12
   107c6:	f85d fb04 	ldr.w	pc, [sp], #4
   107ca:	bf00      	nop
   107cc:	1fff93e8 	.word	0x1fff93e8
   107d0:	1fff93e4 	.word	0x1fff93e4

000107d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
   107d4:	b500      	push	{lr}
   107d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   107d8:	f7f0 fa7e 	bl	cd8 <Sys_GetCoreID>
   107dc:	4603      	mov	r3, r0
   107de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]--;
   107e0:	4a0d      	ldr	r2, [pc, #52]	; (10818 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   107e2:	9b01      	ldr	r3, [sp, #4]
   107e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107e8:	1e5a      	subs	r2, r3, #1
   107ea:	490b      	ldr	r1, [pc, #44]	; (10818 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   107ec:	9b01      	ldr	r3, [sp, #4]
   107ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   107f2:	4a0a      	ldr	r2, [pc, #40]	; (1081c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x48>)
   107f4:	9b01      	ldr	r3, [sp, #4]
   107f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107fa:	f003 0301 	and.w	r3, r3, #1
   107fe:	2b00      	cmp	r3, #0
   10800:	d106      	bne.n	10810 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
   10802:	4a05      	ldr	r2, [pc, #20]	; (10818 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   10804:	9b01      	ldr	r3, [sp, #4]
   10806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1080a:	2b00      	cmp	r3, #0
   1080c:	d100      	bne.n	10810 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1080e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10810:	bf00      	nop
   10812:	b003      	add	sp, #12
   10814:	f85d fb04 	ldr.w	pc, [sp], #4
   10818:	1fff93e8 	.word	0x1fff93e8
   1081c:	1fff93e4 	.word	0x1fff93e4

00010820 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
   10820:	b500      	push	{lr}
   10822:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10824:	f7f0 fa58 	bl	cd8 <Sys_GetCoreID>
   10828:	4603      	mov	r3, r0
   1082a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId])
   1082c:	4a10      	ldr	r2, [pc, #64]	; (10870 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   1082e:	9b01      	ldr	r3, [sp, #4]
   10830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10834:	2b00      	cmp	r3, #0
   10836:	d10d      	bne.n	10854 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10838:	f7f0 f8ae 	bl	998 <Adc_schm_read_msr>
   1083c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1083e:	9b00      	ldr	r3, [sp, #0]
   10840:	f003 0301 	and.w	r3, r3, #1
   10844:	2b00      	cmp	r3, #0
   10846:	d100      	bne.n	1084a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10848:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   1084a:	490a      	ldr	r1, [pc, #40]	; (10874 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x54>)
   1084c:	9b01      	ldr	r3, [sp, #4]
   1084e:	9a00      	ldr	r2, [sp, #0]
   10850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]++;
   10854:	4a06      	ldr	r2, [pc, #24]	; (10870 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   10856:	9b01      	ldr	r3, [sp, #4]
   10858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1085c:	1c5a      	adds	r2, r3, #1
   1085e:	4904      	ldr	r1, [pc, #16]	; (10870 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   10860:	9b01      	ldr	r3, [sp, #4]
   10862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10866:	bf00      	nop
   10868:	b003      	add	sp, #12
   1086a:	f85d fb04 	ldr.w	pc, [sp], #4
   1086e:	bf00      	nop
   10870:	1fff93f0 	.word	0x1fff93f0
   10874:	1fff93ec 	.word	0x1fff93ec

00010878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
   10878:	b500      	push	{lr}
   1087a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1087c:	f7f0 fa2c 	bl	cd8 <Sys_GetCoreID>
   10880:	4603      	mov	r3, r0
   10882:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]--;
   10884:	4a0d      	ldr	r2, [pc, #52]	; (108bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   10886:	9b01      	ldr	r3, [sp, #4]
   10888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1088c:	1e5a      	subs	r2, r3, #1
   1088e:	490b      	ldr	r1, [pc, #44]	; (108bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   10890:	9b01      	ldr	r3, [sp, #4]
   10892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   10896:	4a0a      	ldr	r2, [pc, #40]	; (108c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x48>)
   10898:	9b01      	ldr	r3, [sp, #4]
   1089a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1089e:	f003 0301 	and.w	r3, r3, #1
   108a2:	2b00      	cmp	r3, #0
   108a4:	d106      	bne.n	108b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
   108a6:	4a05      	ldr	r2, [pc, #20]	; (108bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   108a8:	9b01      	ldr	r3, [sp, #4]
   108aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108ae:	2b00      	cmp	r3, #0
   108b0:	d100      	bne.n	108b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   108b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   108b4:	bf00      	nop
   108b6:	b003      	add	sp, #12
   108b8:	f85d fb04 	ldr.w	pc, [sp], #4
   108bc:	1fff93f0 	.word	0x1fff93f0
   108c0:	1fff93ec 	.word	0x1fff93ec

000108c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
   108c4:	b500      	push	{lr}
   108c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   108c8:	f7f0 fa06 	bl	cd8 <Sys_GetCoreID>
   108cc:	4603      	mov	r3, r0
   108ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId])
   108d0:	4a10      	ldr	r2, [pc, #64]	; (10914 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   108d2:	9b01      	ldr	r3, [sp, #4]
   108d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108d8:	2b00      	cmp	r3, #0
   108da:	d10d      	bne.n	108f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   108dc:	f7f0 f85c 	bl	998 <Adc_schm_read_msr>
   108e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   108e2:	9b00      	ldr	r3, [sp, #0]
   108e4:	f003 0301 	and.w	r3, r3, #1
   108e8:	2b00      	cmp	r3, #0
   108ea:	d100      	bne.n	108ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   108ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   108ee:	490a      	ldr	r1, [pc, #40]	; (10918 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x54>)
   108f0:	9b01      	ldr	r3, [sp, #4]
   108f2:	9a00      	ldr	r2, [sp, #0]
   108f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]++;
   108f8:	4a06      	ldr	r2, [pc, #24]	; (10914 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   108fa:	9b01      	ldr	r3, [sp, #4]
   108fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10900:	1c5a      	adds	r2, r3, #1
   10902:	4904      	ldr	r1, [pc, #16]	; (10914 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   10904:	9b01      	ldr	r3, [sp, #4]
   10906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1090a:	bf00      	nop
   1090c:	b003      	add	sp, #12
   1090e:	f85d fb04 	ldr.w	pc, [sp], #4
   10912:	bf00      	nop
   10914:	1fff93f8 	.word	0x1fff93f8
   10918:	1fff93f4 	.word	0x1fff93f4

0001091c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
   1091c:	b500      	push	{lr}
   1091e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10920:	f7f0 f9da 	bl	cd8 <Sys_GetCoreID>
   10924:	4603      	mov	r3, r0
   10926:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]--;
   10928:	4a0d      	ldr	r2, [pc, #52]	; (10960 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   1092a:	9b01      	ldr	r3, [sp, #4]
   1092c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10930:	1e5a      	subs	r2, r3, #1
   10932:	490b      	ldr	r1, [pc, #44]	; (10960 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   10934:	9b01      	ldr	r3, [sp, #4]
   10936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   1093a:	4a0a      	ldr	r2, [pc, #40]	; (10964 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x48>)
   1093c:	9b01      	ldr	r3, [sp, #4]
   1093e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10942:	f003 0301 	and.w	r3, r3, #1
   10946:	2b00      	cmp	r3, #0
   10948:	d106      	bne.n	10958 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
   1094a:	4a05      	ldr	r2, [pc, #20]	; (10960 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   1094c:	9b01      	ldr	r3, [sp, #4]
   1094e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10952:	2b00      	cmp	r3, #0
   10954:	d100      	bne.n	10958 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10956:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10958:	bf00      	nop
   1095a:	b003      	add	sp, #12
   1095c:	f85d fb04 	ldr.w	pc, [sp], #4
   10960:	1fff93f8 	.word	0x1fff93f8
   10964:	1fff93f4 	.word	0x1fff93f4

00010968 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
   10968:	b500      	push	{lr}
   1096a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1096c:	f7f0 f9b4 	bl	cd8 <Sys_GetCoreID>
   10970:	4603      	mov	r3, r0
   10972:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId])
   10974:	4a10      	ldr	r2, [pc, #64]	; (109b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   10976:	9b01      	ldr	r3, [sp, #4]
   10978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1097c:	2b00      	cmp	r3, #0
   1097e:	d10d      	bne.n	1099c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10980:	f7f0 f80a 	bl	998 <Adc_schm_read_msr>
   10984:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10986:	9b00      	ldr	r3, [sp, #0]
   10988:	f003 0301 	and.w	r3, r3, #1
   1098c:	2b00      	cmp	r3, #0
   1098e:	d100      	bne.n	10992 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10990:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   10992:	490a      	ldr	r1, [pc, #40]	; (109bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x54>)
   10994:	9b01      	ldr	r3, [sp, #4]
   10996:	9a00      	ldr	r2, [sp, #0]
   10998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]++;
   1099c:	4a06      	ldr	r2, [pc, #24]	; (109b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   1099e:	9b01      	ldr	r3, [sp, #4]
   109a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109a4:	1c5a      	adds	r2, r3, #1
   109a6:	4904      	ldr	r1, [pc, #16]	; (109b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   109a8:	9b01      	ldr	r3, [sp, #4]
   109aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   109ae:	bf00      	nop
   109b0:	b003      	add	sp, #12
   109b2:	f85d fb04 	ldr.w	pc, [sp], #4
   109b6:	bf00      	nop
   109b8:	1fff9400 	.word	0x1fff9400
   109bc:	1fff93fc 	.word	0x1fff93fc

000109c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
   109c0:	b500      	push	{lr}
   109c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   109c4:	f7f0 f988 	bl	cd8 <Sys_GetCoreID>
   109c8:	4603      	mov	r3, r0
   109ca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]--;
   109cc:	4a0d      	ldr	r2, [pc, #52]	; (10a04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   109ce:	9b01      	ldr	r3, [sp, #4]
   109d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109d4:	1e5a      	subs	r2, r3, #1
   109d6:	490b      	ldr	r1, [pc, #44]	; (10a04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   109d8:	9b01      	ldr	r3, [sp, #4]
   109da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   109de:	4a0a      	ldr	r2, [pc, #40]	; (10a08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x48>)
   109e0:	9b01      	ldr	r3, [sp, #4]
   109e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109e6:	f003 0301 	and.w	r3, r3, #1
   109ea:	2b00      	cmp	r3, #0
   109ec:	d106      	bne.n	109fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
   109ee:	4a05      	ldr	r2, [pc, #20]	; (10a04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   109f0:	9b01      	ldr	r3, [sp, #4]
   109f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109f6:	2b00      	cmp	r3, #0
   109f8:	d100      	bne.n	109fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   109fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   109fc:	bf00      	nop
   109fe:	b003      	add	sp, #12
   10a00:	f85d fb04 	ldr.w	pc, [sp], #4
   10a04:	1fff9400 	.word	0x1fff9400
   10a08:	1fff93fc 	.word	0x1fff93fc

00010a0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
   10a0c:	b500      	push	{lr}
   10a0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10a10:	f7f0 f962 	bl	cd8 <Sys_GetCoreID>
   10a14:	4603      	mov	r3, r0
   10a16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId])
   10a18:	4a10      	ldr	r2, [pc, #64]	; (10a5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   10a1a:	9b01      	ldr	r3, [sp, #4]
   10a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a20:	2b00      	cmp	r3, #0
   10a22:	d10d      	bne.n	10a40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10a24:	f7ef ffb8 	bl	998 <Adc_schm_read_msr>
   10a28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10a2a:	9b00      	ldr	r3, [sp, #0]
   10a2c:	f003 0301 	and.w	r3, r3, #1
   10a30:	2b00      	cmp	r3, #0
   10a32:	d100      	bne.n	10a36 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10a34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   10a36:	490a      	ldr	r1, [pc, #40]	; (10a60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x54>)
   10a38:	9b01      	ldr	r3, [sp, #4]
   10a3a:	9a00      	ldr	r2, [sp, #0]
   10a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]++;
   10a40:	4a06      	ldr	r2, [pc, #24]	; (10a5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   10a42:	9b01      	ldr	r3, [sp, #4]
   10a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a48:	1c5a      	adds	r2, r3, #1
   10a4a:	4904      	ldr	r1, [pc, #16]	; (10a5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   10a4c:	9b01      	ldr	r3, [sp, #4]
   10a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10a52:	bf00      	nop
   10a54:	b003      	add	sp, #12
   10a56:	f85d fb04 	ldr.w	pc, [sp], #4
   10a5a:	bf00      	nop
   10a5c:	1fff9408 	.word	0x1fff9408
   10a60:	1fff9404 	.word	0x1fff9404

00010a64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
   10a64:	b500      	push	{lr}
   10a66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10a68:	f7f0 f936 	bl	cd8 <Sys_GetCoreID>
   10a6c:	4603      	mov	r3, r0
   10a6e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]--;
   10a70:	4a0d      	ldr	r2, [pc, #52]	; (10aa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   10a72:	9b01      	ldr	r3, [sp, #4]
   10a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a78:	1e5a      	subs	r2, r3, #1
   10a7a:	490b      	ldr	r1, [pc, #44]	; (10aa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   10a7c:	9b01      	ldr	r3, [sp, #4]
   10a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   10a82:	4a0a      	ldr	r2, [pc, #40]	; (10aac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x48>)
   10a84:	9b01      	ldr	r3, [sp, #4]
   10a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a8a:	f003 0301 	and.w	r3, r3, #1
   10a8e:	2b00      	cmp	r3, #0
   10a90:	d106      	bne.n	10aa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
   10a92:	4a05      	ldr	r2, [pc, #20]	; (10aa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   10a94:	9b01      	ldr	r3, [sp, #4]
   10a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a9a:	2b00      	cmp	r3, #0
   10a9c:	d100      	bne.n	10aa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10a9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10aa0:	bf00      	nop
   10aa2:	b003      	add	sp, #12
   10aa4:	f85d fb04 	ldr.w	pc, [sp], #4
   10aa8:	1fff9408 	.word	0x1fff9408
   10aac:	1fff9404 	.word	0x1fff9404

00010ab0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
   10ab0:	b500      	push	{lr}
   10ab2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ab4:	f7f0 f910 	bl	cd8 <Sys_GetCoreID>
   10ab8:	4603      	mov	r3, r0
   10aba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId])
   10abc:	4a10      	ldr	r2, [pc, #64]	; (10b00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   10abe:	9b01      	ldr	r3, [sp, #4]
   10ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ac4:	2b00      	cmp	r3, #0
   10ac6:	d10d      	bne.n	10ae4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10ac8:	f7ef ff66 	bl	998 <Adc_schm_read_msr>
   10acc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10ace:	9b00      	ldr	r3, [sp, #0]
   10ad0:	f003 0301 	and.w	r3, r3, #1
   10ad4:	2b00      	cmp	r3, #0
   10ad6:	d100      	bne.n	10ada <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10ad8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   10ada:	490a      	ldr	r1, [pc, #40]	; (10b04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x54>)
   10adc:	9b01      	ldr	r3, [sp, #4]
   10ade:	9a00      	ldr	r2, [sp, #0]
   10ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]++;
   10ae4:	4a06      	ldr	r2, [pc, #24]	; (10b00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   10ae6:	9b01      	ldr	r3, [sp, #4]
   10ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10aec:	1c5a      	adds	r2, r3, #1
   10aee:	4904      	ldr	r1, [pc, #16]	; (10b00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   10af0:	9b01      	ldr	r3, [sp, #4]
   10af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10af6:	bf00      	nop
   10af8:	b003      	add	sp, #12
   10afa:	f85d fb04 	ldr.w	pc, [sp], #4
   10afe:	bf00      	nop
   10b00:	1fff9410 	.word	0x1fff9410
   10b04:	1fff940c 	.word	0x1fff940c

00010b08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
   10b08:	b500      	push	{lr}
   10b0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10b0c:	f7f0 f8e4 	bl	cd8 <Sys_GetCoreID>
   10b10:	4603      	mov	r3, r0
   10b12:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]--;
   10b14:	4a0d      	ldr	r2, [pc, #52]	; (10b4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   10b16:	9b01      	ldr	r3, [sp, #4]
   10b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b1c:	1e5a      	subs	r2, r3, #1
   10b1e:	490b      	ldr	r1, [pc, #44]	; (10b4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   10b20:	9b01      	ldr	r3, [sp, #4]
   10b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   10b26:	4a0a      	ldr	r2, [pc, #40]	; (10b50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x48>)
   10b28:	9b01      	ldr	r3, [sp, #4]
   10b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b2e:	f003 0301 	and.w	r3, r3, #1
   10b32:	2b00      	cmp	r3, #0
   10b34:	d106      	bne.n	10b44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
   10b36:	4a05      	ldr	r2, [pc, #20]	; (10b4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   10b38:	9b01      	ldr	r3, [sp, #4]
   10b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b3e:	2b00      	cmp	r3, #0
   10b40:	d100      	bne.n	10b44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10b42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10b44:	bf00      	nop
   10b46:	b003      	add	sp, #12
   10b48:	f85d fb04 	ldr.w	pc, [sp], #4
   10b4c:	1fff9410 	.word	0x1fff9410
   10b50:	1fff940c 	.word	0x1fff940c

00010b54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
   10b54:	b500      	push	{lr}
   10b56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10b58:	f7f0 f8be 	bl	cd8 <Sys_GetCoreID>
   10b5c:	4603      	mov	r3, r0
   10b5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId])
   10b60:	4a10      	ldr	r2, [pc, #64]	; (10ba4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   10b62:	9b01      	ldr	r3, [sp, #4]
   10b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b68:	2b00      	cmp	r3, #0
   10b6a:	d10d      	bne.n	10b88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10b6c:	f7ef ff14 	bl	998 <Adc_schm_read_msr>
   10b70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10b72:	9b00      	ldr	r3, [sp, #0]
   10b74:	f003 0301 	and.w	r3, r3, #1
   10b78:	2b00      	cmp	r3, #0
   10b7a:	d100      	bne.n	10b7e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10b7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   10b7e:	490a      	ldr	r1, [pc, #40]	; (10ba8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x54>)
   10b80:	9b01      	ldr	r3, [sp, #4]
   10b82:	9a00      	ldr	r2, [sp, #0]
   10b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]++;
   10b88:	4a06      	ldr	r2, [pc, #24]	; (10ba4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   10b8a:	9b01      	ldr	r3, [sp, #4]
   10b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b90:	1c5a      	adds	r2, r3, #1
   10b92:	4904      	ldr	r1, [pc, #16]	; (10ba4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   10b94:	9b01      	ldr	r3, [sp, #4]
   10b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10b9a:	bf00      	nop
   10b9c:	b003      	add	sp, #12
   10b9e:	f85d fb04 	ldr.w	pc, [sp], #4
   10ba2:	bf00      	nop
   10ba4:	1fff9418 	.word	0x1fff9418
   10ba8:	1fff9414 	.word	0x1fff9414

00010bac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
   10bac:	b500      	push	{lr}
   10bae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10bb0:	f7f0 f892 	bl	cd8 <Sys_GetCoreID>
   10bb4:	4603      	mov	r3, r0
   10bb6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]--;
   10bb8:	4a0d      	ldr	r2, [pc, #52]	; (10bf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   10bba:	9b01      	ldr	r3, [sp, #4]
   10bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10bc0:	1e5a      	subs	r2, r3, #1
   10bc2:	490b      	ldr	r1, [pc, #44]	; (10bf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   10bc4:	9b01      	ldr	r3, [sp, #4]
   10bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   10bca:	4a0a      	ldr	r2, [pc, #40]	; (10bf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x48>)
   10bcc:	9b01      	ldr	r3, [sp, #4]
   10bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10bd2:	f003 0301 	and.w	r3, r3, #1
   10bd6:	2b00      	cmp	r3, #0
   10bd8:	d106      	bne.n	10be8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
   10bda:	4a05      	ldr	r2, [pc, #20]	; (10bf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   10bdc:	9b01      	ldr	r3, [sp, #4]
   10bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10be2:	2b00      	cmp	r3, #0
   10be4:	d100      	bne.n	10be8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10be6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10be8:	bf00      	nop
   10bea:	b003      	add	sp, #12
   10bec:	f85d fb04 	ldr.w	pc, [sp], #4
   10bf0:	1fff9418 	.word	0x1fff9418
   10bf4:	1fff9414 	.word	0x1fff9414

00010bf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
   10bf8:	b500      	push	{lr}
   10bfa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10bfc:	f7f0 f86c 	bl	cd8 <Sys_GetCoreID>
   10c00:	4603      	mov	r3, r0
   10c02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId])
   10c04:	4a10      	ldr	r2, [pc, #64]	; (10c48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   10c06:	9b01      	ldr	r3, [sp, #4]
   10c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c0c:	2b00      	cmp	r3, #0
   10c0e:	d10d      	bne.n	10c2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10c10:	f7ef fec2 	bl	998 <Adc_schm_read_msr>
   10c14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10c16:	9b00      	ldr	r3, [sp, #0]
   10c18:	f003 0301 	and.w	r3, r3, #1
   10c1c:	2b00      	cmp	r3, #0
   10c1e:	d100      	bne.n	10c22 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10c20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   10c22:	490a      	ldr	r1, [pc, #40]	; (10c4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x54>)
   10c24:	9b01      	ldr	r3, [sp, #4]
   10c26:	9a00      	ldr	r2, [sp, #0]
   10c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]++;
   10c2c:	4a06      	ldr	r2, [pc, #24]	; (10c48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   10c2e:	9b01      	ldr	r3, [sp, #4]
   10c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c34:	1c5a      	adds	r2, r3, #1
   10c36:	4904      	ldr	r1, [pc, #16]	; (10c48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   10c38:	9b01      	ldr	r3, [sp, #4]
   10c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10c3e:	bf00      	nop
   10c40:	b003      	add	sp, #12
   10c42:	f85d fb04 	ldr.w	pc, [sp], #4
   10c46:	bf00      	nop
   10c48:	1fff9420 	.word	0x1fff9420
   10c4c:	1fff941c 	.word	0x1fff941c

00010c50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
   10c50:	b500      	push	{lr}
   10c52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10c54:	f7f0 f840 	bl	cd8 <Sys_GetCoreID>
   10c58:	4603      	mov	r3, r0
   10c5a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]--;
   10c5c:	4a0d      	ldr	r2, [pc, #52]	; (10c94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   10c5e:	9b01      	ldr	r3, [sp, #4]
   10c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c64:	1e5a      	subs	r2, r3, #1
   10c66:	490b      	ldr	r1, [pc, #44]	; (10c94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   10c68:	9b01      	ldr	r3, [sp, #4]
   10c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   10c6e:	4a0a      	ldr	r2, [pc, #40]	; (10c98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x48>)
   10c70:	9b01      	ldr	r3, [sp, #4]
   10c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c76:	f003 0301 	and.w	r3, r3, #1
   10c7a:	2b00      	cmp	r3, #0
   10c7c:	d106      	bne.n	10c8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
   10c7e:	4a05      	ldr	r2, [pc, #20]	; (10c94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   10c80:	9b01      	ldr	r3, [sp, #4]
   10c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c86:	2b00      	cmp	r3, #0
   10c88:	d100      	bne.n	10c8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10c8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10c8c:	bf00      	nop
   10c8e:	b003      	add	sp, #12
   10c90:	f85d fb04 	ldr.w	pc, [sp], #4
   10c94:	1fff9420 	.word	0x1fff9420
   10c98:	1fff941c 	.word	0x1fff941c

00010c9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
   10c9c:	b500      	push	{lr}
   10c9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ca0:	f7f0 f81a 	bl	cd8 <Sys_GetCoreID>
   10ca4:	4603      	mov	r3, r0
   10ca6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId])
   10ca8:	4a10      	ldr	r2, [pc, #64]	; (10cec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   10caa:	9b01      	ldr	r3, [sp, #4]
   10cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10cb0:	2b00      	cmp	r3, #0
   10cb2:	d10d      	bne.n	10cd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10cb4:	f7ef fe70 	bl	998 <Adc_schm_read_msr>
   10cb8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10cba:	9b00      	ldr	r3, [sp, #0]
   10cbc:	f003 0301 	and.w	r3, r3, #1
   10cc0:	2b00      	cmp	r3, #0
   10cc2:	d100      	bne.n	10cc6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10cc4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   10cc6:	490a      	ldr	r1, [pc, #40]	; (10cf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x54>)
   10cc8:	9b01      	ldr	r3, [sp, #4]
   10cca:	9a00      	ldr	r2, [sp, #0]
   10ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]++;
   10cd0:	4a06      	ldr	r2, [pc, #24]	; (10cec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   10cd2:	9b01      	ldr	r3, [sp, #4]
   10cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10cd8:	1c5a      	adds	r2, r3, #1
   10cda:	4904      	ldr	r1, [pc, #16]	; (10cec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   10cdc:	9b01      	ldr	r3, [sp, #4]
   10cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10ce2:	bf00      	nop
   10ce4:	b003      	add	sp, #12
   10ce6:	f85d fb04 	ldr.w	pc, [sp], #4
   10cea:	bf00      	nop
   10cec:	1fff9428 	.word	0x1fff9428
   10cf0:	1fff9424 	.word	0x1fff9424

00010cf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
   10cf4:	b500      	push	{lr}
   10cf6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10cf8:	f7ef ffee 	bl	cd8 <Sys_GetCoreID>
   10cfc:	4603      	mov	r3, r0
   10cfe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]--;
   10d00:	4a0d      	ldr	r2, [pc, #52]	; (10d38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   10d02:	9b01      	ldr	r3, [sp, #4]
   10d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d08:	1e5a      	subs	r2, r3, #1
   10d0a:	490b      	ldr	r1, [pc, #44]	; (10d38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   10d0c:	9b01      	ldr	r3, [sp, #4]
   10d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   10d12:	4a0a      	ldr	r2, [pc, #40]	; (10d3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x48>)
   10d14:	9b01      	ldr	r3, [sp, #4]
   10d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d1a:	f003 0301 	and.w	r3, r3, #1
   10d1e:	2b00      	cmp	r3, #0
   10d20:	d106      	bne.n	10d30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
   10d22:	4a05      	ldr	r2, [pc, #20]	; (10d38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   10d24:	9b01      	ldr	r3, [sp, #4]
   10d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d2a:	2b00      	cmp	r3, #0
   10d2c:	d100      	bne.n	10d30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10d2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10d30:	bf00      	nop
   10d32:	b003      	add	sp, #12
   10d34:	f85d fb04 	ldr.w	pc, [sp], #4
   10d38:	1fff9428 	.word	0x1fff9428
   10d3c:	1fff9424 	.word	0x1fff9424

00010d40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
   10d40:	b500      	push	{lr}
   10d42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10d44:	f7ef ffc8 	bl	cd8 <Sys_GetCoreID>
   10d48:	4603      	mov	r3, r0
   10d4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId])
   10d4c:	4a10      	ldr	r2, [pc, #64]	; (10d90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   10d4e:	9b01      	ldr	r3, [sp, #4]
   10d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d54:	2b00      	cmp	r3, #0
   10d56:	d10d      	bne.n	10d74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10d58:	f7ef fe1e 	bl	998 <Adc_schm_read_msr>
   10d5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10d5e:	9b00      	ldr	r3, [sp, #0]
   10d60:	f003 0301 	and.w	r3, r3, #1
   10d64:	2b00      	cmp	r3, #0
   10d66:	d100      	bne.n	10d6a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10d68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   10d6a:	490a      	ldr	r1, [pc, #40]	; (10d94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x54>)
   10d6c:	9b01      	ldr	r3, [sp, #4]
   10d6e:	9a00      	ldr	r2, [sp, #0]
   10d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]++;
   10d74:	4a06      	ldr	r2, [pc, #24]	; (10d90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   10d76:	9b01      	ldr	r3, [sp, #4]
   10d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d7c:	1c5a      	adds	r2, r3, #1
   10d7e:	4904      	ldr	r1, [pc, #16]	; (10d90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   10d80:	9b01      	ldr	r3, [sp, #4]
   10d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10d86:	bf00      	nop
   10d88:	b003      	add	sp, #12
   10d8a:	f85d fb04 	ldr.w	pc, [sp], #4
   10d8e:	bf00      	nop
   10d90:	1fff9430 	.word	0x1fff9430
   10d94:	1fff942c 	.word	0x1fff942c

00010d98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
   10d98:	b500      	push	{lr}
   10d9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10d9c:	f7ef ff9c 	bl	cd8 <Sys_GetCoreID>
   10da0:	4603      	mov	r3, r0
   10da2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]--;
   10da4:	4a0d      	ldr	r2, [pc, #52]	; (10ddc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   10da6:	9b01      	ldr	r3, [sp, #4]
   10da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dac:	1e5a      	subs	r2, r3, #1
   10dae:	490b      	ldr	r1, [pc, #44]	; (10ddc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   10db0:	9b01      	ldr	r3, [sp, #4]
   10db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   10db6:	4a0a      	ldr	r2, [pc, #40]	; (10de0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x48>)
   10db8:	9b01      	ldr	r3, [sp, #4]
   10dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dbe:	f003 0301 	and.w	r3, r3, #1
   10dc2:	2b00      	cmp	r3, #0
   10dc4:	d106      	bne.n	10dd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
   10dc6:	4a05      	ldr	r2, [pc, #20]	; (10ddc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   10dc8:	9b01      	ldr	r3, [sp, #4]
   10dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dce:	2b00      	cmp	r3, #0
   10dd0:	d100      	bne.n	10dd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10dd2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10dd4:	bf00      	nop
   10dd6:	b003      	add	sp, #12
   10dd8:	f85d fb04 	ldr.w	pc, [sp], #4
   10ddc:	1fff9430 	.word	0x1fff9430
   10de0:	1fff942c 	.word	0x1fff942c

00010de4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
   10de4:	b500      	push	{lr}
   10de6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10de8:	f7ef ff76 	bl	cd8 <Sys_GetCoreID>
   10dec:	4603      	mov	r3, r0
   10dee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId])
   10df0:	4a10      	ldr	r2, [pc, #64]	; (10e34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   10df2:	9b01      	ldr	r3, [sp, #4]
   10df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10df8:	2b00      	cmp	r3, #0
   10dfa:	d10d      	bne.n	10e18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10dfc:	f7ef fdcc 	bl	998 <Adc_schm_read_msr>
   10e00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10e02:	9b00      	ldr	r3, [sp, #0]
   10e04:	f003 0301 	and.w	r3, r3, #1
   10e08:	2b00      	cmp	r3, #0
   10e0a:	d100      	bne.n	10e0e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10e0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   10e0e:	490a      	ldr	r1, [pc, #40]	; (10e38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x54>)
   10e10:	9b01      	ldr	r3, [sp, #4]
   10e12:	9a00      	ldr	r2, [sp, #0]
   10e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]++;
   10e18:	4a06      	ldr	r2, [pc, #24]	; (10e34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   10e1a:	9b01      	ldr	r3, [sp, #4]
   10e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e20:	1c5a      	adds	r2, r3, #1
   10e22:	4904      	ldr	r1, [pc, #16]	; (10e34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   10e24:	9b01      	ldr	r3, [sp, #4]
   10e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10e2a:	bf00      	nop
   10e2c:	b003      	add	sp, #12
   10e2e:	f85d fb04 	ldr.w	pc, [sp], #4
   10e32:	bf00      	nop
   10e34:	1fff9438 	.word	0x1fff9438
   10e38:	1fff9434 	.word	0x1fff9434

00010e3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
   10e3c:	b500      	push	{lr}
   10e3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10e40:	f7ef ff4a 	bl	cd8 <Sys_GetCoreID>
   10e44:	4603      	mov	r3, r0
   10e46:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]--;
   10e48:	4a0d      	ldr	r2, [pc, #52]	; (10e80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   10e4a:	9b01      	ldr	r3, [sp, #4]
   10e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e50:	1e5a      	subs	r2, r3, #1
   10e52:	490b      	ldr	r1, [pc, #44]	; (10e80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   10e54:	9b01      	ldr	r3, [sp, #4]
   10e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   10e5a:	4a0a      	ldr	r2, [pc, #40]	; (10e84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x48>)
   10e5c:	9b01      	ldr	r3, [sp, #4]
   10e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e62:	f003 0301 	and.w	r3, r3, #1
   10e66:	2b00      	cmp	r3, #0
   10e68:	d106      	bne.n	10e78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
   10e6a:	4a05      	ldr	r2, [pc, #20]	; (10e80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   10e6c:	9b01      	ldr	r3, [sp, #4]
   10e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e72:	2b00      	cmp	r3, #0
   10e74:	d100      	bne.n	10e78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10e76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10e78:	bf00      	nop
   10e7a:	b003      	add	sp, #12
   10e7c:	f85d fb04 	ldr.w	pc, [sp], #4
   10e80:	1fff9438 	.word	0x1fff9438
   10e84:	1fff9434 	.word	0x1fff9434

00010e88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
   10e88:	b500      	push	{lr}
   10e8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10e8c:	f7ef ff24 	bl	cd8 <Sys_GetCoreID>
   10e90:	4603      	mov	r3, r0
   10e92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId])
   10e94:	4a10      	ldr	r2, [pc, #64]	; (10ed8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   10e96:	9b01      	ldr	r3, [sp, #4]
   10e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e9c:	2b00      	cmp	r3, #0
   10e9e:	d10d      	bne.n	10ebc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10ea0:	f7ef fd7a 	bl	998 <Adc_schm_read_msr>
   10ea4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10ea6:	9b00      	ldr	r3, [sp, #0]
   10ea8:	f003 0301 	and.w	r3, r3, #1
   10eac:	2b00      	cmp	r3, #0
   10eae:	d100      	bne.n	10eb2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10eb0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   10eb2:	490a      	ldr	r1, [pc, #40]	; (10edc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x54>)
   10eb4:	9b01      	ldr	r3, [sp, #4]
   10eb6:	9a00      	ldr	r2, [sp, #0]
   10eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]++;
   10ebc:	4a06      	ldr	r2, [pc, #24]	; (10ed8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   10ebe:	9b01      	ldr	r3, [sp, #4]
   10ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ec4:	1c5a      	adds	r2, r3, #1
   10ec6:	4904      	ldr	r1, [pc, #16]	; (10ed8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   10ec8:	9b01      	ldr	r3, [sp, #4]
   10eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10ece:	bf00      	nop
   10ed0:	b003      	add	sp, #12
   10ed2:	f85d fb04 	ldr.w	pc, [sp], #4
   10ed6:	bf00      	nop
   10ed8:	1fff9440 	.word	0x1fff9440
   10edc:	1fff943c 	.word	0x1fff943c

00010ee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
   10ee0:	b500      	push	{lr}
   10ee2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ee4:	f7ef fef8 	bl	cd8 <Sys_GetCoreID>
   10ee8:	4603      	mov	r3, r0
   10eea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]--;
   10eec:	4a0d      	ldr	r2, [pc, #52]	; (10f24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   10eee:	9b01      	ldr	r3, [sp, #4]
   10ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ef4:	1e5a      	subs	r2, r3, #1
   10ef6:	490b      	ldr	r1, [pc, #44]	; (10f24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   10ef8:	9b01      	ldr	r3, [sp, #4]
   10efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   10efe:	4a0a      	ldr	r2, [pc, #40]	; (10f28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x48>)
   10f00:	9b01      	ldr	r3, [sp, #4]
   10f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f06:	f003 0301 	and.w	r3, r3, #1
   10f0a:	2b00      	cmp	r3, #0
   10f0c:	d106      	bne.n	10f1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
   10f0e:	4a05      	ldr	r2, [pc, #20]	; (10f24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   10f10:	9b01      	ldr	r3, [sp, #4]
   10f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f16:	2b00      	cmp	r3, #0
   10f18:	d100      	bne.n	10f1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10f1a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10f1c:	bf00      	nop
   10f1e:	b003      	add	sp, #12
   10f20:	f85d fb04 	ldr.w	pc, [sp], #4
   10f24:	1fff9440 	.word	0x1fff9440
   10f28:	1fff943c 	.word	0x1fff943c

00010f2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
   10f2c:	b500      	push	{lr}
   10f2e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10f30:	f7ef fed2 	bl	cd8 <Sys_GetCoreID>
   10f34:	4603      	mov	r3, r0
   10f36:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId])
   10f38:	4a10      	ldr	r2, [pc, #64]	; (10f7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   10f3a:	9b01      	ldr	r3, [sp, #4]
   10f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f40:	2b00      	cmp	r3, #0
   10f42:	d10d      	bne.n	10f60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10f44:	f7ef fd28 	bl	998 <Adc_schm_read_msr>
   10f48:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10f4a:	9b00      	ldr	r3, [sp, #0]
   10f4c:	f003 0301 	and.w	r3, r3, #1
   10f50:	2b00      	cmp	r3, #0
   10f52:	d100      	bne.n	10f56 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10f54:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   10f56:	490a      	ldr	r1, [pc, #40]	; (10f80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x54>)
   10f58:	9b01      	ldr	r3, [sp, #4]
   10f5a:	9a00      	ldr	r2, [sp, #0]
   10f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]++;
   10f60:	4a06      	ldr	r2, [pc, #24]	; (10f7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   10f62:	9b01      	ldr	r3, [sp, #4]
   10f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f68:	1c5a      	adds	r2, r3, #1
   10f6a:	4904      	ldr	r1, [pc, #16]	; (10f7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   10f6c:	9b01      	ldr	r3, [sp, #4]
   10f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10f72:	bf00      	nop
   10f74:	b003      	add	sp, #12
   10f76:	f85d fb04 	ldr.w	pc, [sp], #4
   10f7a:	bf00      	nop
   10f7c:	1fff9448 	.word	0x1fff9448
   10f80:	1fff9444 	.word	0x1fff9444

00010f84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
   10f84:	b500      	push	{lr}
   10f86:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10f88:	f7ef fea6 	bl	cd8 <Sys_GetCoreID>
   10f8c:	4603      	mov	r3, r0
   10f8e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]--;
   10f90:	4a0d      	ldr	r2, [pc, #52]	; (10fc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   10f92:	9b01      	ldr	r3, [sp, #4]
   10f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f98:	1e5a      	subs	r2, r3, #1
   10f9a:	490b      	ldr	r1, [pc, #44]	; (10fc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   10f9c:	9b01      	ldr	r3, [sp, #4]
   10f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   10fa2:	4a0a      	ldr	r2, [pc, #40]	; (10fcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x48>)
   10fa4:	9b01      	ldr	r3, [sp, #4]
   10fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10faa:	f003 0301 	and.w	r3, r3, #1
   10fae:	2b00      	cmp	r3, #0
   10fb0:	d106      	bne.n	10fc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
   10fb2:	4a05      	ldr	r2, [pc, #20]	; (10fc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   10fb4:	9b01      	ldr	r3, [sp, #4]
   10fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fba:	2b00      	cmp	r3, #0
   10fbc:	d100      	bne.n	10fc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10fbe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10fc0:	bf00      	nop
   10fc2:	b003      	add	sp, #12
   10fc4:	f85d fb04 	ldr.w	pc, [sp], #4
   10fc8:	1fff9448 	.word	0x1fff9448
   10fcc:	1fff9444 	.word	0x1fff9444

00010fd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
   10fd0:	b500      	push	{lr}
   10fd2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10fd4:	f7ef fe80 	bl	cd8 <Sys_GetCoreID>
   10fd8:	4603      	mov	r3, r0
   10fda:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId])
   10fdc:	4a10      	ldr	r2, [pc, #64]	; (11020 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   10fde:	9b01      	ldr	r3, [sp, #4]
   10fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fe4:	2b00      	cmp	r3, #0
   10fe6:	d10d      	bne.n	11004 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10fe8:	f7ef fcd6 	bl	998 <Adc_schm_read_msr>
   10fec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10fee:	9b00      	ldr	r3, [sp, #0]
   10ff0:	f003 0301 	and.w	r3, r3, #1
   10ff4:	2b00      	cmp	r3, #0
   10ff6:	d100      	bne.n	10ffa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10ff8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   10ffa:	490a      	ldr	r1, [pc, #40]	; (11024 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x54>)
   10ffc:	9b01      	ldr	r3, [sp, #4]
   10ffe:	9a00      	ldr	r2, [sp, #0]
   11000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]++;
   11004:	4a06      	ldr	r2, [pc, #24]	; (11020 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   11006:	9b01      	ldr	r3, [sp, #4]
   11008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1100c:	1c5a      	adds	r2, r3, #1
   1100e:	4904      	ldr	r1, [pc, #16]	; (11020 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   11010:	9b01      	ldr	r3, [sp, #4]
   11012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11016:	bf00      	nop
   11018:	b003      	add	sp, #12
   1101a:	f85d fb04 	ldr.w	pc, [sp], #4
   1101e:	bf00      	nop
   11020:	1fff9450 	.word	0x1fff9450
   11024:	1fff944c 	.word	0x1fff944c

00011028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
   11028:	b500      	push	{lr}
   1102a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1102c:	f7ef fe54 	bl	cd8 <Sys_GetCoreID>
   11030:	4603      	mov	r3, r0
   11032:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]--;
   11034:	4a0d      	ldr	r2, [pc, #52]	; (1106c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   11036:	9b01      	ldr	r3, [sp, #4]
   11038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1103c:	1e5a      	subs	r2, r3, #1
   1103e:	490b      	ldr	r1, [pc, #44]	; (1106c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   11040:	9b01      	ldr	r3, [sp, #4]
   11042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   11046:	4a0a      	ldr	r2, [pc, #40]	; (11070 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x48>)
   11048:	9b01      	ldr	r3, [sp, #4]
   1104a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1104e:	f003 0301 	and.w	r3, r3, #1
   11052:	2b00      	cmp	r3, #0
   11054:	d106      	bne.n	11064 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
   11056:	4a05      	ldr	r2, [pc, #20]	; (1106c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   11058:	9b01      	ldr	r3, [sp, #4]
   1105a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1105e:	2b00      	cmp	r3, #0
   11060:	d100      	bne.n	11064 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11062:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11064:	bf00      	nop
   11066:	b003      	add	sp, #12
   11068:	f85d fb04 	ldr.w	pc, [sp], #4
   1106c:	1fff9450 	.word	0x1fff9450
   11070:	1fff944c 	.word	0x1fff944c

00011074 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   11074:	b500      	push	{lr}
   11076:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11078:	f7ef fe2e 	bl	cd8 <Sys_GetCoreID>
   1107c:	4603      	mov	r3, r0
   1107e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId])
   11080:	4a10      	ldr	r2, [pc, #64]	; (110c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   11082:	9b01      	ldr	r3, [sp, #4]
   11084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11088:	2b00      	cmp	r3, #0
   1108a:	d10d      	bne.n	110a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1108c:	f7ef fc84 	bl	998 <Adc_schm_read_msr>
   11090:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11092:	9b00      	ldr	r3, [sp, #0]
   11094:	f003 0301 	and.w	r3, r3, #1
   11098:	2b00      	cmp	r3, #0
   1109a:	d100      	bne.n	1109e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1109c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_28[u32CoreId] = msr;
   1109e:	490a      	ldr	r1, [pc, #40]	; (110c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x54>)
   110a0:	9b01      	ldr	r3, [sp, #4]
   110a2:	9a00      	ldr	r2, [sp, #0]
   110a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]++;
   110a8:	4a06      	ldr	r2, [pc, #24]	; (110c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   110aa:	9b01      	ldr	r3, [sp, #4]
   110ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110b0:	1c5a      	adds	r2, r3, #1
   110b2:	4904      	ldr	r1, [pc, #16]	; (110c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   110b4:	9b01      	ldr	r3, [sp, #4]
   110b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   110ba:	bf00      	nop
   110bc:	b003      	add	sp, #12
   110be:	f85d fb04 	ldr.w	pc, [sp], #4
   110c2:	bf00      	nop
   110c4:	1fff9458 	.word	0x1fff9458
   110c8:	1fff9454 	.word	0x1fff9454

000110cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   110cc:	b500      	push	{lr}
   110ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   110d0:	f7ef fe02 	bl	cd8 <Sys_GetCoreID>
   110d4:	4603      	mov	r3, r0
   110d6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]--;
   110d8:	4a0d      	ldr	r2, [pc, #52]	; (11110 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   110da:	9b01      	ldr	r3, [sp, #4]
   110dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110e0:	1e5a      	subs	r2, r3, #1
   110e2:	490b      	ldr	r1, [pc, #44]	; (11110 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   110e4:	9b01      	ldr	r3, [sp, #4]
   110e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
   110ea:	4a0a      	ldr	r2, [pc, #40]	; (11114 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x48>)
   110ec:	9b01      	ldr	r3, [sp, #4]
   110ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110f2:	f003 0301 	and.w	r3, r3, #1
   110f6:	2b00      	cmp	r3, #0
   110f8:	d106      	bne.n	11108 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
   110fa:	4a05      	ldr	r2, [pc, #20]	; (11110 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   110fc:	9b01      	ldr	r3, [sp, #4]
   110fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11102:	2b00      	cmp	r3, #0
   11104:	d100      	bne.n	11108 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11106:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11108:	bf00      	nop
   1110a:	b003      	add	sp, #12
   1110c:	f85d fb04 	ldr.w	pc, [sp], #4
   11110:	1fff9458 	.word	0x1fff9458
   11114:	1fff9454 	.word	0x1fff9454

00011118 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   11118:	b500      	push	{lr}
   1111a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1111c:	f7ef fddc 	bl	cd8 <Sys_GetCoreID>
   11120:	4603      	mov	r3, r0
   11122:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId])
   11124:	4a10      	ldr	r2, [pc, #64]	; (11168 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   11126:	9b01      	ldr	r3, [sp, #4]
   11128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1112c:	2b00      	cmp	r3, #0
   1112e:	d10d      	bne.n	1114c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11130:	f7ef fc32 	bl	998 <Adc_schm_read_msr>
   11134:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11136:	9b00      	ldr	r3, [sp, #0]
   11138:	f003 0301 	and.w	r3, r3, #1
   1113c:	2b00      	cmp	r3, #0
   1113e:	d100      	bne.n	11142 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11140:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_29[u32CoreId] = msr;
   11142:	490a      	ldr	r1, [pc, #40]	; (1116c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x54>)
   11144:	9b01      	ldr	r3, [sp, #4]
   11146:	9a00      	ldr	r2, [sp, #0]
   11148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]++;
   1114c:	4a06      	ldr	r2, [pc, #24]	; (11168 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   1114e:	9b01      	ldr	r3, [sp, #4]
   11150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11154:	1c5a      	adds	r2, r3, #1
   11156:	4904      	ldr	r1, [pc, #16]	; (11168 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   11158:	9b01      	ldr	r3, [sp, #4]
   1115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1115e:	bf00      	nop
   11160:	b003      	add	sp, #12
   11162:	f85d fb04 	ldr.w	pc, [sp], #4
   11166:	bf00      	nop
   11168:	1fff9460 	.word	0x1fff9460
   1116c:	1fff945c 	.word	0x1fff945c

00011170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   11170:	b500      	push	{lr}
   11172:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11174:	f7ef fdb0 	bl	cd8 <Sys_GetCoreID>
   11178:	4603      	mov	r3, r0
   1117a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]--;
   1117c:	4a0d      	ldr	r2, [pc, #52]	; (111b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   1117e:	9b01      	ldr	r3, [sp, #4]
   11180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11184:	1e5a      	subs	r2, r3, #1
   11186:	490b      	ldr	r1, [pc, #44]	; (111b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   11188:	9b01      	ldr	r3, [sp, #4]
   1118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
   1118e:	4a0a      	ldr	r2, [pc, #40]	; (111b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x48>)
   11190:	9b01      	ldr	r3, [sp, #4]
   11192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11196:	f003 0301 	and.w	r3, r3, #1
   1119a:	2b00      	cmp	r3, #0
   1119c:	d106      	bne.n	111ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
   1119e:	4a05      	ldr	r2, [pc, #20]	; (111b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   111a0:	9b01      	ldr	r3, [sp, #4]
   111a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111a6:	2b00      	cmp	r3, #0
   111a8:	d100      	bne.n	111ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   111aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   111ac:	bf00      	nop
   111ae:	b003      	add	sp, #12
   111b0:	f85d fb04 	ldr.w	pc, [sp], #4
   111b4:	1fff9460 	.word	0x1fff9460
   111b8:	1fff945c 	.word	0x1fff945c

000111bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   111bc:	b500      	push	{lr}
   111be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   111c0:	f7ef fd8a 	bl	cd8 <Sys_GetCoreID>
   111c4:	4603      	mov	r3, r0
   111c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId])
   111c8:	4a10      	ldr	r2, [pc, #64]	; (1120c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   111ca:	9b01      	ldr	r3, [sp, #4]
   111cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111d0:	2b00      	cmp	r3, #0
   111d2:	d10d      	bne.n	111f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   111d4:	f7ef fbe0 	bl	998 <Adc_schm_read_msr>
   111d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   111da:	9b00      	ldr	r3, [sp, #0]
   111dc:	f003 0301 	and.w	r3, r3, #1
   111e0:	2b00      	cmp	r3, #0
   111e2:	d100      	bne.n	111e6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   111e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_30[u32CoreId] = msr;
   111e6:	490a      	ldr	r1, [pc, #40]	; (11210 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x54>)
   111e8:	9b01      	ldr	r3, [sp, #4]
   111ea:	9a00      	ldr	r2, [sp, #0]
   111ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]++;
   111f0:	4a06      	ldr	r2, [pc, #24]	; (1120c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   111f2:	9b01      	ldr	r3, [sp, #4]
   111f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111f8:	1c5a      	adds	r2, r3, #1
   111fa:	4904      	ldr	r1, [pc, #16]	; (1120c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   111fc:	9b01      	ldr	r3, [sp, #4]
   111fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11202:	bf00      	nop
   11204:	b003      	add	sp, #12
   11206:	f85d fb04 	ldr.w	pc, [sp], #4
   1120a:	bf00      	nop
   1120c:	1fff9468 	.word	0x1fff9468
   11210:	1fff9464 	.word	0x1fff9464

00011214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   11214:	b500      	push	{lr}
   11216:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11218:	f7ef fd5e 	bl	cd8 <Sys_GetCoreID>
   1121c:	4603      	mov	r3, r0
   1121e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]--;
   11220:	4a0d      	ldr	r2, [pc, #52]	; (11258 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   11222:	9b01      	ldr	r3, [sp, #4]
   11224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11228:	1e5a      	subs	r2, r3, #1
   1122a:	490b      	ldr	r1, [pc, #44]	; (11258 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   1122c:	9b01      	ldr	r3, [sp, #4]
   1122e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
   11232:	4a0a      	ldr	r2, [pc, #40]	; (1125c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x48>)
   11234:	9b01      	ldr	r3, [sp, #4]
   11236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1123a:	f003 0301 	and.w	r3, r3, #1
   1123e:	2b00      	cmp	r3, #0
   11240:	d106      	bne.n	11250 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
   11242:	4a05      	ldr	r2, [pc, #20]	; (11258 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   11244:	9b01      	ldr	r3, [sp, #4]
   11246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1124a:	2b00      	cmp	r3, #0
   1124c:	d100      	bne.n	11250 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1124e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11250:	bf00      	nop
   11252:	b003      	add	sp, #12
   11254:	f85d fb04 	ldr.w	pc, [sp], #4
   11258:	1fff9468 	.word	0x1fff9468
   1125c:	1fff9464 	.word	0x1fff9464

00011260 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   11260:	b500      	push	{lr}
   11262:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11264:	f7ef fd38 	bl	cd8 <Sys_GetCoreID>
   11268:	4603      	mov	r3, r0
   1126a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId])
   1126c:	4a10      	ldr	r2, [pc, #64]	; (112b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   1126e:	9b01      	ldr	r3, [sp, #4]
   11270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11274:	2b00      	cmp	r3, #0
   11276:	d10d      	bne.n	11294 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11278:	f7ef fb8e 	bl	998 <Adc_schm_read_msr>
   1127c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1127e:	9b00      	ldr	r3, [sp, #0]
   11280:	f003 0301 	and.w	r3, r3, #1
   11284:	2b00      	cmp	r3, #0
   11286:	d100      	bne.n	1128a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11288:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_31[u32CoreId] = msr;
   1128a:	490a      	ldr	r1, [pc, #40]	; (112b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x54>)
   1128c:	9b01      	ldr	r3, [sp, #4]
   1128e:	9a00      	ldr	r2, [sp, #0]
   11290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]++;
   11294:	4a06      	ldr	r2, [pc, #24]	; (112b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   11296:	9b01      	ldr	r3, [sp, #4]
   11298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1129c:	1c5a      	adds	r2, r3, #1
   1129e:	4904      	ldr	r1, [pc, #16]	; (112b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   112a0:	9b01      	ldr	r3, [sp, #4]
   112a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   112a6:	bf00      	nop
   112a8:	b003      	add	sp, #12
   112aa:	f85d fb04 	ldr.w	pc, [sp], #4
   112ae:	bf00      	nop
   112b0:	1fff9470 	.word	0x1fff9470
   112b4:	1fff946c 	.word	0x1fff946c

000112b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   112b8:	b500      	push	{lr}
   112ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   112bc:	f7ef fd0c 	bl	cd8 <Sys_GetCoreID>
   112c0:	4603      	mov	r3, r0
   112c2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]--;
   112c4:	4a0d      	ldr	r2, [pc, #52]	; (112fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   112c6:	9b01      	ldr	r3, [sp, #4]
   112c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112cc:	1e5a      	subs	r2, r3, #1
   112ce:	490b      	ldr	r1, [pc, #44]	; (112fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   112d0:	9b01      	ldr	r3, [sp, #4]
   112d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
   112d6:	4a0a      	ldr	r2, [pc, #40]	; (11300 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x48>)
   112d8:	9b01      	ldr	r3, [sp, #4]
   112da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112de:	f003 0301 	and.w	r3, r3, #1
   112e2:	2b00      	cmp	r3, #0
   112e4:	d106      	bne.n	112f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
   112e6:	4a05      	ldr	r2, [pc, #20]	; (112fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   112e8:	9b01      	ldr	r3, [sp, #4]
   112ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112ee:	2b00      	cmp	r3, #0
   112f0:	d100      	bne.n	112f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   112f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   112f4:	bf00      	nop
   112f6:	b003      	add	sp, #12
   112f8:	f85d fb04 	ldr.w	pc, [sp], #4
   112fc:	1fff9470 	.word	0x1fff9470
   11300:	1fff946c 	.word	0x1fff946c

00011304 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   11304:	b500      	push	{lr}
   11306:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11308:	f7ef fce6 	bl	cd8 <Sys_GetCoreID>
   1130c:	4603      	mov	r3, r0
   1130e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId])
   11310:	4a10      	ldr	r2, [pc, #64]	; (11354 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   11312:	9b01      	ldr	r3, [sp, #4]
   11314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11318:	2b00      	cmp	r3, #0
   1131a:	d10d      	bne.n	11338 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1131c:	f7ef fb3c 	bl	998 <Adc_schm_read_msr>
   11320:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11322:	9b00      	ldr	r3, [sp, #0]
   11324:	f003 0301 	and.w	r3, r3, #1
   11328:	2b00      	cmp	r3, #0
   1132a:	d100      	bne.n	1132e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1132c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_32[u32CoreId] = msr;
   1132e:	490a      	ldr	r1, [pc, #40]	; (11358 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x54>)
   11330:	9b01      	ldr	r3, [sp, #4]
   11332:	9a00      	ldr	r2, [sp, #0]
   11334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]++;
   11338:	4a06      	ldr	r2, [pc, #24]	; (11354 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   1133a:	9b01      	ldr	r3, [sp, #4]
   1133c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11340:	1c5a      	adds	r2, r3, #1
   11342:	4904      	ldr	r1, [pc, #16]	; (11354 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   11344:	9b01      	ldr	r3, [sp, #4]
   11346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1134a:	bf00      	nop
   1134c:	b003      	add	sp, #12
   1134e:	f85d fb04 	ldr.w	pc, [sp], #4
   11352:	bf00      	nop
   11354:	1fff9478 	.word	0x1fff9478
   11358:	1fff9474 	.word	0x1fff9474

0001135c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   1135c:	b500      	push	{lr}
   1135e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11360:	f7ef fcba 	bl	cd8 <Sys_GetCoreID>
   11364:	4603      	mov	r3, r0
   11366:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]--;
   11368:	4a0d      	ldr	r2, [pc, #52]	; (113a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   1136a:	9b01      	ldr	r3, [sp, #4]
   1136c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11370:	1e5a      	subs	r2, r3, #1
   11372:	490b      	ldr	r1, [pc, #44]	; (113a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   11374:	9b01      	ldr	r3, [sp, #4]
   11376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
   1137a:	4a0a      	ldr	r2, [pc, #40]	; (113a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x48>)
   1137c:	9b01      	ldr	r3, [sp, #4]
   1137e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11382:	f003 0301 	and.w	r3, r3, #1
   11386:	2b00      	cmp	r3, #0
   11388:	d106      	bne.n	11398 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
   1138a:	4a05      	ldr	r2, [pc, #20]	; (113a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   1138c:	9b01      	ldr	r3, [sp, #4]
   1138e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11392:	2b00      	cmp	r3, #0
   11394:	d100      	bne.n	11398 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11396:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11398:	bf00      	nop
   1139a:	b003      	add	sp, #12
   1139c:	f85d fb04 	ldr.w	pc, [sp], #4
   113a0:	1fff9478 	.word	0x1fff9478
   113a4:	1fff9474 	.word	0x1fff9474

000113a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   113a8:	b500      	push	{lr}
   113aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   113ac:	f7ef fc94 	bl	cd8 <Sys_GetCoreID>
   113b0:	4603      	mov	r3, r0
   113b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId])
   113b4:	4a10      	ldr	r2, [pc, #64]	; (113f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   113b6:	9b01      	ldr	r3, [sp, #4]
   113b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113bc:	2b00      	cmp	r3, #0
   113be:	d10d      	bne.n	113dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   113c0:	f7ef faea 	bl	998 <Adc_schm_read_msr>
   113c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   113c6:	9b00      	ldr	r3, [sp, #0]
   113c8:	f003 0301 	and.w	r3, r3, #1
   113cc:	2b00      	cmp	r3, #0
   113ce:	d100      	bne.n	113d2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   113d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_33[u32CoreId] = msr;
   113d2:	490a      	ldr	r1, [pc, #40]	; (113fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x54>)
   113d4:	9b01      	ldr	r3, [sp, #4]
   113d6:	9a00      	ldr	r2, [sp, #0]
   113d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]++;
   113dc:	4a06      	ldr	r2, [pc, #24]	; (113f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   113de:	9b01      	ldr	r3, [sp, #4]
   113e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113e4:	1c5a      	adds	r2, r3, #1
   113e6:	4904      	ldr	r1, [pc, #16]	; (113f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   113e8:	9b01      	ldr	r3, [sp, #4]
   113ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   113ee:	bf00      	nop
   113f0:	b003      	add	sp, #12
   113f2:	f85d fb04 	ldr.w	pc, [sp], #4
   113f6:	bf00      	nop
   113f8:	1fff9480 	.word	0x1fff9480
   113fc:	1fff947c 	.word	0x1fff947c

00011400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   11400:	b500      	push	{lr}
   11402:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11404:	f7ef fc68 	bl	cd8 <Sys_GetCoreID>
   11408:	4603      	mov	r3, r0
   1140a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]--;
   1140c:	4a0d      	ldr	r2, [pc, #52]	; (11444 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   1140e:	9b01      	ldr	r3, [sp, #4]
   11410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11414:	1e5a      	subs	r2, r3, #1
   11416:	490b      	ldr	r1, [pc, #44]	; (11444 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   11418:	9b01      	ldr	r3, [sp, #4]
   1141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
   1141e:	4a0a      	ldr	r2, [pc, #40]	; (11448 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x48>)
   11420:	9b01      	ldr	r3, [sp, #4]
   11422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11426:	f003 0301 	and.w	r3, r3, #1
   1142a:	2b00      	cmp	r3, #0
   1142c:	d106      	bne.n	1143c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
   1142e:	4a05      	ldr	r2, [pc, #20]	; (11444 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   11430:	9b01      	ldr	r3, [sp, #4]
   11432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11436:	2b00      	cmp	r3, #0
   11438:	d100      	bne.n	1143c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1143a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1143c:	bf00      	nop
   1143e:	b003      	add	sp, #12
   11440:	f85d fb04 	ldr.w	pc, [sp], #4
   11444:	1fff9480 	.word	0x1fff9480
   11448:	1fff947c 	.word	0x1fff947c

0001144c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   1144c:	b500      	push	{lr}
   1144e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11450:	f7ef fc42 	bl	cd8 <Sys_GetCoreID>
   11454:	4603      	mov	r3, r0
   11456:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId])
   11458:	4a10      	ldr	r2, [pc, #64]	; (1149c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   1145a:	9b01      	ldr	r3, [sp, #4]
   1145c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11460:	2b00      	cmp	r3, #0
   11462:	d10d      	bne.n	11480 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11464:	f7ef fa98 	bl	998 <Adc_schm_read_msr>
   11468:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1146a:	9b00      	ldr	r3, [sp, #0]
   1146c:	f003 0301 	and.w	r3, r3, #1
   11470:	2b00      	cmp	r3, #0
   11472:	d100      	bne.n	11476 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11474:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_34[u32CoreId] = msr;
   11476:	490a      	ldr	r1, [pc, #40]	; (114a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x54>)
   11478:	9b01      	ldr	r3, [sp, #4]
   1147a:	9a00      	ldr	r2, [sp, #0]
   1147c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]++;
   11480:	4a06      	ldr	r2, [pc, #24]	; (1149c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   11482:	9b01      	ldr	r3, [sp, #4]
   11484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11488:	1c5a      	adds	r2, r3, #1
   1148a:	4904      	ldr	r1, [pc, #16]	; (1149c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   1148c:	9b01      	ldr	r3, [sp, #4]
   1148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11492:	bf00      	nop
   11494:	b003      	add	sp, #12
   11496:	f85d fb04 	ldr.w	pc, [sp], #4
   1149a:	bf00      	nop
   1149c:	1fff9488 	.word	0x1fff9488
   114a0:	1fff9484 	.word	0x1fff9484

000114a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   114a4:	b500      	push	{lr}
   114a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   114a8:	f7ef fc16 	bl	cd8 <Sys_GetCoreID>
   114ac:	4603      	mov	r3, r0
   114ae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]--;
   114b0:	4a0d      	ldr	r2, [pc, #52]	; (114e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   114b2:	9b01      	ldr	r3, [sp, #4]
   114b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114b8:	1e5a      	subs	r2, r3, #1
   114ba:	490b      	ldr	r1, [pc, #44]	; (114e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   114bc:	9b01      	ldr	r3, [sp, #4]
   114be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
   114c2:	4a0a      	ldr	r2, [pc, #40]	; (114ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x48>)
   114c4:	9b01      	ldr	r3, [sp, #4]
   114c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114ca:	f003 0301 	and.w	r3, r3, #1
   114ce:	2b00      	cmp	r3, #0
   114d0:	d106      	bne.n	114e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
   114d2:	4a05      	ldr	r2, [pc, #20]	; (114e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   114d4:	9b01      	ldr	r3, [sp, #4]
   114d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114da:	2b00      	cmp	r3, #0
   114dc:	d100      	bne.n	114e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   114de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   114e0:	bf00      	nop
   114e2:	b003      	add	sp, #12
   114e4:	f85d fb04 	ldr.w	pc, [sp], #4
   114e8:	1fff9488 	.word	0x1fff9488
   114ec:	1fff9484 	.word	0x1fff9484

000114f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   114f0:	b500      	push	{lr}
   114f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   114f4:	f7ef fbf0 	bl	cd8 <Sys_GetCoreID>
   114f8:	4603      	mov	r3, r0
   114fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId])
   114fc:	4a10      	ldr	r2, [pc, #64]	; (11540 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   114fe:	9b01      	ldr	r3, [sp, #4]
   11500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11504:	2b00      	cmp	r3, #0
   11506:	d10d      	bne.n	11524 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11508:	f7ef fa46 	bl	998 <Adc_schm_read_msr>
   1150c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1150e:	9b00      	ldr	r3, [sp, #0]
   11510:	f003 0301 	and.w	r3, r3, #1
   11514:	2b00      	cmp	r3, #0
   11516:	d100      	bne.n	1151a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11518:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_35[u32CoreId] = msr;
   1151a:	490a      	ldr	r1, [pc, #40]	; (11544 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x54>)
   1151c:	9b01      	ldr	r3, [sp, #4]
   1151e:	9a00      	ldr	r2, [sp, #0]
   11520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]++;
   11524:	4a06      	ldr	r2, [pc, #24]	; (11540 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   11526:	9b01      	ldr	r3, [sp, #4]
   11528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1152c:	1c5a      	adds	r2, r3, #1
   1152e:	4904      	ldr	r1, [pc, #16]	; (11540 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   11530:	9b01      	ldr	r3, [sp, #4]
   11532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11536:	bf00      	nop
   11538:	b003      	add	sp, #12
   1153a:	f85d fb04 	ldr.w	pc, [sp], #4
   1153e:	bf00      	nop
   11540:	1fff9490 	.word	0x1fff9490
   11544:	1fff948c 	.word	0x1fff948c

00011548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   11548:	b500      	push	{lr}
   1154a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1154c:	f7ef fbc4 	bl	cd8 <Sys_GetCoreID>
   11550:	4603      	mov	r3, r0
   11552:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]--;
   11554:	4a0d      	ldr	r2, [pc, #52]	; (1158c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   11556:	9b01      	ldr	r3, [sp, #4]
   11558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1155c:	1e5a      	subs	r2, r3, #1
   1155e:	490b      	ldr	r1, [pc, #44]	; (1158c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   11560:	9b01      	ldr	r3, [sp, #4]
   11562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
   11566:	4a0a      	ldr	r2, [pc, #40]	; (11590 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x48>)
   11568:	9b01      	ldr	r3, [sp, #4]
   1156a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1156e:	f003 0301 	and.w	r3, r3, #1
   11572:	2b00      	cmp	r3, #0
   11574:	d106      	bne.n	11584 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
   11576:	4a05      	ldr	r2, [pc, #20]	; (1158c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   11578:	9b01      	ldr	r3, [sp, #4]
   1157a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1157e:	2b00      	cmp	r3, #0
   11580:	d100      	bne.n	11584 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11582:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11584:	bf00      	nop
   11586:	b003      	add	sp, #12
   11588:	f85d fb04 	ldr.w	pc, [sp], #4
   1158c:	1fff9490 	.word	0x1fff9490
   11590:	1fff948c 	.word	0x1fff948c

00011594 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   11594:	b500      	push	{lr}
   11596:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11598:	f7ef fb9e 	bl	cd8 <Sys_GetCoreID>
   1159c:	4603      	mov	r3, r0
   1159e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId])
   115a0:	4a10      	ldr	r2, [pc, #64]	; (115e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   115a2:	9b01      	ldr	r3, [sp, #4]
   115a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115a8:	2b00      	cmp	r3, #0
   115aa:	d10d      	bne.n	115c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   115ac:	f7ef f9f4 	bl	998 <Adc_schm_read_msr>
   115b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   115b2:	9b00      	ldr	r3, [sp, #0]
   115b4:	f003 0301 	and.w	r3, r3, #1
   115b8:	2b00      	cmp	r3, #0
   115ba:	d100      	bne.n	115be <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   115bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_36[u32CoreId] = msr;
   115be:	490a      	ldr	r1, [pc, #40]	; (115e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x54>)
   115c0:	9b01      	ldr	r3, [sp, #4]
   115c2:	9a00      	ldr	r2, [sp, #0]
   115c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]++;
   115c8:	4a06      	ldr	r2, [pc, #24]	; (115e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   115ca:	9b01      	ldr	r3, [sp, #4]
   115cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115d0:	1c5a      	adds	r2, r3, #1
   115d2:	4904      	ldr	r1, [pc, #16]	; (115e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   115d4:	9b01      	ldr	r3, [sp, #4]
   115d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   115da:	bf00      	nop
   115dc:	b003      	add	sp, #12
   115de:	f85d fb04 	ldr.w	pc, [sp], #4
   115e2:	bf00      	nop
   115e4:	1fff9498 	.word	0x1fff9498
   115e8:	1fff9494 	.word	0x1fff9494

000115ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   115ec:	b500      	push	{lr}
   115ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   115f0:	f7ef fb72 	bl	cd8 <Sys_GetCoreID>
   115f4:	4603      	mov	r3, r0
   115f6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]--;
   115f8:	4a0d      	ldr	r2, [pc, #52]	; (11630 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   115fa:	9b01      	ldr	r3, [sp, #4]
   115fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11600:	1e5a      	subs	r2, r3, #1
   11602:	490b      	ldr	r1, [pc, #44]	; (11630 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   11604:	9b01      	ldr	r3, [sp, #4]
   11606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
   1160a:	4a0a      	ldr	r2, [pc, #40]	; (11634 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x48>)
   1160c:	9b01      	ldr	r3, [sp, #4]
   1160e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11612:	f003 0301 	and.w	r3, r3, #1
   11616:	2b00      	cmp	r3, #0
   11618:	d106      	bne.n	11628 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
   1161a:	4a05      	ldr	r2, [pc, #20]	; (11630 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   1161c:	9b01      	ldr	r3, [sp, #4]
   1161e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11622:	2b00      	cmp	r3, #0
   11624:	d100      	bne.n	11628 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11626:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11628:	bf00      	nop
   1162a:	b003      	add	sp, #12
   1162c:	f85d fb04 	ldr.w	pc, [sp], #4
   11630:	1fff9498 	.word	0x1fff9498
   11634:	1fff9494 	.word	0x1fff9494

00011638 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   11638:	b500      	push	{lr}
   1163a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1163c:	f7ef fb4c 	bl	cd8 <Sys_GetCoreID>
   11640:	4603      	mov	r3, r0
   11642:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId])
   11644:	4a10      	ldr	r2, [pc, #64]	; (11688 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   11646:	9b01      	ldr	r3, [sp, #4]
   11648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1164c:	2b00      	cmp	r3, #0
   1164e:	d10d      	bne.n	1166c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11650:	f7ef f9a2 	bl	998 <Adc_schm_read_msr>
   11654:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11656:	9b00      	ldr	r3, [sp, #0]
   11658:	f003 0301 	and.w	r3, r3, #1
   1165c:	2b00      	cmp	r3, #0
   1165e:	d100      	bne.n	11662 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11660:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_37[u32CoreId] = msr;
   11662:	490a      	ldr	r1, [pc, #40]	; (1168c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x54>)
   11664:	9b01      	ldr	r3, [sp, #4]
   11666:	9a00      	ldr	r2, [sp, #0]
   11668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]++;
   1166c:	4a06      	ldr	r2, [pc, #24]	; (11688 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   1166e:	9b01      	ldr	r3, [sp, #4]
   11670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11674:	1c5a      	adds	r2, r3, #1
   11676:	4904      	ldr	r1, [pc, #16]	; (11688 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   11678:	9b01      	ldr	r3, [sp, #4]
   1167a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1167e:	bf00      	nop
   11680:	b003      	add	sp, #12
   11682:	f85d fb04 	ldr.w	pc, [sp], #4
   11686:	bf00      	nop
   11688:	1fff94a0 	.word	0x1fff94a0
   1168c:	1fff949c 	.word	0x1fff949c

00011690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   11690:	b500      	push	{lr}
   11692:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11694:	f7ef fb20 	bl	cd8 <Sys_GetCoreID>
   11698:	4603      	mov	r3, r0
   1169a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]--;
   1169c:	4a0d      	ldr	r2, [pc, #52]	; (116d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   1169e:	9b01      	ldr	r3, [sp, #4]
   116a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116a4:	1e5a      	subs	r2, r3, #1
   116a6:	490b      	ldr	r1, [pc, #44]	; (116d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   116a8:	9b01      	ldr	r3, [sp, #4]
   116aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_37[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]))         /*if interrupts were enabled*/
   116ae:	4a0a      	ldr	r2, [pc, #40]	; (116d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x48>)
   116b0:	9b01      	ldr	r3, [sp, #4]
   116b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116b6:	f003 0301 	and.w	r3, r3, #1
   116ba:	2b00      	cmp	r3, #0
   116bc:	d106      	bne.n	116cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
   116be:	4a05      	ldr	r2, [pc, #20]	; (116d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   116c0:	9b01      	ldr	r3, [sp, #4]
   116c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116c6:	2b00      	cmp	r3, #0
   116c8:	d100      	bne.n	116cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   116ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   116cc:	bf00      	nop
   116ce:	b003      	add	sp, #12
   116d0:	f85d fb04 	ldr.w	pc, [sp], #4
   116d4:	1fff94a0 	.word	0x1fff94a0
   116d8:	1fff949c 	.word	0x1fff949c

000116dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   116dc:	b500      	push	{lr}
   116de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   116e0:	f7ef fafa 	bl	cd8 <Sys_GetCoreID>
   116e4:	4603      	mov	r3, r0
   116e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId])
   116e8:	4a10      	ldr	r2, [pc, #64]	; (1172c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   116ea:	9b01      	ldr	r3, [sp, #4]
   116ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116f0:	2b00      	cmp	r3, #0
   116f2:	d10d      	bne.n	11710 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   116f4:	f7ef f950 	bl	998 <Adc_schm_read_msr>
   116f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   116fa:	9b00      	ldr	r3, [sp, #0]
   116fc:	f003 0301 	and.w	r3, r3, #1
   11700:	2b00      	cmp	r3, #0
   11702:	d100      	bne.n	11706 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11704:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_38[u32CoreId] = msr;
   11706:	490a      	ldr	r1, [pc, #40]	; (11730 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x54>)
   11708:	9b01      	ldr	r3, [sp, #4]
   1170a:	9a00      	ldr	r2, [sp, #0]
   1170c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]++;
   11710:	4a06      	ldr	r2, [pc, #24]	; (1172c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   11712:	9b01      	ldr	r3, [sp, #4]
   11714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11718:	1c5a      	adds	r2, r3, #1
   1171a:	4904      	ldr	r1, [pc, #16]	; (1172c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   1171c:	9b01      	ldr	r3, [sp, #4]
   1171e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11722:	bf00      	nop
   11724:	b003      	add	sp, #12
   11726:	f85d fb04 	ldr.w	pc, [sp], #4
   1172a:	bf00      	nop
   1172c:	1fff94a8 	.word	0x1fff94a8
   11730:	1fff94a4 	.word	0x1fff94a4

00011734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   11734:	b500      	push	{lr}
   11736:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11738:	f7ef face 	bl	cd8 <Sys_GetCoreID>
   1173c:	4603      	mov	r3, r0
   1173e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]--;
   11740:	4a0d      	ldr	r2, [pc, #52]	; (11778 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   11742:	9b01      	ldr	r3, [sp, #4]
   11744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11748:	1e5a      	subs	r2, r3, #1
   1174a:	490b      	ldr	r1, [pc, #44]	; (11778 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   1174c:	9b01      	ldr	r3, [sp, #4]
   1174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
   11752:	4a0a      	ldr	r2, [pc, #40]	; (1177c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x48>)
   11754:	9b01      	ldr	r3, [sp, #4]
   11756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1175a:	f003 0301 	and.w	r3, r3, #1
   1175e:	2b00      	cmp	r3, #0
   11760:	d106      	bne.n	11770 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
   11762:	4a05      	ldr	r2, [pc, #20]	; (11778 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   11764:	9b01      	ldr	r3, [sp, #4]
   11766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1176a:	2b00      	cmp	r3, #0
   1176c:	d100      	bne.n	11770 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1176e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11770:	bf00      	nop
   11772:	b003      	add	sp, #12
   11774:	f85d fb04 	ldr.w	pc, [sp], #4
   11778:	1fff94a8 	.word	0x1fff94a8
   1177c:	1fff94a4 	.word	0x1fff94a4

00011780 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   11780:	b500      	push	{lr}
   11782:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11784:	f7ef faa8 	bl	cd8 <Sys_GetCoreID>
   11788:	4603      	mov	r3, r0
   1178a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId])
   1178c:	4a10      	ldr	r2, [pc, #64]	; (117d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   1178e:	9b01      	ldr	r3, [sp, #4]
   11790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11794:	2b00      	cmp	r3, #0
   11796:	d10d      	bne.n	117b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11798:	f7ef f8fe 	bl	998 <Adc_schm_read_msr>
   1179c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1179e:	9b00      	ldr	r3, [sp, #0]
   117a0:	f003 0301 	and.w	r3, r3, #1
   117a4:	2b00      	cmp	r3, #0
   117a6:	d100      	bne.n	117aa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   117a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_39[u32CoreId] = msr;
   117aa:	490a      	ldr	r1, [pc, #40]	; (117d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x54>)
   117ac:	9b01      	ldr	r3, [sp, #4]
   117ae:	9a00      	ldr	r2, [sp, #0]
   117b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]++;
   117b4:	4a06      	ldr	r2, [pc, #24]	; (117d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   117b6:	9b01      	ldr	r3, [sp, #4]
   117b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117bc:	1c5a      	adds	r2, r3, #1
   117be:	4904      	ldr	r1, [pc, #16]	; (117d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   117c0:	9b01      	ldr	r3, [sp, #4]
   117c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   117c6:	bf00      	nop
   117c8:	b003      	add	sp, #12
   117ca:	f85d fb04 	ldr.w	pc, [sp], #4
   117ce:	bf00      	nop
   117d0:	1fff94b0 	.word	0x1fff94b0
   117d4:	1fff94ac 	.word	0x1fff94ac

000117d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   117d8:	b500      	push	{lr}
   117da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   117dc:	f7ef fa7c 	bl	cd8 <Sys_GetCoreID>
   117e0:	4603      	mov	r3, r0
   117e2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]--;
   117e4:	4a0d      	ldr	r2, [pc, #52]	; (1181c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   117e6:	9b01      	ldr	r3, [sp, #4]
   117e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117ec:	1e5a      	subs	r2, r3, #1
   117ee:	490b      	ldr	r1, [pc, #44]	; (1181c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   117f0:	9b01      	ldr	r3, [sp, #4]
   117f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
   117f6:	4a0a      	ldr	r2, [pc, #40]	; (11820 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x48>)
   117f8:	9b01      	ldr	r3, [sp, #4]
   117fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117fe:	f003 0301 	and.w	r3, r3, #1
   11802:	2b00      	cmp	r3, #0
   11804:	d106      	bne.n	11814 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
   11806:	4a05      	ldr	r2, [pc, #20]	; (1181c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   11808:	9b01      	ldr	r3, [sp, #4]
   1180a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1180e:	2b00      	cmp	r3, #0
   11810:	d100      	bne.n	11814 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11812:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11814:	bf00      	nop
   11816:	b003      	add	sp, #12
   11818:	f85d fb04 	ldr.w	pc, [sp], #4
   1181c:	1fff94b0 	.word	0x1fff94b0
   11820:	1fff94ac 	.word	0x1fff94ac

00011824 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   11824:	b500      	push	{lr}
   11826:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11828:	f7ef fa56 	bl	cd8 <Sys_GetCoreID>
   1182c:	4603      	mov	r3, r0
   1182e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId])
   11830:	4a10      	ldr	r2, [pc, #64]	; (11874 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   11832:	9b01      	ldr	r3, [sp, #4]
   11834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11838:	2b00      	cmp	r3, #0
   1183a:	d10d      	bne.n	11858 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1183c:	f7ef f8ac 	bl	998 <Adc_schm_read_msr>
   11840:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11842:	9b00      	ldr	r3, [sp, #0]
   11844:	f003 0301 	and.w	r3, r3, #1
   11848:	2b00      	cmp	r3, #0
   1184a:	d100      	bne.n	1184e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1184c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_40[u32CoreId] = msr;
   1184e:	490a      	ldr	r1, [pc, #40]	; (11878 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x54>)
   11850:	9b01      	ldr	r3, [sp, #4]
   11852:	9a00      	ldr	r2, [sp, #0]
   11854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]++;
   11858:	4a06      	ldr	r2, [pc, #24]	; (11874 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   1185a:	9b01      	ldr	r3, [sp, #4]
   1185c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11860:	1c5a      	adds	r2, r3, #1
   11862:	4904      	ldr	r1, [pc, #16]	; (11874 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   11864:	9b01      	ldr	r3, [sp, #4]
   11866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1186a:	bf00      	nop
   1186c:	b003      	add	sp, #12
   1186e:	f85d fb04 	ldr.w	pc, [sp], #4
   11872:	bf00      	nop
   11874:	1fff94b8 	.word	0x1fff94b8
   11878:	1fff94b4 	.word	0x1fff94b4

0001187c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   1187c:	b500      	push	{lr}
   1187e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11880:	f7ef fa2a 	bl	cd8 <Sys_GetCoreID>
   11884:	4603      	mov	r3, r0
   11886:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]--;
   11888:	4a0d      	ldr	r2, [pc, #52]	; (118c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   1188a:	9b01      	ldr	r3, [sp, #4]
   1188c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11890:	1e5a      	subs	r2, r3, #1
   11892:	490b      	ldr	r1, [pc, #44]	; (118c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   11894:	9b01      	ldr	r3, [sp, #4]
   11896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
   1189a:	4a0a      	ldr	r2, [pc, #40]	; (118c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x48>)
   1189c:	9b01      	ldr	r3, [sp, #4]
   1189e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118a2:	f003 0301 	and.w	r3, r3, #1
   118a6:	2b00      	cmp	r3, #0
   118a8:	d106      	bne.n	118b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
   118aa:	4a05      	ldr	r2, [pc, #20]	; (118c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   118ac:	9b01      	ldr	r3, [sp, #4]
   118ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118b2:	2b00      	cmp	r3, #0
   118b4:	d100      	bne.n	118b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   118b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   118b8:	bf00      	nop
   118ba:	b003      	add	sp, #12
   118bc:	f85d fb04 	ldr.w	pc, [sp], #4
   118c0:	1fff94b8 	.word	0x1fff94b8
   118c4:	1fff94b4 	.word	0x1fff94b4

000118c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   118c8:	b500      	push	{lr}
   118ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   118cc:	f7ef fa04 	bl	cd8 <Sys_GetCoreID>
   118d0:	4603      	mov	r3, r0
   118d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId])
   118d4:	4a10      	ldr	r2, [pc, #64]	; (11918 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   118d6:	9b01      	ldr	r3, [sp, #4]
   118d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118dc:	2b00      	cmp	r3, #0
   118de:	d10d      	bne.n	118fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   118e0:	f7ef f85a 	bl	998 <Adc_schm_read_msr>
   118e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   118e6:	9b00      	ldr	r3, [sp, #0]
   118e8:	f003 0301 	and.w	r3, r3, #1
   118ec:	2b00      	cmp	r3, #0
   118ee:	d100      	bne.n	118f2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   118f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_41[u32CoreId] = msr;
   118f2:	490a      	ldr	r1, [pc, #40]	; (1191c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x54>)
   118f4:	9b01      	ldr	r3, [sp, #4]
   118f6:	9a00      	ldr	r2, [sp, #0]
   118f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]++;
   118fc:	4a06      	ldr	r2, [pc, #24]	; (11918 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   118fe:	9b01      	ldr	r3, [sp, #4]
   11900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11904:	1c5a      	adds	r2, r3, #1
   11906:	4904      	ldr	r1, [pc, #16]	; (11918 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   11908:	9b01      	ldr	r3, [sp, #4]
   1190a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1190e:	bf00      	nop
   11910:	b003      	add	sp, #12
   11912:	f85d fb04 	ldr.w	pc, [sp], #4
   11916:	bf00      	nop
   11918:	1fff94c0 	.word	0x1fff94c0
   1191c:	1fff94bc 	.word	0x1fff94bc

00011920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   11920:	b500      	push	{lr}
   11922:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11924:	f7ef f9d8 	bl	cd8 <Sys_GetCoreID>
   11928:	4603      	mov	r3, r0
   1192a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]--;
   1192c:	4a0d      	ldr	r2, [pc, #52]	; (11964 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   1192e:	9b01      	ldr	r3, [sp, #4]
   11930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11934:	1e5a      	subs	r2, r3, #1
   11936:	490b      	ldr	r1, [pc, #44]	; (11964 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   11938:	9b01      	ldr	r3, [sp, #4]
   1193a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
   1193e:	4a0a      	ldr	r2, [pc, #40]	; (11968 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x48>)
   11940:	9b01      	ldr	r3, [sp, #4]
   11942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11946:	f003 0301 	and.w	r3, r3, #1
   1194a:	2b00      	cmp	r3, #0
   1194c:	d106      	bne.n	1195c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
   1194e:	4a05      	ldr	r2, [pc, #20]	; (11964 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   11950:	9b01      	ldr	r3, [sp, #4]
   11952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11956:	2b00      	cmp	r3, #0
   11958:	d100      	bne.n	1195c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1195a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1195c:	bf00      	nop
   1195e:	b003      	add	sp, #12
   11960:	f85d fb04 	ldr.w	pc, [sp], #4
   11964:	1fff94c0 	.word	0x1fff94c0
   11968:	1fff94bc 	.word	0x1fff94bc

0001196c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   1196c:	b500      	push	{lr}
   1196e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11970:	f7ef f9b2 	bl	cd8 <Sys_GetCoreID>
   11974:	4603      	mov	r3, r0
   11976:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId])
   11978:	4a10      	ldr	r2, [pc, #64]	; (119bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   1197a:	9b01      	ldr	r3, [sp, #4]
   1197c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11980:	2b00      	cmp	r3, #0
   11982:	d10d      	bne.n	119a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11984:	f7ef f808 	bl	998 <Adc_schm_read_msr>
   11988:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1198a:	9b00      	ldr	r3, [sp, #0]
   1198c:	f003 0301 	and.w	r3, r3, #1
   11990:	2b00      	cmp	r3, #0
   11992:	d100      	bne.n	11996 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11994:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_42[u32CoreId] = msr;
   11996:	490a      	ldr	r1, [pc, #40]	; (119c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x54>)
   11998:	9b01      	ldr	r3, [sp, #4]
   1199a:	9a00      	ldr	r2, [sp, #0]
   1199c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]++;
   119a0:	4a06      	ldr	r2, [pc, #24]	; (119bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   119a2:	9b01      	ldr	r3, [sp, #4]
   119a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119a8:	1c5a      	adds	r2, r3, #1
   119aa:	4904      	ldr	r1, [pc, #16]	; (119bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   119ac:	9b01      	ldr	r3, [sp, #4]
   119ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   119b2:	bf00      	nop
   119b4:	b003      	add	sp, #12
   119b6:	f85d fb04 	ldr.w	pc, [sp], #4
   119ba:	bf00      	nop
   119bc:	1fff94c8 	.word	0x1fff94c8
   119c0:	1fff94c4 	.word	0x1fff94c4

000119c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   119c4:	b500      	push	{lr}
   119c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   119c8:	f7ef f986 	bl	cd8 <Sys_GetCoreID>
   119cc:	4603      	mov	r3, r0
   119ce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]--;
   119d0:	4a0d      	ldr	r2, [pc, #52]	; (11a08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   119d2:	9b01      	ldr	r3, [sp, #4]
   119d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119d8:	1e5a      	subs	r2, r3, #1
   119da:	490b      	ldr	r1, [pc, #44]	; (11a08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   119dc:	9b01      	ldr	r3, [sp, #4]
   119de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
   119e2:	4a0a      	ldr	r2, [pc, #40]	; (11a0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x48>)
   119e4:	9b01      	ldr	r3, [sp, #4]
   119e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119ea:	f003 0301 	and.w	r3, r3, #1
   119ee:	2b00      	cmp	r3, #0
   119f0:	d106      	bne.n	11a00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
   119f2:	4a05      	ldr	r2, [pc, #20]	; (11a08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   119f4:	9b01      	ldr	r3, [sp, #4]
   119f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119fa:	2b00      	cmp	r3, #0
   119fc:	d100      	bne.n	11a00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   119fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11a00:	bf00      	nop
   11a02:	b003      	add	sp, #12
   11a04:	f85d fb04 	ldr.w	pc, [sp], #4
   11a08:	1fff94c8 	.word	0x1fff94c8
   11a0c:	1fff94c4 	.word	0x1fff94c4

00011a10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   11a10:	b500      	push	{lr}
   11a12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a14:	f7ef f960 	bl	cd8 <Sys_GetCoreID>
   11a18:	4603      	mov	r3, r0
   11a1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId])
   11a1c:	4a10      	ldr	r2, [pc, #64]	; (11a60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   11a1e:	9b01      	ldr	r3, [sp, #4]
   11a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a24:	2b00      	cmp	r3, #0
   11a26:	d10d      	bne.n	11a44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11a28:	f7ee ffb6 	bl	998 <Adc_schm_read_msr>
   11a2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11a2e:	9b00      	ldr	r3, [sp, #0]
   11a30:	f003 0301 	and.w	r3, r3, #1
   11a34:	2b00      	cmp	r3, #0
   11a36:	d100      	bne.n	11a3a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11a38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_43[u32CoreId] = msr;
   11a3a:	490a      	ldr	r1, [pc, #40]	; (11a64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x54>)
   11a3c:	9b01      	ldr	r3, [sp, #4]
   11a3e:	9a00      	ldr	r2, [sp, #0]
   11a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]++;
   11a44:	4a06      	ldr	r2, [pc, #24]	; (11a60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   11a46:	9b01      	ldr	r3, [sp, #4]
   11a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a4c:	1c5a      	adds	r2, r3, #1
   11a4e:	4904      	ldr	r1, [pc, #16]	; (11a60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   11a50:	9b01      	ldr	r3, [sp, #4]
   11a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11a56:	bf00      	nop
   11a58:	b003      	add	sp, #12
   11a5a:	f85d fb04 	ldr.w	pc, [sp], #4
   11a5e:	bf00      	nop
   11a60:	1fff94d0 	.word	0x1fff94d0
   11a64:	1fff94cc 	.word	0x1fff94cc

00011a68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   11a68:	b500      	push	{lr}
   11a6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a6c:	f7ef f934 	bl	cd8 <Sys_GetCoreID>
   11a70:	4603      	mov	r3, r0
   11a72:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]--;
   11a74:	4a0d      	ldr	r2, [pc, #52]	; (11aac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   11a76:	9b01      	ldr	r3, [sp, #4]
   11a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a7c:	1e5a      	subs	r2, r3, #1
   11a7e:	490b      	ldr	r1, [pc, #44]	; (11aac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   11a80:	9b01      	ldr	r3, [sp, #4]
   11a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
   11a86:	4a0a      	ldr	r2, [pc, #40]	; (11ab0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x48>)
   11a88:	9b01      	ldr	r3, [sp, #4]
   11a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a8e:	f003 0301 	and.w	r3, r3, #1
   11a92:	2b00      	cmp	r3, #0
   11a94:	d106      	bne.n	11aa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
   11a96:	4a05      	ldr	r2, [pc, #20]	; (11aac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   11a98:	9b01      	ldr	r3, [sp, #4]
   11a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a9e:	2b00      	cmp	r3, #0
   11aa0:	d100      	bne.n	11aa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11aa2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11aa4:	bf00      	nop
   11aa6:	b003      	add	sp, #12
   11aa8:	f85d fb04 	ldr.w	pc, [sp], #4
   11aac:	1fff94d0 	.word	0x1fff94d0
   11ab0:	1fff94cc 	.word	0x1fff94cc

00011ab4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   11ab4:	b500      	push	{lr}
   11ab6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ab8:	f7ef f90e 	bl	cd8 <Sys_GetCoreID>
   11abc:	4603      	mov	r3, r0
   11abe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId])
   11ac0:	4a10      	ldr	r2, [pc, #64]	; (11b04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   11ac2:	9b01      	ldr	r3, [sp, #4]
   11ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ac8:	2b00      	cmp	r3, #0
   11aca:	d10d      	bne.n	11ae8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11acc:	f7ee ff64 	bl	998 <Adc_schm_read_msr>
   11ad0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11ad2:	9b00      	ldr	r3, [sp, #0]
   11ad4:	f003 0301 	and.w	r3, r3, #1
   11ad8:	2b00      	cmp	r3, #0
   11ada:	d100      	bne.n	11ade <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11adc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_44[u32CoreId] = msr;
   11ade:	490a      	ldr	r1, [pc, #40]	; (11b08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x54>)
   11ae0:	9b01      	ldr	r3, [sp, #4]
   11ae2:	9a00      	ldr	r2, [sp, #0]
   11ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]++;
   11ae8:	4a06      	ldr	r2, [pc, #24]	; (11b04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   11aea:	9b01      	ldr	r3, [sp, #4]
   11aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11af0:	1c5a      	adds	r2, r3, #1
   11af2:	4904      	ldr	r1, [pc, #16]	; (11b04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   11af4:	9b01      	ldr	r3, [sp, #4]
   11af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11afa:	bf00      	nop
   11afc:	b003      	add	sp, #12
   11afe:	f85d fb04 	ldr.w	pc, [sp], #4
   11b02:	bf00      	nop
   11b04:	1fff94d8 	.word	0x1fff94d8
   11b08:	1fff94d4 	.word	0x1fff94d4

00011b0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   11b0c:	b500      	push	{lr}
   11b0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b10:	f7ef f8e2 	bl	cd8 <Sys_GetCoreID>
   11b14:	4603      	mov	r3, r0
   11b16:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]--;
   11b18:	4a0d      	ldr	r2, [pc, #52]	; (11b50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   11b1a:	9b01      	ldr	r3, [sp, #4]
   11b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b20:	1e5a      	subs	r2, r3, #1
   11b22:	490b      	ldr	r1, [pc, #44]	; (11b50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   11b24:	9b01      	ldr	r3, [sp, #4]
   11b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
   11b2a:	4a0a      	ldr	r2, [pc, #40]	; (11b54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x48>)
   11b2c:	9b01      	ldr	r3, [sp, #4]
   11b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b32:	f003 0301 	and.w	r3, r3, #1
   11b36:	2b00      	cmp	r3, #0
   11b38:	d106      	bne.n	11b48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
   11b3a:	4a05      	ldr	r2, [pc, #20]	; (11b50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   11b3c:	9b01      	ldr	r3, [sp, #4]
   11b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b42:	2b00      	cmp	r3, #0
   11b44:	d100      	bne.n	11b48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11b46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11b48:	bf00      	nop
   11b4a:	b003      	add	sp, #12
   11b4c:	f85d fb04 	ldr.w	pc, [sp], #4
   11b50:	1fff94d8 	.word	0x1fff94d8
   11b54:	1fff94d4 	.word	0x1fff94d4

00011b58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   11b58:	b500      	push	{lr}
   11b5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b5c:	f7ef f8bc 	bl	cd8 <Sys_GetCoreID>
   11b60:	4603      	mov	r3, r0
   11b62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId])
   11b64:	4a10      	ldr	r2, [pc, #64]	; (11ba8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   11b66:	9b01      	ldr	r3, [sp, #4]
   11b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b6c:	2b00      	cmp	r3, #0
   11b6e:	d10d      	bne.n	11b8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11b70:	f7ee ff12 	bl	998 <Adc_schm_read_msr>
   11b74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11b76:	9b00      	ldr	r3, [sp, #0]
   11b78:	f003 0301 	and.w	r3, r3, #1
   11b7c:	2b00      	cmp	r3, #0
   11b7e:	d100      	bne.n	11b82 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11b80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_45[u32CoreId] = msr;
   11b82:	490a      	ldr	r1, [pc, #40]	; (11bac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x54>)
   11b84:	9b01      	ldr	r3, [sp, #4]
   11b86:	9a00      	ldr	r2, [sp, #0]
   11b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]++;
   11b8c:	4a06      	ldr	r2, [pc, #24]	; (11ba8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   11b8e:	9b01      	ldr	r3, [sp, #4]
   11b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b94:	1c5a      	adds	r2, r3, #1
   11b96:	4904      	ldr	r1, [pc, #16]	; (11ba8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   11b98:	9b01      	ldr	r3, [sp, #4]
   11b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11b9e:	bf00      	nop
   11ba0:	b003      	add	sp, #12
   11ba2:	f85d fb04 	ldr.w	pc, [sp], #4
   11ba6:	bf00      	nop
   11ba8:	1fff94e0 	.word	0x1fff94e0
   11bac:	1fff94dc 	.word	0x1fff94dc

00011bb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   11bb0:	b500      	push	{lr}
   11bb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11bb4:	f7ef f890 	bl	cd8 <Sys_GetCoreID>
   11bb8:	4603      	mov	r3, r0
   11bba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]--;
   11bbc:	4a0d      	ldr	r2, [pc, #52]	; (11bf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   11bbe:	9b01      	ldr	r3, [sp, #4]
   11bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bc4:	1e5a      	subs	r2, r3, #1
   11bc6:	490b      	ldr	r1, [pc, #44]	; (11bf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   11bc8:	9b01      	ldr	r3, [sp, #4]
   11bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
   11bce:	4a0a      	ldr	r2, [pc, #40]	; (11bf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x48>)
   11bd0:	9b01      	ldr	r3, [sp, #4]
   11bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bd6:	f003 0301 	and.w	r3, r3, #1
   11bda:	2b00      	cmp	r3, #0
   11bdc:	d106      	bne.n	11bec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
   11bde:	4a05      	ldr	r2, [pc, #20]	; (11bf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   11be0:	9b01      	ldr	r3, [sp, #4]
   11be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11be6:	2b00      	cmp	r3, #0
   11be8:	d100      	bne.n	11bec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11bea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11bec:	bf00      	nop
   11bee:	b003      	add	sp, #12
   11bf0:	f85d fb04 	ldr.w	pc, [sp], #4
   11bf4:	1fff94e0 	.word	0x1fff94e0
   11bf8:	1fff94dc 	.word	0x1fff94dc

00011bfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   11bfc:	b500      	push	{lr}
   11bfe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c00:	f7ef f86a 	bl	cd8 <Sys_GetCoreID>
   11c04:	4603      	mov	r3, r0
   11c06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId])
   11c08:	4a10      	ldr	r2, [pc, #64]	; (11c4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   11c0a:	9b01      	ldr	r3, [sp, #4]
   11c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c10:	2b00      	cmp	r3, #0
   11c12:	d10d      	bne.n	11c30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11c14:	f7ee fec0 	bl	998 <Adc_schm_read_msr>
   11c18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11c1a:	9b00      	ldr	r3, [sp, #0]
   11c1c:	f003 0301 	and.w	r3, r3, #1
   11c20:	2b00      	cmp	r3, #0
   11c22:	d100      	bne.n	11c26 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11c24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_46[u32CoreId] = msr;
   11c26:	490a      	ldr	r1, [pc, #40]	; (11c50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x54>)
   11c28:	9b01      	ldr	r3, [sp, #4]
   11c2a:	9a00      	ldr	r2, [sp, #0]
   11c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]++;
   11c30:	4a06      	ldr	r2, [pc, #24]	; (11c4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   11c32:	9b01      	ldr	r3, [sp, #4]
   11c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c38:	1c5a      	adds	r2, r3, #1
   11c3a:	4904      	ldr	r1, [pc, #16]	; (11c4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   11c3c:	9b01      	ldr	r3, [sp, #4]
   11c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11c42:	bf00      	nop
   11c44:	b003      	add	sp, #12
   11c46:	f85d fb04 	ldr.w	pc, [sp], #4
   11c4a:	bf00      	nop
   11c4c:	1fff94e8 	.word	0x1fff94e8
   11c50:	1fff94e4 	.word	0x1fff94e4

00011c54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   11c54:	b500      	push	{lr}
   11c56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c58:	f7ef f83e 	bl	cd8 <Sys_GetCoreID>
   11c5c:	4603      	mov	r3, r0
   11c5e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]--;
   11c60:	4a0d      	ldr	r2, [pc, #52]	; (11c98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   11c62:	9b01      	ldr	r3, [sp, #4]
   11c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c68:	1e5a      	subs	r2, r3, #1
   11c6a:	490b      	ldr	r1, [pc, #44]	; (11c98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   11c6c:	9b01      	ldr	r3, [sp, #4]
   11c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
   11c72:	4a0a      	ldr	r2, [pc, #40]	; (11c9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x48>)
   11c74:	9b01      	ldr	r3, [sp, #4]
   11c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c7a:	f003 0301 	and.w	r3, r3, #1
   11c7e:	2b00      	cmp	r3, #0
   11c80:	d106      	bne.n	11c90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
   11c82:	4a05      	ldr	r2, [pc, #20]	; (11c98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   11c84:	9b01      	ldr	r3, [sp, #4]
   11c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c8a:	2b00      	cmp	r3, #0
   11c8c:	d100      	bne.n	11c90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11c8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11c90:	bf00      	nop
   11c92:	b003      	add	sp, #12
   11c94:	f85d fb04 	ldr.w	pc, [sp], #4
   11c98:	1fff94e8 	.word	0x1fff94e8
   11c9c:	1fff94e4 	.word	0x1fff94e4

00011ca0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   11ca0:	b500      	push	{lr}
   11ca2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ca4:	f7ef f818 	bl	cd8 <Sys_GetCoreID>
   11ca8:	4603      	mov	r3, r0
   11caa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId])
   11cac:	4a10      	ldr	r2, [pc, #64]	; (11cf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   11cae:	9b01      	ldr	r3, [sp, #4]
   11cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cb4:	2b00      	cmp	r3, #0
   11cb6:	d10d      	bne.n	11cd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11cb8:	f7ee fe6e 	bl	998 <Adc_schm_read_msr>
   11cbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11cbe:	9b00      	ldr	r3, [sp, #0]
   11cc0:	f003 0301 	and.w	r3, r3, #1
   11cc4:	2b00      	cmp	r3, #0
   11cc6:	d100      	bne.n	11cca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11cc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_47[u32CoreId] = msr;
   11cca:	490a      	ldr	r1, [pc, #40]	; (11cf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x54>)
   11ccc:	9b01      	ldr	r3, [sp, #4]
   11cce:	9a00      	ldr	r2, [sp, #0]
   11cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]++;
   11cd4:	4a06      	ldr	r2, [pc, #24]	; (11cf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   11cd6:	9b01      	ldr	r3, [sp, #4]
   11cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cdc:	1c5a      	adds	r2, r3, #1
   11cde:	4904      	ldr	r1, [pc, #16]	; (11cf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   11ce0:	9b01      	ldr	r3, [sp, #4]
   11ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11ce6:	bf00      	nop
   11ce8:	b003      	add	sp, #12
   11cea:	f85d fb04 	ldr.w	pc, [sp], #4
   11cee:	bf00      	nop
   11cf0:	1fff94f0 	.word	0x1fff94f0
   11cf4:	1fff94ec 	.word	0x1fff94ec

00011cf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   11cf8:	b500      	push	{lr}
   11cfa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11cfc:	f7ee ffec 	bl	cd8 <Sys_GetCoreID>
   11d00:	4603      	mov	r3, r0
   11d02:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]--;
   11d04:	4a0d      	ldr	r2, [pc, #52]	; (11d3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   11d06:	9b01      	ldr	r3, [sp, #4]
   11d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d0c:	1e5a      	subs	r2, r3, #1
   11d0e:	490b      	ldr	r1, [pc, #44]	; (11d3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   11d10:	9b01      	ldr	r3, [sp, #4]
   11d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_47[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]))         /*if interrupts were enabled*/
   11d16:	4a0a      	ldr	r2, [pc, #40]	; (11d40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x48>)
   11d18:	9b01      	ldr	r3, [sp, #4]
   11d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d1e:	f003 0301 	and.w	r3, r3, #1
   11d22:	2b00      	cmp	r3, #0
   11d24:	d106      	bne.n	11d34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
   11d26:	4a05      	ldr	r2, [pc, #20]	; (11d3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   11d28:	9b01      	ldr	r3, [sp, #4]
   11d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d2e:	2b00      	cmp	r3, #0
   11d30:	d100      	bne.n	11d34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11d32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11d34:	bf00      	nop
   11d36:	b003      	add	sp, #12
   11d38:	f85d fb04 	ldr.w	pc, [sp], #4
   11d3c:	1fff94f0 	.word	0x1fff94f0
   11d40:	1fff94ec 	.word	0x1fff94ec

00011d44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   11d44:	b500      	push	{lr}
   11d46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d48:	f7ee ffc6 	bl	cd8 <Sys_GetCoreID>
   11d4c:	4603      	mov	r3, r0
   11d4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId])
   11d50:	4a10      	ldr	r2, [pc, #64]	; (11d94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   11d52:	9b01      	ldr	r3, [sp, #4]
   11d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d58:	2b00      	cmp	r3, #0
   11d5a:	d10d      	bne.n	11d78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11d5c:	f7ee fe1c 	bl	998 <Adc_schm_read_msr>
   11d60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11d62:	9b00      	ldr	r3, [sp, #0]
   11d64:	f003 0301 	and.w	r3, r3, #1
   11d68:	2b00      	cmp	r3, #0
   11d6a:	d100      	bne.n	11d6e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11d6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_48[u32CoreId] = msr;
   11d6e:	490a      	ldr	r1, [pc, #40]	; (11d98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x54>)
   11d70:	9b01      	ldr	r3, [sp, #4]
   11d72:	9a00      	ldr	r2, [sp, #0]
   11d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]++;
   11d78:	4a06      	ldr	r2, [pc, #24]	; (11d94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   11d7a:	9b01      	ldr	r3, [sp, #4]
   11d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d80:	1c5a      	adds	r2, r3, #1
   11d82:	4904      	ldr	r1, [pc, #16]	; (11d94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   11d84:	9b01      	ldr	r3, [sp, #4]
   11d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11d8a:	bf00      	nop
   11d8c:	b003      	add	sp, #12
   11d8e:	f85d fb04 	ldr.w	pc, [sp], #4
   11d92:	bf00      	nop
   11d94:	1fff94f8 	.word	0x1fff94f8
   11d98:	1fff94f4 	.word	0x1fff94f4

00011d9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   11d9c:	b500      	push	{lr}
   11d9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11da0:	f7ee ff9a 	bl	cd8 <Sys_GetCoreID>
   11da4:	4603      	mov	r3, r0
   11da6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]--;
   11da8:	4a0d      	ldr	r2, [pc, #52]	; (11de0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   11daa:	9b01      	ldr	r3, [sp, #4]
   11dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11db0:	1e5a      	subs	r2, r3, #1
   11db2:	490b      	ldr	r1, [pc, #44]	; (11de0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   11db4:	9b01      	ldr	r3, [sp, #4]
   11db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_48[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]))         /*if interrupts were enabled*/
   11dba:	4a0a      	ldr	r2, [pc, #40]	; (11de4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x48>)
   11dbc:	9b01      	ldr	r3, [sp, #4]
   11dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dc2:	f003 0301 	and.w	r3, r3, #1
   11dc6:	2b00      	cmp	r3, #0
   11dc8:	d106      	bne.n	11dd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
   11dca:	4a05      	ldr	r2, [pc, #20]	; (11de0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   11dcc:	9b01      	ldr	r3, [sp, #4]
   11dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dd2:	2b00      	cmp	r3, #0
   11dd4:	d100      	bne.n	11dd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11dd6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11dd8:	bf00      	nop
   11dda:	b003      	add	sp, #12
   11ddc:	f85d fb04 	ldr.w	pc, [sp], #4
   11de0:	1fff94f8 	.word	0x1fff94f8
   11de4:	1fff94f4 	.word	0x1fff94f4

00011de8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   11de8:	b500      	push	{lr}
   11dea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11dec:	f7ee ff74 	bl	cd8 <Sys_GetCoreID>
   11df0:	4603      	mov	r3, r0
   11df2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId])
   11df4:	4a10      	ldr	r2, [pc, #64]	; (11e38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   11df6:	9b01      	ldr	r3, [sp, #4]
   11df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dfc:	2b00      	cmp	r3, #0
   11dfe:	d10d      	bne.n	11e1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11e00:	f7ee fdca 	bl	998 <Adc_schm_read_msr>
   11e04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11e06:	9b00      	ldr	r3, [sp, #0]
   11e08:	f003 0301 	and.w	r3, r3, #1
   11e0c:	2b00      	cmp	r3, #0
   11e0e:	d100      	bne.n	11e12 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11e10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_49[u32CoreId] = msr;
   11e12:	490a      	ldr	r1, [pc, #40]	; (11e3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x54>)
   11e14:	9b01      	ldr	r3, [sp, #4]
   11e16:	9a00      	ldr	r2, [sp, #0]
   11e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]++;
   11e1c:	4a06      	ldr	r2, [pc, #24]	; (11e38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   11e1e:	9b01      	ldr	r3, [sp, #4]
   11e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e24:	1c5a      	adds	r2, r3, #1
   11e26:	4904      	ldr	r1, [pc, #16]	; (11e38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   11e28:	9b01      	ldr	r3, [sp, #4]
   11e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11e2e:	bf00      	nop
   11e30:	b003      	add	sp, #12
   11e32:	f85d fb04 	ldr.w	pc, [sp], #4
   11e36:	bf00      	nop
   11e38:	1fff9500 	.word	0x1fff9500
   11e3c:	1fff94fc 	.word	0x1fff94fc

00011e40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   11e40:	b500      	push	{lr}
   11e42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e44:	f7ee ff48 	bl	cd8 <Sys_GetCoreID>
   11e48:	4603      	mov	r3, r0
   11e4a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]--;
   11e4c:	4a0d      	ldr	r2, [pc, #52]	; (11e84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   11e4e:	9b01      	ldr	r3, [sp, #4]
   11e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e54:	1e5a      	subs	r2, r3, #1
   11e56:	490b      	ldr	r1, [pc, #44]	; (11e84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   11e58:	9b01      	ldr	r3, [sp, #4]
   11e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_49[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]))         /*if interrupts were enabled*/
   11e5e:	4a0a      	ldr	r2, [pc, #40]	; (11e88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x48>)
   11e60:	9b01      	ldr	r3, [sp, #4]
   11e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e66:	f003 0301 	and.w	r3, r3, #1
   11e6a:	2b00      	cmp	r3, #0
   11e6c:	d106      	bne.n	11e7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
   11e6e:	4a05      	ldr	r2, [pc, #20]	; (11e84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   11e70:	9b01      	ldr	r3, [sp, #4]
   11e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e76:	2b00      	cmp	r3, #0
   11e78:	d100      	bne.n	11e7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11e7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11e7c:	bf00      	nop
   11e7e:	b003      	add	sp, #12
   11e80:	f85d fb04 	ldr.w	pc, [sp], #4
   11e84:	1fff9500 	.word	0x1fff9500
   11e88:	1fff94fc 	.word	0x1fff94fc

00011e8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   11e8c:	b500      	push	{lr}
   11e8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e90:	f7ee ff22 	bl	cd8 <Sys_GetCoreID>
   11e94:	4603      	mov	r3, r0
   11e96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId])
   11e98:	4a10      	ldr	r2, [pc, #64]	; (11edc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   11e9a:	9b01      	ldr	r3, [sp, #4]
   11e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ea0:	2b00      	cmp	r3, #0
   11ea2:	d10d      	bne.n	11ec0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11ea4:	f7ee fd78 	bl	998 <Adc_schm_read_msr>
   11ea8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11eaa:	9b00      	ldr	r3, [sp, #0]
   11eac:	f003 0301 	and.w	r3, r3, #1
   11eb0:	2b00      	cmp	r3, #0
   11eb2:	d100      	bne.n	11eb6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11eb4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_50[u32CoreId] = msr;
   11eb6:	490a      	ldr	r1, [pc, #40]	; (11ee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x54>)
   11eb8:	9b01      	ldr	r3, [sp, #4]
   11eba:	9a00      	ldr	r2, [sp, #0]
   11ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]++;
   11ec0:	4a06      	ldr	r2, [pc, #24]	; (11edc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   11ec2:	9b01      	ldr	r3, [sp, #4]
   11ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ec8:	1c5a      	adds	r2, r3, #1
   11eca:	4904      	ldr	r1, [pc, #16]	; (11edc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   11ecc:	9b01      	ldr	r3, [sp, #4]
   11ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11ed2:	bf00      	nop
   11ed4:	b003      	add	sp, #12
   11ed6:	f85d fb04 	ldr.w	pc, [sp], #4
   11eda:	bf00      	nop
   11edc:	1fff9508 	.word	0x1fff9508
   11ee0:	1fff9504 	.word	0x1fff9504

00011ee4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   11ee4:	b500      	push	{lr}
   11ee6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ee8:	f7ee fef6 	bl	cd8 <Sys_GetCoreID>
   11eec:	4603      	mov	r3, r0
   11eee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]--;
   11ef0:	4a0d      	ldr	r2, [pc, #52]	; (11f28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   11ef2:	9b01      	ldr	r3, [sp, #4]
   11ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ef8:	1e5a      	subs	r2, r3, #1
   11efa:	490b      	ldr	r1, [pc, #44]	; (11f28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   11efc:	9b01      	ldr	r3, [sp, #4]
   11efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
   11f02:	4a0a      	ldr	r2, [pc, #40]	; (11f2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x48>)
   11f04:	9b01      	ldr	r3, [sp, #4]
   11f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f0a:	f003 0301 	and.w	r3, r3, #1
   11f0e:	2b00      	cmp	r3, #0
   11f10:	d106      	bne.n	11f20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
   11f12:	4a05      	ldr	r2, [pc, #20]	; (11f28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   11f14:	9b01      	ldr	r3, [sp, #4]
   11f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f1a:	2b00      	cmp	r3, #0
   11f1c:	d100      	bne.n	11f20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11f1e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11f20:	bf00      	nop
   11f22:	b003      	add	sp, #12
   11f24:	f85d fb04 	ldr.w	pc, [sp], #4
   11f28:	1fff9508 	.word	0x1fff9508
   11f2c:	1fff9504 	.word	0x1fff9504

00011f30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   11f30:	b500      	push	{lr}
   11f32:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f34:	f7ee fed0 	bl	cd8 <Sys_GetCoreID>
   11f38:	4603      	mov	r3, r0
   11f3a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId])
   11f3c:	4a10      	ldr	r2, [pc, #64]	; (11f80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   11f3e:	9b01      	ldr	r3, [sp, #4]
   11f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f44:	2b00      	cmp	r3, #0
   11f46:	d10d      	bne.n	11f64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11f48:	f7ee fd26 	bl	998 <Adc_schm_read_msr>
   11f4c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11f4e:	9b00      	ldr	r3, [sp, #0]
   11f50:	f003 0301 	and.w	r3, r3, #1
   11f54:	2b00      	cmp	r3, #0
   11f56:	d100      	bne.n	11f5a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11f58:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_51[u32CoreId] = msr;
   11f5a:	490a      	ldr	r1, [pc, #40]	; (11f84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x54>)
   11f5c:	9b01      	ldr	r3, [sp, #4]
   11f5e:	9a00      	ldr	r2, [sp, #0]
   11f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]++;
   11f64:	4a06      	ldr	r2, [pc, #24]	; (11f80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   11f66:	9b01      	ldr	r3, [sp, #4]
   11f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f6c:	1c5a      	adds	r2, r3, #1
   11f6e:	4904      	ldr	r1, [pc, #16]	; (11f80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   11f70:	9b01      	ldr	r3, [sp, #4]
   11f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11f76:	bf00      	nop
   11f78:	b003      	add	sp, #12
   11f7a:	f85d fb04 	ldr.w	pc, [sp], #4
   11f7e:	bf00      	nop
   11f80:	1fff9510 	.word	0x1fff9510
   11f84:	1fff950c 	.word	0x1fff950c

00011f88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   11f88:	b500      	push	{lr}
   11f8a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f8c:	f7ee fea4 	bl	cd8 <Sys_GetCoreID>
   11f90:	4603      	mov	r3, r0
   11f92:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]--;
   11f94:	4a0d      	ldr	r2, [pc, #52]	; (11fcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   11f96:	9b01      	ldr	r3, [sp, #4]
   11f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f9c:	1e5a      	subs	r2, r3, #1
   11f9e:	490b      	ldr	r1, [pc, #44]	; (11fcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   11fa0:	9b01      	ldr	r3, [sp, #4]
   11fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
   11fa6:	4a0a      	ldr	r2, [pc, #40]	; (11fd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x48>)
   11fa8:	9b01      	ldr	r3, [sp, #4]
   11faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fae:	f003 0301 	and.w	r3, r3, #1
   11fb2:	2b00      	cmp	r3, #0
   11fb4:	d106      	bne.n	11fc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
   11fb6:	4a05      	ldr	r2, [pc, #20]	; (11fcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   11fb8:	9b01      	ldr	r3, [sp, #4]
   11fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fbe:	2b00      	cmp	r3, #0
   11fc0:	d100      	bne.n	11fc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11fc2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11fc4:	bf00      	nop
   11fc6:	b003      	add	sp, #12
   11fc8:	f85d fb04 	ldr.w	pc, [sp], #4
   11fcc:	1fff9510 	.word	0x1fff9510
   11fd0:	1fff950c 	.word	0x1fff950c

00011fd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   11fd4:	b500      	push	{lr}
   11fd6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11fd8:	f7ee fe7e 	bl	cd8 <Sys_GetCoreID>
   11fdc:	4603      	mov	r3, r0
   11fde:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId])
   11fe0:	4a10      	ldr	r2, [pc, #64]	; (12024 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   11fe2:	9b01      	ldr	r3, [sp, #4]
   11fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fe8:	2b00      	cmp	r3, #0
   11fea:	d10d      	bne.n	12008 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11fec:	f7ee fcd4 	bl	998 <Adc_schm_read_msr>
   11ff0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11ff2:	9b00      	ldr	r3, [sp, #0]
   11ff4:	f003 0301 	and.w	r3, r3, #1
   11ff8:	2b00      	cmp	r3, #0
   11ffa:	d100      	bne.n	11ffe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11ffc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_54[u32CoreId] = msr;
   11ffe:	490a      	ldr	r1, [pc, #40]	; (12028 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x54>)
   12000:	9b01      	ldr	r3, [sp, #4]
   12002:	9a00      	ldr	r2, [sp, #0]
   12004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]++;
   12008:	4a06      	ldr	r2, [pc, #24]	; (12024 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   1200a:	9b01      	ldr	r3, [sp, #4]
   1200c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12010:	1c5a      	adds	r2, r3, #1
   12012:	4904      	ldr	r1, [pc, #16]	; (12024 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   12014:	9b01      	ldr	r3, [sp, #4]
   12016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1201a:	bf00      	nop
   1201c:	b003      	add	sp, #12
   1201e:	f85d fb04 	ldr.w	pc, [sp], #4
   12022:	bf00      	nop
   12024:	1fff9518 	.word	0x1fff9518
   12028:	1fff9514 	.word	0x1fff9514

0001202c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   1202c:	b500      	push	{lr}
   1202e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12030:	f7ee fe52 	bl	cd8 <Sys_GetCoreID>
   12034:	4603      	mov	r3, r0
   12036:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]--;
   12038:	4a0d      	ldr	r2, [pc, #52]	; (12070 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   1203a:	9b01      	ldr	r3, [sp, #4]
   1203c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12040:	1e5a      	subs	r2, r3, #1
   12042:	490b      	ldr	r1, [pc, #44]	; (12070 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   12044:	9b01      	ldr	r3, [sp, #4]
   12046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
   1204a:	4a0a      	ldr	r2, [pc, #40]	; (12074 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x48>)
   1204c:	9b01      	ldr	r3, [sp, #4]
   1204e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12052:	f003 0301 	and.w	r3, r3, #1
   12056:	2b00      	cmp	r3, #0
   12058:	d106      	bne.n	12068 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
   1205a:	4a05      	ldr	r2, [pc, #20]	; (12070 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   1205c:	9b01      	ldr	r3, [sp, #4]
   1205e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12062:	2b00      	cmp	r3, #0
   12064:	d100      	bne.n	12068 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12066:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12068:	bf00      	nop
   1206a:	b003      	add	sp, #12
   1206c:	f85d fb04 	ldr.w	pc, [sp], #4
   12070:	1fff9518 	.word	0x1fff9518
   12074:	1fff9514 	.word	0x1fff9514

00012078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   12078:	b500      	push	{lr}
   1207a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1207c:	f7ee fe2c 	bl	cd8 <Sys_GetCoreID>
   12080:	4603      	mov	r3, r0
   12082:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId])
   12084:	4a10      	ldr	r2, [pc, #64]	; (120c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   12086:	9b01      	ldr	r3, [sp, #4]
   12088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1208c:	2b00      	cmp	r3, #0
   1208e:	d10d      	bne.n	120ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12090:	f7ee fc82 	bl	998 <Adc_schm_read_msr>
   12094:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12096:	9b00      	ldr	r3, [sp, #0]
   12098:	f003 0301 	and.w	r3, r3, #1
   1209c:	2b00      	cmp	r3, #0
   1209e:	d100      	bne.n	120a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   120a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_55[u32CoreId] = msr;
   120a2:	490a      	ldr	r1, [pc, #40]	; (120cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x54>)
   120a4:	9b01      	ldr	r3, [sp, #4]
   120a6:	9a00      	ldr	r2, [sp, #0]
   120a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]++;
   120ac:	4a06      	ldr	r2, [pc, #24]	; (120c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   120ae:	9b01      	ldr	r3, [sp, #4]
   120b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120b4:	1c5a      	adds	r2, r3, #1
   120b6:	4904      	ldr	r1, [pc, #16]	; (120c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   120b8:	9b01      	ldr	r3, [sp, #4]
   120ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   120be:	bf00      	nop
   120c0:	b003      	add	sp, #12
   120c2:	f85d fb04 	ldr.w	pc, [sp], #4
   120c6:	bf00      	nop
   120c8:	1fff9520 	.word	0x1fff9520
   120cc:	1fff951c 	.word	0x1fff951c

000120d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   120d0:	b500      	push	{lr}
   120d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   120d4:	f7ee fe00 	bl	cd8 <Sys_GetCoreID>
   120d8:	4603      	mov	r3, r0
   120da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]--;
   120dc:	4a0d      	ldr	r2, [pc, #52]	; (12114 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   120de:	9b01      	ldr	r3, [sp, #4]
   120e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120e4:	1e5a      	subs	r2, r3, #1
   120e6:	490b      	ldr	r1, [pc, #44]	; (12114 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   120e8:	9b01      	ldr	r3, [sp, #4]
   120ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
   120ee:	4a0a      	ldr	r2, [pc, #40]	; (12118 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x48>)
   120f0:	9b01      	ldr	r3, [sp, #4]
   120f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120f6:	f003 0301 	and.w	r3, r3, #1
   120fa:	2b00      	cmp	r3, #0
   120fc:	d106      	bne.n	1210c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
   120fe:	4a05      	ldr	r2, [pc, #20]	; (12114 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   12100:	9b01      	ldr	r3, [sp, #4]
   12102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12106:	2b00      	cmp	r3, #0
   12108:	d100      	bne.n	1210c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1210a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1210c:	bf00      	nop
   1210e:	b003      	add	sp, #12
   12110:	f85d fb04 	ldr.w	pc, [sp], #4
   12114:	1fff9520 	.word	0x1fff9520
   12118:	1fff951c 	.word	0x1fff951c

0001211c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   1211c:	b500      	push	{lr}
   1211e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12120:	f7ee fdda 	bl	cd8 <Sys_GetCoreID>
   12124:	4603      	mov	r3, r0
   12126:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId])
   12128:	4a10      	ldr	r2, [pc, #64]	; (1216c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   1212a:	9b01      	ldr	r3, [sp, #4]
   1212c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12130:	2b00      	cmp	r3, #0
   12132:	d10d      	bne.n	12150 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12134:	f7ee fc30 	bl	998 <Adc_schm_read_msr>
   12138:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1213a:	9b00      	ldr	r3, [sp, #0]
   1213c:	f003 0301 	and.w	r3, r3, #1
   12140:	2b00      	cmp	r3, #0
   12142:	d100      	bne.n	12146 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12144:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_56[u32CoreId] = msr;
   12146:	490a      	ldr	r1, [pc, #40]	; (12170 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x54>)
   12148:	9b01      	ldr	r3, [sp, #4]
   1214a:	9a00      	ldr	r2, [sp, #0]
   1214c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]++;
   12150:	4a06      	ldr	r2, [pc, #24]	; (1216c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   12152:	9b01      	ldr	r3, [sp, #4]
   12154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12158:	1c5a      	adds	r2, r3, #1
   1215a:	4904      	ldr	r1, [pc, #16]	; (1216c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   1215c:	9b01      	ldr	r3, [sp, #4]
   1215e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12162:	bf00      	nop
   12164:	b003      	add	sp, #12
   12166:	f85d fb04 	ldr.w	pc, [sp], #4
   1216a:	bf00      	nop
   1216c:	1fff9528 	.word	0x1fff9528
   12170:	1fff9524 	.word	0x1fff9524

00012174 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   12174:	b500      	push	{lr}
   12176:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12178:	f7ee fdae 	bl	cd8 <Sys_GetCoreID>
   1217c:	4603      	mov	r3, r0
   1217e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]--;
   12180:	4a0d      	ldr	r2, [pc, #52]	; (121b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   12182:	9b01      	ldr	r3, [sp, #4]
   12184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12188:	1e5a      	subs	r2, r3, #1
   1218a:	490b      	ldr	r1, [pc, #44]	; (121b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   1218c:	9b01      	ldr	r3, [sp, #4]
   1218e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
   12192:	4a0a      	ldr	r2, [pc, #40]	; (121bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x48>)
   12194:	9b01      	ldr	r3, [sp, #4]
   12196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1219a:	f003 0301 	and.w	r3, r3, #1
   1219e:	2b00      	cmp	r3, #0
   121a0:	d106      	bne.n	121b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
   121a2:	4a05      	ldr	r2, [pc, #20]	; (121b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   121a4:	9b01      	ldr	r3, [sp, #4]
   121a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121aa:	2b00      	cmp	r3, #0
   121ac:	d100      	bne.n	121b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   121ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   121b0:	bf00      	nop
   121b2:	b003      	add	sp, #12
   121b4:	f85d fb04 	ldr.w	pc, [sp], #4
   121b8:	1fff9528 	.word	0x1fff9528
   121bc:	1fff9524 	.word	0x1fff9524

000121c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   121c0:	b500      	push	{lr}
   121c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   121c4:	f7ee fd88 	bl	cd8 <Sys_GetCoreID>
   121c8:	4603      	mov	r3, r0
   121ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId])
   121cc:	4a10      	ldr	r2, [pc, #64]	; (12210 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   121ce:	9b01      	ldr	r3, [sp, #4]
   121d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121d4:	2b00      	cmp	r3, #0
   121d6:	d10d      	bne.n	121f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   121d8:	f7ee fbde 	bl	998 <Adc_schm_read_msr>
   121dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   121de:	9b00      	ldr	r3, [sp, #0]
   121e0:	f003 0301 	and.w	r3, r3, #1
   121e4:	2b00      	cmp	r3, #0
   121e6:	d100      	bne.n	121ea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   121e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_57[u32CoreId] = msr;
   121ea:	490a      	ldr	r1, [pc, #40]	; (12214 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x54>)
   121ec:	9b01      	ldr	r3, [sp, #4]
   121ee:	9a00      	ldr	r2, [sp, #0]
   121f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]++;
   121f4:	4a06      	ldr	r2, [pc, #24]	; (12210 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   121f6:	9b01      	ldr	r3, [sp, #4]
   121f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121fc:	1c5a      	adds	r2, r3, #1
   121fe:	4904      	ldr	r1, [pc, #16]	; (12210 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   12200:	9b01      	ldr	r3, [sp, #4]
   12202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12206:	bf00      	nop
   12208:	b003      	add	sp, #12
   1220a:	f85d fb04 	ldr.w	pc, [sp], #4
   1220e:	bf00      	nop
   12210:	1fff9530 	.word	0x1fff9530
   12214:	1fff952c 	.word	0x1fff952c

00012218 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   12218:	b500      	push	{lr}
   1221a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1221c:	f7ee fd5c 	bl	cd8 <Sys_GetCoreID>
   12220:	4603      	mov	r3, r0
   12222:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]--;
   12224:	4a0d      	ldr	r2, [pc, #52]	; (1225c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   12226:	9b01      	ldr	r3, [sp, #4]
   12228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1222c:	1e5a      	subs	r2, r3, #1
   1222e:	490b      	ldr	r1, [pc, #44]	; (1225c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   12230:	9b01      	ldr	r3, [sp, #4]
   12232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_57[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]))         /*if interrupts were enabled*/
   12236:	4a0a      	ldr	r2, [pc, #40]	; (12260 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x48>)
   12238:	9b01      	ldr	r3, [sp, #4]
   1223a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1223e:	f003 0301 	and.w	r3, r3, #1
   12242:	2b00      	cmp	r3, #0
   12244:	d106      	bne.n	12254 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
   12246:	4a05      	ldr	r2, [pc, #20]	; (1225c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   12248:	9b01      	ldr	r3, [sp, #4]
   1224a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1224e:	2b00      	cmp	r3, #0
   12250:	d100      	bne.n	12254 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12252:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12254:	bf00      	nop
   12256:	b003      	add	sp, #12
   12258:	f85d fb04 	ldr.w	pc, [sp], #4
   1225c:	1fff9530 	.word	0x1fff9530
   12260:	1fff952c 	.word	0x1fff952c

00012264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   12264:	b500      	push	{lr}
   12266:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12268:	f7ee fd36 	bl	cd8 <Sys_GetCoreID>
   1226c:	4603      	mov	r3, r0
   1226e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId])
   12270:	4a10      	ldr	r2, [pc, #64]	; (122b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   12272:	9b01      	ldr	r3, [sp, #4]
   12274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12278:	2b00      	cmp	r3, #0
   1227a:	d10d      	bne.n	12298 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1227c:	f7ee fb8c 	bl	998 <Adc_schm_read_msr>
   12280:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12282:	9b00      	ldr	r3, [sp, #0]
   12284:	f003 0301 	and.w	r3, r3, #1
   12288:	2b00      	cmp	r3, #0
   1228a:	d100      	bne.n	1228e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1228c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_58[u32CoreId] = msr;
   1228e:	490a      	ldr	r1, [pc, #40]	; (122b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x54>)
   12290:	9b01      	ldr	r3, [sp, #4]
   12292:	9a00      	ldr	r2, [sp, #0]
   12294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]++;
   12298:	4a06      	ldr	r2, [pc, #24]	; (122b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   1229a:	9b01      	ldr	r3, [sp, #4]
   1229c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122a0:	1c5a      	adds	r2, r3, #1
   122a2:	4904      	ldr	r1, [pc, #16]	; (122b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   122a4:	9b01      	ldr	r3, [sp, #4]
   122a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   122aa:	bf00      	nop
   122ac:	b003      	add	sp, #12
   122ae:	f85d fb04 	ldr.w	pc, [sp], #4
   122b2:	bf00      	nop
   122b4:	1fff9538 	.word	0x1fff9538
   122b8:	1fff9534 	.word	0x1fff9534

000122bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   122bc:	b500      	push	{lr}
   122be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   122c0:	f7ee fd0a 	bl	cd8 <Sys_GetCoreID>
   122c4:	4603      	mov	r3, r0
   122c6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]--;
   122c8:	4a0d      	ldr	r2, [pc, #52]	; (12300 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   122ca:	9b01      	ldr	r3, [sp, #4]
   122cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122d0:	1e5a      	subs	r2, r3, #1
   122d2:	490b      	ldr	r1, [pc, #44]	; (12300 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   122d4:	9b01      	ldr	r3, [sp, #4]
   122d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_58[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]))         /*if interrupts were enabled*/
   122da:	4a0a      	ldr	r2, [pc, #40]	; (12304 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x48>)
   122dc:	9b01      	ldr	r3, [sp, #4]
   122de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122e2:	f003 0301 	and.w	r3, r3, #1
   122e6:	2b00      	cmp	r3, #0
   122e8:	d106      	bne.n	122f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
   122ea:	4a05      	ldr	r2, [pc, #20]	; (12300 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   122ec:	9b01      	ldr	r3, [sp, #4]
   122ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122f2:	2b00      	cmp	r3, #0
   122f4:	d100      	bne.n	122f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   122f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   122f8:	bf00      	nop
   122fa:	b003      	add	sp, #12
   122fc:	f85d fb04 	ldr.w	pc, [sp], #4
   12300:	1fff9538 	.word	0x1fff9538
   12304:	1fff9534 	.word	0x1fff9534

00012308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   12308:	b500      	push	{lr}
   1230a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1230c:	f7ee fce4 	bl	cd8 <Sys_GetCoreID>
   12310:	4603      	mov	r3, r0
   12312:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId])
   12314:	4a10      	ldr	r2, [pc, #64]	; (12358 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   12316:	9b01      	ldr	r3, [sp, #4]
   12318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1231c:	2b00      	cmp	r3, #0
   1231e:	d10d      	bne.n	1233c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12320:	f7ee fb3a 	bl	998 <Adc_schm_read_msr>
   12324:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12326:	9b00      	ldr	r3, [sp, #0]
   12328:	f003 0301 	and.w	r3, r3, #1
   1232c:	2b00      	cmp	r3, #0
   1232e:	d100      	bne.n	12332 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12330:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_59[u32CoreId] = msr;
   12332:	490a      	ldr	r1, [pc, #40]	; (1235c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x54>)
   12334:	9b01      	ldr	r3, [sp, #4]
   12336:	9a00      	ldr	r2, [sp, #0]
   12338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]++;
   1233c:	4a06      	ldr	r2, [pc, #24]	; (12358 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   1233e:	9b01      	ldr	r3, [sp, #4]
   12340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12344:	1c5a      	adds	r2, r3, #1
   12346:	4904      	ldr	r1, [pc, #16]	; (12358 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   12348:	9b01      	ldr	r3, [sp, #4]
   1234a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1234e:	bf00      	nop
   12350:	b003      	add	sp, #12
   12352:	f85d fb04 	ldr.w	pc, [sp], #4
   12356:	bf00      	nop
   12358:	1fff9540 	.word	0x1fff9540
   1235c:	1fff953c 	.word	0x1fff953c

00012360 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   12360:	b500      	push	{lr}
   12362:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12364:	f7ee fcb8 	bl	cd8 <Sys_GetCoreID>
   12368:	4603      	mov	r3, r0
   1236a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]--;
   1236c:	4a0d      	ldr	r2, [pc, #52]	; (123a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   1236e:	9b01      	ldr	r3, [sp, #4]
   12370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12374:	1e5a      	subs	r2, r3, #1
   12376:	490b      	ldr	r1, [pc, #44]	; (123a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   12378:	9b01      	ldr	r3, [sp, #4]
   1237a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_59[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]))         /*if interrupts were enabled*/
   1237e:	4a0a      	ldr	r2, [pc, #40]	; (123a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x48>)
   12380:	9b01      	ldr	r3, [sp, #4]
   12382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12386:	f003 0301 	and.w	r3, r3, #1
   1238a:	2b00      	cmp	r3, #0
   1238c:	d106      	bne.n	1239c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
   1238e:	4a05      	ldr	r2, [pc, #20]	; (123a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   12390:	9b01      	ldr	r3, [sp, #4]
   12392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12396:	2b00      	cmp	r3, #0
   12398:	d100      	bne.n	1239c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1239a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1239c:	bf00      	nop
   1239e:	b003      	add	sp, #12
   123a0:	f85d fb04 	ldr.w	pc, [sp], #4
   123a4:	1fff9540 	.word	0x1fff9540
   123a8:	1fff953c 	.word	0x1fff953c

000123ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   123ac:	b500      	push	{lr}
   123ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   123b0:	f7ee fc92 	bl	cd8 <Sys_GetCoreID>
   123b4:	4603      	mov	r3, r0
   123b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId])
   123b8:	4a10      	ldr	r2, [pc, #64]	; (123fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   123ba:	9b01      	ldr	r3, [sp, #4]
   123bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123c0:	2b00      	cmp	r3, #0
   123c2:	d10d      	bne.n	123e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   123c4:	f7ee fae8 	bl	998 <Adc_schm_read_msr>
   123c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   123ca:	9b00      	ldr	r3, [sp, #0]
   123cc:	f003 0301 	and.w	r3, r3, #1
   123d0:	2b00      	cmp	r3, #0
   123d2:	d100      	bne.n	123d6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   123d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_60[u32CoreId] = msr;
   123d6:	490a      	ldr	r1, [pc, #40]	; (12400 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x54>)
   123d8:	9b01      	ldr	r3, [sp, #4]
   123da:	9a00      	ldr	r2, [sp, #0]
   123dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]++;
   123e0:	4a06      	ldr	r2, [pc, #24]	; (123fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   123e2:	9b01      	ldr	r3, [sp, #4]
   123e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123e8:	1c5a      	adds	r2, r3, #1
   123ea:	4904      	ldr	r1, [pc, #16]	; (123fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   123ec:	9b01      	ldr	r3, [sp, #4]
   123ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   123f2:	bf00      	nop
   123f4:	b003      	add	sp, #12
   123f6:	f85d fb04 	ldr.w	pc, [sp], #4
   123fa:	bf00      	nop
   123fc:	1fff9548 	.word	0x1fff9548
   12400:	1fff9544 	.word	0x1fff9544

00012404 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   12404:	b500      	push	{lr}
   12406:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12408:	f7ee fc66 	bl	cd8 <Sys_GetCoreID>
   1240c:	4603      	mov	r3, r0
   1240e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]--;
   12410:	4a0d      	ldr	r2, [pc, #52]	; (12448 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   12412:	9b01      	ldr	r3, [sp, #4]
   12414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12418:	1e5a      	subs	r2, r3, #1
   1241a:	490b      	ldr	r1, [pc, #44]	; (12448 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   1241c:	9b01      	ldr	r3, [sp, #4]
   1241e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
   12422:	4a0a      	ldr	r2, [pc, #40]	; (1244c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x48>)
   12424:	9b01      	ldr	r3, [sp, #4]
   12426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1242a:	f003 0301 	and.w	r3, r3, #1
   1242e:	2b00      	cmp	r3, #0
   12430:	d106      	bne.n	12440 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
   12432:	4a05      	ldr	r2, [pc, #20]	; (12448 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   12434:	9b01      	ldr	r3, [sp, #4]
   12436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1243a:	2b00      	cmp	r3, #0
   1243c:	d100      	bne.n	12440 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1243e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12440:	bf00      	nop
   12442:	b003      	add	sp, #12
   12444:	f85d fb04 	ldr.w	pc, [sp], #4
   12448:	1fff9548 	.word	0x1fff9548
   1244c:	1fff9544 	.word	0x1fff9544

00012450 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   12450:	b500      	push	{lr}
   12452:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12454:	f7ee fc40 	bl	cd8 <Sys_GetCoreID>
   12458:	4603      	mov	r3, r0
   1245a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId])
   1245c:	4a10      	ldr	r2, [pc, #64]	; (124a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   1245e:	9b01      	ldr	r3, [sp, #4]
   12460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12464:	2b00      	cmp	r3, #0
   12466:	d10d      	bne.n	12484 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12468:	f7ee fa96 	bl	998 <Adc_schm_read_msr>
   1246c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1246e:	9b00      	ldr	r3, [sp, #0]
   12470:	f003 0301 	and.w	r3, r3, #1
   12474:	2b00      	cmp	r3, #0
   12476:	d100      	bne.n	1247a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12478:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_61[u32CoreId] = msr;
   1247a:	490a      	ldr	r1, [pc, #40]	; (124a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x54>)
   1247c:	9b01      	ldr	r3, [sp, #4]
   1247e:	9a00      	ldr	r2, [sp, #0]
   12480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]++;
   12484:	4a06      	ldr	r2, [pc, #24]	; (124a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   12486:	9b01      	ldr	r3, [sp, #4]
   12488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1248c:	1c5a      	adds	r2, r3, #1
   1248e:	4904      	ldr	r1, [pc, #16]	; (124a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   12490:	9b01      	ldr	r3, [sp, #4]
   12492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12496:	bf00      	nop
   12498:	b003      	add	sp, #12
   1249a:	f85d fb04 	ldr.w	pc, [sp], #4
   1249e:	bf00      	nop
   124a0:	1fff9550 	.word	0x1fff9550
   124a4:	1fff954c 	.word	0x1fff954c

000124a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   124a8:	b500      	push	{lr}
   124aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   124ac:	f7ee fc14 	bl	cd8 <Sys_GetCoreID>
   124b0:	4603      	mov	r3, r0
   124b2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]--;
   124b4:	4a0d      	ldr	r2, [pc, #52]	; (124ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   124b6:	9b01      	ldr	r3, [sp, #4]
   124b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124bc:	1e5a      	subs	r2, r3, #1
   124be:	490b      	ldr	r1, [pc, #44]	; (124ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   124c0:	9b01      	ldr	r3, [sp, #4]
   124c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
   124c6:	4a0a      	ldr	r2, [pc, #40]	; (124f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x48>)
   124c8:	9b01      	ldr	r3, [sp, #4]
   124ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124ce:	f003 0301 	and.w	r3, r3, #1
   124d2:	2b00      	cmp	r3, #0
   124d4:	d106      	bne.n	124e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
   124d6:	4a05      	ldr	r2, [pc, #20]	; (124ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   124d8:	9b01      	ldr	r3, [sp, #4]
   124da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124de:	2b00      	cmp	r3, #0
   124e0:	d100      	bne.n	124e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   124e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   124e4:	bf00      	nop
   124e6:	b003      	add	sp, #12
   124e8:	f85d fb04 	ldr.w	pc, [sp], #4
   124ec:	1fff9550 	.word	0x1fff9550
   124f0:	1fff954c 	.word	0x1fff954c

000124f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   124f4:	b500      	push	{lr}
   124f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   124f8:	f7ee fbee 	bl	cd8 <Sys_GetCoreID>
   124fc:	4603      	mov	r3, r0
   124fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId])
   12500:	4a10      	ldr	r2, [pc, #64]	; (12544 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   12502:	9b01      	ldr	r3, [sp, #4]
   12504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12508:	2b00      	cmp	r3, #0
   1250a:	d10d      	bne.n	12528 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1250c:	f7ee fa44 	bl	998 <Adc_schm_read_msr>
   12510:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12512:	9b00      	ldr	r3, [sp, #0]
   12514:	f003 0301 	and.w	r3, r3, #1
   12518:	2b00      	cmp	r3, #0
   1251a:	d100      	bne.n	1251e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1251c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_62[u32CoreId] = msr;
   1251e:	490a      	ldr	r1, [pc, #40]	; (12548 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x54>)
   12520:	9b01      	ldr	r3, [sp, #4]
   12522:	9a00      	ldr	r2, [sp, #0]
   12524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]++;
   12528:	4a06      	ldr	r2, [pc, #24]	; (12544 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   1252a:	9b01      	ldr	r3, [sp, #4]
   1252c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12530:	1c5a      	adds	r2, r3, #1
   12532:	4904      	ldr	r1, [pc, #16]	; (12544 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   12534:	9b01      	ldr	r3, [sp, #4]
   12536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1253a:	bf00      	nop
   1253c:	b003      	add	sp, #12
   1253e:	f85d fb04 	ldr.w	pc, [sp], #4
   12542:	bf00      	nop
   12544:	1fff9558 	.word	0x1fff9558
   12548:	1fff9554 	.word	0x1fff9554

0001254c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   1254c:	b500      	push	{lr}
   1254e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12550:	f7ee fbc2 	bl	cd8 <Sys_GetCoreID>
   12554:	4603      	mov	r3, r0
   12556:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]--;
   12558:	4a0d      	ldr	r2, [pc, #52]	; (12590 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   1255a:	9b01      	ldr	r3, [sp, #4]
   1255c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12560:	1e5a      	subs	r2, r3, #1
   12562:	490b      	ldr	r1, [pc, #44]	; (12590 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   12564:	9b01      	ldr	r3, [sp, #4]
   12566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
   1256a:	4a0a      	ldr	r2, [pc, #40]	; (12594 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x48>)
   1256c:	9b01      	ldr	r3, [sp, #4]
   1256e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12572:	f003 0301 	and.w	r3, r3, #1
   12576:	2b00      	cmp	r3, #0
   12578:	d106      	bne.n	12588 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
   1257a:	4a05      	ldr	r2, [pc, #20]	; (12590 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   1257c:	9b01      	ldr	r3, [sp, #4]
   1257e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12582:	2b00      	cmp	r3, #0
   12584:	d100      	bne.n	12588 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12586:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12588:	bf00      	nop
   1258a:	b003      	add	sp, #12
   1258c:	f85d fb04 	ldr.w	pc, [sp], #4
   12590:	1fff9558 	.word	0x1fff9558
   12594:	1fff9554 	.word	0x1fff9554

00012598 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   12598:	b500      	push	{lr}
   1259a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1259c:	f7ee fb9c 	bl	cd8 <Sys_GetCoreID>
   125a0:	4603      	mov	r3, r0
   125a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId])
   125a4:	4a10      	ldr	r2, [pc, #64]	; (125e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   125a6:	9b01      	ldr	r3, [sp, #4]
   125a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125ac:	2b00      	cmp	r3, #0
   125ae:	d10d      	bne.n	125cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   125b0:	f7ee f9f2 	bl	998 <Adc_schm_read_msr>
   125b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   125b6:	9b00      	ldr	r3, [sp, #0]
   125b8:	f003 0301 	and.w	r3, r3, #1
   125bc:	2b00      	cmp	r3, #0
   125be:	d100      	bne.n	125c2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   125c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_63[u32CoreId] = msr;
   125c2:	490a      	ldr	r1, [pc, #40]	; (125ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x54>)
   125c4:	9b01      	ldr	r3, [sp, #4]
   125c6:	9a00      	ldr	r2, [sp, #0]
   125c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]++;
   125cc:	4a06      	ldr	r2, [pc, #24]	; (125e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   125ce:	9b01      	ldr	r3, [sp, #4]
   125d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125d4:	1c5a      	adds	r2, r3, #1
   125d6:	4904      	ldr	r1, [pc, #16]	; (125e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   125d8:	9b01      	ldr	r3, [sp, #4]
   125da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   125de:	bf00      	nop
   125e0:	b003      	add	sp, #12
   125e2:	f85d fb04 	ldr.w	pc, [sp], #4
   125e6:	bf00      	nop
   125e8:	1fff9560 	.word	0x1fff9560
   125ec:	1fff955c 	.word	0x1fff955c

000125f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   125f0:	b500      	push	{lr}
   125f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   125f4:	f7ee fb70 	bl	cd8 <Sys_GetCoreID>
   125f8:	4603      	mov	r3, r0
   125fa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]--;
   125fc:	4a0d      	ldr	r2, [pc, #52]	; (12634 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   125fe:	9b01      	ldr	r3, [sp, #4]
   12600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12604:	1e5a      	subs	r2, r3, #1
   12606:	490b      	ldr	r1, [pc, #44]	; (12634 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   12608:	9b01      	ldr	r3, [sp, #4]
   1260a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
   1260e:	4a0a      	ldr	r2, [pc, #40]	; (12638 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x48>)
   12610:	9b01      	ldr	r3, [sp, #4]
   12612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12616:	f003 0301 	and.w	r3, r3, #1
   1261a:	2b00      	cmp	r3, #0
   1261c:	d106      	bne.n	1262c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
   1261e:	4a05      	ldr	r2, [pc, #20]	; (12634 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   12620:	9b01      	ldr	r3, [sp, #4]
   12622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12626:	2b00      	cmp	r3, #0
   12628:	d100      	bne.n	1262c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1262a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1262c:	bf00      	nop
   1262e:	b003      	add	sp, #12
   12630:	f85d fb04 	ldr.w	pc, [sp], #4
   12634:	1fff9560 	.word	0x1fff9560
   12638:	1fff955c 	.word	0x1fff955c

0001263c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   1263c:	b500      	push	{lr}
   1263e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12640:	f7ee fb4a 	bl	cd8 <Sys_GetCoreID>
   12644:	4603      	mov	r3, r0
   12646:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId])
   12648:	4a10      	ldr	r2, [pc, #64]	; (1268c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   1264a:	9b01      	ldr	r3, [sp, #4]
   1264c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12650:	2b00      	cmp	r3, #0
   12652:	d10d      	bne.n	12670 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12654:	f7ee f9a0 	bl	998 <Adc_schm_read_msr>
   12658:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1265a:	9b00      	ldr	r3, [sp, #0]
   1265c:	f003 0301 	and.w	r3, r3, #1
   12660:	2b00      	cmp	r3, #0
   12662:	d100      	bne.n	12666 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12664:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_64[u32CoreId] = msr;
   12666:	490a      	ldr	r1, [pc, #40]	; (12690 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x54>)
   12668:	9b01      	ldr	r3, [sp, #4]
   1266a:	9a00      	ldr	r2, [sp, #0]
   1266c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]++;
   12670:	4a06      	ldr	r2, [pc, #24]	; (1268c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   12672:	9b01      	ldr	r3, [sp, #4]
   12674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12678:	1c5a      	adds	r2, r3, #1
   1267a:	4904      	ldr	r1, [pc, #16]	; (1268c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   1267c:	9b01      	ldr	r3, [sp, #4]
   1267e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12682:	bf00      	nop
   12684:	b003      	add	sp, #12
   12686:	f85d fb04 	ldr.w	pc, [sp], #4
   1268a:	bf00      	nop
   1268c:	1fff9568 	.word	0x1fff9568
   12690:	1fff9564 	.word	0x1fff9564

00012694 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   12694:	b500      	push	{lr}
   12696:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12698:	f7ee fb1e 	bl	cd8 <Sys_GetCoreID>
   1269c:	4603      	mov	r3, r0
   1269e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]--;
   126a0:	4a0d      	ldr	r2, [pc, #52]	; (126d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   126a2:	9b01      	ldr	r3, [sp, #4]
   126a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126a8:	1e5a      	subs	r2, r3, #1
   126aa:	490b      	ldr	r1, [pc, #44]	; (126d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   126ac:	9b01      	ldr	r3, [sp, #4]
   126ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
   126b2:	4a0a      	ldr	r2, [pc, #40]	; (126dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x48>)
   126b4:	9b01      	ldr	r3, [sp, #4]
   126b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126ba:	f003 0301 	and.w	r3, r3, #1
   126be:	2b00      	cmp	r3, #0
   126c0:	d106      	bne.n	126d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
   126c2:	4a05      	ldr	r2, [pc, #20]	; (126d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   126c4:	9b01      	ldr	r3, [sp, #4]
   126c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126ca:	2b00      	cmp	r3, #0
   126cc:	d100      	bne.n	126d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   126ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   126d0:	bf00      	nop
   126d2:	b003      	add	sp, #12
   126d4:	f85d fb04 	ldr.w	pc, [sp], #4
   126d8:	1fff9568 	.word	0x1fff9568
   126dc:	1fff9564 	.word	0x1fff9564

000126e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   126e0:	b500      	push	{lr}
   126e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   126e4:	f7ee faf8 	bl	cd8 <Sys_GetCoreID>
   126e8:	4603      	mov	r3, r0
   126ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId])
   126ec:	4a10      	ldr	r2, [pc, #64]	; (12730 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   126ee:	9b01      	ldr	r3, [sp, #4]
   126f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126f4:	2b00      	cmp	r3, #0
   126f6:	d10d      	bne.n	12714 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   126f8:	f7ee f94e 	bl	998 <Adc_schm_read_msr>
   126fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   126fe:	9b00      	ldr	r3, [sp, #0]
   12700:	f003 0301 	and.w	r3, r3, #1
   12704:	2b00      	cmp	r3, #0
   12706:	d100      	bne.n	1270a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12708:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_65[u32CoreId] = msr;
   1270a:	490a      	ldr	r1, [pc, #40]	; (12734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x54>)
   1270c:	9b01      	ldr	r3, [sp, #4]
   1270e:	9a00      	ldr	r2, [sp, #0]
   12710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]++;
   12714:	4a06      	ldr	r2, [pc, #24]	; (12730 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   12716:	9b01      	ldr	r3, [sp, #4]
   12718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1271c:	1c5a      	adds	r2, r3, #1
   1271e:	4904      	ldr	r1, [pc, #16]	; (12730 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   12720:	9b01      	ldr	r3, [sp, #4]
   12722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12726:	bf00      	nop
   12728:	b003      	add	sp, #12
   1272a:	f85d fb04 	ldr.w	pc, [sp], #4
   1272e:	bf00      	nop
   12730:	1fff9570 	.word	0x1fff9570
   12734:	1fff956c 	.word	0x1fff956c

00012738 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   12738:	b500      	push	{lr}
   1273a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1273c:	f7ee facc 	bl	cd8 <Sys_GetCoreID>
   12740:	4603      	mov	r3, r0
   12742:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]--;
   12744:	4a0d      	ldr	r2, [pc, #52]	; (1277c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   12746:	9b01      	ldr	r3, [sp, #4]
   12748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1274c:	1e5a      	subs	r2, r3, #1
   1274e:	490b      	ldr	r1, [pc, #44]	; (1277c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   12750:	9b01      	ldr	r3, [sp, #4]
   12752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
   12756:	4a0a      	ldr	r2, [pc, #40]	; (12780 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x48>)
   12758:	9b01      	ldr	r3, [sp, #4]
   1275a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1275e:	f003 0301 	and.w	r3, r3, #1
   12762:	2b00      	cmp	r3, #0
   12764:	d106      	bne.n	12774 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
   12766:	4a05      	ldr	r2, [pc, #20]	; (1277c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   12768:	9b01      	ldr	r3, [sp, #4]
   1276a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1276e:	2b00      	cmp	r3, #0
   12770:	d100      	bne.n	12774 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12772:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12774:	bf00      	nop
   12776:	b003      	add	sp, #12
   12778:	f85d fb04 	ldr.w	pc, [sp], #4
   1277c:	1fff9570 	.word	0x1fff9570
   12780:	1fff956c 	.word	0x1fff956c

00012784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   12784:	b500      	push	{lr}
   12786:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12788:	f7ee faa6 	bl	cd8 <Sys_GetCoreID>
   1278c:	4603      	mov	r3, r0
   1278e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId])
   12790:	4a10      	ldr	r2, [pc, #64]	; (127d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   12792:	9b01      	ldr	r3, [sp, #4]
   12794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12798:	2b00      	cmp	r3, #0
   1279a:	d10d      	bne.n	127b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1279c:	f7ee f8fc 	bl	998 <Adc_schm_read_msr>
   127a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   127a2:	9b00      	ldr	r3, [sp, #0]
   127a4:	f003 0301 	and.w	r3, r3, #1
   127a8:	2b00      	cmp	r3, #0
   127aa:	d100      	bne.n	127ae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   127ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_66[u32CoreId] = msr;
   127ae:	490a      	ldr	r1, [pc, #40]	; (127d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x54>)
   127b0:	9b01      	ldr	r3, [sp, #4]
   127b2:	9a00      	ldr	r2, [sp, #0]
   127b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]++;
   127b8:	4a06      	ldr	r2, [pc, #24]	; (127d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   127ba:	9b01      	ldr	r3, [sp, #4]
   127bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127c0:	1c5a      	adds	r2, r3, #1
   127c2:	4904      	ldr	r1, [pc, #16]	; (127d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   127c4:	9b01      	ldr	r3, [sp, #4]
   127c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   127ca:	bf00      	nop
   127cc:	b003      	add	sp, #12
   127ce:	f85d fb04 	ldr.w	pc, [sp], #4
   127d2:	bf00      	nop
   127d4:	1fff9578 	.word	0x1fff9578
   127d8:	1fff9574 	.word	0x1fff9574

000127dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   127dc:	b500      	push	{lr}
   127de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   127e0:	f7ee fa7a 	bl	cd8 <Sys_GetCoreID>
   127e4:	4603      	mov	r3, r0
   127e6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]--;
   127e8:	4a0d      	ldr	r2, [pc, #52]	; (12820 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   127ea:	9b01      	ldr	r3, [sp, #4]
   127ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127f0:	1e5a      	subs	r2, r3, #1
   127f2:	490b      	ldr	r1, [pc, #44]	; (12820 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   127f4:	9b01      	ldr	r3, [sp, #4]
   127f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
   127fa:	4a0a      	ldr	r2, [pc, #40]	; (12824 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x48>)
   127fc:	9b01      	ldr	r3, [sp, #4]
   127fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12802:	f003 0301 	and.w	r3, r3, #1
   12806:	2b00      	cmp	r3, #0
   12808:	d106      	bne.n	12818 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
   1280a:	4a05      	ldr	r2, [pc, #20]	; (12820 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   1280c:	9b01      	ldr	r3, [sp, #4]
   1280e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12812:	2b00      	cmp	r3, #0
   12814:	d100      	bne.n	12818 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12816:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12818:	bf00      	nop
   1281a:	b003      	add	sp, #12
   1281c:	f85d fb04 	ldr.w	pc, [sp], #4
   12820:	1fff9578 	.word	0x1fff9578
   12824:	1fff9574 	.word	0x1fff9574

00012828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   12828:	b500      	push	{lr}
   1282a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1282c:	f7ee fa54 	bl	cd8 <Sys_GetCoreID>
   12830:	4603      	mov	r3, r0
   12832:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId])
   12834:	4a10      	ldr	r2, [pc, #64]	; (12878 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   12836:	9b01      	ldr	r3, [sp, #4]
   12838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1283c:	2b00      	cmp	r3, #0
   1283e:	d10d      	bne.n	1285c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12840:	f7ee f8aa 	bl	998 <Adc_schm_read_msr>
   12844:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12846:	9b00      	ldr	r3, [sp, #0]
   12848:	f003 0301 	and.w	r3, r3, #1
   1284c:	2b00      	cmp	r3, #0
   1284e:	d100      	bne.n	12852 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12850:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_67[u32CoreId] = msr;
   12852:	490a      	ldr	r1, [pc, #40]	; (1287c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x54>)
   12854:	9b01      	ldr	r3, [sp, #4]
   12856:	9a00      	ldr	r2, [sp, #0]
   12858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]++;
   1285c:	4a06      	ldr	r2, [pc, #24]	; (12878 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   1285e:	9b01      	ldr	r3, [sp, #4]
   12860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12864:	1c5a      	adds	r2, r3, #1
   12866:	4904      	ldr	r1, [pc, #16]	; (12878 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   12868:	9b01      	ldr	r3, [sp, #4]
   1286a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1286e:	bf00      	nop
   12870:	b003      	add	sp, #12
   12872:	f85d fb04 	ldr.w	pc, [sp], #4
   12876:	bf00      	nop
   12878:	1fff9580 	.word	0x1fff9580
   1287c:	1fff957c 	.word	0x1fff957c

00012880 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   12880:	b500      	push	{lr}
   12882:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12884:	f7ee fa28 	bl	cd8 <Sys_GetCoreID>
   12888:	4603      	mov	r3, r0
   1288a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]--;
   1288c:	4a0d      	ldr	r2, [pc, #52]	; (128c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   1288e:	9b01      	ldr	r3, [sp, #4]
   12890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12894:	1e5a      	subs	r2, r3, #1
   12896:	490b      	ldr	r1, [pc, #44]	; (128c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   12898:	9b01      	ldr	r3, [sp, #4]
   1289a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
   1289e:	4a0a      	ldr	r2, [pc, #40]	; (128c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x48>)
   128a0:	9b01      	ldr	r3, [sp, #4]
   128a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128a6:	f003 0301 	and.w	r3, r3, #1
   128aa:	2b00      	cmp	r3, #0
   128ac:	d106      	bne.n	128bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
   128ae:	4a05      	ldr	r2, [pc, #20]	; (128c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   128b0:	9b01      	ldr	r3, [sp, #4]
   128b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128b6:	2b00      	cmp	r3, #0
   128b8:	d100      	bne.n	128bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   128ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   128bc:	bf00      	nop
   128be:	b003      	add	sp, #12
   128c0:	f85d fb04 	ldr.w	pc, [sp], #4
   128c4:	1fff9580 	.word	0x1fff9580
   128c8:	1fff957c 	.word	0x1fff957c

000128cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   128cc:	b500      	push	{lr}
   128ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   128d0:	f7ee fa02 	bl	cd8 <Sys_GetCoreID>
   128d4:	4603      	mov	r3, r0
   128d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId])
   128d8:	4a10      	ldr	r2, [pc, #64]	; (1291c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   128da:	9b01      	ldr	r3, [sp, #4]
   128dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128e0:	2b00      	cmp	r3, #0
   128e2:	d10d      	bne.n	12900 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   128e4:	f7ee f858 	bl	998 <Adc_schm_read_msr>
   128e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   128ea:	9b00      	ldr	r3, [sp, #0]
   128ec:	f003 0301 	and.w	r3, r3, #1
   128f0:	2b00      	cmp	r3, #0
   128f2:	d100      	bne.n	128f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   128f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_68[u32CoreId] = msr;
   128f6:	490a      	ldr	r1, [pc, #40]	; (12920 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x54>)
   128f8:	9b01      	ldr	r3, [sp, #4]
   128fa:	9a00      	ldr	r2, [sp, #0]
   128fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]++;
   12900:	4a06      	ldr	r2, [pc, #24]	; (1291c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   12902:	9b01      	ldr	r3, [sp, #4]
   12904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12908:	1c5a      	adds	r2, r3, #1
   1290a:	4904      	ldr	r1, [pc, #16]	; (1291c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   1290c:	9b01      	ldr	r3, [sp, #4]
   1290e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12912:	bf00      	nop
   12914:	b003      	add	sp, #12
   12916:	f85d fb04 	ldr.w	pc, [sp], #4
   1291a:	bf00      	nop
   1291c:	1fff9588 	.word	0x1fff9588
   12920:	1fff9584 	.word	0x1fff9584

00012924 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   12924:	b500      	push	{lr}
   12926:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12928:	f7ee f9d6 	bl	cd8 <Sys_GetCoreID>
   1292c:	4603      	mov	r3, r0
   1292e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]--;
   12930:	4a0d      	ldr	r2, [pc, #52]	; (12968 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   12932:	9b01      	ldr	r3, [sp, #4]
   12934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12938:	1e5a      	subs	r2, r3, #1
   1293a:	490b      	ldr	r1, [pc, #44]	; (12968 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   1293c:	9b01      	ldr	r3, [sp, #4]
   1293e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
   12942:	4a0a      	ldr	r2, [pc, #40]	; (1296c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x48>)
   12944:	9b01      	ldr	r3, [sp, #4]
   12946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1294a:	f003 0301 	and.w	r3, r3, #1
   1294e:	2b00      	cmp	r3, #0
   12950:	d106      	bne.n	12960 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
   12952:	4a05      	ldr	r2, [pc, #20]	; (12968 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   12954:	9b01      	ldr	r3, [sp, #4]
   12956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1295a:	2b00      	cmp	r3, #0
   1295c:	d100      	bne.n	12960 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1295e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12960:	bf00      	nop
   12962:	b003      	add	sp, #12
   12964:	f85d fb04 	ldr.w	pc, [sp], #4
   12968:	1fff9588 	.word	0x1fff9588
   1296c:	1fff9584 	.word	0x1fff9584

00012970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   12970:	b500      	push	{lr}
   12972:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12974:	f7ee f9b0 	bl	cd8 <Sys_GetCoreID>
   12978:	4603      	mov	r3, r0
   1297a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId])
   1297c:	4a10      	ldr	r2, [pc, #64]	; (129c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   1297e:	9b01      	ldr	r3, [sp, #4]
   12980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12984:	2b00      	cmp	r3, #0
   12986:	d10d      	bne.n	129a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12988:	f7ee f806 	bl	998 <Adc_schm_read_msr>
   1298c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1298e:	9b00      	ldr	r3, [sp, #0]
   12990:	f003 0301 	and.w	r3, r3, #1
   12994:	2b00      	cmp	r3, #0
   12996:	d100      	bne.n	1299a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12998:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_69[u32CoreId] = msr;
   1299a:	490a      	ldr	r1, [pc, #40]	; (129c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x54>)
   1299c:	9b01      	ldr	r3, [sp, #4]
   1299e:	9a00      	ldr	r2, [sp, #0]
   129a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]++;
   129a4:	4a06      	ldr	r2, [pc, #24]	; (129c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   129a6:	9b01      	ldr	r3, [sp, #4]
   129a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129ac:	1c5a      	adds	r2, r3, #1
   129ae:	4904      	ldr	r1, [pc, #16]	; (129c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   129b0:	9b01      	ldr	r3, [sp, #4]
   129b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   129b6:	bf00      	nop
   129b8:	b003      	add	sp, #12
   129ba:	f85d fb04 	ldr.w	pc, [sp], #4
   129be:	bf00      	nop
   129c0:	1fff9590 	.word	0x1fff9590
   129c4:	1fff958c 	.word	0x1fff958c

000129c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   129c8:	b500      	push	{lr}
   129ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   129cc:	f7ee f984 	bl	cd8 <Sys_GetCoreID>
   129d0:	4603      	mov	r3, r0
   129d2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]--;
   129d4:	4a0d      	ldr	r2, [pc, #52]	; (12a0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   129d6:	9b01      	ldr	r3, [sp, #4]
   129d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129dc:	1e5a      	subs	r2, r3, #1
   129de:	490b      	ldr	r1, [pc, #44]	; (12a0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   129e0:	9b01      	ldr	r3, [sp, #4]
   129e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
   129e6:	4a0a      	ldr	r2, [pc, #40]	; (12a10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x48>)
   129e8:	9b01      	ldr	r3, [sp, #4]
   129ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129ee:	f003 0301 	and.w	r3, r3, #1
   129f2:	2b00      	cmp	r3, #0
   129f4:	d106      	bne.n	12a04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
   129f6:	4a05      	ldr	r2, [pc, #20]	; (12a0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   129f8:	9b01      	ldr	r3, [sp, #4]
   129fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129fe:	2b00      	cmp	r3, #0
   12a00:	d100      	bne.n	12a04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12a02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12a04:	bf00      	nop
   12a06:	b003      	add	sp, #12
   12a08:	f85d fb04 	ldr.w	pc, [sp], #4
   12a0c:	1fff9590 	.word	0x1fff9590
   12a10:	1fff958c 	.word	0x1fff958c

00012a14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   12a14:	b500      	push	{lr}
   12a16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a18:	f7ee f95e 	bl	cd8 <Sys_GetCoreID>
   12a1c:	4603      	mov	r3, r0
   12a1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId])
   12a20:	4a10      	ldr	r2, [pc, #64]	; (12a64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   12a22:	9b01      	ldr	r3, [sp, #4]
   12a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a28:	2b00      	cmp	r3, #0
   12a2a:	d10d      	bne.n	12a48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12a2c:	f7ed ffb4 	bl	998 <Adc_schm_read_msr>
   12a30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12a32:	9b00      	ldr	r3, [sp, #0]
   12a34:	f003 0301 	and.w	r3, r3, #1
   12a38:	2b00      	cmp	r3, #0
   12a3a:	d100      	bne.n	12a3e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12a3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_70[u32CoreId] = msr;
   12a3e:	490a      	ldr	r1, [pc, #40]	; (12a68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x54>)
   12a40:	9b01      	ldr	r3, [sp, #4]
   12a42:	9a00      	ldr	r2, [sp, #0]
   12a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]++;
   12a48:	4a06      	ldr	r2, [pc, #24]	; (12a64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   12a4a:	9b01      	ldr	r3, [sp, #4]
   12a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a50:	1c5a      	adds	r2, r3, #1
   12a52:	4904      	ldr	r1, [pc, #16]	; (12a64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   12a54:	9b01      	ldr	r3, [sp, #4]
   12a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12a5a:	bf00      	nop
   12a5c:	b003      	add	sp, #12
   12a5e:	f85d fb04 	ldr.w	pc, [sp], #4
   12a62:	bf00      	nop
   12a64:	1fff9598 	.word	0x1fff9598
   12a68:	1fff9594 	.word	0x1fff9594

00012a6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   12a6c:	b500      	push	{lr}
   12a6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a70:	f7ee f932 	bl	cd8 <Sys_GetCoreID>
   12a74:	4603      	mov	r3, r0
   12a76:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]--;
   12a78:	4a0d      	ldr	r2, [pc, #52]	; (12ab0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   12a7a:	9b01      	ldr	r3, [sp, #4]
   12a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a80:	1e5a      	subs	r2, r3, #1
   12a82:	490b      	ldr	r1, [pc, #44]	; (12ab0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   12a84:	9b01      	ldr	r3, [sp, #4]
   12a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
   12a8a:	4a0a      	ldr	r2, [pc, #40]	; (12ab4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x48>)
   12a8c:	9b01      	ldr	r3, [sp, #4]
   12a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a92:	f003 0301 	and.w	r3, r3, #1
   12a96:	2b00      	cmp	r3, #0
   12a98:	d106      	bne.n	12aa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
   12a9a:	4a05      	ldr	r2, [pc, #20]	; (12ab0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   12a9c:	9b01      	ldr	r3, [sp, #4]
   12a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12aa2:	2b00      	cmp	r3, #0
   12aa4:	d100      	bne.n	12aa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12aa6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12aa8:	bf00      	nop
   12aaa:	b003      	add	sp, #12
   12aac:	f85d fb04 	ldr.w	pc, [sp], #4
   12ab0:	1fff9598 	.word	0x1fff9598
   12ab4:	1fff9594 	.word	0x1fff9594

00012ab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   12ab8:	b500      	push	{lr}
   12aba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12abc:	f7ee f90c 	bl	cd8 <Sys_GetCoreID>
   12ac0:	4603      	mov	r3, r0
   12ac2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId])
   12ac4:	4a10      	ldr	r2, [pc, #64]	; (12b08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   12ac6:	9b01      	ldr	r3, [sp, #4]
   12ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12acc:	2b00      	cmp	r3, #0
   12ace:	d10d      	bne.n	12aec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12ad0:	f7ed ff62 	bl	998 <Adc_schm_read_msr>
   12ad4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12ad6:	9b00      	ldr	r3, [sp, #0]
   12ad8:	f003 0301 	and.w	r3, r3, #1
   12adc:	2b00      	cmp	r3, #0
   12ade:	d100      	bne.n	12ae2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12ae0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_71[u32CoreId] = msr;
   12ae2:	490a      	ldr	r1, [pc, #40]	; (12b0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x54>)
   12ae4:	9b01      	ldr	r3, [sp, #4]
   12ae6:	9a00      	ldr	r2, [sp, #0]
   12ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]++;
   12aec:	4a06      	ldr	r2, [pc, #24]	; (12b08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   12aee:	9b01      	ldr	r3, [sp, #4]
   12af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12af4:	1c5a      	adds	r2, r3, #1
   12af6:	4904      	ldr	r1, [pc, #16]	; (12b08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   12af8:	9b01      	ldr	r3, [sp, #4]
   12afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12afe:	bf00      	nop
   12b00:	b003      	add	sp, #12
   12b02:	f85d fb04 	ldr.w	pc, [sp], #4
   12b06:	bf00      	nop
   12b08:	1fff95a0 	.word	0x1fff95a0
   12b0c:	1fff959c 	.word	0x1fff959c

00012b10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   12b10:	b500      	push	{lr}
   12b12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b14:	f7ee f8e0 	bl	cd8 <Sys_GetCoreID>
   12b18:	4603      	mov	r3, r0
   12b1a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]--;
   12b1c:	4a0d      	ldr	r2, [pc, #52]	; (12b54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   12b1e:	9b01      	ldr	r3, [sp, #4]
   12b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b24:	1e5a      	subs	r2, r3, #1
   12b26:	490b      	ldr	r1, [pc, #44]	; (12b54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   12b28:	9b01      	ldr	r3, [sp, #4]
   12b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
   12b2e:	4a0a      	ldr	r2, [pc, #40]	; (12b58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x48>)
   12b30:	9b01      	ldr	r3, [sp, #4]
   12b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b36:	f003 0301 	and.w	r3, r3, #1
   12b3a:	2b00      	cmp	r3, #0
   12b3c:	d106      	bne.n	12b4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
   12b3e:	4a05      	ldr	r2, [pc, #20]	; (12b54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   12b40:	9b01      	ldr	r3, [sp, #4]
   12b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b46:	2b00      	cmp	r3, #0
   12b48:	d100      	bne.n	12b4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12b4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12b4c:	bf00      	nop
   12b4e:	b003      	add	sp, #12
   12b50:	f85d fb04 	ldr.w	pc, [sp], #4
   12b54:	1fff95a0 	.word	0x1fff95a0
   12b58:	1fff959c 	.word	0x1fff959c

00012b5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   12b5c:	b500      	push	{lr}
   12b5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b60:	f7ee f8ba 	bl	cd8 <Sys_GetCoreID>
   12b64:	4603      	mov	r3, r0
   12b66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId])
   12b68:	4a10      	ldr	r2, [pc, #64]	; (12bac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   12b6a:	9b01      	ldr	r3, [sp, #4]
   12b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b70:	2b00      	cmp	r3, #0
   12b72:	d10d      	bne.n	12b90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12b74:	f7ed ff10 	bl	998 <Adc_schm_read_msr>
   12b78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12b7a:	9b00      	ldr	r3, [sp, #0]
   12b7c:	f003 0301 	and.w	r3, r3, #1
   12b80:	2b00      	cmp	r3, #0
   12b82:	d100      	bne.n	12b86 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12b84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_72[u32CoreId] = msr;
   12b86:	490a      	ldr	r1, [pc, #40]	; (12bb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x54>)
   12b88:	9b01      	ldr	r3, [sp, #4]
   12b8a:	9a00      	ldr	r2, [sp, #0]
   12b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]++;
   12b90:	4a06      	ldr	r2, [pc, #24]	; (12bac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   12b92:	9b01      	ldr	r3, [sp, #4]
   12b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b98:	1c5a      	adds	r2, r3, #1
   12b9a:	4904      	ldr	r1, [pc, #16]	; (12bac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   12b9c:	9b01      	ldr	r3, [sp, #4]
   12b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12ba2:	bf00      	nop
   12ba4:	b003      	add	sp, #12
   12ba6:	f85d fb04 	ldr.w	pc, [sp], #4
   12baa:	bf00      	nop
   12bac:	1fff95a8 	.word	0x1fff95a8
   12bb0:	1fff95a4 	.word	0x1fff95a4

00012bb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   12bb4:	b500      	push	{lr}
   12bb6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12bb8:	f7ee f88e 	bl	cd8 <Sys_GetCoreID>
   12bbc:	4603      	mov	r3, r0
   12bbe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]--;
   12bc0:	4a0d      	ldr	r2, [pc, #52]	; (12bf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   12bc2:	9b01      	ldr	r3, [sp, #4]
   12bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bc8:	1e5a      	subs	r2, r3, #1
   12bca:	490b      	ldr	r1, [pc, #44]	; (12bf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   12bcc:	9b01      	ldr	r3, [sp, #4]
   12bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
   12bd2:	4a0a      	ldr	r2, [pc, #40]	; (12bfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x48>)
   12bd4:	9b01      	ldr	r3, [sp, #4]
   12bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bda:	f003 0301 	and.w	r3, r3, #1
   12bde:	2b00      	cmp	r3, #0
   12be0:	d106      	bne.n	12bf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
   12be2:	4a05      	ldr	r2, [pc, #20]	; (12bf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   12be4:	9b01      	ldr	r3, [sp, #4]
   12be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bea:	2b00      	cmp	r3, #0
   12bec:	d100      	bne.n	12bf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12bee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12bf0:	bf00      	nop
   12bf2:	b003      	add	sp, #12
   12bf4:	f85d fb04 	ldr.w	pc, [sp], #4
   12bf8:	1fff95a8 	.word	0x1fff95a8
   12bfc:	1fff95a4 	.word	0x1fff95a4

00012c00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   12c00:	b500      	push	{lr}
   12c02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c04:	f7ee f868 	bl	cd8 <Sys_GetCoreID>
   12c08:	4603      	mov	r3, r0
   12c0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId])
   12c0c:	4a10      	ldr	r2, [pc, #64]	; (12c50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   12c0e:	9b01      	ldr	r3, [sp, #4]
   12c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c14:	2b00      	cmp	r3, #0
   12c16:	d10d      	bne.n	12c34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12c18:	f7ed febe 	bl	998 <Adc_schm_read_msr>
   12c1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12c1e:	9b00      	ldr	r3, [sp, #0]
   12c20:	f003 0301 	and.w	r3, r3, #1
   12c24:	2b00      	cmp	r3, #0
   12c26:	d100      	bne.n	12c2a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12c28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_73[u32CoreId] = msr;
   12c2a:	490a      	ldr	r1, [pc, #40]	; (12c54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x54>)
   12c2c:	9b01      	ldr	r3, [sp, #4]
   12c2e:	9a00      	ldr	r2, [sp, #0]
   12c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]++;
   12c34:	4a06      	ldr	r2, [pc, #24]	; (12c50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   12c36:	9b01      	ldr	r3, [sp, #4]
   12c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c3c:	1c5a      	adds	r2, r3, #1
   12c3e:	4904      	ldr	r1, [pc, #16]	; (12c50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   12c40:	9b01      	ldr	r3, [sp, #4]
   12c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12c46:	bf00      	nop
   12c48:	b003      	add	sp, #12
   12c4a:	f85d fb04 	ldr.w	pc, [sp], #4
   12c4e:	bf00      	nop
   12c50:	1fff95b0 	.word	0x1fff95b0
   12c54:	1fff95ac 	.word	0x1fff95ac

00012c58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   12c58:	b500      	push	{lr}
   12c5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c5c:	f7ee f83c 	bl	cd8 <Sys_GetCoreID>
   12c60:	4603      	mov	r3, r0
   12c62:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]--;
   12c64:	4a0d      	ldr	r2, [pc, #52]	; (12c9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   12c66:	9b01      	ldr	r3, [sp, #4]
   12c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c6c:	1e5a      	subs	r2, r3, #1
   12c6e:	490b      	ldr	r1, [pc, #44]	; (12c9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   12c70:	9b01      	ldr	r3, [sp, #4]
   12c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
   12c76:	4a0a      	ldr	r2, [pc, #40]	; (12ca0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x48>)
   12c78:	9b01      	ldr	r3, [sp, #4]
   12c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c7e:	f003 0301 	and.w	r3, r3, #1
   12c82:	2b00      	cmp	r3, #0
   12c84:	d106      	bne.n	12c94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
   12c86:	4a05      	ldr	r2, [pc, #20]	; (12c9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   12c88:	9b01      	ldr	r3, [sp, #4]
   12c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c8e:	2b00      	cmp	r3, #0
   12c90:	d100      	bne.n	12c94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12c92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12c94:	bf00      	nop
   12c96:	b003      	add	sp, #12
   12c98:	f85d fb04 	ldr.w	pc, [sp], #4
   12c9c:	1fff95b0 	.word	0x1fff95b0
   12ca0:	1fff95ac 	.word	0x1fff95ac

00012ca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   12ca4:	b500      	push	{lr}
   12ca6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ca8:	f7ee f816 	bl	cd8 <Sys_GetCoreID>
   12cac:	4603      	mov	r3, r0
   12cae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId])
   12cb0:	4a10      	ldr	r2, [pc, #64]	; (12cf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   12cb2:	9b01      	ldr	r3, [sp, #4]
   12cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cb8:	2b00      	cmp	r3, #0
   12cba:	d10d      	bne.n	12cd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12cbc:	f7ed fe6c 	bl	998 <Adc_schm_read_msr>
   12cc0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12cc2:	9b00      	ldr	r3, [sp, #0]
   12cc4:	f003 0301 	and.w	r3, r3, #1
   12cc8:	2b00      	cmp	r3, #0
   12cca:	d100      	bne.n	12cce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12ccc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_74[u32CoreId] = msr;
   12cce:	490a      	ldr	r1, [pc, #40]	; (12cf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x54>)
   12cd0:	9b01      	ldr	r3, [sp, #4]
   12cd2:	9a00      	ldr	r2, [sp, #0]
   12cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]++;
   12cd8:	4a06      	ldr	r2, [pc, #24]	; (12cf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   12cda:	9b01      	ldr	r3, [sp, #4]
   12cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ce0:	1c5a      	adds	r2, r3, #1
   12ce2:	4904      	ldr	r1, [pc, #16]	; (12cf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   12ce4:	9b01      	ldr	r3, [sp, #4]
   12ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12cea:	bf00      	nop
   12cec:	b003      	add	sp, #12
   12cee:	f85d fb04 	ldr.w	pc, [sp], #4
   12cf2:	bf00      	nop
   12cf4:	1fff95b8 	.word	0x1fff95b8
   12cf8:	1fff95b4 	.word	0x1fff95b4

00012cfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   12cfc:	b500      	push	{lr}
   12cfe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d00:	f7ed ffea 	bl	cd8 <Sys_GetCoreID>
   12d04:	4603      	mov	r3, r0
   12d06:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]--;
   12d08:	4a0d      	ldr	r2, [pc, #52]	; (12d40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   12d0a:	9b01      	ldr	r3, [sp, #4]
   12d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d10:	1e5a      	subs	r2, r3, #1
   12d12:	490b      	ldr	r1, [pc, #44]	; (12d40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   12d14:	9b01      	ldr	r3, [sp, #4]
   12d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_74[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]))         /*if interrupts were enabled*/
   12d1a:	4a0a      	ldr	r2, [pc, #40]	; (12d44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x48>)
   12d1c:	9b01      	ldr	r3, [sp, #4]
   12d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d22:	f003 0301 	and.w	r3, r3, #1
   12d26:	2b00      	cmp	r3, #0
   12d28:	d106      	bne.n	12d38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
   12d2a:	4a05      	ldr	r2, [pc, #20]	; (12d40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   12d2c:	9b01      	ldr	r3, [sp, #4]
   12d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d32:	2b00      	cmp	r3, #0
   12d34:	d100      	bne.n	12d38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12d36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12d38:	bf00      	nop
   12d3a:	b003      	add	sp, #12
   12d3c:	f85d fb04 	ldr.w	pc, [sp], #4
   12d40:	1fff95b8 	.word	0x1fff95b8
   12d44:	1fff95b4 	.word	0x1fff95b4

00012d48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   12d48:	b500      	push	{lr}
   12d4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d4c:	f7ed ffc4 	bl	cd8 <Sys_GetCoreID>
   12d50:	4603      	mov	r3, r0
   12d52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId])
   12d54:	4a10      	ldr	r2, [pc, #64]	; (12d98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   12d56:	9b01      	ldr	r3, [sp, #4]
   12d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d5c:	2b00      	cmp	r3, #0
   12d5e:	d10d      	bne.n	12d7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12d60:	f7ed fe1a 	bl	998 <Adc_schm_read_msr>
   12d64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12d66:	9b00      	ldr	r3, [sp, #0]
   12d68:	f003 0301 	and.w	r3, r3, #1
   12d6c:	2b00      	cmp	r3, #0
   12d6e:	d100      	bne.n	12d72 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12d70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_75[u32CoreId] = msr;
   12d72:	490a      	ldr	r1, [pc, #40]	; (12d9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x54>)
   12d74:	9b01      	ldr	r3, [sp, #4]
   12d76:	9a00      	ldr	r2, [sp, #0]
   12d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]++;
   12d7c:	4a06      	ldr	r2, [pc, #24]	; (12d98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   12d7e:	9b01      	ldr	r3, [sp, #4]
   12d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d84:	1c5a      	adds	r2, r3, #1
   12d86:	4904      	ldr	r1, [pc, #16]	; (12d98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   12d88:	9b01      	ldr	r3, [sp, #4]
   12d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12d8e:	bf00      	nop
   12d90:	b003      	add	sp, #12
   12d92:	f85d fb04 	ldr.w	pc, [sp], #4
   12d96:	bf00      	nop
   12d98:	1fff95c0 	.word	0x1fff95c0
   12d9c:	1fff95bc 	.word	0x1fff95bc

00012da0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   12da0:	b500      	push	{lr}
   12da2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12da4:	f7ed ff98 	bl	cd8 <Sys_GetCoreID>
   12da8:	4603      	mov	r3, r0
   12daa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]--;
   12dac:	4a0d      	ldr	r2, [pc, #52]	; (12de4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   12dae:	9b01      	ldr	r3, [sp, #4]
   12db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12db4:	1e5a      	subs	r2, r3, #1
   12db6:	490b      	ldr	r1, [pc, #44]	; (12de4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   12db8:	9b01      	ldr	r3, [sp, #4]
   12dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_75[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]))         /*if interrupts were enabled*/
   12dbe:	4a0a      	ldr	r2, [pc, #40]	; (12de8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x48>)
   12dc0:	9b01      	ldr	r3, [sp, #4]
   12dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12dc6:	f003 0301 	and.w	r3, r3, #1
   12dca:	2b00      	cmp	r3, #0
   12dcc:	d106      	bne.n	12ddc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
   12dce:	4a05      	ldr	r2, [pc, #20]	; (12de4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   12dd0:	9b01      	ldr	r3, [sp, #4]
   12dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12dd6:	2b00      	cmp	r3, #0
   12dd8:	d100      	bne.n	12ddc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12dda:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12ddc:	bf00      	nop
   12dde:	b003      	add	sp, #12
   12de0:	f85d fb04 	ldr.w	pc, [sp], #4
   12de4:	1fff95c0 	.word	0x1fff95c0
   12de8:	1fff95bc 	.word	0x1fff95bc

00012dec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   12dec:	b500      	push	{lr}
   12dee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12df0:	f7ed ff72 	bl	cd8 <Sys_GetCoreID>
   12df4:	4603      	mov	r3, r0
   12df6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId])
   12df8:	4a10      	ldr	r2, [pc, #64]	; (12e3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   12dfa:	9b01      	ldr	r3, [sp, #4]
   12dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e00:	2b00      	cmp	r3, #0
   12e02:	d10d      	bne.n	12e20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12e04:	f7ed fdc8 	bl	998 <Adc_schm_read_msr>
   12e08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12e0a:	9b00      	ldr	r3, [sp, #0]
   12e0c:	f003 0301 	and.w	r3, r3, #1
   12e10:	2b00      	cmp	r3, #0
   12e12:	d100      	bne.n	12e16 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12e14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_76[u32CoreId] = msr;
   12e16:	490a      	ldr	r1, [pc, #40]	; (12e40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x54>)
   12e18:	9b01      	ldr	r3, [sp, #4]
   12e1a:	9a00      	ldr	r2, [sp, #0]
   12e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]++;
   12e20:	4a06      	ldr	r2, [pc, #24]	; (12e3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   12e22:	9b01      	ldr	r3, [sp, #4]
   12e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e28:	1c5a      	adds	r2, r3, #1
   12e2a:	4904      	ldr	r1, [pc, #16]	; (12e3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   12e2c:	9b01      	ldr	r3, [sp, #4]
   12e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12e32:	bf00      	nop
   12e34:	b003      	add	sp, #12
   12e36:	f85d fb04 	ldr.w	pc, [sp], #4
   12e3a:	bf00      	nop
   12e3c:	1fff95c8 	.word	0x1fff95c8
   12e40:	1fff95c4 	.word	0x1fff95c4

00012e44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   12e44:	b500      	push	{lr}
   12e46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e48:	f7ed ff46 	bl	cd8 <Sys_GetCoreID>
   12e4c:	4603      	mov	r3, r0
   12e4e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]--;
   12e50:	4a0d      	ldr	r2, [pc, #52]	; (12e88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   12e52:	9b01      	ldr	r3, [sp, #4]
   12e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e58:	1e5a      	subs	r2, r3, #1
   12e5a:	490b      	ldr	r1, [pc, #44]	; (12e88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   12e5c:	9b01      	ldr	r3, [sp, #4]
   12e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_76[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]))         /*if interrupts were enabled*/
   12e62:	4a0a      	ldr	r2, [pc, #40]	; (12e8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x48>)
   12e64:	9b01      	ldr	r3, [sp, #4]
   12e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e6a:	f003 0301 	and.w	r3, r3, #1
   12e6e:	2b00      	cmp	r3, #0
   12e70:	d106      	bne.n	12e80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
   12e72:	4a05      	ldr	r2, [pc, #20]	; (12e88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   12e74:	9b01      	ldr	r3, [sp, #4]
   12e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e7a:	2b00      	cmp	r3, #0
   12e7c:	d100      	bne.n	12e80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12e7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12e80:	bf00      	nop
   12e82:	b003      	add	sp, #12
   12e84:	f85d fb04 	ldr.w	pc, [sp], #4
   12e88:	1fff95c8 	.word	0x1fff95c8
   12e8c:	1fff95c4 	.word	0x1fff95c4

00012e90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   12e90:	b500      	push	{lr}
   12e92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e94:	f7ed ff20 	bl	cd8 <Sys_GetCoreID>
   12e98:	4603      	mov	r3, r0
   12e9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId])
   12e9c:	4a10      	ldr	r2, [pc, #64]	; (12ee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   12e9e:	9b01      	ldr	r3, [sp, #4]
   12ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ea4:	2b00      	cmp	r3, #0
   12ea6:	d10d      	bne.n	12ec4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12ea8:	f7ed fd76 	bl	998 <Adc_schm_read_msr>
   12eac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12eae:	9b00      	ldr	r3, [sp, #0]
   12eb0:	f003 0301 	and.w	r3, r3, #1
   12eb4:	2b00      	cmp	r3, #0
   12eb6:	d100      	bne.n	12eba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12eb8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_77[u32CoreId] = msr;
   12eba:	490a      	ldr	r1, [pc, #40]	; (12ee4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x54>)
   12ebc:	9b01      	ldr	r3, [sp, #4]
   12ebe:	9a00      	ldr	r2, [sp, #0]
   12ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]++;
   12ec4:	4a06      	ldr	r2, [pc, #24]	; (12ee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   12ec6:	9b01      	ldr	r3, [sp, #4]
   12ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ecc:	1c5a      	adds	r2, r3, #1
   12ece:	4904      	ldr	r1, [pc, #16]	; (12ee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   12ed0:	9b01      	ldr	r3, [sp, #4]
   12ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12ed6:	bf00      	nop
   12ed8:	b003      	add	sp, #12
   12eda:	f85d fb04 	ldr.w	pc, [sp], #4
   12ede:	bf00      	nop
   12ee0:	1fff95d0 	.word	0x1fff95d0
   12ee4:	1fff95cc 	.word	0x1fff95cc

00012ee8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   12ee8:	b500      	push	{lr}
   12eea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12eec:	f7ed fef4 	bl	cd8 <Sys_GetCoreID>
   12ef0:	4603      	mov	r3, r0
   12ef2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]--;
   12ef4:	4a0d      	ldr	r2, [pc, #52]	; (12f2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   12ef6:	9b01      	ldr	r3, [sp, #4]
   12ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12efc:	1e5a      	subs	r2, r3, #1
   12efe:	490b      	ldr	r1, [pc, #44]	; (12f2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   12f00:	9b01      	ldr	r3, [sp, #4]
   12f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_77[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]))         /*if interrupts were enabled*/
   12f06:	4a0a      	ldr	r2, [pc, #40]	; (12f30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x48>)
   12f08:	9b01      	ldr	r3, [sp, #4]
   12f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f0e:	f003 0301 	and.w	r3, r3, #1
   12f12:	2b00      	cmp	r3, #0
   12f14:	d106      	bne.n	12f24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
   12f16:	4a05      	ldr	r2, [pc, #20]	; (12f2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   12f18:	9b01      	ldr	r3, [sp, #4]
   12f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f1e:	2b00      	cmp	r3, #0
   12f20:	d100      	bne.n	12f24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12f22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12f24:	bf00      	nop
   12f26:	b003      	add	sp, #12
   12f28:	f85d fb04 	ldr.w	pc, [sp], #4
   12f2c:	1fff95d0 	.word	0x1fff95d0
   12f30:	1fff95cc 	.word	0x1fff95cc

00012f34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   12f34:	b500      	push	{lr}
   12f36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f38:	f7ed fece 	bl	cd8 <Sys_GetCoreID>
   12f3c:	4603      	mov	r3, r0
   12f3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId])
   12f40:	4a10      	ldr	r2, [pc, #64]	; (12f84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   12f42:	9b01      	ldr	r3, [sp, #4]
   12f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f48:	2b00      	cmp	r3, #0
   12f4a:	d10d      	bne.n	12f68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12f4c:	f7ed fd24 	bl	998 <Adc_schm_read_msr>
   12f50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12f52:	9b00      	ldr	r3, [sp, #0]
   12f54:	f003 0301 	and.w	r3, r3, #1
   12f58:	2b00      	cmp	r3, #0
   12f5a:	d100      	bne.n	12f5e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12f5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_78[u32CoreId] = msr;
   12f5e:	490a      	ldr	r1, [pc, #40]	; (12f88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x54>)
   12f60:	9b01      	ldr	r3, [sp, #4]
   12f62:	9a00      	ldr	r2, [sp, #0]
   12f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]++;
   12f68:	4a06      	ldr	r2, [pc, #24]	; (12f84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   12f6a:	9b01      	ldr	r3, [sp, #4]
   12f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f70:	1c5a      	adds	r2, r3, #1
   12f72:	4904      	ldr	r1, [pc, #16]	; (12f84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   12f74:	9b01      	ldr	r3, [sp, #4]
   12f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12f7a:	bf00      	nop
   12f7c:	b003      	add	sp, #12
   12f7e:	f85d fb04 	ldr.w	pc, [sp], #4
   12f82:	bf00      	nop
   12f84:	1fff95d8 	.word	0x1fff95d8
   12f88:	1fff95d4 	.word	0x1fff95d4

00012f8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   12f8c:	b500      	push	{lr}
   12f8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f90:	f7ed fea2 	bl	cd8 <Sys_GetCoreID>
   12f94:	4603      	mov	r3, r0
   12f96:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]--;
   12f98:	4a0d      	ldr	r2, [pc, #52]	; (12fd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   12f9a:	9b01      	ldr	r3, [sp, #4]
   12f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fa0:	1e5a      	subs	r2, r3, #1
   12fa2:	490b      	ldr	r1, [pc, #44]	; (12fd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   12fa4:	9b01      	ldr	r3, [sp, #4]
   12fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_78[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]))         /*if interrupts were enabled*/
   12faa:	4a0a      	ldr	r2, [pc, #40]	; (12fd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x48>)
   12fac:	9b01      	ldr	r3, [sp, #4]
   12fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fb2:	f003 0301 	and.w	r3, r3, #1
   12fb6:	2b00      	cmp	r3, #0
   12fb8:	d106      	bne.n	12fc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
   12fba:	4a05      	ldr	r2, [pc, #20]	; (12fd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   12fbc:	9b01      	ldr	r3, [sp, #4]
   12fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fc2:	2b00      	cmp	r3, #0
   12fc4:	d100      	bne.n	12fc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12fc6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12fc8:	bf00      	nop
   12fca:	b003      	add	sp, #12
   12fcc:	f85d fb04 	ldr.w	pc, [sp], #4
   12fd0:	1fff95d8 	.word	0x1fff95d8
   12fd4:	1fff95d4 	.word	0x1fff95d4

00012fd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   12fd8:	b500      	push	{lr}
   12fda:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12fdc:	f7ed fe7c 	bl	cd8 <Sys_GetCoreID>
   12fe0:	4603      	mov	r3, r0
   12fe2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId])
   12fe4:	4a10      	ldr	r2, [pc, #64]	; (13028 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   12fe6:	9b01      	ldr	r3, [sp, #4]
   12fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fec:	2b00      	cmp	r3, #0
   12fee:	d10d      	bne.n	1300c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12ff0:	f7ed fcd2 	bl	998 <Adc_schm_read_msr>
   12ff4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12ff6:	9b00      	ldr	r3, [sp, #0]
   12ff8:	f003 0301 	and.w	r3, r3, #1
   12ffc:	2b00      	cmp	r3, #0
   12ffe:	d100      	bne.n	13002 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13000:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_79[u32CoreId] = msr;
   13002:	490a      	ldr	r1, [pc, #40]	; (1302c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x54>)
   13004:	9b01      	ldr	r3, [sp, #4]
   13006:	9a00      	ldr	r2, [sp, #0]
   13008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]++;
   1300c:	4a06      	ldr	r2, [pc, #24]	; (13028 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   1300e:	9b01      	ldr	r3, [sp, #4]
   13010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13014:	1c5a      	adds	r2, r3, #1
   13016:	4904      	ldr	r1, [pc, #16]	; (13028 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   13018:	9b01      	ldr	r3, [sp, #4]
   1301a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1301e:	bf00      	nop
   13020:	b003      	add	sp, #12
   13022:	f85d fb04 	ldr.w	pc, [sp], #4
   13026:	bf00      	nop
   13028:	1fff95e0 	.word	0x1fff95e0
   1302c:	1fff95dc 	.word	0x1fff95dc

00013030 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   13030:	b500      	push	{lr}
   13032:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13034:	f7ed fe50 	bl	cd8 <Sys_GetCoreID>
   13038:	4603      	mov	r3, r0
   1303a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]--;
   1303c:	4a0d      	ldr	r2, [pc, #52]	; (13074 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   1303e:	9b01      	ldr	r3, [sp, #4]
   13040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13044:	1e5a      	subs	r2, r3, #1
   13046:	490b      	ldr	r1, [pc, #44]	; (13074 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   13048:	9b01      	ldr	r3, [sp, #4]
   1304a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_79[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]))         /*if interrupts were enabled*/
   1304e:	4a0a      	ldr	r2, [pc, #40]	; (13078 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x48>)
   13050:	9b01      	ldr	r3, [sp, #4]
   13052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13056:	f003 0301 	and.w	r3, r3, #1
   1305a:	2b00      	cmp	r3, #0
   1305c:	d106      	bne.n	1306c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
   1305e:	4a05      	ldr	r2, [pc, #20]	; (13074 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   13060:	9b01      	ldr	r3, [sp, #4]
   13062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13066:	2b00      	cmp	r3, #0
   13068:	d100      	bne.n	1306c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1306a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1306c:	bf00      	nop
   1306e:	b003      	add	sp, #12
   13070:	f85d fb04 	ldr.w	pc, [sp], #4
   13074:	1fff95e0 	.word	0x1fff95e0
   13078:	1fff95dc 	.word	0x1fff95dc

0001307c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   1307c:	b500      	push	{lr}
   1307e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13080:	f7ed fe2a 	bl	cd8 <Sys_GetCoreID>
   13084:	4603      	mov	r3, r0
   13086:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId])
   13088:	4a10      	ldr	r2, [pc, #64]	; (130cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   1308a:	9b01      	ldr	r3, [sp, #4]
   1308c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13090:	2b00      	cmp	r3, #0
   13092:	d10d      	bne.n	130b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13094:	f7ed fc80 	bl	998 <Adc_schm_read_msr>
   13098:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1309a:	9b00      	ldr	r3, [sp, #0]
   1309c:	f003 0301 	and.w	r3, r3, #1
   130a0:	2b00      	cmp	r3, #0
   130a2:	d100      	bne.n	130a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   130a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_80[u32CoreId] = msr;
   130a6:	490a      	ldr	r1, [pc, #40]	; (130d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x54>)
   130a8:	9b01      	ldr	r3, [sp, #4]
   130aa:	9a00      	ldr	r2, [sp, #0]
   130ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]++;
   130b0:	4a06      	ldr	r2, [pc, #24]	; (130cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   130b2:	9b01      	ldr	r3, [sp, #4]
   130b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130b8:	1c5a      	adds	r2, r3, #1
   130ba:	4904      	ldr	r1, [pc, #16]	; (130cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   130bc:	9b01      	ldr	r3, [sp, #4]
   130be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   130c2:	bf00      	nop
   130c4:	b003      	add	sp, #12
   130c6:	f85d fb04 	ldr.w	pc, [sp], #4
   130ca:	bf00      	nop
   130cc:	1fff95e8 	.word	0x1fff95e8
   130d0:	1fff95e4 	.word	0x1fff95e4

000130d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   130d4:	b500      	push	{lr}
   130d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   130d8:	f7ed fdfe 	bl	cd8 <Sys_GetCoreID>
   130dc:	4603      	mov	r3, r0
   130de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]--;
   130e0:	4a0d      	ldr	r2, [pc, #52]	; (13118 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   130e2:	9b01      	ldr	r3, [sp, #4]
   130e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130e8:	1e5a      	subs	r2, r3, #1
   130ea:	490b      	ldr	r1, [pc, #44]	; (13118 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   130ec:	9b01      	ldr	r3, [sp, #4]
   130ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_80[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]))         /*if interrupts were enabled*/
   130f2:	4a0a      	ldr	r2, [pc, #40]	; (1311c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x48>)
   130f4:	9b01      	ldr	r3, [sp, #4]
   130f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130fa:	f003 0301 	and.w	r3, r3, #1
   130fe:	2b00      	cmp	r3, #0
   13100:	d106      	bne.n	13110 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
   13102:	4a05      	ldr	r2, [pc, #20]	; (13118 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   13104:	9b01      	ldr	r3, [sp, #4]
   13106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1310a:	2b00      	cmp	r3, #0
   1310c:	d100      	bne.n	13110 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1310e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13110:	bf00      	nop
   13112:	b003      	add	sp, #12
   13114:	f85d fb04 	ldr.w	pc, [sp], #4
   13118:	1fff95e8 	.word	0x1fff95e8
   1311c:	1fff95e4 	.word	0x1fff95e4

00013120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   13120:	b500      	push	{lr}
   13122:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13124:	f7ed fdd8 	bl	cd8 <Sys_GetCoreID>
   13128:	4603      	mov	r3, r0
   1312a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId])
   1312c:	4a10      	ldr	r2, [pc, #64]	; (13170 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   1312e:	9b01      	ldr	r3, [sp, #4]
   13130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13134:	2b00      	cmp	r3, #0
   13136:	d10d      	bne.n	13154 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13138:	f7ed fc2e 	bl	998 <Adc_schm_read_msr>
   1313c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1313e:	9b00      	ldr	r3, [sp, #0]
   13140:	f003 0301 	and.w	r3, r3, #1
   13144:	2b00      	cmp	r3, #0
   13146:	d100      	bne.n	1314a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13148:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_81[u32CoreId] = msr;
   1314a:	490a      	ldr	r1, [pc, #40]	; (13174 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x54>)
   1314c:	9b01      	ldr	r3, [sp, #4]
   1314e:	9a00      	ldr	r2, [sp, #0]
   13150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]++;
   13154:	4a06      	ldr	r2, [pc, #24]	; (13170 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   13156:	9b01      	ldr	r3, [sp, #4]
   13158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1315c:	1c5a      	adds	r2, r3, #1
   1315e:	4904      	ldr	r1, [pc, #16]	; (13170 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   13160:	9b01      	ldr	r3, [sp, #4]
   13162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13166:	bf00      	nop
   13168:	b003      	add	sp, #12
   1316a:	f85d fb04 	ldr.w	pc, [sp], #4
   1316e:	bf00      	nop
   13170:	1fff95f0 	.word	0x1fff95f0
   13174:	1fff95ec 	.word	0x1fff95ec

00013178 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   13178:	b500      	push	{lr}
   1317a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1317c:	f7ed fdac 	bl	cd8 <Sys_GetCoreID>
   13180:	4603      	mov	r3, r0
   13182:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]--;
   13184:	4a0d      	ldr	r2, [pc, #52]	; (131bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   13186:	9b01      	ldr	r3, [sp, #4]
   13188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1318c:	1e5a      	subs	r2, r3, #1
   1318e:	490b      	ldr	r1, [pc, #44]	; (131bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   13190:	9b01      	ldr	r3, [sp, #4]
   13192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_81[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]))         /*if interrupts were enabled*/
   13196:	4a0a      	ldr	r2, [pc, #40]	; (131c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x48>)
   13198:	9b01      	ldr	r3, [sp, #4]
   1319a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1319e:	f003 0301 	and.w	r3, r3, #1
   131a2:	2b00      	cmp	r3, #0
   131a4:	d106      	bne.n	131b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
   131a6:	4a05      	ldr	r2, [pc, #20]	; (131bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   131a8:	9b01      	ldr	r3, [sp, #4]
   131aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131ae:	2b00      	cmp	r3, #0
   131b0:	d100      	bne.n	131b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   131b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   131b4:	bf00      	nop
   131b6:	b003      	add	sp, #12
   131b8:	f85d fb04 	ldr.w	pc, [sp], #4
   131bc:	1fff95f0 	.word	0x1fff95f0
   131c0:	1fff95ec 	.word	0x1fff95ec

000131c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   131c4:	b500      	push	{lr}
   131c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   131c8:	f7ed fd86 	bl	cd8 <Sys_GetCoreID>
   131cc:	4603      	mov	r3, r0
   131ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId])
   131d0:	4a10      	ldr	r2, [pc, #64]	; (13214 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   131d2:	9b01      	ldr	r3, [sp, #4]
   131d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131d8:	2b00      	cmp	r3, #0
   131da:	d10d      	bne.n	131f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   131dc:	f7ed fbdc 	bl	998 <Adc_schm_read_msr>
   131e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   131e2:	9b00      	ldr	r3, [sp, #0]
   131e4:	f003 0301 	and.w	r3, r3, #1
   131e8:	2b00      	cmp	r3, #0
   131ea:	d100      	bne.n	131ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   131ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_82[u32CoreId] = msr;
   131ee:	490a      	ldr	r1, [pc, #40]	; (13218 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x54>)
   131f0:	9b01      	ldr	r3, [sp, #4]
   131f2:	9a00      	ldr	r2, [sp, #0]
   131f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]++;
   131f8:	4a06      	ldr	r2, [pc, #24]	; (13214 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   131fa:	9b01      	ldr	r3, [sp, #4]
   131fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13200:	1c5a      	adds	r2, r3, #1
   13202:	4904      	ldr	r1, [pc, #16]	; (13214 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   13204:	9b01      	ldr	r3, [sp, #4]
   13206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1320a:	bf00      	nop
   1320c:	b003      	add	sp, #12
   1320e:	f85d fb04 	ldr.w	pc, [sp], #4
   13212:	bf00      	nop
   13214:	1fff95f8 	.word	0x1fff95f8
   13218:	1fff95f4 	.word	0x1fff95f4

0001321c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   1321c:	b500      	push	{lr}
   1321e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13220:	f7ed fd5a 	bl	cd8 <Sys_GetCoreID>
   13224:	4603      	mov	r3, r0
   13226:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]--;
   13228:	4a0d      	ldr	r2, [pc, #52]	; (13260 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   1322a:	9b01      	ldr	r3, [sp, #4]
   1322c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13230:	1e5a      	subs	r2, r3, #1
   13232:	490b      	ldr	r1, [pc, #44]	; (13260 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   13234:	9b01      	ldr	r3, [sp, #4]
   13236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_82[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]))         /*if interrupts were enabled*/
   1323a:	4a0a      	ldr	r2, [pc, #40]	; (13264 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x48>)
   1323c:	9b01      	ldr	r3, [sp, #4]
   1323e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13242:	f003 0301 	and.w	r3, r3, #1
   13246:	2b00      	cmp	r3, #0
   13248:	d106      	bne.n	13258 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
   1324a:	4a05      	ldr	r2, [pc, #20]	; (13260 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   1324c:	9b01      	ldr	r3, [sp, #4]
   1324e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13252:	2b00      	cmp	r3, #0
   13254:	d100      	bne.n	13258 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13256:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13258:	bf00      	nop
   1325a:	b003      	add	sp, #12
   1325c:	f85d fb04 	ldr.w	pc, [sp], #4
   13260:	1fff95f8 	.word	0x1fff95f8
   13264:	1fff95f4 	.word	0x1fff95f4

00013268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   13268:	b500      	push	{lr}
   1326a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1326c:	f7ed fd34 	bl	cd8 <Sys_GetCoreID>
   13270:	4603      	mov	r3, r0
   13272:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId])
   13274:	4a10      	ldr	r2, [pc, #64]	; (132b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   13276:	9b01      	ldr	r3, [sp, #4]
   13278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1327c:	2b00      	cmp	r3, #0
   1327e:	d10d      	bne.n	1329c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13280:	f7ed fb8a 	bl	998 <Adc_schm_read_msr>
   13284:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13286:	9b00      	ldr	r3, [sp, #0]
   13288:	f003 0301 	and.w	r3, r3, #1
   1328c:	2b00      	cmp	r3, #0
   1328e:	d100      	bne.n	13292 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13290:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_83[u32CoreId] = msr;
   13292:	490a      	ldr	r1, [pc, #40]	; (132bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x54>)
   13294:	9b01      	ldr	r3, [sp, #4]
   13296:	9a00      	ldr	r2, [sp, #0]
   13298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]++;
   1329c:	4a06      	ldr	r2, [pc, #24]	; (132b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   1329e:	9b01      	ldr	r3, [sp, #4]
   132a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132a4:	1c5a      	adds	r2, r3, #1
   132a6:	4904      	ldr	r1, [pc, #16]	; (132b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   132a8:	9b01      	ldr	r3, [sp, #4]
   132aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   132ae:	bf00      	nop
   132b0:	b003      	add	sp, #12
   132b2:	f85d fb04 	ldr.w	pc, [sp], #4
   132b6:	bf00      	nop
   132b8:	1fff9600 	.word	0x1fff9600
   132bc:	1fff95fc 	.word	0x1fff95fc

000132c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   132c0:	b500      	push	{lr}
   132c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   132c4:	f7ed fd08 	bl	cd8 <Sys_GetCoreID>
   132c8:	4603      	mov	r3, r0
   132ca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]--;
   132cc:	4a0d      	ldr	r2, [pc, #52]	; (13304 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   132ce:	9b01      	ldr	r3, [sp, #4]
   132d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132d4:	1e5a      	subs	r2, r3, #1
   132d6:	490b      	ldr	r1, [pc, #44]	; (13304 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   132d8:	9b01      	ldr	r3, [sp, #4]
   132da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_83[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]))         /*if interrupts were enabled*/
   132de:	4a0a      	ldr	r2, [pc, #40]	; (13308 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x48>)
   132e0:	9b01      	ldr	r3, [sp, #4]
   132e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132e6:	f003 0301 	and.w	r3, r3, #1
   132ea:	2b00      	cmp	r3, #0
   132ec:	d106      	bne.n	132fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
   132ee:	4a05      	ldr	r2, [pc, #20]	; (13304 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   132f0:	9b01      	ldr	r3, [sp, #4]
   132f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132f6:	2b00      	cmp	r3, #0
   132f8:	d100      	bne.n	132fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   132fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   132fc:	bf00      	nop
   132fe:	b003      	add	sp, #12
   13300:	f85d fb04 	ldr.w	pc, [sp], #4
   13304:	1fff9600 	.word	0x1fff9600
   13308:	1fff95fc 	.word	0x1fff95fc

0001330c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   1330c:	b500      	push	{lr}
   1330e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13310:	f7ed fce2 	bl	cd8 <Sys_GetCoreID>
   13314:	4603      	mov	r3, r0
   13316:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId])
   13318:	4a10      	ldr	r2, [pc, #64]	; (1335c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   1331a:	9b01      	ldr	r3, [sp, #4]
   1331c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13320:	2b00      	cmp	r3, #0
   13322:	d10d      	bne.n	13340 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13324:	f7ed fb38 	bl	998 <Adc_schm_read_msr>
   13328:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1332a:	9b00      	ldr	r3, [sp, #0]
   1332c:	f003 0301 	and.w	r3, r3, #1
   13330:	2b00      	cmp	r3, #0
   13332:	d100      	bne.n	13336 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13334:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_84[u32CoreId] = msr;
   13336:	490a      	ldr	r1, [pc, #40]	; (13360 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x54>)
   13338:	9b01      	ldr	r3, [sp, #4]
   1333a:	9a00      	ldr	r2, [sp, #0]
   1333c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]++;
   13340:	4a06      	ldr	r2, [pc, #24]	; (1335c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   13342:	9b01      	ldr	r3, [sp, #4]
   13344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13348:	1c5a      	adds	r2, r3, #1
   1334a:	4904      	ldr	r1, [pc, #16]	; (1335c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   1334c:	9b01      	ldr	r3, [sp, #4]
   1334e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13352:	bf00      	nop
   13354:	b003      	add	sp, #12
   13356:	f85d fb04 	ldr.w	pc, [sp], #4
   1335a:	bf00      	nop
   1335c:	1fff9608 	.word	0x1fff9608
   13360:	1fff9604 	.word	0x1fff9604

00013364 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   13364:	b500      	push	{lr}
   13366:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13368:	f7ed fcb6 	bl	cd8 <Sys_GetCoreID>
   1336c:	4603      	mov	r3, r0
   1336e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]--;
   13370:	4a0d      	ldr	r2, [pc, #52]	; (133a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   13372:	9b01      	ldr	r3, [sp, #4]
   13374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13378:	1e5a      	subs	r2, r3, #1
   1337a:	490b      	ldr	r1, [pc, #44]	; (133a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   1337c:	9b01      	ldr	r3, [sp, #4]
   1337e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_84[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]))         /*if interrupts were enabled*/
   13382:	4a0a      	ldr	r2, [pc, #40]	; (133ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x48>)
   13384:	9b01      	ldr	r3, [sp, #4]
   13386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1338a:	f003 0301 	and.w	r3, r3, #1
   1338e:	2b00      	cmp	r3, #0
   13390:	d106      	bne.n	133a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
   13392:	4a05      	ldr	r2, [pc, #20]	; (133a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   13394:	9b01      	ldr	r3, [sp, #4]
   13396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1339a:	2b00      	cmp	r3, #0
   1339c:	d100      	bne.n	133a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1339e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   133a0:	bf00      	nop
   133a2:	b003      	add	sp, #12
   133a4:	f85d fb04 	ldr.w	pc, [sp], #4
   133a8:	1fff9608 	.word	0x1fff9608
   133ac:	1fff9604 	.word	0x1fff9604

000133b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   133b0:	b500      	push	{lr}
   133b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   133b4:	f7ed fc90 	bl	cd8 <Sys_GetCoreID>
   133b8:	4603      	mov	r3, r0
   133ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId])
   133bc:	4a10      	ldr	r2, [pc, #64]	; (13400 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   133be:	9b01      	ldr	r3, [sp, #4]
   133c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133c4:	2b00      	cmp	r3, #0
   133c6:	d10d      	bne.n	133e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   133c8:	f7ed fae6 	bl	998 <Adc_schm_read_msr>
   133cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   133ce:	9b00      	ldr	r3, [sp, #0]
   133d0:	f003 0301 	and.w	r3, r3, #1
   133d4:	2b00      	cmp	r3, #0
   133d6:	d100      	bne.n	133da <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   133d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_85[u32CoreId] = msr;
   133da:	490a      	ldr	r1, [pc, #40]	; (13404 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x54>)
   133dc:	9b01      	ldr	r3, [sp, #4]
   133de:	9a00      	ldr	r2, [sp, #0]
   133e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]++;
   133e4:	4a06      	ldr	r2, [pc, #24]	; (13400 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   133e6:	9b01      	ldr	r3, [sp, #4]
   133e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133ec:	1c5a      	adds	r2, r3, #1
   133ee:	4904      	ldr	r1, [pc, #16]	; (13400 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   133f0:	9b01      	ldr	r3, [sp, #4]
   133f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   133f6:	bf00      	nop
   133f8:	b003      	add	sp, #12
   133fa:	f85d fb04 	ldr.w	pc, [sp], #4
   133fe:	bf00      	nop
   13400:	1fff9610 	.word	0x1fff9610
   13404:	1fff960c 	.word	0x1fff960c

00013408 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   13408:	b500      	push	{lr}
   1340a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1340c:	f7ed fc64 	bl	cd8 <Sys_GetCoreID>
   13410:	4603      	mov	r3, r0
   13412:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]--;
   13414:	4a0d      	ldr	r2, [pc, #52]	; (1344c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   13416:	9b01      	ldr	r3, [sp, #4]
   13418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1341c:	1e5a      	subs	r2, r3, #1
   1341e:	490b      	ldr	r1, [pc, #44]	; (1344c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   13420:	9b01      	ldr	r3, [sp, #4]
   13422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_85[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]))         /*if interrupts were enabled*/
   13426:	4a0a      	ldr	r2, [pc, #40]	; (13450 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x48>)
   13428:	9b01      	ldr	r3, [sp, #4]
   1342a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1342e:	f003 0301 	and.w	r3, r3, #1
   13432:	2b00      	cmp	r3, #0
   13434:	d106      	bne.n	13444 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
   13436:	4a05      	ldr	r2, [pc, #20]	; (1344c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   13438:	9b01      	ldr	r3, [sp, #4]
   1343a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1343e:	2b00      	cmp	r3, #0
   13440:	d100      	bne.n	13444 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13442:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13444:	bf00      	nop
   13446:	b003      	add	sp, #12
   13448:	f85d fb04 	ldr.w	pc, [sp], #4
   1344c:	1fff9610 	.word	0x1fff9610
   13450:	1fff960c 	.word	0x1fff960c

00013454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   13454:	b500      	push	{lr}
   13456:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13458:	f7ed fc3e 	bl	cd8 <Sys_GetCoreID>
   1345c:	4603      	mov	r3, r0
   1345e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId])
   13460:	4a10      	ldr	r2, [pc, #64]	; (134a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   13462:	9b01      	ldr	r3, [sp, #4]
   13464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13468:	2b00      	cmp	r3, #0
   1346a:	d10d      	bne.n	13488 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1346c:	f7ed fa94 	bl	998 <Adc_schm_read_msr>
   13470:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13472:	9b00      	ldr	r3, [sp, #0]
   13474:	f003 0301 	and.w	r3, r3, #1
   13478:	2b00      	cmp	r3, #0
   1347a:	d100      	bne.n	1347e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1347c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_86[u32CoreId] = msr;
   1347e:	490a      	ldr	r1, [pc, #40]	; (134a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x54>)
   13480:	9b01      	ldr	r3, [sp, #4]
   13482:	9a00      	ldr	r2, [sp, #0]
   13484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]++;
   13488:	4a06      	ldr	r2, [pc, #24]	; (134a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   1348a:	9b01      	ldr	r3, [sp, #4]
   1348c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13490:	1c5a      	adds	r2, r3, #1
   13492:	4904      	ldr	r1, [pc, #16]	; (134a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   13494:	9b01      	ldr	r3, [sp, #4]
   13496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1349a:	bf00      	nop
   1349c:	b003      	add	sp, #12
   1349e:	f85d fb04 	ldr.w	pc, [sp], #4
   134a2:	bf00      	nop
   134a4:	1fff9618 	.word	0x1fff9618
   134a8:	1fff9614 	.word	0x1fff9614

000134ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   134ac:	b500      	push	{lr}
   134ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   134b0:	f7ed fc12 	bl	cd8 <Sys_GetCoreID>
   134b4:	4603      	mov	r3, r0
   134b6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]--;
   134b8:	4a0d      	ldr	r2, [pc, #52]	; (134f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   134ba:	9b01      	ldr	r3, [sp, #4]
   134bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134c0:	1e5a      	subs	r2, r3, #1
   134c2:	490b      	ldr	r1, [pc, #44]	; (134f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   134c4:	9b01      	ldr	r3, [sp, #4]
   134c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_86[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]))         /*if interrupts were enabled*/
   134ca:	4a0a      	ldr	r2, [pc, #40]	; (134f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x48>)
   134cc:	9b01      	ldr	r3, [sp, #4]
   134ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134d2:	f003 0301 	and.w	r3, r3, #1
   134d6:	2b00      	cmp	r3, #0
   134d8:	d106      	bne.n	134e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
   134da:	4a05      	ldr	r2, [pc, #20]	; (134f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   134dc:	9b01      	ldr	r3, [sp, #4]
   134de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134e2:	2b00      	cmp	r3, #0
   134e4:	d100      	bne.n	134e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   134e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   134e8:	bf00      	nop
   134ea:	b003      	add	sp, #12
   134ec:	f85d fb04 	ldr.w	pc, [sp], #4
   134f0:	1fff9618 	.word	0x1fff9618
   134f4:	1fff9614 	.word	0x1fff9614

000134f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   134f8:	b500      	push	{lr}
   134fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   134fc:	f7ed fbec 	bl	cd8 <Sys_GetCoreID>
   13500:	4603      	mov	r3, r0
   13502:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId])
   13504:	4a10      	ldr	r2, [pc, #64]	; (13548 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   13506:	9b01      	ldr	r3, [sp, #4]
   13508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1350c:	2b00      	cmp	r3, #0
   1350e:	d10d      	bne.n	1352c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13510:	f7ed fa42 	bl	998 <Adc_schm_read_msr>
   13514:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13516:	9b00      	ldr	r3, [sp, #0]
   13518:	f003 0301 	and.w	r3, r3, #1
   1351c:	2b00      	cmp	r3, #0
   1351e:	d100      	bne.n	13522 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13520:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_87[u32CoreId] = msr;
   13522:	490a      	ldr	r1, [pc, #40]	; (1354c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x54>)
   13524:	9b01      	ldr	r3, [sp, #4]
   13526:	9a00      	ldr	r2, [sp, #0]
   13528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]++;
   1352c:	4a06      	ldr	r2, [pc, #24]	; (13548 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   1352e:	9b01      	ldr	r3, [sp, #4]
   13530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13534:	1c5a      	adds	r2, r3, #1
   13536:	4904      	ldr	r1, [pc, #16]	; (13548 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   13538:	9b01      	ldr	r3, [sp, #4]
   1353a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1353e:	bf00      	nop
   13540:	b003      	add	sp, #12
   13542:	f85d fb04 	ldr.w	pc, [sp], #4
   13546:	bf00      	nop
   13548:	1fff9620 	.word	0x1fff9620
   1354c:	1fff961c 	.word	0x1fff961c

00013550 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   13550:	b500      	push	{lr}
   13552:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13554:	f7ed fbc0 	bl	cd8 <Sys_GetCoreID>
   13558:	4603      	mov	r3, r0
   1355a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]--;
   1355c:	4a0d      	ldr	r2, [pc, #52]	; (13594 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   1355e:	9b01      	ldr	r3, [sp, #4]
   13560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13564:	1e5a      	subs	r2, r3, #1
   13566:	490b      	ldr	r1, [pc, #44]	; (13594 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   13568:	9b01      	ldr	r3, [sp, #4]
   1356a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_87[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]))         /*if interrupts were enabled*/
   1356e:	4a0a      	ldr	r2, [pc, #40]	; (13598 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x48>)
   13570:	9b01      	ldr	r3, [sp, #4]
   13572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13576:	f003 0301 	and.w	r3, r3, #1
   1357a:	2b00      	cmp	r3, #0
   1357c:	d106      	bne.n	1358c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
   1357e:	4a05      	ldr	r2, [pc, #20]	; (13594 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   13580:	9b01      	ldr	r3, [sp, #4]
   13582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13586:	2b00      	cmp	r3, #0
   13588:	d100      	bne.n	1358c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1358a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1358c:	bf00      	nop
   1358e:	b003      	add	sp, #12
   13590:	f85d fb04 	ldr.w	pc, [sp], #4
   13594:	1fff9620 	.word	0x1fff9620
   13598:	1fff961c 	.word	0x1fff961c

0001359c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   1359c:	b500      	push	{lr}
   1359e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   135a0:	f7ed fb9a 	bl	cd8 <Sys_GetCoreID>
   135a4:	4603      	mov	r3, r0
   135a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId])
   135a8:	4a10      	ldr	r2, [pc, #64]	; (135ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   135aa:	9b01      	ldr	r3, [sp, #4]
   135ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135b0:	2b00      	cmp	r3, #0
   135b2:	d10d      	bne.n	135d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   135b4:	f7ed f9f0 	bl	998 <Adc_schm_read_msr>
   135b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   135ba:	9b00      	ldr	r3, [sp, #0]
   135bc:	f003 0301 	and.w	r3, r3, #1
   135c0:	2b00      	cmp	r3, #0
   135c2:	d100      	bne.n	135c6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   135c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_88[u32CoreId] = msr;
   135c6:	490a      	ldr	r1, [pc, #40]	; (135f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x54>)
   135c8:	9b01      	ldr	r3, [sp, #4]
   135ca:	9a00      	ldr	r2, [sp, #0]
   135cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]++;
   135d0:	4a06      	ldr	r2, [pc, #24]	; (135ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   135d2:	9b01      	ldr	r3, [sp, #4]
   135d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135d8:	1c5a      	adds	r2, r3, #1
   135da:	4904      	ldr	r1, [pc, #16]	; (135ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   135dc:	9b01      	ldr	r3, [sp, #4]
   135de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   135e2:	bf00      	nop
   135e4:	b003      	add	sp, #12
   135e6:	f85d fb04 	ldr.w	pc, [sp], #4
   135ea:	bf00      	nop
   135ec:	1fff9628 	.word	0x1fff9628
   135f0:	1fff9624 	.word	0x1fff9624

000135f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   135f4:	b500      	push	{lr}
   135f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   135f8:	f7ed fb6e 	bl	cd8 <Sys_GetCoreID>
   135fc:	4603      	mov	r3, r0
   135fe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]--;
   13600:	4a0d      	ldr	r2, [pc, #52]	; (13638 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   13602:	9b01      	ldr	r3, [sp, #4]
   13604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13608:	1e5a      	subs	r2, r3, #1
   1360a:	490b      	ldr	r1, [pc, #44]	; (13638 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   1360c:	9b01      	ldr	r3, [sp, #4]
   1360e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_88[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]))         /*if interrupts were enabled*/
   13612:	4a0a      	ldr	r2, [pc, #40]	; (1363c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x48>)
   13614:	9b01      	ldr	r3, [sp, #4]
   13616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1361a:	f003 0301 	and.w	r3, r3, #1
   1361e:	2b00      	cmp	r3, #0
   13620:	d106      	bne.n	13630 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
   13622:	4a05      	ldr	r2, [pc, #20]	; (13638 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   13624:	9b01      	ldr	r3, [sp, #4]
   13626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1362a:	2b00      	cmp	r3, #0
   1362c:	d100      	bne.n	13630 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1362e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13630:	bf00      	nop
   13632:	b003      	add	sp, #12
   13634:	f85d fb04 	ldr.w	pc, [sp], #4
   13638:	1fff9628 	.word	0x1fff9628
   1363c:	1fff9624 	.word	0x1fff9624

00013640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   13640:	b500      	push	{lr}
   13642:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13644:	f7ed fb48 	bl	cd8 <Sys_GetCoreID>
   13648:	4603      	mov	r3, r0
   1364a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId])
   1364c:	4a10      	ldr	r2, [pc, #64]	; (13690 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   1364e:	9b01      	ldr	r3, [sp, #4]
   13650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13654:	2b00      	cmp	r3, #0
   13656:	d10d      	bne.n	13674 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13658:	f7ed f99e 	bl	998 <Adc_schm_read_msr>
   1365c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1365e:	9b00      	ldr	r3, [sp, #0]
   13660:	f003 0301 	and.w	r3, r3, #1
   13664:	2b00      	cmp	r3, #0
   13666:	d100      	bne.n	1366a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13668:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_89[u32CoreId] = msr;
   1366a:	490a      	ldr	r1, [pc, #40]	; (13694 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x54>)
   1366c:	9b01      	ldr	r3, [sp, #4]
   1366e:	9a00      	ldr	r2, [sp, #0]
   13670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]++;
   13674:	4a06      	ldr	r2, [pc, #24]	; (13690 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   13676:	9b01      	ldr	r3, [sp, #4]
   13678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1367c:	1c5a      	adds	r2, r3, #1
   1367e:	4904      	ldr	r1, [pc, #16]	; (13690 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   13680:	9b01      	ldr	r3, [sp, #4]
   13682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13686:	bf00      	nop
   13688:	b003      	add	sp, #12
   1368a:	f85d fb04 	ldr.w	pc, [sp], #4
   1368e:	bf00      	nop
   13690:	1fff9630 	.word	0x1fff9630
   13694:	1fff962c 	.word	0x1fff962c

00013698 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   13698:	b500      	push	{lr}
   1369a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1369c:	f7ed fb1c 	bl	cd8 <Sys_GetCoreID>
   136a0:	4603      	mov	r3, r0
   136a2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]--;
   136a4:	4a0d      	ldr	r2, [pc, #52]	; (136dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   136a6:	9b01      	ldr	r3, [sp, #4]
   136a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136ac:	1e5a      	subs	r2, r3, #1
   136ae:	490b      	ldr	r1, [pc, #44]	; (136dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   136b0:	9b01      	ldr	r3, [sp, #4]
   136b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_89[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]))         /*if interrupts were enabled*/
   136b6:	4a0a      	ldr	r2, [pc, #40]	; (136e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x48>)
   136b8:	9b01      	ldr	r3, [sp, #4]
   136ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136be:	f003 0301 	and.w	r3, r3, #1
   136c2:	2b00      	cmp	r3, #0
   136c4:	d106      	bne.n	136d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
   136c6:	4a05      	ldr	r2, [pc, #20]	; (136dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   136c8:	9b01      	ldr	r3, [sp, #4]
   136ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136ce:	2b00      	cmp	r3, #0
   136d0:	d100      	bne.n	136d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   136d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   136d4:	bf00      	nop
   136d6:	b003      	add	sp, #12
   136d8:	f85d fb04 	ldr.w	pc, [sp], #4
   136dc:	1fff9630 	.word	0x1fff9630
   136e0:	1fff962c 	.word	0x1fff962c

000136e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   136e4:	b500      	push	{lr}
   136e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   136e8:	f7ed faf6 	bl	cd8 <Sys_GetCoreID>
   136ec:	4603      	mov	r3, r0
   136ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId])
   136f0:	4a10      	ldr	r2, [pc, #64]	; (13734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   136f2:	9b01      	ldr	r3, [sp, #4]
   136f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136f8:	2b00      	cmp	r3, #0
   136fa:	d10d      	bne.n	13718 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   136fc:	f7ed f94c 	bl	998 <Adc_schm_read_msr>
   13700:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13702:	9b00      	ldr	r3, [sp, #0]
   13704:	f003 0301 	and.w	r3, r3, #1
   13708:	2b00      	cmp	r3, #0
   1370a:	d100      	bne.n	1370e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1370c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_90[u32CoreId] = msr;
   1370e:	490a      	ldr	r1, [pc, #40]	; (13738 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x54>)
   13710:	9b01      	ldr	r3, [sp, #4]
   13712:	9a00      	ldr	r2, [sp, #0]
   13714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]++;
   13718:	4a06      	ldr	r2, [pc, #24]	; (13734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   1371a:	9b01      	ldr	r3, [sp, #4]
   1371c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13720:	1c5a      	adds	r2, r3, #1
   13722:	4904      	ldr	r1, [pc, #16]	; (13734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   13724:	9b01      	ldr	r3, [sp, #4]
   13726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1372a:	bf00      	nop
   1372c:	b003      	add	sp, #12
   1372e:	f85d fb04 	ldr.w	pc, [sp], #4
   13732:	bf00      	nop
   13734:	1fff9638 	.word	0x1fff9638
   13738:	1fff9634 	.word	0x1fff9634

0001373c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   1373c:	b500      	push	{lr}
   1373e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13740:	f7ed faca 	bl	cd8 <Sys_GetCoreID>
   13744:	4603      	mov	r3, r0
   13746:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]--;
   13748:	4a0d      	ldr	r2, [pc, #52]	; (13780 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   1374a:	9b01      	ldr	r3, [sp, #4]
   1374c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13750:	1e5a      	subs	r2, r3, #1
   13752:	490b      	ldr	r1, [pc, #44]	; (13780 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   13754:	9b01      	ldr	r3, [sp, #4]
   13756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_90[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]))         /*if interrupts were enabled*/
   1375a:	4a0a      	ldr	r2, [pc, #40]	; (13784 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x48>)
   1375c:	9b01      	ldr	r3, [sp, #4]
   1375e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13762:	f003 0301 	and.w	r3, r3, #1
   13766:	2b00      	cmp	r3, #0
   13768:	d106      	bne.n	13778 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
   1376a:	4a05      	ldr	r2, [pc, #20]	; (13780 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   1376c:	9b01      	ldr	r3, [sp, #4]
   1376e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13772:	2b00      	cmp	r3, #0
   13774:	d100      	bne.n	13778 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13776:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13778:	bf00      	nop
   1377a:	b003      	add	sp, #12
   1377c:	f85d fb04 	ldr.w	pc, [sp], #4
   13780:	1fff9638 	.word	0x1fff9638
   13784:	1fff9634 	.word	0x1fff9634

00013788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   13788:	b500      	push	{lr}
   1378a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1378c:	f7ed faa4 	bl	cd8 <Sys_GetCoreID>
   13790:	4603      	mov	r3, r0
   13792:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId])
   13794:	4a10      	ldr	r2, [pc, #64]	; (137d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   13796:	9b01      	ldr	r3, [sp, #4]
   13798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1379c:	2b00      	cmp	r3, #0
   1379e:	d10d      	bne.n	137bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   137a0:	f7ed f8fa 	bl	998 <Adc_schm_read_msr>
   137a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   137a6:	9b00      	ldr	r3, [sp, #0]
   137a8:	f003 0301 	and.w	r3, r3, #1
   137ac:	2b00      	cmp	r3, #0
   137ae:	d100      	bne.n	137b2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   137b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_91[u32CoreId] = msr;
   137b2:	490a      	ldr	r1, [pc, #40]	; (137dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x54>)
   137b4:	9b01      	ldr	r3, [sp, #4]
   137b6:	9a00      	ldr	r2, [sp, #0]
   137b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]++;
   137bc:	4a06      	ldr	r2, [pc, #24]	; (137d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   137be:	9b01      	ldr	r3, [sp, #4]
   137c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137c4:	1c5a      	adds	r2, r3, #1
   137c6:	4904      	ldr	r1, [pc, #16]	; (137d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   137c8:	9b01      	ldr	r3, [sp, #4]
   137ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   137ce:	bf00      	nop
   137d0:	b003      	add	sp, #12
   137d2:	f85d fb04 	ldr.w	pc, [sp], #4
   137d6:	bf00      	nop
   137d8:	1fff9640 	.word	0x1fff9640
   137dc:	1fff963c 	.word	0x1fff963c

000137e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   137e0:	b500      	push	{lr}
   137e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   137e4:	f7ed fa78 	bl	cd8 <Sys_GetCoreID>
   137e8:	4603      	mov	r3, r0
   137ea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]--;
   137ec:	4a0d      	ldr	r2, [pc, #52]	; (13824 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   137ee:	9b01      	ldr	r3, [sp, #4]
   137f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137f4:	1e5a      	subs	r2, r3, #1
   137f6:	490b      	ldr	r1, [pc, #44]	; (13824 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   137f8:	9b01      	ldr	r3, [sp, #4]
   137fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_91[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]))         /*if interrupts were enabled*/
   137fe:	4a0a      	ldr	r2, [pc, #40]	; (13828 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x48>)
   13800:	9b01      	ldr	r3, [sp, #4]
   13802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13806:	f003 0301 	and.w	r3, r3, #1
   1380a:	2b00      	cmp	r3, #0
   1380c:	d106      	bne.n	1381c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
   1380e:	4a05      	ldr	r2, [pc, #20]	; (13824 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   13810:	9b01      	ldr	r3, [sp, #4]
   13812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13816:	2b00      	cmp	r3, #0
   13818:	d100      	bne.n	1381c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1381a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1381c:	bf00      	nop
   1381e:	b003      	add	sp, #12
   13820:	f85d fb04 	ldr.w	pc, [sp], #4
   13824:	1fff9640 	.word	0x1fff9640
   13828:	1fff963c 	.word	0x1fff963c

0001382c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   1382c:	b500      	push	{lr}
   1382e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13830:	f7ed fa52 	bl	cd8 <Sys_GetCoreID>
   13834:	4603      	mov	r3, r0
   13836:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId])
   13838:	4a10      	ldr	r2, [pc, #64]	; (1387c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   1383a:	9b01      	ldr	r3, [sp, #4]
   1383c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13840:	2b00      	cmp	r3, #0
   13842:	d10d      	bne.n	13860 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13844:	f7ed f8a8 	bl	998 <Adc_schm_read_msr>
   13848:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1384a:	9b00      	ldr	r3, [sp, #0]
   1384c:	f003 0301 	and.w	r3, r3, #1
   13850:	2b00      	cmp	r3, #0
   13852:	d100      	bne.n	13856 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13854:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_92[u32CoreId] = msr;
   13856:	490a      	ldr	r1, [pc, #40]	; (13880 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x54>)
   13858:	9b01      	ldr	r3, [sp, #4]
   1385a:	9a00      	ldr	r2, [sp, #0]
   1385c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]++;
   13860:	4a06      	ldr	r2, [pc, #24]	; (1387c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   13862:	9b01      	ldr	r3, [sp, #4]
   13864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13868:	1c5a      	adds	r2, r3, #1
   1386a:	4904      	ldr	r1, [pc, #16]	; (1387c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   1386c:	9b01      	ldr	r3, [sp, #4]
   1386e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13872:	bf00      	nop
   13874:	b003      	add	sp, #12
   13876:	f85d fb04 	ldr.w	pc, [sp], #4
   1387a:	bf00      	nop
   1387c:	1fff9648 	.word	0x1fff9648
   13880:	1fff9644 	.word	0x1fff9644

00013884 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   13884:	b500      	push	{lr}
   13886:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13888:	f7ed fa26 	bl	cd8 <Sys_GetCoreID>
   1388c:	4603      	mov	r3, r0
   1388e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]--;
   13890:	4a0d      	ldr	r2, [pc, #52]	; (138c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   13892:	9b01      	ldr	r3, [sp, #4]
   13894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13898:	1e5a      	subs	r2, r3, #1
   1389a:	490b      	ldr	r1, [pc, #44]	; (138c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   1389c:	9b01      	ldr	r3, [sp, #4]
   1389e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_92[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]))         /*if interrupts were enabled*/
   138a2:	4a0a      	ldr	r2, [pc, #40]	; (138cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x48>)
   138a4:	9b01      	ldr	r3, [sp, #4]
   138a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138aa:	f003 0301 	and.w	r3, r3, #1
   138ae:	2b00      	cmp	r3, #0
   138b0:	d106      	bne.n	138c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
   138b2:	4a05      	ldr	r2, [pc, #20]	; (138c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   138b4:	9b01      	ldr	r3, [sp, #4]
   138b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138ba:	2b00      	cmp	r3, #0
   138bc:	d100      	bne.n	138c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   138be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   138c0:	bf00      	nop
   138c2:	b003      	add	sp, #12
   138c4:	f85d fb04 	ldr.w	pc, [sp], #4
   138c8:	1fff9648 	.word	0x1fff9648
   138cc:	1fff9644 	.word	0x1fff9644

000138d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   138d0:	b500      	push	{lr}
   138d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   138d4:	f7ed fa00 	bl	cd8 <Sys_GetCoreID>
   138d8:	4603      	mov	r3, r0
   138da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId])
   138dc:	4a10      	ldr	r2, [pc, #64]	; (13920 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   138de:	9b01      	ldr	r3, [sp, #4]
   138e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138e4:	2b00      	cmp	r3, #0
   138e6:	d10d      	bne.n	13904 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   138e8:	f7ed f856 	bl	998 <Adc_schm_read_msr>
   138ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   138ee:	9b00      	ldr	r3, [sp, #0]
   138f0:	f003 0301 	and.w	r3, r3, #1
   138f4:	2b00      	cmp	r3, #0
   138f6:	d100      	bne.n	138fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   138f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_93[u32CoreId] = msr;
   138fa:	490a      	ldr	r1, [pc, #40]	; (13924 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x54>)
   138fc:	9b01      	ldr	r3, [sp, #4]
   138fe:	9a00      	ldr	r2, [sp, #0]
   13900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]++;
   13904:	4a06      	ldr	r2, [pc, #24]	; (13920 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   13906:	9b01      	ldr	r3, [sp, #4]
   13908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1390c:	1c5a      	adds	r2, r3, #1
   1390e:	4904      	ldr	r1, [pc, #16]	; (13920 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   13910:	9b01      	ldr	r3, [sp, #4]
   13912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13916:	bf00      	nop
   13918:	b003      	add	sp, #12
   1391a:	f85d fb04 	ldr.w	pc, [sp], #4
   1391e:	bf00      	nop
   13920:	1fff9650 	.word	0x1fff9650
   13924:	1fff964c 	.word	0x1fff964c

00013928 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   13928:	b500      	push	{lr}
   1392a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1392c:	f7ed f9d4 	bl	cd8 <Sys_GetCoreID>
   13930:	4603      	mov	r3, r0
   13932:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]--;
   13934:	4a0d      	ldr	r2, [pc, #52]	; (1396c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   13936:	9b01      	ldr	r3, [sp, #4]
   13938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1393c:	1e5a      	subs	r2, r3, #1
   1393e:	490b      	ldr	r1, [pc, #44]	; (1396c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   13940:	9b01      	ldr	r3, [sp, #4]
   13942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_93[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]))         /*if interrupts were enabled*/
   13946:	4a0a      	ldr	r2, [pc, #40]	; (13970 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x48>)
   13948:	9b01      	ldr	r3, [sp, #4]
   1394a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1394e:	f003 0301 	and.w	r3, r3, #1
   13952:	2b00      	cmp	r3, #0
   13954:	d106      	bne.n	13964 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
   13956:	4a05      	ldr	r2, [pc, #20]	; (1396c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   13958:	9b01      	ldr	r3, [sp, #4]
   1395a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1395e:	2b00      	cmp	r3, #0
   13960:	d100      	bne.n	13964 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13962:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13964:	bf00      	nop
   13966:	b003      	add	sp, #12
   13968:	f85d fb04 	ldr.w	pc, [sp], #4
   1396c:	1fff9650 	.word	0x1fff9650
   13970:	1fff964c 	.word	0x1fff964c

00013974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   13974:	b500      	push	{lr}
   13976:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13978:	f7ed f9ae 	bl	cd8 <Sys_GetCoreID>
   1397c:	4603      	mov	r3, r0
   1397e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId])
   13980:	4a10      	ldr	r2, [pc, #64]	; (139c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   13982:	9b01      	ldr	r3, [sp, #4]
   13984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13988:	2b00      	cmp	r3, #0
   1398a:	d10d      	bne.n	139a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1398c:	f7ed f804 	bl	998 <Adc_schm_read_msr>
   13990:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13992:	9b00      	ldr	r3, [sp, #0]
   13994:	f003 0301 	and.w	r3, r3, #1
   13998:	2b00      	cmp	r3, #0
   1399a:	d100      	bne.n	1399e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1399c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_94[u32CoreId] = msr;
   1399e:	490a      	ldr	r1, [pc, #40]	; (139c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x54>)
   139a0:	9b01      	ldr	r3, [sp, #4]
   139a2:	9a00      	ldr	r2, [sp, #0]
   139a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]++;
   139a8:	4a06      	ldr	r2, [pc, #24]	; (139c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   139aa:	9b01      	ldr	r3, [sp, #4]
   139ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139b0:	1c5a      	adds	r2, r3, #1
   139b2:	4904      	ldr	r1, [pc, #16]	; (139c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   139b4:	9b01      	ldr	r3, [sp, #4]
   139b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   139ba:	bf00      	nop
   139bc:	b003      	add	sp, #12
   139be:	f85d fb04 	ldr.w	pc, [sp], #4
   139c2:	bf00      	nop
   139c4:	1fff9658 	.word	0x1fff9658
   139c8:	1fff9654 	.word	0x1fff9654

000139cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   139cc:	b500      	push	{lr}
   139ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   139d0:	f7ed f982 	bl	cd8 <Sys_GetCoreID>
   139d4:	4603      	mov	r3, r0
   139d6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]--;
   139d8:	4a0d      	ldr	r2, [pc, #52]	; (13a10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   139da:	9b01      	ldr	r3, [sp, #4]
   139dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139e0:	1e5a      	subs	r2, r3, #1
   139e2:	490b      	ldr	r1, [pc, #44]	; (13a10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   139e4:	9b01      	ldr	r3, [sp, #4]
   139e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_94[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]))         /*if interrupts were enabled*/
   139ea:	4a0a      	ldr	r2, [pc, #40]	; (13a14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x48>)
   139ec:	9b01      	ldr	r3, [sp, #4]
   139ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139f2:	f003 0301 	and.w	r3, r3, #1
   139f6:	2b00      	cmp	r3, #0
   139f8:	d106      	bne.n	13a08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
   139fa:	4a05      	ldr	r2, [pc, #20]	; (13a10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   139fc:	9b01      	ldr	r3, [sp, #4]
   139fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a02:	2b00      	cmp	r3, #0
   13a04:	d100      	bne.n	13a08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13a06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13a08:	bf00      	nop
   13a0a:	b003      	add	sp, #12
   13a0c:	f85d fb04 	ldr.w	pc, [sp], #4
   13a10:	1fff9658 	.word	0x1fff9658
   13a14:	1fff9654 	.word	0x1fff9654

00013a18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   13a18:	b500      	push	{lr}
   13a1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a1c:	f7ed f95c 	bl	cd8 <Sys_GetCoreID>
   13a20:	4603      	mov	r3, r0
   13a22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId])
   13a24:	4a10      	ldr	r2, [pc, #64]	; (13a68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   13a26:	9b01      	ldr	r3, [sp, #4]
   13a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a2c:	2b00      	cmp	r3, #0
   13a2e:	d10d      	bne.n	13a4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13a30:	f7ec ffb2 	bl	998 <Adc_schm_read_msr>
   13a34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13a36:	9b00      	ldr	r3, [sp, #0]
   13a38:	f003 0301 	and.w	r3, r3, #1
   13a3c:	2b00      	cmp	r3, #0
   13a3e:	d100      	bne.n	13a42 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13a40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_95[u32CoreId] = msr;
   13a42:	490a      	ldr	r1, [pc, #40]	; (13a6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x54>)
   13a44:	9b01      	ldr	r3, [sp, #4]
   13a46:	9a00      	ldr	r2, [sp, #0]
   13a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]++;
   13a4c:	4a06      	ldr	r2, [pc, #24]	; (13a68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   13a4e:	9b01      	ldr	r3, [sp, #4]
   13a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a54:	1c5a      	adds	r2, r3, #1
   13a56:	4904      	ldr	r1, [pc, #16]	; (13a68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   13a58:	9b01      	ldr	r3, [sp, #4]
   13a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13a5e:	bf00      	nop
   13a60:	b003      	add	sp, #12
   13a62:	f85d fb04 	ldr.w	pc, [sp], #4
   13a66:	bf00      	nop
   13a68:	1fff9660 	.word	0x1fff9660
   13a6c:	1fff965c 	.word	0x1fff965c

00013a70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   13a70:	b500      	push	{lr}
   13a72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a74:	f7ed f930 	bl	cd8 <Sys_GetCoreID>
   13a78:	4603      	mov	r3, r0
   13a7a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]--;
   13a7c:	4a0d      	ldr	r2, [pc, #52]	; (13ab4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   13a7e:	9b01      	ldr	r3, [sp, #4]
   13a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a84:	1e5a      	subs	r2, r3, #1
   13a86:	490b      	ldr	r1, [pc, #44]	; (13ab4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   13a88:	9b01      	ldr	r3, [sp, #4]
   13a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_95[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]))         /*if interrupts were enabled*/
   13a8e:	4a0a      	ldr	r2, [pc, #40]	; (13ab8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x48>)
   13a90:	9b01      	ldr	r3, [sp, #4]
   13a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a96:	f003 0301 	and.w	r3, r3, #1
   13a9a:	2b00      	cmp	r3, #0
   13a9c:	d106      	bne.n	13aac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
   13a9e:	4a05      	ldr	r2, [pc, #20]	; (13ab4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   13aa0:	9b01      	ldr	r3, [sp, #4]
   13aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13aa6:	2b00      	cmp	r3, #0
   13aa8:	d100      	bne.n	13aac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13aaa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13aac:	bf00      	nop
   13aae:	b003      	add	sp, #12
   13ab0:	f85d fb04 	ldr.w	pc, [sp], #4
   13ab4:	1fff9660 	.word	0x1fff9660
   13ab8:	1fff965c 	.word	0x1fff965c

00013abc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   13abc:	b500      	push	{lr}
   13abe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ac0:	f7ed f90a 	bl	cd8 <Sys_GetCoreID>
   13ac4:	4603      	mov	r3, r0
   13ac6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId])
   13ac8:	4a10      	ldr	r2, [pc, #64]	; (13b0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   13aca:	9b01      	ldr	r3, [sp, #4]
   13acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ad0:	2b00      	cmp	r3, #0
   13ad2:	d10d      	bne.n	13af0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13ad4:	f7ec ff60 	bl	998 <Adc_schm_read_msr>
   13ad8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13ada:	9b00      	ldr	r3, [sp, #0]
   13adc:	f003 0301 	and.w	r3, r3, #1
   13ae0:	2b00      	cmp	r3, #0
   13ae2:	d100      	bne.n	13ae6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13ae4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_96[u32CoreId] = msr;
   13ae6:	490a      	ldr	r1, [pc, #40]	; (13b10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x54>)
   13ae8:	9b01      	ldr	r3, [sp, #4]
   13aea:	9a00      	ldr	r2, [sp, #0]
   13aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]++;
   13af0:	4a06      	ldr	r2, [pc, #24]	; (13b0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   13af2:	9b01      	ldr	r3, [sp, #4]
   13af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13af8:	1c5a      	adds	r2, r3, #1
   13afa:	4904      	ldr	r1, [pc, #16]	; (13b0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   13afc:	9b01      	ldr	r3, [sp, #4]
   13afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13b02:	bf00      	nop
   13b04:	b003      	add	sp, #12
   13b06:	f85d fb04 	ldr.w	pc, [sp], #4
   13b0a:	bf00      	nop
   13b0c:	1fff9668 	.word	0x1fff9668
   13b10:	1fff9664 	.word	0x1fff9664

00013b14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   13b14:	b500      	push	{lr}
   13b16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b18:	f7ed f8de 	bl	cd8 <Sys_GetCoreID>
   13b1c:	4603      	mov	r3, r0
   13b1e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]--;
   13b20:	4a0d      	ldr	r2, [pc, #52]	; (13b58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   13b22:	9b01      	ldr	r3, [sp, #4]
   13b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b28:	1e5a      	subs	r2, r3, #1
   13b2a:	490b      	ldr	r1, [pc, #44]	; (13b58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   13b2c:	9b01      	ldr	r3, [sp, #4]
   13b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_96[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]))         /*if interrupts were enabled*/
   13b32:	4a0a      	ldr	r2, [pc, #40]	; (13b5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x48>)
   13b34:	9b01      	ldr	r3, [sp, #4]
   13b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b3a:	f003 0301 	and.w	r3, r3, #1
   13b3e:	2b00      	cmp	r3, #0
   13b40:	d106      	bne.n	13b50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
   13b42:	4a05      	ldr	r2, [pc, #20]	; (13b58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   13b44:	9b01      	ldr	r3, [sp, #4]
   13b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b4a:	2b00      	cmp	r3, #0
   13b4c:	d100      	bne.n	13b50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13b4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13b50:	bf00      	nop
   13b52:	b003      	add	sp, #12
   13b54:	f85d fb04 	ldr.w	pc, [sp], #4
   13b58:	1fff9668 	.word	0x1fff9668
   13b5c:	1fff9664 	.word	0x1fff9664

00013b60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   13b60:	b500      	push	{lr}
   13b62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b64:	f7ed f8b8 	bl	cd8 <Sys_GetCoreID>
   13b68:	4603      	mov	r3, r0
   13b6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId])
   13b6c:	4a10      	ldr	r2, [pc, #64]	; (13bb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   13b6e:	9b01      	ldr	r3, [sp, #4]
   13b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b74:	2b00      	cmp	r3, #0
   13b76:	d10d      	bne.n	13b94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13b78:	f7ec ff0e 	bl	998 <Adc_schm_read_msr>
   13b7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13b7e:	9b00      	ldr	r3, [sp, #0]
   13b80:	f003 0301 	and.w	r3, r3, #1
   13b84:	2b00      	cmp	r3, #0
   13b86:	d100      	bne.n	13b8a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13b88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_97[u32CoreId] = msr;
   13b8a:	490a      	ldr	r1, [pc, #40]	; (13bb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x54>)
   13b8c:	9b01      	ldr	r3, [sp, #4]
   13b8e:	9a00      	ldr	r2, [sp, #0]
   13b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]++;
   13b94:	4a06      	ldr	r2, [pc, #24]	; (13bb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   13b96:	9b01      	ldr	r3, [sp, #4]
   13b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b9c:	1c5a      	adds	r2, r3, #1
   13b9e:	4904      	ldr	r1, [pc, #16]	; (13bb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   13ba0:	9b01      	ldr	r3, [sp, #4]
   13ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13ba6:	bf00      	nop
   13ba8:	b003      	add	sp, #12
   13baa:	f85d fb04 	ldr.w	pc, [sp], #4
   13bae:	bf00      	nop
   13bb0:	1fff9670 	.word	0x1fff9670
   13bb4:	1fff966c 	.word	0x1fff966c

00013bb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   13bb8:	b500      	push	{lr}
   13bba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13bbc:	f7ed f88c 	bl	cd8 <Sys_GetCoreID>
   13bc0:	4603      	mov	r3, r0
   13bc2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]--;
   13bc4:	4a0d      	ldr	r2, [pc, #52]	; (13bfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   13bc6:	9b01      	ldr	r3, [sp, #4]
   13bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bcc:	1e5a      	subs	r2, r3, #1
   13bce:	490b      	ldr	r1, [pc, #44]	; (13bfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   13bd0:	9b01      	ldr	r3, [sp, #4]
   13bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_97[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]))         /*if interrupts were enabled*/
   13bd6:	4a0a      	ldr	r2, [pc, #40]	; (13c00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x48>)
   13bd8:	9b01      	ldr	r3, [sp, #4]
   13bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bde:	f003 0301 	and.w	r3, r3, #1
   13be2:	2b00      	cmp	r3, #0
   13be4:	d106      	bne.n	13bf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
   13be6:	4a05      	ldr	r2, [pc, #20]	; (13bfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   13be8:	9b01      	ldr	r3, [sp, #4]
   13bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bee:	2b00      	cmp	r3, #0
   13bf0:	d100      	bne.n	13bf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13bf2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13bf4:	bf00      	nop
   13bf6:	b003      	add	sp, #12
   13bf8:	f85d fb04 	ldr.w	pc, [sp], #4
   13bfc:	1fff9670 	.word	0x1fff9670
   13c00:	1fff966c 	.word	0x1fff966c

00013c04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   13c04:	b500      	push	{lr}
   13c06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c08:	f7ed f866 	bl	cd8 <Sys_GetCoreID>
   13c0c:	4603      	mov	r3, r0
   13c0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId])
   13c10:	4a10      	ldr	r2, [pc, #64]	; (13c54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   13c12:	9b01      	ldr	r3, [sp, #4]
   13c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c18:	2b00      	cmp	r3, #0
   13c1a:	d10d      	bne.n	13c38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13c1c:	f7ec febc 	bl	998 <Adc_schm_read_msr>
   13c20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13c22:	9b00      	ldr	r3, [sp, #0]
   13c24:	f003 0301 	and.w	r3, r3, #1
   13c28:	2b00      	cmp	r3, #0
   13c2a:	d100      	bne.n	13c2e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13c2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_98[u32CoreId] = msr;
   13c2e:	490a      	ldr	r1, [pc, #40]	; (13c58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x54>)
   13c30:	9b01      	ldr	r3, [sp, #4]
   13c32:	9a00      	ldr	r2, [sp, #0]
   13c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]++;
   13c38:	4a06      	ldr	r2, [pc, #24]	; (13c54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   13c3a:	9b01      	ldr	r3, [sp, #4]
   13c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c40:	1c5a      	adds	r2, r3, #1
   13c42:	4904      	ldr	r1, [pc, #16]	; (13c54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   13c44:	9b01      	ldr	r3, [sp, #4]
   13c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13c4a:	bf00      	nop
   13c4c:	b003      	add	sp, #12
   13c4e:	f85d fb04 	ldr.w	pc, [sp], #4
   13c52:	bf00      	nop
   13c54:	1fff9678 	.word	0x1fff9678
   13c58:	1fff9674 	.word	0x1fff9674

00013c5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   13c5c:	b500      	push	{lr}
   13c5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c60:	f7ed f83a 	bl	cd8 <Sys_GetCoreID>
   13c64:	4603      	mov	r3, r0
   13c66:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]--;
   13c68:	4a0d      	ldr	r2, [pc, #52]	; (13ca0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   13c6a:	9b01      	ldr	r3, [sp, #4]
   13c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c70:	1e5a      	subs	r2, r3, #1
   13c72:	490b      	ldr	r1, [pc, #44]	; (13ca0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   13c74:	9b01      	ldr	r3, [sp, #4]
   13c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_98[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]))         /*if interrupts were enabled*/
   13c7a:	4a0a      	ldr	r2, [pc, #40]	; (13ca4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x48>)
   13c7c:	9b01      	ldr	r3, [sp, #4]
   13c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c82:	f003 0301 	and.w	r3, r3, #1
   13c86:	2b00      	cmp	r3, #0
   13c88:	d106      	bne.n	13c98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
   13c8a:	4a05      	ldr	r2, [pc, #20]	; (13ca0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   13c8c:	9b01      	ldr	r3, [sp, #4]
   13c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c92:	2b00      	cmp	r3, #0
   13c94:	d100      	bne.n	13c98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13c96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13c98:	bf00      	nop
   13c9a:	b003      	add	sp, #12
   13c9c:	f85d fb04 	ldr.w	pc, [sp], #4
   13ca0:	1fff9678 	.word	0x1fff9678
   13ca4:	1fff9674 	.word	0x1fff9674

00013ca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   13ca8:	b500      	push	{lr}
   13caa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13cac:	f7ed f814 	bl	cd8 <Sys_GetCoreID>
   13cb0:	4603      	mov	r3, r0
   13cb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId])
   13cb4:	4a10      	ldr	r2, [pc, #64]	; (13cf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   13cb6:	9b01      	ldr	r3, [sp, #4]
   13cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cbc:	2b00      	cmp	r3, #0
   13cbe:	d10d      	bne.n	13cdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13cc0:	f7ec fe6a 	bl	998 <Adc_schm_read_msr>
   13cc4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13cc6:	9b00      	ldr	r3, [sp, #0]
   13cc8:	f003 0301 	and.w	r3, r3, #1
   13ccc:	2b00      	cmp	r3, #0
   13cce:	d100      	bne.n	13cd2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13cd0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_99[u32CoreId] = msr;
   13cd2:	490a      	ldr	r1, [pc, #40]	; (13cfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x54>)
   13cd4:	9b01      	ldr	r3, [sp, #4]
   13cd6:	9a00      	ldr	r2, [sp, #0]
   13cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]++;
   13cdc:	4a06      	ldr	r2, [pc, #24]	; (13cf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   13cde:	9b01      	ldr	r3, [sp, #4]
   13ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ce4:	1c5a      	adds	r2, r3, #1
   13ce6:	4904      	ldr	r1, [pc, #16]	; (13cf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   13ce8:	9b01      	ldr	r3, [sp, #4]
   13cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13cee:	bf00      	nop
   13cf0:	b003      	add	sp, #12
   13cf2:	f85d fb04 	ldr.w	pc, [sp], #4
   13cf6:	bf00      	nop
   13cf8:	1fff9680 	.word	0x1fff9680
   13cfc:	1fff967c 	.word	0x1fff967c

00013d00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   13d00:	b500      	push	{lr}
   13d02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d04:	f7ec ffe8 	bl	cd8 <Sys_GetCoreID>
   13d08:	4603      	mov	r3, r0
   13d0a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]--;
   13d0c:	4a0d      	ldr	r2, [pc, #52]	; (13d44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   13d0e:	9b01      	ldr	r3, [sp, #4]
   13d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d14:	1e5a      	subs	r2, r3, #1
   13d16:	490b      	ldr	r1, [pc, #44]	; (13d44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   13d18:	9b01      	ldr	r3, [sp, #4]
   13d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_99[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]))         /*if interrupts were enabled*/
   13d1e:	4a0a      	ldr	r2, [pc, #40]	; (13d48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x48>)
   13d20:	9b01      	ldr	r3, [sp, #4]
   13d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d26:	f003 0301 	and.w	r3, r3, #1
   13d2a:	2b00      	cmp	r3, #0
   13d2c:	d106      	bne.n	13d3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
   13d2e:	4a05      	ldr	r2, [pc, #20]	; (13d44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   13d30:	9b01      	ldr	r3, [sp, #4]
   13d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d36:	2b00      	cmp	r3, #0
   13d38:	d100      	bne.n	13d3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13d3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13d3c:	bf00      	nop
   13d3e:	b003      	add	sp, #12
   13d40:	f85d fb04 	ldr.w	pc, [sp], #4
   13d44:	1fff9680 	.word	0x1fff9680
   13d48:	1fff967c 	.word	0x1fff967c

00013d4c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
   13d4c:	b500      	push	{lr}
   13d4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d50:	f7ec ffc2 	bl	cd8 <Sys_GetCoreID>
   13d54:	4603      	mov	r3, r0
   13d56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId])
   13d58:	4a10      	ldr	r2, [pc, #64]	; (13d9c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
   13d5a:	9b01      	ldr	r3, [sp, #4]
   13d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d60:	2b00      	cmp	r3, #0
   13d62:	d10d      	bne.n	13d80 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13d64:	f7ec fe21 	bl	9aa <Can_43_FLEXCAN_schm_read_msr>
   13d68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13d6a:	9b00      	ldr	r3, [sp, #0]
   13d6c:	f003 0301 	and.w	r3, r3, #1
   13d70:	2b00      	cmp	r3, #0
   13d72:	d100      	bne.n	13d76 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13d74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   13d76:	490a      	ldr	r1, [pc, #40]	; (13da0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x54>)
   13d78:	9b01      	ldr	r3, [sp, #4]
   13d7a:	9a00      	ldr	r2, [sp, #0]
   13d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]++;
   13d80:	4a06      	ldr	r2, [pc, #24]	; (13d9c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
   13d82:	9b01      	ldr	r3, [sp, #4]
   13d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d88:	1c5a      	adds	r2, r3, #1
   13d8a:	4904      	ldr	r1, [pc, #16]	; (13d9c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
   13d8c:	9b01      	ldr	r3, [sp, #4]
   13d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13d92:	bf00      	nop
   13d94:	b003      	add	sp, #12
   13d96:	f85d fb04 	ldr.w	pc, [sp], #4
   13d9a:	bf00      	nop
   13d9c:	1fff9688 	.word	0x1fff9688
   13da0:	1fff9684 	.word	0x1fff9684

00013da4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
   13da4:	b500      	push	{lr}
   13da6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13da8:	f7ec ff96 	bl	cd8 <Sys_GetCoreID>
   13dac:	4603      	mov	r3, r0
   13dae:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]--;
   13db0:	4a0d      	ldr	r2, [pc, #52]	; (13de8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
   13db2:	9b01      	ldr	r3, [sp, #4]
   13db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13db8:	1e5a      	subs	r2, r3, #1
   13dba:	490b      	ldr	r1, [pc, #44]	; (13de8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
   13dbc:	9b01      	ldr	r3, [sp, #4]
   13dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   13dc2:	4a0a      	ldr	r2, [pc, #40]	; (13dec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x48>)
   13dc4:	9b01      	ldr	r3, [sp, #4]
   13dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13dca:	f003 0301 	and.w	r3, r3, #1
   13dce:	2b00      	cmp	r3, #0
   13dd0:	d106      	bne.n	13de0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
   13dd2:	4a05      	ldr	r2, [pc, #20]	; (13de8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
   13dd4:	9b01      	ldr	r3, [sp, #4]
   13dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13dda:	2b00      	cmp	r3, #0
   13ddc:	d100      	bne.n	13de0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13dde:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13de0:	bf00      	nop
   13de2:	b003      	add	sp, #12
   13de4:	f85d fb04 	ldr.w	pc, [sp], #4
   13de8:	1fff9688 	.word	0x1fff9688
   13dec:	1fff9684 	.word	0x1fff9684

00013df0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
   13df0:	b500      	push	{lr}
   13df2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13df4:	f7ec ff70 	bl	cd8 <Sys_GetCoreID>
   13df8:	4603      	mov	r3, r0
   13dfa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId])
   13dfc:	4a10      	ldr	r2, [pc, #64]	; (13e40 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
   13dfe:	9b01      	ldr	r3, [sp, #4]
   13e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e04:	2b00      	cmp	r3, #0
   13e06:	d10d      	bne.n	13e24 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13e08:	f7ec fdcf 	bl	9aa <Can_43_FLEXCAN_schm_read_msr>
   13e0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13e0e:	9b00      	ldr	r3, [sp, #0]
   13e10:	f003 0301 	and.w	r3, r3, #1
   13e14:	2b00      	cmp	r3, #0
   13e16:	d100      	bne.n	13e1a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13e18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   13e1a:	490a      	ldr	r1, [pc, #40]	; (13e44 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x54>)
   13e1c:	9b01      	ldr	r3, [sp, #4]
   13e1e:	9a00      	ldr	r2, [sp, #0]
   13e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]++;
   13e24:	4a06      	ldr	r2, [pc, #24]	; (13e40 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
   13e26:	9b01      	ldr	r3, [sp, #4]
   13e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e2c:	1c5a      	adds	r2, r3, #1
   13e2e:	4904      	ldr	r1, [pc, #16]	; (13e40 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
   13e30:	9b01      	ldr	r3, [sp, #4]
   13e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13e36:	bf00      	nop
   13e38:	b003      	add	sp, #12
   13e3a:	f85d fb04 	ldr.w	pc, [sp], #4
   13e3e:	bf00      	nop
   13e40:	1fff9690 	.word	0x1fff9690
   13e44:	1fff968c 	.word	0x1fff968c

00013e48 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
   13e48:	b500      	push	{lr}
   13e4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e4c:	f7ec ff44 	bl	cd8 <Sys_GetCoreID>
   13e50:	4603      	mov	r3, r0
   13e52:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]--;
   13e54:	4a0d      	ldr	r2, [pc, #52]	; (13e8c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
   13e56:	9b01      	ldr	r3, [sp, #4]
   13e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e5c:	1e5a      	subs	r2, r3, #1
   13e5e:	490b      	ldr	r1, [pc, #44]	; (13e8c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
   13e60:	9b01      	ldr	r3, [sp, #4]
   13e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   13e66:	4a0a      	ldr	r2, [pc, #40]	; (13e90 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x48>)
   13e68:	9b01      	ldr	r3, [sp, #4]
   13e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e6e:	f003 0301 	and.w	r3, r3, #1
   13e72:	2b00      	cmp	r3, #0
   13e74:	d106      	bne.n	13e84 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
   13e76:	4a05      	ldr	r2, [pc, #20]	; (13e8c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
   13e78:	9b01      	ldr	r3, [sp, #4]
   13e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e7e:	2b00      	cmp	r3, #0
   13e80:	d100      	bne.n	13e84 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13e82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13e84:	bf00      	nop
   13e86:	b003      	add	sp, #12
   13e88:	f85d fb04 	ldr.w	pc, [sp], #4
   13e8c:	1fff9690 	.word	0x1fff9690
   13e90:	1fff968c 	.word	0x1fff968c

00013e94 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
   13e94:	b500      	push	{lr}
   13e96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e98:	f7ec ff1e 	bl	cd8 <Sys_GetCoreID>
   13e9c:	4603      	mov	r3, r0
   13e9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId])
   13ea0:	4a10      	ldr	r2, [pc, #64]	; (13ee4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
   13ea2:	9b01      	ldr	r3, [sp, #4]
   13ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ea8:	2b00      	cmp	r3, #0
   13eaa:	d10d      	bne.n	13ec8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13eac:	f7ec fd7d 	bl	9aa <Can_43_FLEXCAN_schm_read_msr>
   13eb0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13eb2:	9b00      	ldr	r3, [sp, #0]
   13eb4:	f003 0301 	and.w	r3, r3, #1
   13eb8:	2b00      	cmp	r3, #0
   13eba:	d100      	bne.n	13ebe <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13ebc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   13ebe:	490a      	ldr	r1, [pc, #40]	; (13ee8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x54>)
   13ec0:	9b01      	ldr	r3, [sp, #4]
   13ec2:	9a00      	ldr	r2, [sp, #0]
   13ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]++;
   13ec8:	4a06      	ldr	r2, [pc, #24]	; (13ee4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
   13eca:	9b01      	ldr	r3, [sp, #4]
   13ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ed0:	1c5a      	adds	r2, r3, #1
   13ed2:	4904      	ldr	r1, [pc, #16]	; (13ee4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
   13ed4:	9b01      	ldr	r3, [sp, #4]
   13ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13eda:	bf00      	nop
   13edc:	b003      	add	sp, #12
   13ede:	f85d fb04 	ldr.w	pc, [sp], #4
   13ee2:	bf00      	nop
   13ee4:	1fff9698 	.word	0x1fff9698
   13ee8:	1fff9694 	.word	0x1fff9694

00013eec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
   13eec:	b500      	push	{lr}
   13eee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ef0:	f7ec fef2 	bl	cd8 <Sys_GetCoreID>
   13ef4:	4603      	mov	r3, r0
   13ef6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]--;
   13ef8:	4a0d      	ldr	r2, [pc, #52]	; (13f30 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
   13efa:	9b01      	ldr	r3, [sp, #4]
   13efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f00:	1e5a      	subs	r2, r3, #1
   13f02:	490b      	ldr	r1, [pc, #44]	; (13f30 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
   13f04:	9b01      	ldr	r3, [sp, #4]
   13f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   13f0a:	4a0a      	ldr	r2, [pc, #40]	; (13f34 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x48>)
   13f0c:	9b01      	ldr	r3, [sp, #4]
   13f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f12:	f003 0301 	and.w	r3, r3, #1
   13f16:	2b00      	cmp	r3, #0
   13f18:	d106      	bne.n	13f28 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
   13f1a:	4a05      	ldr	r2, [pc, #20]	; (13f30 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
   13f1c:	9b01      	ldr	r3, [sp, #4]
   13f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f22:	2b00      	cmp	r3, #0
   13f24:	d100      	bne.n	13f28 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13f26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13f28:	bf00      	nop
   13f2a:	b003      	add	sp, #12
   13f2c:	f85d fb04 	ldr.w	pc, [sp], #4
   13f30:	1fff9698 	.word	0x1fff9698
   13f34:	1fff9694 	.word	0x1fff9694

00013f38 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
   13f38:	b500      	push	{lr}
   13f3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f3c:	f7ec fecc 	bl	cd8 <Sys_GetCoreID>
   13f40:	4603      	mov	r3, r0
   13f42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId])
   13f44:	4a10      	ldr	r2, [pc, #64]	; (13f88 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
   13f46:	9b01      	ldr	r3, [sp, #4]
   13f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f4c:	2b00      	cmp	r3, #0
   13f4e:	d10d      	bne.n	13f6c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13f50:	f7ec fd2b 	bl	9aa <Can_43_FLEXCAN_schm_read_msr>
   13f54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13f56:	9b00      	ldr	r3, [sp, #0]
   13f58:	f003 0301 	and.w	r3, r3, #1
   13f5c:	2b00      	cmp	r3, #0
   13f5e:	d100      	bne.n	13f62 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13f60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   13f62:	490a      	ldr	r1, [pc, #40]	; (13f8c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x54>)
   13f64:	9b01      	ldr	r3, [sp, #4]
   13f66:	9a00      	ldr	r2, [sp, #0]
   13f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]++;
   13f6c:	4a06      	ldr	r2, [pc, #24]	; (13f88 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
   13f6e:	9b01      	ldr	r3, [sp, #4]
   13f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f74:	1c5a      	adds	r2, r3, #1
   13f76:	4904      	ldr	r1, [pc, #16]	; (13f88 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
   13f78:	9b01      	ldr	r3, [sp, #4]
   13f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13f7e:	bf00      	nop
   13f80:	b003      	add	sp, #12
   13f82:	f85d fb04 	ldr.w	pc, [sp], #4
   13f86:	bf00      	nop
   13f88:	1fff96a0 	.word	0x1fff96a0
   13f8c:	1fff969c 	.word	0x1fff969c

00013f90 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
   13f90:	b500      	push	{lr}
   13f92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f94:	f7ec fea0 	bl	cd8 <Sys_GetCoreID>
   13f98:	4603      	mov	r3, r0
   13f9a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]--;
   13f9c:	4a0d      	ldr	r2, [pc, #52]	; (13fd4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
   13f9e:	9b01      	ldr	r3, [sp, #4]
   13fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fa4:	1e5a      	subs	r2, r3, #1
   13fa6:	490b      	ldr	r1, [pc, #44]	; (13fd4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
   13fa8:	9b01      	ldr	r3, [sp, #4]
   13faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   13fae:	4a0a      	ldr	r2, [pc, #40]	; (13fd8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x48>)
   13fb0:	9b01      	ldr	r3, [sp, #4]
   13fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fb6:	f003 0301 	and.w	r3, r3, #1
   13fba:	2b00      	cmp	r3, #0
   13fbc:	d106      	bne.n	13fcc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
   13fbe:	4a05      	ldr	r2, [pc, #20]	; (13fd4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
   13fc0:	9b01      	ldr	r3, [sp, #4]
   13fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fc6:	2b00      	cmp	r3, #0
   13fc8:	d100      	bne.n	13fcc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13fca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13fcc:	bf00      	nop
   13fce:	b003      	add	sp, #12
   13fd0:	f85d fb04 	ldr.w	pc, [sp], #4
   13fd4:	1fff96a0 	.word	0x1fff96a0
   13fd8:	1fff969c 	.word	0x1fff969c

00013fdc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
   13fdc:	b500      	push	{lr}
   13fde:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13fe0:	f7ec fe7a 	bl	cd8 <Sys_GetCoreID>
   13fe4:	4603      	mov	r3, r0
   13fe6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId])
   13fe8:	4a10      	ldr	r2, [pc, #64]	; (1402c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
   13fea:	9b01      	ldr	r3, [sp, #4]
   13fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ff0:	2b00      	cmp	r3, #0
   13ff2:	d10d      	bne.n	14010 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13ff4:	f7ec fcd9 	bl	9aa <Can_43_FLEXCAN_schm_read_msr>
   13ff8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13ffa:	9b00      	ldr	r3, [sp, #0]
   13ffc:	f003 0301 	and.w	r3, r3, #1
   14000:	2b00      	cmp	r3, #0
   14002:	d100      	bne.n	14006 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14004:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   14006:	490a      	ldr	r1, [pc, #40]	; (14030 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x54>)
   14008:	9b01      	ldr	r3, [sp, #4]
   1400a:	9a00      	ldr	r2, [sp, #0]
   1400c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]++;
   14010:	4a06      	ldr	r2, [pc, #24]	; (1402c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
   14012:	9b01      	ldr	r3, [sp, #4]
   14014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14018:	1c5a      	adds	r2, r3, #1
   1401a:	4904      	ldr	r1, [pc, #16]	; (1402c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
   1401c:	9b01      	ldr	r3, [sp, #4]
   1401e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14022:	bf00      	nop
   14024:	b003      	add	sp, #12
   14026:	f85d fb04 	ldr.w	pc, [sp], #4
   1402a:	bf00      	nop
   1402c:	1fff96a8 	.word	0x1fff96a8
   14030:	1fff96a4 	.word	0x1fff96a4

00014034 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
   14034:	b500      	push	{lr}
   14036:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14038:	f7ec fe4e 	bl	cd8 <Sys_GetCoreID>
   1403c:	4603      	mov	r3, r0
   1403e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]--;
   14040:	4a0d      	ldr	r2, [pc, #52]	; (14078 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
   14042:	9b01      	ldr	r3, [sp, #4]
   14044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14048:	1e5a      	subs	r2, r3, #1
   1404a:	490b      	ldr	r1, [pc, #44]	; (14078 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
   1404c:	9b01      	ldr	r3, [sp, #4]
   1404e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   14052:	4a0a      	ldr	r2, [pc, #40]	; (1407c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x48>)
   14054:	9b01      	ldr	r3, [sp, #4]
   14056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1405a:	f003 0301 	and.w	r3, r3, #1
   1405e:	2b00      	cmp	r3, #0
   14060:	d106      	bne.n	14070 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
   14062:	4a05      	ldr	r2, [pc, #20]	; (14078 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
   14064:	9b01      	ldr	r3, [sp, #4]
   14066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1406a:	2b00      	cmp	r3, #0
   1406c:	d100      	bne.n	14070 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1406e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14070:	bf00      	nop
   14072:	b003      	add	sp, #12
   14074:	f85d fb04 	ldr.w	pc, [sp], #4
   14078:	1fff96a8 	.word	0x1fff96a8
   1407c:	1fff96a4 	.word	0x1fff96a4

00014080 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
   14080:	b500      	push	{lr}
   14082:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14084:	f7ec fe28 	bl	cd8 <Sys_GetCoreID>
   14088:	4603      	mov	r3, r0
   1408a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId])
   1408c:	4a10      	ldr	r2, [pc, #64]	; (140d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
   1408e:	9b01      	ldr	r3, [sp, #4]
   14090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14094:	2b00      	cmp	r3, #0
   14096:	d10d      	bne.n	140b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14098:	f7ec fc87 	bl	9aa <Can_43_FLEXCAN_schm_read_msr>
   1409c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1409e:	9b00      	ldr	r3, [sp, #0]
   140a0:	f003 0301 	and.w	r3, r3, #1
   140a4:	2b00      	cmp	r3, #0
   140a6:	d100      	bne.n	140aa <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   140a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   140aa:	490a      	ldr	r1, [pc, #40]	; (140d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x54>)
   140ac:	9b01      	ldr	r3, [sp, #4]
   140ae:	9a00      	ldr	r2, [sp, #0]
   140b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]++;
   140b4:	4a06      	ldr	r2, [pc, #24]	; (140d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
   140b6:	9b01      	ldr	r3, [sp, #4]
   140b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140bc:	1c5a      	adds	r2, r3, #1
   140be:	4904      	ldr	r1, [pc, #16]	; (140d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
   140c0:	9b01      	ldr	r3, [sp, #4]
   140c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   140c6:	bf00      	nop
   140c8:	b003      	add	sp, #12
   140ca:	f85d fb04 	ldr.w	pc, [sp], #4
   140ce:	bf00      	nop
   140d0:	1fff96b0 	.word	0x1fff96b0
   140d4:	1fff96ac 	.word	0x1fff96ac

000140d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
   140d8:	b500      	push	{lr}
   140da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   140dc:	f7ec fdfc 	bl	cd8 <Sys_GetCoreID>
   140e0:	4603      	mov	r3, r0
   140e2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]--;
   140e4:	4a0d      	ldr	r2, [pc, #52]	; (1411c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
   140e6:	9b01      	ldr	r3, [sp, #4]
   140e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140ec:	1e5a      	subs	r2, r3, #1
   140ee:	490b      	ldr	r1, [pc, #44]	; (1411c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
   140f0:	9b01      	ldr	r3, [sp, #4]
   140f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   140f6:	4a0a      	ldr	r2, [pc, #40]	; (14120 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x48>)
   140f8:	9b01      	ldr	r3, [sp, #4]
   140fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140fe:	f003 0301 	and.w	r3, r3, #1
   14102:	2b00      	cmp	r3, #0
   14104:	d106      	bne.n	14114 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
   14106:	4a05      	ldr	r2, [pc, #20]	; (1411c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
   14108:	9b01      	ldr	r3, [sp, #4]
   1410a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1410e:	2b00      	cmp	r3, #0
   14110:	d100      	bne.n	14114 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14112:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14114:	bf00      	nop
   14116:	b003      	add	sp, #12
   14118:	f85d fb04 	ldr.w	pc, [sp], #4
   1411c:	1fff96b0 	.word	0x1fff96b0
   14120:	1fff96ac 	.word	0x1fff96ac

00014124 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
   14124:	b500      	push	{lr}
   14126:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14128:	f7ec fdd6 	bl	cd8 <Sys_GetCoreID>
   1412c:	4603      	mov	r3, r0
   1412e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId])
   14130:	4a10      	ldr	r2, [pc, #64]	; (14174 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
   14132:	9b01      	ldr	r3, [sp, #4]
   14134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14138:	2b00      	cmp	r3, #0
   1413a:	d10d      	bne.n	14158 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1413c:	f7ec fc35 	bl	9aa <Can_43_FLEXCAN_schm_read_msr>
   14140:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14142:	9b00      	ldr	r3, [sp, #0]
   14144:	f003 0301 	and.w	r3, r3, #1
   14148:	2b00      	cmp	r3, #0
   1414a:	d100      	bne.n	1414e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1414c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   1414e:	490a      	ldr	r1, [pc, #40]	; (14178 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x54>)
   14150:	9b01      	ldr	r3, [sp, #4]
   14152:	9a00      	ldr	r2, [sp, #0]
   14154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]++;
   14158:	4a06      	ldr	r2, [pc, #24]	; (14174 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
   1415a:	9b01      	ldr	r3, [sp, #4]
   1415c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14160:	1c5a      	adds	r2, r3, #1
   14162:	4904      	ldr	r1, [pc, #16]	; (14174 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
   14164:	9b01      	ldr	r3, [sp, #4]
   14166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1416a:	bf00      	nop
   1416c:	b003      	add	sp, #12
   1416e:	f85d fb04 	ldr.w	pc, [sp], #4
   14172:	bf00      	nop
   14174:	1fff96b8 	.word	0x1fff96b8
   14178:	1fff96b4 	.word	0x1fff96b4

0001417c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
   1417c:	b500      	push	{lr}
   1417e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14180:	f7ec fdaa 	bl	cd8 <Sys_GetCoreID>
   14184:	4603      	mov	r3, r0
   14186:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]--;
   14188:	4a0d      	ldr	r2, [pc, #52]	; (141c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
   1418a:	9b01      	ldr	r3, [sp, #4]
   1418c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14190:	1e5a      	subs	r2, r3, #1
   14192:	490b      	ldr	r1, [pc, #44]	; (141c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
   14194:	9b01      	ldr	r3, [sp, #4]
   14196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   1419a:	4a0a      	ldr	r2, [pc, #40]	; (141c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x48>)
   1419c:	9b01      	ldr	r3, [sp, #4]
   1419e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141a2:	f003 0301 	and.w	r3, r3, #1
   141a6:	2b00      	cmp	r3, #0
   141a8:	d106      	bne.n	141b8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
   141aa:	4a05      	ldr	r2, [pc, #20]	; (141c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
   141ac:	9b01      	ldr	r3, [sp, #4]
   141ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141b2:	2b00      	cmp	r3, #0
   141b4:	d100      	bne.n	141b8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   141b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   141b8:	bf00      	nop
   141ba:	b003      	add	sp, #12
   141bc:	f85d fb04 	ldr.w	pc, [sp], #4
   141c0:	1fff96b8 	.word	0x1fff96b8
   141c4:	1fff96b4 	.word	0x1fff96b4

000141c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
   141c8:	b500      	push	{lr}
   141ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   141cc:	f7ec fd84 	bl	cd8 <Sys_GetCoreID>
   141d0:	4603      	mov	r3, r0
   141d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId])
   141d4:	4a10      	ldr	r2, [pc, #64]	; (14218 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
   141d6:	9b01      	ldr	r3, [sp, #4]
   141d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141dc:	2b00      	cmp	r3, #0
   141de:	d10d      	bne.n	141fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   141e0:	f7ec fbe3 	bl	9aa <Can_43_FLEXCAN_schm_read_msr>
   141e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   141e6:	9b00      	ldr	r3, [sp, #0]
   141e8:	f003 0301 	and.w	r3, r3, #1
   141ec:	2b00      	cmp	r3, #0
   141ee:	d100      	bne.n	141f2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   141f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   141f2:	490a      	ldr	r1, [pc, #40]	; (1421c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x54>)
   141f4:	9b01      	ldr	r3, [sp, #4]
   141f6:	9a00      	ldr	r2, [sp, #0]
   141f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]++;
   141fc:	4a06      	ldr	r2, [pc, #24]	; (14218 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
   141fe:	9b01      	ldr	r3, [sp, #4]
   14200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14204:	1c5a      	adds	r2, r3, #1
   14206:	4904      	ldr	r1, [pc, #16]	; (14218 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
   14208:	9b01      	ldr	r3, [sp, #4]
   1420a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1420e:	bf00      	nop
   14210:	b003      	add	sp, #12
   14212:	f85d fb04 	ldr.w	pc, [sp], #4
   14216:	bf00      	nop
   14218:	1fff96c0 	.word	0x1fff96c0
   1421c:	1fff96bc 	.word	0x1fff96bc

00014220 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
   14220:	b500      	push	{lr}
   14222:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14224:	f7ec fd58 	bl	cd8 <Sys_GetCoreID>
   14228:	4603      	mov	r3, r0
   1422a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]--;
   1422c:	4a0d      	ldr	r2, [pc, #52]	; (14264 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
   1422e:	9b01      	ldr	r3, [sp, #4]
   14230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14234:	1e5a      	subs	r2, r3, #1
   14236:	490b      	ldr	r1, [pc, #44]	; (14264 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
   14238:	9b01      	ldr	r3, [sp, #4]
   1423a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   1423e:	4a0a      	ldr	r2, [pc, #40]	; (14268 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x48>)
   14240:	9b01      	ldr	r3, [sp, #4]
   14242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14246:	f003 0301 	and.w	r3, r3, #1
   1424a:	2b00      	cmp	r3, #0
   1424c:	d106      	bne.n	1425c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
   1424e:	4a05      	ldr	r2, [pc, #20]	; (14264 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
   14250:	9b01      	ldr	r3, [sp, #4]
   14252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14256:	2b00      	cmp	r3, #0
   14258:	d100      	bne.n	1425c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1425a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1425c:	bf00      	nop
   1425e:	b003      	add	sp, #12
   14260:	f85d fb04 	ldr.w	pc, [sp], #4
   14264:	1fff96c0 	.word	0x1fff96c0
   14268:	1fff96bc 	.word	0x1fff96bc

0001426c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
   1426c:	b500      	push	{lr}
   1426e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14270:	f7ec fd32 	bl	cd8 <Sys_GetCoreID>
   14274:	4603      	mov	r3, r0
   14276:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId])
   14278:	4a10      	ldr	r2, [pc, #64]	; (142bc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
   1427a:	9b01      	ldr	r3, [sp, #4]
   1427c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14280:	2b00      	cmp	r3, #0
   14282:	d10d      	bne.n	142a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14284:	f7ec fb91 	bl	9aa <Can_43_FLEXCAN_schm_read_msr>
   14288:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1428a:	9b00      	ldr	r3, [sp, #0]
   1428c:	f003 0301 	and.w	r3, r3, #1
   14290:	2b00      	cmp	r3, #0
   14292:	d100      	bne.n	14296 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14294:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   14296:	490a      	ldr	r1, [pc, #40]	; (142c0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x54>)
   14298:	9b01      	ldr	r3, [sp, #4]
   1429a:	9a00      	ldr	r2, [sp, #0]
   1429c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]++;
   142a0:	4a06      	ldr	r2, [pc, #24]	; (142bc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
   142a2:	9b01      	ldr	r3, [sp, #4]
   142a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142a8:	1c5a      	adds	r2, r3, #1
   142aa:	4904      	ldr	r1, [pc, #16]	; (142bc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
   142ac:	9b01      	ldr	r3, [sp, #4]
   142ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   142b2:	bf00      	nop
   142b4:	b003      	add	sp, #12
   142b6:	f85d fb04 	ldr.w	pc, [sp], #4
   142ba:	bf00      	nop
   142bc:	1fff96c8 	.word	0x1fff96c8
   142c0:	1fff96c4 	.word	0x1fff96c4

000142c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
   142c4:	b500      	push	{lr}
   142c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   142c8:	f7ec fd06 	bl	cd8 <Sys_GetCoreID>
   142cc:	4603      	mov	r3, r0
   142ce:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]--;
   142d0:	4a0d      	ldr	r2, [pc, #52]	; (14308 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
   142d2:	9b01      	ldr	r3, [sp, #4]
   142d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142d8:	1e5a      	subs	r2, r3, #1
   142da:	490b      	ldr	r1, [pc, #44]	; (14308 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
   142dc:	9b01      	ldr	r3, [sp, #4]
   142de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   142e2:	4a0a      	ldr	r2, [pc, #40]	; (1430c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x48>)
   142e4:	9b01      	ldr	r3, [sp, #4]
   142e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142ea:	f003 0301 	and.w	r3, r3, #1
   142ee:	2b00      	cmp	r3, #0
   142f0:	d106      	bne.n	14300 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
   142f2:	4a05      	ldr	r2, [pc, #20]	; (14308 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
   142f4:	9b01      	ldr	r3, [sp, #4]
   142f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142fa:	2b00      	cmp	r3, #0
   142fc:	d100      	bne.n	14300 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   142fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14300:	bf00      	nop
   14302:	b003      	add	sp, #12
   14304:	f85d fb04 	ldr.w	pc, [sp], #4
   14308:	1fff96c8 	.word	0x1fff96c8
   1430c:	1fff96c4 	.word	0x1fff96c4

00014310 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
   14310:	b500      	push	{lr}
   14312:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14314:	f7ec fce0 	bl	cd8 <Sys_GetCoreID>
   14318:	4603      	mov	r3, r0
   1431a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId])
   1431c:	4a10      	ldr	r2, [pc, #64]	; (14360 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
   1431e:	9b01      	ldr	r3, [sp, #4]
   14320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14324:	2b00      	cmp	r3, #0
   14326:	d10d      	bne.n	14344 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14328:	f7ec fb3f 	bl	9aa <Can_43_FLEXCAN_schm_read_msr>
   1432c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1432e:	9b00      	ldr	r3, [sp, #0]
   14330:	f003 0301 	and.w	r3, r3, #1
   14334:	2b00      	cmp	r3, #0
   14336:	d100      	bne.n	1433a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14338:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   1433a:	490a      	ldr	r1, [pc, #40]	; (14364 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x54>)
   1433c:	9b01      	ldr	r3, [sp, #4]
   1433e:	9a00      	ldr	r2, [sp, #0]
   14340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]++;
   14344:	4a06      	ldr	r2, [pc, #24]	; (14360 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
   14346:	9b01      	ldr	r3, [sp, #4]
   14348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1434c:	1c5a      	adds	r2, r3, #1
   1434e:	4904      	ldr	r1, [pc, #16]	; (14360 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
   14350:	9b01      	ldr	r3, [sp, #4]
   14352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14356:	bf00      	nop
   14358:	b003      	add	sp, #12
   1435a:	f85d fb04 	ldr.w	pc, [sp], #4
   1435e:	bf00      	nop
   14360:	1fff96d0 	.word	0x1fff96d0
   14364:	1fff96cc 	.word	0x1fff96cc

00014368 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
   14368:	b500      	push	{lr}
   1436a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1436c:	f7ec fcb4 	bl	cd8 <Sys_GetCoreID>
   14370:	4603      	mov	r3, r0
   14372:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]--;
   14374:	4a0d      	ldr	r2, [pc, #52]	; (143ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
   14376:	9b01      	ldr	r3, [sp, #4]
   14378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1437c:	1e5a      	subs	r2, r3, #1
   1437e:	490b      	ldr	r1, [pc, #44]	; (143ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
   14380:	9b01      	ldr	r3, [sp, #4]
   14382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   14386:	4a0a      	ldr	r2, [pc, #40]	; (143b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x48>)
   14388:	9b01      	ldr	r3, [sp, #4]
   1438a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1438e:	f003 0301 	and.w	r3, r3, #1
   14392:	2b00      	cmp	r3, #0
   14394:	d106      	bne.n	143a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
   14396:	4a05      	ldr	r2, [pc, #20]	; (143ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
   14398:	9b01      	ldr	r3, [sp, #4]
   1439a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1439e:	2b00      	cmp	r3, #0
   143a0:	d100      	bne.n	143a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   143a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   143a4:	bf00      	nop
   143a6:	b003      	add	sp, #12
   143a8:	f85d fb04 	ldr.w	pc, [sp], #4
   143ac:	1fff96d0 	.word	0x1fff96d0
   143b0:	1fff96cc 	.word	0x1fff96cc

000143b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
   143b4:	b500      	push	{lr}
   143b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   143b8:	f7ec fc8e 	bl	cd8 <Sys_GetCoreID>
   143bc:	4603      	mov	r3, r0
   143be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId])
   143c0:	4a10      	ldr	r2, [pc, #64]	; (14404 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
   143c2:	9b01      	ldr	r3, [sp, #4]
   143c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143c8:	2b00      	cmp	r3, #0
   143ca:	d10d      	bne.n	143e8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   143cc:	f7ec faed 	bl	9aa <Can_43_FLEXCAN_schm_read_msr>
   143d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   143d2:	9b00      	ldr	r3, [sp, #0]
   143d4:	f003 0301 	and.w	r3, r3, #1
   143d8:	2b00      	cmp	r3, #0
   143da:	d100      	bne.n	143de <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   143dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   143de:	490a      	ldr	r1, [pc, #40]	; (14408 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x54>)
   143e0:	9b01      	ldr	r3, [sp, #4]
   143e2:	9a00      	ldr	r2, [sp, #0]
   143e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]++;
   143e8:	4a06      	ldr	r2, [pc, #24]	; (14404 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
   143ea:	9b01      	ldr	r3, [sp, #4]
   143ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143f0:	1c5a      	adds	r2, r3, #1
   143f2:	4904      	ldr	r1, [pc, #16]	; (14404 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
   143f4:	9b01      	ldr	r3, [sp, #4]
   143f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   143fa:	bf00      	nop
   143fc:	b003      	add	sp, #12
   143fe:	f85d fb04 	ldr.w	pc, [sp], #4
   14402:	bf00      	nop
   14404:	1fff96d8 	.word	0x1fff96d8
   14408:	1fff96d4 	.word	0x1fff96d4

0001440c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
   1440c:	b500      	push	{lr}
   1440e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14410:	f7ec fc62 	bl	cd8 <Sys_GetCoreID>
   14414:	4603      	mov	r3, r0
   14416:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]--;
   14418:	4a0d      	ldr	r2, [pc, #52]	; (14450 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
   1441a:	9b01      	ldr	r3, [sp, #4]
   1441c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14420:	1e5a      	subs	r2, r3, #1
   14422:	490b      	ldr	r1, [pc, #44]	; (14450 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
   14424:	9b01      	ldr	r3, [sp, #4]
   14426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   1442a:	4a0a      	ldr	r2, [pc, #40]	; (14454 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x48>)
   1442c:	9b01      	ldr	r3, [sp, #4]
   1442e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14432:	f003 0301 	and.w	r3, r3, #1
   14436:	2b00      	cmp	r3, #0
   14438:	d106      	bne.n	14448 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
   1443a:	4a05      	ldr	r2, [pc, #20]	; (14450 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
   1443c:	9b01      	ldr	r3, [sp, #4]
   1443e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14442:	2b00      	cmp	r3, #0
   14444:	d100      	bne.n	14448 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14446:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14448:	bf00      	nop
   1444a:	b003      	add	sp, #12
   1444c:	f85d fb04 	ldr.w	pc, [sp], #4
   14450:	1fff96d8 	.word	0x1fff96d8
   14454:	1fff96d4 	.word	0x1fff96d4

00014458 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
   14458:	b500      	push	{lr}
   1445a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1445c:	f7ec fc3c 	bl	cd8 <Sys_GetCoreID>
   14460:	4603      	mov	r3, r0
   14462:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId])
   14464:	4a10      	ldr	r2, [pc, #64]	; (144a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
   14466:	9b01      	ldr	r3, [sp, #4]
   14468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1446c:	2b00      	cmp	r3, #0
   1446e:	d10d      	bne.n	1448c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14470:	f7ec fa9b 	bl	9aa <Can_43_FLEXCAN_schm_read_msr>
   14474:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14476:	9b00      	ldr	r3, [sp, #0]
   14478:	f003 0301 	and.w	r3, r3, #1
   1447c:	2b00      	cmp	r3, #0
   1447e:	d100      	bne.n	14482 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14480:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   14482:	490a      	ldr	r1, [pc, #40]	; (144ac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x54>)
   14484:	9b01      	ldr	r3, [sp, #4]
   14486:	9a00      	ldr	r2, [sp, #0]
   14488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]++;
   1448c:	4a06      	ldr	r2, [pc, #24]	; (144a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
   1448e:	9b01      	ldr	r3, [sp, #4]
   14490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14494:	1c5a      	adds	r2, r3, #1
   14496:	4904      	ldr	r1, [pc, #16]	; (144a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
   14498:	9b01      	ldr	r3, [sp, #4]
   1449a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1449e:	bf00      	nop
   144a0:	b003      	add	sp, #12
   144a2:	f85d fb04 	ldr.w	pc, [sp], #4
   144a6:	bf00      	nop
   144a8:	1fff96e0 	.word	0x1fff96e0
   144ac:	1fff96dc 	.word	0x1fff96dc

000144b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
   144b0:	b500      	push	{lr}
   144b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   144b4:	f7ec fc10 	bl	cd8 <Sys_GetCoreID>
   144b8:	4603      	mov	r3, r0
   144ba:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]--;
   144bc:	4a0d      	ldr	r2, [pc, #52]	; (144f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
   144be:	9b01      	ldr	r3, [sp, #4]
   144c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144c4:	1e5a      	subs	r2, r3, #1
   144c6:	490b      	ldr	r1, [pc, #44]	; (144f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
   144c8:	9b01      	ldr	r3, [sp, #4]
   144ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   144ce:	4a0a      	ldr	r2, [pc, #40]	; (144f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x48>)
   144d0:	9b01      	ldr	r3, [sp, #4]
   144d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144d6:	f003 0301 	and.w	r3, r3, #1
   144da:	2b00      	cmp	r3, #0
   144dc:	d106      	bne.n	144ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
   144de:	4a05      	ldr	r2, [pc, #20]	; (144f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
   144e0:	9b01      	ldr	r3, [sp, #4]
   144e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144e6:	2b00      	cmp	r3, #0
   144e8:	d100      	bne.n	144ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   144ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   144ec:	bf00      	nop
   144ee:	b003      	add	sp, #12
   144f0:	f85d fb04 	ldr.w	pc, [sp], #4
   144f4:	1fff96e0 	.word	0x1fff96e0
   144f8:	1fff96dc 	.word	0x1fff96dc

000144fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
   144fc:	b500      	push	{lr}
   144fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14500:	f7ec fbea 	bl	cd8 <Sys_GetCoreID>
   14504:	4603      	mov	r3, r0
   14506:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId])
   14508:	4a10      	ldr	r2, [pc, #64]	; (1454c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
   1450a:	9b01      	ldr	r3, [sp, #4]
   1450c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14510:	2b00      	cmp	r3, #0
   14512:	d10d      	bne.n	14530 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14514:	f7ec fa49 	bl	9aa <Can_43_FLEXCAN_schm_read_msr>
   14518:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1451a:	9b00      	ldr	r3, [sp, #0]
   1451c:	f003 0301 	and.w	r3, r3, #1
   14520:	2b00      	cmp	r3, #0
   14522:	d100      	bne.n	14526 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14524:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   14526:	490a      	ldr	r1, [pc, #40]	; (14550 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x54>)
   14528:	9b01      	ldr	r3, [sp, #4]
   1452a:	9a00      	ldr	r2, [sp, #0]
   1452c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]++;
   14530:	4a06      	ldr	r2, [pc, #24]	; (1454c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
   14532:	9b01      	ldr	r3, [sp, #4]
   14534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14538:	1c5a      	adds	r2, r3, #1
   1453a:	4904      	ldr	r1, [pc, #16]	; (1454c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
   1453c:	9b01      	ldr	r3, [sp, #4]
   1453e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14542:	bf00      	nop
   14544:	b003      	add	sp, #12
   14546:	f85d fb04 	ldr.w	pc, [sp], #4
   1454a:	bf00      	nop
   1454c:	1fff96e8 	.word	0x1fff96e8
   14550:	1fff96e4 	.word	0x1fff96e4

00014554 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
   14554:	b500      	push	{lr}
   14556:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14558:	f7ec fbbe 	bl	cd8 <Sys_GetCoreID>
   1455c:	4603      	mov	r3, r0
   1455e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]--;
   14560:	4a0d      	ldr	r2, [pc, #52]	; (14598 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
   14562:	9b01      	ldr	r3, [sp, #4]
   14564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14568:	1e5a      	subs	r2, r3, #1
   1456a:	490b      	ldr	r1, [pc, #44]	; (14598 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
   1456c:	9b01      	ldr	r3, [sp, #4]
   1456e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   14572:	4a0a      	ldr	r2, [pc, #40]	; (1459c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x48>)
   14574:	9b01      	ldr	r3, [sp, #4]
   14576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1457a:	f003 0301 	and.w	r3, r3, #1
   1457e:	2b00      	cmp	r3, #0
   14580:	d106      	bne.n	14590 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
   14582:	4a05      	ldr	r2, [pc, #20]	; (14598 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
   14584:	9b01      	ldr	r3, [sp, #4]
   14586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1458a:	2b00      	cmp	r3, #0
   1458c:	d100      	bne.n	14590 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1458e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14590:	bf00      	nop
   14592:	b003      	add	sp, #12
   14594:	f85d fb04 	ldr.w	pc, [sp], #4
   14598:	1fff96e8 	.word	0x1fff96e8
   1459c:	1fff96e4 	.word	0x1fff96e4

000145a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
   145a0:	b500      	push	{lr}
   145a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   145a4:	f7ec fb98 	bl	cd8 <Sys_GetCoreID>
   145a8:	4603      	mov	r3, r0
   145aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId])
   145ac:	4a10      	ldr	r2, [pc, #64]	; (145f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
   145ae:	9b01      	ldr	r3, [sp, #4]
   145b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145b4:	2b00      	cmp	r3, #0
   145b6:	d10d      	bne.n	145d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   145b8:	f7ec f9f7 	bl	9aa <Can_43_FLEXCAN_schm_read_msr>
   145bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   145be:	9b00      	ldr	r3, [sp, #0]
   145c0:	f003 0301 	and.w	r3, r3, #1
   145c4:	2b00      	cmp	r3, #0
   145c6:	d100      	bne.n	145ca <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   145c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   145ca:	490a      	ldr	r1, [pc, #40]	; (145f4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x54>)
   145cc:	9b01      	ldr	r3, [sp, #4]
   145ce:	9a00      	ldr	r2, [sp, #0]
   145d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]++;
   145d4:	4a06      	ldr	r2, [pc, #24]	; (145f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
   145d6:	9b01      	ldr	r3, [sp, #4]
   145d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145dc:	1c5a      	adds	r2, r3, #1
   145de:	4904      	ldr	r1, [pc, #16]	; (145f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
   145e0:	9b01      	ldr	r3, [sp, #4]
   145e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   145e6:	bf00      	nop
   145e8:	b003      	add	sp, #12
   145ea:	f85d fb04 	ldr.w	pc, [sp], #4
   145ee:	bf00      	nop
   145f0:	1fff96f0 	.word	0x1fff96f0
   145f4:	1fff96ec 	.word	0x1fff96ec

000145f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
   145f8:	b500      	push	{lr}
   145fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   145fc:	f7ec fb6c 	bl	cd8 <Sys_GetCoreID>
   14600:	4603      	mov	r3, r0
   14602:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]--;
   14604:	4a0d      	ldr	r2, [pc, #52]	; (1463c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
   14606:	9b01      	ldr	r3, [sp, #4]
   14608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1460c:	1e5a      	subs	r2, r3, #1
   1460e:	490b      	ldr	r1, [pc, #44]	; (1463c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
   14610:	9b01      	ldr	r3, [sp, #4]
   14612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   14616:	4a0a      	ldr	r2, [pc, #40]	; (14640 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x48>)
   14618:	9b01      	ldr	r3, [sp, #4]
   1461a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1461e:	f003 0301 	and.w	r3, r3, #1
   14622:	2b00      	cmp	r3, #0
   14624:	d106      	bne.n	14634 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
   14626:	4a05      	ldr	r2, [pc, #20]	; (1463c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
   14628:	9b01      	ldr	r3, [sp, #4]
   1462a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1462e:	2b00      	cmp	r3, #0
   14630:	d100      	bne.n	14634 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14632:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14634:	bf00      	nop
   14636:	b003      	add	sp, #12
   14638:	f85d fb04 	ldr.w	pc, [sp], #4
   1463c:	1fff96f0 	.word	0x1fff96f0
   14640:	1fff96ec 	.word	0x1fff96ec

00014644 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
   14644:	b500      	push	{lr}
   14646:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14648:	f7ec fb46 	bl	cd8 <Sys_GetCoreID>
   1464c:	4603      	mov	r3, r0
   1464e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId])
   14650:	4a10      	ldr	r2, [pc, #64]	; (14694 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
   14652:	9b01      	ldr	r3, [sp, #4]
   14654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14658:	2b00      	cmp	r3, #0
   1465a:	d10d      	bne.n	14678 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1465c:	f7ec f9a5 	bl	9aa <Can_43_FLEXCAN_schm_read_msr>
   14660:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14662:	9b00      	ldr	r3, [sp, #0]
   14664:	f003 0301 	and.w	r3, r3, #1
   14668:	2b00      	cmp	r3, #0
   1466a:	d100      	bne.n	1466e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1466c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   1466e:	490a      	ldr	r1, [pc, #40]	; (14698 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x54>)
   14670:	9b01      	ldr	r3, [sp, #4]
   14672:	9a00      	ldr	r2, [sp, #0]
   14674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]++;
   14678:	4a06      	ldr	r2, [pc, #24]	; (14694 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
   1467a:	9b01      	ldr	r3, [sp, #4]
   1467c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14680:	1c5a      	adds	r2, r3, #1
   14682:	4904      	ldr	r1, [pc, #16]	; (14694 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
   14684:	9b01      	ldr	r3, [sp, #4]
   14686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1468a:	bf00      	nop
   1468c:	b003      	add	sp, #12
   1468e:	f85d fb04 	ldr.w	pc, [sp], #4
   14692:	bf00      	nop
   14694:	1fff96f8 	.word	0x1fff96f8
   14698:	1fff96f4 	.word	0x1fff96f4

0001469c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
   1469c:	b500      	push	{lr}
   1469e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   146a0:	f7ec fb1a 	bl	cd8 <Sys_GetCoreID>
   146a4:	4603      	mov	r3, r0
   146a6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]--;
   146a8:	4a0d      	ldr	r2, [pc, #52]	; (146e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
   146aa:	9b01      	ldr	r3, [sp, #4]
   146ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146b0:	1e5a      	subs	r2, r3, #1
   146b2:	490b      	ldr	r1, [pc, #44]	; (146e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
   146b4:	9b01      	ldr	r3, [sp, #4]
   146b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   146ba:	4a0a      	ldr	r2, [pc, #40]	; (146e4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x48>)
   146bc:	9b01      	ldr	r3, [sp, #4]
   146be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146c2:	f003 0301 	and.w	r3, r3, #1
   146c6:	2b00      	cmp	r3, #0
   146c8:	d106      	bne.n	146d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
   146ca:	4a05      	ldr	r2, [pc, #20]	; (146e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
   146cc:	9b01      	ldr	r3, [sp, #4]
   146ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146d2:	2b00      	cmp	r3, #0
   146d4:	d100      	bne.n	146d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   146d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   146d8:	bf00      	nop
   146da:	b003      	add	sp, #12
   146dc:	f85d fb04 	ldr.w	pc, [sp], #4
   146e0:	1fff96f8 	.word	0x1fff96f8
   146e4:	1fff96f4 	.word	0x1fff96f4

000146e8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
   146e8:	b500      	push	{lr}
   146ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   146ec:	f7ec faf4 	bl	cd8 <Sys_GetCoreID>
   146f0:	4603      	mov	r3, r0
   146f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId])
   146f4:	4a10      	ldr	r2, [pc, #64]	; (14738 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
   146f6:	9b01      	ldr	r3, [sp, #4]
   146f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146fc:	2b00      	cmp	r3, #0
   146fe:	d10d      	bne.n	1471c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14700:	f7ec f953 	bl	9aa <Can_43_FLEXCAN_schm_read_msr>
   14704:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14706:	9b00      	ldr	r3, [sp, #0]
   14708:	f003 0301 	and.w	r3, r3, #1
   1470c:	2b00      	cmp	r3, #0
   1470e:	d100      	bne.n	14712 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14710:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   14712:	490a      	ldr	r1, [pc, #40]	; (1473c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x54>)
   14714:	9b01      	ldr	r3, [sp, #4]
   14716:	9a00      	ldr	r2, [sp, #0]
   14718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]++;
   1471c:	4a06      	ldr	r2, [pc, #24]	; (14738 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
   1471e:	9b01      	ldr	r3, [sp, #4]
   14720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14724:	1c5a      	adds	r2, r3, #1
   14726:	4904      	ldr	r1, [pc, #16]	; (14738 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
   14728:	9b01      	ldr	r3, [sp, #4]
   1472a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1472e:	bf00      	nop
   14730:	b003      	add	sp, #12
   14732:	f85d fb04 	ldr.w	pc, [sp], #4
   14736:	bf00      	nop
   14738:	1fff9700 	.word	0x1fff9700
   1473c:	1fff96fc 	.word	0x1fff96fc

00014740 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
   14740:	b500      	push	{lr}
   14742:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14744:	f7ec fac8 	bl	cd8 <Sys_GetCoreID>
   14748:	4603      	mov	r3, r0
   1474a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]--;
   1474c:	4a0d      	ldr	r2, [pc, #52]	; (14784 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
   1474e:	9b01      	ldr	r3, [sp, #4]
   14750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14754:	1e5a      	subs	r2, r3, #1
   14756:	490b      	ldr	r1, [pc, #44]	; (14784 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
   14758:	9b01      	ldr	r3, [sp, #4]
   1475a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   1475e:	4a0a      	ldr	r2, [pc, #40]	; (14788 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x48>)
   14760:	9b01      	ldr	r3, [sp, #4]
   14762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14766:	f003 0301 	and.w	r3, r3, #1
   1476a:	2b00      	cmp	r3, #0
   1476c:	d106      	bne.n	1477c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
   1476e:	4a05      	ldr	r2, [pc, #20]	; (14784 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
   14770:	9b01      	ldr	r3, [sp, #4]
   14772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14776:	2b00      	cmp	r3, #0
   14778:	d100      	bne.n	1477c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1477a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1477c:	bf00      	nop
   1477e:	b003      	add	sp, #12
   14780:	f85d fb04 	ldr.w	pc, [sp], #4
   14784:	1fff9700 	.word	0x1fff9700
   14788:	1fff96fc 	.word	0x1fff96fc

0001478c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
   1478c:	b500      	push	{lr}
   1478e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14790:	f7ec faa2 	bl	cd8 <Sys_GetCoreID>
   14794:	4603      	mov	r3, r0
   14796:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId])
   14798:	4a10      	ldr	r2, [pc, #64]	; (147dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
   1479a:	9b01      	ldr	r3, [sp, #4]
   1479c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147a0:	2b00      	cmp	r3, #0
   147a2:	d10d      	bne.n	147c0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   147a4:	f7ec f901 	bl	9aa <Can_43_FLEXCAN_schm_read_msr>
   147a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   147aa:	9b00      	ldr	r3, [sp, #0]
   147ac:	f003 0301 	and.w	r3, r3, #1
   147b0:	2b00      	cmp	r3, #0
   147b2:	d100      	bne.n	147b6 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   147b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   147b6:	490a      	ldr	r1, [pc, #40]	; (147e0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x54>)
   147b8:	9b01      	ldr	r3, [sp, #4]
   147ba:	9a00      	ldr	r2, [sp, #0]
   147bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]++;
   147c0:	4a06      	ldr	r2, [pc, #24]	; (147dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
   147c2:	9b01      	ldr	r3, [sp, #4]
   147c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147c8:	1c5a      	adds	r2, r3, #1
   147ca:	4904      	ldr	r1, [pc, #16]	; (147dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
   147cc:	9b01      	ldr	r3, [sp, #4]
   147ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   147d2:	bf00      	nop
   147d4:	b003      	add	sp, #12
   147d6:	f85d fb04 	ldr.w	pc, [sp], #4
   147da:	bf00      	nop
   147dc:	1fff9708 	.word	0x1fff9708
   147e0:	1fff9704 	.word	0x1fff9704

000147e4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
   147e4:	b500      	push	{lr}
   147e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   147e8:	f7ec fa76 	bl	cd8 <Sys_GetCoreID>
   147ec:	4603      	mov	r3, r0
   147ee:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]--;
   147f0:	4a0d      	ldr	r2, [pc, #52]	; (14828 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
   147f2:	9b01      	ldr	r3, [sp, #4]
   147f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147f8:	1e5a      	subs	r2, r3, #1
   147fa:	490b      	ldr	r1, [pc, #44]	; (14828 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
   147fc:	9b01      	ldr	r3, [sp, #4]
   147fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   14802:	4a0a      	ldr	r2, [pc, #40]	; (1482c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x48>)
   14804:	9b01      	ldr	r3, [sp, #4]
   14806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1480a:	f003 0301 	and.w	r3, r3, #1
   1480e:	2b00      	cmp	r3, #0
   14810:	d106      	bne.n	14820 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
   14812:	4a05      	ldr	r2, [pc, #20]	; (14828 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
   14814:	9b01      	ldr	r3, [sp, #4]
   14816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1481a:	2b00      	cmp	r3, #0
   1481c:	d100      	bne.n	14820 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1481e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14820:	bf00      	nop
   14822:	b003      	add	sp, #12
   14824:	f85d fb04 	ldr.w	pc, [sp], #4
   14828:	1fff9708 	.word	0x1fff9708
   1482c:	1fff9704 	.word	0x1fff9704

00014830 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
   14830:	b500      	push	{lr}
   14832:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14834:	f7ec fa50 	bl	cd8 <Sys_GetCoreID>
   14838:	4603      	mov	r3, r0
   1483a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId])
   1483c:	4a10      	ldr	r2, [pc, #64]	; (14880 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
   1483e:	9b01      	ldr	r3, [sp, #4]
   14840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14844:	2b00      	cmp	r3, #0
   14846:	d10d      	bne.n	14864 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14848:	f7ec f8af 	bl	9aa <Can_43_FLEXCAN_schm_read_msr>
   1484c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1484e:	9b00      	ldr	r3, [sp, #0]
   14850:	f003 0301 	and.w	r3, r3, #1
   14854:	2b00      	cmp	r3, #0
   14856:	d100      	bne.n	1485a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14858:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   1485a:	490a      	ldr	r1, [pc, #40]	; (14884 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x54>)
   1485c:	9b01      	ldr	r3, [sp, #4]
   1485e:	9a00      	ldr	r2, [sp, #0]
   14860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]++;
   14864:	4a06      	ldr	r2, [pc, #24]	; (14880 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
   14866:	9b01      	ldr	r3, [sp, #4]
   14868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1486c:	1c5a      	adds	r2, r3, #1
   1486e:	4904      	ldr	r1, [pc, #16]	; (14880 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
   14870:	9b01      	ldr	r3, [sp, #4]
   14872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14876:	bf00      	nop
   14878:	b003      	add	sp, #12
   1487a:	f85d fb04 	ldr.w	pc, [sp], #4
   1487e:	bf00      	nop
   14880:	1fff9710 	.word	0x1fff9710
   14884:	1fff970c 	.word	0x1fff970c

00014888 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
   14888:	b500      	push	{lr}
   1488a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1488c:	f7ec fa24 	bl	cd8 <Sys_GetCoreID>
   14890:	4603      	mov	r3, r0
   14892:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]--;
   14894:	4a0d      	ldr	r2, [pc, #52]	; (148cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
   14896:	9b01      	ldr	r3, [sp, #4]
   14898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1489c:	1e5a      	subs	r2, r3, #1
   1489e:	490b      	ldr	r1, [pc, #44]	; (148cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
   148a0:	9b01      	ldr	r3, [sp, #4]
   148a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   148a6:	4a0a      	ldr	r2, [pc, #40]	; (148d0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x48>)
   148a8:	9b01      	ldr	r3, [sp, #4]
   148aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148ae:	f003 0301 	and.w	r3, r3, #1
   148b2:	2b00      	cmp	r3, #0
   148b4:	d106      	bne.n	148c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
   148b6:	4a05      	ldr	r2, [pc, #20]	; (148cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
   148b8:	9b01      	ldr	r3, [sp, #4]
   148ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148be:	2b00      	cmp	r3, #0
   148c0:	d100      	bne.n	148c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   148c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   148c4:	bf00      	nop
   148c6:	b003      	add	sp, #12
   148c8:	f85d fb04 	ldr.w	pc, [sp], #4
   148cc:	1fff9710 	.word	0x1fff9710
   148d0:	1fff970c 	.word	0x1fff970c

000148d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
   148d4:	b500      	push	{lr}
   148d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   148d8:	f7ec f9fe 	bl	cd8 <Sys_GetCoreID>
   148dc:	4603      	mov	r3, r0
   148de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId])
   148e0:	4a10      	ldr	r2, [pc, #64]	; (14924 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
   148e2:	9b01      	ldr	r3, [sp, #4]
   148e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148e8:	2b00      	cmp	r3, #0
   148ea:	d10d      	bne.n	14908 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   148ec:	f7ec f85d 	bl	9aa <Can_43_FLEXCAN_schm_read_msr>
   148f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   148f2:	9b00      	ldr	r3, [sp, #0]
   148f4:	f003 0301 	and.w	r3, r3, #1
   148f8:	2b00      	cmp	r3, #0
   148fa:	d100      	bne.n	148fe <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   148fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   148fe:	490a      	ldr	r1, [pc, #40]	; (14928 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x54>)
   14900:	9b01      	ldr	r3, [sp, #4]
   14902:	9a00      	ldr	r2, [sp, #0]
   14904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]++;
   14908:	4a06      	ldr	r2, [pc, #24]	; (14924 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
   1490a:	9b01      	ldr	r3, [sp, #4]
   1490c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14910:	1c5a      	adds	r2, r3, #1
   14912:	4904      	ldr	r1, [pc, #16]	; (14924 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
   14914:	9b01      	ldr	r3, [sp, #4]
   14916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1491a:	bf00      	nop
   1491c:	b003      	add	sp, #12
   1491e:	f85d fb04 	ldr.w	pc, [sp], #4
   14922:	bf00      	nop
   14924:	1fff9718 	.word	0x1fff9718
   14928:	1fff9714 	.word	0x1fff9714

0001492c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
   1492c:	b500      	push	{lr}
   1492e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14930:	f7ec f9d2 	bl	cd8 <Sys_GetCoreID>
   14934:	4603      	mov	r3, r0
   14936:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]--;
   14938:	4a0d      	ldr	r2, [pc, #52]	; (14970 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
   1493a:	9b01      	ldr	r3, [sp, #4]
   1493c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14940:	1e5a      	subs	r2, r3, #1
   14942:	490b      	ldr	r1, [pc, #44]	; (14970 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
   14944:	9b01      	ldr	r3, [sp, #4]
   14946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   1494a:	4a0a      	ldr	r2, [pc, #40]	; (14974 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x48>)
   1494c:	9b01      	ldr	r3, [sp, #4]
   1494e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14952:	f003 0301 	and.w	r3, r3, #1
   14956:	2b00      	cmp	r3, #0
   14958:	d106      	bne.n	14968 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
   1495a:	4a05      	ldr	r2, [pc, #20]	; (14970 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
   1495c:	9b01      	ldr	r3, [sp, #4]
   1495e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14962:	2b00      	cmp	r3, #0
   14964:	d100      	bne.n	14968 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14966:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14968:	bf00      	nop
   1496a:	b003      	add	sp, #12
   1496c:	f85d fb04 	ldr.w	pc, [sp], #4
   14970:	1fff9718 	.word	0x1fff9718
   14974:	1fff9714 	.word	0x1fff9714

00014978 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
   14978:	b500      	push	{lr}
   1497a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1497c:	f7ec f9ac 	bl	cd8 <Sys_GetCoreID>
   14980:	4603      	mov	r3, r0
   14982:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId])
   14984:	4a10      	ldr	r2, [pc, #64]	; (149c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
   14986:	9b01      	ldr	r3, [sp, #4]
   14988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1498c:	2b00      	cmp	r3, #0
   1498e:	d10d      	bne.n	149ac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14990:	f7ec f80b 	bl	9aa <Can_43_FLEXCAN_schm_read_msr>
   14994:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14996:	9b00      	ldr	r3, [sp, #0]
   14998:	f003 0301 	and.w	r3, r3, #1
   1499c:	2b00      	cmp	r3, #0
   1499e:	d100      	bne.n	149a2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   149a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   149a2:	490a      	ldr	r1, [pc, #40]	; (149cc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x54>)
   149a4:	9b01      	ldr	r3, [sp, #4]
   149a6:	9a00      	ldr	r2, [sp, #0]
   149a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]++;
   149ac:	4a06      	ldr	r2, [pc, #24]	; (149c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
   149ae:	9b01      	ldr	r3, [sp, #4]
   149b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149b4:	1c5a      	adds	r2, r3, #1
   149b6:	4904      	ldr	r1, [pc, #16]	; (149c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
   149b8:	9b01      	ldr	r3, [sp, #4]
   149ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   149be:	bf00      	nop
   149c0:	b003      	add	sp, #12
   149c2:	f85d fb04 	ldr.w	pc, [sp], #4
   149c6:	bf00      	nop
   149c8:	1fff9720 	.word	0x1fff9720
   149cc:	1fff971c 	.word	0x1fff971c

000149d0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
   149d0:	b500      	push	{lr}
   149d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   149d4:	f7ec f980 	bl	cd8 <Sys_GetCoreID>
   149d8:	4603      	mov	r3, r0
   149da:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]--;
   149dc:	4a0d      	ldr	r2, [pc, #52]	; (14a14 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
   149de:	9b01      	ldr	r3, [sp, #4]
   149e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149e4:	1e5a      	subs	r2, r3, #1
   149e6:	490b      	ldr	r1, [pc, #44]	; (14a14 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
   149e8:	9b01      	ldr	r3, [sp, #4]
   149ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   149ee:	4a0a      	ldr	r2, [pc, #40]	; (14a18 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x48>)
   149f0:	9b01      	ldr	r3, [sp, #4]
   149f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149f6:	f003 0301 	and.w	r3, r3, #1
   149fa:	2b00      	cmp	r3, #0
   149fc:	d106      	bne.n	14a0c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
   149fe:	4a05      	ldr	r2, [pc, #20]	; (14a14 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
   14a00:	9b01      	ldr	r3, [sp, #4]
   14a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a06:	2b00      	cmp	r3, #0
   14a08:	d100      	bne.n	14a0c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14a0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14a0c:	bf00      	nop
   14a0e:	b003      	add	sp, #12
   14a10:	f85d fb04 	ldr.w	pc, [sp], #4
   14a14:	1fff9720 	.word	0x1fff9720
   14a18:	1fff971c 	.word	0x1fff971c

00014a1c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
   14a1c:	b500      	push	{lr}
   14a1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a20:	f7ec f95a 	bl	cd8 <Sys_GetCoreID>
   14a24:	4603      	mov	r3, r0
   14a26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId])
   14a28:	4a10      	ldr	r2, [pc, #64]	; (14a6c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
   14a2a:	9b01      	ldr	r3, [sp, #4]
   14a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a30:	2b00      	cmp	r3, #0
   14a32:	d10d      	bne.n	14a50 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14a34:	f7eb ffb9 	bl	9aa <Can_43_FLEXCAN_schm_read_msr>
   14a38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14a3a:	9b00      	ldr	r3, [sp, #0]
   14a3c:	f003 0301 	and.w	r3, r3, #1
   14a40:	2b00      	cmp	r3, #0
   14a42:	d100      	bne.n	14a46 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14a44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   14a46:	490a      	ldr	r1, [pc, #40]	; (14a70 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x54>)
   14a48:	9b01      	ldr	r3, [sp, #4]
   14a4a:	9a00      	ldr	r2, [sp, #0]
   14a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]++;
   14a50:	4a06      	ldr	r2, [pc, #24]	; (14a6c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
   14a52:	9b01      	ldr	r3, [sp, #4]
   14a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a58:	1c5a      	adds	r2, r3, #1
   14a5a:	4904      	ldr	r1, [pc, #16]	; (14a6c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
   14a5c:	9b01      	ldr	r3, [sp, #4]
   14a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14a62:	bf00      	nop
   14a64:	b003      	add	sp, #12
   14a66:	f85d fb04 	ldr.w	pc, [sp], #4
   14a6a:	bf00      	nop
   14a6c:	1fff9728 	.word	0x1fff9728
   14a70:	1fff9724 	.word	0x1fff9724

00014a74 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
   14a74:	b500      	push	{lr}
   14a76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a78:	f7ec f92e 	bl	cd8 <Sys_GetCoreID>
   14a7c:	4603      	mov	r3, r0
   14a7e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]--;
   14a80:	4a0d      	ldr	r2, [pc, #52]	; (14ab8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
   14a82:	9b01      	ldr	r3, [sp, #4]
   14a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a88:	1e5a      	subs	r2, r3, #1
   14a8a:	490b      	ldr	r1, [pc, #44]	; (14ab8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
   14a8c:	9b01      	ldr	r3, [sp, #4]
   14a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   14a92:	4a0a      	ldr	r2, [pc, #40]	; (14abc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x48>)
   14a94:	9b01      	ldr	r3, [sp, #4]
   14a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a9a:	f003 0301 	and.w	r3, r3, #1
   14a9e:	2b00      	cmp	r3, #0
   14aa0:	d106      	bne.n	14ab0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
   14aa2:	4a05      	ldr	r2, [pc, #20]	; (14ab8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
   14aa4:	9b01      	ldr	r3, [sp, #4]
   14aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14aaa:	2b00      	cmp	r3, #0
   14aac:	d100      	bne.n	14ab0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14aae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14ab0:	bf00      	nop
   14ab2:	b003      	add	sp, #12
   14ab4:	f85d fb04 	ldr.w	pc, [sp], #4
   14ab8:	1fff9728 	.word	0x1fff9728
   14abc:	1fff9724 	.word	0x1fff9724

00014ac0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   14ac0:	b500      	push	{lr}
   14ac2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ac4:	f7ec f908 	bl	cd8 <Sys_GetCoreID>
   14ac8:	4603      	mov	r3, r0
   14aca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
   14acc:	4a10      	ldr	r2, [pc, #64]	; (14b10 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   14ace:	9b01      	ldr	r3, [sp, #4]
   14ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ad4:	2b00      	cmp	r3, #0
   14ad6:	d10d      	bne.n	14af4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14ad8:	f7eb ff70 	bl	9bc <Mcu_schm_read_msr>
   14adc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14ade:	9b00      	ldr	r3, [sp, #0]
   14ae0:	f003 0301 	and.w	r3, r3, #1
   14ae4:	2b00      	cmp	r3, #0
   14ae6:	d100      	bne.n	14aea <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14ae8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   14aea:	490a      	ldr	r1, [pc, #40]	; (14b14 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
   14aec:	9b01      	ldr	r3, [sp, #4]
   14aee:	9a00      	ldr	r2, [sp, #0]
   14af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
   14af4:	4a06      	ldr	r2, [pc, #24]	; (14b10 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   14af6:	9b01      	ldr	r3, [sp, #4]
   14af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14afc:	1c5a      	adds	r2, r3, #1
   14afe:	4904      	ldr	r1, [pc, #16]	; (14b10 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   14b00:	9b01      	ldr	r3, [sp, #4]
   14b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14b06:	bf00      	nop
   14b08:	b003      	add	sp, #12
   14b0a:	f85d fb04 	ldr.w	pc, [sp], #4
   14b0e:	bf00      	nop
   14b10:	1fff9730 	.word	0x1fff9730
   14b14:	1fff972c 	.word	0x1fff972c

00014b18 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   14b18:	b500      	push	{lr}
   14b1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b1c:	f7ec f8dc 	bl	cd8 <Sys_GetCoreID>
   14b20:	4603      	mov	r3, r0
   14b22:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
   14b24:	4a0d      	ldr	r2, [pc, #52]	; (14b5c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   14b26:	9b01      	ldr	r3, [sp, #4]
   14b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b2c:	1e5a      	subs	r2, r3, #1
   14b2e:	490b      	ldr	r1, [pc, #44]	; (14b5c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   14b30:	9b01      	ldr	r3, [sp, #4]
   14b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   14b36:	4a0a      	ldr	r2, [pc, #40]	; (14b60 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
   14b38:	9b01      	ldr	r3, [sp, #4]
   14b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b3e:	f003 0301 	and.w	r3, r3, #1
   14b42:	2b00      	cmp	r3, #0
   14b44:	d106      	bne.n	14b54 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
   14b46:	4a05      	ldr	r2, [pc, #20]	; (14b5c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   14b48:	9b01      	ldr	r3, [sp, #4]
   14b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b4e:	2b00      	cmp	r3, #0
   14b50:	d100      	bne.n	14b54 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14b52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14b54:	bf00      	nop
   14b56:	b003      	add	sp, #12
   14b58:	f85d fb04 	ldr.w	pc, [sp], #4
   14b5c:	1fff9730 	.word	0x1fff9730
   14b60:	1fff972c 	.word	0x1fff972c

00014b64 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   14b64:	b500      	push	{lr}
   14b66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b68:	f7ec f8b6 	bl	cd8 <Sys_GetCoreID>
   14b6c:	4603      	mov	r3, r0
   14b6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
   14b70:	4a10      	ldr	r2, [pc, #64]	; (14bb4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   14b72:	9b01      	ldr	r3, [sp, #4]
   14b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b78:	2b00      	cmp	r3, #0
   14b7a:	d10d      	bne.n	14b98 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14b7c:	f7eb ff1e 	bl	9bc <Mcu_schm_read_msr>
   14b80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14b82:	9b00      	ldr	r3, [sp, #0]
   14b84:	f003 0301 	and.w	r3, r3, #1
   14b88:	2b00      	cmp	r3, #0
   14b8a:	d100      	bne.n	14b8e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14b8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   14b8e:	490a      	ldr	r1, [pc, #40]	; (14bb8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
   14b90:	9b01      	ldr	r3, [sp, #4]
   14b92:	9a00      	ldr	r2, [sp, #0]
   14b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
   14b98:	4a06      	ldr	r2, [pc, #24]	; (14bb4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   14b9a:	9b01      	ldr	r3, [sp, #4]
   14b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ba0:	1c5a      	adds	r2, r3, #1
   14ba2:	4904      	ldr	r1, [pc, #16]	; (14bb4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   14ba4:	9b01      	ldr	r3, [sp, #4]
   14ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14baa:	bf00      	nop
   14bac:	b003      	add	sp, #12
   14bae:	f85d fb04 	ldr.w	pc, [sp], #4
   14bb2:	bf00      	nop
   14bb4:	1fff9738 	.word	0x1fff9738
   14bb8:	1fff9734 	.word	0x1fff9734

00014bbc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   14bbc:	b500      	push	{lr}
   14bbe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14bc0:	f7ec f88a 	bl	cd8 <Sys_GetCoreID>
   14bc4:	4603      	mov	r3, r0
   14bc6:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
   14bc8:	4a0d      	ldr	r2, [pc, #52]	; (14c00 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   14bca:	9b01      	ldr	r3, [sp, #4]
   14bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bd0:	1e5a      	subs	r2, r3, #1
   14bd2:	490b      	ldr	r1, [pc, #44]	; (14c00 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   14bd4:	9b01      	ldr	r3, [sp, #4]
   14bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   14bda:	4a0a      	ldr	r2, [pc, #40]	; (14c04 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
   14bdc:	9b01      	ldr	r3, [sp, #4]
   14bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14be2:	f003 0301 	and.w	r3, r3, #1
   14be6:	2b00      	cmp	r3, #0
   14be8:	d106      	bne.n	14bf8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
   14bea:	4a05      	ldr	r2, [pc, #20]	; (14c00 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   14bec:	9b01      	ldr	r3, [sp, #4]
   14bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bf2:	2b00      	cmp	r3, #0
   14bf4:	d100      	bne.n	14bf8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14bf6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14bf8:	bf00      	nop
   14bfa:	b003      	add	sp, #12
   14bfc:	f85d fb04 	ldr.w	pc, [sp], #4
   14c00:	1fff9738 	.word	0x1fff9738
   14c04:	1fff9734 	.word	0x1fff9734

00014c08 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   14c08:	b500      	push	{lr}
   14c0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c0c:	f7ec f864 	bl	cd8 <Sys_GetCoreID>
   14c10:	4603      	mov	r3, r0
   14c12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
   14c14:	4a10      	ldr	r2, [pc, #64]	; (14c58 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   14c16:	9b01      	ldr	r3, [sp, #4]
   14c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c1c:	2b00      	cmp	r3, #0
   14c1e:	d10d      	bne.n	14c3c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14c20:	f7eb fecc 	bl	9bc <Mcu_schm_read_msr>
   14c24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14c26:	9b00      	ldr	r3, [sp, #0]
   14c28:	f003 0301 	and.w	r3, r3, #1
   14c2c:	2b00      	cmp	r3, #0
   14c2e:	d100      	bne.n	14c32 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14c30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   14c32:	490a      	ldr	r1, [pc, #40]	; (14c5c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
   14c34:	9b01      	ldr	r3, [sp, #4]
   14c36:	9a00      	ldr	r2, [sp, #0]
   14c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
   14c3c:	4a06      	ldr	r2, [pc, #24]	; (14c58 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   14c3e:	9b01      	ldr	r3, [sp, #4]
   14c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c44:	1c5a      	adds	r2, r3, #1
   14c46:	4904      	ldr	r1, [pc, #16]	; (14c58 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   14c48:	9b01      	ldr	r3, [sp, #4]
   14c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14c4e:	bf00      	nop
   14c50:	b003      	add	sp, #12
   14c52:	f85d fb04 	ldr.w	pc, [sp], #4
   14c56:	bf00      	nop
   14c58:	1fff9740 	.word	0x1fff9740
   14c5c:	1fff973c 	.word	0x1fff973c

00014c60 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   14c60:	b500      	push	{lr}
   14c62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c64:	f7ec f838 	bl	cd8 <Sys_GetCoreID>
   14c68:	4603      	mov	r3, r0
   14c6a:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
   14c6c:	4a0d      	ldr	r2, [pc, #52]	; (14ca4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   14c6e:	9b01      	ldr	r3, [sp, #4]
   14c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c74:	1e5a      	subs	r2, r3, #1
   14c76:	490b      	ldr	r1, [pc, #44]	; (14ca4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   14c78:	9b01      	ldr	r3, [sp, #4]
   14c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   14c7e:	4a0a      	ldr	r2, [pc, #40]	; (14ca8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
   14c80:	9b01      	ldr	r3, [sp, #4]
   14c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c86:	f003 0301 	and.w	r3, r3, #1
   14c8a:	2b00      	cmp	r3, #0
   14c8c:	d106      	bne.n	14c9c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
   14c8e:	4a05      	ldr	r2, [pc, #20]	; (14ca4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   14c90:	9b01      	ldr	r3, [sp, #4]
   14c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c96:	2b00      	cmp	r3, #0
   14c98:	d100      	bne.n	14c9c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14c9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14c9c:	bf00      	nop
   14c9e:	b003      	add	sp, #12
   14ca0:	f85d fb04 	ldr.w	pc, [sp], #4
   14ca4:	1fff9740 	.word	0x1fff9740
   14ca8:	1fff973c 	.word	0x1fff973c

00014cac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   14cac:	b500      	push	{lr}
   14cae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14cb0:	f7ec f812 	bl	cd8 <Sys_GetCoreID>
   14cb4:	4603      	mov	r3, r0
   14cb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
   14cb8:	4a10      	ldr	r2, [pc, #64]	; (14cfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   14cba:	9b01      	ldr	r3, [sp, #4]
   14cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cc0:	2b00      	cmp	r3, #0
   14cc2:	d10d      	bne.n	14ce0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14cc4:	f7eb fe83 	bl	9ce <Port_schm_read_msr>
   14cc8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14cca:	9b00      	ldr	r3, [sp, #0]
   14ccc:	f003 0301 	and.w	r3, r3, #1
   14cd0:	2b00      	cmp	r3, #0
   14cd2:	d100      	bne.n	14cd6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14cd4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   14cd6:	490a      	ldr	r1, [pc, #40]	; (14d00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
   14cd8:	9b01      	ldr	r3, [sp, #4]
   14cda:	9a00      	ldr	r2, [sp, #0]
   14cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
   14ce0:	4a06      	ldr	r2, [pc, #24]	; (14cfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   14ce2:	9b01      	ldr	r3, [sp, #4]
   14ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ce8:	1c5a      	adds	r2, r3, #1
   14cea:	4904      	ldr	r1, [pc, #16]	; (14cfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   14cec:	9b01      	ldr	r3, [sp, #4]
   14cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14cf2:	bf00      	nop
   14cf4:	b003      	add	sp, #12
   14cf6:	f85d fb04 	ldr.w	pc, [sp], #4
   14cfa:	bf00      	nop
   14cfc:	1fff9748 	.word	0x1fff9748
   14d00:	1fff9744 	.word	0x1fff9744

00014d04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   14d04:	b500      	push	{lr}
   14d06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d08:	f7eb ffe6 	bl	cd8 <Sys_GetCoreID>
   14d0c:	4603      	mov	r3, r0
   14d0e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
   14d10:	4a0d      	ldr	r2, [pc, #52]	; (14d48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   14d12:	9b01      	ldr	r3, [sp, #4]
   14d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d18:	1e5a      	subs	r2, r3, #1
   14d1a:	490b      	ldr	r1, [pc, #44]	; (14d48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   14d1c:	9b01      	ldr	r3, [sp, #4]
   14d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   14d22:	4a0a      	ldr	r2, [pc, #40]	; (14d4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
   14d24:	9b01      	ldr	r3, [sp, #4]
   14d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d2a:	f003 0301 	and.w	r3, r3, #1
   14d2e:	2b00      	cmp	r3, #0
   14d30:	d106      	bne.n	14d40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
   14d32:	4a05      	ldr	r2, [pc, #20]	; (14d48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   14d34:	9b01      	ldr	r3, [sp, #4]
   14d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d3a:	2b00      	cmp	r3, #0
   14d3c:	d100      	bne.n	14d40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14d3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14d40:	bf00      	nop
   14d42:	b003      	add	sp, #12
   14d44:	f85d fb04 	ldr.w	pc, [sp], #4
   14d48:	1fff9748 	.word	0x1fff9748
   14d4c:	1fff9744 	.word	0x1fff9744

00014d50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   14d50:	b500      	push	{lr}
   14d52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d54:	f7eb ffc0 	bl	cd8 <Sys_GetCoreID>
   14d58:	4603      	mov	r3, r0
   14d5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
   14d5c:	4a10      	ldr	r2, [pc, #64]	; (14da0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   14d5e:	9b01      	ldr	r3, [sp, #4]
   14d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d64:	2b00      	cmp	r3, #0
   14d66:	d10d      	bne.n	14d84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14d68:	f7eb fe31 	bl	9ce <Port_schm_read_msr>
   14d6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14d6e:	9b00      	ldr	r3, [sp, #0]
   14d70:	f003 0301 	and.w	r3, r3, #1
   14d74:	2b00      	cmp	r3, #0
   14d76:	d100      	bne.n	14d7a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14d78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   14d7a:	490a      	ldr	r1, [pc, #40]	; (14da4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
   14d7c:	9b01      	ldr	r3, [sp, #4]
   14d7e:	9a00      	ldr	r2, [sp, #0]
   14d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
   14d84:	4a06      	ldr	r2, [pc, #24]	; (14da0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   14d86:	9b01      	ldr	r3, [sp, #4]
   14d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d8c:	1c5a      	adds	r2, r3, #1
   14d8e:	4904      	ldr	r1, [pc, #16]	; (14da0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   14d90:	9b01      	ldr	r3, [sp, #4]
   14d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14d96:	bf00      	nop
   14d98:	b003      	add	sp, #12
   14d9a:	f85d fb04 	ldr.w	pc, [sp], #4
   14d9e:	bf00      	nop
   14da0:	1fff9750 	.word	0x1fff9750
   14da4:	1fff974c 	.word	0x1fff974c

00014da8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   14da8:	b500      	push	{lr}
   14daa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14dac:	f7eb ff94 	bl	cd8 <Sys_GetCoreID>
   14db0:	4603      	mov	r3, r0
   14db2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
   14db4:	4a0d      	ldr	r2, [pc, #52]	; (14dec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   14db6:	9b01      	ldr	r3, [sp, #4]
   14db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14dbc:	1e5a      	subs	r2, r3, #1
   14dbe:	490b      	ldr	r1, [pc, #44]	; (14dec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   14dc0:	9b01      	ldr	r3, [sp, #4]
   14dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   14dc6:	4a0a      	ldr	r2, [pc, #40]	; (14df0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
   14dc8:	9b01      	ldr	r3, [sp, #4]
   14dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14dce:	f003 0301 	and.w	r3, r3, #1
   14dd2:	2b00      	cmp	r3, #0
   14dd4:	d106      	bne.n	14de4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
   14dd6:	4a05      	ldr	r2, [pc, #20]	; (14dec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   14dd8:	9b01      	ldr	r3, [sp, #4]
   14dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14dde:	2b00      	cmp	r3, #0
   14de0:	d100      	bne.n	14de4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14de2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14de4:	bf00      	nop
   14de6:	b003      	add	sp, #12
   14de8:	f85d fb04 	ldr.w	pc, [sp], #4
   14dec:	1fff9750 	.word	0x1fff9750
   14df0:	1fff974c 	.word	0x1fff974c

00014df4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   14df4:	b500      	push	{lr}
   14df6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14df8:	f7eb ff6e 	bl	cd8 <Sys_GetCoreID>
   14dfc:	4603      	mov	r3, r0
   14dfe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
   14e00:	4a10      	ldr	r2, [pc, #64]	; (14e44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   14e02:	9b01      	ldr	r3, [sp, #4]
   14e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e08:	2b00      	cmp	r3, #0
   14e0a:	d10d      	bne.n	14e28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14e0c:	f7eb fddf 	bl	9ce <Port_schm_read_msr>
   14e10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14e12:	9b00      	ldr	r3, [sp, #0]
   14e14:	f003 0301 	and.w	r3, r3, #1
   14e18:	2b00      	cmp	r3, #0
   14e1a:	d100      	bne.n	14e1e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14e1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   14e1e:	490a      	ldr	r1, [pc, #40]	; (14e48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
   14e20:	9b01      	ldr	r3, [sp, #4]
   14e22:	9a00      	ldr	r2, [sp, #0]
   14e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
   14e28:	4a06      	ldr	r2, [pc, #24]	; (14e44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   14e2a:	9b01      	ldr	r3, [sp, #4]
   14e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e30:	1c5a      	adds	r2, r3, #1
   14e32:	4904      	ldr	r1, [pc, #16]	; (14e44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   14e34:	9b01      	ldr	r3, [sp, #4]
   14e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14e3a:	bf00      	nop
   14e3c:	b003      	add	sp, #12
   14e3e:	f85d fb04 	ldr.w	pc, [sp], #4
   14e42:	bf00      	nop
   14e44:	1fff9758 	.word	0x1fff9758
   14e48:	1fff9754 	.word	0x1fff9754

00014e4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   14e4c:	b500      	push	{lr}
   14e4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e50:	f7eb ff42 	bl	cd8 <Sys_GetCoreID>
   14e54:	4603      	mov	r3, r0
   14e56:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
   14e58:	4a0d      	ldr	r2, [pc, #52]	; (14e90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   14e5a:	9b01      	ldr	r3, [sp, #4]
   14e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e60:	1e5a      	subs	r2, r3, #1
   14e62:	490b      	ldr	r1, [pc, #44]	; (14e90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   14e64:	9b01      	ldr	r3, [sp, #4]
   14e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   14e6a:	4a0a      	ldr	r2, [pc, #40]	; (14e94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
   14e6c:	9b01      	ldr	r3, [sp, #4]
   14e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e72:	f003 0301 	and.w	r3, r3, #1
   14e76:	2b00      	cmp	r3, #0
   14e78:	d106      	bne.n	14e88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
   14e7a:	4a05      	ldr	r2, [pc, #20]	; (14e90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   14e7c:	9b01      	ldr	r3, [sp, #4]
   14e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e82:	2b00      	cmp	r3, #0
   14e84:	d100      	bne.n	14e88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14e86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14e88:	bf00      	nop
   14e8a:	b003      	add	sp, #12
   14e8c:	f85d fb04 	ldr.w	pc, [sp], #4
   14e90:	1fff9758 	.word	0x1fff9758
   14e94:	1fff9754 	.word	0x1fff9754

00014e98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   14e98:	b500      	push	{lr}
   14e9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e9c:	f7eb ff1c 	bl	cd8 <Sys_GetCoreID>
   14ea0:	4603      	mov	r3, r0
   14ea2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
   14ea4:	4a10      	ldr	r2, [pc, #64]	; (14ee8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   14ea6:	9b01      	ldr	r3, [sp, #4]
   14ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14eac:	2b00      	cmp	r3, #0
   14eae:	d10d      	bne.n	14ecc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14eb0:	f7eb fd8d 	bl	9ce <Port_schm_read_msr>
   14eb4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14eb6:	9b00      	ldr	r3, [sp, #0]
   14eb8:	f003 0301 	and.w	r3, r3, #1
   14ebc:	2b00      	cmp	r3, #0
   14ebe:	d100      	bne.n	14ec2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14ec0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   14ec2:	490a      	ldr	r1, [pc, #40]	; (14eec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
   14ec4:	9b01      	ldr	r3, [sp, #4]
   14ec6:	9a00      	ldr	r2, [sp, #0]
   14ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
   14ecc:	4a06      	ldr	r2, [pc, #24]	; (14ee8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   14ece:	9b01      	ldr	r3, [sp, #4]
   14ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ed4:	1c5a      	adds	r2, r3, #1
   14ed6:	4904      	ldr	r1, [pc, #16]	; (14ee8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   14ed8:	9b01      	ldr	r3, [sp, #4]
   14eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14ede:	bf00      	nop
   14ee0:	b003      	add	sp, #12
   14ee2:	f85d fb04 	ldr.w	pc, [sp], #4
   14ee6:	bf00      	nop
   14ee8:	1fff9760 	.word	0x1fff9760
   14eec:	1fff975c 	.word	0x1fff975c

00014ef0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   14ef0:	b500      	push	{lr}
   14ef2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ef4:	f7eb fef0 	bl	cd8 <Sys_GetCoreID>
   14ef8:	4603      	mov	r3, r0
   14efa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
   14efc:	4a0d      	ldr	r2, [pc, #52]	; (14f34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   14efe:	9b01      	ldr	r3, [sp, #4]
   14f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f04:	1e5a      	subs	r2, r3, #1
   14f06:	490b      	ldr	r1, [pc, #44]	; (14f34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   14f08:	9b01      	ldr	r3, [sp, #4]
   14f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   14f0e:	4a0a      	ldr	r2, [pc, #40]	; (14f38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
   14f10:	9b01      	ldr	r3, [sp, #4]
   14f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f16:	f003 0301 	and.w	r3, r3, #1
   14f1a:	2b00      	cmp	r3, #0
   14f1c:	d106      	bne.n	14f2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
   14f1e:	4a05      	ldr	r2, [pc, #20]	; (14f34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   14f20:	9b01      	ldr	r3, [sp, #4]
   14f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f26:	2b00      	cmp	r3, #0
   14f28:	d100      	bne.n	14f2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14f2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14f2c:	bf00      	nop
   14f2e:	b003      	add	sp, #12
   14f30:	f85d fb04 	ldr.w	pc, [sp], #4
   14f34:	1fff9760 	.word	0x1fff9760
   14f38:	1fff975c 	.word	0x1fff975c

00014f3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   14f3c:	b500      	push	{lr}
   14f3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14f40:	f7eb feca 	bl	cd8 <Sys_GetCoreID>
   14f44:	4603      	mov	r3, r0
   14f46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
   14f48:	4a10      	ldr	r2, [pc, #64]	; (14f8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   14f4a:	9b01      	ldr	r3, [sp, #4]
   14f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f50:	2b00      	cmp	r3, #0
   14f52:	d10d      	bne.n	14f70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14f54:	f7eb fd3b 	bl	9ce <Port_schm_read_msr>
   14f58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14f5a:	9b00      	ldr	r3, [sp, #0]
   14f5c:	f003 0301 	and.w	r3, r3, #1
   14f60:	2b00      	cmp	r3, #0
   14f62:	d100      	bne.n	14f66 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14f64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   14f66:	490a      	ldr	r1, [pc, #40]	; (14f90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
   14f68:	9b01      	ldr	r3, [sp, #4]
   14f6a:	9a00      	ldr	r2, [sp, #0]
   14f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
   14f70:	4a06      	ldr	r2, [pc, #24]	; (14f8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   14f72:	9b01      	ldr	r3, [sp, #4]
   14f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f78:	1c5a      	adds	r2, r3, #1
   14f7a:	4904      	ldr	r1, [pc, #16]	; (14f8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   14f7c:	9b01      	ldr	r3, [sp, #4]
   14f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14f82:	bf00      	nop
   14f84:	b003      	add	sp, #12
   14f86:	f85d fb04 	ldr.w	pc, [sp], #4
   14f8a:	bf00      	nop
   14f8c:	1fff9768 	.word	0x1fff9768
   14f90:	1fff9764 	.word	0x1fff9764

00014f94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   14f94:	b500      	push	{lr}
   14f96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14f98:	f7eb fe9e 	bl	cd8 <Sys_GetCoreID>
   14f9c:	4603      	mov	r3, r0
   14f9e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
   14fa0:	4a0d      	ldr	r2, [pc, #52]	; (14fd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   14fa2:	9b01      	ldr	r3, [sp, #4]
   14fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fa8:	1e5a      	subs	r2, r3, #1
   14faa:	490b      	ldr	r1, [pc, #44]	; (14fd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   14fac:	9b01      	ldr	r3, [sp, #4]
   14fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   14fb2:	4a0a      	ldr	r2, [pc, #40]	; (14fdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
   14fb4:	9b01      	ldr	r3, [sp, #4]
   14fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fba:	f003 0301 	and.w	r3, r3, #1
   14fbe:	2b00      	cmp	r3, #0
   14fc0:	d106      	bne.n	14fd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
   14fc2:	4a05      	ldr	r2, [pc, #20]	; (14fd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   14fc4:	9b01      	ldr	r3, [sp, #4]
   14fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fca:	2b00      	cmp	r3, #0
   14fcc:	d100      	bne.n	14fd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14fce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14fd0:	bf00      	nop
   14fd2:	b003      	add	sp, #12
   14fd4:	f85d fb04 	ldr.w	pc, [sp], #4
   14fd8:	1fff9768 	.word	0x1fff9768
   14fdc:	1fff9764 	.word	0x1fff9764

00014fe0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   14fe0:	b500      	push	{lr}
   14fe2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14fe4:	f7eb fe78 	bl	cd8 <Sys_GetCoreID>
   14fe8:	4603      	mov	r3, r0
   14fea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
   14fec:	4a10      	ldr	r2, [pc, #64]	; (15030 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   14fee:	9b01      	ldr	r3, [sp, #4]
   14ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ff4:	2b00      	cmp	r3, #0
   14ff6:	d10d      	bne.n	15014 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14ff8:	f7eb fce9 	bl	9ce <Port_schm_read_msr>
   14ffc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14ffe:	9b00      	ldr	r3, [sp, #0]
   15000:	f003 0301 	and.w	r3, r3, #1
   15004:	2b00      	cmp	r3, #0
   15006:	d100      	bne.n	1500a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15008:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   1500a:	490a      	ldr	r1, [pc, #40]	; (15034 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
   1500c:	9b01      	ldr	r3, [sp, #4]
   1500e:	9a00      	ldr	r2, [sp, #0]
   15010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
   15014:	4a06      	ldr	r2, [pc, #24]	; (15030 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   15016:	9b01      	ldr	r3, [sp, #4]
   15018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1501c:	1c5a      	adds	r2, r3, #1
   1501e:	4904      	ldr	r1, [pc, #16]	; (15030 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   15020:	9b01      	ldr	r3, [sp, #4]
   15022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15026:	bf00      	nop
   15028:	b003      	add	sp, #12
   1502a:	f85d fb04 	ldr.w	pc, [sp], #4
   1502e:	bf00      	nop
   15030:	1fff9770 	.word	0x1fff9770
   15034:	1fff976c 	.word	0x1fff976c

00015038 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   15038:	b500      	push	{lr}
   1503a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1503c:	f7eb fe4c 	bl	cd8 <Sys_GetCoreID>
   15040:	4603      	mov	r3, r0
   15042:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
   15044:	4a0d      	ldr	r2, [pc, #52]	; (1507c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   15046:	9b01      	ldr	r3, [sp, #4]
   15048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1504c:	1e5a      	subs	r2, r3, #1
   1504e:	490b      	ldr	r1, [pc, #44]	; (1507c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   15050:	9b01      	ldr	r3, [sp, #4]
   15052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   15056:	4a0a      	ldr	r2, [pc, #40]	; (15080 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
   15058:	9b01      	ldr	r3, [sp, #4]
   1505a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1505e:	f003 0301 	and.w	r3, r3, #1
   15062:	2b00      	cmp	r3, #0
   15064:	d106      	bne.n	15074 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
   15066:	4a05      	ldr	r2, [pc, #20]	; (1507c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   15068:	9b01      	ldr	r3, [sp, #4]
   1506a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1506e:	2b00      	cmp	r3, #0
   15070:	d100      	bne.n	15074 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15072:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15074:	bf00      	nop
   15076:	b003      	add	sp, #12
   15078:	f85d fb04 	ldr.w	pc, [sp], #4
   1507c:	1fff9770 	.word	0x1fff9770
   15080:	1fff976c 	.word	0x1fff976c

00015084 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   15084:	b500      	push	{lr}
   15086:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15088:	f7eb fe26 	bl	cd8 <Sys_GetCoreID>
   1508c:	4603      	mov	r3, r0
   1508e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
   15090:	4a10      	ldr	r2, [pc, #64]	; (150d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   15092:	9b01      	ldr	r3, [sp, #4]
   15094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15098:	2b00      	cmp	r3, #0
   1509a:	d10d      	bne.n	150b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1509c:	f7eb fc97 	bl	9ce <Port_schm_read_msr>
   150a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   150a2:	9b00      	ldr	r3, [sp, #0]
   150a4:	f003 0301 	and.w	r3, r3, #1
   150a8:	2b00      	cmp	r3, #0
   150aa:	d100      	bne.n	150ae <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   150ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   150ae:	490a      	ldr	r1, [pc, #40]	; (150d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
   150b0:	9b01      	ldr	r3, [sp, #4]
   150b2:	9a00      	ldr	r2, [sp, #0]
   150b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
   150b8:	4a06      	ldr	r2, [pc, #24]	; (150d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   150ba:	9b01      	ldr	r3, [sp, #4]
   150bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150c0:	1c5a      	adds	r2, r3, #1
   150c2:	4904      	ldr	r1, [pc, #16]	; (150d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   150c4:	9b01      	ldr	r3, [sp, #4]
   150c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   150ca:	bf00      	nop
   150cc:	b003      	add	sp, #12
   150ce:	f85d fb04 	ldr.w	pc, [sp], #4
   150d2:	bf00      	nop
   150d4:	1fff9778 	.word	0x1fff9778
   150d8:	1fff9774 	.word	0x1fff9774

000150dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   150dc:	b500      	push	{lr}
   150de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   150e0:	f7eb fdfa 	bl	cd8 <Sys_GetCoreID>
   150e4:	4603      	mov	r3, r0
   150e6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
   150e8:	4a0d      	ldr	r2, [pc, #52]	; (15120 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   150ea:	9b01      	ldr	r3, [sp, #4]
   150ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150f0:	1e5a      	subs	r2, r3, #1
   150f2:	490b      	ldr	r1, [pc, #44]	; (15120 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   150f4:	9b01      	ldr	r3, [sp, #4]
   150f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   150fa:	4a0a      	ldr	r2, [pc, #40]	; (15124 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
   150fc:	9b01      	ldr	r3, [sp, #4]
   150fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15102:	f003 0301 	and.w	r3, r3, #1
   15106:	2b00      	cmp	r3, #0
   15108:	d106      	bne.n	15118 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
   1510a:	4a05      	ldr	r2, [pc, #20]	; (15120 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   1510c:	9b01      	ldr	r3, [sp, #4]
   1510e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15112:	2b00      	cmp	r3, #0
   15114:	d100      	bne.n	15118 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15116:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15118:	bf00      	nop
   1511a:	b003      	add	sp, #12
   1511c:	f85d fb04 	ldr.w	pc, [sp], #4
   15120:	1fff9778 	.word	0x1fff9778
   15124:	1fff9774 	.word	0x1fff9774

00015128 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   15128:	b500      	push	{lr}
   1512a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1512c:	f7eb fdd4 	bl	cd8 <Sys_GetCoreID>
   15130:	4603      	mov	r3, r0
   15132:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
   15134:	4a10      	ldr	r2, [pc, #64]	; (15178 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   15136:	9b01      	ldr	r3, [sp, #4]
   15138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1513c:	2b00      	cmp	r3, #0
   1513e:	d10d      	bne.n	1515c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15140:	f7eb fc45 	bl	9ce <Port_schm_read_msr>
   15144:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15146:	9b00      	ldr	r3, [sp, #0]
   15148:	f003 0301 	and.w	r3, r3, #1
   1514c:	2b00      	cmp	r3, #0
   1514e:	d100      	bne.n	15152 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15150:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   15152:	490a      	ldr	r1, [pc, #40]	; (1517c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
   15154:	9b01      	ldr	r3, [sp, #4]
   15156:	9a00      	ldr	r2, [sp, #0]
   15158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
   1515c:	4a06      	ldr	r2, [pc, #24]	; (15178 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   1515e:	9b01      	ldr	r3, [sp, #4]
   15160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15164:	1c5a      	adds	r2, r3, #1
   15166:	4904      	ldr	r1, [pc, #16]	; (15178 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   15168:	9b01      	ldr	r3, [sp, #4]
   1516a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1516e:	bf00      	nop
   15170:	b003      	add	sp, #12
   15172:	f85d fb04 	ldr.w	pc, [sp], #4
   15176:	bf00      	nop
   15178:	1fff9780 	.word	0x1fff9780
   1517c:	1fff977c 	.word	0x1fff977c

00015180 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   15180:	b500      	push	{lr}
   15182:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15184:	f7eb fda8 	bl	cd8 <Sys_GetCoreID>
   15188:	4603      	mov	r3, r0
   1518a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
   1518c:	4a0d      	ldr	r2, [pc, #52]	; (151c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   1518e:	9b01      	ldr	r3, [sp, #4]
   15190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15194:	1e5a      	subs	r2, r3, #1
   15196:	490b      	ldr	r1, [pc, #44]	; (151c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   15198:	9b01      	ldr	r3, [sp, #4]
   1519a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   1519e:	4a0a      	ldr	r2, [pc, #40]	; (151c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
   151a0:	9b01      	ldr	r3, [sp, #4]
   151a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151a6:	f003 0301 	and.w	r3, r3, #1
   151aa:	2b00      	cmp	r3, #0
   151ac:	d106      	bne.n	151bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
   151ae:	4a05      	ldr	r2, [pc, #20]	; (151c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   151b0:	9b01      	ldr	r3, [sp, #4]
   151b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151b6:	2b00      	cmp	r3, #0
   151b8:	d100      	bne.n	151bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   151ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   151bc:	bf00      	nop
   151be:	b003      	add	sp, #12
   151c0:	f85d fb04 	ldr.w	pc, [sp], #4
   151c4:	1fff9780 	.word	0x1fff9780
   151c8:	1fff977c 	.word	0x1fff977c

000151cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   151cc:	b500      	push	{lr}
   151ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   151d0:	f7eb fd82 	bl	cd8 <Sys_GetCoreID>
   151d4:	4603      	mov	r3, r0
   151d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
   151d8:	4a10      	ldr	r2, [pc, #64]	; (1521c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   151da:	9b01      	ldr	r3, [sp, #4]
   151dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151e0:	2b00      	cmp	r3, #0
   151e2:	d10d      	bne.n	15200 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   151e4:	f7eb fbf3 	bl	9ce <Port_schm_read_msr>
   151e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   151ea:	9b00      	ldr	r3, [sp, #0]
   151ec:	f003 0301 	and.w	r3, r3, #1
   151f0:	2b00      	cmp	r3, #0
   151f2:	d100      	bne.n	151f6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   151f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   151f6:	490a      	ldr	r1, [pc, #40]	; (15220 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
   151f8:	9b01      	ldr	r3, [sp, #4]
   151fa:	9a00      	ldr	r2, [sp, #0]
   151fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
   15200:	4a06      	ldr	r2, [pc, #24]	; (1521c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   15202:	9b01      	ldr	r3, [sp, #4]
   15204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15208:	1c5a      	adds	r2, r3, #1
   1520a:	4904      	ldr	r1, [pc, #16]	; (1521c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   1520c:	9b01      	ldr	r3, [sp, #4]
   1520e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15212:	bf00      	nop
   15214:	b003      	add	sp, #12
   15216:	f85d fb04 	ldr.w	pc, [sp], #4
   1521a:	bf00      	nop
   1521c:	1fff9788 	.word	0x1fff9788
   15220:	1fff9784 	.word	0x1fff9784

00015224 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   15224:	b500      	push	{lr}
   15226:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15228:	f7eb fd56 	bl	cd8 <Sys_GetCoreID>
   1522c:	4603      	mov	r3, r0
   1522e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
   15230:	4a0d      	ldr	r2, [pc, #52]	; (15268 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   15232:	9b01      	ldr	r3, [sp, #4]
   15234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15238:	1e5a      	subs	r2, r3, #1
   1523a:	490b      	ldr	r1, [pc, #44]	; (15268 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   1523c:	9b01      	ldr	r3, [sp, #4]
   1523e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   15242:	4a0a      	ldr	r2, [pc, #40]	; (1526c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
   15244:	9b01      	ldr	r3, [sp, #4]
   15246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1524a:	f003 0301 	and.w	r3, r3, #1
   1524e:	2b00      	cmp	r3, #0
   15250:	d106      	bne.n	15260 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
   15252:	4a05      	ldr	r2, [pc, #20]	; (15268 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   15254:	9b01      	ldr	r3, [sp, #4]
   15256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1525a:	2b00      	cmp	r3, #0
   1525c:	d100      	bne.n	15260 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1525e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15260:	bf00      	nop
   15262:	b003      	add	sp, #12
   15264:	f85d fb04 	ldr.w	pc, [sp], #4
   15268:	1fff9788 	.word	0x1fff9788
   1526c:	1fff9784 	.word	0x1fff9784

00015270 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   15270:	b500      	push	{lr}
   15272:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15274:	f7eb fd30 	bl	cd8 <Sys_GetCoreID>
   15278:	4603      	mov	r3, r0
   1527a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
   1527c:	4a10      	ldr	r2, [pc, #64]	; (152c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   1527e:	9b01      	ldr	r3, [sp, #4]
   15280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15284:	2b00      	cmp	r3, #0
   15286:	d10d      	bne.n	152a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15288:	f7eb fba1 	bl	9ce <Port_schm_read_msr>
   1528c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1528e:	9b00      	ldr	r3, [sp, #0]
   15290:	f003 0301 	and.w	r3, r3, #1
   15294:	2b00      	cmp	r3, #0
   15296:	d100      	bne.n	1529a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15298:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   1529a:	490a      	ldr	r1, [pc, #40]	; (152c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
   1529c:	9b01      	ldr	r3, [sp, #4]
   1529e:	9a00      	ldr	r2, [sp, #0]
   152a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
   152a4:	4a06      	ldr	r2, [pc, #24]	; (152c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   152a6:	9b01      	ldr	r3, [sp, #4]
   152a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152ac:	1c5a      	adds	r2, r3, #1
   152ae:	4904      	ldr	r1, [pc, #16]	; (152c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   152b0:	9b01      	ldr	r3, [sp, #4]
   152b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   152b6:	bf00      	nop
   152b8:	b003      	add	sp, #12
   152ba:	f85d fb04 	ldr.w	pc, [sp], #4
   152be:	bf00      	nop
   152c0:	1fff9790 	.word	0x1fff9790
   152c4:	1fff978c 	.word	0x1fff978c

000152c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   152c8:	b500      	push	{lr}
   152ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   152cc:	f7eb fd04 	bl	cd8 <Sys_GetCoreID>
   152d0:	4603      	mov	r3, r0
   152d2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
   152d4:	4a0d      	ldr	r2, [pc, #52]	; (1530c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   152d6:	9b01      	ldr	r3, [sp, #4]
   152d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152dc:	1e5a      	subs	r2, r3, #1
   152de:	490b      	ldr	r1, [pc, #44]	; (1530c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   152e0:	9b01      	ldr	r3, [sp, #4]
   152e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   152e6:	4a0a      	ldr	r2, [pc, #40]	; (15310 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
   152e8:	9b01      	ldr	r3, [sp, #4]
   152ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152ee:	f003 0301 	and.w	r3, r3, #1
   152f2:	2b00      	cmp	r3, #0
   152f4:	d106      	bne.n	15304 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
   152f6:	4a05      	ldr	r2, [pc, #20]	; (1530c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   152f8:	9b01      	ldr	r3, [sp, #4]
   152fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152fe:	2b00      	cmp	r3, #0
   15300:	d100      	bne.n	15304 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15302:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15304:	bf00      	nop
   15306:	b003      	add	sp, #12
   15308:	f85d fb04 	ldr.w	pc, [sp], #4
   1530c:	1fff9790 	.word	0x1fff9790
   15310:	1fff978c 	.word	0x1fff978c

00015314 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   15314:	b500      	push	{lr}
   15316:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15318:	f7eb fcde 	bl	cd8 <Sys_GetCoreID>
   1531c:	4603      	mov	r3, r0
   1531e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
   15320:	4a10      	ldr	r2, [pc, #64]	; (15364 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   15322:	9b01      	ldr	r3, [sp, #4]
   15324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15328:	2b00      	cmp	r3, #0
   1532a:	d10d      	bne.n	15348 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1532c:	f7eb fb4f 	bl	9ce <Port_schm_read_msr>
   15330:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15332:	9b00      	ldr	r3, [sp, #0]
   15334:	f003 0301 	and.w	r3, r3, #1
   15338:	2b00      	cmp	r3, #0
   1533a:	d100      	bne.n	1533e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1533c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   1533e:	490a      	ldr	r1, [pc, #40]	; (15368 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
   15340:	9b01      	ldr	r3, [sp, #4]
   15342:	9a00      	ldr	r2, [sp, #0]
   15344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
   15348:	4a06      	ldr	r2, [pc, #24]	; (15364 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   1534a:	9b01      	ldr	r3, [sp, #4]
   1534c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15350:	1c5a      	adds	r2, r3, #1
   15352:	4904      	ldr	r1, [pc, #16]	; (15364 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   15354:	9b01      	ldr	r3, [sp, #4]
   15356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1535a:	bf00      	nop
   1535c:	b003      	add	sp, #12
   1535e:	f85d fb04 	ldr.w	pc, [sp], #4
   15362:	bf00      	nop
   15364:	1fff9798 	.word	0x1fff9798
   15368:	1fff9794 	.word	0x1fff9794

0001536c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   1536c:	b500      	push	{lr}
   1536e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15370:	f7eb fcb2 	bl	cd8 <Sys_GetCoreID>
   15374:	4603      	mov	r3, r0
   15376:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
   15378:	4a0d      	ldr	r2, [pc, #52]	; (153b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   1537a:	9b01      	ldr	r3, [sp, #4]
   1537c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15380:	1e5a      	subs	r2, r3, #1
   15382:	490b      	ldr	r1, [pc, #44]	; (153b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   15384:	9b01      	ldr	r3, [sp, #4]
   15386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   1538a:	4a0a      	ldr	r2, [pc, #40]	; (153b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
   1538c:	9b01      	ldr	r3, [sp, #4]
   1538e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15392:	f003 0301 	and.w	r3, r3, #1
   15396:	2b00      	cmp	r3, #0
   15398:	d106      	bne.n	153a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
   1539a:	4a05      	ldr	r2, [pc, #20]	; (153b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   1539c:	9b01      	ldr	r3, [sp, #4]
   1539e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153a2:	2b00      	cmp	r3, #0
   153a4:	d100      	bne.n	153a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   153a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   153a8:	bf00      	nop
   153aa:	b003      	add	sp, #12
   153ac:	f85d fb04 	ldr.w	pc, [sp], #4
   153b0:	1fff9798 	.word	0x1fff9798
   153b4:	1fff9794 	.word	0x1fff9794

000153b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   153b8:	b500      	push	{lr}
   153ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   153bc:	f7eb fc8c 	bl	cd8 <Sys_GetCoreID>
   153c0:	4603      	mov	r3, r0
   153c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
   153c4:	4a10      	ldr	r2, [pc, #64]	; (15408 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   153c6:	9b01      	ldr	r3, [sp, #4]
   153c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153cc:	2b00      	cmp	r3, #0
   153ce:	d10d      	bne.n	153ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   153d0:	f7eb fafd 	bl	9ce <Port_schm_read_msr>
   153d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   153d6:	9b00      	ldr	r3, [sp, #0]
   153d8:	f003 0301 	and.w	r3, r3, #1
   153dc:	2b00      	cmp	r3, #0
   153de:	d100      	bne.n	153e2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   153e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   153e2:	490a      	ldr	r1, [pc, #40]	; (1540c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
   153e4:	9b01      	ldr	r3, [sp, #4]
   153e6:	9a00      	ldr	r2, [sp, #0]
   153e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
   153ec:	4a06      	ldr	r2, [pc, #24]	; (15408 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   153ee:	9b01      	ldr	r3, [sp, #4]
   153f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153f4:	1c5a      	adds	r2, r3, #1
   153f6:	4904      	ldr	r1, [pc, #16]	; (15408 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   153f8:	9b01      	ldr	r3, [sp, #4]
   153fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   153fe:	bf00      	nop
   15400:	b003      	add	sp, #12
   15402:	f85d fb04 	ldr.w	pc, [sp], #4
   15406:	bf00      	nop
   15408:	1fff97a0 	.word	0x1fff97a0
   1540c:	1fff979c 	.word	0x1fff979c

00015410 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   15410:	b500      	push	{lr}
   15412:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15414:	f7eb fc60 	bl	cd8 <Sys_GetCoreID>
   15418:	4603      	mov	r3, r0
   1541a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
   1541c:	4a0d      	ldr	r2, [pc, #52]	; (15454 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   1541e:	9b01      	ldr	r3, [sp, #4]
   15420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15424:	1e5a      	subs	r2, r3, #1
   15426:	490b      	ldr	r1, [pc, #44]	; (15454 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   15428:	9b01      	ldr	r3, [sp, #4]
   1542a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   1542e:	4a0a      	ldr	r2, [pc, #40]	; (15458 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
   15430:	9b01      	ldr	r3, [sp, #4]
   15432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15436:	f003 0301 	and.w	r3, r3, #1
   1543a:	2b00      	cmp	r3, #0
   1543c:	d106      	bne.n	1544c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
   1543e:	4a05      	ldr	r2, [pc, #20]	; (15454 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   15440:	9b01      	ldr	r3, [sp, #4]
   15442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15446:	2b00      	cmp	r3, #0
   15448:	d100      	bne.n	1544c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1544a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1544c:	bf00      	nop
   1544e:	b003      	add	sp, #12
   15450:	f85d fb04 	ldr.w	pc, [sp], #4
   15454:	1fff97a0 	.word	0x1fff97a0
   15458:	1fff979c 	.word	0x1fff979c

0001545c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   1545c:	b500      	push	{lr}
   1545e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15460:	f7eb fc3a 	bl	cd8 <Sys_GetCoreID>
   15464:	4603      	mov	r3, r0
   15466:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
   15468:	4a10      	ldr	r2, [pc, #64]	; (154ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   1546a:	9b01      	ldr	r3, [sp, #4]
   1546c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15470:	2b00      	cmp	r3, #0
   15472:	d10d      	bne.n	15490 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15474:	f7eb faab 	bl	9ce <Port_schm_read_msr>
   15478:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1547a:	9b00      	ldr	r3, [sp, #0]
   1547c:	f003 0301 	and.w	r3, r3, #1
   15480:	2b00      	cmp	r3, #0
   15482:	d100      	bne.n	15486 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15484:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   15486:	490a      	ldr	r1, [pc, #40]	; (154b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
   15488:	9b01      	ldr	r3, [sp, #4]
   1548a:	9a00      	ldr	r2, [sp, #0]
   1548c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
   15490:	4a06      	ldr	r2, [pc, #24]	; (154ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   15492:	9b01      	ldr	r3, [sp, #4]
   15494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15498:	1c5a      	adds	r2, r3, #1
   1549a:	4904      	ldr	r1, [pc, #16]	; (154ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   1549c:	9b01      	ldr	r3, [sp, #4]
   1549e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   154a2:	bf00      	nop
   154a4:	b003      	add	sp, #12
   154a6:	f85d fb04 	ldr.w	pc, [sp], #4
   154aa:	bf00      	nop
   154ac:	1fff97a8 	.word	0x1fff97a8
   154b0:	1fff97a4 	.word	0x1fff97a4

000154b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   154b4:	b500      	push	{lr}
   154b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   154b8:	f7eb fc0e 	bl	cd8 <Sys_GetCoreID>
   154bc:	4603      	mov	r3, r0
   154be:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
   154c0:	4a0d      	ldr	r2, [pc, #52]	; (154f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   154c2:	9b01      	ldr	r3, [sp, #4]
   154c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154c8:	1e5a      	subs	r2, r3, #1
   154ca:	490b      	ldr	r1, [pc, #44]	; (154f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   154cc:	9b01      	ldr	r3, [sp, #4]
   154ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   154d2:	4a0a      	ldr	r2, [pc, #40]	; (154fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
   154d4:	9b01      	ldr	r3, [sp, #4]
   154d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154da:	f003 0301 	and.w	r3, r3, #1
   154de:	2b00      	cmp	r3, #0
   154e0:	d106      	bne.n	154f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
   154e2:	4a05      	ldr	r2, [pc, #20]	; (154f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   154e4:	9b01      	ldr	r3, [sp, #4]
   154e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154ea:	2b00      	cmp	r3, #0
   154ec:	d100      	bne.n	154f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   154ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   154f0:	bf00      	nop
   154f2:	b003      	add	sp, #12
   154f4:	f85d fb04 	ldr.w	pc, [sp], #4
   154f8:	1fff97a8 	.word	0x1fff97a8
   154fc:	1fff97a4 	.word	0x1fff97a4

00015500 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   15500:	b500      	push	{lr}
   15502:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15504:	f7eb fbe8 	bl	cd8 <Sys_GetCoreID>
   15508:	4603      	mov	r3, r0
   1550a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
   1550c:	4a10      	ldr	r2, [pc, #64]	; (15550 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   1550e:	9b01      	ldr	r3, [sp, #4]
   15510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15514:	2b00      	cmp	r3, #0
   15516:	d10d      	bne.n	15534 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15518:	f7eb fa59 	bl	9ce <Port_schm_read_msr>
   1551c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1551e:	9b00      	ldr	r3, [sp, #0]
   15520:	f003 0301 	and.w	r3, r3, #1
   15524:	2b00      	cmp	r3, #0
   15526:	d100      	bne.n	1552a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15528:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   1552a:	490a      	ldr	r1, [pc, #40]	; (15554 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
   1552c:	9b01      	ldr	r3, [sp, #4]
   1552e:	9a00      	ldr	r2, [sp, #0]
   15530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
   15534:	4a06      	ldr	r2, [pc, #24]	; (15550 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   15536:	9b01      	ldr	r3, [sp, #4]
   15538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1553c:	1c5a      	adds	r2, r3, #1
   1553e:	4904      	ldr	r1, [pc, #16]	; (15550 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   15540:	9b01      	ldr	r3, [sp, #4]
   15542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15546:	bf00      	nop
   15548:	b003      	add	sp, #12
   1554a:	f85d fb04 	ldr.w	pc, [sp], #4
   1554e:	bf00      	nop
   15550:	1fff97b0 	.word	0x1fff97b0
   15554:	1fff97ac 	.word	0x1fff97ac

00015558 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   15558:	b500      	push	{lr}
   1555a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1555c:	f7eb fbbc 	bl	cd8 <Sys_GetCoreID>
   15560:	4603      	mov	r3, r0
   15562:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
   15564:	4a0d      	ldr	r2, [pc, #52]	; (1559c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   15566:	9b01      	ldr	r3, [sp, #4]
   15568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1556c:	1e5a      	subs	r2, r3, #1
   1556e:	490b      	ldr	r1, [pc, #44]	; (1559c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   15570:	9b01      	ldr	r3, [sp, #4]
   15572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   15576:	4a0a      	ldr	r2, [pc, #40]	; (155a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
   15578:	9b01      	ldr	r3, [sp, #4]
   1557a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1557e:	f003 0301 	and.w	r3, r3, #1
   15582:	2b00      	cmp	r3, #0
   15584:	d106      	bne.n	15594 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
   15586:	4a05      	ldr	r2, [pc, #20]	; (1559c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   15588:	9b01      	ldr	r3, [sp, #4]
   1558a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1558e:	2b00      	cmp	r3, #0
   15590:	d100      	bne.n	15594 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15592:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15594:	bf00      	nop
   15596:	b003      	add	sp, #12
   15598:	f85d fb04 	ldr.w	pc, [sp], #4
   1559c:	1fff97b0 	.word	0x1fff97b0
   155a0:	1fff97ac 	.word	0x1fff97ac

000155a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   155a4:	b500      	push	{lr}
   155a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   155a8:	f7eb fb96 	bl	cd8 <Sys_GetCoreID>
   155ac:	4603      	mov	r3, r0
   155ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
   155b0:	4a10      	ldr	r2, [pc, #64]	; (155f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   155b2:	9b01      	ldr	r3, [sp, #4]
   155b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155b8:	2b00      	cmp	r3, #0
   155ba:	d10d      	bne.n	155d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   155bc:	f7eb fa07 	bl	9ce <Port_schm_read_msr>
   155c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   155c2:	9b00      	ldr	r3, [sp, #0]
   155c4:	f003 0301 	and.w	r3, r3, #1
   155c8:	2b00      	cmp	r3, #0
   155ca:	d100      	bne.n	155ce <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   155cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   155ce:	490a      	ldr	r1, [pc, #40]	; (155f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
   155d0:	9b01      	ldr	r3, [sp, #4]
   155d2:	9a00      	ldr	r2, [sp, #0]
   155d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
   155d8:	4a06      	ldr	r2, [pc, #24]	; (155f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   155da:	9b01      	ldr	r3, [sp, #4]
   155dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155e0:	1c5a      	adds	r2, r3, #1
   155e2:	4904      	ldr	r1, [pc, #16]	; (155f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   155e4:	9b01      	ldr	r3, [sp, #4]
   155e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   155ea:	bf00      	nop
   155ec:	b003      	add	sp, #12
   155ee:	f85d fb04 	ldr.w	pc, [sp], #4
   155f2:	bf00      	nop
   155f4:	1fff97b8 	.word	0x1fff97b8
   155f8:	1fff97b4 	.word	0x1fff97b4

000155fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   155fc:	b500      	push	{lr}
   155fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15600:	f7eb fb6a 	bl	cd8 <Sys_GetCoreID>
   15604:	4603      	mov	r3, r0
   15606:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
   15608:	4a0d      	ldr	r2, [pc, #52]	; (15640 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   1560a:	9b01      	ldr	r3, [sp, #4]
   1560c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15610:	1e5a      	subs	r2, r3, #1
   15612:	490b      	ldr	r1, [pc, #44]	; (15640 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   15614:	9b01      	ldr	r3, [sp, #4]
   15616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   1561a:	4a0a      	ldr	r2, [pc, #40]	; (15644 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
   1561c:	9b01      	ldr	r3, [sp, #4]
   1561e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15622:	f003 0301 	and.w	r3, r3, #1
   15626:	2b00      	cmp	r3, #0
   15628:	d106      	bne.n	15638 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
   1562a:	4a05      	ldr	r2, [pc, #20]	; (15640 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   1562c:	9b01      	ldr	r3, [sp, #4]
   1562e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15632:	2b00      	cmp	r3, #0
   15634:	d100      	bne.n	15638 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15636:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15638:	bf00      	nop
   1563a:	b003      	add	sp, #12
   1563c:	f85d fb04 	ldr.w	pc, [sp], #4
   15640:	1fff97b8 	.word	0x1fff97b8
   15644:	1fff97b4 	.word	0x1fff97b4

00015648 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   15648:	b500      	push	{lr}
   1564a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1564c:	f7eb fb44 	bl	cd8 <Sys_GetCoreID>
   15650:	4603      	mov	r3, r0
   15652:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
   15654:	4a10      	ldr	r2, [pc, #64]	; (15698 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   15656:	9b01      	ldr	r3, [sp, #4]
   15658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1565c:	2b00      	cmp	r3, #0
   1565e:	d10d      	bne.n	1567c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15660:	f7eb f9b5 	bl	9ce <Port_schm_read_msr>
   15664:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15666:	9b00      	ldr	r3, [sp, #0]
   15668:	f003 0301 	and.w	r3, r3, #1
   1566c:	2b00      	cmp	r3, #0
   1566e:	d100      	bne.n	15672 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15670:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   15672:	490a      	ldr	r1, [pc, #40]	; (1569c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
   15674:	9b01      	ldr	r3, [sp, #4]
   15676:	9a00      	ldr	r2, [sp, #0]
   15678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
   1567c:	4a06      	ldr	r2, [pc, #24]	; (15698 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   1567e:	9b01      	ldr	r3, [sp, #4]
   15680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15684:	1c5a      	adds	r2, r3, #1
   15686:	4904      	ldr	r1, [pc, #16]	; (15698 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   15688:	9b01      	ldr	r3, [sp, #4]
   1568a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1568e:	bf00      	nop
   15690:	b003      	add	sp, #12
   15692:	f85d fb04 	ldr.w	pc, [sp], #4
   15696:	bf00      	nop
   15698:	1fff97c0 	.word	0x1fff97c0
   1569c:	1fff97bc 	.word	0x1fff97bc

000156a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   156a0:	b500      	push	{lr}
   156a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   156a4:	f7eb fb18 	bl	cd8 <Sys_GetCoreID>
   156a8:	4603      	mov	r3, r0
   156aa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
   156ac:	4a0d      	ldr	r2, [pc, #52]	; (156e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   156ae:	9b01      	ldr	r3, [sp, #4]
   156b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156b4:	1e5a      	subs	r2, r3, #1
   156b6:	490b      	ldr	r1, [pc, #44]	; (156e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   156b8:	9b01      	ldr	r3, [sp, #4]
   156ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   156be:	4a0a      	ldr	r2, [pc, #40]	; (156e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
   156c0:	9b01      	ldr	r3, [sp, #4]
   156c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156c6:	f003 0301 	and.w	r3, r3, #1
   156ca:	2b00      	cmp	r3, #0
   156cc:	d106      	bne.n	156dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
   156ce:	4a05      	ldr	r2, [pc, #20]	; (156e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   156d0:	9b01      	ldr	r3, [sp, #4]
   156d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156d6:	2b00      	cmp	r3, #0
   156d8:	d100      	bne.n	156dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   156da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   156dc:	bf00      	nop
   156de:	b003      	add	sp, #12
   156e0:	f85d fb04 	ldr.w	pc, [sp], #4
   156e4:	1fff97c0 	.word	0x1fff97c0
   156e8:	1fff97bc 	.word	0x1fff97bc

000156ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   156ec:	b500      	push	{lr}
   156ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   156f0:	f7eb faf2 	bl	cd8 <Sys_GetCoreID>
   156f4:	4603      	mov	r3, r0
   156f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
   156f8:	4a10      	ldr	r2, [pc, #64]	; (1573c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   156fa:	9b01      	ldr	r3, [sp, #4]
   156fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15700:	2b00      	cmp	r3, #0
   15702:	d10d      	bne.n	15720 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15704:	f7eb f963 	bl	9ce <Port_schm_read_msr>
   15708:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1570a:	9b00      	ldr	r3, [sp, #0]
   1570c:	f003 0301 	and.w	r3, r3, #1
   15710:	2b00      	cmp	r3, #0
   15712:	d100      	bne.n	15716 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15714:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   15716:	490a      	ldr	r1, [pc, #40]	; (15740 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
   15718:	9b01      	ldr	r3, [sp, #4]
   1571a:	9a00      	ldr	r2, [sp, #0]
   1571c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
   15720:	4a06      	ldr	r2, [pc, #24]	; (1573c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   15722:	9b01      	ldr	r3, [sp, #4]
   15724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15728:	1c5a      	adds	r2, r3, #1
   1572a:	4904      	ldr	r1, [pc, #16]	; (1573c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   1572c:	9b01      	ldr	r3, [sp, #4]
   1572e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15732:	bf00      	nop
   15734:	b003      	add	sp, #12
   15736:	f85d fb04 	ldr.w	pc, [sp], #4
   1573a:	bf00      	nop
   1573c:	1fff97c8 	.word	0x1fff97c8
   15740:	1fff97c4 	.word	0x1fff97c4

00015744 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   15744:	b500      	push	{lr}
   15746:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15748:	f7eb fac6 	bl	cd8 <Sys_GetCoreID>
   1574c:	4603      	mov	r3, r0
   1574e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
   15750:	4a0d      	ldr	r2, [pc, #52]	; (15788 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   15752:	9b01      	ldr	r3, [sp, #4]
   15754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15758:	1e5a      	subs	r2, r3, #1
   1575a:	490b      	ldr	r1, [pc, #44]	; (15788 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   1575c:	9b01      	ldr	r3, [sp, #4]
   1575e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   15762:	4a0a      	ldr	r2, [pc, #40]	; (1578c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
   15764:	9b01      	ldr	r3, [sp, #4]
   15766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1576a:	f003 0301 	and.w	r3, r3, #1
   1576e:	2b00      	cmp	r3, #0
   15770:	d106      	bne.n	15780 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
   15772:	4a05      	ldr	r2, [pc, #20]	; (15788 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   15774:	9b01      	ldr	r3, [sp, #4]
   15776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1577a:	2b00      	cmp	r3, #0
   1577c:	d100      	bne.n	15780 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1577e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15780:	bf00      	nop
   15782:	b003      	add	sp, #12
   15784:	f85d fb04 	ldr.w	pc, [sp], #4
   15788:	1fff97c8 	.word	0x1fff97c8
   1578c:	1fff97c4 	.word	0x1fff97c4

00015790 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   15790:	b500      	push	{lr}
   15792:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15794:	f7eb faa0 	bl	cd8 <Sys_GetCoreID>
   15798:	4603      	mov	r3, r0
   1579a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
   1579c:	4a10      	ldr	r2, [pc, #64]	; (157e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   1579e:	9b01      	ldr	r3, [sp, #4]
   157a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157a4:	2b00      	cmp	r3, #0
   157a6:	d10d      	bne.n	157c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   157a8:	f7eb f911 	bl	9ce <Port_schm_read_msr>
   157ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   157ae:	9b00      	ldr	r3, [sp, #0]
   157b0:	f003 0301 	and.w	r3, r3, #1
   157b4:	2b00      	cmp	r3, #0
   157b6:	d100      	bne.n	157ba <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   157b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   157ba:	490a      	ldr	r1, [pc, #40]	; (157e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
   157bc:	9b01      	ldr	r3, [sp, #4]
   157be:	9a00      	ldr	r2, [sp, #0]
   157c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
   157c4:	4a06      	ldr	r2, [pc, #24]	; (157e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   157c6:	9b01      	ldr	r3, [sp, #4]
   157c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157cc:	1c5a      	adds	r2, r3, #1
   157ce:	4904      	ldr	r1, [pc, #16]	; (157e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   157d0:	9b01      	ldr	r3, [sp, #4]
   157d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   157d6:	bf00      	nop
   157d8:	b003      	add	sp, #12
   157da:	f85d fb04 	ldr.w	pc, [sp], #4
   157de:	bf00      	nop
   157e0:	1fff97d0 	.word	0x1fff97d0
   157e4:	1fff97cc 	.word	0x1fff97cc

000157e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   157e8:	b500      	push	{lr}
   157ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   157ec:	f7eb fa74 	bl	cd8 <Sys_GetCoreID>
   157f0:	4603      	mov	r3, r0
   157f2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
   157f4:	4a0d      	ldr	r2, [pc, #52]	; (1582c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   157f6:	9b01      	ldr	r3, [sp, #4]
   157f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157fc:	1e5a      	subs	r2, r3, #1
   157fe:	490b      	ldr	r1, [pc, #44]	; (1582c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   15800:	9b01      	ldr	r3, [sp, #4]
   15802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   15806:	4a0a      	ldr	r2, [pc, #40]	; (15830 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
   15808:	9b01      	ldr	r3, [sp, #4]
   1580a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1580e:	f003 0301 	and.w	r3, r3, #1
   15812:	2b00      	cmp	r3, #0
   15814:	d106      	bne.n	15824 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
   15816:	4a05      	ldr	r2, [pc, #20]	; (1582c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   15818:	9b01      	ldr	r3, [sp, #4]
   1581a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1581e:	2b00      	cmp	r3, #0
   15820:	d100      	bne.n	15824 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15822:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15824:	bf00      	nop
   15826:	b003      	add	sp, #12
   15828:	f85d fb04 	ldr.w	pc, [sp], #4
   1582c:	1fff97d0 	.word	0x1fff97d0
   15830:	1fff97cc 	.word	0x1fff97cc

00015834 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   15834:	b500      	push	{lr}
   15836:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15838:	f7eb fa4e 	bl	cd8 <Sys_GetCoreID>
   1583c:	4603      	mov	r3, r0
   1583e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
   15840:	4a10      	ldr	r2, [pc, #64]	; (15884 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   15842:	9b01      	ldr	r3, [sp, #4]
   15844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15848:	2b00      	cmp	r3, #0
   1584a:	d10d      	bne.n	15868 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1584c:	f7eb f8bf 	bl	9ce <Port_schm_read_msr>
   15850:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15852:	9b00      	ldr	r3, [sp, #0]
   15854:	f003 0301 	and.w	r3, r3, #1
   15858:	2b00      	cmp	r3, #0
   1585a:	d100      	bne.n	1585e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1585c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   1585e:	490a      	ldr	r1, [pc, #40]	; (15888 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
   15860:	9b01      	ldr	r3, [sp, #4]
   15862:	9a00      	ldr	r2, [sp, #0]
   15864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
   15868:	4a06      	ldr	r2, [pc, #24]	; (15884 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   1586a:	9b01      	ldr	r3, [sp, #4]
   1586c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15870:	1c5a      	adds	r2, r3, #1
   15872:	4904      	ldr	r1, [pc, #16]	; (15884 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   15874:	9b01      	ldr	r3, [sp, #4]
   15876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1587a:	bf00      	nop
   1587c:	b003      	add	sp, #12
   1587e:	f85d fb04 	ldr.w	pc, [sp], #4
   15882:	bf00      	nop
   15884:	1fff97d8 	.word	0x1fff97d8
   15888:	1fff97d4 	.word	0x1fff97d4

0001588c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   1588c:	b500      	push	{lr}
   1588e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15890:	f7eb fa22 	bl	cd8 <Sys_GetCoreID>
   15894:	4603      	mov	r3, r0
   15896:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
   15898:	4a0d      	ldr	r2, [pc, #52]	; (158d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   1589a:	9b01      	ldr	r3, [sp, #4]
   1589c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158a0:	1e5a      	subs	r2, r3, #1
   158a2:	490b      	ldr	r1, [pc, #44]	; (158d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   158a4:	9b01      	ldr	r3, [sp, #4]
   158a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   158aa:	4a0a      	ldr	r2, [pc, #40]	; (158d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
   158ac:	9b01      	ldr	r3, [sp, #4]
   158ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158b2:	f003 0301 	and.w	r3, r3, #1
   158b6:	2b00      	cmp	r3, #0
   158b8:	d106      	bne.n	158c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
   158ba:	4a05      	ldr	r2, [pc, #20]	; (158d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   158bc:	9b01      	ldr	r3, [sp, #4]
   158be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158c2:	2b00      	cmp	r3, #0
   158c4:	d100      	bne.n	158c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   158c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   158c8:	bf00      	nop
   158ca:	b003      	add	sp, #12
   158cc:	f85d fb04 	ldr.w	pc, [sp], #4
   158d0:	1fff97d8 	.word	0x1fff97d8
   158d4:	1fff97d4 	.word	0x1fff97d4

000158d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   158d8:	b500      	push	{lr}
   158da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   158dc:	f7eb f9fc 	bl	cd8 <Sys_GetCoreID>
   158e0:	4603      	mov	r3, r0
   158e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
   158e4:	4a10      	ldr	r2, [pc, #64]	; (15928 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   158e6:	9b01      	ldr	r3, [sp, #4]
   158e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158ec:	2b00      	cmp	r3, #0
   158ee:	d10d      	bne.n	1590c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   158f0:	f7eb f86d 	bl	9ce <Port_schm_read_msr>
   158f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   158f6:	9b00      	ldr	r3, [sp, #0]
   158f8:	f003 0301 	and.w	r3, r3, #1
   158fc:	2b00      	cmp	r3, #0
   158fe:	d100      	bne.n	15902 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15900:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   15902:	490a      	ldr	r1, [pc, #40]	; (1592c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
   15904:	9b01      	ldr	r3, [sp, #4]
   15906:	9a00      	ldr	r2, [sp, #0]
   15908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
   1590c:	4a06      	ldr	r2, [pc, #24]	; (15928 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   1590e:	9b01      	ldr	r3, [sp, #4]
   15910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15914:	1c5a      	adds	r2, r3, #1
   15916:	4904      	ldr	r1, [pc, #16]	; (15928 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   15918:	9b01      	ldr	r3, [sp, #4]
   1591a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1591e:	bf00      	nop
   15920:	b003      	add	sp, #12
   15922:	f85d fb04 	ldr.w	pc, [sp], #4
   15926:	bf00      	nop
   15928:	1fff97e0 	.word	0x1fff97e0
   1592c:	1fff97dc 	.word	0x1fff97dc

00015930 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   15930:	b500      	push	{lr}
   15932:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15934:	f7eb f9d0 	bl	cd8 <Sys_GetCoreID>
   15938:	4603      	mov	r3, r0
   1593a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
   1593c:	4a0d      	ldr	r2, [pc, #52]	; (15974 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   1593e:	9b01      	ldr	r3, [sp, #4]
   15940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15944:	1e5a      	subs	r2, r3, #1
   15946:	490b      	ldr	r1, [pc, #44]	; (15974 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   15948:	9b01      	ldr	r3, [sp, #4]
   1594a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   1594e:	4a0a      	ldr	r2, [pc, #40]	; (15978 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
   15950:	9b01      	ldr	r3, [sp, #4]
   15952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15956:	f003 0301 	and.w	r3, r3, #1
   1595a:	2b00      	cmp	r3, #0
   1595c:	d106      	bne.n	1596c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
   1595e:	4a05      	ldr	r2, [pc, #20]	; (15974 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   15960:	9b01      	ldr	r3, [sp, #4]
   15962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15966:	2b00      	cmp	r3, #0
   15968:	d100      	bne.n	1596c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1596a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1596c:	bf00      	nop
   1596e:	b003      	add	sp, #12
   15970:	f85d fb04 	ldr.w	pc, [sp], #4
   15974:	1fff97e0 	.word	0x1fff97e0
   15978:	1fff97dc 	.word	0x1fff97dc

0001597c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   1597c:	b500      	push	{lr}
   1597e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15980:	f7eb f9aa 	bl	cd8 <Sys_GetCoreID>
   15984:	4603      	mov	r3, r0
   15986:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
   15988:	4a10      	ldr	r2, [pc, #64]	; (159cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   1598a:	9b01      	ldr	r3, [sp, #4]
   1598c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15990:	2b00      	cmp	r3, #0
   15992:	d10d      	bne.n	159b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15994:	f7eb f81b 	bl	9ce <Port_schm_read_msr>
   15998:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1599a:	9b00      	ldr	r3, [sp, #0]
   1599c:	f003 0301 	and.w	r3, r3, #1
   159a0:	2b00      	cmp	r3, #0
   159a2:	d100      	bne.n	159a6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   159a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   159a6:	490a      	ldr	r1, [pc, #40]	; (159d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
   159a8:	9b01      	ldr	r3, [sp, #4]
   159aa:	9a00      	ldr	r2, [sp, #0]
   159ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
   159b0:	4a06      	ldr	r2, [pc, #24]	; (159cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   159b2:	9b01      	ldr	r3, [sp, #4]
   159b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159b8:	1c5a      	adds	r2, r3, #1
   159ba:	4904      	ldr	r1, [pc, #16]	; (159cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   159bc:	9b01      	ldr	r3, [sp, #4]
   159be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   159c2:	bf00      	nop
   159c4:	b003      	add	sp, #12
   159c6:	f85d fb04 	ldr.w	pc, [sp], #4
   159ca:	bf00      	nop
   159cc:	1fff97e8 	.word	0x1fff97e8
   159d0:	1fff97e4 	.word	0x1fff97e4

000159d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   159d4:	b500      	push	{lr}
   159d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   159d8:	f7eb f97e 	bl	cd8 <Sys_GetCoreID>
   159dc:	4603      	mov	r3, r0
   159de:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
   159e0:	4a0d      	ldr	r2, [pc, #52]	; (15a18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   159e2:	9b01      	ldr	r3, [sp, #4]
   159e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159e8:	1e5a      	subs	r2, r3, #1
   159ea:	490b      	ldr	r1, [pc, #44]	; (15a18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   159ec:	9b01      	ldr	r3, [sp, #4]
   159ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   159f2:	4a0a      	ldr	r2, [pc, #40]	; (15a1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
   159f4:	9b01      	ldr	r3, [sp, #4]
   159f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159fa:	f003 0301 	and.w	r3, r3, #1
   159fe:	2b00      	cmp	r3, #0
   15a00:	d106      	bne.n	15a10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
   15a02:	4a05      	ldr	r2, [pc, #20]	; (15a18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   15a04:	9b01      	ldr	r3, [sp, #4]
   15a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a0a:	2b00      	cmp	r3, #0
   15a0c:	d100      	bne.n	15a10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15a0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15a10:	bf00      	nop
   15a12:	b003      	add	sp, #12
   15a14:	f85d fb04 	ldr.w	pc, [sp], #4
   15a18:	1fff97e8 	.word	0x1fff97e8
   15a1c:	1fff97e4 	.word	0x1fff97e4

00015a20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   15a20:	b500      	push	{lr}
   15a22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15a24:	f7eb f958 	bl	cd8 <Sys_GetCoreID>
   15a28:	4603      	mov	r3, r0
   15a2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
   15a2c:	4a10      	ldr	r2, [pc, #64]	; (15a70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   15a2e:	9b01      	ldr	r3, [sp, #4]
   15a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a34:	2b00      	cmp	r3, #0
   15a36:	d10d      	bne.n	15a54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15a38:	f7ea ffc9 	bl	9ce <Port_schm_read_msr>
   15a3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15a3e:	9b00      	ldr	r3, [sp, #0]
   15a40:	f003 0301 	and.w	r3, r3, #1
   15a44:	2b00      	cmp	r3, #0
   15a46:	d100      	bne.n	15a4a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15a48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   15a4a:	490a      	ldr	r1, [pc, #40]	; (15a74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
   15a4c:	9b01      	ldr	r3, [sp, #4]
   15a4e:	9a00      	ldr	r2, [sp, #0]
   15a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
   15a54:	4a06      	ldr	r2, [pc, #24]	; (15a70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   15a56:	9b01      	ldr	r3, [sp, #4]
   15a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a5c:	1c5a      	adds	r2, r3, #1
   15a5e:	4904      	ldr	r1, [pc, #16]	; (15a70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   15a60:	9b01      	ldr	r3, [sp, #4]
   15a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15a66:	bf00      	nop
   15a68:	b003      	add	sp, #12
   15a6a:	f85d fb04 	ldr.w	pc, [sp], #4
   15a6e:	bf00      	nop
   15a70:	1fff97f0 	.word	0x1fff97f0
   15a74:	1fff97ec 	.word	0x1fff97ec

00015a78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   15a78:	b500      	push	{lr}
   15a7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15a7c:	f7eb f92c 	bl	cd8 <Sys_GetCoreID>
   15a80:	4603      	mov	r3, r0
   15a82:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
   15a84:	4a0d      	ldr	r2, [pc, #52]	; (15abc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   15a86:	9b01      	ldr	r3, [sp, #4]
   15a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a8c:	1e5a      	subs	r2, r3, #1
   15a8e:	490b      	ldr	r1, [pc, #44]	; (15abc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   15a90:	9b01      	ldr	r3, [sp, #4]
   15a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   15a96:	4a0a      	ldr	r2, [pc, #40]	; (15ac0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
   15a98:	9b01      	ldr	r3, [sp, #4]
   15a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a9e:	f003 0301 	and.w	r3, r3, #1
   15aa2:	2b00      	cmp	r3, #0
   15aa4:	d106      	bne.n	15ab4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
   15aa6:	4a05      	ldr	r2, [pc, #20]	; (15abc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   15aa8:	9b01      	ldr	r3, [sp, #4]
   15aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15aae:	2b00      	cmp	r3, #0
   15ab0:	d100      	bne.n	15ab4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15ab2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15ab4:	bf00      	nop
   15ab6:	b003      	add	sp, #12
   15ab8:	f85d fb04 	ldr.w	pc, [sp], #4
   15abc:	1fff97f0 	.word	0x1fff97f0
   15ac0:	1fff97ec 	.word	0x1fff97ec

00015ac4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   15ac4:	b500      	push	{lr}
   15ac6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15ac8:	f7eb f906 	bl	cd8 <Sys_GetCoreID>
   15acc:	4603      	mov	r3, r0
   15ace:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
   15ad0:	4a10      	ldr	r2, [pc, #64]	; (15b14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   15ad2:	9b01      	ldr	r3, [sp, #4]
   15ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ad8:	2b00      	cmp	r3, #0
   15ada:	d10d      	bne.n	15af8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15adc:	f7ea ff77 	bl	9ce <Port_schm_read_msr>
   15ae0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15ae2:	9b00      	ldr	r3, [sp, #0]
   15ae4:	f003 0301 	and.w	r3, r3, #1
   15ae8:	2b00      	cmp	r3, #0
   15aea:	d100      	bne.n	15aee <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15aec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   15aee:	490a      	ldr	r1, [pc, #40]	; (15b18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
   15af0:	9b01      	ldr	r3, [sp, #4]
   15af2:	9a00      	ldr	r2, [sp, #0]
   15af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
   15af8:	4a06      	ldr	r2, [pc, #24]	; (15b14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   15afa:	9b01      	ldr	r3, [sp, #4]
   15afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b00:	1c5a      	adds	r2, r3, #1
   15b02:	4904      	ldr	r1, [pc, #16]	; (15b14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   15b04:	9b01      	ldr	r3, [sp, #4]
   15b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15b0a:	bf00      	nop
   15b0c:	b003      	add	sp, #12
   15b0e:	f85d fb04 	ldr.w	pc, [sp], #4
   15b12:	bf00      	nop
   15b14:	1fff97f8 	.word	0x1fff97f8
   15b18:	1fff97f4 	.word	0x1fff97f4

00015b1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   15b1c:	b500      	push	{lr}
   15b1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15b20:	f7eb f8da 	bl	cd8 <Sys_GetCoreID>
   15b24:	4603      	mov	r3, r0
   15b26:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
   15b28:	4a0d      	ldr	r2, [pc, #52]	; (15b60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   15b2a:	9b01      	ldr	r3, [sp, #4]
   15b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b30:	1e5a      	subs	r2, r3, #1
   15b32:	490b      	ldr	r1, [pc, #44]	; (15b60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   15b34:	9b01      	ldr	r3, [sp, #4]
   15b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   15b3a:	4a0a      	ldr	r2, [pc, #40]	; (15b64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
   15b3c:	9b01      	ldr	r3, [sp, #4]
   15b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b42:	f003 0301 	and.w	r3, r3, #1
   15b46:	2b00      	cmp	r3, #0
   15b48:	d106      	bne.n	15b58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
   15b4a:	4a05      	ldr	r2, [pc, #20]	; (15b60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   15b4c:	9b01      	ldr	r3, [sp, #4]
   15b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b52:	2b00      	cmp	r3, #0
   15b54:	d100      	bne.n	15b58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15b56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15b58:	bf00      	nop
   15b5a:	b003      	add	sp, #12
   15b5c:	f85d fb04 	ldr.w	pc, [sp], #4
   15b60:	1fff97f8 	.word	0x1fff97f8
   15b64:	1fff97f4 	.word	0x1fff97f4

00015b68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   15b68:	b500      	push	{lr}
   15b6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15b6c:	f7eb f8b4 	bl	cd8 <Sys_GetCoreID>
   15b70:	4603      	mov	r3, r0
   15b72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
   15b74:	4a10      	ldr	r2, [pc, #64]	; (15bb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   15b76:	9b01      	ldr	r3, [sp, #4]
   15b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b7c:	2b00      	cmp	r3, #0
   15b7e:	d10d      	bne.n	15b9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15b80:	f7ea ff25 	bl	9ce <Port_schm_read_msr>
   15b84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15b86:	9b00      	ldr	r3, [sp, #0]
   15b88:	f003 0301 	and.w	r3, r3, #1
   15b8c:	2b00      	cmp	r3, #0
   15b8e:	d100      	bne.n	15b92 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15b90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   15b92:	490a      	ldr	r1, [pc, #40]	; (15bbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
   15b94:	9b01      	ldr	r3, [sp, #4]
   15b96:	9a00      	ldr	r2, [sp, #0]
   15b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
   15b9c:	4a06      	ldr	r2, [pc, #24]	; (15bb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   15b9e:	9b01      	ldr	r3, [sp, #4]
   15ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ba4:	1c5a      	adds	r2, r3, #1
   15ba6:	4904      	ldr	r1, [pc, #16]	; (15bb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   15ba8:	9b01      	ldr	r3, [sp, #4]
   15baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15bae:	bf00      	nop
   15bb0:	b003      	add	sp, #12
   15bb2:	f85d fb04 	ldr.w	pc, [sp], #4
   15bb6:	bf00      	nop
   15bb8:	1fff9800 	.word	0x1fff9800
   15bbc:	1fff97fc 	.word	0x1fff97fc

00015bc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   15bc0:	b500      	push	{lr}
   15bc2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15bc4:	f7eb f888 	bl	cd8 <Sys_GetCoreID>
   15bc8:	4603      	mov	r3, r0
   15bca:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
   15bcc:	4a0d      	ldr	r2, [pc, #52]	; (15c04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   15bce:	9b01      	ldr	r3, [sp, #4]
   15bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bd4:	1e5a      	subs	r2, r3, #1
   15bd6:	490b      	ldr	r1, [pc, #44]	; (15c04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   15bd8:	9b01      	ldr	r3, [sp, #4]
   15bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   15bde:	4a0a      	ldr	r2, [pc, #40]	; (15c08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
   15be0:	9b01      	ldr	r3, [sp, #4]
   15be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15be6:	f003 0301 	and.w	r3, r3, #1
   15bea:	2b00      	cmp	r3, #0
   15bec:	d106      	bne.n	15bfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
   15bee:	4a05      	ldr	r2, [pc, #20]	; (15c04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   15bf0:	9b01      	ldr	r3, [sp, #4]
   15bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bf6:	2b00      	cmp	r3, #0
   15bf8:	d100      	bne.n	15bfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15bfa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15bfc:	bf00      	nop
   15bfe:	b003      	add	sp, #12
   15c00:	f85d fb04 	ldr.w	pc, [sp], #4
   15c04:	1fff9800 	.word	0x1fff9800
   15c08:	1fff97fc 	.word	0x1fff97fc

00015c0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   15c0c:	b500      	push	{lr}
   15c0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15c10:	f7eb f862 	bl	cd8 <Sys_GetCoreID>
   15c14:	4603      	mov	r3, r0
   15c16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
   15c18:	4a10      	ldr	r2, [pc, #64]	; (15c5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   15c1a:	9b01      	ldr	r3, [sp, #4]
   15c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c20:	2b00      	cmp	r3, #0
   15c22:	d10d      	bne.n	15c40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15c24:	f7ea fed3 	bl	9ce <Port_schm_read_msr>
   15c28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15c2a:	9b00      	ldr	r3, [sp, #0]
   15c2c:	f003 0301 	and.w	r3, r3, #1
   15c30:	2b00      	cmp	r3, #0
   15c32:	d100      	bne.n	15c36 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15c34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   15c36:	490a      	ldr	r1, [pc, #40]	; (15c60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
   15c38:	9b01      	ldr	r3, [sp, #4]
   15c3a:	9a00      	ldr	r2, [sp, #0]
   15c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
   15c40:	4a06      	ldr	r2, [pc, #24]	; (15c5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   15c42:	9b01      	ldr	r3, [sp, #4]
   15c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c48:	1c5a      	adds	r2, r3, #1
   15c4a:	4904      	ldr	r1, [pc, #16]	; (15c5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   15c4c:	9b01      	ldr	r3, [sp, #4]
   15c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15c52:	bf00      	nop
   15c54:	b003      	add	sp, #12
   15c56:	f85d fb04 	ldr.w	pc, [sp], #4
   15c5a:	bf00      	nop
   15c5c:	1fff9808 	.word	0x1fff9808
   15c60:	1fff9804 	.word	0x1fff9804

00015c64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   15c64:	b500      	push	{lr}
   15c66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15c68:	f7eb f836 	bl	cd8 <Sys_GetCoreID>
   15c6c:	4603      	mov	r3, r0
   15c6e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
   15c70:	4a0d      	ldr	r2, [pc, #52]	; (15ca8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   15c72:	9b01      	ldr	r3, [sp, #4]
   15c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c78:	1e5a      	subs	r2, r3, #1
   15c7a:	490b      	ldr	r1, [pc, #44]	; (15ca8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   15c7c:	9b01      	ldr	r3, [sp, #4]
   15c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   15c82:	4a0a      	ldr	r2, [pc, #40]	; (15cac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
   15c84:	9b01      	ldr	r3, [sp, #4]
   15c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c8a:	f003 0301 	and.w	r3, r3, #1
   15c8e:	2b00      	cmp	r3, #0
   15c90:	d106      	bne.n	15ca0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
   15c92:	4a05      	ldr	r2, [pc, #20]	; (15ca8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   15c94:	9b01      	ldr	r3, [sp, #4]
   15c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c9a:	2b00      	cmp	r3, #0
   15c9c:	d100      	bne.n	15ca0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15c9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15ca0:	bf00      	nop
   15ca2:	b003      	add	sp, #12
   15ca4:	f85d fb04 	ldr.w	pc, [sp], #4
   15ca8:	1fff9808 	.word	0x1fff9808
   15cac:	1fff9804 	.word	0x1fff9804

00015cb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   15cb0:	b500      	push	{lr}
   15cb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15cb4:	f7eb f810 	bl	cd8 <Sys_GetCoreID>
   15cb8:	4603      	mov	r3, r0
   15cba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
   15cbc:	4a10      	ldr	r2, [pc, #64]	; (15d00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   15cbe:	9b01      	ldr	r3, [sp, #4]
   15cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15cc4:	2b00      	cmp	r3, #0
   15cc6:	d10d      	bne.n	15ce4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15cc8:	f7ea fe81 	bl	9ce <Port_schm_read_msr>
   15ccc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15cce:	9b00      	ldr	r3, [sp, #0]
   15cd0:	f003 0301 	and.w	r3, r3, #1
   15cd4:	2b00      	cmp	r3, #0
   15cd6:	d100      	bne.n	15cda <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15cd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   15cda:	490a      	ldr	r1, [pc, #40]	; (15d04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
   15cdc:	9b01      	ldr	r3, [sp, #4]
   15cde:	9a00      	ldr	r2, [sp, #0]
   15ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
   15ce4:	4a06      	ldr	r2, [pc, #24]	; (15d00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   15ce6:	9b01      	ldr	r3, [sp, #4]
   15ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15cec:	1c5a      	adds	r2, r3, #1
   15cee:	4904      	ldr	r1, [pc, #16]	; (15d00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   15cf0:	9b01      	ldr	r3, [sp, #4]
   15cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15cf6:	bf00      	nop
   15cf8:	b003      	add	sp, #12
   15cfa:	f85d fb04 	ldr.w	pc, [sp], #4
   15cfe:	bf00      	nop
   15d00:	1fff9810 	.word	0x1fff9810
   15d04:	1fff980c 	.word	0x1fff980c

00015d08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   15d08:	b500      	push	{lr}
   15d0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15d0c:	f7ea ffe4 	bl	cd8 <Sys_GetCoreID>
   15d10:	4603      	mov	r3, r0
   15d12:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
   15d14:	4a0d      	ldr	r2, [pc, #52]	; (15d4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   15d16:	9b01      	ldr	r3, [sp, #4]
   15d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d1c:	1e5a      	subs	r2, r3, #1
   15d1e:	490b      	ldr	r1, [pc, #44]	; (15d4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   15d20:	9b01      	ldr	r3, [sp, #4]
   15d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   15d26:	4a0a      	ldr	r2, [pc, #40]	; (15d50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
   15d28:	9b01      	ldr	r3, [sp, #4]
   15d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d2e:	f003 0301 	and.w	r3, r3, #1
   15d32:	2b00      	cmp	r3, #0
   15d34:	d106      	bne.n	15d44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
   15d36:	4a05      	ldr	r2, [pc, #20]	; (15d4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   15d38:	9b01      	ldr	r3, [sp, #4]
   15d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d3e:	2b00      	cmp	r3, #0
   15d40:	d100      	bne.n	15d44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15d42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15d44:	bf00      	nop
   15d46:	b003      	add	sp, #12
   15d48:	f85d fb04 	ldr.w	pc, [sp], #4
   15d4c:	1fff9810 	.word	0x1fff9810
   15d50:	1fff980c 	.word	0x1fff980c

00015d54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   15d54:	b500      	push	{lr}
   15d56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15d58:	f7ea ffbe 	bl	cd8 <Sys_GetCoreID>
   15d5c:	4603      	mov	r3, r0
   15d5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
   15d60:	4a10      	ldr	r2, [pc, #64]	; (15da4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   15d62:	9b01      	ldr	r3, [sp, #4]
   15d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d68:	2b00      	cmp	r3, #0
   15d6a:	d10d      	bne.n	15d88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15d6c:	f7ea fe2f 	bl	9ce <Port_schm_read_msr>
   15d70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15d72:	9b00      	ldr	r3, [sp, #0]
   15d74:	f003 0301 	and.w	r3, r3, #1
   15d78:	2b00      	cmp	r3, #0
   15d7a:	d100      	bne.n	15d7e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15d7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   15d7e:	490a      	ldr	r1, [pc, #40]	; (15da8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
   15d80:	9b01      	ldr	r3, [sp, #4]
   15d82:	9a00      	ldr	r2, [sp, #0]
   15d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
   15d88:	4a06      	ldr	r2, [pc, #24]	; (15da4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   15d8a:	9b01      	ldr	r3, [sp, #4]
   15d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d90:	1c5a      	adds	r2, r3, #1
   15d92:	4904      	ldr	r1, [pc, #16]	; (15da4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   15d94:	9b01      	ldr	r3, [sp, #4]
   15d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15d9a:	bf00      	nop
   15d9c:	b003      	add	sp, #12
   15d9e:	f85d fb04 	ldr.w	pc, [sp], #4
   15da2:	bf00      	nop
   15da4:	1fff9818 	.word	0x1fff9818
   15da8:	1fff9814 	.word	0x1fff9814

00015dac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   15dac:	b500      	push	{lr}
   15dae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15db0:	f7ea ff92 	bl	cd8 <Sys_GetCoreID>
   15db4:	4603      	mov	r3, r0
   15db6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
   15db8:	4a0d      	ldr	r2, [pc, #52]	; (15df0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   15dba:	9b01      	ldr	r3, [sp, #4]
   15dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15dc0:	1e5a      	subs	r2, r3, #1
   15dc2:	490b      	ldr	r1, [pc, #44]	; (15df0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   15dc4:	9b01      	ldr	r3, [sp, #4]
   15dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   15dca:	4a0a      	ldr	r2, [pc, #40]	; (15df4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
   15dcc:	9b01      	ldr	r3, [sp, #4]
   15dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15dd2:	f003 0301 	and.w	r3, r3, #1
   15dd6:	2b00      	cmp	r3, #0
   15dd8:	d106      	bne.n	15de8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
   15dda:	4a05      	ldr	r2, [pc, #20]	; (15df0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   15ddc:	9b01      	ldr	r3, [sp, #4]
   15dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15de2:	2b00      	cmp	r3, #0
   15de4:	d100      	bne.n	15de8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15de6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15de8:	bf00      	nop
   15dea:	b003      	add	sp, #12
   15dec:	f85d fb04 	ldr.w	pc, [sp], #4
   15df0:	1fff9818 	.word	0x1fff9818
   15df4:	1fff9814 	.word	0x1fff9814

00015df8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   15df8:	b500      	push	{lr}
   15dfa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15dfc:	f7ea ff6c 	bl	cd8 <Sys_GetCoreID>
   15e00:	4603      	mov	r3, r0
   15e02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
   15e04:	4a10      	ldr	r2, [pc, #64]	; (15e48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   15e06:	9b01      	ldr	r3, [sp, #4]
   15e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e0c:	2b00      	cmp	r3, #0
   15e0e:	d10d      	bne.n	15e2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15e10:	f7ea fddd 	bl	9ce <Port_schm_read_msr>
   15e14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15e16:	9b00      	ldr	r3, [sp, #0]
   15e18:	f003 0301 	and.w	r3, r3, #1
   15e1c:	2b00      	cmp	r3, #0
   15e1e:	d100      	bne.n	15e22 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15e20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   15e22:	490a      	ldr	r1, [pc, #40]	; (15e4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
   15e24:	9b01      	ldr	r3, [sp, #4]
   15e26:	9a00      	ldr	r2, [sp, #0]
   15e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
   15e2c:	4a06      	ldr	r2, [pc, #24]	; (15e48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   15e2e:	9b01      	ldr	r3, [sp, #4]
   15e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e34:	1c5a      	adds	r2, r3, #1
   15e36:	4904      	ldr	r1, [pc, #16]	; (15e48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   15e38:	9b01      	ldr	r3, [sp, #4]
   15e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15e3e:	bf00      	nop
   15e40:	b003      	add	sp, #12
   15e42:	f85d fb04 	ldr.w	pc, [sp], #4
   15e46:	bf00      	nop
   15e48:	1fff9820 	.word	0x1fff9820
   15e4c:	1fff981c 	.word	0x1fff981c

00015e50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   15e50:	b500      	push	{lr}
   15e52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15e54:	f7ea ff40 	bl	cd8 <Sys_GetCoreID>
   15e58:	4603      	mov	r3, r0
   15e5a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
   15e5c:	4a0d      	ldr	r2, [pc, #52]	; (15e94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   15e5e:	9b01      	ldr	r3, [sp, #4]
   15e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e64:	1e5a      	subs	r2, r3, #1
   15e66:	490b      	ldr	r1, [pc, #44]	; (15e94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   15e68:	9b01      	ldr	r3, [sp, #4]
   15e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   15e6e:	4a0a      	ldr	r2, [pc, #40]	; (15e98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
   15e70:	9b01      	ldr	r3, [sp, #4]
   15e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e76:	f003 0301 	and.w	r3, r3, #1
   15e7a:	2b00      	cmp	r3, #0
   15e7c:	d106      	bne.n	15e8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
   15e7e:	4a05      	ldr	r2, [pc, #20]	; (15e94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   15e80:	9b01      	ldr	r3, [sp, #4]
   15e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e86:	2b00      	cmp	r3, #0
   15e88:	d100      	bne.n	15e8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15e8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15e8c:	bf00      	nop
   15e8e:	b003      	add	sp, #12
   15e90:	f85d fb04 	ldr.w	pc, [sp], #4
   15e94:	1fff9820 	.word	0x1fff9820
   15e98:	1fff981c 	.word	0x1fff981c

00015e9c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00(void)
{
   15e9c:	b500      	push	{lr}
   15e9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15ea0:	f7ea ff1a 	bl	cd8 <Sys_GetCoreID>
   15ea4:	4603      	mov	r3, r0
   15ea6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId])
   15ea8:	4a10      	ldr	r2, [pc, #64]	; (15eec <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x50>)
   15eaa:	9b01      	ldr	r3, [sp, #4]
   15eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15eb0:	2b00      	cmp	r3, #0
   15eb2:	d10d      	bne.n	15ed0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15eb4:	f7ea fd94 	bl	9e0 <Spi_schm_read_msr>
   15eb8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15eba:	9b00      	ldr	r3, [sp, #0]
   15ebc:	f003 0301 	and.w	r3, r3, #1
   15ec0:	2b00      	cmp	r3, #0
   15ec2:	d100      	bne.n	15ec6 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15ec4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   15ec6:	490a      	ldr	r1, [pc, #40]	; (15ef0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x54>)
   15ec8:	9b01      	ldr	r3, [sp, #4]
   15eca:	9a00      	ldr	r2, [sp, #0]
   15ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId]++;
   15ed0:	4a06      	ldr	r2, [pc, #24]	; (15eec <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x50>)
   15ed2:	9b01      	ldr	r3, [sp, #4]
   15ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ed8:	1c5a      	adds	r2, r3, #1
   15eda:	4904      	ldr	r1, [pc, #16]	; (15eec <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x50>)
   15edc:	9b01      	ldr	r3, [sp, #4]
   15ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15ee2:	bf00      	nop
   15ee4:	b003      	add	sp, #12
   15ee6:	f85d fb04 	ldr.w	pc, [sp], #4
   15eea:	bf00      	nop
   15eec:	1fff9828 	.word	0x1fff9828
   15ef0:	1fff9824 	.word	0x1fff9824

00015ef4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00(void)
{
   15ef4:	b500      	push	{lr}
   15ef6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15ef8:	f7ea feee 	bl	cd8 <Sys_GetCoreID>
   15efc:	4603      	mov	r3, r0
   15efe:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId]--;
   15f00:	4a0d      	ldr	r2, [pc, #52]	; (15f38 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x44>)
   15f02:	9b01      	ldr	r3, [sp, #4]
   15f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f08:	1e5a      	subs	r2, r3, #1
   15f0a:	490b      	ldr	r1, [pc, #44]	; (15f38 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x44>)
   15f0c:	9b01      	ldr	r3, [sp, #4]
   15f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   15f12:	4a0a      	ldr	r2, [pc, #40]	; (15f3c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x48>)
   15f14:	9b01      	ldr	r3, [sp, #4]
   15f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f1a:	f003 0301 	and.w	r3, r3, #1
   15f1e:	2b00      	cmp	r3, #0
   15f20:	d106      	bne.n	15f30 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x3c>
   15f22:	4a05      	ldr	r2, [pc, #20]	; (15f38 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x44>)
   15f24:	9b01      	ldr	r3, [sp, #4]
   15f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f2a:	2b00      	cmp	r3, #0
   15f2c:	d100      	bne.n	15f30 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15f2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15f30:	bf00      	nop
   15f32:	b003      	add	sp, #12
   15f34:	f85d fb04 	ldr.w	pc, [sp], #4
   15f38:	1fff9828 	.word	0x1fff9828
   15f3c:	1fff9824 	.word	0x1fff9824

00015f40 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01(void)
{
   15f40:	b500      	push	{lr}
   15f42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15f44:	f7ea fec8 	bl	cd8 <Sys_GetCoreID>
   15f48:	4603      	mov	r3, r0
   15f4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId])
   15f4c:	4a10      	ldr	r2, [pc, #64]	; (15f90 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x50>)
   15f4e:	9b01      	ldr	r3, [sp, #4]
   15f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f54:	2b00      	cmp	r3, #0
   15f56:	d10d      	bne.n	15f74 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15f58:	f7ea fd42 	bl	9e0 <Spi_schm_read_msr>
   15f5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15f5e:	9b00      	ldr	r3, [sp, #0]
   15f60:	f003 0301 	and.w	r3, r3, #1
   15f64:	2b00      	cmp	r3, #0
   15f66:	d100      	bne.n	15f6a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15f68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   15f6a:	490a      	ldr	r1, [pc, #40]	; (15f94 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x54>)
   15f6c:	9b01      	ldr	r3, [sp, #4]
   15f6e:	9a00      	ldr	r2, [sp, #0]
   15f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId]++;
   15f74:	4a06      	ldr	r2, [pc, #24]	; (15f90 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x50>)
   15f76:	9b01      	ldr	r3, [sp, #4]
   15f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f7c:	1c5a      	adds	r2, r3, #1
   15f7e:	4904      	ldr	r1, [pc, #16]	; (15f90 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x50>)
   15f80:	9b01      	ldr	r3, [sp, #4]
   15f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15f86:	bf00      	nop
   15f88:	b003      	add	sp, #12
   15f8a:	f85d fb04 	ldr.w	pc, [sp], #4
   15f8e:	bf00      	nop
   15f90:	1fff9830 	.word	0x1fff9830
   15f94:	1fff982c 	.word	0x1fff982c

00015f98 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01(void)
{
   15f98:	b500      	push	{lr}
   15f9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15f9c:	f7ea fe9c 	bl	cd8 <Sys_GetCoreID>
   15fa0:	4603      	mov	r3, r0
   15fa2:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId]--;
   15fa4:	4a0d      	ldr	r2, [pc, #52]	; (15fdc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x44>)
   15fa6:	9b01      	ldr	r3, [sp, #4]
   15fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15fac:	1e5a      	subs	r2, r3, #1
   15fae:	490b      	ldr	r1, [pc, #44]	; (15fdc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x44>)
   15fb0:	9b01      	ldr	r3, [sp, #4]
   15fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   15fb6:	4a0a      	ldr	r2, [pc, #40]	; (15fe0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x48>)
   15fb8:	9b01      	ldr	r3, [sp, #4]
   15fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15fbe:	f003 0301 	and.w	r3, r3, #1
   15fc2:	2b00      	cmp	r3, #0
   15fc4:	d106      	bne.n	15fd4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x3c>
   15fc6:	4a05      	ldr	r2, [pc, #20]	; (15fdc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x44>)
   15fc8:	9b01      	ldr	r3, [sp, #4]
   15fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15fce:	2b00      	cmp	r3, #0
   15fd0:	d100      	bne.n	15fd4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15fd2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15fd4:	bf00      	nop
   15fd6:	b003      	add	sp, #12
   15fd8:	f85d fb04 	ldr.w	pc, [sp], #4
   15fdc:	1fff9830 	.word	0x1fff9830
   15fe0:	1fff982c 	.word	0x1fff982c

00015fe4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02(void)
{
   15fe4:	b500      	push	{lr}
   15fe6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15fe8:	f7ea fe76 	bl	cd8 <Sys_GetCoreID>
   15fec:	4603      	mov	r3, r0
   15fee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId])
   15ff0:	4a10      	ldr	r2, [pc, #64]	; (16034 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x50>)
   15ff2:	9b01      	ldr	r3, [sp, #4]
   15ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ff8:	2b00      	cmp	r3, #0
   15ffa:	d10d      	bne.n	16018 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15ffc:	f7ea fcf0 	bl	9e0 <Spi_schm_read_msr>
   16000:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16002:	9b00      	ldr	r3, [sp, #0]
   16004:	f003 0301 	and.w	r3, r3, #1
   16008:	2b00      	cmp	r3, #0
   1600a:	d100      	bne.n	1600e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1600c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   1600e:	490a      	ldr	r1, [pc, #40]	; (16038 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x54>)
   16010:	9b01      	ldr	r3, [sp, #4]
   16012:	9a00      	ldr	r2, [sp, #0]
   16014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId]++;
   16018:	4a06      	ldr	r2, [pc, #24]	; (16034 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x50>)
   1601a:	9b01      	ldr	r3, [sp, #4]
   1601c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16020:	1c5a      	adds	r2, r3, #1
   16022:	4904      	ldr	r1, [pc, #16]	; (16034 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x50>)
   16024:	9b01      	ldr	r3, [sp, #4]
   16026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1602a:	bf00      	nop
   1602c:	b003      	add	sp, #12
   1602e:	f85d fb04 	ldr.w	pc, [sp], #4
   16032:	bf00      	nop
   16034:	1fff9838 	.word	0x1fff9838
   16038:	1fff9834 	.word	0x1fff9834

0001603c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02(void)
{
   1603c:	b500      	push	{lr}
   1603e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16040:	f7ea fe4a 	bl	cd8 <Sys_GetCoreID>
   16044:	4603      	mov	r3, r0
   16046:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId]--;
   16048:	4a0d      	ldr	r2, [pc, #52]	; (16080 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x44>)
   1604a:	9b01      	ldr	r3, [sp, #4]
   1604c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16050:	1e5a      	subs	r2, r3, #1
   16052:	490b      	ldr	r1, [pc, #44]	; (16080 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x44>)
   16054:	9b01      	ldr	r3, [sp, #4]
   16056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   1605a:	4a0a      	ldr	r2, [pc, #40]	; (16084 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x48>)
   1605c:	9b01      	ldr	r3, [sp, #4]
   1605e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16062:	f003 0301 	and.w	r3, r3, #1
   16066:	2b00      	cmp	r3, #0
   16068:	d106      	bne.n	16078 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x3c>
   1606a:	4a05      	ldr	r2, [pc, #20]	; (16080 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x44>)
   1606c:	9b01      	ldr	r3, [sp, #4]
   1606e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16072:	2b00      	cmp	r3, #0
   16074:	d100      	bne.n	16078 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16076:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16078:	bf00      	nop
   1607a:	b003      	add	sp, #12
   1607c:	f85d fb04 	ldr.w	pc, [sp], #4
   16080:	1fff9838 	.word	0x1fff9838
   16084:	1fff9834 	.word	0x1fff9834

00016088 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03(void)
{
   16088:	b500      	push	{lr}
   1608a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1608c:	f7ea fe24 	bl	cd8 <Sys_GetCoreID>
   16090:	4603      	mov	r3, r0
   16092:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId])
   16094:	4a10      	ldr	r2, [pc, #64]	; (160d8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x50>)
   16096:	9b01      	ldr	r3, [sp, #4]
   16098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1609c:	2b00      	cmp	r3, #0
   1609e:	d10d      	bne.n	160bc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   160a0:	f7ea fc9e 	bl	9e0 <Spi_schm_read_msr>
   160a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   160a6:	9b00      	ldr	r3, [sp, #0]
   160a8:	f003 0301 	and.w	r3, r3, #1
   160ac:	2b00      	cmp	r3, #0
   160ae:	d100      	bne.n	160b2 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   160b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   160b2:	490a      	ldr	r1, [pc, #40]	; (160dc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x54>)
   160b4:	9b01      	ldr	r3, [sp, #4]
   160b6:	9a00      	ldr	r2, [sp, #0]
   160b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId]++;
   160bc:	4a06      	ldr	r2, [pc, #24]	; (160d8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x50>)
   160be:	9b01      	ldr	r3, [sp, #4]
   160c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160c4:	1c5a      	adds	r2, r3, #1
   160c6:	4904      	ldr	r1, [pc, #16]	; (160d8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x50>)
   160c8:	9b01      	ldr	r3, [sp, #4]
   160ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   160ce:	bf00      	nop
   160d0:	b003      	add	sp, #12
   160d2:	f85d fb04 	ldr.w	pc, [sp], #4
   160d6:	bf00      	nop
   160d8:	1fff9840 	.word	0x1fff9840
   160dc:	1fff983c 	.word	0x1fff983c

000160e0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03(void)
{
   160e0:	b500      	push	{lr}
   160e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   160e4:	f7ea fdf8 	bl	cd8 <Sys_GetCoreID>
   160e8:	4603      	mov	r3, r0
   160ea:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId]--;
   160ec:	4a0d      	ldr	r2, [pc, #52]	; (16124 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x44>)
   160ee:	9b01      	ldr	r3, [sp, #4]
   160f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160f4:	1e5a      	subs	r2, r3, #1
   160f6:	490b      	ldr	r1, [pc, #44]	; (16124 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x44>)
   160f8:	9b01      	ldr	r3, [sp, #4]
   160fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   160fe:	4a0a      	ldr	r2, [pc, #40]	; (16128 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x48>)
   16100:	9b01      	ldr	r3, [sp, #4]
   16102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16106:	f003 0301 	and.w	r3, r3, #1
   1610a:	2b00      	cmp	r3, #0
   1610c:	d106      	bne.n	1611c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x3c>
   1610e:	4a05      	ldr	r2, [pc, #20]	; (16124 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x44>)
   16110:	9b01      	ldr	r3, [sp, #4]
   16112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16116:	2b00      	cmp	r3, #0
   16118:	d100      	bne.n	1611c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1611a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1611c:	bf00      	nop
   1611e:	b003      	add	sp, #12
   16120:	f85d fb04 	ldr.w	pc, [sp], #4
   16124:	1fff9840 	.word	0x1fff9840
   16128:	1fff983c 	.word	0x1fff983c

0001612c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04(void)
{
   1612c:	b500      	push	{lr}
   1612e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16130:	f7ea fdd2 	bl	cd8 <Sys_GetCoreID>
   16134:	4603      	mov	r3, r0
   16136:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId])
   16138:	4a10      	ldr	r2, [pc, #64]	; (1617c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x50>)
   1613a:	9b01      	ldr	r3, [sp, #4]
   1613c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16140:	2b00      	cmp	r3, #0
   16142:	d10d      	bne.n	16160 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16144:	f7ea fc4c 	bl	9e0 <Spi_schm_read_msr>
   16148:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1614a:	9b00      	ldr	r3, [sp, #0]
   1614c:	f003 0301 	and.w	r3, r3, #1
   16150:	2b00      	cmp	r3, #0
   16152:	d100      	bne.n	16156 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16154:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   16156:	490a      	ldr	r1, [pc, #40]	; (16180 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x54>)
   16158:	9b01      	ldr	r3, [sp, #4]
   1615a:	9a00      	ldr	r2, [sp, #0]
   1615c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId]++;
   16160:	4a06      	ldr	r2, [pc, #24]	; (1617c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x50>)
   16162:	9b01      	ldr	r3, [sp, #4]
   16164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16168:	1c5a      	adds	r2, r3, #1
   1616a:	4904      	ldr	r1, [pc, #16]	; (1617c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x50>)
   1616c:	9b01      	ldr	r3, [sp, #4]
   1616e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16172:	bf00      	nop
   16174:	b003      	add	sp, #12
   16176:	f85d fb04 	ldr.w	pc, [sp], #4
   1617a:	bf00      	nop
   1617c:	1fff9848 	.word	0x1fff9848
   16180:	1fff9844 	.word	0x1fff9844

00016184 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04(void)
{
   16184:	b500      	push	{lr}
   16186:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16188:	f7ea fda6 	bl	cd8 <Sys_GetCoreID>
   1618c:	4603      	mov	r3, r0
   1618e:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId]--;
   16190:	4a0d      	ldr	r2, [pc, #52]	; (161c8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x44>)
   16192:	9b01      	ldr	r3, [sp, #4]
   16194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16198:	1e5a      	subs	r2, r3, #1
   1619a:	490b      	ldr	r1, [pc, #44]	; (161c8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x44>)
   1619c:	9b01      	ldr	r3, [sp, #4]
   1619e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   161a2:	4a0a      	ldr	r2, [pc, #40]	; (161cc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x48>)
   161a4:	9b01      	ldr	r3, [sp, #4]
   161a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161aa:	f003 0301 	and.w	r3, r3, #1
   161ae:	2b00      	cmp	r3, #0
   161b0:	d106      	bne.n	161c0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x3c>
   161b2:	4a05      	ldr	r2, [pc, #20]	; (161c8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x44>)
   161b4:	9b01      	ldr	r3, [sp, #4]
   161b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161ba:	2b00      	cmp	r3, #0
   161bc:	d100      	bne.n	161c0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   161be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   161c0:	bf00      	nop
   161c2:	b003      	add	sp, #12
   161c4:	f85d fb04 	ldr.w	pc, [sp], #4
   161c8:	1fff9848 	.word	0x1fff9848
   161cc:	1fff9844 	.word	0x1fff9844

000161d0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05(void)
{
   161d0:	b500      	push	{lr}
   161d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   161d4:	f7ea fd80 	bl	cd8 <Sys_GetCoreID>
   161d8:	4603      	mov	r3, r0
   161da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId])
   161dc:	4a10      	ldr	r2, [pc, #64]	; (16220 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x50>)
   161de:	9b01      	ldr	r3, [sp, #4]
   161e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161e4:	2b00      	cmp	r3, #0
   161e6:	d10d      	bne.n	16204 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   161e8:	f7ea fbfa 	bl	9e0 <Spi_schm_read_msr>
   161ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   161ee:	9b00      	ldr	r3, [sp, #0]
   161f0:	f003 0301 	and.w	r3, r3, #1
   161f4:	2b00      	cmp	r3, #0
   161f6:	d100      	bne.n	161fa <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   161f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   161fa:	490a      	ldr	r1, [pc, #40]	; (16224 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x54>)
   161fc:	9b01      	ldr	r3, [sp, #4]
   161fe:	9a00      	ldr	r2, [sp, #0]
   16200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId]++;
   16204:	4a06      	ldr	r2, [pc, #24]	; (16220 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x50>)
   16206:	9b01      	ldr	r3, [sp, #4]
   16208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1620c:	1c5a      	adds	r2, r3, #1
   1620e:	4904      	ldr	r1, [pc, #16]	; (16220 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x50>)
   16210:	9b01      	ldr	r3, [sp, #4]
   16212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16216:	bf00      	nop
   16218:	b003      	add	sp, #12
   1621a:	f85d fb04 	ldr.w	pc, [sp], #4
   1621e:	bf00      	nop
   16220:	1fff9850 	.word	0x1fff9850
   16224:	1fff984c 	.word	0x1fff984c

00016228 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05(void)
{
   16228:	b500      	push	{lr}
   1622a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1622c:	f7ea fd54 	bl	cd8 <Sys_GetCoreID>
   16230:	4603      	mov	r3, r0
   16232:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId]--;
   16234:	4a0d      	ldr	r2, [pc, #52]	; (1626c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x44>)
   16236:	9b01      	ldr	r3, [sp, #4]
   16238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1623c:	1e5a      	subs	r2, r3, #1
   1623e:	490b      	ldr	r1, [pc, #44]	; (1626c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x44>)
   16240:	9b01      	ldr	r3, [sp, #4]
   16242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   16246:	4a0a      	ldr	r2, [pc, #40]	; (16270 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x48>)
   16248:	9b01      	ldr	r3, [sp, #4]
   1624a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1624e:	f003 0301 	and.w	r3, r3, #1
   16252:	2b00      	cmp	r3, #0
   16254:	d106      	bne.n	16264 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x3c>
   16256:	4a05      	ldr	r2, [pc, #20]	; (1626c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x44>)
   16258:	9b01      	ldr	r3, [sp, #4]
   1625a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1625e:	2b00      	cmp	r3, #0
   16260:	d100      	bne.n	16264 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16262:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16264:	bf00      	nop
   16266:	b003      	add	sp, #12
   16268:	f85d fb04 	ldr.w	pc, [sp], #4
   1626c:	1fff9850 	.word	0x1fff9850
   16270:	1fff984c 	.word	0x1fff984c

00016274 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06(void)
{
   16274:	b500      	push	{lr}
   16276:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16278:	f7ea fd2e 	bl	cd8 <Sys_GetCoreID>
   1627c:	4603      	mov	r3, r0
   1627e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId])
   16280:	4a10      	ldr	r2, [pc, #64]	; (162c4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x50>)
   16282:	9b01      	ldr	r3, [sp, #4]
   16284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16288:	2b00      	cmp	r3, #0
   1628a:	d10d      	bne.n	162a8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1628c:	f7ea fba8 	bl	9e0 <Spi_schm_read_msr>
   16290:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16292:	9b00      	ldr	r3, [sp, #0]
   16294:	f003 0301 	and.w	r3, r3, #1
   16298:	2b00      	cmp	r3, #0
   1629a:	d100      	bne.n	1629e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1629c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   1629e:	490a      	ldr	r1, [pc, #40]	; (162c8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x54>)
   162a0:	9b01      	ldr	r3, [sp, #4]
   162a2:	9a00      	ldr	r2, [sp, #0]
   162a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId]++;
   162a8:	4a06      	ldr	r2, [pc, #24]	; (162c4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x50>)
   162aa:	9b01      	ldr	r3, [sp, #4]
   162ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162b0:	1c5a      	adds	r2, r3, #1
   162b2:	4904      	ldr	r1, [pc, #16]	; (162c4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x50>)
   162b4:	9b01      	ldr	r3, [sp, #4]
   162b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   162ba:	bf00      	nop
   162bc:	b003      	add	sp, #12
   162be:	f85d fb04 	ldr.w	pc, [sp], #4
   162c2:	bf00      	nop
   162c4:	1fff9858 	.word	0x1fff9858
   162c8:	1fff9854 	.word	0x1fff9854

000162cc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06(void)
{
   162cc:	b500      	push	{lr}
   162ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   162d0:	f7ea fd02 	bl	cd8 <Sys_GetCoreID>
   162d4:	4603      	mov	r3, r0
   162d6:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId]--;
   162d8:	4a0d      	ldr	r2, [pc, #52]	; (16310 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x44>)
   162da:	9b01      	ldr	r3, [sp, #4]
   162dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162e0:	1e5a      	subs	r2, r3, #1
   162e2:	490b      	ldr	r1, [pc, #44]	; (16310 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x44>)
   162e4:	9b01      	ldr	r3, [sp, #4]
   162e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   162ea:	4a0a      	ldr	r2, [pc, #40]	; (16314 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x48>)
   162ec:	9b01      	ldr	r3, [sp, #4]
   162ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162f2:	f003 0301 	and.w	r3, r3, #1
   162f6:	2b00      	cmp	r3, #0
   162f8:	d106      	bne.n	16308 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x3c>
   162fa:	4a05      	ldr	r2, [pc, #20]	; (16310 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x44>)
   162fc:	9b01      	ldr	r3, [sp, #4]
   162fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16302:	2b00      	cmp	r3, #0
   16304:	d100      	bne.n	16308 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16306:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16308:	bf00      	nop
   1630a:	b003      	add	sp, #12
   1630c:	f85d fb04 	ldr.w	pc, [sp], #4
   16310:	1fff9858 	.word	0x1fff9858
   16314:	1fff9854 	.word	0x1fff9854

00016318 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07(void)
{
   16318:	b500      	push	{lr}
   1631a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1631c:	f7ea fcdc 	bl	cd8 <Sys_GetCoreID>
   16320:	4603      	mov	r3, r0
   16322:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId])
   16324:	4a10      	ldr	r2, [pc, #64]	; (16368 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x50>)
   16326:	9b01      	ldr	r3, [sp, #4]
   16328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1632c:	2b00      	cmp	r3, #0
   1632e:	d10d      	bne.n	1634c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16330:	f7ea fb56 	bl	9e0 <Spi_schm_read_msr>
   16334:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16336:	9b00      	ldr	r3, [sp, #0]
   16338:	f003 0301 	and.w	r3, r3, #1
   1633c:	2b00      	cmp	r3, #0
   1633e:	d100      	bne.n	16342 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16340:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   16342:	490a      	ldr	r1, [pc, #40]	; (1636c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x54>)
   16344:	9b01      	ldr	r3, [sp, #4]
   16346:	9a00      	ldr	r2, [sp, #0]
   16348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId]++;
   1634c:	4a06      	ldr	r2, [pc, #24]	; (16368 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x50>)
   1634e:	9b01      	ldr	r3, [sp, #4]
   16350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16354:	1c5a      	adds	r2, r3, #1
   16356:	4904      	ldr	r1, [pc, #16]	; (16368 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x50>)
   16358:	9b01      	ldr	r3, [sp, #4]
   1635a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1635e:	bf00      	nop
   16360:	b003      	add	sp, #12
   16362:	f85d fb04 	ldr.w	pc, [sp], #4
   16366:	bf00      	nop
   16368:	1fff9860 	.word	0x1fff9860
   1636c:	1fff985c 	.word	0x1fff985c

00016370 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07(void)
{
   16370:	b500      	push	{lr}
   16372:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16374:	f7ea fcb0 	bl	cd8 <Sys_GetCoreID>
   16378:	4603      	mov	r3, r0
   1637a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId]--;
   1637c:	4a0d      	ldr	r2, [pc, #52]	; (163b4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x44>)
   1637e:	9b01      	ldr	r3, [sp, #4]
   16380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16384:	1e5a      	subs	r2, r3, #1
   16386:	490b      	ldr	r1, [pc, #44]	; (163b4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x44>)
   16388:	9b01      	ldr	r3, [sp, #4]
   1638a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   1638e:	4a0a      	ldr	r2, [pc, #40]	; (163b8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x48>)
   16390:	9b01      	ldr	r3, [sp, #4]
   16392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16396:	f003 0301 	and.w	r3, r3, #1
   1639a:	2b00      	cmp	r3, #0
   1639c:	d106      	bne.n	163ac <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x3c>
   1639e:	4a05      	ldr	r2, [pc, #20]	; (163b4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x44>)
   163a0:	9b01      	ldr	r3, [sp, #4]
   163a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163a6:	2b00      	cmp	r3, #0
   163a8:	d100      	bne.n	163ac <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   163aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   163ac:	bf00      	nop
   163ae:	b003      	add	sp, #12
   163b0:	f85d fb04 	ldr.w	pc, [sp], #4
   163b4:	1fff9860 	.word	0x1fff9860
   163b8:	1fff985c 	.word	0x1fff985c

000163bc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08(void)
{
   163bc:	b500      	push	{lr}
   163be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   163c0:	f7ea fc8a 	bl	cd8 <Sys_GetCoreID>
   163c4:	4603      	mov	r3, r0
   163c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId])
   163c8:	4a10      	ldr	r2, [pc, #64]	; (1640c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x50>)
   163ca:	9b01      	ldr	r3, [sp, #4]
   163cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163d0:	2b00      	cmp	r3, #0
   163d2:	d10d      	bne.n	163f0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   163d4:	f7ea fb04 	bl	9e0 <Spi_schm_read_msr>
   163d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   163da:	9b00      	ldr	r3, [sp, #0]
   163dc:	f003 0301 	and.w	r3, r3, #1
   163e0:	2b00      	cmp	r3, #0
   163e2:	d100      	bne.n	163e6 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   163e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   163e6:	490a      	ldr	r1, [pc, #40]	; (16410 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x54>)
   163e8:	9b01      	ldr	r3, [sp, #4]
   163ea:	9a00      	ldr	r2, [sp, #0]
   163ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId]++;
   163f0:	4a06      	ldr	r2, [pc, #24]	; (1640c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x50>)
   163f2:	9b01      	ldr	r3, [sp, #4]
   163f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163f8:	1c5a      	adds	r2, r3, #1
   163fa:	4904      	ldr	r1, [pc, #16]	; (1640c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x50>)
   163fc:	9b01      	ldr	r3, [sp, #4]
   163fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16402:	bf00      	nop
   16404:	b003      	add	sp, #12
   16406:	f85d fb04 	ldr.w	pc, [sp], #4
   1640a:	bf00      	nop
   1640c:	1fff9868 	.word	0x1fff9868
   16410:	1fff9864 	.word	0x1fff9864

00016414 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08(void)
{
   16414:	b500      	push	{lr}
   16416:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16418:	f7ea fc5e 	bl	cd8 <Sys_GetCoreID>
   1641c:	4603      	mov	r3, r0
   1641e:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId]--;
   16420:	4a0d      	ldr	r2, [pc, #52]	; (16458 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x44>)
   16422:	9b01      	ldr	r3, [sp, #4]
   16424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16428:	1e5a      	subs	r2, r3, #1
   1642a:	490b      	ldr	r1, [pc, #44]	; (16458 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x44>)
   1642c:	9b01      	ldr	r3, [sp, #4]
   1642e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   16432:	4a0a      	ldr	r2, [pc, #40]	; (1645c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x48>)
   16434:	9b01      	ldr	r3, [sp, #4]
   16436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1643a:	f003 0301 	and.w	r3, r3, #1
   1643e:	2b00      	cmp	r3, #0
   16440:	d106      	bne.n	16450 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x3c>
   16442:	4a05      	ldr	r2, [pc, #20]	; (16458 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x44>)
   16444:	9b01      	ldr	r3, [sp, #4]
   16446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1644a:	2b00      	cmp	r3, #0
   1644c:	d100      	bne.n	16450 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1644e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16450:	bf00      	nop
   16452:	b003      	add	sp, #12
   16454:	f85d fb04 	ldr.w	pc, [sp], #4
   16458:	1fff9868 	.word	0x1fff9868
   1645c:	1fff9864 	.word	0x1fff9864

00016460 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09(void)
{
   16460:	b500      	push	{lr}
   16462:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16464:	f7ea fc38 	bl	cd8 <Sys_GetCoreID>
   16468:	4603      	mov	r3, r0
   1646a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId])
   1646c:	4a10      	ldr	r2, [pc, #64]	; (164b0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x50>)
   1646e:	9b01      	ldr	r3, [sp, #4]
   16470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16474:	2b00      	cmp	r3, #0
   16476:	d10d      	bne.n	16494 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16478:	f7ea fab2 	bl	9e0 <Spi_schm_read_msr>
   1647c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1647e:	9b00      	ldr	r3, [sp, #0]
   16480:	f003 0301 	and.w	r3, r3, #1
   16484:	2b00      	cmp	r3, #0
   16486:	d100      	bne.n	1648a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16488:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   1648a:	490a      	ldr	r1, [pc, #40]	; (164b4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x54>)
   1648c:	9b01      	ldr	r3, [sp, #4]
   1648e:	9a00      	ldr	r2, [sp, #0]
   16490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId]++;
   16494:	4a06      	ldr	r2, [pc, #24]	; (164b0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x50>)
   16496:	9b01      	ldr	r3, [sp, #4]
   16498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1649c:	1c5a      	adds	r2, r3, #1
   1649e:	4904      	ldr	r1, [pc, #16]	; (164b0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x50>)
   164a0:	9b01      	ldr	r3, [sp, #4]
   164a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   164a6:	bf00      	nop
   164a8:	b003      	add	sp, #12
   164aa:	f85d fb04 	ldr.w	pc, [sp], #4
   164ae:	bf00      	nop
   164b0:	1fff9870 	.word	0x1fff9870
   164b4:	1fff986c 	.word	0x1fff986c

000164b8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09(void)
{
   164b8:	b500      	push	{lr}
   164ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   164bc:	f7ea fc0c 	bl	cd8 <Sys_GetCoreID>
   164c0:	4603      	mov	r3, r0
   164c2:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId]--;
   164c4:	4a0d      	ldr	r2, [pc, #52]	; (164fc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x44>)
   164c6:	9b01      	ldr	r3, [sp, #4]
   164c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164cc:	1e5a      	subs	r2, r3, #1
   164ce:	490b      	ldr	r1, [pc, #44]	; (164fc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x44>)
   164d0:	9b01      	ldr	r3, [sp, #4]
   164d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   164d6:	4a0a      	ldr	r2, [pc, #40]	; (16500 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x48>)
   164d8:	9b01      	ldr	r3, [sp, #4]
   164da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164de:	f003 0301 	and.w	r3, r3, #1
   164e2:	2b00      	cmp	r3, #0
   164e4:	d106      	bne.n	164f4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x3c>
   164e6:	4a05      	ldr	r2, [pc, #20]	; (164fc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x44>)
   164e8:	9b01      	ldr	r3, [sp, #4]
   164ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164ee:	2b00      	cmp	r3, #0
   164f0:	d100      	bne.n	164f4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   164f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   164f4:	bf00      	nop
   164f6:	b003      	add	sp, #12
   164f8:	f85d fb04 	ldr.w	pc, [sp], #4
   164fc:	1fff9870 	.word	0x1fff9870
   16500:	1fff986c 	.word	0x1fff986c

00016504 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10(void)
{
   16504:	b500      	push	{lr}
   16506:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16508:	f7ea fbe6 	bl	cd8 <Sys_GetCoreID>
   1650c:	4603      	mov	r3, r0
   1650e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId])
   16510:	4a10      	ldr	r2, [pc, #64]	; (16554 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x50>)
   16512:	9b01      	ldr	r3, [sp, #4]
   16514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16518:	2b00      	cmp	r3, #0
   1651a:	d10d      	bne.n	16538 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1651c:	f7ea fa60 	bl	9e0 <Spi_schm_read_msr>
   16520:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16522:	9b00      	ldr	r3, [sp, #0]
   16524:	f003 0301 	and.w	r3, r3, #1
   16528:	2b00      	cmp	r3, #0
   1652a:	d100      	bne.n	1652e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1652c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   1652e:	490a      	ldr	r1, [pc, #40]	; (16558 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x54>)
   16530:	9b01      	ldr	r3, [sp, #4]
   16532:	9a00      	ldr	r2, [sp, #0]
   16534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId]++;
   16538:	4a06      	ldr	r2, [pc, #24]	; (16554 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x50>)
   1653a:	9b01      	ldr	r3, [sp, #4]
   1653c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16540:	1c5a      	adds	r2, r3, #1
   16542:	4904      	ldr	r1, [pc, #16]	; (16554 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x50>)
   16544:	9b01      	ldr	r3, [sp, #4]
   16546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1654a:	bf00      	nop
   1654c:	b003      	add	sp, #12
   1654e:	f85d fb04 	ldr.w	pc, [sp], #4
   16552:	bf00      	nop
   16554:	1fff9878 	.word	0x1fff9878
   16558:	1fff9874 	.word	0x1fff9874

0001655c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10(void)
{
   1655c:	b500      	push	{lr}
   1655e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16560:	f7ea fbba 	bl	cd8 <Sys_GetCoreID>
   16564:	4603      	mov	r3, r0
   16566:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId]--;
   16568:	4a0d      	ldr	r2, [pc, #52]	; (165a0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x44>)
   1656a:	9b01      	ldr	r3, [sp, #4]
   1656c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16570:	1e5a      	subs	r2, r3, #1
   16572:	490b      	ldr	r1, [pc, #44]	; (165a0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x44>)
   16574:	9b01      	ldr	r3, [sp, #4]
   16576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   1657a:	4a0a      	ldr	r2, [pc, #40]	; (165a4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x48>)
   1657c:	9b01      	ldr	r3, [sp, #4]
   1657e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16582:	f003 0301 	and.w	r3, r3, #1
   16586:	2b00      	cmp	r3, #0
   16588:	d106      	bne.n	16598 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x3c>
   1658a:	4a05      	ldr	r2, [pc, #20]	; (165a0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x44>)
   1658c:	9b01      	ldr	r3, [sp, #4]
   1658e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16592:	2b00      	cmp	r3, #0
   16594:	d100      	bne.n	16598 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16596:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16598:	bf00      	nop
   1659a:	b003      	add	sp, #12
   1659c:	f85d fb04 	ldr.w	pc, [sp], #4
   165a0:	1fff9878 	.word	0x1fff9878
   165a4:	1fff9874 	.word	0x1fff9874

000165a8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11(void)
{
   165a8:	b500      	push	{lr}
   165aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   165ac:	f7ea fb94 	bl	cd8 <Sys_GetCoreID>
   165b0:	4603      	mov	r3, r0
   165b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId])
   165b4:	4a10      	ldr	r2, [pc, #64]	; (165f8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x50>)
   165b6:	9b01      	ldr	r3, [sp, #4]
   165b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165bc:	2b00      	cmp	r3, #0
   165be:	d10d      	bne.n	165dc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   165c0:	f7ea fa0e 	bl	9e0 <Spi_schm_read_msr>
   165c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   165c6:	9b00      	ldr	r3, [sp, #0]
   165c8:	f003 0301 	and.w	r3, r3, #1
   165cc:	2b00      	cmp	r3, #0
   165ce:	d100      	bne.n	165d2 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   165d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   165d2:	490a      	ldr	r1, [pc, #40]	; (165fc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x54>)
   165d4:	9b01      	ldr	r3, [sp, #4]
   165d6:	9a00      	ldr	r2, [sp, #0]
   165d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId]++;
   165dc:	4a06      	ldr	r2, [pc, #24]	; (165f8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x50>)
   165de:	9b01      	ldr	r3, [sp, #4]
   165e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165e4:	1c5a      	adds	r2, r3, #1
   165e6:	4904      	ldr	r1, [pc, #16]	; (165f8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x50>)
   165e8:	9b01      	ldr	r3, [sp, #4]
   165ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   165ee:	bf00      	nop
   165f0:	b003      	add	sp, #12
   165f2:	f85d fb04 	ldr.w	pc, [sp], #4
   165f6:	bf00      	nop
   165f8:	1fff9880 	.word	0x1fff9880
   165fc:	1fff987c 	.word	0x1fff987c

00016600 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11(void)
{
   16600:	b500      	push	{lr}
   16602:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16604:	f7ea fb68 	bl	cd8 <Sys_GetCoreID>
   16608:	4603      	mov	r3, r0
   1660a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId]--;
   1660c:	4a0d      	ldr	r2, [pc, #52]	; (16644 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x44>)
   1660e:	9b01      	ldr	r3, [sp, #4]
   16610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16614:	1e5a      	subs	r2, r3, #1
   16616:	490b      	ldr	r1, [pc, #44]	; (16644 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x44>)
   16618:	9b01      	ldr	r3, [sp, #4]
   1661a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   1661e:	4a0a      	ldr	r2, [pc, #40]	; (16648 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x48>)
   16620:	9b01      	ldr	r3, [sp, #4]
   16622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16626:	f003 0301 	and.w	r3, r3, #1
   1662a:	2b00      	cmp	r3, #0
   1662c:	d106      	bne.n	1663c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x3c>
   1662e:	4a05      	ldr	r2, [pc, #20]	; (16644 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x44>)
   16630:	9b01      	ldr	r3, [sp, #4]
   16632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16636:	2b00      	cmp	r3, #0
   16638:	d100      	bne.n	1663c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1663a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1663c:	bf00      	nop
   1663e:	b003      	add	sp, #12
   16640:	f85d fb04 	ldr.w	pc, [sp], #4
   16644:	1fff9880 	.word	0x1fff9880
   16648:	1fff987c 	.word	0x1fff987c

0001664c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12(void)
{
   1664c:	b500      	push	{lr}
   1664e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16650:	f7ea fb42 	bl	cd8 <Sys_GetCoreID>
   16654:	4603      	mov	r3, r0
   16656:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId])
   16658:	4a10      	ldr	r2, [pc, #64]	; (1669c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x50>)
   1665a:	9b01      	ldr	r3, [sp, #4]
   1665c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16660:	2b00      	cmp	r3, #0
   16662:	d10d      	bne.n	16680 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16664:	f7ea f9bc 	bl	9e0 <Spi_schm_read_msr>
   16668:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1666a:	9b00      	ldr	r3, [sp, #0]
   1666c:	f003 0301 	and.w	r3, r3, #1
   16670:	2b00      	cmp	r3, #0
   16672:	d100      	bne.n	16676 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16674:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   16676:	490a      	ldr	r1, [pc, #40]	; (166a0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x54>)
   16678:	9b01      	ldr	r3, [sp, #4]
   1667a:	9a00      	ldr	r2, [sp, #0]
   1667c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId]++;
   16680:	4a06      	ldr	r2, [pc, #24]	; (1669c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x50>)
   16682:	9b01      	ldr	r3, [sp, #4]
   16684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16688:	1c5a      	adds	r2, r3, #1
   1668a:	4904      	ldr	r1, [pc, #16]	; (1669c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x50>)
   1668c:	9b01      	ldr	r3, [sp, #4]
   1668e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16692:	bf00      	nop
   16694:	b003      	add	sp, #12
   16696:	f85d fb04 	ldr.w	pc, [sp], #4
   1669a:	bf00      	nop
   1669c:	1fff9888 	.word	0x1fff9888
   166a0:	1fff9884 	.word	0x1fff9884

000166a4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12(void)
{
   166a4:	b500      	push	{lr}
   166a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   166a8:	f7ea fb16 	bl	cd8 <Sys_GetCoreID>
   166ac:	4603      	mov	r3, r0
   166ae:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId]--;
   166b0:	4a0d      	ldr	r2, [pc, #52]	; (166e8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x44>)
   166b2:	9b01      	ldr	r3, [sp, #4]
   166b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166b8:	1e5a      	subs	r2, r3, #1
   166ba:	490b      	ldr	r1, [pc, #44]	; (166e8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x44>)
   166bc:	9b01      	ldr	r3, [sp, #4]
   166be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   166c2:	4a0a      	ldr	r2, [pc, #40]	; (166ec <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x48>)
   166c4:	9b01      	ldr	r3, [sp, #4]
   166c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166ca:	f003 0301 	and.w	r3, r3, #1
   166ce:	2b00      	cmp	r3, #0
   166d0:	d106      	bne.n	166e0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x3c>
   166d2:	4a05      	ldr	r2, [pc, #20]	; (166e8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x44>)
   166d4:	9b01      	ldr	r3, [sp, #4]
   166d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166da:	2b00      	cmp	r3, #0
   166dc:	d100      	bne.n	166e0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   166de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   166e0:	bf00      	nop
   166e2:	b003      	add	sp, #12
   166e4:	f85d fb04 	ldr.w	pc, [sp], #4
   166e8:	1fff9888 	.word	0x1fff9888
   166ec:	1fff9884 	.word	0x1fff9884

000166f0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13(void)
{
   166f0:	b500      	push	{lr}
   166f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   166f4:	f7ea faf0 	bl	cd8 <Sys_GetCoreID>
   166f8:	4603      	mov	r3, r0
   166fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId])
   166fc:	4a10      	ldr	r2, [pc, #64]	; (16740 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x50>)
   166fe:	9b01      	ldr	r3, [sp, #4]
   16700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16704:	2b00      	cmp	r3, #0
   16706:	d10d      	bne.n	16724 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16708:	f7ea f96a 	bl	9e0 <Spi_schm_read_msr>
   1670c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1670e:	9b00      	ldr	r3, [sp, #0]
   16710:	f003 0301 	and.w	r3, r3, #1
   16714:	2b00      	cmp	r3, #0
   16716:	d100      	bne.n	1671a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16718:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   1671a:	490a      	ldr	r1, [pc, #40]	; (16744 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x54>)
   1671c:	9b01      	ldr	r3, [sp, #4]
   1671e:	9a00      	ldr	r2, [sp, #0]
   16720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId]++;
   16724:	4a06      	ldr	r2, [pc, #24]	; (16740 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x50>)
   16726:	9b01      	ldr	r3, [sp, #4]
   16728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1672c:	1c5a      	adds	r2, r3, #1
   1672e:	4904      	ldr	r1, [pc, #16]	; (16740 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x50>)
   16730:	9b01      	ldr	r3, [sp, #4]
   16732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16736:	bf00      	nop
   16738:	b003      	add	sp, #12
   1673a:	f85d fb04 	ldr.w	pc, [sp], #4
   1673e:	bf00      	nop
   16740:	1fff9890 	.word	0x1fff9890
   16744:	1fff988c 	.word	0x1fff988c

00016748 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13(void)
{
   16748:	b500      	push	{lr}
   1674a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1674c:	f7ea fac4 	bl	cd8 <Sys_GetCoreID>
   16750:	4603      	mov	r3, r0
   16752:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId]--;
   16754:	4a0d      	ldr	r2, [pc, #52]	; (1678c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x44>)
   16756:	9b01      	ldr	r3, [sp, #4]
   16758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1675c:	1e5a      	subs	r2, r3, #1
   1675e:	490b      	ldr	r1, [pc, #44]	; (1678c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x44>)
   16760:	9b01      	ldr	r3, [sp, #4]
   16762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   16766:	4a0a      	ldr	r2, [pc, #40]	; (16790 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x48>)
   16768:	9b01      	ldr	r3, [sp, #4]
   1676a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1676e:	f003 0301 	and.w	r3, r3, #1
   16772:	2b00      	cmp	r3, #0
   16774:	d106      	bne.n	16784 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x3c>
   16776:	4a05      	ldr	r2, [pc, #20]	; (1678c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x44>)
   16778:	9b01      	ldr	r3, [sp, #4]
   1677a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1677e:	2b00      	cmp	r3, #0
   16780:	d100      	bne.n	16784 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16782:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16784:	bf00      	nop
   16786:	b003      	add	sp, #12
   16788:	f85d fb04 	ldr.w	pc, [sp], #4
   1678c:	1fff9890 	.word	0x1fff9890
   16790:	1fff988c 	.word	0x1fff988c

00016794 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14(void)
{
   16794:	b500      	push	{lr}
   16796:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16798:	f7ea fa9e 	bl	cd8 <Sys_GetCoreID>
   1679c:	4603      	mov	r3, r0
   1679e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId])
   167a0:	4a10      	ldr	r2, [pc, #64]	; (167e4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x50>)
   167a2:	9b01      	ldr	r3, [sp, #4]
   167a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167a8:	2b00      	cmp	r3, #0
   167aa:	d10d      	bne.n	167c8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   167ac:	f7ea f918 	bl	9e0 <Spi_schm_read_msr>
   167b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   167b2:	9b00      	ldr	r3, [sp, #0]
   167b4:	f003 0301 	and.w	r3, r3, #1
   167b8:	2b00      	cmp	r3, #0
   167ba:	d100      	bne.n	167be <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   167bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   167be:	490a      	ldr	r1, [pc, #40]	; (167e8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x54>)
   167c0:	9b01      	ldr	r3, [sp, #4]
   167c2:	9a00      	ldr	r2, [sp, #0]
   167c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId]++;
   167c8:	4a06      	ldr	r2, [pc, #24]	; (167e4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x50>)
   167ca:	9b01      	ldr	r3, [sp, #4]
   167cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167d0:	1c5a      	adds	r2, r3, #1
   167d2:	4904      	ldr	r1, [pc, #16]	; (167e4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x50>)
   167d4:	9b01      	ldr	r3, [sp, #4]
   167d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   167da:	bf00      	nop
   167dc:	b003      	add	sp, #12
   167de:	f85d fb04 	ldr.w	pc, [sp], #4
   167e2:	bf00      	nop
   167e4:	1fff9898 	.word	0x1fff9898
   167e8:	1fff9894 	.word	0x1fff9894

000167ec <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14(void)
{
   167ec:	b500      	push	{lr}
   167ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   167f0:	f7ea fa72 	bl	cd8 <Sys_GetCoreID>
   167f4:	4603      	mov	r3, r0
   167f6:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId]--;
   167f8:	4a0d      	ldr	r2, [pc, #52]	; (16830 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x44>)
   167fa:	9b01      	ldr	r3, [sp, #4]
   167fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16800:	1e5a      	subs	r2, r3, #1
   16802:	490b      	ldr	r1, [pc, #44]	; (16830 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x44>)
   16804:	9b01      	ldr	r3, [sp, #4]
   16806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   1680a:	4a0a      	ldr	r2, [pc, #40]	; (16834 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x48>)
   1680c:	9b01      	ldr	r3, [sp, #4]
   1680e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16812:	f003 0301 	and.w	r3, r3, #1
   16816:	2b00      	cmp	r3, #0
   16818:	d106      	bne.n	16828 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x3c>
   1681a:	4a05      	ldr	r2, [pc, #20]	; (16830 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x44>)
   1681c:	9b01      	ldr	r3, [sp, #4]
   1681e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16822:	2b00      	cmp	r3, #0
   16824:	d100      	bne.n	16828 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16826:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16828:	bf00      	nop
   1682a:	b003      	add	sp, #12
   1682c:	f85d fb04 	ldr.w	pc, [sp], #4
   16830:	1fff9898 	.word	0x1fff9898
   16834:	1fff9894 	.word	0x1fff9894

00016838 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15(void)
{
   16838:	b500      	push	{lr}
   1683a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1683c:	f7ea fa4c 	bl	cd8 <Sys_GetCoreID>
   16840:	4603      	mov	r3, r0
   16842:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId])
   16844:	4a10      	ldr	r2, [pc, #64]	; (16888 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x50>)
   16846:	9b01      	ldr	r3, [sp, #4]
   16848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1684c:	2b00      	cmp	r3, #0
   1684e:	d10d      	bne.n	1686c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16850:	f7ea f8c6 	bl	9e0 <Spi_schm_read_msr>
   16854:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16856:	9b00      	ldr	r3, [sp, #0]
   16858:	f003 0301 	and.w	r3, r3, #1
   1685c:	2b00      	cmp	r3, #0
   1685e:	d100      	bne.n	16862 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16860:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   16862:	490a      	ldr	r1, [pc, #40]	; (1688c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x54>)
   16864:	9b01      	ldr	r3, [sp, #4]
   16866:	9a00      	ldr	r2, [sp, #0]
   16868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId]++;
   1686c:	4a06      	ldr	r2, [pc, #24]	; (16888 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x50>)
   1686e:	9b01      	ldr	r3, [sp, #4]
   16870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16874:	1c5a      	adds	r2, r3, #1
   16876:	4904      	ldr	r1, [pc, #16]	; (16888 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x50>)
   16878:	9b01      	ldr	r3, [sp, #4]
   1687a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1687e:	bf00      	nop
   16880:	b003      	add	sp, #12
   16882:	f85d fb04 	ldr.w	pc, [sp], #4
   16886:	bf00      	nop
   16888:	1fff98a0 	.word	0x1fff98a0
   1688c:	1fff989c 	.word	0x1fff989c

00016890 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15(void)
{
   16890:	b500      	push	{lr}
   16892:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16894:	f7ea fa20 	bl	cd8 <Sys_GetCoreID>
   16898:	4603      	mov	r3, r0
   1689a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId]--;
   1689c:	4a0d      	ldr	r2, [pc, #52]	; (168d4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x44>)
   1689e:	9b01      	ldr	r3, [sp, #4]
   168a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   168a4:	1e5a      	subs	r2, r3, #1
   168a6:	490b      	ldr	r1, [pc, #44]	; (168d4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x44>)
   168a8:	9b01      	ldr	r3, [sp, #4]
   168aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   168ae:	4a0a      	ldr	r2, [pc, #40]	; (168d8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x48>)
   168b0:	9b01      	ldr	r3, [sp, #4]
   168b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   168b6:	f003 0301 	and.w	r3, r3, #1
   168ba:	2b00      	cmp	r3, #0
   168bc:	d106      	bne.n	168cc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x3c>
   168be:	4a05      	ldr	r2, [pc, #20]	; (168d4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x44>)
   168c0:	9b01      	ldr	r3, [sp, #4]
   168c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   168c6:	2b00      	cmp	r3, #0
   168c8:	d100      	bne.n	168cc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   168ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   168cc:	bf00      	nop
   168ce:	b003      	add	sp, #12
   168d0:	f85d fb04 	ldr.w	pc, [sp], #4
   168d4:	1fff98a0 	.word	0x1fff98a0
   168d8:	1fff989c 	.word	0x1fff989c

000168dc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16(void)
{
   168dc:	b500      	push	{lr}
   168de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   168e0:	f7ea f9fa 	bl	cd8 <Sys_GetCoreID>
   168e4:	4603      	mov	r3, r0
   168e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId])
   168e8:	4a10      	ldr	r2, [pc, #64]	; (1692c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x50>)
   168ea:	9b01      	ldr	r3, [sp, #4]
   168ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   168f0:	2b00      	cmp	r3, #0
   168f2:	d10d      	bne.n	16910 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   168f4:	f7ea f874 	bl	9e0 <Spi_schm_read_msr>
   168f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   168fa:	9b00      	ldr	r3, [sp, #0]
   168fc:	f003 0301 	and.w	r3, r3, #1
   16900:	2b00      	cmp	r3, #0
   16902:	d100      	bne.n	16906 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16904:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   16906:	490a      	ldr	r1, [pc, #40]	; (16930 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x54>)
   16908:	9b01      	ldr	r3, [sp, #4]
   1690a:	9a00      	ldr	r2, [sp, #0]
   1690c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId]++;
   16910:	4a06      	ldr	r2, [pc, #24]	; (1692c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x50>)
   16912:	9b01      	ldr	r3, [sp, #4]
   16914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16918:	1c5a      	adds	r2, r3, #1
   1691a:	4904      	ldr	r1, [pc, #16]	; (1692c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x50>)
   1691c:	9b01      	ldr	r3, [sp, #4]
   1691e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16922:	bf00      	nop
   16924:	b003      	add	sp, #12
   16926:	f85d fb04 	ldr.w	pc, [sp], #4
   1692a:	bf00      	nop
   1692c:	1fff98a8 	.word	0x1fff98a8
   16930:	1fff98a4 	.word	0x1fff98a4

00016934 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16(void)
{
   16934:	b500      	push	{lr}
   16936:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16938:	f7ea f9ce 	bl	cd8 <Sys_GetCoreID>
   1693c:	4603      	mov	r3, r0
   1693e:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId]--;
   16940:	4a0d      	ldr	r2, [pc, #52]	; (16978 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x44>)
   16942:	9b01      	ldr	r3, [sp, #4]
   16944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16948:	1e5a      	subs	r2, r3, #1
   1694a:	490b      	ldr	r1, [pc, #44]	; (16978 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x44>)
   1694c:	9b01      	ldr	r3, [sp, #4]
   1694e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   16952:	4a0a      	ldr	r2, [pc, #40]	; (1697c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x48>)
   16954:	9b01      	ldr	r3, [sp, #4]
   16956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1695a:	f003 0301 	and.w	r3, r3, #1
   1695e:	2b00      	cmp	r3, #0
   16960:	d106      	bne.n	16970 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x3c>
   16962:	4a05      	ldr	r2, [pc, #20]	; (16978 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x44>)
   16964:	9b01      	ldr	r3, [sp, #4]
   16966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1696a:	2b00      	cmp	r3, #0
   1696c:	d100      	bne.n	16970 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1696e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16970:	bf00      	nop
   16972:	b003      	add	sp, #12
   16974:	f85d fb04 	ldr.w	pc, [sp], #4
   16978:	1fff98a8 	.word	0x1fff98a8
   1697c:	1fff98a4 	.word	0x1fff98a4

00016980 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17(void)
{
   16980:	b500      	push	{lr}
   16982:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16984:	f7ea f9a8 	bl	cd8 <Sys_GetCoreID>
   16988:	4603      	mov	r3, r0
   1698a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId])
   1698c:	4a10      	ldr	r2, [pc, #64]	; (169d0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x50>)
   1698e:	9b01      	ldr	r3, [sp, #4]
   16990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16994:	2b00      	cmp	r3, #0
   16996:	d10d      	bne.n	169b4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16998:	f7ea f822 	bl	9e0 <Spi_schm_read_msr>
   1699c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1699e:	9b00      	ldr	r3, [sp, #0]
   169a0:	f003 0301 	and.w	r3, r3, #1
   169a4:	2b00      	cmp	r3, #0
   169a6:	d100      	bne.n	169aa <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   169a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   169aa:	490a      	ldr	r1, [pc, #40]	; (169d4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x54>)
   169ac:	9b01      	ldr	r3, [sp, #4]
   169ae:	9a00      	ldr	r2, [sp, #0]
   169b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId]++;
   169b4:	4a06      	ldr	r2, [pc, #24]	; (169d0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x50>)
   169b6:	9b01      	ldr	r3, [sp, #4]
   169b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169bc:	1c5a      	adds	r2, r3, #1
   169be:	4904      	ldr	r1, [pc, #16]	; (169d0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x50>)
   169c0:	9b01      	ldr	r3, [sp, #4]
   169c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   169c6:	bf00      	nop
   169c8:	b003      	add	sp, #12
   169ca:	f85d fb04 	ldr.w	pc, [sp], #4
   169ce:	bf00      	nop
   169d0:	1fff98b0 	.word	0x1fff98b0
   169d4:	1fff98ac 	.word	0x1fff98ac

000169d8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17(void)
{
   169d8:	b500      	push	{lr}
   169da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   169dc:	f7ea f97c 	bl	cd8 <Sys_GetCoreID>
   169e0:	4603      	mov	r3, r0
   169e2:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId]--;
   169e4:	4a0d      	ldr	r2, [pc, #52]	; (16a1c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x44>)
   169e6:	9b01      	ldr	r3, [sp, #4]
   169e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169ec:	1e5a      	subs	r2, r3, #1
   169ee:	490b      	ldr	r1, [pc, #44]	; (16a1c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x44>)
   169f0:	9b01      	ldr	r3, [sp, #4]
   169f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   169f6:	4a0a      	ldr	r2, [pc, #40]	; (16a20 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x48>)
   169f8:	9b01      	ldr	r3, [sp, #4]
   169fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169fe:	f003 0301 	and.w	r3, r3, #1
   16a02:	2b00      	cmp	r3, #0
   16a04:	d106      	bne.n	16a14 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x3c>
   16a06:	4a05      	ldr	r2, [pc, #20]	; (16a1c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x44>)
   16a08:	9b01      	ldr	r3, [sp, #4]
   16a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a0e:	2b00      	cmp	r3, #0
   16a10:	d100      	bne.n	16a14 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16a12:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16a14:	bf00      	nop
   16a16:	b003      	add	sp, #12
   16a18:	f85d fb04 	ldr.w	pc, [sp], #4
   16a1c:	1fff98b0 	.word	0x1fff98b0
   16a20:	1fff98ac 	.word	0x1fff98ac

00016a24 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18(void)
{
   16a24:	b500      	push	{lr}
   16a26:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16a28:	f7ea f956 	bl	cd8 <Sys_GetCoreID>
   16a2c:	4603      	mov	r3, r0
   16a2e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId])
   16a30:	4a10      	ldr	r2, [pc, #64]	; (16a74 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x50>)
   16a32:	9b01      	ldr	r3, [sp, #4]
   16a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a38:	2b00      	cmp	r3, #0
   16a3a:	d10d      	bne.n	16a58 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16a3c:	f7e9 ffd0 	bl	9e0 <Spi_schm_read_msr>
   16a40:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16a42:	9b00      	ldr	r3, [sp, #0]
   16a44:	f003 0301 	and.w	r3, r3, #1
   16a48:	2b00      	cmp	r3, #0
   16a4a:	d100      	bne.n	16a4e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16a4c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   16a4e:	490a      	ldr	r1, [pc, #40]	; (16a78 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x54>)
   16a50:	9b01      	ldr	r3, [sp, #4]
   16a52:	9a00      	ldr	r2, [sp, #0]
   16a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId]++;
   16a58:	4a06      	ldr	r2, [pc, #24]	; (16a74 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x50>)
   16a5a:	9b01      	ldr	r3, [sp, #4]
   16a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a60:	1c5a      	adds	r2, r3, #1
   16a62:	4904      	ldr	r1, [pc, #16]	; (16a74 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x50>)
   16a64:	9b01      	ldr	r3, [sp, #4]
   16a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16a6a:	bf00      	nop
   16a6c:	b003      	add	sp, #12
   16a6e:	f85d fb04 	ldr.w	pc, [sp], #4
   16a72:	bf00      	nop
   16a74:	1fff98b8 	.word	0x1fff98b8
   16a78:	1fff98b4 	.word	0x1fff98b4

00016a7c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18(void)
{
   16a7c:	b500      	push	{lr}
   16a7e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16a80:	f7ea f92a 	bl	cd8 <Sys_GetCoreID>
   16a84:	4603      	mov	r3, r0
   16a86:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId]--;
   16a88:	4a0d      	ldr	r2, [pc, #52]	; (16ac0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x44>)
   16a8a:	9b01      	ldr	r3, [sp, #4]
   16a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a90:	1e5a      	subs	r2, r3, #1
   16a92:	490b      	ldr	r1, [pc, #44]	; (16ac0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x44>)
   16a94:	9b01      	ldr	r3, [sp, #4]
   16a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   16a9a:	4a0a      	ldr	r2, [pc, #40]	; (16ac4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x48>)
   16a9c:	9b01      	ldr	r3, [sp, #4]
   16a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16aa2:	f003 0301 	and.w	r3, r3, #1
   16aa6:	2b00      	cmp	r3, #0
   16aa8:	d106      	bne.n	16ab8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x3c>
   16aaa:	4a05      	ldr	r2, [pc, #20]	; (16ac0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x44>)
   16aac:	9b01      	ldr	r3, [sp, #4]
   16aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16ab2:	2b00      	cmp	r3, #0
   16ab4:	d100      	bne.n	16ab8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16ab6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16ab8:	bf00      	nop
   16aba:	b003      	add	sp, #12
   16abc:	f85d fb04 	ldr.w	pc, [sp], #4
   16ac0:	1fff98b8 	.word	0x1fff98b8
   16ac4:	1fff98b4 	.word	0x1fff98b4

00016ac8 <Det_Init>:
*
* @requirements   DET008
*
*/
void Det_Init(void)
{
   16ac8:	b508      	push	{r3, lr}
    SEGGER_RTT_Init();  //Initializing RTT library.
   16aca:	f7ea faa3 	bl	1014 <SEGGER_RTT_Init>
}
   16ace:	bf00      	nop
   16ad0:	bd08      	pop	{r3, pc}

00016ad2 <Det_SearchApi>:
 * @param[in] ApiId Api id where error was detected.
 * @return StringPtr Ptr to string of api name.
 * 
 * @note If the Api Id isn´t registered in the hash table it will return NULL; 
 */
const char* Det_SearchApi( uint8 ModuleIndex, uint8 ApiId ) {
   16ad2:	b084      	sub	sp, #16
   16ad4:	4603      	mov	r3, r0
   16ad6:	460a      	mov	r2, r1
   16ad8:	f88d 3007 	strb.w	r3, [sp, #7]
   16adc:	4613      	mov	r3, r2
   16ade:	f88d 3006 	strb.w	r3, [sp, #6]
    //local data.
    uint8 i = 0;
   16ae2:	2300      	movs	r3, #0
   16ae4:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   16ae8:	2300      	movs	r3, #0
   16aea:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Apis; i++ ) { //Searching for api.
   16aec:	2300      	movs	r3, #0
   16aee:	f88d 300f 	strb.w	r3, [sp, #15]
   16af2:	e026      	b.n	16b42 <Det_SearchApi+0x70>
        if ( ModuleStrings_Ptr[ ModuleIndex ].ApiNames[i].ApiId == ApiId ) {
   16af4:	491b      	ldr	r1, [pc, #108]	; (16b64 <Det_SearchApi+0x92>)
   16af6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16afa:	4613      	mov	r3, r2
   16afc:	005b      	lsls	r3, r3, #1
   16afe:	4413      	add	r3, r2
   16b00:	00db      	lsls	r3, r3, #3
   16b02:	440b      	add	r3, r1
   16b04:	68da      	ldr	r2, [r3, #12]
   16b06:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16b0a:	00db      	lsls	r3, r3, #3
   16b0c:	4413      	add	r3, r2
   16b0e:	781b      	ldrb	r3, [r3, #0]
   16b10:	f89d 2006 	ldrb.w	r2, [sp, #6]
   16b14:	429a      	cmp	r2, r3
   16b16:	d10f      	bne.n	16b38 <Det_SearchApi+0x66>
            StringPtr = ModuleStrings_Ptr[ ModuleIndex ].ApiNames[i].ApiName;
   16b18:	4912      	ldr	r1, [pc, #72]	; (16b64 <Det_SearchApi+0x92>)
   16b1a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16b1e:	4613      	mov	r3, r2
   16b20:	005b      	lsls	r3, r3, #1
   16b22:	4413      	add	r3, r2
   16b24:	00db      	lsls	r3, r3, #3
   16b26:	440b      	add	r3, r1
   16b28:	68da      	ldr	r2, [r3, #12]
   16b2a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16b2e:	00db      	lsls	r3, r3, #3
   16b30:	4413      	add	r3, r2
   16b32:	685b      	ldr	r3, [r3, #4]
   16b34:	9302      	str	r3, [sp, #8]
            break;
   16b36:	e011      	b.n	16b5c <Det_SearchApi+0x8a>
    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Apis; i++ ) { //Searching for api.
   16b38:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16b3c:	3301      	adds	r3, #1
   16b3e:	f88d 300f 	strb.w	r3, [sp, #15]
   16b42:	4908      	ldr	r1, [pc, #32]	; (16b64 <Det_SearchApi+0x92>)
   16b44:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16b48:	4613      	mov	r3, r2
   16b4a:	005b      	lsls	r3, r3, #1
   16b4c:	4413      	add	r3, r2
   16b4e:	00db      	lsls	r3, r3, #3
   16b50:	440b      	add	r3, r1
   16b52:	7a1b      	ldrb	r3, [r3, #8]
   16b54:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16b58:	429a      	cmp	r2, r3
   16b5a:	d3cb      	bcc.n	16af4 <Det_SearchApi+0x22>
        }
    }

    return StringPtr;
   16b5c:	9b02      	ldr	r3, [sp, #8]
}
   16b5e:	4618      	mov	r0, r3
   16b60:	b004      	add	sp, #16
   16b62:	4770      	bx	lr
   16b64:	00018a3c 	.word	0x00018a3c

00016b68 <Det_SearchError>:
 * @param[in] ErrorId Error id reported.
 * @return StringPtr Ptr to string of error meaning.
 * 
 * @note If the Error Id isn´t registered in the hash table it will return NULL; 
 */
const char* Det_SearchError( uint8 ModuleIndex, uint8 ErrorId ) {
   16b68:	b084      	sub	sp, #16
   16b6a:	4603      	mov	r3, r0
   16b6c:	460a      	mov	r2, r1
   16b6e:	f88d 3007 	strb.w	r3, [sp, #7]
   16b72:	4613      	mov	r3, r2
   16b74:	f88d 3006 	strb.w	r3, [sp, #6]
    //local data.
    uint8 i = 0;
   16b78:	2300      	movs	r3, #0
   16b7a:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   16b7e:	2300      	movs	r3, #0
   16b80:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Errors; i++ ) { //Searching for api.
   16b82:	2300      	movs	r3, #0
   16b84:	f88d 300f 	strb.w	r3, [sp, #15]
   16b88:	e026      	b.n	16bd8 <Det_SearchError+0x70>
        if ( ModuleStrings_Ptr[ ModuleIndex ].ErrorMeanings[i].ErrorId == ErrorId ) {
   16b8a:	491c      	ldr	r1, [pc, #112]	; (16bfc <Det_SearchError+0x94>)
   16b8c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16b90:	4613      	mov	r3, r2
   16b92:	005b      	lsls	r3, r3, #1
   16b94:	4413      	add	r3, r2
   16b96:	00db      	lsls	r3, r3, #3
   16b98:	440b      	add	r3, r1
   16b9a:	695a      	ldr	r2, [r3, #20]
   16b9c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16ba0:	00db      	lsls	r3, r3, #3
   16ba2:	4413      	add	r3, r2
   16ba4:	781b      	ldrb	r3, [r3, #0]
   16ba6:	f89d 2006 	ldrb.w	r2, [sp, #6]
   16baa:	429a      	cmp	r2, r3
   16bac:	d10f      	bne.n	16bce <Det_SearchError+0x66>
            StringPtr = ModuleStrings_Ptr[ ModuleIndex ].ErrorMeanings[i].ErrorMeaning;
   16bae:	4913      	ldr	r1, [pc, #76]	; (16bfc <Det_SearchError+0x94>)
   16bb0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16bb4:	4613      	mov	r3, r2
   16bb6:	005b      	lsls	r3, r3, #1
   16bb8:	4413      	add	r3, r2
   16bba:	00db      	lsls	r3, r3, #3
   16bbc:	440b      	add	r3, r1
   16bbe:	695a      	ldr	r2, [r3, #20]
   16bc0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16bc4:	00db      	lsls	r3, r3, #3
   16bc6:	4413      	add	r3, r2
   16bc8:	685b      	ldr	r3, [r3, #4]
   16bca:	9302      	str	r3, [sp, #8]
            break;
   16bcc:	e011      	b.n	16bf2 <Det_SearchError+0x8a>
    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Errors; i++ ) { //Searching for api.
   16bce:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16bd2:	3301      	adds	r3, #1
   16bd4:	f88d 300f 	strb.w	r3, [sp, #15]
   16bd8:	4908      	ldr	r1, [pc, #32]	; (16bfc <Det_SearchError+0x94>)
   16bda:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16bde:	4613      	mov	r3, r2
   16be0:	005b      	lsls	r3, r3, #1
   16be2:	4413      	add	r3, r2
   16be4:	00db      	lsls	r3, r3, #3
   16be6:	440b      	add	r3, r1
   16be8:	7c1b      	ldrb	r3, [r3, #16]
   16bea:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16bee:	429a      	cmp	r2, r3
   16bf0:	d3cb      	bcc.n	16b8a <Det_SearchError+0x22>
        }
    }

    return StringPtr;
   16bf2:	9b02      	ldr	r3, [sp, #8]
}
   16bf4:	4618      	mov	r0, r3
   16bf6:	b004      	add	sp, #16
   16bf8:	4770      	bx	lr
   16bfa:	bf00      	nop
   16bfc:	00018a3c 	.word	0x00018a3c

00016c00 <Det_GetModuleName>:
 * @param[in] ModuleId Module Id where error was detected.
 * @return StringPtr Pointer to string module name.
 * 
 * @note If the module Id isn´t registered it will return NULL;
 */
const char* Det_GetModuleName( uint16 ModuleId ) {
   16c00:	b084      	sub	sp, #16
   16c02:	4603      	mov	r3, r0
   16c04:	f8ad 3006 	strh.w	r3, [sp, #6]
    //local data 
    uint8 i = 0;
   16c08:	2300      	movs	r3, #0
   16c0a:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   16c0e:	2300      	movs	r3, #0
   16c10:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching module name.
   16c12:	2300      	movs	r3, #0
   16c14:	f88d 300f 	strb.w	r3, [sp, #15]
   16c18:	e01c      	b.n	16c54 <Det_GetModuleName+0x54>
        if ( ModuleStrings_Ptr[i].ModuleId == ModuleId ) {
   16c1a:	4912      	ldr	r1, [pc, #72]	; (16c64 <Det_GetModuleName+0x64>)
   16c1c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16c20:	4613      	mov	r3, r2
   16c22:	005b      	lsls	r3, r3, #1
   16c24:	4413      	add	r3, r2
   16c26:	00db      	lsls	r3, r3, #3
   16c28:	440b      	add	r3, r1
   16c2a:	881b      	ldrh	r3, [r3, #0]
   16c2c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16c30:	429a      	cmp	r2, r3
   16c32:	d10a      	bne.n	16c4a <Det_GetModuleName+0x4a>
            StringPtr = ModuleStrings_Ptr[i].ModuleName;
   16c34:	490b      	ldr	r1, [pc, #44]	; (16c64 <Det_GetModuleName+0x64>)
   16c36:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16c3a:	4613      	mov	r3, r2
   16c3c:	005b      	lsls	r3, r3, #1
   16c3e:	4413      	add	r3, r2
   16c40:	00db      	lsls	r3, r3, #3
   16c42:	440b      	add	r3, r1
   16c44:	685b      	ldr	r3, [r3, #4]
   16c46:	9302      	str	r3, [sp, #8]
            break;
   16c48:	e008      	b.n	16c5c <Det_GetModuleName+0x5c>
    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching module name.
   16c4a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16c4e:	3301      	adds	r3, #1
   16c50:	f88d 300f 	strb.w	r3, [sp, #15]
   16c54:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16c58:	2b0a      	cmp	r3, #10
   16c5a:	d9de      	bls.n	16c1a <Det_GetModuleName+0x1a>
        }
    }

    return StringPtr;
   16c5c:	9b02      	ldr	r3, [sp, #8]
}
   16c5e:	4618      	mov	r0, r3
   16c60:	b004      	add	sp, #16
   16c62:	4770      	bx	lr
   16c64:	00018a3c 	.word	0x00018a3c

00016c68 <Det_GetApiName>:
 * @param[in] ApiId Api Id where error was detected 
 * @return StringPtr Pointer to string Api name.
 * 
 * @note If the Api Id isn´t registered in the hash table it will return NULL;
 */
const char* Det_GetApiName( uint16 ModuleId, uint8 ApiId ) {
   16c68:	b500      	push	{lr}
   16c6a:	b085      	sub	sp, #20
   16c6c:	4603      	mov	r3, r0
   16c6e:	460a      	mov	r2, r1
   16c70:	f8ad 3006 	strh.w	r3, [sp, #6]
   16c74:	4613      	mov	r3, r2
   16c76:	f88d 3005 	strb.w	r3, [sp, #5]
    //local data.
    uint8 i = 0;
   16c7a:	2300      	movs	r3, #0
   16c7c:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   16c80:	2300      	movs	r3, #0
   16c82:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   16c84:	2300      	movs	r3, #0
   16c86:	f88d 300f 	strb.w	r3, [sp, #15]
   16c8a:	e01b      	b.n	16cc4 <Det_GetApiName+0x5c>
        if ( ModuleStrings_Ptr[i].ModuleId == ModuleId ) {
   16c8c:	4912      	ldr	r1, [pc, #72]	; (16cd8 <Det_GetApiName+0x70>)
   16c8e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16c92:	4613      	mov	r3, r2
   16c94:	005b      	lsls	r3, r3, #1
   16c96:	4413      	add	r3, r2
   16c98:	00db      	lsls	r3, r3, #3
   16c9a:	440b      	add	r3, r1
   16c9c:	881b      	ldrh	r3, [r3, #0]
   16c9e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16ca2:	429a      	cmp	r2, r3
   16ca4:	d109      	bne.n	16cba <Det_GetApiName+0x52>
            StringPtr = Det_SearchApi( i , ApiId ); //Searching Api.
   16ca6:	f89d 2005 	ldrb.w	r2, [sp, #5]
   16caa:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16cae:	4611      	mov	r1, r2
   16cb0:	4618      	mov	r0, r3
   16cb2:	f7ff ff0e 	bl	16ad2 <Det_SearchApi>
   16cb6:	9002      	str	r0, [sp, #8]
            break;
   16cb8:	e008      	b.n	16ccc <Det_GetApiName+0x64>
    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   16cba:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16cbe:	3301      	adds	r3, #1
   16cc0:	f88d 300f 	strb.w	r3, [sp, #15]
   16cc4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16cc8:	2b0a      	cmp	r3, #10
   16cca:	d9df      	bls.n	16c8c <Det_GetApiName+0x24>
        }
    }

    return StringPtr;
   16ccc:	9b02      	ldr	r3, [sp, #8]
}
   16cce:	4618      	mov	r0, r3
   16cd0:	b005      	add	sp, #20
   16cd2:	f85d fb04 	ldr.w	pc, [sp], #4
   16cd6:	bf00      	nop
   16cd8:	00018a3c 	.word	0x00018a3c

00016cdc <Det_GetErrorMeaning>:
 * @param[in] ErrorId Error Id reported. 
 * @return StringPtr Pointer to string Error meaning.
 * 
 * @note If the Error Id isn´t registered in the hash table it will return NULL;
 */
const char* Det_GetErrorMeaning( uint16 ModuleId, uint8 ErrorId ) {
   16cdc:	b500      	push	{lr}
   16cde:	b085      	sub	sp, #20
   16ce0:	4603      	mov	r3, r0
   16ce2:	460a      	mov	r2, r1
   16ce4:	f8ad 3006 	strh.w	r3, [sp, #6]
   16ce8:	4613      	mov	r3, r2
   16cea:	f88d 3005 	strb.w	r3, [sp, #5]
    //local data.
    uint8 i = 0;
   16cee:	2300      	movs	r3, #0
   16cf0:	f88d 300f 	strb.w	r3, [sp, #15]
    const char * StringPtr = NULL_PTR;
   16cf4:	2300      	movs	r3, #0
   16cf6:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   16cf8:	2300      	movs	r3, #0
   16cfa:	f88d 300f 	strb.w	r3, [sp, #15]
   16cfe:	e01b      	b.n	16d38 <Det_GetErrorMeaning+0x5c>
        if ( ModuleStrings_Ptr[i].ModuleId == ModuleId ) {
   16d00:	4912      	ldr	r1, [pc, #72]	; (16d4c <Det_GetErrorMeaning+0x70>)
   16d02:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16d06:	4613      	mov	r3, r2
   16d08:	005b      	lsls	r3, r3, #1
   16d0a:	4413      	add	r3, r2
   16d0c:	00db      	lsls	r3, r3, #3
   16d0e:	440b      	add	r3, r1
   16d10:	881b      	ldrh	r3, [r3, #0]
   16d12:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16d16:	429a      	cmp	r2, r3
   16d18:	d109      	bne.n	16d2e <Det_GetErrorMeaning+0x52>
            StringPtr = Det_SearchError( i, ErrorId );
   16d1a:	f89d 2005 	ldrb.w	r2, [sp, #5]
   16d1e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16d22:	4611      	mov	r1, r2
   16d24:	4618      	mov	r0, r3
   16d26:	f7ff ff1f 	bl	16b68 <Det_SearchError>
   16d2a:	9002      	str	r0, [sp, #8]
            break;
   16d2c:	e008      	b.n	16d40 <Det_GetErrorMeaning+0x64>
    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   16d2e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16d32:	3301      	adds	r3, #1
   16d34:	f88d 300f 	strb.w	r3, [sp, #15]
   16d38:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16d3c:	2b0a      	cmp	r3, #10
   16d3e:	d9df      	bls.n	16d00 <Det_GetErrorMeaning+0x24>
        }
    }

    return StringPtr;
   16d40:	9b02      	ldr	r3, [sp, #8]
}
   16d42:	4618      	mov	r0, r3
   16d44:	b005      	add	sp, #20
   16d46:	f85d fb04 	ldr.w	pc, [sp], #4
   16d4a:	bf00      	nop
   16d4c:	00018a3c 	.word	0x00018a3c

00016d50 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
   16d50:	b510      	push	{r4, lr}
   16d52:	b088      	sub	sp, #32
   16d54:	4604      	mov	r4, r0
   16d56:	4608      	mov	r0, r1
   16d58:	4611      	mov	r1, r2
   16d5a:	461a      	mov	r2, r3
   16d5c:	4623      	mov	r3, r4
   16d5e:	f8ad 300e 	strh.w	r3, [sp, #14]
   16d62:	4603      	mov	r3, r0
   16d64:	f88d 300d 	strb.w	r3, [sp, #13]
   16d68:	460b      	mov	r3, r1
   16d6a:	f88d 300c 	strb.w	r3, [sp, #12]
   16d6e:	4613      	mov	r3, r2
   16d70:	f88d 300b 	strb.w	r3, [sp, #11]
    //local data.
    const char* Strings_error[3]; //Pointer to strings for the error message.

    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16d74:	f7e9 ffb0 	bl	cd8 <Sys_GetCoreID>
   16d78:	4603      	mov	r3, r0
   16d7a:	9307      	str	r3, [sp, #28]

    Det_ModuleId[u32CoreId] = ModuleId;
   16d7c:	4921      	ldr	r1, [pc, #132]	; (16e04 <Det_ReportError+0xb4>)
   16d7e:	9b07      	ldr	r3, [sp, #28]
   16d80:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   16d84:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
   16d88:	4a1f      	ldr	r2, [pc, #124]	; (16e08 <Det_ReportError+0xb8>)
   16d8a:	9b07      	ldr	r3, [sp, #28]
   16d8c:	4413      	add	r3, r2
   16d8e:	f89d 200d 	ldrb.w	r2, [sp, #13]
   16d92:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
   16d94:	4a1d      	ldr	r2, [pc, #116]	; (16e0c <Det_ReportError+0xbc>)
   16d96:	9b07      	ldr	r3, [sp, #28]
   16d98:	4413      	add	r3, r2
   16d9a:	f89d 200c 	ldrb.w	r2, [sp, #12]
   16d9e:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
   16da0:	4a1b      	ldr	r2, [pc, #108]	; (16e10 <Det_ReportError+0xc0>)
   16da2:	9b07      	ldr	r3, [sp, #28]
   16da4:	4413      	add	r3, r2
   16da6:	f89d 200b 	ldrb.w	r2, [sp, #11]
   16daa:	701a      	strb	r2, [r3, #0]

    //Obtaining strings for error message.
    Strings_error[0] = Det_GetModuleName( ModuleId );
   16dac:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   16db0:	4618      	mov	r0, r3
   16db2:	f7ff ff25 	bl	16c00 <Det_GetModuleName>
   16db6:	4603      	mov	r3, r0
   16db8:	9304      	str	r3, [sp, #16]
    Strings_error[1] = Det_GetApiName( ModuleId, ApiId );
   16dba:	f89d 200c 	ldrb.w	r2, [sp, #12]
   16dbe:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   16dc2:	4611      	mov	r1, r2
   16dc4:	4618      	mov	r0, r3
   16dc6:	f7ff ff4f 	bl	16c68 <Det_GetApiName>
   16dca:	4603      	mov	r3, r0
   16dcc:	9305      	str	r3, [sp, #20]
    Strings_error[2] = Det_GetErrorMeaning( ModuleId, ErrorId );
   16dce:	f89d 200b 	ldrb.w	r2, [sp, #11]
   16dd2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   16dd6:	4611      	mov	r1, r2
   16dd8:	4618      	mov	r0, r3
   16dda:	f7ff ff7f 	bl	16cdc <Det_GetErrorMeaning>
   16dde:	4603      	mov	r3, r0
   16de0:	9306      	str	r3, [sp, #24]

    SEGGER_RTT_printf( 0, "Error: Error in %s in function %s with the instance %d, %s\n", 
   16de2:	9904      	ldr	r1, [sp, #16]
   16de4:	9805      	ldr	r0, [sp, #20]
   16de6:	f89d 300d 	ldrb.w	r3, [sp, #13]
   16dea:	9a06      	ldr	r2, [sp, #24]
   16dec:	9201      	str	r2, [sp, #4]
   16dee:	9300      	str	r3, [sp, #0]
   16df0:	4603      	mov	r3, r0
   16df2:	460a      	mov	r2, r1
   16df4:	4907      	ldr	r1, [pc, #28]	; (16e14 <Det_ReportError+0xc4>)
   16df6:	2000      	movs	r0, #0
   16df8:	f7ea fc74 	bl	16e4 <SEGGER_RTT_printf>
    Strings_error[0], Strings_error[1], InstanceId, Strings_error[2] );

    return E_OK;
   16dfc:	2300      	movs	r3, #0
}
   16dfe:	4618      	mov	r0, r3
   16e00:	b008      	add	sp, #32
   16e02:	bd10      	pop	{r4, pc}
   16e04:	1fff98e4 	.word	0x1fff98e4
   16e08:	1fff98bc 	.word	0x1fff98bc
   16e0c:	1fff98c0 	.word	0x1fff98c0
   16e10:	1fff98c4 	.word	0x1fff98c4
   16e14:	00017e24 	.word	0x00017e24

00016e18 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
   16e18:	b510      	push	{r4, lr}
   16e1a:	b084      	sub	sp, #16
   16e1c:	4604      	mov	r4, r0
   16e1e:	4608      	mov	r0, r1
   16e20:	4611      	mov	r1, r2
   16e22:	461a      	mov	r2, r3
   16e24:	4623      	mov	r3, r4
   16e26:	f8ad 3006 	strh.w	r3, [sp, #6]
   16e2a:	4603      	mov	r3, r0
   16e2c:	f88d 3005 	strb.w	r3, [sp, #5]
   16e30:	460b      	mov	r3, r1
   16e32:	f88d 3004 	strb.w	r3, [sp, #4]
   16e36:	4613      	mov	r3, r2
   16e38:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16e3c:	f7e9 ff4c 	bl	cd8 <Sys_GetCoreID>
   16e40:	4603      	mov	r3, r0
   16e42:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
   16e44:	490d      	ldr	r1, [pc, #52]	; (16e7c <Det_ReportRuntimeError+0x64>)
   16e46:	9b03      	ldr	r3, [sp, #12]
   16e48:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16e4c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
   16e50:	4a0b      	ldr	r2, [pc, #44]	; (16e80 <Det_ReportRuntimeError+0x68>)
   16e52:	9b03      	ldr	r3, [sp, #12]
   16e54:	4413      	add	r3, r2
   16e56:	f89d 2005 	ldrb.w	r2, [sp, #5]
   16e5a:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
   16e5c:	4a09      	ldr	r2, [pc, #36]	; (16e84 <Det_ReportRuntimeError+0x6c>)
   16e5e:	9b03      	ldr	r3, [sp, #12]
   16e60:	4413      	add	r3, r2
   16e62:	f89d 2004 	ldrb.w	r2, [sp, #4]
   16e66:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
   16e68:	4a07      	ldr	r2, [pc, #28]	; (16e88 <Det_ReportRuntimeError+0x70>)
   16e6a:	9b03      	ldr	r3, [sp, #12]
   16e6c:	4413      	add	r3, r2
   16e6e:	f89d 2003 	ldrb.w	r2, [sp, #3]
   16e72:	701a      	strb	r2, [r3, #0]

    return E_OK;
   16e74:	2300      	movs	r3, #0
}
   16e76:	4618      	mov	r0, r3
   16e78:	b004      	add	sp, #16
   16e7a:	bd10      	pop	{r4, pc}
   16e7c:	1fff98e8 	.word	0x1fff98e8
   16e80:	1fff98c8 	.word	0x1fff98c8
   16e84:	1fff98cc 	.word	0x1fff98cc
   16e88:	1fff98d0 	.word	0x1fff98d0

00016e8c <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
   16e8c:	b510      	push	{r4, lr}
   16e8e:	b084      	sub	sp, #16
   16e90:	4604      	mov	r4, r0
   16e92:	4608      	mov	r0, r1
   16e94:	4611      	mov	r1, r2
   16e96:	461a      	mov	r2, r3
   16e98:	4623      	mov	r3, r4
   16e9a:	f8ad 3006 	strh.w	r3, [sp, #6]
   16e9e:	4603      	mov	r3, r0
   16ea0:	f88d 3005 	strb.w	r3, [sp, #5]
   16ea4:	460b      	mov	r3, r1
   16ea6:	f88d 3004 	strb.w	r3, [sp, #4]
   16eaa:	4613      	mov	r3, r2
   16eac:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16eb0:	f7e9 ff12 	bl	cd8 <Sys_GetCoreID>
   16eb4:	4603      	mov	r3, r0
   16eb6:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
   16eb8:	490d      	ldr	r1, [pc, #52]	; (16ef0 <Det_ReportTransientFault+0x64>)
   16eba:	9b03      	ldr	r3, [sp, #12]
   16ebc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16ec0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
   16ec4:	4a0b      	ldr	r2, [pc, #44]	; (16ef4 <Det_ReportTransientFault+0x68>)
   16ec6:	9b03      	ldr	r3, [sp, #12]
   16ec8:	4413      	add	r3, r2
   16eca:	f89d 2005 	ldrb.w	r2, [sp, #5]
   16ece:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
   16ed0:	4a09      	ldr	r2, [pc, #36]	; (16ef8 <Det_ReportTransientFault+0x6c>)
   16ed2:	9b03      	ldr	r3, [sp, #12]
   16ed4:	4413      	add	r3, r2
   16ed6:	f89d 2004 	ldrb.w	r2, [sp, #4]
   16eda:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
   16edc:	4a07      	ldr	r2, [pc, #28]	; (16efc <Det_ReportTransientFault+0x70>)
   16ede:	9b03      	ldr	r3, [sp, #12]
   16ee0:	4413      	add	r3, r2
   16ee2:	f89d 2003 	ldrb.w	r2, [sp, #3]
   16ee6:	701a      	strb	r2, [r3, #0]

    return E_OK;
   16ee8:	2300      	movs	r3, #0
}
   16eea:	4618      	mov	r0, r3
   16eec:	b004      	add	sp, #16
   16eee:	bd10      	pop	{r4, pc}
   16ef0:	1fff98e0 	.word	0x1fff98e0
   16ef4:	1fff98d4 	.word	0x1fff98d4
   16ef8:	1fff98d8 	.word	0x1fff98d8
   16efc:	1fff98dc 	.word	0x1fff98dc

00016f00 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
   16f00:	bf00      	nop
   16f02:	4770      	bx	lr

00016f04 <CanIf_Init>:
 * @brief This function initialices the CanIf Driver.
 * 
 * @param ConfigPtr Pointer to driver control structure. 
 */
void CanIf_Init(const CanIf_ConfigType * ConfigPtr)
{
   16f04:	b082      	sub	sp, #8
   16f06:	9001      	str	r0, [sp, #4]
    #if (STD_ON == CANIF_PRECOMPILE_SUPPORT)
    CanIf_ConfigPtr = &CanIf_Config;
    (void)ConfigPtr;
    #else
    CanIf_ConfigPtr = ConfigPtr;
   16f08:	4a02      	ldr	r2, [pc, #8]	; (16f14 <CanIf_Init+0x10>)
   16f0a:	9b01      	ldr	r3, [sp, #4]
   16f0c:	6013      	str	r3, [r2, #0]
    #endif
}
   16f0e:	bf00      	nop
   16f10:	b002      	add	sp, #8
   16f12:	4770      	bx	lr
   16f14:	1fff98ec 	.word	0x1fff98ec

00016f18 <CanIf_Transmit>:
Std_ReturnType CanIf_Transmit
(
    PduIdType CanTxPduId,
    const PduInfoType * PduInfoPtr
)
{
   16f18:	b500      	push	{lr}
   16f1a:	b08b      	sub	sp, #44	; 0x2c
   16f1c:	4603      	mov	r3, r0
   16f1e:	9100      	str	r1, [sp, #0]
   16f20:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType RetVal = E_NOT_OK;
   16f24:	2301      	movs	r3, #1
   16f26:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    Can_HwHandleType CanHth = 0U;
   16f2a:	2300      	movs	r3, #0
   16f2c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    Can_PduType PduInfo;
    const CanIf_TxPduType * TxPduInfo = NULL_PTR;
   16f30:	2300      	movs	r3, #0
   16f32:	9308      	str	r3, [sp, #32]
    uint8 CanIfControllerId = 0U;
   16f34:	2300      	movs	r3, #0
   16f36:	f88d 301f 	strb.w	r3, [sp, #31]
    const CanIf_CtrlPCConfigType * CanIfController = NULL_PTR;
   16f3a:	2300      	movs	r3, #0
   16f3c:	9306      	str	r3, [sp, #24]

    if (NULL_PTR != CanIf_ConfigPtr)
   16f3e:	4b31      	ldr	r3, [pc, #196]	; (17004 <CanIf_Transmit+0xec>)
   16f40:	681b      	ldr	r3, [r3, #0]
   16f42:	2b00      	cmp	r3, #0
   16f44:	d057      	beq.n	16ff6 <CanIf_Transmit+0xde>
    {
        if (CanTxPduId < (CanIf_ConfigPtr->NumTxPdu))
   16f46:	4b2f      	ldr	r3, [pc, #188]	; (17004 <CanIf_Transmit+0xec>)
   16f48:	681b      	ldr	r3, [r3, #0]
   16f4a:	785b      	ldrb	r3, [r3, #1]
   16f4c:	b29b      	uxth	r3, r3
   16f4e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16f52:	429a      	cmp	r2, r3
   16f54:	d24f      	bcs.n	16ff6 <CanIf_Transmit+0xde>
        {
            TxPduInfo = &CanIf_ConfigPtr->CanIf_TxPduConfigPtr[CanTxPduId];
   16f56:	4b2b      	ldr	r3, [pc, #172]	; (17004 <CanIf_Transmit+0xec>)
   16f58:	681b      	ldr	r3, [r3, #0]
   16f5a:	68d9      	ldr	r1, [r3, #12]
   16f5c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16f60:	4613      	mov	r3, r2
   16f62:	009b      	lsls	r3, r3, #2
   16f64:	4413      	add	r3, r2
   16f66:	009b      	lsls	r3, r3, #2
   16f68:	440b      	add	r3, r1
   16f6a:	9308      	str	r3, [sp, #32]
            CanIfControllerId = TxPduInfo->CanIfCtrlId;
   16f6c:	9b08      	ldr	r3, [sp, #32]
   16f6e:	7b9b      	ldrb	r3, [r3, #14]
   16f70:	f88d 301f 	strb.w	r3, [sp, #31]
            CanIfController = &CanIf_PCConfig.CanIfCtrlConfigPtr[CanIfControllerId];
   16f74:	4b24      	ldr	r3, [pc, #144]	; (17008 <CanIf_Transmit+0xf0>)
   16f76:	685a      	ldr	r2, [r3, #4]
   16f78:	f89d 301f 	ldrb.w	r3, [sp, #31]
   16f7c:	00db      	lsls	r3, r3, #3
   16f7e:	4413      	add	r3, r2
   16f80:	9306      	str	r3, [sp, #24]

            CanHth = TxPduInfo->CanHth;
   16f82:	9b08      	ldr	r3, [sp, #32]
   16f84:	899b      	ldrh	r3, [r3, #12]
   16f86:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24

            PduInfo.id = TxPduInfo->CanId;
   16f8a:	9b08      	ldr	r3, [sp, #32]
   16f8c:	685b      	ldr	r3, [r3, #4]
   16f8e:	9303      	str	r3, [sp, #12]
            /* Convert Id by adding two most significant bits specify the frame type */
            switch (TxPduInfo->CanFrameType)
   16f90:	9b08      	ldr	r3, [sp, #32]
   16f92:	689b      	ldr	r3, [r3, #8]
   16f94:	2b03      	cmp	r3, #3
   16f96:	d010      	beq.n	16fba <CanIf_Transmit+0xa2>
   16f98:	2b03      	cmp	r3, #3
   16f9a:	d813      	bhi.n	16fc4 <CanIf_Transmit+0xac>
   16f9c:	2b00      	cmp	r3, #0
   16f9e:	d002      	beq.n	16fa6 <CanIf_Transmit+0x8e>
   16fa0:	2b01      	cmp	r3, #1
   16fa2:	d005      	beq.n	16fb0 <CanIf_Transmit+0x98>
                    PduInfo.id |= 0x40000000U;
                    break;
                }
                default:
                {
                    break;
   16fa4:	e00e      	b.n	16fc4 <CanIf_Transmit+0xac>
                    PduInfo.id |= 0x80000000U;
   16fa6:	9b03      	ldr	r3, [sp, #12]
   16fa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   16fac:	9303      	str	r3, [sp, #12]
                    break;
   16fae:	e00a      	b.n	16fc6 <CanIf_Transmit+0xae>
                    PduInfo.id |= 0xC0000000U;
   16fb0:	9b03      	ldr	r3, [sp, #12]
   16fb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   16fb6:	9303      	str	r3, [sp, #12]
                    break;
   16fb8:	e005      	b.n	16fc6 <CanIf_Transmit+0xae>
                    PduInfo.id |= 0x40000000U;
   16fba:	9b03      	ldr	r3, [sp, #12]
   16fbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   16fc0:	9303      	str	r3, [sp, #12]
                    break;
   16fc2:	e000      	b.n	16fc6 <CanIf_Transmit+0xae>
                    break;
   16fc4:	bf00      	nop
                }
            }
            
            PduInfo.length = (uint8)(PduInfoPtr->SduLength);
   16fc6:	9b00      	ldr	r3, [sp, #0]
   16fc8:	689b      	ldr	r3, [r3, #8]
   16fca:	b2db      	uxtb	r3, r3
   16fcc:	f88d 3012 	strb.w	r3, [sp, #18]
            PduInfo.sdu = PduInfoPtr->SduDataPtr;
   16fd0:	9b00      	ldr	r3, [sp, #0]
   16fd2:	681b      	ldr	r3, [r3, #0]
   16fd4:	9305      	str	r3, [sp, #20]
            PduInfo.swPduHandle = CanTxPduId;
   16fd6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   16fda:	f8ad 3010 	strh.w	r3, [sp, #16]

            RetVal = CanIfController->CanDrvConfigPtr->CanApi->CanWrite(CanHth, &PduInfo); 
   16fde:	9b06      	ldr	r3, [sp, #24]
   16fe0:	685b      	ldr	r3, [r3, #4]
   16fe2:	685b      	ldr	r3, [r3, #4]
   16fe4:	681b      	ldr	r3, [r3, #0]
   16fe6:	a903      	add	r1, sp, #12
   16fe8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   16fec:	4610      	mov	r0, r2
   16fee:	4798      	blx	r3
   16ff0:	4603      	mov	r3, r0
   16ff2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
    }
    return RetVal;
   16ff6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
   16ffa:	4618      	mov	r0, r3
   16ffc:	b00b      	add	sp, #44	; 0x2c
   16ffe:	f85d fb04 	ldr.w	pc, [sp], #4
   17002:	bf00      	nop
   17004:	1fff98ec 	.word	0x1fff98ec
   17008:	00018b7c 	.word	0x00018b7c

0001700c <CanIf_TxConfirmation>:

void CanIf_TxConfirmation
(
    PduIdType CanTxPduId
)
{
   1700c:	b500      	push	{lr}
   1700e:	b085      	sub	sp, #20
   17010:	4603      	mov	r3, r0
   17012:	f8ad 3006 	strh.w	r3, [sp, #6]
    PduIdType UserPduId;
    const CanIf_TxPduType * TxPduInfo = NULL_PTR;
   17016:	2300      	movs	r3, #0
   17018:	9303      	str	r3, [sp, #12]

    if (NULL_PTR != CanIf_ConfigPtr)
   1701a:	4b15      	ldr	r3, [pc, #84]	; (17070 <CanIf_TxConfirmation+0x64>)
   1701c:	681b      	ldr	r3, [r3, #0]
   1701e:	2b00      	cmp	r3, #0
   17020:	d021      	beq.n	17066 <CanIf_TxConfirmation+0x5a>
    {
        if (CanTxPduId < (CanIf_ConfigPtr->NumTxPdu))
   17022:	4b13      	ldr	r3, [pc, #76]	; (17070 <CanIf_TxConfirmation+0x64>)
   17024:	681b      	ldr	r3, [r3, #0]
   17026:	785b      	ldrb	r3, [r3, #1]
   17028:	b29b      	uxth	r3, r3
   1702a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1702e:	429a      	cmp	r2, r3
   17030:	d219      	bcs.n	17066 <CanIf_TxConfirmation+0x5a>
        {
            TxPduInfo = &CanIf_ConfigPtr->CanIf_TxPduConfigPtr[CanTxPduId];
   17032:	4b0f      	ldr	r3, [pc, #60]	; (17070 <CanIf_TxConfirmation+0x64>)
   17034:	681b      	ldr	r3, [r3, #0]
   17036:	68d9      	ldr	r1, [r3, #12]
   17038:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1703c:	4613      	mov	r3, r2
   1703e:	009b      	lsls	r3, r3, #2
   17040:	4413      	add	r3, r2
   17042:	009b      	lsls	r3, r3, #2
   17044:	440b      	add	r3, r1
   17046:	9303      	str	r3, [sp, #12]

            if (NULL_PTR != TxPduInfo->UserTxConfirmation)
   17048:	9b03      	ldr	r3, [sp, #12]
   1704a:	691b      	ldr	r3, [r3, #16]
   1704c:	2b00      	cmp	r3, #0
   1704e:	d00a      	beq.n	17066 <CanIf_TxConfirmation+0x5a>
            {
                UserPduId = TxPduInfo->PduId;
   17050:	9b03      	ldr	r3, [sp, #12]
   17052:	881b      	ldrh	r3, [r3, #0]
   17054:	f8ad 300a 	strh.w	r3, [sp, #10]
                TxPduInfo->UserTxConfirmation(UserPduId, E_OK);
   17058:	9b03      	ldr	r3, [sp, #12]
   1705a:	691b      	ldr	r3, [r3, #16]
   1705c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   17060:	2100      	movs	r1, #0
   17062:	4610      	mov	r0, r2
   17064:	4798      	blx	r3
            }
        }
    }
}
   17066:	bf00      	nop
   17068:	b005      	add	sp, #20
   1706a:	f85d fb04 	ldr.w	pc, [sp], #4
   1706e:	bf00      	nop
   17070:	1fff98ec 	.word	0x1fff98ec

00017074 <CanIf_RxIndication>:
void CanIf_RxIndication
(
    const Can_HwType * Mailbox,
    const PduInfoType * PduInfoPtr
)
{
   17074:	b500      	push	{lr}
   17076:	b089      	sub	sp, #36	; 0x24
   17078:	9001      	str	r0, [sp, #4]
   1707a:	9100      	str	r1, [sp, #0]
    PduIdType UserPduId = 0U;
   1707c:	2300      	movs	r3, #0
   1707e:	f8ad 301e 	strh.w	r3, [sp, #30]
    PduInfoType PduInfo;
    const CanIf_RxPduType * RxPduInfo = NULL_PTR;
   17082:	2300      	movs	r3, #0
   17084:	9306      	str	r3, [sp, #24]
    uint8 CanDrvId = 0U;
   17086:	2300      	movs	r3, #0
   17088:	f88d 3017 	strb.w	r3, [sp, #23]

    if (NULL_PTR != CanIf_ConfigPtr)
   1708c:	4b2c      	ldr	r3, [pc, #176]	; (17140 <CanIf_RxIndication+0xcc>)
   1708e:	681b      	ldr	r3, [r3, #0]
   17090:	2b00      	cmp	r3, #0
   17092:	d050      	beq.n	17136 <CanIf_RxIndication+0xc2>
    {
        if ((Mailbox->ControllerId) < (CanIf_PCConfig.NumOfCtrl))
   17094:	9b01      	ldr	r3, [sp, #4]
   17096:	799a      	ldrb	r2, [r3, #6]
   17098:	4b2a      	ldr	r3, [pc, #168]	; (17144 <CanIf_RxIndication+0xd0>)
   1709a:	781b      	ldrb	r3, [r3, #0]
   1709c:	429a      	cmp	r2, r3
   1709e:	d24a      	bcs.n	17136 <CanIf_RxIndication+0xc2>
        {
            if ((Mailbox->Hoh) < (CanIf_PCConfig.CanIfCtrlConfigPtr[Mailbox->ControllerId].CanDrvConfigPtr->NumCanHoh))
   170a0:	9b01      	ldr	r3, [sp, #4]
   170a2:	889a      	ldrh	r2, [r3, #4]
   170a4:	4b27      	ldr	r3, [pc, #156]	; (17144 <CanIf_RxIndication+0xd0>)
   170a6:	6859      	ldr	r1, [r3, #4]
   170a8:	9b01      	ldr	r3, [sp, #4]
   170aa:	799b      	ldrb	r3, [r3, #6]
   170ac:	00db      	lsls	r3, r3, #3
   170ae:	440b      	add	r3, r1
   170b0:	685b      	ldr	r3, [r3, #4]
   170b2:	885b      	ldrh	r3, [r3, #2]
   170b4:	429a      	cmp	r2, r3
   170b6:	d23e      	bcs.n	17136 <CanIf_RxIndication+0xc2>
            {
                CanDrvId = CanIf_PCConfig.CanIfCtrlConfigPtr[Mailbox->ControllerId].CanDrvConfigPtr->CanDrvId;
   170b8:	4b22      	ldr	r3, [pc, #136]	; (17144 <CanIf_RxIndication+0xd0>)
   170ba:	685a      	ldr	r2, [r3, #4]
   170bc:	9b01      	ldr	r3, [sp, #4]
   170be:	799b      	ldrb	r3, [r3, #6]
   170c0:	00db      	lsls	r3, r3, #3
   170c2:	4413      	add	r3, r2
   170c4:	685b      	ldr	r3, [r3, #4]
   170c6:	781b      	ldrb	r3, [r3, #0]
   170c8:	f88d 3017 	strb.w	r3, [sp, #23]
                RxPduInfo = CanIf_ConfigPtr->CanDrvConfigPtr[CanDrvId]->HohToRxPduMappingPtr[Mailbox->Hoh];
   170cc:	4b1c      	ldr	r3, [pc, #112]	; (17140 <CanIf_RxIndication+0xcc>)
   170ce:	681b      	ldr	r3, [r3, #0]
   170d0:	685a      	ldr	r2, [r3, #4]
   170d2:	f89d 3017 	ldrb.w	r3, [sp, #23]
   170d6:	009b      	lsls	r3, r3, #2
   170d8:	4413      	add	r3, r2
   170da:	681b      	ldr	r3, [r3, #0]
   170dc:	681a      	ldr	r2, [r3, #0]
   170de:	9b01      	ldr	r3, [sp, #4]
   170e0:	889b      	ldrh	r3, [r3, #4]
   170e2:	009b      	lsls	r3, r3, #2
   170e4:	4413      	add	r3, r2
   170e6:	681b      	ldr	r3, [r3, #0]
   170e8:	9306      	str	r3, [sp, #24]
                
                /* Will discard the Can HOH if it was not referred by any CanIf RxPDU */
                if (NULL_PTR != RxPduInfo)
   170ea:	9b06      	ldr	r3, [sp, #24]
   170ec:	2b00      	cmp	r3, #0
   170ee:	d022      	beq.n	17136 <CanIf_RxIndication+0xc2>
                {
                    if (NULL_PTR != RxPduInfo->UserRxIndication)
   170f0:	9b06      	ldr	r3, [sp, #24]
   170f2:	689b      	ldr	r3, [r3, #8]
   170f4:	2b00      	cmp	r3, #0
   170f6:	d01e      	beq.n	17136 <CanIf_RxIndication+0xc2>
                    {
                        UserPduId = RxPduInfo->PduId;
   170f8:	9b06      	ldr	r3, [sp, #24]
   170fa:	881b      	ldrh	r3, [r3, #0]
   170fc:	f8ad 301e 	strh.w	r3, [sp, #30]
                        if ((TRUE == RxPduInfo->PduLengthCheck) && (PduInfoPtr->SduLength > (RxPduInfo->PduLength)))
   17100:	9b06      	ldr	r3, [sp, #24]
   17102:	789b      	ldrb	r3, [r3, #2]
   17104:	2b00      	cmp	r3, #0
   17106:	d009      	beq.n	1711c <CanIf_RxIndication+0xa8>
   17108:	9b00      	ldr	r3, [sp, #0]
   1710a:	689b      	ldr	r3, [r3, #8]
   1710c:	9a06      	ldr	r2, [sp, #24]
   1710e:	8892      	ldrh	r2, [r2, #4]
   17110:	4293      	cmp	r3, r2
   17112:	d903      	bls.n	1711c <CanIf_RxIndication+0xa8>
                        {
                            PduInfo.SduLength = RxPduInfo->PduLength; /* Truncates exceeded data as configured on GUI */
   17114:	9b06      	ldr	r3, [sp, #24]
   17116:	889b      	ldrh	r3, [r3, #4]
   17118:	9304      	str	r3, [sp, #16]
   1711a:	e002      	b.n	17122 <CanIf_RxIndication+0xae>
                        }
                        else
                        {
                            PduInfo.SduLength = PduInfoPtr->SduLength;
   1711c:	9b00      	ldr	r3, [sp, #0]
   1711e:	689b      	ldr	r3, [r3, #8]
   17120:	9304      	str	r3, [sp, #16]
                        }
                        PduInfo.SduDataPtr = PduInfoPtr->SduDataPtr;
   17122:	9b00      	ldr	r3, [sp, #0]
   17124:	681b      	ldr	r3, [r3, #0]
   17126:	9302      	str	r3, [sp, #8]
                        RxPduInfo->UserRxIndication(UserPduId, &PduInfo);
   17128:	9b06      	ldr	r3, [sp, #24]
   1712a:	689b      	ldr	r3, [r3, #8]
   1712c:	a902      	add	r1, sp, #8
   1712e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   17132:	4610      	mov	r0, r2
   17134:	4798      	blx	r3
                    }
                }
            }
        }
    }
}
   17136:	bf00      	nop
   17138:	b009      	add	sp, #36	; 0x24
   1713a:	f85d fb04 	ldr.w	pc, [sp], #4
   1713e:	bf00      	nop
   17140:	1fff98ec 	.word	0x1fff98ec
   17144:	00018b7c 	.word	0x00018b7c

00017148 <CanIf_ControllerModeIndication>:
void CanIf_ControllerModeIndication
( 
    uint8 ControllerId, 
    Can_ControllerStateType ControllerMode 
)
{
   17148:	b082      	sub	sp, #8
   1714a:	4603      	mov	r3, r0
   1714c:	9100      	str	r1, [sp, #0]
   1714e:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId; 
    (void)ControllerMode;
}
   17152:	bf00      	nop
   17154:	b002      	add	sp, #8
   17156:	4770      	bx	lr

00017158 <CanIf_ControllerBusOff>:

void CanIf_ControllerBusOff
(
    uint8 ControllerId
)
{
   17158:	b082      	sub	sp, #8
   1715a:	4603      	mov	r3, r0
   1715c:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
}
   17160:	bf00      	nop
   17162:	b002      	add	sp, #8
   17164:	4770      	bx	lr

00017166 <CanIf_SetControllerMode>:
 * 
 * @param Controller CanIf controller ID.
 * @param Transition Desired state.
 * @return RetVal Status of the operation.
 */
Std_ReturnType CanIf_SetControllerMode( uint8 Controller, Can_ControllerStateType Transition ) {
   17166:	b500      	push	{lr}
   17168:	b087      	sub	sp, #28
   1716a:	4603      	mov	r3, r0
   1716c:	9100      	str	r1, [sp, #0]
   1716e:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   17172:	2301      	movs	r3, #1
   17174:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   17178:	2300      	movs	r3, #0
   1717a:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   1717c:	2300      	movs	r3, #0
   1717e:	f88d 300f 	strb.w	r3, [sp, #15]


    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   17182:	4b13      	ldr	r3, [pc, #76]	; (171d0 <CanIf_SetControllerMode+0x6a>)
   17184:	681b      	ldr	r3, [r3, #0]
   17186:	2b00      	cmp	r3, #0
   17188:	d01c      	beq.n	171c4 <CanIf_SetControllerMode+0x5e>
        if ( Controller < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   1718a:	4b12      	ldr	r3, [pc, #72]	; (171d4 <CanIf_SetControllerMode+0x6e>)
   1718c:	781b      	ldrb	r3, [r3, #0]
   1718e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   17192:	429a      	cmp	r2, r3
   17194:	d216      	bcs.n	171c4 <CanIf_SetControllerMode+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ Controller ];
   17196:	4b0f      	ldr	r3, [pc, #60]	; (171d4 <CanIf_SetControllerMode+0x6e>)
   17198:	685a      	ldr	r2, [r3, #4]
   1719a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1719e:	00db      	lsls	r3, r3, #3
   171a0:	4413      	add	r3, r2
   171a2:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   171a4:	9b04      	ldr	r3, [sp, #16]
   171a6:	785b      	ldrb	r3, [r3, #1]
   171a8:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanSetMode( CanController_ID, Transition );   //Calling Can Driver Api.
   171ac:	9b04      	ldr	r3, [sp, #16]
   171ae:	685b      	ldr	r3, [r3, #4]
   171b0:	685b      	ldr	r3, [r3, #4]
   171b2:	685b      	ldr	r3, [r3, #4]
   171b4:	f89d 200f 	ldrb.w	r2, [sp, #15]
   171b8:	9900      	ldr	r1, [sp, #0]
   171ba:	4610      	mov	r0, r2
   171bc:	4798      	blx	r3
   171be:	4603      	mov	r3, r0
   171c0:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   171c4:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   171c8:	4618      	mov	r0, r3
   171ca:	b007      	add	sp, #28
   171cc:	f85d fb04 	ldr.w	pc, [sp], #4
   171d0:	1fff98ec 	.word	0x1fff98ec
   171d4:	00018b7c 	.word	0x00018b7c

000171d8 <CanIf_EnableControllerInterrupts>:
/**
 * @brief This function enables the interrupts of a given CanIf controller.
 * 
 * @param Controller CanIf controller ID.
 */
void CanIf_EnableControllerInterrupts( uint8 Controller ) {
   171d8:	b500      	push	{lr}
   171da:	b085      	sub	sp, #20
   171dc:	4603      	mov	r3, r0
   171de:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data.
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   171e2:	2300      	movs	r3, #0
   171e4:	9303      	str	r3, [sp, #12]
    uint8 CanController_ID = 0; //Can controller ID.
   171e6:	2300      	movs	r3, #0
   171e8:	f88d 300b 	strb.w	r3, [sp, #11]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   171ec:	4b10      	ldr	r3, [pc, #64]	; (17230 <CanIf_EnableControllerInterrupts+0x58>)
   171ee:	681b      	ldr	r3, [r3, #0]
   171f0:	2b00      	cmp	r3, #0
   171f2:	d018      	beq.n	17226 <CanIf_EnableControllerInterrupts+0x4e>
        if ( Controller < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   171f4:	4b0f      	ldr	r3, [pc, #60]	; (17234 <CanIf_EnableControllerInterrupts+0x5c>)
   171f6:	781b      	ldrb	r3, [r3, #0]
   171f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
   171fc:	429a      	cmp	r2, r3
   171fe:	d212      	bcs.n	17226 <CanIf_EnableControllerInterrupts+0x4e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ Controller ];
   17200:	4b0c      	ldr	r3, [pc, #48]	; (17234 <CanIf_EnableControllerInterrupts+0x5c>)
   17202:	685a      	ldr	r2, [r3, #4]
   17204:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17208:	00db      	lsls	r3, r3, #3
   1720a:	4413      	add	r3, r2
   1720c:	9303      	str	r3, [sp, #12]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   1720e:	9b03      	ldr	r3, [sp, #12]
   17210:	785b      	ldrb	r3, [r3, #1]
   17212:	f88d 300b 	strb.w	r3, [sp, #11]
            CanIfControllerConf->CanDrvConfigPtr->CanApi->CanEnableInterrupts( CanController_ID );   //Calling Can Driver Api.
   17216:	9b03      	ldr	r3, [sp, #12]
   17218:	685b      	ldr	r3, [r3, #4]
   1721a:	685b      	ldr	r3, [r3, #4]
   1721c:	689b      	ldr	r3, [r3, #8]
   1721e:	f89d 200b 	ldrb.w	r2, [sp, #11]
   17222:	4610      	mov	r0, r2
   17224:	4798      	blx	r3
        }
    }
}
   17226:	bf00      	nop
   17228:	b005      	add	sp, #20
   1722a:	f85d fb04 	ldr.w	pc, [sp], #4
   1722e:	bf00      	nop
   17230:	1fff98ec 	.word	0x1fff98ec
   17234:	00018b7c 	.word	0x00018b7c

00017238 <CanIf_DisableControllerInterrupts>:
/**
 * @brief This function disables the interrupts of a given CanIf controller.
 * 
 * @param Controller CanIf controller ID.
 */
void CanIf_DisableControllerInterrupts( uint8 Controller ) {
   17238:	b500      	push	{lr}
   1723a:	b085      	sub	sp, #20
   1723c:	4603      	mov	r3, r0
   1723e:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data.
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   17242:	2300      	movs	r3, #0
   17244:	9303      	str	r3, [sp, #12]
    uint8 CanController_ID = 0; //Can controller ID.
   17246:	2300      	movs	r3, #0
   17248:	f88d 300b 	strb.w	r3, [sp, #11]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   1724c:	4b10      	ldr	r3, [pc, #64]	; (17290 <CanIf_DisableControllerInterrupts+0x58>)
   1724e:	681b      	ldr	r3, [r3, #0]
   17250:	2b00      	cmp	r3, #0
   17252:	d018      	beq.n	17286 <CanIf_DisableControllerInterrupts+0x4e>
        if ( Controller < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   17254:	4b0f      	ldr	r3, [pc, #60]	; (17294 <CanIf_DisableControllerInterrupts+0x5c>)
   17256:	781b      	ldrb	r3, [r3, #0]
   17258:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1725c:	429a      	cmp	r2, r3
   1725e:	d212      	bcs.n	17286 <CanIf_DisableControllerInterrupts+0x4e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ Controller ];
   17260:	4b0c      	ldr	r3, [pc, #48]	; (17294 <CanIf_DisableControllerInterrupts+0x5c>)
   17262:	685a      	ldr	r2, [r3, #4]
   17264:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17268:	00db      	lsls	r3, r3, #3
   1726a:	4413      	add	r3, r2
   1726c:	9303      	str	r3, [sp, #12]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   1726e:	9b03      	ldr	r3, [sp, #12]
   17270:	785b      	ldrb	r3, [r3, #1]
   17272:	f88d 300b 	strb.w	r3, [sp, #11]
            CanIfControllerConf->CanDrvConfigPtr->CanApi->CanDisableInterrupts( CanController_ID );   //Calling Can Driver Api.
   17276:	9b03      	ldr	r3, [sp, #12]
   17278:	685b      	ldr	r3, [r3, #4]
   1727a:	685b      	ldr	r3, [r3, #4]
   1727c:	68db      	ldr	r3, [r3, #12]
   1727e:	f89d 200b 	ldrb.w	r2, [sp, #11]
   17282:	4610      	mov	r0, r2
   17284:	4798      	blx	r3
        }
    }
}
   17286:	bf00      	nop
   17288:	b005      	add	sp, #20
   1728a:	f85d fb04 	ldr.w	pc, [sp], #4
   1728e:	bf00      	nop
   17290:	1fff98ec 	.word	0x1fff98ec
   17294:	00018b7c 	.word	0x00018b7c

00017298 <CanIf_GetControllerErrorState>:
 * 
 * @param ControllerId CanIf controller ID.
 * @param ErrorStatePtr Pointer to variable to store the actual error state of the controller.
 * @return RetVal Status of the operation. 
 */
Std_ReturnType CanIf_GetControllerErrorState( uint8 ControllerId, Can_ErrorStateType *ErrorStatePtr) {
   17298:	b500      	push	{lr}
   1729a:	b087      	sub	sp, #28
   1729c:	4603      	mov	r3, r0
   1729e:	9100      	str	r1, [sp, #0]
   172a0:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   172a4:	2301      	movs	r3, #1
   172a6:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   172aa:	2300      	movs	r3, #0
   172ac:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   172ae:	2300      	movs	r3, #0
   172b0:	f88d 300f 	strb.w	r3, [sp, #15]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   172b4:	4b13      	ldr	r3, [pc, #76]	; (17304 <CanIf_GetControllerErrorState+0x6c>)
   172b6:	681b      	ldr	r3, [r3, #0]
   172b8:	2b00      	cmp	r3, #0
   172ba:	d01c      	beq.n	172f6 <CanIf_GetControllerErrorState+0x5e>
        if ( ControllerId < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   172bc:	4b12      	ldr	r3, [pc, #72]	; (17308 <CanIf_GetControllerErrorState+0x70>)
   172be:	781b      	ldrb	r3, [r3, #0]
   172c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   172c4:	429a      	cmp	r2, r3
   172c6:	d216      	bcs.n	172f6 <CanIf_GetControllerErrorState+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ ControllerId ];
   172c8:	4b0f      	ldr	r3, [pc, #60]	; (17308 <CanIf_GetControllerErrorState+0x70>)
   172ca:	685a      	ldr	r2, [r3, #4]
   172cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   172d0:	00db      	lsls	r3, r3, #3
   172d2:	4413      	add	r3, r2
   172d4:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   172d6:	9b04      	ldr	r3, [sp, #16]
   172d8:	785b      	ldrb	r3, [r3, #1]
   172da:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanGetErrorState( CanController_ID, ErrorStatePtr );   //Calling Can Driver Api.
   172de:	9b04      	ldr	r3, [sp, #16]
   172e0:	685b      	ldr	r3, [r3, #4]
   172e2:	685b      	ldr	r3, [r3, #4]
   172e4:	691b      	ldr	r3, [r3, #16]
   172e6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   172ea:	9900      	ldr	r1, [sp, #0]
   172ec:	4610      	mov	r0, r2
   172ee:	4798      	blx	r3
   172f0:	4603      	mov	r3, r0
   172f2:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   172f6:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   172fa:	4618      	mov	r0, r3
   172fc:	b007      	add	sp, #28
   172fe:	f85d fb04 	ldr.w	pc, [sp], #4
   17302:	bf00      	nop
   17304:	1fff98ec 	.word	0x1fff98ec
   17308:	00018b7c 	.word	0x00018b7c

0001730c <CanIf_GetControllerMode>:
 * 
 * @param Controller CanIf controller ID.
 * @param ControllerModePtr Pointer to variable to store the actual state of the controller.
 * @return RetVal Status of the operation.
 */
Std_ReturnType CanIf_GetControllerMode( uint8 Controller, Can_ControllerStateType *ControllerModePtr ) {
   1730c:	b500      	push	{lr}
   1730e:	b087      	sub	sp, #28
   17310:	4603      	mov	r3, r0
   17312:	9100      	str	r1, [sp, #0]
   17314:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   17318:	2301      	movs	r3, #1
   1731a:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   1731e:	2300      	movs	r3, #0
   17320:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   17322:	2300      	movs	r3, #0
   17324:	f88d 300f 	strb.w	r3, [sp, #15]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   17328:	4b13      	ldr	r3, [pc, #76]	; (17378 <CanIf_GetControllerMode+0x6c>)
   1732a:	681b      	ldr	r3, [r3, #0]
   1732c:	2b00      	cmp	r3, #0
   1732e:	d01c      	beq.n	1736a <CanIf_GetControllerMode+0x5e>
        if ( Controller < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   17330:	4b12      	ldr	r3, [pc, #72]	; (1737c <CanIf_GetControllerMode+0x70>)
   17332:	781b      	ldrb	r3, [r3, #0]
   17334:	f89d 2007 	ldrb.w	r2, [sp, #7]
   17338:	429a      	cmp	r2, r3
   1733a:	d216      	bcs.n	1736a <CanIf_GetControllerMode+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ Controller ];
   1733c:	4b0f      	ldr	r3, [pc, #60]	; (1737c <CanIf_GetControllerMode+0x70>)
   1733e:	685a      	ldr	r2, [r3, #4]
   17340:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17344:	00db      	lsls	r3, r3, #3
   17346:	4413      	add	r3, r2
   17348:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   1734a:	9b04      	ldr	r3, [sp, #16]
   1734c:	785b      	ldrb	r3, [r3, #1]
   1734e:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanGetMode( CanController_ID, ControllerModePtr );   //Calling Can Driver Api.
   17352:	9b04      	ldr	r3, [sp, #16]
   17354:	685b      	ldr	r3, [r3, #4]
   17356:	685b      	ldr	r3, [r3, #4]
   17358:	695b      	ldr	r3, [r3, #20]
   1735a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1735e:	9900      	ldr	r1, [sp, #0]
   17360:	4610      	mov	r0, r2
   17362:	4798      	blx	r3
   17364:	4603      	mov	r3, r0
   17366:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   1736a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   1736e:	4618      	mov	r0, r3
   17370:	b007      	add	sp, #28
   17372:	f85d fb04 	ldr.w	pc, [sp], #4
   17376:	bf00      	nop
   17378:	1fff98ec 	.word	0x1fff98ec
   1737c:	00018b7c 	.word	0x00018b7c

00017380 <CanIf_GetControllerRxErrorCounter>:
 * 
 * @param ControllerId CanIf controller ID.
 * @param RxErrorCounterPtr Pointer to variable to store the actual value of the rx error counter of the controller.
 * @return RetVal Status of the operation.
 */
Std_ReturnType CanIf_GetControllerRxErrorCounter( uint8 ControllerId, uint8 *RxErrorCounterPtr ) {
   17380:	b500      	push	{lr}
   17382:	b087      	sub	sp, #28
   17384:	4603      	mov	r3, r0
   17386:	9100      	str	r1, [sp, #0]
   17388:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   1738c:	2301      	movs	r3, #1
   1738e:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   17392:	2300      	movs	r3, #0
   17394:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   17396:	2300      	movs	r3, #0
   17398:	f88d 300f 	strb.w	r3, [sp, #15]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   1739c:	4b13      	ldr	r3, [pc, #76]	; (173ec <CanIf_GetControllerRxErrorCounter+0x6c>)
   1739e:	681b      	ldr	r3, [r3, #0]
   173a0:	2b00      	cmp	r3, #0
   173a2:	d01c      	beq.n	173de <CanIf_GetControllerRxErrorCounter+0x5e>
        if ( ControllerId < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   173a4:	4b12      	ldr	r3, [pc, #72]	; (173f0 <CanIf_GetControllerRxErrorCounter+0x70>)
   173a6:	781b      	ldrb	r3, [r3, #0]
   173a8:	f89d 2007 	ldrb.w	r2, [sp, #7]
   173ac:	429a      	cmp	r2, r3
   173ae:	d216      	bcs.n	173de <CanIf_GetControllerRxErrorCounter+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ ControllerId ];
   173b0:	4b0f      	ldr	r3, [pc, #60]	; (173f0 <CanIf_GetControllerRxErrorCounter+0x70>)
   173b2:	685a      	ldr	r2, [r3, #4]
   173b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   173b8:	00db      	lsls	r3, r3, #3
   173ba:	4413      	add	r3, r2
   173bc:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   173be:	9b04      	ldr	r3, [sp, #16]
   173c0:	785b      	ldrb	r3, [r3, #1]
   173c2:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanGetRxErrorCounter( CanController_ID, RxErrorCounterPtr );   //Calling Can Driver Api.
   173c6:	9b04      	ldr	r3, [sp, #16]
   173c8:	685b      	ldr	r3, [r3, #4]
   173ca:	685b      	ldr	r3, [r3, #4]
   173cc:	699b      	ldr	r3, [r3, #24]
   173ce:	f89d 200f 	ldrb.w	r2, [sp, #15]
   173d2:	9900      	ldr	r1, [sp, #0]
   173d4:	4610      	mov	r0, r2
   173d6:	4798      	blx	r3
   173d8:	4603      	mov	r3, r0
   173da:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   173de:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   173e2:	4618      	mov	r0, r3
   173e4:	b007      	add	sp, #28
   173e6:	f85d fb04 	ldr.w	pc, [sp], #4
   173ea:	bf00      	nop
   173ec:	1fff98ec 	.word	0x1fff98ec
   173f0:	00018b7c 	.word	0x00018b7c

000173f4 <CanIf_GetControllerTxErrorCounter>:
 * 
 * @param ControllerId CanIf controller ID.
 * @param TxErrorCounterPtr Pointer to variable to store the actual value of the tx error counter of the controller.
 * @return RetVal Status of the operation. 
 */
Std_ReturnType CanIf_GetControllerTxErrorCounter( uint8 ControllerId, uint8 *TxErrorCounterPtr ) {
   173f4:	b500      	push	{lr}
   173f6:	b087      	sub	sp, #28
   173f8:	4603      	mov	r3, r0
   173fa:	9100      	str	r1, [sp, #0]
   173fc:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   17400:	2301      	movs	r3, #1
   17402:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   17406:	2300      	movs	r3, #0
   17408:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   1740a:	2300      	movs	r3, #0
   1740c:	f88d 300f 	strb.w	r3, [sp, #15]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   17410:	4b13      	ldr	r3, [pc, #76]	; (17460 <CanIf_GetControllerTxErrorCounter+0x6c>)
   17412:	681b      	ldr	r3, [r3, #0]
   17414:	2b00      	cmp	r3, #0
   17416:	d01c      	beq.n	17452 <CanIf_GetControllerTxErrorCounter+0x5e>
        if ( ControllerId < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   17418:	4b12      	ldr	r3, [pc, #72]	; (17464 <CanIf_GetControllerTxErrorCounter+0x70>)
   1741a:	781b      	ldrb	r3, [r3, #0]
   1741c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   17420:	429a      	cmp	r2, r3
   17422:	d216      	bcs.n	17452 <CanIf_GetControllerTxErrorCounter+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ ControllerId ];
   17424:	4b0f      	ldr	r3, [pc, #60]	; (17464 <CanIf_GetControllerTxErrorCounter+0x70>)
   17426:	685a      	ldr	r2, [r3, #4]
   17428:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1742c:	00db      	lsls	r3, r3, #3
   1742e:	4413      	add	r3, r2
   17430:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   17432:	9b04      	ldr	r3, [sp, #16]
   17434:	785b      	ldrb	r3, [r3, #1]
   17436:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanGetTxErrorCounter( CanController_ID, TxErrorCounterPtr );   //Calling Can Driver Api.
   1743a:	9b04      	ldr	r3, [sp, #16]
   1743c:	685b      	ldr	r3, [r3, #4]
   1743e:	685b      	ldr	r3, [r3, #4]
   17440:	69db      	ldr	r3, [r3, #28]
   17442:	f89d 200f 	ldrb.w	r2, [sp, #15]
   17446:	9900      	ldr	r1, [sp, #0]
   17448:	4610      	mov	r0, r2
   1744a:	4798      	blx	r3
   1744c:	4603      	mov	r3, r0
   1744e:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   17452:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   17456:	4618      	mov	r0, r3
   17458:	b007      	add	sp, #28
   1745a:	f85d fb04 	ldr.w	pc, [sp], #4
   1745e:	bf00      	nop
   17460:	1fff98ec 	.word	0x1fff98ec
   17464:	00018b7c 	.word	0x00018b7c

00017468 <Fls_ACEraseRomEnd>:
   17468:	00c9f4de 	.word	0x00c9f4de
   1746c:	c5f4deaa 	.word	0xc5f4deaa
   17470:	07ccfeb6 	.word	0x07ccfeb6
   17474:	aaccdebb 	.word	0xaaccdebb
   17478:	05dd3322 	.word	0x05dd3322
   1747c:	33ff4509 	.word	0x33ff4509
   17480:	4422ddff 	.word	0x4422ddff
   17484:	59461153 	.word	0x59461153
   17488:	000000bb 	.word	0x000000bb
   1748c:	5f75634d 	.word	0x5f75634d
   17490:	74696e49 	.word	0x74696e49
   17494:	00002928 	.word	0x00002928
   17498:	5f75634d 	.word	0x5f75634d
   1749c:	74696e49 	.word	0x74696e49
   174a0:	636f6c43 	.word	0x636f6c43
   174a4:	0029286b 	.word	0x0029286b
   174a8:	5f75634d 	.word	0x5f75634d
   174ac:	4d746553 	.word	0x4d746553
   174b0:	2865646f 	.word	0x2865646f
   174b4:	00000029 	.word	0x00000029
   174b8:	5f75634d 	.word	0x5f75634d
   174bc:	56746547 	.word	0x56746547
   174c0:	69737265 	.word	0x69737265
   174c4:	6e496e6f 	.word	0x6e496e6f
   174c8:	29286f66 	.word	0x29286f66
   174cc:	00000000 	.word	0x00000000
   174d0:	61766e49 	.word	0x61766e49
   174d4:	2064696c 	.word	0x2064696c
   174d8:	666e6f63 	.word	0x666e6f63
   174dc:	696f7020 	.word	0x696f7020
   174e0:	7265746e 	.word	0x7265746e
   174e4:	00000000 	.word	0x00000000
   174e8:	76697244 	.word	0x76697244
   174ec:	75207265 	.word	0x75207265
   174f0:	696e696e 	.word	0x696e696e
   174f4:	6c616974 	.word	0x6c616974
   174f8:	64657a69 	.word	0x64657a69
   174fc:	00000000 	.word	0x00000000
   17500:	76697244 	.word	0x76697244
   17504:	61207265 	.word	0x61207265
   17508:	6165726c 	.word	0x6165726c
   1750c:	69207964 	.word	0x69207964
   17510:	6974696e 	.word	0x6974696e
   17514:	7a696c61 	.word	0x7a696c61
   17518:	00006465 	.word	0x00006465
   1751c:	61766e49 	.word	0x61766e49
   17520:	2064696c 	.word	0x2064696c
   17524:	75706e69 	.word	0x75706e69
   17528:	61702074 	.word	0x61702074
   1752c:	656d6172 	.word	0x656d6172
   17530:	00726574 	.word	0x00726574
   17534:	74616c50 	.word	0x74616c50
   17538:	6d726f66 	.word	0x6d726f66
   1753c:	696e495f 	.word	0x696e495f
   17540:	00292874 	.word	0x00292874
   17544:	74616c50 	.word	0x74616c50
   17548:	6d726f66 	.word	0x6d726f66
   1754c:	7465535f 	.word	0x7465535f
   17550:	28717249 	.word	0x28717249
   17554:	00000029 	.word	0x00000029
   17558:	74616c50 	.word	0x74616c50
   1755c:	6d726f66 	.word	0x6d726f66
   17560:	7465535f 	.word	0x7465535f
   17564:	50717249 	.word	0x50717249
   17568:	726f6972 	.word	0x726f6972
   1756c:	28797469 	.word	0x28797469
   17570:	00000029 	.word	0x00000029
   17574:	74616c50 	.word	0x74616c50
   17578:	6d726f66 	.word	0x6d726f66
   1757c:	7465475f 	.word	0x7465475f
   17580:	50717249 	.word	0x50717249
   17584:	726f6972 	.word	0x726f6972
   17588:	28797469 	.word	0x28797469
   1758c:	00000029 	.word	0x00000029
   17590:	74616c50 	.word	0x74616c50
   17594:	6d726f66 	.word	0x6d726f66
   17598:	736e495f 	.word	0x736e495f
   1759c:	6c6c6174 	.word	0x6c6c6174
   175a0:	48717249 	.word	0x48717249
   175a4:	6c646e61 	.word	0x6c646e61
   175a8:	29287265 	.word	0x29287265
   175ac:	00000000 	.word	0x00000000
   175b0:	61766e49 	.word	0x61766e49
   175b4:	2064696c 	.word	0x2064696c
   175b8:	6e696f70 	.word	0x6e696f70
   175bc:	00726574 	.word	0x00726574
   175c0:	6c6c6143 	.word	0x6c6c6143
   175c4:	6f726620 	.word	0x6f726620
   175c8:	7277206d 	.word	0x7277206d
   175cc:	20676e6f 	.word	0x20676e6f
   175d0:	7070616d 	.word	0x7070616d
   175d4:	70206465 	.word	0x70206465
   175d8:	69747261 	.word	0x69747261
   175dc:	6e6f6974 	.word	0x6e6f6974
   175e0:	00000000 	.word	0x00000000
   175e4:	61726150 	.word	0x61726150
   175e8:	6574656d 	.word	0x6574656d
   175ec:	756f2072 	.word	0x756f2072
   175f0:	666f2074 	.word	0x666f2074
   175f4:	6e617220 	.word	0x6e617220
   175f8:	00006567 	.word	0x00006567
   175fc:	74726f50 	.word	0x74726f50
   17600:	696e495f 	.word	0x696e495f
   17604:	00292874 	.word	0x00292874
   17608:	74726f50 	.word	0x74726f50
   1760c:	7465535f 	.word	0x7465535f
   17610:	446e6950 	.word	0x446e6950
   17614:	63657269 	.word	0x63657269
   17618:	6e6f6974 	.word	0x6e6f6974
   1761c:	00002928 	.word	0x00002928
   17620:	74726f50 	.word	0x74726f50
   17624:	7465535f 	.word	0x7465535f
   17628:	4d6e6950 	.word	0x4d6e6950
   1762c:	2865646f 	.word	0x2865646f
   17630:	00000029 	.word	0x00000029
   17634:	74726f50 	.word	0x74726f50
   17638:	6665525f 	.word	0x6665525f
   1763c:	68736572 	.word	0x68736572
   17640:	74726f50 	.word	0x74726f50
   17644:	65726944 	.word	0x65726944
   17648:	6f697463 	.word	0x6f697463
   1764c:	0029286e 	.word	0x0029286e
   17650:	74726f50 	.word	0x74726f50
   17654:	7465475f 	.word	0x7465475f
   17658:	73726556 	.word	0x73726556
   1765c:	496e6f69 	.word	0x496e6f69
   17660:	286f666e 	.word	0x286f666e
   17664:	00000029 	.word	0x00000029
   17668:	61766e49 	.word	0x61766e49
   1766c:	2064696c 	.word	0x2064696c
   17670:	74726f50 	.word	0x74726f50
   17674:	6e695020 	.word	0x6e695020
   17678:	00444920 	.word	0x00444920
   1767c:	74726f50 	.word	0x74726f50
   17680:	6e697020 	.word	0x6e697020
   17684:	646f6d20 	.word	0x646f6d20
   17688:	73692065 	.word	0x73692065
   1768c:	636e7520 	.word	0x636e7520
   17690:	676e6168 	.word	0x676e6168
   17694:	6c626165 	.word	0x6c626165
   17698:	00000065 	.word	0x00000065
   1769c:	61766e49 	.word	0x61766e49
   176a0:	2064696c 	.word	0x2064696c
   176a4:	74726f70 	.word	0x74726f70
   176a8:	6e697020 	.word	0x6e697020
   176ac:	646f6d20 	.word	0x646f6d20
   176b0:	00000065 	.word	0x00000065
   176b4:	5f6f6944 	.word	0x5f6f6944
   176b8:	74697257 	.word	0x74697257
   176bc:	61684365 	.word	0x61684365
   176c0:	6c656e6e 	.word	0x6c656e6e
   176c4:	00002928 	.word	0x00002928
   176c8:	5f6f6944 	.word	0x5f6f6944
   176cc:	64616552 	.word	0x64616552
   176d0:	6e616843 	.word	0x6e616843
   176d4:	286c656e 	.word	0x286c656e
   176d8:	00000029 	.word	0x00000029
   176dc:	5f6f6944 	.word	0x5f6f6944
   176e0:	70696c46 	.word	0x70696c46
   176e4:	6e616843 	.word	0x6e616843
   176e8:	286c656e 	.word	0x286c656e
   176ec:	00000029 	.word	0x00000029
   176f0:	5f6f6944 	.word	0x5f6f6944
   176f4:	74697257 	.word	0x74697257
   176f8:	61684365 	.word	0x61684365
   176fc:	6c656e6e 	.word	0x6c656e6e
   17700:	756f7247 	.word	0x756f7247
   17704:	00292870 	.word	0x00292870
   17708:	5f6f6944 	.word	0x5f6f6944
   1770c:	64616552 	.word	0x64616552
   17710:	6e616843 	.word	0x6e616843
   17714:	476c656e 	.word	0x476c656e
   17718:	70756f72 	.word	0x70756f72
   1771c:	00002928 	.word	0x00002928
   17720:	5f6f6944 	.word	0x5f6f6944
   17724:	74697257 	.word	0x74697257
   17728:	726f5065 	.word	0x726f5065
   1772c:	00292874 	.word	0x00292874
   17730:	5f6f6944 	.word	0x5f6f6944
   17734:	64616552 	.word	0x64616552
   17738:	74726f50 	.word	0x74726f50
   1773c:	00002928 	.word	0x00002928
   17740:	5f6f6944 	.word	0x5f6f6944
   17744:	56746547 	.word	0x56746547
   17748:	69737265 	.word	0x69737265
   1774c:	6e496e6f 	.word	0x6e496e6f
   17750:	29286f66 	.word	0x29286f66
   17754:	00000000 	.word	0x00000000
   17758:	61766e49 	.word	0x61766e49
   1775c:	2064696c 	.word	0x2064696c
   17760:	206f6964 	.word	0x206f6964
   17764:	6e616863 	.word	0x6e616863
   17768:	206c656e 	.word	0x206c656e
   1776c:	6576656c 	.word	0x6576656c
   17770:	0000006c 	.word	0x0000006c
   17774:	61766e49 	.word	0x61766e49
   17778:	2064696c 	.word	0x2064696c
   1777c:	206f6964 	.word	0x206f6964
   17780:	6e616863 	.word	0x6e616863
   17784:	206c656e 	.word	0x206c656e
   17788:	00006469 	.word	0x00006469
   1778c:	61766e49 	.word	0x61766e49
   17790:	2064696c 	.word	0x2064696c
   17794:	74726f70 	.word	0x74726f70
   17798:	00646920 	.word	0x00646920
   1779c:	61766e49 	.word	0x61766e49
   177a0:	2064696c 	.word	0x2064696c
   177a4:	6e616863 	.word	0x6e616863
   177a8:	206c656e 	.word	0x206c656e
   177ac:	756f7267 	.word	0x756f7267
   177b0:	64692070 	.word	0x64692070
   177b4:	00000000 	.word	0x00000000
   177b8:	61766e49 	.word	0x61766e49
   177bc:	2064696c 	.word	0x2064696c
   177c0:	666e6f63 	.word	0x666e6f63
   177c4:	70206769 	.word	0x70206769
   177c8:	6d617261 	.word	0x6d617261
   177cc:	72657465 	.word	0x72657465
   177d0:	00000000 	.word	0x00000000
   177d4:	5f6d7750 	.word	0x5f6d7750
   177d8:	74696e49 	.word	0x74696e49
   177dc:	00002928 	.word	0x00002928
   177e0:	5f6d7750 	.word	0x5f6d7750
   177e4:	6e496544 	.word	0x6e496544
   177e8:	29287469 	.word	0x29287469
   177ec:	00000000 	.word	0x00000000
   177f0:	5f6d7750 	.word	0x5f6d7750
   177f4:	44746553 	.word	0x44746553
   177f8:	43797475 	.word	0x43797475
   177fc:	656c6379 	.word	0x656c6379
   17800:	00002928 	.word	0x00002928
   17804:	5f6d7750 	.word	0x5f6d7750
   17808:	50746553 	.word	0x50746553
   1780c:	6f697265 	.word	0x6f697265
   17810:	646e4164 	.word	0x646e4164
   17814:	79747544 	.word	0x79747544
   17818:	00002928 	.word	0x00002928
   1781c:	5f6d7750 	.word	0x5f6d7750
   17820:	4f746553 	.word	0x4f746553
   17824:	75707475 	.word	0x75707475
   17828:	496f5474 	.word	0x496f5474
   1782c:	28656c64 	.word	0x28656c64
   17830:	00000029 	.word	0x00000029
   17834:	5f6d7750 	.word	0x5f6d7750
   17838:	56746547 	.word	0x56746547
   1783c:	69737265 	.word	0x69737265
   17840:	6e496e6f 	.word	0x6e496e6f
   17844:	29286f66 	.word	0x29286f66
   17848:	00000000 	.word	0x00000000
   1784c:	61766e49 	.word	0x61766e49
   17850:	2064696c 	.word	0x2064696c
   17854:	666e6f63 	.word	0x666e6f63
   17858:	70206769 	.word	0x70206769
   1785c:	746e696f 	.word	0x746e696f
   17860:	00007265 	.word	0x00007265
   17864:	61766e49 	.word	0x61766e49
   17868:	2064696c 	.word	0x2064696c
   1786c:	206d7770 	.word	0x206d7770
   17870:	6e616863 	.word	0x6e616863
   17874:	006c656e 	.word	0x006c656e
   17878:	206d7750 	.word	0x206d7750
   1787c:	6e616863 	.word	0x6e616863
   17880:	206c656e 	.word	0x206c656e
   17884:	69726570 	.word	0x69726570
   17888:	6920646f 	.word	0x6920646f
   1788c:	6e752073 	.word	0x6e752073
   17890:	6e616863 	.word	0x6e616863
   17894:	62616567 	.word	0x62616567
   17898:	0000656c 	.word	0x0000656c
   1789c:	5f636441 	.word	0x5f636441
   178a0:	74696e49 	.word	0x74696e49
   178a4:	00002928 	.word	0x00002928
   178a8:	5f636441 	.word	0x5f636441
   178ac:	6e496544 	.word	0x6e496544
   178b0:	29287469 	.word	0x29287469
   178b4:	00000000 	.word	0x00000000
   178b8:	5f636441 	.word	0x5f636441
   178bc:	72617453 	.word	0x72617453
   178c0:	6f724774 	.word	0x6f724774
   178c4:	6f437075 	.word	0x6f437075
   178c8:	7265766e 	.word	0x7265766e
   178cc:	6e6f6973 	.word	0x6e6f6973
   178d0:	00002928 	.word	0x00002928
   178d4:	5f636441 	.word	0x5f636441
   178d8:	706f7453 	.word	0x706f7453
   178dc:	756f7247 	.word	0x756f7247
   178e0:	6e6f4370 	.word	0x6e6f4370
   178e4:	73726576 	.word	0x73726576
   178e8:	286e6f69 	.word	0x286e6f69
   178ec:	00000029 	.word	0x00000029
   178f0:	5f636441 	.word	0x5f636441
   178f4:	64616552 	.word	0x64616552
   178f8:	756f7247 	.word	0x756f7247
   178fc:	00292870 	.word	0x00292870
   17900:	5f636441 	.word	0x5f636441
   17904:	47746547 	.word	0x47746547
   17908:	70756f72 	.word	0x70756f72
   1790c:	74617453 	.word	0x74617453
   17910:	29287375 	.word	0x29287375
   17914:	00000000 	.word	0x00000000
   17918:	5f636441 	.word	0x5f636441
   1791c:	696c6143 	.word	0x696c6143
   17920:	74617262 	.word	0x74617262
   17924:	00292865 	.word	0x00292865
   17928:	5f636441 	.word	0x5f636441
   1792c:	75746553 	.word	0x75746553
   17930:	73655270 	.word	0x73655270
   17934:	42746c75 	.word	0x42746c75
   17938:	65666675 	.word	0x65666675
   1793c:	00292872 	.word	0x00292872
   17940:	5f636441 	.word	0x5f636441
   17944:	56746547 	.word	0x56746547
   17948:	69737265 	.word	0x69737265
   1794c:	6e496e6f 	.word	0x6e496e6f
   17950:	29286f66 	.word	0x29286f66
   17954:	00000000 	.word	0x00000000
   17958:	61766e49 	.word	0x61766e49
   1795c:	2064696c 	.word	0x2064696c
   17960:	20636461 	.word	0x20636461
   17964:	756f7267 	.word	0x756f7267
   17968:	00000070 	.word	0x00000070
   1796c:	66667542 	.word	0x66667542
   17970:	70207265 	.word	0x70207265
   17974:	746e696f 	.word	0x746e696f
   17978:	6e207265 	.word	0x6e207265
   1797c:	6920746f 	.word	0x6920746f
   17980:	6974696e 	.word	0x6974696e
   17984:	7a696c61 	.word	0x7a696c61
   17988:	00006465 	.word	0x00006465
   1798c:	696c6143 	.word	0x696c6143
   17990:	74617262 	.word	0x74617262
   17994:	206e6f69 	.word	0x206e6f69
   17998:	7265706f 	.word	0x7265706f
   1799c:	6f697461 	.word	0x6f697461
   179a0:	6974206e 	.word	0x6974206e
   179a4:	2064656d 	.word	0x2064656d
   179a8:	0074756f 	.word	0x0074756f
   179ac:	65686353 	.word	0x65686353
   179b0:	656c7564 	.word	0x656c7564
   179b4:	6e495f72 	.word	0x6e495f72
   179b8:	29287469 	.word	0x29287469
   179bc:	00000000 	.word	0x00000000
   179c0:	65686353 	.word	0x65686353
   179c4:	656c7564 	.word	0x656c7564
   179c8:	65475f72 	.word	0x65475f72
   179cc:	61745374 	.word	0x61745374
   179d0:	51737574 	.word	0x51737574
   179d4:	65756575 	.word	0x65756575
   179d8:	00002928 	.word	0x00002928
   179dc:	65686353 	.word	0x65686353
   179e0:	656c7564 	.word	0x656c7564
   179e4:	6c465f72 	.word	0x6c465f72
   179e8:	51687375 	.word	0x51687375
   179ec:	65756575 	.word	0x65756575
   179f0:	00002928 	.word	0x00002928
   179f4:	65686353 	.word	0x65686353
   179f8:	656c7564 	.word	0x656c7564
   179fc:	72575f72 	.word	0x72575f72
   17a00:	51657469 	.word	0x51657469
   17a04:	65756575 	.word	0x65756575
   17a08:	00002928 	.word	0x00002928
   17a0c:	65686353 	.word	0x65686353
   17a10:	656c7564 	.word	0x656c7564
   17a14:	65525f72 	.word	0x65525f72
   17a18:	75516461 	.word	0x75516461
   17a1c:	28657565 	.word	0x28657565
   17a20:	00000029 	.word	0x00000029
   17a24:	65686353 	.word	0x65686353
   17a28:	656c7564 	.word	0x656c7564
   17a2c:	74535f72 	.word	0x74535f72
   17a30:	54747261 	.word	0x54747261
   17a34:	286b7361 	.word	0x286b7361
   17a38:	00000029 	.word	0x00000029
   17a3c:	65686353 	.word	0x65686353
   17a40:	656c7564 	.word	0x656c7564
   17a44:	74535f72 	.word	0x74535f72
   17a48:	6154706f 	.word	0x6154706f
   17a4c:	29286b73 	.word	0x29286b73
   17a50:	00000000 	.word	0x00000000
   17a54:	65686353 	.word	0x65686353
   17a58:	656c7564 	.word	0x656c7564
   17a5c:	65505f72 	.word	0x65505f72
   17a60:	646f6972 	.word	0x646f6972
   17a64:	6b736154 	.word	0x6b736154
   17a68:	00002928 	.word	0x00002928
   17a6c:	65686353 	.word	0x65686353
   17a70:	656c7564 	.word	0x656c7564
   17a74:	74535f72 	.word	0x74535f72
   17a78:	54747261 	.word	0x54747261
   17a7c:	72656d69 	.word	0x72656d69
   17a80:	00002928 	.word	0x00002928
   17a84:	65686353 	.word	0x65686353
   17a88:	656c7564 	.word	0x656c7564
   17a8c:	74535f72 	.word	0x74535f72
   17a90:	6954706f 	.word	0x6954706f
   17a94:	2872656d 	.word	0x2872656d
   17a98:	00000029 	.word	0x00000029
   17a9c:	65686353 	.word	0x65686353
   17aa0:	656c7564 	.word	0x656c7564
   17aa4:	65475f72 	.word	0x65475f72
   17aa8:	6d695474 	.word	0x6d695474
   17aac:	29287265 	.word	0x29287265
   17ab0:	00000000 	.word	0x00000000
   17ab4:	65686353 	.word	0x65686353
   17ab8:	656c7564 	.word	0x656c7564
   17abc:	65525f72 	.word	0x65525f72
   17ac0:	64616f6c 	.word	0x64616f6c
   17ac4:	656d6954 	.word	0x656d6954
   17ac8:	00292872 	.word	0x00292872
   17acc:	65686353 	.word	0x65686353
   17ad0:	656c7564 	.word	0x656c7564
   17ad4:	614d5f72 	.word	0x614d5f72
   17ad8:	75466e69 	.word	0x75466e69
   17adc:	6974636e 	.word	0x6974636e
   17ae0:	29286e6f 	.word	0x29286e6f
   17ae4:	00000000 	.word	0x00000000
   17ae8:	75657551 	.word	0x75657551
   17aec:	64692065 	.word	0x64692065
   17af0:	74756f20 	.word	0x74756f20
   17af4:	20666f20 	.word	0x20666f20
   17af8:	676e6172 	.word	0x676e6172
   17afc:	00000065 	.word	0x00000065
   17b00:	61766e49 	.word	0x61766e49
   17b04:	2064696c 	.word	0x2064696c
   17b08:	75657571 	.word	0x75657571
   17b0c:	74732065 	.word	0x74732065
   17b10:	73757461 	.word	0x73757461
   17b14:	616c6620 	.word	0x616c6620
   17b18:	00000067 	.word	0x00000067
   17b1c:	6b736154 	.word	0x6b736154
   17b20:	20646920 	.word	0x20646920
   17b24:	2074756f 	.word	0x2074756f
   17b28:	7220666f 	.word	0x7220666f
   17b2c:	65676e61 	.word	0x65676e61
   17b30:	00000000 	.word	0x00000000
   17b34:	61766e49 	.word	0x61766e49
   17b38:	2064696c 	.word	0x2064696c
   17b3c:	6b736174 	.word	0x6b736174
   17b40:	20726f20 	.word	0x20726f20
   17b44:	656d6974 	.word	0x656d6974
   17b48:	65702072 	.word	0x65702072
   17b4c:	646f6972 	.word	0x646f6972
   17b50:	74696369 	.word	0x74696369
   17b54:	00000079 	.word	0x00000079
   17b58:	656d6954 	.word	0x656d6954
   17b5c:	64692072 	.word	0x64692072
   17b60:	74756f20 	.word	0x74756f20
   17b64:	20666f20 	.word	0x20666f20
   17b68:	676e6172 	.word	0x676e6172
   17b6c:	00000065 	.word	0x00000065
   17b70:	65686353 	.word	0x65686353
   17b74:	656c7564 	.word	0x656c7564
   17b78:	6e752072 	.word	0x6e752072
   17b7c:	74696e69 	.word	0x74696e69
   17b80:	696c6169 	.word	0x696c6169
   17b84:	0064657a 	.word	0x0064657a
   17b88:	6f497748 	.word	0x6f497748
   17b8c:	425f6241 	.word	0x425f6241
   17b90:	6f747475 	.word	0x6f747475
   17b94:	495f736e 	.word	0x495f736e
   17b98:	2874696e 	.word	0x2874696e
   17b9c:	00000029 	.word	0x00000029
   17ba0:	6f497748 	.word	0x6f497748
   17ba4:	425f6241 	.word	0x425f6241
   17ba8:	6f747475 	.word	0x6f747475
   17bac:	475f736e 	.word	0x475f736e
   17bb0:	76457465 	.word	0x76457465
   17bb4:	28746e65 	.word	0x28746e65
   17bb8:	00000029 	.word	0x00000029
   17bbc:	6f497748 	.word	0x6f497748
   17bc0:	425f6241 	.word	0x425f6241
   17bc4:	6f747475 	.word	0x6f747475
   17bc8:	4d5f736e 	.word	0x4d5f736e
   17bcc:	466e6961 	.word	0x466e6961
   17bd0:	74636e75 	.word	0x74636e75
   17bd4:	286e6f69 	.word	0x286e6f69
   17bd8:	00000029 	.word	0x00000029
   17bdc:	61766e49 	.word	0x61766e49
   17be0:	2064696c 	.word	0x2064696c
   17be4:	74747562 	.word	0x74747562
   17be8:	69206e6f 	.word	0x69206e6f
   17bec:	00000064 	.word	0x00000064
   17bf0:	61766e49 	.word	0x61766e49
   17bf4:	2064696c 	.word	0x2064696c
   17bf8:	74747562 	.word	0x74747562
   17bfc:	73206e6f 	.word	0x73206e6f
   17c00:	65746174 	.word	0x65746174
   17c04:	00000000 	.word	0x00000000
   17c08:	75646f4d 	.word	0x75646f4d
   17c0c:	7520656c 	.word	0x7520656c
   17c10:	696e696e 	.word	0x696e696e
   17c14:	6c616974 	.word	0x6c616974
   17c18:	64657a69 	.word	0x64657a69
   17c1c:	00000000 	.word	0x00000000
   17c20:	6f497748 	.word	0x6f497748
   17c24:	4c5f6241 	.word	0x4c5f6241
   17c28:	5f736465 	.word	0x5f736465
   17c2c:	74696e49 	.word	0x74696e49
   17c30:	00002928 	.word	0x00002928
   17c34:	6f497748 	.word	0x6f497748
   17c38:	4c5f6241 	.word	0x4c5f6241
   17c3c:	5f736465 	.word	0x5f736465
   17c40:	6e727554 	.word	0x6e727554
   17c44:	29286e4f 	.word	0x29286e4f
   17c48:	00000000 	.word	0x00000000
   17c4c:	6f497748 	.word	0x6f497748
   17c50:	4c5f6241 	.word	0x4c5f6241
   17c54:	5f736465 	.word	0x5f736465
   17c58:	6e727554 	.word	0x6e727554
   17c5c:	2866664f 	.word	0x2866664f
   17c60:	00000029 	.word	0x00000029
   17c64:	6f497748 	.word	0x6f497748
   17c68:	4c5f6241 	.word	0x4c5f6241
   17c6c:	5f736465 	.word	0x5f736465
   17c70:	6e727554 	.word	0x6e727554
   17c74:	67676f54 	.word	0x67676f54
   17c78:	2928656c 	.word	0x2928656c
   17c7c:	00000000 	.word	0x00000000
   17c80:	61766e49 	.word	0x61766e49
   17c84:	2064696c 	.word	0x2064696c
   17c88:	2064656c 	.word	0x2064656c
   17c8c:	00006469 	.word	0x00006469
   17c90:	6f497748 	.word	0x6f497748
   17c94:	505f6241 	.word	0x505f6241
   17c98:	5f73746f 	.word	0x5f73746f
   17c9c:	74696e49 	.word	0x74696e49
   17ca0:	00002928 	.word	0x00002928
   17ca4:	6f497748 	.word	0x6f497748
   17ca8:	505f6241 	.word	0x505f6241
   17cac:	5f73746f 	.word	0x5f73746f
   17cb0:	56746547 	.word	0x56746547
   17cb4:	65756c61 	.word	0x65756c61
   17cb8:	00002928 	.word	0x00002928
   17cbc:	6f497748 	.word	0x6f497748
   17cc0:	505f6241 	.word	0x505f6241
   17cc4:	5f73746f 	.word	0x5f73746f
   17cc8:	41746547 	.word	0x41746547
   17ccc:	6156746c 	.word	0x6156746c
   17cd0:	2865756c 	.word	0x2865756c
   17cd4:	00000029 	.word	0x00000029
   17cd8:	61766e49 	.word	0x61766e49
   17cdc:	2064696c 	.word	0x2064696c
   17ce0:	75706e69 	.word	0x75706e69
   17ce4:	6f702074 	.word	0x6f702074
   17ce8:	65746e69 	.word	0x65746e69
   17cec:	00000072 	.word	0x00000072
   17cf0:	6f497748 	.word	0x6f497748
   17cf4:	425f6241 	.word	0x425f6241
   17cf8:	657a7a75 	.word	0x657a7a75
   17cfc:	6e495f72 	.word	0x6e495f72
   17d00:	29287469 	.word	0x29287469
   17d04:	00000000 	.word	0x00000000
   17d08:	6f497748 	.word	0x6f497748
   17d0c:	425f6241 	.word	0x425f6241
   17d10:	657a7a75 	.word	0x657a7a75
   17d14:	65425f72 	.word	0x65425f72
   17d18:	29287065 	.word	0x29287065
   17d1c:	00000000 	.word	0x00000000
   17d20:	6f497748 	.word	0x6f497748
   17d24:	425f6241 	.word	0x425f6241
   17d28:	657a7a75 	.word	0x657a7a75
   17d2c:	74535f72 	.word	0x74535f72
   17d30:	2928706f 	.word	0x2928706f
   17d34:	00000000 	.word	0x00000000
   17d38:	61766e49 	.word	0x61766e49
   17d3c:	2064696c 	.word	0x2064696c
   17d40:	7a7a7562 	.word	0x7a7a7562
   17d44:	74207265 	.word	0x74207265
   17d48:	00656e6f 	.word	0x00656e6f
   17d4c:	2075634d 	.word	0x2075634d
   17d50:	75646f6d 	.word	0x75646f6d
   17d54:	0000656c 	.word	0x0000656c
   17d58:	74616c50 	.word	0x74616c50
   17d5c:	6d726f66 	.word	0x6d726f66
   17d60:	646f6d20 	.word	0x646f6d20
   17d64:	00656c75 	.word	0x00656c75
   17d68:	74726f50 	.word	0x74726f50
   17d6c:	646f6d20 	.word	0x646f6d20
   17d70:	00656c75 	.word	0x00656c75
   17d74:	206f6944 	.word	0x206f6944
   17d78:	75646f6d 	.word	0x75646f6d
   17d7c:	0000656c 	.word	0x0000656c
   17d80:	206d7750 	.word	0x206d7750
   17d84:	75646f6d 	.word	0x75646f6d
   17d88:	0000656c 	.word	0x0000656c
   17d8c:	20636441 	.word	0x20636441
   17d90:	75646f6d 	.word	0x75646f6d
   17d94:	0000656c 	.word	0x0000656c
   17d98:	65686353 	.word	0x65686353
   17d9c:	656c7564 	.word	0x656c7564
   17da0:	6f6d2072 	.word	0x6f6d2072
   17da4:	656c7564 	.word	0x656c7564
   17da8:	00000000 	.word	0x00000000
   17dac:	74747542 	.word	0x74747542
   17db0:	20736e6f 	.word	0x20736e6f
   17db4:	61204f49 	.word	0x61204f49
   17db8:	72747362 	.word	0x72747362
   17dbc:	69746361 	.word	0x69746361
   17dc0:	6d206e6f 	.word	0x6d206e6f
   17dc4:	6c75646f 	.word	0x6c75646f
   17dc8:	00000065 	.word	0x00000065
   17dcc:	7364654c 	.word	0x7364654c
   17dd0:	204f4920 	.word	0x204f4920
   17dd4:	74736261 	.word	0x74736261
   17dd8:	74636172 	.word	0x74636172
   17ddc:	206e6f69 	.word	0x206e6f69
   17de0:	75646f6d 	.word	0x75646f6d
   17de4:	0000656c 	.word	0x0000656c
   17de8:	73746f50 	.word	0x73746f50
   17dec:	204f4920 	.word	0x204f4920
   17df0:	74736261 	.word	0x74736261
   17df4:	74636172 	.word	0x74636172
   17df8:	206e6f69 	.word	0x206e6f69
   17dfc:	75646f6d 	.word	0x75646f6d
   17e00:	0000656c 	.word	0x0000656c
   17e04:	7a7a7542 	.word	0x7a7a7542
   17e08:	49207265 	.word	0x49207265
   17e0c:	6261204f 	.word	0x6261204f
   17e10:	61727473 	.word	0x61727473
   17e14:	6f697463 	.word	0x6f697463
   17e18:	6f6d206e 	.word	0x6f6d206e
   17e1c:	656c7564 	.word	0x656c7564
   17e20:	00000000 	.word	0x00000000
   17e24:	6f727245 	.word	0x6f727245
   17e28:	45203a72 	.word	0x45203a72
   17e2c:	726f7272 	.word	0x726f7272
   17e30:	206e6920 	.word	0x206e6920
   17e34:	69207325 	.word	0x69207325
   17e38:	7566206e 	.word	0x7566206e
   17e3c:	6974636e 	.word	0x6974636e
   17e40:	25206e6f 	.word	0x25206e6f
   17e44:	69772073 	.word	0x69772073
   17e48:	74206874 	.word	0x74206874
   17e4c:	69206568 	.word	0x69206568
   17e50:	6174736e 	.word	0x6174736e
   17e54:	2065636e 	.word	0x2065636e
   17e58:	202c6425 	.word	0x202c6425
   17e5c:	000a7325 	.word	0x000a7325
   17e60:	6d726554 	.word	0x6d726554
   17e64:	6c616e69 	.word	0x6c616e69
   17e68:	00000000 	.word	0x00000000
   17e6c:	4c554e28 	.word	0x4c554e28
   17e70:	0000294c 	.word	0x0000294c

00017e74 <Clock_Ip_au8DividerCallbackIndex>:
   17e74:	0e0d0c00 06030201 0a070409 000b0805     ................

00017e84 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

00017e94 <Clock_Ip_au8XoscCallbackIndex>:
   17e94:	00000100 00000000 00000000 00000000     ................

00017ea4 <Clock_Ip_au8IrcoscCallbackIndex>:
   17ea4:	03020100 00000004 00000000 00000000     ................

00017eb4 <Clock_Ip_au8GateCallbackIndex>:
   17eb4:	06010200 01040301 00000500 00000000     ................

00017ec4 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

00017ed4 <Clock_Ip_au8PllCallbackIndex>:
   17ed4:	00000100 00000000 00000000 00000000     ................

00017ee4 <Clock_Ip_au8SelectorCallbackIndex>:
   17ee4:	0a090800 03020109 07060504 00000000     ................

00017ef4 <Clock_Ip_au8PcfsCallbackIndex>:
	...

00017f04 <Clock_Ip_au8CmuCallbackIndex>:
	...

00017f14 <Clock_Ip_au8ClockFeatures>:
	...
   17f24:	01000000 00000000 00000000 00000002     ................
   17f34:	00000000 00000300 00000000 00040000     ................
   17f44:	00000000 05000000 00000000 00000000     ................
   17f54:	00000006 00000000 00000100 00000000     ................
   17f64:	00010000 00000000 04000000 00000000     ................
   17f74:	00000000 00000005 00000001 00000401     ................
   17f84:	00000200 00050100 00030000 04020000     ................
   17f94:	04000000 02000000 00000005 00000005     ................
   17fa4:	00000403 00000600 00050300 00070000     ................
   17fb4:	05000000 00000000 00000000 00000006     ................
	...
   17ff4:	00050000 00000000 06000000 00000100     ................
   18004:	00000000 00030007 00000000 00000000     ................
   18014:	00000000 00060000 00000000 07000000     ................
   18024:	00000100 00000000 00030008 00000000     ................
	...
   1803c:	00090000 00000000 0a000000 00000100     ................
   1804c:	00000000 0003000b 00000000 00000000     ................
   1805c:	00000000 000c0000 00000000 0d000000     ................
   1806c:	00000100 00000000 0003000e 00000000     ................
   1807c:	00000800 00000000 00090000 00000000     ................
   1808c:	0a000000 00000000 00000000 0000000b     ................
   1809c:	00000000 00000b01 00000000 000b0200     ................
   180ac:	00000000 0b030000 00000000 00000000     ................
	...
   180c4:	00000400 003b003b 00040000 27002700     ....;.;......'.'
   180d4:	01000000 00000000 00000000 00000007     ................
   180e4:	00007300 00000700 00320000 00090000     .s........2.....
   180f4:	02000000 07000000 00000000 00000021     ............!...
   18104:	00000009 00000400 00000900 00030000     ................
   18114:	00070000 61000000 07000000 00000000     .......a........
   18124:	00000024 00000007 00002500 00000700     $........%......
   18134:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
   18144:	00000000 00000020 38000004 00003800     .... ......8.8..
   18154:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
   18164:	04000000 00260000 00000026 66000004     ......&.&......f
   18174:	00006600 00000400 00370037 00040000     .f......7.7.....
   18184:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
   18194:	2e000004 00002e00 00000200 00404040     ............@@@.
   181a4:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
   181b4:	0000006b 6c000004 00006c00 00000900     k......l.l......
   181c4:	00010000 00090000 00000000 07000000     ................
   181d4:	00000000 00000036 00000007 00003100     ....6........1..
   181e4:	00000700 00490000 00070000 4a000000     ......I........J
   181f4:	07000000 00000000 0000004b 00000007     ........K.......
   18204:	00004c00 00000700 004d0000 00070000     .L........M.....
   18214:	3d000000 03000000 00000000 00000000     ...=............

00018224 <Clock_Ip_au16SelectorEntryHardwareValue>:
   18224:	01010a03 01010001 04040002 02000603     ................
   18234:	00010810 02020100 00000000 00000007     ................
   18244:	00000009 00000000 00000c0e 00000000     ................
	...

0001827c <Clock_Ip_au8SelectorEntryScsHardwareValue>:
   1827c:	00020000 00000300 00000601 00000000     ................
	...

000182ac <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
   182ac:	00000700 00000000 02020000 01010303     ................
   182bc:	03020606 00000000 00000000 00000000     ................
	...

000182dc <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
   182dc:	00000001 00000000 02020000 01010303     ................
   182ec:	03020606 00000000 00000000 00000000     ................
	...

0001830c <Clock_Ip_au8DividerValueHardwareValue>:
   1830c:	00020100 00000003 00000004 00000000     ................
   1831c:	00000005 00000000 00000000 00000000     ................
   1832c:	00000006 00000000 00000000 00000000     ................
	...
   1834c:	00000007                                ....

00018350 <Clock_Ip_apxScgPeriphAsyncDivs>:
   18350:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

00018360 <Clock_Ip_aeSourceTypeClockName>:
   18360:	00000000 00000001 00000001 00000001     ................
   18370:	00000001 00000001 00000001 00000001     ................
   18380:	00000002 00000003 00000001 00000001     ................
   18390:	00000001 00000001 00000002 00000002     ................
   183a0:	00000003 00000003 00000001 00000001     ................
   183b0:	00000004 00000004 00000004 00000004     ................
	...

0001841c <Clock_Ip_aeHwPllName>:
   1841c:	00000009                                ....

00018420 <Clock_Ip_aeHwDfsName>:
   18420:	00000057                                W...

00018424 <Clock_Ip_axDividerCallbacks>:
   18424:	00002fa9 00002fb3 00002fcd 00002fe7     ./.../.../.../..
   18434:	00003001 0000301b 00003035 0000304f     .0...0..50..O0..
   18444:	00003069 00003083 0000309d 000030b7     i0...0...0...0..
   18454:	000030d1 000030eb 00003105              .0...0...1..

00018460 <Clock_Ip_axDividerTriggerCallbacks>:
   18460:	00003479 00003479                       y4..y4..

00018468 <Clock_Ip_axExtOscCallbacks>:
   18468:	00003485 00003485 00003485 0000348f     .4...4...4...4..
   18478:	00003485 00003499 000034b3 000034cd     .4...4...4...4..
   18488:	00003551 00003565                       Q5..e5..

00018490 <Clock_Ip_axFracDivCallbacks>:
   18490:	00003725 00003725 0000372f              %7..%7../7..

0001849c <Clock_Ip_axGateCallbacks>:
   1849c:	00003749 00003753 00003853 0000386d     I7..S7..S8..m8..
   184ac:	00003803 0000381d 000037b3 000037cd     .8...8...7...7..
   184bc:	00003763 0000377d 000038a3 000038bd     c7..}7...8...8..
   184cc:	000038f3 0000390d                       .8...9..

000184d4 <Clock_Ip_axIntOscCallbacks>:
   184d4:	00003ab9 00003ab9 00003ac3 00003acd     .:...:...:...:..
   184e4:	00003ae7 00003b01 00003b15 00003b2f     .:...;...;../;..
   184f4:	00003b49 00003b5d 00003b77 00003b91     I;..];..w;...;..
   18504:	00003c39 00003c53 00003c6d              9<..S<..m<..

00018510 <Clock_Ip_axCmuCallbacks>:
   18510:	00004209 00004213 0000421f 00004209     .B...B...B...B..

00018520 <Clock_Ip_axPllCallbacks>:
   18520:	00004229 00004229 00004233 00004229     )B..)B..3B..)B..
   18530:	0000423f 00004249 00004263 0000427d     ?B..IB..cB..}B..
   18540:	00004321 0000430d                       !C...C..

00018548 <Clock_Ip_axPcfsCallbacks>:
   18548:	0000447d                                }D..

0001854c <Clock_Ip_axSelectorCallbacks>:
   1854c:	00004489 00004489 00004493 000044ad     .D...D...D...D..
   1855c:	00004489 000044c7 000044e1 000044fb     .D...D...D...D..
   1856c:	00004515 0000452f 00004549 00004563     .E../E..IE..cE..
   1857c:	0000457d 00004597 000045b1 000045cb     }E...E...E...E..
   1858c:	000045e5 000045ff 00004619 00004633     .E...E...F..3F..
   1859c:	0000464d 00004667                       MF..gF..

000185a4 <ClockSource>:
   185a4:	00000000 00000008 00000002 00000005     ................
	...
   185bc:	00000009                                ....

000185c0 <ResetReasonArray>:
   185c0:	00000000 00000001 00000002 00000003     ................
   185d0:	00000004 00000005 00000006 00000007     ................
   185e0:	00000008 00000009 0000000a 0000000b     ................
   185f0:	0000000c 0000000d 0000000e              ............

000185fc <Port_au32PortCiPortBaseAddr>:
   185fc:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
   1860c:	4004d000                                ...@

00018610 <Port_au32PortCiGpioBaseAddr>:
   18610:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
   18620:	400ff100                                ...@

00018624 <Adc_Ip_apxBase>:
   18624:	4003b000 40027000                       ...@.p.@

0001862c <Lpspi_Ip_apxBases>:
   1862c:	4002c000 4002d000 4002e000              ...@...@...@

00018638 <Can_Ipw_apxStatus>:
   18638:	1fff8e18 1fff9038                       ....8...

00018640 <Flexcan_Ip_apxBase>:
   18640:	40024000 40025000 4002b000              .@.@.P.@...@

0001864c <payload_code.3>:
   1864c:	03020100 07060504 09090908 0a0a0a09     ................
   1865c:	0b0b0b0a 0c0c0c0b 0d0d0d0c 0d0d0d0d     ................
   1866c:	0e0e0e0d 0e0e0e0e 0e0e0e0e 0e0e0e0e     ................
   1867c:	0f0f0f0e 0f0f0f0f 0f0f0f0f 0f0f0f0f     ................
   1868c:	0000000f                                ....

00018690 <flexcanBase.2>:
   18690:	40024000 40025000 4002b000              .@.@.P.@...@

0001869c <maxMbNum.1>:
   1869c:	00000020 00000010 00000010               ...........

000186a8 <flexcanBase.0>:
   186a8:	40024000                                .@.@

000186ac <McuApis>:
   186ac:	00000000 0001748c 00000002 00017498     .....t.......t..
   186bc:	00000008 000174a8 00000009 000174b8     .....t.......t..

000186cc <McuErrors>:
   186cc:	00000011 000174d0 0000000f 000174e8     .....t.......t..
   186dc:	00000013 00017500 0000000b 0001751c     .....u.......u..
   186ec:	0000000c 0001751c 00000010 0001751c     .....u.......u..

000186fc <PlatformApis>:
   186fc:	00000020 00017534 00000021 00017544      ...4u..!...Du..
   1870c:	00000022 00017558 00000023 00017574     "...Xu..#...tu..
   1871c:	00000024 00017590                       $....u..

00018724 <PlatformErrors>:
   18724:	00000001 000175b0 00000004 000175c0     .....u.......u..
   18734:	00000002 000175e4                       .....u..

0001873c <PortApis>:
   1873c:	00000000 000175fc 00000001 00017608     .....u.......v..
   1874c:	00000004 00017620 00000002 00017634     .... v......4v..
   1875c:	00000003 00017650                       ....Pv..

00018764 <PortErrors>:
   18764:	0000000a 00017668 0000000e 0001767c     ....hv......|v..
   18774:	0000000c 000174d0 000000f0 000174d0     .....t.......t..
   18784:	0000000d 0001769c 0000000f 000174e8     .....v.......t..
   18794:	00000010 0001751c                       .....u..

0001879c <DioApis>:
   1879c:	00000001 000176b4 00000000 000176c8     .....v.......v..
   187ac:	00000011 000176dc 00000005 000176f0     .....v.......v..
   187bc:	00000004 00017708 00000003 00017720     .....w...... w..
   187cc:	00000002 00017730 00000012 00017740     ....0w......@w..

000187dc <DioErrors>:
   187dc:	00000021 00017758 00000020 0001751c     !...Xw.. ....u..
   187ec:	0000000a 00017774 00000014 0001778c     ....tw.......w..
   187fc:	0000001f 0001779c 000000f0 000177b8     .....w.......w..

0001880c <PwmApis>:
   1880c:	00000000 000177d4 00000001 000177e0     .....w.......w..
   1881c:	00000002 000177f0 00000003 00017804     .....w.......x..
   1882c:	00000004 0001781c 00000008 00017834     .....x......4x..

0001883c <PwmErrors>:
   1883c:	00000010 0001784c 00000011 000174e8     ....Lx.......t..
   1884c:	00000014 00017500 00000012 00017864     .....u......dx..
   1885c:	00000013 00017878 00000015 0001751c     ....xx.......u..

0001886c <AdcApis>:
   1886c:	00000000 0001789c 00000001 000178a8     .....x.......x..
   1887c:	00000002 000178b8 00000003 000178d4     .....x.......x..
   1888c:	00000004 000178f0 00000009 00017900     .....x.......y..
   1889c:	00000029 00017918 0000000c 00017928     )....y......(y..
   188ac:	0000000a 00017940                       ....@y..

000188b4 <AdcErrors>:
   188b4:	0000000a 000174e8 0000000d 00017500     .....t.......u..
   188c4:	00000014 000175b0 00000015 00017958     .....u......Xy..
   188d4:	00000019 0001796c 0000002b 0001798c     ....ly..+....y..

000188e4 <SchedulerApis>:
   188e4:	00000000 000179ac 00000002 000179c0     .....y.......y..
   188f4:	00000003 000179dc 00000004 000179f4     .....y.......y..
   18904:	00000005 00017a0c 00000006 00017a24     .....z......$z..
   18914:	00000007 00017a3c 00000008 00017a54     ....<z......Tz..
   18924:	00000009 00017a6c 0000000a 00017a84     ....lz.......z..
   18934:	0000000b 00017a9c 0000000c 00017ab4     .....z.......z..
   18944:	0000000d 00017acc                       .....z..

0001894c <SchedulerErrors>:
   1894c:	00000000 0001784c 00000001 00017ae8     ....Lx.......z..
   1895c:	00000002 00017b00 00000003 00017b1c     .....{.......{..
   1896c:	00000004 00017b34 00000005 00017b58     ....4{......X{..
   1897c:	00000006 00017b70                       ....p{..

00018984 <HwIoAb_ButtonsApis>:
   18984:	00000000 00017b88 00000001 00017ba0     .....{.......{..
   18994:	00000002 00017bbc                       .....{..

0001899c <HwIoAb_ButtonsErrors>:
   1899c:	00000000 0001784c 00000001 00017bdc     ....Lx.......{..
   189ac:	00000002 00017bf0 00000003 00017c08     .....{.......|..

000189bc <HwIoAb_LedsApis>:
   189bc:	00000000 00017c20 00000001 00017c34     .... |......4|..
   189cc:	00000002 00017c4c 00000003 00017c64     ....L|......d|..

000189dc <HwIoAb_LedsErrors>:
   189dc:	00000000 0001784c 00000001 00017c80     ....Lx.......|..
   189ec:	00000002 00017c08                       .....|..

000189f4 <HwIoAb_PotsApis>:
   189f4:	00000000 00017c90 00000001 00017ca4     .....|.......|..
   18a04:	00000002 00017cbc                       .....|..

00018a0c <HwIoAb_PotsErrors>:
   18a0c:	00000000 00017cd8 00000001 00017c08     .....|.......|..

00018a1c <HwIoAb_BuzzerApis>:
   18a1c:	00000000 00017cf0 00000001 00017d08     .....|.......}..
   18a2c:	00000002 00017d20                       .... }..

00018a34 <HwIoAb_BuzzerErrors>:
   18a34:	00000000 00017d38                       ....8}..

00018a3c <ModuleStrings>:
   18a3c:	00000065 00017d4c 00000004 000186ac     e...L}..........
   18a4c:	00000006 000186cc 000000ff 00017d58     ............X}..
   18a5c:	00000005 000186fc 00000003 00018724     ............$...
   18a6c:	0000007c 00017d68 00000005 0001873c     |...h}......<...
   18a7c:	00000007 00018764 00000078 00017d74     ....d...x...t}..
   18a8c:	00000008 0001879c 00000006 000187dc     ................
   18a9c:	00000079 00017d80 00000006 0001880c     y....}..........
   18aac:	00000006 0001883c 0000007b 00017d8c     ....<...{....}..
   18abc:	00000009 0001886c 00000006 000188b4     ....l...........
   18acc:	0000012c 00017d98 0000000d 000188e4     ,....}..........
   18adc:	00000007 0001894c 0000012d 00017dac     ....L...-....}..
   18aec:	00000003 00018984 00000004 0001899c     ................
   18afc:	0000012e 00017dcc 00000004 000189bc     .....}..........
   18b0c:	00000003 000189dc 0000012f 00017de8     ......../....}..
   18b1c:	00000003 000189f4 00000002 00018a0c     ................
   18b2c:	00000130 00017e04 00000003 00018a1c     0....~..........
   18b3c:	00000001 00018a34                       ....4...

00018b44 <Can_43_FLEXCAN_Driver_P2Func>:
   18b44:	0000a725 0000a3a1 0000a545 0000a4e5     %.......E.......
   18b54:	0000a5bd 0000a649 0000a67d 0000a6d1     ....I...}.......

00018b64 <Can_43_FLEXCAN_Driver_Config>:
   18b64:	00040000 00018b44                       ....D...

00018b6c <CanIf_CtrlPCConfig>:
   18b6c:	00000000 00018b64 00000101 00018b64     ....d.......d...

00018b7c <CanIf_PCConfig>:
   18b7c:	00000002 00018b6c                       ....l...

00018b84 <CanIf_TxPdu>:
   18b84:	00000000 00000100 00000003 00010002     ................
   18b94:	000009f5 00000001 00000101 00000003     ................
   18ba4:	00010002 000009f5 00000002 00000102     ................
   18bb4:	00000003 00010002 000009f5 00000003     ................
   18bc4:	00000103 00000003 00010002 000009f5     ................
   18bd4:	00000004 00000300 00000002 00000003     ................
   18be4:	00000aa9                                ....

00018be8 <CanIf_RxPdu>:
   18be8:	00010000 00010003 00000a3d 00010001     ........=.......
   18bf8:	00000003 00000ae1                       ........

00018c00 <CanIf_Can_43_FLEXCAN_HohToRxPduMapping>:
   18c00:	00018be8 00018bf4 00000000 00000000     ................

00018c10 <CanIf_Can_43_FLEXCAN_DrvConfig>:
   18c10:	00018c00                                ....

00018c14 <CanIf_CanDrvConfig>:
   18c14:	00018c10                                ....

00018c18 <CanIf_Config>:
   18c18:	00000502 00018c14 00018be8 00018b84     ................

00018c28 <Can_43_FLEXCANIpwHwChannelConfig0>:
   18c28:	000191ac                                ....

00018c2c <Can_43_FLEXCANIpwHwChannelConfig1>:
   18c2c:	000191fc                                ....

00018c30 <Can_au32HwBufferAddr_Ctrl0>:
   18c30:	4002b080 4002b090                       ...@...@

00018c38 <Can_au32HwBufferAddr_Ctrl1>:
   18c38:	40024080 40024098 400240b0 400240c8     .@.@.@.@.@.@.@.@
   18c48:	400240e0                                .@.@

00018c4c <Can_aHwFilter_Object0>:
   18c4c:	00000200 dffc0000                       ........

00018c54 <Can_aHwFilter_Object1>:
   18c54:	00000400 dffc0000                       ........

00018c5c <Can_aCtrlOffsetToCtrlIDMap>:
   18c5c:	0000ff01                                ....

00018c60 <Can_aHwObjIDToCtrlIDMap>:
   18c60:	00010001                                ....

00018c64 <Can_aHwObjectConfig>:
	...
   18c70:	ff010000 00010008 00018c4c 00000000     ........L.......
   18c80:	00000000 00018c38 00000001 00000000     ....8...........
   18c90:	00000000 ff010000 00010008 00018c54     ............T...
	...
   18ca8:	00018c30 00000002 00000001 00000000     0...............
   18cb8:	ff040000 0000000c 00000000 00000003     ................
   18cc8:	00000001 00018c3c 00000003 00000001     ....<...........
   18cd8:	00000000 ff010000 00000008 00000000     ................
   18ce8:	00000003 00000001 00018c34              ........4...

00018cf4 <Can_aBaudrateConfig_Ctrl0>:
   18cf4:	06030000 001d0003 00000000 00000000     ................
	...

00018d0c <Can_apHwObject_Ctrl0>:
   18d0c:	00018c88 00018cd0                       ........

00018d14 <Can_aBaudrateConfig_Ctrl1>:
   18d14:	06030101 00020003 02020000 00020001     ................
	...

00018d2c <Can_apHwObject_Ctrl1>:
   18d2c:	00018c64 00018cac                       d.......

00018d34 <Can_aControllerConfig>:
   18d34:	00020000 4002b000 00000001 ffffffff     .......@........
	...
   18d50:	00010000 00018cf4 00018c28 00000002     ........(.......
   18d60:	00018d0c 00000101 40024000 00000001     .........@.@....
   18d70:	ffffffff 00000000 00000000 00000000     ................
   18d80:	00010000 00018d14 00018c2c 00000002     ........,.......
   18d90:	00018d2c                                ,...

00018d94 <Can_apController>:
   18d94:	00018d34 00018d64                       4...d...

00018d9c <Can_43_FLEXCAN_Config>:
   18d9c:	00000000 00000002 00018c5c 00018c60     ........\...`...
   18dac:	00018c64 00018d94                       d.......

00018db4 <Mcu_aClockConfigPB>:
	...
   18dbc:	14000002 0400000e 01000020 00000002     ........ .......
   18dcc:	01000001 00000001 00000005 00000001     ................
   18ddc:	00000000 00000057 00000000 00000000     ....W...........
	...
   18df4:	00000057 00000000 00000057 00000000     W.......W.......
	...
   18e1c:	00000019 00000005 0000001a 00000002     ................
   18e2c:	0000001b 00000005 0000002a 00000002     ........*.......
   18e3c:	0000003f 0000000a 00000040 0000000a     ?.......@.......
   18e4c:	00000041 00000000 00000042 00000000     A.......B.......
   18e5c:	00000031 0000000b 00000045 00000000     1.......E.......
   18e6c:	00000046 0000000b 00000047 00000000     F.......G.......
   18e7c:	00000044 00000000 00000030 0000000b     D.......0.......
   18e8c:	0000003d 00000000 00000043 00000000     =.......C.......
   18e9c:	00000049 00000000 0000004a 00000000     I.......J.......
   18eac:	0000004b 00000000 00000048 00000000     K.......H.......
   18ebc:	00000057 00000057 00000057 00000057     W...W...W...W...
   18ecc:	00000057 00000057 00000057 00000057     W...W...W...W...
   18edc:	00000057 00000057 00000057 00000057     W...W...W...W...
   18eec:	00000057 00000057 00000057 00000057     W...W...W...W...
   18efc:	0000000a 00000001 00000000 0000000b     ................
   18f0c:	00000001 00000000 0000000c 00000001     ................
   18f1c:	00000000 0000000d 00000002 00000000     ................
   18f2c:	0000001d 00000001 00000000 0000001e     ................
   18f3c:	00000002 00000000 0000001f 00000001     ................
   18f4c:	00000000 00000021 00000001 00000000     ....!...........
   18f5c:	00000022 00000002 00000000 00000023     "...........#...
   18f6c:	00000001 00000000 00000025 00000002     ........%.......
   18f7c:	00000000 00000026 00000004 00000000     ....&...........
   18f8c:	00000027 00000002 00000000 00000048     '...........H...
   18f9c:	00000001 00000001 00000057 00000000     ........W.......
   18fac:	00000000 00000057 00000000 00000000     ....W...........
   18fbc:	00000057 00000000 00000000 00000057     W...........W...
	...
   18fd4:	00000057 00000000 00000000 00000057     W...........W...
	...
   18fec:	00000057 00000000 00000057 00000057     W.......W...W...
	...
   19008:	00000014 00007d00 00000015 00007d00     .....}.......}..
   19018:	00000016 00007d00 00000017 00008000     .....}..........
   19028:	00000030 00000001 00000031 00000001     0.......1.......
   19038:	00000033 00000000 00000034 00000000     3.......4.......
   19048:	00000036 00000000 00000039 00000000     6.......9.......
   19058:	0000003a 00000001 0000003b 00000000     :.......;.......
   19068:	0000003c 00000001 0000003d 00000000     <.......=.......
   19078:	0000003e 00000000 0000003f 00000000     >.......?.......
   19088:	00000040 00000001 00000041 00000000     @.......A.......
   19098:	00000042 00000000 00000043 00000000     B.......C.......
   190a8:	00000044 00000000 00000045 00000000     D.......E.......
   190b8:	00000046 00000001 00000047 00000000     F.......G.......
   190c8:	00000048 00000000 00000049 00000000     H.......I.......
   190d8:	0000004a 00000000 0000004b 00000000     J.......K.......
   190e8:	0000004e 00000001 0000004f 00000001     N.......O.......
   190f8:	00000050 00000001 00000051 00000001     P.......Q.......
   19108:	00000052 00000001 00000053 00000001     R.......S.......
   19118:	00000054 00000001 00000055 00000000     T.......U.......
   19128:	00000057 00000000 00000057 00000000     W.......W.......
   19138:	00000057 00000000 00000057 00000000     W.......W.......
   19148:	00000057 00000000 00000057 00000000     W.......W.......
   19158:	00000057 00000000 00000057 00000000     W.......W.......
   19168:	00000057 00000000 00000057 00000000     W.......W.......
   19178:	00000000 00000057 00000000 00000057     ....W.......W...
	...

000191ac <Flexcan_aCtrlConfigPB>:
   191ac:	00000002 00000000 00000000 00000000     ................
   191bc:	00000040 00000000 00000100 00000003     @...............
   191cc:	00000006 00000003 0000001d 00000000     ................
   191dc:	00000004 00000006 00000003 0000001d     ................
	...
   191f4:	0000b925 0000b9d1 00000005 00000000     %...............
	...
   1920c:	00000060 00000001 01000101 00000003     `...............
   1921c:	00000006 00000003 00000002 00000000     ................
   1922c:	00000002 00000002 00000001 00000002     ................
	...
   19244:	0000b925 0000b9d1                       %.......

0001924c <aIrqConfiguration>:
   1924c:	00000027 00000000 00008439 00000028     '.......9...(...
   1925c:	00000000 00008449 0000005c 00000f01     ....I...\.......
   1926c:	0000fe51 0000005d 00000f01 0000fe61     Q...].......a...
   1927c:	0000005f 00000f01 0000fe71 0000004e     _.......q...N...
   1928c:	00000f01 0000fdc1 0000004f 00000f01     ........O.......
   1929c:	0000fdd1 00000051 00000f01 0000fde1     ....Q...........

000192ac <intCtrlConfig>:
   192ac:	00000008 0001924c                       ....L...

000192b4 <Lpspi_Ip_DeviceAttributes_Conf0Spi1Cs3>:
   192b4:	00000001 07070606 43200000 1fff8b28     .......... C(...

000192c4 <Lpspi_Ip_PhyUnitConfig_SPI1>:
   192c4:	00000001 00000000 00000001 00000000     ................
   192d4:	00000000                                ....

000192d8 <Mcu_Config>:
   192d8:	0000005a 00000000 00000001 00000001     Z...............
   192e8:	00019974 00018db4 00019980              t...........

000192f4 <OsIf_xPredefinedConfig>:
   192f4:	00000000 02dc6c00                       .....l..

000192fc <OsIf_apxPredefinedConfig>:
   192fc:	000192f4                                ....

00019300 <Platform_uConfiguration>:
   19300:	00019308                                ....

00019304 <Platform_Config>:
   19304:	00019300                                ....

00019308 <ipwConfig>:
   19308:	000192ac 00000000                       ........

00019310 <Port_au16PinDescription>:
   19310:	0003ffff 0003ffff 0003ffff 0003ffff     ................
   19320:	0001ffff 0003ffff 0003ffff 0003ffff     ................
   19330:	0003ffff 0001ffff 0003ffcf 0003ffff     ................
   19340:	0003ffff 0003fcff 0001dfef 0003f36f     ............o...
   19350:	0003fe3f 0003f3ff 00026e3f 0001bebf     ?.......?n......
   19360:	0002cf9f 0000302f 000030cc 000183ef     ..../0...0......
   19370:	0001ec7c 00000b1f 00000023 00000010     |.......#.......
   19380:	0001010c 00000033 000072cf 0000003c     ....3....r..<...
   19390:	0000cff3 00001b2f 00018c7f 00000433     ..../.......3...
   193a0:	00000000 00000030 0000600b 00018c38     ....0....`..8...

000193b0 <g_pin_mux_InitConfigArr>:
   193b0:	4004b000 400ff080 00000008 00000002     ...@...@........
   193c0:	00000001 00000002 00000000 00000000     ................
	...
   193d8:	4004b000 400ff080 00000009 00000002     ...@...@........
   193e8:	00000001 00000002 00000000 00000000     ................
	...
   19400:	4004b000 400ff080 0000000a 00000002     ...@...@........
   19410:	00000001 00000002 00000000 00000000     ................
	...
   19428:	4004b000 400ff080 0000000b 00000002     ...@...@........
   19438:	00000001 00000002 00000000 00000000     ................
	...
   19450:	4004b000 400ff080 0000000d 00000002     ...@...@........
   19460:	00000001 00000002 00000000 00000000     ................
	...
   19478:	4004b000 400ff080 0000000e 00000002     ...@...@........
   19488:	00000001 00000002 00000000 00000000     ................
	...
   194a0:	4004b000 00000000 00000010 00000002     ...@............
   194b0:	00000003 00000001 00000000 00000000     ................
	...
   194c8:	4004b000 00000000 00000011 00000002     ...@............
   194d8:	00000003 00000002 00000000 00000000     ................
	...
   194f0:	4004d000 400ff100 0000000c 00000002     ...@...@........
   19500:	00000001 00000001 00000000 00000000     ................
	...
   19518:	4004d000 00000000 00000004 00000002     ...@............
   19528:	00000005 00000001 00000000 00000000     ................
	...
   19540:	4004d000 00000000 00000005 00000002     ...@............
   19550:	00000005 00000002 00000000 00000000     ................
	...
   19568:	4004c000 400ff0c0 00000011 00000002     ...@...@........
   19578:	00000001 00000001 00000000 00000000     ................
	...
   19590:	40049000 400ff000 0000000c 00000002     ...@...@........
   195a0:	00000001 00000001 00000000 00000000     ................
	...
   195b8:	40049000 00000000 0000000d 00000002     ...@............
   195c8:	00000002 00000002 00000000 00000000     ................
	...
   195e0:	4004a000 00000000 00000001 00000002     ...@............
   195f0:	00000000 00000001 00000000 00000000     ................
	...
   19608:	4004a000 00000000 0000000d 00000002     ...@............
   19618:	00000000 00000001 00000000 00000000     ................
	...
   19630:	4004a000 00000000 0000000e 00000002     ...@............
   19640:	00000003 00000002 00000000 00000000     ................
	...
   19658:	4004a000 00000000 0000000f 00000002     ...@............
   19668:	00000003 00000001 00000000 00000000     ................
	...
   19680:	4004a000 00000000 00000010 00000002     ...@............
   19690:	00000003 00000002 00000000 00000000     ................
	...
   196a8:	4004a000 00000000 00000011 00000002     ...@............
   196b8:	00000003 00000002 00000000 00000000     ................
	...

000196d0 <au8Port_PartitionList>:
   196d0:	00000001                                ....

000196d4 <au32Port_PinToPartitionMap>:
   196d4:	00000001 00000001 00000001 00000001     ................
   196e4:	00000001 00000001 00000001 00000001     ................
   196f4:	00000001 00000001 00000001 00000001     ................
   19704:	00000001 00000001 00000001 00000001     ................
   19714:	00000001 00000001 00000001 00000001     ................

00019724 <Port_au16NoUnUsedPadsArrayDefault>:
   19724:	00010000 00030002 00070006 00090008     ................
   19734:	000e000b 0010000f 00200011 00230022     .......... .".#.
   19744:	00250024 00270026 00290028 002b002a     $.%.&.'.(.).*.+.
   19754:	0040002c 00420041 00460043 004c0047     ,.@.A.B.C.F.G.L.
   19764:	0060004f 00620061 00640063 00660065     O.`.a.b.c.d.e.f.
   19774:	00680067 006a0069 006c006b 006e006d     g.h.i.j.k.l.m.n.
   19784:	0070006f 00810080 00830082 00870086     o.p.............
   19794:	00890088 008b008a 008e008d 0090008f     ................

000197a4 <Port_UnUsedPin>:
   197a4:	00000000 00000001 00000000              ............

000197b0 <Port_aPinConfigDefault>:
   197b0:	00000048 00000100 00000000 00000002     H...............
   197c0:	00010001 00000049 00000100 00000000     ....I...........
   197d0:	00000002 00010101 0000004a 00000100     ........J.......
   197e0:	00000000 00000002 00010101 0000008c     ................
   197f0:	00000100 00000000 00000001 00010101     ................
   19800:	0000004b 00000100 00000000 00000002     K...............
   19810:	00010101 0000004d 00000100 00000000     ....M...........
   19820:	00000002 00010101 0000004e 00000100     ........N.......
   19830:	00000000 00000002 00010101 00000071     ............q...
   19840:	00000100 00000000 00000001 00010101     ................
   19850:	0000000c 00000100 00000000 00000001     ................
   19860:	00010101 00000021 00000000 00000002     ....!...........
   19870:	00000000 00010000 0000002d 00000000     ........-.......
   19880:	00000002 00000000 00010000 0000000d     ................
   19890:	00000200 00000000 00000002 00010000     ................
   198a0:	00000050 00000300 00000000 00000001     P...............
   198b0:	00010000 00000051 00000300 00000000     ....Q...........
   198c0:	00000002 00010000 0000002e 00000300     ................
   198d0:	00000000 00000002 00010000 0000002f     ............/...
   198e0:	00000300 00000000 00000001 00010000     ................
   198f0:	00000030 00000300 00000000 00000002     0...............
   19900:	00010000 00000031 00000300 00000000     ....1...........
   19910:	00000002 00010000 00000084 00000500     ................
   19920:	00000000 00000001 00010000 00000085     ................
   19930:	00000500 00000000 00000002 00010000     ................

00019940 <Port_Config>:
   19940:	00400014 00019724 000197a4 000197b0     ..@.$...........
	...
   19958:	000196d4 000196d0 000193b0              ............

00019964 <Power_Ip_RCM_ConfigPB>:
	...

0001996c <Power_Ip_PMC_ConfigPB>:
   1996c:	00000000                                ....

00019970 <Power_Ip_SMC_ConfigPB>:
   19970:	00000000                                ....

00019974 <Power_Ip_aModeConfigPB>:
	...

00019980 <Power_Ip_HwIPsConfigPB>:
   19980:	00019964 0001996c 00019970              d...l...p...

0001998c <Spi_ExternalDeviceConfig_Conf0Spi1Cs3>:
   1998c:	00000000 00000001 000192b4 00000000     ................

0001999c <Spi_aExternalDeviceConfigList>:
   1999c:	0001998c                                ....

000199a0 <Spi_HwUnitConfig_SPI1>:
   199a0:	00000000 00000001 00000000 000192c4     ................
   199b0:	00000001                                ....

000199b4 <Spi_aHwUnitConfigList>:
   199b4:	000199a0                                ....

000199b8 <Spi_ChannelConfig_Spi1Cs3_Control>:
   199b8:	00000001 00000008 00000001 00000004     ................
   199c8:	1fff98f8 00000000 1fff8df8              ............

000199d4 <Spi_ChannelConfig_Spi1Cs3_Data>:
   199d4:	00000001 00000008 00000001 00000004     ................
   199e4:	1fff9904 00000000 1fff8dfc              ............

000199f0 <Spi_aChannelConfigList>:
   199f0:	000199b8 000199d4                       ........

000199f8 <Spi_Spi1Cs3_W_R_Job_ChannelAssignment>:
   199f8:	00000100                                ....

000199fc <Spi_JobConfig_Spi1Cs3_W_R_Job>:
   199fc:	00000002 000199f8 00000000 00000000     ................
	...
   19a14:	1fff8df4 00000000 0001999c              ............

00019a20 <Spi_aJobConfigList>:
   19a20:	000199fc                                ....

00019a24 <Spi_Spi1Cs3_Sequence_W_R_JobAssignment>:
   19a24:	00000000                                ....

00019a28 <Spi_SequenceConfig_Spi1Cs3_Sequence_W_R>:
   19a28:	00000001 00000000 00019a24 00000000     ........$.......
   19a38:	00000000                                ....

00019a3c <Spi_aSequenceConfigList>:
   19a3c:	00019a28                                (...

00019a40 <Spi_Config>:
   19a40:	00010001 00000000 00000000 000199f0     ................
   19a50:	00019a20 00019a3c 0001999c 000199b4      ...<...........

00019a60 <_aInitStr.0>:
   19a60:	00000000 54540000 45522052 53454747     ......TTR REGGES
   19a70:	00000000                                ....

00019a74 <_aV2C.0>:
   19a74:	33323130 37363534 42413938 46454443     0123456789ABCDEF

00019a84 <__INIT_TABLE>:
   19a84:	00000002 	.word	0x00000002
   19a88:	1fff8b10 	.word	0x1fff8b10
   19a8c:	00019aac 	.word	0x00019aac
   19a90:	00019acc 	.word	0x00019acc
   19a94:	1fff8800 	.word	0x1fff8800
   19a98:	00000000 	.word	0x00000000
   19a9c:	00000310 	.word	0x00000310

00019aa0 <__ZERO_TABLE>:
   19aa0:	00000001 	.word	0x00000001
   19aa4:	1fff8b30 	.word	0x1fff8b30
   19aa8:	1fff9dd0 	.word	0x1fff9dd0
