
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000ba7 	.word	0x00000ba7
  10:	00000ba9 	.word	0x00000ba9
  14:	00000bab 	.word	0x00000bab
  18:	00000bad 	.word	0x00000bad
	...
  2c:	00000baf 	.word	0x00000baf
  30:	00000bb1 	.word	0x00000bb1
  34:	00000000 	.word	0x00000000
  38:	00000bb3 	.word	0x00000bb3
  3c:	00000bb5 	.word	0x00000bb5
  40:	00000bb7 	.word	0x00000bb7
  44:	00000bb7 	.word	0x00000bb7
  48:	00000bb7 	.word	0x00000bb7
  4c:	00000bb7 	.word	0x00000bb7
  50:	00000bb7 	.word	0x00000bb7
  54:	00000bb7 	.word	0x00000bb7
  58:	00000bb7 	.word	0x00000bb7
  5c:	00000bb7 	.word	0x00000bb7
  60:	00000bb7 	.word	0x00000bb7
  64:	00000bb7 	.word	0x00000bb7
  68:	00000bb7 	.word	0x00000bb7
  6c:	00000bb7 	.word	0x00000bb7
  70:	00000bb7 	.word	0x00000bb7
  74:	00000bb7 	.word	0x00000bb7
  78:	00000bb7 	.word	0x00000bb7
  7c:	00000bb7 	.word	0x00000bb7
  80:	00000bb7 	.word	0x00000bb7
  84:	00000bb7 	.word	0x00000bb7
  88:	00000bb7 	.word	0x00000bb7
  8c:	00000bb7 	.word	0x00000bb7
  90:	00000bb7 	.word	0x00000bb7
  94:	00000bb7 	.word	0x00000bb7
  98:	00000bb7 	.word	0x00000bb7
  9c:	00000bb7 	.word	0x00000bb7
  a0:	00000bb7 	.word	0x00000bb7
  a4:	00000bb7 	.word	0x00000bb7
  a8:	00000bb7 	.word	0x00000bb7
  ac:	00000bb7 	.word	0x00000bb7
  b0:	00000bb7 	.word	0x00000bb7
  b4:	00000bb7 	.word	0x00000bb7
  b8:	00000bb7 	.word	0x00000bb7
  bc:	00000bb7 	.word	0x00000bb7
  c0:	00000bb7 	.word	0x00000bb7
  c4:	00000bb7 	.word	0x00000bb7
  c8:	00000bb7 	.word	0x00000bb7
  cc:	00000bb7 	.word	0x00000bb7
  d0:	00000bb7 	.word	0x00000bb7
  d4:	00000bb7 	.word	0x00000bb7
  d8:	00000bb7 	.word	0x00000bb7
  dc:	00000bb7 	.word	0x00000bb7
  e0:	00000bb7 	.word	0x00000bb7
  e4:	00000bb7 	.word	0x00000bb7
  e8:	00000bb7 	.word	0x00000bb7
  ec:	00000bb7 	.word	0x00000bb7
  f0:	00000bb7 	.word	0x00000bb7
  f4:	00000bb7 	.word	0x00000bb7
  f8:	00000bb7 	.word	0x00000bb7
  fc:	00000bb7 	.word	0x00000bb7
 100:	00000bb7 	.word	0x00000bb7
 104:	00000bb7 	.word	0x00000bb7
 108:	00000bb7 	.word	0x00000bb7
 10c:	00000bb7 	.word	0x00000bb7
 110:	00000bb7 	.word	0x00000bb7
 114:	00000bb7 	.word	0x00000bb7
 118:	00000bb7 	.word	0x00000bb7
 11c:	00000bb7 	.word	0x00000bb7
 120:	00000bb7 	.word	0x00000bb7
 124:	00000bb7 	.word	0x00000bb7
 128:	00000bb7 	.word	0x00000bb7
 12c:	00000bb7 	.word	0x00000bb7
 130:	00000bb7 	.word	0x00000bb7
 134:	00000bb7 	.word	0x00000bb7
 138:	00000bb7 	.word	0x00000bb7
 13c:	00000bb7 	.word	0x00000bb7
 140:	00000bb7 	.word	0x00000bb7
 144:	00000bb7 	.word	0x00000bb7
 148:	00000bb7 	.word	0x00000bb7
 14c:	00000bb7 	.word	0x00000bb7
 150:	00000bb7 	.word	0x00000bb7
 154:	00000bb7 	.word	0x00000bb7
 158:	00000bb7 	.word	0x00000bb7
 15c:	00000bb7 	.word	0x00000bb7
 160:	00000bb7 	.word	0x00000bb7
 164:	00000bb7 	.word	0x00000bb7
 168:	00000bb7 	.word	0x00000bb7
 16c:	00000bb7 	.word	0x00000bb7
 170:	00000bb7 	.word	0x00000bb7
 174:	00000bb7 	.word	0x00000bb7
 178:	00000bb7 	.word	0x00000bb7
 17c:	00000bb7 	.word	0x00000bb7
 180:	00000bb7 	.word	0x00000bb7
 184:	00000bb7 	.word	0x00000bb7
 188:	00000bb7 	.word	0x00000bb7
 18c:	00000bb7 	.word	0x00000bb7
 190:	00000bb7 	.word	0x00000bb7
 194:	00000bb7 	.word	0x00000bb7
 198:	00000bb7 	.word	0x00000bb7
 19c:	00000bb7 	.word	0x00000bb7
 1a0:	00000bb7 	.word	0x00000bb7
 1a4:	00000bb7 	.word	0x00000bb7
 1a8:	00000bb7 	.word	0x00000bb7
 1ac:	00000bb7 	.word	0x00000bb7
 1b0:	00000bb7 	.word	0x00000bb7
 1b4:	00000bb7 	.word	0x00000bb7
 1b8:	00000bb7 	.word	0x00000bb7
 1bc:	00000bb7 	.word	0x00000bb7
 1c0:	00000bb7 	.word	0x00000bb7
 1c4:	00000bb7 	.word	0x00000bb7
 1c8:	00000bb7 	.word	0x00000bb7
 1cc:	00000bb7 	.word	0x00000bb7
 1d0:	00000bb7 	.word	0x00000bb7
 1d4:	00000bb7 	.word	0x00000bb7
 1d8:	00000bb7 	.word	0x00000bb7
 1dc:	00000bb7 	.word	0x00000bb7
 1e0:	00000bb7 	.word	0x00000bb7
 1e4:	00000bb7 	.word	0x00000bb7
 1e8:	00000bb7 	.word	0x00000bb7
 1ec:	00000bb7 	.word	0x00000bb7
 1f0:	00000bb7 	.word	0x00000bb7
 1f4:	00000bb7 	.word	0x00000bb7
 1f8:	00000bb7 	.word	0x00000bb7
 1fc:	00000bb7 	.word	0x00000bb7
 200:	00000bb7 	.word	0x00000bb7
 204:	00000bb7 	.word	0x00000bb7
 208:	00000bb7 	.word	0x00000bb7
 20c:	00000bb7 	.word	0x00000bb7
 210:	00000bb7 	.word	0x00000bb7
 214:	00000bb7 	.word	0x00000bb7
 218:	00000bb7 	.word	0x00000bb7
 21c:	00000bb7 	.word	0x00000bb7
 220:	00000bb7 	.word	0x00000bb7
 224:	00000bb7 	.word	0x00000bb7
 228:	00000bb7 	.word	0x00000bb7
 22c:	00000bb7 	.word	0x00000bb7
 230:	00000bb7 	.word	0x00000bb7
 234:	00000bb7 	.word	0x00000bb7
 238:	00000bb7 	.word	0x00000bb7
 23c:	00000bb7 	.word	0x00000bb7
 240:	00000bb7 	.word	0x00000bb7
 244:	00000bb7 	.word	0x00000bb7
 248:	00000bb7 	.word	0x00000bb7
 24c:	00000bb7 	.word	0x00000bb7
 250:	00000bb7 	.word	0x00000bb7
 254:	00000bb7 	.word	0x00000bb7
 258:	00000bb7 	.word	0x00000bb7
 25c:	00000bb7 	.word	0x00000bb7
 260:	00000bb7 	.word	0x00000bb7
 264:	00000bb7 	.word	0x00000bb7
 268:	00000bb7 	.word	0x00000bb7
 26c:	00000bb7 	.word	0x00000bb7
 270:	00000bb7 	.word	0x00000bb7
 274:	00000bb7 	.word	0x00000bb7
 278:	00000bb7 	.word	0x00000bb7
 27c:	00000bb7 	.word	0x00000bb7
 280:	00000bb7 	.word	0x00000bb7
 284:	00000bb7 	.word	0x00000bb7
 288:	00000bb7 	.word	0x00000bb7
 28c:	00000bb7 	.word	0x00000bb7
 290:	00000bb7 	.word	0x00000bb7
 294:	00000bb7 	.word	0x00000bb7
 298:	00000bb7 	.word	0x00000bb7
 29c:	00000bb7 	.word	0x00000bb7
 2a0:	00000bb7 	.word	0x00000bb7
 2a4:	00000bb7 	.word	0x00000bb7
 2a8:	00000bb7 	.word	0x00000bb7
 2ac:	00000bb7 	.word	0x00000bb7
 2b0:	00000bb7 	.word	0x00000bb7
 2b4:	00000bb7 	.word	0x00000bb7
 2b8:	00000bb7 	.word	0x00000bb7
 2bc:	00000bb7 	.word	0x00000bb7
 2c0:	00000bb7 	.word	0x00000bb7
 2c4:	00000bb7 	.word	0x00000bb7
 2c8:	00000bb7 	.word	0x00000bb7
 2cc:	00000bb7 	.word	0x00000bb7
 2d0:	00000bb7 	.word	0x00000bb7
 2d4:	00000bb7 	.word	0x00000bb7
 2d8:	00000bb7 	.word	0x00000bb7
 2dc:	00000bb7 	.word	0x00000bb7
 2e0:	00000bb7 	.word	0x00000bb7
 2e4:	00000bb7 	.word	0x00000bb7
 2e8:	00000bb7 	.word	0x00000bb7
 2ec:	00000bb7 	.word	0x00000bb7
 2f0:	00000bb7 	.word	0x00000bb7
 2f4:	00000bb7 	.word	0x00000bb7
 2f8:	00000bb7 	.word	0x00000bb7
 2fc:	00000bb7 	.word	0x00000bb7
 300:	00000bb7 	.word	0x00000bb7
 304:	00000bb7 	.word	0x00000bb7
 308:	00000bb7 	.word	0x00000bb7
 30c:	00000bb7 	.word	0x00000bb7

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fac7 	bl	a14 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fb86 	bl	b9c <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff98f4 	.word	0x1fff98f4

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fad1 	bl	b40 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * This example transmits a 1 byte data PDU every 5s using CAN 0 at a bitrate of 100Kbps.
 * In this case only one HTH is used with one message buffer.
 * 
 * @return Always zero
*/
int main( void ) {
     8b0:	b500      	push	{lr}
     8b2:	b085      	sub	sp, #20
    //local data.
    //Transmit message (PDU) 2 (Message ID 0x100) for Can 0 controller.
    uint8 Message2_SDU = 0x01; //Data payload for message.
     8b4:	2301      	movs	r3, #1
     8b6:	f88d 300f 	strb.w	r3, [sp, #15]
    PduInfoType Message2 = {
     8ba:	f10d 030f 	add.w	r3, sp, #15
     8be:	9300      	str	r3, [sp, #0]
     8c0:	2300      	movs	r3, #0
     8c2:	9301      	str	r3, [sp, #4]
     8c4:	2301      	movs	r3, #1
     8c6:	9302      	str	r3, [sp, #8]
        .SduLength = 1,
        .SduDataPtr = &Message2_SDU,
        .MetaDataPtr = NULL_PTR
    };

    EcuM_Init();    //MCU configuration.
     8c8:	f000 fe92 	bl	15f0 <EcuM_Init>

    //SBC by default is in force normal mode so the CAN transceiver is already active.

    CanIf_SetControllerMode( CanIfFlexCan0 , CAN_CS_STARTED );   //Can 0 controller active in Can Bus.
     8cc:	2101      	movs	r1, #1
     8ce:	2001      	movs	r0, #1
     8d0:	f016 fbad 	bl	1702e <CanIf_SetControllerMode>

    while( 1u ) {
        //Transmit messages every 5s.
        CanIf_Transmit( CanIfTxPDU_2, &Message2 );   //Writing in Can 0 message buffer 1.
     8d4:	466b      	mov	r3, sp
     8d6:	4619      	mov	r1, r3
     8d8:	2002      	movs	r0, #2
     8da:	f016 fa81 	bl	16de0 <CanIf_Transmit>

        while( CanIf_Can0_bTxFlag == FALSE ); //Waiting until messages are transmitted.
     8de:	bf00      	nop
     8e0:	4b0a      	ldr	r3, [pc, #40]	; (90c <main+0x5c>)
     8e2:	781b      	ldrb	r3, [r3, #0]
     8e4:	f083 0301 	eor.w	r3, r3, #1
     8e8:	b2db      	uxtb	r3, r3
     8ea:	2b00      	cmp	r3, #0
     8ec:	d1f8      	bne.n	8e0 <main+0x30>
        CanIf_Can0_bTxFlag = FALSE;  //Clearing transmit flag.
     8ee:	4b07      	ldr	r3, [pc, #28]	; (90c <main+0x5c>)
     8f0:	2200      	movs	r2, #0
     8f2:	701a      	strb	r2, [r3, #0]

        //Changing SDUs.
        Message2_SDU++;
     8f4:	f89d 300f 	ldrb.w	r3, [sp, #15]
     8f8:	3301      	adds	r3, #1
     8fa:	b2db      	uxtb	r3, r3
     8fc:	f88d 300f 	strb.w	r3, [sp, #15]

        Delay( 5000 );  //Waiting 5s for next transmission.
     900:	f241 3088 	movw	r0, #5000	; 0x1388
     904:	f000 fe94 	bl	1630 <Delay>
        CanIf_Transmit( CanIfTxPDU_2, &Message2 );   //Writing in Can 0 message buffer 1.
     908:	e7e4      	b.n	8d4 <main+0x24>
     90a:	bf00      	nop
     90c:	1fff8b30 	.word	0x1fff8b30

00000910 <DevAssert>:
    #error "Unsupported architecture!"
#endif

/* Implement default assert macro */
static inline void DevAssert(volatile boolean x)
{
     910:	b082      	sub	sp, #8
     912:	4603      	mov	r3, r0
     914:	f88d 3007 	strb.w	r3, [sp, #7]
    if(x) { } else { for(;;) {ASM_KEYWORD(BREAKPOINT_INSTR);} }
     918:	f89d 3007 	ldrb.w	r3, [sp, #7]
     91c:	b2db      	uxtb	r3, r3
     91e:	2b00      	cmp	r3, #0
     920:	d101      	bne.n	926 <DevAssert+0x16>
     922:	be00      	bkpt	0x0000
     924:	e7fd      	b.n	922 <DevAssert+0x12>
}
     926:	bf00      	nop
     928:	b002      	add	sp, #8
     92a:	4770      	bx	lr

0000092c <Adc_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Adc_schm_read_msr(void)
{
     92c:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     92e:	f3ef 8310 	mrs	r3, PRIMASK
     932:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     934:	4623      	mov	r3, r4
}
     936:	4618      	mov	r0, r3
     938:	f85d 4b04 	ldr.w	r4, [sp], #4
     93c:	4770      	bx	lr

0000093e <Can_43_FLEXCAN_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Can_43_FLEXCAN_schm_read_msr(void)
{
     93e:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     940:	f3ef 8310 	mrs	r3, PRIMASK
     944:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     946:	4623      	mov	r3, r4
}
     948:	4618      	mov	r0, r3
     94a:	f85d 4b04 	ldr.w	r4, [sp], #4
     94e:	4770      	bx	lr

00000950 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     950:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     952:	f3ef 8310 	mrs	r3, PRIMASK
     956:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     958:	4623      	mov	r3, r4
}
     95a:	4618      	mov	r0, r3
     95c:	f85d 4b04 	ldr.w	r4, [sp], #4
     960:	4770      	bx	lr

00000962 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     962:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     964:	f3ef 8310 	mrs	r3, PRIMASK
     968:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     96a:	4623      	mov	r3, r4
}
     96c:	4618      	mov	r0, r3
     96e:	f85d 4b04 	ldr.w	r4, [sp], #4
     972:	4770      	bx	lr

00000974 <Spi_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Spi_schm_read_msr(void)
{
     974:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     976:	f3ef 8310 	mrs	r3, PRIMASK
     97a:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     97c:	4623      	mov	r3, r4
}
     97e:	4618      	mov	r0, r3
     980:	f85d 4b04 	ldr.w	r4, [sp], #4
     984:	4770      	bx	lr
	...

00000988 <CDD_UserTxConfirmation_Can_0>:
 * @brief Callback function for the complete transmit of a PDU (registered) from Can0 controller.
 * 
 * @param TxPduId ID (container) of the PDU transmitted.
 * @param result Status of the transmision operation.
 */
void CDD_UserTxConfirmation_Can_0( PduIdType TxPduId, Std_ReturnType result ) {
     988:	b082      	sub	sp, #8
     98a:	4603      	mov	r3, r0
     98c:	460a      	mov	r2, r1
     98e:	f8ad 3006 	strh.w	r3, [sp, #6]
     992:	4613      	mov	r3, r2
     994:	f88d 3005 	strb.w	r3, [sp, #5]
    //local data.
    static uint8 Transmit_count = 0;    //Count of transmitted PDUs.
    (void)TxPduId;

    if ( result == E_OK ) { //Message was transmitted successfully.
     998:	f89d 3005 	ldrb.w	r3, [sp, #5]
     99c:	2b00      	cmp	r3, #0
     99e:	d108      	bne.n	9b2 <CDD_UserTxConfirmation_Can_0+0x2a>
        Transmit_count++;
     9a0:	4b05      	ldr	r3, [pc, #20]	; (9b8 <CDD_UserTxConfirmation_Can_0+0x30>)
     9a2:	781b      	ldrb	r3, [r3, #0]
     9a4:	3301      	adds	r3, #1
     9a6:	b2da      	uxtb	r2, r3
     9a8:	4b03      	ldr	r3, [pc, #12]	; (9b8 <CDD_UserTxConfirmation_Can_0+0x30>)
     9aa:	701a      	strb	r2, [r3, #0]
        CanIf_Can0_bTxFlag = TRUE;
     9ac:	4b03      	ldr	r3, [pc, #12]	; (9bc <CDD_UserTxConfirmation_Can_0+0x34>)
     9ae:	2201      	movs	r2, #1
     9b0:	701a      	strb	r2, [r3, #0]
    }    
}
     9b2:	bf00      	nop
     9b4:	b002      	add	sp, #8
     9b6:	4770      	bx	lr
     9b8:	1fff98f0 	.word	0x1fff98f0
     9bc:	1fff8b30 	.word	0x1fff8b30

000009c0 <CDD_UserRxIndication_Can_0>:
 * @brief Callback function for the reception of a PDU (registered) of interest for the Can0 controller.
 * 
 * @param RxPduId ID (container) of the PDU received.
 * @param PduInfoPtr Pointer to PDU received (message)
 */
void CDD_UserRxIndication_Can_0( PduIdType RxPduId, const PduInfoType* PduInfoPtr ) {
     9c0:	b082      	sub	sp, #8
     9c2:	4603      	mov	r3, r0
     9c4:	9100      	str	r1, [sp, #0]
     9c6:	f8ad 3006 	strh.w	r3, [sp, #6]
    (void) RxPduId;
    (void) PduInfoPtr;
    
    CanIf_Can0_bRxFlag = TRUE;   //Message received.
     9ca:	4b03      	ldr	r3, [pc, #12]	; (9d8 <CDD_UserRxIndication_Can_0+0x18>)
     9cc:	2201      	movs	r2, #1
     9ce:	701a      	strb	r2, [r3, #0]
}
     9d0:	bf00      	nop
     9d2:	b002      	add	sp, #8
     9d4:	4770      	bx	lr
     9d6:	bf00      	nop
     9d8:	1fff8b31 	.word	0x1fff8b31

000009dc <CDD_UserTxConfirmation_Can_2>:
 * @brief Callback function for the complete transmit of a PDU (registered) from Can2 controller.
 * 
 * @param TxPduId ID (container) of the PDU transmitted.
 * @param result Status of the transmision operation.
 */
void CDD_UserTxConfirmation_Can_2( PduIdType TxPduId, Std_ReturnType result ) {
     9dc:	b082      	sub	sp, #8
     9de:	4603      	mov	r3, r0
     9e0:	460a      	mov	r2, r1
     9e2:	f8ad 3006 	strh.w	r3, [sp, #6]
     9e6:	4613      	mov	r3, r2
     9e8:	f88d 3005 	strb.w	r3, [sp, #5]
    //local data.
    static uint8 Transmit_count = 0;    //Count of transmitted PDUs.
    (void)TxPduId;

    if ( result == E_OK ) { //Message was transmitted successfully.
     9ec:	f89d 3005 	ldrb.w	r3, [sp, #5]
     9f0:	2b00      	cmp	r3, #0
     9f2:	d108      	bne.n	a06 <CDD_UserTxConfirmation_Can_2+0x2a>
        Transmit_count++;
     9f4:	4b05      	ldr	r3, [pc, #20]	; (a0c <CDD_UserTxConfirmation_Can_2+0x30>)
     9f6:	781b      	ldrb	r3, [r3, #0]
     9f8:	3301      	adds	r3, #1
     9fa:	b2da      	uxtb	r2, r3
     9fc:	4b03      	ldr	r3, [pc, #12]	; (a0c <CDD_UserTxConfirmation_Can_2+0x30>)
     9fe:	701a      	strb	r2, [r3, #0]
        CanIf_Can2_bTxFlag = TRUE;
     a00:	4b03      	ldr	r3, [pc, #12]	; (a10 <CDD_UserTxConfirmation_Can_2+0x34>)
     a02:	2201      	movs	r2, #1
     a04:	701a      	strb	r2, [r3, #0]
    }
}
     a06:	bf00      	nop
     a08:	b002      	add	sp, #8
     a0a:	4770      	bx	lr
     a0c:	1fff98f1 	.word	0x1fff98f1
     a10:	1fff8b32 	.word	0x1fff8b32

00000a14 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     a14:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     a16:	2300      	movs	r3, #0
     a18:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     a1a:	2300      	movs	r3, #0
     a1c:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     a1e:	2300      	movs	r3, #0
     a20:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     a22:	2300      	movs	r3, #0
     a24:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     a26:	4b44      	ldr	r3, [pc, #272]	; (b38 <init_data_bss+0x124>)
     a28:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     a2a:	4b44      	ldr	r3, [pc, #272]	; (b3c <init_data_bss+0x128>)
     a2c:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     a2e:	9b05      	ldr	r3, [sp, #20]
     a30:	681b      	ldr	r3, [r3, #0]
     a32:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     a34:	9b05      	ldr	r3, [sp, #20]
     a36:	3304      	adds	r3, #4
     a38:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     a3a:	9b05      	ldr	r3, [sp, #20]
     a3c:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     a3e:	2300      	movs	r3, #0
     a40:	9309      	str	r3, [sp, #36]	; 0x24
     a42:	e03d      	b.n	ac0 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     a44:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a46:	4613      	mov	r3, r2
     a48:	005b      	lsls	r3, r3, #1
     a4a:	4413      	add	r3, r2
     a4c:	009b      	lsls	r3, r3, #2
     a4e:	461a      	mov	r2, r3
     a50:	9b03      	ldr	r3, [sp, #12]
     a52:	4413      	add	r3, r2
     a54:	685b      	ldr	r3, [r3, #4]
     a56:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     a58:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a5a:	4613      	mov	r3, r2
     a5c:	005b      	lsls	r3, r3, #1
     a5e:	4413      	add	r3, r2
     a60:	009b      	lsls	r3, r3, #2
     a62:	461a      	mov	r2, r3
     a64:	9b03      	ldr	r3, [sp, #12]
     a66:	4413      	add	r3, r2
     a68:	681b      	ldr	r3, [r3, #0]
     a6a:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     a6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a6e:	4613      	mov	r3, r2
     a70:	005b      	lsls	r3, r3, #1
     a72:	4413      	add	r3, r2
     a74:	009b      	lsls	r3, r3, #2
     a76:	461a      	mov	r2, r3
     a78:	9b03      	ldr	r3, [sp, #12]
     a7a:	4413      	add	r3, r2
     a7c:	689b      	ldr	r3, [r3, #8]
     a7e:	4619      	mov	r1, r3
     a80:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a82:	4613      	mov	r3, r2
     a84:	005b      	lsls	r3, r3, #1
     a86:	4413      	add	r3, r2
     a88:	009b      	lsls	r3, r3, #2
     a8a:	461a      	mov	r2, r3
     a8c:	9b03      	ldr	r3, [sp, #12]
     a8e:	4413      	add	r3, r2
     a90:	685b      	ldr	r3, [r3, #4]
     a92:	1acb      	subs	r3, r1, r3
     a94:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     a96:	2300      	movs	r3, #0
     a98:	9308      	str	r3, [sp, #32]
     a9a:	e00a      	b.n	ab2 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     a9c:	9a00      	ldr	r2, [sp, #0]
     a9e:	9b08      	ldr	r3, [sp, #32]
     aa0:	441a      	add	r2, r3
     aa2:	9901      	ldr	r1, [sp, #4]
     aa4:	9b08      	ldr	r3, [sp, #32]
     aa6:	440b      	add	r3, r1
     aa8:	7812      	ldrb	r2, [r2, #0]
     aaa:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     aac:	9b08      	ldr	r3, [sp, #32]
     aae:	3301      	adds	r3, #1
     ab0:	9308      	str	r3, [sp, #32]
     ab2:	9a08      	ldr	r2, [sp, #32]
     ab4:	9b06      	ldr	r3, [sp, #24]
     ab6:	429a      	cmp	r2, r3
     ab8:	d3f0      	bcc.n	a9c <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
     abc:	3301      	adds	r3, #1
     abe:	9309      	str	r3, [sp, #36]	; 0x24
     ac0:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ac2:	9b07      	ldr	r3, [sp, #28]
     ac4:	429a      	cmp	r2, r3
     ac6:	d3bd      	bcc.n	a44 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     ac8:	9b04      	ldr	r3, [sp, #16]
     aca:	681b      	ldr	r3, [r3, #0]
     acc:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     ace:	9b04      	ldr	r3, [sp, #16]
     ad0:	3304      	adds	r3, #4
     ad2:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     ad4:	9b04      	ldr	r3, [sp, #16]
     ad6:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     ad8:	2300      	movs	r3, #0
     ada:	9309      	str	r3, [sp, #36]	; 0x24
     adc:	e024      	b.n	b28 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ae0:	00db      	lsls	r3, r3, #3
     ae2:	9a02      	ldr	r2, [sp, #8]
     ae4:	4413      	add	r3, r2
     ae6:	681b      	ldr	r3, [r3, #0]
     ae8:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
     aec:	00db      	lsls	r3, r3, #3
     aee:	9a02      	ldr	r2, [sp, #8]
     af0:	4413      	add	r3, r2
     af2:	685b      	ldr	r3, [r3, #4]
     af4:	4619      	mov	r1, r3
     af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
     af8:	00db      	lsls	r3, r3, #3
     afa:	9a02      	ldr	r2, [sp, #8]
     afc:	4413      	add	r3, r2
     afe:	681b      	ldr	r3, [r3, #0]
     b00:	1acb      	subs	r3, r1, r3
     b02:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b04:	2300      	movs	r3, #0
     b06:	9308      	str	r3, [sp, #32]
     b08:	e007      	b.n	b1a <init_data_bss+0x106>
        {
            ram[j] = 0U;
     b0a:	9a01      	ldr	r2, [sp, #4]
     b0c:	9b08      	ldr	r3, [sp, #32]
     b0e:	4413      	add	r3, r2
     b10:	2200      	movs	r2, #0
     b12:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     b14:	9b08      	ldr	r3, [sp, #32]
     b16:	3301      	adds	r3, #1
     b18:	9308      	str	r3, [sp, #32]
     b1a:	9a08      	ldr	r2, [sp, #32]
     b1c:	9b06      	ldr	r3, [sp, #24]
     b1e:	429a      	cmp	r2, r3
     b20:	d3f3      	bcc.n	b0a <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b24:	3301      	adds	r3, #1
     b26:	9309      	str	r3, [sp, #36]	; 0x24
     b28:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b2a:	9b07      	ldr	r3, [sp, #28]
     b2c:	429a      	cmp	r2, r3
     b2e:	d3d6      	bcc.n	ade <init_data_bss+0xca>
        }
    }
}
     b30:	bf00      	nop
     b32:	bf00      	nop
     b34:	b00a      	add	sp, #40	; 0x28
     b36:	4770      	bx	lr
     b38:	000198b4 	.word	0x000198b4
     b3c:	000198d0 	.word	0x000198d0

00000b40 <sys_m4_cache_init>:
{
     b40:	b084      	sub	sp, #16
     b42:	4603      	mov	r3, r0
     b44:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     b48:	2300      	movs	r3, #0
     b4a:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     b4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b52:	2b00      	cmp	r3, #0
     b54:	d118      	bne.n	b88 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     b56:	4b10      	ldr	r3, [pc, #64]	; (b98 <sys_m4_cache_init+0x58>)
     b58:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     b5c:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     b5e:	4b0e      	ldr	r3, [pc, #56]	; (b98 <sys_m4_cache_init+0x58>)
     b60:	681b      	ldr	r3, [r3, #0]
     b62:	4a0d      	ldr	r2, [pc, #52]	; (b98 <sys_m4_cache_init+0x58>)
     b64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     b68:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     b6a:	bf00      	nop
     b6c:	4b0a      	ldr	r3, [pc, #40]	; (b98 <sys_m4_cache_init+0x58>)
     b6e:	681b      	ldr	r3, [r3, #0]
     b70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     b74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     b78:	d0f8      	beq.n	b6c <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     b7a:	4b07      	ldr	r3, [pc, #28]	; (b98 <sys_m4_cache_init+0x58>)
     b7c:	681b      	ldr	r3, [r3, #0]
     b7e:	4a06      	ldr	r2, [pc, #24]	; (b98 <sys_m4_cache_init+0x58>)
     b80:	f043 0301 	orr.w	r3, r3, #1
     b84:	6013      	str	r3, [r2, #0]
     b86:	e002      	b.n	b8e <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     b88:	2301      	movs	r3, #1
     b8a:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     b8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     b92:	4618      	mov	r0, r3
     b94:	b004      	add	sp, #16
     b96:	4770      	bx	lr
     b98:	e0082000 	.word	0xe0082000

00000b9c <startup_go_to_user_mode>:
}
     b9c:	bf00      	nop
     b9e:	4770      	bx	lr

00000ba0 <Sys_GetCoreID>:
    return 0U;
     ba0:	2300      	movs	r3, #0
}
     ba2:	4618      	mov	r0, r3
     ba4:	4770      	bx	lr

00000ba6 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     ba6:	e7fe      	b.n	ba6 <HardFault_Handler>

00000ba8 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     ba8:	e7fe      	b.n	ba8 <MemManage_Handler>

00000baa <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     baa:	e7fe      	b.n	baa <BusFault_Handler>

00000bac <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     bac:	e7fe      	b.n	bac <UsageFault_Handler>

00000bae <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     bae:	e7fe      	b.n	bae <SVC_Handler>

00000bb0 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     bb0:	e7fe      	b.n	bb0 <DebugMon_Handler>

00000bb2 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     bb2:	e7fe      	b.n	bb2 <PendSV_Handler>

00000bb4 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     bb4:	e7fe      	b.n	bb4 <SysTick_Handler>

00000bb6 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     bb6:	e7fe      	b.n	bb6 <undefined_handler>

00000bb8 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
     bb8:	b500      	push	{lr}
     bba:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
     bbc:	4b26      	ldr	r3, [pc, #152]	; (c58 <_DoInit+0xa0>)
     bbe:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
     bc0:	22a8      	movs	r2, #168	; 0xa8
     bc2:	2100      	movs	r1, #0
     bc4:	9800      	ldr	r0, [sp, #0]
     bc6:	f000 fd67 	bl	1698 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     bca:	9b00      	ldr	r3, [sp, #0]
     bcc:	2203      	movs	r2, #3
     bce:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
     bd0:	9b00      	ldr	r3, [sp, #0]
     bd2:	2203      	movs	r2, #3
     bd4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
     bd6:	9b00      	ldr	r3, [sp, #0]
     bd8:	4a20      	ldr	r2, [pc, #128]	; (c5c <_DoInit+0xa4>)
     bda:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
     bdc:	9b00      	ldr	r3, [sp, #0]
     bde:	4a20      	ldr	r2, [pc, #128]	; (c60 <_DoInit+0xa8>)
     be0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
     be2:	9b00      	ldr	r3, [sp, #0]
     be4:	f44f 6280 	mov.w	r2, #1024	; 0x400
     be8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
     bea:	9b00      	ldr	r3, [sp, #0]
     bec:	2200      	movs	r2, #0
     bee:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
     bf0:	9b00      	ldr	r3, [sp, #0]
     bf2:	2200      	movs	r2, #0
     bf4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     bf6:	9b00      	ldr	r3, [sp, #0]
     bf8:	2200      	movs	r2, #0
     bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
     bfc:	9b00      	ldr	r3, [sp, #0]
     bfe:	4a17      	ldr	r2, [pc, #92]	; (c5c <_DoInit+0xa4>)
     c00:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
     c02:	9b00      	ldr	r3, [sp, #0]
     c04:	4a17      	ldr	r2, [pc, #92]	; (c64 <_DoInit+0xac>)
     c06:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
     c08:	9b00      	ldr	r3, [sp, #0]
     c0a:	2210      	movs	r2, #16
     c0c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
     c0e:	9b00      	ldr	r3, [sp, #0]
     c10:	2200      	movs	r2, #0
     c12:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
     c14:	9b00      	ldr	r3, [sp, #0]
     c16:	2200      	movs	r2, #0
     c18:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     c1a:	9b00      	ldr	r3, [sp, #0]
     c1c:	2200      	movs	r2, #0
     c1e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     c20:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     c24:	2300      	movs	r3, #0
     c26:	9301      	str	r3, [sp, #4]
     c28:	e00c      	b.n	c44 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
     c2a:	9b01      	ldr	r3, [sp, #4]
     c2c:	f1c3 030f 	rsb	r3, r3, #15
     c30:	4a0d      	ldr	r2, [pc, #52]	; (c68 <_DoInit+0xb0>)
     c32:	5cd1      	ldrb	r1, [r2, r3]
     c34:	9a00      	ldr	r2, [sp, #0]
     c36:	9b01      	ldr	r3, [sp, #4]
     c38:	4413      	add	r3, r2
     c3a:	460a      	mov	r2, r1
     c3c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     c3e:	9b01      	ldr	r3, [sp, #4]
     c40:	3301      	adds	r3, #1
     c42:	9301      	str	r3, [sp, #4]
     c44:	9b01      	ldr	r3, [sp, #4]
     c46:	2b0f      	cmp	r3, #15
     c48:	d9ef      	bls.n	c2a <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     c4a:	f3bf 8f5f 	dmb	sy
}
     c4e:	bf00      	nop
     c50:	b003      	add	sp, #12
     c52:	f85d fb04 	ldr.w	pc, [sp], #4
     c56:	bf00      	nop
     c58:	1fff9910 	.word	0x1fff9910
     c5c:	00017d04 	.word	0x00017d04
     c60:	1fff99b8 	.word	0x1fff99b8
     c64:	1fff9db8 	.word	0x1fff9db8
     c68:	00019890 	.word	0x00019890

00000c6c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     c6c:	b500      	push	{lr}
     c6e:	b08b      	sub	sp, #44	; 0x2c
     c70:	9003      	str	r0, [sp, #12]
     c72:	9102      	str	r1, [sp, #8]
     c74:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
     c76:	2300      	movs	r3, #0
     c78:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
     c7a:	9b03      	ldr	r3, [sp, #12]
     c7c:	68db      	ldr	r3, [r3, #12]
     c7e:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
     c80:	9b03      	ldr	r3, [sp, #12]
     c82:	691b      	ldr	r3, [r3, #16]
     c84:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
     c86:	9a06      	ldr	r2, [sp, #24]
     c88:	9b07      	ldr	r3, [sp, #28]
     c8a:	429a      	cmp	r2, r3
     c8c:	d905      	bls.n	c9a <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
     c8e:	9a06      	ldr	r2, [sp, #24]
     c90:	9b07      	ldr	r3, [sp, #28]
     c92:	1ad3      	subs	r3, r2, r3
     c94:	3b01      	subs	r3, #1
     c96:	9309      	str	r3, [sp, #36]	; 0x24
     c98:	e007      	b.n	caa <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
     c9a:	9b03      	ldr	r3, [sp, #12]
     c9c:	689a      	ldr	r2, [r3, #8]
     c9e:	9906      	ldr	r1, [sp, #24]
     ca0:	9b07      	ldr	r3, [sp, #28]
     ca2:	1acb      	subs	r3, r1, r3
     ca4:	4413      	add	r3, r2
     ca6:	3b01      	subs	r3, #1
     ca8:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
     caa:	9b03      	ldr	r3, [sp, #12]
     cac:	689a      	ldr	r2, [r3, #8]
     cae:	9b07      	ldr	r3, [sp, #28]
     cb0:	1ad3      	subs	r3, r2, r3
     cb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
     cb4:	4293      	cmp	r3, r2
     cb6:	bf28      	it	cs
     cb8:	4613      	movcs	r3, r2
     cba:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
     cbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
     cbe:	9b01      	ldr	r3, [sp, #4]
     cc0:	4293      	cmp	r3, r2
     cc2:	bf28      	it	cs
     cc4:	4613      	movcs	r3, r2
     cc6:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     cc8:	9b03      	ldr	r3, [sp, #12]
     cca:	685a      	ldr	r2, [r3, #4]
     ccc:	9b07      	ldr	r3, [sp, #28]
     cce:	4413      	add	r3, r2
     cd0:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
     cd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
     cd4:	9902      	ldr	r1, [sp, #8]
     cd6:	9805      	ldr	r0, [sp, #20]
     cd8:	f000 fcd0 	bl	167c <memcpy>
    NumBytesWritten += NumBytesToWrite;
     cdc:	9a08      	ldr	r2, [sp, #32]
     cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ce0:	4413      	add	r3, r2
     ce2:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
     ce4:	9a02      	ldr	r2, [sp, #8]
     ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ce8:	4413      	add	r3, r2
     cea:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
     cec:	9a01      	ldr	r2, [sp, #4]
     cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
     cf0:	1ad3      	subs	r3, r2, r3
     cf2:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
     cf4:	9a07      	ldr	r2, [sp, #28]
     cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
     cf8:	4413      	add	r3, r2
     cfa:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
     cfc:	9b03      	ldr	r3, [sp, #12]
     cfe:	689b      	ldr	r3, [r3, #8]
     d00:	9a07      	ldr	r2, [sp, #28]
     d02:	429a      	cmp	r2, r3
     d04:	d101      	bne.n	d0a <_WriteBlocking+0x9e>
      WrOff = 0u;
     d06:	2300      	movs	r3, #0
     d08:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     d0a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
     d0e:	9b03      	ldr	r3, [sp, #12]
     d10:	9a07      	ldr	r2, [sp, #28]
     d12:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
     d14:	9b01      	ldr	r3, [sp, #4]
     d16:	2b00      	cmp	r3, #0
     d18:	d1b2      	bne.n	c80 <_WriteBlocking+0x14>
  return NumBytesWritten;
     d1a:	9b08      	ldr	r3, [sp, #32]
}
     d1c:	4618      	mov	r0, r3
     d1e:	b00b      	add	sp, #44	; 0x2c
     d20:	f85d fb04 	ldr.w	pc, [sp], #4

00000d24 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     d24:	b500      	push	{lr}
     d26:	b089      	sub	sp, #36	; 0x24
     d28:	9003      	str	r0, [sp, #12]
     d2a:	9102      	str	r1, [sp, #8]
     d2c:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
     d2e:	9b03      	ldr	r3, [sp, #12]
     d30:	68db      	ldr	r3, [r3, #12]
     d32:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
     d34:	9b03      	ldr	r3, [sp, #12]
     d36:	689a      	ldr	r2, [r3, #8]
     d38:	9b07      	ldr	r3, [sp, #28]
     d3a:	1ad3      	subs	r3, r2, r3
     d3c:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
     d3e:	9a06      	ldr	r2, [sp, #24]
     d40:	9b01      	ldr	r3, [sp, #4]
     d42:	429a      	cmp	r2, r3
     d44:	d911      	bls.n	d6a <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     d46:	9b03      	ldr	r3, [sp, #12]
     d48:	685a      	ldr	r2, [r3, #4]
     d4a:	9b07      	ldr	r3, [sp, #28]
     d4c:	4413      	add	r3, r2
     d4e:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
     d50:	9a01      	ldr	r2, [sp, #4]
     d52:	9902      	ldr	r1, [sp, #8]
     d54:	9804      	ldr	r0, [sp, #16]
     d56:	f000 fc91 	bl	167c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     d5a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
     d5e:	9a07      	ldr	r2, [sp, #28]
     d60:	9b01      	ldr	r3, [sp, #4]
     d62:	441a      	add	r2, r3
     d64:	9b03      	ldr	r3, [sp, #12]
     d66:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
     d68:	e01f      	b.n	daa <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
     d6a:	9b06      	ldr	r3, [sp, #24]
     d6c:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     d6e:	9b03      	ldr	r3, [sp, #12]
     d70:	685a      	ldr	r2, [r3, #4]
     d72:	9b07      	ldr	r3, [sp, #28]
     d74:	4413      	add	r3, r2
     d76:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
     d78:	9a05      	ldr	r2, [sp, #20]
     d7a:	9902      	ldr	r1, [sp, #8]
     d7c:	9804      	ldr	r0, [sp, #16]
     d7e:	f000 fc7d 	bl	167c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
     d82:	9a01      	ldr	r2, [sp, #4]
     d84:	9b06      	ldr	r3, [sp, #24]
     d86:	1ad3      	subs	r3, r2, r3
     d88:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
     d8a:	9b03      	ldr	r3, [sp, #12]
     d8c:	685b      	ldr	r3, [r3, #4]
     d8e:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
     d90:	9a02      	ldr	r2, [sp, #8]
     d92:	9b06      	ldr	r3, [sp, #24]
     d94:	4413      	add	r3, r2
     d96:	9a05      	ldr	r2, [sp, #20]
     d98:	4619      	mov	r1, r3
     d9a:	9804      	ldr	r0, [sp, #16]
     d9c:	f000 fc6e 	bl	167c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     da0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
     da4:	9b03      	ldr	r3, [sp, #12]
     da6:	9a05      	ldr	r2, [sp, #20]
     da8:	60da      	str	r2, [r3, #12]
}
     daa:	bf00      	nop
     dac:	b009      	add	sp, #36	; 0x24
     dae:	f85d fb04 	ldr.w	pc, [sp], #4

00000db2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
     db2:	b086      	sub	sp, #24
     db4:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
     db6:	9b01      	ldr	r3, [sp, #4]
     db8:	691b      	ldr	r3, [r3, #16]
     dba:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
     dbc:	9b01      	ldr	r3, [sp, #4]
     dbe:	68db      	ldr	r3, [r3, #12]
     dc0:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
     dc2:	9a04      	ldr	r2, [sp, #16]
     dc4:	9b03      	ldr	r3, [sp, #12]
     dc6:	429a      	cmp	r2, r3
     dc8:	d808      	bhi.n	ddc <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
     dca:	9b01      	ldr	r3, [sp, #4]
     dcc:	689a      	ldr	r2, [r3, #8]
     dce:	9b03      	ldr	r3, [sp, #12]
     dd0:	1ad2      	subs	r2, r2, r3
     dd2:	9b04      	ldr	r3, [sp, #16]
     dd4:	4413      	add	r3, r2
     dd6:	3b01      	subs	r3, #1
     dd8:	9305      	str	r3, [sp, #20]
     dda:	e004      	b.n	de6 <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
     ddc:	9a04      	ldr	r2, [sp, #16]
     dde:	9b03      	ldr	r3, [sp, #12]
     de0:	1ad3      	subs	r3, r2, r3
     de2:	3b01      	subs	r3, #1
     de4:	9305      	str	r3, [sp, #20]
  }
  return r;
     de6:	9b05      	ldr	r3, [sp, #20]
}
     de8:	4618      	mov	r0, r3
     dea:	b006      	add	sp, #24
     dec:	4770      	bx	lr
	...

00000df0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     df0:	b500      	push	{lr}
     df2:	b089      	sub	sp, #36	; 0x24
     df4:	9003      	str	r0, [sp, #12]
     df6:	9102      	str	r1, [sp, #8]
     df8:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
     dfa:	9b02      	ldr	r3, [sp, #8]
     dfc:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
     dfe:	9b03      	ldr	r3, [sp, #12]
     e00:	1c5a      	adds	r2, r3, #1
     e02:	4613      	mov	r3, r2
     e04:	005b      	lsls	r3, r3, #1
     e06:	4413      	add	r3, r2
     e08:	00db      	lsls	r3, r3, #3
     e0a:	4a20      	ldr	r2, [pc, #128]	; (e8c <SEGGER_RTT_WriteNoLock+0x9c>)
     e0c:	4413      	add	r3, r2
     e0e:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
     e10:	9b05      	ldr	r3, [sp, #20]
     e12:	695b      	ldr	r3, [r3, #20]
     e14:	2b02      	cmp	r3, #2
     e16:	d029      	beq.n	e6c <SEGGER_RTT_WriteNoLock+0x7c>
     e18:	2b02      	cmp	r3, #2
     e1a:	d82e      	bhi.n	e7a <SEGGER_RTT_WriteNoLock+0x8a>
     e1c:	2b00      	cmp	r3, #0
     e1e:	d002      	beq.n	e26 <SEGGER_RTT_WriteNoLock+0x36>
     e20:	2b01      	cmp	r3, #1
     e22:	d013      	beq.n	e4c <SEGGER_RTT_WriteNoLock+0x5c>
     e24:	e029      	b.n	e7a <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
     e26:	9805      	ldr	r0, [sp, #20]
     e28:	f7ff ffc3 	bl	db2 <_GetAvailWriteSpace>
     e2c:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
     e2e:	9a04      	ldr	r2, [sp, #16]
     e30:	9b01      	ldr	r3, [sp, #4]
     e32:	429a      	cmp	r2, r3
     e34:	d202      	bcs.n	e3c <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
     e36:	2300      	movs	r3, #0
     e38:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
     e3a:	e021      	b.n	e80 <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
     e3c:	9b01      	ldr	r3, [sp, #4]
     e3e:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
     e40:	9a01      	ldr	r2, [sp, #4]
     e42:	9906      	ldr	r1, [sp, #24]
     e44:	9805      	ldr	r0, [sp, #20]
     e46:	f7ff ff6d 	bl	d24 <_WriteNoCheck>
    break;
     e4a:	e019      	b.n	e80 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
     e4c:	9805      	ldr	r0, [sp, #20]
     e4e:	f7ff ffb0 	bl	db2 <_GetAvailWriteSpace>
     e52:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
     e54:	9a01      	ldr	r2, [sp, #4]
     e56:	9b04      	ldr	r3, [sp, #16]
     e58:	4293      	cmp	r3, r2
     e5a:	bf28      	it	cs
     e5c:	4613      	movcs	r3, r2
     e5e:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
     e60:	9a07      	ldr	r2, [sp, #28]
     e62:	9906      	ldr	r1, [sp, #24]
     e64:	9805      	ldr	r0, [sp, #20]
     e66:	f7ff ff5d 	bl	d24 <_WriteNoCheck>
    break;
     e6a:	e009      	b.n	e80 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
     e6c:	9a01      	ldr	r2, [sp, #4]
     e6e:	9906      	ldr	r1, [sp, #24]
     e70:	9805      	ldr	r0, [sp, #20]
     e72:	f7ff fefb 	bl	c6c <_WriteBlocking>
     e76:	9007      	str	r0, [sp, #28]
    break;
     e78:	e002      	b.n	e80 <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
     e7a:	2300      	movs	r3, #0
     e7c:	9307      	str	r3, [sp, #28]
    break;
     e7e:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
     e80:	9b07      	ldr	r3, [sp, #28]
}
     e82:	4618      	mov	r0, r3
     e84:	b009      	add	sp, #36	; 0x24
     e86:	f85d fb04 	ldr.w	pc, [sp], #4
     e8a:	bf00      	nop
     e8c:	1fff9910 	.word	0x1fff9910

00000e90 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     e90:	b500      	push	{lr}
     e92:	b089      	sub	sp, #36	; 0x24
     e94:	9003      	str	r0, [sp, #12]
     e96:	9102      	str	r1, [sp, #8]
     e98:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
     e9a:	4b0f      	ldr	r3, [pc, #60]	; (ed8 <SEGGER_RTT_Write+0x48>)
     e9c:	9307      	str	r3, [sp, #28]
     e9e:	9b07      	ldr	r3, [sp, #28]
     ea0:	781b      	ldrb	r3, [r3, #0]
     ea2:	b2db      	uxtb	r3, r3
     ea4:	2b53      	cmp	r3, #83	; 0x53
     ea6:	d001      	beq.n	eac <SEGGER_RTT_Write+0x1c>
     ea8:	f7ff fe86 	bl	bb8 <_DoInit>
  SEGGER_RTT_LOCK();
     eac:	f3ef 8311 	mrs	r3, BASEPRI
     eb0:	f04f 0120 	mov.w	r1, #32
     eb4:	f381 8811 	msr	BASEPRI, r1
     eb8:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
     eba:	9a01      	ldr	r2, [sp, #4]
     ebc:	9902      	ldr	r1, [sp, #8]
     ebe:	9803      	ldr	r0, [sp, #12]
     ec0:	f7ff ff96 	bl	df0 <SEGGER_RTT_WriteNoLock>
     ec4:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
     ec6:	9b06      	ldr	r3, [sp, #24]
     ec8:	f383 8811 	msr	BASEPRI, r3
  return Status;
     ecc:	9b05      	ldr	r3, [sp, #20]
}
     ece:	4618      	mov	r0, r3
     ed0:	b009      	add	sp, #36	; 0x24
     ed2:	f85d fb04 	ldr.w	pc, [sp], #4
     ed6:	bf00      	nop
     ed8:	1fff9910 	.word	0x1fff9910

00000edc <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
     edc:	b508      	push	{r3, lr}
  _DoInit();
     ede:	f7ff fe6b 	bl	bb8 <_DoInit>
}
     ee2:	bf00      	nop
     ee4:	bd08      	pop	{r3, pc}

00000ee6 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
     ee6:	b500      	push	{lr}
     ee8:	b085      	sub	sp, #20
     eea:	9001      	str	r0, [sp, #4]
     eec:	460b      	mov	r3, r1
     eee:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
     ef2:	9b01      	ldr	r3, [sp, #4]
     ef4:	689b      	ldr	r3, [r3, #8]
     ef6:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
     ef8:	9b03      	ldr	r3, [sp, #12]
     efa:	1c5a      	adds	r2, r3, #1
     efc:	9b01      	ldr	r3, [sp, #4]
     efe:	685b      	ldr	r3, [r3, #4]
     f00:	429a      	cmp	r2, r3
     f02:	d80f      	bhi.n	f24 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
     f04:	9b01      	ldr	r3, [sp, #4]
     f06:	681a      	ldr	r2, [r3, #0]
     f08:	9b03      	ldr	r3, [sp, #12]
     f0a:	4413      	add	r3, r2
     f0c:	f89d 2003 	ldrb.w	r2, [sp, #3]
     f10:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
     f12:	9b03      	ldr	r3, [sp, #12]
     f14:	1c5a      	adds	r2, r3, #1
     f16:	9b01      	ldr	r3, [sp, #4]
     f18:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
     f1a:	9b01      	ldr	r3, [sp, #4]
     f1c:	68db      	ldr	r3, [r3, #12]
     f1e:	1c5a      	adds	r2, r3, #1
     f20:	9b01      	ldr	r3, [sp, #4]
     f22:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
     f24:	9b01      	ldr	r3, [sp, #4]
     f26:	689a      	ldr	r2, [r3, #8]
     f28:	9b01      	ldr	r3, [sp, #4]
     f2a:	685b      	ldr	r3, [r3, #4]
     f2c:	429a      	cmp	r2, r3
     f2e:	d115      	bne.n	f5c <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
     f30:	9b01      	ldr	r3, [sp, #4]
     f32:	6918      	ldr	r0, [r3, #16]
     f34:	9b01      	ldr	r3, [sp, #4]
     f36:	6819      	ldr	r1, [r3, #0]
     f38:	9b01      	ldr	r3, [sp, #4]
     f3a:	689b      	ldr	r3, [r3, #8]
     f3c:	461a      	mov	r2, r3
     f3e:	f7ff ffa7 	bl	e90 <SEGGER_RTT_Write>
     f42:	4602      	mov	r2, r0
     f44:	9b01      	ldr	r3, [sp, #4]
     f46:	689b      	ldr	r3, [r3, #8]
     f48:	429a      	cmp	r2, r3
     f4a:	d004      	beq.n	f56 <_StoreChar+0x70>
      p->ReturnValue = -1;
     f4c:	9b01      	ldr	r3, [sp, #4]
     f4e:	f04f 32ff 	mov.w	r2, #4294967295
     f52:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
     f54:	e002      	b.n	f5c <_StoreChar+0x76>
      p->Cnt = 0u;
     f56:	9b01      	ldr	r3, [sp, #4]
     f58:	2200      	movs	r2, #0
     f5a:	609a      	str	r2, [r3, #8]
}
     f5c:	bf00      	nop
     f5e:	b005      	add	sp, #20
     f60:	f85d fb04 	ldr.w	pc, [sp], #4

00000f64 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
     f64:	b500      	push	{lr}
     f66:	b08b      	sub	sp, #44	; 0x2c
     f68:	9003      	str	r0, [sp, #12]
     f6a:	9102      	str	r1, [sp, #8]
     f6c:	9201      	str	r2, [sp, #4]
     f6e:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
     f70:	9b02      	ldr	r3, [sp, #8]
     f72:	9308      	str	r3, [sp, #32]
  Digit = 1u;
     f74:	2301      	movs	r3, #1
     f76:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
     f78:	2301      	movs	r3, #1
     f7a:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
     f7c:	e007      	b.n	f8e <_PrintUnsigned+0x2a>
    Number = (Number / Base);
     f7e:	9a08      	ldr	r2, [sp, #32]
     f80:	9b01      	ldr	r3, [sp, #4]
     f82:	fbb2 f3f3 	udiv	r3, r2, r3
     f86:	9308      	str	r3, [sp, #32]
    Width++;
     f88:	9b07      	ldr	r3, [sp, #28]
     f8a:	3301      	adds	r3, #1
     f8c:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
     f8e:	9a08      	ldr	r2, [sp, #32]
     f90:	9b01      	ldr	r3, [sp, #4]
     f92:	429a      	cmp	r2, r3
     f94:	d2f3      	bcs.n	f7e <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
     f96:	9a00      	ldr	r2, [sp, #0]
     f98:	9b07      	ldr	r3, [sp, #28]
     f9a:	429a      	cmp	r2, r3
     f9c:	d901      	bls.n	fa2 <_PrintUnsigned+0x3e>
    Width = NumDigits;
     f9e:	9b00      	ldr	r3, [sp, #0]
     fa0:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
     fa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     fa4:	f003 0301 	and.w	r3, r3, #1
     fa8:	2b00      	cmp	r3, #0
     faa:	d128      	bne.n	ffe <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
     fac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     fae:	2b00      	cmp	r3, #0
     fb0:	d025      	beq.n	ffe <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
     fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     fb4:	f003 0302 	and.w	r3, r3, #2
     fb8:	2b00      	cmp	r3, #0
     fba:	d006      	beq.n	fca <_PrintUnsigned+0x66>
     fbc:	9b00      	ldr	r3, [sp, #0]
     fbe:	2b00      	cmp	r3, #0
     fc0:	d103      	bne.n	fca <_PrintUnsigned+0x66>
        c = '0';
     fc2:	2330      	movs	r3, #48	; 0x30
     fc4:	f88d 301b 	strb.w	r3, [sp, #27]
     fc8:	e002      	b.n	fd0 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
     fca:	2320      	movs	r3, #32
     fcc:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
     fd0:	e00c      	b.n	fec <_PrintUnsigned+0x88>
        FieldWidth--;
     fd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     fd4:	3b01      	subs	r3, #1
     fd6:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
     fd8:	f89d 301b 	ldrb.w	r3, [sp, #27]
     fdc:	4619      	mov	r1, r3
     fde:	9803      	ldr	r0, [sp, #12]
     fe0:	f7ff ff81 	bl	ee6 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
     fe4:	9b03      	ldr	r3, [sp, #12]
     fe6:	68db      	ldr	r3, [r3, #12]
     fe8:	2b00      	cmp	r3, #0
     fea:	db07      	blt.n	ffc <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
     fec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     fee:	2b00      	cmp	r3, #0
     ff0:	d005      	beq.n	ffe <_PrintUnsigned+0x9a>
     ff2:	9a07      	ldr	r2, [sp, #28]
     ff4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     ff6:	429a      	cmp	r2, r3
     ff8:	d3eb      	bcc.n	fd2 <_PrintUnsigned+0x6e>
     ffa:	e000      	b.n	ffe <_PrintUnsigned+0x9a>
          break;
     ffc:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
     ffe:	9b03      	ldr	r3, [sp, #12]
    1000:	68db      	ldr	r3, [r3, #12]
    1002:	2b00      	cmp	r3, #0
    1004:	db55      	blt.n	10b2 <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1006:	9b00      	ldr	r3, [sp, #0]
    1008:	2b01      	cmp	r3, #1
    100a:	d903      	bls.n	1014 <_PrintUnsigned+0xb0>
        NumDigits--;
    100c:	9b00      	ldr	r3, [sp, #0]
    100e:	3b01      	subs	r3, #1
    1010:	9300      	str	r3, [sp, #0]
    1012:	e009      	b.n	1028 <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    1014:	9a02      	ldr	r2, [sp, #8]
    1016:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1018:	fbb2 f3f3 	udiv	r3, r2, r3
    101c:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    101e:	9a05      	ldr	r2, [sp, #20]
    1020:	9b01      	ldr	r3, [sp, #4]
    1022:	429a      	cmp	r2, r3
    1024:	d200      	bcs.n	1028 <_PrintUnsigned+0xc4>
          break;
    1026:	e005      	b.n	1034 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    1028:	9b09      	ldr	r3, [sp, #36]	; 0x24
    102a:	9a01      	ldr	r2, [sp, #4]
    102c:	fb02 f303 	mul.w	r3, r2, r3
    1030:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1032:	e7e8      	b.n	1006 <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    1034:	9a02      	ldr	r2, [sp, #8]
    1036:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1038:	fbb2 f3f3 	udiv	r3, r2, r3
    103c:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    103e:	9b05      	ldr	r3, [sp, #20]
    1040:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1042:	fb02 f303 	mul.w	r3, r2, r3
    1046:	9a02      	ldr	r2, [sp, #8]
    1048:	1ad3      	subs	r3, r2, r3
    104a:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    104c:	4a1b      	ldr	r2, [pc, #108]	; (10bc <_PrintUnsigned+0x158>)
    104e:	9b05      	ldr	r3, [sp, #20]
    1050:	4413      	add	r3, r2
    1052:	781b      	ldrb	r3, [r3, #0]
    1054:	4619      	mov	r1, r3
    1056:	9803      	ldr	r0, [sp, #12]
    1058:	f7ff ff45 	bl	ee6 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    105c:	9b03      	ldr	r3, [sp, #12]
    105e:	68db      	ldr	r3, [r3, #12]
    1060:	2b00      	cmp	r3, #0
    1062:	db08      	blt.n	1076 <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    1064:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1066:	9b01      	ldr	r3, [sp, #4]
    1068:	fbb2 f3f3 	udiv	r3, r2, r3
    106c:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    106e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1070:	2b00      	cmp	r3, #0
    1072:	d1df      	bne.n	1034 <_PrintUnsigned+0xd0>
    1074:	e000      	b.n	1078 <_PrintUnsigned+0x114>
        break;
    1076:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    1078:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    107a:	f003 0301 	and.w	r3, r3, #1
    107e:	2b00      	cmp	r3, #0
    1080:	d017      	beq.n	10b2 <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    1082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1084:	2b00      	cmp	r3, #0
    1086:	d014      	beq.n	10b2 <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1088:	e00a      	b.n	10a0 <_PrintUnsigned+0x13c>
          FieldWidth--;
    108a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    108c:	3b01      	subs	r3, #1
    108e:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    1090:	2120      	movs	r1, #32
    1092:	9803      	ldr	r0, [sp, #12]
    1094:	f7ff ff27 	bl	ee6 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    1098:	9b03      	ldr	r3, [sp, #12]
    109a:	68db      	ldr	r3, [r3, #12]
    109c:	2b00      	cmp	r3, #0
    109e:	db07      	blt.n	10b0 <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    10a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10a2:	2b00      	cmp	r3, #0
    10a4:	d005      	beq.n	10b2 <_PrintUnsigned+0x14e>
    10a6:	9a07      	ldr	r2, [sp, #28]
    10a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10aa:	429a      	cmp	r2, r3
    10ac:	d3ed      	bcc.n	108a <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    10ae:	e000      	b.n	10b2 <_PrintUnsigned+0x14e>
            break;
    10b0:	bf00      	nop
}
    10b2:	bf00      	nop
    10b4:	b00b      	add	sp, #44	; 0x2c
    10b6:	f85d fb04 	ldr.w	pc, [sp], #4
    10ba:	bf00      	nop
    10bc:	000198a4 	.word	0x000198a4

000010c0 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    10c0:	b500      	push	{lr}
    10c2:	b089      	sub	sp, #36	; 0x24
    10c4:	9005      	str	r0, [sp, #20]
    10c6:	9104      	str	r1, [sp, #16]
    10c8:	9203      	str	r2, [sp, #12]
    10ca:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    10cc:	9b04      	ldr	r3, [sp, #16]
    10ce:	2b00      	cmp	r3, #0
    10d0:	bfb8      	it	lt
    10d2:	425b      	neglt	r3, r3
    10d4:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    10d6:	2301      	movs	r3, #1
    10d8:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    10da:	e007      	b.n	10ec <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    10dc:	9b03      	ldr	r3, [sp, #12]
    10de:	9a06      	ldr	r2, [sp, #24]
    10e0:	fb92 f3f3 	sdiv	r3, r2, r3
    10e4:	9306      	str	r3, [sp, #24]
    Width++;
    10e6:	9b07      	ldr	r3, [sp, #28]
    10e8:	3301      	adds	r3, #1
    10ea:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    10ec:	9b03      	ldr	r3, [sp, #12]
    10ee:	9a06      	ldr	r2, [sp, #24]
    10f0:	429a      	cmp	r2, r3
    10f2:	daf3      	bge.n	10dc <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    10f4:	9a02      	ldr	r2, [sp, #8]
    10f6:	9b07      	ldr	r3, [sp, #28]
    10f8:	429a      	cmp	r2, r3
    10fa:	d901      	bls.n	1100 <_PrintInt+0x40>
    Width = NumDigits;
    10fc:	9b02      	ldr	r3, [sp, #8]
    10fe:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    1100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1102:	2b00      	cmp	r3, #0
    1104:	d00a      	beq.n	111c <_PrintInt+0x5c>
    1106:	9b04      	ldr	r3, [sp, #16]
    1108:	2b00      	cmp	r3, #0
    110a:	db04      	blt.n	1116 <_PrintInt+0x56>
    110c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    110e:	f003 0304 	and.w	r3, r3, #4
    1112:	2b00      	cmp	r3, #0
    1114:	d002      	beq.n	111c <_PrintInt+0x5c>
    FieldWidth--;
    1116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1118:	3b01      	subs	r3, #1
    111a:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    111c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    111e:	f003 0302 	and.w	r3, r3, #2
    1122:	2b00      	cmp	r3, #0
    1124:	d002      	beq.n	112c <_PrintInt+0x6c>
    1126:	9b02      	ldr	r3, [sp, #8]
    1128:	2b00      	cmp	r3, #0
    112a:	d01c      	beq.n	1166 <_PrintInt+0xa6>
    112c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    112e:	f003 0301 	and.w	r3, r3, #1
    1132:	2b00      	cmp	r3, #0
    1134:	d117      	bne.n	1166 <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    1136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1138:	2b00      	cmp	r3, #0
    113a:	d014      	beq.n	1166 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    113c:	e00a      	b.n	1154 <_PrintInt+0x94>
        FieldWidth--;
    113e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1140:	3b01      	subs	r3, #1
    1142:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    1144:	2120      	movs	r1, #32
    1146:	9805      	ldr	r0, [sp, #20]
    1148:	f7ff fecd 	bl	ee6 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    114c:	9b05      	ldr	r3, [sp, #20]
    114e:	68db      	ldr	r3, [r3, #12]
    1150:	2b00      	cmp	r3, #0
    1152:	db07      	blt.n	1164 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1156:	2b00      	cmp	r3, #0
    1158:	d005      	beq.n	1166 <_PrintInt+0xa6>
    115a:	9a07      	ldr	r2, [sp, #28]
    115c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    115e:	429a      	cmp	r2, r3
    1160:	d3ed      	bcc.n	113e <_PrintInt+0x7e>
    1162:	e000      	b.n	1166 <_PrintInt+0xa6>
          break;
    1164:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    1166:	9b05      	ldr	r3, [sp, #20]
    1168:	68db      	ldr	r3, [r3, #12]
    116a:	2b00      	cmp	r3, #0
    116c:	db4a      	blt.n	1204 <_PrintInt+0x144>
    if (v < 0) {
    116e:	9b04      	ldr	r3, [sp, #16]
    1170:	2b00      	cmp	r3, #0
    1172:	da07      	bge.n	1184 <_PrintInt+0xc4>
      v = -v;
    1174:	9b04      	ldr	r3, [sp, #16]
    1176:	425b      	negs	r3, r3
    1178:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    117a:	212d      	movs	r1, #45	; 0x2d
    117c:	9805      	ldr	r0, [sp, #20]
    117e:	f7ff feb2 	bl	ee6 <_StoreChar>
    1182:	e008      	b.n	1196 <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    1184:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1186:	f003 0304 	and.w	r3, r3, #4
    118a:	2b00      	cmp	r3, #0
    118c:	d003      	beq.n	1196 <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    118e:	212b      	movs	r1, #43	; 0x2b
    1190:	9805      	ldr	r0, [sp, #20]
    1192:	f7ff fea8 	bl	ee6 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    1196:	9b05      	ldr	r3, [sp, #20]
    1198:	68db      	ldr	r3, [r3, #12]
    119a:	2b00      	cmp	r3, #0
    119c:	db32      	blt.n	1204 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    119e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11a0:	f003 0302 	and.w	r3, r3, #2
    11a4:	2b00      	cmp	r3, #0
    11a6:	d01f      	beq.n	11e8 <_PrintInt+0x128>
    11a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11aa:	f003 0301 	and.w	r3, r3, #1
    11ae:	2b00      	cmp	r3, #0
    11b0:	d11a      	bne.n	11e8 <_PrintInt+0x128>
    11b2:	9b02      	ldr	r3, [sp, #8]
    11b4:	2b00      	cmp	r3, #0
    11b6:	d117      	bne.n	11e8 <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    11b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11ba:	2b00      	cmp	r3, #0
    11bc:	d014      	beq.n	11e8 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    11be:	e00a      	b.n	11d6 <_PrintInt+0x116>
            FieldWidth--;
    11c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11c2:	3b01      	subs	r3, #1
    11c4:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    11c6:	2130      	movs	r1, #48	; 0x30
    11c8:	9805      	ldr	r0, [sp, #20]
    11ca:	f7ff fe8c 	bl	ee6 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    11ce:	9b05      	ldr	r3, [sp, #20]
    11d0:	68db      	ldr	r3, [r3, #12]
    11d2:	2b00      	cmp	r3, #0
    11d4:	db07      	blt.n	11e6 <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    11d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11d8:	2b00      	cmp	r3, #0
    11da:	d005      	beq.n	11e8 <_PrintInt+0x128>
    11dc:	9a07      	ldr	r2, [sp, #28]
    11de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11e0:	429a      	cmp	r2, r3
    11e2:	d3ed      	bcc.n	11c0 <_PrintInt+0x100>
    11e4:	e000      	b.n	11e8 <_PrintInt+0x128>
              break;
    11e6:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    11e8:	9b05      	ldr	r3, [sp, #20]
    11ea:	68db      	ldr	r3, [r3, #12]
    11ec:	2b00      	cmp	r3, #0
    11ee:	db09      	blt.n	1204 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    11f0:	9904      	ldr	r1, [sp, #16]
    11f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11f4:	9301      	str	r3, [sp, #4]
    11f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11f8:	9300      	str	r3, [sp, #0]
    11fa:	9b02      	ldr	r3, [sp, #8]
    11fc:	9a03      	ldr	r2, [sp, #12]
    11fe:	9805      	ldr	r0, [sp, #20]
    1200:	f7ff feb0 	bl	f64 <_PrintUnsigned>
      }
    }
  }
}
    1204:	bf00      	nop
    1206:	b009      	add	sp, #36	; 0x24
    1208:	f85d fb04 	ldr.w	pc, [sp], #4

0000120c <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    120c:	b500      	push	{lr}
    120e:	b0a3      	sub	sp, #140	; 0x8c
    1210:	9005      	str	r0, [sp, #20]
    1212:	9104      	str	r1, [sp, #16]
    1214:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    1216:	ab06      	add	r3, sp, #24
    1218:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    121a:	2340      	movs	r3, #64	; 0x40
    121c:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    121e:	2300      	movs	r3, #0
    1220:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    1222:	9b05      	ldr	r3, [sp, #20]
    1224:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    1226:	2300      	movs	r3, #0
    1228:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    122a:	9b04      	ldr	r3, [sp, #16]
    122c:	781b      	ldrb	r3, [r3, #0]
    122e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    1232:	9b04      	ldr	r3, [sp, #16]
    1234:	3301      	adds	r3, #1
    1236:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    1238:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    123c:	2b00      	cmp	r3, #0
    123e:	f000 819c 	beq.w	157a <__BSS_SRAM_SIZE+0x2da>
      break;
    }
    if (c == '%') {
    1242:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1246:	2b25      	cmp	r3, #37	; 0x25
    1248:	f040 818b 	bne.w	1562 <__BSS_SRAM_SIZE+0x2c2>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    124c:	2300      	movs	r3, #0
    124e:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    1250:	2301      	movs	r3, #1
    1252:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    1254:	9b04      	ldr	r3, [sp, #16]
    1256:	781b      	ldrb	r3, [r3, #0]
    1258:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    125c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1260:	3b23      	subs	r3, #35	; 0x23
    1262:	2b0d      	cmp	r3, #13
    1264:	d83e      	bhi.n	12e4 <__BSS_SRAM_SIZE+0x44>
    1266:	a201      	add	r2, pc, #4	; (adr r2, 126c <SEGGER_RTT_vprintf+0x60>)
    1268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    126c:	000012d5 	.word	0x000012d5
    1270:	000012e5 	.word	0x000012e5
    1274:	000012e5 	.word	0x000012e5
    1278:	000012e5 	.word	0x000012e5
    127c:	000012e5 	.word	0x000012e5
    1280:	000012e5 	.word	0x000012e5
    1284:	000012e5 	.word	0x000012e5
    1288:	000012e5 	.word	0x000012e5
    128c:	000012c5 	.word	0x000012c5
    1290:	000012e5 	.word	0x000012e5
    1294:	000012a5 	.word	0x000012a5
    1298:	000012e5 	.word	0x000012e5
    129c:	000012e5 	.word	0x000012e5
    12a0:	000012b5 	.word	0x000012b5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    12a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    12a6:	f043 0301 	orr.w	r3, r3, #1
    12aa:	931e      	str	r3, [sp, #120]	; 0x78
    12ac:	9b04      	ldr	r3, [sp, #16]
    12ae:	3301      	adds	r3, #1
    12b0:	9304      	str	r3, [sp, #16]
    12b2:	e01a      	b.n	12ea <__BSS_SRAM_SIZE+0x4a>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    12b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    12b6:	f043 0302 	orr.w	r3, r3, #2
    12ba:	931e      	str	r3, [sp, #120]	; 0x78
    12bc:	9b04      	ldr	r3, [sp, #16]
    12be:	3301      	adds	r3, #1
    12c0:	9304      	str	r3, [sp, #16]
    12c2:	e012      	b.n	12ea <__BSS_SRAM_SIZE+0x4a>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    12c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    12c6:	f043 0304 	orr.w	r3, r3, #4
    12ca:	931e      	str	r3, [sp, #120]	; 0x78
    12cc:	9b04      	ldr	r3, [sp, #16]
    12ce:	3301      	adds	r3, #1
    12d0:	9304      	str	r3, [sp, #16]
    12d2:	e00a      	b.n	12ea <__BSS_SRAM_SIZE+0x4a>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    12d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    12d6:	f043 0308 	orr.w	r3, r3, #8
    12da:	931e      	str	r3, [sp, #120]	; 0x78
    12dc:	9b04      	ldr	r3, [sp, #16]
    12de:	3301      	adds	r3, #1
    12e0:	9304      	str	r3, [sp, #16]
    12e2:	e002      	b.n	12ea <__BSS_SRAM_SIZE+0x4a>
        default:  v = 0; break;
    12e4:	2300      	movs	r3, #0
    12e6:	9320      	str	r3, [sp, #128]	; 0x80
    12e8:	bf00      	nop
        }
      } while (v);
    12ea:	9b20      	ldr	r3, [sp, #128]	; 0x80
    12ec:	2b00      	cmp	r3, #0
    12ee:	d1b1      	bne.n	1254 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    12f0:	2300      	movs	r3, #0
    12f2:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    12f4:	9b04      	ldr	r3, [sp, #16]
    12f6:	781b      	ldrb	r3, [r3, #0]
    12f8:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    12fc:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1300:	2b2f      	cmp	r3, #47	; 0x2f
    1302:	d912      	bls.n	132a <__BSS_SRAM_SIZE+0x8a>
    1304:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1308:	2b39      	cmp	r3, #57	; 0x39
    130a:	d80e      	bhi.n	132a <__BSS_SRAM_SIZE+0x8a>
          break;
        }
        sFormat++;
    130c:	9b04      	ldr	r3, [sp, #16]
    130e:	3301      	adds	r3, #1
    1310:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    1312:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    1314:	4613      	mov	r3, r2
    1316:	009b      	lsls	r3, r3, #2
    1318:	4413      	add	r3, r2
    131a:	005b      	lsls	r3, r3, #1
    131c:	461a      	mov	r2, r3
    131e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1322:	4413      	add	r3, r2
    1324:	3b30      	subs	r3, #48	; 0x30
    1326:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    1328:	e7e4      	b.n	12f4 <__BSS_SRAM_SIZE+0x54>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    132a:	2300      	movs	r3, #0
    132c:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    132e:	9b04      	ldr	r3, [sp, #16]
    1330:	781b      	ldrb	r3, [r3, #0]
    1332:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    1336:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    133a:	2b2e      	cmp	r3, #46	; 0x2e
    133c:	d11d      	bne.n	137a <__BSS_SRAM_SIZE+0xda>
        sFormat++;
    133e:	9b04      	ldr	r3, [sp, #16]
    1340:	3301      	adds	r3, #1
    1342:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    1344:	9b04      	ldr	r3, [sp, #16]
    1346:	781b      	ldrb	r3, [r3, #0]
    1348:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    134c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1350:	2b2f      	cmp	r3, #47	; 0x2f
    1352:	d912      	bls.n	137a <__BSS_SRAM_SIZE+0xda>
    1354:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1358:	2b39      	cmp	r3, #57	; 0x39
    135a:	d80e      	bhi.n	137a <__BSS_SRAM_SIZE+0xda>
            break;
          }
          sFormat++;
    135c:	9b04      	ldr	r3, [sp, #16]
    135e:	3301      	adds	r3, #1
    1360:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    1362:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    1364:	4613      	mov	r3, r2
    1366:	009b      	lsls	r3, r3, #2
    1368:	4413      	add	r3, r2
    136a:	005b      	lsls	r3, r3, #1
    136c:	461a      	mov	r2, r3
    136e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1372:	4413      	add	r3, r2
    1374:	3b30      	subs	r3, #48	; 0x30
    1376:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    1378:	e7e4      	b.n	1344 <__BSS_SRAM_SIZE+0xa4>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    137a:	9b04      	ldr	r3, [sp, #16]
    137c:	781b      	ldrb	r3, [r3, #0]
    137e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    1382:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1386:	2b6c      	cmp	r3, #108	; 0x6c
    1388:	d003      	beq.n	1392 <__BSS_SRAM_SIZE+0xf2>
    138a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    138e:	2b68      	cmp	r3, #104	; 0x68
    1390:	d107      	bne.n	13a2 <__BSS_SRAM_SIZE+0x102>
          sFormat++;
    1392:	9b04      	ldr	r3, [sp, #16]
    1394:	3301      	adds	r3, #1
    1396:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    1398:	9b04      	ldr	r3, [sp, #16]
    139a:	781b      	ldrb	r3, [r3, #0]
    139c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    13a0:	e7ef      	b.n	1382 <__BSS_SRAM_SIZE+0xe2>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    13a2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13a6:	2b25      	cmp	r3, #37	; 0x25
    13a8:	f000 80d0 	beq.w	154c <__BSS_SRAM_SIZE+0x2ac>
    13ac:	2b25      	cmp	r3, #37	; 0x25
    13ae:	f2c0 80d3 	blt.w	1558 <__BSS_SRAM_SIZE+0x2b8>
    13b2:	2b78      	cmp	r3, #120	; 0x78
    13b4:	f300 80d0 	bgt.w	1558 <__BSS_SRAM_SIZE+0x2b8>
    13b8:	2b58      	cmp	r3, #88	; 0x58
    13ba:	f2c0 80cd 	blt.w	1558 <__BSS_SRAM_SIZE+0x2b8>
    13be:	3b58      	subs	r3, #88	; 0x58
    13c0:	2b20      	cmp	r3, #32
    13c2:	f200 80c9 	bhi.w	1558 <__BSS_SRAM_SIZE+0x2b8>
    13c6:	a201      	add	r2, pc, #4	; (adr r2, 13cc <__BSS_SRAM_SIZE+0x12c>)
    13c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    13cc:	000014bd 	.word	0x000014bd
    13d0:	00001559 	.word	0x00001559
    13d4:	00001559 	.word	0x00001559
    13d8:	00001559 	.word	0x00001559
    13dc:	00001559 	.word	0x00001559
    13e0:	00001559 	.word	0x00001559
    13e4:	00001559 	.word	0x00001559
    13e8:	00001559 	.word	0x00001559
    13ec:	00001559 	.word	0x00001559
    13f0:	00001559 	.word	0x00001559
    13f4:	00001559 	.word	0x00001559
    13f8:	00001451 	.word	0x00001451
    13fc:	00001475 	.word	0x00001475
    1400:	00001559 	.word	0x00001559
    1404:	00001559 	.word	0x00001559
    1408:	00001559 	.word	0x00001559
    140c:	00001559 	.word	0x00001559
    1410:	00001559 	.word	0x00001559
    1414:	00001559 	.word	0x00001559
    1418:	00001559 	.word	0x00001559
    141c:	00001559 	.word	0x00001559
    1420:	00001559 	.word	0x00001559
    1424:	00001559 	.word	0x00001559
    1428:	00001559 	.word	0x00001559
    142c:	00001529 	.word	0x00001529
    1430:	00001559 	.word	0x00001559
    1434:	00001559 	.word	0x00001559
    1438:	000014e1 	.word	0x000014e1
    143c:	00001559 	.word	0x00001559
    1440:	00001499 	.word	0x00001499
    1444:	00001559 	.word	0x00001559
    1448:	00001559 	.word	0x00001559
    144c:	000014bd 	.word	0x000014bd
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    1450:	9b03      	ldr	r3, [sp, #12]
    1452:	681b      	ldr	r3, [r3, #0]
    1454:	1d19      	adds	r1, r3, #4
    1456:	9a03      	ldr	r2, [sp, #12]
    1458:	6011      	str	r1, [r2, #0]
    145a:	681b      	ldr	r3, [r3, #0]
    145c:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    145e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1460:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    1464:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    1468:	ab16      	add	r3, sp, #88	; 0x58
    146a:	4611      	mov	r1, r2
    146c:	4618      	mov	r0, r3
    146e:	f7ff fd3a 	bl	ee6 <_StoreChar>
        break;
    1472:	e072      	b.n	155a <__BSS_SRAM_SIZE+0x2ba>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    1474:	9b03      	ldr	r3, [sp, #12]
    1476:	681b      	ldr	r3, [r3, #0]
    1478:	1d19      	adds	r1, r3, #4
    147a:	9a03      	ldr	r2, [sp, #12]
    147c:	6011      	str	r1, [r2, #0]
    147e:	681b      	ldr	r3, [r3, #0]
    1480:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    1482:	a816      	add	r0, sp, #88	; 0x58
    1484:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1486:	9301      	str	r3, [sp, #4]
    1488:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    148a:	9300      	str	r3, [sp, #0]
    148c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    148e:	220a      	movs	r2, #10
    1490:	9920      	ldr	r1, [sp, #128]	; 0x80
    1492:	f7ff fe15 	bl	10c0 <_PrintInt>
        break;
    1496:	e060      	b.n	155a <__BSS_SRAM_SIZE+0x2ba>
      case 'u':
        v = va_arg(*pParamList, int);
    1498:	9b03      	ldr	r3, [sp, #12]
    149a:	681b      	ldr	r3, [r3, #0]
    149c:	1d19      	adds	r1, r3, #4
    149e:	9a03      	ldr	r2, [sp, #12]
    14a0:	6011      	str	r1, [r2, #0]
    14a2:	681b      	ldr	r3, [r3, #0]
    14a4:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    14a6:	9920      	ldr	r1, [sp, #128]	; 0x80
    14a8:	a816      	add	r0, sp, #88	; 0x58
    14aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    14ac:	9301      	str	r3, [sp, #4]
    14ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    14b0:	9300      	str	r3, [sp, #0]
    14b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    14b4:	220a      	movs	r2, #10
    14b6:	f7ff fd55 	bl	f64 <_PrintUnsigned>
        break;
    14ba:	e04e      	b.n	155a <__BSS_SRAM_SIZE+0x2ba>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    14bc:	9b03      	ldr	r3, [sp, #12]
    14be:	681b      	ldr	r3, [r3, #0]
    14c0:	1d19      	adds	r1, r3, #4
    14c2:	9a03      	ldr	r2, [sp, #12]
    14c4:	6011      	str	r1, [r2, #0]
    14c6:	681b      	ldr	r3, [r3, #0]
    14c8:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    14ca:	9920      	ldr	r1, [sp, #128]	; 0x80
    14cc:	a816      	add	r0, sp, #88	; 0x58
    14ce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    14d0:	9301      	str	r3, [sp, #4]
    14d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    14d4:	9300      	str	r3, [sp, #0]
    14d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    14d8:	2210      	movs	r2, #16
    14da:	f7ff fd43 	bl	f64 <_PrintUnsigned>
        break;
    14de:	e03c      	b.n	155a <__BSS_SRAM_SIZE+0x2ba>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    14e0:	9b03      	ldr	r3, [sp, #12]
    14e2:	681b      	ldr	r3, [r3, #0]
    14e4:	1d19      	adds	r1, r3, #4
    14e6:	9a03      	ldr	r2, [sp, #12]
    14e8:	6011      	str	r1, [r2, #0]
    14ea:	681b      	ldr	r3, [r3, #0]
    14ec:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    14ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    14f0:	2b00      	cmp	r3, #0
    14f2:	d101      	bne.n	14f8 <__BSS_SRAM_SIZE+0x258>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    14f4:	4b2c      	ldr	r3, [pc, #176]	; (15a8 <__BSS_SRAM_SIZE+0x308>)
    14f6:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    14f8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    14fa:	781b      	ldrb	r3, [r3, #0]
    14fc:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    1500:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1502:	3301      	adds	r3, #1
    1504:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    1506:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    150a:	2b00      	cmp	r3, #0
    150c:	d00a      	beq.n	1524 <__BSS_SRAM_SIZE+0x284>
              break;
            }
           _StoreChar(&BufferDesc, c);
    150e:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1512:	ab16      	add	r3, sp, #88	; 0x58
    1514:	4611      	mov	r1, r2
    1516:	4618      	mov	r0, r3
    1518:	f7ff fce5 	bl	ee6 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    151c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    151e:	2b00      	cmp	r3, #0
    1520:	daea      	bge.n	14f8 <__BSS_SRAM_SIZE+0x258>
        }
        break;
    1522:	e01a      	b.n	155a <__BSS_SRAM_SIZE+0x2ba>
              break;
    1524:	bf00      	nop
        break;
    1526:	e018      	b.n	155a <__BSS_SRAM_SIZE+0x2ba>
      case 'p':
        v = va_arg(*pParamList, int);
    1528:	9b03      	ldr	r3, [sp, #12]
    152a:	681b      	ldr	r3, [r3, #0]
    152c:	1d19      	adds	r1, r3, #4
    152e:	9a03      	ldr	r2, [sp, #12]
    1530:	6011      	str	r1, [r2, #0]
    1532:	681b      	ldr	r3, [r3, #0]
    1534:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    1536:	9920      	ldr	r1, [sp, #128]	; 0x80
    1538:	a816      	add	r0, sp, #88	; 0x58
    153a:	2300      	movs	r3, #0
    153c:	9301      	str	r3, [sp, #4]
    153e:	2308      	movs	r3, #8
    1540:	9300      	str	r3, [sp, #0]
    1542:	2308      	movs	r3, #8
    1544:	2210      	movs	r2, #16
    1546:	f7ff fd0d 	bl	f64 <_PrintUnsigned>
        break;
    154a:	e006      	b.n	155a <__BSS_SRAM_SIZE+0x2ba>
      case '%':
        _StoreChar(&BufferDesc, '%');
    154c:	ab16      	add	r3, sp, #88	; 0x58
    154e:	2125      	movs	r1, #37	; 0x25
    1550:	4618      	mov	r0, r3
    1552:	f7ff fcc8 	bl	ee6 <_StoreChar>
        break;
    1556:	e000      	b.n	155a <__BSS_SRAM_SIZE+0x2ba>
      default:
        break;
    1558:	bf00      	nop
      }
      sFormat++;
    155a:	9b04      	ldr	r3, [sp, #16]
    155c:	3301      	adds	r3, #1
    155e:	9304      	str	r3, [sp, #16]
    1560:	e006      	b.n	1570 <__BSS_SRAM_SIZE+0x2d0>
    } else {
      _StoreChar(&BufferDesc, c);
    1562:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1566:	ab16      	add	r3, sp, #88	; 0x58
    1568:	4611      	mov	r1, r2
    156a:	4618      	mov	r0, r3
    156c:	f7ff fcbb 	bl	ee6 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    1570:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1572:	2b00      	cmp	r3, #0
    1574:	f6bf ae59 	bge.w	122a <SEGGER_RTT_vprintf+0x1e>
    1578:	e000      	b.n	157c <__BSS_SRAM_SIZE+0x2dc>
      break;
    157a:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    157c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    157e:	2b00      	cmp	r3, #0
    1580:	dd0c      	ble.n	159c <__BSS_SRAM_SIZE+0x2fc>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    1582:	9b18      	ldr	r3, [sp, #96]	; 0x60
    1584:	2b00      	cmp	r3, #0
    1586:	d005      	beq.n	1594 <__BSS_SRAM_SIZE+0x2f4>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    1588:	9a18      	ldr	r2, [sp, #96]	; 0x60
    158a:	ab06      	add	r3, sp, #24
    158c:	4619      	mov	r1, r3
    158e:	9805      	ldr	r0, [sp, #20]
    1590:	f7ff fc7e 	bl	e90 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    1594:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1596:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1598:	4413      	add	r3, r2
    159a:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    159c:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    159e:	4618      	mov	r0, r3
    15a0:	b023      	add	sp, #140	; 0x8c
    15a2:	f85d fb04 	ldr.w	pc, [sp], #4
    15a6:	bf00      	nop
    15a8:	00017d10 	.word	0x00017d10

000015ac <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    15ac:	b40e      	push	{r1, r2, r3}
    15ae:	b500      	push	{lr}
    15b0:	b084      	sub	sp, #16
    15b2:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    15b4:	ab06      	add	r3, sp, #24
    15b6:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    15b8:	ab02      	add	r3, sp, #8
    15ba:	461a      	mov	r2, r3
    15bc:	9905      	ldr	r1, [sp, #20]
    15be:	9801      	ldr	r0, [sp, #4]
    15c0:	f7ff fe24 	bl	120c <SEGGER_RTT_vprintf>
    15c4:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    15c6:	9b03      	ldr	r3, [sp, #12]
}
    15c8:	4618      	mov	r0, r3
    15ca:	b004      	add	sp, #16
    15cc:	f85d eb04 	ldr.w	lr, [sp], #4
    15d0:	b003      	add	sp, #12
    15d2:	4770      	bx	lr

000015d4 <MCU_clocks>:
 *  -SIRCDIV1_CLK -->8 Mhz
 *  -SIRCDIV2_CLK -->8 Mhz
 *  -SOSCDIV1_CLK  -->Disabled
 *  -SOSCDIV2_CLK  -->Disabled
 */
void MCU_clocks( void ) {
    15d4:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );//Initializing MCU driver
    15d6:	4805      	ldr	r0, [pc, #20]	; (15ec <MCU_clocks+0x18>)
    15d8:	f004 fa38 	bl	5a4c <Mcu_Init>
    Mcu_SetMode( Run_mode );//MCU on run mode.
    15dc:	2000      	movs	r0, #0
    15de:	f004 fae9 	bl	5bb4 <Mcu_SetMode>
    Mcu_InitClock( Clocks_conf_0 );//Executing clock configurations established in container.
    15e2:	2000      	movs	r0, #0
    15e4:	f004 fab0 	bl	5b48 <Mcu_InitClock>

    //Configuring Pll clock.
    /*while ( Mcu_GetPllStatus() != MCU_PLL_LOCKED );//Waiting until PLL is locked.
    Mcu_DistributePllClock();//Executing pll clock configuration established in container.*/
}
    15e8:	bf00      	nop
    15ea:	bd08      	pop	{r3, pc}
    15ec:	00019108 	.word	0x00019108

000015f0 <EcuM_Init>:
/**
 * @brief This function initialices the microcontroller and the peripherals
 * 
 * 
 */
void EcuM_Init( void ) {   
    15f0:	b508      	push	{r3, lr}
    MCU_clocks();
    15f2:	f7ff ffef 	bl	15d4 <MCU_clocks>
    OsIf_Init( NULL_PTR );  //Init Osif timer.
    15f6:	2000      	movs	r0, #0
    15f8:	f000 fbd1 	bl	1d9e <OsIf_Init>
    Platform_Init( NULL_PTR );  //Init platform driver and configuration.
    15fc:	2000      	movs	r0, #0
    15fe:	f000 fa71 	bl	1ae4 <Platform_Init>
    Port_Init( &Port_Config );  //Init port driver and configuration.
    1602:	4807      	ldr	r0, [pc, #28]	; (1620 <EcuM_Init+0x30>)
    1604:	f004 feba 	bl	637c <Port_Init>
    Spi_Init( &Spi_Config );    //Init spi driver and configuration.
    1608:	4806      	ldr	r0, [pc, #24]	; (1624 <EcuM_Init+0x34>)
    160a:	f008 f8b5 	bl	9778 <Spi_Init>
    Can_43_FLEXCAN_Init( &Can_43_FLEXCAN_Config );  //Init FlexCan driver
    160e:	4806      	ldr	r0, [pc, #24]	; (1628 <EcuM_Init+0x38>)
    1610:	f008 fdbc 	bl	a18c <Can_43_FLEXCAN_Init>
    CanIf_Init( &CanIf_Config );    //Init CanIf driver.
    1614:	4805      	ldr	r0, [pc, #20]	; (162c <EcuM_Init+0x3c>)
    1616:	f015 fbd9 	bl	16dcc <CanIf_Init>
}
    161a:	bf00      	nop
    161c:	bd08      	pop	{r3, pc}
    161e:	bf00      	nop
    1620:	00019770 	.word	0x00019770
    1624:	00019870 	.word	0x00019870
    1628:	00018bcc 	.word	0x00018bcc
    162c:	00018a84 	.word	0x00018a84

00001630 <Delay>:
/**
 * @brief This function is a delay in ms using the osif timer.
 * 
 * @param ms Delay in ms.
 */
void Delay( uint32 ms ) {
    1630:	b500      	push	{lr}
    1632:	b087      	sub	sp, #28
    1634:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
    1636:	9b01      	ldr	r3, [sp, #4]
    1638:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    163c:	fb02 f303 	mul.w	r3, r2, r3
    1640:	2101      	movs	r1, #1
    1642:	4618      	mov	r0, r3
    1644:	f000 fc00 	bl	1e48 <OsIf_MicrosToTicks>
    1648:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
    164a:	2001      	movs	r0, #1
    164c:	f000 fbb0 	bl	1db0 <OsIf_GetCounter>
    1650:	4603      	mov	r3, r0
    1652:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
    1654:	2300      	movs	r3, #0
    1656:	9305      	str	r3, [sp, #20]

    do {
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
    1658:	ab03      	add	r3, sp, #12
    165a:	2101      	movs	r1, #1
    165c:	4618      	mov	r0, r3
    165e:	f000 fbc0 	bl	1de2 <OsIf_GetElapsed>
    1662:	4602      	mov	r2, r0
    1664:	9b05      	ldr	r3, [sp, #20]
    1666:	4413      	add	r3, r2
    1668:	9305      	str	r3, [sp, #20]
    } while( ElapsedTime < Timeout );
    166a:	9a05      	ldr	r2, [sp, #20]
    166c:	9b04      	ldr	r3, [sp, #16]
    166e:	429a      	cmp	r2, r3
    1670:	d3f2      	bcc.n	1658 <Delay+0x28>
    1672:	bf00      	nop
    1674:	bf00      	nop
    1676:	b007      	add	sp, #28
    1678:	f85d fb04 	ldr.w	pc, [sp], #4

0000167c <memcpy>:
    167c:	440a      	add	r2, r1
    167e:	4291      	cmp	r1, r2
    1680:	f100 33ff 	add.w	r3, r0, #4294967295
    1684:	d100      	bne.n	1688 <memcpy+0xc>
    1686:	4770      	bx	lr
    1688:	b510      	push	{r4, lr}
    168a:	f811 4b01 	ldrb.w	r4, [r1], #1
    168e:	f803 4f01 	strb.w	r4, [r3, #1]!
    1692:	4291      	cmp	r1, r2
    1694:	d1f9      	bne.n	168a <memcpy+0xe>
    1696:	bd10      	pop	{r4, pc}

00001698 <memset>:
    1698:	4402      	add	r2, r0
    169a:	4603      	mov	r3, r0
    169c:	4293      	cmp	r3, r2
    169e:	d100      	bne.n	16a2 <memset+0xa>
    16a0:	4770      	bx	lr
    16a2:	f803 1b01 	strb.w	r1, [r3], #1
    16a6:	e7f9      	b.n	169c <memset+0x4>

000016a8 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    16a8:	b500      	push	{lr}
    16aa:	b087      	sub	sp, #28
    16ac:	9003      	str	r0, [sp, #12]
    16ae:	9102      	str	r1, [sp, #8]
    16b0:	9201      	str	r2, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    sint32 dev_irqNumber = (sint32)eIrqNumber;
    16b2:	9b03      	ldr	r3, [sp, #12]
    16b4:	9305      	str	r3, [sp, #20]
    DevAssert((sint32)INT_CTRL_IP_IRQ_MIN <= dev_irqNumber);
    16b6:	9b05      	ldr	r3, [sp, #20]
    16b8:	43db      	mvns	r3, r3
    16ba:	0fdb      	lsrs	r3, r3, #31
    16bc:	b2db      	uxtb	r3, r3
    16be:	4618      	mov	r0, r3
    16c0:	f7ff f926 	bl	910 <DevAssert>
    DevAssert(dev_irqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    16c4:	9b05      	ldr	r3, [sp, #20]
    16c6:	2b7a      	cmp	r3, #122	; 0x7a
    16c8:	bfd4      	ite	le
    16ca:	2301      	movle	r3, #1
    16cc:	2300      	movgt	r3, #0
    16ce:	b2db      	uxtb	r3, r3
    16d0:	4618      	mov	r0, r3
    16d2:	f7ff f91d 	bl	910 <DevAssert>
#if (MCAL_PLATFORM_ARM == MCAL_ARM_MARCH)
#if defined(S32K3XX) || defined(SAF85) || defined(S32R41)
    DevAssert(S32_SCB->VTOR >= (uint32)__RAM_INTERRUPT_START);
#else
    DevAssert(S32_SCB->VTOR >= (uint32)__INT_SRAM_START);
    16d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    16da:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    16de:	4a14      	ldr	r2, [pc, #80]	; (1730 <IntCtrl_Ip_InstallHandlerPrivileged+0x88>)
    16e0:	4293      	cmp	r3, r2
    16e2:	bf2c      	ite	cs
    16e4:	2301      	movcs	r3, #1
    16e6:	2300      	movcc	r3, #0
    16e8:	b2db      	uxtb	r3, r3
    16ea:	4618      	mov	r0, r3
    16ec:	f7ff f910 	bl	910 <DevAssert>

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    16f0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    16f4:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    16f8:	9304      	str	r3, [sp, #16]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    16fa:	9b01      	ldr	r3, [sp, #4]
    16fc:	2b00      	cmp	r3, #0
    16fe:	d007      	beq.n	1710 <IntCtrl_Ip_InstallHandlerPrivileged+0x68>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    1700:	9b03      	ldr	r3, [sp, #12]
    1702:	3310      	adds	r3, #16
    1704:	009b      	lsls	r3, r3, #2
    1706:	9a04      	ldr	r2, [sp, #16]
    1708:	4413      	add	r3, r2
    170a:	681a      	ldr	r2, [r3, #0]
    170c:	9b01      	ldr	r3, [sp, #4]
    170e:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    1710:	9b03      	ldr	r3, [sp, #12]
    1712:	3310      	adds	r3, #16
    1714:	009b      	lsls	r3, r3, #2
    1716:	9a04      	ldr	r2, [sp, #16]
    1718:	4413      	add	r3, r2
    171a:	9a02      	ldr	r2, [sp, #8]
    171c:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    171e:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    1722:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    1726:	bf00      	nop
    1728:	b007      	add	sp, #28
    172a:	f85d fb04 	ldr.w	pc, [sp], #4
    172e:	bf00      	nop
    1730:	1fff8000 	.word	0x1fff8000

00001734 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    1734:	b500      	push	{lr}
    1736:	b083      	sub	sp, #12
    1738:	9001      	str	r0, [sp, #4]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    DevAssert(0 <= (sint32)eIrqNumber);
    173a:	9b01      	ldr	r3, [sp, #4]
    173c:	43db      	mvns	r3, r3
    173e:	0fdb      	lsrs	r3, r3, #31
    1740:	b2db      	uxtb	r3, r3
    1742:	4618      	mov	r0, r3
    1744:	f7ff f8e4 	bl	910 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    1748:	9b01      	ldr	r3, [sp, #4]
    174a:	2b7a      	cmp	r3, #122	; 0x7a
    174c:	bfd4      	ite	le
    174e:	2301      	movle	r3, #1
    1750:	2300      	movgt	r3, #0
    1752:	b2db      	uxtb	r3, r3
    1754:	4618      	mov	r0, r3
    1756:	f7ff f8db 	bl	910 <DevAssert>
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    175a:	9b01      	ldr	r3, [sp, #4]
    175c:	f003 021f 	and.w	r2, r3, #31
    1760:	4905      	ldr	r1, [pc, #20]	; (1778 <IntCtrl_Ip_EnableIrqPrivileged+0x44>)
    1762:	9b01      	ldr	r3, [sp, #4]
    1764:	095b      	lsrs	r3, r3, #5
    1766:	2001      	movs	r0, #1
    1768:	fa00 f202 	lsl.w	r2, r0, r2
    176c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    1770:	bf00      	nop
    1772:	b003      	add	sp, #12
    1774:	f85d fb04 	ldr.w	pc, [sp], #4
    1778:	e000e100 	.word	0xe000e100

0000177c <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    177c:	b500      	push	{lr}
    177e:	b083      	sub	sp, #12
    1780:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    DevAssert(0 <= (sint32)eIrqNumber);
    1782:	9b01      	ldr	r3, [sp, #4]
    1784:	43db      	mvns	r3, r3
    1786:	0fdb      	lsrs	r3, r3, #31
    1788:	b2db      	uxtb	r3, r3
    178a:	4618      	mov	r0, r3
    178c:	f7ff f8c0 	bl	910 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    1790:	9b01      	ldr	r3, [sp, #4]
    1792:	2b7a      	cmp	r3, #122	; 0x7a
    1794:	bfd4      	ite	le
    1796:	2301      	movle	r3, #1
    1798:	2300      	movgt	r3, #0
    179a:	b2db      	uxtb	r3, r3
    179c:	4618      	mov	r0, r3
    179e:	f7ff f8b7 	bl	910 <DevAssert>
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    17a2:	9b01      	ldr	r3, [sp, #4]
    17a4:	f003 021f 	and.w	r2, r3, #31
    17a8:	4906      	ldr	r1, [pc, #24]	; (17c4 <IntCtrl_Ip_DisableIrqPrivileged+0x48>)
    17aa:	9b01      	ldr	r3, [sp, #4]
    17ac:	095b      	lsrs	r3, r3, #5
    17ae:	2001      	movs	r0, #1
    17b0:	fa00 f202 	lsl.w	r2, r0, r2
    17b4:	3320      	adds	r3, #32
    17b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    17ba:	bf00      	nop
    17bc:	b003      	add	sp, #12
    17be:	f85d fb04 	ldr.w	pc, [sp], #4
    17c2:	bf00      	nop
    17c4:	e000e100 	.word	0xe000e100

000017c8 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    17c8:	b500      	push	{lr}
    17ca:	b085      	sub	sp, #20
    17cc:	9001      	str	r0, [sp, #4]
    17ce:	460b      	mov	r3, r1
    17d0:	f88d 3003 	strb.w	r3, [sp, #3]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)

    /* Check IRQ number and priority - dev_irqNumber is used to avoid compiler warning */
    DevAssert((sint32)INT_CTRL_IP_IRQ_MIN <= (sint32)eIrqNumber);
    17d4:	9b01      	ldr	r3, [sp, #4]
    17d6:	43db      	mvns	r3, r3
    17d8:	0fdb      	lsrs	r3, r3, #31
    17da:	b2db      	uxtb	r3, r3
    17dc:	4618      	mov	r0, r3
    17de:	f7ff f897 	bl	910 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    17e2:	9b01      	ldr	r3, [sp, #4]
    17e4:	2b7a      	cmp	r3, #122	; 0x7a
    17e6:	bfd4      	ite	le
    17e8:	2301      	movle	r3, #1
    17ea:	2300      	movgt	r3, #0
    17ec:	b2db      	uxtb	r3, r3
    17ee:	4618      	mov	r0, r3
    17f0:	f7ff f88e 	bl	910 <DevAssert>
#if (INT_CTRL_IP_CORTEXM == STD_ON)
    DevAssert(u8Priority < (uint8)(1U << INT_CTRL_IP_NVIC_PRIO_BITS));
    17f4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    17f8:	2b0f      	cmp	r3, #15
    17fa:	bf94      	ite	ls
    17fc:	2301      	movls	r3, #1
    17fe:	2300      	movhi	r3, #0
    1800:	b2db      	uxtb	r3, r3
    1802:	4618      	mov	r0, r3
    1804:	f7ff f884 	bl	910 <DevAssert>
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1808:	2304      	movs	r3, #4
    180a:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    180e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1812:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1816:	fa02 f103 	lsl.w	r1, r2, r3
    181a:	4a05      	ldr	r2, [pc, #20]	; (1830 <IntCtrl_Ip_SetPriorityPrivileged+0x68>)
    181c:	9b01      	ldr	r3, [sp, #4]
    181e:	b2c9      	uxtb	r1, r1
    1820:	4413      	add	r3, r2
    1822:	460a      	mov	r2, r1
    1824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    1828:	bf00      	nop
    182a:	b005      	add	sp, #20
    182c:	f85d fb04 	ldr.w	pc, [sp], #4
    1830:	e000e100 	.word	0xe000e100

00001834 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    1834:	b500      	push	{lr}
    1836:	b085      	sub	sp, #20
    1838:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)

    /* Check IRQ number */
    DevAssert(INT_CTRL_IP_IRQ_MIN <= eIrqNumber);
    183a:	9b01      	ldr	r3, [sp, #4]
    183c:	43db      	mvns	r3, r3
    183e:	0fdb      	lsrs	r3, r3, #31
    1840:	b2db      	uxtb	r3, r3
    1842:	4618      	mov	r0, r3
    1844:	f7ff f864 	bl	910 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    1848:	9b01      	ldr	r3, [sp, #4]
    184a:	2b7a      	cmp	r3, #122	; 0x7a
    184c:	bfd4      	ite	le
    184e:	2301      	movle	r3, #1
    1850:	2300      	movgt	r3, #0
    1852:	b2db      	uxtb	r3, r3
    1854:	4618      	mov	r0, r3
    1856:	f7ff f85b 	bl	910 <DevAssert>

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    185a:	2304      	movs	r3, #4
    185c:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    1860:	4a09      	ldr	r2, [pc, #36]	; (1888 <IntCtrl_Ip_GetPriorityPrivileged+0x54>)
    1862:	9b01      	ldr	r3, [sp, #4]
    1864:	4413      	add	r3, r2
    1866:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    186a:	b2db      	uxtb	r3, r3
    186c:	461a      	mov	r2, r3
    186e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1872:	fa42 f303 	asr.w	r3, r2, r3
    1876:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    187a:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    187e:	4618      	mov	r0, r3
    1880:	b005      	add	sp, #20
    1882:	f85d fb04 	ldr.w	pc, [sp], #4
    1886:	bf00      	nop
    1888:	e000e100 	.word	0xe000e100

0000188c <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    188c:	b500      	push	{lr}
    188e:	b083      	sub	sp, #12
    1890:	9001      	str	r0, [sp, #4]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number */
    DevAssert(0 <= (sint32)eIrqNumber);
    1892:	9b01      	ldr	r3, [sp, #4]
    1894:	43db      	mvns	r3, r3
    1896:	0fdb      	lsrs	r3, r3, #31
    1898:	b2db      	uxtb	r3, r3
    189a:	4618      	mov	r0, r3
    189c:	f7ff f838 	bl	910 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    18a0:	9b01      	ldr	r3, [sp, #4]
    18a2:	2b7a      	cmp	r3, #122	; 0x7a
    18a4:	bfd4      	ite	le
    18a6:	2301      	movle	r3, #1
    18a8:	2300      	movgt	r3, #0
    18aa:	b2db      	uxtb	r3, r3
    18ac:	4618      	mov	r0, r3
    18ae:	f7ff f82f 	bl	910 <DevAssert>
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    18b2:	9b01      	ldr	r3, [sp, #4]
    18b4:	f003 021f 	and.w	r2, r3, #31
    18b8:	4906      	ldr	r1, [pc, #24]	; (18d4 <IntCtrl_Ip_ClearPendingPrivileged+0x48>)
    18ba:	9b01      	ldr	r3, [sp, #4]
    18bc:	095b      	lsrs	r3, r3, #5
    18be:	2001      	movs	r0, #1
    18c0:	fa00 f202 	lsl.w	r2, r0, r2
    18c4:	3360      	adds	r3, #96	; 0x60
    18c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    18ca:	bf00      	nop
    18cc:	b003      	add	sp, #12
    18ce:	f85d fb04 	ldr.w	pc, [sp], #4
    18d2:	bf00      	nop
    18d4:	e000e100 	.word	0xe000e100

000018d8 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    18d8:	b500      	push	{lr}
    18da:	b085      	sub	sp, #20
    18dc:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_ENABLE_VTOR_CONFIG == STD_ON)
    S32_SCB->VTOR = pIntCtrlCtrlConfig->u32VectorTableAddress;
#endif

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    18de:	9b01      	ldr	r3, [sp, #4]
    18e0:	2b00      	cmp	r3, #0
    18e2:	bf14      	ite	ne
    18e4:	2301      	movne	r3, #1
    18e6:	2300      	moveq	r3, #0
    18e8:	b2db      	uxtb	r3, r3
    18ea:	4618      	mov	r0, r3
    18ec:	f7ff f810 	bl	910 <DevAssert>
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
    18f0:	9b01      	ldr	r3, [sp, #4]
    18f2:	681b      	ldr	r3, [r3, #0]
    18f4:	2b59      	cmp	r3, #89	; 0x59
    18f6:	bf94      	ite	ls
    18f8:	2301      	movls	r3, #1
    18fa:	2300      	movhi	r3, #0
    18fc:	b2db      	uxtb	r3, r3
    18fe:	4618      	mov	r0, r3
    1900:	f7ff f806 	bl	910 <DevAssert>
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1904:	2300      	movs	r3, #0
    1906:	9303      	str	r3, [sp, #12]
    1908:	e05d      	b.n	19c6 <IntCtrl_Ip_Init+0xee>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    190a:	9b01      	ldr	r3, [sp, #4]
    190c:	6859      	ldr	r1, [r3, #4]
    190e:	9a03      	ldr	r2, [sp, #12]
    1910:	4613      	mov	r3, r2
    1912:	005b      	lsls	r3, r3, #1
    1914:	4413      	add	r3, r2
    1916:	009b      	lsls	r3, r3, #2
    1918:	440b      	add	r3, r1
    191a:	681b      	ldr	r3, [r3, #0]
    191c:	4618      	mov	r0, r3
    191e:	f000 f899 	bl	1a54 <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1922:	9b01      	ldr	r3, [sp, #4]
    1924:	6859      	ldr	r1, [r3, #4]
    1926:	9a03      	ldr	r2, [sp, #12]
    1928:	4613      	mov	r3, r2
    192a:	005b      	lsls	r3, r3, #1
    192c:	4413      	add	r3, r2
    192e:	009b      	lsls	r3, r3, #2
    1930:	440b      	add	r3, r1
    1932:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1934:	9b01      	ldr	r3, [sp, #4]
    1936:	6859      	ldr	r1, [r3, #4]
    1938:	9a03      	ldr	r2, [sp, #12]
    193a:	4613      	mov	r3, r2
    193c:	005b      	lsls	r3, r3, #1
    193e:	4413      	add	r3, r2
    1940:	009b      	lsls	r3, r3, #2
    1942:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1944:	795b      	ldrb	r3, [r3, #5]
    1946:	4619      	mov	r1, r3
    1948:	f000 f869 	bl	1a1e <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    194c:	9b01      	ldr	r3, [sp, #4]
    194e:	6859      	ldr	r1, [r3, #4]
    1950:	9a03      	ldr	r2, [sp, #12]
    1952:	4613      	mov	r3, r2
    1954:	005b      	lsls	r3, r3, #1
    1956:	4413      	add	r3, r2
    1958:	009b      	lsls	r3, r3, #2
    195a:	440b      	add	r3, r1
    195c:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    195e:	9b01      	ldr	r3, [sp, #4]
    1960:	6859      	ldr	r1, [r3, #4]
    1962:	9a03      	ldr	r2, [sp, #12]
    1964:	4613      	mov	r3, r2
    1966:	005b      	lsls	r3, r3, #1
    1968:	4413      	add	r3, r2
    196a:	009b      	lsls	r3, r3, #2
    196c:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    196e:	689b      	ldr	r3, [r3, #8]
    1970:	2200      	movs	r2, #0
    1972:	4619      	mov	r1, r3
    1974:	f000 f831 	bl	19da <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1978:	9b01      	ldr	r3, [sp, #4]
    197a:	6859      	ldr	r1, [r3, #4]
    197c:	9a03      	ldr	r2, [sp, #12]
    197e:	4613      	mov	r3, r2
    1980:	005b      	lsls	r3, r3, #1
    1982:	4413      	add	r3, r2
    1984:	009b      	lsls	r3, r3, #2
    1986:	440b      	add	r3, r1
    1988:	791b      	ldrb	r3, [r3, #4]
    198a:	2b00      	cmp	r3, #0
    198c:	d00c      	beq.n	19a8 <IntCtrl_Ip_Init+0xd0>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    198e:	9b01      	ldr	r3, [sp, #4]
    1990:	6859      	ldr	r1, [r3, #4]
    1992:	9a03      	ldr	r2, [sp, #12]
    1994:	4613      	mov	r3, r2
    1996:	005b      	lsls	r3, r3, #1
    1998:	4413      	add	r3, r2
    199a:	009b      	lsls	r3, r3, #2
    199c:	440b      	add	r3, r1
    199e:	681b      	ldr	r3, [r3, #0]
    19a0:	4618      	mov	r0, r3
    19a2:	f000 f828 	bl	19f6 <IntCtrl_Ip_EnableIrq>
    19a6:	e00b      	b.n	19c0 <IntCtrl_Ip_Init+0xe8>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    19a8:	9b01      	ldr	r3, [sp, #4]
    19aa:	6859      	ldr	r1, [r3, #4]
    19ac:	9a03      	ldr	r2, [sp, #12]
    19ae:	4613      	mov	r3, r2
    19b0:	005b      	lsls	r3, r3, #1
    19b2:	4413      	add	r3, r2
    19b4:	009b      	lsls	r3, r3, #2
    19b6:	440b      	add	r3, r1
    19b8:	681b      	ldr	r3, [r3, #0]
    19ba:	4618      	mov	r0, r3
    19bc:	f000 f825 	bl	1a0a <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    19c0:	9b03      	ldr	r3, [sp, #12]
    19c2:	3301      	adds	r3, #1
    19c4:	9303      	str	r3, [sp, #12]
    19c6:	9b01      	ldr	r3, [sp, #4]
    19c8:	681b      	ldr	r3, [r3, #0]
    19ca:	9a03      	ldr	r2, [sp, #12]
    19cc:	429a      	cmp	r2, r3
    19ce:	d39c      	bcc.n	190a <IntCtrl_Ip_Init+0x32>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    19d0:	2300      	movs	r3, #0
}
    19d2:	4618      	mov	r0, r3
    19d4:	b005      	add	sp, #20
    19d6:	f85d fb04 	ldr.w	pc, [sp], #4

000019da <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    19da:	b500      	push	{lr}
    19dc:	b085      	sub	sp, #20
    19de:	9003      	str	r0, [sp, #12]
    19e0:	9102      	str	r1, [sp, #8]
    19e2:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    19e4:	9a01      	ldr	r2, [sp, #4]
    19e6:	9902      	ldr	r1, [sp, #8]
    19e8:	9803      	ldr	r0, [sp, #12]
    19ea:	f7ff fe5d 	bl	16a8 <IntCtrl_Ip_InstallHandlerPrivileged>
}
    19ee:	bf00      	nop
    19f0:	b005      	add	sp, #20
    19f2:	f85d fb04 	ldr.w	pc, [sp], #4

000019f6 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    19f6:	b500      	push	{lr}
    19f8:	b083      	sub	sp, #12
    19fa:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    19fc:	9801      	ldr	r0, [sp, #4]
    19fe:	f7ff fe99 	bl	1734 <IntCtrl_Ip_EnableIrqPrivileged>
}
    1a02:	bf00      	nop
    1a04:	b003      	add	sp, #12
    1a06:	f85d fb04 	ldr.w	pc, [sp], #4

00001a0a <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    1a0a:	b500      	push	{lr}
    1a0c:	b083      	sub	sp, #12
    1a0e:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    1a10:	9801      	ldr	r0, [sp, #4]
    1a12:	f7ff feb3 	bl	177c <IntCtrl_Ip_DisableIrqPrivileged>
}
    1a16:	bf00      	nop
    1a18:	b003      	add	sp, #12
    1a1a:	f85d fb04 	ldr.w	pc, [sp], #4

00001a1e <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1a1e:	b500      	push	{lr}
    1a20:	b083      	sub	sp, #12
    1a22:	9001      	str	r0, [sp, #4]
    1a24:	460b      	mov	r3, r1
    1a26:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    1a2a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1a2e:	4619      	mov	r1, r3
    1a30:	9801      	ldr	r0, [sp, #4]
    1a32:	f7ff fec9 	bl	17c8 <IntCtrl_Ip_SetPriorityPrivileged>
}
    1a36:	bf00      	nop
    1a38:	b003      	add	sp, #12
    1a3a:	f85d fb04 	ldr.w	pc, [sp], #4

00001a3e <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    1a3e:	b500      	push	{lr}
    1a40:	b083      	sub	sp, #12
    1a42:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    1a44:	9801      	ldr	r0, [sp, #4]
    1a46:	f7ff fef5 	bl	1834 <IntCtrl_Ip_GetPriorityPrivileged>
    1a4a:	4603      	mov	r3, r0
}
    1a4c:	4618      	mov	r0, r3
    1a4e:	b003      	add	sp, #12
    1a50:	f85d fb04 	ldr.w	pc, [sp], #4

00001a54 <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    1a54:	b500      	push	{lr}
    1a56:	b083      	sub	sp, #12
    1a58:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    1a5a:	9801      	ldr	r0, [sp, #4]
    1a5c:	f7ff ff16 	bl	188c <IntCtrl_Ip_ClearPendingPrivileged>
}
    1a60:	bf00      	nop
    1a62:	b003      	add	sp, #12
    1a64:	f85d fb04 	ldr.w	pc, [sp], #4

00001a68 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1a68:	b500      	push	{lr}
    1a6a:	b083      	sub	sp, #12
    1a6c:	9001      	str	r0, [sp, #4]
    1a6e:	460b      	mov	r3, r1
    1a70:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    1a74:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1a78:	2b00      	cmp	r3, #0
    1a7a:	d003      	beq.n	1a84 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    1a7c:	9801      	ldr	r0, [sp, #4]
    1a7e:	f7ff ffba 	bl	19f6 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    1a82:	e002      	b.n	1a8a <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    1a84:	9801      	ldr	r0, [sp, #4]
    1a86:	f7ff ffc0 	bl	1a0a <IntCtrl_Ip_DisableIrq>
}
    1a8a:	bf00      	nop
    1a8c:	b003      	add	sp, #12
    1a8e:	f85d fb04 	ldr.w	pc, [sp], #4

00001a92 <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1a92:	b500      	push	{lr}
    1a94:	b083      	sub	sp, #12
    1a96:	9001      	str	r0, [sp, #4]
    1a98:	460b      	mov	r3, r1
    1a9a:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    1a9e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1aa2:	4619      	mov	r1, r3
    1aa4:	9801      	ldr	r0, [sp, #4]
    1aa6:	f7ff ffba 	bl	1a1e <IntCtrl_Ip_SetPriority>
}
    1aaa:	bf00      	nop
    1aac:	b003      	add	sp, #12
    1aae:	f85d fb04 	ldr.w	pc, [sp], #4

00001ab2 <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    1ab2:	b500      	push	{lr}
    1ab4:	b083      	sub	sp, #12
    1ab6:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    1ab8:	9801      	ldr	r0, [sp, #4]
    1aba:	f7ff ffc0 	bl	1a3e <IntCtrl_Ip_GetPriority>
    1abe:	4603      	mov	r3, r0
}
    1ac0:	4618      	mov	r0, r3
    1ac2:	b003      	add	sp, #12
    1ac4:	f85d fb04 	ldr.w	pc, [sp], #4

00001ac8 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1ac8:	b500      	push	{lr}
    1aca:	b085      	sub	sp, #20
    1acc:	9003      	str	r0, [sp, #12]
    1ace:	9102      	str	r1, [sp, #8]
    1ad0:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1ad2:	9a01      	ldr	r2, [sp, #4]
    1ad4:	9902      	ldr	r1, [sp, #8]
    1ad6:	9803      	ldr	r0, [sp, #12]
    1ad8:	f7ff ff7f 	bl	19da <IntCtrl_Ip_InstallHandler>
}
    1adc:	bf00      	nop
    1ade:	b005      	add	sp, #20
    1ae0:	f85d fb04 	ldr.w	pc, [sp], #4

00001ae4 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    1ae4:	b500      	push	{lr}
    1ae6:	b085      	sub	sp, #20
    1ae8:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    1aea:	2300      	movs	r3, #0
    1aec:	f88d 300f 	strb.w	r3, [sp, #15]
    (void)pConfig;
#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (NULL_PTR != pConfig)
    1af0:	9b01      	ldr	r3, [sp, #4]
    1af2:	2b00      	cmp	r3, #0
    1af4:	d006      	beq.n	1b04 <Platform_Init+0x20>
    {
        (void)Det_ReportError((uint16)CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_INIT_ID, PLATFORM_E_PARAM_POINTER);
    1af6:	2301      	movs	r3, #1
    1af8:	2220      	movs	r2, #32
    1afa:	2100      	movs	r1, #0
    1afc:	20ff      	movs	r0, #255	; 0xff
    1afe:	f015 f88b 	bl	16c18 <Det_ReportError>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    1b02:	e008      	b.n	1b16 <Platform_Init+0x32>
            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    1b04:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1b08:	4a05      	ldr	r2, [pc, #20]	; (1b20 <Platform_Init+0x3c>)
    1b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1b0e:	681b      	ldr	r3, [r3, #0]
    1b10:	4618      	mov	r0, r3
    1b12:	f000 f917 	bl	1d44 <Platform_Ipw_Init>
}
    1b16:	bf00      	nop
    1b18:	b005      	add	sp, #20
    1b1a:	f85d fb04 	ldr.w	pc, [sp], #4
    1b1e:	bf00      	nop
    1b20:	00019134 	.word	0x00019134

00001b24 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1b24:	b500      	push	{lr}
    1b26:	b085      	sub	sp, #20
    1b28:	9001      	str	r0, [sp, #4]
    1b2a:	460b      	mov	r3, r1
    1b2c:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1b30:	2300      	movs	r3, #0
    1b32:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    1b36:	9b01      	ldr	r3, [sp, #4]
    1b38:	2b7a      	cmp	r3, #122	; 0x7a
    1b3a:	dc02      	bgt.n	1b42 <Platform_SetIrq+0x1e>
    1b3c:	9b01      	ldr	r3, [sp, #4]
    1b3e:	2b00      	cmp	r3, #0
    1b40:	da09      	bge.n	1b56 <Platform_SetIrq+0x32>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_SET_IRQ_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    1b42:	2302      	movs	r3, #2
    1b44:	2221      	movs	r2, #33	; 0x21
    1b46:	2100      	movs	r1, #0
    1b48:	20ff      	movs	r0, #255	; 0xff
    1b4a:	f015 f865 	bl	16c18 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1b4e:	2301      	movs	r3, #1
    1b50:	f88d 300f 	strb.w	r3, [sp, #15]
    1b54:	e005      	b.n	1b62 <Platform_SetIrq+0x3e>
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    1b56:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1b5a:	4619      	mov	r1, r3
    1b5c:	9801      	ldr	r0, [sp, #4]
    1b5e:	f7ff ff83 	bl	1a68 <Platform_Ipw_SetIrq>
    }
    return RetValue;
    1b62:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1b66:	4618      	mov	r0, r3
    1b68:	b005      	add	sp, #20
    1b6a:	f85d fb04 	ldr.w	pc, [sp], #4

00001b6e <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1b6e:	b500      	push	{lr}
    1b70:	b085      	sub	sp, #20
    1b72:	9001      	str	r0, [sp, #4]
    1b74:	460b      	mov	r3, r1
    1b76:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1b7a:	2300      	movs	r3, #0
    1b7c:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
#if (INT_CTRL_IP_CORTEXM == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    1b80:	9b01      	ldr	r3, [sp, #4]
    1b82:	2b7a      	cmp	r3, #122	; 0x7a
    1b84:	dc06      	bgt.n	1b94 <Platform_SetIrqPriority+0x26>
    1b86:	9b01      	ldr	r3, [sp, #4]
    1b88:	2b00      	cmp	r3, #0
    1b8a:	db03      	blt.n	1b94 <Platform_SetIrqPriority+0x26>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber) || \
    1b8c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1b90:	2b0f      	cmp	r3, #15
    1b92:	d909      	bls.n	1ba8 <Platform_SetIrqPriority+0x3a>
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber) || \
        (u8Priority >= (uint8)(1U << INT_CTRL_IP_GIC_PRIO_BITS)))
#endif
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_SET_IRQ_PRIO_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    1b94:	2302      	movs	r3, #2
    1b96:	2222      	movs	r2, #34	; 0x22
    1b98:	2100      	movs	r1, #0
    1b9a:	20ff      	movs	r0, #255	; 0xff
    1b9c:	f015 f83c 	bl	16c18 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1ba0:	2301      	movs	r3, #1
    1ba2:	f88d 300f 	strb.w	r3, [sp, #15]
    1ba6:	e005      	b.n	1bb4 <Platform_SetIrqPriority+0x46>
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    1ba8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1bac:	4619      	mov	r1, r3
    1bae:	9801      	ldr	r0, [sp, #4]
    1bb0:	f7ff ff6f 	bl	1a92 <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    1bb4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1bb8:	4618      	mov	r0, r3
    1bba:	b005      	add	sp, #20
    1bbc:	f85d fb04 	ldr.w	pc, [sp], #4

00001bc0 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    1bc0:	b500      	push	{lr}
    1bc2:	b085      	sub	sp, #20
    1bc4:	9001      	str	r0, [sp, #4]
    1bc6:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1bc8:	2300      	movs	r3, #0
    1bca:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    1bce:	9b01      	ldr	r3, [sp, #4]
    1bd0:	2b7a      	cmp	r3, #122	; 0x7a
    1bd2:	dc02      	bgt.n	1bda <Platform_GetIrqPriority+0x1a>
    1bd4:	9b01      	ldr	r3, [sp, #4]
    1bd6:	2b00      	cmp	r3, #0
    1bd8:	da09      	bge.n	1bee <Platform_GetIrqPriority+0x2e>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_GET_IRQ_PRIO_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    1bda:	2302      	movs	r3, #2
    1bdc:	2223      	movs	r2, #35	; 0x23
    1bde:	2100      	movs	r1, #0
    1be0:	20ff      	movs	r0, #255	; 0xff
    1be2:	f015 f819 	bl	16c18 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1be6:	2301      	movs	r3, #1
    1be8:	f88d 300f 	strb.w	r3, [sp, #15]
    1bec:	e013      	b.n	1c16 <Platform_GetIrqPriority+0x56>
    }
    else if (u8Priority == NULL_PTR)
    1bee:	9b00      	ldr	r3, [sp, #0]
    1bf0:	2b00      	cmp	r3, #0
    1bf2:	d109      	bne.n	1c08 <Platform_GetIrqPriority+0x48>
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_GET_IRQ_PRIO_ID, PLATFORM_E_PARAM_POINTER);
    1bf4:	2301      	movs	r3, #1
    1bf6:	2223      	movs	r2, #35	; 0x23
    1bf8:	2100      	movs	r1, #0
    1bfa:	20ff      	movs	r0, #255	; 0xff
    1bfc:	f015 f80c 	bl	16c18 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1c00:	2301      	movs	r3, #1
    1c02:	f88d 300f 	strb.w	r3, [sp, #15]
    1c06:	e006      	b.n	1c16 <Platform_GetIrqPriority+0x56>
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    1c08:	9801      	ldr	r0, [sp, #4]
    1c0a:	f7ff ff52 	bl	1ab2 <Platform_Ipw_GetIrqPriority>
    1c0e:	4603      	mov	r3, r0
    1c10:	461a      	mov	r2, r3
    1c12:	9b00      	ldr	r3, [sp, #0]
    1c14:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    1c16:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1c1a:	4618      	mov	r0, r3
    1c1c:	b005      	add	sp, #20
    1c1e:	f85d fb04 	ldr.w	pc, [sp], #4

00001c22 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    1c22:	b500      	push	{lr}
    1c24:	b087      	sub	sp, #28
    1c26:	9003      	str	r0, [sp, #12]
    1c28:	9102      	str	r1, [sp, #8]
    1c2a:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1c2c:	2300      	movs	r3, #0
    1c2e:	f88d 3017 	strb.w	r3, [sp, #23]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    1c32:	9b03      	ldr	r3, [sp, #12]
    1c34:	2b7a      	cmp	r3, #122	; 0x7a
    1c36:	dc02      	bgt.n	1c3e <Platform_InstallIrqHandler+0x1c>
    1c38:	9b03      	ldr	r3, [sp, #12]
    1c3a:	2b00      	cmp	r3, #0
    1c3c:	da09      	bge.n	1c52 <Platform_InstallIrqHandler+0x30>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_INSTALL_HANDLER_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    1c3e:	2302      	movs	r3, #2
    1c40:	2224      	movs	r2, #36	; 0x24
    1c42:	2100      	movs	r1, #0
    1c44:	20ff      	movs	r0, #255	; 0xff
    1c46:	f014 ffe7 	bl	16c18 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    1c4a:	2301      	movs	r3, #1
    1c4c:	f88d 3017 	strb.w	r3, [sp, #23]
    1c50:	e004      	b.n	1c5c <Platform_InstallIrqHandler+0x3a>
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1c52:	9a01      	ldr	r2, [sp, #4]
    1c54:	9902      	ldr	r1, [sp, #8]
    1c56:	9803      	ldr	r0, [sp, #12]
    1c58:	f7ff ff36 	bl	1ac8 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    1c5c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    1c60:	4618      	mov	r0, r3
    1c62:	b007      	add	sp, #28
    1c64:	f85d fb04 	ldr.w	pc, [sp], #4

00001c68 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1c68:	b500      	push	{lr}
    1c6a:	b085      	sub	sp, #20
    1c6c:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1c6e:	2300      	movs	r3, #0
    1c70:	9303      	str	r3, [sp, #12]
    1c72:	e05d      	b.n	1d30 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1c74:	9b01      	ldr	r3, [sp, #4]
    1c76:	6859      	ldr	r1, [r3, #4]
    1c78:	9a03      	ldr	r2, [sp, #12]
    1c7a:	4613      	mov	r3, r2
    1c7c:	005b      	lsls	r3, r3, #1
    1c7e:	4413      	add	r3, r2
    1c80:	009b      	lsls	r3, r3, #2
    1c82:	440b      	add	r3, r1
    1c84:	681b      	ldr	r3, [r3, #0]
    1c86:	4618      	mov	r0, r3
    1c88:	f7ff fee4 	bl	1a54 <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1c8c:	9b01      	ldr	r3, [sp, #4]
    1c8e:	6859      	ldr	r1, [r3, #4]
    1c90:	9a03      	ldr	r2, [sp, #12]
    1c92:	4613      	mov	r3, r2
    1c94:	005b      	lsls	r3, r3, #1
    1c96:	4413      	add	r3, r2
    1c98:	009b      	lsls	r3, r3, #2
    1c9a:	440b      	add	r3, r1
    1c9c:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1c9e:	9b01      	ldr	r3, [sp, #4]
    1ca0:	6859      	ldr	r1, [r3, #4]
    1ca2:	9a03      	ldr	r2, [sp, #12]
    1ca4:	4613      	mov	r3, r2
    1ca6:	005b      	lsls	r3, r3, #1
    1ca8:	4413      	add	r3, r2
    1caa:	009b      	lsls	r3, r3, #2
    1cac:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1cae:	795b      	ldrb	r3, [r3, #5]
    1cb0:	4619      	mov	r1, r3
    1cb2:	f7ff feb4 	bl	1a1e <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1cb6:	9b01      	ldr	r3, [sp, #4]
    1cb8:	6859      	ldr	r1, [r3, #4]
    1cba:	9a03      	ldr	r2, [sp, #12]
    1cbc:	4613      	mov	r3, r2
    1cbe:	005b      	lsls	r3, r3, #1
    1cc0:	4413      	add	r3, r2
    1cc2:	009b      	lsls	r3, r3, #2
    1cc4:	440b      	add	r3, r1
    1cc6:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1cc8:	9b01      	ldr	r3, [sp, #4]
    1cca:	6859      	ldr	r1, [r3, #4]
    1ccc:	9a03      	ldr	r2, [sp, #12]
    1cce:	4613      	mov	r3, r2
    1cd0:	005b      	lsls	r3, r3, #1
    1cd2:	4413      	add	r3, r2
    1cd4:	009b      	lsls	r3, r3, #2
    1cd6:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1cd8:	689b      	ldr	r3, [r3, #8]
    1cda:	2200      	movs	r2, #0
    1cdc:	4619      	mov	r1, r3
    1cde:	f7ff fe7c 	bl	19da <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1ce2:	9b01      	ldr	r3, [sp, #4]
    1ce4:	6859      	ldr	r1, [r3, #4]
    1ce6:	9a03      	ldr	r2, [sp, #12]
    1ce8:	4613      	mov	r3, r2
    1cea:	005b      	lsls	r3, r3, #1
    1cec:	4413      	add	r3, r2
    1cee:	009b      	lsls	r3, r3, #2
    1cf0:	440b      	add	r3, r1
    1cf2:	791b      	ldrb	r3, [r3, #4]
    1cf4:	2b00      	cmp	r3, #0
    1cf6:	d00c      	beq.n	1d12 <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1cf8:	9b01      	ldr	r3, [sp, #4]
    1cfa:	6859      	ldr	r1, [r3, #4]
    1cfc:	9a03      	ldr	r2, [sp, #12]
    1cfe:	4613      	mov	r3, r2
    1d00:	005b      	lsls	r3, r3, #1
    1d02:	4413      	add	r3, r2
    1d04:	009b      	lsls	r3, r3, #2
    1d06:	440b      	add	r3, r1
    1d08:	681b      	ldr	r3, [r3, #0]
    1d0a:	4618      	mov	r0, r3
    1d0c:	f7ff fe73 	bl	19f6 <IntCtrl_Ip_EnableIrq>
    1d10:	e00b      	b.n	1d2a <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1d12:	9b01      	ldr	r3, [sp, #4]
    1d14:	6859      	ldr	r1, [r3, #4]
    1d16:	9a03      	ldr	r2, [sp, #12]
    1d18:	4613      	mov	r3, r2
    1d1a:	005b      	lsls	r3, r3, #1
    1d1c:	4413      	add	r3, r2
    1d1e:	009b      	lsls	r3, r3, #2
    1d20:	440b      	add	r3, r1
    1d22:	681b      	ldr	r3, [r3, #0]
    1d24:	4618      	mov	r0, r3
    1d26:	f7ff fe70 	bl	1a0a <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1d2a:	9b03      	ldr	r3, [sp, #12]
    1d2c:	3301      	adds	r3, #1
    1d2e:	9303      	str	r3, [sp, #12]
    1d30:	9b01      	ldr	r3, [sp, #4]
    1d32:	681b      	ldr	r3, [r3, #0]
    1d34:	9a03      	ldr	r2, [sp, #12]
    1d36:	429a      	cmp	r2, r3
    1d38:	d39c      	bcc.n	1c74 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    1d3a:	2300      	movs	r3, #0
}
    1d3c:	4618      	mov	r0, r3
    1d3e:	b005      	add	sp, #20
    1d40:	f85d fb04 	ldr.w	pc, [sp], #4

00001d44 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    1d44:	b500      	push	{lr}
    1d46:	b085      	sub	sp, #20
    1d48:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    1d4a:	2300      	movs	r3, #0
    1d4c:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    1d50:	9b01      	ldr	r3, [sp, #4]
    1d52:	681b      	ldr	r3, [r3, #0]
    1d54:	2b00      	cmp	r3, #0
    1d56:	d007      	beq.n	1d68 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    1d58:	9b01      	ldr	r3, [sp, #4]
    1d5a:	681b      	ldr	r3, [r3, #0]
    1d5c:	4618      	mov	r0, r3
    1d5e:	f7ff ff83 	bl	1c68 <Platform_Ipw_InitIntCtrl>
    1d62:	4603      	mov	r3, r0
    1d64:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    1d68:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1d6c:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    1d6e:	bf00      	nop
    1d70:	b005      	add	sp, #20
    1d72:	f85d fb04 	ldr.w	pc, [sp], #4

00001d76 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    1d76:	2300      	movs	r3, #0
}
    1d78:	4618      	mov	r0, r3
    1d7a:	4770      	bx	lr

00001d7c <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1d7c:	b082      	sub	sp, #8
    1d7e:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1d80:	2301      	movs	r3, #1
}
    1d82:	4618      	mov	r0, r3
    1d84:	b002      	add	sp, #8
    1d86:	4770      	bx	lr

00001d88 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1d88:	b082      	sub	sp, #8
    1d8a:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1d8c:	bf00      	nop
    1d8e:	b002      	add	sp, #8
    1d90:	4770      	bx	lr

00001d92 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1d92:	b082      	sub	sp, #8
    1d94:	9001      	str	r0, [sp, #4]
    return Micros;
    1d96:	9b01      	ldr	r3, [sp, #4]
}
    1d98:	4618      	mov	r0, r3
    1d9a:	b002      	add	sp, #8
    1d9c:	4770      	bx	lr

00001d9e <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1d9e:	b500      	push	{lr}
    1da0:	b083      	sub	sp, #12
    1da2:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1da4:	f000 f86c 	bl	1e80 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1da8:	bf00      	nop
    1daa:	b003      	add	sp, #12
    1dac:	f85d fb04 	ldr.w	pc, [sp], #4

00001db0 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1db0:	b500      	push	{lr}
    1db2:	b085      	sub	sp, #20
    1db4:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1db6:	2300      	movs	r3, #0
    1db8:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1dba:	9b01      	ldr	r3, [sp, #4]
    1dbc:	2b00      	cmp	r3, #0
    1dbe:	d003      	beq.n	1dc8 <OsIf_GetCounter+0x18>
    1dc0:	9b01      	ldr	r3, [sp, #4]
    1dc2:	2b01      	cmp	r3, #1
    1dc4:	d004      	beq.n	1dd0 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1dc6:	e007      	b.n	1dd8 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1dc8:	f7ff ffd5 	bl	1d76 <OsIf_Timer_Dummy_GetCounter>
    1dcc:	9003      	str	r0, [sp, #12]
            break;
    1dce:	e003      	b.n	1dd8 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1dd0:	f000 f872 	bl	1eb8 <OsIf_Timer_System_GetCounter>
    1dd4:	9003      	str	r0, [sp, #12]
            break;
    1dd6:	bf00      	nop
    }

    return Value;
    1dd8:	9b03      	ldr	r3, [sp, #12]
}
    1dda:	4618      	mov	r0, r3
    1ddc:	b005      	add	sp, #20
    1dde:	f85d fb04 	ldr.w	pc, [sp], #4

00001de2 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1de2:	b500      	push	{lr}
    1de4:	b085      	sub	sp, #20
    1de6:	9001      	str	r0, [sp, #4]
    1de8:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1dea:	2300      	movs	r3, #0
    1dec:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1dee:	9b00      	ldr	r3, [sp, #0]
    1df0:	2b00      	cmp	r3, #0
    1df2:	d003      	beq.n	1dfc <OsIf_GetElapsed+0x1a>
    1df4:	9b00      	ldr	r3, [sp, #0]
    1df6:	2b01      	cmp	r3, #1
    1df8:	d005      	beq.n	1e06 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1dfa:	e009      	b.n	1e10 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1dfc:	9801      	ldr	r0, [sp, #4]
    1dfe:	f7ff ffbd 	bl	1d7c <OsIf_Timer_Dummy_GetElapsed>
    1e02:	9003      	str	r0, [sp, #12]
            break;
    1e04:	e004      	b.n	1e10 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1e06:	9801      	ldr	r0, [sp, #4]
    1e08:	f000 f864 	bl	1ed4 <OsIf_Timer_System_GetElapsed>
    1e0c:	9003      	str	r0, [sp, #12]
            break;
    1e0e:	bf00      	nop
    }

    return Value;
    1e10:	9b03      	ldr	r3, [sp, #12]
}
    1e12:	4618      	mov	r0, r3
    1e14:	b005      	add	sp, #20
    1e16:	f85d fb04 	ldr.w	pc, [sp], #4

00001e1a <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1e1a:	b500      	push	{lr}
    1e1c:	b083      	sub	sp, #12
    1e1e:	9001      	str	r0, [sp, #4]
    1e20:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1e22:	9b00      	ldr	r3, [sp, #0]
    1e24:	2b00      	cmp	r3, #0
    1e26:	d003      	beq.n	1e30 <OsIf_SetTimerFrequency+0x16>
    1e28:	9b00      	ldr	r3, [sp, #0]
    1e2a:	2b01      	cmp	r3, #1
    1e2c:	d004      	beq.n	1e38 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1e2e:	e007      	b.n	1e40 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1e30:	9801      	ldr	r0, [sp, #4]
    1e32:	f7ff ffa9 	bl	1d88 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1e36:	e003      	b.n	1e40 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1e38:	9801      	ldr	r0, [sp, #4]
    1e3a:	f000 f85b 	bl	1ef4 <OsIf_Timer_System_SetTimerFrequency>
            break;
    1e3e:	bf00      	nop
    }
}
    1e40:	bf00      	nop
    1e42:	b003      	add	sp, #12
    1e44:	f85d fb04 	ldr.w	pc, [sp], #4

00001e48 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1e48:	b500      	push	{lr}
    1e4a:	b085      	sub	sp, #20
    1e4c:	9001      	str	r0, [sp, #4]
    1e4e:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1e50:	2300      	movs	r3, #0
    1e52:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1e54:	9b00      	ldr	r3, [sp, #0]
    1e56:	2b00      	cmp	r3, #0
    1e58:	d003      	beq.n	1e62 <OsIf_MicrosToTicks+0x1a>
    1e5a:	9b00      	ldr	r3, [sp, #0]
    1e5c:	2b01      	cmp	r3, #1
    1e5e:	d005      	beq.n	1e6c <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1e60:	e009      	b.n	1e76 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1e62:	9801      	ldr	r0, [sp, #4]
    1e64:	f7ff ff95 	bl	1d92 <OsIf_Timer_Dummy_MicrosToTicks>
    1e68:	9003      	str	r0, [sp, #12]
            break;
    1e6a:	e004      	b.n	1e76 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1e6c:	9801      	ldr	r0, [sp, #4]
    1e6e:	f000 f84f 	bl	1f10 <OsIf_Timer_System_MicrosToTicks>
    1e72:	9003      	str	r0, [sp, #12]
            break;
    1e74:	bf00      	nop
    }

    return Value;
    1e76:	9b03      	ldr	r3, [sp, #12]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	b005      	add	sp, #20
    1e7c:	f85d fb04 	ldr.w	pc, [sp], #4

00001e80 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1e80:	b500      	push	{lr}
    1e82:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1e84:	2300      	movs	r3, #0
    1e86:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1e88:	4a09      	ldr	r2, [pc, #36]	; (1eb0 <OsIf_Timer_System_Init+0x30>)
    1e8a:	9b01      	ldr	r3, [sp, #4]
    1e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1e90:	685a      	ldr	r2, [r3, #4]
    1e92:	4908      	ldr	r1, [pc, #32]	; (1eb4 <OsIf_Timer_System_Init+0x34>)
    1e94:	9b01      	ldr	r3, [sp, #4]
    1e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1e9a:	4a06      	ldr	r2, [pc, #24]	; (1eb4 <OsIf_Timer_System_Init+0x34>)
    1e9c:	9b01      	ldr	r3, [sp, #4]
    1e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1ea2:	4618      	mov	r0, r3
    1ea4:	f000 f868 	bl	1f78 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1ea8:	bf00      	nop
    1eaa:	b003      	add	sp, #12
    1eac:	f85d fb04 	ldr.w	pc, [sp], #4
    1eb0:	0001912c 	.word	0x0001912c
    1eb4:	1fff8b34 	.word	0x1fff8b34

00001eb8 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1eb8:	b500      	push	{lr}
    1eba:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1ebc:	2300      	movs	r3, #0
    1ebe:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1ec0:	2300      	movs	r3, #0
    1ec2:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1ec4:	f000 f86c 	bl	1fa0 <OsIf_Timer_System_Internal_GetCounter>
    1ec8:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1eca:	9b01      	ldr	r3, [sp, #4]
}
    1ecc:	4618      	mov	r0, r3
    1ece:	b003      	add	sp, #12
    1ed0:	f85d fb04 	ldr.w	pc, [sp], #4

00001ed4 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1ed4:	b500      	push	{lr}
    1ed6:	b085      	sub	sp, #20
    1ed8:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1eda:	2300      	movs	r3, #0
    1edc:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1ede:	2300      	movs	r3, #0
    1ee0:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1ee2:	9801      	ldr	r0, [sp, #4]
    1ee4:	f000 f864 	bl	1fb0 <OsIf_Timer_System_Internal_GetElapsed>
    1ee8:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1eea:	9b03      	ldr	r3, [sp, #12]
}
    1eec:	4618      	mov	r0, r3
    1eee:	b005      	add	sp, #20
    1ef0:	f85d fb04 	ldr.w	pc, [sp], #4

00001ef4 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1ef4:	b084      	sub	sp, #16
    1ef6:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1ef8:	2300      	movs	r3, #0
    1efa:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1efc:	4903      	ldr	r1, [pc, #12]	; (1f0c <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1efe:	9b03      	ldr	r3, [sp, #12]
    1f00:	9a01      	ldr	r2, [sp, #4]
    1f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    1f06:	bf00      	nop
    1f08:	b004      	add	sp, #16
    1f0a:	4770      	bx	lr
    1f0c:	1fff8b34 	.word	0x1fff8b34

00001f10 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1f10:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f12:	b087      	sub	sp, #28
    1f14:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    1f16:	2100      	movs	r1, #0
    1f18:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    1f1a:	2100      	movs	r1, #0
    1f1c:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1f1e:	9901      	ldr	r1, [sp, #4]
    1f20:	2000      	movs	r0, #0
    1f22:	460e      	mov	r6, r1
    1f24:	4607      	mov	r7, r0
    1f26:	4812      	ldr	r0, [pc, #72]	; (1f70 <OsIf_Timer_System_MicrosToTicks+0x60>)
    1f28:	9904      	ldr	r1, [sp, #16]
    1f2a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1f2e:	2000      	movs	r0, #0
    1f30:	460c      	mov	r4, r1
    1f32:	4605      	mov	r5, r0
    1f34:	fb04 f007 	mul.w	r0, r4, r7
    1f38:	fb06 f105 	mul.w	r1, r6, r5
    1f3c:	4401      	add	r1, r0
    1f3e:	fba6 2304 	umull	r2, r3, r6, r4
    1f42:	4419      	add	r1, r3
    1f44:	460b      	mov	r3, r1
    1f46:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1f4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    1f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1f52:	4a08      	ldr	r2, [pc, #32]	; (1f74 <OsIf_Timer_System_MicrosToTicks+0x64>)
    1f54:	f04f 0300 	mov.w	r3, #0
    1f58:	f7fe fb24 	bl	5a4 <__aeabi_uldivmod>
    1f5c:	4602      	mov	r2, r0
    1f5e:	460b      	mov	r3, r1
    1f60:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    1f64:	9b02      	ldr	r3, [sp, #8]
    1f66:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1f68:	9b05      	ldr	r3, [sp, #20]
}
    1f6a:	4618      	mov	r0, r3
    1f6c:	b007      	add	sp, #28
    1f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f70:	1fff8b34 	.word	0x1fff8b34
    1f74:	000f4240 	.word	0x000f4240

00001f78 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1f78:	b082      	sub	sp, #8
    1f7a:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1f7c:	4b07      	ldr	r3, [pc, #28]	; (1f9c <OsIf_Timer_System_Internal_Init+0x24>)
    1f7e:	2200      	movs	r2, #0
    1f80:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    1f82:	4b06      	ldr	r3, [pc, #24]	; (1f9c <OsIf_Timer_System_Internal_Init+0x24>)
    1f84:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1f88:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    1f8a:	4b04      	ldr	r3, [pc, #16]	; (1f9c <OsIf_Timer_System_Internal_Init+0x24>)
    1f8c:	2200      	movs	r2, #0
    1f8e:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1f90:	4b02      	ldr	r3, [pc, #8]	; (1f9c <OsIf_Timer_System_Internal_Init+0x24>)
    1f92:	2205      	movs	r2, #5
    1f94:	601a      	str	r2, [r3, #0]
}
    1f96:	bf00      	nop
    1f98:	b002      	add	sp, #8
    1f9a:	4770      	bx	lr
    1f9c:	e000e010 	.word	0xe000e010

00001fa0 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1fa0:	4b02      	ldr	r3, [pc, #8]	; (1fac <OsIf_Timer_System_Internal_GetCounter+0xc>)
    1fa2:	689b      	ldr	r3, [r3, #8]
    1fa4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    1fa8:	4618      	mov	r0, r3
    1faa:	4770      	bx	lr
    1fac:	e000e010 	.word	0xe000e010

00001fb0 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1fb0:	b084      	sub	sp, #16
    1fb2:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    1fb4:	4b10      	ldr	r3, [pc, #64]	; (1ff8 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    1fb6:	689b      	ldr	r3, [r3, #8]
    1fb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1fbc:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    1fbe:	2300      	movs	r3, #0
    1fc0:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    1fc2:	9b01      	ldr	r3, [sp, #4]
    1fc4:	681b      	ldr	r3, [r3, #0]
    1fc6:	9a02      	ldr	r2, [sp, #8]
    1fc8:	429a      	cmp	r2, r3
    1fca:	d909      	bls.n	1fe0 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1fcc:	9b01      	ldr	r3, [sp, #4]
    1fce:	681a      	ldr	r2, [r3, #0]
    1fd0:	9b02      	ldr	r3, [sp, #8]
    1fd2:	1ad3      	subs	r3, r2, r3
    1fd4:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1fd8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1fdc:	9303      	str	r3, [sp, #12]
    1fde:	e004      	b.n	1fea <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1fe0:	9b01      	ldr	r3, [sp, #4]
    1fe2:	681a      	ldr	r2, [r3, #0]
    1fe4:	9b02      	ldr	r3, [sp, #8]
    1fe6:	1ad3      	subs	r3, r2, r3
    1fe8:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    1fea:	9b01      	ldr	r3, [sp, #4]
    1fec:	9a02      	ldr	r2, [sp, #8]
    1fee:	601a      	str	r2, [r3, #0]

    return dif;
    1ff0:	9b03      	ldr	r3, [sp, #12]
}
    1ff2:	4618      	mov	r0, r3
    1ff4:	b004      	add	sp, #16
    1ff6:	4770      	bx	lr
    1ff8:	e000e010 	.word	0xe000e010

00001ffc <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    1ffc:	b082      	sub	sp, #8
    1ffe:	9001      	str	r0, [sp, #4]
    2000:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    2002:	bf00      	nop
    2004:	b002      	add	sp, #8
    2006:	4770      	bx	lr

00002008 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    2008:	b500      	push	{lr}
    200a:	b085      	sub	sp, #20
    200c:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    200e:	4b24      	ldr	r3, [pc, #144]	; (20a0 <Clock_Ip_UpdateDriverContext+0x98>)
    2010:	2201      	movs	r2, #1
    2012:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2014:	4b23      	ldr	r3, [pc, #140]	; (20a4 <Clock_Ip_UpdateDriverContext+0x9c>)
    2016:	681b      	ldr	r3, [r3, #0]
    2018:	2102      	movs	r1, #2
    201a:	4618      	mov	r0, r3
    201c:	f003 fc32 	bl	5884 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    2020:	2300      	movs	r3, #0
    2022:	f88d 300f 	strb.w	r3, [sp, #15]
    2026:	e015      	b.n	2054 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    2028:	f89d 300f 	ldrb.w	r3, [sp, #15]
    202c:	9a01      	ldr	r2, [sp, #4]
    202e:	334a      	adds	r3, #74	; 0x4a
    2030:	00db      	lsls	r3, r3, #3
    2032:	4413      	add	r3, r2
    2034:	6858      	ldr	r0, [r3, #4]
    2036:	f89d 300f 	ldrb.w	r3, [sp, #15]
    203a:	9a01      	ldr	r2, [sp, #4]
    203c:	334a      	adds	r3, #74	; 0x4a
    203e:	00db      	lsls	r3, r3, #3
    2040:	4413      	add	r3, r2
    2042:	689b      	ldr	r3, [r3, #8]
    2044:	4619      	mov	r1, r3
    2046:	f001 fadc 	bl	3602 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    204a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    204e:	3301      	adds	r3, #1
    2050:	f88d 300f 	strb.w	r3, [sp, #15]
    2054:	9b01      	ldr	r3, [sp, #4]
    2056:	7bdb      	ldrb	r3, [r3, #15]
    2058:	f89d 200f 	ldrb.w	r2, [sp, #15]
    205c:	429a      	cmp	r2, r3
    205e:	d3e3      	bcc.n	2028 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    2060:	f000 f824 	bl	20ac <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2064:	2301      	movs	r3, #1
    2066:	f88d 300f 	strb.w	r3, [sp, #15]
    206a:	e00e      	b.n	208a <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    206c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2070:	9b01      	ldr	r3, [sp, #4]
    2072:	327e      	adds	r2, #126	; 0x7e
    2074:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    2078:	490b      	ldr	r1, [pc, #44]	; (20a8 <Clock_Ip_UpdateDriverContext+0xa0>)
    207a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    207e:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2080:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2084:	3301      	adds	r3, #1
    2086:	f88d 300f 	strb.w	r3, [sp, #15]
    208a:	9b01      	ldr	r3, [sp, #4]
    208c:	7cdb      	ldrb	r3, [r3, #19]
    208e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2092:	429a      	cmp	r2, r3
    2094:	d3ea      	bcc.n	206c <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    2096:	bf00      	nop
    2098:	bf00      	nop
    209a:	b005      	add	sp, #20
    209c:	f85d fb04 	ldr.w	pc, [sp], #4
    20a0:	1fff8b10 	.word	0x1fff8b10
    20a4:	1fff8b38 	.word	0x1fff8b38
    20a8:	1fff8b44 	.word	0x1fff8b44

000020ac <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    20ac:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    20ae:	4b23      	ldr	r3, [pc, #140]	; (213c <Clock_Ip_CallEmptyCallbacks+0x90>)
    20b0:	781b      	ldrb	r3, [r3, #0]
    20b2:	f083 0301 	eor.w	r3, r3, #1
    20b6:	b2db      	uxtb	r3, r3
    20b8:	2b00      	cmp	r3, #0
    20ba:	d03d      	beq.n	2138 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    20bc:	4b1f      	ldr	r3, [pc, #124]	; (213c <Clock_Ip_CallEmptyCallbacks+0x90>)
    20be:	2201      	movs	r2, #1
    20c0:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    20c2:	4b1f      	ldr	r3, [pc, #124]	; (2140 <Clock_Ip_CallEmptyCallbacks+0x94>)
    20c4:	685b      	ldr	r3, [r3, #4]
    20c6:	2100      	movs	r1, #0
    20c8:	2000      	movs	r0, #0
    20ca:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    20cc:	4b1c      	ldr	r3, [pc, #112]	; (2140 <Clock_Ip_CallEmptyCallbacks+0x94>)
    20ce:	689b      	ldr	r3, [r3, #8]
    20d0:	2057      	movs	r0, #87	; 0x57
    20d2:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    20d4:	4b1b      	ldr	r3, [pc, #108]	; (2144 <Clock_Ip_CallEmptyCallbacks+0x98>)
    20d6:	681b      	ldr	r3, [r3, #0]
    20d8:	2000      	movs	r0, #0
    20da:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    20dc:	4b1a      	ldr	r3, [pc, #104]	; (2148 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    20de:	681b      	ldr	r3, [r3, #0]
    20e0:	2000      	movs	r0, #0
    20e2:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    20e4:	4b19      	ldr	r3, [pc, #100]	; (214c <Clock_Ip_CallEmptyCallbacks+0xa0>)
    20e6:	681b      	ldr	r3, [r3, #0]
    20e8:	2000      	movs	r0, #0
    20ea:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    20ec:	4b18      	ldr	r3, [pc, #96]	; (2150 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    20ee:	685b      	ldr	r3, [r3, #4]
    20f0:	2000      	movs	r0, #0
    20f2:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    20f4:	4b16      	ldr	r3, [pc, #88]	; (2150 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    20f6:	689b      	ldr	r3, [r3, #8]
    20f8:	2057      	movs	r0, #87	; 0x57
    20fa:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    20fc:	4b15      	ldr	r3, [pc, #84]	; (2154 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    20fe:	681b      	ldr	r3, [r3, #0]
    2100:	2000      	movs	r0, #0
    2102:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    2104:	4b13      	ldr	r3, [pc, #76]	; (2154 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    2106:	685b      	ldr	r3, [r3, #4]
    2108:	2100      	movs	r1, #0
    210a:	2057      	movs	r0, #87	; 0x57
    210c:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    210e:	4b12      	ldr	r3, [pc, #72]	; (2158 <Clock_Ip_CallEmptyCallbacks+0xac>)
    2110:	681b      	ldr	r3, [r3, #0]
    2112:	2000      	movs	r0, #0
    2114:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2116:	4b11      	ldr	r3, [pc, #68]	; (215c <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2118:	685b      	ldr	r3, [r3, #4]
    211a:	2000      	movs	r0, #0
    211c:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    211e:	4b0f      	ldr	r3, [pc, #60]	; (215c <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2120:	689b      	ldr	r3, [r3, #8]
    2122:	2057      	movs	r0, #87	; 0x57
    2124:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2126:	4b0e      	ldr	r3, [pc, #56]	; (2160 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    2128:	685b      	ldr	r3, [r3, #4]
    212a:	2000      	movs	r0, #0
    212c:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    212e:	4b0d      	ldr	r3, [pc, #52]	; (2164 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    2130:	681b      	ldr	r3, [r3, #0]
    2132:	2100      	movs	r1, #0
    2134:	2000      	movs	r0, #0
    2136:	4798      	blx	r3
    }
}
    2138:	bf00      	nop
    213a:	bd08      	pop	{r3, pc}
    213c:	1fff8b3c 	.word	0x1fff8b3c
    2140:	000183b4 	.word	0x000183b4
    2144:	000182c8 	.word	0x000182c8
    2148:	00018304 	.word	0x00018304
    214c:	0001830c 	.word	0x0001830c
    2150:	00018334 	.word	0x00018334
    2154:	00018340 	.word	0x00018340
    2158:	00018378 	.word	0x00018378
    215c:	000183c4 	.word	0x000183c4
    2160:	000183f0 	.word	0x000183f0
    2164:	000183ec 	.word	0x000183ec

00002168 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    2168:	b500      	push	{lr}
    216a:	b085      	sub	sp, #20
    216c:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    216e:	9b01      	ldr	r3, [sp, #4]
    2170:	7adb      	ldrb	r3, [r3, #11]
    2172:	9303      	str	r3, [sp, #12]
    2174:	e01f      	b.n	21b6 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2176:	9b03      	ldr	r3, [sp, #12]
    2178:	1e5a      	subs	r2, r3, #1
    217a:	9b01      	ldr	r3, [sp, #4]
    217c:	320d      	adds	r2, #13
    217e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2182:	495a      	ldr	r1, [pc, #360]	; (22ec <Clock_Ip_ResetClockConfiguration+0x184>)
    2184:	4613      	mov	r3, r2
    2186:	00db      	lsls	r3, r3, #3
    2188:	4413      	add	r3, r2
    218a:	440b      	add	r3, r1
    218c:	3301      	adds	r3, #1
    218e:	781b      	ldrb	r3, [r3, #0]
    2190:	461a      	mov	r2, r3
    2192:	4b57      	ldr	r3, [pc, #348]	; (22f0 <Clock_Ip_ResetClockConfiguration+0x188>)
    2194:	5c9b      	ldrb	r3, [r3, r2]
    2196:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    2198:	4a56      	ldr	r2, [pc, #344]	; (22f4 <Clock_Ip_ResetClockConfiguration+0x18c>)
    219a:	9b02      	ldr	r3, [sp, #8]
    219c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    21a0:	9a03      	ldr	r2, [sp, #12]
    21a2:	3a01      	subs	r2, #1
    21a4:	320d      	adds	r2, #13
    21a6:	00d2      	lsls	r2, r2, #3
    21a8:	9901      	ldr	r1, [sp, #4]
    21aa:	440a      	add	r2, r1
    21ac:	4610      	mov	r0, r2
    21ae:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    21b0:	9b03      	ldr	r3, [sp, #12]
    21b2:	3b01      	subs	r3, #1
    21b4:	9303      	str	r3, [sp, #12]
    21b6:	9b03      	ldr	r3, [sp, #12]
    21b8:	2b00      	cmp	r3, #0
    21ba:	d1dc      	bne.n	2176 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    21bc:	9b01      	ldr	r3, [sp, #4]
    21be:	7b9b      	ldrb	r3, [r3, #14]
    21c0:	9303      	str	r3, [sp, #12]
    21c2:	e026      	b.n	2212 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    21c4:	9b03      	ldr	r3, [sp, #12]
    21c6:	3b01      	subs	r3, #1
    21c8:	9a01      	ldr	r2, [sp, #4]
    21ca:	3324      	adds	r3, #36	; 0x24
    21cc:	011b      	lsls	r3, r3, #4
    21ce:	4413      	add	r3, r2
    21d0:	3304      	adds	r3, #4
    21d2:	681a      	ldr	r2, [r3, #0]
    21d4:	4945      	ldr	r1, [pc, #276]	; (22ec <Clock_Ip_ResetClockConfiguration+0x184>)
    21d6:	4613      	mov	r3, r2
    21d8:	00db      	lsls	r3, r3, #3
    21da:	4413      	add	r3, r2
    21dc:	440b      	add	r3, r1
    21de:	3301      	adds	r3, #1
    21e0:	781b      	ldrb	r3, [r3, #0]
    21e2:	461a      	mov	r2, r3
    21e4:	4b44      	ldr	r3, [pc, #272]	; (22f8 <Clock_Ip_ResetClockConfiguration+0x190>)
    21e6:	5c9b      	ldrb	r3, [r3, r2]
    21e8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    21ea:	4944      	ldr	r1, [pc, #272]	; (22fc <Clock_Ip_ResetClockConfiguration+0x194>)
    21ec:	9a02      	ldr	r2, [sp, #8]
    21ee:	4613      	mov	r3, r2
    21f0:	005b      	lsls	r3, r3, #1
    21f2:	4413      	add	r3, r2
    21f4:	009b      	lsls	r3, r3, #2
    21f6:	440b      	add	r3, r1
    21f8:	681b      	ldr	r3, [r3, #0]
    21fa:	9a03      	ldr	r2, [sp, #12]
    21fc:	3a01      	subs	r2, #1
    21fe:	3224      	adds	r2, #36	; 0x24
    2200:	0112      	lsls	r2, r2, #4
    2202:	9901      	ldr	r1, [sp, #4]
    2204:	440a      	add	r2, r1
    2206:	3204      	adds	r2, #4
    2208:	4610      	mov	r0, r2
    220a:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    220c:	9b03      	ldr	r3, [sp, #12]
    220e:	3b01      	subs	r3, #1
    2210:	9303      	str	r3, [sp, #12]
    2212:	9b03      	ldr	r3, [sp, #12]
    2214:	2b00      	cmp	r3, #0
    2216:	d1d5      	bne.n	21c4 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2218:	9b01      	ldr	r3, [sp, #4]
    221a:	7a9b      	ldrb	r3, [r3, #10]
    221c:	9303      	str	r3, [sp, #12]
    221e:	e02a      	b.n	2276 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2220:	9b03      	ldr	r3, [sp, #12]
    2222:	1e5a      	subs	r2, r3, #1
    2224:	9901      	ldr	r1, [sp, #4]
    2226:	4613      	mov	r3, r2
    2228:	009b      	lsls	r3, r3, #2
    222a:	4413      	add	r3, r2
    222c:	00db      	lsls	r3, r3, #3
    222e:	440b      	add	r3, r1
    2230:	3340      	adds	r3, #64	; 0x40
    2232:	681a      	ldr	r2, [r3, #0]
    2234:	492d      	ldr	r1, [pc, #180]	; (22ec <Clock_Ip_ResetClockConfiguration+0x184>)
    2236:	4613      	mov	r3, r2
    2238:	00db      	lsls	r3, r3, #3
    223a:	4413      	add	r3, r2
    223c:	440b      	add	r3, r1
    223e:	3301      	adds	r3, #1
    2240:	781b      	ldrb	r3, [r3, #0]
    2242:	461a      	mov	r2, r3
    2244:	4b2e      	ldr	r3, [pc, #184]	; (2300 <Clock_Ip_ResetClockConfiguration+0x198>)
    2246:	5c9b      	ldrb	r3, [r3, r2]
    2248:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    224a:	492e      	ldr	r1, [pc, #184]	; (2304 <Clock_Ip_ResetClockConfiguration+0x19c>)
    224c:	9a02      	ldr	r2, [sp, #8]
    224e:	4613      	mov	r3, r2
    2250:	009b      	lsls	r3, r3, #2
    2252:	4413      	add	r3, r2
    2254:	009b      	lsls	r3, r3, #2
    2256:	440b      	add	r3, r1
    2258:	6819      	ldr	r1, [r3, #0]
    225a:	9b03      	ldr	r3, [sp, #12]
    225c:	1e5a      	subs	r2, r3, #1
    225e:	4613      	mov	r3, r2
    2260:	009b      	lsls	r3, r3, #2
    2262:	4413      	add	r3, r2
    2264:	00db      	lsls	r3, r3, #3
    2266:	3340      	adds	r3, #64	; 0x40
    2268:	9a01      	ldr	r2, [sp, #4]
    226a:	4413      	add	r3, r2
    226c:	4618      	mov	r0, r3
    226e:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2270:	9b03      	ldr	r3, [sp, #12]
    2272:	3b01      	subs	r3, #1
    2274:	9303      	str	r3, [sp, #12]
    2276:	9b03      	ldr	r3, [sp, #12]
    2278:	2b00      	cmp	r3, #0
    227a:	d1d1      	bne.n	2220 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    227c:	9b01      	ldr	r3, [sp, #4]
    227e:	7a5b      	ldrb	r3, [r3, #9]
    2280:	9303      	str	r3, [sp, #12]
    2282:	e02b      	b.n	22dc <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2284:	9b03      	ldr	r3, [sp, #12]
    2286:	1e5a      	subs	r2, r3, #1
    2288:	9901      	ldr	r1, [sp, #4]
    228a:	4613      	mov	r3, r2
    228c:	009b      	lsls	r3, r3, #2
    228e:	4413      	add	r3, r2
    2290:	009b      	lsls	r3, r3, #2
    2292:	440b      	add	r3, r1
    2294:	332c      	adds	r3, #44	; 0x2c
    2296:	681a      	ldr	r2, [r3, #0]
    2298:	4914      	ldr	r1, [pc, #80]	; (22ec <Clock_Ip_ResetClockConfiguration+0x184>)
    229a:	4613      	mov	r3, r2
    229c:	00db      	lsls	r3, r3, #3
    229e:	4413      	add	r3, r2
    22a0:	440b      	add	r3, r1
    22a2:	3301      	adds	r3, #1
    22a4:	781b      	ldrb	r3, [r3, #0]
    22a6:	461a      	mov	r2, r3
    22a8:	4b17      	ldr	r3, [pc, #92]	; (2308 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    22aa:	5c9b      	ldrb	r3, [r3, r2]
    22ac:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    22ae:	4917      	ldr	r1, [pc, #92]	; (230c <Clock_Ip_ResetClockConfiguration+0x1a4>)
    22b0:	9a02      	ldr	r2, [sp, #8]
    22b2:	4613      	mov	r3, r2
    22b4:	009b      	lsls	r3, r3, #2
    22b6:	4413      	add	r3, r2
    22b8:	009b      	lsls	r3, r3, #2
    22ba:	440b      	add	r3, r1
    22bc:	6819      	ldr	r1, [r3, #0]
    22be:	9b03      	ldr	r3, [sp, #12]
    22c0:	1e5a      	subs	r2, r3, #1
    22c2:	4613      	mov	r3, r2
    22c4:	009b      	lsls	r3, r3, #2
    22c6:	4413      	add	r3, r2
    22c8:	009b      	lsls	r3, r3, #2
    22ca:	3328      	adds	r3, #40	; 0x28
    22cc:	9a01      	ldr	r2, [sp, #4]
    22ce:	4413      	add	r3, r2
    22d0:	3304      	adds	r3, #4
    22d2:	4618      	mov	r0, r3
    22d4:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    22d6:	9b03      	ldr	r3, [sp, #12]
    22d8:	3b01      	subs	r3, #1
    22da:	9303      	str	r3, [sp, #12]
    22dc:	9b03      	ldr	r3, [sp, #12]
    22de:	2b00      	cmp	r3, #0
    22e0:	d1d0      	bne.n	2284 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    22e2:	bf00      	nop
    22e4:	bf00      	nop
    22e6:	b005      	add	sp, #20
    22e8:	f85d fb04 	ldr.w	pc, [sp], #4
    22ec:	00017db8 	.word	0x00017db8
    22f0:	00017d88 	.word	0x00017d88
    22f4:	000183f0 	.word	0x000183f0
    22f8:	00017d68 	.word	0x00017d68
    22fc:	00018334 	.word	0x00018334
    2300:	00017d78 	.word	0x00017d78
    2304:	000183c4 	.word	0x000183c4
    2308:	00017d38 	.word	0x00017d38
    230c:	0001830c 	.word	0x0001830c

00002310 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    2310:	b500      	push	{lr}
    2312:	b085      	sub	sp, #20
    2314:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    2316:	2301      	movs	r3, #1
    2318:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    231a:	9801      	ldr	r0, [sp, #4]
    231c:	f000 f818 	bl	2350 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    2320:	4b0a      	ldr	r3, [pc, #40]	; (234c <Clock_Ip_Init+0x3c>)
    2322:	781b      	ldrb	r3, [r3, #0]
    2324:	2b00      	cmp	r3, #0
    2326:	d00a      	beq.n	233e <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    2328:	f000 fb74 	bl	2a14 <Clock_Ip_GetPllStatus>
    232c:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    232e:	9b02      	ldr	r3, [sp, #8]
    2330:	2b00      	cmp	r3, #0
    2332:	d106      	bne.n	2342 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    2334:	f000 fbf2 	bl	2b1c <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    2338:	2300      	movs	r3, #0
    233a:	9303      	str	r3, [sp, #12]
    233c:	e001      	b.n	2342 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    233e:	2300      	movs	r3, #0
    2340:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    2342:	9b03      	ldr	r3, [sp, #12]
}
    2344:	4618      	mov	r0, r3
    2346:	b005      	add	sp, #20
    2348:	f85d fb04 	ldr.w	pc, [sp], #4
    234c:	1fff8b40 	.word	0x1fff8b40

00002350 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    2350:	b510      	push	{r4, lr}
    2352:	b084      	sub	sp, #16
    2354:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    2356:	4a9f      	ldr	r2, [pc, #636]	; (25d4 <Clock_Ip_InitClock+0x284>)
    2358:	9b01      	ldr	r3, [sp, #4]
    235a:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    235c:	2101      	movs	r1, #1
    235e:	9801      	ldr	r0, [sp, #4]
    2360:	f003 fa90 	bl	5884 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2364:	4b9b      	ldr	r3, [pc, #620]	; (25d4 <Clock_Ip_InitClock+0x284>)
    2366:	681b      	ldr	r3, [r3, #0]
    2368:	2b00      	cmp	r3, #0
    236a:	d030      	beq.n	23ce <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    236c:	2300      	movs	r3, #0
    236e:	9303      	str	r3, [sp, #12]
    2370:	e027      	b.n	23c2 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2372:	9901      	ldr	r1, [sp, #4]
    2374:	9a03      	ldr	r2, [sp, #12]
    2376:	4613      	mov	r3, r2
    2378:	009b      	lsls	r3, r3, #2
    237a:	4413      	add	r3, r2
    237c:	009b      	lsls	r3, r3, #2
    237e:	440b      	add	r3, r1
    2380:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2384:	681a      	ldr	r2, [r3, #0]
    2386:	4994      	ldr	r1, [pc, #592]	; (25d8 <Clock_Ip_InitClock+0x288>)
    2388:	4613      	mov	r3, r2
    238a:	00db      	lsls	r3, r3, #3
    238c:	4413      	add	r3, r2
    238e:	440b      	add	r3, r1
    2390:	3301      	adds	r3, #1
    2392:	781b      	ldrb	r3, [r3, #0]
    2394:	461a      	mov	r2, r3
    2396:	4b91      	ldr	r3, [pc, #580]	; (25dc <Clock_Ip_InitClock+0x28c>)
    2398:	5c9b      	ldrb	r3, [r3, r2]
    239a:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    239c:	4a90      	ldr	r2, [pc, #576]	; (25e0 <Clock_Ip_InitClock+0x290>)
    239e:	9b02      	ldr	r3, [sp, #8]
    23a0:	011b      	lsls	r3, r3, #4
    23a2:	4413      	add	r3, r2
    23a4:	6819      	ldr	r1, [r3, #0]
    23a6:	9a03      	ldr	r2, [sp, #12]
    23a8:	4613      	mov	r3, r2
    23aa:	009b      	lsls	r3, r3, #2
    23ac:	4413      	add	r3, r2
    23ae:	009b      	lsls	r3, r3, #2
    23b0:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    23b4:	9a01      	ldr	r2, [sp, #4]
    23b6:	4413      	add	r3, r2
    23b8:	4618      	mov	r0, r3
    23ba:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    23bc:	9b03      	ldr	r3, [sp, #12]
    23be:	3301      	adds	r3, #1
    23c0:	9303      	str	r3, [sp, #12]
    23c2:	9b01      	ldr	r3, [sp, #4]
    23c4:	7c9b      	ldrb	r3, [r3, #18]
    23c6:	461a      	mov	r2, r3
    23c8:	9b03      	ldr	r3, [sp, #12]
    23ca:	4293      	cmp	r3, r2
    23cc:	d3d1      	bcc.n	2372 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    23ce:	9801      	ldr	r0, [sp, #4]
    23d0:	f7ff feca 	bl	2168 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    23d4:	2300      	movs	r3, #0
    23d6:	9303      	str	r3, [sp, #12]
    23d8:	e029      	b.n	242e <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    23da:	9901      	ldr	r1, [sp, #4]
    23dc:	9a03      	ldr	r2, [sp, #12]
    23de:	4613      	mov	r3, r2
    23e0:	005b      	lsls	r3, r3, #1
    23e2:	4413      	add	r3, r2
    23e4:	009b      	lsls	r3, r3, #2
    23e6:	440b      	add	r3, r1
    23e8:	3314      	adds	r3, #20
    23ea:	681a      	ldr	r2, [r3, #0]
    23ec:	497a      	ldr	r1, [pc, #488]	; (25d8 <Clock_Ip_InitClock+0x288>)
    23ee:	4613      	mov	r3, r2
    23f0:	00db      	lsls	r3, r3, #3
    23f2:	4413      	add	r3, r2
    23f4:	440b      	add	r3, r1
    23f6:	3301      	adds	r3, #1
    23f8:	781b      	ldrb	r3, [r3, #0]
    23fa:	461a      	mov	r2, r3
    23fc:	4b79      	ldr	r3, [pc, #484]	; (25e4 <Clock_Ip_InitClock+0x294>)
    23fe:	5c9b      	ldrb	r3, [r3, r2]
    2400:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    2402:	4979      	ldr	r1, [pc, #484]	; (25e8 <Clock_Ip_InitClock+0x298>)
    2404:	9a02      	ldr	r2, [sp, #8]
    2406:	4613      	mov	r3, r2
    2408:	005b      	lsls	r3, r3, #1
    240a:	4413      	add	r3, r2
    240c:	009b      	lsls	r3, r3, #2
    240e:	440b      	add	r3, r1
    2410:	6819      	ldr	r1, [r3, #0]
    2412:	9a03      	ldr	r2, [sp, #12]
    2414:	4613      	mov	r3, r2
    2416:	005b      	lsls	r3, r3, #1
    2418:	4413      	add	r3, r2
    241a:	009b      	lsls	r3, r3, #2
    241c:	3310      	adds	r3, #16
    241e:	9a01      	ldr	r2, [sp, #4]
    2420:	4413      	add	r3, r2
    2422:	3304      	adds	r3, #4
    2424:	4618      	mov	r0, r3
    2426:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2428:	9b03      	ldr	r3, [sp, #12]
    242a:	3301      	adds	r3, #1
    242c:	9303      	str	r3, [sp, #12]
    242e:	9b01      	ldr	r3, [sp, #4]
    2430:	7a1b      	ldrb	r3, [r3, #8]
    2432:	461a      	mov	r2, r3
    2434:	9b03      	ldr	r3, [sp, #12]
    2436:	4293      	cmp	r3, r2
    2438:	d3cf      	bcc.n	23da <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    243a:	2300      	movs	r3, #0
    243c:	9303      	str	r3, [sp, #12]
    243e:	e02a      	b.n	2496 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2440:	9901      	ldr	r1, [sp, #4]
    2442:	9a03      	ldr	r2, [sp, #12]
    2444:	4613      	mov	r3, r2
    2446:	009b      	lsls	r3, r3, #2
    2448:	4413      	add	r3, r2
    244a:	009b      	lsls	r3, r3, #2
    244c:	440b      	add	r3, r1
    244e:	332c      	adds	r3, #44	; 0x2c
    2450:	681a      	ldr	r2, [r3, #0]
    2452:	4961      	ldr	r1, [pc, #388]	; (25d8 <Clock_Ip_InitClock+0x288>)
    2454:	4613      	mov	r3, r2
    2456:	00db      	lsls	r3, r3, #3
    2458:	4413      	add	r3, r2
    245a:	440b      	add	r3, r1
    245c:	3301      	adds	r3, #1
    245e:	781b      	ldrb	r3, [r3, #0]
    2460:	461a      	mov	r2, r3
    2462:	4b62      	ldr	r3, [pc, #392]	; (25ec <Clock_Ip_InitClock+0x29c>)
    2464:	5c9b      	ldrb	r3, [r3, r2]
    2466:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    2468:	4961      	ldr	r1, [pc, #388]	; (25f0 <Clock_Ip_InitClock+0x2a0>)
    246a:	9a02      	ldr	r2, [sp, #8]
    246c:	4613      	mov	r3, r2
    246e:	009b      	lsls	r3, r3, #2
    2470:	4413      	add	r3, r2
    2472:	009b      	lsls	r3, r3, #2
    2474:	440b      	add	r3, r1
    2476:	3304      	adds	r3, #4
    2478:	6819      	ldr	r1, [r3, #0]
    247a:	9a03      	ldr	r2, [sp, #12]
    247c:	4613      	mov	r3, r2
    247e:	009b      	lsls	r3, r3, #2
    2480:	4413      	add	r3, r2
    2482:	009b      	lsls	r3, r3, #2
    2484:	3328      	adds	r3, #40	; 0x28
    2486:	9a01      	ldr	r2, [sp, #4]
    2488:	4413      	add	r3, r2
    248a:	3304      	adds	r3, #4
    248c:	4618      	mov	r0, r3
    248e:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2490:	9b03      	ldr	r3, [sp, #12]
    2492:	3301      	adds	r3, #1
    2494:	9303      	str	r3, [sp, #12]
    2496:	9b01      	ldr	r3, [sp, #4]
    2498:	7a5b      	ldrb	r3, [r3, #9]
    249a:	461a      	mov	r2, r3
    249c:	9b03      	ldr	r3, [sp, #12]
    249e:	4293      	cmp	r3, r2
    24a0:	d3ce      	bcc.n	2440 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    24a2:	9801      	ldr	r0, [sp, #4]
    24a4:	f7ff fdb0 	bl	2008 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    24a8:	2300      	movs	r3, #0
    24aa:	9303      	str	r3, [sp, #12]
    24ac:	e028      	b.n	2500 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    24ae:	9901      	ldr	r1, [sp, #4]
    24b0:	9a03      	ldr	r2, [sp, #12]
    24b2:	4613      	mov	r3, r2
    24b4:	009b      	lsls	r3, r3, #2
    24b6:	4413      	add	r3, r2
    24b8:	009b      	lsls	r3, r3, #2
    24ba:	440b      	add	r3, r1
    24bc:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    24c0:	681a      	ldr	r2, [r3, #0]
    24c2:	4945      	ldr	r1, [pc, #276]	; (25d8 <Clock_Ip_InitClock+0x288>)
    24c4:	4613      	mov	r3, r2
    24c6:	00db      	lsls	r3, r3, #3
    24c8:	4413      	add	r3, r2
    24ca:	440b      	add	r3, r1
    24cc:	3301      	adds	r3, #1
    24ce:	781b      	ldrb	r3, [r3, #0]
    24d0:	461a      	mov	r2, r3
    24d2:	4b48      	ldr	r3, [pc, #288]	; (25f4 <Clock_Ip_InitClock+0x2a4>)
    24d4:	5c9b      	ldrb	r3, [r3, r2]
    24d6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    24d8:	4a47      	ldr	r2, [pc, #284]	; (25f8 <Clock_Ip_InitClock+0x2a8>)
    24da:	9b02      	ldr	r3, [sp, #8]
    24dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    24e0:	9a03      	ldr	r2, [sp, #12]
    24e2:	4613      	mov	r3, r2
    24e4:	009b      	lsls	r3, r3, #2
    24e6:	4413      	add	r3, r2
    24e8:	009b      	lsls	r3, r3, #2
    24ea:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    24ee:	9a01      	ldr	r2, [sp, #4]
    24f0:	4413      	add	r3, r2
    24f2:	3304      	adds	r3, #4
    24f4:	9903      	ldr	r1, [sp, #12]
    24f6:	4618      	mov	r0, r3
    24f8:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    24fa:	9b03      	ldr	r3, [sp, #12]
    24fc:	3301      	adds	r3, #1
    24fe:	9303      	str	r3, [sp, #12]
    2500:	9b01      	ldr	r3, [sp, #4]
    2502:	7c5b      	ldrb	r3, [r3, #17]
    2504:	461a      	mov	r2, r3
    2506:	9b03      	ldr	r3, [sp, #12]
    2508:	4293      	cmp	r3, r2
    250a:	d3d0      	bcc.n	24ae <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    250c:	2300      	movs	r3, #0
    250e:	9303      	str	r3, [sp, #12]
    2510:	e026      	b.n	2560 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2512:	9901      	ldr	r1, [sp, #4]
    2514:	9a03      	ldr	r2, [sp, #12]
    2516:	4613      	mov	r3, r2
    2518:	005b      	lsls	r3, r3, #1
    251a:	4413      	add	r3, r2
    251c:	009b      	lsls	r3, r3, #2
    251e:	440b      	add	r3, r1
    2520:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2524:	681a      	ldr	r2, [r3, #0]
    2526:	492c      	ldr	r1, [pc, #176]	; (25d8 <Clock_Ip_InitClock+0x288>)
    2528:	4613      	mov	r3, r2
    252a:	00db      	lsls	r3, r3, #3
    252c:	4413      	add	r3, r2
    252e:	440b      	add	r3, r1
    2530:	3301      	adds	r3, #1
    2532:	781b      	ldrb	r3, [r3, #0]
    2534:	461a      	mov	r2, r3
    2536:	4b31      	ldr	r3, [pc, #196]	; (25fc <Clock_Ip_InitClock+0x2ac>)
    2538:	5c9b      	ldrb	r3, [r3, r2]
    253a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    253c:	4a30      	ldr	r2, [pc, #192]	; (2600 <Clock_Ip_InitClock+0x2b0>)
    253e:	9b02      	ldr	r3, [sp, #8]
    2540:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    2544:	9a03      	ldr	r2, [sp, #12]
    2546:	4613      	mov	r3, r2
    2548:	005b      	lsls	r3, r3, #1
    254a:	4413      	add	r3, r2
    254c:	009b      	lsls	r3, r3, #2
    254e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2552:	9a01      	ldr	r2, [sp, #4]
    2554:	4413      	add	r3, r2
    2556:	4618      	mov	r0, r3
    2558:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    255a:	9b03      	ldr	r3, [sp, #12]
    255c:	3301      	adds	r3, #1
    255e:	9303      	str	r3, [sp, #12]
    2560:	9b01      	ldr	r3, [sp, #4]
    2562:	7b5b      	ldrb	r3, [r3, #13]
    2564:	461a      	mov	r2, r3
    2566:	9b03      	ldr	r3, [sp, #12]
    2568:	4293      	cmp	r3, r2
    256a:	d3d2      	bcc.n	2512 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    256c:	2300      	movs	r3, #0
    256e:	9303      	str	r3, [sp, #12]
    2570:	e026      	b.n	25c0 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    2572:	9901      	ldr	r1, [sp, #4]
    2574:	9a03      	ldr	r2, [sp, #12]
    2576:	4613      	mov	r3, r2
    2578:	005b      	lsls	r3, r3, #1
    257a:	4413      	add	r3, r2
    257c:	009b      	lsls	r3, r3, #2
    257e:	440b      	add	r3, r1
    2580:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2584:	681a      	ldr	r2, [r3, #0]
    2586:	4914      	ldr	r1, [pc, #80]	; (25d8 <Clock_Ip_InitClock+0x288>)
    2588:	4613      	mov	r3, r2
    258a:	00db      	lsls	r3, r3, #3
    258c:	4413      	add	r3, r2
    258e:	440b      	add	r3, r1
    2590:	3301      	adds	r3, #1
    2592:	781b      	ldrb	r3, [r3, #0]
    2594:	461a      	mov	r2, r3
    2596:	4b1b      	ldr	r3, [pc, #108]	; (2604 <Clock_Ip_InitClock+0x2b4>)
    2598:	5c9b      	ldrb	r3, [r3, r2]
    259a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    259c:	4a1a      	ldr	r2, [pc, #104]	; (2608 <Clock_Ip_InitClock+0x2b8>)
    259e:	9b02      	ldr	r3, [sp, #8]
    25a0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    25a4:	9a03      	ldr	r2, [sp, #12]
    25a6:	4613      	mov	r3, r2
    25a8:	005b      	lsls	r3, r3, #1
    25aa:	4413      	add	r3, r2
    25ac:	009b      	lsls	r3, r3, #2
    25ae:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    25b2:	9a01      	ldr	r2, [sp, #4]
    25b4:	4413      	add	r3, r2
    25b6:	4618      	mov	r0, r3
    25b8:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    25ba:	9b03      	ldr	r3, [sp, #12]
    25bc:	3301      	adds	r3, #1
    25be:	9303      	str	r3, [sp, #12]
    25c0:	9b01      	ldr	r3, [sp, #4]
    25c2:	7b1b      	ldrb	r3, [r3, #12]
    25c4:	461a      	mov	r2, r3
    25c6:	9b03      	ldr	r3, [sp, #12]
    25c8:	4293      	cmp	r3, r2
    25ca:	d3d2      	bcc.n	2572 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    25cc:	2300      	movs	r3, #0
    25ce:	9303      	str	r3, [sp, #12]
    25d0:	e044      	b.n	265c <Clock_Ip_InitClock+0x30c>
    25d2:	bf00      	nop
    25d4:	1fff8b38 	.word	0x1fff8b38
    25d8:	00017db8 	.word	0x00017db8
    25dc:	00017da8 	.word	0x00017da8
    25e0:	000183b4 	.word	0x000183b4
    25e4:	00017d48 	.word	0x00017d48
    25e8:	00018378 	.word	0x00018378
    25ec:	00017d38 	.word	0x00017d38
    25f0:	0001830c 	.word	0x0001830c
    25f4:	00017d98 	.word	0x00017d98
    25f8:	000183ec 	.word	0x000183ec
    25fc:	00017d28 	.word	0x00017d28
    2600:	00018304 	.word	0x00018304
    2604:	00017d18 	.word	0x00017d18
    2608:	000182c8 	.word	0x000182c8
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    260c:	9901      	ldr	r1, [sp, #4]
    260e:	9a03      	ldr	r2, [sp, #12]
    2610:	4613      	mov	r3, r2
    2612:	005b      	lsls	r3, r3, #1
    2614:	4413      	add	r3, r2
    2616:	009b      	lsls	r3, r3, #2
    2618:	440b      	add	r3, r1
    261a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    261e:	681a      	ldr	r2, [r3, #0]
    2620:	49ac      	ldr	r1, [pc, #688]	; (28d4 <Clock_Ip_InitClock+0x584>)
    2622:	4613      	mov	r3, r2
    2624:	00db      	lsls	r3, r3, #3
    2626:	4413      	add	r3, r2
    2628:	440b      	add	r3, r1
    262a:	3301      	adds	r3, #1
    262c:	781b      	ldrb	r3, [r3, #0]
    262e:	461a      	mov	r2, r3
    2630:	4ba9      	ldr	r3, [pc, #676]	; (28d8 <Clock_Ip_InitClock+0x588>)
    2632:	5c9b      	ldrb	r3, [r3, r2]
    2634:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    2636:	4aa9      	ldr	r2, [pc, #676]	; (28dc <Clock_Ip_InitClock+0x58c>)
    2638:	9b02      	ldr	r3, [sp, #8]
    263a:	00db      	lsls	r3, r3, #3
    263c:	4413      	add	r3, r2
    263e:	6859      	ldr	r1, [r3, #4]
    2640:	9a03      	ldr	r2, [sp, #12]
    2642:	4613      	mov	r3, r2
    2644:	005b      	lsls	r3, r3, #1
    2646:	4413      	add	r3, r2
    2648:	009b      	lsls	r3, r3, #2
    264a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    264e:	9a01      	ldr	r2, [sp, #4]
    2650:	4413      	add	r3, r2
    2652:	4618      	mov	r0, r3
    2654:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2656:	9b03      	ldr	r3, [sp, #12]
    2658:	3301      	adds	r3, #1
    265a:	9303      	str	r3, [sp, #12]
    265c:	9b01      	ldr	r3, [sp, #4]
    265e:	7b5b      	ldrb	r3, [r3, #13]
    2660:	461a      	mov	r2, r3
    2662:	9b03      	ldr	r3, [sp, #12]
    2664:	4293      	cmp	r3, r2
    2666:	d3d1      	bcc.n	260c <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2668:	2300      	movs	r3, #0
    266a:	9303      	str	r3, [sp, #12]
    266c:	e029      	b.n	26c2 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    266e:	9901      	ldr	r1, [sp, #4]
    2670:	9a03      	ldr	r2, [sp, #12]
    2672:	4613      	mov	r3, r2
    2674:	009b      	lsls	r3, r3, #2
    2676:	4413      	add	r3, r2
    2678:	00db      	lsls	r3, r3, #3
    267a:	440b      	add	r3, r1
    267c:	3340      	adds	r3, #64	; 0x40
    267e:	681a      	ldr	r2, [r3, #0]
    2680:	4994      	ldr	r1, [pc, #592]	; (28d4 <Clock_Ip_InitClock+0x584>)
    2682:	4613      	mov	r3, r2
    2684:	00db      	lsls	r3, r3, #3
    2686:	4413      	add	r3, r2
    2688:	440b      	add	r3, r1
    268a:	3301      	adds	r3, #1
    268c:	781b      	ldrb	r3, [r3, #0]
    268e:	461a      	mov	r2, r3
    2690:	4b93      	ldr	r3, [pc, #588]	; (28e0 <Clock_Ip_InitClock+0x590>)
    2692:	5c9b      	ldrb	r3, [r3, r2]
    2694:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    2696:	4993      	ldr	r1, [pc, #588]	; (28e4 <Clock_Ip_InitClock+0x594>)
    2698:	9a02      	ldr	r2, [sp, #8]
    269a:	4613      	mov	r3, r2
    269c:	009b      	lsls	r3, r3, #2
    269e:	4413      	add	r3, r2
    26a0:	009b      	lsls	r3, r3, #2
    26a2:	440b      	add	r3, r1
    26a4:	3304      	adds	r3, #4
    26a6:	6819      	ldr	r1, [r3, #0]
    26a8:	9a03      	ldr	r2, [sp, #12]
    26aa:	4613      	mov	r3, r2
    26ac:	009b      	lsls	r3, r3, #2
    26ae:	4413      	add	r3, r2
    26b0:	00db      	lsls	r3, r3, #3
    26b2:	3340      	adds	r3, #64	; 0x40
    26b4:	9a01      	ldr	r2, [sp, #4]
    26b6:	4413      	add	r3, r2
    26b8:	4618      	mov	r0, r3
    26ba:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    26bc:	9b03      	ldr	r3, [sp, #12]
    26be:	3301      	adds	r3, #1
    26c0:	9303      	str	r3, [sp, #12]
    26c2:	9b01      	ldr	r3, [sp, #4]
    26c4:	7a9b      	ldrb	r3, [r3, #10]
    26c6:	461a      	mov	r2, r3
    26c8:	9b03      	ldr	r3, [sp, #12]
    26ca:	4293      	cmp	r3, r2
    26cc:	d3cf      	bcc.n	266e <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    26ce:	2300      	movs	r3, #0
    26d0:	9303      	str	r3, [sp, #12]
    26d2:	e029      	b.n	2728 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    26d4:	9901      	ldr	r1, [sp, #4]
    26d6:	9a03      	ldr	r2, [sp, #12]
    26d8:	4613      	mov	r3, r2
    26da:	009b      	lsls	r3, r3, #2
    26dc:	4413      	add	r3, r2
    26de:	009b      	lsls	r3, r3, #2
    26e0:	440b      	add	r3, r1
    26e2:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    26e6:	681a      	ldr	r2, [r3, #0]
    26e8:	497a      	ldr	r1, [pc, #488]	; (28d4 <Clock_Ip_InitClock+0x584>)
    26ea:	4613      	mov	r3, r2
    26ec:	00db      	lsls	r3, r3, #3
    26ee:	4413      	add	r3, r2
    26f0:	440b      	add	r3, r1
    26f2:	3301      	adds	r3, #1
    26f4:	781b      	ldrb	r3, [r3, #0]
    26f6:	461a      	mov	r2, r3
    26f8:	4b7b      	ldr	r3, [pc, #492]	; (28e8 <Clock_Ip_InitClock+0x598>)
    26fa:	5c9b      	ldrb	r3, [r3, r2]
    26fc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    26fe:	4a7b      	ldr	r2, [pc, #492]	; (28ec <Clock_Ip_InitClock+0x59c>)
    2700:	9b02      	ldr	r3, [sp, #8]
    2702:	011b      	lsls	r3, r3, #4
    2704:	4413      	add	r3, r2
    2706:	3304      	adds	r3, #4
    2708:	681c      	ldr	r4, [r3, #0]
    270a:	9a03      	ldr	r2, [sp, #12]
    270c:	4613      	mov	r3, r2
    270e:	009b      	lsls	r3, r3, #2
    2710:	4413      	add	r3, r2
    2712:	009b      	lsls	r3, r3, #2
    2714:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2718:	9a01      	ldr	r2, [sp, #4]
    271a:	4413      	add	r3, r2
    271c:	9903      	ldr	r1, [sp, #12]
    271e:	4618      	mov	r0, r3
    2720:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    2722:	9b03      	ldr	r3, [sp, #12]
    2724:	3301      	adds	r3, #1
    2726:	9303      	str	r3, [sp, #12]
    2728:	9b01      	ldr	r3, [sp, #4]
    272a:	7c9b      	ldrb	r3, [r3, #18]
    272c:	461a      	mov	r2, r3
    272e:	9b03      	ldr	r3, [sp, #12]
    2730:	4293      	cmp	r3, r2
    2732:	d3cf      	bcc.n	26d4 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2734:	2300      	movs	r3, #0
    2736:	9303      	str	r3, [sp, #12]
    2738:	e02a      	b.n	2790 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    273a:	9901      	ldr	r1, [sp, #4]
    273c:	9a03      	ldr	r2, [sp, #12]
    273e:	4613      	mov	r3, r2
    2740:	009b      	lsls	r3, r3, #2
    2742:	4413      	add	r3, r2
    2744:	009b      	lsls	r3, r3, #2
    2746:	440b      	add	r3, r1
    2748:	332c      	adds	r3, #44	; 0x2c
    274a:	681a      	ldr	r2, [r3, #0]
    274c:	4961      	ldr	r1, [pc, #388]	; (28d4 <Clock_Ip_InitClock+0x584>)
    274e:	4613      	mov	r3, r2
    2750:	00db      	lsls	r3, r3, #3
    2752:	4413      	add	r3, r2
    2754:	440b      	add	r3, r1
    2756:	3301      	adds	r3, #1
    2758:	781b      	ldrb	r3, [r3, #0]
    275a:	461a      	mov	r2, r3
    275c:	4b64      	ldr	r3, [pc, #400]	; (28f0 <Clock_Ip_InitClock+0x5a0>)
    275e:	5c9b      	ldrb	r3, [r3, r2]
    2760:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    2762:	4964      	ldr	r1, [pc, #400]	; (28f4 <Clock_Ip_InitClock+0x5a4>)
    2764:	9a02      	ldr	r2, [sp, #8]
    2766:	4613      	mov	r3, r2
    2768:	009b      	lsls	r3, r3, #2
    276a:	4413      	add	r3, r2
    276c:	009b      	lsls	r3, r3, #2
    276e:	440b      	add	r3, r1
    2770:	3308      	adds	r3, #8
    2772:	6819      	ldr	r1, [r3, #0]
    2774:	9a03      	ldr	r2, [sp, #12]
    2776:	4613      	mov	r3, r2
    2778:	009b      	lsls	r3, r3, #2
    277a:	4413      	add	r3, r2
    277c:	009b      	lsls	r3, r3, #2
    277e:	3328      	adds	r3, #40	; 0x28
    2780:	9a01      	ldr	r2, [sp, #4]
    2782:	4413      	add	r3, r2
    2784:	3304      	adds	r3, #4
    2786:	4618      	mov	r0, r3
    2788:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    278a:	9b03      	ldr	r3, [sp, #12]
    278c:	3301      	adds	r3, #1
    278e:	9303      	str	r3, [sp, #12]
    2790:	9b01      	ldr	r3, [sp, #4]
    2792:	7a5b      	ldrb	r3, [r3, #9]
    2794:	461a      	mov	r2, r3
    2796:	9b03      	ldr	r3, [sp, #12]
    2798:	4293      	cmp	r3, r2
    279a:	d3ce      	bcc.n	273a <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    279c:	2300      	movs	r3, #0
    279e:	9303      	str	r3, [sp, #12]
    27a0:	e029      	b.n	27f6 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    27a2:	9901      	ldr	r1, [sp, #4]
    27a4:	9a03      	ldr	r2, [sp, #12]
    27a6:	4613      	mov	r3, r2
    27a8:	009b      	lsls	r3, r3, #2
    27aa:	4413      	add	r3, r2
    27ac:	00db      	lsls	r3, r3, #3
    27ae:	440b      	add	r3, r1
    27b0:	3340      	adds	r3, #64	; 0x40
    27b2:	681a      	ldr	r2, [r3, #0]
    27b4:	4947      	ldr	r1, [pc, #284]	; (28d4 <Clock_Ip_InitClock+0x584>)
    27b6:	4613      	mov	r3, r2
    27b8:	00db      	lsls	r3, r3, #3
    27ba:	4413      	add	r3, r2
    27bc:	440b      	add	r3, r1
    27be:	3301      	adds	r3, #1
    27c0:	781b      	ldrb	r3, [r3, #0]
    27c2:	461a      	mov	r2, r3
    27c4:	4b46      	ldr	r3, [pc, #280]	; (28e0 <Clock_Ip_InitClock+0x590>)
    27c6:	5c9b      	ldrb	r3, [r3, r2]
    27c8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    27ca:	4946      	ldr	r1, [pc, #280]	; (28e4 <Clock_Ip_InitClock+0x594>)
    27cc:	9a02      	ldr	r2, [sp, #8]
    27ce:	4613      	mov	r3, r2
    27d0:	009b      	lsls	r3, r3, #2
    27d2:	4413      	add	r3, r2
    27d4:	009b      	lsls	r3, r3, #2
    27d6:	440b      	add	r3, r1
    27d8:	330c      	adds	r3, #12
    27da:	6819      	ldr	r1, [r3, #0]
    27dc:	9a03      	ldr	r2, [sp, #12]
    27de:	4613      	mov	r3, r2
    27e0:	009b      	lsls	r3, r3, #2
    27e2:	4413      	add	r3, r2
    27e4:	00db      	lsls	r3, r3, #3
    27e6:	3340      	adds	r3, #64	; 0x40
    27e8:	9a01      	ldr	r2, [sp, #4]
    27ea:	4413      	add	r3, r2
    27ec:	4618      	mov	r0, r3
    27ee:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    27f0:	9b03      	ldr	r3, [sp, #12]
    27f2:	3301      	adds	r3, #1
    27f4:	9303      	str	r3, [sp, #12]
    27f6:	9b01      	ldr	r3, [sp, #4]
    27f8:	7a9b      	ldrb	r3, [r3, #10]
    27fa:	461a      	mov	r2, r3
    27fc:	9b03      	ldr	r3, [sp, #12]
    27fe:	4293      	cmp	r3, r2
    2800:	d3cf      	bcc.n	27a2 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    2802:	2300      	movs	r3, #0
    2804:	9303      	str	r3, [sp, #12]
    2806:	e025      	b.n	2854 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    2808:	9a01      	ldr	r2, [sp, #4]
    280a:	9b03      	ldr	r3, [sp, #12]
    280c:	3324      	adds	r3, #36	; 0x24
    280e:	011b      	lsls	r3, r3, #4
    2810:	4413      	add	r3, r2
    2812:	3304      	adds	r3, #4
    2814:	681a      	ldr	r2, [r3, #0]
    2816:	492f      	ldr	r1, [pc, #188]	; (28d4 <Clock_Ip_InitClock+0x584>)
    2818:	4613      	mov	r3, r2
    281a:	00db      	lsls	r3, r3, #3
    281c:	4413      	add	r3, r2
    281e:	440b      	add	r3, r1
    2820:	3301      	adds	r3, #1
    2822:	781b      	ldrb	r3, [r3, #0]
    2824:	461a      	mov	r2, r3
    2826:	4b34      	ldr	r3, [pc, #208]	; (28f8 <Clock_Ip_InitClock+0x5a8>)
    2828:	5c9b      	ldrb	r3, [r3, r2]
    282a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    282c:	4933      	ldr	r1, [pc, #204]	; (28fc <Clock_Ip_InitClock+0x5ac>)
    282e:	9a02      	ldr	r2, [sp, #8]
    2830:	4613      	mov	r3, r2
    2832:	005b      	lsls	r3, r3, #1
    2834:	4413      	add	r3, r2
    2836:	009b      	lsls	r3, r3, #2
    2838:	440b      	add	r3, r1
    283a:	3304      	adds	r3, #4
    283c:	681b      	ldr	r3, [r3, #0]
    283e:	9a03      	ldr	r2, [sp, #12]
    2840:	3224      	adds	r2, #36	; 0x24
    2842:	0112      	lsls	r2, r2, #4
    2844:	9901      	ldr	r1, [sp, #4]
    2846:	440a      	add	r2, r1
    2848:	3204      	adds	r2, #4
    284a:	4610      	mov	r0, r2
    284c:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    284e:	9b03      	ldr	r3, [sp, #12]
    2850:	3301      	adds	r3, #1
    2852:	9303      	str	r3, [sp, #12]
    2854:	9b01      	ldr	r3, [sp, #4]
    2856:	7b9b      	ldrb	r3, [r3, #14]
    2858:	461a      	mov	r2, r3
    285a:	9b03      	ldr	r3, [sp, #12]
    285c:	4293      	cmp	r3, r2
    285e:	d3d3      	bcc.n	2808 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    2860:	4b27      	ldr	r3, [pc, #156]	; (2900 <Clock_Ip_InitClock+0x5b0>)
    2862:	2200      	movs	r2, #0
    2864:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    2866:	4b26      	ldr	r3, [pc, #152]	; (2900 <Clock_Ip_InitClock+0x5b0>)
    2868:	2200      	movs	r2, #0
    286a:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    286c:	4b24      	ldr	r3, [pc, #144]	; (2900 <Clock_Ip_InitClock+0x5b0>)
    286e:	2201      	movs	r2, #1
    2870:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    2872:	4b23      	ldr	r3, [pc, #140]	; (2900 <Clock_Ip_InitClock+0x5b0>)
    2874:	2200      	movs	r2, #0
    2876:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    2878:	f000 fa9c 	bl	2db4 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    287c:	2300      	movs	r3, #0
    287e:	9303      	str	r3, [sp, #12]
    2880:	e04c      	b.n	291c <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    2882:	9a01      	ldr	r2, [sp, #4]
    2884:	9b03      	ldr	r3, [sp, #12]
    2886:	330d      	adds	r3, #13
    2888:	00db      	lsls	r3, r3, #3
    288a:	4413      	add	r3, r2
    288c:	685b      	ldr	r3, [r3, #4]
    288e:	4a1d      	ldr	r2, [pc, #116]	; (2904 <Clock_Ip_InitClock+0x5b4>)
    2890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2894:	2b03      	cmp	r3, #3
    2896:	d03b      	beq.n	2910 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2898:	9b01      	ldr	r3, [sp, #4]
    289a:	9a03      	ldr	r2, [sp, #12]
    289c:	320d      	adds	r2, #13
    289e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    28a2:	490c      	ldr	r1, [pc, #48]	; (28d4 <Clock_Ip_InitClock+0x584>)
    28a4:	4613      	mov	r3, r2
    28a6:	00db      	lsls	r3, r3, #3
    28a8:	4413      	add	r3, r2
    28aa:	440b      	add	r3, r1
    28ac:	3301      	adds	r3, #1
    28ae:	781b      	ldrb	r3, [r3, #0]
    28b0:	461a      	mov	r2, r3
    28b2:	4b15      	ldr	r3, [pc, #84]	; (2908 <Clock_Ip_InitClock+0x5b8>)
    28b4:	5c9b      	ldrb	r3, [r3, r2]
    28b6:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    28b8:	4a14      	ldr	r2, [pc, #80]	; (290c <Clock_Ip_InitClock+0x5bc>)
    28ba:	9b02      	ldr	r3, [sp, #8]
    28bc:	00db      	lsls	r3, r3, #3
    28be:	4413      	add	r3, r2
    28c0:	685b      	ldr	r3, [r3, #4]
    28c2:	9a03      	ldr	r2, [sp, #12]
    28c4:	320d      	adds	r2, #13
    28c6:	00d2      	lsls	r2, r2, #3
    28c8:	9901      	ldr	r1, [sp, #4]
    28ca:	440a      	add	r2, r1
    28cc:	4610      	mov	r0, r2
    28ce:	4798      	blx	r3
    28d0:	e021      	b.n	2916 <Clock_Ip_InitClock+0x5c6>
    28d2:	bf00      	nop
    28d4:	00017db8 	.word	0x00017db8
    28d8:	00017d28 	.word	0x00017d28
    28dc:	00018304 	.word	0x00018304
    28e0:	00017d78 	.word	0x00017d78
    28e4:	000183c4 	.word	0x000183c4
    28e8:	00017da8 	.word	0x00017da8
    28ec:	000183b4 	.word	0x000183b4
    28f0:	00017d38 	.word	0x00017d38
    28f4:	0001830c 	.word	0x0001830c
    28f8:	00017d68 	.word	0x00017d68
    28fc:	00018334 	.word	0x00018334
    2900:	1fff8b40 	.word	0x1fff8b40
    2904:	00018204 	.word	0x00018204
    2908:	00017d88 	.word	0x00017d88
    290c:	000183f0 	.word	0x000183f0
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    2910:	4b3a      	ldr	r3, [pc, #232]	; (29fc <Clock_Ip_InitClock+0x6ac>)
    2912:	2201      	movs	r2, #1
    2914:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2916:	9b03      	ldr	r3, [sp, #12]
    2918:	3301      	adds	r3, #1
    291a:	9303      	str	r3, [sp, #12]
    291c:	9b01      	ldr	r3, [sp, #4]
    291e:	7adb      	ldrb	r3, [r3, #11]
    2920:	461a      	mov	r2, r3
    2922:	9b03      	ldr	r3, [sp, #12]
    2924:	4293      	cmp	r3, r2
    2926:	d3ac      	bcc.n	2882 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    2928:	4b34      	ldr	r3, [pc, #208]	; (29fc <Clock_Ip_InitClock+0x6ac>)
    292a:	781b      	ldrb	r3, [r3, #0]
    292c:	f083 0301 	eor.w	r3, r3, #1
    2930:	b2db      	uxtb	r3, r3
    2932:	2b00      	cmp	r3, #0
    2934:	d05e      	beq.n	29f4 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2936:	2300      	movs	r3, #0
    2938:	9303      	str	r3, [sp, #12]
    293a:	e01f      	b.n	297c <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    293c:	9a01      	ldr	r2, [sp, #4]
    293e:	9b03      	ldr	r3, [sp, #12]
    2940:	334e      	adds	r3, #78	; 0x4e
    2942:	00db      	lsls	r3, r3, #3
    2944:	4413      	add	r3, r2
    2946:	685a      	ldr	r2, [r3, #4]
    2948:	492d      	ldr	r1, [pc, #180]	; (2a00 <Clock_Ip_InitClock+0x6b0>)
    294a:	4613      	mov	r3, r2
    294c:	00db      	lsls	r3, r3, #3
    294e:	4413      	add	r3, r2
    2950:	440b      	add	r3, r1
    2952:	3301      	adds	r3, #1
    2954:	781b      	ldrb	r3, [r3, #0]
    2956:	461a      	mov	r2, r3
    2958:	4b2a      	ldr	r3, [pc, #168]	; (2a04 <Clock_Ip_InitClock+0x6b4>)
    295a:	5c9b      	ldrb	r3, [r3, r2]
    295c:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    295e:	4a2a      	ldr	r2, [pc, #168]	; (2a08 <Clock_Ip_InitClock+0x6b8>)
    2960:	9b02      	ldr	r3, [sp, #8]
    2962:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2966:	9a03      	ldr	r2, [sp, #12]
    2968:	324e      	adds	r2, #78	; 0x4e
    296a:	00d2      	lsls	r2, r2, #3
    296c:	9901      	ldr	r1, [sp, #4]
    296e:	440a      	add	r2, r1
    2970:	3204      	adds	r2, #4
    2972:	4610      	mov	r0, r2
    2974:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2976:	9b03      	ldr	r3, [sp, #12]
    2978:	3301      	adds	r3, #1
    297a:	9303      	str	r3, [sp, #12]
    297c:	9b01      	ldr	r3, [sp, #4]
    297e:	7c1b      	ldrb	r3, [r3, #16]
    2980:	461a      	mov	r2, r3
    2982:	9b03      	ldr	r3, [sp, #12]
    2984:	4293      	cmp	r3, r2
    2986:	d3d9      	bcc.n	293c <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2988:	2300      	movs	r3, #0
    298a:	9303      	str	r3, [sp, #12]
    298c:	e028      	b.n	29e0 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    298e:	9901      	ldr	r1, [sp, #4]
    2990:	9a03      	ldr	r2, [sp, #12]
    2992:	4613      	mov	r3, r2
    2994:	009b      	lsls	r3, r3, #2
    2996:	4413      	add	r3, r2
    2998:	009b      	lsls	r3, r3, #2
    299a:	440b      	add	r3, r1
    299c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    29a0:	681a      	ldr	r2, [r3, #0]
    29a2:	4917      	ldr	r1, [pc, #92]	; (2a00 <Clock_Ip_InitClock+0x6b0>)
    29a4:	4613      	mov	r3, r2
    29a6:	00db      	lsls	r3, r3, #3
    29a8:	4413      	add	r3, r2
    29aa:	440b      	add	r3, r1
    29ac:	3301      	adds	r3, #1
    29ae:	781b      	ldrb	r3, [r3, #0]
    29b0:	461a      	mov	r2, r3
    29b2:	4b16      	ldr	r3, [pc, #88]	; (2a0c <Clock_Ip_InitClock+0x6bc>)
    29b4:	5c9b      	ldrb	r3, [r3, r2]
    29b6:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    29b8:	4a15      	ldr	r2, [pc, #84]	; (2a10 <Clock_Ip_InitClock+0x6c0>)
    29ba:	9b02      	ldr	r3, [sp, #8]
    29bc:	011b      	lsls	r3, r3, #4
    29be:	4413      	add	r3, r2
    29c0:	330c      	adds	r3, #12
    29c2:	6819      	ldr	r1, [r3, #0]
    29c4:	9a03      	ldr	r2, [sp, #12]
    29c6:	4613      	mov	r3, r2
    29c8:	009b      	lsls	r3, r3, #2
    29ca:	4413      	add	r3, r2
    29cc:	009b      	lsls	r3, r3, #2
    29ce:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    29d2:	9a01      	ldr	r2, [sp, #4]
    29d4:	4413      	add	r3, r2
    29d6:	4618      	mov	r0, r3
    29d8:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    29da:	9b03      	ldr	r3, [sp, #12]
    29dc:	3301      	adds	r3, #1
    29de:	9303      	str	r3, [sp, #12]
    29e0:	9b01      	ldr	r3, [sp, #4]
    29e2:	7c9b      	ldrb	r3, [r3, #18]
    29e4:	461a      	mov	r2, r3
    29e6:	9b03      	ldr	r3, [sp, #12]
    29e8:	4293      	cmp	r3, r2
    29ea:	d3d0      	bcc.n	298e <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    29ec:	2104      	movs	r1, #4
    29ee:	9801      	ldr	r0, [sp, #4]
    29f0:	f002 ff48 	bl	5884 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    29f4:	bf00      	nop
    29f6:	b004      	add	sp, #16
    29f8:	bd10      	pop	{r4, pc}
    29fa:	bf00      	nop
    29fc:	1fff8b40 	.word	0x1fff8b40
    2a00:	00017db8 	.word	0x00017db8
    2a04:	00017d58 	.word	0x00017d58
    2a08:	00018340 	.word	0x00018340
    2a0c:	00017da8 	.word	0x00017da8
    2a10:	000183b4 	.word	0x000183b4

00002a14 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    2a14:	b500      	push	{lr}
    2a16:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    2a18:	2302      	movs	r3, #2
    2a1a:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2a1c:	2300      	movs	r3, #0
    2a1e:	9304      	str	r3, [sp, #16]
    2a20:	e02c      	b.n	2a7c <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    2a22:	4a36      	ldr	r2, [pc, #216]	; (2afc <Clock_Ip_GetPllStatus+0xe8>)
    2a24:	9b04      	ldr	r3, [sp, #16]
    2a26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2a2a:	4935      	ldr	r1, [pc, #212]	; (2b00 <Clock_Ip_GetPllStatus+0xec>)
    2a2c:	4613      	mov	r3, r2
    2a2e:	00db      	lsls	r3, r3, #3
    2a30:	4413      	add	r3, r2
    2a32:	440b      	add	r3, r1
    2a34:	3301      	adds	r3, #1
    2a36:	781b      	ldrb	r3, [r3, #0]
    2a38:	461a      	mov	r2, r3
    2a3a:	4b32      	ldr	r3, [pc, #200]	; (2b04 <Clock_Ip_GetPllStatus+0xf0>)
    2a3c:	5c9b      	ldrb	r3, [r3, r2]
    2a3e:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    2a40:	4931      	ldr	r1, [pc, #196]	; (2b08 <Clock_Ip_GetPllStatus+0xf4>)
    2a42:	9a03      	ldr	r2, [sp, #12]
    2a44:	4613      	mov	r3, r2
    2a46:	009b      	lsls	r3, r3, #2
    2a48:	4413      	add	r3, r2
    2a4a:	009b      	lsls	r3, r3, #2
    2a4c:	440b      	add	r3, r1
    2a4e:	3308      	adds	r3, #8
    2a50:	681b      	ldr	r3, [r3, #0]
    2a52:	492a      	ldr	r1, [pc, #168]	; (2afc <Clock_Ip_GetPllStatus+0xe8>)
    2a54:	9a04      	ldr	r2, [sp, #16]
    2a56:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2a5a:	4610      	mov	r0, r2
    2a5c:	4798      	blx	r3
    2a5e:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    2a60:	9b02      	ldr	r3, [sp, #8]
    2a62:	2b01      	cmp	r3, #1
    2a64:	d102      	bne.n	2a6c <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    2a66:	2301      	movs	r3, #1
    2a68:	9305      	str	r3, [sp, #20]
            break;
    2a6a:	e00d      	b.n	2a88 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    2a6c:	9b02      	ldr	r3, [sp, #8]
    2a6e:	2b02      	cmp	r3, #2
    2a70:	d101      	bne.n	2a76 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    2a72:	2300      	movs	r3, #0
    2a74:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2a76:	9b04      	ldr	r3, [sp, #16]
    2a78:	3301      	adds	r3, #1
    2a7a:	9304      	str	r3, [sp, #16]
    2a7c:	4b23      	ldr	r3, [pc, #140]	; (2b0c <Clock_Ip_GetPllStatus+0xf8>)
    2a7e:	789b      	ldrb	r3, [r3, #2]
    2a80:	461a      	mov	r2, r3
    2a82:	9b04      	ldr	r3, [sp, #16]
    2a84:	4293      	cmp	r3, r2
    2a86:	d3cc      	bcc.n	2a22 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    2a88:	9b05      	ldr	r3, [sp, #20]
    2a8a:	2b00      	cmp	r3, #0
    2a8c:	d130      	bne.n	2af0 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2a8e:	2300      	movs	r3, #0
    2a90:	9304      	str	r3, [sp, #16]
    2a92:	e027      	b.n	2ae4 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    2a94:	4a1e      	ldr	r2, [pc, #120]	; (2b10 <Clock_Ip_GetPllStatus+0xfc>)
    2a96:	9b04      	ldr	r3, [sp, #16]
    2a98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2a9c:	4918      	ldr	r1, [pc, #96]	; (2b00 <Clock_Ip_GetPllStatus+0xec>)
    2a9e:	4613      	mov	r3, r2
    2aa0:	00db      	lsls	r3, r3, #3
    2aa2:	4413      	add	r3, r2
    2aa4:	440b      	add	r3, r1
    2aa6:	3301      	adds	r3, #1
    2aa8:	781b      	ldrb	r3, [r3, #0]
    2aaa:	461a      	mov	r2, r3
    2aac:	4b19      	ldr	r3, [pc, #100]	; (2b14 <Clock_Ip_GetPllStatus+0x100>)
    2aae:	5c9b      	ldrb	r3, [r3, r2]
    2ab0:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    2ab2:	4919      	ldr	r1, [pc, #100]	; (2b18 <Clock_Ip_GetPllStatus+0x104>)
    2ab4:	9a03      	ldr	r2, [sp, #12]
    2ab6:	4613      	mov	r3, r2
    2ab8:	005b      	lsls	r3, r3, #1
    2aba:	4413      	add	r3, r2
    2abc:	009b      	lsls	r3, r3, #2
    2abe:	440b      	add	r3, r1
    2ac0:	3308      	adds	r3, #8
    2ac2:	681b      	ldr	r3, [r3, #0]
    2ac4:	4912      	ldr	r1, [pc, #72]	; (2b10 <Clock_Ip_GetPllStatus+0xfc>)
    2ac6:	9a04      	ldr	r2, [sp, #16]
    2ac8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2acc:	4610      	mov	r0, r2
    2ace:	4798      	blx	r3
    2ad0:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    2ad2:	9b01      	ldr	r3, [sp, #4]
    2ad4:	2b01      	cmp	r3, #1
    2ad6:	d102      	bne.n	2ade <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    2ad8:	2301      	movs	r3, #1
    2ada:	9305      	str	r3, [sp, #20]
                break;
    2adc:	e008      	b.n	2af0 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2ade:	9b04      	ldr	r3, [sp, #16]
    2ae0:	3301      	adds	r3, #1
    2ae2:	9304      	str	r3, [sp, #16]
    2ae4:	4b09      	ldr	r3, [pc, #36]	; (2b0c <Clock_Ip_GetPllStatus+0xf8>)
    2ae6:	78db      	ldrb	r3, [r3, #3]
    2ae8:	461a      	mov	r2, r3
    2aea:	9b04      	ldr	r3, [sp, #16]
    2aec:	4293      	cmp	r3, r2
    2aee:	d3d1      	bcc.n	2a94 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    2af0:	9b05      	ldr	r3, [sp, #20]
}
    2af2:	4618      	mov	r0, r3
    2af4:	b007      	add	sp, #28
    2af6:	f85d fb04 	ldr.w	pc, [sp], #4
    2afa:	bf00      	nop
    2afc:	000182c0 	.word	0x000182c0
    2b00:	00017db8 	.word	0x00017db8
    2b04:	00017d78 	.word	0x00017d78
    2b08:	000183c4 	.word	0x000183c4
    2b0c:	1fff8b40 	.word	0x1fff8b40
    2b10:	000182c4 	.word	0x000182c4
    2b14:	00017d68 	.word	0x00017d68
    2b18:	00018334 	.word	0x00018334

00002b1c <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    2b1c:	b500      	push	{lr}
    2b1e:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2b20:	4b55      	ldr	r3, [pc, #340]	; (2c78 <Clock_Ip_DistributePll+0x15c>)
    2b22:	681b      	ldr	r3, [r3, #0]
    2b24:	2b00      	cmp	r3, #0
    2b26:	f000 80a2 	beq.w	2c6e <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2b2a:	2300      	movs	r3, #0
    2b2c:	9301      	str	r3, [sp, #4]
    2b2e:	e02c      	b.n	2b8a <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    2b30:	4b51      	ldr	r3, [pc, #324]	; (2c78 <Clock_Ip_DistributePll+0x15c>)
    2b32:	681a      	ldr	r2, [r3, #0]
    2b34:	9b01      	ldr	r3, [sp, #4]
    2b36:	330d      	adds	r3, #13
    2b38:	00db      	lsls	r3, r3, #3
    2b3a:	4413      	add	r3, r2
    2b3c:	685b      	ldr	r3, [r3, #4]
    2b3e:	4a4f      	ldr	r2, [pc, #316]	; (2c7c <Clock_Ip_DistributePll+0x160>)
    2b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2b44:	2b03      	cmp	r3, #3
    2b46:	d11d      	bne.n	2b84 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2b48:	4b4b      	ldr	r3, [pc, #300]	; (2c78 <Clock_Ip_DistributePll+0x15c>)
    2b4a:	681b      	ldr	r3, [r3, #0]
    2b4c:	9a01      	ldr	r2, [sp, #4]
    2b4e:	320d      	adds	r2, #13
    2b50:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2b54:	494a      	ldr	r1, [pc, #296]	; (2c80 <Clock_Ip_DistributePll+0x164>)
    2b56:	4613      	mov	r3, r2
    2b58:	00db      	lsls	r3, r3, #3
    2b5a:	4413      	add	r3, r2
    2b5c:	440b      	add	r3, r1
    2b5e:	3301      	adds	r3, #1
    2b60:	781b      	ldrb	r3, [r3, #0]
    2b62:	461a      	mov	r2, r3
    2b64:	4b47      	ldr	r3, [pc, #284]	; (2c84 <Clock_Ip_DistributePll+0x168>)
    2b66:	5c9b      	ldrb	r3, [r3, r2]
    2b68:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    2b6a:	4a47      	ldr	r2, [pc, #284]	; (2c88 <Clock_Ip_DistributePll+0x16c>)
    2b6c:	9b00      	ldr	r3, [sp, #0]
    2b6e:	00db      	lsls	r3, r3, #3
    2b70:	4413      	add	r3, r2
    2b72:	685b      	ldr	r3, [r3, #4]
    2b74:	4a40      	ldr	r2, [pc, #256]	; (2c78 <Clock_Ip_DistributePll+0x15c>)
    2b76:	6811      	ldr	r1, [r2, #0]
    2b78:	9a01      	ldr	r2, [sp, #4]
    2b7a:	320d      	adds	r2, #13
    2b7c:	00d2      	lsls	r2, r2, #3
    2b7e:	440a      	add	r2, r1
    2b80:	4610      	mov	r0, r2
    2b82:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2b84:	9b01      	ldr	r3, [sp, #4]
    2b86:	3301      	adds	r3, #1
    2b88:	9301      	str	r3, [sp, #4]
    2b8a:	4b3b      	ldr	r3, [pc, #236]	; (2c78 <Clock_Ip_DistributePll+0x15c>)
    2b8c:	681b      	ldr	r3, [r3, #0]
    2b8e:	7adb      	ldrb	r3, [r3, #11]
    2b90:	461a      	mov	r2, r3
    2b92:	9b01      	ldr	r3, [sp, #4]
    2b94:	4293      	cmp	r3, r2
    2b96:	d3cb      	bcc.n	2b30 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    2b98:	4b3c      	ldr	r3, [pc, #240]	; (2c8c <Clock_Ip_DistributePll+0x170>)
    2b9a:	781b      	ldrb	r3, [r3, #0]
    2b9c:	2b00      	cmp	r3, #0
    2b9e:	d066      	beq.n	2c6e <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2ba0:	2300      	movs	r3, #0
    2ba2:	9301      	str	r3, [sp, #4]
    2ba4:	e021      	b.n	2bea <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2ba6:	4b34      	ldr	r3, [pc, #208]	; (2c78 <Clock_Ip_DistributePll+0x15c>)
    2ba8:	681a      	ldr	r2, [r3, #0]
    2baa:	9b01      	ldr	r3, [sp, #4]
    2bac:	334e      	adds	r3, #78	; 0x4e
    2bae:	00db      	lsls	r3, r3, #3
    2bb0:	4413      	add	r3, r2
    2bb2:	685a      	ldr	r2, [r3, #4]
    2bb4:	4932      	ldr	r1, [pc, #200]	; (2c80 <Clock_Ip_DistributePll+0x164>)
    2bb6:	4613      	mov	r3, r2
    2bb8:	00db      	lsls	r3, r3, #3
    2bba:	4413      	add	r3, r2
    2bbc:	440b      	add	r3, r1
    2bbe:	3301      	adds	r3, #1
    2bc0:	781b      	ldrb	r3, [r3, #0]
    2bc2:	461a      	mov	r2, r3
    2bc4:	4b32      	ldr	r3, [pc, #200]	; (2c90 <Clock_Ip_DistributePll+0x174>)
    2bc6:	5c9b      	ldrb	r3, [r3, r2]
    2bc8:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    2bca:	4a32      	ldr	r2, [pc, #200]	; (2c94 <Clock_Ip_DistributePll+0x178>)
    2bcc:	9b00      	ldr	r3, [sp, #0]
    2bce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2bd2:	4a29      	ldr	r2, [pc, #164]	; (2c78 <Clock_Ip_DistributePll+0x15c>)
    2bd4:	6811      	ldr	r1, [r2, #0]
    2bd6:	9a01      	ldr	r2, [sp, #4]
    2bd8:	324e      	adds	r2, #78	; 0x4e
    2bda:	00d2      	lsls	r2, r2, #3
    2bdc:	440a      	add	r2, r1
    2bde:	3204      	adds	r2, #4
    2be0:	4610      	mov	r0, r2
    2be2:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2be4:	9b01      	ldr	r3, [sp, #4]
    2be6:	3301      	adds	r3, #1
    2be8:	9301      	str	r3, [sp, #4]
    2bea:	4b23      	ldr	r3, [pc, #140]	; (2c78 <Clock_Ip_DistributePll+0x15c>)
    2bec:	681b      	ldr	r3, [r3, #0]
    2bee:	7c1b      	ldrb	r3, [r3, #16]
    2bf0:	461a      	mov	r2, r3
    2bf2:	9b01      	ldr	r3, [sp, #4]
    2bf4:	4293      	cmp	r3, r2
    2bf6:	d3d6      	bcc.n	2ba6 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2bf8:	2300      	movs	r3, #0
    2bfa:	9301      	str	r3, [sp, #4]
    2bfc:	e02a      	b.n	2c54 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2bfe:	4b1e      	ldr	r3, [pc, #120]	; (2c78 <Clock_Ip_DistributePll+0x15c>)
    2c00:	6819      	ldr	r1, [r3, #0]
    2c02:	9a01      	ldr	r2, [sp, #4]
    2c04:	4613      	mov	r3, r2
    2c06:	009b      	lsls	r3, r3, #2
    2c08:	4413      	add	r3, r2
    2c0a:	009b      	lsls	r3, r3, #2
    2c0c:	440b      	add	r3, r1
    2c0e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2c12:	681a      	ldr	r2, [r3, #0]
    2c14:	491a      	ldr	r1, [pc, #104]	; (2c80 <Clock_Ip_DistributePll+0x164>)
    2c16:	4613      	mov	r3, r2
    2c18:	00db      	lsls	r3, r3, #3
    2c1a:	4413      	add	r3, r2
    2c1c:	440b      	add	r3, r1
    2c1e:	3301      	adds	r3, #1
    2c20:	781b      	ldrb	r3, [r3, #0]
    2c22:	461a      	mov	r2, r3
    2c24:	4b1c      	ldr	r3, [pc, #112]	; (2c98 <Clock_Ip_DistributePll+0x17c>)
    2c26:	5c9b      	ldrb	r3, [r3, r2]
    2c28:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    2c2a:	4a1c      	ldr	r2, [pc, #112]	; (2c9c <Clock_Ip_DistributePll+0x180>)
    2c2c:	9b00      	ldr	r3, [sp, #0]
    2c2e:	011b      	lsls	r3, r3, #4
    2c30:	4413      	add	r3, r2
    2c32:	330c      	adds	r3, #12
    2c34:	6819      	ldr	r1, [r3, #0]
    2c36:	4b10      	ldr	r3, [pc, #64]	; (2c78 <Clock_Ip_DistributePll+0x15c>)
    2c38:	6818      	ldr	r0, [r3, #0]
    2c3a:	9a01      	ldr	r2, [sp, #4]
    2c3c:	4613      	mov	r3, r2
    2c3e:	009b      	lsls	r3, r3, #2
    2c40:	4413      	add	r3, r2
    2c42:	009b      	lsls	r3, r3, #2
    2c44:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2c48:	4403      	add	r3, r0
    2c4a:	4618      	mov	r0, r3
    2c4c:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2c4e:	9b01      	ldr	r3, [sp, #4]
    2c50:	3301      	adds	r3, #1
    2c52:	9301      	str	r3, [sp, #4]
    2c54:	4b08      	ldr	r3, [pc, #32]	; (2c78 <Clock_Ip_DistributePll+0x15c>)
    2c56:	681b      	ldr	r3, [r3, #0]
    2c58:	7c9b      	ldrb	r3, [r3, #18]
    2c5a:	461a      	mov	r2, r3
    2c5c:	9b01      	ldr	r3, [sp, #4]
    2c5e:	4293      	cmp	r3, r2
    2c60:	d3cd      	bcc.n	2bfe <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2c62:	4b05      	ldr	r3, [pc, #20]	; (2c78 <Clock_Ip_DistributePll+0x15c>)
    2c64:	681b      	ldr	r3, [r3, #0]
    2c66:	2104      	movs	r1, #4
    2c68:	4618      	mov	r0, r3
    2c6a:	f002 fe0b 	bl	5884 <Clock_Ip_Command>
        }
    }
}
    2c6e:	bf00      	nop
    2c70:	b003      	add	sp, #12
    2c72:	f85d fb04 	ldr.w	pc, [sp], #4
    2c76:	bf00      	nop
    2c78:	1fff8b38 	.word	0x1fff8b38
    2c7c:	00018204 	.word	0x00018204
    2c80:	00017db8 	.word	0x00017db8
    2c84:	00017d88 	.word	0x00017d88
    2c88:	000183f0 	.word	0x000183f0
    2c8c:	1fff8b40 	.word	0x1fff8b40
    2c90:	00017d58 	.word	0x00017d58
    2c94:	00018340 	.word	0x00018340
    2c98:	00017da8 	.word	0x00017da8
    2c9c:	000183b4 	.word	0x000183b4

00002ca0 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2ca0:	b500      	push	{lr}
    2ca2:	b085      	sub	sp, #20
    2ca4:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2ca6:	490c      	ldr	r1, [pc, #48]	; (2cd8 <Clock_Ip_DisableClockMonitor+0x38>)
    2ca8:	9a01      	ldr	r2, [sp, #4]
    2caa:	4613      	mov	r3, r2
    2cac:	00db      	lsls	r3, r3, #3
    2cae:	4413      	add	r3, r2
    2cb0:	440b      	add	r3, r1
    2cb2:	3301      	adds	r3, #1
    2cb4:	781b      	ldrb	r3, [r3, #0]
    2cb6:	461a      	mov	r2, r3
    2cb8:	4b08      	ldr	r3, [pc, #32]	; (2cdc <Clock_Ip_DisableClockMonitor+0x3c>)
    2cba:	5c9b      	ldrb	r3, [r3, r2]
    2cbc:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2cbe:	4a08      	ldr	r2, [pc, #32]	; (2ce0 <Clock_Ip_DisableClockMonitor+0x40>)
    2cc0:	9b03      	ldr	r3, [sp, #12]
    2cc2:	011b      	lsls	r3, r3, #4
    2cc4:	4413      	add	r3, r2
    2cc6:	3308      	adds	r3, #8
    2cc8:	681b      	ldr	r3, [r3, #0]
    2cca:	9801      	ldr	r0, [sp, #4]
    2ccc:	4798      	blx	r3
}
    2cce:	bf00      	nop
    2cd0:	b005      	add	sp, #20
    2cd2:	f85d fb04 	ldr.w	pc, [sp], #4
    2cd6:	bf00      	nop
    2cd8:	00017db8 	.word	0x00017db8
    2cdc:	00017da8 	.word	0x00017da8
    2ce0:	000183b4 	.word	0x000183b4

00002ce4 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2ce4:	b082      	sub	sp, #8
    2ce6:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2ce8:	4a02      	ldr	r2, [pc, #8]	; (2cf4 <Clock_Ip_InstallNotificationsCallback+0x10>)
    2cea:	9b01      	ldr	r3, [sp, #4]
    2cec:	6013      	str	r3, [r2, #0]
}
    2cee:	bf00      	nop
    2cf0:	b002      	add	sp, #8
    2cf2:	4770      	bx	lr
    2cf4:	1fff8b14 	.word	0x1fff8b14

00002cf8 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2cf8:	b500      	push	{lr}
    2cfa:	b085      	sub	sp, #20
    2cfc:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2cfe:	490c      	ldr	r1, [pc, #48]	; (2d30 <Clock_Ip_DisableModuleClock+0x38>)
    2d00:	9a01      	ldr	r2, [sp, #4]
    2d02:	4613      	mov	r3, r2
    2d04:	00db      	lsls	r3, r3, #3
    2d06:	4413      	add	r3, r2
    2d08:	440b      	add	r3, r1
    2d0a:	3301      	adds	r3, #1
    2d0c:	781b      	ldrb	r3, [r3, #0]
    2d0e:	461a      	mov	r2, r3
    2d10:	4b08      	ldr	r3, [pc, #32]	; (2d34 <Clock_Ip_DisableModuleClock+0x3c>)
    2d12:	5c9b      	ldrb	r3, [r3, r2]
    2d14:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2d16:	4a08      	ldr	r2, [pc, #32]	; (2d38 <Clock_Ip_DisableModuleClock+0x40>)
    2d18:	9b03      	ldr	r3, [sp, #12]
    2d1a:	00db      	lsls	r3, r3, #3
    2d1c:	4413      	add	r3, r2
    2d1e:	685b      	ldr	r3, [r3, #4]
    2d20:	2101      	movs	r1, #1
    2d22:	9801      	ldr	r0, [sp, #4]
    2d24:	4798      	blx	r3
}
    2d26:	bf00      	nop
    2d28:	b005      	add	sp, #20
    2d2a:	f85d fb04 	ldr.w	pc, [sp], #4
    2d2e:	bf00      	nop
    2d30:	00017db8 	.word	0x00017db8
    2d34:	00017d58 	.word	0x00017d58
    2d38:	00018340 	.word	0x00018340

00002d3c <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2d3c:	b500      	push	{lr}
    2d3e:	b085      	sub	sp, #20
    2d40:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2d42:	490c      	ldr	r1, [pc, #48]	; (2d74 <Clock_Ip_EnableModuleClock+0x38>)
    2d44:	9a01      	ldr	r2, [sp, #4]
    2d46:	4613      	mov	r3, r2
    2d48:	00db      	lsls	r3, r3, #3
    2d4a:	4413      	add	r3, r2
    2d4c:	440b      	add	r3, r1
    2d4e:	3301      	adds	r3, #1
    2d50:	781b      	ldrb	r3, [r3, #0]
    2d52:	461a      	mov	r2, r3
    2d54:	4b08      	ldr	r3, [pc, #32]	; (2d78 <Clock_Ip_EnableModuleClock+0x3c>)
    2d56:	5c9b      	ldrb	r3, [r3, r2]
    2d58:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2d5a:	4a08      	ldr	r2, [pc, #32]	; (2d7c <Clock_Ip_EnableModuleClock+0x40>)
    2d5c:	9b03      	ldr	r3, [sp, #12]
    2d5e:	00db      	lsls	r3, r3, #3
    2d60:	4413      	add	r3, r2
    2d62:	685b      	ldr	r3, [r3, #4]
    2d64:	2100      	movs	r1, #0
    2d66:	9801      	ldr	r0, [sp, #4]
    2d68:	4798      	blx	r3
}
    2d6a:	bf00      	nop
    2d6c:	b005      	add	sp, #20
    2d6e:	f85d fb04 	ldr.w	pc, [sp], #4
    2d72:	bf00      	nop
    2d74:	00017db8 	.word	0x00017db8
    2d78:	00017d58 	.word	0x00017d58
    2d7c:	00018340 	.word	0x00018340

00002d80 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2d80:	b500      	push	{lr}
    2d82:	b083      	sub	sp, #12
    2d84:	9001      	str	r0, [sp, #4]
    2d86:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2d88:	4b08      	ldr	r3, [pc, #32]	; (2dac <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2d8a:	2200      	movs	r2, #0
    2d8c:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2d8e:	4b08      	ldr	r3, [pc, #32]	; (2db0 <Clock_Ip_PowerModeChangeNotification+0x30>)
    2d90:	681b      	ldr	r3, [r3, #0]
    2d92:	2102      	movs	r1, #2
    2d94:	4618      	mov	r0, r3
    2d96:	f002 fd75 	bl	5884 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2d9a:	9900      	ldr	r1, [sp, #0]
    2d9c:	9801      	ldr	r0, [sp, #4]
    2d9e:	f002 fc51 	bl	5644 <Clock_Ip_ClockPowerModeChangeNotification>
}
    2da2:	bf00      	nop
    2da4:	b003      	add	sp, #12
    2da6:	f85d fb04 	ldr.w	pc, [sp], #4
    2daa:	bf00      	nop
    2dac:	1fff8b10 	.word	0x1fff8b10
    2db0:	1fff8b38 	.word	0x1fff8b38

00002db4 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2db4:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2db6:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2dba:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2dbc:	4b06      	ldr	r3, [pc, #24]	; (2dd8 <Clock_Ip_SetWaitStates+0x24>)
    2dbe:	785b      	ldrb	r3, [r3, #1]
    2dc0:	2b00      	cmp	r3, #0
    2dc2:	d005      	beq.n	2dd0 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2dc4:	9b01      	ldr	r3, [sp, #4]
    2dc6:	3b01      	subs	r3, #1
    2dc8:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2dca:	9b01      	ldr	r3, [sp, #4]
    2dcc:	2b00      	cmp	r3, #0
    2dce:	d1f9      	bne.n	2dc4 <Clock_Ip_SetWaitStates+0x10>
    }
}
    2dd0:	bf00      	nop
    2dd2:	b002      	add	sp, #8
    2dd4:	4770      	bx	lr
    2dd6:	bf00      	nop
    2dd8:	1fff8b40 	.word	0x1fff8b40

00002ddc <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2ddc:	b500      	push	{lr}
    2dde:	b083      	sub	sp, #12
    2de0:	9001      	str	r0, [sp, #4]
    2de2:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2de4:	4b04      	ldr	r3, [pc, #16]	; (2df8 <Clock_Ip_ReportClockErrors+0x1c>)
    2de6:	681b      	ldr	r3, [r3, #0]
    2de8:	9900      	ldr	r1, [sp, #0]
    2dea:	9801      	ldr	r0, [sp, #4]
    2dec:	4798      	blx	r3
}
    2dee:	bf00      	nop
    2df0:	b003      	add	sp, #12
    2df2:	f85d fb04 	ldr.w	pc, [sp], #4
    2df6:	bf00      	nop
    2df8:	1fff8b14 	.word	0x1fff8b14

00002dfc <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2dfc:	b500      	push	{lr}
    2dfe:	b085      	sub	sp, #20
    2e00:	9003      	str	r0, [sp, #12]
    2e02:	9102      	str	r1, [sp, #8]
    2e04:	9201      	str	r2, [sp, #4]
    2e06:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2e08:	2000      	movs	r0, #0
    2e0a:	f7fe ffd1 	bl	1db0 <OsIf_GetCounter>
    2e0e:	4602      	mov	r2, r0
    2e10:	9b03      	ldr	r3, [sp, #12]
    2e12:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2e14:	9b02      	ldr	r3, [sp, #8]
    2e16:	2200      	movs	r2, #0
    2e18:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2e1a:	2100      	movs	r1, #0
    2e1c:	9800      	ldr	r0, [sp, #0]
    2e1e:	f7ff f813 	bl	1e48 <OsIf_MicrosToTicks>
    2e22:	4602      	mov	r2, r0
    2e24:	9b01      	ldr	r3, [sp, #4]
    2e26:	601a      	str	r2, [r3, #0]
}
    2e28:	bf00      	nop
    2e2a:	b005      	add	sp, #20
    2e2c:	f85d fb04 	ldr.w	pc, [sp], #4

00002e30 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2e30:	b500      	push	{lr}
    2e32:	b087      	sub	sp, #28
    2e34:	9003      	str	r0, [sp, #12]
    2e36:	9102      	str	r1, [sp, #8]
    2e38:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2e3a:	2300      	movs	r3, #0
    2e3c:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2e40:	2100      	movs	r1, #0
    2e42:	9803      	ldr	r0, [sp, #12]
    2e44:	f7fe ffcd 	bl	1de2 <OsIf_GetElapsed>
    2e48:	4602      	mov	r2, r0
    2e4a:	9b02      	ldr	r3, [sp, #8]
    2e4c:	681b      	ldr	r3, [r3, #0]
    2e4e:	441a      	add	r2, r3
    2e50:	9b02      	ldr	r3, [sp, #8]
    2e52:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2e54:	9b02      	ldr	r3, [sp, #8]
    2e56:	681b      	ldr	r3, [r3, #0]
    2e58:	9a01      	ldr	r2, [sp, #4]
    2e5a:	429a      	cmp	r2, r3
    2e5c:	d802      	bhi.n	2e64 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2e5e:	2301      	movs	r3, #1
    2e60:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2e64:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2e68:	4618      	mov	r0, r3
    2e6a:	b007      	add	sp, #28
    2e6c:	f85d fb04 	ldr.w	pc, [sp], #4

00002e70 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2e70:	b082      	sub	sp, #8
    2e72:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2e74:	bf00      	nop
    2e76:	b002      	add	sp, #8
    2e78:	4770      	bx	lr

00002e7a <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2e7a:	b500      	push	{lr}
    2e7c:	b083      	sub	sp, #12
    2e7e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e80:	9b01      	ldr	r3, [sp, #4]
    2e82:	2b00      	cmp	r3, #0
    2e84:	d002      	beq.n	2e8c <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    2e86:	9801      	ldr	r0, [sp, #4]
    2e88:	f000 f8ad 	bl	2fe6 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e8c:	bf00      	nop
    2e8e:	b003      	add	sp, #12
    2e90:	f85d fb04 	ldr.w	pc, [sp], #4

00002e94 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2e94:	b500      	push	{lr}
    2e96:	b083      	sub	sp, #12
    2e98:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e9a:	9b01      	ldr	r3, [sp, #4]
    2e9c:	2b00      	cmp	r3, #0
    2e9e:	d002      	beq.n	2ea6 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2ea0:	9801      	ldr	r0, [sp, #4]
    2ea2:	f000 f8cd 	bl	3040 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ea6:	bf00      	nop
    2ea8:	b003      	add	sp, #12
    2eaa:	f85d fb04 	ldr.w	pc, [sp], #4

00002eae <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2eae:	b500      	push	{lr}
    2eb0:	b083      	sub	sp, #12
    2eb2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2eb4:	9b01      	ldr	r3, [sp, #4]
    2eb6:	2b00      	cmp	r3, #0
    2eb8:	d002      	beq.n	2ec0 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2eba:	9801      	ldr	r0, [sp, #4]
    2ebc:	f000 f8ee 	bl	309c <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ec0:	bf00      	nop
    2ec2:	b003      	add	sp, #12
    2ec4:	f85d fb04 	ldr.w	pc, [sp], #4

00002ec8 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2ec8:	b500      	push	{lr}
    2eca:	b083      	sub	sp, #12
    2ecc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ece:	9b01      	ldr	r3, [sp, #4]
    2ed0:	2b00      	cmp	r3, #0
    2ed2:	d002      	beq.n	2eda <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2ed4:	9801      	ldr	r0, [sp, #4]
    2ed6:	f000 f8f9 	bl	30cc <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2eda:	bf00      	nop
    2edc:	b003      	add	sp, #12
    2ede:	f85d fb04 	ldr.w	pc, [sp], #4

00002ee2 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2ee2:	b500      	push	{lr}
    2ee4:	b083      	sub	sp, #12
    2ee6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ee8:	9b01      	ldr	r3, [sp, #4]
    2eea:	2b00      	cmp	r3, #0
    2eec:	d002      	beq.n	2ef4 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2eee:	9801      	ldr	r0, [sp, #4]
    2ef0:	f000 f904 	bl	30fc <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ef4:	bf00      	nop
    2ef6:	b003      	add	sp, #12
    2ef8:	f85d fb04 	ldr.w	pc, [sp], #4

00002efc <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2efc:	b500      	push	{lr}
    2efe:	b083      	sub	sp, #12
    2f00:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f02:	9b01      	ldr	r3, [sp, #4]
    2f04:	2b00      	cmp	r3, #0
    2f06:	d002      	beq.n	2f0e <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2f08:	9801      	ldr	r0, [sp, #4]
    2f0a:	f000 f90f 	bl	312c <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f0e:	bf00      	nop
    2f10:	b003      	add	sp, #12
    2f12:	f85d fb04 	ldr.w	pc, [sp], #4

00002f16 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2f16:	b500      	push	{lr}
    2f18:	b083      	sub	sp, #12
    2f1a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f1c:	9b01      	ldr	r3, [sp, #4]
    2f1e:	2b00      	cmp	r3, #0
    2f20:	d002      	beq.n	2f28 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2f22:	9801      	ldr	r0, [sp, #4]
    2f24:	f000 f91a 	bl	315c <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f28:	bf00      	nop
    2f2a:	b003      	add	sp, #12
    2f2c:	f85d fb04 	ldr.w	pc, [sp], #4

00002f30 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2f30:	b500      	push	{lr}
    2f32:	b083      	sub	sp, #12
    2f34:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f36:	9b01      	ldr	r3, [sp, #4]
    2f38:	2b00      	cmp	r3, #0
    2f3a:	d002      	beq.n	2f42 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2f3c:	9801      	ldr	r0, [sp, #4]
    2f3e:	f000 f925 	bl	318c <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f42:	bf00      	nop
    2f44:	b003      	add	sp, #12
    2f46:	f85d fb04 	ldr.w	pc, [sp], #4

00002f4a <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2f4a:	b500      	push	{lr}
    2f4c:	b083      	sub	sp, #12
    2f4e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f50:	9b01      	ldr	r3, [sp, #4]
    2f52:	2b00      	cmp	r3, #0
    2f54:	d002      	beq.n	2f5c <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    2f56:	9801      	ldr	r0, [sp, #4]
    2f58:	f000 f930 	bl	31bc <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f5c:	bf00      	nop
    2f5e:	b003      	add	sp, #12
    2f60:	f85d fb04 	ldr.w	pc, [sp], #4

00002f64 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2f64:	b500      	push	{lr}
    2f66:	b083      	sub	sp, #12
    2f68:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f6a:	9b01      	ldr	r3, [sp, #4]
    2f6c:	2b00      	cmp	r3, #0
    2f6e:	d002      	beq.n	2f76 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2f70:	9801      	ldr	r0, [sp, #4]
    2f72:	f000 f93b 	bl	31ec <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f76:	bf00      	nop
    2f78:	b003      	add	sp, #12
    2f7a:	f85d fb04 	ldr.w	pc, [sp], #4

00002f7e <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2f7e:	b500      	push	{lr}
    2f80:	b083      	sub	sp, #12
    2f82:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f84:	9b01      	ldr	r3, [sp, #4]
    2f86:	2b00      	cmp	r3, #0
    2f88:	d002      	beq.n	2f90 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    2f8a:	9801      	ldr	r0, [sp, #4]
    2f8c:	f000 f946 	bl	321c <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f90:	bf00      	nop
    2f92:	b003      	add	sp, #12
    2f94:	f85d fb04 	ldr.w	pc, [sp], #4

00002f98 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    2f98:	b500      	push	{lr}
    2f9a:	b083      	sub	sp, #12
    2f9c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f9e:	9b01      	ldr	r3, [sp, #4]
    2fa0:	2b00      	cmp	r3, #0
    2fa2:	d002      	beq.n	2faa <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    2fa4:	9801      	ldr	r0, [sp, #4]
    2fa6:	f000 f951 	bl	324c <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2faa:	bf00      	nop
    2fac:	b003      	add	sp, #12
    2fae:	f85d fb04 	ldr.w	pc, [sp], #4

00002fb2 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    2fb2:	b500      	push	{lr}
    2fb4:	b083      	sub	sp, #12
    2fb6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2fb8:	9b01      	ldr	r3, [sp, #4]
    2fba:	2b00      	cmp	r3, #0
    2fbc:	d002      	beq.n	2fc4 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    2fbe:	9801      	ldr	r0, [sp, #4]
    2fc0:	f000 f95e 	bl	3280 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2fc4:	bf00      	nop
    2fc6:	b003      	add	sp, #12
    2fc8:	f85d fb04 	ldr.w	pc, [sp], #4

00002fcc <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2fcc:	b500      	push	{lr}
    2fce:	b083      	sub	sp, #12
    2fd0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2fd2:	9b01      	ldr	r3, [sp, #4]
    2fd4:	2b00      	cmp	r3, #0
    2fd6:	d002      	beq.n	2fde <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2fd8:	9801      	ldr	r0, [sp, #4]
    2fda:	f000 f98b 	bl	32f4 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2fde:	bf00      	nop
    2fe0:	b003      	add	sp, #12
    2fe2:	f85d fb04 	ldr.w	pc, [sp], #4

00002fe6 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2fe6:	b086      	sub	sp, #24
    2fe8:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2fea:	9b01      	ldr	r3, [sp, #4]
    2fec:	681a      	ldr	r2, [r3, #0]
    2fee:	4911      	ldr	r1, [pc, #68]	; (3034 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2ff0:	4613      	mov	r3, r2
    2ff2:	00db      	lsls	r3, r3, #3
    2ff4:	4413      	add	r3, r2
    2ff6:	440b      	add	r3, r1
    2ff8:	781b      	ldrb	r3, [r3, #0]
    2ffa:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2ffc:	9b01      	ldr	r3, [sp, #4]
    2ffe:	685b      	ldr	r3, [r3, #4]
    3000:	4a0d      	ldr	r2, [pc, #52]	; (3038 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    3002:	5cd3      	ldrb	r3, [r2, r3]
    3004:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    3006:	4a0d      	ldr	r2, [pc, #52]	; (303c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3008:	9b05      	ldr	r3, [sp, #20]
    300a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    300e:	681b      	ldr	r3, [r3, #0]
    3010:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    3012:	9b03      	ldr	r3, [sp, #12]
    3014:	f023 0307 	bic.w	r3, r3, #7
    3018:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    301a:	9a03      	ldr	r2, [sp, #12]
    301c:	9b04      	ldr	r3, [sp, #16]
    301e:	4313      	orrs	r3, r2
    3020:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    3022:	4a06      	ldr	r2, [pc, #24]	; (303c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3024:	9b05      	ldr	r3, [sp, #20]
    3026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    302a:	9a03      	ldr	r2, [sp, #12]
    302c:	601a      	str	r2, [r3, #0]
}
    302e:	bf00      	nop
    3030:	b006      	add	sp, #24
    3032:	4770      	bx	lr
    3034:	00017db8 	.word	0x00017db8
    3038:	000181b0 	.word	0x000181b0
    303c:	000181f4 	.word	0x000181f4

00003040 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3040:	b086      	sub	sp, #24
    3042:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3044:	9b01      	ldr	r3, [sp, #4]
    3046:	681a      	ldr	r2, [r3, #0]
    3048:	4911      	ldr	r1, [pc, #68]	; (3090 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    304a:	4613      	mov	r3, r2
    304c:	00db      	lsls	r3, r3, #3
    304e:	4413      	add	r3, r2
    3050:	440b      	add	r3, r1
    3052:	781b      	ldrb	r3, [r3, #0]
    3054:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3056:	9b01      	ldr	r3, [sp, #4]
    3058:	685b      	ldr	r3, [r3, #4]
    305a:	4a0e      	ldr	r2, [pc, #56]	; (3094 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    305c:	5cd3      	ldrb	r3, [r2, r3]
    305e:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    3060:	4a0d      	ldr	r2, [pc, #52]	; (3098 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    3062:	9b05      	ldr	r3, [sp, #20]
    3064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3068:	681b      	ldr	r3, [r3, #0]
    306a:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    306c:	9b03      	ldr	r3, [sp, #12]
    306e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3072:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    3074:	9b04      	ldr	r3, [sp, #16]
    3076:	021b      	lsls	r3, r3, #8
    3078:	9a03      	ldr	r2, [sp, #12]
    307a:	4313      	orrs	r3, r2
    307c:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    307e:	4a06      	ldr	r2, [pc, #24]	; (3098 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    3080:	9b05      	ldr	r3, [sp, #20]
    3082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3086:	9a03      	ldr	r2, [sp, #12]
    3088:	601a      	str	r2, [r3, #0]
}
    308a:	bf00      	nop
    308c:	b006      	add	sp, #24
    308e:	4770      	bx	lr
    3090:	00017db8 	.word	0x00017db8
    3094:	000181b0 	.word	0x000181b0
    3098:	000181f4 	.word	0x000181f4

0000309c <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    309c:	b084      	sub	sp, #16
    309e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    30a0:	4b09      	ldr	r3, [pc, #36]	; (30c8 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    30a2:	695b      	ldr	r3, [r3, #20]
    30a4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    30a6:	9b03      	ldr	r3, [sp, #12]
    30a8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    30ac:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    30ae:	9b01      	ldr	r3, [sp, #4]
    30b0:	685b      	ldr	r3, [r3, #4]
    30b2:	3b01      	subs	r3, #1
    30b4:	041b      	lsls	r3, r3, #16
    30b6:	9a03      	ldr	r2, [sp, #12]
    30b8:	4313      	orrs	r3, r2
    30ba:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    30bc:	4a02      	ldr	r2, [pc, #8]	; (30c8 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    30be:	9b03      	ldr	r3, [sp, #12]
    30c0:	6153      	str	r3, [r2, #20]
}
    30c2:	bf00      	nop
    30c4:	b004      	add	sp, #16
    30c6:	4770      	bx	lr
    30c8:	40064000 	.word	0x40064000

000030cc <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    30cc:	b084      	sub	sp, #16
    30ce:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    30d0:	4b09      	ldr	r3, [pc, #36]	; (30f8 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    30d2:	695b      	ldr	r3, [r3, #20]
    30d4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    30d6:	9b03      	ldr	r3, [sp, #12]
    30d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    30dc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    30de:	9b01      	ldr	r3, [sp, #4]
    30e0:	685b      	ldr	r3, [r3, #4]
    30e2:	3b01      	subs	r3, #1
    30e4:	011b      	lsls	r3, r3, #4
    30e6:	9a03      	ldr	r2, [sp, #12]
    30e8:	4313      	orrs	r3, r2
    30ea:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    30ec:	4a02      	ldr	r2, [pc, #8]	; (30f8 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    30ee:	9b03      	ldr	r3, [sp, #12]
    30f0:	6153      	str	r3, [r2, #20]
}
    30f2:	bf00      	nop
    30f4:	b004      	add	sp, #16
    30f6:	4770      	bx	lr
    30f8:	40064000 	.word	0x40064000

000030fc <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    30fc:	b084      	sub	sp, #16
    30fe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3100:	4b09      	ldr	r3, [pc, #36]	; (3128 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3102:	695b      	ldr	r3, [r3, #20]
    3104:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    3106:	9b03      	ldr	r3, [sp, #12]
    3108:	f023 030f 	bic.w	r3, r3, #15
    310c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    310e:	9b01      	ldr	r3, [sp, #4]
    3110:	685b      	ldr	r3, [r3, #4]
    3112:	3b01      	subs	r3, #1
    3114:	9a03      	ldr	r2, [sp, #12]
    3116:	4313      	orrs	r3, r2
    3118:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    311a:	4a03      	ldr	r2, [pc, #12]	; (3128 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    311c:	9b03      	ldr	r3, [sp, #12]
    311e:	6153      	str	r3, [r2, #20]
}
    3120:	bf00      	nop
    3122:	b004      	add	sp, #16
    3124:	4770      	bx	lr
    3126:	bf00      	nop
    3128:	40064000 	.word	0x40064000

0000312c <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    312c:	b084      	sub	sp, #16
    312e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3130:	4b09      	ldr	r3, [pc, #36]	; (3158 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    3132:	699b      	ldr	r3, [r3, #24]
    3134:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    3136:	9b03      	ldr	r3, [sp, #12]
    3138:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    313c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    313e:	9b01      	ldr	r3, [sp, #4]
    3140:	685b      	ldr	r3, [r3, #4]
    3142:	3b01      	subs	r3, #1
    3144:	041b      	lsls	r3, r3, #16
    3146:	9a03      	ldr	r2, [sp, #12]
    3148:	4313      	orrs	r3, r2
    314a:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    314c:	4a02      	ldr	r2, [pc, #8]	; (3158 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    314e:	9b03      	ldr	r3, [sp, #12]
    3150:	6193      	str	r3, [r2, #24]
}
    3152:	bf00      	nop
    3154:	b004      	add	sp, #16
    3156:	4770      	bx	lr
    3158:	40064000 	.word	0x40064000

0000315c <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    315c:	b084      	sub	sp, #16
    315e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3160:	4b09      	ldr	r3, [pc, #36]	; (3188 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    3162:	699b      	ldr	r3, [r3, #24]
    3164:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    3166:	9b03      	ldr	r3, [sp, #12]
    3168:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    316c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    316e:	9b01      	ldr	r3, [sp, #4]
    3170:	685b      	ldr	r3, [r3, #4]
    3172:	3b01      	subs	r3, #1
    3174:	011b      	lsls	r3, r3, #4
    3176:	9a03      	ldr	r2, [sp, #12]
    3178:	4313      	orrs	r3, r2
    317a:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    317c:	4a02      	ldr	r2, [pc, #8]	; (3188 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    317e:	9b03      	ldr	r3, [sp, #12]
    3180:	6193      	str	r3, [r2, #24]
}
    3182:	bf00      	nop
    3184:	b004      	add	sp, #16
    3186:	4770      	bx	lr
    3188:	40064000 	.word	0x40064000

0000318c <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    318c:	b084      	sub	sp, #16
    318e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3190:	4b09      	ldr	r3, [pc, #36]	; (31b8 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    3192:	699b      	ldr	r3, [r3, #24]
    3194:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    3196:	9b03      	ldr	r3, [sp, #12]
    3198:	f023 030f 	bic.w	r3, r3, #15
    319c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    319e:	9b01      	ldr	r3, [sp, #4]
    31a0:	685b      	ldr	r3, [r3, #4]
    31a2:	3b01      	subs	r3, #1
    31a4:	9a03      	ldr	r2, [sp, #12]
    31a6:	4313      	orrs	r3, r2
    31a8:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    31aa:	4a03      	ldr	r2, [pc, #12]	; (31b8 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    31ac:	9b03      	ldr	r3, [sp, #12]
    31ae:	6193      	str	r3, [r2, #24]
}
    31b0:	bf00      	nop
    31b2:	b004      	add	sp, #16
    31b4:	4770      	bx	lr
    31b6:	bf00      	nop
    31b8:	40064000 	.word	0x40064000

000031bc <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    31bc:	b084      	sub	sp, #16
    31be:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    31c0:	4b09      	ldr	r3, [pc, #36]	; (31e8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    31c2:	69db      	ldr	r3, [r3, #28]
    31c4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    31c6:	9b03      	ldr	r3, [sp, #12]
    31c8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    31cc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    31ce:	9b01      	ldr	r3, [sp, #4]
    31d0:	685b      	ldr	r3, [r3, #4]
    31d2:	3b01      	subs	r3, #1
    31d4:	041b      	lsls	r3, r3, #16
    31d6:	9a03      	ldr	r2, [sp, #12]
    31d8:	4313      	orrs	r3, r2
    31da:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    31dc:	4a02      	ldr	r2, [pc, #8]	; (31e8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    31de:	9b03      	ldr	r3, [sp, #12]
    31e0:	61d3      	str	r3, [r2, #28]
}
    31e2:	bf00      	nop
    31e4:	b004      	add	sp, #16
    31e6:	4770      	bx	lr
    31e8:	40064000 	.word	0x40064000

000031ec <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    31ec:	b084      	sub	sp, #16
    31ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    31f0:	4b09      	ldr	r3, [pc, #36]	; (3218 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    31f2:	69db      	ldr	r3, [r3, #28]
    31f4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    31f6:	9b03      	ldr	r3, [sp, #12]
    31f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    31fc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    31fe:	9b01      	ldr	r3, [sp, #4]
    3200:	685b      	ldr	r3, [r3, #4]
    3202:	3b01      	subs	r3, #1
    3204:	011b      	lsls	r3, r3, #4
    3206:	9a03      	ldr	r2, [sp, #12]
    3208:	4313      	orrs	r3, r2
    320a:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    320c:	4a02      	ldr	r2, [pc, #8]	; (3218 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    320e:	9b03      	ldr	r3, [sp, #12]
    3210:	61d3      	str	r3, [r2, #28]
}
    3212:	bf00      	nop
    3214:	b004      	add	sp, #16
    3216:	4770      	bx	lr
    3218:	40064000 	.word	0x40064000

0000321c <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    321c:	b084      	sub	sp, #16
    321e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3220:	4b09      	ldr	r3, [pc, #36]	; (3248 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3222:	69db      	ldr	r3, [r3, #28]
    3224:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    3226:	9b03      	ldr	r3, [sp, #12]
    3228:	f023 030f 	bic.w	r3, r3, #15
    322c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    322e:	9b01      	ldr	r3, [sp, #4]
    3230:	685b      	ldr	r3, [r3, #4]
    3232:	3b01      	subs	r3, #1
    3234:	9a03      	ldr	r2, [sp, #12]
    3236:	4313      	orrs	r3, r2
    3238:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    323a:	4a03      	ldr	r2, [pc, #12]	; (3248 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    323c:	9b03      	ldr	r3, [sp, #12]
    323e:	61d3      	str	r3, [r2, #28]
}
    3240:	bf00      	nop
    3242:	b004      	add	sp, #16
    3244:	4770      	bx	lr
    3246:	bf00      	nop
    3248:	40064000 	.word	0x40064000

0000324c <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    324c:	b084      	sub	sp, #16
    324e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3250:	4b0a      	ldr	r3, [pc, #40]	; (327c <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3252:	685b      	ldr	r3, [r3, #4]
    3254:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    3256:	9b03      	ldr	r3, [sp, #12]
    3258:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    325c:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    325e:	9b01      	ldr	r3, [sp, #4]
    3260:	685b      	ldr	r3, [r3, #4]
    3262:	3b01      	subs	r3, #1
    3264:	021b      	lsls	r3, r3, #8
    3266:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    326a:	9a03      	ldr	r2, [sp, #12]
    326c:	4313      	orrs	r3, r2
    326e:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3270:	4a02      	ldr	r2, [pc, #8]	; (327c <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3272:	9b03      	ldr	r3, [sp, #12]
    3274:	6053      	str	r3, [r2, #4]
}
    3276:	bf00      	nop
    3278:	b004      	add	sp, #16
    327a:	4770      	bx	lr
    327c:	40048000 	.word	0x40048000

00003280 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3280:	b084      	sub	sp, #16
    3282:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    3284:	4919      	ldr	r1, [pc, #100]	; (32ec <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3286:	9b01      	ldr	r3, [sp, #4]
    3288:	681a      	ldr	r2, [r3, #0]
    328a:	4819      	ldr	r0, [pc, #100]	; (32f0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    328c:	4613      	mov	r3, r2
    328e:	00db      	lsls	r3, r3, #3
    3290:	4413      	add	r3, r2
    3292:	4403      	add	r3, r0
    3294:	3305      	adds	r3, #5
    3296:	781b      	ldrb	r3, [r3, #0]
    3298:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    329c:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    329e:	9b03      	ldr	r3, [sp, #12]
    32a0:	f023 030f 	bic.w	r3, r3, #15
    32a4:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    32a6:	9b01      	ldr	r3, [sp, #4]
    32a8:	685b      	ldr	r3, [r3, #4]
    32aa:	3b01      	subs	r3, #1
    32ac:	f003 0307 	and.w	r3, r3, #7
    32b0:	9a03      	ldr	r2, [sp, #12]
    32b2:	4313      	orrs	r3, r2
    32b4:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    32b6:	9b01      	ldr	r3, [sp, #4]
    32b8:	7a1b      	ldrb	r3, [r3, #8]
    32ba:	3b01      	subs	r3, #1
    32bc:	00db      	lsls	r3, r3, #3
    32be:	f003 0308 	and.w	r3, r3, #8
    32c2:	9a03      	ldr	r2, [sp, #12]
    32c4:	4313      	orrs	r3, r2
    32c6:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    32c8:	4908      	ldr	r1, [pc, #32]	; (32ec <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    32ca:	9b01      	ldr	r3, [sp, #4]
    32cc:	681a      	ldr	r2, [r3, #0]
    32ce:	4808      	ldr	r0, [pc, #32]	; (32f0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    32d0:	4613      	mov	r3, r2
    32d2:	00db      	lsls	r3, r3, #3
    32d4:	4413      	add	r3, r2
    32d6:	4403      	add	r3, r0
    32d8:	3305      	adds	r3, #5
    32da:	781b      	ldrb	r3, [r3, #0]
    32dc:	461a      	mov	r2, r3
    32de:	9b03      	ldr	r3, [sp, #12]
    32e0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    32e4:	bf00      	nop
    32e6:	b004      	add	sp, #16
    32e8:	4770      	bx	lr
    32ea:	bf00      	nop
    32ec:	40065000 	.word	0x40065000
    32f0:	00017db8 	.word	0x00017db8

000032f4 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    32f4:	b084      	sub	sp, #16
    32f6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    32f8:	4b10      	ldr	r3, [pc, #64]	; (333c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    32fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    32fc:	4a0f      	ldr	r2, [pc, #60]	; (333c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    32fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3302:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    3304:	4b0d      	ldr	r3, [pc, #52]	; (333c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3308:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    330a:	9b03      	ldr	r3, [sp, #12]
    330c:	f023 030f 	bic.w	r3, r3, #15
    3310:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3312:	9b01      	ldr	r3, [sp, #4]
    3314:	685b      	ldr	r3, [r3, #4]
    3316:	3b01      	subs	r3, #1
    3318:	005b      	lsls	r3, r3, #1
    331a:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    331e:	9b01      	ldr	r3, [sp, #4]
    3320:	7a1b      	ldrb	r3, [r3, #8]
    3322:	3b01      	subs	r3, #1
    3324:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3328:	4313      	orrs	r3, r2
    332a:	9a03      	ldr	r2, [sp, #12]
    332c:	4313      	orrs	r3, r2
    332e:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    3330:	4a02      	ldr	r2, [pc, #8]	; (333c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3332:	9b03      	ldr	r3, [sp, #12]
    3334:	6693      	str	r3, [r2, #104]	; 0x68
}
    3336:	bf00      	nop
    3338:	b004      	add	sp, #16
    333a:	4770      	bx	lr
    333c:	40048000 	.word	0x40048000

00003340 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    3340:	b082      	sub	sp, #8
    3342:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3344:	bf00      	nop
    3346:	b002      	add	sp, #8
    3348:	4770      	bx	lr
	...

0000334c <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    334c:	b082      	sub	sp, #8
    334e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3350:	bf00      	nop
    3352:	b002      	add	sp, #8
    3354:	4770      	bx	lr

00003356 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    3356:	b082      	sub	sp, #8
    3358:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    335a:	bf00      	nop
    335c:	b002      	add	sp, #8
    335e:	4770      	bx	lr

00003360 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3360:	b500      	push	{lr}
    3362:	b083      	sub	sp, #12
    3364:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3366:	9b01      	ldr	r3, [sp, #4]
    3368:	2b00      	cmp	r3, #0
    336a:	d002      	beq.n	3372 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    336c:	9801      	ldr	r0, [sp, #4]
    336e:	f000 f86a 	bl	3446 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3372:	bf00      	nop
    3374:	b003      	add	sp, #12
    3376:	f85d fb04 	ldr.w	pc, [sp], #4

0000337a <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    337a:	b500      	push	{lr}
    337c:	b083      	sub	sp, #12
    337e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3380:	9b01      	ldr	r3, [sp, #4]
    3382:	2b00      	cmp	r3, #0
    3384:	d002      	beq.n	338c <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    3386:	9801      	ldr	r0, [sp, #4]
    3388:	f000 f884 	bl	3494 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    338c:	bf00      	nop
    338e:	b003      	add	sp, #12
    3390:	f85d fb04 	ldr.w	pc, [sp], #4

00003394 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3394:	b500      	push	{lr}
    3396:	b089      	sub	sp, #36	; 0x24
    3398:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    339a:	2300      	movs	r3, #0
    339c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    33a0:	9b01      	ldr	r3, [sp, #4]
    33a2:	2b00      	cmp	r3, #0
    33a4:	d031      	beq.n	340a <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    33a6:	4b1b      	ldr	r3, [pc, #108]	; (3414 <Clock_Ip_CompleteSOSC+0x80>)
    33a8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    33ac:	f003 0301 	and.w	r3, r3, #1
    33b0:	2b00      	cmp	r3, #0
    33b2:	d02a      	beq.n	340a <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    33b4:	aa03      	add	r2, sp, #12
    33b6:	a904      	add	r1, sp, #16
    33b8:	a805      	add	r0, sp, #20
    33ba:	f24c 3350 	movw	r3, #50000	; 0xc350
    33be:	f7ff fd1d 	bl	2dfc <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    33c2:	4b14      	ldr	r3, [pc, #80]	; (3414 <Clock_Ip_CompleteSOSC+0x80>)
    33c4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    33c8:	0e1b      	lsrs	r3, r3, #24
    33ca:	f003 0301 	and.w	r3, r3, #1
    33ce:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    33d0:	9a03      	ldr	r2, [sp, #12]
    33d2:	a904      	add	r1, sp, #16
    33d4:	ab05      	add	r3, sp, #20
    33d6:	4618      	mov	r0, r3
    33d8:	f7ff fd2a 	bl	2e30 <Clock_Ip_TimeoutExpired>
    33dc:	4603      	mov	r3, r0
    33de:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    33e2:	9b06      	ldr	r3, [sp, #24]
    33e4:	2b00      	cmp	r3, #0
    33e6:	d106      	bne.n	33f6 <Clock_Ip_CompleteSOSC+0x62>
    33e8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    33ec:	f083 0301 	eor.w	r3, r3, #1
    33f0:	b2db      	uxtb	r3, r3
    33f2:	2b00      	cmp	r3, #0
    33f4:	d1e5      	bne.n	33c2 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    33f6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    33fa:	2b00      	cmp	r3, #0
    33fc:	d005      	beq.n	340a <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    33fe:	9b01      	ldr	r3, [sp, #4]
    3400:	681b      	ldr	r3, [r3, #0]
    3402:	4619      	mov	r1, r3
    3404:	2001      	movs	r0, #1
    3406:	f7ff fce9 	bl	2ddc <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    340a:	bf00      	nop
    340c:	b009      	add	sp, #36	; 0x24
    340e:	f85d fb04 	ldr.w	pc, [sp], #4
    3412:	bf00      	nop
    3414:	40064000 	.word	0x40064000

00003418 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    3418:	b500      	push	{lr}
    341a:	b083      	sub	sp, #12
    341c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    341e:	9801      	ldr	r0, [sp, #4]
    3420:	f000 f8c0 	bl	35a4 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3424:	bf00      	nop
    3426:	b003      	add	sp, #12
    3428:	f85d fb04 	ldr.w	pc, [sp], #4

0000342c <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    342c:	b500      	push	{lr}
    342e:	b083      	sub	sp, #12
    3430:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3432:	9b01      	ldr	r3, [sp, #4]
    3434:	2b00      	cmp	r3, #0
    3436:	d002      	beq.n	343e <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    3438:	9801      	ldr	r0, [sp, #4]
    343a:	f000 f8c3 	bl	35c4 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    343e:	bf00      	nop
    3440:	b003      	add	sp, #12
    3442:	f85d fb04 	ldr.w	pc, [sp], #4

00003446 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3446:	b082      	sub	sp, #8
    3448:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    344a:	4b11      	ldr	r3, [pc, #68]	; (3490 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    344c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3450:	4a0f      	ldr	r2, [pc, #60]	; (3490 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3452:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3456:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    345a:	4b0d      	ldr	r3, [pc, #52]	; (3490 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    345c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3460:	4a0b      	ldr	r2, [pc, #44]	; (3490 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3466:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    346a:	4b09      	ldr	r3, [pc, #36]	; (3490 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    346c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3470:	4a07      	ldr	r2, [pc, #28]	; (3490 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3472:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3476:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    347a:	4b05      	ldr	r3, [pc, #20]	; (3490 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    347c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3480:	4a03      	ldr	r2, [pc, #12]	; (3490 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3482:	f023 0301 	bic.w	r3, r3, #1
    3486:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    348a:	bf00      	nop
    348c:	b002      	add	sp, #8
    348e:	4770      	bx	lr
    3490:	40064000 	.word	0x40064000

00003494 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3494:	b082      	sub	sp, #8
    3496:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    3498:	9b01      	ldr	r3, [sp, #4]
    349a:	891b      	ldrh	r3, [r3, #8]
    349c:	2b01      	cmp	r3, #1
    349e:	d174      	bne.n	358a <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    34a0:	9b01      	ldr	r3, [sp, #4]
    34a2:	7bdb      	ldrb	r3, [r3, #15]
    34a4:	2b00      	cmp	r3, #0
    34a6:	d002      	beq.n	34ae <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    34a8:	2b01      	cmp	r3, #1
    34aa:	d009      	beq.n	34c0 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    34ac:	e011      	b.n	34d2 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    34ae:	4b39      	ldr	r3, [pc, #228]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    34b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    34b4:	4a37      	ldr	r2, [pc, #220]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    34b6:	f023 0308 	bic.w	r3, r3, #8
    34ba:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    34be:	e008      	b.n	34d2 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    34c0:	4b34      	ldr	r3, [pc, #208]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    34c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    34c6:	4a33      	ldr	r2, [pc, #204]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    34c8:	f043 0308 	orr.w	r3, r3, #8
    34cc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    34d0:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    34d2:	4b30      	ldr	r3, [pc, #192]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    34d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    34d8:	4a2e      	ldr	r2, [pc, #184]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    34da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    34de:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    34e2:	9b01      	ldr	r3, [sp, #4]
    34e4:	685b      	ldr	r3, [r3, #4]
    34e6:	4a2c      	ldr	r2, [pc, #176]	; (3598 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    34e8:	4293      	cmp	r3, r2
    34ea:	d90d      	bls.n	3508 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    34ec:	9b01      	ldr	r3, [sp, #4]
    34ee:	685b      	ldr	r3, [r3, #4]
    34f0:	4a2a      	ldr	r2, [pc, #168]	; (359c <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    34f2:	4293      	cmp	r3, r2
    34f4:	d208      	bcs.n	3508 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    34f6:	4b27      	ldr	r3, [pc, #156]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    34f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    34fc:	4a25      	ldr	r2, [pc, #148]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    34fe:	f043 0320 	orr.w	r3, r3, #32
    3502:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3506:	e007      	b.n	3518 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    3508:	4b22      	ldr	r3, [pc, #136]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    350a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    350e:	4a21      	ldr	r2, [pc, #132]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3510:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    3514:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    3518:	9b01      	ldr	r3, [sp, #4]
    351a:	7b1b      	ldrb	r3, [r3, #12]
    351c:	2b00      	cmp	r3, #0
    351e:	d108      	bne.n	3532 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    3520:	4b1c      	ldr	r3, [pc, #112]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3522:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3526:	4a1b      	ldr	r2, [pc, #108]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3528:	f043 0304 	orr.w	r3, r3, #4
    352c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3530:	e007      	b.n	3542 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    3532:	4b18      	ldr	r3, [pc, #96]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3534:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3538:	4a16      	ldr	r2, [pc, #88]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    353a:	f023 0304 	bic.w	r3, r3, #4
    353e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3542:	9b01      	ldr	r3, [sp, #4]
    3544:	7c1b      	ldrb	r3, [r3, #16]
    3546:	2b02      	cmp	r3, #2
    3548:	d011      	beq.n	356e <Clock_Ip_SetSOSC_TrustedCall+0xda>
    354a:	2b02      	cmp	r3, #2
    354c:	dc14      	bgt.n	3578 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    354e:	2b00      	cmp	r3, #0
    3550:	d002      	beq.n	3558 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    3552:	2b01      	cmp	r3, #1
    3554:	d005      	beq.n	3562 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    3556:	e00f      	b.n	3578 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3558:	4b0e      	ldr	r3, [pc, #56]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    355a:	2201      	movs	r2, #1
    355c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3560:	e014      	b.n	358c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3562:	4b0c      	ldr	r3, [pc, #48]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3564:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    3568:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    356c:	e00e      	b.n	358c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    356e:	4b09      	ldr	r3, [pc, #36]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3570:	4a0b      	ldr	r2, [pc, #44]	; (35a0 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    3572:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    3576:	e009      	b.n	358c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3578:	4b06      	ldr	r3, [pc, #24]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    357a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    357e:	4a05      	ldr	r2, [pc, #20]	; (3594 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3580:	f043 0301 	orr.w	r3, r3, #1
    3584:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3588:	e000      	b.n	358c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    358a:	bf00      	nop
}
    358c:	bf00      	nop
    358e:	b002      	add	sp, #8
    3590:	4770      	bx	lr
    3592:	bf00      	nop
    3594:	40064000 	.word	0x40064000
    3598:	003d08ff 	.word	0x003d08ff
    359c:	007a1200 	.word	0x007a1200
    35a0:	00030001 	.word	0x00030001

000035a4 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    35a4:	b082      	sub	sp, #8
    35a6:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    35a8:	4b05      	ldr	r3, [pc, #20]	; (35c0 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    35aa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    35ae:	4a04      	ldr	r2, [pc, #16]	; (35c0 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    35b0:	f023 0301 	bic.w	r3, r3, #1
    35b4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    35b8:	bf00      	nop
    35ba:	b002      	add	sp, #8
    35bc:	4770      	bx	lr
    35be:	bf00      	nop
    35c0:	40064000 	.word	0x40064000

000035c4 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    35c4:	b082      	sub	sp, #8
    35c6:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    35c8:	9b01      	ldr	r3, [sp, #4]
    35ca:	891b      	ldrh	r3, [r3, #8]
    35cc:	2b01      	cmp	r3, #1
    35ce:	d107      	bne.n	35e0 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    35d0:	4b05      	ldr	r3, [pc, #20]	; (35e8 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    35d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    35d6:	4a04      	ldr	r2, [pc, #16]	; (35e8 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    35d8:	f043 0301 	orr.w	r3, r3, #1
    35dc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    35e0:	bf00      	nop
    35e2:	b002      	add	sp, #8
    35e4:	4770      	bx	lr
    35e6:	bf00      	nop
    35e8:	40064000 	.word	0x40064000

000035ec <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    35ec:	b082      	sub	sp, #8
    35ee:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    35f0:	bf00      	nop
    35f2:	b002      	add	sp, #8
    35f4:	4770      	bx	lr

000035f6 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    35f6:	b082      	sub	sp, #8
    35f8:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    35fa:	2300      	movs	r3, #0
}
    35fc:	4618      	mov	r0, r3
    35fe:	b002      	add	sp, #8
    3600:	4770      	bx	lr

00003602 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    3602:	b082      	sub	sp, #8
    3604:	9001      	str	r0, [sp, #4]
    3606:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    3608:	bf00      	nop
    360a:	b002      	add	sp, #8
    360c:	4770      	bx	lr
	...

00003610 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    3610:	b082      	sub	sp, #8
    3612:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3614:	bf00      	nop
    3616:	b002      	add	sp, #8
    3618:	4770      	bx	lr

0000361a <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    361a:	b082      	sub	sp, #8
    361c:	9001      	str	r0, [sp, #4]
    361e:	460b      	mov	r3, r1
    3620:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    3624:	bf00      	nop
    3626:	b002      	add	sp, #8
    3628:	4770      	bx	lr

0000362a <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    362a:	b500      	push	{lr}
    362c:	b083      	sub	sp, #12
    362e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3630:	9b01      	ldr	r3, [sp, #4]
    3632:	2b00      	cmp	r3, #0
    3634:	d002      	beq.n	363c <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    3636:	9801      	ldr	r0, [sp, #4]
    3638:	f000 f8e7 	bl	380a <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    363c:	bf00      	nop
    363e:	b003      	add	sp, #12
    3640:	f85d fb04 	ldr.w	pc, [sp], #4

00003644 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3644:	b500      	push	{lr}
    3646:	b085      	sub	sp, #20
    3648:	9001      	str	r0, [sp, #4]
    364a:	460b      	mov	r3, r1
    364c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3650:	9b01      	ldr	r3, [sp, #4]
    3652:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3654:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3658:	2b00      	cmp	r3, #0
    365a:	d003      	beq.n	3664 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    365c:	2300      	movs	r3, #0
    365e:	f8ad 300c 	strh.w	r3, [sp, #12]
    3662:	e002      	b.n	366a <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3664:	2301      	movs	r3, #1
    3666:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    366a:	ab02      	add	r3, sp, #8
    366c:	4618      	mov	r0, r3
    366e:	f7ff ffdc 	bl	362a <Clock_Ip_ClockSetSimLPO1KEnable>
}
    3672:	bf00      	nop
    3674:	b005      	add	sp, #20
    3676:	f85d fb04 	ldr.w	pc, [sp], #4

0000367a <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    367a:	b500      	push	{lr}
    367c:	b083      	sub	sp, #12
    367e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3680:	9b01      	ldr	r3, [sp, #4]
    3682:	2b00      	cmp	r3, #0
    3684:	d002      	beq.n	368c <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    3686:	9801      	ldr	r0, [sp, #4]
    3688:	f000 f8d6 	bl	3838 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    368c:	bf00      	nop
    368e:	b003      	add	sp, #12
    3690:	f85d fb04 	ldr.w	pc, [sp], #4

00003694 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3694:	b500      	push	{lr}
    3696:	b085      	sub	sp, #20
    3698:	9001      	str	r0, [sp, #4]
    369a:	460b      	mov	r3, r1
    369c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    36a0:	9b01      	ldr	r3, [sp, #4]
    36a2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    36a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    36a8:	2b00      	cmp	r3, #0
    36aa:	d003      	beq.n	36b4 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    36ac:	2300      	movs	r3, #0
    36ae:	f8ad 300c 	strh.w	r3, [sp, #12]
    36b2:	e002      	b.n	36ba <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    36b4:	2301      	movs	r3, #1
    36b6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    36ba:	ab02      	add	r3, sp, #8
    36bc:	4618      	mov	r0, r3
    36be:	f7ff ffdc 	bl	367a <Clock_Ip_ClockSetSimLPO32KEnable>
}
    36c2:	bf00      	nop
    36c4:	b005      	add	sp, #20
    36c6:	f85d fb04 	ldr.w	pc, [sp], #4

000036ca <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    36ca:	b500      	push	{lr}
    36cc:	b083      	sub	sp, #12
    36ce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36d0:	9b01      	ldr	r3, [sp, #4]
    36d2:	2b00      	cmp	r3, #0
    36d4:	d002      	beq.n	36dc <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    36d6:	9801      	ldr	r0, [sp, #4]
    36d8:	f000 f8c6 	bl	3868 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36dc:	bf00      	nop
    36de:	b003      	add	sp, #12
    36e0:	f85d fb04 	ldr.w	pc, [sp], #4

000036e4 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    36e4:	b500      	push	{lr}
    36e6:	b085      	sub	sp, #20
    36e8:	9001      	str	r0, [sp, #4]
    36ea:	460b      	mov	r3, r1
    36ec:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    36f0:	9b01      	ldr	r3, [sp, #4]
    36f2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    36f4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    36f8:	2b00      	cmp	r3, #0
    36fa:	d003      	beq.n	3704 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    36fc:	2300      	movs	r3, #0
    36fe:	f8ad 300c 	strh.w	r3, [sp, #12]
    3702:	e002      	b.n	370a <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3704:	2301      	movs	r3, #1
    3706:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    370a:	ab02      	add	r3, sp, #8
    370c:	4618      	mov	r0, r3
    370e:	f7ff ffdc 	bl	36ca <Clock_Ip_ClockSetSimClkoutEnable>
}
    3712:	bf00      	nop
    3714:	b005      	add	sp, #20
    3716:	f85d fb04 	ldr.w	pc, [sp], #4

0000371a <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    371a:	b500      	push	{lr}
    371c:	b083      	sub	sp, #12
    371e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3720:	9b01      	ldr	r3, [sp, #4]
    3722:	2b00      	cmp	r3, #0
    3724:	d002      	beq.n	372c <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    3726:	9801      	ldr	r0, [sp, #4]
    3728:	f000 f8b6 	bl	3898 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    372c:	bf00      	nop
    372e:	b003      	add	sp, #12
    3730:	f85d fb04 	ldr.w	pc, [sp], #4

00003734 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3734:	b500      	push	{lr}
    3736:	b085      	sub	sp, #20
    3738:	9001      	str	r0, [sp, #4]
    373a:	460b      	mov	r3, r1
    373c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3740:	9b01      	ldr	r3, [sp, #4]
    3742:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3744:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3748:	2b00      	cmp	r3, #0
    374a:	d003      	beq.n	3754 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    374c:	2300      	movs	r3, #0
    374e:	f8ad 300c 	strh.w	r3, [sp, #12]
    3752:	e002      	b.n	375a <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3754:	2301      	movs	r3, #1
    3756:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    375a:	ab02      	add	r3, sp, #8
    375c:	4618      	mov	r0, r3
    375e:	f7ff ffdc 	bl	371a <Clock_Ip_ClockSetPccCgcEnable>
}
    3762:	bf00      	nop
    3764:	b005      	add	sp, #20
    3766:	f85d fb04 	ldr.w	pc, [sp], #4

0000376a <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    376a:	b500      	push	{lr}
    376c:	b083      	sub	sp, #12
    376e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3770:	9b01      	ldr	r3, [sp, #4]
    3772:	2b00      	cmp	r3, #0
    3774:	d002      	beq.n	377c <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    3776:	9801      	ldr	r0, [sp, #4]
    3778:	f000 f8bc 	bl	38f4 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    377c:	bf00      	nop
    377e:	b003      	add	sp, #12
    3780:	f85d fb04 	ldr.w	pc, [sp], #4

00003784 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    3784:	b500      	push	{lr}
    3786:	b085      	sub	sp, #20
    3788:	9001      	str	r0, [sp, #4]
    378a:	460b      	mov	r3, r1
    378c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3790:	9b01      	ldr	r3, [sp, #4]
    3792:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3794:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3798:	2b00      	cmp	r3, #0
    379a:	d003      	beq.n	37a4 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    379c:	2300      	movs	r3, #0
    379e:	f8ad 300c 	strh.w	r3, [sp, #12]
    37a2:	e002      	b.n	37aa <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    37a4:	2301      	movs	r3, #1
    37a6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    37aa:	ab02      	add	r3, sp, #8
    37ac:	4618      	mov	r0, r3
    37ae:	f7ff ffdc 	bl	376a <Clock_Ip_ClockSetSimGate>
}
    37b2:	bf00      	nop
    37b4:	b005      	add	sp, #20
    37b6:	f85d fb04 	ldr.w	pc, [sp], #4

000037ba <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    37ba:	b500      	push	{lr}
    37bc:	b083      	sub	sp, #12
    37be:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37c0:	9b01      	ldr	r3, [sp, #4]
    37c2:	2b00      	cmp	r3, #0
    37c4:	d002      	beq.n	37cc <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    37c6:	9801      	ldr	r0, [sp, #4]
    37c8:	f000 f8c0 	bl	394c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37cc:	bf00      	nop
    37ce:	b003      	add	sp, #12
    37d0:	f85d fb04 	ldr.w	pc, [sp], #4

000037d4 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    37d4:	b500      	push	{lr}
    37d6:	b085      	sub	sp, #20
    37d8:	9001      	str	r0, [sp, #4]
    37da:	460b      	mov	r3, r1
    37dc:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    37e0:	9b01      	ldr	r3, [sp, #4]
    37e2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    37e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    37e8:	2b00      	cmp	r3, #0
    37ea:	d003      	beq.n	37f4 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    37ec:	2300      	movs	r3, #0
    37ee:	f8ad 300c 	strh.w	r3, [sp, #12]
    37f2:	e002      	b.n	37fa <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    37f4:	2301      	movs	r3, #1
    37f6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    37fa:	ab02      	add	r3, sp, #8
    37fc:	4618      	mov	r0, r3
    37fe:	f7ff ffdc 	bl	37ba <Clock_Ip_ClockSetSimTraceEnable>
}
    3802:	bf00      	nop
    3804:	b005      	add	sp, #20
    3806:	f85d fb04 	ldr.w	pc, [sp], #4

0000380a <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    380a:	b084      	sub	sp, #16
    380c:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    380e:	4b09      	ldr	r3, [pc, #36]	; (3834 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3810:	691b      	ldr	r3, [r3, #16]
    3812:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    3814:	9b03      	ldr	r3, [sp, #12]
    3816:	f023 0301 	bic.w	r3, r3, #1
    381a:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    381c:	9b01      	ldr	r3, [sp, #4]
    381e:	889b      	ldrh	r3, [r3, #4]
    3820:	461a      	mov	r2, r3
    3822:	9b03      	ldr	r3, [sp, #12]
    3824:	4313      	orrs	r3, r2
    3826:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3828:	4a02      	ldr	r2, [pc, #8]	; (3834 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    382a:	9b03      	ldr	r3, [sp, #12]
    382c:	6113      	str	r3, [r2, #16]
}
    382e:	bf00      	nop
    3830:	b004      	add	sp, #16
    3832:	4770      	bx	lr
    3834:	40048000 	.word	0x40048000

00003838 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3838:	b084      	sub	sp, #16
    383a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    383c:	4b09      	ldr	r3, [pc, #36]	; (3864 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    383e:	691b      	ldr	r3, [r3, #16]
    3840:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    3842:	9b03      	ldr	r3, [sp, #12]
    3844:	f023 0302 	bic.w	r3, r3, #2
    3848:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    384a:	9b01      	ldr	r3, [sp, #4]
    384c:	889b      	ldrh	r3, [r3, #4]
    384e:	005b      	lsls	r3, r3, #1
    3850:	9a03      	ldr	r2, [sp, #12]
    3852:	4313      	orrs	r3, r2
    3854:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3856:	4a03      	ldr	r2, [pc, #12]	; (3864 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3858:	9b03      	ldr	r3, [sp, #12]
    385a:	6113      	str	r3, [r2, #16]
}
    385c:	bf00      	nop
    385e:	b004      	add	sp, #16
    3860:	4770      	bx	lr
    3862:	bf00      	nop
    3864:	40048000 	.word	0x40048000

00003868 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3868:	b084      	sub	sp, #16
    386a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    386c:	4b09      	ldr	r3, [pc, #36]	; (3894 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    386e:	685b      	ldr	r3, [r3, #4]
    3870:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    3872:	9b03      	ldr	r3, [sp, #12]
    3874:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3878:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    387a:	9b01      	ldr	r3, [sp, #4]
    387c:	889b      	ldrh	r3, [r3, #4]
    387e:	02db      	lsls	r3, r3, #11
    3880:	9a03      	ldr	r2, [sp, #12]
    3882:	4313      	orrs	r3, r2
    3884:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3886:	4a03      	ldr	r2, [pc, #12]	; (3894 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    3888:	9b03      	ldr	r3, [sp, #12]
    388a:	6053      	str	r3, [r2, #4]
}
    388c:	bf00      	nop
    388e:	b004      	add	sp, #16
    3890:	4770      	bx	lr
    3892:	bf00      	nop
    3894:	40048000 	.word	0x40048000

00003898 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3898:	b084      	sub	sp, #16
    389a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    389c:	4913      	ldr	r1, [pc, #76]	; (38ec <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    389e:	9b01      	ldr	r3, [sp, #4]
    38a0:	681a      	ldr	r2, [r3, #0]
    38a2:	4813      	ldr	r0, [pc, #76]	; (38f0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    38a4:	4613      	mov	r3, r2
    38a6:	00db      	lsls	r3, r3, #3
    38a8:	4413      	add	r3, r2
    38aa:	4403      	add	r3, r0
    38ac:	3306      	adds	r3, #6
    38ae:	781b      	ldrb	r3, [r3, #0]
    38b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    38b4:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    38b6:	9b03      	ldr	r3, [sp, #12]
    38b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    38bc:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    38be:	9b01      	ldr	r3, [sp, #4]
    38c0:	889b      	ldrh	r3, [r3, #4]
    38c2:	079b      	lsls	r3, r3, #30
    38c4:	9a03      	ldr	r2, [sp, #12]
    38c6:	4313      	orrs	r3, r2
    38c8:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    38ca:	4908      	ldr	r1, [pc, #32]	; (38ec <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    38cc:	9b01      	ldr	r3, [sp, #4]
    38ce:	681a      	ldr	r2, [r3, #0]
    38d0:	4807      	ldr	r0, [pc, #28]	; (38f0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    38d2:	4613      	mov	r3, r2
    38d4:	00db      	lsls	r3, r3, #3
    38d6:	4413      	add	r3, r2
    38d8:	4403      	add	r3, r0
    38da:	3306      	adds	r3, #6
    38dc:	781b      	ldrb	r3, [r3, #0]
    38de:	461a      	mov	r2, r3
    38e0:	9b03      	ldr	r3, [sp, #12]
    38e2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    38e6:	bf00      	nop
    38e8:	b004      	add	sp, #16
    38ea:	4770      	bx	lr
    38ec:	40065000 	.word	0x40065000
    38f0:	00017db8 	.word	0x00017db8

000038f4 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    38f4:	b086      	sub	sp, #24
    38f6:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    38f8:	9b01      	ldr	r3, [sp, #4]
    38fa:	889b      	ldrh	r3, [r3, #4]
    38fc:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    38fe:	9b01      	ldr	r3, [sp, #4]
    3900:	681a      	ldr	r2, [r3, #0]
    3902:	4910      	ldr	r1, [pc, #64]	; (3944 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    3904:	4613      	mov	r3, r2
    3906:	00db      	lsls	r3, r3, #3
    3908:	4413      	add	r3, r2
    390a:	440b      	add	r3, r1
    390c:	3306      	adds	r3, #6
    390e:	781b      	ldrb	r3, [r3, #0]
    3910:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    3912:	4b0d      	ldr	r3, [pc, #52]	; (3948 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3916:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    3918:	2201      	movs	r2, #1
    391a:	9b04      	ldr	r3, [sp, #16]
    391c:	fa02 f303 	lsl.w	r3, r2, r3
    3920:	43db      	mvns	r3, r3
    3922:	9a03      	ldr	r2, [sp, #12]
    3924:	4013      	ands	r3, r2
    3926:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    3928:	9a05      	ldr	r2, [sp, #20]
    392a:	9b04      	ldr	r3, [sp, #16]
    392c:	fa02 f303 	lsl.w	r3, r2, r3
    3930:	9a03      	ldr	r2, [sp, #12]
    3932:	4313      	orrs	r3, r2
    3934:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    3936:	4a04      	ldr	r2, [pc, #16]	; (3948 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3938:	9b03      	ldr	r3, [sp, #12]
    393a:	6413      	str	r3, [r2, #64]	; 0x40
}
    393c:	bf00      	nop
    393e:	b006      	add	sp, #24
    3940:	4770      	bx	lr
    3942:	bf00      	nop
    3944:	00017db8 	.word	0x00017db8
    3948:	40048000 	.word	0x40048000

0000394c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    394c:	b084      	sub	sp, #16
    394e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    3950:	4b0a      	ldr	r3, [pc, #40]	; (397c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3954:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    3956:	9b01      	ldr	r3, [sp, #4]
    3958:	889b      	ldrh	r3, [r3, #4]
    395a:	2b01      	cmp	r3, #1
    395c:	d104      	bne.n	3968 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    395e:	9b03      	ldr	r3, [sp, #12]
    3960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3964:	9303      	str	r3, [sp, #12]
    3966:	e003      	b.n	3970 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3968:	9b03      	ldr	r3, [sp, #12]
    396a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    396e:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    3970:	4a02      	ldr	r2, [pc, #8]	; (397c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3972:	9b03      	ldr	r3, [sp, #12]
    3974:	6693      	str	r3, [r2, #104]	; 0x68
}
    3976:	bf00      	nop
    3978:	b004      	add	sp, #16
    397a:	4770      	bx	lr
    397c:	40048000 	.word	0x40048000

00003980 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    3980:	b082      	sub	sp, #8
    3982:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3984:	bf00      	nop
    3986:	b002      	add	sp, #8
    3988:	4770      	bx	lr

0000398a <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    398a:	b082      	sub	sp, #8
    398c:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    398e:	bf00      	nop
    3990:	b002      	add	sp, #8
    3992:	4770      	bx	lr

00003994 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3994:	b500      	push	{lr}
    3996:	b083      	sub	sp, #12
    3998:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    399a:	9b01      	ldr	r3, [sp, #4]
    399c:	2b00      	cmp	r3, #0
    399e:	d002      	beq.n	39a6 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    39a0:	9801      	ldr	r0, [sp, #4]
    39a2:	f000 f8d1 	bl	3b48 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    39a6:	bf00      	nop
    39a8:	b003      	add	sp, #12
    39aa:	f85d fb04 	ldr.w	pc, [sp], #4

000039ae <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    39ae:	b500      	push	{lr}
    39b0:	b083      	sub	sp, #12
    39b2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    39b4:	9b01      	ldr	r3, [sp, #4]
    39b6:	2b00      	cmp	r3, #0
    39b8:	d002      	beq.n	39c0 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    39ba:	9801      	ldr	r0, [sp, #4]
    39bc:	f000 f950 	bl	3c60 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    39c0:	bf00      	nop
    39c2:	b003      	add	sp, #12
    39c4:	f85d fb04 	ldr.w	pc, [sp], #4

000039c8 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    39c8:	b500      	push	{lr}
    39ca:	b083      	sub	sp, #12
    39cc:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    39ce:	9801      	ldr	r0, [sp, #4]
    39d0:	f000 f98e 	bl	3cf0 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    39d4:	bf00      	nop
    39d6:	b003      	add	sp, #12
    39d8:	f85d fb04 	ldr.w	pc, [sp], #4

000039dc <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    39dc:	b500      	push	{lr}
    39de:	b083      	sub	sp, #12
    39e0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    39e2:	9b01      	ldr	r3, [sp, #4]
    39e4:	2b00      	cmp	r3, #0
    39e6:	d002      	beq.n	39ee <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    39e8:	9801      	ldr	r0, [sp, #4]
    39ea:	f000 f999 	bl	3d20 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    39ee:	bf00      	nop
    39f0:	b003      	add	sp, #12
    39f2:	f85d fb04 	ldr.w	pc, [sp], #4

000039f6 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    39f6:	b500      	push	{lr}
    39f8:	b083      	sub	sp, #12
    39fa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    39fc:	9b01      	ldr	r3, [sp, #4]
    39fe:	2b00      	cmp	r3, #0
    3a00:	d002      	beq.n	3a08 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    3a02:	9801      	ldr	r0, [sp, #4]
    3a04:	f000 f9b0 	bl	3d68 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a08:	bf00      	nop
    3a0a:	b003      	add	sp, #12
    3a0c:	f85d fb04 	ldr.w	pc, [sp], #4

00003a10 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    3a10:	b500      	push	{lr}
    3a12:	b083      	sub	sp, #12
    3a14:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    3a16:	9801      	ldr	r0, [sp, #4]
    3a18:	f000 f9ba 	bl	3d90 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3a1c:	bf00      	nop
    3a1e:	b003      	add	sp, #12
    3a20:	f85d fb04 	ldr.w	pc, [sp], #4

00003a24 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3a24:	b500      	push	{lr}
    3a26:	b083      	sub	sp, #12
    3a28:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a2a:	9b01      	ldr	r3, [sp, #4]
    3a2c:	2b00      	cmp	r3, #0
    3a2e:	d002      	beq.n	3a36 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    3a30:	9801      	ldr	r0, [sp, #4]
    3a32:	f000 f9bd 	bl	3db0 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a36:	bf00      	nop
    3a38:	b003      	add	sp, #12
    3a3a:	f85d fb04 	ldr.w	pc, [sp], #4

00003a3e <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3a3e:	b500      	push	{lr}
    3a40:	b083      	sub	sp, #12
    3a42:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a44:	9b01      	ldr	r3, [sp, #4]
    3a46:	2b00      	cmp	r3, #0
    3a48:	d002      	beq.n	3a50 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    3a4a:	9801      	ldr	r0, [sp, #4]
    3a4c:	f000 f9d4 	bl	3df8 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a50:	bf00      	nop
    3a52:	b003      	add	sp, #12
    3a54:	f85d fb04 	ldr.w	pc, [sp], #4

00003a58 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    3a58:	b500      	push	{lr}
    3a5a:	b083      	sub	sp, #12
    3a5c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    3a5e:	9801      	ldr	r0, [sp, #4]
    3a60:	f000 f9de 	bl	3e20 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3a64:	bf00      	nop
    3a66:	b003      	add	sp, #12
    3a68:	f85d fb04 	ldr.w	pc, [sp], #4

00003a6c <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    3a6c:	b500      	push	{lr}
    3a6e:	b089      	sub	sp, #36	; 0x24
    3a70:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    3a72:	2300      	movs	r3, #0
    3a74:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    3a78:	4b20      	ldr	r3, [pc, #128]	; (3afc <SetInputSouceSytemClock+0x90>)
    3a7a:	695b      	ldr	r3, [r3, #20]
    3a7c:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3a7e:	9b06      	ldr	r3, [sp, #24]
    3a80:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3a84:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    3a86:	9b01      	ldr	r3, [sp, #4]
    3a88:	061b      	lsls	r3, r3, #24
    3a8a:	9a06      	ldr	r2, [sp, #24]
    3a8c:	4313      	orrs	r3, r2
    3a8e:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    3a90:	4a1a      	ldr	r2, [pc, #104]	; (3afc <SetInputSouceSytemClock+0x90>)
    3a92:	9b06      	ldr	r3, [sp, #24]
    3a94:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3a96:	aa02      	add	r2, sp, #8
    3a98:	a903      	add	r1, sp, #12
    3a9a:	a804      	add	r0, sp, #16
    3a9c:	f24c 3350 	movw	r3, #50000	; 0xc350
    3aa0:	f7ff f9ac 	bl	2dfc <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    3aa4:	4b15      	ldr	r3, [pc, #84]	; (3afc <SetInputSouceSytemClock+0x90>)
    3aa6:	691b      	ldr	r3, [r3, #16]
    3aa8:	0e1b      	lsrs	r3, r3, #24
    3aaa:	f003 030f 	and.w	r3, r3, #15
    3aae:	9a01      	ldr	r2, [sp, #4]
    3ab0:	429a      	cmp	r2, r3
    3ab2:	bf0c      	ite	eq
    3ab4:	2301      	moveq	r3, #1
    3ab6:	2300      	movne	r3, #0
    3ab8:	b2db      	uxtb	r3, r3
    3aba:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3abc:	9a02      	ldr	r2, [sp, #8]
    3abe:	a903      	add	r1, sp, #12
    3ac0:	ab04      	add	r3, sp, #16
    3ac2:	4618      	mov	r0, r3
    3ac4:	f7ff f9b4 	bl	2e30 <Clock_Ip_TimeoutExpired>
    3ac8:	4603      	mov	r3, r0
    3aca:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    3ace:	9b05      	ldr	r3, [sp, #20]
    3ad0:	2b00      	cmp	r3, #0
    3ad2:	d106      	bne.n	3ae2 <SetInputSouceSytemClock+0x76>
    3ad4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3ad8:	f083 0301 	eor.w	r3, r3, #1
    3adc:	b2db      	uxtb	r3, r3
    3ade:	2b00      	cmp	r3, #0
    3ae0:	d1e0      	bne.n	3aa4 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    3ae2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3ae6:	2b00      	cmp	r3, #0
    3ae8:	d003      	beq.n	3af2 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3aea:	2105      	movs	r1, #5
    3aec:	2001      	movs	r0, #1
    3aee:	f7ff f975 	bl	2ddc <Clock_Ip_ReportClockErrors>
    }
}
    3af2:	bf00      	nop
    3af4:	b009      	add	sp, #36	; 0x24
    3af6:	f85d fb04 	ldr.w	pc, [sp], #4
    3afa:	bf00      	nop
    3afc:	40064000 	.word	0x40064000

00003b00 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3b00:	b500      	push	{lr}
    3b02:	b083      	sub	sp, #12
    3b04:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b06:	9b01      	ldr	r3, [sp, #4]
    3b08:	2b00      	cmp	r3, #0
    3b0a:	d002      	beq.n	3b12 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    3b0c:	9801      	ldr	r0, [sp, #4]
    3b0e:	f000 f997 	bl	3e40 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b12:	bf00      	nop
    3b14:	b003      	add	sp, #12
    3b16:	f85d fb04 	ldr.w	pc, [sp], #4

00003b1a <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3b1a:	b500      	push	{lr}
    3b1c:	b083      	sub	sp, #12
    3b1e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b20:	9b01      	ldr	r3, [sp, #4]
    3b22:	2b00      	cmp	r3, #0
    3b24:	d002      	beq.n	3b2c <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    3b26:	9801      	ldr	r0, [sp, #4]
    3b28:	f000 fa7e 	bl	4028 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b2c:	bf00      	nop
    3b2e:	b003      	add	sp, #12
    3b30:	f85d fb04 	ldr.w	pc, [sp], #4

00003b34 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    3b34:	b500      	push	{lr}
    3b36:	b083      	sub	sp, #12
    3b38:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    3b3a:	9801      	ldr	r0, [sp, #4]
    3b3c:	f000 fab8 	bl	40b0 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3b40:	bf00      	nop
    3b42:	b003      	add	sp, #12
    3b44:	f85d fb04 	ldr.w	pc, [sp], #4

00003b48 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b48:	b500      	push	{lr}
    3b4a:	b08b      	sub	sp, #44	; 0x2c
    3b4c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3b4e:	2300      	movs	r3, #0
    3b50:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    3b54:	9b01      	ldr	r3, [sp, #4]
    3b56:	2b00      	cmp	r3, #0
    3b58:	d10b      	bne.n	3b72 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    3b5a:	2305      	movs	r3, #5
    3b5c:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    3b5e:	2301      	movs	r3, #1
    3b60:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    3b64:	2301      	movs	r3, #1
    3b66:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    3b6a:	2301      	movs	r3, #1
    3b6c:	f88d 3010 	strb.w	r3, [sp, #16]
    3b70:	e00e      	b.n	3b90 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    3b72:	9b01      	ldr	r3, [sp, #4]
    3b74:	681b      	ldr	r3, [r3, #0]
    3b76:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    3b78:	9b01      	ldr	r3, [sp, #4]
    3b7a:	79db      	ldrb	r3, [r3, #7]
    3b7c:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    3b80:	9b01      	ldr	r3, [sp, #4]
    3b82:	889b      	ldrh	r3, [r3, #4]
    3b84:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    3b88:	9b01      	ldr	r3, [sp, #4]
    3b8a:	7a1b      	ldrb	r3, [r3, #8]
    3b8c:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3b90:	4b32      	ldr	r3, [pc, #200]	; (3c5c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3b92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b96:	4a31      	ldr	r2, [pc, #196]	; (3c5c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3b98:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3b9c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    3ba0:	4b2e      	ldr	r3, [pc, #184]	; (3c5c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3ba2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ba6:	4a2d      	ldr	r2, [pc, #180]	; (3c5c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3ba8:	f023 0301 	bic.w	r3, r3, #1
    3bac:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3bb0:	4b2a      	ldr	r3, [pc, #168]	; (3c5c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3bb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3bb6:	4a29      	ldr	r2, [pc, #164]	; (3c5c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3bb8:	f023 0304 	bic.w	r3, r3, #4
    3bbc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    3bc0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    3bc4:	2b01      	cmp	r3, #1
    3bc6:	d144      	bne.n	3c52 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    3bc8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3bcc:	4a23      	ldr	r2, [pc, #140]	; (3c5c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3bce:	f003 0301 	and.w	r3, r3, #1
    3bd2:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3bd6:	4b21      	ldr	r3, [pc, #132]	; (3c5c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3bd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3bdc:	4a1f      	ldr	r2, [pc, #124]	; (3c5c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3bde:	f043 0301 	orr.w	r3, r3, #1
    3be2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    3be6:	4b1d      	ldr	r3, [pc, #116]	; (3c5c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3be8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3bec:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3bf0:	009b      	lsls	r3, r3, #2
    3bf2:	f003 0304 	and.w	r3, r3, #4
    3bf6:	4919      	ldr	r1, [pc, #100]	; (3c5c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3bf8:	4313      	orrs	r3, r2
    3bfa:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3bfe:	aa05      	add	r2, sp, #20
    3c00:	a906      	add	r1, sp, #24
    3c02:	a807      	add	r0, sp, #28
    3c04:	f24c 3350 	movw	r3, #50000	; 0xc350
    3c08:	f7ff f8f8 	bl	2dfc <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3c0c:	4b13      	ldr	r3, [pc, #76]	; (3c5c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3c0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c12:	0e1b      	lsrs	r3, r3, #24
    3c14:	f003 0301 	and.w	r3, r3, #1
    3c18:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3c1a:	9a05      	ldr	r2, [sp, #20]
    3c1c:	a906      	add	r1, sp, #24
    3c1e:	ab07      	add	r3, sp, #28
    3c20:	4618      	mov	r0, r3
    3c22:	f7ff f905 	bl	2e30 <Clock_Ip_TimeoutExpired>
    3c26:	4603      	mov	r3, r0
    3c28:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3c2c:	9b08      	ldr	r3, [sp, #32]
    3c2e:	2b00      	cmp	r3, #0
    3c30:	d106      	bne.n	3c40 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    3c32:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3c36:	f083 0301 	eor.w	r3, r3, #1
    3c3a:	b2db      	uxtb	r3, r3
    3c3c:	2b00      	cmp	r3, #0
    3c3e:	d1e5      	bne.n	3c0c <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    3c40:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3c44:	2b00      	cmp	r3, #0
    3c46:	d004      	beq.n	3c52 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3c48:	9b02      	ldr	r3, [sp, #8]
    3c4a:	4619      	mov	r1, r3
    3c4c:	2001      	movs	r0, #1
    3c4e:	f7ff f8c5 	bl	2ddc <Clock_Ip_ReportClockErrors>
        }
    }
}
    3c52:	bf00      	nop
    3c54:	b00b      	add	sp, #44	; 0x2c
    3c56:	f85d fb04 	ldr.w	pc, [sp], #4
    3c5a:	bf00      	nop
    3c5c:	40064000 	.word	0x40064000

00003c60 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3c60:	b500      	push	{lr}
    3c62:	b089      	sub	sp, #36	; 0x24
    3c64:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3c66:	2300      	movs	r3, #0
    3c68:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3c6c:	4b1f      	ldr	r3, [pc, #124]	; (3cec <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3c6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c72:	4a1e      	ldr	r2, [pc, #120]	; (3cec <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3c74:	f043 0301 	orr.w	r3, r3, #1
    3c78:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    3c7c:	4b1b      	ldr	r3, [pc, #108]	; (3cec <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3c7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c82:	4a1a      	ldr	r2, [pc, #104]	; (3cec <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3c84:	f043 0304 	orr.w	r3, r3, #4
    3c88:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3c8c:	aa03      	add	r2, sp, #12
    3c8e:	a904      	add	r1, sp, #16
    3c90:	a805      	add	r0, sp, #20
    3c92:	f24c 3350 	movw	r3, #50000	; 0xc350
    3c96:	f7ff f8b1 	bl	2dfc <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3c9a:	4b14      	ldr	r3, [pc, #80]	; (3cec <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3c9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ca0:	0e1b      	lsrs	r3, r3, #24
    3ca2:	f003 0301 	and.w	r3, r3, #1
    3ca6:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3ca8:	9a03      	ldr	r2, [sp, #12]
    3caa:	a904      	add	r1, sp, #16
    3cac:	ab05      	add	r3, sp, #20
    3cae:	4618      	mov	r0, r3
    3cb0:	f7ff f8be 	bl	2e30 <Clock_Ip_TimeoutExpired>
    3cb4:	4603      	mov	r3, r0
    3cb6:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3cba:	9b06      	ldr	r3, [sp, #24]
    3cbc:	2b00      	cmp	r3, #0
    3cbe:	d106      	bne.n	3cce <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3cc0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3cc4:	f083 0301 	eor.w	r3, r3, #1
    3cc8:	b2db      	uxtb	r3, r3
    3cca:	2b00      	cmp	r3, #0
    3ccc:	d1e5      	bne.n	3c9a <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3cce:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3cd2:	2b00      	cmp	r3, #0
    3cd4:	d005      	beq.n	3ce2 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3cd6:	9b01      	ldr	r3, [sp, #4]
    3cd8:	681b      	ldr	r3, [r3, #0]
    3cda:	4619      	mov	r1, r3
    3cdc:	2001      	movs	r0, #1
    3cde:	f7ff f87d 	bl	2ddc <Clock_Ip_ReportClockErrors>
    }
}
    3ce2:	bf00      	nop
    3ce4:	b009      	add	sp, #36	; 0x24
    3ce6:	f85d fb04 	ldr.w	pc, [sp], #4
    3cea:	bf00      	nop
    3cec:	40064000 	.word	0x40064000

00003cf0 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3cf0:	b082      	sub	sp, #8
    3cf2:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3cf4:	4b09      	ldr	r3, [pc, #36]	; (3d1c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3cf6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3cfa:	4a08      	ldr	r2, [pc, #32]	; (3d1c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3cfc:	f023 0301 	bic.w	r3, r3, #1
    3d00:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3d04:	4b05      	ldr	r3, [pc, #20]	; (3d1c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3d06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d0a:	4a04      	ldr	r2, [pc, #16]	; (3d1c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3d0c:	f023 0304 	bic.w	r3, r3, #4
    3d10:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3d14:	bf00      	nop
    3d16:	b002      	add	sp, #8
    3d18:	4770      	bx	lr
    3d1a:	bf00      	nop
    3d1c:	40064000 	.word	0x40064000

00003d20 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3d20:	b082      	sub	sp, #8
    3d22:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3d24:	4b0f      	ldr	r3, [pc, #60]	; (3d64 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3d26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d2a:	4a0e      	ldr	r2, [pc, #56]	; (3d64 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3d2c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3d30:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3d34:	4b0b      	ldr	r3, [pc, #44]	; (3d64 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3d36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d3a:	4a0a      	ldr	r2, [pc, #40]	; (3d64 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3d3c:	f023 0304 	bic.w	r3, r3, #4
    3d40:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3d44:	4b07      	ldr	r3, [pc, #28]	; (3d64 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3d46:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3d4a:	9b01      	ldr	r3, [sp, #4]
    3d4c:	7a1b      	ldrb	r3, [r3, #8]
    3d4e:	009b      	lsls	r3, r3, #2
    3d50:	f003 0304 	and.w	r3, r3, #4
    3d54:	4903      	ldr	r1, [pc, #12]	; (3d64 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3d56:	4313      	orrs	r3, r2
    3d58:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3d5c:	bf00      	nop
    3d5e:	b002      	add	sp, #8
    3d60:	4770      	bx	lr
    3d62:	bf00      	nop
    3d64:	40064000 	.word	0x40064000

00003d68 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3d68:	b082      	sub	sp, #8
    3d6a:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3d6c:	9b01      	ldr	r3, [sp, #4]
    3d6e:	889b      	ldrh	r3, [r3, #4]
    3d70:	2b01      	cmp	r3, #1
    3d72:	d107      	bne.n	3d84 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    3d74:	4b05      	ldr	r3, [pc, #20]	; (3d8c <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3d76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d7a:	4a04      	ldr	r2, [pc, #16]	; (3d8c <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3d7c:	f043 0304 	orr.w	r3, r3, #4
    3d80:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3d84:	bf00      	nop
    3d86:	b002      	add	sp, #8
    3d88:	4770      	bx	lr
    3d8a:	bf00      	nop
    3d8c:	40064000 	.word	0x40064000

00003d90 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3d90:	b082      	sub	sp, #8
    3d92:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3d94:	4b05      	ldr	r3, [pc, #20]	; (3dac <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3d96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d9a:	4a04      	ldr	r2, [pc, #16]	; (3dac <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3d9c:	f023 0304 	bic.w	r3, r3, #4
    3da0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3da4:	bf00      	nop
    3da6:	b002      	add	sp, #8
    3da8:	4770      	bx	lr
    3daa:	bf00      	nop
    3dac:	40064000 	.word	0x40064000

00003db0 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3db0:	b082      	sub	sp, #8
    3db2:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3db4:	4b0f      	ldr	r3, [pc, #60]	; (3df4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3db6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3dba:	4a0e      	ldr	r2, [pc, #56]	; (3df4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3dbc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3dc0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3dc4:	4b0b      	ldr	r3, [pc, #44]	; (3df4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3dc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3dca:	4a0a      	ldr	r2, [pc, #40]	; (3df4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3dcc:	f023 0302 	bic.w	r3, r3, #2
    3dd0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3dd4:	4b07      	ldr	r3, [pc, #28]	; (3df4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3dd6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3dda:	9b01      	ldr	r3, [sp, #4]
    3ddc:	7a5b      	ldrb	r3, [r3, #9]
    3dde:	005b      	lsls	r3, r3, #1
    3de0:	f003 0302 	and.w	r3, r3, #2
    3de4:	4903      	ldr	r1, [pc, #12]	; (3df4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3de6:	4313      	orrs	r3, r2
    3de8:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3dec:	bf00      	nop
    3dee:	b002      	add	sp, #8
    3df0:	4770      	bx	lr
    3df2:	bf00      	nop
    3df4:	40064000 	.word	0x40064000

00003df8 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3df8:	b082      	sub	sp, #8
    3dfa:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3dfc:	9b01      	ldr	r3, [sp, #4]
    3dfe:	889b      	ldrh	r3, [r3, #4]
    3e00:	2b01      	cmp	r3, #1
    3e02:	d107      	bne.n	3e14 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3e04:	4b05      	ldr	r3, [pc, #20]	; (3e1c <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3e06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e0a:	4a04      	ldr	r2, [pc, #16]	; (3e1c <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3e0c:	f043 0302 	orr.w	r3, r3, #2
    3e10:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3e14:	bf00      	nop
    3e16:	b002      	add	sp, #8
    3e18:	4770      	bx	lr
    3e1a:	bf00      	nop
    3e1c:	40064000 	.word	0x40064000

00003e20 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3e20:	b082      	sub	sp, #8
    3e22:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3e24:	4b05      	ldr	r3, [pc, #20]	; (3e3c <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3e26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e2a:	4a04      	ldr	r2, [pc, #16]	; (3e3c <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3e2c:	f023 0302 	bic.w	r3, r3, #2
    3e30:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3e34:	bf00      	nop
    3e36:	b002      	add	sp, #8
    3e38:	4770      	bx	lr
    3e3a:	bf00      	nop
    3e3c:	40064000 	.word	0x40064000

00003e40 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3e40:	b500      	push	{lr}
    3e42:	b08b      	sub	sp, #44	; 0x2c
    3e44:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3e46:	9b01      	ldr	r3, [sp, #4]
    3e48:	681a      	ldr	r2, [r3, #0]
    3e4a:	4975      	ldr	r1, [pc, #468]	; (4020 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3e4c:	4613      	mov	r3, r2
    3e4e:	00db      	lsls	r3, r3, #3
    3e50:	4413      	add	r3, r2
    3e52:	440b      	add	r3, r1
    3e54:	781b      	ldrb	r3, [r3, #0]
    3e56:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3e58:	2300      	movs	r3, #0
    3e5a:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3e5e:	2300      	movs	r3, #0
    3e60:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3e64:	4b6f      	ldr	r3, [pc, #444]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3e66:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e6a:	4a6e      	ldr	r2, [pc, #440]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3e6c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3e70:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3e74:	4b6b      	ldr	r3, [pc, #428]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3e76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3e7e:	2b00      	cmp	r3, #0
    3e80:	d07d      	beq.n	3f7e <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3e82:	9b01      	ldr	r3, [sp, #4]
    3e84:	79db      	ldrb	r3, [r3, #7]
    3e86:	461a      	mov	r2, r3
    3e88:	4b66      	ldr	r3, [pc, #408]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3e8a:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3e8e:	f003 0303 	and.w	r3, r3, #3
    3e92:	429a      	cmp	r2, r3
    3e94:	d10b      	bne.n	3eae <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    3e96:	9b01      	ldr	r3, [sp, #4]
    3e98:	799b      	ldrb	r3, [r3, #6]
    3e9a:	461a      	mov	r2, r3
    3e9c:	4b61      	ldr	r3, [pc, #388]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3e9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ea2:	08db      	lsrs	r3, r3, #3
    3ea4:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3ea8:	429a      	cmp	r2, r3
    3eaa:	f000 80b4 	beq.w	4016 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3eae:	4b5d      	ldr	r3, [pc, #372]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3eb0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3eb4:	f003 0301 	and.w	r3, r3, #1
    3eb8:	2b00      	cmp	r3, #0
    3eba:	d105      	bne.n	3ec8 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3ebc:	2301      	movs	r3, #1
    3ebe:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3ec2:	2000      	movs	r0, #0
    3ec4:	f7ff fd66 	bl	3994 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3ec8:	2002      	movs	r0, #2
    3eca:	f7ff fdcf 	bl	3a6c <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3ece:	4b55      	ldr	r3, [pc, #340]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ed0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ed4:	4a53      	ldr	r2, [pc, #332]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ed6:	f023 0301 	bic.w	r3, r3, #1
    3eda:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3ede:	9b01      	ldr	r3, [sp, #4]
    3ee0:	889b      	ldrh	r3, [r3, #4]
    3ee2:	2b01      	cmp	r3, #1
    3ee4:	f040 8097 	bne.w	4016 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3ee8:	9b01      	ldr	r3, [sp, #4]
    3eea:	79db      	ldrb	r3, [r3, #7]
    3eec:	4a4d      	ldr	r2, [pc, #308]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3eee:	f003 0303 	and.w	r3, r3, #3
    3ef2:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3ef6:	4b4b      	ldr	r3, [pc, #300]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ef8:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3efc:	9b01      	ldr	r3, [sp, #4]
    3efe:	799b      	ldrb	r3, [r3, #6]
    3f00:	00db      	lsls	r3, r3, #3
    3f02:	f003 0308 	and.w	r3, r3, #8
    3f06:	4313      	orrs	r3, r2
    3f08:	4a46      	ldr	r2, [pc, #280]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f0a:	f043 0301 	orr.w	r3, r3, #1
    3f0e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3f12:	aa03      	add	r2, sp, #12
    3f14:	a904      	add	r1, sp, #16
    3f16:	a805      	add	r0, sp, #20
    3f18:	f24c 3350 	movw	r3, #50000	; 0xc350
    3f1c:	f7fe ff6e 	bl	2dfc <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3f20:	4b40      	ldr	r3, [pc, #256]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3f26:	0e1b      	lsrs	r3, r3, #24
    3f28:	f003 0301 	and.w	r3, r3, #1
    3f2c:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3f2e:	9a03      	ldr	r2, [sp, #12]
    3f30:	a904      	add	r1, sp, #16
    3f32:	ab05      	add	r3, sp, #20
    3f34:	4618      	mov	r0, r3
    3f36:	f7fe ff7b 	bl	2e30 <Clock_Ip_TimeoutExpired>
    3f3a:	4603      	mov	r3, r0
    3f3c:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3f40:	9b06      	ldr	r3, [sp, #24]
    3f42:	2b00      	cmp	r3, #0
    3f44:	d106      	bne.n	3f54 <Clock_Ip_SetFirc_TrustedCall+0x114>
    3f46:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3f4a:	f083 0301 	eor.w	r3, r3, #1
    3f4e:	b2db      	uxtb	r3, r3
    3f50:	2b00      	cmp	r3, #0
    3f52:	d1e5      	bne.n	3f20 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    3f54:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3f58:	2b00      	cmp	r3, #0
    3f5a:	d005      	beq.n	3f68 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3f5c:	9b01      	ldr	r3, [sp, #4]
    3f5e:	681b      	ldr	r3, [r3, #0]
    3f60:	4619      	mov	r1, r3
    3f62:	2001      	movs	r0, #1
    3f64:	f7fe ff3a 	bl	2ddc <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3f68:	2003      	movs	r0, #3
    3f6a:	f7ff fd7f 	bl	3a6c <SetInputSouceSytemClock>

                if (SircWasDisabled)
    3f6e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3f72:	2b00      	cmp	r3, #0
    3f74:	d04f      	beq.n	4016 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    3f76:	2002      	movs	r0, #2
    3f78:	f7ff fd26 	bl	39c8 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3f7c:	e04b      	b.n	4016 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3f7e:	4b29      	ldr	r3, [pc, #164]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f80:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3f84:	4a27      	ldr	r2, [pc, #156]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f86:	f023 0301 	bic.w	r3, r3, #1
    3f8a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    3f8e:	9b01      	ldr	r3, [sp, #4]
    3f90:	889b      	ldrh	r3, [r3, #4]
    3f92:	2b01      	cmp	r3, #1
    3f94:	d13f      	bne.n	4016 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3f96:	9b01      	ldr	r3, [sp, #4]
    3f98:	79db      	ldrb	r3, [r3, #7]
    3f9a:	4a22      	ldr	r2, [pc, #136]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3f9c:	f003 0303 	and.w	r3, r3, #3
    3fa0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3fa4:	4b1f      	ldr	r3, [pc, #124]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3fa6:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3faa:	9b01      	ldr	r3, [sp, #4]
    3fac:	799b      	ldrb	r3, [r3, #6]
    3fae:	00db      	lsls	r3, r3, #3
    3fb0:	f003 0308 	and.w	r3, r3, #8
    3fb4:	4313      	orrs	r3, r2
    3fb6:	4a1b      	ldr	r2, [pc, #108]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3fb8:	f043 0301 	orr.w	r3, r3, #1
    3fbc:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3fc0:	aa03      	add	r2, sp, #12
    3fc2:	a904      	add	r1, sp, #16
    3fc4:	a805      	add	r0, sp, #20
    3fc6:	f24c 3350 	movw	r3, #50000	; 0xc350
    3fca:	f7fe ff17 	bl	2dfc <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3fce:	4b15      	ldr	r3, [pc, #84]	; (4024 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3fd0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3fd4:	0e1b      	lsrs	r3, r3, #24
    3fd6:	f003 0301 	and.w	r3, r3, #1
    3fda:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3fdc:	9a03      	ldr	r2, [sp, #12]
    3fde:	a904      	add	r1, sp, #16
    3fe0:	ab05      	add	r3, sp, #20
    3fe2:	4618      	mov	r0, r3
    3fe4:	f7fe ff24 	bl	2e30 <Clock_Ip_TimeoutExpired>
    3fe8:	4603      	mov	r3, r0
    3fea:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3fee:	9b06      	ldr	r3, [sp, #24]
    3ff0:	2b00      	cmp	r3, #0
    3ff2:	d106      	bne.n	4002 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    3ff4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3ff8:	f083 0301 	eor.w	r3, r3, #1
    3ffc:	b2db      	uxtb	r3, r3
    3ffe:	2b00      	cmp	r3, #0
    4000:	d1e5      	bne.n	3fce <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    4002:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4006:	2b00      	cmp	r3, #0
    4008:	d005      	beq.n	4016 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    400a:	9b01      	ldr	r3, [sp, #4]
    400c:	681b      	ldr	r3, [r3, #0]
    400e:	4619      	mov	r1, r3
    4010:	2001      	movs	r0, #1
    4012:	f7fe fee3 	bl	2ddc <Clock_Ip_ReportClockErrors>
}
    4016:	bf00      	nop
    4018:	b00b      	add	sp, #44	; 0x2c
    401a:	f85d fb04 	ldr.w	pc, [sp], #4
    401e:	bf00      	nop
    4020:	00017db8 	.word	0x00017db8
    4024:	40064000 	.word	0x40064000

00004028 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4028:	b500      	push	{lr}
    402a:	b089      	sub	sp, #36	; 0x24
    402c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    402e:	2300      	movs	r3, #0
    4030:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    4034:	9b01      	ldr	r3, [sp, #4]
    4036:	889b      	ldrh	r3, [r3, #4]
    4038:	2b01      	cmp	r3, #1
    403a:	d132      	bne.n	40a2 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    403c:	4b1b      	ldr	r3, [pc, #108]	; (40ac <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    403e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4042:	4a1a      	ldr	r2, [pc, #104]	; (40ac <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4044:	f043 0301 	orr.w	r3, r3, #1
    4048:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    404c:	aa03      	add	r2, sp, #12
    404e:	a904      	add	r1, sp, #16
    4050:	a805      	add	r0, sp, #20
    4052:	f24c 3350 	movw	r3, #50000	; 0xc350
    4056:	f7fe fed1 	bl	2dfc <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    405a:	4b14      	ldr	r3, [pc, #80]	; (40ac <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    405c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4060:	0e1b      	lsrs	r3, r3, #24
    4062:	f003 0301 	and.w	r3, r3, #1
    4066:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4068:	9a03      	ldr	r2, [sp, #12]
    406a:	a904      	add	r1, sp, #16
    406c:	ab05      	add	r3, sp, #20
    406e:	4618      	mov	r0, r3
    4070:	f7fe fede 	bl	2e30 <Clock_Ip_TimeoutExpired>
    4074:	4603      	mov	r3, r0
    4076:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    407a:	9b06      	ldr	r3, [sp, #24]
    407c:	2b00      	cmp	r3, #0
    407e:	d106      	bne.n	408e <Clock_Ip_EnableFirc_TrustedCall+0x66>
    4080:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4084:	f083 0301 	eor.w	r3, r3, #1
    4088:	b2db      	uxtb	r3, r3
    408a:	2b00      	cmp	r3, #0
    408c:	d1e5      	bne.n	405a <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    408e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4092:	2b00      	cmp	r3, #0
    4094:	d005      	beq.n	40a2 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4096:	9b01      	ldr	r3, [sp, #4]
    4098:	681b      	ldr	r3, [r3, #0]
    409a:	4619      	mov	r1, r3
    409c:	2001      	movs	r0, #1
    409e:	f7fe fe9d 	bl	2ddc <Clock_Ip_ReportClockErrors>
        }
    }
}
    40a2:	bf00      	nop
    40a4:	b009      	add	sp, #36	; 0x24
    40a6:	f85d fb04 	ldr.w	pc, [sp], #4
    40aa:	bf00      	nop
    40ac:	40064000 	.word	0x40064000

000040b0 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    40b0:	b082      	sub	sp, #8
    40b2:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    40b4:	4b05      	ldr	r3, [pc, #20]	; (40cc <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    40b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    40ba:	4a04      	ldr	r2, [pc, #16]	; (40cc <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    40bc:	f023 0301 	bic.w	r3, r3, #1
    40c0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    40c4:	bf00      	nop
    40c6:	b002      	add	sp, #8
    40c8:	4770      	bx	lr
    40ca:	bf00      	nop
    40cc:	40064000 	.word	0x40064000

000040d0 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    40d0:	b082      	sub	sp, #8
    40d2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    40d4:	bf00      	nop
    40d6:	b002      	add	sp, #8
    40d8:	4770      	bx	lr

000040da <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    40da:	b082      	sub	sp, #8
    40dc:	9001      	str	r0, [sp, #4]
    40de:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    40e0:	bf00      	nop
    40e2:	b002      	add	sp, #8
    40e4:	4770      	bx	lr

000040e6 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    40e6:	b082      	sub	sp, #8
    40e8:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    40ea:	bf00      	nop
    40ec:	b002      	add	sp, #8
    40ee:	4770      	bx	lr

000040f0 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    40f0:	b082      	sub	sp, #8
    40f2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    40f4:	bf00      	nop
    40f6:	b002      	add	sp, #8
    40f8:	4770      	bx	lr

000040fa <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    40fa:	b082      	sub	sp, #8
    40fc:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    40fe:	2302      	movs	r3, #2
}
    4100:	4618      	mov	r0, r3
    4102:	b002      	add	sp, #8
    4104:	4770      	bx	lr

00004106 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    4106:	b082      	sub	sp, #8
    4108:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    410a:	bf00      	nop
    410c:	b002      	add	sp, #8
    410e:	4770      	bx	lr

00004110 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    4110:	b500      	push	{lr}
    4112:	b083      	sub	sp, #12
    4114:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4116:	9b01      	ldr	r3, [sp, #4]
    4118:	2b00      	cmp	r3, #0
    411a:	d002      	beq.n	4122 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    411c:	9801      	ldr	r0, [sp, #4]
    411e:	f000 f870 	bl	4202 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4122:	bf00      	nop
    4124:	b003      	add	sp, #12
    4126:	f85d fb04 	ldr.w	pc, [sp], #4

0000412a <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    412a:	b500      	push	{lr}
    412c:	b083      	sub	sp, #12
    412e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4130:	9b01      	ldr	r3, [sp, #4]
    4132:	2b00      	cmp	r3, #0
    4134:	d002      	beq.n	413c <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    4136:	9801      	ldr	r0, [sp, #4]
    4138:	f000 f89a 	bl	4270 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    413c:	bf00      	nop
    413e:	b003      	add	sp, #12
    4140:	f85d fb04 	ldr.w	pc, [sp], #4

00004144 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    4144:	b500      	push	{lr}
    4146:	b089      	sub	sp, #36	; 0x24
    4148:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    414a:	2301      	movs	r3, #1
    414c:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    414e:	2300      	movs	r3, #0
    4150:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    4154:	4b1e      	ldr	r3, [pc, #120]	; (41d0 <Clock_Ip_CompleteSpll+0x8c>)
    4156:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    415a:	f003 0301 	and.w	r3, r3, #1
    415e:	2b00      	cmp	r3, #0
    4160:	d02f      	beq.n	41c2 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4162:	aa02      	add	r2, sp, #8
    4164:	a903      	add	r1, sp, #12
    4166:	a804      	add	r0, sp, #16
    4168:	f24c 3350 	movw	r3, #50000	; 0xc350
    416c:	f7fe fe46 	bl	2dfc <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    4170:	4b17      	ldr	r3, [pc, #92]	; (41d0 <Clock_Ip_CompleteSpll+0x8c>)
    4172:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4176:	0e1b      	lsrs	r3, r3, #24
    4178:	f003 0301 	and.w	r3, r3, #1
    417c:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    417e:	9a02      	ldr	r2, [sp, #8]
    4180:	a903      	add	r1, sp, #12
    4182:	ab04      	add	r3, sp, #16
    4184:	4618      	mov	r0, r3
    4186:	f7fe fe53 	bl	2e30 <Clock_Ip_TimeoutExpired>
    418a:	4603      	mov	r3, r0
    418c:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    4190:	9b05      	ldr	r3, [sp, #20]
    4192:	2b00      	cmp	r3, #0
    4194:	d106      	bne.n	41a4 <Clock_Ip_CompleteSpll+0x60>
    4196:	f89d 301b 	ldrb.w	r3, [sp, #27]
    419a:	f083 0301 	eor.w	r3, r3, #1
    419e:	b2db      	uxtb	r3, r3
    41a0:	2b00      	cmp	r3, #0
    41a2:	d1e5      	bne.n	4170 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    41a4:	f89d 301b 	ldrb.w	r3, [sp, #27]
    41a8:	f083 0301 	eor.w	r3, r3, #1
    41ac:	b2db      	uxtb	r3, r3
    41ae:	2b00      	cmp	r3, #0
    41b0:	d002      	beq.n	41b8 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    41b2:	2302      	movs	r3, #2
    41b4:	9307      	str	r3, [sp, #28]
    41b6:	e006      	b.n	41c6 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    41b8:	9901      	ldr	r1, [sp, #4]
    41ba:	2001      	movs	r0, #1
    41bc:	f7fe fe0e 	bl	2ddc <Clock_Ip_ReportClockErrors>
    41c0:	e001      	b.n	41c6 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    41c2:	2300      	movs	r3, #0
    41c4:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    41c6:	9b07      	ldr	r3, [sp, #28]
}
    41c8:	4618      	mov	r0, r3
    41ca:	b009      	add	sp, #36	; 0x24
    41cc:	f85d fb04 	ldr.w	pc, [sp], #4
    41d0:	40064000 	.word	0x40064000

000041d4 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    41d4:	b500      	push	{lr}
    41d6:	b083      	sub	sp, #12
    41d8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    41da:	9801      	ldr	r0, [sp, #4]
    41dc:	f000 f886 	bl	42ec <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    41e0:	bf00      	nop
    41e2:	b003      	add	sp, #12
    41e4:	f85d fb04 	ldr.w	pc, [sp], #4

000041e8 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    41e8:	b500      	push	{lr}
    41ea:	b083      	sub	sp, #12
    41ec:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41ee:	9b01      	ldr	r3, [sp, #4]
    41f0:	2b00      	cmp	r3, #0
    41f2:	d002      	beq.n	41fa <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    41f4:	9801      	ldr	r0, [sp, #4]
    41f6:	f000 f891 	bl	431c <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41fa:	bf00      	nop
    41fc:	b003      	add	sp, #12
    41fe:	f85d fb04 	ldr.w	pc, [sp], #4

00004202 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4202:	b082      	sub	sp, #8
    4204:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4206:	4b19      	ldr	r3, [pc, #100]	; (426c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4208:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    420c:	4a17      	ldr	r2, [pc, #92]	; (426c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    420e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4212:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    4216:	4b15      	ldr	r3, [pc, #84]	; (426c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4218:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    421c:	4a13      	ldr	r2, [pc, #76]	; (426c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    421e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    4222:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    4226:	4b11      	ldr	r3, [pc, #68]	; (426c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4228:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    422c:	4a0f      	ldr	r2, [pc, #60]	; (426c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    422e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    4232:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4236:	4b0d      	ldr	r3, [pc, #52]	; (426c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4238:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    423c:	4a0b      	ldr	r2, [pc, #44]	; (426c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    423e:	f023 0301 	bic.w	r3, r3, #1
    4242:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    4246:	4b09      	ldr	r3, [pc, #36]	; (426c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4248:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    424c:	4a07      	ldr	r2, [pc, #28]	; (426c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    424e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    4252:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    4256:	4b05      	ldr	r3, [pc, #20]	; (426c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4258:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    425c:	4a03      	ldr	r2, [pc, #12]	; (426c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    425e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    4262:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    4266:	bf00      	nop
    4268:	b002      	add	sp, #8
    426a:	4770      	bx	lr
    426c:	40064000 	.word	0x40064000

00004270 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4270:	b082      	sub	sp, #8
    4272:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4274:	9b01      	ldr	r3, [sp, #4]
    4276:	889b      	ldrh	r3, [r3, #4]
    4278:	2b01      	cmp	r3, #1
    427a:	d12f      	bne.n	42dc <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    427c:	4b1a      	ldr	r3, [pc, #104]	; (42e8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    427e:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    4282:	9b01      	ldr	r3, [sp, #4]
    4284:	7b5b      	ldrb	r3, [r3, #13]
    4286:	3b01      	subs	r3, #1
    4288:	021b      	lsls	r3, r3, #8
    428a:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    428e:	9b01      	ldr	r3, [sp, #4]
    4290:	7d1b      	ldrb	r3, [r3, #20]
    4292:	3b10      	subs	r3, #16
    4294:	041b      	lsls	r3, r3, #16
    4296:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    429a:	430b      	orrs	r3, r1
    429c:	4912      	ldr	r1, [pc, #72]	; (42e8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    429e:	4313      	orrs	r3, r2
    42a0:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    42a4:	9b01      	ldr	r3, [sp, #4]
    42a6:	7fdb      	ldrb	r3, [r3, #31]
    42a8:	2b02      	cmp	r3, #2
    42aa:	d011      	beq.n	42d0 <Clock_Ip_SetSpll_TrustedCall+0x60>
    42ac:	2b02      	cmp	r3, #2
    42ae:	dc17      	bgt.n	42e0 <Clock_Ip_SetSpll_TrustedCall+0x70>
    42b0:	2b00      	cmp	r3, #0
    42b2:	d002      	beq.n	42ba <Clock_Ip_SetSpll_TrustedCall+0x4a>
    42b4:	2b01      	cmp	r3, #1
    42b6:	d005      	beq.n	42c4 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    42b8:	e012      	b.n	42e0 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    42ba:	4b0b      	ldr	r3, [pc, #44]	; (42e8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    42bc:	2200      	movs	r2, #0
    42be:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    42c2:	e00e      	b.n	42e2 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    42c4:	4b08      	ldr	r3, [pc, #32]	; (42e8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    42c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    42ca:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    42ce:	e008      	b.n	42e2 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    42d0:	4b05      	ldr	r3, [pc, #20]	; (42e8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    42d2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    42d6:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    42da:	e002      	b.n	42e2 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    42dc:	bf00      	nop
    42de:	e000      	b.n	42e2 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    42e0:	bf00      	nop
}
    42e2:	bf00      	nop
    42e4:	b002      	add	sp, #8
    42e6:	4770      	bx	lr
    42e8:	40064000 	.word	0x40064000

000042ec <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    42ec:	b082      	sub	sp, #8
    42ee:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    42f0:	4b09      	ldr	r3, [pc, #36]	; (4318 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    42f2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    42f6:	4a08      	ldr	r2, [pc, #32]	; (4318 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    42f8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    42fc:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4300:	4b05      	ldr	r3, [pc, #20]	; (4318 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4302:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4306:	4a04      	ldr	r2, [pc, #16]	; (4318 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4308:	f023 0301 	bic.w	r3, r3, #1
    430c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    4310:	bf00      	nop
    4312:	b002      	add	sp, #8
    4314:	4770      	bx	lr
    4316:	bf00      	nop
    4318:	40064000 	.word	0x40064000

0000431c <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    431c:	b082      	sub	sp, #8
    431e:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4320:	9b01      	ldr	r3, [sp, #4]
    4322:	889b      	ldrh	r3, [r3, #4]
    4324:	2b01      	cmp	r3, #1
    4326:	d107      	bne.n	4338 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    4328:	4b05      	ldr	r3, [pc, #20]	; (4340 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    432a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    432e:	4a04      	ldr	r2, [pc, #16]	; (4340 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4330:	f043 0301 	orr.w	r3, r3, #1
    4334:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    4338:	bf00      	nop
    433a:	b002      	add	sp, #8
    433c:	4770      	bx	lr
    433e:	bf00      	nop
    4340:	40064000 	.word	0x40064000

00004344 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    4344:	b082      	sub	sp, #8
    4346:	9001      	str	r0, [sp, #4]
    4348:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    434a:	bf00      	nop
    434c:	b002      	add	sp, #8
    434e:	4770      	bx	lr

00004350 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    4350:	b082      	sub	sp, #8
    4352:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4354:	bf00      	nop
    4356:	b002      	add	sp, #8
    4358:	4770      	bx	lr

0000435a <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    435a:	b500      	push	{lr}
    435c:	b083      	sub	sp, #12
    435e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4360:	9b01      	ldr	r3, [sp, #4]
    4362:	2b00      	cmp	r3, #0
    4364:	d002      	beq.n	436c <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    4366:	9801      	ldr	r0, [sp, #4]
    4368:	f000 f8ee 	bl	4548 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    436c:	bf00      	nop
    436e:	b003      	add	sp, #12
    4370:	f85d fb04 	ldr.w	pc, [sp], #4

00004374 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4374:	b500      	push	{lr}
    4376:	b083      	sub	sp, #12
    4378:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    437a:	9b01      	ldr	r3, [sp, #4]
    437c:	2b00      	cmp	r3, #0
    437e:	d002      	beq.n	4386 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    4380:	9801      	ldr	r0, [sp, #4]
    4382:	f000 f8ff 	bl	4584 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4386:	bf00      	nop
    4388:	b003      	add	sp, #12
    438a:	f85d fb04 	ldr.w	pc, [sp], #4

0000438e <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    438e:	b500      	push	{lr}
    4390:	b083      	sub	sp, #12
    4392:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4394:	9b01      	ldr	r3, [sp, #4]
    4396:	2b00      	cmp	r3, #0
    4398:	d002      	beq.n	43a0 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    439a:	9801      	ldr	r0, [sp, #4]
    439c:	f000 f912 	bl	45c4 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43a0:	bf00      	nop
    43a2:	b003      	add	sp, #12
    43a4:	f85d fb04 	ldr.w	pc, [sp], #4

000043a8 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    43a8:	b500      	push	{lr}
    43aa:	b083      	sub	sp, #12
    43ac:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43ae:	9b01      	ldr	r3, [sp, #4]
    43b0:	2b00      	cmp	r3, #0
    43b2:	d002      	beq.n	43ba <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    43b4:	9801      	ldr	r0, [sp, #4]
    43b6:	f000 f925 	bl	4604 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43ba:	bf00      	nop
    43bc:	b003      	add	sp, #12
    43be:	f85d fb04 	ldr.w	pc, [sp], #4

000043c2 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    43c2:	b500      	push	{lr}
    43c4:	b083      	sub	sp, #12
    43c6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43c8:	9b01      	ldr	r3, [sp, #4]
    43ca:	2b00      	cmp	r3, #0
    43cc:	d002      	beq.n	43d4 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    43ce:	9801      	ldr	r0, [sp, #4]
    43d0:	f000 f936 	bl	4640 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43d4:	bf00      	nop
    43d6:	b003      	add	sp, #12
    43d8:	f85d fb04 	ldr.w	pc, [sp], #4

000043dc <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    43dc:	b500      	push	{lr}
    43de:	b083      	sub	sp, #12
    43e0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43e2:	9b01      	ldr	r3, [sp, #4]
    43e4:	2b00      	cmp	r3, #0
    43e6:	d002      	beq.n	43ee <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    43e8:	9801      	ldr	r0, [sp, #4]
    43ea:	f000 f949 	bl	4680 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43ee:	bf00      	nop
    43f0:	b003      	add	sp, #12
    43f2:	f85d fb04 	ldr.w	pc, [sp], #4

000043f6 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    43f6:	b500      	push	{lr}
    43f8:	b083      	sub	sp, #12
    43fa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43fc:	9b01      	ldr	r3, [sp, #4]
    43fe:	2b00      	cmp	r3, #0
    4400:	d002      	beq.n	4408 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    4402:	9801      	ldr	r0, [sp, #4]
    4404:	f000 f958 	bl	46b8 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4408:	bf00      	nop
    440a:	b003      	add	sp, #12
    440c:	f85d fb04 	ldr.w	pc, [sp], #4

00004410 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4410:	b500      	push	{lr}
    4412:	b083      	sub	sp, #12
    4414:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4416:	9b01      	ldr	r3, [sp, #4]
    4418:	2b00      	cmp	r3, #0
    441a:	d002      	beq.n	4422 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    441c:	9801      	ldr	r0, [sp, #4]
    441e:	f000 f969 	bl	46f4 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4422:	bf00      	nop
    4424:	b003      	add	sp, #12
    4426:	f85d fb04 	ldr.w	pc, [sp], #4

0000442a <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    442a:	b500      	push	{lr}
    442c:	b083      	sub	sp, #12
    442e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4430:	9b01      	ldr	r3, [sp, #4]
    4432:	2b00      	cmp	r3, #0
    4434:	d002      	beq.n	443c <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    4436:	9801      	ldr	r0, [sp, #4]
    4438:	f000 f978 	bl	472c <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    443c:	bf00      	nop
    443e:	b003      	add	sp, #12
    4440:	f85d fb04 	ldr.w	pc, [sp], #4

00004444 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4444:	b500      	push	{lr}
    4446:	b083      	sub	sp, #12
    4448:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    444a:	9b01      	ldr	r3, [sp, #4]
    444c:	2b00      	cmp	r3, #0
    444e:	d002      	beq.n	4456 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    4450:	9801      	ldr	r0, [sp, #4]
    4452:	f000 f989 	bl	4768 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4456:	bf00      	nop
    4458:	b003      	add	sp, #12
    445a:	f85d fb04 	ldr.w	pc, [sp], #4

0000445e <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    445e:	b500      	push	{lr}
    4460:	b083      	sub	sp, #12
    4462:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4464:	9b01      	ldr	r3, [sp, #4]
    4466:	2b00      	cmp	r3, #0
    4468:	d002      	beq.n	4470 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    446a:	9801      	ldr	r0, [sp, #4]
    446c:	f000 f998 	bl	47a0 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4470:	bf00      	nop
    4472:	b003      	add	sp, #12
    4474:	f85d fb04 	ldr.w	pc, [sp], #4

00004478 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4478:	b500      	push	{lr}
    447a:	b083      	sub	sp, #12
    447c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    447e:	9b01      	ldr	r3, [sp, #4]
    4480:	2b00      	cmp	r3, #0
    4482:	d002      	beq.n	448a <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    4484:	9801      	ldr	r0, [sp, #4]
    4486:	f000 f9a9 	bl	47dc <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    448a:	bf00      	nop
    448c:	b003      	add	sp, #12
    448e:	f85d fb04 	ldr.w	pc, [sp], #4

00004492 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4492:	b500      	push	{lr}
    4494:	b083      	sub	sp, #12
    4496:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4498:	9b01      	ldr	r3, [sp, #4]
    449a:	2b00      	cmp	r3, #0
    449c:	d002      	beq.n	44a4 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    449e:	9801      	ldr	r0, [sp, #4]
    44a0:	f000 f9e6 	bl	4870 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44a4:	bf00      	nop
    44a6:	b003      	add	sp, #12
    44a8:	f85d fb04 	ldr.w	pc, [sp], #4

000044ac <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    44ac:	b500      	push	{lr}
    44ae:	b083      	sub	sp, #12
    44b0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44b2:	9b01      	ldr	r3, [sp, #4]
    44b4:	2b00      	cmp	r3, #0
    44b6:	d002      	beq.n	44be <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    44b8:	9801      	ldr	r0, [sp, #4]
    44ba:	f000 fa25 	bl	4908 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44be:	bf00      	nop
    44c0:	b003      	add	sp, #12
    44c2:	f85d fb04 	ldr.w	pc, [sp], #4

000044c6 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    44c6:	b500      	push	{lr}
    44c8:	b083      	sub	sp, #12
    44ca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44cc:	9b01      	ldr	r3, [sp, #4]
    44ce:	2b00      	cmp	r3, #0
    44d0:	d002      	beq.n	44d8 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    44d2:	9801      	ldr	r0, [sp, #4]
    44d4:	f000 fa2a 	bl	492c <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44d8:	bf00      	nop
    44da:	b003      	add	sp, #12
    44dc:	f85d fb04 	ldr.w	pc, [sp], #4

000044e0 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    44e0:	b500      	push	{lr}
    44e2:	b083      	sub	sp, #12
    44e4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44e6:	9b01      	ldr	r3, [sp, #4]
    44e8:	2b00      	cmp	r3, #0
    44ea:	d002      	beq.n	44f2 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    44ec:	9801      	ldr	r0, [sp, #4]
    44ee:	f000 fa3b 	bl	4968 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44f2:	bf00      	nop
    44f4:	b003      	add	sp, #12
    44f6:	f85d fb04 	ldr.w	pc, [sp], #4

000044fa <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    44fa:	b500      	push	{lr}
    44fc:	b083      	sub	sp, #12
    44fe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4500:	9b01      	ldr	r3, [sp, #4]
    4502:	2b00      	cmp	r3, #0
    4504:	d002      	beq.n	450c <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    4506:	9801      	ldr	r0, [sp, #4]
    4508:	f000 fa56 	bl	49b8 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    450c:	bf00      	nop
    450e:	b003      	add	sp, #12
    4510:	f85d fb04 	ldr.w	pc, [sp], #4

00004514 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4514:	b500      	push	{lr}
    4516:	b083      	sub	sp, #12
    4518:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    451a:	9b01      	ldr	r3, [sp, #4]
    451c:	2b00      	cmp	r3, #0
    451e:	d002      	beq.n	4526 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    4520:	9801      	ldr	r0, [sp, #4]
    4522:	f000 fa79 	bl	4a18 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4526:	bf00      	nop
    4528:	b003      	add	sp, #12
    452a:	f85d fb04 	ldr.w	pc, [sp], #4

0000452e <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    452e:	b500      	push	{lr}
    4530:	b083      	sub	sp, #12
    4532:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4534:	9b01      	ldr	r3, [sp, #4]
    4536:	2b00      	cmp	r3, #0
    4538:	d002      	beq.n	4540 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    453a:	9801      	ldr	r0, [sp, #4]
    453c:	f000 fa8a 	bl	4a54 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4540:	bf00      	nop
    4542:	b003      	add	sp, #12
    4544:	f85d fb04 	ldr.w	pc, [sp], #4

00004548 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4548:	b084      	sub	sp, #16
    454a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    454c:	4b0b      	ldr	r3, [pc, #44]	; (457c <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    454e:	795b      	ldrb	r3, [r3, #5]
    4550:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    4552:	4b0b      	ldr	r3, [pc, #44]	; (4580 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4554:	695b      	ldr	r3, [r3, #20]
    4556:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4558:	9b02      	ldr	r3, [sp, #8]
    455a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    455e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4560:	9b03      	ldr	r3, [sp, #12]
    4562:	061b      	lsls	r3, r3, #24
    4564:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4568:	9a02      	ldr	r2, [sp, #8]
    456a:	4313      	orrs	r3, r2
    456c:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    456e:	4a04      	ldr	r2, [pc, #16]	; (4580 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4570:	9b02      	ldr	r3, [sp, #8]
    4572:	6153      	str	r3, [r2, #20]
}
    4574:	bf00      	nop
    4576:	b004      	add	sp, #16
    4578:	4770      	bx	lr
    457a:	bf00      	nop
    457c:	00018120 	.word	0x00018120
    4580:	40064000 	.word	0x40064000

00004584 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4584:	b084      	sub	sp, #16
    4586:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4588:	9b01      	ldr	r3, [sp, #4]
    458a:	685b      	ldr	r3, [r3, #4]
    458c:	4a0b      	ldr	r2, [pc, #44]	; (45bc <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    458e:	5cd3      	ldrb	r3, [r2, r3]
    4590:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    4592:	4b0b      	ldr	r3, [pc, #44]	; (45c0 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4594:	695b      	ldr	r3, [r3, #20]
    4596:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4598:	9b02      	ldr	r3, [sp, #8]
    459a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    459e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    45a0:	9b03      	ldr	r3, [sp, #12]
    45a2:	061b      	lsls	r3, r3, #24
    45a4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    45a8:	9a02      	ldr	r2, [sp, #8]
    45aa:	4313      	orrs	r3, r2
    45ac:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    45ae:	4a04      	ldr	r2, [pc, #16]	; (45c0 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    45b0:	9b02      	ldr	r3, [sp, #8]
    45b2:	6153      	str	r3, [r2, #20]
}
    45b4:	bf00      	nop
    45b6:	b004      	add	sp, #16
    45b8:	4770      	bx	lr
    45ba:	bf00      	nop
    45bc:	00018120 	.word	0x00018120
    45c0:	40064000 	.word	0x40064000

000045c4 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    45c4:	b084      	sub	sp, #16
    45c6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    45c8:	9b01      	ldr	r3, [sp, #4]
    45ca:	685b      	ldr	r3, [r3, #4]
    45cc:	4a0b      	ldr	r2, [pc, #44]	; (45fc <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    45ce:	5cd3      	ldrb	r3, [r2, r3]
    45d0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    45d2:	4b0b      	ldr	r3, [pc, #44]	; (4600 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    45d4:	699b      	ldr	r3, [r3, #24]
    45d6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    45d8:	9b02      	ldr	r3, [sp, #8]
    45da:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    45de:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    45e0:	9b03      	ldr	r3, [sp, #12]
    45e2:	061b      	lsls	r3, r3, #24
    45e4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    45e8:	9a02      	ldr	r2, [sp, #8]
    45ea:	4313      	orrs	r3, r2
    45ec:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    45ee:	4a04      	ldr	r2, [pc, #16]	; (4600 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    45f0:	9b02      	ldr	r3, [sp, #8]
    45f2:	6193      	str	r3, [r2, #24]
}
    45f4:	bf00      	nop
    45f6:	b004      	add	sp, #16
    45f8:	4770      	bx	lr
    45fa:	bf00      	nop
    45fc:	00018120 	.word	0x00018120
    4600:	40064000 	.word	0x40064000

00004604 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4604:	b084      	sub	sp, #16
    4606:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4608:	4b0b      	ldr	r3, [pc, #44]	; (4638 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    460a:	795b      	ldrb	r3, [r3, #5]
    460c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    460e:	4b0b      	ldr	r3, [pc, #44]	; (463c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4610:	69db      	ldr	r3, [r3, #28]
    4612:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4614:	9b02      	ldr	r3, [sp, #8]
    4616:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    461a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    461c:	9b03      	ldr	r3, [sp, #12]
    461e:	061b      	lsls	r3, r3, #24
    4620:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4624:	9a02      	ldr	r2, [sp, #8]
    4626:	4313      	orrs	r3, r2
    4628:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    462a:	4a04      	ldr	r2, [pc, #16]	; (463c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    462c:	9b02      	ldr	r3, [sp, #8]
    462e:	61d3      	str	r3, [r2, #28]
}
    4630:	bf00      	nop
    4632:	b004      	add	sp, #16
    4634:	4770      	bx	lr
    4636:	bf00      	nop
    4638:	00018120 	.word	0x00018120
    463c:	40064000 	.word	0x40064000

00004640 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4640:	b084      	sub	sp, #16
    4642:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4644:	9b01      	ldr	r3, [sp, #4]
    4646:	685b      	ldr	r3, [r3, #4]
    4648:	4a0b      	ldr	r2, [pc, #44]	; (4678 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    464a:	5cd3      	ldrb	r3, [r2, r3]
    464c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    464e:	4b0b      	ldr	r3, [pc, #44]	; (467c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4650:	69db      	ldr	r3, [r3, #28]
    4652:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4654:	9b02      	ldr	r3, [sp, #8]
    4656:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    465a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    465c:	9b03      	ldr	r3, [sp, #12]
    465e:	061b      	lsls	r3, r3, #24
    4660:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4664:	9a02      	ldr	r2, [sp, #8]
    4666:	4313      	orrs	r3, r2
    4668:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    466a:	4a04      	ldr	r2, [pc, #16]	; (467c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    466c:	9b02      	ldr	r3, [sp, #8]
    466e:	61d3      	str	r3, [r2, #28]
}
    4670:	bf00      	nop
    4672:	b004      	add	sp, #16
    4674:	4770      	bx	lr
    4676:	bf00      	nop
    4678:	00018120 	.word	0x00018120
    467c:	40064000 	.word	0x40064000

00004680 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4680:	b084      	sub	sp, #16
    4682:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4684:	4b0a      	ldr	r3, [pc, #40]	; (46b0 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    4686:	7b9b      	ldrb	r3, [r3, #14]
    4688:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    468a:	4b0a      	ldr	r3, [pc, #40]	; (46b4 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    468c:	691b      	ldr	r3, [r3, #16]
    468e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4690:	9b02      	ldr	r3, [sp, #8]
    4692:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    4696:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4698:	9b03      	ldr	r3, [sp, #12]
    469a:	011b      	lsls	r3, r3, #4
    469c:	9a02      	ldr	r2, [sp, #8]
    469e:	4313      	orrs	r3, r2
    46a0:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    46a2:	4a04      	ldr	r2, [pc, #16]	; (46b4 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    46a4:	9b02      	ldr	r3, [sp, #8]
    46a6:	6113      	str	r3, [r2, #16]
}
    46a8:	bf00      	nop
    46aa:	b004      	add	sp, #16
    46ac:	4770      	bx	lr
    46ae:	bf00      	nop
    46b0:	000180c8 	.word	0x000180c8
    46b4:	40048000 	.word	0x40048000

000046b8 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46b8:	b084      	sub	sp, #16
    46ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    46bc:	9b01      	ldr	r3, [sp, #4]
    46be:	685b      	ldr	r3, [r3, #4]
    46c0:	4a0a      	ldr	r2, [pc, #40]	; (46ec <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    46c2:	5cd3      	ldrb	r3, [r2, r3]
    46c4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    46c6:	4b0a      	ldr	r3, [pc, #40]	; (46f0 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    46c8:	691b      	ldr	r3, [r3, #16]
    46ca:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    46cc:	9b02      	ldr	r3, [sp, #8]
    46ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    46d2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    46d4:	9b03      	ldr	r3, [sp, #12]
    46d6:	011b      	lsls	r3, r3, #4
    46d8:	9a02      	ldr	r2, [sp, #8]
    46da:	4313      	orrs	r3, r2
    46dc:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    46de:	4a04      	ldr	r2, [pc, #16]	; (46f0 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    46e0:	9b02      	ldr	r3, [sp, #8]
    46e2:	6113      	str	r3, [r2, #16]
}
    46e4:	bf00      	nop
    46e6:	b004      	add	sp, #16
    46e8:	4770      	bx	lr
    46ea:	bf00      	nop
    46ec:	000180c8 	.word	0x000180c8
    46f0:	40048000 	.word	0x40048000

000046f4 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46f4:	b084      	sub	sp, #16
    46f6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    46f8:	4b0a      	ldr	r3, [pc, #40]	; (4724 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    46fa:	785b      	ldrb	r3, [r3, #1]
    46fc:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    46fe:	4b0a      	ldr	r3, [pc, #40]	; (4728 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4700:	691b      	ldr	r3, [r3, #16]
    4702:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4704:	9b02      	ldr	r3, [sp, #8]
    4706:	f023 030c 	bic.w	r3, r3, #12
    470a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    470c:	9b03      	ldr	r3, [sp, #12]
    470e:	009b      	lsls	r3, r3, #2
    4710:	9a02      	ldr	r2, [sp, #8]
    4712:	4313      	orrs	r3, r2
    4714:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4716:	4a04      	ldr	r2, [pc, #16]	; (4728 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4718:	9b02      	ldr	r3, [sp, #8]
    471a:	6113      	str	r3, [r2, #16]
}
    471c:	bf00      	nop
    471e:	b004      	add	sp, #16
    4720:	4770      	bx	lr
    4722:	bf00      	nop
    4724:	00018180 	.word	0x00018180
    4728:	40048000 	.word	0x40048000

0000472c <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    472c:	b084      	sub	sp, #16
    472e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4730:	9b01      	ldr	r3, [sp, #4]
    4732:	685b      	ldr	r3, [r3, #4]
    4734:	4a0a      	ldr	r2, [pc, #40]	; (4760 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    4736:	5cd3      	ldrb	r3, [r2, r3]
    4738:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    473a:	4b0a      	ldr	r3, [pc, #40]	; (4764 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    473c:	691b      	ldr	r3, [r3, #16]
    473e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4740:	9b02      	ldr	r3, [sp, #8]
    4742:	f023 030c 	bic.w	r3, r3, #12
    4746:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4748:	9b03      	ldr	r3, [sp, #12]
    474a:	009b      	lsls	r3, r3, #2
    474c:	9a02      	ldr	r2, [sp, #8]
    474e:	4313      	orrs	r3, r2
    4750:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4752:	4a04      	ldr	r2, [pc, #16]	; (4764 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4754:	9b02      	ldr	r3, [sp, #8]
    4756:	6113      	str	r3, [r2, #16]
}
    4758:	bf00      	nop
    475a:	b004      	add	sp, #16
    475c:	4770      	bx	lr
    475e:	bf00      	nop
    4760:	00018180 	.word	0x00018180
    4764:	40048000 	.word	0x40048000

00004768 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4768:	b084      	sub	sp, #16
    476a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    476c:	4b0a      	ldr	r3, [pc, #40]	; (4798 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    476e:	795b      	ldrb	r3, [r3, #5]
    4770:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    4772:	4b0a      	ldr	r3, [pc, #40]	; (479c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4774:	6a1b      	ldr	r3, [r3, #32]
    4776:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4778:	9b02      	ldr	r3, [sp, #8]
    477a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    477e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4780:	9b03      	ldr	r3, [sp, #12]
    4782:	061b      	lsls	r3, r3, #24
    4784:	9a02      	ldr	r2, [sp, #8]
    4786:	4313      	orrs	r3, r2
    4788:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    478a:	4a04      	ldr	r2, [pc, #16]	; (479c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    478c:	9b02      	ldr	r3, [sp, #8]
    478e:	6213      	str	r3, [r2, #32]
}
    4790:	bf00      	nop
    4792:	b004      	add	sp, #16
    4794:	4770      	bx	lr
    4796:	bf00      	nop
    4798:	00018120 	.word	0x00018120
    479c:	40064000 	.word	0x40064000

000047a0 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    47a0:	b084      	sub	sp, #16
    47a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47a4:	9b01      	ldr	r3, [sp, #4]
    47a6:	685b      	ldr	r3, [r3, #4]
    47a8:	4a0a      	ldr	r2, [pc, #40]	; (47d4 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    47aa:	5cd3      	ldrb	r3, [r2, r3]
    47ac:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    47ae:	4b0a      	ldr	r3, [pc, #40]	; (47d8 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    47b0:	6a1b      	ldr	r3, [r3, #32]
    47b2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    47b4:	9b02      	ldr	r3, [sp, #8]
    47b6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    47ba:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    47bc:	9b03      	ldr	r3, [sp, #12]
    47be:	061b      	lsls	r3, r3, #24
    47c0:	9a02      	ldr	r2, [sp, #8]
    47c2:	4313      	orrs	r3, r2
    47c4:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    47c6:	4a04      	ldr	r2, [pc, #16]	; (47d8 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    47c8:	9b02      	ldr	r3, [sp, #8]
    47ca:	6213      	str	r3, [r2, #32]
}
    47cc:	bf00      	nop
    47ce:	b004      	add	sp, #16
    47d0:	4770      	bx	lr
    47d2:	bf00      	nop
    47d4:	00018120 	.word	0x00018120
    47d8:	40064000 	.word	0x40064000

000047dc <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    47dc:	b086      	sub	sp, #24
    47de:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47e0:	4b20      	ldr	r3, [pc, #128]	; (4864 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    47e2:	795b      	ldrb	r3, [r3, #5]
    47e4:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    47e6:	9b01      	ldr	r3, [sp, #4]
    47e8:	681a      	ldr	r2, [r3, #0]
    47ea:	491f      	ldr	r1, [pc, #124]	; (4868 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    47ec:	4613      	mov	r3, r2
    47ee:	00db      	lsls	r3, r3, #3
    47f0:	4413      	add	r3, r2
    47f2:	440b      	add	r3, r1
    47f4:	781b      	ldrb	r3, [r3, #0]
    47f6:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    47f8:	4b1c      	ldr	r3, [pc, #112]	; (486c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    47fa:	68db      	ldr	r3, [r3, #12]
    47fc:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    47fe:	9b03      	ldr	r3, [sp, #12]
    4800:	2b03      	cmp	r3, #3
    4802:	d813      	bhi.n	482c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4804:	9b03      	ldr	r3, [sp, #12]
    4806:	005b      	lsls	r3, r3, #1
    4808:	3318      	adds	r3, #24
    480a:	2203      	movs	r2, #3
    480c:	fa02 f303 	lsl.w	r3, r2, r3
    4810:	43db      	mvns	r3, r3
    4812:	9a05      	ldr	r2, [sp, #20]
    4814:	4013      	ands	r3, r2
    4816:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4818:	9b03      	ldr	r3, [sp, #12]
    481a:	005b      	lsls	r3, r3, #1
    481c:	3318      	adds	r3, #24
    481e:	9a04      	ldr	r2, [sp, #16]
    4820:	fa02 f303 	lsl.w	r3, r2, r3
    4824:	9a05      	ldr	r2, [sp, #20]
    4826:	4313      	orrs	r3, r2
    4828:	9305      	str	r3, [sp, #20]
    482a:	e014      	b.n	4856 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    482c:	9b03      	ldr	r3, [sp, #12]
    482e:	3b04      	subs	r3, #4
    4830:	005b      	lsls	r3, r3, #1
    4832:	3310      	adds	r3, #16
    4834:	2203      	movs	r2, #3
    4836:	fa02 f303 	lsl.w	r3, r2, r3
    483a:	43db      	mvns	r3, r3
    483c:	9a05      	ldr	r2, [sp, #20]
    483e:	4013      	ands	r3, r2
    4840:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4842:	9b03      	ldr	r3, [sp, #12]
    4844:	3b04      	subs	r3, #4
    4846:	005b      	lsls	r3, r3, #1
    4848:	3310      	adds	r3, #16
    484a:	9a04      	ldr	r2, [sp, #16]
    484c:	fa02 f303 	lsl.w	r3, r2, r3
    4850:	9a05      	ldr	r2, [sp, #20]
    4852:	4313      	orrs	r3, r2
    4854:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    4856:	4a05      	ldr	r2, [pc, #20]	; (486c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4858:	9b05      	ldr	r3, [sp, #20]
    485a:	60d3      	str	r3, [r2, #12]
}
    485c:	bf00      	nop
    485e:	b006      	add	sp, #24
    4860:	4770      	bx	lr
    4862:	bf00      	nop
    4864:	000180c8 	.word	0x000180c8
    4868:	00017db8 	.word	0x00017db8
    486c:	40048000 	.word	0x40048000

00004870 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4870:	b086      	sub	sp, #24
    4872:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4874:	9b01      	ldr	r3, [sp, #4]
    4876:	685b      	ldr	r3, [r3, #4]
    4878:	4a20      	ldr	r2, [pc, #128]	; (48fc <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    487a:	5cd3      	ldrb	r3, [r2, r3]
    487c:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    487e:	9b01      	ldr	r3, [sp, #4]
    4880:	681a      	ldr	r2, [r3, #0]
    4882:	491f      	ldr	r1, [pc, #124]	; (4900 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    4884:	4613      	mov	r3, r2
    4886:	00db      	lsls	r3, r3, #3
    4888:	4413      	add	r3, r2
    488a:	440b      	add	r3, r1
    488c:	781b      	ldrb	r3, [r3, #0]
    488e:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4890:	4b1c      	ldr	r3, [pc, #112]	; (4904 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    4892:	68db      	ldr	r3, [r3, #12]
    4894:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    4896:	9b03      	ldr	r3, [sp, #12]
    4898:	2b03      	cmp	r3, #3
    489a:	d813      	bhi.n	48c4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    489c:	9b03      	ldr	r3, [sp, #12]
    489e:	005b      	lsls	r3, r3, #1
    48a0:	3318      	adds	r3, #24
    48a2:	2203      	movs	r2, #3
    48a4:	fa02 f303 	lsl.w	r3, r2, r3
    48a8:	43db      	mvns	r3, r3
    48aa:	9a05      	ldr	r2, [sp, #20]
    48ac:	4013      	ands	r3, r2
    48ae:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    48b0:	9b03      	ldr	r3, [sp, #12]
    48b2:	005b      	lsls	r3, r3, #1
    48b4:	3318      	adds	r3, #24
    48b6:	9a04      	ldr	r2, [sp, #16]
    48b8:	fa02 f303 	lsl.w	r3, r2, r3
    48bc:	9a05      	ldr	r2, [sp, #20]
    48be:	4313      	orrs	r3, r2
    48c0:	9305      	str	r3, [sp, #20]
    48c2:	e014      	b.n	48ee <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    48c4:	9b03      	ldr	r3, [sp, #12]
    48c6:	3b04      	subs	r3, #4
    48c8:	005b      	lsls	r3, r3, #1
    48ca:	3310      	adds	r3, #16
    48cc:	2203      	movs	r2, #3
    48ce:	fa02 f303 	lsl.w	r3, r2, r3
    48d2:	43db      	mvns	r3, r3
    48d4:	9a05      	ldr	r2, [sp, #20]
    48d6:	4013      	ands	r3, r2
    48d8:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    48da:	9b03      	ldr	r3, [sp, #12]
    48dc:	3b04      	subs	r3, #4
    48de:	005b      	lsls	r3, r3, #1
    48e0:	3310      	adds	r3, #16
    48e2:	9a04      	ldr	r2, [sp, #16]
    48e4:	fa02 f303 	lsl.w	r3, r2, r3
    48e8:	9a05      	ldr	r2, [sp, #20]
    48ea:	4313      	orrs	r3, r2
    48ec:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    48ee:	4a05      	ldr	r2, [pc, #20]	; (4904 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    48f0:	9b05      	ldr	r3, [sp, #20]
    48f2:	60d3      	str	r3, [r2, #12]
}
    48f4:	bf00      	nop
    48f6:	b006      	add	sp, #24
    48f8:	4770      	bx	lr
    48fa:	bf00      	nop
    48fc:	000180c8 	.word	0x000180c8
    4900:	00017db8 	.word	0x00017db8
    4904:	40048000 	.word	0x40048000

00004908 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4908:	b084      	sub	sp, #16
    490a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    490c:	4b06      	ldr	r3, [pc, #24]	; (4928 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    490e:	685b      	ldr	r3, [r3, #4]
    4910:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    4912:	9b03      	ldr	r3, [sp, #12]
    4914:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    4918:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    491a:	4a03      	ldr	r2, [pc, #12]	; (4928 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    491c:	9b03      	ldr	r3, [sp, #12]
    491e:	6053      	str	r3, [r2, #4]
}
    4920:	bf00      	nop
    4922:	b004      	add	sp, #16
    4924:	4770      	bx	lr
    4926:	bf00      	nop
    4928:	40048000 	.word	0x40048000

0000492c <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    492c:	b084      	sub	sp, #16
    492e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4930:	9b01      	ldr	r3, [sp, #4]
    4932:	685b      	ldr	r3, [r3, #4]
    4934:	4a0a      	ldr	r2, [pc, #40]	; (4960 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    4936:	5cd3      	ldrb	r3, [r2, r3]
    4938:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    493a:	4b0a      	ldr	r3, [pc, #40]	; (4964 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    493c:	685b      	ldr	r3, [r3, #4]
    493e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    4940:	9b02      	ldr	r3, [sp, #8]
    4942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    4946:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    4948:	9b03      	ldr	r3, [sp, #12]
    494a:	011b      	lsls	r3, r3, #4
    494c:	9a02      	ldr	r2, [sp, #8]
    494e:	4313      	orrs	r3, r2
    4950:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    4952:	4a04      	ldr	r2, [pc, #16]	; (4964 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4954:	9b02      	ldr	r3, [sp, #8]
    4956:	6053      	str	r3, [r2, #4]
}
    4958:	bf00      	nop
    495a:	b004      	add	sp, #16
    495c:	4770      	bx	lr
    495e:	bf00      	nop
    4960:	000180c8 	.word	0x000180c8
    4964:	40048000 	.word	0x40048000

00004968 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4968:	b084      	sub	sp, #16
    496a:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    496c:	9b01      	ldr	r3, [sp, #4]
    496e:	681a      	ldr	r2, [r3, #0]
    4970:	490f      	ldr	r1, [pc, #60]	; (49b0 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    4972:	4613      	mov	r3, r2
    4974:	00db      	lsls	r3, r3, #3
    4976:	4413      	add	r3, r2
    4978:	440b      	add	r3, r1
    497a:	3304      	adds	r3, #4
    497c:	781b      	ldrb	r3, [r3, #0]
    497e:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    4980:	4a0c      	ldr	r2, [pc, #48]	; (49b4 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4982:	9b03      	ldr	r3, [sp, #12]
    4984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4988:	490a      	ldr	r1, [pc, #40]	; (49b4 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    498a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    498e:	9b03      	ldr	r3, [sp, #12]
    4990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    4994:	4a07      	ldr	r2, [pc, #28]	; (49b4 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4996:	9b03      	ldr	r3, [sp, #12]
    4998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    499c:	4905      	ldr	r1, [pc, #20]	; (49b4 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    499e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    49a2:	9b03      	ldr	r3, [sp, #12]
    49a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    49a8:	bf00      	nop
    49aa:	b004      	add	sp, #16
    49ac:	4770      	bx	lr
    49ae:	bf00      	nop
    49b0:	00017db8 	.word	0x00017db8
    49b4:	40065000 	.word	0x40065000

000049b8 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    49b8:	b086      	sub	sp, #24
    49ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    49bc:	9b01      	ldr	r3, [sp, #4]
    49be:	681a      	ldr	r2, [r3, #0]
    49c0:	4912      	ldr	r1, [pc, #72]	; (4a0c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    49c2:	4613      	mov	r3, r2
    49c4:	00db      	lsls	r3, r3, #3
    49c6:	4413      	add	r3, r2
    49c8:	440b      	add	r3, r1
    49ca:	3304      	adds	r3, #4
    49cc:	781b      	ldrb	r3, [r3, #0]
    49ce:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    49d0:	9b01      	ldr	r3, [sp, #4]
    49d2:	685b      	ldr	r3, [r3, #4]
    49d4:	4a0e      	ldr	r2, [pc, #56]	; (4a10 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    49d6:	5cd3      	ldrb	r3, [r2, r3]
    49d8:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    49da:	4a0e      	ldr	r2, [pc, #56]	; (4a14 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    49dc:	9b05      	ldr	r3, [sp, #20]
    49de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    49e2:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    49e4:	9b03      	ldr	r3, [sp, #12]
    49e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    49ea:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    49ec:	9b04      	ldr	r3, [sp, #16]
    49ee:	061b      	lsls	r3, r3, #24
    49f0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    49f4:	9a03      	ldr	r2, [sp, #12]
    49f6:	4313      	orrs	r3, r2
    49f8:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    49fa:	4906      	ldr	r1, [pc, #24]	; (4a14 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    49fc:	9b05      	ldr	r3, [sp, #20]
    49fe:	9a03      	ldr	r2, [sp, #12]
    4a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4a04:	bf00      	nop
    4a06:	b006      	add	sp, #24
    4a08:	4770      	bx	lr
    4a0a:	bf00      	nop
    4a0c:	00017db8 	.word	0x00017db8
    4a10:	00018150 	.word	0x00018150
    4a14:	40065000 	.word	0x40065000

00004a18 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4a18:	b084      	sub	sp, #16
    4a1a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4a1c:	4b0b      	ldr	r3, [pc, #44]	; (4a4c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    4a1e:	7f1b      	ldrb	r3, [r3, #28]
    4a20:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    4a22:	4b0b      	ldr	r3, [pc, #44]	; (4a50 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4a24:	685b      	ldr	r3, [r3, #4]
    4a26:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4a28:	9b02      	ldr	r3, [sp, #8]
    4a2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4a2e:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4a30:	9b03      	ldr	r3, [sp, #12]
    4a32:	031b      	lsls	r3, r3, #12
    4a34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4a38:	9a02      	ldr	r2, [sp, #8]
    4a3a:	4313      	orrs	r3, r2
    4a3c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4a3e:	4a04      	ldr	r2, [pc, #16]	; (4a50 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4a40:	9b02      	ldr	r3, [sp, #8]
    4a42:	6053      	str	r3, [r2, #4]
}
    4a44:	bf00      	nop
    4a46:	b004      	add	sp, #16
    4a48:	4770      	bx	lr
    4a4a:	bf00      	nop
    4a4c:	000180c8 	.word	0x000180c8
    4a50:	40048000 	.word	0x40048000

00004a54 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4a54:	b084      	sub	sp, #16
    4a56:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4a58:	9b01      	ldr	r3, [sp, #4]
    4a5a:	685b      	ldr	r3, [r3, #4]
    4a5c:	4a0b      	ldr	r2, [pc, #44]	; (4a8c <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    4a5e:	5cd3      	ldrb	r3, [r2, r3]
    4a60:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    4a62:	4b0b      	ldr	r3, [pc, #44]	; (4a90 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4a64:	685b      	ldr	r3, [r3, #4]
    4a66:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4a68:	9b02      	ldr	r3, [sp, #8]
    4a6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4a6e:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4a70:	9b03      	ldr	r3, [sp, #12]
    4a72:	031b      	lsls	r3, r3, #12
    4a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4a78:	9a02      	ldr	r2, [sp, #8]
    4a7a:	4313      	orrs	r3, r2
    4a7c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4a7e:	4a04      	ldr	r2, [pc, #16]	; (4a90 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4a80:	9b02      	ldr	r3, [sp, #8]
    4a82:	6053      	str	r3, [r2, #4]
}
    4a84:	bf00      	nop
    4a86:	b004      	add	sp, #16
    4a88:	4770      	bx	lr
    4a8a:	bf00      	nop
    4a8c:	000180c8 	.word	0x000180c8
    4a90:	40048000 	.word	0x40048000

00004a94 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    4a94:	b500      	push	{lr}
    4a96:	b085      	sub	sp, #20
    4a98:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    4a9a:	2300      	movs	r3, #0
    4a9c:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    4aa0:	9b01      	ldr	r3, [sp, #4]
    4aa2:	2b00      	cmp	r3, #0
    4aa4:	d037      	beq.n	4b16 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4aa6:	2300      	movs	r3, #0
    4aa8:	9303      	str	r3, [sp, #12]
    4aaa:	e02b      	b.n	4b04 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4aac:	4b29      	ldr	r3, [pc, #164]	; (4b54 <DisableSafeClock+0xc0>)
    4aae:	6819      	ldr	r1, [r3, #0]
    4ab0:	9a03      	ldr	r2, [sp, #12]
    4ab2:	4613      	mov	r3, r2
    4ab4:	005b      	lsls	r3, r3, #1
    4ab6:	4413      	add	r3, r2
    4ab8:	009b      	lsls	r3, r3, #2
    4aba:	440b      	add	r3, r1
    4abc:	3314      	adds	r3, #20
    4abe:	681b      	ldr	r3, [r3, #0]
    4ac0:	2b05      	cmp	r3, #5
    4ac2:	d11c      	bne.n	4afe <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    4ac4:	2301      	movs	r3, #1
    4ac6:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    4aca:	4b22      	ldr	r3, [pc, #136]	; (4b54 <DisableSafeClock+0xc0>)
    4acc:	6819      	ldr	r1, [r3, #0]
    4ace:	9a03      	ldr	r2, [sp, #12]
    4ad0:	4613      	mov	r3, r2
    4ad2:	005b      	lsls	r3, r3, #1
    4ad4:	4413      	add	r3, r2
    4ad6:	009b      	lsls	r3, r3, #2
    4ad8:	440b      	add	r3, r1
    4ada:	3318      	adds	r3, #24
    4adc:	881b      	ldrh	r3, [r3, #0]
    4ade:	2b00      	cmp	r3, #0
    4ae0:	d118      	bne.n	4b14 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4ae2:	4b1d      	ldr	r3, [pc, #116]	; (4b58 <DisableSafeClock+0xc4>)
    4ae4:	791b      	ldrb	r3, [r3, #4]
    4ae6:	4619      	mov	r1, r3
    4ae8:	4a1c      	ldr	r2, [pc, #112]	; (4b5c <DisableSafeClock+0xc8>)
    4aea:	460b      	mov	r3, r1
    4aec:	005b      	lsls	r3, r3, #1
    4aee:	440b      	add	r3, r1
    4af0:	009b      	lsls	r3, r3, #2
    4af2:	4413      	add	r3, r2
    4af4:	3308      	adds	r3, #8
    4af6:	681b      	ldr	r3, [r3, #0]
    4af8:	2005      	movs	r0, #5
    4afa:	4798      	blx	r3
                }
                break;
    4afc:	e00a      	b.n	4b14 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4afe:	9b03      	ldr	r3, [sp, #12]
    4b00:	3301      	adds	r3, #1
    4b02:	9303      	str	r3, [sp, #12]
    4b04:	4b13      	ldr	r3, [pc, #76]	; (4b54 <DisableSafeClock+0xc0>)
    4b06:	681b      	ldr	r3, [r3, #0]
    4b08:	7a1b      	ldrb	r3, [r3, #8]
    4b0a:	461a      	mov	r2, r3
    4b0c:	9b03      	ldr	r3, [sp, #12]
    4b0e:	4293      	cmp	r3, r2
    4b10:	d3cc      	bcc.n	4aac <DisableSafeClock+0x18>
    4b12:	e000      	b.n	4b16 <DisableSafeClock+0x82>
                break;
    4b14:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    4b16:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4b1a:	f083 0301 	eor.w	r3, r3, #1
    4b1e:	b2db      	uxtb	r3, r3
    4b20:	2b00      	cmp	r3, #0
    4b22:	d013      	beq.n	4b4c <DisableSafeClock+0xb8>
    4b24:	4b0e      	ldr	r3, [pc, #56]	; (4b60 <DisableSafeClock+0xcc>)
    4b26:	781b      	ldrb	r3, [r3, #0]
    4b28:	f083 0301 	eor.w	r3, r3, #1
    4b2c:	b2db      	uxtb	r3, r3
    4b2e:	2b00      	cmp	r3, #0
    4b30:	d00c      	beq.n	4b4c <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4b32:	4b09      	ldr	r3, [pc, #36]	; (4b58 <DisableSafeClock+0xc4>)
    4b34:	791b      	ldrb	r3, [r3, #4]
    4b36:	4619      	mov	r1, r3
    4b38:	4a08      	ldr	r2, [pc, #32]	; (4b5c <DisableSafeClock+0xc8>)
    4b3a:	460b      	mov	r3, r1
    4b3c:	005b      	lsls	r3, r3, #1
    4b3e:	440b      	add	r3, r1
    4b40:	009b      	lsls	r3, r3, #2
    4b42:	4413      	add	r3, r2
    4b44:	3308      	adds	r3, #8
    4b46:	681b      	ldr	r3, [r3, #0]
    4b48:	2005      	movs	r0, #5
    4b4a:	4798      	blx	r3
    }
}
    4b4c:	bf00      	nop
    4b4e:	b005      	add	sp, #20
    4b50:	f85d fb04 	ldr.w	pc, [sp], #4
    4b54:	1fff8b9c 	.word	0x1fff8b9c
    4b58:	00017d48 	.word	0x00017d48
    4b5c:	00018378 	.word	0x00018378
    4b60:	1fff8b18 	.word	0x1fff8b18

00004b64 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    4b64:	4b06      	ldr	r3, [pc, #24]	; (4b80 <SetFircToResetValue_TrustedCall+0x1c>)
    4b66:	2200      	movs	r2, #0
    4b68:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    4b6c:	4b04      	ldr	r3, [pc, #16]	; (4b80 <SetFircToResetValue_TrustedCall+0x1c>)
    4b6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4b72:	4a03      	ldr	r2, [pc, #12]	; (4b80 <SetFircToResetValue_TrustedCall+0x1c>)
    4b74:	f043 0301 	orr.w	r3, r3, #1
    4b78:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4b7c:	bf00      	nop
    4b7e:	4770      	bx	lr
    4b80:	40064000 	.word	0x40064000

00004b84 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    4b84:	b084      	sub	sp, #16
    4b86:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    4b88:	2303      	movs	r3, #3
    4b8a:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4b8c:	2300      	movs	r3, #0
    4b8e:	9302      	str	r3, [sp, #8]
    4b90:	e028      	b.n	4be4 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    4b92:	9b01      	ldr	r3, [sp, #4]
    4b94:	9a02      	ldr	r2, [sp, #8]
    4b96:	320d      	adds	r2, #13
    4b98:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4b9c:	2b28      	cmp	r3, #40	; 0x28
    4b9e:	d10b      	bne.n	4bb8 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4ba0:	9a01      	ldr	r2, [sp, #4]
    4ba2:	9b02      	ldr	r3, [sp, #8]
    4ba4:	330d      	adds	r3, #13
    4ba6:	00db      	lsls	r3, r3, #3
    4ba8:	4413      	add	r3, r2
    4baa:	685b      	ldr	r3, [r3, #4]
    4bac:	4a2b      	ldr	r2, [pc, #172]	; (4c5c <SetSimLpoclksRegister_TrustedCall+0xd8>)
    4bae:	5cd3      	ldrb	r3, [r2, r3]
    4bb0:	011b      	lsls	r3, r3, #4
    4bb2:	9a03      	ldr	r2, [sp, #12]
    4bb4:	4313      	orrs	r3, r2
    4bb6:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    4bb8:	9b01      	ldr	r3, [sp, #4]
    4bba:	9a02      	ldr	r2, [sp, #8]
    4bbc:	320d      	adds	r2, #13
    4bbe:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4bc2:	2b29      	cmp	r3, #41	; 0x29
    4bc4:	d10b      	bne.n	4bde <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4bc6:	9a01      	ldr	r2, [sp, #4]
    4bc8:	9b02      	ldr	r3, [sp, #8]
    4bca:	330d      	adds	r3, #13
    4bcc:	00db      	lsls	r3, r3, #3
    4bce:	4413      	add	r3, r2
    4bd0:	685b      	ldr	r3, [r3, #4]
    4bd2:	4a23      	ldr	r2, [pc, #140]	; (4c60 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    4bd4:	5cd3      	ldrb	r3, [r2, r3]
    4bd6:	009b      	lsls	r3, r3, #2
    4bd8:	9a03      	ldr	r2, [sp, #12]
    4bda:	4313      	orrs	r3, r2
    4bdc:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4bde:	9b02      	ldr	r3, [sp, #8]
    4be0:	3301      	adds	r3, #1
    4be2:	9302      	str	r3, [sp, #8]
    4be4:	9b01      	ldr	r3, [sp, #4]
    4be6:	7adb      	ldrb	r3, [r3, #11]
    4be8:	461a      	mov	r2, r3
    4bea:	9b02      	ldr	r3, [sp, #8]
    4bec:	4293      	cmp	r3, r2
    4bee:	d3d0      	bcc.n	4b92 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4bf0:	2300      	movs	r3, #0
    4bf2:	9302      	str	r3, [sp, #8]
    4bf4:	e026      	b.n	4c44 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    4bf6:	9a01      	ldr	r2, [sp, #4]
    4bf8:	9b02      	ldr	r3, [sp, #8]
    4bfa:	334e      	adds	r3, #78	; 0x4e
    4bfc:	00db      	lsls	r3, r3, #3
    4bfe:	4413      	add	r3, r2
    4c00:	685b      	ldr	r3, [r3, #4]
    4c02:	2b12      	cmp	r3, #18
    4c04:	d109      	bne.n	4c1a <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    4c06:	9a01      	ldr	r2, [sp, #4]
    4c08:	9b02      	ldr	r3, [sp, #8]
    4c0a:	334e      	adds	r3, #78	; 0x4e
    4c0c:	00db      	lsls	r3, r3, #3
    4c0e:	4413      	add	r3, r2
    4c10:	891b      	ldrh	r3, [r3, #8]
    4c12:	005b      	lsls	r3, r3, #1
    4c14:	9a03      	ldr	r2, [sp, #12]
    4c16:	4313      	orrs	r3, r2
    4c18:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    4c1a:	9a01      	ldr	r2, [sp, #4]
    4c1c:	9b02      	ldr	r3, [sp, #8]
    4c1e:	334e      	adds	r3, #78	; 0x4e
    4c20:	00db      	lsls	r3, r3, #3
    4c22:	4413      	add	r3, r2
    4c24:	685b      	ldr	r3, [r3, #4]
    4c26:	2b13      	cmp	r3, #19
    4c28:	d109      	bne.n	4c3e <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    4c2a:	9a01      	ldr	r2, [sp, #4]
    4c2c:	9b02      	ldr	r3, [sp, #8]
    4c2e:	334e      	adds	r3, #78	; 0x4e
    4c30:	00db      	lsls	r3, r3, #3
    4c32:	4413      	add	r3, r2
    4c34:	891b      	ldrh	r3, [r3, #8]
    4c36:	461a      	mov	r2, r3
    4c38:	9b03      	ldr	r3, [sp, #12]
    4c3a:	4313      	orrs	r3, r2
    4c3c:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4c3e:	9b02      	ldr	r3, [sp, #8]
    4c40:	3301      	adds	r3, #1
    4c42:	9302      	str	r3, [sp, #8]
    4c44:	9b01      	ldr	r3, [sp, #4]
    4c46:	7c1b      	ldrb	r3, [r3, #16]
    4c48:	461a      	mov	r2, r3
    4c4a:	9b02      	ldr	r3, [sp, #8]
    4c4c:	4293      	cmp	r3, r2
    4c4e:	d3d2      	bcc.n	4bf6 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    4c50:	4a04      	ldr	r2, [pc, #16]	; (4c64 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    4c52:	9b03      	ldr	r3, [sp, #12]
    4c54:	6113      	str	r3, [r2, #16]
}
    4c56:	bf00      	nop
    4c58:	b004      	add	sp, #16
    4c5a:	4770      	bx	lr
    4c5c:	000180c8 	.word	0x000180c8
    4c60:	00018180 	.word	0x00018180
    4c64:	40048000 	.word	0x40048000

00004c68 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    4c68:	b500      	push	{lr}
    4c6a:	b089      	sub	sp, #36	; 0x24
    4c6c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4c6e:	2300      	movs	r3, #0
    4c70:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    4c74:	4a21      	ldr	r2, [pc, #132]	; (4cfc <Clock_Ip_SpecificPlatformInitClock+0x94>)
    4c76:	9b01      	ldr	r3, [sp, #4]
    4c78:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    4c7a:	4b21      	ldr	r3, [pc, #132]	; (4d00 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4c7c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4c80:	f003 0301 	and.w	r3, r3, #1
    4c84:	2b00      	cmp	r3, #0
    4c86:	d12e      	bne.n	4ce6 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    4c88:	4b1e      	ldr	r3, [pc, #120]	; (4d04 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4c8a:	2200      	movs	r2, #0
    4c8c:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    4c8e:	f7ff ff69 	bl	4b64 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4c92:	aa03      	add	r2, sp, #12
    4c94:	a904      	add	r1, sp, #16
    4c96:	a805      	add	r0, sp, #20
    4c98:	f24c 3350 	movw	r3, #50000	; 0xc350
    4c9c:	f7fe f8ae 	bl	2dfc <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4ca0:	4b17      	ldr	r3, [pc, #92]	; (4d00 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4ca2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4ca6:	0e1b      	lsrs	r3, r3, #24
    4ca8:	f003 0301 	and.w	r3, r3, #1
    4cac:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4cae:	9a03      	ldr	r2, [sp, #12]
    4cb0:	a904      	add	r1, sp, #16
    4cb2:	ab05      	add	r3, sp, #20
    4cb4:	4618      	mov	r0, r3
    4cb6:	f7fe f8bb 	bl	2e30 <Clock_Ip_TimeoutExpired>
    4cba:	4603      	mov	r3, r0
    4cbc:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4cc0:	9b06      	ldr	r3, [sp, #24]
    4cc2:	2b00      	cmp	r3, #0
    4cc4:	d106      	bne.n	4cd4 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    4cc6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4cca:	f083 0301 	eor.w	r3, r3, #1
    4cce:	b2db      	uxtb	r3, r3
    4cd0:	2b00      	cmp	r3, #0
    4cd2:	d1e5      	bne.n	4ca0 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4cd4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4cd8:	2b00      	cmp	r3, #0
    4cda:	d007      	beq.n	4cec <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4cdc:	2105      	movs	r1, #5
    4cde:	2001      	movs	r0, #1
    4ce0:	f7fe f87c 	bl	2ddc <Clock_Ip_ReportClockErrors>
    4ce4:	e002      	b.n	4cec <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4ce6:	4b07      	ldr	r3, [pc, #28]	; (4d04 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4ce8:	2201      	movs	r2, #1
    4cea:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4cec:	9801      	ldr	r0, [sp, #4]
    4cee:	f7ff ff49 	bl	4b84 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4cf2:	bf00      	nop
    4cf4:	b009      	add	sp, #36	; 0x24
    4cf6:	f85d fb04 	ldr.w	pc, [sp], #4
    4cfa:	bf00      	nop
    4cfc:	1fff8b9c 	.word	0x1fff8b9c
    4d00:	40064000 	.word	0x40064000
    4d04:	1fff8b18 	.word	0x1fff8b18

00004d08 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4d08:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4d0a:	2300      	movs	r3, #0
    4d0c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4d0e:	4b29      	ldr	r3, [pc, #164]	; (4db4 <getFircConfig+0xac>)
    4d10:	681b      	ldr	r3, [r3, #0]
    4d12:	2b00      	cmp	r3, #0
    4d14:	d024      	beq.n	4d60 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4d16:	2300      	movs	r3, #0
    4d18:	9301      	str	r3, [sp, #4]
    4d1a:	e01a      	b.n	4d52 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4d1c:	4b25      	ldr	r3, [pc, #148]	; (4db4 <getFircConfig+0xac>)
    4d1e:	6819      	ldr	r1, [r3, #0]
    4d20:	9a01      	ldr	r2, [sp, #4]
    4d22:	4613      	mov	r3, r2
    4d24:	005b      	lsls	r3, r3, #1
    4d26:	4413      	add	r3, r2
    4d28:	009b      	lsls	r3, r3, #2
    4d2a:	440b      	add	r3, r1
    4d2c:	3314      	adds	r3, #20
    4d2e:	681b      	ldr	r3, [r3, #0]
    4d30:	2b05      	cmp	r3, #5
    4d32:	d10b      	bne.n	4d4c <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4d34:	4b1f      	ldr	r3, [pc, #124]	; (4db4 <getFircConfig+0xac>)
    4d36:	6819      	ldr	r1, [r3, #0]
    4d38:	9a01      	ldr	r2, [sp, #4]
    4d3a:	4613      	mov	r3, r2
    4d3c:	005b      	lsls	r3, r3, #1
    4d3e:	4413      	add	r3, r2
    4d40:	009b      	lsls	r3, r3, #2
    4d42:	3310      	adds	r3, #16
    4d44:	440b      	add	r3, r1
    4d46:	3304      	adds	r3, #4
    4d48:	9300      	str	r3, [sp, #0]
                break;
    4d4a:	e009      	b.n	4d60 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4d4c:	9b01      	ldr	r3, [sp, #4]
    4d4e:	3301      	adds	r3, #1
    4d50:	9301      	str	r3, [sp, #4]
    4d52:	4b18      	ldr	r3, [pc, #96]	; (4db4 <getFircConfig+0xac>)
    4d54:	681b      	ldr	r3, [r3, #0]
    4d56:	7a1b      	ldrb	r3, [r3, #8]
    4d58:	461a      	mov	r2, r3
    4d5a:	9b01      	ldr	r3, [sp, #4]
    4d5c:	4293      	cmp	r3, r2
    4d5e:	d3dd      	bcc.n	4d1c <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4d60:	9b00      	ldr	r3, [sp, #0]
    4d62:	2b00      	cmp	r3, #0
    4d64:	d121      	bne.n	4daa <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4d66:	4b14      	ldr	r3, [pc, #80]	; (4db8 <getFircConfig+0xb0>)
    4d68:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4d6a:	4b13      	ldr	r3, [pc, #76]	; (4db8 <getFircConfig+0xb0>)
    4d6c:	2205      	movs	r2, #5
    4d6e:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4d70:	4b12      	ldr	r3, [pc, #72]	; (4dbc <getFircConfig+0xb4>)
    4d72:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4d76:	b29b      	uxth	r3, r3
    4d78:	f003 0301 	and.w	r3, r3, #1
    4d7c:	b29a      	uxth	r2, r3
    4d7e:	4b0e      	ldr	r3, [pc, #56]	; (4db8 <getFircConfig+0xb0>)
    4d80:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    4d82:	4b0e      	ldr	r3, [pc, #56]	; (4dbc <getFircConfig+0xb4>)
    4d84:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4d88:	b2db      	uxtb	r3, r3
    4d8a:	f003 0303 	and.w	r3, r3, #3
    4d8e:	b2da      	uxtb	r2, r3
    4d90:	4b09      	ldr	r3, [pc, #36]	; (4db8 <getFircConfig+0xb0>)
    4d92:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4d94:	4b09      	ldr	r3, [pc, #36]	; (4dbc <getFircConfig+0xb4>)
    4d96:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4d9a:	b2db      	uxtb	r3, r3
    4d9c:	10db      	asrs	r3, r3, #3
    4d9e:	b2db      	uxtb	r3, r3
    4da0:	f003 0301 	and.w	r3, r3, #1
    4da4:	b2da      	uxtb	r2, r3
    4da6:	4b04      	ldr	r3, [pc, #16]	; (4db8 <getFircConfig+0xb0>)
    4da8:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4daa:	9b00      	ldr	r3, [sp, #0]
}
    4dac:	4618      	mov	r0, r3
    4dae:	b002      	add	sp, #8
    4db0:	4770      	bx	lr
    4db2:	bf00      	nop
    4db4:	1fff8b9c 	.word	0x1fff8b9c
    4db8:	1fff8c08 	.word	0x1fff8c08
    4dbc:	40064000 	.word	0x40064000

00004dc0 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4dc0:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4dc2:	2300      	movs	r3, #0
    4dc4:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4dc6:	4b20      	ldr	r3, [pc, #128]	; (4e48 <getSoscConfig+0x88>)
    4dc8:	681b      	ldr	r3, [r3, #0]
    4dca:	2b00      	cmp	r3, #0
    4dcc:	d024      	beq.n	4e18 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4dce:	2300      	movs	r3, #0
    4dd0:	9301      	str	r3, [sp, #4]
    4dd2:	e01a      	b.n	4e0a <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4dd4:	4b1c      	ldr	r3, [pc, #112]	; (4e48 <getSoscConfig+0x88>)
    4dd6:	6819      	ldr	r1, [r3, #0]
    4dd8:	9a01      	ldr	r2, [sp, #4]
    4dda:	4613      	mov	r3, r2
    4ddc:	009b      	lsls	r3, r3, #2
    4dde:	4413      	add	r3, r2
    4de0:	009b      	lsls	r3, r3, #2
    4de2:	440b      	add	r3, r1
    4de4:	332c      	adds	r3, #44	; 0x2c
    4de6:	681b      	ldr	r3, [r3, #0]
    4de8:	2b08      	cmp	r3, #8
    4dea:	d10b      	bne.n	4e04 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4dec:	4b16      	ldr	r3, [pc, #88]	; (4e48 <getSoscConfig+0x88>)
    4dee:	6819      	ldr	r1, [r3, #0]
    4df0:	9a01      	ldr	r2, [sp, #4]
    4df2:	4613      	mov	r3, r2
    4df4:	009b      	lsls	r3, r3, #2
    4df6:	4413      	add	r3, r2
    4df8:	009b      	lsls	r3, r3, #2
    4dfa:	3328      	adds	r3, #40	; 0x28
    4dfc:	440b      	add	r3, r1
    4dfe:	3304      	adds	r3, #4
    4e00:	9300      	str	r3, [sp, #0]
                break;
    4e02:	e009      	b.n	4e18 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4e04:	9b01      	ldr	r3, [sp, #4]
    4e06:	3301      	adds	r3, #1
    4e08:	9301      	str	r3, [sp, #4]
    4e0a:	4b0f      	ldr	r3, [pc, #60]	; (4e48 <getSoscConfig+0x88>)
    4e0c:	681b      	ldr	r3, [r3, #0]
    4e0e:	7a5b      	ldrb	r3, [r3, #9]
    4e10:	461a      	mov	r2, r3
    4e12:	9b01      	ldr	r3, [sp, #4]
    4e14:	4293      	cmp	r3, r2
    4e16:	d3dd      	bcc.n	4dd4 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4e18:	9b00      	ldr	r3, [sp, #0]
    4e1a:	2b00      	cmp	r3, #0
    4e1c:	d110      	bne.n	4e40 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4e1e:	4b0b      	ldr	r3, [pc, #44]	; (4e4c <getSoscConfig+0x8c>)
    4e20:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4e22:	4b0a      	ldr	r3, [pc, #40]	; (4e4c <getSoscConfig+0x8c>)
    4e24:	2208      	movs	r2, #8
    4e26:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4e28:	4b09      	ldr	r3, [pc, #36]	; (4e50 <getSoscConfig+0x90>)
    4e2a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4e2e:	b29b      	uxth	r3, r3
    4e30:	f003 0301 	and.w	r3, r3, #1
    4e34:	b29a      	uxth	r2, r3
    4e36:	4b05      	ldr	r3, [pc, #20]	; (4e4c <getSoscConfig+0x8c>)
    4e38:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4e3a:	4b04      	ldr	r3, [pc, #16]	; (4e4c <getSoscConfig+0x8c>)
    4e3c:	4a05      	ldr	r2, [pc, #20]	; (4e54 <getSoscConfig+0x94>)
    4e3e:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4e40:	9b00      	ldr	r3, [sp, #0]
}
    4e42:	4618      	mov	r0, r3
    4e44:	b002      	add	sp, #8
    4e46:	4770      	bx	lr
    4e48:	1fff8b9c 	.word	0x1fff8b9c
    4e4c:	1fff8c14 	.word	0x1fff8c14
    4e50:	40064000 	.word	0x40064000
    4e54:	02625a00 	.word	0x02625a00

00004e58 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4e58:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4e5a:	2300      	movs	r3, #0
    4e5c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4e5e:	4b28      	ldr	r3, [pc, #160]	; (4f00 <getSpllConfig+0xa8>)
    4e60:	681b      	ldr	r3, [r3, #0]
    4e62:	2b00      	cmp	r3, #0
    4e64:	d023      	beq.n	4eae <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4e66:	2300      	movs	r3, #0
    4e68:	9301      	str	r3, [sp, #4]
    4e6a:	e019      	b.n	4ea0 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4e6c:	4b24      	ldr	r3, [pc, #144]	; (4f00 <getSpllConfig+0xa8>)
    4e6e:	6819      	ldr	r1, [r3, #0]
    4e70:	9a01      	ldr	r2, [sp, #4]
    4e72:	4613      	mov	r3, r2
    4e74:	009b      	lsls	r3, r3, #2
    4e76:	4413      	add	r3, r2
    4e78:	00db      	lsls	r3, r3, #3
    4e7a:	440b      	add	r3, r1
    4e7c:	3340      	adds	r3, #64	; 0x40
    4e7e:	681b      	ldr	r3, [r3, #0]
    4e80:	2b09      	cmp	r3, #9
    4e82:	d10a      	bne.n	4e9a <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4e84:	4b1e      	ldr	r3, [pc, #120]	; (4f00 <getSpllConfig+0xa8>)
    4e86:	6819      	ldr	r1, [r3, #0]
    4e88:	9a01      	ldr	r2, [sp, #4]
    4e8a:	4613      	mov	r3, r2
    4e8c:	009b      	lsls	r3, r3, #2
    4e8e:	4413      	add	r3, r2
    4e90:	00db      	lsls	r3, r3, #3
    4e92:	3340      	adds	r3, #64	; 0x40
    4e94:	440b      	add	r3, r1
    4e96:	9300      	str	r3, [sp, #0]
                break;
    4e98:	e009      	b.n	4eae <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4e9a:	9b01      	ldr	r3, [sp, #4]
    4e9c:	3301      	adds	r3, #1
    4e9e:	9301      	str	r3, [sp, #4]
    4ea0:	4b17      	ldr	r3, [pc, #92]	; (4f00 <getSpllConfig+0xa8>)
    4ea2:	681b      	ldr	r3, [r3, #0]
    4ea4:	7a9b      	ldrb	r3, [r3, #10]
    4ea6:	461a      	mov	r2, r3
    4ea8:	9b01      	ldr	r3, [sp, #4]
    4eaa:	4293      	cmp	r3, r2
    4eac:	d3de      	bcc.n	4e6c <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4eae:	9b00      	ldr	r3, [sp, #0]
    4eb0:	2b00      	cmp	r3, #0
    4eb2:	d121      	bne.n	4ef8 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4eb4:	4b13      	ldr	r3, [pc, #76]	; (4f04 <getSpllConfig+0xac>)
    4eb6:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4eb8:	4b12      	ldr	r3, [pc, #72]	; (4f04 <getSpllConfig+0xac>)
    4eba:	2209      	movs	r2, #9
    4ebc:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4ebe:	4b12      	ldr	r3, [pc, #72]	; (4f08 <getSpllConfig+0xb0>)
    4ec0:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4ec4:	b29b      	uxth	r3, r3
    4ec6:	f003 0301 	and.w	r3, r3, #1
    4eca:	b29a      	uxth	r2, r3
    4ecc:	4b0d      	ldr	r3, [pc, #52]	; (4f04 <getSpllConfig+0xac>)
    4ece:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4ed0:	4b0d      	ldr	r3, [pc, #52]	; (4f08 <getSpllConfig+0xb0>)
    4ed2:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4ed6:	0a1b      	lsrs	r3, r3, #8
    4ed8:	b2db      	uxtb	r3, r3
    4eda:	f003 0307 	and.w	r3, r3, #7
    4ede:	b2da      	uxtb	r2, r3
    4ee0:	4b08      	ldr	r3, [pc, #32]	; (4f04 <getSpllConfig+0xac>)
    4ee2:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4ee4:	4b08      	ldr	r3, [pc, #32]	; (4f08 <getSpllConfig+0xb0>)
    4ee6:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4eea:	0c1b      	lsrs	r3, r3, #16
    4eec:	b2db      	uxtb	r3, r3
    4eee:	f003 031f 	and.w	r3, r3, #31
    4ef2:	b2da      	uxtb	r2, r3
    4ef4:	4b03      	ldr	r3, [pc, #12]	; (4f04 <getSpllConfig+0xac>)
    4ef6:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4ef8:	9b00      	ldr	r3, [sp, #0]
}
    4efa:	4618      	mov	r0, r3
    4efc:	b002      	add	sp, #8
    4efe:	4770      	bx	lr
    4f00:	1fff8b9c 	.word	0x1fff8b9c
    4f04:	1fff8c28 	.word	0x1fff8c28
    4f08:	40064000 	.word	0x40064000

00004f0c <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4f0c:	b086      	sub	sp, #24
    4f0e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4f10:	2300      	movs	r3, #0
    4f12:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4f14:	9b01      	ldr	r3, [sp, #4]
    4f16:	2b1b      	cmp	r3, #27
    4f18:	d00f      	beq.n	4f3a <getSelectorConfig+0x2e>
    4f1a:	9b01      	ldr	r3, [sp, #4]
    4f1c:	2b1b      	cmp	r3, #27
    4f1e:	d80f      	bhi.n	4f40 <getSelectorConfig+0x34>
    4f20:	9b01      	ldr	r3, [sp, #4]
    4f22:	2b19      	cmp	r3, #25
    4f24:	d003      	beq.n	4f2e <getSelectorConfig+0x22>
    4f26:	9b01      	ldr	r3, [sp, #4]
    4f28:	2b1a      	cmp	r3, #26
    4f2a:	d003      	beq.n	4f34 <getSelectorConfig+0x28>
    4f2c:	e008      	b.n	4f40 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4f2e:	2300      	movs	r3, #0
    4f30:	9304      	str	r3, [sp, #16]
            break;
    4f32:	e008      	b.n	4f46 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4f34:	2301      	movs	r3, #1
    4f36:	9304      	str	r3, [sp, #16]
            break;
    4f38:	e005      	b.n	4f46 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    4f3a:	2302      	movs	r3, #2
    4f3c:	9304      	str	r3, [sp, #16]
            break;
    4f3e:	e002      	b.n	4f46 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4f40:	2300      	movs	r3, #0
    4f42:	9304      	str	r3, [sp, #16]
            break;
    4f44:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4f46:	4b36      	ldr	r3, [pc, #216]	; (5020 <getSelectorConfig+0x114>)
    4f48:	681b      	ldr	r3, [r3, #0]
    4f4a:	2b00      	cmp	r3, #0
    4f4c:	d01d      	beq.n	4f8a <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4f4e:	2300      	movs	r3, #0
    4f50:	9303      	str	r3, [sp, #12]
    4f52:	e013      	b.n	4f7c <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    4f54:	4b32      	ldr	r3, [pc, #200]	; (5020 <getSelectorConfig+0x114>)
    4f56:	681b      	ldr	r3, [r3, #0]
    4f58:	9a03      	ldr	r2, [sp, #12]
    4f5a:	320d      	adds	r2, #13
    4f5c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4f60:	9a01      	ldr	r2, [sp, #4]
    4f62:	429a      	cmp	r2, r3
    4f64:	d107      	bne.n	4f76 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    4f66:	4b2e      	ldr	r3, [pc, #184]	; (5020 <getSelectorConfig+0x114>)
    4f68:	681a      	ldr	r2, [r3, #0]
    4f6a:	9b03      	ldr	r3, [sp, #12]
    4f6c:	330d      	adds	r3, #13
    4f6e:	00db      	lsls	r3, r3, #3
    4f70:	4413      	add	r3, r2
    4f72:	9305      	str	r3, [sp, #20]
                break;
    4f74:	e009      	b.n	4f8a <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4f76:	9b03      	ldr	r3, [sp, #12]
    4f78:	3301      	adds	r3, #1
    4f7a:	9303      	str	r3, [sp, #12]
    4f7c:	4b28      	ldr	r3, [pc, #160]	; (5020 <getSelectorConfig+0x114>)
    4f7e:	681b      	ldr	r3, [r3, #0]
    4f80:	7adb      	ldrb	r3, [r3, #11]
    4f82:	461a      	mov	r2, r3
    4f84:	9b03      	ldr	r3, [sp, #12]
    4f86:	4293      	cmp	r3, r2
    4f88:	d3e4      	bcc.n	4f54 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4f8a:	9b05      	ldr	r3, [sp, #20]
    4f8c:	2b00      	cmp	r3, #0
    4f8e:	d140      	bne.n	5012 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4f90:	9b04      	ldr	r3, [sp, #16]
    4f92:	00db      	lsls	r3, r3, #3
    4f94:	4a23      	ldr	r2, [pc, #140]	; (5024 <getSelectorConfig+0x118>)
    4f96:	4413      	add	r3, r2
    4f98:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    4f9a:	4922      	ldr	r1, [pc, #136]	; (5024 <getSelectorConfig+0x118>)
    4f9c:	9b04      	ldr	r3, [sp, #16]
    4f9e:	9a01      	ldr	r2, [sp, #4]
    4fa0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    4fa4:	9b01      	ldr	r3, [sp, #4]
    4fa6:	2b1b      	cmp	r3, #27
    4fa8:	d025      	beq.n	4ff6 <getSelectorConfig+0xea>
    4faa:	9b01      	ldr	r3, [sp, #4]
    4fac:	2b1b      	cmp	r3, #27
    4fae:	d832      	bhi.n	5016 <getSelectorConfig+0x10a>
    4fb0:	9b01      	ldr	r3, [sp, #4]
    4fb2:	2b19      	cmp	r3, #25
    4fb4:	d003      	beq.n	4fbe <getSelectorConfig+0xb2>
    4fb6:	9b01      	ldr	r3, [sp, #4]
    4fb8:	2b1a      	cmp	r3, #26
    4fba:	d00e      	beq.n	4fda <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4fbc:	e02b      	b.n	5016 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    4fbe:	4b1a      	ldr	r3, [pc, #104]	; (5028 <getSelectorConfig+0x11c>)
    4fc0:	695b      	ldr	r3, [r3, #20]
    4fc2:	0e1b      	lsrs	r3, r3, #24
    4fc4:	f003 030f 	and.w	r3, r3, #15
    4fc8:	4a18      	ldr	r2, [pc, #96]	; (502c <getSelectorConfig+0x120>)
    4fca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4fce:	4915      	ldr	r1, [pc, #84]	; (5024 <getSelectorConfig+0x118>)
    4fd0:	9b04      	ldr	r3, [sp, #16]
    4fd2:	00db      	lsls	r3, r3, #3
    4fd4:	440b      	add	r3, r1
    4fd6:	605a      	str	r2, [r3, #4]
                break;
    4fd8:	e01e      	b.n	5018 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    4fda:	4b13      	ldr	r3, [pc, #76]	; (5028 <getSelectorConfig+0x11c>)
    4fdc:	699b      	ldr	r3, [r3, #24]
    4fde:	0e1b      	lsrs	r3, r3, #24
    4fe0:	f003 030f 	and.w	r3, r3, #15
    4fe4:	4a11      	ldr	r2, [pc, #68]	; (502c <getSelectorConfig+0x120>)
    4fe6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4fea:	490e      	ldr	r1, [pc, #56]	; (5024 <getSelectorConfig+0x118>)
    4fec:	9b04      	ldr	r3, [sp, #16]
    4fee:	00db      	lsls	r3, r3, #3
    4ff0:	440b      	add	r3, r1
    4ff2:	605a      	str	r2, [r3, #4]
                break;
    4ff4:	e010      	b.n	5018 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    4ff6:	4b0c      	ldr	r3, [pc, #48]	; (5028 <getSelectorConfig+0x11c>)
    4ff8:	69db      	ldr	r3, [r3, #28]
    4ffa:	0e1b      	lsrs	r3, r3, #24
    4ffc:	f003 030f 	and.w	r3, r3, #15
    5000:	4a0a      	ldr	r2, [pc, #40]	; (502c <getSelectorConfig+0x120>)
    5002:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5006:	4907      	ldr	r1, [pc, #28]	; (5024 <getSelectorConfig+0x118>)
    5008:	9b04      	ldr	r3, [sp, #16]
    500a:	00db      	lsls	r3, r3, #3
    500c:	440b      	add	r3, r1
    500e:	605a      	str	r2, [r3, #4]
                break;
    5010:	e002      	b.n	5018 <getSelectorConfig+0x10c>
        }
    }
    5012:	bf00      	nop
    5014:	e000      	b.n	5018 <getSelectorConfig+0x10c>
                break;
    5016:	bf00      	nop

    return ReturnValue;
    5018:	9b05      	ldr	r3, [sp, #20]
}
    501a:	4618      	mov	r0, r3
    501c:	b006      	add	sp, #24
    501e:	4770      	bx	lr
    5020:	1fff8b9c 	.word	0x1fff8b9c
    5024:	1fff8c50 	.word	0x1fff8c50
    5028:	40064000 	.word	0x40064000
    502c:	00018448 	.word	0x00018448

00005030 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    5030:	b086      	sub	sp, #24
    5032:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5034:	2300      	movs	r3, #0
    5036:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5038:	2300      	movs	r3, #0
    503a:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    503c:	9b01      	ldr	r3, [sp, #4]
    503e:	2b1f      	cmp	r3, #31
    5040:	d00f      	beq.n	5062 <getCoreDividerConfig+0x32>
    5042:	9b01      	ldr	r3, [sp, #4]
    5044:	2b1f      	cmp	r3, #31
    5046:	d80f      	bhi.n	5068 <getCoreDividerConfig+0x38>
    5048:	9b01      	ldr	r3, [sp, #4]
    504a:	2b1d      	cmp	r3, #29
    504c:	d003      	beq.n	5056 <getCoreDividerConfig+0x26>
    504e:	9b01      	ldr	r3, [sp, #4]
    5050:	2b1e      	cmp	r3, #30
    5052:	d003      	beq.n	505c <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5054:	e008      	b.n	5068 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5056:	2300      	movs	r3, #0
    5058:	9304      	str	r3, [sp, #16]
            break;
    505a:	e006      	b.n	506a <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    505c:	2301      	movs	r3, #1
    505e:	9304      	str	r3, [sp, #16]
            break;
    5060:	e003      	b.n	506a <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5062:	2302      	movs	r3, #2
    5064:	9304      	str	r3, [sp, #16]
            break;
    5066:	e000      	b.n	506a <getCoreDividerConfig+0x3a>
                break;
    5068:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    506a:	4b41      	ldr	r3, [pc, #260]	; (5170 <getCoreDividerConfig+0x140>)
    506c:	681b      	ldr	r3, [r3, #0]
    506e:	2b00      	cmp	r3, #0
    5070:	d026      	beq.n	50c0 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5072:	2300      	movs	r3, #0
    5074:	9303      	str	r3, [sp, #12]
    5076:	e01c      	b.n	50b2 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5078:	4b3d      	ldr	r3, [pc, #244]	; (5170 <getCoreDividerConfig+0x140>)
    507a:	6819      	ldr	r1, [r3, #0]
    507c:	9a03      	ldr	r2, [sp, #12]
    507e:	4613      	mov	r3, r2
    5080:	005b      	lsls	r3, r3, #1
    5082:	4413      	add	r3, r2
    5084:	009b      	lsls	r3, r3, #2
    5086:	440b      	add	r3, r1
    5088:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    508c:	681b      	ldr	r3, [r3, #0]
    508e:	9a01      	ldr	r2, [sp, #4]
    5090:	429a      	cmp	r2, r3
    5092:	d10b      	bne.n	50ac <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5094:	4b36      	ldr	r3, [pc, #216]	; (5170 <getCoreDividerConfig+0x140>)
    5096:	6819      	ldr	r1, [r3, #0]
    5098:	9a03      	ldr	r2, [sp, #12]
    509a:	4613      	mov	r3, r2
    509c:	005b      	lsls	r3, r3, #1
    509e:	4413      	add	r3, r2
    50a0:	009b      	lsls	r3, r3, #2
    50a2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    50a6:	440b      	add	r3, r1
    50a8:	9305      	str	r3, [sp, #20]
                break;
    50aa:	e009      	b.n	50c0 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    50ac:	9b03      	ldr	r3, [sp, #12]
    50ae:	3301      	adds	r3, #1
    50b0:	9303      	str	r3, [sp, #12]
    50b2:	4b2f      	ldr	r3, [pc, #188]	; (5170 <getCoreDividerConfig+0x140>)
    50b4:	681b      	ldr	r3, [r3, #0]
    50b6:	7b1b      	ldrb	r3, [r3, #12]
    50b8:	461a      	mov	r2, r3
    50ba:	9b03      	ldr	r3, [sp, #12]
    50bc:	4293      	cmp	r3, r2
    50be:	d3db      	bcc.n	5078 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    50c0:	9b05      	ldr	r3, [sp, #20]
    50c2:	2b00      	cmp	r3, #0
    50c4:	d14d      	bne.n	5162 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    50c6:	9a04      	ldr	r2, [sp, #16]
    50c8:	4613      	mov	r3, r2
    50ca:	005b      	lsls	r3, r3, #1
    50cc:	4413      	add	r3, r2
    50ce:	009b      	lsls	r3, r3, #2
    50d0:	4a28      	ldr	r2, [pc, #160]	; (5174 <getCoreDividerConfig+0x144>)
    50d2:	4413      	add	r3, r2
    50d4:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    50d6:	4927      	ldr	r1, [pc, #156]	; (5174 <getCoreDividerConfig+0x144>)
    50d8:	9a04      	ldr	r2, [sp, #16]
    50da:	4613      	mov	r3, r2
    50dc:	005b      	lsls	r3, r3, #1
    50de:	4413      	add	r3, r2
    50e0:	009b      	lsls	r3, r3, #2
    50e2:	440b      	add	r3, r1
    50e4:	9a01      	ldr	r2, [sp, #4]
    50e6:	601a      	str	r2, [r3, #0]
        switch(Name)
    50e8:	9b01      	ldr	r3, [sp, #4]
    50ea:	2b1f      	cmp	r3, #31
    50ec:	d029      	beq.n	5142 <getCoreDividerConfig+0x112>
    50ee:	9b01      	ldr	r3, [sp, #4]
    50f0:	2b1f      	cmp	r3, #31
    50f2:	d838      	bhi.n	5166 <getCoreDividerConfig+0x136>
    50f4:	9b01      	ldr	r3, [sp, #4]
    50f6:	2b1d      	cmp	r3, #29
    50f8:	d003      	beq.n	5102 <getCoreDividerConfig+0xd2>
    50fa:	9b01      	ldr	r3, [sp, #4]
    50fc:	2b1e      	cmp	r3, #30
    50fe:	d010      	beq.n	5122 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5100:	e031      	b.n	5166 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    5102:	4b1d      	ldr	r3, [pc, #116]	; (5178 <getCoreDividerConfig+0x148>)
    5104:	695b      	ldr	r3, [r3, #20]
    5106:	0c1b      	lsrs	r3, r3, #16
    5108:	f003 030f 	and.w	r3, r3, #15
    510c:	1c59      	adds	r1, r3, #1
    510e:	4819      	ldr	r0, [pc, #100]	; (5174 <getCoreDividerConfig+0x144>)
    5110:	9a04      	ldr	r2, [sp, #16]
    5112:	4613      	mov	r3, r2
    5114:	005b      	lsls	r3, r3, #1
    5116:	4413      	add	r3, r2
    5118:	009b      	lsls	r3, r3, #2
    511a:	4403      	add	r3, r0
    511c:	3304      	adds	r3, #4
    511e:	6019      	str	r1, [r3, #0]
                break;
    5120:	e022      	b.n	5168 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    5122:	4b15      	ldr	r3, [pc, #84]	; (5178 <getCoreDividerConfig+0x148>)
    5124:	699b      	ldr	r3, [r3, #24]
    5126:	0c1b      	lsrs	r3, r3, #16
    5128:	f003 030f 	and.w	r3, r3, #15
    512c:	1c59      	adds	r1, r3, #1
    512e:	4811      	ldr	r0, [pc, #68]	; (5174 <getCoreDividerConfig+0x144>)
    5130:	9a04      	ldr	r2, [sp, #16]
    5132:	4613      	mov	r3, r2
    5134:	005b      	lsls	r3, r3, #1
    5136:	4413      	add	r3, r2
    5138:	009b      	lsls	r3, r3, #2
    513a:	4403      	add	r3, r0
    513c:	3304      	adds	r3, #4
    513e:	6019      	str	r1, [r3, #0]
                break;
    5140:	e012      	b.n	5168 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    5142:	4b0d      	ldr	r3, [pc, #52]	; (5178 <getCoreDividerConfig+0x148>)
    5144:	69db      	ldr	r3, [r3, #28]
    5146:	0c1b      	lsrs	r3, r3, #16
    5148:	f003 030f 	and.w	r3, r3, #15
    514c:	1c59      	adds	r1, r3, #1
    514e:	4809      	ldr	r0, [pc, #36]	; (5174 <getCoreDividerConfig+0x144>)
    5150:	9a04      	ldr	r2, [sp, #16]
    5152:	4613      	mov	r3, r2
    5154:	005b      	lsls	r3, r3, #1
    5156:	4413      	add	r3, r2
    5158:	009b      	lsls	r3, r3, #2
    515a:	4403      	add	r3, r0
    515c:	3304      	adds	r3, #4
    515e:	6019      	str	r1, [r3, #0]
                break;
    5160:	e002      	b.n	5168 <getCoreDividerConfig+0x138>
        }
    }
    5162:	bf00      	nop
    5164:	e000      	b.n	5168 <getCoreDividerConfig+0x138>
                break;
    5166:	bf00      	nop

    return ReturnValue;
    5168:	9b05      	ldr	r3, [sp, #20]
}
    516a:	4618      	mov	r0, r3
    516c:	b006      	add	sp, #24
    516e:	4770      	bx	lr
    5170:	1fff8b9c 	.word	0x1fff8b9c
    5174:	1fff8c68 	.word	0x1fff8c68
    5178:	40064000 	.word	0x40064000

0000517c <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    517c:	b086      	sub	sp, #24
    517e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5180:	2300      	movs	r3, #0
    5182:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5184:	2300      	movs	r3, #0
    5186:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5188:	9b01      	ldr	r3, [sp, #4]
    518a:	2b23      	cmp	r3, #35	; 0x23
    518c:	d00f      	beq.n	51ae <getBusDividerConfig+0x32>
    518e:	9b01      	ldr	r3, [sp, #4]
    5190:	2b23      	cmp	r3, #35	; 0x23
    5192:	d80f      	bhi.n	51b4 <getBusDividerConfig+0x38>
    5194:	9b01      	ldr	r3, [sp, #4]
    5196:	2b21      	cmp	r3, #33	; 0x21
    5198:	d003      	beq.n	51a2 <getBusDividerConfig+0x26>
    519a:	9b01      	ldr	r3, [sp, #4]
    519c:	2b22      	cmp	r3, #34	; 0x22
    519e:	d003      	beq.n	51a8 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    51a0:	e008      	b.n	51b4 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    51a2:	2300      	movs	r3, #0
    51a4:	9304      	str	r3, [sp, #16]
            break;
    51a6:	e006      	b.n	51b6 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    51a8:	2301      	movs	r3, #1
    51aa:	9304      	str	r3, [sp, #16]
            break;
    51ac:	e003      	b.n	51b6 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    51ae:	2302      	movs	r3, #2
    51b0:	9304      	str	r3, [sp, #16]
            break;
    51b2:	e000      	b.n	51b6 <getBusDividerConfig+0x3a>
                break;
    51b4:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    51b6:	4b41      	ldr	r3, [pc, #260]	; (52bc <getBusDividerConfig+0x140>)
    51b8:	681b      	ldr	r3, [r3, #0]
    51ba:	2b00      	cmp	r3, #0
    51bc:	d026      	beq.n	520c <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    51be:	2300      	movs	r3, #0
    51c0:	9303      	str	r3, [sp, #12]
    51c2:	e01c      	b.n	51fe <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    51c4:	4b3d      	ldr	r3, [pc, #244]	; (52bc <getBusDividerConfig+0x140>)
    51c6:	6819      	ldr	r1, [r3, #0]
    51c8:	9a03      	ldr	r2, [sp, #12]
    51ca:	4613      	mov	r3, r2
    51cc:	005b      	lsls	r3, r3, #1
    51ce:	4413      	add	r3, r2
    51d0:	009b      	lsls	r3, r3, #2
    51d2:	440b      	add	r3, r1
    51d4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    51d8:	681b      	ldr	r3, [r3, #0]
    51da:	9a01      	ldr	r2, [sp, #4]
    51dc:	429a      	cmp	r2, r3
    51de:	d10b      	bne.n	51f8 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    51e0:	4b36      	ldr	r3, [pc, #216]	; (52bc <getBusDividerConfig+0x140>)
    51e2:	6819      	ldr	r1, [r3, #0]
    51e4:	9a03      	ldr	r2, [sp, #12]
    51e6:	4613      	mov	r3, r2
    51e8:	005b      	lsls	r3, r3, #1
    51ea:	4413      	add	r3, r2
    51ec:	009b      	lsls	r3, r3, #2
    51ee:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    51f2:	440b      	add	r3, r1
    51f4:	9305      	str	r3, [sp, #20]
                break;
    51f6:	e009      	b.n	520c <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    51f8:	9b03      	ldr	r3, [sp, #12]
    51fa:	3301      	adds	r3, #1
    51fc:	9303      	str	r3, [sp, #12]
    51fe:	4b2f      	ldr	r3, [pc, #188]	; (52bc <getBusDividerConfig+0x140>)
    5200:	681b      	ldr	r3, [r3, #0]
    5202:	7b1b      	ldrb	r3, [r3, #12]
    5204:	461a      	mov	r2, r3
    5206:	9b03      	ldr	r3, [sp, #12]
    5208:	4293      	cmp	r3, r2
    520a:	d3db      	bcc.n	51c4 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    520c:	9b05      	ldr	r3, [sp, #20]
    520e:	2b00      	cmp	r3, #0
    5210:	d14d      	bne.n	52ae <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    5212:	9a04      	ldr	r2, [sp, #16]
    5214:	4613      	mov	r3, r2
    5216:	005b      	lsls	r3, r3, #1
    5218:	4413      	add	r3, r2
    521a:	009b      	lsls	r3, r3, #2
    521c:	4a28      	ldr	r2, [pc, #160]	; (52c0 <getBusDividerConfig+0x144>)
    521e:	4413      	add	r3, r2
    5220:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    5222:	4927      	ldr	r1, [pc, #156]	; (52c0 <getBusDividerConfig+0x144>)
    5224:	9a04      	ldr	r2, [sp, #16]
    5226:	4613      	mov	r3, r2
    5228:	005b      	lsls	r3, r3, #1
    522a:	4413      	add	r3, r2
    522c:	009b      	lsls	r3, r3, #2
    522e:	440b      	add	r3, r1
    5230:	9a01      	ldr	r2, [sp, #4]
    5232:	601a      	str	r2, [r3, #0]
        switch(Name)
    5234:	9b01      	ldr	r3, [sp, #4]
    5236:	2b23      	cmp	r3, #35	; 0x23
    5238:	d029      	beq.n	528e <getBusDividerConfig+0x112>
    523a:	9b01      	ldr	r3, [sp, #4]
    523c:	2b23      	cmp	r3, #35	; 0x23
    523e:	d838      	bhi.n	52b2 <getBusDividerConfig+0x136>
    5240:	9b01      	ldr	r3, [sp, #4]
    5242:	2b21      	cmp	r3, #33	; 0x21
    5244:	d003      	beq.n	524e <getBusDividerConfig+0xd2>
    5246:	9b01      	ldr	r3, [sp, #4]
    5248:	2b22      	cmp	r3, #34	; 0x22
    524a:	d010      	beq.n	526e <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    524c:	e031      	b.n	52b2 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    524e:	4b1d      	ldr	r3, [pc, #116]	; (52c4 <getBusDividerConfig+0x148>)
    5250:	695b      	ldr	r3, [r3, #20]
    5252:	091b      	lsrs	r3, r3, #4
    5254:	f003 030f 	and.w	r3, r3, #15
    5258:	1c59      	adds	r1, r3, #1
    525a:	4819      	ldr	r0, [pc, #100]	; (52c0 <getBusDividerConfig+0x144>)
    525c:	9a04      	ldr	r2, [sp, #16]
    525e:	4613      	mov	r3, r2
    5260:	005b      	lsls	r3, r3, #1
    5262:	4413      	add	r3, r2
    5264:	009b      	lsls	r3, r3, #2
    5266:	4403      	add	r3, r0
    5268:	3304      	adds	r3, #4
    526a:	6019      	str	r1, [r3, #0]
                break;
    526c:	e022      	b.n	52b4 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    526e:	4b15      	ldr	r3, [pc, #84]	; (52c4 <getBusDividerConfig+0x148>)
    5270:	699b      	ldr	r3, [r3, #24]
    5272:	091b      	lsrs	r3, r3, #4
    5274:	f003 030f 	and.w	r3, r3, #15
    5278:	1c59      	adds	r1, r3, #1
    527a:	4811      	ldr	r0, [pc, #68]	; (52c0 <getBusDividerConfig+0x144>)
    527c:	9a04      	ldr	r2, [sp, #16]
    527e:	4613      	mov	r3, r2
    5280:	005b      	lsls	r3, r3, #1
    5282:	4413      	add	r3, r2
    5284:	009b      	lsls	r3, r3, #2
    5286:	4403      	add	r3, r0
    5288:	3304      	adds	r3, #4
    528a:	6019      	str	r1, [r3, #0]
                break;
    528c:	e012      	b.n	52b4 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    528e:	4b0d      	ldr	r3, [pc, #52]	; (52c4 <getBusDividerConfig+0x148>)
    5290:	69db      	ldr	r3, [r3, #28]
    5292:	091b      	lsrs	r3, r3, #4
    5294:	f003 030f 	and.w	r3, r3, #15
    5298:	1c59      	adds	r1, r3, #1
    529a:	4809      	ldr	r0, [pc, #36]	; (52c0 <getBusDividerConfig+0x144>)
    529c:	9a04      	ldr	r2, [sp, #16]
    529e:	4613      	mov	r3, r2
    52a0:	005b      	lsls	r3, r3, #1
    52a2:	4413      	add	r3, r2
    52a4:	009b      	lsls	r3, r3, #2
    52a6:	4403      	add	r3, r0
    52a8:	3304      	adds	r3, #4
    52aa:	6019      	str	r1, [r3, #0]
                break;
    52ac:	e002      	b.n	52b4 <getBusDividerConfig+0x138>
        }
    }
    52ae:	bf00      	nop
    52b0:	e000      	b.n	52b4 <getBusDividerConfig+0x138>
                break;
    52b2:	bf00      	nop

    return ReturnValue;
    52b4:	9b05      	ldr	r3, [sp, #20]
}
    52b6:	4618      	mov	r0, r3
    52b8:	b006      	add	sp, #24
    52ba:	4770      	bx	lr
    52bc:	1fff8b9c 	.word	0x1fff8b9c
    52c0:	1fff8c8c 	.word	0x1fff8c8c
    52c4:	40064000 	.word	0x40064000

000052c8 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    52c8:	b086      	sub	sp, #24
    52ca:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    52cc:	2300      	movs	r3, #0
    52ce:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    52d0:	2300      	movs	r3, #0
    52d2:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    52d4:	9b01      	ldr	r3, [sp, #4]
    52d6:	2b27      	cmp	r3, #39	; 0x27
    52d8:	d00f      	beq.n	52fa <getSlowDividerConfig+0x32>
    52da:	9b01      	ldr	r3, [sp, #4]
    52dc:	2b27      	cmp	r3, #39	; 0x27
    52de:	d80f      	bhi.n	5300 <getSlowDividerConfig+0x38>
    52e0:	9b01      	ldr	r3, [sp, #4]
    52e2:	2b25      	cmp	r3, #37	; 0x25
    52e4:	d003      	beq.n	52ee <getSlowDividerConfig+0x26>
    52e6:	9b01      	ldr	r3, [sp, #4]
    52e8:	2b26      	cmp	r3, #38	; 0x26
    52ea:	d003      	beq.n	52f4 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    52ec:	e008      	b.n	5300 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    52ee:	2300      	movs	r3, #0
    52f0:	9304      	str	r3, [sp, #16]
            break;
    52f2:	e006      	b.n	5302 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    52f4:	2301      	movs	r3, #1
    52f6:	9304      	str	r3, [sp, #16]
            break;
    52f8:	e003      	b.n	5302 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    52fa:	2302      	movs	r3, #2
    52fc:	9304      	str	r3, [sp, #16]
            break;
    52fe:	e000      	b.n	5302 <getSlowDividerConfig+0x3a>
                break;
    5300:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5302:	4b40      	ldr	r3, [pc, #256]	; (5404 <getSlowDividerConfig+0x13c>)
    5304:	681b      	ldr	r3, [r3, #0]
    5306:	2b00      	cmp	r3, #0
    5308:	d026      	beq.n	5358 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    530a:	2300      	movs	r3, #0
    530c:	9303      	str	r3, [sp, #12]
    530e:	e01c      	b.n	534a <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5310:	4b3c      	ldr	r3, [pc, #240]	; (5404 <getSlowDividerConfig+0x13c>)
    5312:	6819      	ldr	r1, [r3, #0]
    5314:	9a03      	ldr	r2, [sp, #12]
    5316:	4613      	mov	r3, r2
    5318:	005b      	lsls	r3, r3, #1
    531a:	4413      	add	r3, r2
    531c:	009b      	lsls	r3, r3, #2
    531e:	440b      	add	r3, r1
    5320:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5324:	681b      	ldr	r3, [r3, #0]
    5326:	9a01      	ldr	r2, [sp, #4]
    5328:	429a      	cmp	r2, r3
    532a:	d10b      	bne.n	5344 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    532c:	4b35      	ldr	r3, [pc, #212]	; (5404 <getSlowDividerConfig+0x13c>)
    532e:	6819      	ldr	r1, [r3, #0]
    5330:	9a03      	ldr	r2, [sp, #12]
    5332:	4613      	mov	r3, r2
    5334:	005b      	lsls	r3, r3, #1
    5336:	4413      	add	r3, r2
    5338:	009b      	lsls	r3, r3, #2
    533a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    533e:	440b      	add	r3, r1
    5340:	9305      	str	r3, [sp, #20]
                break;
    5342:	e009      	b.n	5358 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5344:	9b03      	ldr	r3, [sp, #12]
    5346:	3301      	adds	r3, #1
    5348:	9303      	str	r3, [sp, #12]
    534a:	4b2e      	ldr	r3, [pc, #184]	; (5404 <getSlowDividerConfig+0x13c>)
    534c:	681b      	ldr	r3, [r3, #0]
    534e:	7b1b      	ldrb	r3, [r3, #12]
    5350:	461a      	mov	r2, r3
    5352:	9b03      	ldr	r3, [sp, #12]
    5354:	4293      	cmp	r3, r2
    5356:	d3db      	bcc.n	5310 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5358:	9b05      	ldr	r3, [sp, #20]
    535a:	2b00      	cmp	r3, #0
    535c:	d14a      	bne.n	53f4 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    535e:	9a04      	ldr	r2, [sp, #16]
    5360:	4613      	mov	r3, r2
    5362:	005b      	lsls	r3, r3, #1
    5364:	4413      	add	r3, r2
    5366:	009b      	lsls	r3, r3, #2
    5368:	4a27      	ldr	r2, [pc, #156]	; (5408 <getSlowDividerConfig+0x140>)
    536a:	4413      	add	r3, r2
    536c:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    536e:	4926      	ldr	r1, [pc, #152]	; (5408 <getSlowDividerConfig+0x140>)
    5370:	9a04      	ldr	r2, [sp, #16]
    5372:	4613      	mov	r3, r2
    5374:	005b      	lsls	r3, r3, #1
    5376:	4413      	add	r3, r2
    5378:	009b      	lsls	r3, r3, #2
    537a:	440b      	add	r3, r1
    537c:	9a01      	ldr	r2, [sp, #4]
    537e:	601a      	str	r2, [r3, #0]
        switch(Name)
    5380:	9b01      	ldr	r3, [sp, #4]
    5382:	2b27      	cmp	r3, #39	; 0x27
    5384:	d027      	beq.n	53d6 <getSlowDividerConfig+0x10e>
    5386:	9b01      	ldr	r3, [sp, #4]
    5388:	2b27      	cmp	r3, #39	; 0x27
    538a:	d835      	bhi.n	53f8 <getSlowDividerConfig+0x130>
    538c:	9b01      	ldr	r3, [sp, #4]
    538e:	2b25      	cmp	r3, #37	; 0x25
    5390:	d003      	beq.n	539a <getSlowDividerConfig+0xd2>
    5392:	9b01      	ldr	r3, [sp, #4]
    5394:	2b26      	cmp	r3, #38	; 0x26
    5396:	d00f      	beq.n	53b8 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5398:	e02e      	b.n	53f8 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    539a:	4b1c      	ldr	r3, [pc, #112]	; (540c <getSlowDividerConfig+0x144>)
    539c:	695b      	ldr	r3, [r3, #20]
    539e:	f003 030f 	and.w	r3, r3, #15
    53a2:	1c59      	adds	r1, r3, #1
    53a4:	4818      	ldr	r0, [pc, #96]	; (5408 <getSlowDividerConfig+0x140>)
    53a6:	9a04      	ldr	r2, [sp, #16]
    53a8:	4613      	mov	r3, r2
    53aa:	005b      	lsls	r3, r3, #1
    53ac:	4413      	add	r3, r2
    53ae:	009b      	lsls	r3, r3, #2
    53b0:	4403      	add	r3, r0
    53b2:	3304      	adds	r3, #4
    53b4:	6019      	str	r1, [r3, #0]
                break;
    53b6:	e020      	b.n	53fa <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    53b8:	4b14      	ldr	r3, [pc, #80]	; (540c <getSlowDividerConfig+0x144>)
    53ba:	699b      	ldr	r3, [r3, #24]
    53bc:	f003 030f 	and.w	r3, r3, #15
    53c0:	1c59      	adds	r1, r3, #1
    53c2:	4811      	ldr	r0, [pc, #68]	; (5408 <getSlowDividerConfig+0x140>)
    53c4:	9a04      	ldr	r2, [sp, #16]
    53c6:	4613      	mov	r3, r2
    53c8:	005b      	lsls	r3, r3, #1
    53ca:	4413      	add	r3, r2
    53cc:	009b      	lsls	r3, r3, #2
    53ce:	4403      	add	r3, r0
    53d0:	3304      	adds	r3, #4
    53d2:	6019      	str	r1, [r3, #0]
                break;
    53d4:	e011      	b.n	53fa <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    53d6:	4b0d      	ldr	r3, [pc, #52]	; (540c <getSlowDividerConfig+0x144>)
    53d8:	69db      	ldr	r3, [r3, #28]
    53da:	f003 030f 	and.w	r3, r3, #15
    53de:	1c59      	adds	r1, r3, #1
    53e0:	4809      	ldr	r0, [pc, #36]	; (5408 <getSlowDividerConfig+0x140>)
    53e2:	9a04      	ldr	r2, [sp, #16]
    53e4:	4613      	mov	r3, r2
    53e6:	005b      	lsls	r3, r3, #1
    53e8:	4413      	add	r3, r2
    53ea:	009b      	lsls	r3, r3, #2
    53ec:	4403      	add	r3, r0
    53ee:	3304      	adds	r3, #4
    53f0:	6019      	str	r1, [r3, #0]
                break;
    53f2:	e002      	b.n	53fa <getSlowDividerConfig+0x132>
        }
    }
    53f4:	bf00      	nop
    53f6:	e000      	b.n	53fa <getSlowDividerConfig+0x132>
                break;
    53f8:	bf00      	nop

    return ReturnValue;
    53fa:	9b05      	ldr	r3, [sp, #20]
}
    53fc:	4618      	mov	r0, r3
    53fe:	b006      	add	sp, #24
    5400:	4770      	bx	lr
    5402:	bf00      	nop
    5404:	1fff8b9c 	.word	0x1fff8b9c
    5408:	1fff8cb0 	.word	0x1fff8cb0
    540c:	40064000 	.word	0x40064000

00005410 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    5410:	b500      	push	{lr}
    5412:	b083      	sub	sp, #12
    5414:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    5416:	4b64      	ldr	r3, [pc, #400]	; (55a8 <Clock_Ip_ClockInitializeObjects+0x198>)
    5418:	781b      	ldrb	r3, [r3, #0]
    541a:	f083 0301 	eor.w	r3, r3, #1
    541e:	b2db      	uxtb	r3, r3
    5420:	2b00      	cmp	r3, #0
    5422:	d05b      	beq.n	54dc <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    5424:	4b60      	ldr	r3, [pc, #384]	; (55a8 <Clock_Ip_ClockInitializeObjects+0x198>)
    5426:	2201      	movs	r2, #1
    5428:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    542a:	4b60      	ldr	r3, [pc, #384]	; (55ac <Clock_Ip_ClockInitializeObjects+0x19c>)
    542c:	785b      	ldrb	r3, [r3, #1]
    542e:	461a      	mov	r2, r3
    5430:	4613      	mov	r3, r2
    5432:	009b      	lsls	r3, r3, #2
    5434:	4413      	add	r3, r2
    5436:	009b      	lsls	r3, r3, #2
    5438:	4a5d      	ldr	r2, [pc, #372]	; (55b0 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    543a:	4413      	add	r3, r2
    543c:	4a5d      	ldr	r2, [pc, #372]	; (55b4 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    543e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    5440:	4b5d      	ldr	r3, [pc, #372]	; (55b8 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    5442:	785b      	ldrb	r3, [r3, #1]
    5444:	461a      	mov	r2, r3
    5446:	4613      	mov	r3, r2
    5448:	009b      	lsls	r3, r3, #2
    544a:	4413      	add	r3, r2
    544c:	009b      	lsls	r3, r3, #2
    544e:	4a5b      	ldr	r2, [pc, #364]	; (55bc <Clock_Ip_ClockInitializeObjects+0x1ac>)
    5450:	4413      	add	r3, r2
    5452:	4a5b      	ldr	r2, [pc, #364]	; (55c0 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    5454:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    5456:	4b5b      	ldr	r3, [pc, #364]	; (55c4 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    5458:	791b      	ldrb	r3, [r3, #4]
    545a:	461a      	mov	r2, r3
    545c:	4613      	mov	r3, r2
    545e:	005b      	lsls	r3, r3, #1
    5460:	4413      	add	r3, r2
    5462:	009b      	lsls	r3, r3, #2
    5464:	4a58      	ldr	r2, [pc, #352]	; (55c8 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    5466:	4413      	add	r3, r2
    5468:	4a58      	ldr	r2, [pc, #352]	; (55cc <Clock_Ip_ClockInitializeObjects+0x1bc>)
    546a:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    546c:	4b58      	ldr	r3, [pc, #352]	; (55d0 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    546e:	795b      	ldrb	r3, [r3, #5]
    5470:	00db      	lsls	r3, r3, #3
    5472:	4a58      	ldr	r2, [pc, #352]	; (55d4 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5474:	4413      	add	r3, r2
    5476:	4a58      	ldr	r2, [pc, #352]	; (55d8 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    5478:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    547a:	4b55      	ldr	r3, [pc, #340]	; (55d0 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    547c:	79db      	ldrb	r3, [r3, #7]
    547e:	00db      	lsls	r3, r3, #3
    5480:	4a54      	ldr	r2, [pc, #336]	; (55d4 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5482:	4413      	add	r3, r2
    5484:	4a55      	ldr	r2, [pc, #340]	; (55dc <Clock_Ip_ClockInitializeObjects+0x1cc>)
    5486:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    5488:	4b55      	ldr	r3, [pc, #340]	; (55e0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    548a:	799b      	ldrb	r3, [r3, #6]
    548c:	009b      	lsls	r3, r3, #2
    548e:	4a55      	ldr	r2, [pc, #340]	; (55e4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5490:	4413      	add	r3, r2
    5492:	4a55      	ldr	r2, [pc, #340]	; (55e8 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    5494:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    5496:	4b52      	ldr	r3, [pc, #328]	; (55e0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5498:	7a1b      	ldrb	r3, [r3, #8]
    549a:	009b      	lsls	r3, r3, #2
    549c:	4a51      	ldr	r2, [pc, #324]	; (55e4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    549e:	4413      	add	r3, r2
    54a0:	4a52      	ldr	r2, [pc, #328]	; (55ec <Clock_Ip_ClockInitializeObjects+0x1dc>)
    54a2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    54a4:	4b4e      	ldr	r3, [pc, #312]	; (55e0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    54a6:	7a5b      	ldrb	r3, [r3, #9]
    54a8:	009b      	lsls	r3, r3, #2
    54aa:	4a4e      	ldr	r2, [pc, #312]	; (55e4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    54ac:	4413      	add	r3, r2
    54ae:	4a50      	ldr	r2, [pc, #320]	; (55f0 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    54b0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    54b2:	4b4b      	ldr	r3, [pc, #300]	; (55e0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    54b4:	7adb      	ldrb	r3, [r3, #11]
    54b6:	009b      	lsls	r3, r3, #2
    54b8:	4a4a      	ldr	r2, [pc, #296]	; (55e4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    54ba:	4413      	add	r3, r2
    54bc:	4a4d      	ldr	r2, [pc, #308]	; (55f4 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    54be:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    54c0:	4b47      	ldr	r3, [pc, #284]	; (55e0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    54c2:	7b1b      	ldrb	r3, [r3, #12]
    54c4:	009b      	lsls	r3, r3, #2
    54c6:	4a47      	ldr	r2, [pc, #284]	; (55e4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    54c8:	4413      	add	r3, r2
    54ca:	4a4b      	ldr	r2, [pc, #300]	; (55f8 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    54cc:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    54ce:	4b44      	ldr	r3, [pc, #272]	; (55e0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    54d0:	7b9b      	ldrb	r3, [r3, #14]
    54d2:	009b      	lsls	r3, r3, #2
    54d4:	4a43      	ldr	r2, [pc, #268]	; (55e4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    54d6:	4413      	add	r3, r2
    54d8:	4a48      	ldr	r2, [pc, #288]	; (55fc <Clock_Ip_ClockInitializeObjects+0x1ec>)
    54da:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    54dc:	4b48      	ldr	r3, [pc, #288]	; (5600 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    54de:	781b      	ldrb	r3, [r3, #0]
    54e0:	2b00      	cmp	r3, #0
    54e2:	d002      	beq.n	54ea <Clock_Ip_ClockInitializeObjects+0xda>
    54e4:	9b01      	ldr	r3, [sp, #4]
    54e6:	2b00      	cmp	r3, #0
    54e8:	d003      	beq.n	54f2 <Clock_Ip_ClockInitializeObjects+0xe2>
    54ea:	4b46      	ldr	r3, [pc, #280]	; (5604 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    54ec:	781b      	ldrb	r3, [r3, #0]
    54ee:	2b00      	cmp	r3, #0
    54f0:	d056      	beq.n	55a0 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    54f2:	f7ff fc09 	bl	4d08 <getFircConfig>
    54f6:	4603      	mov	r3, r0
    54f8:	4a43      	ldr	r2, [pc, #268]	; (5608 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    54fa:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    54fc:	f7ff fc60 	bl	4dc0 <getSoscConfig>
    5500:	4603      	mov	r3, r0
    5502:	4a42      	ldr	r2, [pc, #264]	; (560c <Clock_Ip_ClockInitializeObjects+0x1fc>)
    5504:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    5506:	f7ff fca7 	bl	4e58 <getSpllConfig>
    550a:	4603      	mov	r3, r0
    550c:	4a40      	ldr	r2, [pc, #256]	; (5610 <Clock_Ip_ClockInitializeObjects+0x200>)
    550e:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    5510:	2019      	movs	r0, #25
    5512:	f7ff fcfb 	bl	4f0c <getSelectorConfig>
    5516:	4603      	mov	r3, r0
    5518:	4a3e      	ldr	r2, [pc, #248]	; (5614 <Clock_Ip_ClockInitializeObjects+0x204>)
    551a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    551c:	201a      	movs	r0, #26
    551e:	f7ff fcf5 	bl	4f0c <getSelectorConfig>
    5522:	4603      	mov	r3, r0
    5524:	4a3c      	ldr	r2, [pc, #240]	; (5618 <Clock_Ip_ClockInitializeObjects+0x208>)
    5526:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    5528:	201b      	movs	r0, #27
    552a:	f7ff fcef 	bl	4f0c <getSelectorConfig>
    552e:	4603      	mov	r3, r0
    5530:	4a3a      	ldr	r2, [pc, #232]	; (561c <Clock_Ip_ClockInitializeObjects+0x20c>)
    5532:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    5534:	201d      	movs	r0, #29
    5536:	f7ff fd7b 	bl	5030 <getCoreDividerConfig>
    553a:	4603      	mov	r3, r0
    553c:	4a38      	ldr	r2, [pc, #224]	; (5620 <Clock_Ip_ClockInitializeObjects+0x210>)
    553e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    5540:	201e      	movs	r0, #30
    5542:	f7ff fd75 	bl	5030 <getCoreDividerConfig>
    5546:	4603      	mov	r3, r0
    5548:	4a36      	ldr	r2, [pc, #216]	; (5624 <Clock_Ip_ClockInitializeObjects+0x214>)
    554a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    554c:	201f      	movs	r0, #31
    554e:	f7ff fd6f 	bl	5030 <getCoreDividerConfig>
    5552:	4603      	mov	r3, r0
    5554:	4a34      	ldr	r2, [pc, #208]	; (5628 <Clock_Ip_ClockInitializeObjects+0x218>)
    5556:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    5558:	2021      	movs	r0, #33	; 0x21
    555a:	f7ff fe0f 	bl	517c <getBusDividerConfig>
    555e:	4603      	mov	r3, r0
    5560:	4a32      	ldr	r2, [pc, #200]	; (562c <Clock_Ip_ClockInitializeObjects+0x21c>)
    5562:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    5564:	2022      	movs	r0, #34	; 0x22
    5566:	f7ff fe09 	bl	517c <getBusDividerConfig>
    556a:	4603      	mov	r3, r0
    556c:	4a30      	ldr	r2, [pc, #192]	; (5630 <Clock_Ip_ClockInitializeObjects+0x220>)
    556e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    5570:	2023      	movs	r0, #35	; 0x23
    5572:	f7ff fe03 	bl	517c <getBusDividerConfig>
    5576:	4603      	mov	r3, r0
    5578:	4a2e      	ldr	r2, [pc, #184]	; (5634 <Clock_Ip_ClockInitializeObjects+0x224>)
    557a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    557c:	2025      	movs	r0, #37	; 0x25
    557e:	f7ff fea3 	bl	52c8 <getSlowDividerConfig>
    5582:	4603      	mov	r3, r0
    5584:	4a2c      	ldr	r2, [pc, #176]	; (5638 <Clock_Ip_ClockInitializeObjects+0x228>)
    5586:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    5588:	2026      	movs	r0, #38	; 0x26
    558a:	f7ff fe9d 	bl	52c8 <getSlowDividerConfig>
    558e:	4603      	mov	r3, r0
    5590:	4a2a      	ldr	r2, [pc, #168]	; (563c <Clock_Ip_ClockInitializeObjects+0x22c>)
    5592:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    5594:	2027      	movs	r0, #39	; 0x27
    5596:	f7ff fe97 	bl	52c8 <getSlowDividerConfig>
    559a:	4603      	mov	r3, r0
    559c:	4a28      	ldr	r2, [pc, #160]	; (5640 <Clock_Ip_ClockInitializeObjects+0x230>)
    559e:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    55a0:	bf00      	nop
    55a2:	b003      	add	sp, #12
    55a4:	f85d fb04 	ldr.w	pc, [sp], #4
    55a8:	1fff8cd4 	.word	0x1fff8cd4
    55ac:	00017d78 	.word	0x00017d78
    55b0:	000183c4 	.word	0x000183c4
    55b4:	1fff8ba0 	.word	0x1fff8ba0
    55b8:	00017d38 	.word	0x00017d38
    55bc:	0001830c 	.word	0x0001830c
    55c0:	1fff8ba4 	.word	0x1fff8ba4
    55c4:	00017d48 	.word	0x00017d48
    55c8:	00018378 	.word	0x00018378
    55cc:	1fff8ba8 	.word	0x1fff8ba8
    55d0:	00017d88 	.word	0x00017d88
    55d4:	000183f0 	.word	0x000183f0
    55d8:	1fff8bac 	.word	0x1fff8bac
    55dc:	1fff8be8 	.word	0x1fff8be8
    55e0:	00017d18 	.word	0x00017d18
    55e4:	000182c8 	.word	0x000182c8
    55e8:	1fff8bb0 	.word	0x1fff8bb0
    55ec:	1fff8bec 	.word	0x1fff8bec
    55f0:	1fff8bb4 	.word	0x1fff8bb4
    55f4:	1fff8bf0 	.word	0x1fff8bf0
    55f8:	1fff8bb8 	.word	0x1fff8bb8
    55fc:	1fff8bf4 	.word	0x1fff8bf4
    5600:	1fff8b19 	.word	0x1fff8b19
    5604:	1fff8b10 	.word	0x1fff8b10
    5608:	1fff8bbc 	.word	0x1fff8bbc
    560c:	1fff8bc0 	.word	0x1fff8bc0
    5610:	1fff8bc4 	.word	0x1fff8bc4
    5614:	1fff8bc8 	.word	0x1fff8bc8
    5618:	1fff8bcc 	.word	0x1fff8bcc
    561c:	1fff8bf8 	.word	0x1fff8bf8
    5620:	1fff8bd0 	.word	0x1fff8bd0
    5624:	1fff8bd4 	.word	0x1fff8bd4
    5628:	1fff8bfc 	.word	0x1fff8bfc
    562c:	1fff8bd8 	.word	0x1fff8bd8
    5630:	1fff8bdc 	.word	0x1fff8bdc
    5634:	1fff8c00 	.word	0x1fff8c00
    5638:	1fff8be0 	.word	0x1fff8be0
    563c:	1fff8be4 	.word	0x1fff8be4
    5640:	1fff8c04 	.word	0x1fff8c04

00005644 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    5644:	b500      	push	{lr}
    5646:	b083      	sub	sp, #12
    5648:	9001      	str	r0, [sp, #4]
    564a:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    564c:	9b01      	ldr	r3, [sp, #4]
    564e:	2b03      	cmp	r3, #3
    5650:	f000 8090 	beq.w	5774 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    5654:	9b01      	ldr	r3, [sp, #4]
    5656:	2b03      	cmp	r3, #3
    5658:	f200 80d3 	bhi.w	5802 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    565c:	9b01      	ldr	r3, [sp, #4]
    565e:	2b00      	cmp	r3, #0
    5660:	d040      	beq.n	56e4 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    5662:	9b01      	ldr	r3, [sp, #4]
    5664:	3b01      	subs	r3, #1
    5666:	2b01      	cmp	r3, #1
    5668:	f200 80cb 	bhi.w	5802 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    566c:	9b00      	ldr	r3, [sp, #0]
    566e:	2b00      	cmp	r3, #0
    5670:	f040 80c9 	bne.w	5806 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    5674:	4b68      	ldr	r3, [pc, #416]	; (5818 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5676:	2200      	movs	r2, #0
    5678:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    567a:	4b68      	ldr	r3, [pc, #416]	; (581c <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    567c:	681b      	ldr	r3, [r3, #0]
    567e:	685b      	ldr	r3, [r3, #4]
    5680:	4a67      	ldr	r2, [pc, #412]	; (5820 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    5682:	6812      	ldr	r2, [r2, #0]
    5684:	4610      	mov	r0, r2
    5686:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    5688:	4b66      	ldr	r3, [pc, #408]	; (5824 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    568a:	681b      	ldr	r3, [r3, #0]
    568c:	681b      	ldr	r3, [r3, #0]
    568e:	4a66      	ldr	r2, [pc, #408]	; (5828 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    5690:	6812      	ldr	r2, [r2, #0]
    5692:	4610      	mov	r0, r2
    5694:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    5696:	4b65      	ldr	r3, [pc, #404]	; (582c <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5698:	681b      	ldr	r3, [r3, #0]
    569a:	681b      	ldr	r3, [r3, #0]
    569c:	4a64      	ldr	r2, [pc, #400]	; (5830 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    569e:	6812      	ldr	r2, [r2, #0]
    56a0:	4610      	mov	r0, r2
    56a2:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    56a4:	4b63      	ldr	r3, [pc, #396]	; (5834 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    56a6:	681b      	ldr	r3, [r3, #0]
    56a8:	681b      	ldr	r3, [r3, #0]
    56aa:	4a63      	ldr	r2, [pc, #396]	; (5838 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    56ac:	6812      	ldr	r2, [r2, #0]
    56ae:	4610      	mov	r0, r2
    56b0:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    56b2:	4b62      	ldr	r3, [pc, #392]	; (583c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    56b4:	681b      	ldr	r3, [r3, #0]
    56b6:	691b      	ldr	r3, [r3, #16]
    56b8:	4a61      	ldr	r2, [pc, #388]	; (5840 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    56ba:	6812      	ldr	r2, [r2, #0]
    56bc:	6812      	ldr	r2, [r2, #0]
    56be:	4610      	mov	r0, r2
    56c0:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    56c2:	4b60      	ldr	r3, [pc, #384]	; (5844 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    56c4:	681b      	ldr	r3, [r3, #0]
    56c6:	68db      	ldr	r3, [r3, #12]
    56c8:	4a5f      	ldr	r2, [pc, #380]	; (5848 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    56ca:	6812      	ldr	r2, [r2, #0]
    56cc:	6812      	ldr	r2, [r2, #0]
    56ce:	4610      	mov	r0, r2
    56d0:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    56d2:	4b5e      	ldr	r3, [pc, #376]	; (584c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    56d4:	681b      	ldr	r3, [r3, #0]
    56d6:	689b      	ldr	r3, [r3, #8]
    56d8:	4a5d      	ldr	r2, [pc, #372]	; (5850 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    56da:	6812      	ldr	r2, [r2, #0]
    56dc:	6812      	ldr	r2, [r2, #0]
    56de:	4610      	mov	r0, r2
    56e0:	4798      	blx	r3
            }
        }
        break;
    56e2:	e090      	b.n	5806 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    56e4:	9b00      	ldr	r3, [sp, #0]
    56e6:	2b02      	cmp	r3, #2
    56e8:	f040 808f 	bne.w	580a <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    56ec:	4b4a      	ldr	r3, [pc, #296]	; (5818 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    56ee:	2201      	movs	r2, #1
    56f0:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    56f2:	4b56      	ldr	r3, [pc, #344]	; (584c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    56f4:	681b      	ldr	r3, [r3, #0]
    56f6:	685b      	ldr	r3, [r3, #4]
    56f8:	4a55      	ldr	r2, [pc, #340]	; (5850 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    56fa:	6812      	ldr	r2, [r2, #0]
    56fc:	4610      	mov	r0, r2
    56fe:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    5700:	4b50      	ldr	r3, [pc, #320]	; (5844 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5702:	681b      	ldr	r3, [r3, #0]
    5704:	691b      	ldr	r3, [r3, #16]
    5706:	4a50      	ldr	r2, [pc, #320]	; (5848 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5708:	6812      	ldr	r2, [r2, #0]
    570a:	4610      	mov	r0, r2
    570c:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    570e:	4b4d      	ldr	r3, [pc, #308]	; (5844 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5710:	681b      	ldr	r3, [r3, #0]
    5712:	689b      	ldr	r3, [r3, #8]
    5714:	4a4c      	ldr	r2, [pc, #304]	; (5848 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5716:	6812      	ldr	r2, [r2, #0]
    5718:	4610      	mov	r0, r2
    571a:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    571c:	4b47      	ldr	r3, [pc, #284]	; (583c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    571e:	681b      	ldr	r3, [r3, #0]
    5720:	68db      	ldr	r3, [r3, #12]
    5722:	4a47      	ldr	r2, [pc, #284]	; (5840 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5724:	6812      	ldr	r2, [r2, #0]
    5726:	4610      	mov	r0, r2
    5728:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    572a:	4b44      	ldr	r3, [pc, #272]	; (583c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    572c:	681b      	ldr	r3, [r3, #0]
    572e:	689b      	ldr	r3, [r3, #8]
    5730:	4a43      	ldr	r2, [pc, #268]	; (5840 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5732:	6812      	ldr	r2, [r2, #0]
    5734:	6812      	ldr	r2, [r2, #0]
    5736:	4610      	mov	r0, r2
    5738:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    573a:	4b38      	ldr	r3, [pc, #224]	; (581c <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    573c:	681b      	ldr	r3, [r3, #0]
    573e:	685b      	ldr	r3, [r3, #4]
    5740:	4a44      	ldr	r2, [pc, #272]	; (5854 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    5742:	6812      	ldr	r2, [r2, #0]
    5744:	4610      	mov	r0, r2
    5746:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    5748:	4b36      	ldr	r3, [pc, #216]	; (5824 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    574a:	681b      	ldr	r3, [r3, #0]
    574c:	681b      	ldr	r3, [r3, #0]
    574e:	4a42      	ldr	r2, [pc, #264]	; (5858 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    5750:	6812      	ldr	r2, [r2, #0]
    5752:	4610      	mov	r0, r2
    5754:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    5756:	4b35      	ldr	r3, [pc, #212]	; (582c <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5758:	681b      	ldr	r3, [r3, #0]
    575a:	681b      	ldr	r3, [r3, #0]
    575c:	4a3f      	ldr	r2, [pc, #252]	; (585c <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    575e:	6812      	ldr	r2, [r2, #0]
    5760:	4610      	mov	r0, r2
    5762:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    5764:	4b33      	ldr	r3, [pc, #204]	; (5834 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    5766:	681b      	ldr	r3, [r3, #0]
    5768:	681b      	ldr	r3, [r3, #0]
    576a:	4a3d      	ldr	r2, [pc, #244]	; (5860 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    576c:	6812      	ldr	r2, [r2, #0]
    576e:	4610      	mov	r0, r2
    5770:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5772:	e04a      	b.n	580a <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5774:	9b00      	ldr	r3, [sp, #0]
    5776:	2b02      	cmp	r3, #2
    5778:	d149      	bne.n	580e <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    577a:	4b27      	ldr	r3, [pc, #156]	; (5818 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    577c:	2201      	movs	r2, #1
    577e:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    5780:	4b32      	ldr	r3, [pc, #200]	; (584c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5782:	681b      	ldr	r3, [r3, #0]
    5784:	685b      	ldr	r3, [r3, #4]
    5786:	4a32      	ldr	r2, [pc, #200]	; (5850 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5788:	6812      	ldr	r2, [r2, #0]
    578a:	4610      	mov	r0, r2
    578c:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    578e:	4b2d      	ldr	r3, [pc, #180]	; (5844 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5790:	681b      	ldr	r3, [r3, #0]
    5792:	691b      	ldr	r3, [r3, #16]
    5794:	4a2c      	ldr	r2, [pc, #176]	; (5848 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5796:	6812      	ldr	r2, [r2, #0]
    5798:	4610      	mov	r0, r2
    579a:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    579c:	4b29      	ldr	r3, [pc, #164]	; (5844 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    579e:	681b      	ldr	r3, [r3, #0]
    57a0:	689b      	ldr	r3, [r3, #8]
    57a2:	4a29      	ldr	r2, [pc, #164]	; (5848 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    57a4:	6812      	ldr	r2, [r2, #0]
    57a6:	4610      	mov	r0, r2
    57a8:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    57aa:	4b24      	ldr	r3, [pc, #144]	; (583c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    57ac:	681b      	ldr	r3, [r3, #0]
    57ae:	68db      	ldr	r3, [r3, #12]
    57b0:	4a23      	ldr	r2, [pc, #140]	; (5840 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    57b2:	6812      	ldr	r2, [r2, #0]
    57b4:	4610      	mov	r0, r2
    57b6:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    57b8:	4b20      	ldr	r3, [pc, #128]	; (583c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    57ba:	681b      	ldr	r3, [r3, #0]
    57bc:	689b      	ldr	r3, [r3, #8]
    57be:	4a20      	ldr	r2, [pc, #128]	; (5840 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    57c0:	6812      	ldr	r2, [r2, #0]
    57c2:	6812      	ldr	r2, [r2, #0]
    57c4:	4610      	mov	r0, r2
    57c6:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    57c8:	4b26      	ldr	r3, [pc, #152]	; (5864 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    57ca:	681b      	ldr	r3, [r3, #0]
    57cc:	685b      	ldr	r3, [r3, #4]
    57ce:	4a26      	ldr	r2, [pc, #152]	; (5868 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    57d0:	6812      	ldr	r2, [r2, #0]
    57d2:	4610      	mov	r0, r2
    57d4:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    57d6:	4b25      	ldr	r3, [pc, #148]	; (586c <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    57d8:	681b      	ldr	r3, [r3, #0]
    57da:	681b      	ldr	r3, [r3, #0]
    57dc:	4a24      	ldr	r2, [pc, #144]	; (5870 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    57de:	6812      	ldr	r2, [r2, #0]
    57e0:	4610      	mov	r0, r2
    57e2:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    57e4:	4b23      	ldr	r3, [pc, #140]	; (5874 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    57e6:	681b      	ldr	r3, [r3, #0]
    57e8:	681b      	ldr	r3, [r3, #0]
    57ea:	4a23      	ldr	r2, [pc, #140]	; (5878 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    57ec:	6812      	ldr	r2, [r2, #0]
    57ee:	4610      	mov	r0, r2
    57f0:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    57f2:	4b22      	ldr	r3, [pc, #136]	; (587c <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    57f4:	681b      	ldr	r3, [r3, #0]
    57f6:	681b      	ldr	r3, [r3, #0]
    57f8:	4a21      	ldr	r2, [pc, #132]	; (5880 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    57fa:	6812      	ldr	r2, [r2, #0]
    57fc:	4610      	mov	r0, r2
    57fe:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5800:	e005      	b.n	580e <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    5802:	bf00      	nop
    5804:	e004      	b.n	5810 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5806:	bf00      	nop
    5808:	e002      	b.n	5810 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    580a:	bf00      	nop
    580c:	e000      	b.n	5810 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    580e:	bf00      	nop
    }

}
    5810:	bf00      	nop
    5812:	b003      	add	sp, #12
    5814:	f85d fb04 	ldr.w	pc, [sp], #4
    5818:	1fff8b19 	.word	0x1fff8b19
    581c:	1fff8bac 	.word	0x1fff8bac
    5820:	1fff8bcc 	.word	0x1fff8bcc
    5824:	1fff8bb0 	.word	0x1fff8bb0
    5828:	1fff8bd4 	.word	0x1fff8bd4
    582c:	1fff8bb4 	.word	0x1fff8bb4
    5830:	1fff8bdc 	.word	0x1fff8bdc
    5834:	1fff8bb8 	.word	0x1fff8bb8
    5838:	1fff8be4 	.word	0x1fff8be4
    583c:	1fff8ba0 	.word	0x1fff8ba0
    5840:	1fff8bc4 	.word	0x1fff8bc4
    5844:	1fff8ba4 	.word	0x1fff8ba4
    5848:	1fff8bc0 	.word	0x1fff8bc0
    584c:	1fff8ba8 	.word	0x1fff8ba8
    5850:	1fff8bbc 	.word	0x1fff8bbc
    5854:	1fff8bc8 	.word	0x1fff8bc8
    5858:	1fff8bd0 	.word	0x1fff8bd0
    585c:	1fff8bd8 	.word	0x1fff8bd8
    5860:	1fff8be0 	.word	0x1fff8be0
    5864:	1fff8be8 	.word	0x1fff8be8
    5868:	1fff8bf8 	.word	0x1fff8bf8
    586c:	1fff8bec 	.word	0x1fff8bec
    5870:	1fff8bfc 	.word	0x1fff8bfc
    5874:	1fff8bf0 	.word	0x1fff8bf0
    5878:	1fff8c00 	.word	0x1fff8c00
    587c:	1fff8bf4 	.word	0x1fff8bf4
    5880:	1fff8c04 	.word	0x1fff8c04

00005884 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    5884:	b500      	push	{lr}
    5886:	b083      	sub	sp, #12
    5888:	9001      	str	r0, [sp, #4]
    588a:	9100      	str	r1, [sp, #0]
    switch(Command)
    588c:	9b00      	ldr	r3, [sp, #0]
    588e:	2b04      	cmp	r3, #4
    5890:	d010      	beq.n	58b4 <Clock_Ip_Command+0x30>
    5892:	9b00      	ldr	r3, [sp, #0]
    5894:	2b04      	cmp	r3, #4
    5896:	d811      	bhi.n	58bc <Clock_Ip_Command+0x38>
    5898:	9b00      	ldr	r3, [sp, #0]
    589a:	2b01      	cmp	r3, #1
    589c:	d006      	beq.n	58ac <Clock_Ip_Command+0x28>
    589e:	9b00      	ldr	r3, [sp, #0]
    58a0:	2b02      	cmp	r3, #2
    58a2:	d10b      	bne.n	58bc <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    58a4:	9801      	ldr	r0, [sp, #4]
    58a6:	f7ff fdb3 	bl	5410 <Clock_Ip_ClockInitializeObjects>
            break;
    58aa:	e008      	b.n	58be <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    58ac:	9801      	ldr	r0, [sp, #4]
    58ae:	f7ff f9db 	bl	4c68 <Clock_Ip_SpecificPlatformInitClock>
            break;
    58b2:	e004      	b.n	58be <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    58b4:	9801      	ldr	r0, [sp, #4]
    58b6:	f7ff f8ed 	bl	4a94 <DisableSafeClock>
            break;
    58ba:	e000      	b.n	58be <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    58bc:	bf00      	nop
    }
}
    58be:	bf00      	nop
    58c0:	b003      	add	sp, #12
    58c2:	f85d fb04 	ldr.w	pc, [sp], #4
    58c6:	bf00      	nop

000058c8 <Mcu_CheckInit>:
/**
* @brief Mcu_CheckInit - checks for Mcu_Init
* @implements Mcu_CheckInit_Activity
*/
static Std_ReturnType Mcu_CheckInit(const Mcu_ConfigType * ConfigPtr)
{
    58c8:	b500      	push	{lr}
    58ca:	b085      	sub	sp, #20
    58cc:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    58ce:	2300      	movs	r3, #0
    58d0:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_PRECOMPILE_SUPPORT == STD_OFF)
    if (NULL_PTR == ConfigPtr)
    58d4:	9b01      	ldr	r3, [sp, #4]
    58d6:	2b00      	cmp	r3, #0
    58d8:	d108      	bne.n	58ec <Mcu_CheckInit+0x24>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    58da:	2301      	movs	r3, #1
    58dc:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INIT_ID, MCU_E_INIT_FAILED);
    58e0:	2311      	movs	r3, #17
    58e2:	2200      	movs	r2, #0
    58e4:	2100      	movs	r1, #0
    58e6:	2065      	movs	r0, #101	; 0x65
    58e8:	f011 f996 	bl	16c18 <Det_ReportError>

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INIT_ID, MCU_E_INIT_FAILED);
    }
#endif /* (MCU_PRECOMPILE_SUPPORT == STD_ON) */

    return CheckStatus;
    58ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    58f0:	4618      	mov	r0, r3
    58f2:	b005      	add	sp, #20
    58f4:	f85d fb04 	ldr.w	pc, [sp], #4

000058f8 <Mcu_CheckInitClock>:
/**
* @brief Mcu_CheckInitClock - checks for Mcu_InitClock
* @implements Mcu_CheckInitClock_Activity
*/
static Std_ReturnType Mcu_CheckInitClock(Mcu_ClockType ClockSetting)
{
    58f8:	b500      	push	{lr}
    58fa:	b085      	sub	sp, #20
    58fc:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    58fe:	2300      	movs	r3, #0
    5900:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ClockSetting >= Mcu_pConfigPtr->NoClkConfigs)
    5904:	4b0a      	ldr	r3, [pc, #40]	; (5930 <Mcu_CheckInitClock+0x38>)
    5906:	681b      	ldr	r3, [r3, #0]
    5908:	68db      	ldr	r3, [r3, #12]
    590a:	9a01      	ldr	r2, [sp, #4]
    590c:	429a      	cmp	r2, r3
    590e:	d308      	bcc.n	5922 <Mcu_CheckInitClock+0x2a>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    5910:	2301      	movs	r3, #1
    5912:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INITCLOCK_ID, MCU_E_PARAM_CLOCK);
    5916:	230b      	movs	r3, #11
    5918:	2202      	movs	r2, #2
    591a:	2100      	movs	r1, #0
    591c:	2065      	movs	r0, #101	; 0x65
    591e:	f011 f97b 	bl	16c18 <Det_ReportError>
    }

    return CheckStatus;
    5922:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5926:	4618      	mov	r0, r3
    5928:	b005      	add	sp, #20
    592a:	f85d fb04 	ldr.w	pc, [sp], #4
    592e:	bf00      	nop
    5930:	1fff8ce0 	.word	0x1fff8ce0

00005934 <Mcu_CheckSetMode>:
/**
* @brief Mcu_CheckSetMode - checks for Mcu_SetMode
* @implements Mcu_CheckSetMode_Activity
*/
static Std_ReturnType Mcu_CheckSetMode(Power_Ip_ModeType McuMode)
{
    5934:	b500      	push	{lr}
    5936:	b085      	sub	sp, #20
    5938:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    593a:	2300      	movs	r3, #0
    593c:	f88d 300f 	strb.w	r3, [sp, #15]

    if (McuMode >= Mcu_pConfigPtr->NoModeConfigs)
    5940:	4b0a      	ldr	r3, [pc, #40]	; (596c <Mcu_CheckSetMode+0x38>)
    5942:	681b      	ldr	r3, [r3, #0]
    5944:	689b      	ldr	r3, [r3, #8]
    5946:	9a01      	ldr	r2, [sp, #4]
    5948:	429a      	cmp	r2, r3
    594a:	d308      	bcc.n	595e <Mcu_CheckSetMode+0x2a>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    594c:	2301      	movs	r3, #1
    594e:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_SETMODE_ID, MCU_E_PARAM_MODE);
    5952:	230c      	movs	r3, #12
    5954:	2208      	movs	r2, #8
    5956:	2100      	movs	r1, #0
    5958:	2065      	movs	r0, #101	; 0x65
    595a:	f011 f95d 	bl	16c18 <Det_ReportError>
    }

    return CheckStatus;
    595e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5962:	4618      	mov	r0, r3
    5964:	b005      	add	sp, #20
    5966:	f85d fb04 	ldr.w	pc, [sp], #4
    596a:	bf00      	nop
    596c:	1fff8ce0 	.word	0x1fff8ce0

00005970 <Mcu_CheckGetVersionInfo>:
/**
* @brief Mcu_CheckGetVersionInfo - checks for Mcu_GetVersionInfo
* @implements Mcu_CheckGetVersionInfo_Activity
*/
static Std_ReturnType Mcu_CheckGetVersionInfo(const Std_VersionInfoType * VersionInfo)
{
    5970:	b500      	push	{lr}
    5972:	b085      	sub	sp, #20
    5974:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    5976:	2300      	movs	r3, #0
    5978:	f88d 300f 	strb.w	r3, [sp, #15]

    if (NULL_PTR == VersionInfo)
    597c:	9b01      	ldr	r3, [sp, #4]
    597e:	2b00      	cmp	r3, #0
    5980:	d108      	bne.n	5994 <Mcu_CheckGetVersionInfo+0x24>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    5982:	2301      	movs	r3, #1
    5984:	f88d 300f 	strb.w	r3, [sp, #15]

        (void)Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_GETVERSIONINFO_ID, MCU_E_PARAM_POINTER);
    5988:	2310      	movs	r3, #16
    598a:	2209      	movs	r2, #9
    598c:	2100      	movs	r1, #0
    598e:	2065      	movs	r0, #101	; 0x65
    5990:	f011 f942 	bl	16c18 <Det_ReportError>
    }

    return CheckStatus;
    5994:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5998:	4618      	mov	r0, r3
    599a:	b005      	add	sp, #20
    599c:	f85d fb04 	ldr.w	pc, [sp], #4

000059a0 <Mcu_HLDChecksEntry>:
/**
* @brief Mcu_HLDChecksEntry - checks for invalid mode transitions.
* @implements Mcu_HLDChecksEntry_Activity
*/
static Std_ReturnType Mcu_HLDChecksEntry(uint8 McuServiceID)
{
    59a0:	b500      	push	{lr}
    59a2:	b085      	sub	sp, #20
    59a4:	4603      	mov	r3, r0
    59a6:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    59aa:	2300      	movs	r3, #0
    59ac:	f88d 300f 	strb.w	r3, [sp, #15]

    if (MCU_INIT_ID == McuServiceID)
    59b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    59b4:	2b00      	cmp	r3, #0
    59b6:	d10e      	bne.n	59d6 <Mcu_HLDChecksEntry+0x36>
    {
        if (MCU_UNINIT != Mcu_eStatus) /* If "Mcu_Init" was already called (i.e. driver is initialized). */
    59b8:	4b13      	ldr	r3, [pc, #76]	; (5a08 <Mcu_HLDChecksEntry+0x68>)
    59ba:	681b      	ldr	r3, [r3, #0]
    59bc:	2b03      	cmp	r3, #3
    59be:	d01c      	beq.n	59fa <Mcu_HLDChecksEntry+0x5a>
        {
            CheckStatus = (Std_ReturnType)E_NOT_OK;
    59c0:	2301      	movs	r3, #1
    59c2:	f88d 300f 	strb.w	r3, [sp, #15]
            (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, McuServiceID, MCU_E_ALREADY_INITIALIZED);
    59c6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    59ca:	2313      	movs	r3, #19
    59cc:	2100      	movs	r1, #0
    59ce:	2065      	movs	r0, #101	; 0x65
    59d0:	f011 f922 	bl	16c18 <Det_ReportError>
    59d4:	e011      	b.n	59fa <Mcu_HLDChecksEntry+0x5a>
        }
    }
    else
    {
        if (MCU_UNINIT == Mcu_eStatus) /* If "Mcu_Init" was not called (i.e driver is uninitialized). */
    59d6:	4b0c      	ldr	r3, [pc, #48]	; (5a08 <Mcu_HLDChecksEntry+0x68>)
    59d8:	681b      	ldr	r3, [r3, #0]
    59da:	2b03      	cmp	r3, #3
    59dc:	d10a      	bne.n	59f4 <Mcu_HLDChecksEntry+0x54>
        {
            CheckStatus = (Std_ReturnType)E_NOT_OK;
    59de:	2301      	movs	r3, #1
    59e0:	f88d 300f 	strb.w	r3, [sp, #15]
            (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, McuServiceID, MCU_E_UNINIT);
    59e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    59e8:	230f      	movs	r3, #15
    59ea:	2100      	movs	r1, #0
    59ec:	2065      	movs	r0, #101	; 0x65
    59ee:	f011 f913 	bl	16c18 <Det_ReportError>
    59f2:	e002      	b.n	59fa <Mcu_HLDChecksEntry+0x5a>
        }
        else
        {
            Mcu_eStatus = MCU_BUSY;
    59f4:	4b04      	ldr	r3, [pc, #16]	; (5a08 <Mcu_HLDChecksEntry+0x68>)
    59f6:	220a      	movs	r2, #10
    59f8:	601a      	str	r2, [r3, #0]
        }
    }

    return CheckStatus;
    59fa:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    59fe:	4618      	mov	r0, r3
    5a00:	b005      	add	sp, #20
    5a02:	f85d fb04 	ldr.w	pc, [sp], #4
    5a06:	bf00      	nop
    5a08:	1fff8b1c 	.word	0x1fff8b1c

00005a0c <Mcu_HLDChecksExit>:
* @implements Mcu_HLDChecksExit_Activity
*/
static void Mcu_HLDChecksExit(  Std_ReturnType RetStatus,
                                uint8 McuServiceID
                              )
{
    5a0c:	b082      	sub	sp, #8
    5a0e:	4603      	mov	r3, r0
    5a10:	460a      	mov	r2, r1
    5a12:	f88d 3007 	strb.w	r3, [sp, #7]
    5a16:	4613      	mov	r3, r2
    5a18:	f88d 3006 	strb.w	r3, [sp, #6]
    if (MCU_INIT_ID == McuServiceID)
    5a1c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    5a20:	2b00      	cmp	r3, #0
    5a22:	d10b      	bne.n	5a3c <Mcu_HLDChecksExit+0x30>
    {
        if ((Std_ReturnType)E_OK == (Std_ReturnType)RetStatus)
    5a24:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5a28:	2b00      	cmp	r3, #0
    5a2a:	d103      	bne.n	5a34 <Mcu_HLDChecksExit+0x28>
        {
            Mcu_eStatus = MCU_IDLE;
    5a2c:	4b06      	ldr	r3, [pc, #24]	; (5a48 <Mcu_HLDChecksExit+0x3c>)
    5a2e:	220c      	movs	r2, #12
    5a30:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Mcu_eStatus = MCU_IDLE;
    }
}
    5a32:	e006      	b.n	5a42 <Mcu_HLDChecksExit+0x36>
            Mcu_eStatus = MCU_UNINIT;
    5a34:	4b04      	ldr	r3, [pc, #16]	; (5a48 <Mcu_HLDChecksExit+0x3c>)
    5a36:	2203      	movs	r2, #3
    5a38:	601a      	str	r2, [r3, #0]
}
    5a3a:	e002      	b.n	5a42 <Mcu_HLDChecksExit+0x36>
        Mcu_eStatus = MCU_IDLE;
    5a3c:	4b02      	ldr	r3, [pc, #8]	; (5a48 <Mcu_HLDChecksExit+0x3c>)
    5a3e:	220c      	movs	r2, #12
    5a40:	601a      	str	r2, [r3, #0]
}
    5a42:	bf00      	nop
    5a44:	b002      	add	sp, #8
    5a46:	4770      	bx	lr
    5a48:	1fff8b1c 	.word	0x1fff8b1c

00005a4c <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    5a4c:	b500      	push	{lr}
    5a4e:	b085      	sub	sp, #20
    5a50:	9001      	str	r0, [sp, #4]
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) )
    Std_ReturnType CheckStatus;
#endif /* ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) ) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    CheckStatus = (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INIT_ID);
    5a52:	2000      	movs	r0, #0
    5a54:	f7ff ffa4 	bl	59a0 <Mcu_HLDChecksEntry>
    5a58:	4603      	mov	r3, r0
    5a5a:	f88d 300b 	strb.w	r3, [sp, #11]

    if ( (Std_ReturnType)E_OK == CheckStatus )
    5a5e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5a62:	2b00      	cmp	r3, #0
    5a64:	d150      	bne.n	5b08 <Mcu_Init+0xbc>

#if (MCU_PARAM_CHECK == STD_ON)
        /* When PostBuild is used and #(Variants) > 1, the input parameter 'ConfigPtr' is mandatory
         * to be different than NULL_PTR. */
        /* Check the config. In case of error, return immediately. The "Mcu_CheckInit" function will report DET errors. */
        CheckStatus = Mcu_CheckInit(ConfigPtr);
    5a66:	9801      	ldr	r0, [sp, #4]
    5a68:	f7ff ff2e 	bl	58c8 <Mcu_CheckInit>
    5a6c:	4603      	mov	r3, r0
    5a6e:	f88d 300b 	strb.w	r3, [sp, #11]

        if ((Std_ReturnType)E_OK == CheckStatus)
    5a72:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5a76:	2b00      	cmp	r3, #0
    5a78:	d13d      	bne.n	5af6 <Mcu_Init+0xaa>

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    5a7a:	4a25      	ldr	r2, [pc, #148]	; (5b10 <Mcu_Init+0xc4>)
    5a7c:	9b01      	ldr	r3, [sp, #4]
    5a7e:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5a80:	2300      	movs	r3, #0
    5a82:	9303      	str	r3, [sp, #12]
    5a84:	e010      	b.n	5aa8 <Mcu_Init+0x5c>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    5a86:	4b22      	ldr	r3, [pc, #136]	; (5b10 <Mcu_Init+0xc4>)
    5a88:	681b      	ldr	r3, [r3, #0]
    5a8a:	6919      	ldr	r1, [r3, #16]
    5a8c:	9a03      	ldr	r2, [sp, #12]
    5a8e:	4613      	mov	r3, r2
    5a90:	005b      	lsls	r3, r3, #1
    5a92:	4413      	add	r3, r2
    5a94:	009b      	lsls	r3, r3, #2
    5a96:	440b      	add	r3, r1
    5a98:	681b      	ldr	r3, [r3, #0]
    5a9a:	9a03      	ldr	r2, [sp, #12]
    5a9c:	b2d1      	uxtb	r1, r2
    5a9e:	4a1d      	ldr	r2, [pc, #116]	; (5b14 <Mcu_Init+0xc8>)
    5aa0:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5aa2:	9b03      	ldr	r3, [sp, #12]
    5aa4:	3301      	adds	r3, #1
    5aa6:	9303      	str	r3, [sp, #12]
    5aa8:	4b19      	ldr	r3, [pc, #100]	; (5b10 <Mcu_Init+0xc4>)
    5aaa:	681b      	ldr	r3, [r3, #0]
    5aac:	689b      	ldr	r3, [r3, #8]
    5aae:	9a03      	ldr	r2, [sp, #12]
    5ab0:	429a      	cmp	r2, r3
    5ab2:	d3e8      	bcc.n	5a86 <Mcu_Init+0x3a>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5ab4:	2300      	movs	r3, #0
    5ab6:	9303      	str	r3, [sp, #12]
    5ab8:	e010      	b.n	5adc <Mcu_Init+0x90>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    5aba:	4b15      	ldr	r3, [pc, #84]	; (5b10 <Mcu_Init+0xc4>)
    5abc:	681b      	ldr	r3, [r3, #0]
    5abe:	6959      	ldr	r1, [r3, #20]
    5ac0:	9a03      	ldr	r2, [sp, #12]
    5ac2:	4613      	mov	r3, r2
    5ac4:	01db      	lsls	r3, r3, #7
    5ac6:	1a9b      	subs	r3, r3, r2
    5ac8:	00db      	lsls	r3, r3, #3
    5aca:	440b      	add	r3, r1
    5acc:	681b      	ldr	r3, [r3, #0]
    5ace:	9a03      	ldr	r2, [sp, #12]
    5ad0:	b2d1      	uxtb	r1, r2
    5ad2:	4a11      	ldr	r2, [pc, #68]	; (5b18 <Mcu_Init+0xcc>)
    5ad4:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5ad6:	9b03      	ldr	r3, [sp, #12]
    5ad8:	3301      	adds	r3, #1
    5ada:	9303      	str	r3, [sp, #12]
    5adc:	4b0c      	ldr	r3, [pc, #48]	; (5b10 <Mcu_Init+0xc4>)
    5ade:	681b      	ldr	r3, [r3, #0]
    5ae0:	68db      	ldr	r3, [r3, #12]
    5ae2:	9a03      	ldr	r2, [sp, #12]
    5ae4:	429a      	cmp	r2, r3
    5ae6:	d3e8      	bcc.n	5aba <Mcu_Init+0x6e>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    5ae8:	4b09      	ldr	r3, [pc, #36]	; (5b10 <Mcu_Init+0xc4>)
    5aea:	681b      	ldr	r3, [r3, #0]
    5aec:	699b      	ldr	r3, [r3, #24]
    5aee:	4618      	mov	r0, r3
    5af0:	f000 f90c 	bl	5d0c <Mcu_Ipw_Init>
    5af4:	e002      	b.n	5afc <Mcu_Init+0xb0>
#if (MCU_PARAM_CHECK == STD_ON)
        }
        else
        {
            /* Clean the init pointer in case of an error. */
            Mcu_pConfigPtr = NULL_PTR;
    5af6:	4b06      	ldr	r3, [pc, #24]	; (5b10 <Mcu_Init+0xc4>)
    5af8:	2200      	movs	r2, #0
    5afa:	601a      	str	r2, [r3, #0]
#endif /* (MCU_PARAM_CHECK == STD_ON) */


#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    5afc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5b00:	2100      	movs	r1, #0
    5b02:	4618      	mov	r0, r3
    5b04:	f7ff ff82 	bl	5a0c <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5b08:	bf00      	nop
    5b0a:	b005      	add	sp, #20
    5b0c:	f85d fb04 	ldr.w	pc, [sp], #4
    5b10:	1fff8ce0 	.word	0x1fff8ce0
    5b14:	1fff8cdc 	.word	0x1fff8cdc
    5b18:	1fff8cd8 	.word	0x1fff8cd8

00005b1c <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    5b1c:	b500      	push	{lr}
    5b1e:	b085      	sub	sp, #20
    5b20:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    5b22:	2301      	movs	r3, #1
    5b24:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    /* Check if the driver is initialized. */
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INITRAMSECTION_ID) )
    5b28:	2001      	movs	r0, #1
    5b2a:	f7ff ff39 	bl	59a0 <Mcu_HLDChecksEntry>
    5b2e:	4603      	mov	r3, r0
    5b30:	2b00      	cmp	r3, #0
    5b32:	d103      	bne.n	5b3c <Mcu_InitRamSection+0x20>
        /* To avoid compiler warning. */
        MCU_PARAM_UNUSED(RamSection);
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    5b34:	2101      	movs	r1, #1
    5b36:	2000      	movs	r0, #0
    5b38:	f7ff ff68 	bl	5a0c <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    5b3c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5b40:	4618      	mov	r0, r3
    5b42:	b005      	add	sp, #20
    5b44:	f85d fb04 	ldr.w	pc, [sp], #4

00005b48 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    5b48:	b500      	push	{lr}
    5b4a:	b085      	sub	sp, #20
    5b4c:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    5b4e:	4a17      	ldr	r2, [pc, #92]	; (5bac <Mcu_InitClock+0x64>)
    5b50:	9b01      	ldr	r3, [sp, #4]
    5b52:	4413      	add	r3, r2
    5b54:	781b      	ldrb	r3, [r3, #0]
    5b56:	f88d 300e 	strb.w	r3, [sp, #14]
    /* Return the success of the clock initalization operation. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) )
    Std_ReturnType ClockStatus = (Std_ReturnType)E_NOT_OK;
    5b5a:	2301      	movs	r3, #1
    5b5c:	f88d 300f 	strb.w	r3, [sp, #15]
#else
    Std_ReturnType ClockStatus;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INITCLOCK_ID) )
    5b60:	2002      	movs	r0, #2
    5b62:	f7ff ff1d 	bl	59a0 <Mcu_HLDChecksEntry>
    5b66:	4603      	mov	r3, r0
    5b68:	2b00      	cmp	r3, #0
    5b6a:	d119      	bne.n	5ba0 <Mcu_InitClock+0x58>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
    5b6c:	9801      	ldr	r0, [sp, #4]
    5b6e:	f7ff fec3 	bl	58f8 <Mcu_CheckInitClock>
    5b72:	4603      	mov	r3, r0
    5b74:	2b00      	cmp	r3, #0
    5b76:	d10f      	bne.n	5b98 <Mcu_InitClock+0x50>
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    5b78:	4b0d      	ldr	r3, [pc, #52]	; (5bb0 <Mcu_InitClock+0x68>)
    5b7a:	681b      	ldr	r3, [r3, #0]
    5b7c:	6959      	ldr	r1, [r3, #20]
    5b7e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    5b82:	4613      	mov	r3, r2
    5b84:	01db      	lsls	r3, r3, #7
    5b86:	1a9b      	subs	r3, r3, r2
    5b88:	00db      	lsls	r3, r3, #3
    5b8a:	440b      	add	r3, r1
    5b8c:	4618      	mov	r0, r3
    5b8e:	f000 f8c7 	bl	5d20 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    5b92:	2300      	movs	r3, #0
    5b94:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_PARAM_CHECK == STD_ON)
        }
#endif /* (MCU_PARAM_CHECK == STD_ON) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    5b98:	2102      	movs	r1, #2
    5b9a:	2000      	movs	r0, #0
    5b9c:	f7ff ff36 	bl	5a0c <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    5ba0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5ba4:	4618      	mov	r0, r3
    5ba6:	b005      	add	sp, #20
    5ba8:	f85d fb04 	ldr.w	pc, [sp], #4
    5bac:	1fff8cd8 	.word	0x1fff8cd8
    5bb0:	1fff8ce0 	.word	0x1fff8ce0

00005bb4 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    5bb4:	b500      	push	{lr}
    5bb6:	b085      	sub	sp, #20
    5bb8:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    5bba:	4a15      	ldr	r2, [pc, #84]	; (5c10 <Mcu_SetMode+0x5c>)
    5bbc:	9b01      	ldr	r3, [sp, #4]
    5bbe:	4413      	add	r3, r2
    5bc0:	781b      	ldrb	r3, [r3, #0]
    5bc2:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_SETMODE_ID) )
    5bc6:	2008      	movs	r0, #8
    5bc8:	f7ff feea 	bl	59a0 <Mcu_HLDChecksEntry>
    5bcc:	4603      	mov	r3, r0
    5bce:	2b00      	cmp	r3, #0
    5bd0:	d11a      	bne.n	5c08 <Mcu_SetMode+0x54>
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

#if (MCU_PARAM_CHECK == STD_ON)
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
    5bd2:	9801      	ldr	r0, [sp, #4]
    5bd4:	f7ff feae 	bl	5934 <Mcu_CheckSetMode>
    5bd8:	4603      	mov	r3, r0
    5bda:	2b00      	cmp	r3, #0
    5bdc:	d110      	bne.n	5c00 <Mcu_SetMode+0x4c>
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    5bde:	f00e fed3 	bl	14988 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    5be2:	4b0c      	ldr	r3, [pc, #48]	; (5c14 <Mcu_SetMode+0x60>)
    5be4:	681b      	ldr	r3, [r3, #0]
    5be6:	6919      	ldr	r1, [r3, #16]
    5be8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5bec:	4613      	mov	r3, r2
    5bee:	005b      	lsls	r3, r3, #1
    5bf0:	4413      	add	r3, r2
    5bf2:	009b      	lsls	r3, r3, #2
    5bf4:	440b      	add	r3, r1
    5bf6:	4618      	mov	r0, r3
    5bf8:	f000 f89c 	bl	5d34 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    5bfc:	f00e fef0 	bl	149e0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>
        }
#endif /* (MCU_PARAM_CHECK == STD_ON) */


#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    5c00:	2108      	movs	r1, #8
    5c02:	2000      	movs	r0, #0
    5c04:	f7ff ff02 	bl	5a0c <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5c08:	bf00      	nop
    5c0a:	b005      	add	sp, #20
    5c0c:	f85d fb04 	ldr.w	pc, [sp], #4
    5c10:	1fff8cdc 	.word	0x1fff8cdc
    5c14:	1fff8ce0 	.word	0x1fff8ce0

00005c18 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    5c18:	b500      	push	{lr}
    5c1a:	b083      	sub	sp, #12
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    5c1c:	2302      	movs	r3, #2
    5c1e:	9301      	str	r3, [sp, #4]
#else
    Mcu_PllStatusType PllStatus;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETPLLSTATUS_ID) )
    5c20:	2004      	movs	r0, #4
    5c22:	f7ff febd 	bl	59a0 <Mcu_HLDChecksEntry>
    5c26:	4603      	mov	r3, r0
    5c28:	2b00      	cmp	r3, #0
    5c2a:	d103      	bne.n	5c34 <Mcu_GetPllStatus+0x1c>
           At this point, the return value can be only MCU_PLL_LOCKED or MCU_PLL_UNLOCKED. */
        PllStatus = Mcu_Ipw_GetPllStatus();
#endif /* (MCU_NO_PLL == STD_OFF) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    5c2c:	2104      	movs	r1, #4
    5c2e:	2000      	movs	r0, #0
    5c30:	f7ff feec 	bl	5a0c <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    5c34:	9b01      	ldr	r3, [sp, #4]
}
    5c36:	4618      	mov	r0, r3
    5c38:	b003      	add	sp, #12
    5c3a:	f85d fb04 	ldr.w	pc, [sp], #4

00005c3e <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    5c3e:	b500      	push	{lr}
    5c40:	b083      	sub	sp, #12
    /* Return value of the function. */
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    Mcu_ResetType ResetReason = MCU_RESET_UNDEFINED;
    5c42:	230e      	movs	r3, #14
    5c44:	9301      	str	r3, [sp, #4]
#else
    Mcu_ResetType ResetReason;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    5c46:	2005      	movs	r0, #5
    5c48:	f7ff feaa 	bl	59a0 <Mcu_HLDChecksEntry>
    5c4c:	4603      	mov	r3, r0
    5c4e:	2b00      	cmp	r3, #0
    5c50:	d106      	bne.n	5c60 <Mcu_GetResetReason+0x22>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    5c52:	f000 f879 	bl	5d48 <Mcu_Ipw_GetResetReason>
    5c56:	9001      	str	r0, [sp, #4]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    5c58:	2105      	movs	r1, #5
    5c5a:	2000      	movs	r0, #0
    5c5c:	f7ff fed6 	bl	5a0c <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    5c60:	9b01      	ldr	r3, [sp, #4]
}
    5c62:	4618      	mov	r0, r3
    5c64:	b003      	add	sp, #12
    5c66:	f85d fb04 	ldr.w	pc, [sp], #4

00005c6a <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    5c6a:	b500      	push	{lr}
    5c6c:	b083      	sub	sp, #12
    /* Return value of the function. */
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    Mcu_RawResetType RawResetValue = MCU_RAW_RESET_DEFAULT;
    5c6e:	f04f 33ff 	mov.w	r3, #4294967295
    5c72:	9301      	str	r3, [sp, #4]
#else
    Mcu_RawResetType RawResetValue;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    5c74:	2006      	movs	r0, #6
    5c76:	f7ff fe93 	bl	59a0 <Mcu_HLDChecksEntry>
    5c7a:	4603      	mov	r3, r0
    5c7c:	2b00      	cmp	r3, #0
    5c7e:	d106      	bne.n	5c8e <Mcu_GetResetRawValue+0x24>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    5c80:	f000 f868 	bl	5d54 <Mcu_Ipw_GetResetRawValue>
    5c84:	9001      	str	r0, [sp, #4]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    5c86:	2106      	movs	r1, #6
    5c88:	2000      	movs	r0, #0
    5c8a:	f7ff febf 	bl	5a0c <Mcu_HLDChecksExit>
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    5c8e:	9b01      	ldr	r3, [sp, #4]
}
    5c90:	4618      	mov	r0, r3
    5c92:	b003      	add	sp, #12
    5c94:	f85d fb04 	ldr.w	pc, [sp], #4

00005c98 <Mcu_GetVersionInfo>:
* @api
*
* @implements Mcu_GetVersionInfo_Activity
*/
void Mcu_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    5c98:	b500      	push	{lr}
    5c9a:	b083      	sub	sp, #12
    5c9c:	9001      	str	r0, [sp, #4]
#if (MCU_PARAM_CHECK == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckGetVersionInfo(versioninfo) )
    5c9e:	9801      	ldr	r0, [sp, #4]
    5ca0:	f7ff fe66 	bl	5970 <Mcu_CheckGetVersionInfo>
    5ca4:	4603      	mov	r3, r0
    5ca6:	2b00      	cmp	r3, #0
    5ca8:	d10e      	bne.n	5cc8 <Mcu_GetVersionInfo+0x30>
    {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
        (versioninfo)->vendorID = (uint16)MCU_VENDOR_ID;
    5caa:	9b01      	ldr	r3, [sp, #4]
    5cac:	222b      	movs	r2, #43	; 0x2b
    5cae:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint8)MCU_MODULE_ID;
    5cb0:	9b01      	ldr	r3, [sp, #4]
    5cb2:	2265      	movs	r2, #101	; 0x65
    5cb4:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)MCU_SW_MAJOR_VERSION;
    5cb6:	9b01      	ldr	r3, [sp, #4]
    5cb8:	2202      	movs	r2, #2
    5cba:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)MCU_SW_MINOR_VERSION;
    5cbc:	9b01      	ldr	r3, [sp, #4]
    5cbe:	2200      	movs	r2, #0
    5cc0:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)MCU_SW_PATCH_VERSION;
    5cc2:	9b01      	ldr	r3, [sp, #4]
    5cc4:	2200      	movs	r2, #0
    5cc6:	719a      	strb	r2, [r3, #6]
#if (MCU_PARAM_CHECK == STD_ON)
    }
#endif /* (MCU_PARAM_CHECK == STD_ON) */
}
    5cc8:	bf00      	nop
    5cca:	b003      	add	sp, #12
    5ccc:	f85d fb04 	ldr.w	pc, [sp], #4

00005cd0 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5cd0:	b500      	push	{lr}
    5cd2:	b083      	sub	sp, #12
    5cd4:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    5cd6:	201a      	movs	r0, #26
    5cd8:	f7ff fe62 	bl	59a0 <Mcu_HLDChecksEntry>
    5cdc:	4603      	mov	r3, r0
    5cde:	2b00      	cmp	r3, #0
    5ce0:	d106      	bne.n	5cf0 <Mcu_SleepOnExit+0x20>
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    5ce2:	9801      	ldr	r0, [sp, #4]
    5ce4:	f000 f83c 	bl	5d60 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    5ce8:	211a      	movs	r1, #26
    5cea:	2000      	movs	r0, #0
    5cec:	f7ff fe8e 	bl	5a0c <Mcu_HLDChecksExit>
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    5cf0:	bf00      	nop
    5cf2:	b003      	add	sp, #12
    5cf4:	f85d fb04 	ldr.w	pc, [sp], #4

00005cf8 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    5cf8:	b082      	sub	sp, #8
    5cfa:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    5cfc:	4b02      	ldr	r3, [pc, #8]	; (5d08 <Mcu_ClkSrcFailureNotification+0x10>)
    5cfe:	681b      	ldr	r3, [r3, #0]
    5d00:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    5d02:	bf00      	nop
    5d04:	b002      	add	sp, #8
    5d06:	4770      	bx	lr
    5d08:	1fff8ce0 	.word	0x1fff8ce0

00005d0c <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    5d0c:	b500      	push	{lr}
    5d0e:	b083      	sub	sp, #12
    5d10:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    5d12:	9801      	ldr	r0, [sp, #4]
    5d14:	f000 f882 	bl	5e1c <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    5d18:	bf00      	nop
    5d1a:	b003      	add	sp, #12
    5d1c:	f85d fb04 	ldr.w	pc, [sp], #4

00005d20 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    5d20:	b500      	push	{lr}
    5d22:	b083      	sub	sp, #12
    5d24:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    5d26:	9801      	ldr	r0, [sp, #4]
    5d28:	f7fc fb12 	bl	2350 <Clock_Ip_InitClock>
}
    5d2c:	bf00      	nop
    5d2e:	b003      	add	sp, #12
    5d30:	f85d fb04 	ldr.w	pc, [sp], #4

00005d34 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    5d34:	b500      	push	{lr}
    5d36:	b083      	sub	sp, #12
    5d38:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    5d3a:	9801      	ldr	r0, [sp, #4]
    5d3c:	f000 f820 	bl	5d80 <Power_Ip_SetMode>
}
    5d40:	bf00      	nop
    5d42:	b003      	add	sp, #12
    5d44:	f85d fb04 	ldr.w	pc, [sp], #4

00005d48 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    5d48:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    5d4a:	f000 f84f 	bl	5dec <Power_Ip_GetResetReason>
    5d4e:	4603      	mov	r3, r0
}
    5d50:	4618      	mov	r0, r3
    5d52:	bd08      	pop	{r3, pc}

00005d54 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    5d54:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    5d56:	f000 f857 	bl	5e08 <Power_Ip_GetResetRawValue>
    5d5a:	4603      	mov	r3, r0
}
    5d5c:	4618      	mov	r0, r3
    5d5e:	bd08      	pop	{r3, pc}

00005d60 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5d60:	b500      	push	{lr}
    5d62:	b083      	sub	sp, #12
    5d64:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    5d66:	9b01      	ldr	r3, [sp, #4]
    5d68:	2b00      	cmp	r3, #0
    5d6a:	d102      	bne.n	5d72 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    5d6c:	f000 f86c 	bl	5e48 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    5d70:	e001      	b.n	5d76 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    5d72:	f000 f86e 	bl	5e52 <Power_Ip_EnableSleepOnExit>
}
    5d76:	bf00      	nop
    5d78:	b003      	add	sp, #12
    5d7a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005d80 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5d80:	b500      	push	{lr}
    5d82:	b085      	sub	sp, #20
    5d84:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    5d86:	9b01      	ldr	r3, [sp, #4]
    5d88:	685b      	ldr	r3, [r3, #4]
    5d8a:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    5d8c:	9802      	ldr	r0, [sp, #8]
    5d8e:	f000 f9f5 	bl	617c <Power_Ip_SMC_ModeCheckEntry>
    5d92:	4603      	mov	r3, r0
    5d94:	2b00      	cmp	r3, #0
    5d96:	d002      	beq.n	5d9e <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5d98:	2301      	movs	r3, #1
    5d9a:	9303      	str	r3, [sp, #12]
    5d9c:	e003      	b.n	5da6 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    5d9e:	9801      	ldr	r0, [sp, #4]
    5da0:	f000 fa1e 	bl	61e0 <Power_Ip_SMC_ModeConfig>
    5da4:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    5da6:	9b03      	ldr	r3, [sp, #12]
    5da8:	2b01      	cmp	r3, #1
    5daa:	d103      	bne.n	5db4 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5dac:	21ff      	movs	r1, #255	; 0xff
    5dae:	2003      	movs	r0, #3
    5db0:	f000 f8f4 	bl	5f9c <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    5db4:	bf00      	nop
    5db6:	b005      	add	sp, #20
    5db8:	f85d fb04 	ldr.w	pc, [sp], #4

00005dbc <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    5dbc:	b084      	sub	sp, #16
    5dbe:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    5dc0:	230c      	movs	r3, #12
    5dc2:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    5dc4:	4a08      	ldr	r2, [pc, #32]	; (5de8 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5dc6:	9b01      	ldr	r3, [sp, #4]
    5dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5dcc:	2b0e      	cmp	r3, #14
    5dce:	d805      	bhi.n	5ddc <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    5dd0:	4a05      	ldr	r2, [pc, #20]	; (5de8 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5dd2:	9b01      	ldr	r3, [sp, #4]
    5dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5dd8:	9303      	str	r3, [sp, #12]
    5dda:	e001      	b.n	5de0 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    5ddc:	230c      	movs	r3, #12
    5dde:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    5de0:	9b03      	ldr	r3, [sp, #12]
}
    5de2:	4618      	mov	r0, r3
    5de4:	b004      	add	sp, #16
    5de6:	4770      	bx	lr
    5de8:	00018464 	.word	0x00018464

00005dec <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    5dec:	b500      	push	{lr}
    5dee:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    5df0:	f000 f940 	bl	6074 <Power_Ip_RCM_GetResetReason>
    5df4:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    5df6:	9801      	ldr	r0, [sp, #4]
    5df8:	f7ff ffe0 	bl	5dbc <Power_Ip_ConvertIntergeToResetType>
    5dfc:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    5dfe:	9b00      	ldr	r3, [sp, #0]
}
    5e00:	4618      	mov	r0, r3
    5e02:	b003      	add	sp, #12
    5e04:	f85d fb04 	ldr.w	pc, [sp], #4

00005e08 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    5e08:	b500      	push	{lr}
    5e0a:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    5e0c:	f000 f98a 	bl	6124 <Power_Ip_RCM_GetResetRawValue>
    5e10:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    5e12:	9b01      	ldr	r3, [sp, #4]
}
    5e14:	4618      	mov	r0, r3
    5e16:	b003      	add	sp, #12
    5e18:	f85d fb04 	ldr.w	pc, [sp], #4

00005e1c <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    5e1c:	b500      	push	{lr}
    5e1e:	b083      	sub	sp, #12
    5e20:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    5e22:	9b01      	ldr	r3, [sp, #4]
    5e24:	681b      	ldr	r3, [r3, #0]
    5e26:	4618      	mov	r0, r3
    5e28:	f000 f90e 	bl	6048 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    5e2c:	9b01      	ldr	r3, [sp, #4]
    5e2e:	685b      	ldr	r3, [r3, #4]
    5e30:	4618      	mov	r0, r3
    5e32:	f000 f86d 	bl	5f10 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    5e36:	9b01      	ldr	r3, [sp, #4]
    5e38:	689b      	ldr	r3, [r3, #8]
    5e3a:	4618      	mov	r0, r3
    5e3c:	f000 f990 	bl	6160 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    5e40:	bf00      	nop
    5e42:	b003      	add	sp, #12
    5e44:	f85d fb04 	ldr.w	pc, [sp], #4

00005e48 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    5e48:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    5e4a:	f000 f811 	bl	5e70 <Power_Ip_CM4_DisableSleepOnExit>
}
    5e4e:	bf00      	nop
    5e50:	bd08      	pop	{r3, pc}

00005e52 <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    5e52:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    5e54:	f000 f820 	bl	5e98 <Power_Ip_CM4_EnableSleepOnExit>
}
    5e58:	bf00      	nop
    5e5a:	bd08      	pop	{r3, pc}

00005e5c <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    5e5c:	b082      	sub	sp, #8
    5e5e:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    5e60:	4a02      	ldr	r2, [pc, #8]	; (5e6c <Power_Ip_InstallNotificationsCallback+0x10>)
    5e62:	9b01      	ldr	r3, [sp, #4]
    5e64:	6013      	str	r3, [r2, #0]
}
    5e66:	bf00      	nop
    5e68:	b002      	add	sp, #8
    5e6a:	4770      	bx	lr
    5e6c:	1fff8b20 	.word	0x1fff8b20

00005e70 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    5e70:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5e72:	2300      	movs	r3, #0
    5e74:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5e76:	4b07      	ldr	r3, [pc, #28]	; (5e94 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5e78:	681b      	ldr	r3, [r3, #0]
    5e7a:	685b      	ldr	r3, [r3, #4]
    5e7c:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    5e7e:	9b01      	ldr	r3, [sp, #4]
    5e80:	f023 0302 	bic.w	r3, r3, #2
    5e84:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5e86:	4b03      	ldr	r3, [pc, #12]	; (5e94 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5e88:	681b      	ldr	r3, [r3, #0]
    5e8a:	9a01      	ldr	r2, [sp, #4]
    5e8c:	605a      	str	r2, [r3, #4]
}
    5e8e:	bf00      	nop
    5e90:	b002      	add	sp, #8
    5e92:	4770      	bx	lr
    5e94:	1fff8b24 	.word	0x1fff8b24

00005e98 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    5e98:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5e9a:	2300      	movs	r3, #0
    5e9c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5e9e:	4b07      	ldr	r3, [pc, #28]	; (5ebc <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5ea0:	681b      	ldr	r3, [r3, #0]
    5ea2:	685b      	ldr	r3, [r3, #4]
    5ea4:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    5ea6:	9b01      	ldr	r3, [sp, #4]
    5ea8:	f043 0302 	orr.w	r3, r3, #2
    5eac:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5eae:	4b03      	ldr	r3, [pc, #12]	; (5ebc <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5eb0:	681b      	ldr	r3, [r3, #0]
    5eb2:	9a01      	ldr	r2, [sp, #4]
    5eb4:	605a      	str	r2, [r3, #4]
}
    5eb6:	bf00      	nop
    5eb8:	b002      	add	sp, #8
    5eba:	4770      	bx	lr
    5ebc:	1fff8b24 	.word	0x1fff8b24

00005ec0 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    5ec0:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5ec2:	2300      	movs	r3, #0
    5ec4:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5ec6:	4b07      	ldr	r3, [pc, #28]	; (5ee4 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5ec8:	681b      	ldr	r3, [r3, #0]
    5eca:	685b      	ldr	r3, [r3, #4]
    5ecc:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    5ece:	9b01      	ldr	r3, [sp, #4]
    5ed0:	f043 0304 	orr.w	r3, r3, #4
    5ed4:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5ed6:	4b03      	ldr	r3, [pc, #12]	; (5ee4 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5ed8:	681b      	ldr	r3, [r3, #0]
    5eda:	9a01      	ldr	r2, [sp, #4]
    5edc:	605a      	str	r2, [r3, #4]
}
    5ede:	bf00      	nop
    5ee0:	b002      	add	sp, #8
    5ee2:	4770      	bx	lr
    5ee4:	1fff8b24 	.word	0x1fff8b24

00005ee8 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    5ee8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5eea:	2300      	movs	r3, #0
    5eec:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5eee:	4b07      	ldr	r3, [pc, #28]	; (5f0c <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5ef0:	681b      	ldr	r3, [r3, #0]
    5ef2:	685b      	ldr	r3, [r3, #4]
    5ef4:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    5ef6:	9b01      	ldr	r3, [sp, #4]
    5ef8:	f023 0304 	bic.w	r3, r3, #4
    5efc:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5efe:	4b03      	ldr	r3, [pc, #12]	; (5f0c <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5f00:	681b      	ldr	r3, [r3, #0]
    5f02:	9a01      	ldr	r2, [sp, #4]
    5f04:	605a      	str	r2, [r3, #4]
}
    5f06:	bf00      	nop
    5f08:	b002      	add	sp, #8
    5f0a:	4770      	bx	lr
    5f0c:	1fff8b24 	.word	0x1fff8b24

00005f10 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    5f10:	b084      	sub	sp, #16
    5f12:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    5f14:	4b20      	ldr	r3, [pc, #128]	; (5f98 <Power_Ip_PMC_PowerInit+0x88>)
    5f16:	781b      	ldrb	r3, [r3, #0]
    5f18:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    5f1c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5f20:	f003 030f 	and.w	r3, r3, #15
    5f24:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    5f28:	9b01      	ldr	r3, [sp, #4]
    5f2a:	781a      	ldrb	r2, [r3, #0]
    5f2c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5f30:	4313      	orrs	r3, r2
    5f32:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    5f36:	4a18      	ldr	r2, [pc, #96]	; (5f98 <Power_Ip_PMC_PowerInit+0x88>)
    5f38:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5f3c:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    5f3e:	4b16      	ldr	r3, [pc, #88]	; (5f98 <Power_Ip_PMC_PowerInit+0x88>)
    5f40:	785b      	ldrb	r3, [r3, #1]
    5f42:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    5f46:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5f4a:	f003 031f 	and.w	r3, r3, #31
    5f4e:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    5f52:	9b01      	ldr	r3, [sp, #4]
    5f54:	785a      	ldrb	r2, [r3, #1]
    5f56:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5f5a:	4313      	orrs	r3, r2
    5f5c:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    5f60:	4a0d      	ldr	r2, [pc, #52]	; (5f98 <Power_Ip_PMC_PowerInit+0x88>)
    5f62:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5f66:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    5f68:	4b0b      	ldr	r3, [pc, #44]	; (5f98 <Power_Ip_PMC_PowerInit+0x88>)
    5f6a:	789b      	ldrb	r3, [r3, #2]
    5f6c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5f70:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5f74:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5f78:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5f7c:	9b01      	ldr	r3, [sp, #4]
    5f7e:	789a      	ldrb	r2, [r3, #2]
    5f80:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5f84:	4313      	orrs	r3, r2
    5f86:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5f8a:	4a03      	ldr	r2, [pc, #12]	; (5f98 <Power_Ip_PMC_PowerInit+0x88>)
    5f8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5f90:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5f92:	bf00      	nop
    5f94:	b004      	add	sp, #16
    5f96:	4770      	bx	lr
    5f98:	4007d000 	.word	0x4007d000

00005f9c <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5f9c:	b500      	push	{lr}
    5f9e:	b083      	sub	sp, #12
    5fa0:	9001      	str	r0, [sp, #4]
    5fa2:	460b      	mov	r3, r1
    5fa4:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5fa8:	4b05      	ldr	r3, [pc, #20]	; (5fc0 <Power_Ip_ReportPowerErrors+0x24>)
    5faa:	681b      	ldr	r3, [r3, #0]
    5fac:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5fb0:	4611      	mov	r1, r2
    5fb2:	9801      	ldr	r0, [sp, #4]
    5fb4:	4798      	blx	r3
}
    5fb6:	bf00      	nop
    5fb8:	b003      	add	sp, #12
    5fba:	f85d fb04 	ldr.w	pc, [sp], #4
    5fbe:	bf00      	nop
    5fc0:	1fff8b20 	.word	0x1fff8b20

00005fc4 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5fc4:	b082      	sub	sp, #8
    5fc6:	9001      	str	r0, [sp, #4]
    5fc8:	460b      	mov	r3, r1
    5fca:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    5fce:	bf00      	nop
    5fd0:	b002      	add	sp, #8
    5fd2:	4770      	bx	lr

00005fd4 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    5fd4:	b500      	push	{lr}
    5fd6:	b085      	sub	sp, #20
    5fd8:	9003      	str	r0, [sp, #12]
    5fda:	9102      	str	r1, [sp, #8]
    5fdc:	9201      	str	r2, [sp, #4]
    5fde:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5fe0:	2000      	movs	r0, #0
    5fe2:	f7fb fee5 	bl	1db0 <OsIf_GetCounter>
    5fe6:	4602      	mov	r2, r0
    5fe8:	9b03      	ldr	r3, [sp, #12]
    5fea:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    5fec:	9b02      	ldr	r3, [sp, #8]
    5fee:	2200      	movs	r2, #0
    5ff0:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    5ff2:	2100      	movs	r1, #0
    5ff4:	9800      	ldr	r0, [sp, #0]
    5ff6:	f7fb ff27 	bl	1e48 <OsIf_MicrosToTicks>
    5ffa:	4602      	mov	r2, r0
    5ffc:	9b01      	ldr	r3, [sp, #4]
    5ffe:	601a      	str	r2, [r3, #0]
}
    6000:	bf00      	nop
    6002:	b005      	add	sp, #20
    6004:	f85d fb04 	ldr.w	pc, [sp], #4

00006008 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    6008:	b500      	push	{lr}
    600a:	b087      	sub	sp, #28
    600c:	9003      	str	r0, [sp, #12]
    600e:	9102      	str	r1, [sp, #8]
    6010:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    6012:	2300      	movs	r3, #0
    6014:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    6018:	2100      	movs	r1, #0
    601a:	9803      	ldr	r0, [sp, #12]
    601c:	f7fb fee1 	bl	1de2 <OsIf_GetElapsed>
    6020:	4602      	mov	r2, r0
    6022:	9b02      	ldr	r3, [sp, #8]
    6024:	681b      	ldr	r3, [r3, #0]
    6026:	441a      	add	r2, r3
    6028:	9b02      	ldr	r3, [sp, #8]
    602a:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    602c:	9b02      	ldr	r3, [sp, #8]
    602e:	681b      	ldr	r3, [r3, #0]
    6030:	9a01      	ldr	r2, [sp, #4]
    6032:	429a      	cmp	r2, r3
    6034:	d802      	bhi.n	603c <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    6036:	2301      	movs	r3, #1
    6038:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    603c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6040:	4618      	mov	r0, r3
    6042:	b007      	add	sp, #28
    6044:	f85d fb04 	ldr.w	pc, [sp], #4

00006048 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    6048:	b082      	sub	sp, #8
    604a:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    604c:	9b01      	ldr	r3, [sp, #4]
    604e:	681a      	ldr	r2, [r3, #0]
    6050:	4907      	ldr	r1, [pc, #28]	; (6070 <Power_Ip_RCM_ResetInit+0x28>)
    6052:	f641 7307 	movw	r3, #7943	; 0x1f07
    6056:	4013      	ands	r3, r2
    6058:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    605a:	9b01      	ldr	r3, [sp, #4]
    605c:	685a      	ldr	r2, [r3, #4]
    605e:	4904      	ldr	r1, [pc, #16]	; (6070 <Power_Ip_RCM_ResetInit+0x28>)
    6060:	f642 73ff 	movw	r3, #12287	; 0x2fff
    6064:	4013      	ands	r3, r2
    6066:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    6068:	bf00      	nop
    606a:	b002      	add	sp, #8
    606c:	4770      	bx	lr
    606e:	bf00      	nop
    6070:	4007f000 	.word	0x4007f000

00006074 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    6074:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    6076:	230c      	movs	r3, #12
    6078:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    607a:	2300      	movs	r3, #0
    607c:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    607e:	2300      	movs	r3, #0
    6080:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    6082:	2300      	movs	r3, #0
    6084:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    6086:	4b25      	ldr	r3, [pc, #148]	; (611c <Power_Ip_RCM_GetResetReason+0xa8>)
    6088:	699a      	ldr	r2, [r3, #24]
    608a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    608e:	4013      	ands	r3, r2
    6090:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    6092:	9b03      	ldr	r3, [sp, #12]
    6094:	2b00      	cmp	r3, #0
    6096:	d008      	beq.n	60aa <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    6098:	4920      	ldr	r1, [pc, #128]	; (611c <Power_Ip_RCM_GetResetReason+0xa8>)
    609a:	9a03      	ldr	r2, [sp, #12]
    609c:	f642 73ee 	movw	r3, #12270	; 0x2fee
    60a0:	4013      	ands	r3, r2
    60a2:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    60a4:	4a1e      	ldr	r2, [pc, #120]	; (6120 <Power_Ip_RCM_GetResetReason+0xac>)
    60a6:	9b03      	ldr	r3, [sp, #12]
    60a8:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    60aa:	4b1d      	ldr	r3, [pc, #116]	; (6120 <Power_Ip_RCM_GetResetReason+0xac>)
    60ac:	681b      	ldr	r3, [r3, #0]
    60ae:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    60b0:	9a02      	ldr	r2, [sp, #8]
    60b2:	f642 73ee 	movw	r3, #12270	; 0x2fee
    60b6:	4013      	ands	r3, r2
    60b8:	2b82      	cmp	r3, #130	; 0x82
    60ba:	d102      	bne.n	60c2 <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    60bc:	2305      	movs	r3, #5
    60be:	9307      	str	r3, [sp, #28]
    60c0:	e027      	b.n	6112 <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    60c2:	2300      	movs	r3, #0
    60c4:	9306      	str	r3, [sp, #24]
    60c6:	e021      	b.n	610c <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    60c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    60cc:	9b06      	ldr	r3, [sp, #24]
    60ce:	fa22 f303 	lsr.w	r3, r2, r3
    60d2:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    60d4:	9a01      	ldr	r2, [sp, #4]
    60d6:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    60da:	4013      	ands	r3, r2
    60dc:	2b00      	cmp	r3, #0
    60de:	d012      	beq.n	6106 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    60e0:	9a01      	ldr	r2, [sp, #4]
    60e2:	9b02      	ldr	r3, [sp, #8]
    60e4:	4013      	ands	r3, r2
    60e6:	2b00      	cmp	r3, #0
    60e8:	d00a      	beq.n	6100 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    60ea:	9b05      	ldr	r3, [sp, #20]
    60ec:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    60ee:	9b04      	ldr	r3, [sp, #16]
    60f0:	3301      	adds	r3, #1
    60f2:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    60f4:	9b04      	ldr	r3, [sp, #16]
    60f6:	2b01      	cmp	r3, #1
    60f8:	d902      	bls.n	6100 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    60fa:	230d      	movs	r3, #13
    60fc:	9307      	str	r3, [sp, #28]
                        break;
    60fe:	e008      	b.n	6112 <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    6100:	9b05      	ldr	r3, [sp, #20]
    6102:	3301      	adds	r3, #1
    6104:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    6106:	9b06      	ldr	r3, [sp, #24]
    6108:	3301      	adds	r3, #1
    610a:	9306      	str	r3, [sp, #24]
    610c:	9b06      	ldr	r3, [sp, #24]
    610e:	2b1f      	cmp	r3, #31
    6110:	d9da      	bls.n	60c8 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    6112:	9b07      	ldr	r3, [sp, #28]
}
    6114:	4618      	mov	r0, r3
    6116:	b008      	add	sp, #32
    6118:	4770      	bx	lr
    611a:	bf00      	nop
    611c:	4007f000 	.word	0x4007f000
    6120:	1fff8ce4 	.word	0x1fff8ce4

00006124 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    6124:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    6126:	4b0c      	ldr	r3, [pc, #48]	; (6158 <Power_Ip_RCM_GetResetRawValue+0x34>)
    6128:	699a      	ldr	r2, [r3, #24]
    612a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    612e:	4013      	ands	r3, r2
    6130:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    6132:	9b01      	ldr	r3, [sp, #4]
    6134:	2b00      	cmp	r3, #0
    6136:	d008      	beq.n	614a <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    6138:	4907      	ldr	r1, [pc, #28]	; (6158 <Power_Ip_RCM_GetResetRawValue+0x34>)
    613a:	9a01      	ldr	r2, [sp, #4]
    613c:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6140:	4013      	ands	r3, r2
    6142:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    6144:	4a05      	ldr	r2, [pc, #20]	; (615c <Power_Ip_RCM_GetResetRawValue+0x38>)
    6146:	9b01      	ldr	r3, [sp, #4]
    6148:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    614a:	4b04      	ldr	r3, [pc, #16]	; (615c <Power_Ip_RCM_GetResetRawValue+0x38>)
    614c:	681b      	ldr	r3, [r3, #0]
    614e:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    6150:	9b00      	ldr	r3, [sp, #0]
}
    6152:	4618      	mov	r0, r3
    6154:	b002      	add	sp, #8
    6156:	4770      	bx	lr
    6158:	4007f000 	.word	0x4007f000
    615c:	1fff8ce4 	.word	0x1fff8ce4

00006160 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    6160:	b082      	sub	sp, #8
    6162:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    6164:	9b01      	ldr	r3, [sp, #4]
    6166:	681b      	ldr	r3, [r3, #0]
    6168:	4a03      	ldr	r2, [pc, #12]	; (6178 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    616a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    616e:	6093      	str	r3, [r2, #8]
}
    6170:	bf00      	nop
    6172:	b002      	add	sp, #8
    6174:	4770      	bx	lr
    6176:	bf00      	nop
    6178:	4007e000 	.word	0x4007e000

0000617c <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    617c:	b084      	sub	sp, #16
    617e:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    6180:	2301      	movs	r3, #1
    6182:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    6184:	4b15      	ldr	r3, [pc, #84]	; (61dc <Power_Ip_SMC_ModeCheckEntry+0x60>)
    6186:	695b      	ldr	r3, [r3, #20]
    6188:	b2db      	uxtb	r3, r3
    618a:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    618c:	9b01      	ldr	r3, [sp, #4]
    618e:	2b02      	cmp	r3, #2
    6190:	d012      	beq.n	61b8 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    6192:	9b01      	ldr	r3, [sp, #4]
    6194:	2b02      	cmp	r3, #2
    6196:	d818      	bhi.n	61ca <Power_Ip_SMC_ModeCheckEntry+0x4e>
    6198:	9b01      	ldr	r3, [sp, #4]
    619a:	2b00      	cmp	r3, #0
    619c:	d003      	beq.n	61a6 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    619e:	9b01      	ldr	r3, [sp, #4]
    61a0:	2b01      	cmp	r3, #1
    61a2:	d003      	beq.n	61ac <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    61a4:	e011      	b.n	61ca <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    61a6:	2300      	movs	r3, #0
    61a8:	9303      	str	r3, [sp, #12]
            break;
    61aa:	e013      	b.n	61d4 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    61ac:	9b02      	ldr	r3, [sp, #8]
    61ae:	2b01      	cmp	r3, #1
    61b0:	d10d      	bne.n	61ce <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    61b2:	2300      	movs	r3, #0
    61b4:	9303      	str	r3, [sp, #12]
            break;
    61b6:	e00a      	b.n	61ce <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    61b8:	9b02      	ldr	r3, [sp, #8]
    61ba:	2b01      	cmp	r3, #1
    61bc:	d002      	beq.n	61c4 <Power_Ip_SMC_ModeCheckEntry+0x48>
    61be:	9b02      	ldr	r3, [sp, #8]
    61c0:	2b10      	cmp	r3, #16
    61c2:	d106      	bne.n	61d2 <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    61c4:	2300      	movs	r3, #0
    61c6:	9303      	str	r3, [sp, #12]
            break;
    61c8:	e003      	b.n	61d2 <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    61ca:	bf00      	nop
    61cc:	e002      	b.n	61d4 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    61ce:	bf00      	nop
    61d0:	e000      	b.n	61d4 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    61d2:	bf00      	nop
        }
    }

    return PowerModeCheck;
    61d4:	9b03      	ldr	r3, [sp, #12]
}
    61d6:	4618      	mov	r0, r3
    61d8:	b004      	add	sp, #16
    61da:	4770      	bx	lr
    61dc:	4007e000 	.word	0x4007e000

000061e0 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    61e0:	b500      	push	{lr}
    61e2:	b08b      	sub	sp, #44	; 0x2c
    61e4:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    61e6:	2300      	movs	r3, #0
    61e8:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    61ea:	2300      	movs	r3, #0
    61ec:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    61ee:	2300      	movs	r3, #0
    61f0:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    61f4:	9b01      	ldr	r3, [sp, #4]
    61f6:	685b      	ldr	r3, [r3, #4]
    61f8:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    61fa:	9b08      	ldr	r3, [sp, #32]
    61fc:	2b02      	cmp	r3, #2
    61fe:	d076      	beq.n	62ee <Power_Ip_SMC_ModeConfig+0x10e>
    6200:	9b08      	ldr	r3, [sp, #32]
    6202:	2b02      	cmp	r3, #2
    6204:	f200 80ab 	bhi.w	635e <Power_Ip_SMC_ModeConfig+0x17e>
    6208:	9b08      	ldr	r3, [sp, #32]
    620a:	2b00      	cmp	r3, #0
    620c:	d003      	beq.n	6216 <Power_Ip_SMC_ModeConfig+0x36>
    620e:	9b08      	ldr	r3, [sp, #32]
    6210:	2b01      	cmp	r3, #1
    6212:	d034      	beq.n	627e <Power_Ip_SMC_ModeConfig+0x9e>
    6214:	e0a3      	b.n	635e <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    6216:	4b58      	ldr	r3, [pc, #352]	; (6378 <Power_Ip_SMC_ModeConfig+0x198>)
    6218:	68db      	ldr	r3, [r3, #12]
    621a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    621c:	9b06      	ldr	r3, [sp, #24]
    621e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6222:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    6224:	4a54      	ldr	r2, [pc, #336]	; (6378 <Power_Ip_SMC_ModeConfig+0x198>)
    6226:	9b06      	ldr	r3, [sp, #24]
    6228:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    622a:	aa02      	add	r2, sp, #8
    622c:	a903      	add	r1, sp, #12
    622e:	a804      	add	r0, sp, #16
    6230:	f24c 3350 	movw	r3, #50000	; 0xc350
    6234:	f7ff fece 	bl	5fd4 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6238:	9a02      	ldr	r2, [sp, #8]
    623a:	a903      	add	r1, sp, #12
    623c:	ab04      	add	r3, sp, #16
    623e:	4618      	mov	r0, r3
    6240:	f7ff fee2 	bl	6008 <Power_Ip_TimeoutExpired>
    6244:	4603      	mov	r3, r0
    6246:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    624a:	4b4b      	ldr	r3, [pc, #300]	; (6378 <Power_Ip_SMC_ModeConfig+0x198>)
    624c:	695b      	ldr	r3, [r3, #20]
    624e:	f003 0301 	and.w	r3, r3, #1
    6252:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6254:	9b05      	ldr	r3, [sp, #20]
    6256:	2b01      	cmp	r3, #1
    6258:	d006      	beq.n	6268 <Power_Ip_SMC_ModeConfig+0x88>
    625a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    625e:	f083 0301 	eor.w	r3, r3, #1
    6262:	b2db      	uxtb	r3, r3
    6264:	2b00      	cmp	r3, #0
    6266:	d1e7      	bne.n	6238 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    6268:	f89d 301f 	ldrb.w	r3, [sp, #31]
    626c:	2b00      	cmp	r3, #0
    626e:	d079      	beq.n	6364 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6270:	2301      	movs	r3, #1
    6272:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6274:	21ff      	movs	r1, #255	; 0xff
    6276:	2000      	movs	r0, #0
    6278:	f7ff fe90 	bl	5f9c <Power_Ip_ReportPowerErrors>
            }

            break;
    627c:	e072      	b.n	6364 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    627e:	4b3e      	ldr	r3, [pc, #248]	; (6378 <Power_Ip_SMC_ModeConfig+0x198>)
    6280:	68db      	ldr	r3, [r3, #12]
    6282:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6284:	9b06      	ldr	r3, [sp, #24]
    6286:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    628a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    628c:	9b06      	ldr	r3, [sp, #24]
    628e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    6292:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6294:	4a38      	ldr	r2, [pc, #224]	; (6378 <Power_Ip_SMC_ModeConfig+0x198>)
    6296:	9b06      	ldr	r3, [sp, #24]
    6298:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    629a:	aa02      	add	r2, sp, #8
    629c:	a903      	add	r1, sp, #12
    629e:	a804      	add	r0, sp, #16
    62a0:	f24c 3350 	movw	r3, #50000	; 0xc350
    62a4:	f7ff fe96 	bl	5fd4 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    62a8:	9a02      	ldr	r2, [sp, #8]
    62aa:	a903      	add	r1, sp, #12
    62ac:	ab04      	add	r3, sp, #16
    62ae:	4618      	mov	r0, r3
    62b0:	f7ff feaa 	bl	6008 <Power_Ip_TimeoutExpired>
    62b4:	4603      	mov	r3, r0
    62b6:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    62ba:	4b2f      	ldr	r3, [pc, #188]	; (6378 <Power_Ip_SMC_ModeConfig+0x198>)
    62bc:	695b      	ldr	r3, [r3, #20]
    62be:	f003 0380 	and.w	r3, r3, #128	; 0x80
    62c2:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    62c4:	9b05      	ldr	r3, [sp, #20]
    62c6:	2b80      	cmp	r3, #128	; 0x80
    62c8:	d006      	beq.n	62d8 <Power_Ip_SMC_ModeConfig+0xf8>
    62ca:	f89d 301f 	ldrb.w	r3, [sp, #31]
    62ce:	f083 0301 	eor.w	r3, r3, #1
    62d2:	b2db      	uxtb	r3, r3
    62d4:	2b00      	cmp	r3, #0
    62d6:	d1e7      	bne.n	62a8 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    62d8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    62dc:	2b00      	cmp	r3, #0
    62de:	d043      	beq.n	6368 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    62e0:	2301      	movs	r3, #1
    62e2:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    62e4:	21ff      	movs	r1, #255	; 0xff
    62e6:	2000      	movs	r0, #0
    62e8:	f7ff fe58 	bl	5f9c <Power_Ip_ReportPowerErrors>
            }

            break;
    62ec:	e03c      	b.n	6368 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    62ee:	4b22      	ldr	r3, [pc, #136]	; (6378 <Power_Ip_SMC_ModeConfig+0x198>)
    62f0:	68db      	ldr	r3, [r3, #12]
    62f2:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    62f4:	9b06      	ldr	r3, [sp, #24]
    62f6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    62fa:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    62fc:	9b06      	ldr	r3, [sp, #24]
    62fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6302:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6304:	4a1c      	ldr	r2, [pc, #112]	; (6378 <Power_Ip_SMC_ModeConfig+0x198>)
    6306:	9b06      	ldr	r3, [sp, #24]
    6308:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    630a:	aa02      	add	r2, sp, #8
    630c:	a903      	add	r1, sp, #12
    630e:	a804      	add	r0, sp, #16
    6310:	f24c 3350 	movw	r3, #50000	; 0xc350
    6314:	f7ff fe5e 	bl	5fd4 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6318:	9a02      	ldr	r2, [sp, #8]
    631a:	a903      	add	r1, sp, #12
    631c:	ab04      	add	r3, sp, #16
    631e:	4618      	mov	r0, r3
    6320:	f7ff fe72 	bl	6008 <Power_Ip_TimeoutExpired>
    6324:	4603      	mov	r3, r0
    6326:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    632a:	4b13      	ldr	r3, [pc, #76]	; (6378 <Power_Ip_SMC_ModeConfig+0x198>)
    632c:	695b      	ldr	r3, [r3, #20]
    632e:	f003 0304 	and.w	r3, r3, #4
    6332:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6334:	9b05      	ldr	r3, [sp, #20]
    6336:	2b04      	cmp	r3, #4
    6338:	d006      	beq.n	6348 <Power_Ip_SMC_ModeConfig+0x168>
    633a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    633e:	f083 0301 	eor.w	r3, r3, #1
    6342:	b2db      	uxtb	r3, r3
    6344:	2b00      	cmp	r3, #0
    6346:	d1e7      	bne.n	6318 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    6348:	f89d 301f 	ldrb.w	r3, [sp, #31]
    634c:	2b00      	cmp	r3, #0
    634e:	d00d      	beq.n	636c <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6350:	2301      	movs	r3, #1
    6352:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6354:	21ff      	movs	r1, #255	; 0xff
    6356:	2000      	movs	r0, #0
    6358:	f7ff fe20 	bl	5f9c <Power_Ip_ReportPowerErrors>
            }

            break;
    635c:	e006      	b.n	636c <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    635e:	2301      	movs	r3, #1
    6360:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    6362:	e004      	b.n	636e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6364:	bf00      	nop
    6366:	e002      	b.n	636e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6368:	bf00      	nop
    636a:	e000      	b.n	636e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    636c:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    636e:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    6370:	4618      	mov	r0, r3
    6372:	b00b      	add	sp, #44	; 0x2c
    6374:	f85d fb04 	ldr.w	pc, [sp], #4
    6378:	4007e000 	.word	0x4007e000

0000637c <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    637c:	b500      	push	{lr}
    637e:	b085      	sub	sp, #20
    6380:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    6382:	9b01      	ldr	r3, [sp, #4]
    6384:	9303      	str	r3, [sp, #12]
#endif /* (STD_ON == PORT_PRECOMPILE_SUPPORT) */

#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;

    CoreId = (uint8)Port_GetCoreID();
    6386:	2300      	movs	r3, #0
    6388:	f88d 300b 	strb.w	r3, [sp, #11]
#if (STD_OFF == PORT_PRECOMPILE_SUPPORT)
    if (NULL_PTR == ConfigPtr)
    638c:	9b01      	ldr	r3, [sp, #4]
    638e:	2b00      	cmp	r3, #0
    6390:	d106      	bne.n	63a0 <Port_Init+0x24>
#else /*(STD_OFF == PORT_PRECOMPILE_SUPPORT) */
    if (NULL_PTR != ConfigPtr)
#endif /* (STD_OFF == PORT_PRECOMPILE_SUPPORT) */
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_INIT_FAILED);
    6392:	230c      	movs	r3, #12
    6394:	2200      	movs	r2, #0
    6396:	2100      	movs	r1, #0
    6398:	207c      	movs	r0, #124	; 0x7c
    639a:	f010 fc3d 	bl	16c18 <Det_ReportError>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
        }
    }
}
    639e:	e014      	b.n	63ca <Port_Init+0x4e>
        if ((uint32)1 != pLocalConfigPtr->pau8Port_PartitionList[CoreId])
    63a0:	9b03      	ldr	r3, [sp, #12]
    63a2:	69da      	ldr	r2, [r3, #28]
    63a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    63a8:	4413      	add	r3, r2
    63aa:	781b      	ldrb	r3, [r3, #0]
    63ac:	2b01      	cmp	r3, #1
    63ae:	d006      	beq.n	63be <Port_Init+0x42>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
    63b0:	23f0      	movs	r3, #240	; 0xf0
    63b2:	2200      	movs	r2, #0
    63b4:	2100      	movs	r1, #0
    63b6:	207c      	movs	r0, #124	; 0x7c
    63b8:	f010 fc2e 	bl	16c18 <Det_ReportError>
}
    63bc:	e005      	b.n	63ca <Port_Init+0x4e>
            Port_Ipw_Init(pLocalConfigPtr);
    63be:	9803      	ldr	r0, [sp, #12]
    63c0:	f000 fc64 	bl	6c8c <Port_Ipw_Init>
            Port_pConfigPtr = pLocalConfigPtr;
    63c4:	4a03      	ldr	r2, [pc, #12]	; (63d4 <Port_Init+0x58>)
    63c6:	9b03      	ldr	r3, [sp, #12]
    63c8:	6013      	str	r3, [r2, #0]
}
    63ca:	bf00      	nop
    63cc:	b005      	add	sp, #20
    63ce:	f85d fb04 	ldr.w	pc, [sp], #4
    63d2:	bf00      	nop
    63d4:	1fff8ce8 	.word	0x1fff8ce8

000063d8 <Port_SetPinDirection>:
void Port_SetPinDirection
(
    Port_PinType Pin,
    Port_PinDirectionType Direction
)
{
    63d8:	b500      	push	{lr}
    63da:	b085      	sub	sp, #20
    63dc:	9001      	str	r0, [sp, #4]
    63de:	9100      	str	r1, [sp, #0]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    /* Variable used to store current error status */
    Std_ReturnType ErrStatus;

    /* Check if Port module is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    63e0:	4b11      	ldr	r3, [pc, #68]	; (6428 <Port_SetPinDirection+0x50>)
    63e2:	681b      	ldr	r3, [r3, #0]
    63e4:	2b00      	cmp	r3, #0
    63e6:	d106      	bne.n	63f6 <Port_SetPinDirection+0x1e>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_UNINIT);
    63e8:	230f      	movs	r3, #15
    63ea:	2201      	movs	r2, #1
    63ec:	2100      	movs	r1, #0
    63ee:	207c      	movs	r0, #124	; 0x7c
    63f0:	f010 fc12 	bl	16c18 <Det_ReportError>
        {
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_DIRECTION_UNCHANGEABLE);
        }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    }
}
    63f4:	e013      	b.n	641e <Port_SetPinDirection+0x46>
        ErrStatus = Port_Ipw_SetPinDirection(Pin, Direction, Port_pConfigPtr);
    63f6:	4b0c      	ldr	r3, [pc, #48]	; (6428 <Port_SetPinDirection+0x50>)
    63f8:	681b      	ldr	r3, [r3, #0]
    63fa:	461a      	mov	r2, r3
    63fc:	9900      	ldr	r1, [sp, #0]
    63fe:	9801      	ldr	r0, [sp, #4]
    6400:	f000 fcb2 	bl	6d68 <Port_Ipw_SetPinDirection>
    6404:	4603      	mov	r3, r0
    6406:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((Std_ReturnType)E_NOT_OK == ErrStatus)
    640a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    640e:	2b01      	cmp	r3, #1
    6410:	d105      	bne.n	641e <Port_SetPinDirection+0x46>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_DIRECTION_UNCHANGEABLE);
    6412:	230b      	movs	r3, #11
    6414:	2201      	movs	r2, #1
    6416:	2100      	movs	r1, #0
    6418:	207c      	movs	r0, #124	; 0x7c
    641a:	f010 fbfd 	bl	16c18 <Det_ReportError>
}
    641e:	bf00      	nop
    6420:	b005      	add	sp, #20
    6422:	f85d fb04 	ldr.w	pc, [sp], #4
    6426:	bf00      	nop
    6428:	1fff8ce8 	.word	0x1fff8ce8

0000642c <Port_SetPinMode>:
void Port_SetPinMode
(
    Port_PinType Pin,
    Port_PinModeType Mode
)
{
    642c:	b500      	push	{lr}
    642e:	b085      	sub	sp, #20
    6430:	9001      	str	r0, [sp, #4]
    6432:	460b      	mov	r3, r1
    6434:	f88d 3003 	strb.w	r3, [sp, #3]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 u8PinModeError = (uint8)0U;
    6438:	2300      	movs	r3, #0
    643a:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Check if port is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    643e:	4b12      	ldr	r3, [pc, #72]	; (6488 <Port_SetPinMode+0x5c>)
    6440:	681b      	ldr	r3, [r3, #0]
    6442:	2b00      	cmp	r3, #0
    6444:	d106      	bne.n	6454 <Port_SetPinMode+0x28>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_UNINIT);
    6446:	230f      	movs	r3, #15
    6448:	2204      	movs	r2, #4
    644a:	2100      	movs	r1, #0
    644c:	207c      	movs	r0, #124	; 0x7c
    644e:	f010 fbe3 	bl	16c18 <Det_ReportError>
        {
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_INVALID_MODE);
        }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    }
}
    6452:	e014      	b.n	647e <Port_SetPinMode+0x52>
        u8PinModeError = (uint8)Port_Ipw_SetPinMode(Pin, Mode, Port_pConfigPtr);
    6454:	4b0c      	ldr	r3, [pc, #48]	; (6488 <Port_SetPinMode+0x5c>)
    6456:	681a      	ldr	r2, [r3, #0]
    6458:	f89d 3003 	ldrb.w	r3, [sp, #3]
    645c:	4619      	mov	r1, r3
    645e:	9801      	ldr	r0, [sp, #4]
    6460:	f000 fd7a 	bl	6f58 <Port_Ipw_SetPinMode>
    6464:	4603      	mov	r3, r0
    6466:	f88d 300f 	strb.w	r3, [sp, #15]
        if (PORT_E_PARAM_INVALID_MODE == u8PinModeError)
    646a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    646e:	2b0d      	cmp	r3, #13
    6470:	d105      	bne.n	647e <Port_SetPinMode+0x52>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_INVALID_MODE);
    6472:	230d      	movs	r3, #13
    6474:	2204      	movs	r2, #4
    6476:	2100      	movs	r1, #0
    6478:	207c      	movs	r0, #124	; 0x7c
    647a:	f010 fbcd 	bl	16c18 <Det_ReportError>
}
    647e:	bf00      	nop
    6480:	b005      	add	sp, #20
    6482:	f85d fb04 	ldr.w	pc, [sp], #4
    6486:	bf00      	nop
    6488:	1fff8ce8 	.word	0x1fff8ce8

0000648c <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    648c:	b500      	push	{lr}
    648e:	b083      	sub	sp, #12
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;

    CoreId = (uint8)Port_GetCoreID();
    6490:	2300      	movs	r3, #0
    6492:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check if Port module is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    6496:	4b12      	ldr	r3, [pc, #72]	; (64e0 <Port_RefreshPortDirection+0x54>)
    6498:	681b      	ldr	r3, [r3, #0]
    649a:	2b00      	cmp	r3, #0
    649c:	d106      	bne.n	64ac <Port_RefreshPortDirection+0x20>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_UNINIT);
    649e:	230f      	movs	r3, #15
    64a0:	2202      	movs	r2, #2
    64a2:	2100      	movs	r1, #0
    64a4:	207c      	movs	r0, #124	; 0x7c
    64a6:	f010 fbb7 	bl	16c18 <Det_ReportError>
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    }
}
    64aa:	e014      	b.n	64d6 <Port_RefreshPortDirection+0x4a>
    else if ((uint32)1 != Port_pConfigPtr->pau8Port_PartitionList[CoreId])
    64ac:	4b0c      	ldr	r3, [pc, #48]	; (64e0 <Port_RefreshPortDirection+0x54>)
    64ae:	681b      	ldr	r3, [r3, #0]
    64b0:	69da      	ldr	r2, [r3, #28]
    64b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    64b6:	4413      	add	r3, r2
    64b8:	781b      	ldrb	r3, [r3, #0]
    64ba:	2b01      	cmp	r3, #1
    64bc:	d006      	beq.n	64cc <Port_RefreshPortDirection+0x40>
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    64be:	23f0      	movs	r3, #240	; 0xf0
    64c0:	2202      	movs	r2, #2
    64c2:	2100      	movs	r1, #0
    64c4:	207c      	movs	r0, #124	; 0x7c
    64c6:	f010 fba7 	bl	16c18 <Det_ReportError>
}
    64ca:	e004      	b.n	64d6 <Port_RefreshPortDirection+0x4a>
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    64cc:	4b04      	ldr	r3, [pc, #16]	; (64e0 <Port_RefreshPortDirection+0x54>)
    64ce:	681b      	ldr	r3, [r3, #0]
    64d0:	4618      	mov	r0, r3
    64d2:	f000 febf 	bl	7254 <Port_Ipw_RefreshPortDirection>
}
    64d6:	bf00      	nop
    64d8:	b003      	add	sp, #12
    64da:	f85d fb04 	ldr.w	pc, [sp], #4
    64de:	bf00      	nop
    64e0:	1fff8ce8 	.word	0x1fff8ce8

000064e4 <Port_GetVersionInfo>:
*/
void Port_GetVersionInfo
(
    Std_VersionInfoType * versioninfo
)
{
    64e4:	b500      	push	{lr}
    64e6:	b083      	sub	sp, #12
    64e8:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    if (NULL_PTR == versioninfo)
    64ea:	9b01      	ldr	r3, [sp, #4]
    64ec:	2b00      	cmp	r3, #0
    64ee:	d106      	bne.n	64fe <Port_GetVersionInfo+0x1a>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_GETVERSIONINFO_ID, (uint8)PORT_E_PARAM_POINTER);
    64f0:	2310      	movs	r3, #16
    64f2:	2203      	movs	r2, #3
    64f4:	2100      	movs	r1, #0
    64f6:	207c      	movs	r0, #124	; 0x7c
    64f8:	f010 fb8e 	bl	16c18 <Det_ReportError>
        (versioninfo)->moduleID         = (uint16)PORT_MODULE_ID;
        (versioninfo)->sw_major_version = (uint8)PORT_SW_MAJOR_VERSION;
        (versioninfo)->sw_minor_version = (uint8)PORT_SW_MINOR_VERSION;
        (versioninfo)->sw_patch_version = (uint8)PORT_SW_PATCH_VERSION;
    }
}
    64fc:	e00e      	b.n	651c <Port_GetVersionInfo+0x38>
        (versioninfo)->vendorID         = (uint16)PORT_VENDOR_ID;
    64fe:	9b01      	ldr	r3, [sp, #4]
    6500:	222b      	movs	r2, #43	; 0x2b
    6502:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID         = (uint16)PORT_MODULE_ID;
    6504:	9b01      	ldr	r3, [sp, #4]
    6506:	227c      	movs	r2, #124	; 0x7c
    6508:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)PORT_SW_MAJOR_VERSION;
    650a:	9b01      	ldr	r3, [sp, #4]
    650c:	2202      	movs	r2, #2
    650e:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)PORT_SW_MINOR_VERSION;
    6510:	9b01      	ldr	r3, [sp, #4]
    6512:	2200      	movs	r2, #0
    6514:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)PORT_SW_PATCH_VERSION;
    6516:	9b01      	ldr	r3, [sp, #4]
    6518:	2200      	movs	r2, #0
    651a:	719a      	strb	r2, [r3, #6]
}
    651c:	bf00      	nop
    651e:	b003      	add	sp, #12
    6520:	f85d fb04 	ldr.w	pc, [sp], #4

00006524 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    6524:	b086      	sub	sp, #24
    6526:	9003      	str	r0, [sp, #12]
    6528:	9102      	str	r1, [sp, #8]
    652a:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    652c:	23ff      	movs	r3, #255	; 0xff
    652e:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    6530:	9b03      	ldr	r3, [sp, #12]
    6532:	4a39      	ldr	r2, [pc, #228]	; (6618 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    6534:	4293      	cmp	r3, r2
    6536:	d151      	bne.n	65dc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    6538:	9b02      	ldr	r3, [sp, #8]
    653a:	2b10      	cmp	r3, #16
    653c:	d867      	bhi.n	660e <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    653e:	a201      	add	r2, pc, #4	; (adr r2, 6544 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    6540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6544:	00006589 	.word	0x00006589
    6548:	00006597 	.word	0x00006597
    654c:	0000660f 	.word	0x0000660f
    6550:	0000660f 	.word	0x0000660f
    6554:	0000660f 	.word	0x0000660f
    6558:	0000660f 	.word	0x0000660f
    655c:	0000660f 	.word	0x0000660f
    6560:	0000660f 	.word	0x0000660f
    6564:	0000660f 	.word	0x0000660f
    6568:	0000660f 	.word	0x0000660f
    656c:	0000660f 	.word	0x0000660f
    6570:	0000660f 	.word	0x0000660f
    6574:	0000660f 	.word	0x0000660f
    6578:	000065a5 	.word	0x000065a5
    657c:	000065b3 	.word	0x000065b3
    6580:	000065c1 	.word	0x000065c1
    6584:	000065cf 	.word	0x000065cf
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    6588:	2301      	movs	r3, #1
    658a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    658c:	9a05      	ldr	r2, [sp, #20]
    658e:	9b01      	ldr	r3, [sp, #4]
    6590:	4313      	orrs	r3, r2
    6592:	9305      	str	r3, [sp, #20]
                break;
    6594:	e03c      	b.n	6610 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    6596:	2302      	movs	r3, #2
    6598:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    659a:	9a05      	ldr	r2, [sp, #20]
    659c:	9b01      	ldr	r3, [sp, #4]
    659e:	4313      	orrs	r3, r2
    65a0:	9305      	str	r3, [sp, #20]
                break;
    65a2:	e035      	b.n	6610 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    65a4:	2304      	movs	r3, #4
    65a6:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    65a8:	9a05      	ldr	r2, [sp, #20]
    65aa:	9b01      	ldr	r3, [sp, #4]
    65ac:	4313      	orrs	r3, r2
    65ae:	9305      	str	r3, [sp, #20]
                break;
    65b0:	e02e      	b.n	6610 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    65b2:	2308      	movs	r3, #8
    65b4:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    65b6:	9a05      	ldr	r2, [sp, #20]
    65b8:	9b01      	ldr	r3, [sp, #4]
    65ba:	4313      	orrs	r3, r2
    65bc:	9305      	str	r3, [sp, #20]
                break;
    65be:	e027      	b.n	6610 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    65c0:	230e      	movs	r3, #14
    65c2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    65c4:	9a05      	ldr	r2, [sp, #20]
    65c6:	9b01      	ldr	r3, [sp, #4]
    65c8:	4013      	ands	r3, r2
    65ca:	9305      	str	r3, [sp, #20]
                break;
    65cc:	e020      	b.n	6610 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    65ce:	230d      	movs	r3, #13
    65d0:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    65d2:	9a05      	ldr	r2, [sp, #20]
    65d4:	9b01      	ldr	r3, [sp, #4]
    65d6:	4013      	ands	r3, r2
    65d8:	9305      	str	r3, [sp, #20]
                break;
    65da:	e019      	b.n	6610 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    65dc:	9b03      	ldr	r3, [sp, #12]
    65de:	4a0f      	ldr	r2, [pc, #60]	; (661c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    65e0:	4293      	cmp	r3, r2
    65e2:	d115      	bne.n	6610 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    65e4:	9b02      	ldr	r3, [sp, #8]
    65e6:	2b00      	cmp	r3, #0
    65e8:	d003      	beq.n	65f2 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    65ea:	9b02      	ldr	r3, [sp, #8]
    65ec:	2b01      	cmp	r3, #1
    65ee:	d007      	beq.n	6600 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    65f0:	e00e      	b.n	6610 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    65f2:	230b      	movs	r3, #11
    65f4:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    65f6:	9a05      	ldr	r2, [sp, #20]
    65f8:	9b01      	ldr	r3, [sp, #4]
    65fa:	4013      	ands	r3, r2
    65fc:	9305      	str	r3, [sp, #20]
                break;
    65fe:	e007      	b.n	6610 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    6600:	2307      	movs	r3, #7
    6602:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6604:	9a05      	ldr	r2, [sp, #20]
    6606:	9b01      	ldr	r3, [sp, #4]
    6608:	4013      	ands	r3, r2
    660a:	9305      	str	r3, [sp, #20]
                break;
    660c:	e000      	b.n	6610 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    660e:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    6610:	9b05      	ldr	r3, [sp, #20]
}
    6612:	4618      	mov	r0, r3
    6614:	b006      	add	sp, #24
    6616:	4770      	bx	lr
    6618:	4004a000 	.word	0x4004a000
    661c:	4004b000 	.word	0x4004b000

00006620 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    6620:	b500      	push	{lr}
    6622:	b089      	sub	sp, #36	; 0x24
    6624:	9003      	str	r0, [sp, #12]
    6626:	9102      	str	r1, [sp, #8]
    6628:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    662a:	9b01      	ldr	r3, [sp, #4]
    662c:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    662e:	9b01      	ldr	r3, [sp, #4]
    6630:	2b08      	cmp	r3, #8
    6632:	d121      	bne.n	6678 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    6634:	4b13      	ldr	r3, [pc, #76]	; (6684 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6636:	685b      	ldr	r3, [r3, #4]
    6638:	f003 030f 	and.w	r3, r3, #15
    663c:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    663e:	9a06      	ldr	r2, [sp, #24]
    6640:	9902      	ldr	r1, [sp, #8]
    6642:	9803      	ldr	r0, [sp, #12]
    6644:	f7ff ff6e 	bl	6524 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    6648:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    664a:	9b05      	ldr	r3, [sp, #20]
    664c:	2bff      	cmp	r3, #255	; 0xff
    664e:	d011      	beq.n	6674 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    6650:	f00e fc2a 	bl	14ea8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    6654:	4b0b      	ldr	r3, [pc, #44]	; (6684 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6656:	685b      	ldr	r3, [r3, #4]
    6658:	4a0a      	ldr	r2, [pc, #40]	; (6684 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    665a:	f023 030f 	bic.w	r3, r3, #15
    665e:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    6660:	4b08      	ldr	r3, [pc, #32]	; (6684 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6662:	685a      	ldr	r2, [r3, #4]
    6664:	9b05      	ldr	r3, [sp, #20]
    6666:	f003 030f 	and.w	r3, r3, #15
    666a:	4906      	ldr	r1, [pc, #24]	; (6684 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    666c:	4313      	orrs	r3, r2
    666e:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    6670:	f00e fc46 	bl	14f00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    6674:	2300      	movs	r3, #0
    6676:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    6678:	9b07      	ldr	r3, [sp, #28]
}
    667a:	4618      	mov	r0, r3
    667c:	b009      	add	sp, #36	; 0x24
    667e:	f85d fb04 	ldr.w	pc, [sp], #4
    6682:	bf00      	nop
    6684:	40048000 	.word	0x40048000

00006688 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    6688:	b500      	push	{lr}
    668a:	b087      	sub	sp, #28
    668c:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    668e:	2300      	movs	r3, #0
    6690:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    6692:	2300      	movs	r3, #0
    6694:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    6696:	2300      	movs	r3, #0
    6698:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    669a:	9b01      	ldr	r3, [sp, #4]
    669c:	68db      	ldr	r3, [r3, #12]
    669e:	2b02      	cmp	r3, #2
    66a0:	d00a      	beq.n	66b8 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    66a2:	9b05      	ldr	r3, [sp, #20]
    66a4:	f043 0302 	orr.w	r3, r3, #2
    66a8:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    66aa:	9b01      	ldr	r3, [sp, #4]
    66ac:	68db      	ldr	r3, [r3, #12]
    66ae:	f003 0301 	and.w	r3, r3, #1
    66b2:	9a05      	ldr	r2, [sp, #20]
    66b4:	4313      	orrs	r3, r2
    66b6:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    66b8:	9b01      	ldr	r3, [sp, #4]
    66ba:	699b      	ldr	r3, [r3, #24]
    66bc:	019b      	lsls	r3, r3, #6
    66be:	f003 0340 	and.w	r3, r3, #64	; 0x40
    66c2:	9a05      	ldr	r2, [sp, #20]
    66c4:	4313      	orrs	r3, r2
    66c6:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    66c8:	9b01      	ldr	r3, [sp, #4]
    66ca:	6a1b      	ldr	r3, [r3, #32]
    66cc:	03db      	lsls	r3, r3, #15
    66ce:	b29b      	uxth	r3, r3
    66d0:	9a05      	ldr	r2, [sp, #20]
    66d2:	4313      	orrs	r3, r2
    66d4:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    66d6:	9b01      	ldr	r3, [sp, #4]
    66d8:	7f1b      	ldrb	r3, [r3, #28]
    66da:	2b00      	cmp	r3, #0
    66dc:	d001      	beq.n	66e2 <Port_Ci_Port_Ip_PinInit+0x5a>
    66de:	2310      	movs	r3, #16
    66e0:	e000      	b.n	66e4 <Port_Ci_Port_Ip_PinInit+0x5c>
    66e2:	2300      	movs	r3, #0
    66e4:	9a05      	ldr	r2, [sp, #20]
    66e6:	4313      	orrs	r3, r2
    66e8:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    66ea:	9b01      	ldr	r3, [sp, #4]
    66ec:	691b      	ldr	r3, [r3, #16]
    66ee:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    66f0:	9b01      	ldr	r3, [sp, #4]
    66f2:	6818      	ldr	r0, [r3, #0]
    66f4:	9b01      	ldr	r3, [sp, #4]
    66f6:	689b      	ldr	r3, [r3, #8]
    66f8:	9a04      	ldr	r2, [sp, #16]
    66fa:	4619      	mov	r1, r3
    66fc:	f7ff ff90 	bl	6620 <Port_Ci_Port_Ip_ConfigureInterleave>
    6700:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    6702:	9b03      	ldr	r3, [sp, #12]
    6704:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    6706:	9b04      	ldr	r3, [sp, #16]
    6708:	021b      	lsls	r3, r3, #8
    670a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    670e:	9a05      	ldr	r2, [sp, #20]
    6710:	4313      	orrs	r3, r2
    6712:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    6714:	f00e fa2e 	bl	14b74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    6718:	9b01      	ldr	r3, [sp, #4]
    671a:	681b      	ldr	r3, [r3, #0]
    671c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    6720:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    6722:	9b01      	ldr	r3, [sp, #4]
    6724:	689b      	ldr	r3, [r3, #8]
    6726:	2201      	movs	r2, #1
    6728:	fa02 f303 	lsl.w	r3, r2, r3
    672c:	43db      	mvns	r3, r3
    672e:	9a02      	ldr	r2, [sp, #8]
    6730:	4013      	ands	r3, r2
    6732:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    6734:	9b01      	ldr	r3, [sp, #4]
    6736:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    673a:	2b00      	cmp	r3, #0
    673c:	d001      	beq.n	6742 <Port_Ci_Port_Ip_PinInit+0xba>
    673e:	2201      	movs	r2, #1
    6740:	e000      	b.n	6744 <Port_Ci_Port_Ip_PinInit+0xbc>
    6742:	2200      	movs	r2, #0
    6744:	9b01      	ldr	r3, [sp, #4]
    6746:	689b      	ldr	r3, [r3, #8]
    6748:	fa02 f303 	lsl.w	r3, r2, r3
    674c:	9a02      	ldr	r2, [sp, #8]
    674e:	4313      	orrs	r3, r2
    6750:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    6752:	9b01      	ldr	r3, [sp, #4]
    6754:	681b      	ldr	r3, [r3, #0]
    6756:	9a02      	ldr	r2, [sp, #8]
    6758:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    675c:	f00e fa36 	bl	14bcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    6760:	9b04      	ldr	r3, [sp, #16]
    6762:	2b01      	cmp	r3, #1
    6764:	d16d      	bne.n	6842 <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    6766:	9b01      	ldr	r3, [sp, #4]
    6768:	695b      	ldr	r3, [r3, #20]
    676a:	2b02      	cmp	r3, #2
    676c:	d138      	bne.n	67e0 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    676e:	9b01      	ldr	r3, [sp, #4]
    6770:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6774:	2b01      	cmp	r3, #1
    6776:	d10f      	bne.n	6798 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    6778:	f00e fa4e 	bl	14c18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    677c:	9b01      	ldr	r3, [sp, #4]
    677e:	685b      	ldr	r3, [r3, #4]
    6780:	6859      	ldr	r1, [r3, #4]
    6782:	9b01      	ldr	r3, [sp, #4]
    6784:	689b      	ldr	r3, [r3, #8]
    6786:	2201      	movs	r2, #1
    6788:	409a      	lsls	r2, r3
    678a:	9b01      	ldr	r3, [sp, #4]
    678c:	685b      	ldr	r3, [r3, #4]
    678e:	430a      	orrs	r2, r1
    6790:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    6792:	f00e fa6d 	bl	14c70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    6796:	e013      	b.n	67c0 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    6798:	9b01      	ldr	r3, [sp, #4]
    679a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    679e:	2b00      	cmp	r3, #0
    67a0:	d10e      	bne.n	67c0 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    67a2:	f00e fa8b 	bl	14cbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    67a6:	9b01      	ldr	r3, [sp, #4]
    67a8:	685b      	ldr	r3, [r3, #4]
    67aa:	6899      	ldr	r1, [r3, #8]
    67ac:	9b01      	ldr	r3, [sp, #4]
    67ae:	689b      	ldr	r3, [r3, #8]
    67b0:	2201      	movs	r2, #1
    67b2:	409a      	lsls	r2, r3
    67b4:	9b01      	ldr	r3, [sp, #4]
    67b6:	685b      	ldr	r3, [r3, #4]
    67b8:	430a      	orrs	r2, r1
    67ba:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    67bc:	f00e faaa 	bl	14d14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    67c0:	f00e face 	bl	14d60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    67c4:	9b01      	ldr	r3, [sp, #4]
    67c6:	685b      	ldr	r3, [r3, #4]
    67c8:	6959      	ldr	r1, [r3, #20]
    67ca:	9b01      	ldr	r3, [sp, #4]
    67cc:	689b      	ldr	r3, [r3, #8]
    67ce:	2201      	movs	r2, #1
    67d0:	409a      	lsls	r2, r3
    67d2:	9b01      	ldr	r3, [sp, #4]
    67d4:	685b      	ldr	r3, [r3, #4]
    67d6:	430a      	orrs	r2, r1
    67d8:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    67da:	f00e faed 	bl	14db8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    67de:	e030      	b.n	6842 <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    67e0:	f00e fabe 	bl	14d60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    67e4:	9b01      	ldr	r3, [sp, #4]
    67e6:	685b      	ldr	r3, [r3, #4]
    67e8:	6959      	ldr	r1, [r3, #20]
    67ea:	9b01      	ldr	r3, [sp, #4]
    67ec:	689b      	ldr	r3, [r3, #8]
    67ee:	2201      	movs	r2, #1
    67f0:	fa02 f303 	lsl.w	r3, r2, r3
    67f4:	43da      	mvns	r2, r3
    67f6:	9b01      	ldr	r3, [sp, #4]
    67f8:	685b      	ldr	r3, [r3, #4]
    67fa:	400a      	ands	r2, r1
    67fc:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    67fe:	f00e fadb 	bl	14db8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    6802:	f00e faff 	bl	14e04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    6806:	9b01      	ldr	r3, [sp, #4]
    6808:	685b      	ldr	r3, [r3, #4]
    680a:	6999      	ldr	r1, [r3, #24]
    680c:	9b01      	ldr	r3, [sp, #4]
    680e:	689b      	ldr	r3, [r3, #8]
    6810:	2201      	movs	r2, #1
    6812:	fa02 f303 	lsl.w	r3, r2, r3
    6816:	43da      	mvns	r2, r3
    6818:	9b01      	ldr	r3, [sp, #4]
    681a:	685b      	ldr	r3, [r3, #4]
    681c:	400a      	ands	r2, r1
    681e:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    6820:	9b01      	ldr	r3, [sp, #4]
    6822:	695b      	ldr	r3, [r3, #20]
    6824:	2b03      	cmp	r3, #3
    6826:	d10a      	bne.n	683e <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    6828:	9b01      	ldr	r3, [sp, #4]
    682a:	685b      	ldr	r3, [r3, #4]
    682c:	6999      	ldr	r1, [r3, #24]
    682e:	9b01      	ldr	r3, [sp, #4]
    6830:	689b      	ldr	r3, [r3, #8]
    6832:	2201      	movs	r2, #1
    6834:	409a      	lsls	r2, r3
    6836:	9b01      	ldr	r3, [sp, #4]
    6838:	685b      	ldr	r3, [r3, #4]
    683a:	430a      	orrs	r2, r1
    683c:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    683e:	f00e fb0d 	bl	14e5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    6842:	9b01      	ldr	r3, [sp, #4]
    6844:	681b      	ldr	r3, [r3, #0]
    6846:	9a01      	ldr	r2, [sp, #4]
    6848:	6892      	ldr	r2, [r2, #8]
    684a:	9905      	ldr	r1, [sp, #20]
    684c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6850:	bf00      	nop
    6852:	b007      	add	sp, #28
    6854:	f85d fb04 	ldr.w	pc, [sp], #4

00006858 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    6858:	b500      	push	{lr}
    685a:	b085      	sub	sp, #20
    685c:	9001      	str	r0, [sp, #4]
    685e:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    6860:	2300      	movs	r3, #0
    6862:	9303      	str	r3, [sp, #12]
    6864:	e00d      	b.n	6882 <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    6866:	9a03      	ldr	r2, [sp, #12]
    6868:	4613      	mov	r3, r2
    686a:	009b      	lsls	r3, r3, #2
    686c:	4413      	add	r3, r2
    686e:	00db      	lsls	r3, r3, #3
    6870:	461a      	mov	r2, r3
    6872:	9b00      	ldr	r3, [sp, #0]
    6874:	4413      	add	r3, r2
    6876:	4618      	mov	r0, r3
    6878:	f7ff ff06 	bl	6688 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    687c:	9b03      	ldr	r3, [sp, #12]
    687e:	3301      	adds	r3, #1
    6880:	9303      	str	r3, [sp, #12]
    6882:	9a03      	ldr	r2, [sp, #12]
    6884:	9b01      	ldr	r3, [sp, #4]
    6886:	429a      	cmp	r2, r3
    6888:	d3ed      	bcc.n	6866 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    688a:	2300      	movs	r3, #0
}
    688c:	4618      	mov	r0, r3
    688e:	b005      	add	sp, #20
    6890:	f85d fb04 	ldr.w	pc, [sp], #4

00006894 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    6894:	b500      	push	{lr}
    6896:	b087      	sub	sp, #28
    6898:	9003      	str	r0, [sp, #12]
    689a:	9102      	str	r1, [sp, #8]
    689c:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    689e:	9a01      	ldr	r2, [sp, #4]
    68a0:	9902      	ldr	r1, [sp, #8]
    68a2:	9803      	ldr	r0, [sp, #12]
    68a4:	f7ff febc 	bl	6620 <Port_Ci_Port_Ip_ConfigureInterleave>
    68a8:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    68aa:	f00e fb4f 	bl	14f4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    68ae:	9b03      	ldr	r3, [sp, #12]
    68b0:	9a02      	ldr	r2, [sp, #8]
    68b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    68b6:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    68b8:	9b04      	ldr	r3, [sp, #16]
    68ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    68be:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    68c0:	9b05      	ldr	r3, [sp, #20]
    68c2:	021b      	lsls	r3, r3, #8
    68c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    68c8:	9a04      	ldr	r2, [sp, #16]
    68ca:	4313      	orrs	r3, r2
    68cc:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    68ce:	9b03      	ldr	r3, [sp, #12]
    68d0:	9a02      	ldr	r2, [sp, #8]
    68d2:	9904      	ldr	r1, [sp, #16]
    68d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    68d8:	f00e fb64 	bl	14fa4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    68dc:	bf00      	nop
    68de:	b007      	add	sp, #28
    68e0:	f85d fb04 	ldr.w	pc, [sp], #4

000068e4 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    68e4:	b500      	push	{lr}
    68e6:	b083      	sub	sp, #12
    68e8:	9001      	str	r0, [sp, #4]
    68ea:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    68ec:	f00e fb80 	bl	14ff0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    68f0:	9b01      	ldr	r3, [sp, #4]
    68f2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    68f6:	2101      	movs	r1, #1
    68f8:	9b00      	ldr	r3, [sp, #0]
    68fa:	fa01 f303 	lsl.w	r3, r1, r3
    68fe:	431a      	orrs	r2, r3
    6900:	9b01      	ldr	r3, [sp, #4]
    6902:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    6906:	f00e fb9f 	bl	15048 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    690a:	bf00      	nop
    690c:	b003      	add	sp, #12
    690e:	f85d fb04 	ldr.w	pc, [sp], #4

00006912 <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6912:	b500      	push	{lr}
    6914:	b083      	sub	sp, #12
    6916:	9001      	str	r0, [sp, #4]
    6918:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    691a:	f00e fbbb 	bl	15094 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    691e:	9b01      	ldr	r3, [sp, #4]
    6920:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6924:	2101      	movs	r1, #1
    6926:	9b00      	ldr	r3, [sp, #0]
    6928:	fa01 f303 	lsl.w	r3, r1, r3
    692c:	43db      	mvns	r3, r3
    692e:	401a      	ands	r2, r3
    6930:	9b01      	ldr	r3, [sp, #4]
    6932:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    6936:	f00e fbd9 	bl	150ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    693a:	bf00      	nop
    693c:	b003      	add	sp, #12
    693e:	f85d fb04 	ldr.w	pc, [sp], #4

00006942 <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    6942:	b082      	sub	sp, #8
    6944:	9001      	str	r0, [sp, #4]
    6946:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    6948:	9b00      	ldr	r3, [sp, #0]
    694a:	785b      	ldrb	r3, [r3, #1]
    694c:	f003 0201 	and.w	r2, r3, #1
    6950:	9b01      	ldr	r3, [sp, #4]
    6952:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    6956:	9b00      	ldr	r3, [sp, #0]
    6958:	789b      	ldrb	r3, [r3, #2]
    695a:	f003 021f 	and.w	r2, r3, #31
    695e:	9b01      	ldr	r3, [sp, #4]
    6960:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    6964:	bf00      	nop
    6966:	b002      	add	sp, #8
    6968:	4770      	bx	lr

0000696a <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    696a:	b086      	sub	sp, #24
    696c:	9003      	str	r0, [sp, #12]
    696e:	9301      	str	r3, [sp, #4]
    6970:	460b      	mov	r3, r1
    6972:	f8ad 300a 	strh.w	r3, [sp, #10]
    6976:	4613      	mov	r3, r2
    6978:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    697c:	2300      	movs	r3, #0
    697e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    6982:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6986:	f043 0301 	orr.w	r3, r3, #1
    698a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    698e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6992:	f043 0302 	orr.w	r3, r3, #2
    6996:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    699a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    699e:	f043 0310 	orr.w	r3, r3, #16
    69a2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    69a6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    69ae:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    69b2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    69ba:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    69be:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    69c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    69ca:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    69ce:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    69d2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    69d6:	4013      	ands	r3, r2
    69d8:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    69dc:	9b01      	ldr	r3, [sp, #4]
    69de:	2b00      	cmp	r3, #0
    69e0:	d003      	beq.n	69ea <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    69e2:	9b01      	ldr	r3, [sp, #4]
    69e4:	2b01      	cmp	r3, #1
    69e6:	d00a      	beq.n	69fe <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    69e8:	e013      	b.n	6a12 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    69ea:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    69ee:	041a      	lsls	r2, r3, #16
    69f0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69f4:	431a      	orrs	r2, r3
    69f6:	9b03      	ldr	r3, [sp, #12]
    69f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    69fc:	e009      	b.n	6a12 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    69fe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6a02:	041a      	lsls	r2, r3, #16
    6a04:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a08:	431a      	orrs	r2, r3
    6a0a:	9b03      	ldr	r3, [sp, #12]
    6a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    6a10:	bf00      	nop
    }
}
    6a12:	bf00      	nop
    6a14:	b006      	add	sp, #24
    6a16:	4770      	bx	lr

00006a18 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    6a18:	b500      	push	{lr}
    6a1a:	b087      	sub	sp, #28
    6a1c:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    6a1e:	9b01      	ldr	r3, [sp, #4]
    6a20:	885b      	ldrh	r3, [r3, #2]
    6a22:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    6a26:	9b01      	ldr	r3, [sp, #4]
    6a28:	689b      	ldr	r3, [r3, #8]
    6a2a:	7a1b      	ldrb	r3, [r3, #8]
    6a2c:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    6a30:	9b01      	ldr	r3, [sp, #4]
    6a32:	689b      	ldr	r3, [r3, #8]
    6a34:	681b      	ldr	r3, [r3, #0]
    6a36:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    6a38:	9b01      	ldr	r3, [sp, #4]
    6a3a:	689b      	ldr	r3, [r3, #8]
    6a3c:	685b      	ldr	r3, [r3, #4]
    6a3e:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6a40:	2300      	movs	r3, #0
    6a42:	f8ad 3016 	strh.w	r3, [sp, #22]
    6a46:	e111      	b.n	6c6c <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    6a48:	9b02      	ldr	r3, [sp, #8]
    6a4a:	2b02      	cmp	r3, #2
    6a4c:	d169      	bne.n	6b22 <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    6a4e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6a52:	2b01      	cmp	r3, #1
    6a54:	d11a      	bne.n	6a8c <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6a56:	9b01      	ldr	r3, [sp, #4]
    6a58:	685a      	ldr	r2, [r3, #4]
    6a5a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a5e:	005b      	lsls	r3, r3, #1
    6a60:	4413      	add	r3, r2
    6a62:	881b      	ldrh	r3, [r3, #0]
    6a64:	f003 021f 	and.w	r2, r3, #31
    6a68:	9b01      	ldr	r3, [sp, #4]
    6a6a:	6859      	ldr	r1, [r3, #4]
    6a6c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a70:	005b      	lsls	r3, r3, #1
    6a72:	440b      	add	r3, r1
    6a74:	881b      	ldrh	r3, [r3, #0]
    6a76:	095b      	lsrs	r3, r3, #5
    6a78:	b29b      	uxth	r3, r3
    6a7a:	4619      	mov	r1, r3
    6a7c:	4b81      	ldr	r3, [pc, #516]	; (6c84 <Port_Ipw_Init_UnusedPins+0x26c>)
    6a7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6a82:	2101      	movs	r1, #1
    6a84:	fa01 f202 	lsl.w	r2, r1, r2
    6a88:	605a      	str	r2, [r3, #4]
    6a8a:	e01d      	b.n	6ac8 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    6a8c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6a90:	2b00      	cmp	r3, #0
    6a92:	d119      	bne.n	6ac8 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6a94:	9b01      	ldr	r3, [sp, #4]
    6a96:	685a      	ldr	r2, [r3, #4]
    6a98:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a9c:	005b      	lsls	r3, r3, #1
    6a9e:	4413      	add	r3, r2
    6aa0:	881b      	ldrh	r3, [r3, #0]
    6aa2:	f003 021f 	and.w	r2, r3, #31
    6aa6:	9b01      	ldr	r3, [sp, #4]
    6aa8:	6859      	ldr	r1, [r3, #4]
    6aaa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6aae:	005b      	lsls	r3, r3, #1
    6ab0:	440b      	add	r3, r1
    6ab2:	881b      	ldrh	r3, [r3, #0]
    6ab4:	095b      	lsrs	r3, r3, #5
    6ab6:	b29b      	uxth	r3, r3
    6ab8:	4619      	mov	r1, r3
    6aba:	4b72      	ldr	r3, [pc, #456]	; (6c84 <Port_Ipw_Init_UnusedPins+0x26c>)
    6abc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6ac0:	2101      	movs	r1, #1
    6ac2:	fa01 f202 	lsl.w	r2, r1, r2
    6ac6:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6ac8:	f00e fb36 	bl	15138 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6acc:	9b01      	ldr	r3, [sp, #4]
    6ace:	685a      	ldr	r2, [r3, #4]
    6ad0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6ad4:	005b      	lsls	r3, r3, #1
    6ad6:	4413      	add	r3, r2
    6ad8:	881b      	ldrh	r3, [r3, #0]
    6ada:	095b      	lsrs	r3, r3, #5
    6adc:	b29b      	uxth	r3, r3
    6ade:	461a      	mov	r2, r3
    6ae0:	4b68      	ldr	r3, [pc, #416]	; (6c84 <Port_Ipw_Init_UnusedPins+0x26c>)
    6ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6ae6:	6959      	ldr	r1, [r3, #20]
    6ae8:	9b01      	ldr	r3, [sp, #4]
    6aea:	685a      	ldr	r2, [r3, #4]
    6aec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6af0:	005b      	lsls	r3, r3, #1
    6af2:	4413      	add	r3, r2
    6af4:	881b      	ldrh	r3, [r3, #0]
    6af6:	f003 031f 	and.w	r3, r3, #31
    6afa:	2201      	movs	r2, #1
    6afc:	409a      	lsls	r2, r3
    6afe:	9b01      	ldr	r3, [sp, #4]
    6b00:	6858      	ldr	r0, [r3, #4]
    6b02:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b06:	005b      	lsls	r3, r3, #1
    6b08:	4403      	add	r3, r0
    6b0a:	881b      	ldrh	r3, [r3, #0]
    6b0c:	095b      	lsrs	r3, r3, #5
    6b0e:	b29b      	uxth	r3, r3
    6b10:	4618      	mov	r0, r3
    6b12:	4b5c      	ldr	r3, [pc, #368]	; (6c84 <Port_Ipw_Init_UnusedPins+0x26c>)
    6b14:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6b18:	430a      	orrs	r2, r1
    6b1a:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6b1c:	f00e fb38 	bl	15190 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    6b20:	e086      	b.n	6c30 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6b22:	f00e fb09 	bl	15138 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    6b26:	9b01      	ldr	r3, [sp, #4]
    6b28:	685a      	ldr	r2, [r3, #4]
    6b2a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b2e:	005b      	lsls	r3, r3, #1
    6b30:	4413      	add	r3, r2
    6b32:	881b      	ldrh	r3, [r3, #0]
    6b34:	095b      	lsrs	r3, r3, #5
    6b36:	b29b      	uxth	r3, r3
    6b38:	461a      	mov	r2, r3
    6b3a:	4b52      	ldr	r3, [pc, #328]	; (6c84 <Port_Ipw_Init_UnusedPins+0x26c>)
    6b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6b40:	6959      	ldr	r1, [r3, #20]
    6b42:	9b01      	ldr	r3, [sp, #4]
    6b44:	685a      	ldr	r2, [r3, #4]
    6b46:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b4a:	005b      	lsls	r3, r3, #1
    6b4c:	4413      	add	r3, r2
    6b4e:	881b      	ldrh	r3, [r3, #0]
    6b50:	f003 031f 	and.w	r3, r3, #31
    6b54:	2201      	movs	r2, #1
    6b56:	fa02 f303 	lsl.w	r3, r2, r3
    6b5a:	43da      	mvns	r2, r3
    6b5c:	9b01      	ldr	r3, [sp, #4]
    6b5e:	6858      	ldr	r0, [r3, #4]
    6b60:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b64:	005b      	lsls	r3, r3, #1
    6b66:	4403      	add	r3, r0
    6b68:	881b      	ldrh	r3, [r3, #0]
    6b6a:	095b      	lsrs	r3, r3, #5
    6b6c:	b29b      	uxth	r3, r3
    6b6e:	4618      	mov	r0, r3
    6b70:	4b44      	ldr	r3, [pc, #272]	; (6c84 <Port_Ipw_Init_UnusedPins+0x26c>)
    6b72:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6b76:	400a      	ands	r2, r1
    6b78:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6b7a:	f00e fb09 	bl	15190 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    6b7e:	f00e fb2d 	bl	151dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6b82:	9b01      	ldr	r3, [sp, #4]
    6b84:	685a      	ldr	r2, [r3, #4]
    6b86:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b8a:	005b      	lsls	r3, r3, #1
    6b8c:	4413      	add	r3, r2
    6b8e:	881b      	ldrh	r3, [r3, #0]
    6b90:	095b      	lsrs	r3, r3, #5
    6b92:	b29b      	uxth	r3, r3
    6b94:	461a      	mov	r2, r3
    6b96:	4b3b      	ldr	r3, [pc, #236]	; (6c84 <Port_Ipw_Init_UnusedPins+0x26c>)
    6b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6b9c:	6999      	ldr	r1, [r3, #24]
    6b9e:	9b01      	ldr	r3, [sp, #4]
    6ba0:	685a      	ldr	r2, [r3, #4]
    6ba2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6ba6:	005b      	lsls	r3, r3, #1
    6ba8:	4413      	add	r3, r2
    6baa:	881b      	ldrh	r3, [r3, #0]
    6bac:	f003 031f 	and.w	r3, r3, #31
    6bb0:	2201      	movs	r2, #1
    6bb2:	fa02 f303 	lsl.w	r3, r2, r3
    6bb6:	43da      	mvns	r2, r3
    6bb8:	9b01      	ldr	r3, [sp, #4]
    6bba:	6858      	ldr	r0, [r3, #4]
    6bbc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6bc0:	005b      	lsls	r3, r3, #1
    6bc2:	4403      	add	r3, r0
    6bc4:	881b      	ldrh	r3, [r3, #0]
    6bc6:	095b      	lsrs	r3, r3, #5
    6bc8:	b29b      	uxth	r3, r3
    6bca:	4618      	mov	r0, r3
    6bcc:	4b2d      	ldr	r3, [pc, #180]	; (6c84 <Port_Ipw_Init_UnusedPins+0x26c>)
    6bce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6bd2:	400a      	ands	r2, r1
    6bd4:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    6bd6:	9b02      	ldr	r3, [sp, #8]
    6bd8:	2b03      	cmp	r3, #3
    6bda:	d127      	bne.n	6c2c <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6bdc:	9b01      	ldr	r3, [sp, #4]
    6bde:	685a      	ldr	r2, [r3, #4]
    6be0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6be4:	005b      	lsls	r3, r3, #1
    6be6:	4413      	add	r3, r2
    6be8:	881b      	ldrh	r3, [r3, #0]
    6bea:	095b      	lsrs	r3, r3, #5
    6bec:	b29b      	uxth	r3, r3
    6bee:	461a      	mov	r2, r3
    6bf0:	4b24      	ldr	r3, [pc, #144]	; (6c84 <Port_Ipw_Init_UnusedPins+0x26c>)
    6bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6bf6:	6999      	ldr	r1, [r3, #24]
    6bf8:	9b01      	ldr	r3, [sp, #4]
    6bfa:	685a      	ldr	r2, [r3, #4]
    6bfc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c00:	005b      	lsls	r3, r3, #1
    6c02:	4413      	add	r3, r2
    6c04:	881b      	ldrh	r3, [r3, #0]
    6c06:	f003 031f 	and.w	r3, r3, #31
    6c0a:	2201      	movs	r2, #1
    6c0c:	409a      	lsls	r2, r3
    6c0e:	9b01      	ldr	r3, [sp, #4]
    6c10:	6858      	ldr	r0, [r3, #4]
    6c12:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c16:	005b      	lsls	r3, r3, #1
    6c18:	4403      	add	r3, r0
    6c1a:	881b      	ldrh	r3, [r3, #0]
    6c1c:	095b      	lsrs	r3, r3, #5
    6c1e:	b29b      	uxth	r3, r3
    6c20:	4618      	mov	r0, r3
    6c22:	4b18      	ldr	r3, [pc, #96]	; (6c84 <Port_Ipw_Init_UnusedPins+0x26c>)
    6c24:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6c28:	430a      	orrs	r2, r1
    6c2a:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    6c2c:	f00e fb02 	bl	15234 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    6c30:	9b01      	ldr	r3, [sp, #4]
    6c32:	685a      	ldr	r2, [r3, #4]
    6c34:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c38:	005b      	lsls	r3, r3, #1
    6c3a:	4413      	add	r3, r2
    6c3c:	881b      	ldrh	r3, [r3, #0]
    6c3e:	095b      	lsrs	r3, r3, #5
    6c40:	b29b      	uxth	r3, r3
    6c42:	461a      	mov	r2, r3
    6c44:	4b10      	ldr	r3, [pc, #64]	; (6c88 <Port_Ipw_Init_UnusedPins+0x270>)
    6c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6c4a:	9a01      	ldr	r2, [sp, #4]
    6c4c:	6851      	ldr	r1, [r2, #4]
    6c4e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6c52:	0052      	lsls	r2, r2, #1
    6c54:	440a      	add	r2, r1
    6c56:	8812      	ldrh	r2, [r2, #0]
    6c58:	f002 021f 	and.w	r2, r2, #31
    6c5c:	9903      	ldr	r1, [sp, #12]
    6c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6c62:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c66:	3301      	adds	r3, #1
    6c68:	f8ad 3016 	strh.w	r3, [sp, #22]
    6c6c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6c70:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6c74:	429a      	cmp	r2, r3
    6c76:	f4ff aee7 	bcc.w	6a48 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    6c7a:	bf00      	nop
    6c7c:	bf00      	nop
    6c7e:	b007      	add	sp, #28
    6c80:	f85d fb04 	ldr.w	pc, [sp], #4
    6c84:	000184b4 	.word	0x000184b4
    6c88:	000184a0 	.word	0x000184a0

00006c8c <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    6c8c:	b500      	push	{lr}
    6c8e:	b085      	sub	sp, #20
    6c90:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    6c92:	9b01      	ldr	r3, [sp, #4]
    6c94:	7c1b      	ldrb	r3, [r3, #16]
    6c96:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6c9a:	2300      	movs	r3, #0
    6c9c:	f8ad 300e 	strh.w	r3, [sp, #14]
    6ca0:	e035      	b.n	6d0e <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    6ca2:	9b01      	ldr	r3, [sp, #4]
    6ca4:	695a      	ldr	r2, [r3, #20]
    6ca6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6caa:	00db      	lsls	r3, r3, #3
    6cac:	4413      	add	r3, r2
    6cae:	781b      	ldrb	r3, [r3, #0]
    6cb0:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    6cb4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6cb8:	4a29      	ldr	r2, [pc, #164]	; (6d60 <Port_Ipw_Init+0xd4>)
    6cba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    6cbe:	9b01      	ldr	r3, [sp, #4]
    6cc0:	695a      	ldr	r2, [r3, #20]
    6cc2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6cc6:	00db      	lsls	r3, r3, #3
    6cc8:	4413      	add	r3, r2
    6cca:	4619      	mov	r1, r3
    6ccc:	f7ff fe39 	bl	6942 <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    6cd0:	f00e fc1e 	bl	15510 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    6cd4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6cd8:	4a21      	ldr	r2, [pc, #132]	; (6d60 <Port_Ipw_Init+0xd4>)
    6cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cde:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    6ce2:	9b01      	ldr	r3, [sp, #4]
    6ce4:	695a      	ldr	r2, [r3, #20]
    6ce6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6cea:	00db      	lsls	r3, r3, #3
    6cec:	4413      	add	r3, r2
    6cee:	685a      	ldr	r2, [r3, #4]
    6cf0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6cf4:	481a      	ldr	r0, [pc, #104]	; (6d60 <Port_Ipw_Init+0xd4>)
    6cf6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6cfa:	430a      	orrs	r2, r1
    6cfc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    6d00:	f00e fc32 	bl	15568 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6d04:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6d08:	3301      	adds	r3, #1
    6d0a:	f8ad 300e 	strh.w	r3, [sp, #14]
    6d0e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6d12:	b29b      	uxth	r3, r3
    6d14:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6d18:	429a      	cmp	r2, r3
    6d1a:	d3c2      	bcc.n	6ca2 <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    6d1c:	9b01      	ldr	r3, [sp, #4]
    6d1e:	6a1b      	ldr	r3, [r3, #32]
    6d20:	4619      	mov	r1, r3
    6d22:	2014      	movs	r0, #20
    6d24:	f7ff fd98 	bl	6858 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    6d28:	9801      	ldr	r0, [sp, #4]
    6d2a:	f7ff fe75 	bl	6a18 <Port_Ipw_Init_UnusedPins>
     (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
    )
    /* Port_Ipw_au16GpioDirChangeability is only used by Port_Ci_Port_Ip_SetPinDirection, Port_Ci_Port_Ip_Set2PinsDirection
       and Port_Ci_Port_Ip_SetPinMode functions */
    /* Initialize the Array with Change Direction Flags for GPIO */
    for (u16PinIndex = (uint16)0U; u16PinIndex < PAD_16BLOCK_NO_U8; u16PinIndex++)
    6d2e:	2300      	movs	r3, #0
    6d30:	f8ad 300e 	strh.w	r3, [sp, #14]
    6d34:	e00a      	b.n	6d4c <Port_Ipw_Init+0xc0>
    {
        Port_Ipw_au16GpioDirChangeability[u16PinIndex] = (uint16)0UL;
    6d36:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6d3a:	4a0a      	ldr	r2, [pc, #40]	; (6d64 <Port_Ipw_Init+0xd8>)
    6d3c:	2100      	movs	r1, #0
    6d3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (u16PinIndex = (uint16)0U; u16PinIndex < PAD_16BLOCK_NO_U8; u16PinIndex++)
    6d42:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6d46:	3301      	adds	r3, #1
    6d48:	f8ad 300e 	strh.w	r3, [sp, #14]
    6d4c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6d50:	2b09      	cmp	r3, #9
    6d52:	d9f0      	bls.n	6d36 <Port_Ipw_Init+0xaa>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    6d54:	bf00      	nop
    6d56:	bf00      	nop
    6d58:	b005      	add	sp, #20
    6d5a:	f85d fb04 	ldr.w	pc, [sp], #4
    6d5e:	bf00      	nop
    6d60:	000184a0 	.word	0x000184a0
    6d64:	1fff8cec 	.word	0x1fff8cec

00006d68 <Port_Ipw_SetPinDirection>:
(
    Port_PinType            PinIndex,
    Port_PinDirectionType   eDirection,
    const Port_ConfigType * pConfigPtr
)
{
    6d68:	b500      	push	{lr}
    6d6a:	b087      	sub	sp, #28
    6d6c:	9003      	str	r0, [sp, #12]
    6d6e:	9102      	str	r1, [sp, #8]
    6d70:	9201      	str	r2, [sp, #4]
    /* Point to the Port Pin PCR register address */
    uint16 Pin = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    6d72:	9b01      	ldr	r3, [sp, #4]
    6d74:	68d9      	ldr	r1, [r3, #12]
    6d76:	9a03      	ldr	r2, [sp, #12]
    6d78:	4613      	mov	r3, r2
    6d7a:	009b      	lsls	r3, r3, #2
    6d7c:	4413      	add	r3, r2
    6d7e:	009b      	lsls	r3, r3, #2
    6d80:	440b      	add	r3, r1
    6d82:	881b      	ldrh	r3, [r3, #0]
    6d84:	f8ad 3014 	strh.w	r3, [sp, #20]
    /* Return value */
    Std_ReturnType PinDirError             = (Std_ReturnType)E_OK;
    6d88:	2300      	movs	r3, #0
    6d8a:	f88d 3017 	strb.w	r3, [sp, #23]

#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;
    CoreId = (uint8)Port_GetCoreID();
    6d8e:	2300      	movs	r3, #0
    6d90:	f88d 3013 	strb.w	r3, [sp, #19]

    if ((PinIndex >= (Port_PinType)pConfigPtr->u16NumPins))
    6d94:	9b01      	ldr	r3, [sp, #4]
    6d96:	881b      	ldrh	r3, [r3, #0]
    6d98:	461a      	mov	r2, r3
    6d9a:	9b03      	ldr	r3, [sp, #12]
    6d9c:	4293      	cmp	r3, r2
    6d9e:	d306      	bcc.n	6dae <Port_Ipw_SetPinDirection+0x46>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_PARAM_PIN);
    6da0:	230a      	movs	r3, #10
    6da2:	2201      	movs	r2, #1
    6da4:	2100      	movs	r1, #0
    6da6:	207c      	movs	r0, #124	; 0x7c
    6da8:	f00f ff36 	bl	16c18 <Det_ReportError>
    6dac:	e0c9      	b.n	6f42 <Port_Ipw_SetPinDirection+0x1da>
    }
    /* Check port pin validity */
    else if ((uint32)1 != (((pConfigPtr->pau32Port_PinToPartitionMap[PinIndex]) & ((uint32)1 << CoreId)) >> CoreId))
    6dae:	9b01      	ldr	r3, [sp, #4]
    6db0:	699a      	ldr	r2, [r3, #24]
    6db2:	9b03      	ldr	r3, [sp, #12]
    6db4:	009b      	lsls	r3, r3, #2
    6db6:	4413      	add	r3, r2
    6db8:	681a      	ldr	r2, [r3, #0]
    6dba:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6dbe:	2101      	movs	r1, #1
    6dc0:	fa01 f303 	lsl.w	r3, r1, r3
    6dc4:	401a      	ands	r2, r3
    6dc6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6dca:	fa22 f303 	lsr.w	r3, r2, r3
    6dce:	2b01      	cmp	r3, #1
    6dd0:	d006      	beq.n	6de0 <Port_Ipw_SetPinDirection+0x78>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    6dd2:	23f0      	movs	r3, #240	; 0xf0
    6dd4:	2201      	movs	r2, #1
    6dd6:	2100      	movs	r1, #0
    6dd8:	207c      	movs	r0, #124	; 0x7c
    6dda:	f00f ff1d 	bl	16c18 <Det_ReportError>
    6dde:	e0b0      	b.n	6f42 <Port_Ipw_SetPinDirection+0x1da>
    }
    else
    {
        /* Bit Offset and Table value for change direction flag word */
        uint8 u8PinDescBitOffset       = (uint8)(Pin & PORT_CI_BIT_OFFSET_MASK_U8);
    6de0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6de4:	b2db      	uxtb	r3, r3
    6de6:	f003 030f 	and.w	r3, r3, #15
    6dea:	f88d 3012 	strb.w	r3, [sp, #18]
        /* Number of block 16 */
        uint16 u16PinChangeDirFlagWord  = Port_Ipw_au16GpioDirChangeability[(uint8)(Pin >> 4)];
    6dee:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6df2:	091b      	lsrs	r3, r3, #4
    6df4:	b29b      	uxth	r3, r3
    6df6:	b2db      	uxtb	r3, r3
    6df8:	461a      	mov	r2, r3
    6dfa:	4b55      	ldr	r3, [pc, #340]	; (6f50 <Port_Ipw_SetPinDirection+0x1e8>)
    6dfc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    6e00:	f8ad 3010 	strh.w	r3, [sp, #16]

        /* Check the Direction changeability option */
        if ((TRUE == pConfigPtr->pUsedPadConfig[PinIndex].bDC) || ((uint16)0 != (u16PinChangeDirFlagWord & (uint16)(1UL << u8PinDescBitOffset))))
    6e04:	9b01      	ldr	r3, [sp, #4]
    6e06:	68d9      	ldr	r1, [r3, #12]
    6e08:	9a03      	ldr	r2, [sp, #12]
    6e0a:	4613      	mov	r3, r2
    6e0c:	009b      	lsls	r3, r3, #2
    6e0e:	4413      	add	r3, r2
    6e10:	009b      	lsls	r3, r3, #2
    6e12:	440b      	add	r3, r1
    6e14:	7c5b      	ldrb	r3, [r3, #17]
    6e16:	2b00      	cmp	r3, #0
    6e18:	d10c      	bne.n	6e34 <Port_Ipw_SetPinDirection+0xcc>
    6e1a:	f89d 3012 	ldrb.w	r3, [sp, #18]
    6e1e:	2201      	movs	r2, #1
    6e20:	fa02 f303 	lsl.w	r3, r2, r3
    6e24:	b29a      	uxth	r2, r3
    6e26:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    6e2a:	4013      	ands	r3, r2
    6e2c:	b29b      	uxth	r3, r3
    6e2e:	2b00      	cmp	r3, #0
    6e30:	f000 8082 	beq.w	6f38 <Port_Ipw_SetPinDirection+0x1d0>
        {
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
            /* Configures Port Pin as Output */
            if (PORT_PIN_OUT == eDirection)
    6e34:	9b02      	ldr	r3, [sp, #8]
    6e36:	2b02      	cmp	r3, #2
    6e38:	d11d      	bne.n	6e76 <Port_Ipw_SetPinDirection+0x10e>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16();
    6e3a:	f00e fbbb 	bl	155b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PDDR |= (uint32)(1UL << GPIO_CHANNEL_U32(Pin));
    6e3e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6e42:	095b      	lsrs	r3, r3, #5
    6e44:	b29b      	uxth	r3, r3
    6e46:	461a      	mov	r2, r3
    6e48:	4b42      	ldr	r3, [pc, #264]	; (6f54 <Port_Ipw_SetPinDirection+0x1ec>)
    6e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6e4e:	6959      	ldr	r1, [r3, #20]
    6e50:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6e54:	f003 031f 	and.w	r3, r3, #31
    6e58:	2201      	movs	r2, #1
    6e5a:	409a      	lsls	r2, r3
    6e5c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6e60:	095b      	lsrs	r3, r3, #5
    6e62:	b29b      	uxth	r3, r3
    6e64:	4618      	mov	r0, r3
    6e66:	4b3b      	ldr	r3, [pc, #236]	; (6f54 <Port_Ipw_SetPinDirection+0x1ec>)
    6e68:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6e6c:	430a      	orrs	r2, r1
    6e6e:	615a      	str	r2, [r3, #20]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16();
    6e70:	f00e fbcc 	bl	1560c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>
            if (PORT_PIN_OUT == eDirection)
    6e74:	e064      	b.n	6f40 <Port_Ipw_SetPinDirection+0x1d8>
            }
            /* Configures Port Pin as Input or High-Z*/
            else if ((PORT_PIN_IN == eDirection) || (PORT_PIN_HIGH_Z == eDirection))
    6e76:	9b02      	ldr	r3, [sp, #8]
    6e78:	2b01      	cmp	r3, #1
    6e7a:	d002      	beq.n	6e82 <Port_Ipw_SetPinDirection+0x11a>
    6e7c:	9b02      	ldr	r3, [sp, #8]
    6e7e:	2b03      	cmp	r3, #3
    6e80:	d15e      	bne.n	6f40 <Port_Ipw_SetPinDirection+0x1d8>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16();
    6e82:	f00e fb97 	bl	155b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PDDR &= ~((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    6e86:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6e8a:	095b      	lsrs	r3, r3, #5
    6e8c:	b29b      	uxth	r3, r3
    6e8e:	461a      	mov	r2, r3
    6e90:	4b30      	ldr	r3, [pc, #192]	; (6f54 <Port_Ipw_SetPinDirection+0x1ec>)
    6e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6e96:	6959      	ldr	r1, [r3, #20]
    6e98:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6e9c:	f003 031f 	and.w	r3, r3, #31
    6ea0:	2201      	movs	r2, #1
    6ea2:	fa02 f303 	lsl.w	r3, r2, r3
    6ea6:	43da      	mvns	r2, r3
    6ea8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6eac:	095b      	lsrs	r3, r3, #5
    6eae:	b29b      	uxth	r3, r3
    6eb0:	4618      	mov	r0, r3
    6eb2:	4b28      	ldr	r3, [pc, #160]	; (6f54 <Port_Ipw_SetPinDirection+0x1ec>)
    6eb4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6eb8:	400a      	ands	r2, r1
    6eba:	615a      	str	r2, [r3, #20]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16();
    6ebc:	f00e fba6 	bl	1560c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17();
    6ec0:	f00e fbca 	bl	15658 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PIDR &= ~((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    6ec4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6ec8:	095b      	lsrs	r3, r3, #5
    6eca:	b29b      	uxth	r3, r3
    6ecc:	461a      	mov	r2, r3
    6ece:	4b21      	ldr	r3, [pc, #132]	; (6f54 <Port_Ipw_SetPinDirection+0x1ec>)
    6ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6ed4:	6999      	ldr	r1, [r3, #24]
    6ed6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6eda:	f003 031f 	and.w	r3, r3, #31
    6ede:	2201      	movs	r2, #1
    6ee0:	fa02 f303 	lsl.w	r3, r2, r3
    6ee4:	43da      	mvns	r2, r3
    6ee6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6eea:	095b      	lsrs	r3, r3, #5
    6eec:	b29b      	uxth	r3, r3
    6eee:	4618      	mov	r0, r3
    6ef0:	4b18      	ldr	r3, [pc, #96]	; (6f54 <Port_Ipw_SetPinDirection+0x1ec>)
    6ef2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6ef6:	400a      	ands	r2, r1
    6ef8:	619a      	str	r2, [r3, #24]

                /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                if (PORT_PIN_HIGH_Z == eDirection)
    6efa:	9b02      	ldr	r3, [sp, #8]
    6efc:	2b03      	cmp	r3, #3
    6efe:	d118      	bne.n	6f32 <Port_Ipw_SetPinDirection+0x1ca>
                {
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PIDR |= ((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    6f00:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f04:	095b      	lsrs	r3, r3, #5
    6f06:	b29b      	uxth	r3, r3
    6f08:	461a      	mov	r2, r3
    6f0a:	4b12      	ldr	r3, [pc, #72]	; (6f54 <Port_Ipw_SetPinDirection+0x1ec>)
    6f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6f10:	6999      	ldr	r1, [r3, #24]
    6f12:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f16:	f003 031f 	and.w	r3, r3, #31
    6f1a:	2201      	movs	r2, #1
    6f1c:	409a      	lsls	r2, r3
    6f1e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6f22:	095b      	lsrs	r3, r3, #5
    6f24:	b29b      	uxth	r3, r3
    6f26:	4618      	mov	r0, r3
    6f28:	4b0a      	ldr	r3, [pc, #40]	; (6f54 <Port_Ipw_SetPinDirection+0x1ec>)
    6f2a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6f2e:	430a      	orrs	r2, r1
    6f30:	619a      	str	r2, [r3, #24]
                }
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17();
    6f32:	f00e fbbd 	bl	156b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>
            if (PORT_PIN_OUT == eDirection)
    6f36:	e003      	b.n	6f40 <Port_Ipw_SetPinDirection+0x1d8>
#if (STD_ON == PORT_DEV_ERROR_DETECT)
        }
        /* Direction changeability is NOT supported */
        else
        {
            PinDirError = (Std_ReturnType)E_NOT_OK;
    6f38:	2301      	movs	r3, #1
    6f3a:	f88d 3017 	strb.w	r3, [sp, #23]
    6f3e:	e000      	b.n	6f42 <Port_Ipw_SetPinDirection+0x1da>
            if (PORT_PIN_OUT == eDirection)
    6f40:	bf00      	nop
        }
    }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

    return PinDirError;
    6f42:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6f46:	4618      	mov	r0, r3
    6f48:	b007      	add	sp, #28
    6f4a:	f85d fb04 	ldr.w	pc, [sp], #4
    6f4e:	bf00      	nop
    6f50:	1fff8cec 	.word	0x1fff8cec
    6f54:	000184b4 	.word	0x000184b4

00006f58 <Port_Ipw_SetPinMode>:
(
    Port_PinType PinIndex,
    Port_PinModeType PinMode,
    const Port_ConfigType * pConfigPtr
)
{
    6f58:	b500      	push	{lr}
    6f5a:	b08b      	sub	sp, #44	; 0x2c
    6f5c:	9003      	str	r0, [sp, #12]
    6f5e:	460b      	mov	r3, r1
    6f60:	9201      	str	r2, [sp, #4]
    6f62:	f88d 300b 	strb.w	r3, [sp, #11]
    Std_ReturnType PinModeError             = (Std_ReturnType)0UL;
    6f66:	2300      	movs	r3, #0
    6f68:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint16 PinPad                           = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    6f6c:	9b01      	ldr	r3, [sp, #4]
    6f6e:	68d9      	ldr	r1, [r3, #12]
    6f70:	9a03      	ldr	r2, [sp, #12]
    6f72:	4613      	mov	r3, r2
    6f74:	009b      	lsls	r3, r3, #2
    6f76:	4413      	add	r3, r2
    6f78:	009b      	lsls	r3, r3, #2
    6f7a:	440b      	add	r3, r1
    6f7c:	881b      	ldrh	r3, [r3, #0]
    6f7e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    Port_PinModeType PinCfgRegValue         = (Port_PinModeType)PinMode;
    6f82:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6f86:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint16 u16PinDescBitOffset;
    /* Variable used to clear and updated PCR register */
    uint32 u32LocalPCR;
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;
    CoreId = (uint8)Port_GetCoreID();
    6f8a:	2300      	movs	r3, #0
    6f8c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22

    if ((PinIndex >= (Port_PinType)pConfigPtr->u16NumPins))
    6f90:	9b01      	ldr	r3, [sp, #4]
    6f92:	881b      	ldrh	r3, [r3, #0]
    6f94:	461a      	mov	r2, r3
    6f96:	9b03      	ldr	r3, [sp, #12]
    6f98:	4293      	cmp	r3, r2
    6f9a:	d306      	bcc.n	6faa <Port_Ipw_SetPinMode+0x52>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_PIN);
    6f9c:	230a      	movs	r3, #10
    6f9e:	2204      	movs	r2, #4
    6fa0:	2100      	movs	r1, #0
    6fa2:	207c      	movs	r0, #124	; 0x7c
    6fa4:	f00f fe38 	bl	16c18 <Det_ReportError>
    6fa8:	e0b3      	b.n	7112 <Port_Ipw_SetPinMode+0x1ba>
    }
    /* Check if this function was called with wrong core */
    else if ((uint32)1 != (((pConfigPtr->pau32Port_PinToPartitionMap[PinIndex]) & ((uint32)1 << CoreId)) >> CoreId))
    6faa:	9b01      	ldr	r3, [sp, #4]
    6fac:	699a      	ldr	r2, [r3, #24]
    6fae:	9b03      	ldr	r3, [sp, #12]
    6fb0:	009b      	lsls	r3, r3, #2
    6fb2:	4413      	add	r3, r2
    6fb4:	681a      	ldr	r2, [r3, #0]
    6fb6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    6fba:	2101      	movs	r1, #1
    6fbc:	fa01 f303 	lsl.w	r3, r1, r3
    6fc0:	401a      	ands	r2, r3
    6fc2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    6fc6:	fa22 f303 	lsr.w	r3, r2, r3
    6fca:	2b01      	cmp	r3, #1
    6fcc:	d006      	beq.n	6fdc <Port_Ipw_SetPinMode+0x84>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_CONFIG);
    6fce:	23f0      	movs	r3, #240	; 0xf0
    6fd0:	2204      	movs	r2, #4
    6fd2:	2100      	movs	r1, #0
    6fd4:	207c      	movs	r0, #124	; 0x7c
    6fd6:	f00f fe1f 	bl	16c18 <Det_ReportError>
    6fda:	e09a      	b.n	7112 <Port_Ipw_SetPinMode+0x1ba>
    }
    /* Check port pin mode Unchangeable */
    else if (FALSE ==  pConfigPtr->pUsedPadConfig[PinIndex].bMC)
    6fdc:	9b01      	ldr	r3, [sp, #4]
    6fde:	68d9      	ldr	r1, [r3, #12]
    6fe0:	9a03      	ldr	r2, [sp, #12]
    6fe2:	4613      	mov	r3, r2
    6fe4:	009b      	lsls	r3, r3, #2
    6fe6:	4413      	add	r3, r2
    6fe8:	009b      	lsls	r3, r3, #2
    6fea:	440b      	add	r3, r1
    6fec:	7c9b      	ldrb	r3, [r3, #18]
    6fee:	f083 0301 	eor.w	r3, r3, #1
    6ff2:	b2db      	uxtb	r3, r3
    6ff4:	2b00      	cmp	r3, #0
    6ff6:	d006      	beq.n	7006 <Port_Ipw_SetPinMode+0xae>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_MODE_UNCHANGEABLE);
    6ff8:	230e      	movs	r3, #14
    6ffa:	2204      	movs	r2, #4
    6ffc:	2100      	movs	r1, #0
    6ffe:	207c      	movs	r0, #124	; 0x7c
    7000:	f00f fe0a 	bl	16c18 <Det_ReportError>
    7004:	e085      	b.n	7112 <Port_Ipw_SetPinMode+0x1ba>
    }
    else
    {
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

        if (PAD_MODE_OPTIONS_U8 <= PinMode)
    7006:	f89d 300b 	ldrb.w	r3, [sp, #11]
    700a:	2b07      	cmp	r3, #7
    700c:	d903      	bls.n	7016 <Port_Ipw_SetPinMode+0xbe>
        {
            PinModeError = PORT_E_PARAM_INVALID_MODE;
    700e:	230d      	movs	r3, #13
    7010:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    7014:	e07d      	b.n	7112 <Port_Ipw_SetPinMode+0x1ba>
        }
        else
        {
            Port_PinDirectionType ePadDirection = PORT_PIN_DISABLED;
    7016:	2300      	movs	r3, #0
    7018:	9307      	str	r3, [sp, #28]

            /* Bit offset of Pin index inside the pin description matrix */
            u16PinDescBitOffset = PinPad & PORT_MODE_BIT_OFFSET_MASK_U8;
    701a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    701e:	f003 030f 	and.w	r3, r3, #15
    7022:	f8ad 301a 	strh.w	r3, [sp, #26]
            /* Selected word inside the pin description matrix */
            u16PinDescWord = (uint16)Port_au16PinDescription[(uint8)PinMode][PinPad >> 4U];
    7026:	f89d 200b 	ldrb.w	r2, [sp, #11]
    702a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    702e:	091b      	lsrs	r3, r3, #4
    7030:	b29b      	uxth	r3, r3
    7032:	4618      	mov	r0, r3
    7034:	493a      	ldr	r1, [pc, #232]	; (7120 <Port_Ipw_SetPinMode+0x1c8>)
    7036:	4613      	mov	r3, r2
    7038:	009b      	lsls	r3, r3, #2
    703a:	4413      	add	r3, r2
    703c:	005b      	lsls	r3, r3, #1
    703e:	4403      	add	r3, r0
    7040:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    7044:	f8ad 3018 	strh.w	r3, [sp, #24]

            /* Check if desired mode is valid for selected pin */
            if ((u16PinDescWord & ((uint16)1UL<<u16PinDescBitOffset)) != (uint16)0U)
    7048:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    704c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    7050:	fa42 f303 	asr.w	r3, r2, r3
    7054:	f003 0301 	and.w	r3, r3, #1
    7058:	2b00      	cmp	r3, #0
    705a:	d057      	beq.n	710c <Port_Ipw_SetPinMode+0x1b4>
            {
                switch(PinMode)
    705c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7060:	2b01      	cmp	r3, #1
    7062:	d11f      	bne.n	70a4 <Port_Ipw_SetPinMode+0x14c>
                {
                    case PORT_GPIO_MODE:
#if (STD_ON == PORT_DEV_ERROR_DETECT)
                        Port_Ipw_SetGpioDirChangeability(PinPad, TRUE);
    7064:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7068:	2101      	movs	r1, #1
    706a:	4618      	mov	r0, r3
    706c:	f000 f85c 	bl	7128 <Port_Ipw_SetGpioDirChangeability>
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
                        ePadDirection = pConfigPtr->pUsedPadConfig[PinIndex].ePadDir;
    7070:	9b01      	ldr	r3, [sp, #4]
    7072:	68d9      	ldr	r1, [r3, #12]
    7074:	9a03      	ldr	r2, [sp, #12]
    7076:	4613      	mov	r3, r2
    7078:	009b      	lsls	r3, r3, #2
    707a:	4413      	add	r3, r2
    707c:	009b      	lsls	r3, r3, #2
    707e:	440b      	add	r3, r1
    7080:	68db      	ldr	r3, [r3, #12]
    7082:	9307      	str	r3, [sp, #28]
#if (STD_OFF == PORT_SETPINMODE_DOES_NOT_TOUCH_GPIO_LEVEL)
                        if ((PORT_PIN_IN != ePadDirection) && (PORT_PIN_HIGH_Z != ePadDirection))
    7084:	9b07      	ldr	r3, [sp, #28]
    7086:	2b01      	cmp	r3, #1
    7088:	d006      	beq.n	7098 <Port_Ipw_SetPinMode+0x140>
    708a:	9b07      	ldr	r3, [sp, #28]
    708c:	2b03      	cmp	r3, #3
    708e:	d003      	beq.n	7098 <Port_Ipw_SetPinMode+0x140>
                        {
                            Port_Ipw_SetGpioPadOutput(PinIndex, pConfigPtr);
    7090:	9901      	ldr	r1, [sp, #4]
    7092:	9803      	ldr	r0, [sp, #12]
    7094:	f000 f896 	bl	71c4 <Port_Ipw_SetGpioPadOutput>
                        }
#endif /* (STD_OFF == PORT_SETPINMODE_DOES_NOT_TOUCH_GPIO_LEVEL) */
                        (void)Port_Ipw_SetPinDirection(PinIndex, ePadDirection, pConfigPtr);
    7098:	9a01      	ldr	r2, [sp, #4]
    709a:	9907      	ldr	r1, [sp, #28]
    709c:	9803      	ldr	r0, [sp, #12]
    709e:	f7ff fe63 	bl	6d68 <Port_Ipw_SetPinDirection>
                        break;
    70a2:	e006      	b.n	70b2 <Port_Ipw_SetPinMode+0x15a>

                    default:
#if (STD_ON == PORT_DEV_ERROR_DETECT)
                    /* All the ALT modes except GPIO*/
                        Port_Ipw_SetGpioDirChangeability(PinPad,FALSE);
    70a4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    70a8:	2100      	movs	r1, #0
    70aa:	4618      	mov	r0, r3
    70ac:	f000 f83c 	bl	7128 <Port_Ipw_SetGpioDirChangeability>
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
                        break;
    70b0:	bf00      	nop
                }
                /* Sets the port pin mode */
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27();
    70b2:	f00e fe05 	bl	15cc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>
                u32LocalPCR  = (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(PinPad)])->PCR[GPIO_CHANNEL_U32(PinPad)];
    70b6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    70ba:	095b      	lsrs	r3, r3, #5
    70bc:	b29b      	uxth	r3, r3
    70be:	461a      	mov	r2, r3
    70c0:	4b18      	ldr	r3, [pc, #96]	; (7124 <Port_Ipw_SetPinMode+0x1cc>)
    70c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    70c6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    70ca:	f002 021f 	and.w	r2, r2, #31
    70ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    70d2:	9305      	str	r3, [sp, #20]

                u32LocalPCR &= ~(PORT_CI_PCR_ALT_MODE_U32);
    70d4:	9b05      	ldr	r3, [sp, #20]
    70d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    70da:	9305      	str	r3, [sp, #20]
                u32LocalPCR |= ((uint32)PinCfgRegValue << PORT_CI_PCR_ALT_MODE_OFFSET_U32);
    70dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    70e0:	021b      	lsls	r3, r3, #8
    70e2:	9a05      	ldr	r2, [sp, #20]
    70e4:	4313      	orrs	r3, r2
    70e6:	9305      	str	r3, [sp, #20]

                (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(PinPad)])->PCR[GPIO_CHANNEL_U32(PinPad)] = u32LocalPCR;
    70e8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    70ec:	095b      	lsrs	r3, r3, #5
    70ee:	b29b      	uxth	r3, r3
    70f0:	461a      	mov	r2, r3
    70f2:	4b0c      	ldr	r3, [pc, #48]	; (7124 <Port_Ipw_SetPinMode+0x1cc>)
    70f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    70f8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    70fc:	f002 021f 	and.w	r2, r2, #31
    7100:	9905      	ldr	r1, [sp, #20]
    7102:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27();
    7106:	f00e fe07 	bl	15d18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>
    710a:	e002      	b.n	7112 <Port_Ipw_SetPinMode+0x1ba>
            }
            else
            {
                PinModeError = PORT_E_PARAM_INVALID_MODE;
    710c:	230d      	movs	r3, #13
    710e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

    return PinModeError;
    7112:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    7116:	4618      	mov	r0, r3
    7118:	b00b      	add	sp, #44	; 0x2c
    711a:	f85d fb04 	ldr.w	pc, [sp], #4
    711e:	bf00      	nop
    7120:	00019140 	.word	0x00019140
    7124:	000184a0 	.word	0x000184a0

00007128 <Port_Ipw_SetGpioDirChangeability>:
void Port_Ipw_SetGpioDirChangeability
(
    uint16 PadID,
    boolean bStatus
)
{
    7128:	b500      	push	{lr}
    712a:	b085      	sub	sp, #20
    712c:	4603      	mov	r3, r0
    712e:	460a      	mov	r2, r1
    7130:	f8ad 3006 	strh.w	r3, [sp, #6]
    7134:	4613      	mov	r3, r2
    7136:	f88d 3005 	strb.w	r3, [sp, #5]
    /* Pin description variables */
    uint8 u8PinBitOffset;
    uint16 u16PinDirFlagWord;

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18();
    713a:	f00e fadf 	bl	156fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>
    /* Bit offset of Pin index inside the pin description matrix */
    u8PinBitOffset      = (uint8)((uint8)PadID & PORT_CI_BIT_OFFSET_MASK_U8);
    713e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7142:	b2db      	uxtb	r3, r3
    7144:	f003 030f 	and.w	r3, r3, #15
    7148:	f88d 300d 	strb.w	r3, [sp, #13]
    u16PinDirFlagWord   = Port_Ipw_au16GpioDirChangeability[(uint8)((uint8)PadID >> 4)];
    714c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7150:	b2db      	uxtb	r3, r3
    7152:	091b      	lsrs	r3, r3, #4
    7154:	b2db      	uxtb	r3, r3
    7156:	461a      	mov	r2, r3
    7158:	4b19      	ldr	r3, [pc, #100]	; (71c0 <Port_Ipw_SetGpioDirChangeability+0x98>)
    715a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    715e:	f8ad 300e 	strh.w	r3, [sp, #14]

    if (TRUE == bStatus)
    7162:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7166:	2b00      	cmp	r3, #0
    7168:	d00b      	beq.n	7182 <Port_Ipw_SetGpioDirChangeability+0x5a>
    {
        /* Set the change direction flag */
        u16PinDirFlagWord |= (uint16)(1UL<<u8PinBitOffset);
    716a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    716e:	2201      	movs	r2, #1
    7170:	fa02 f303 	lsl.w	r3, r2, r3
    7174:	b29a      	uxth	r2, r3
    7176:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    717a:	4313      	orrs	r3, r2
    717c:	f8ad 300e 	strh.w	r3, [sp, #14]
    7180:	e00c      	b.n	719c <Port_Ipw_SetGpioDirChangeability+0x74>
    }
    else
    {
        /* Reset the change direction flag */
        u16PinDirFlagWord &= (uint16)(~((uint16)(1UL<<u8PinBitOffset)));
    7182:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7186:	2201      	movs	r2, #1
    7188:	fa02 f303 	lsl.w	r3, r2, r3
    718c:	b29b      	uxth	r3, r3
    718e:	43db      	mvns	r3, r3
    7190:	b29a      	uxth	r2, r3
    7192:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7196:	4013      	ands	r3, r2
    7198:	f8ad 300e 	strh.w	r3, [sp, #14]
    }
    Port_Ipw_au16GpioDirChangeability[(uint8)((uint8)PadID >> 4)] = u16PinDirFlagWord;
    719c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    71a0:	b2db      	uxtb	r3, r3
    71a2:	091b      	lsrs	r3, r3, #4
    71a4:	b2db      	uxtb	r3, r3
    71a6:	4619      	mov	r1, r3
    71a8:	4a05      	ldr	r2, [pc, #20]	; (71c0 <Port_Ipw_SetGpioDirChangeability+0x98>)
    71aa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    71ae:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    /* Exit critical region */
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18();
    71b2:	f00e facf 	bl	15754 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>
}
    71b6:	bf00      	nop
    71b8:	b005      	add	sp, #20
    71ba:	f85d fb04 	ldr.w	pc, [sp], #4
    71be:	bf00      	nop
    71c0:	1fff8cec 	.word	0x1fff8cec

000071c4 <Port_Ipw_SetGpioPadOutput>:
void Port_Ipw_SetGpioPadOutput
(
    Port_PinType            PinIndex,
    const Port_ConfigType * pConfigPtr
)
{
    71c4:	b084      	sub	sp, #16
    71c6:	9001      	str	r0, [sp, #4]
    71c8:	9100      	str	r1, [sp, #0]
    uint16 Pin = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    71ca:	9b00      	ldr	r3, [sp, #0]
    71cc:	68d9      	ldr	r1, [r3, #12]
    71ce:	9a01      	ldr	r2, [sp, #4]
    71d0:	4613      	mov	r3, r2
    71d2:	009b      	lsls	r3, r3, #2
    71d4:	4413      	add	r3, r2
    71d6:	009b      	lsls	r3, r3, #2
    71d8:	440b      	add	r3, r1
    71da:	881b      	ldrh	r3, [r3, #0]
    71dc:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint8 u8LocalPDO = pConfigPtr->pUsedPadConfig[PinIndex].u8PDO;
    71e0:	9b00      	ldr	r3, [sp, #0]
    71e2:	68d9      	ldr	r1, [r3, #12]
    71e4:	9a01      	ldr	r2, [sp, #4]
    71e6:	4613      	mov	r3, r2
    71e8:	009b      	lsls	r3, r3, #2
    71ea:	4413      	add	r3, r2
    71ec:	009b      	lsls	r3, r3, #2
    71ee:	440b      	add	r3, r1
    71f0:	7a1b      	ldrb	r3, [r3, #8]
    71f2:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Set pin to High value */
    if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    71f6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    71fa:	2b01      	cmp	r3, #1
    71fc:	d110      	bne.n	7220 <Port_Ipw_SetGpioPadOutput+0x5c>
    {
        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(Pin));
    71fe:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7202:	f003 021f 	and.w	r2, r3, #31
    7206:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    720a:	095b      	lsrs	r3, r3, #5
    720c:	b29b      	uxth	r3, r3
    720e:	4619      	mov	r1, r3
    7210:	4b0f      	ldr	r3, [pc, #60]	; (7250 <Port_Ipw_SetGpioPadOutput+0x8c>)
    7212:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    7216:	2101      	movs	r1, #1
    7218:	fa01 f202 	lsl.w	r2, r1, r2
    721c:	605a      	str	r2, [r3, #4]
    }
    else
    {
        /* No action to be done */
    }
}
    721e:	e013      	b.n	7248 <Port_Ipw_SetGpioPadOutput+0x84>
    else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    7220:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7224:	2b00      	cmp	r3, #0
    7226:	d10f      	bne.n	7248 <Port_Ipw_SetGpioPadOutput+0x84>
        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(Pin));
    7228:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    722c:	f003 021f 	and.w	r2, r3, #31
    7230:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7234:	095b      	lsrs	r3, r3, #5
    7236:	b29b      	uxth	r3, r3
    7238:	4619      	mov	r1, r3
    723a:	4b05      	ldr	r3, [pc, #20]	; (7250 <Port_Ipw_SetGpioPadOutput+0x8c>)
    723c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    7240:	2101      	movs	r1, #1
    7242:	fa01 f202 	lsl.w	r2, r1, r2
    7246:	609a      	str	r2, [r3, #8]
}
    7248:	bf00      	nop
    724a:	b004      	add	sp, #16
    724c:	4770      	bx	lr
    724e:	bf00      	nop
    7250:	000184b4 	.word	0x000184b4

00007254 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    7254:	b500      	push	{lr}
    7256:	b085      	sub	sp, #20
    7258:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    725a:	9b01      	ldr	r3, [sp, #4]
    725c:	881b      	ldrh	r3, [r3, #0]
    725e:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    7262:	2300      	movs	r3, #0
    7264:	f8ad 300e 	strh.w	r3, [sp, #14]
    7268:	e0d2      	b.n	7410 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    726a:	9b01      	ldr	r3, [sp, #4]
    726c:	68d9      	ldr	r1, [r3, #12]
    726e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7272:	4613      	mov	r3, r2
    7274:	009b      	lsls	r3, r3, #2
    7276:	4413      	add	r3, r2
    7278:	009b      	lsls	r3, r3, #2
    727a:	440b      	add	r3, r1
    727c:	7c5b      	ldrb	r3, [r3, #17]
    727e:	f083 0301 	eor.w	r3, r3, #1
    7282:	b2db      	uxtb	r3, r3
    7284:	2b00      	cmp	r3, #0
    7286:	f000 80be 	beq.w	7406 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    728a:	9b01      	ldr	r3, [sp, #4]
    728c:	68d9      	ldr	r1, [r3, #12]
    728e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7292:	4613      	mov	r3, r2
    7294:	009b      	lsls	r3, r3, #2
    7296:	4413      	add	r3, r2
    7298:	009b      	lsls	r3, r3, #2
    729a:	440b      	add	r3, r1
    729c:	7c1b      	ldrb	r3, [r3, #16]
    729e:	2b00      	cmp	r3, #0
    72a0:	f000 80b1 	beq.w	7406 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    72a4:	9b01      	ldr	r3, [sp, #4]
    72a6:	68d9      	ldr	r1, [r3, #12]
    72a8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    72ac:	4613      	mov	r3, r2
    72ae:	009b      	lsls	r3, r3, #2
    72b0:	4413      	add	r3, r2
    72b2:	009b      	lsls	r3, r3, #2
    72b4:	440b      	add	r3, r1
    72b6:	881b      	ldrh	r3, [r3, #0]
    72b8:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    72bc:	9b01      	ldr	r3, [sp, #4]
    72be:	68d9      	ldr	r1, [r3, #12]
    72c0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    72c4:	4613      	mov	r3, r2
    72c6:	009b      	lsls	r3, r3, #2
    72c8:	4413      	add	r3, r2
    72ca:	009b      	lsls	r3, r3, #2
    72cc:	440b      	add	r3, r1
    72ce:	68db      	ldr	r3, [r3, #12]
    72d0:	2b02      	cmp	r3, #2
    72d2:	d11d      	bne.n	7310 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    72d4:	f00e fa64 	bl	157a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    72d8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    72dc:	095b      	lsrs	r3, r3, #5
    72de:	b29b      	uxth	r3, r3
    72e0:	461a      	mov	r2, r3
    72e2:	4b51      	ldr	r3, [pc, #324]	; (7428 <Port_Ipw_RefreshPortDirection+0x1d4>)
    72e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    72e8:	6959      	ldr	r1, [r3, #20]
    72ea:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    72ee:	f003 031f 	and.w	r3, r3, #31
    72f2:	2201      	movs	r2, #1
    72f4:	409a      	lsls	r2, r3
    72f6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    72fa:	095b      	lsrs	r3, r3, #5
    72fc:	b29b      	uxth	r3, r3
    72fe:	4618      	mov	r0, r3
    7300:	4b49      	ldr	r3, [pc, #292]	; (7428 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7302:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7306:	430a      	orrs	r2, r1
    7308:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    730a:	f00e fa75 	bl	157f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    730e:	e07a      	b.n	7406 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    7310:	9b01      	ldr	r3, [sp, #4]
    7312:	68d9      	ldr	r1, [r3, #12]
    7314:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7318:	4613      	mov	r3, r2
    731a:	009b      	lsls	r3, r3, #2
    731c:	4413      	add	r3, r2
    731e:	009b      	lsls	r3, r3, #2
    7320:	440b      	add	r3, r1
    7322:	68db      	ldr	r3, [r3, #12]
    7324:	2b01      	cmp	r3, #1
    7326:	d00b      	beq.n	7340 <Port_Ipw_RefreshPortDirection+0xec>
    7328:	9b01      	ldr	r3, [sp, #4]
    732a:	68d9      	ldr	r1, [r3, #12]
    732c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7330:	4613      	mov	r3, r2
    7332:	009b      	lsls	r3, r3, #2
    7334:	4413      	add	r3, r2
    7336:	009b      	lsls	r3, r3, #2
    7338:	440b      	add	r3, r1
    733a:	68db      	ldr	r3, [r3, #12]
    733c:	2b03      	cmp	r3, #3
    733e:	d162      	bne.n	7406 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    7340:	f00e fa2e 	bl	157a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7344:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7348:	095b      	lsrs	r3, r3, #5
    734a:	b29b      	uxth	r3, r3
    734c:	461a      	mov	r2, r3
    734e:	4b36      	ldr	r3, [pc, #216]	; (7428 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7354:	6959      	ldr	r1, [r3, #20]
    7356:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    735a:	f003 031f 	and.w	r3, r3, #31
    735e:	2201      	movs	r2, #1
    7360:	fa02 f303 	lsl.w	r3, r2, r3
    7364:	43da      	mvns	r2, r3
    7366:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    736a:	095b      	lsrs	r3, r3, #5
    736c:	b29b      	uxth	r3, r3
    736e:	4618      	mov	r0, r3
    7370:	4b2d      	ldr	r3, [pc, #180]	; (7428 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7372:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7376:	400a      	ands	r2, r1
    7378:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    737a:	f00e fa3d 	bl	157f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    737e:	f00e fa61 	bl	15844 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7382:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7386:	095b      	lsrs	r3, r3, #5
    7388:	b29b      	uxth	r3, r3
    738a:	461a      	mov	r2, r3
    738c:	4b26      	ldr	r3, [pc, #152]	; (7428 <Port_Ipw_RefreshPortDirection+0x1d4>)
    738e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7392:	6999      	ldr	r1, [r3, #24]
    7394:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7398:	f003 031f 	and.w	r3, r3, #31
    739c:	2201      	movs	r2, #1
    739e:	fa02 f303 	lsl.w	r3, r2, r3
    73a2:	43da      	mvns	r2, r3
    73a4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73a8:	095b      	lsrs	r3, r3, #5
    73aa:	b29b      	uxth	r3, r3
    73ac:	4618      	mov	r0, r3
    73ae:	4b1e      	ldr	r3, [pc, #120]	; (7428 <Port_Ipw_RefreshPortDirection+0x1d4>)
    73b0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    73b4:	400a      	ands	r2, r1
    73b6:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    73b8:	9b01      	ldr	r3, [sp, #4]
    73ba:	68d9      	ldr	r1, [r3, #12]
    73bc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    73c0:	4613      	mov	r3, r2
    73c2:	009b      	lsls	r3, r3, #2
    73c4:	4413      	add	r3, r2
    73c6:	009b      	lsls	r3, r3, #2
    73c8:	440b      	add	r3, r1
    73ca:	68db      	ldr	r3, [r3, #12]
    73cc:	2b03      	cmp	r3, #3
    73ce:	d118      	bne.n	7402 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    73d0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73d4:	095b      	lsrs	r3, r3, #5
    73d6:	b29b      	uxth	r3, r3
    73d8:	461a      	mov	r2, r3
    73da:	4b13      	ldr	r3, [pc, #76]	; (7428 <Port_Ipw_RefreshPortDirection+0x1d4>)
    73dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    73e0:	6999      	ldr	r1, [r3, #24]
    73e2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73e6:	f003 031f 	and.w	r3, r3, #31
    73ea:	2201      	movs	r2, #1
    73ec:	409a      	lsls	r2, r3
    73ee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73f2:	095b      	lsrs	r3, r3, #5
    73f4:	b29b      	uxth	r3, r3
    73f6:	4618      	mov	r0, r3
    73f8:	4b0b      	ldr	r3, [pc, #44]	; (7428 <Port_Ipw_RefreshPortDirection+0x1d4>)
    73fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    73fe:	430a      	orrs	r2, r1
    7400:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    7402:	f00e fa4b 	bl	1589c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    7406:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    740a:	3301      	adds	r3, #1
    740c:	f8ad 300e 	strh.w	r3, [sp, #14]
    7410:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7414:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7418:	429a      	cmp	r2, r3
    741a:	f4ff af26 	bcc.w	726a <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    741e:	bf00      	nop
    7420:	bf00      	nop
    7422:	b005      	add	sp, #20
    7424:	f85d fb04 	ldr.w	pc, [sp], #4
    7428:	000184b4 	.word	0x000184b4

0000742c <Adc_HwAcc_SetSC2Reg>:
#include "Adc_MemMap.h"

static inline void Adc_HwAcc_SetSC2Reg(ADC_Type * const Base,
                                       const uint32 ClearMask,
                                       const uint32 Value)
{
    742c:	b086      	sub	sp, #24
    742e:	9003      	str	r0, [sp, #12]
    7430:	9102      	str	r1, [sp, #8]
    7432:	9201      	str	r2, [sp, #4]
    /* Clear and set SC2 register based on ClearMask and Value */
    uint32 Sc2Reg = Base->SC2;
    7434:	9b03      	ldr	r3, [sp, #12]
    7436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    743a:	9305      	str	r3, [sp, #20]
    Sc2Reg &= ~(ClearMask);
    743c:	9b02      	ldr	r3, [sp, #8]
    743e:	43db      	mvns	r3, r3
    7440:	9a05      	ldr	r2, [sp, #20]
    7442:	4013      	ands	r3, r2
    7444:	9305      	str	r3, [sp, #20]
    Sc2Reg |= Value;
    7446:	9a05      	ldr	r2, [sp, #20]
    7448:	9b01      	ldr	r3, [sp, #4]
    744a:	4313      	orrs	r3, r2
    744c:	9305      	str	r3, [sp, #20]
    Base->SC2 = Sc2Reg;
    744e:	9b03      	ldr	r3, [sp, #12]
    7450:	9a05      	ldr	r2, [sp, #20]
    7452:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    7456:	bf00      	nop
    7458:	b006      	add	sp, #24
    745a:	4770      	bx	lr

0000745c <Adc_HwAcc_SetClock>:

static inline void Adc_HwAcc_SetClock(ADC_Type * const Base,
                                      const Adc_Ip_ClockSelType ClockDivide,
                                      const Adc_Ip_ClkSourceType InputClock)
{
    745c:	b086      	sub	sp, #24
    745e:	9003      	str	r0, [sp, #12]
    7460:	9102      	str	r1, [sp, #8]
    7462:	9201      	str	r2, [sp, #4]
    /* Update ClockDivide and InputClock values found in CFG1 register */
    uint32 Cfg1Reg = Base->CFG1;
    7464:	9b03      	ldr	r3, [sp, #12]
    7466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7468:	9305      	str	r3, [sp, #20]
    Cfg1Reg &= ~(ADC_CFG1_ADIV_MASK | ADC_CFG1_ADICLK_MASK);
    746a:	9b05      	ldr	r3, [sp, #20]
    746c:	f023 0363 	bic.w	r3, r3, #99	; 0x63
    7470:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADIV(ClockDivide);
    7472:	9b02      	ldr	r3, [sp, #8]
    7474:	015b      	lsls	r3, r3, #5
    7476:	f003 0360 	and.w	r3, r3, #96	; 0x60
    747a:	9a05      	ldr	r2, [sp, #20]
    747c:	4313      	orrs	r3, r2
    747e:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADICLK(InputClock);
    7480:	9b01      	ldr	r3, [sp, #4]
    7482:	f003 0303 	and.w	r3, r3, #3
    7486:	9a05      	ldr	r2, [sp, #20]
    7488:	4313      	orrs	r3, r2
    748a:	9305      	str	r3, [sp, #20]
    Base->CFG1 = Cfg1Reg;
    748c:	9b03      	ldr	r3, [sp, #12]
    748e:	9a05      	ldr	r2, [sp, #20]
    7490:	641a      	str	r2, [r3, #64]	; 0x40
}
    7492:	bf00      	nop
    7494:	b006      	add	sp, #24
    7496:	4770      	bx	lr

00007498 <Adc_HwAcc_GetClockDivide>:

static inline Adc_Ip_ClockSelType Adc_HwAcc_GetClockDivide(const uint32 Reg)
{
    7498:	b084      	sub	sp, #16
    749a:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve ClockDivide value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClockSelType ReturnValue = ADC_IP_CLK_FULL_BUS;
    749c:	2300      	movs	r3, #0
    749e:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADIV_MASK) >> ADC_CFG1_ADIV_SHIFT)
    74a0:	9b01      	ldr	r3, [sp, #4]
    74a2:	095b      	lsrs	r3, r3, #5
    74a4:	f003 0303 	and.w	r3, r3, #3
    74a8:	2b03      	cmp	r3, #3
    74aa:	d00c      	beq.n	74c6 <Adc_HwAcc_GetClockDivide+0x2e>
    74ac:	2b03      	cmp	r3, #3
    74ae:	d80d      	bhi.n	74cc <Adc_HwAcc_GetClockDivide+0x34>
    74b0:	2b01      	cmp	r3, #1
    74b2:	d002      	beq.n	74ba <Adc_HwAcc_GetClockDivide+0x22>
    74b4:	2b02      	cmp	r3, #2
    74b6:	d003      	beq.n	74c0 <Adc_HwAcc_GetClockDivide+0x28>
        case 3u:
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
            break;
        default:
            ; /* no-op */
            break;
    74b8:	e008      	b.n	74cc <Adc_HwAcc_GetClockDivide+0x34>
            ReturnValue = ADC_IP_CLK_HALF_BUS;
    74ba:	2301      	movs	r3, #1
    74bc:	9303      	str	r3, [sp, #12]
            break;
    74be:	e006      	b.n	74ce <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_QUARTER_BUS;
    74c0:	2302      	movs	r3, #2
    74c2:	9303      	str	r3, [sp, #12]
            break;
    74c4:	e003      	b.n	74ce <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
    74c6:	2303      	movs	r3, #3
    74c8:	9303      	str	r3, [sp, #12]
            break;
    74ca:	e000      	b.n	74ce <Adc_HwAcc_GetClockDivide+0x36>
            break;
    74cc:	bf00      	nop
    }
    return ReturnValue;
    74ce:	9b03      	ldr	r3, [sp, #12]
}
    74d0:	4618      	mov	r0, r3
    74d2:	b004      	add	sp, #16
    74d4:	4770      	bx	lr

000074d6 <Adc_HwAcc_GetInputClock>:

static inline Adc_Ip_ClkSourceType Adc_HwAcc_GetInputClock(const uint32 Reg)
{
    74d6:	b084      	sub	sp, #16
    74d8:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve InputClock value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClkSourceType ReturnValue = ADC_IP_CLK_ALT_1;
    74da:	2300      	movs	r3, #0
    74dc:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADICLK_MASK) >> ADC_CFG1_ADICLK_SHIFT)
    74de:	9b01      	ldr	r3, [sp, #4]
    74e0:	f003 0303 	and.w	r3, r3, #3
    74e4:	2b03      	cmp	r3, #3
    74e6:	d00c      	beq.n	7502 <Adc_HwAcc_GetInputClock+0x2c>
    74e8:	2b03      	cmp	r3, #3
    74ea:	d80d      	bhi.n	7508 <Adc_HwAcc_GetInputClock+0x32>
    74ec:	2b01      	cmp	r3, #1
    74ee:	d002      	beq.n	74f6 <Adc_HwAcc_GetInputClock+0x20>
    74f0:	2b02      	cmp	r3, #2
    74f2:	d003      	beq.n	74fc <Adc_HwAcc_GetInputClock+0x26>
        case 3u:
            ReturnValue = ADC_IP_CLK_ALT_4;
            break;
        default:
            ; /* no-op */
            break;
    74f4:	e008      	b.n	7508 <Adc_HwAcc_GetInputClock+0x32>
            ReturnValue = ADC_IP_CLK_ALT_2;
    74f6:	2301      	movs	r3, #1
    74f8:	9303      	str	r3, [sp, #12]
            break;
    74fa:	e006      	b.n	750a <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_3;
    74fc:	2302      	movs	r3, #2
    74fe:	9303      	str	r3, [sp, #12]
            break;
    7500:	e003      	b.n	750a <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_4;
    7502:	2303      	movs	r3, #3
    7504:	9303      	str	r3, [sp, #12]
            break;
    7506:	e000      	b.n	750a <Adc_HwAcc_GetInputClock+0x34>
            break;
    7508:	bf00      	nop
    }
    return ReturnValue;
    750a:	9b03      	ldr	r3, [sp, #12]
}
    750c:	4618      	mov	r0, r3
    750e:	b004      	add	sp, #16
    7510:	4770      	bx	lr

00007512 <Adc_HwAcc_SetSampleTime>:

static inline void Adc_HwAcc_SetSampleTime(ADC_Type * const Base,
                                           const uint8 SampleTime)
{
    7512:	b084      	sub	sp, #16
    7514:	9001      	str	r0, [sp, #4]
    7516:	460b      	mov	r3, r1
    7518:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Clip sample time to minimum value */
    uint8 ClippedSampleTime = (uint8)((SampleTime > 0U) ? SampleTime : 1U);
    751c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7520:	2b00      	cmp	r3, #0
    7522:	d002      	beq.n	752a <Adc_HwAcc_SetSampleTime+0x18>
    7524:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7528:	e000      	b.n	752c <Adc_HwAcc_SetSampleTime+0x1a>
    752a:	2301      	movs	r3, #1
    752c:	f88d 300f 	strb.w	r3, [sp, #15]
    /* Update SampleTime values found in SC3 register */
    uint32 Cfg2Reg = Base->CFG2;
    7530:	9b01      	ldr	r3, [sp, #4]
    7532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7534:	9302      	str	r3, [sp, #8]
    Cfg2Reg &= ~(ADC_CFG2_SMPLTS_MASK);
    7536:	9b02      	ldr	r3, [sp, #8]
    7538:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    753c:	9302      	str	r3, [sp, #8]
    Cfg2Reg |= ADC_CFG2_SMPLTS(ClippedSampleTime);
    753e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7542:	9a02      	ldr	r2, [sp, #8]
    7544:	4313      	orrs	r3, r2
    7546:	9302      	str	r3, [sp, #8]
    Base->CFG2 = Cfg2Reg;
    7548:	9b01      	ldr	r3, [sp, #4]
    754a:	9a02      	ldr	r2, [sp, #8]
    754c:	645a      	str	r2, [r3, #68]	; 0x44
}
    754e:	bf00      	nop
    7550:	b004      	add	sp, #16
    7552:	4770      	bx	lr

00007554 <Adc_HwAcc_SetAveraging>:

static inline void Adc_HwAcc_SetAveraging(ADC_Type * const Base,
                                          const boolean AvgEn,
                                          const Adc_Ip_AvgSelectType AvgSel)
{
    7554:	b086      	sub	sp, #24
    7556:	9003      	str	r0, [sp, #12]
    7558:	460b      	mov	r3, r1
    755a:	9201      	str	r2, [sp, #4]
    755c:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Update AvgEn and AvgSel values found in SC3 register */
    uint32 Sc3Reg = Base->SC3;
    7560:	9b03      	ldr	r3, [sp, #12]
    7562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    7566:	9305      	str	r3, [sp, #20]
    Sc3Reg &= ~(ADC_SC3_AVGE_MASK | ADC_SC3_AVGS_MASK);
    7568:	9b05      	ldr	r3, [sp, #20]
    756a:	f023 0307 	bic.w	r3, r3, #7
    756e:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGE(AvgEn ? 1u : 0u);
    7570:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7574:	2b00      	cmp	r3, #0
    7576:	d001      	beq.n	757c <Adc_HwAcc_SetAveraging+0x28>
    7578:	2304      	movs	r3, #4
    757a:	e000      	b.n	757e <Adc_HwAcc_SetAveraging+0x2a>
    757c:	2300      	movs	r3, #0
    757e:	9a05      	ldr	r2, [sp, #20]
    7580:	4313      	orrs	r3, r2
    7582:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGS(AvgSel);
    7584:	9b01      	ldr	r3, [sp, #4]
    7586:	f003 0303 	and.w	r3, r3, #3
    758a:	9a05      	ldr	r2, [sp, #20]
    758c:	4313      	orrs	r3, r2
    758e:	9305      	str	r3, [sp, #20]
    Base->SC3 = Sc3Reg;
    7590:	9b03      	ldr	r3, [sp, #12]
    7592:	9a05      	ldr	r2, [sp, #20]
    7594:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    7598:	bf00      	nop
    759a:	b006      	add	sp, #24
    759c:	4770      	bx	lr

0000759e <Adc_HwAcc_GetAverageSelect>:

static inline Adc_Ip_AvgSelectType Adc_HwAcc_GetAverageSelect(const uint32 Reg)
{
    759e:	b084      	sub	sp, #16
    75a0:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve AvgSelect value found in SC3 register
     * Note: Reg should be the value of SC3 register
     */
    Adc_Ip_AvgSelectType ReturnValue = ADC_IP_AVG_4_CONV;
    75a2:	2300      	movs	r3, #0
    75a4:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_SC3_AVGS_MASK) >> ADC_SC3_AVGS_SHIFT)
    75a6:	9b01      	ldr	r3, [sp, #4]
    75a8:	f003 0303 	and.w	r3, r3, #3
    75ac:	2b03      	cmp	r3, #3
    75ae:	d00c      	beq.n	75ca <Adc_HwAcc_GetAverageSelect+0x2c>
    75b0:	2b03      	cmp	r3, #3
    75b2:	d80d      	bhi.n	75d0 <Adc_HwAcc_GetAverageSelect+0x32>
    75b4:	2b01      	cmp	r3, #1
    75b6:	d002      	beq.n	75be <Adc_HwAcc_GetAverageSelect+0x20>
    75b8:	2b02      	cmp	r3, #2
    75ba:	d003      	beq.n	75c4 <Adc_HwAcc_GetAverageSelect+0x26>
        case 3u:
            ReturnValue = ADC_IP_AVG_32_CONV;
            break;
        default:
            ; /* no-op */
            break;
    75bc:	e008      	b.n	75d0 <Adc_HwAcc_GetAverageSelect+0x32>
            ReturnValue = ADC_IP_AVG_8_CONV;
    75be:	2301      	movs	r3, #1
    75c0:	9303      	str	r3, [sp, #12]
            break;
    75c2:	e006      	b.n	75d2 <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_16_CONV;
    75c4:	2302      	movs	r3, #2
    75c6:	9303      	str	r3, [sp, #12]
            break;
    75c8:	e003      	b.n	75d2 <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_32_CONV;
    75ca:	2303      	movs	r3, #3
    75cc:	9303      	str	r3, [sp, #12]
            break;
    75ce:	e000      	b.n	75d2 <Adc_HwAcc_GetAverageSelect+0x34>
            break;
    75d0:	bf00      	nop
    }
    return ReturnValue;
    75d2:	9b03      	ldr	r3, [sp, #12]
}
    75d4:	4618      	mov	r0, r3
    75d6:	b004      	add	sp, #16
    75d8:	4770      	bx	lr

000075da <Adc_HwAcc_SetTriggerMode>:

static inline void Adc_HwAcc_SetTriggerMode(ADC_Type * const Base,
                                            const Adc_Ip_TrigType TriggerMode)
{
    75da:	b084      	sub	sp, #16
    75dc:	9001      	str	r0, [sp, #4]
    75de:	9100      	str	r1, [sp, #0]
    /* Update TriggerMode value found in SC2 register */
    uint32 Sc2Reg = Base->SC2;
    75e0:	9b01      	ldr	r3, [sp, #4]
    75e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    75e6:	9303      	str	r3, [sp, #12]
    Sc2Reg &= ~(ADC_SC2_ADTRG_MASK);
    75e8:	9b03      	ldr	r3, [sp, #12]
    75ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    75ee:	9303      	str	r3, [sp, #12]
    Sc2Reg |= ADC_SC2_ADTRG(TriggerMode);
    75f0:	9b00      	ldr	r3, [sp, #0]
    75f2:	019b      	lsls	r3, r3, #6
    75f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    75f8:	9a03      	ldr	r2, [sp, #12]
    75fa:	4313      	orrs	r3, r2
    75fc:	9303      	str	r3, [sp, #12]
    Base->SC2 = Sc2Reg;
    75fe:	9b01      	ldr	r3, [sp, #4]
    7600:	9a03      	ldr	r2, [sp, #12]
    7602:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    7606:	bf00      	nop
    7608:	b004      	add	sp, #16
    760a:	4770      	bx	lr

0000760c <Adc_HwAcc_GetTriggerMode>:

static inline Adc_Ip_TrigType Adc_HwAcc_GetTriggerMode(const uint32 Reg)
{
    760c:	b084      	sub	sp, #16
    760e:	9001      	str	r0, [sp, #4]
    /* Retrieve TriggerMode value found in SC2 register */
    Adc_Ip_TrigType ReturnValue = ADC_IP_TRIGGER_SOFTWARE;
    7610:	2300      	movs	r3, #0
    7612:	9303      	str	r3, [sp, #12]
    if (((Reg & ADC_SC2_ADTRG_MASK) >> ADC_SC2_ADTRG_SHIFT) == 1u)
    7614:	9b01      	ldr	r3, [sp, #4]
    7616:	f003 0340 	and.w	r3, r3, #64	; 0x40
    761a:	2b00      	cmp	r3, #0
    761c:	d001      	beq.n	7622 <Adc_HwAcc_GetTriggerMode+0x16>
    {
        ReturnValue = ADC_IP_TRIGGER_HARDWARE;
    761e:	2301      	movs	r3, #1
    7620:	9303      	str	r3, [sp, #12]
    }
    return ReturnValue;
    7622:	9b03      	ldr	r3, [sp, #12]
}
    7624:	4618      	mov	r0, r3
    7626:	b004      	add	sp, #16
    7628:	4770      	bx	lr

0000762a <Adc_HwAcc_SetChannel>:

static inline void Adc_HwAcc_SetChannel(ADC_Type * const Base,
                                        const uint8 ChnIdx,
                                        const Adc_Ip_InputChannelType InputChannel,
                                        const boolean InterruptEnable)
{
    762a:	b086      	sub	sp, #24
    762c:	9003      	str	r0, [sp, #12]
    762e:	9201      	str	r2, [sp, #4]
    7630:	461a      	mov	r2, r3
    7632:	460b      	mov	r3, r1
    7634:	f88d 300b 	strb.w	r3, [sp, #11]
    7638:	4613      	mov	r3, r2
    763a:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Configure channel by writing all SC1n register fields */
    uint32 Sc1Reg = SC1(Base, ChnIdx);
    763e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7642:	9b03      	ldr	r3, [sp, #12]
    7644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7648:	9305      	str	r3, [sp, #20]
    Sc1Reg &= ~(ADC_SC1_ADCH_MASK | ADC_SC1_AIEN_MASK);
    764a:	9b05      	ldr	r3, [sp, #20]
    764c:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    7650:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_ADCH(InputChannel);
    7652:	9b01      	ldr	r3, [sp, #4]
    7654:	f003 031f 	and.w	r3, r3, #31
    7658:	9a05      	ldr	r2, [sp, #20]
    765a:	4313      	orrs	r3, r2
    765c:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_AIEN(InterruptEnable ? 1u : 0u);
    765e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7662:	2b00      	cmp	r3, #0
    7664:	d001      	beq.n	766a <Adc_HwAcc_SetChannel+0x40>
    7666:	2340      	movs	r3, #64	; 0x40
    7668:	e000      	b.n	766c <Adc_HwAcc_SetChannel+0x42>
    766a:	2300      	movs	r3, #0
    766c:	9a05      	ldr	r2, [sp, #20]
    766e:	4313      	orrs	r3, r2
    7670:	9305      	str	r3, [sp, #20]
    SC1(Base, ChnIdx) = Sc1Reg;
    7672:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7676:	9b03      	ldr	r3, [sp, #12]
    7678:	9905      	ldr	r1, [sp, #20]
    767a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    767e:	bf00      	nop
    7680:	b006      	add	sp, #24
    7682:	4770      	bx	lr

00007684 <Adc_HwAcc_SetUserGainAndOffset>:

static inline void Adc_HwAcc_SetUserGainAndOffset(ADC_Type * const Base,
                                                  const uint16 UsrGain,
                                                  const uint16 UsrOffset)
{
    7684:	b082      	sub	sp, #8
    7686:	9001      	str	r0, [sp, #4]
    7688:	460b      	mov	r3, r1
    768a:	f8ad 3002 	strh.w	r3, [sp, #2]
    768e:	4613      	mov	r3, r2
    7690:	f8ad 3000 	strh.w	r3, [sp]
     * 2. RegVal <- Sum & 0xF800U
     * 3. if RegVal != 0x0000U then RegVal <- 0xFFFFU
     * 4. Base->G <- RegVal
     */

    Base->USR_OFS = ADC_USR_OFS_USR_OFS(UsrOffset);
    7694:	f8bd 3000 	ldrh.w	r3, [sp]
    7698:	b2da      	uxtb	r2, r3
    769a:	9b01      	ldr	r3, [sp, #4]
    769c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    Base->UG = ADC_UG_UG(UsrGain);
    76a0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    76a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
    76a8:	9b01      	ldr	r3, [sp, #4]
    76aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
    76ae:	bf00      	nop
    76b0:	b002      	add	sp, #8
    76b2:	4770      	bx	lr

000076b4 <Adc_HwAcc_GetAIEN>:

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
static inline boolean Adc_HwAcc_GetAIEN(const uint32 Reg)
{
    76b4:	b082      	sub	sp, #8
    76b6:	9001      	str	r0, [sp, #4]
    /* Retrive AIEN flag from given SC1 register */
    return (((Reg & ADC_SC1_AIEN_MASK) >> ADC_SC1_AIEN_SHIFT) != 0u) ? TRUE : FALSE;
    76b8:	9b01      	ldr	r3, [sp, #4]
    76ba:	099b      	lsrs	r3, r3, #6
    76bc:	f003 0301 	and.w	r3, r3, #1
    76c0:	2b00      	cmp	r3, #0
    76c2:	bf14      	ite	ne
    76c4:	2301      	movne	r3, #1
    76c6:	2300      	moveq	r3, #0
    76c8:	b2db      	uxtb	r3, r3
}
    76ca:	4618      	mov	r0, r3
    76cc:	b002      	add	sp, #8
    76ce:	4770      	bx	lr

000076d0 <Adc_HwAcc_GetCOCO>:
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

static inline boolean Adc_HwAcc_GetCOCO(const uint32 Reg)
{
    76d0:	b082      	sub	sp, #8
    76d2:	9001      	str	r0, [sp, #4]
    /* Retrive COCO flag from given SC1 register */
    return (((Reg & ADC_SC1_COCO_MASK) >> ADC_SC1_COCO_SHIFT) != 0u) ? TRUE : FALSE;
    76d4:	9b01      	ldr	r3, [sp, #4]
    76d6:	09db      	lsrs	r3, r3, #7
    76d8:	f003 0301 	and.w	r3, r3, #1
    76dc:	2b00      	cmp	r3, #0
    76de:	bf14      	ite	ne
    76e0:	2301      	movne	r3, #1
    76e2:	2300      	moveq	r3, #0
    76e4:	b2db      	uxtb	r3, r3
}
    76e6:	4618      	mov	r0, r3
    76e8:	b002      	add	sp, #8
    76ea:	4770      	bx	lr

000076ec <Adc_HwAcc_GetData>:

static inline uint16 Adc_HwAcc_GetData(const ADC_Type * const Base,
                                       const uint8 ChnIdx)
{
    76ec:	b084      	sub	sp, #16
    76ee:	9001      	str	r0, [sp, #4]
    76f0:	460b      	mov	r3, r1
    76f2:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Retrieve the conversion result of a given channel */
    uint16 Result = (uint16) R(Base, ChnIdx);
    76f6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    76fa:	9b01      	ldr	r3, [sp, #4]
    76fc:	3212      	adds	r2, #18
    76fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7702:	f8ad 300e 	strh.w	r3, [sp, #14]
    Result = (uint16) ((Result & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    7706:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    770a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    770e:	f8ad 300e 	strh.w	r3, [sp, #14]
    return Result;
    7712:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    7716:	4618      	mov	r0, r3
    7718:	b004      	add	sp, #16
    771a:	4770      	bx	lr

0000771c <ADC_DoCalibration_SetParams>:
*
* END**************************************************************************/
static inline void ADC_DoCalibration_SetParams(ADC_Type * const Base,
                                               const Adc_Ip_ClockConfigType * const Config,
                                               const Adc_Ip_TrigType TriggerMode)
{
    771c:	b500      	push	{lr}
    771e:	b085      	sub	sp, #20
    7720:	9003      	str	r0, [sp, #12]
    7722:	9102      	str	r1, [sp, #8]
    7724:	9201      	str	r2, [sp, #4]
    /* Configure averaging */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    7726:	f009 fc5b 	bl	10fe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    772a:	9b02      	ldr	r3, [sp, #8]
    772c:	7a59      	ldrb	r1, [r3, #9]
    772e:	9b02      	ldr	r3, [sp, #8]
    7730:	68db      	ldr	r3, [r3, #12]
    7732:	461a      	mov	r2, r3
    7734:	9803      	ldr	r0, [sp, #12]
    7736:	f7ff ff0d 	bl	7554 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    773a:	f009 fc7d 	bl	11038 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Configure trigger mode */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24();
    773e:	f009 fab5 	bl	10cac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    7742:	9901      	ldr	r1, [sp, #4]
    7744:	9803      	ldr	r0, [sp, #12]
    7746:	f7ff ff48 	bl	75da <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24();
    774a:	f009 fadb 	bl	10d04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>

    /* Configure sample time */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15();
    774e:	f008 ffcb 	bl	106e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    7752:	9b02      	ldr	r3, [sp, #8]
    7754:	7a1b      	ldrb	r3, [r3, #8]
    7756:	4619      	mov	r1, r3
    7758:	9803      	ldr	r0, [sp, #12]
    775a:	f7ff feda 	bl	7512 <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15();
    775e:	f008 ffef 	bl	10740 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>

    /* Configure input clock */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13();
    7762:	f008 ff1d 	bl	105a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    7766:	9b02      	ldr	r3, [sp, #8]
    7768:	6819      	ldr	r1, [r3, #0]
    776a:	9b02      	ldr	r3, [sp, #8]
    776c:	685b      	ldr	r3, [r3, #4]
    776e:	461a      	mov	r2, r3
    7770:	9803      	ldr	r0, [sp, #12]
    7772:	f7ff fe73 	bl	745c <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13();
    7776:	f008 ff3f 	bl	105f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>
}
    777a:	bf00      	nop
    777c:	b005      	add	sp, #20
    777e:	f85d fb04 	ldr.w	pc, [sp], #4

00007782 <Adc_Ip_Init>:
*
* @implements     Adc_Ip_Init_Activity
* END**************************************************************************/
void Adc_Ip_Init(const uint32 Instance,
                 const Adc_Ip_ConfigType * const Config)
{
    7782:	b500      	push	{lr}
    7784:	b087      	sub	sp, #28
    7786:	9001      	str	r0, [sp, #4]
    7788:	9100      	str	r1, [sp, #0]
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
    DevAssert(Config->NumChannels <= ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    778a:	4a67      	ldr	r2, [pc, #412]	; (7928 <Adc_Ip_Init+0x1a6>)
    778c:	9b01      	ldr	r3, [sp, #4]
    778e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7792:	9302      	str	r3, [sp, #8]
    uint32 SC2Reg = 0u;
    7794:	2300      	movs	r3, #0
    7796:	9305      	str	r3, [sp, #20]
    uint32 SC2ClearMask = 0u;
    7798:	2300      	movs	r3, #0
    779a:	9304      	str	r3, [sp, #16]
    uint8 Index;

    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    779c:	9b00      	ldr	r3, [sp, #0]
    779e:	6819      	ldr	r1, [r3, #0]
    77a0:	9b00      	ldr	r3, [sp, #0]
    77a2:	689b      	ldr	r3, [r3, #8]
    77a4:	461a      	mov	r2, r3
    77a6:	9802      	ldr	r0, [sp, #8]
    77a8:	f7ff fe58 	bl	745c <Adc_HwAcc_SetClock>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    77ac:	9b00      	ldr	r3, [sp, #0]
    77ae:	7b1b      	ldrb	r3, [r3, #12]
    77b0:	4619      	mov	r1, r3
    77b2:	9802      	ldr	r0, [sp, #8]
    77b4:	f7ff fead 	bl	7512 <Adc_HwAcc_SetSampleTime>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    77b8:	9b00      	ldr	r3, [sp, #0]
    77ba:	7b59      	ldrb	r1, [r3, #13]
    77bc:	9b00      	ldr	r3, [sp, #0]
    77be:	691b      	ldr	r3, [r3, #16]
    77c0:	461a      	mov	r2, r3
    77c2:	9802      	ldr	r0, [sp, #8]
    77c4:	f7ff fec6 	bl	7554 <Adc_HwAcc_SetAveraging>

    Adc_Ip_SetResolution(Instance, Config->Resolution);
    77c8:	9b00      	ldr	r3, [sp, #0]
    77ca:	695b      	ldr	r3, [r3, #20]
    77cc:	4619      	mov	r1, r3
    77ce:	9801      	ldr	r0, [sp, #4]
    77d0:	f000 f9ea 	bl	7ba8 <Adc_Ip_SetResolution>
        ADC_SetSupplyMonitoringEnable(Config->SupplyMonitoringEnable);
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    /* Configure trigger mode */
    SC2ClearMask |= ADC_SC2_ADTRG_MASK;
    77d4:	9b04      	ldr	r3, [sp, #16]
    77d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    77da:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ADTRG(Config->TriggerMode);
    77dc:	9b00      	ldr	r3, [sp, #0]
    77de:	699b      	ldr	r3, [r3, #24]
    77e0:	019b      	lsls	r3, r3, #6
    77e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    77e6:	9a05      	ldr	r2, [sp, #20]
    77e8:	4313      	orrs	r3, r2
    77ea:	9305      	str	r3, [sp, #20]

    /* Configure DMA enable */
    if (Config->DmaEnable)
    77ec:	9b00      	ldr	r3, [sp, #0]
    77ee:	7f1b      	ldrb	r3, [r3, #28]
    77f0:	2b00      	cmp	r3, #0
    77f2:	d004      	beq.n	77fe <Adc_Ip_Init+0x7c>
    {
        SC2Reg |= ADC_SC2_DMAEN_MASK;
    77f4:	9b05      	ldr	r3, [sp, #20]
    77f6:	f043 0304 	orr.w	r3, r3, #4
    77fa:	9305      	str	r3, [sp, #20]
    77fc:	e003      	b.n	7806 <Adc_Ip_Init+0x84>
    }
    else
    {
        SC2ClearMask |= ADC_SC2_DMAEN_MASK;
    77fe:	9b04      	ldr	r3, [sp, #16]
    7800:	f043 0304 	orr.w	r3, r3, #4
    7804:	9304      	str	r3, [sp, #16]
    }

    /* Configure voltage reference selector */
    SC2ClearMask |= ADC_SC2_REFSEL_MASK;
    7806:	9b04      	ldr	r3, [sp, #16]
    7808:	f043 0303 	orr.w	r3, r3, #3
    780c:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_REFSEL(Config->VoltageRef);
    780e:	9b00      	ldr	r3, [sp, #0]
    7810:	6a1b      	ldr	r3, [r3, #32]
    7812:	f003 0303 	and.w	r3, r3, #3
    7816:	9a05      	ldr	r2, [sp, #20]
    7818:	4313      	orrs	r3, r2
    781a:	9305      	str	r3, [sp, #20]

    /* Configure compare enables and values */
    SC2ClearMask |= ADC_SC2_ACFE_MASK | ADC_SC2_ACFGT_MASK | ADC_SC2_ACREN_MASK;
    781c:	9b04      	ldr	r3, [sp, #16]
    781e:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    7822:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ACFE(Config->CompareEnable ? 1u : 0u);
    7824:	9b00      	ldr	r3, [sp, #0]
    7826:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    782a:	2b00      	cmp	r3, #0
    782c:	d001      	beq.n	7832 <Adc_Ip_Init+0xb0>
    782e:	2320      	movs	r3, #32
    7830:	e000      	b.n	7834 <Adc_Ip_Init+0xb2>
    7832:	2300      	movs	r3, #0
    7834:	9a05      	ldr	r2, [sp, #20]
    7836:	4313      	orrs	r3, r2
    7838:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACFGT(Config->CompareGreaterThanEnable ? 1u : 0u);
    783a:	9b00      	ldr	r3, [sp, #0]
    783c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    7840:	2b00      	cmp	r3, #0
    7842:	d001      	beq.n	7848 <Adc_Ip_Init+0xc6>
    7844:	2310      	movs	r3, #16
    7846:	e000      	b.n	784a <Adc_Ip_Init+0xc8>
    7848:	2300      	movs	r3, #0
    784a:	9a05      	ldr	r2, [sp, #20]
    784c:	4313      	orrs	r3, r2
    784e:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACREN(Config->CompareRangeFuncEnable ? 1u : 0u);
    7850:	9b00      	ldr	r3, [sp, #0]
    7852:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    7856:	2b00      	cmp	r3, #0
    7858:	d001      	beq.n	785e <Adc_Ip_Init+0xdc>
    785a:	2308      	movs	r3, #8
    785c:	e000      	b.n	7860 <Adc_Ip_Init+0xde>
    785e:	2300      	movs	r3, #0
    7860:	9a05      	ldr	r2, [sp, #20]
    7862:	4313      	orrs	r3, r2
    7864:	9305      	str	r3, [sp, #20]
    Base->CV[0u] = ADC_CV_CV(Config->CompVal1);
    7866:	9b00      	ldr	r3, [sp, #0]
    7868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    786a:	461a      	mov	r2, r3
    786c:	9b02      	ldr	r3, [sp, #8]
    786e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Base->CV[1u] = ADC_CV_CV(Config->CompVal2);
    7872:	9b00      	ldr	r3, [sp, #0]
    7874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    7876:	461a      	mov	r2, r3
    7878:	9b02      	ldr	r3, [sp, #8]
    787a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    Adc_HwAcc_SetSC2Reg(Base, SC2ClearMask, SC2Reg);
    787e:	9a05      	ldr	r2, [sp, #20]
    7880:	9904      	ldr	r1, [sp, #16]
    7882:	9802      	ldr	r0, [sp, #8]
    7884:	f7ff fdd2 	bl	742c <Adc_HwAcc_SetSC2Reg>

    Adc_HwAcc_SetUserGainAndOffset(Base, Config->UsrGain, Config->UsrOffset);
    7888:	9b00      	ldr	r3, [sp, #0]
    788a:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    788c:	9b00      	ldr	r3, [sp, #0]
    788e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    7890:	461a      	mov	r2, r3
    7892:	9802      	ldr	r0, [sp, #8]
    7894:	f7ff fef6 	bl	7684 <Adc_HwAcc_SetUserGainAndOffset>

    Adc_Ip_SetContinuousMode(Instance, Config->ContinuousConvEnable);
    7898:	9b00      	ldr	r3, [sp, #0]
    789a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    789e:	4619      	mov	r1, r3
    78a0:	9801      	ldr	r0, [sp, #4]
    78a2:	f000 f955 	bl	7b50 <Adc_Ip_SetContinuousMode>

    if (Config->ChannelConfigs != NULL_PTR)
    78a6:	9b00      	ldr	r3, [sp, #0]
    78a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    78aa:	2b00      	cmp	r3, #0
    78ac:	d01c      	beq.n	78e8 <Adc_Ip_Init+0x166>
    {
        for (Index = 0u; Index < Config->NumChannels; Index++)
    78ae:	2300      	movs	r3, #0
    78b0:	f88d 300f 	strb.w	r3, [sp, #15]
    78b4:	e011      	b.n	78da <Adc_Ip_Init+0x158>
        {
            Adc_Ip_ConfigChannel(Instance, &(Config->ChannelConfigs[Index]));
    78b6:	9b00      	ldr	r3, [sp, #0]
    78b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
    78ba:	f89d 200f 	ldrb.w	r2, [sp, #15]
    78be:	4613      	mov	r3, r2
    78c0:	005b      	lsls	r3, r3, #1
    78c2:	4413      	add	r3, r2
    78c4:	009b      	lsls	r3, r3, #2
    78c6:	440b      	add	r3, r1
    78c8:	4619      	mov	r1, r3
    78ca:	9801      	ldr	r0, [sp, #4]
    78cc:	f000 f9c2 	bl	7c54 <Adc_Ip_ConfigChannel>
        for (Index = 0u; Index < Config->NumChannels; Index++)
    78d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    78d4:	3301      	adds	r3, #1
    78d6:	f88d 300f 	strb.w	r3, [sp, #15]
    78da:	9b00      	ldr	r3, [sp, #0]
    78dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    78e0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    78e4:	429a      	cmp	r2, r3
    78e6:	d3e6      	bcc.n	78b6 <Adc_Ip_Init+0x134>
        }
    }

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_Ip_axState[Instance].ConversionCompleteNotification = Config->ConversionCompleteNotification;
    78e8:	9b00      	ldr	r3, [sp, #0]
    78ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    78ec:	490f      	ldr	r1, [pc, #60]	; (792c <Adc_Ip_Init+0x1aa>)
    78ee:	9b01      	ldr	r3, [sp, #4]
    78f0:	204c      	movs	r0, #76	; 0x4c
    78f2:	fb00 f303 	mul.w	r3, r0, r3
    78f6:	440b      	add	r3, r1
    78f8:	3308      	adds	r3, #8
    78fa:	601a      	str	r2, [r3, #0]
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    Adc_Ip_axState[Instance].CalibrationClockDivide = Config->CalibrationClockDivide;
    78fc:	9b00      	ldr	r3, [sp, #0]
    78fe:	685a      	ldr	r2, [r3, #4]
    7900:	490a      	ldr	r1, [pc, #40]	; (792c <Adc_Ip_Init+0x1aa>)
    7902:	9b01      	ldr	r3, [sp, #4]
    7904:	204c      	movs	r0, #76	; 0x4c
    7906:	fb00 f303 	mul.w	r3, r0, r3
    790a:	440b      	add	r3, r1
    790c:	3304      	adds	r3, #4
    790e:	601a      	str	r2, [r3, #0]
    Adc_Ip_axState[Instance].Init = TRUE;
    7910:	4a06      	ldr	r2, [pc, #24]	; (792c <Adc_Ip_Init+0x1aa>)
    7912:	9b01      	ldr	r3, [sp, #4]
    7914:	214c      	movs	r1, #76	; 0x4c
    7916:	fb01 f303 	mul.w	r3, r1, r3
    791a:	4413      	add	r3, r2
    791c:	2201      	movs	r2, #1
    791e:	701a      	strb	r2, [r3, #0]
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    Adc_Ip_axState[Instance].PretriggerSel = Config->PretriggerSel;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
}
    7920:	bf00      	nop
    7922:	b007      	add	sp, #28
    7924:	f85d fb04 	ldr.w	pc, [sp], #4
    7928:	000184c8 	.word	0x000184c8
    792c:	1fff8d00 	.word	0x1fff8d00

00007930 <Adc_Ip_DeInit>:
* Description   : This function resets the ADC internal registers to default values.
*
* @implements     Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Adc_Ip_DeInit(const uint32 Instance)
{
    7930:	b500      	push	{lr}
    7932:	b0c3      	sub	sp, #268	; 0x10c
    7934:	ab42      	add	r3, sp, #264	; 0x108
    7936:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    793a:	6018      	str	r0, [r3, #0]

    Adc_Ip_ConfigType DefaultConfig;
    Adc_Ip_ChanConfigType ChannelConfigs[ADC_MAX_CHAN_COUNT];
    uint8 Index;

    DefaultConfig.ClockDivide = ADC_IP_CLK_FULL_BUS;
    793c:	2300      	movs	r3, #0
    793e:	9332      	str	r3, [sp, #200]	; 0xc8
    DefaultConfig.CalibrationClockDivide = ADC_IP_CLK_EIGHTH_BUS;
    7940:	2303      	movs	r3, #3
    7942:	9333      	str	r3, [sp, #204]	; 0xcc
    DefaultConfig.InputClock = ADC_IP_CLK_ALT_1;
    7944:	2300      	movs	r3, #0
    7946:	9334      	str	r3, [sp, #208]	; 0xd0
    DefaultConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    7948:	230c      	movs	r3, #12
    794a:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
    DefaultConfig.AvgEn = FALSE;
    794e:	2300      	movs	r3, #0
    7950:	f88d 30d5 	strb.w	r3, [sp, #213]	; 0xd5
    DefaultConfig.AvgSel = ADC_IP_AVG_4_CONV;
    7954:	2300      	movs	r3, #0
    7956:	9336      	str	r3, [sp, #216]	; 0xd8
    DefaultConfig.Resolution = ADC_IP_RESOLUTION_8BIT;
    7958:	2300      	movs	r3, #0
    795a:	9337      	str	r3, [sp, #220]	; 0xdc
    DefaultConfig.TriggerMode = ADC_IP_TRIGGER_SOFTWARE;
    795c:	2300      	movs	r3, #0
    795e:	9338      	str	r3, [sp, #224]	; 0xe0
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    DefaultConfig.PretriggerSel = ADC_IP_PRETRIGGER_SEL_PDB;
    DefaultConfig.TriggerSel = ADC_IP_TRIGGER_SEL_PDB;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
    DefaultConfig.DmaEnable = FALSE;
    7960:	2300      	movs	r3, #0
    7962:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    DefaultConfig.VoltageRef = ADC_IP_VOLTAGEREF_VREF;
    7966:	2300      	movs	r3, #0
    7968:	933a      	str	r3, [sp, #232]	; 0xe8
    DefaultConfig.ContinuousConvEnable = FALSE;
    796a:	2300      	movs	r3, #0
    796c:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DefaultConfig.SupplyMonitoringEnable = FALSE;
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    DefaultConfig.CompareEnable = FALSE;
    7970:	2300      	movs	r3, #0
    7972:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
    DefaultConfig.CompareGreaterThanEnable = FALSE;
    7976:	2300      	movs	r3, #0
    7978:	f88d 30ee 	strb.w	r3, [sp, #238]	; 0xee
    DefaultConfig.CompareRangeFuncEnable = FALSE;
    797c:	2300      	movs	r3, #0
    797e:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
    DefaultConfig.CompVal1 = 0u;
    7982:	2300      	movs	r3, #0
    7984:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    DefaultConfig.CompVal2 = 0u;
    7988:	2300      	movs	r3, #0
    798a:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
    DefaultConfig.UsrGain = ADC_IP_DEFAULT_USER_GAIN;
    798e:	2304      	movs	r3, #4
    7990:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
    DefaultConfig.UsrOffset = 0u;
    7994:	2300      	movs	r3, #0
    7996:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    DefaultConfig.NumChannels = ADC_MAX_CHAN_COUNT;
    799a:	2310      	movs	r3, #16
    799c:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    79a0:	2300      	movs	r3, #0
    79a2:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    79a6:	e02b      	b.n	7a00 <Adc_Ip_DeInit+0xd0>
    {
        ChannelConfigs[Index].ChnIdx = Index;
    79a8:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    79ac:	ab42      	add	r3, sp, #264	; 0x108
    79ae:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    79b2:	4613      	mov	r3, r2
    79b4:	005b      	lsls	r3, r3, #1
    79b6:	4413      	add	r3, r2
    79b8:	009b      	lsls	r3, r3, #2
    79ba:	440b      	add	r3, r1
    79bc:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    79c0:	701a      	strb	r2, [r3, #0]
        ChannelConfigs[Index].Channel = ADC_IP_INPUTCHAN_DISABLED;
    79c2:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    79c6:	ab42      	add	r3, sp, #264	; 0x108
    79c8:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    79cc:	4613      	mov	r3, r2
    79ce:	005b      	lsls	r3, r3, #1
    79d0:	4413      	add	r3, r2
    79d2:	009b      	lsls	r3, r3, #2
    79d4:	440b      	add	r3, r1
    79d6:	3304      	adds	r3, #4
    79d8:	221f      	movs	r2, #31
    79da:	601a      	str	r2, [r3, #0]
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
        ChannelConfigs[Index].InterruptEnable = FALSE;
    79dc:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    79e0:	ab42      	add	r3, sp, #264	; 0x108
    79e2:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    79e6:	4613      	mov	r3, r2
    79e8:	005b      	lsls	r3, r3, #1
    79ea:	4413      	add	r3, r2
    79ec:	009b      	lsls	r3, r3, #2
    79ee:	440b      	add	r3, r1
    79f0:	3308      	adds	r3, #8
    79f2:	2200      	movs	r2, #0
    79f4:	701a      	strb	r2, [r3, #0]
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    79f6:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    79fa:	3301      	adds	r3, #1
    79fc:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    7a00:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    7a04:	2b0f      	cmp	r3, #15
    7a06:	d9cf      	bls.n	79a8 <Adc_Ip_DeInit+0x78>
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    }
    DefaultConfig.ChannelConfigs = ChannelConfigs;
    7a08:	ab02      	add	r3, sp, #8
    7a0a:	933f      	str	r3, [sp, #252]	; 0xfc
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    DefaultConfig.ConversionCompleteNotification = NULL_PTR;
    7a0c:	2300      	movs	r3, #0
    7a0e:	9340      	str	r3, [sp, #256]	; 0x100
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

    Adc_Ip_Init(Instance, &DefaultConfig);
    7a10:	aa32      	add	r2, sp, #200	; 0xc8
    7a12:	ab42      	add	r3, sp, #264	; 0x108
    7a14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    7a18:	4611      	mov	r1, r2
    7a1a:	6818      	ldr	r0, [r3, #0]
    7a1c:	f7ff feb1 	bl	7782 <Adc_Ip_Init>
    {
        ADC_ResetSupplyMonitoringChannel();
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    Adc_Ip_axState[Instance].Init = FALSE;
    7a20:	4a07      	ldr	r2, [pc, #28]	; (7a40 <Adc_Ip_DeInit+0x110>)
    7a22:	ab42      	add	r3, sp, #264	; 0x108
    7a24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    7a28:	681b      	ldr	r3, [r3, #0]
    7a2a:	214c      	movs	r1, #76	; 0x4c
    7a2c:	fb01 f303 	mul.w	r3, r1, r3
    7a30:	4413      	add	r3, r2
    7a32:	2200      	movs	r2, #0
    7a34:	701a      	strb	r2, [r3, #0]
}
    7a36:	bf00      	nop
    7a38:	b043      	add	sp, #268	; 0x10c
    7a3a:	f85d fb04 	ldr.w	pc, [sp], #4
    7a3e:	bf00      	nop
    7a40:	1fff8d00 	.word	0x1fff8d00

00007a44 <Adc_Ip_SetAveraging>:
* @implements     Adc_Ip_SetAveraging_Activity
* END**************************************************************************/
void Adc_Ip_SetAveraging(const uint32 Instance,
                         const boolean AvgEn,
                         const Adc_Ip_AvgSelectType AvgSel)
{
    7a44:	b500      	push	{lr}
    7a46:	b087      	sub	sp, #28
    7a48:	9003      	str	r0, [sp, #12]
    7a4a:	460b      	mov	r3, r1
    7a4c:	9201      	str	r2, [sp, #4]
    7a4e:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7a52:	4a0a      	ldr	r2, [pc, #40]	; (7a7c <Adc_Ip_SetAveraging+0x38>)
    7a54:	9b03      	ldr	r3, [sp, #12]
    7a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a5a:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27();
    7a5c:	f009 fa1c 	bl	10e98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>
    Adc_HwAcc_SetAveraging(Base, AvgEn, AvgSel);
    7a60:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7a64:	9a01      	ldr	r2, [sp, #4]
    7a66:	4619      	mov	r1, r3
    7a68:	9805      	ldr	r0, [sp, #20]
    7a6a:	f7ff fd73 	bl	7554 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27();
    7a6e:	f009 fa3f 	bl	10ef0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>
}
    7a72:	bf00      	nop
    7a74:	b007      	add	sp, #28
    7a76:	f85d fb04 	ldr.w	pc, [sp], #4
    7a7a:	bf00      	nop
    7a7c:	000184c8 	.word	0x000184c8

00007a80 <Adc_Ip_SetSampleTime>:
*
* @implements     Adc_Ip_SetSampleTime_Activity
* END**************************************************************************/
void Adc_Ip_SetSampleTime(const uint32 Instance,
                          const uint8 SampleTime)
{
    7a80:	b500      	push	{lr}
    7a82:	b085      	sub	sp, #20
    7a84:	9001      	str	r0, [sp, #4]
    7a86:	460b      	mov	r3, r1
    7a88:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7a8c:	4a09      	ldr	r2, [pc, #36]	; (7ab4 <Adc_Ip_SetSampleTime+0x34>)
    7a8e:	9b01      	ldr	r3, [sp, #4]
    7a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a94:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16();
    7a96:	f008 fe79 	bl	1078c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>
    Adc_HwAcc_SetSampleTime(Base, SampleTime);
    7a9a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7a9e:	4619      	mov	r1, r3
    7aa0:	9803      	ldr	r0, [sp, #12]
    7aa2:	f7ff fd36 	bl	7512 <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16();
    7aa6:	f008 fe9d 	bl	107e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>
}
    7aaa:	bf00      	nop
    7aac:	b005      	add	sp, #20
    7aae:	f85d fb04 	ldr.w	pc, [sp], #4
    7ab2:	bf00      	nop
    7ab4:	000184c8 	.word	0x000184c8

00007ab8 <Adc_Ip_EnableDma>:
* Description   : This function enables DMA.
*
* @implements     Adc_Ip_EnableDma_Activity
* END**************************************************************************/
void Adc_Ip_EnableDma(const uint32 Instance)
{
    7ab8:	b500      	push	{lr}
    7aba:	b085      	sub	sp, #20
    7abc:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7abe:	4a0a      	ldr	r2, [pc, #40]	; (7ae8 <Adc_Ip_EnableDma+0x30>)
    7ac0:	9b01      	ldr	r3, [sp, #4]
    7ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ac6:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26();
    7ac8:	f009 f994 	bl	10df4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>
    Base->SC2 |= ADC_SC2_DMAEN_MASK;
    7acc:	9b03      	ldr	r3, [sp, #12]
    7ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7ad2:	f043 0204 	orr.w	r2, r3, #4
    7ad6:	9b03      	ldr	r3, [sp, #12]
    7ad8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26();
    7adc:	f009 f9b6 	bl	10e4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>
}
    7ae0:	bf00      	nop
    7ae2:	b005      	add	sp, #20
    7ae4:	f85d fb04 	ldr.w	pc, [sp], #4
    7ae8:	000184c8 	.word	0x000184c8

00007aec <Adc_Ip_DisableDma>:
* Description   : This function disables DMA.
*
* @implements     Adc_Ip_DisableDma_Activity
* END**************************************************************************/
void Adc_Ip_DisableDma(const uint32 Instance)
{
    7aec:	b500      	push	{lr}
    7aee:	b085      	sub	sp, #20
    7af0:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7af2:	4a0a      	ldr	r2, [pc, #40]	; (7b1c <Adc_Ip_DisableDma+0x30>)
    7af4:	9b01      	ldr	r3, [sp, #4]
    7af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7afa:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22();
    7afc:	f009 f832 	bl	10b64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>
    Base->SC2 &= ~(ADC_SC2_DMAEN_MASK);
    7b00:	9b03      	ldr	r3, [sp, #12]
    7b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7b06:	f023 0204 	bic.w	r2, r3, #4
    7b0a:	9b03      	ldr	r3, [sp, #12]
    7b0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22();
    7b10:	f009 f854 	bl	10bbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>
}
    7b14:	bf00      	nop
    7b16:	b005      	add	sp, #20
    7b18:	f85d fb04 	ldr.w	pc, [sp], #4
    7b1c:	000184c8 	.word	0x000184c8

00007b20 <Adc_Ip_SetTriggerMode>:
*
* @implements     Adc_Ip_SetTriggerMode_Activity
* END**************************************************************************/
void Adc_Ip_SetTriggerMode(const uint32 Instance,
                           const Adc_Ip_TrigType TriggerMode)
{
    7b20:	b500      	push	{lr}
    7b22:	b085      	sub	sp, #20
    7b24:	9001      	str	r0, [sp, #4]
    7b26:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7b28:	4a08      	ldr	r2, [pc, #32]	; (7b4c <Adc_Ip_SetTriggerMode+0x2c>)
    7b2a:	9b01      	ldr	r3, [sp, #4]
    7b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b30:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23();
    7b32:	f009 f869 	bl	10c08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    7b36:	9900      	ldr	r1, [sp, #0]
    7b38:	9803      	ldr	r0, [sp, #12]
    7b3a:	f7ff fd4e 	bl	75da <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23();
    7b3e:	f009 f88f 	bl	10c60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>
}
    7b42:	bf00      	nop
    7b44:	b005      	add	sp, #20
    7b46:	f85d fb04 	ldr.w	pc, [sp], #4
    7b4a:	bf00      	nop
    7b4c:	000184c8 	.word	0x000184c8

00007b50 <Adc_Ip_SetContinuousMode>:
*
* @implements     Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Adc_Ip_SetContinuousMode(const uint32 Instance,
                              const boolean ContinuousModeEnable)
{
    7b50:	b500      	push	{lr}
    7b52:	b085      	sub	sp, #20
    7b54:	9001      	str	r0, [sp, #4]
    7b56:	460b      	mov	r3, r1
    7b58:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7b5c:	4a11      	ldr	r2, [pc, #68]	; (7ba4 <Adc_Ip_SetContinuousMode+0x54>)
    7b5e:	9b01      	ldr	r3, [sp, #4]
    7b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b64:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30();
    7b66:	f009 fa8d 	bl	11084 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>
    uint32 Sc3Reg = Base->SC3;
    7b6a:	9b03      	ldr	r3, [sp, #12]
    7b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    7b70:	9302      	str	r3, [sp, #8]
    Sc3Reg &= ~(ADC_SC3_ADCO_MASK);
    7b72:	9b02      	ldr	r3, [sp, #8]
    7b74:	f023 0308 	bic.w	r3, r3, #8
    7b78:	9302      	str	r3, [sp, #8]
    Sc3Reg |= ADC_SC3_ADCO(ContinuousModeEnable ? 1u : 0u);
    7b7a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7b7e:	2b00      	cmp	r3, #0
    7b80:	d001      	beq.n	7b86 <Adc_Ip_SetContinuousMode+0x36>
    7b82:	2308      	movs	r3, #8
    7b84:	e000      	b.n	7b88 <Adc_Ip_SetContinuousMode+0x38>
    7b86:	2300      	movs	r3, #0
    7b88:	9a02      	ldr	r2, [sp, #8]
    7b8a:	4313      	orrs	r3, r2
    7b8c:	9302      	str	r3, [sp, #8]
    Base->SC3 = Sc3Reg;
    7b8e:	9b03      	ldr	r3, [sp, #12]
    7b90:	9a02      	ldr	r2, [sp, #8]
    7b92:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30();
    7b96:	f009 faa1 	bl	110dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>
}
    7b9a:	bf00      	nop
    7b9c:	b005      	add	sp, #20
    7b9e:	f85d fb04 	ldr.w	pc, [sp], #4
    7ba2:	bf00      	nop
    7ba4:	000184c8 	.word	0x000184c8

00007ba8 <Adc_Ip_SetResolution>:
*
* @implements     Adc_Ip_SetResolution_Activity
* END**************************************************************************/
void Adc_Ip_SetResolution(const uint32 Instance,
                          const Adc_Ip_ResolutionType Resolution)
{
    7ba8:	b500      	push	{lr}
    7baa:	b085      	sub	sp, #20
    7bac:	9001      	str	r0, [sp, #4]
    7bae:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7bb0:	4a0e      	ldr	r2, [pc, #56]	; (7bec <Adc_Ip_SetResolution+0x44>)
    7bb2:	9b01      	ldr	r3, [sp, #4]
    7bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bb8:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10();
    7bba:	f008 fab3 	bl	10124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>
    uint32 Cfg1Reg = Base->CFG1;
    7bbe:	9b03      	ldr	r3, [sp, #12]
    7bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7bc2:	9302      	str	r3, [sp, #8]
    Cfg1Reg &= ~(ADC_CFG1_MODE_MASK);
    7bc4:	9b02      	ldr	r3, [sp, #8]
    7bc6:	f023 030c 	bic.w	r3, r3, #12
    7bca:	9302      	str	r3, [sp, #8]
    Cfg1Reg |= ADC_CFG1_MODE(Resolution);
    7bcc:	9b00      	ldr	r3, [sp, #0]
    7bce:	009b      	lsls	r3, r3, #2
    7bd0:	f003 030c 	and.w	r3, r3, #12
    7bd4:	9a02      	ldr	r2, [sp, #8]
    7bd6:	4313      	orrs	r3, r2
    7bd8:	9302      	str	r3, [sp, #8]
    Base->CFG1 = Cfg1Reg;
    7bda:	9b03      	ldr	r3, [sp, #12]
    7bdc:	9a02      	ldr	r2, [sp, #8]
    7bde:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10();
    7be0:	f008 facc 	bl	1017c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>
}
    7be4:	bf00      	nop
    7be6:	b005      	add	sp, #20
    7be8:	f85d fb04 	ldr.w	pc, [sp], #4
    7bec:	000184c8 	.word	0x000184c8

00007bf0 <Adc_Ip_SetClockMode>:
*
* @implements     Adc_Ip_SetClockMode_Activity
* END**************************************************************************/
void Adc_Ip_SetClockMode(const uint32 Instance,
                         const Adc_Ip_ClockConfigType * const Config)
{
    7bf0:	b500      	push	{lr}
    7bf2:	b085      	sub	sp, #20
    7bf4:	9001      	str	r0, [sp, #4]
    7bf6:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7bf8:	4a15      	ldr	r2, [pc, #84]	; (7c50 <Adc_Ip_SetClockMode+0x60>)
    7bfa:	9b01      	ldr	r3, [sp, #4]
    7bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c00:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11();
    7c02:	f008 fc29 	bl	10458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    7c06:	9b00      	ldr	r3, [sp, #0]
    7c08:	6819      	ldr	r1, [r3, #0]
    7c0a:	9b00      	ldr	r3, [sp, #0]
    7c0c:	685b      	ldr	r3, [r3, #4]
    7c0e:	461a      	mov	r2, r3
    7c10:	9803      	ldr	r0, [sp, #12]
    7c12:	f7ff fc23 	bl	745c <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11();
    7c16:	f008 fc4b 	bl	104b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14();
    7c1a:	f008 fd13 	bl	10644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    7c1e:	9b00      	ldr	r3, [sp, #0]
    7c20:	7a1b      	ldrb	r3, [r3, #8]
    7c22:	4619      	mov	r1, r3
    7c24:	9803      	ldr	r0, [sp, #12]
    7c26:	f7ff fc74 	bl	7512 <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14();
    7c2a:	f008 fd37 	bl	1069c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28();
    7c2e:	f009 f985 	bl	10f3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    7c32:	9b00      	ldr	r3, [sp, #0]
    7c34:	7a59      	ldrb	r1, [r3, #9]
    7c36:	9b00      	ldr	r3, [sp, #0]
    7c38:	68db      	ldr	r3, [r3, #12]
    7c3a:	461a      	mov	r2, r3
    7c3c:	9803      	ldr	r0, [sp, #12]
    7c3e:	f7ff fc89 	bl	7554 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28();
    7c42:	f009 f9a7 	bl	10f94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>
}
    7c46:	bf00      	nop
    7c48:	b005      	add	sp, #20
    7c4a:	f85d fb04 	ldr.w	pc, [sp], #4
    7c4e:	bf00      	nop
    7c50:	000184c8 	.word	0x000184c8

00007c54 <Adc_Ip_ConfigChannel>:
*
* @implements     Adc_Ip_ConfigChannel_Activity
* END**************************************************************************/
void Adc_Ip_ConfigChannel(const uint32 Instance,
                          const Adc_Ip_ChanConfigType * const ChanConfig)
{
    7c54:	b510      	push	{r4, lr}
    7c56:	b084      	sub	sp, #16
    7c58:	9001      	str	r0, [sp, #4]
    7c5a:	9100      	str	r1, [sp, #0]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)ChanConfig->Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7c5c:	4a13      	ldr	r2, [pc, #76]	; (7cac <Adc_Ip_ConfigChannel+0x58>)
    7c5e:	9b01      	ldr	r3, [sp, #4]
    7c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c64:	9303      	str	r3, [sp, #12]
        InputChanDemapped = ADC_IP_INPUTCHAN_INT0;
    }
    else
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    {
        InputChanDemapped = ChanConfig->Channel;
    7c66:	9b00      	ldr	r3, [sp, #0]
    7c68:	685b      	ldr	r3, [r3, #4]
    7c6a:	9302      	str	r3, [sp, #8]
    }

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21();
    7c6c:	f008 ff28 	bl	10ac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, ChanConfig->InterruptEnable);
    7c70:	9b00      	ldr	r3, [sp, #0]
    7c72:	7819      	ldrb	r1, [r3, #0]
    7c74:	9b00      	ldr	r3, [sp, #0]
    7c76:	7a1b      	ldrb	r3, [r3, #8]
    7c78:	9a02      	ldr	r2, [sp, #8]
    7c7a:	9803      	ldr	r0, [sp, #12]
    7c7c:	f7ff fcd5 	bl	762a <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, FALSE);
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21();
    7c80:	f008 ff4a 	bl	10b18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>

    /* Also update in state structure */
    Adc_Ip_axState[Instance].ChannelConfig[ChanConfig->ChnIdx] = ChanConfig->Channel;
    7c84:	9b00      	ldr	r3, [sp, #0]
    7c86:	781b      	ldrb	r3, [r3, #0]
    7c88:	461c      	mov	r4, r3
    7c8a:	9b00      	ldr	r3, [sp, #0]
    7c8c:	6859      	ldr	r1, [r3, #4]
    7c8e:	4808      	ldr	r0, [pc, #32]	; (7cb0 <Adc_Ip_ConfigChannel+0x5c>)
    7c90:	9a01      	ldr	r2, [sp, #4]
    7c92:	4613      	mov	r3, r2
    7c94:	00db      	lsls	r3, r3, #3
    7c96:	4413      	add	r3, r2
    7c98:	005b      	lsls	r3, r3, #1
    7c9a:	4413      	add	r3, r2
    7c9c:	4423      	add	r3, r4
    7c9e:	3302      	adds	r3, #2
    7ca0:	009b      	lsls	r3, r3, #2
    7ca2:	4403      	add	r3, r0
    7ca4:	6059      	str	r1, [r3, #4]
}
    7ca6:	bf00      	nop
    7ca8:	b004      	add	sp, #16
    7caa:	bd10      	pop	{r4, pc}
    7cac:	000184c8 	.word	0x000184c8
    7cb0:	1fff8d00 	.word	0x1fff8d00

00007cb4 <Adc_Ip_SetDisabledChannel>:
* @implements     Adc_Ip_SetDisabledChannel_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_SetDisabledChannel(const uint32 Instance,
                                            const uint8 ControlChanIdx,
                                            const boolean WithTimeout)
{
    7cb4:	b500      	push	{lr}
    7cb6:	b089      	sub	sp, #36	; 0x24
    7cb8:	9001      	str	r0, [sp, #4]
    7cba:	460b      	mov	r3, r1
    7cbc:	f88d 3003 	strb.w	r3, [sp, #3]
    7cc0:	4613      	mov	r3, r2
    7cc2:	f88d 3002 	strb.w	r3, [sp, #2]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7cc6:	4a24      	ldr	r2, [pc, #144]	; (7d58 <Adc_Ip_SetDisabledChannel+0xa4>)
    7cc8:	9b01      	ldr	r3, [sp, #4]
    7cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cce:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    7cd0:	2300      	movs	r3, #0
    7cd2:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    7cd4:	2100      	movs	r1, #0
    7cd6:	4821      	ldr	r0, [pc, #132]	; (7d5c <Adc_Ip_SetDisabledChannel+0xa8>)
    7cd8:	f7fa f8b6 	bl	1e48 <OsIf_MicrosToTicks>
    7cdc:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    7cde:	2000      	movs	r0, #0
    7ce0:	f7fa f866 	bl	1db0 <OsIf_GetCounter>
    7ce4:	4603      	mov	r3, r0
    7ce6:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    7ce8:	2300      	movs	r3, #0
    7cea:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17();
    7cec:	f008 fda0 	bl	10830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>
    /* Set input channel select to disabled */
    SC1(Base, ControlChanIdx) |= ADC_SC1_ADCH_MASK;
    7cf0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7cf4:	9b05      	ldr	r3, [sp, #20]
    7cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7cfa:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7cfe:	f043 011f 	orr.w	r1, r3, #31
    7d02:	9b05      	ldr	r3, [sp, #20]
    7d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17();
    7d08:	f008 fdbe 	bl	10888 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>

    if (WithTimeout == TRUE)
    7d0c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7d10:	2b00      	cmp	r3, #0
    7d12:	d01c      	beq.n	7d4e <Adc_Ip_SetDisabledChannel+0x9a>
    {
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    7d14:	e008      	b.n	7d28 <Adc_Ip_SetDisabledChannel+0x74>
        {
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    7d16:	ab03      	add	r3, sp, #12
    7d18:	2100      	movs	r1, #0
    7d1a:	4618      	mov	r0, r3
    7d1c:	f7fa f861 	bl	1de2 <OsIf_GetElapsed>
    7d20:	4602      	mov	r2, r0
    7d22:	9b06      	ldr	r3, [sp, #24]
    7d24:	4413      	add	r3, r2
    7d26:	9306      	str	r3, [sp, #24]
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    7d28:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7d2c:	9b05      	ldr	r3, [sp, #20]
    7d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7d32:	f003 031f 	and.w	r3, r3, #31
    7d36:	2b1f      	cmp	r3, #31
    7d38:	d003      	beq.n	7d42 <Adc_Ip_SetDisabledChannel+0x8e>
    7d3a:	9a06      	ldr	r2, [sp, #24]
    7d3c:	9b04      	ldr	r3, [sp, #16]
    7d3e:	429a      	cmp	r2, r3
    7d40:	d3e9      	bcc.n	7d16 <Adc_Ip_SetDisabledChannel+0x62>
        }
        if (ElapsedTicks >= TimeoutTicks)
    7d42:	9a06      	ldr	r2, [sp, #24]
    7d44:	9b04      	ldr	r3, [sp, #16]
    7d46:	429a      	cmp	r2, r3
    7d48:	d301      	bcc.n	7d4e <Adc_Ip_SetDisabledChannel+0x9a>
        {
            Status = ADC_IP_STATUS_TIMEOUT;
    7d4a:	2302      	movs	r3, #2
    7d4c:	9307      	str	r3, [sp, #28]
        }
    }

    return Status;
    7d4e:	9b07      	ldr	r3, [sp, #28]
}
    7d50:	4618      	mov	r0, r3
    7d52:	b009      	add	sp, #36	; 0x24
    7d54:	f85d fb04 	ldr.w	pc, [sp], #4
    7d58:	000184c8 	.word	0x000184c8
    7d5c:	000186a0 	.word	0x000186a0

00007d60 <Adc_Ip_StartConversion>:
* @implements     Adc_Ip_StartConversion_Activity
* END**************************************************************************/
void Adc_Ip_StartConversion(const uint32 Instance,
                            Adc_Ip_InputChannelType InputChannel,
                            const boolean InterruptEnable)
{
    7d60:	b500      	push	{lr}
    7d62:	b087      	sub	sp, #28
    7d64:	9003      	str	r0, [sp, #12]
    7d66:	9102      	str	r1, [sp, #8]
    7d68:	4613      	mov	r3, r2
    7d6a:	f88d 3007 	strb.w	r3, [sp, #7]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7d6e:	4a0a      	ldr	r2, [pc, #40]	; (7d98 <Adc_Ip_StartConversion+0x38>)
    7d70:	9b03      	ldr	r3, [sp, #12]
    7d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d76:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18();
    7d78:	f008 fdac 	bl	108d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>
    /* Configure SC1A register */
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, InterruptEnable);
    7d7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7d80:	9a02      	ldr	r2, [sp, #8]
    7d82:	2100      	movs	r1, #0
    7d84:	9805      	ldr	r0, [sp, #20]
    7d86:	f7ff fc50 	bl	762a <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, FALSE);
    (void)InterruptEnable;
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18();
    7d8a:	f008 fdcf 	bl	1092c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>
}
    7d8e:	bf00      	nop
    7d90:	b007      	add	sp, #28
    7d92:	f85d fb04 	ldr.w	pc, [sp], #4
    7d96:	bf00      	nop
    7d98:	000184c8 	.word	0x000184c8

00007d9c <Adc_Ip_GetConvActiveFlag>:
* Description   : Reads and return conversion active flag status.
*
* @implements     Adc_Ip_GetConvActiveFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvActiveFlag(const uint32 Instance)
{
    7d9c:	b084      	sub	sp, #16
    7d9e:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7da0:	4a0b      	ldr	r2, [pc, #44]	; (7dd0 <Adc_Ip_GetConvActiveFlag+0x34>)
    7da2:	9b01      	ldr	r3, [sp, #4]
    7da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7da8:	9303      	str	r3, [sp, #12]
    uint32 Sc2Reg = Base->SC2;
    7daa:	9b03      	ldr	r3, [sp, #12]
    7dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7db0:	9302      	str	r3, [sp, #8]

    Sc2Reg = (Sc2Reg & ADC_SC2_ADACT_MASK) >> ADC_SC2_ADACT_SHIFT;
    7db2:	9b02      	ldr	r3, [sp, #8]
    7db4:	09db      	lsrs	r3, r3, #7
    7db6:	f003 0301 	and.w	r3, r3, #1
    7dba:	9302      	str	r3, [sp, #8]

    return (Sc2Reg != 0u) ? TRUE : FALSE;
    7dbc:	9b02      	ldr	r3, [sp, #8]
    7dbe:	2b00      	cmp	r3, #0
    7dc0:	bf14      	ite	ne
    7dc2:	2301      	movne	r3, #1
    7dc4:	2300      	moveq	r3, #0
    7dc6:	b2db      	uxtb	r3, r3
}
    7dc8:	4618      	mov	r0, r3
    7dca:	b004      	add	sp, #16
    7dcc:	4770      	bx	lr
    7dce:	bf00      	nop
    7dd0:	000184c8 	.word	0x000184c8

00007dd4 <Adc_Ip_GetChanInterrupt>:
*
* @implements     Adc_Ip_GetChanInterrupt_Activity
* END**************************************************************************/
boolean Adc_Ip_GetChanInterrupt(const uint32 Instance,
                                const uint8 ControlChanIdx)
{
    7dd4:	b500      	push	{lr}
    7dd6:	b085      	sub	sp, #20
    7dd8:	9001      	str	r0, [sp, #4]
    7dda:	460b      	mov	r3, r1
    7ddc:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    7de0:	4a08      	ldr	r2, [pc, #32]	; (7e04 <Adc_Ip_GetChanInterrupt+0x30>)
    7de2:	9b01      	ldr	r3, [sp, #4]
    7de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7de8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7df0:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetAIEN(Sc1Reg);
    7df2:	9803      	ldr	r0, [sp, #12]
    7df4:	f7ff fc5e 	bl	76b4 <Adc_HwAcc_GetAIEN>
    7df8:	4603      	mov	r3, r0
}
    7dfa:	4618      	mov	r0, r3
    7dfc:	b005      	add	sp, #20
    7dfe:	f85d fb04 	ldr.w	pc, [sp], #4
    7e02:	bf00      	nop
    7e04:	000184c8 	.word	0x000184c8

00007e08 <Adc_Ip_GetConvCompleteFlag>:
*
* @implements     Adc_Ip_GetConvCompleteFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvCompleteFlag(const uint32 Instance,
                                   const uint8 ControlChanIdx)
{
    7e08:	b500      	push	{lr}
    7e0a:	b085      	sub	sp, #20
    7e0c:	9001      	str	r0, [sp, #4]
    7e0e:	460b      	mov	r3, r1
    7e10:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    7e14:	4a08      	ldr	r2, [pc, #32]	; (7e38 <Adc_Ip_GetConvCompleteFlag+0x30>)
    7e16:	9b01      	ldr	r3, [sp, #4]
    7e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e1c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7e24:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetCOCO(Sc1Reg);
    7e26:	9803      	ldr	r0, [sp, #12]
    7e28:	f7ff fc52 	bl	76d0 <Adc_HwAcc_GetCOCO>
    7e2c:	4603      	mov	r3, r0
}
    7e2e:	4618      	mov	r0, r3
    7e30:	b005      	add	sp, #20
    7e32:	f85d fb04 	ldr.w	pc, [sp], #4
    7e36:	bf00      	nop
    7e38:	000184c8 	.word	0x000184c8

00007e3c <Adc_Ip_GetConvData>:
*
* @implements     Adc_Ip_GetConvData_Activity
* END**************************************************************************/
uint16 Adc_Ip_GetConvData(const uint32 Instance,
                          const uint8 ControlChanIdx)
{
    7e3c:	b500      	push	{lr}
    7e3e:	b085      	sub	sp, #20
    7e40:	9001      	str	r0, [sp, #4]
    7e42:	460b      	mov	r3, r1
    7e44:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7e48:	4a07      	ldr	r2, [pc, #28]	; (7e68 <Adc_Ip_GetConvData+0x2c>)
    7e4a:	9b01      	ldr	r3, [sp, #4]
    7e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e50:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetData(Base, ControlChanIdx);
    7e52:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7e56:	4619      	mov	r1, r3
    7e58:	9803      	ldr	r0, [sp, #12]
    7e5a:	f7ff fc47 	bl	76ec <Adc_HwAcc_GetData>
    7e5e:	4603      	mov	r3, r0
}
    7e60:	4618      	mov	r0, r3
    7e62:	b005      	add	sp, #20
    7e64:	f85d fb04 	ldr.w	pc, [sp], #4
    7e68:	000184c8 	.word	0x000184c8

00007e6c <Adc_Ip_DoCalibration>:
* specified frequency (50Mhz) and greater than minimum specified frequency (20Mhz).
*
* @implements     Adc_Ip_DoCalibration_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_DoCalibration(const uint32 Instance)
{
    7e6c:	b500      	push	{lr}
    7e6e:	b093      	sub	sp, #76	; 0x4c
    7e70:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7e72:	4a59      	ldr	r2, [pc, #356]	; (7fd8 <Adc_Ip_DoCalibration+0x16c>)
    7e74:	9b01      	ldr	r3, [sp, #4]
    7e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e7a:	930f      	str	r3, [sp, #60]	; 0x3c
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    7e7c:	2300      	movs	r3, #0
    7e7e:	9311      	str	r3, [sp, #68]	; 0x44
    Adc_Ip_TrigType TriggerMode;
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    7e80:	2100      	movs	r1, #0
    7e82:	4856      	ldr	r0, [pc, #344]	; (7fdc <Adc_Ip_DoCalibration+0x170>)
    7e84:	f7f9 ffe0 	bl	1e48 <OsIf_MicrosToTicks>
    7e88:	900e      	str	r0, [sp, #56]	; 0x38
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    7e8a:	2000      	movs	r0, #0
    7e8c:	f7f9 ff90 	bl	1db0 <OsIf_GetCounter>
    7e90:	4603      	mov	r3, r0
    7e92:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 ElapsedTicks = 0u;
    7e94:	2300      	movs	r3, #0
    7e96:	9310      	str	r3, [sp, #64]	; 0x40
    uint32 Reg;
    Adc_Ip_ClockConfigType PreClockConfig;
    Adc_Ip_ClockConfigType CalClockConfig;

    /* Store settings before calibration */
    Reg = Base->SC3;
    7e98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    7e9e:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.AvgEn = ((Reg & ADC_SC3_AVGE_MASK) != 0u) ? TRUE : FALSE;
    7ea0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7ea2:	089b      	lsrs	r3, r3, #2
    7ea4:	f003 0301 	and.w	r3, r3, #1
    7ea8:	2b00      	cmp	r3, #0
    7eaa:	bf14      	ite	ne
    7eac:	2301      	movne	r3, #1
    7eae:	2300      	moveq	r3, #0
    7eb0:	b2db      	uxtb	r3, r3
    7eb2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    PreClockConfig.AvgSel = Adc_HwAcc_GetAverageSelect(Reg);
    7eb6:	980d      	ldr	r0, [sp, #52]	; 0x34
    7eb8:	f7ff fb71 	bl	759e <Adc_HwAcc_GetAverageSelect>
    7ebc:	4603      	mov	r3, r0
    7ebe:	930a      	str	r3, [sp, #40]	; 0x28

    Reg = Base->CFG2;
    7ec0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7ec4:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.SampleTime = (uint8) ((Reg & ADC_CFG2_SMPLTS_MASK) >> ADC_CFG2_SMPLTS_SHIFT);
    7ec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7ec8:	b2db      	uxtb	r3, r3
    7eca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    TriggerMode = Adc_HwAcc_GetTriggerMode(Base->SC2);
    7ece:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7ed4:	4618      	mov	r0, r3
    7ed6:	f7ff fb99 	bl	760c <Adc_HwAcc_GetTriggerMode>
    7eda:	900c      	str	r0, [sp, #48]	; 0x30

    Reg = Base->CFG1;
    7edc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7ee0:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.ClockDivide = Adc_HwAcc_GetClockDivide(Reg);
    7ee2:	980d      	ldr	r0, [sp, #52]	; 0x34
    7ee4:	f7ff fad8 	bl	7498 <Adc_HwAcc_GetClockDivide>
    7ee8:	4603      	mov	r3, r0
    7eea:	9307      	str	r3, [sp, #28]
    PreClockConfig.InputClock = Adc_HwAcc_GetInputClock(Reg);
    7eec:	980d      	ldr	r0, [sp, #52]	; 0x34
    7eee:	f7ff faf2 	bl	74d6 <Adc_HwAcc_GetInputClock>
    7ef2:	4603      	mov	r3, r0
    7ef4:	9308      	str	r3, [sp, #32]

    CalClockConfig.AvgEn = TRUE;
    7ef6:	2301      	movs	r3, #1
    7ef8:	f88d 3015 	strb.w	r3, [sp, #21]
    CalClockConfig.AvgSel = ADC_IP_AVG_32_CONV;
    7efc:	2303      	movs	r3, #3
    7efe:	9306      	str	r3, [sp, #24]
    CalClockConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    7f00:	230c      	movs	r3, #12
    7f02:	f88d 3014 	strb.w	r3, [sp, #20]
    CalClockConfig.ClockDivide = Adc_Ip_axState[Instance].CalibrationClockDivide;
    7f06:	4a36      	ldr	r2, [pc, #216]	; (7fe0 <Adc_Ip_DoCalibration+0x174>)
    7f08:	9b01      	ldr	r3, [sp, #4]
    7f0a:	214c      	movs	r1, #76	; 0x4c
    7f0c:	fb01 f303 	mul.w	r3, r1, r3
    7f10:	4413      	add	r3, r2
    7f12:	3304      	adds	r3, #4
    7f14:	681b      	ldr	r3, [r3, #0]
    7f16:	9303      	str	r3, [sp, #12]
    CalClockConfig.InputClock = PreClockConfig.InputClock;
    7f18:	9b08      	ldr	r3, [sp, #32]
    7f1a:	9304      	str	r3, [sp, #16]

    /* Prepare required settings for calibration. */
    ADC_DoCalibration_SetParams(Base, &CalClockConfig, ADC_IP_TRIGGER_SOFTWARE);
    7f1c:	ab03      	add	r3, sp, #12
    7f1e:	2200      	movs	r2, #0
    7f20:	4619      	mov	r1, r3
    7f22:	980f      	ldr	r0, [sp, #60]	; 0x3c
    7f24:	f7ff fbfa 	bl	771c <ADC_DoCalibration_SetParams>

    Base->CLPS = 0u;
    7f28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f2a:	2200      	movs	r2, #0
    7f2c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    Base->CLP3 = 0u;
    7f30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f32:	2200      	movs	r2, #0
    7f34:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    Base->CLP2 = 0u;
    7f38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f3a:	2200      	movs	r2, #0
    7f3c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    Base->CLP1 = 0u;
    7f40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f42:	2200      	movs	r2, #0
    7f44:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Base->CLP0 = 0u;
    7f48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f4a:	2200      	movs	r2, #0
    7f4c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    Base->CLPX = 0u;
    7f50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f52:	2200      	movs	r2, #0
    7f54:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    Base->CLP9 = 0u;
    7f58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f5a:	2200      	movs	r2, #0
    7f5c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Start calibration by writing to the calibration field */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    7f60:	f009 f83e 	bl	10fe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Reg = Base->SC3;
    7f64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    7f6a:	930d      	str	r3, [sp, #52]	; 0x34
    Reg &= ~(ADC_SC3_CAL_MASK);
    7f6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7f6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    7f72:	930d      	str	r3, [sp, #52]	; 0x34
    Reg |= ADC_SC3_CAL(1u);
    7f74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    7f7a:	930d      	str	r3, [sp, #52]	; 0x34
    Base->SC3 = Reg;
    7f7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7f80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    7f84:	f009 f858 	bl	11038 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Wait for the calibration to finish */
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    7f88:	e008      	b.n	7f9c <Adc_Ip_DoCalibration+0x130>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    7f8a:	ab0b      	add	r3, sp, #44	; 0x2c
    7f8c:	2100      	movs	r1, #0
    7f8e:	4618      	mov	r0, r3
    7f90:	f7f9 ff27 	bl	1de2 <OsIf_GetElapsed>
    7f94:	4602      	mov	r2, r0
    7f96:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7f98:	4413      	add	r3, r2
    7f9a:	9310      	str	r3, [sp, #64]	; 0x40
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    7f9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    7fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7fa6:	2b00      	cmp	r3, #0
    7fa8:	d003      	beq.n	7fb2 <Adc_Ip_DoCalibration+0x146>
    7faa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7fac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7fae:	429a      	cmp	r2, r3
    7fb0:	d3eb      	bcc.n	7f8a <Adc_Ip_DoCalibration+0x11e>
    }
    if (ElapsedTicks >= TimeoutTicks)
    7fb2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7fb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7fb6:	429a      	cmp	r2, r3
    7fb8:	d301      	bcc.n	7fbe <Adc_Ip_DoCalibration+0x152>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    7fba:	2302      	movs	r3, #2
    7fbc:	9311      	str	r3, [sp, #68]	; 0x44
    }

    /* Revert settings as same as before calibration. */
    ADC_DoCalibration_SetParams(Base, &PreClockConfig, TriggerMode);
    7fbe:	ab07      	add	r3, sp, #28
    7fc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7fc2:	4619      	mov	r1, r3
    7fc4:	980f      	ldr	r0, [sp, #60]	; 0x3c
    7fc6:	f7ff fba9 	bl	771c <ADC_DoCalibration_SetParams>

    /* Clear COCO flag */
    (void) R(Base, 0u);
    7fca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return Status;
    7fce:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    7fd0:	4618      	mov	r0, r3
    7fd2:	b013      	add	sp, #76	; 0x4c
    7fd4:	f85d fb04 	ldr.w	pc, [sp], #4
    7fd8:	000184c8 	.word	0x000184c8
    7fdc:	000186a0 	.word	0x000186a0
    7fe0:	1fff8d00 	.word	0x1fff8d00

00007fe4 <Adc_Ip_ClearLatchedTriggers>:
* has been deactivated.
*
* @implements     Adc_Ip_ClearLatchedTriggers_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_ClearLatchedTriggers(const uint32 Instance)
{
    7fe4:	b500      	push	{lr}
    7fe6:	b089      	sub	sp, #36	; 0x24
    7fe8:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7fea:	4a1e      	ldr	r2, [pc, #120]	; (8064 <Adc_Ip_ClearLatchedTriggers+0x80>)
    7fec:	9b01      	ldr	r3, [sp, #4]
    7fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ff2:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    7ff4:	2300      	movs	r3, #0
    7ff6:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    7ff8:	2100      	movs	r1, #0
    7ffa:	481b      	ldr	r0, [pc, #108]	; (8068 <Adc_Ip_ClearLatchedTriggers+0x84>)
    7ffc:	f7f9 ff24 	bl	1e48 <OsIf_MicrosToTicks>
    8000:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    8002:	2000      	movs	r0, #0
    8004:	f7f9 fed4 	bl	1db0 <OsIf_GetCounter>
    8008:	4603      	mov	r3, r0
    800a:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    800c:	2300      	movs	r3, #0
    800e:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12();
    8010:	f008 fa74 	bl	104fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>
    /* Write bit to clear latched triggers */
    Base->CFG1 |= ADC_CFG1_CLRLTRG(0x01u);
    8014:	9b05      	ldr	r3, [sp, #20]
    8016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8018:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    801c:	9b05      	ldr	r3, [sp, #20]
    801e:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12();
    8020:	f008 fa98 	bl	10554 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>

    /* Wait for latched triggers to be cleared */
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8024:	e008      	b.n	8038 <Adc_Ip_ClearLatchedTriggers+0x54>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    8026:	ab03      	add	r3, sp, #12
    8028:	2100      	movs	r1, #0
    802a:	4618      	mov	r0, r3
    802c:	f7f9 fed9 	bl	1de2 <OsIf_GetElapsed>
    8030:	4602      	mov	r2, r0
    8032:	9b06      	ldr	r3, [sp, #24]
    8034:	4413      	add	r3, r2
    8036:	9306      	str	r3, [sp, #24]
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8038:	9b05      	ldr	r3, [sp, #20]
    803a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    803e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    8042:	2b00      	cmp	r3, #0
    8044:	d003      	beq.n	804e <Adc_Ip_ClearLatchedTriggers+0x6a>
    8046:	9a06      	ldr	r2, [sp, #24]
    8048:	9b04      	ldr	r3, [sp, #16]
    804a:	429a      	cmp	r2, r3
    804c:	d3eb      	bcc.n	8026 <Adc_Ip_ClearLatchedTriggers+0x42>
    }
    if (ElapsedTicks >= TimeoutTicks)
    804e:	9a06      	ldr	r2, [sp, #24]
    8050:	9b04      	ldr	r3, [sp, #16]
    8052:	429a      	cmp	r2, r3
    8054:	d301      	bcc.n	805a <Adc_Ip_ClearLatchedTriggers+0x76>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    8056:	2302      	movs	r3, #2
    8058:	9307      	str	r3, [sp, #28]
    }

    return Status;
    805a:	9b07      	ldr	r3, [sp, #28]
}
    805c:	4618      	mov	r0, r3
    805e:	b009      	add	sp, #36	; 0x24
    8060:	f85d fb04 	ldr.w	pc, [sp], #4
    8064:	000184c8 	.word	0x000184c8
    8068:	000186a0 	.word	0x000186a0

0000806c <Adc_Ip_EnableChannelNotification>:
*
* @implements     Adc_Ip_EnableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_EnableChannelNotification(const uint32 Instance,
                                      const uint8 ControlChanIdx)
{
    806c:	b500      	push	{lr}
    806e:	b085      	sub	sp, #20
    8070:	9001      	str	r0, [sp, #4]
    8072:	460b      	mov	r3, r1
    8074:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8078:	4a0c      	ldr	r2, [pc, #48]	; (80ac <Adc_Ip_EnableChannelNotification+0x40>)
    807a:	9b01      	ldr	r3, [sp, #4]
    807c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8080:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19();
    8082:	f008 fc79 	bl	10978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>
    SC1(Base, ControlChanIdx) |= ADC_SC1_AIEN_MASK;
    8086:	f89d 2003 	ldrb.w	r2, [sp, #3]
    808a:	9b03      	ldr	r3, [sp, #12]
    808c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8090:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8094:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    8098:	9b03      	ldr	r3, [sp, #12]
    809a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19();
    809e:	f008 fc97 	bl	109d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>
}
    80a2:	bf00      	nop
    80a4:	b005      	add	sp, #20
    80a6:	f85d fb04 	ldr.w	pc, [sp], #4
    80aa:	bf00      	nop
    80ac:	000184c8 	.word	0x000184c8

000080b0 <Adc_Ip_DisableChannelNotification>:
*
* @implements     Adc_Ip_DisableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_DisableChannelNotification(const uint32 Instance,
                                       const uint8 ControlChanIdx)
{
    80b0:	b500      	push	{lr}
    80b2:	b085      	sub	sp, #20
    80b4:	9001      	str	r0, [sp, #4]
    80b6:	460b      	mov	r3, r1
    80b8:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    80bc:	4a0c      	ldr	r2, [pc, #48]	; (80f0 <Adc_Ip_DisableChannelNotification+0x40>)
    80be:	9b01      	ldr	r3, [sp, #4]
    80c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80c4:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20();
    80c6:	f008 fca9 	bl	10a1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>
    SC1(Base, ControlChanIdx) &= ~(ADC_SC1_AIEN_MASK);
    80ca:	f89d 2003 	ldrb.w	r2, [sp, #3]
    80ce:	9b03      	ldr	r3, [sp, #12]
    80d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    80d4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    80d8:	f023 0140 	bic.w	r1, r3, #64	; 0x40
    80dc:	9b03      	ldr	r3, [sp, #12]
    80de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20();
    80e2:	f008 fcc7 	bl	10a74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>
}
    80e6:	bf00      	nop
    80e8:	b005      	add	sp, #20
    80ea:	f85d fb04 	ldr.w	pc, [sp], #4
    80ee:	bf00      	nop
    80f0:	000184c8 	.word	0x000184c8

000080f4 <Adc_Ip_ClearTrigErrReg>:
* Description   : This function clears all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_ClearTrigErrReg_Activity
* END**************************************************************************/
void Adc_Ip_ClearTrigErrReg(const uint32 Instance)
{
    80f4:	b500      	push	{lr}
    80f6:	b085      	sub	sp, #20
    80f8:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    80fa:	4a0a      	ldr	r2, [pc, #40]	; (8124 <Adc_Ip_ClearTrigErrReg+0x30>)
    80fc:	9b01      	ldr	r3, [sp, #4]
    80fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8102:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25();
    8104:	f008 fe24 	bl	10d50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>
    Base->SC2 |= ADC_SC2_TRGSTERR_MASK;
    8108:	9b03      	ldr	r3, [sp, #12]
    810a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    810e:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
    8112:	9b03      	ldr	r3, [sp, #12]
    8114:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25();
    8118:	f008 fe46 	bl	10da8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>
}
    811c:	bf00      	nop
    811e:	b005      	add	sp, #20
    8120:	f85d fb04 	ldr.w	pc, [sp], #4
    8124:	000184c8 	.word	0x000184c8

00008128 <Adc_Ip_GetTrigErrReg>:
* Description   : This function returns all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_GetTrigErrReg_Activity
* END**************************************************************************/
uint32 Adc_Ip_GetTrigErrReg(const uint32 Instance)
{
    8128:	b084      	sub	sp, #16
    812a:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    812c:	4a06      	ldr	r2, [pc, #24]	; (8148 <Adc_Ip_GetTrigErrReg+0x20>)
    812e:	9b01      	ldr	r3, [sp, #4]
    8130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8134:	9303      	str	r3, [sp, #12]

    return (Base->SC2 & ADC_SC2_TRGSTERR_MASK) >> ADC_SC2_TRGSTERR_SHIFT;
    8136:	9b03      	ldr	r3, [sp, #12]
    8138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    813c:	0e1b      	lsrs	r3, r3, #24
    813e:	f003 030f 	and.w	r3, r3, #15
}
    8142:	4618      	mov	r0, r3
    8144:	b004      	add	sp, #16
    8146:	4770      	bx	lr
    8148:	000184c8 	.word	0x000184c8

0000814c <Adc_Ip_GetDataAddress>:
 *
 * @implements     Adc_Ip_GetDataAddress_Activity
 *END*************************************************************************/
uint32 Adc_Ip_GetDataAddress(const uint32 Instance,
                             const uint8 Index)
{
    814c:	b082      	sub	sp, #8
    814e:	9001      	str	r0, [sp, #4]
    8150:	460b      	mov	r3, r1
    8152:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    return (uint32)&(R(Adc_Ip_apxBase[Instance], Index));
    8156:	4a06      	ldr	r2, [pc, #24]	; (8170 <Adc_Ip_GetDataAddress+0x24>)
    8158:	9b01      	ldr	r3, [sp, #4]
    815a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    815e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8162:	3312      	adds	r3, #18
    8164:	009b      	lsls	r3, r3, #2
    8166:	4413      	add	r3, r2
}
    8168:	4618      	mov	r0, r3
    816a:	b002      	add	sp, #8
    816c:	4770      	bx	lr
    816e:	bf00      	nop
    8170:	000184c8 	.word	0x000184c8

00008174 <Adc_Ip_GetChanData>:
* @implements     Adc_Ip_GetChanData_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_GetChanData(const uint32 Instance,
                                     const Adc_Ip_InputChannelType Channel,
                                     uint16 * const Result)
{
    8174:	b088      	sub	sp, #32
    8176:	9003      	str	r0, [sp, #12]
    8178:	9102      	str	r1, [sp, #8]
    817a:	9201      	str	r2, [sp, #4]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    817c:	4a25      	ldr	r2, [pc, #148]	; (8214 <Adc_Ip_GetChanData+0xa0>)
    817e:	9b03      	ldr	r3, [sp, #12]
    8180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8184:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8186:	2300      	movs	r3, #0
    8188:	9307      	str	r3, [sp, #28]
    uint16 Temp = 0u;
    818a:	2300      	movs	r3, #0
    818c:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 ControlChanIdx;
    boolean Found = FALSE;
    8190:	2300      	movs	r3, #0
    8192:	f88d 3018 	strb.w	r3, [sp, #24]

    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8196:	2300      	movs	r3, #0
    8198:	f88d 3019 	strb.w	r3, [sp, #25]
    819c:	e019      	b.n	81d2 <Adc_Ip_GetChanData+0x5e>
    {
        if (Adc_Ip_axState[Instance].ChannelConfig[ControlChanIdx] == Channel)
    819e:	f89d 1019 	ldrb.w	r1, [sp, #25]
    81a2:	481d      	ldr	r0, [pc, #116]	; (8218 <Adc_Ip_GetChanData+0xa4>)
    81a4:	9a03      	ldr	r2, [sp, #12]
    81a6:	4613      	mov	r3, r2
    81a8:	00db      	lsls	r3, r3, #3
    81aa:	4413      	add	r3, r2
    81ac:	005b      	lsls	r3, r3, #1
    81ae:	4413      	add	r3, r2
    81b0:	440b      	add	r3, r1
    81b2:	3302      	adds	r3, #2
    81b4:	009b      	lsls	r3, r3, #2
    81b6:	4403      	add	r3, r0
    81b8:	685b      	ldr	r3, [r3, #4]
    81ba:	9a02      	ldr	r2, [sp, #8]
    81bc:	429a      	cmp	r2, r3
    81be:	d103      	bne.n	81c8 <Adc_Ip_GetChanData+0x54>
        {
            Found = TRUE;
    81c0:	2301      	movs	r3, #1
    81c2:	f88d 3018 	strb.w	r3, [sp, #24]
            break;
    81c6:	e008      	b.n	81da <Adc_Ip_GetChanData+0x66>
    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    81c8:	f89d 3019 	ldrb.w	r3, [sp, #25]
    81cc:	3301      	adds	r3, #1
    81ce:	f88d 3019 	strb.w	r3, [sp, #25]
    81d2:	f89d 3019 	ldrb.w	r3, [sp, #25]
    81d6:	2b0f      	cmp	r3, #15
    81d8:	d9e1      	bls.n	819e <Adc_Ip_GetChanData+0x2a>
        }
    }

    if (Found == TRUE)
    81da:	f89d 3018 	ldrb.w	r3, [sp, #24]
    81de:	2b00      	cmp	r3, #0
    81e0:	d00e      	beq.n	8200 <Adc_Ip_GetChanData+0x8c>
    {
        Temp = (uint16) R(Base, ControlChanIdx);
    81e2:	f89d 2019 	ldrb.w	r2, [sp, #25]
    81e6:	9b05      	ldr	r3, [sp, #20]
    81e8:	3212      	adds	r2, #18
    81ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    81ee:	f8ad 301a 	strh.w	r3, [sp, #26]
        Temp = (uint16) ((Temp & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    81f2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    81f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    81fa:	f8ad 301a 	strh.w	r3, [sp, #26]
    81fe:	e001      	b.n	8204 <Adc_Ip_GetChanData+0x90>
    }
    else
    {
        Status = ADC_IP_STATUS_ERROR;
    8200:	2301      	movs	r3, #1
    8202:	9307      	str	r3, [sp, #28]
    }

    *Result = Temp;
    8204:	9b01      	ldr	r3, [sp, #4]
    8206:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    820a:	801a      	strh	r2, [r3, #0]

    return Status;
    820c:	9b07      	ldr	r3, [sp, #28]
}
    820e:	4618      	mov	r0, r3
    8210:	b008      	add	sp, #32
    8212:	4770      	bx	lr
    8214:	000184c8 	.word	0x000184c8
    8218:	1fff8d00 	.word	0x1fff8d00

0000821c <Adc_Ip_IRQHandler>:
 * Note          : It's required to read result data in user notification in order to clear the COCO flags and avoid ISR getting invoked repeatedly
 *
 * @implements     Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Adc_Ip_IRQHandler(const uint32 Instance)
{
    821c:	b500      	push	{lr}
    821e:	b085      	sub	sp, #20
    8220:	9001      	str	r0, [sp, #4]
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    uint8 ControlChanIdx;
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    uint32 Sc1Reg;
    boolean ChanIntFlag = FALSE;
    8222:	2300      	movs	r3, #0
    8224:	f88d 300e 	strb.w	r3, [sp, #14]
    boolean ChanCocoFlag = FALSE;
    8228:	2300      	movs	r3, #0
    822a:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Check whether the respective driver is initialized */
    if (TRUE == Adc_Ip_axState[Instance].Init)
    822e:	4a32      	ldr	r2, [pc, #200]	; (82f8 <Adc_Ip_IRQHandler+0xdc>)
    8230:	9b01      	ldr	r3, [sp, #4]
    8232:	214c      	movs	r1, #76	; 0x4c
    8234:	fb01 f303 	mul.w	r3, r1, r3
    8238:	4413      	add	r3, r2
    823a:	781b      	ldrb	r3, [r3, #0]
    823c:	2b00      	cmp	r3, #0
    823e:	d040      	beq.n	82c2 <Adc_Ip_IRQHandler+0xa6>
    {
        /* Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop) */
        if (Adc_Ip_axState[Instance].ConversionCompleteNotification != NULL_PTR)
    8240:	4a2d      	ldr	r2, [pc, #180]	; (82f8 <Adc_Ip_IRQHandler+0xdc>)
    8242:	9b01      	ldr	r3, [sp, #4]
    8244:	214c      	movs	r1, #76	; 0x4c
    8246:	fb01 f303 	mul.w	r3, r1, r3
    824a:	4413      	add	r3, r2
    824c:	3308      	adds	r3, #8
    824e:	681b      	ldr	r3, [r3, #0]
    8250:	2b00      	cmp	r3, #0
    8252:	d04d      	beq.n	82f0 <Adc_Ip_IRQHandler+0xd4>
        {
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8254:	2300      	movs	r3, #0
    8256:	f88d 300f 	strb.w	r3, [sp, #15]
    825a:	e02d      	b.n	82b8 <Adc_Ip_IRQHandler+0x9c>
            {
                Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    825c:	4a27      	ldr	r2, [pc, #156]	; (82fc <Adc_Ip_IRQHandler+0xe0>)
    825e:	9b01      	ldr	r3, [sp, #4]
    8260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8264:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    826c:	9302      	str	r3, [sp, #8]
                ChanIntFlag = Adc_HwAcc_GetAIEN(Sc1Reg);
    826e:	9802      	ldr	r0, [sp, #8]
    8270:	f7ff fa20 	bl	76b4 <Adc_HwAcc_GetAIEN>
    8274:	4603      	mov	r3, r0
    8276:	f88d 300e 	strb.w	r3, [sp, #14]
                ChanCocoFlag = Adc_HwAcc_GetCOCO(Sc1Reg);
    827a:	9802      	ldr	r0, [sp, #8]
    827c:	f7ff fa28 	bl	76d0 <Adc_HwAcc_GetCOCO>
    8280:	4603      	mov	r3, r0
    8282:	f88d 300d 	strb.w	r3, [sp, #13]
                /* CPR_RTD_00664
                 * Check if the interrupt not spurious (the interrupt is enabled and equivalent conversion has finished)
                 * Ignore spurious ones (return immediately from ISR)
                 */
                if ((TRUE == ChanIntFlag) && (TRUE == ChanCocoFlag))
    8286:	f89d 300e 	ldrb.w	r3, [sp, #14]
    828a:	2b00      	cmp	r3, #0
    828c:	d00f      	beq.n	82ae <Adc_Ip_IRQHandler+0x92>
    828e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8292:	2b00      	cmp	r3, #0
    8294:	d00b      	beq.n	82ae <Adc_Ip_IRQHandler+0x92>
                {
                    /* Call the associated callback.
                     * The COCO flag will be cleared by reading the respective result data register in the callback
                     */
                    Adc_Ip_axState[Instance].ConversionCompleteNotification(ControlChanIdx);
    8296:	4a18      	ldr	r2, [pc, #96]	; (82f8 <Adc_Ip_IRQHandler+0xdc>)
    8298:	9b01      	ldr	r3, [sp, #4]
    829a:	214c      	movs	r1, #76	; 0x4c
    829c:	fb01 f303 	mul.w	r3, r1, r3
    82a0:	4413      	add	r3, r2
    82a2:	3308      	adds	r3, #8
    82a4:	681b      	ldr	r3, [r3, #0]
    82a6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    82aa:	4610      	mov	r0, r2
    82ac:	4798      	blx	r3
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    82ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    82b2:	3301      	adds	r3, #1
    82b4:	f88d 300f 	strb.w	r3, [sp, #15]
    82b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    82bc:	2b0f      	cmp	r3, #15
    82be:	d9cd      	bls.n	825c <Adc_Ip_IRQHandler+0x40>
        {
            /* Do a dummy read to clear the COCO flags */
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
        }
    }
}
    82c0:	e016      	b.n	82f0 <Adc_Ip_IRQHandler+0xd4>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    82c2:	2300      	movs	r3, #0
    82c4:	f88d 300f 	strb.w	r3, [sp, #15]
    82c8:	e00e      	b.n	82e8 <Adc_Ip_IRQHandler+0xcc>
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
    82ca:	4a0c      	ldr	r2, [pc, #48]	; (82fc <Adc_Ip_IRQHandler+0xe0>)
    82cc:	9b01      	ldr	r3, [sp, #4]
    82ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82d2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    82d6:	4611      	mov	r1, r2
    82d8:	4618      	mov	r0, r3
    82da:	f7ff fa07 	bl	76ec <Adc_HwAcc_GetData>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    82de:	f89d 300f 	ldrb.w	r3, [sp, #15]
    82e2:	3301      	adds	r3, #1
    82e4:	f88d 300f 	strb.w	r3, [sp, #15]
    82e8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    82ec:	2b0f      	cmp	r3, #15
    82ee:	d9ec      	bls.n	82ca <Adc_Ip_IRQHandler+0xae>
}
    82f0:	bf00      	nop
    82f2:	b005      	add	sp, #20
    82f4:	f85d fb04 	ldr.w	pc, [sp], #4
    82f8:	1fff8d00 	.word	0x1fff8d00
    82fc:	000184c8 	.word	0x000184c8

00008300 <Adc_0_Isr>:
==================================================================================================*/
#define ADC_START_SEC_CODE
#include "Adc_MemMap.h"

ISR(Adc_0_Isr)
{
    8300:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(0UL);
    8302:	2000      	movs	r0, #0
    8304:	f7ff ff8a 	bl	821c <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    8308:	f3bf 8f4f 	dsb	sy
}
    830c:	bf00      	nop
    830e:	bd08      	pop	{r3, pc}

00008310 <Adc_1_Isr>:

#if (ADC_INSTANCE_COUNT > 1)
ISR(Adc_1_Isr)
{
    8310:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(1UL);
    8312:	2001      	movs	r0, #1
    8314:	f7ff ff82 	bl	821c <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    8318:	f3bf 8f4f 	dsb	sy
}
    831c:	bf00      	nop
    831e:	bd08      	pop	{r3, pc}

00008320 <Lpspi_Ip_ChannelFinished>:
* @param[in]     Instance            Index of the hardware instance.
* @param[in]     ErrorFlag           Save the status of transfer error flags
* @return void
*/
static void Lpspi_Ip_ChannelFinished(uint8 Instance, boolean ErrorFlag)
{
    8320:	b500      	push	{lr}
    8322:	b085      	sub	sp, #20
    8324:	4603      	mov	r3, r0
    8326:	460a      	mov	r2, r1
    8328:	f88d 3007 	strb.w	r3, [sp, #7]
    832c:	4613      	mov	r3, r2
    832e:	f88d 3006 	strb.w	r3, [sp, #6]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    8332:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8336:	4a12      	ldr	r2, [pc, #72]	; (8380 <Lpspi_Ip_ChannelFinished+0x60>)
    8338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    833c:	9302      	str	r3, [sp, #8]
    Lpspi_Ip_EventType EventState = LPSPI_IP_EVENT_FAULT;
    833e:	2301      	movs	r3, #1
    8340:	9303      	str	r3, [sp, #12]
    
    if(TRUE == ErrorFlag)
    8342:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8346:	2b00      	cmp	r3, #0
    8348:	d005      	beq.n	8356 <Lpspi_Ip_ChannelFinished+0x36>
    {
        State->Status = LPSPI_IP_FAULT;
    834a:	9b02      	ldr	r3, [sp, #8]
    834c:	2203      	movs	r2, #3
    834e:	605a      	str	r2, [r3, #4]
        EventState = LPSPI_IP_EVENT_FAULT;
    8350:	2301      	movs	r3, #1
    8352:	9303      	str	r3, [sp, #12]
    8354:	e004      	b.n	8360 <Lpspi_Ip_ChannelFinished+0x40>
    }
    else
    {
        State->Status = LPSPI_IP_IDLE;
    8356:	9b02      	ldr	r3, [sp, #8]
    8358:	2201      	movs	r2, #1
    835a:	605a      	str	r2, [r3, #4]
        EventState = LPSPI_IP_EVENT_END_TRANSFER;
    835c:	2300      	movs	r3, #0
    835e:	9303      	str	r3, [sp, #12]
    }

    if (NULL_PTR != State->Callback)
    8360:	9b02      	ldr	r3, [sp, #8]
    8362:	691b      	ldr	r3, [r3, #16]
    8364:	2b00      	cmp	r3, #0
    8366:	d006      	beq.n	8376 <Lpspi_Ip_ChannelFinished+0x56>
    {
        State->Callback(Instance, EventState);
    8368:	9b02      	ldr	r3, [sp, #8]
    836a:	691b      	ldr	r3, [r3, #16]
    836c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8370:	9903      	ldr	r1, [sp, #12]
    8372:	4610      	mov	r0, r2
    8374:	4798      	blx	r3
    }
}
    8376:	bf00      	nop
    8378:	b005      	add	sp, #20
    837a:	f85d fb04 	ldr.w	pc, [sp], #4
    837e:	bf00      	nop
    8380:	1fff8dd8 	.word	0x1fff8dd8

00008384 <Lpspi_Ip_TransferProcess>:
*
* @param[in]     Instance      Index of the hardware instance.
* @return void
*/
static void Lpspi_Ip_TransferProcess(uint8 Instance)
{
    8384:	b510      	push	{r4, lr}
    8386:	b092      	sub	sp, #72	; 0x48
    8388:	4603      	mov	r3, r0
    838a:	f88d 300f 	strb.w	r3, [sp, #15]
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    838e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8392:	4aad      	ldr	r2, [pc, #692]	; (8648 <Lpspi_Ip_TransferProcess+0x2c4>)
    8394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8398:	9310      	str	r3, [sp, #64]	; 0x40
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    839a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    839e:	4aab      	ldr	r2, [pc, #684]	; (864c <Lpspi_Ip_TransferProcess+0x2c8>)
    83a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83a4:	930f      	str	r3, [sp, #60]	; 0x3c
    uint32 SrStatusRegister;
    uint8 NumberOfWrites = 0u;
    83a6:	2300      	movs	r3, #0
    83a8:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    uint8 NumberOfReads = 0u;
    83ac:	2300      	movs	r3, #0
    83ae:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    boolean ErrorFlag = FALSE;
    83b2:	2300      	movs	r3, #0
    83b4:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45

    if (LPSPI_IP_BUSY == State->Status)
    83b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    83ba:	685b      	ldr	r3, [r3, #4]
    83bc:	2b02      	cmp	r3, #2
    83be:	f040 821e 	bne.w	87fe <Lpspi_Ip_TransferProcess+0x47a>
    {
        /* Read Status and clear all flags. */
        SrStatusRegister = Base->SR;
    83c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    83c4:	695b      	ldr	r3, [r3, #20]
    83c6:	930e      	str	r3, [sp, #56]	; 0x38
        Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    83c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    83ca:	695b      	ldr	r3, [r3, #20]
    83cc:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    83d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    83d2:	615a      	str	r2, [r3, #20]
        
        if ((SrStatusRegister & (LPSPI_SR_REF_MASK | LPSPI_SR_TEF_MASK)) != 0u)
    83d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    83d6:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
    83da:	2b00      	cmp	r3, #0
    83dc:	d003      	beq.n	83e6 <Lpspi_Ip_TransferProcess+0x62>
        {
            /* mark error flag */
            ErrorFlag = TRUE;
    83de:	2301      	movs	r3, #1
    83e0:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    83e4:	e1f6      	b.n	87d4 <Lpspi_Ip_TransferProcess+0x450>
        }
        else
        {
            /* RECEIVE */
            /* Read all Data available in receive HW fifo. */
            NumberOfReads = (uint8)(((Base->FSR) & LPSPI_FSR_RXCOUNT_MASK) >> LPSPI_FSR_RXCOUNT_SHIFT);
    83e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    83e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    83ea:	0c1b      	lsrs	r3, r3, #16
    83ec:	b2db      	uxtb	r3, r3
    83ee:	f003 0307 	and.w	r3, r3, #7
    83f2:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
            if (NumberOfReads != 0u)
    83f6:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    83fa:	2b00      	cmp	r3, #0
    83fc:	f000 80cb 	beq.w	8596 <Lpspi_Ip_TransferProcess+0x212>
            {
                if (NumberOfReads > (State->ExpectedFifoReads - State->RxIndex))
    8400:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
    8404:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8406:	8b1b      	ldrh	r3, [r3, #24]
    8408:	4619      	mov	r1, r3
    840a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    840c:	8a9b      	ldrh	r3, [r3, #20]
    840e:	1acb      	subs	r3, r1, r3
    8410:	429a      	cmp	r2, r3
    8412:	dd08      	ble.n	8426 <Lpspi_Ip_TransferProcess+0xa2>
                {
                    NumberOfReads = (uint8)(State->ExpectedFifoReads - State->RxIndex);
    8414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8416:	8b1b      	ldrh	r3, [r3, #24]
    8418:	b2da      	uxtb	r2, r3
    841a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    841c:	8a9b      	ldrh	r3, [r3, #20]
    841e:	b2db      	uxtb	r3, r3
    8420:	1ad3      	subs	r3, r2, r3
    8422:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
                }
                /* If these are the first frames of this channel. Current TXFIFO slot must be plus 1 because the slot of CMD have moved out and
                  CurrentTxFifoSlot was minus 1 when prepare TX channel */
                if (0u == State->RxIndex)
    8426:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8428:	8a9b      	ldrh	r3, [r3, #20]
    842a:	2b00      	cmp	r3, #0
    842c:	d107      	bne.n	843e <Lpspi_Ip_TransferProcess+0xba>
                {
                    State->CurrentTxFifoSlot += 1u;
    842e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8434:	3301      	adds	r3, #1
    8436:	b2da      	uxtb	r2, r3
    8438:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    843a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    843e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8442:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    8446:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    844a:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    const LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    844e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    8452:	4a7d      	ldr	r2, [pc, #500]	; (8648 <Lpspi_Ip_TransferProcess+0x2c4>)
    8454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8458:	930c      	str	r3, [sp, #48]	; 0x30
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    845a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    845e:	4a7b      	ldr	r2, [pc, #492]	; (864c <Lpspi_Ip_TransferProcess+0x2c8>)
    8460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8464:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 Data = 0u;
    8466:	2300      	movs	r3, #0
    8468:	930a      	str	r3, [sp, #40]	; 0x28
    uint8 Index = 0u;
    846a:	2300      	movs	r3, #0
    846c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    if (NULL_PTR != State->RxBuffer)
    8470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8472:	689b      	ldr	r3, [r3, #8]
    8474:	2b00      	cmp	r3, #0
    8476:	d069      	beq.n	854c <Lpspi_Ip_TransferProcess+0x1c8>
        if (State->ExternalDevice->DeviceParams->FrameSize < 9u)
    8478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    847a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    847c:	68db      	ldr	r3, [r3, #12]
    847e:	881b      	ldrh	r3, [r3, #0]
    8480:	2b08      	cmp	r3, #8
    8482:	d81e      	bhi.n	84c2 <Lpspi_Ip_TransferProcess+0x13e>
            for (Index = 0; Index < NumberOfReads; Index++)
    8484:	2300      	movs	r3, #0
    8486:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    848a:	e013      	b.n	84b4 <Lpspi_Ip_TransferProcess+0x130>
                Data = Base->RDR;
    848c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    848e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8490:	930a      	str	r3, [sp, #40]	; 0x28
                *((uint8*)(&State->RxBuffer[State->RxIndex + Index])) = (uint8)Data;
    8492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8494:	689b      	ldr	r3, [r3, #8]
    8496:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8498:	8a92      	ldrh	r2, [r2, #20]
    849a:	4611      	mov	r1, r2
    849c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    84a0:	440a      	add	r2, r1
    84a2:	4413      	add	r3, r2
    84a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    84a6:	b2d2      	uxtb	r2, r2
    84a8:	701a      	strb	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    84aa:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    84ae:	3301      	adds	r3, #1
    84b0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    84b4:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    84b8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    84bc:	429a      	cmp	r2, r3
    84be:	d8e5      	bhi.n	848c <Lpspi_Ip_TransferProcess+0x108>
    84c0:	e055      	b.n	856e <Lpspi_Ip_TransferProcess+0x1ea>
        else if (State->ExternalDevice->DeviceParams->FrameSize < 17u)
    84c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    84c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    84c6:	68db      	ldr	r3, [r3, #12]
    84c8:	881b      	ldrh	r3, [r3, #0]
    84ca:	2b10      	cmp	r3, #16
    84cc:	d81f      	bhi.n	850e <Lpspi_Ip_TransferProcess+0x18a>
            for (Index = 0; Index < NumberOfReads; Index++)
    84ce:	2300      	movs	r3, #0
    84d0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    84d4:	e014      	b.n	8500 <Lpspi_Ip_TransferProcess+0x17c>
                Data = Base->RDR;
    84d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    84d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    84da:	930a      	str	r3, [sp, #40]	; 0x28
                *((uint16*)(&State->RxBuffer[2u * (State->RxIndex + Index)])) = (uint16)Data;
    84dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    84de:	689a      	ldr	r2, [r3, #8]
    84e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    84e2:	8a9b      	ldrh	r3, [r3, #20]
    84e4:	4619      	mov	r1, r3
    84e6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    84ea:	440b      	add	r3, r1
    84ec:	005b      	lsls	r3, r3, #1
    84ee:	4413      	add	r3, r2
    84f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    84f2:	b292      	uxth	r2, r2
    84f4:	801a      	strh	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    84f6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    84fa:	3301      	adds	r3, #1
    84fc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    8500:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    8504:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8508:	429a      	cmp	r2, r3
    850a:	d8e4      	bhi.n	84d6 <Lpspi_Ip_TransferProcess+0x152>
    850c:	e02f      	b.n	856e <Lpspi_Ip_TransferProcess+0x1ea>
            for (Index = 0; Index < NumberOfReads; Index++)
    850e:	2300      	movs	r3, #0
    8510:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    8514:	e013      	b.n	853e <Lpspi_Ip_TransferProcess+0x1ba>
                Data = Base->RDR;
    8516:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    851a:	930a      	str	r3, [sp, #40]	; 0x28
                *((uint32*)(&State->RxBuffer[4u * (State->RxIndex + Index)])) = (uint32)Data;
    851c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    851e:	689a      	ldr	r2, [r3, #8]
    8520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8522:	8a9b      	ldrh	r3, [r3, #20]
    8524:	4619      	mov	r1, r3
    8526:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    852a:	440b      	add	r3, r1
    852c:	009b      	lsls	r3, r3, #2
    852e:	4413      	add	r3, r2
    8530:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8532:	601a      	str	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    8534:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8538:	3301      	adds	r3, #1
    853a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    853e:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    8542:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8546:	429a      	cmp	r2, r3
    8548:	d8e5      	bhi.n	8516 <Lpspi_Ip_TransferProcess+0x192>
    854a:	e010      	b.n	856e <Lpspi_Ip_TransferProcess+0x1ea>
        for (Index = 0; Index < NumberOfReads; Index++)
    854c:	2300      	movs	r3, #0
    854e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    8552:	e006      	b.n	8562 <Lpspi_Ip_TransferProcess+0x1de>
            (void)Base->RDR;
    8554:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        for (Index = 0; Index < NumberOfReads; Index++)
    8558:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    855c:	3301      	adds	r3, #1
    855e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    8562:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    8566:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    856a:	429a      	cmp	r2, r3
    856c:	d8f2      	bhi.n	8554 <Lpspi_Ip_TransferProcess+0x1d0>
    State->RxIndex += NumberOfReads;
    856e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8570:	8a9a      	ldrh	r2, [r3, #20]
    8572:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    8576:	b29b      	uxth	r3, r3
    8578:	4413      	add	r3, r2
    857a:	b29a      	uxth	r2, r3
    857c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    857e:	829a      	strh	r2, [r3, #20]
}
    8580:	bf00      	nop
                }
                /* Read Data from RX FIFO */
                Lpspi_Ip_ReadDataFromFifo(Instance, NumberOfReads);
                /* Update current FIFO slots are available to fill .*/
                State->CurrentTxFifoSlot += NumberOfReads;
    8582:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8584:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    8588:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    858c:	4413      	add	r3, r2
    858e:	b2da      	uxtb	r2, r3
    8590:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            to fill TX FIFO. At that time, another interrupt occurred and preemptive current interrupt, and the time to process that interrupt is longer than the time to transfer all frames 
            in TX FIFO. So TX FIFO will be empty and some frames received in RX FIFO, then the program is returned from that interrupt and fill TX FIFO until full and exist SPI interrupt function. 
            And if there is a interrupt occurred with higher priority of SPI interrupt and the time to process that interrupt is longer than the time to transfer all frames in TX FIFO. 
            So, RX FIFO can be overflow due to SPI interrupt function is not serviced to read RX FIFO.
            State->CurrentTxFifoSlot variable is used to hanlde number of frames are "on bus transfer". They are always less than FIFO size */
            if((State->CurrentTxFifoSlot != 0u) && (State->TxDoneFlag != TRUE))
    8596:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    859c:	2b00      	cmp	r3, #0
    859e:	f000 8119 	beq.w	87d4 <Lpspi_Ip_TransferProcess+0x450>
    85a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    85a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    85a8:	f083 0301 	eor.w	r3, r3, #1
    85ac:	b2db      	uxtb	r3, r3
    85ae:	2b00      	cmp	r3, #0
    85b0:	f000 8110 	beq.w	87d4 <Lpspi_Ip_TransferProcess+0x450>
            {
                if(State->ExpectedFifoWrites != State->TxIndex)
    85b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    85b6:	8b5a      	ldrh	r2, [r3, #26]
    85b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    85ba:	8adb      	ldrh	r3, [r3, #22]
    85bc:	429a      	cmp	r2, r3
    85be:	f000 80ca 	beq.w	8756 <Lpspi_Ip_TransferProcess+0x3d2>
                {
                    NumberOfWrites = State->CurrentTxFifoSlot;
    85c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    85c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    85c8:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
                    /* Limits to remaining frames. */
                    if (NumberOfWrites > (State->ExpectedFifoWrites - State->TxIndex))
    85cc:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
    85d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    85d2:	8b5b      	ldrh	r3, [r3, #26]
    85d4:	4619      	mov	r1, r3
    85d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    85d8:	8adb      	ldrh	r3, [r3, #22]
    85da:	1acb      	subs	r3, r1, r3
    85dc:	429a      	cmp	r2, r3
    85de:	dd08      	ble.n	85f2 <Lpspi_Ip_TransferProcess+0x26e>
                    {
                        NumberOfWrites = (uint8)(State->ExpectedFifoWrites - State->TxIndex);
    85e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    85e2:	8b5b      	ldrh	r3, [r3, #26]
    85e4:	b2da      	uxtb	r2, r3
    85e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    85e8:	8adb      	ldrh	r3, [r3, #22]
    85ea:	b2db      	uxtb	r3, r3
    85ec:	1ad3      	subs	r3, r2, r3
    85ee:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    85f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    85f6:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    85fa:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    85fe:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    8602:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    8606:	4a10      	ldr	r2, [pc, #64]	; (8648 <Lpspi_Ip_TransferProcess+0x2c4>)
    8608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    860c:	9308      	str	r3, [sp, #32]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    860e:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    8612:	4a0e      	ldr	r2, [pc, #56]	; (864c <Lpspi_Ip_TransferProcess+0x2c8>)
    8614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8618:	9307      	str	r3, [sp, #28]
    uint32 Data = 0u;
    861a:	2300      	movs	r3, #0
    861c:	9306      	str	r3, [sp, #24]
    uint8 Index = 0u;
    861e:	2300      	movs	r3, #0
    8620:	f88d 3017 	strb.w	r3, [sp, #23]
    Data = State->ExternalDevice->DeviceParams->DefaultData;
    8624:	9b07      	ldr	r3, [sp, #28]
    8626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8628:	68db      	ldr	r3, [r3, #12]
    862a:	685b      	ldr	r3, [r3, #4]
    862c:	9306      	str	r3, [sp, #24]
    if (NULL_PTR != State->TxBuffer)
    862e:	9b07      	ldr	r3, [sp, #28]
    8630:	68db      	ldr	r3, [r3, #12]
    8632:	2b00      	cmp	r3, #0
    8634:	d068      	beq.n	8708 <Lpspi_Ip_TransferProcess+0x384>
        if (State->TxFrameSize < 9u)
    8636:	9b07      	ldr	r3, [sp, #28]
    8638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    863a:	2b08      	cmp	r3, #8
    863c:	d822      	bhi.n	8684 <Lpspi_Ip_TransferProcess+0x300>
            for (Index = 0; Index < NumberOfWrites; Index++)
    863e:	2300      	movs	r3, #0
    8640:	f88d 3017 	strb.w	r3, [sp, #23]
    8644:	e017      	b.n	8676 <Lpspi_Ip_TransferProcess+0x2f2>
    8646:	bf00      	nop
    8648:	000184d0 	.word	0x000184d0
    864c:	1fff8dd8 	.word	0x1fff8dd8
                Data = *((const uint8*)(&State->TxBuffer[State->TxIndex + Index]));
    8650:	9b07      	ldr	r3, [sp, #28]
    8652:	68db      	ldr	r3, [r3, #12]
    8654:	9a07      	ldr	r2, [sp, #28]
    8656:	8ad2      	ldrh	r2, [r2, #22]
    8658:	4611      	mov	r1, r2
    865a:	f89d 2017 	ldrb.w	r2, [sp, #23]
    865e:	440a      	add	r2, r1
    8660:	4413      	add	r3, r2
    8662:	781b      	ldrb	r3, [r3, #0]
    8664:	9306      	str	r3, [sp, #24]
                Base->TDR = Data;
    8666:	9b08      	ldr	r3, [sp, #32]
    8668:	9a06      	ldr	r2, [sp, #24]
    866a:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    866c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8670:	3301      	adds	r3, #1
    8672:	f88d 3017 	strb.w	r3, [sp, #23]
    8676:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    867a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    867e:	429a      	cmp	r2, r3
    8680:	d8e6      	bhi.n	8650 <Lpspi_Ip_TransferProcess+0x2cc>
    8682:	e053      	b.n	872c <Lpspi_Ip_TransferProcess+0x3a8>
        else if (State->TxFrameSize < 17u)
    8684:	9b07      	ldr	r3, [sp, #28]
    8686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8688:	2b10      	cmp	r3, #16
    868a:	d81e      	bhi.n	86ca <Lpspi_Ip_TransferProcess+0x346>
            for (Index = 0; Index < NumberOfWrites; Index++)
    868c:	2300      	movs	r3, #0
    868e:	f88d 3017 	strb.w	r3, [sp, #23]
    8692:	e013      	b.n	86bc <Lpspi_Ip_TransferProcess+0x338>
                Data = *((const uint16*)(&State->TxBuffer[2u * (State->TxIndex + Index)]));
    8694:	9b07      	ldr	r3, [sp, #28]
    8696:	68da      	ldr	r2, [r3, #12]
    8698:	9b07      	ldr	r3, [sp, #28]
    869a:	8adb      	ldrh	r3, [r3, #22]
    869c:	4619      	mov	r1, r3
    869e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    86a2:	440b      	add	r3, r1
    86a4:	005b      	lsls	r3, r3, #1
    86a6:	4413      	add	r3, r2
    86a8:	881b      	ldrh	r3, [r3, #0]
    86aa:	9306      	str	r3, [sp, #24]
                Base->TDR = Data;
    86ac:	9b08      	ldr	r3, [sp, #32]
    86ae:	9a06      	ldr	r2, [sp, #24]
    86b0:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    86b2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    86b6:	3301      	adds	r3, #1
    86b8:	f88d 3017 	strb.w	r3, [sp, #23]
    86bc:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    86c0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    86c4:	429a      	cmp	r2, r3
    86c6:	d8e5      	bhi.n	8694 <Lpspi_Ip_TransferProcess+0x310>
    86c8:	e030      	b.n	872c <Lpspi_Ip_TransferProcess+0x3a8>
            for (Index = 0; Index < NumberOfWrites; Index++)
    86ca:	2300      	movs	r3, #0
    86cc:	f88d 3017 	strb.w	r3, [sp, #23]
    86d0:	e013      	b.n	86fa <Lpspi_Ip_TransferProcess+0x376>
                Data = *((const uint32*)(&State->TxBuffer[4u * (State->TxIndex + Index)]));
    86d2:	9b07      	ldr	r3, [sp, #28]
    86d4:	68da      	ldr	r2, [r3, #12]
    86d6:	9b07      	ldr	r3, [sp, #28]
    86d8:	8adb      	ldrh	r3, [r3, #22]
    86da:	4619      	mov	r1, r3
    86dc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    86e0:	440b      	add	r3, r1
    86e2:	009b      	lsls	r3, r3, #2
    86e4:	4413      	add	r3, r2
    86e6:	681b      	ldr	r3, [r3, #0]
    86e8:	9306      	str	r3, [sp, #24]
                Base->TDR = Data;
    86ea:	9b08      	ldr	r3, [sp, #32]
    86ec:	9a06      	ldr	r2, [sp, #24]
    86ee:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    86f0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    86f4:	3301      	adds	r3, #1
    86f6:	f88d 3017 	strb.w	r3, [sp, #23]
    86fa:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    86fe:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8702:	429a      	cmp	r2, r3
    8704:	d8e5      	bhi.n	86d2 <Lpspi_Ip_TransferProcess+0x34e>
    8706:	e011      	b.n	872c <Lpspi_Ip_TransferProcess+0x3a8>
        for (Index = 0; Index < NumberOfWrites; Index++)
    8708:	2300      	movs	r3, #0
    870a:	f88d 3017 	strb.w	r3, [sp, #23]
    870e:	e007      	b.n	8720 <Lpspi_Ip_TransferProcess+0x39c>
            Base->TDR = Data;
    8710:	9b08      	ldr	r3, [sp, #32]
    8712:	9a06      	ldr	r2, [sp, #24]
    8714:	665a      	str	r2, [r3, #100]	; 0x64
        for (Index = 0; Index < NumberOfWrites; Index++)
    8716:	f89d 3017 	ldrb.w	r3, [sp, #23]
    871a:	3301      	adds	r3, #1
    871c:	f88d 3017 	strb.w	r3, [sp, #23]
    8720:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    8724:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8728:	429a      	cmp	r2, r3
    872a:	d8f1      	bhi.n	8710 <Lpspi_Ip_TransferProcess+0x38c>
    State->TxIndex += NumberOfWrites;
    872c:	9b07      	ldr	r3, [sp, #28]
    872e:	8ada      	ldrh	r2, [r3, #22]
    8730:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    8734:	b29b      	uxth	r3, r3
    8736:	4413      	add	r3, r2
    8738:	b29a      	uxth	r2, r3
    873a:	9b07      	ldr	r3, [sp, #28]
    873c:	82da      	strh	r2, [r3, #22]
}
    873e:	bf00      	nop
                    }
                    /* Push Data into TX FIFO */
                    Lpspi_Ip_PushDataToFifo(Instance, NumberOfWrites);
                    State->CurrentTxFifoSlot -= NumberOfWrites;
    8740:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8742:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    8746:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    874a:	1ad3      	subs	r3, r2, r3
    874c:	b2da      	uxtb	r2, r3
    874e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    8754:	e03e      	b.n	87d4 <Lpspi_Ip_TransferProcess+0x450>
                }
                else
                {
                    if(TRUE == State->NextTransferConfigAvailable)
    8756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8758:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    875c:	2b00      	cmp	r3, #0
    875e:	d01c      	beq.n	879a <Lpspi_Ip_TransferProcess+0x416>
                    {
                        /* Initialize next transfer */
                        State->ExternalDevice->DeviceParams->DefaultData = State->DefaultDataNext;
    8760:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8764:	68db      	ldr	r3, [r3, #12]
    8766:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8768:	6b52      	ldr	r2, [r2, #52]	; 0x34
    876a:	605a      	str	r2, [r3, #4]
                        State->FirstCmd = FALSE;
    876c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    876e:	2200      	movs	r2, #0
    8770:	775a      	strb	r2, [r3, #29]
                        Lpspi_TransmitTxInit(Instance, State->TxBufferNext, State->FrameSizeNext, State->LsbNext, State->LengthNext);
    8772:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8774:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    8776:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8778:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    877a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    877c:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
    8780:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8782:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    8784:	f89d 000f 	ldrb.w	r0, [sp, #15]
    8788:	9300      	str	r3, [sp, #0]
    878a:	4623      	mov	r3, r4
    878c:	f000 fb7a 	bl	8e84 <Lpspi_TransmitTxInit>
                        State->NextTransferConfigAvailable = FALSE;
    8790:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8792:	2200      	movs	r2, #0
    8794:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    8798:	e01c      	b.n	87d4 <Lpspi_Ip_TransferProcess+0x450>
                    }
                    else
                    {
                        State->TxDoneFlag = TRUE;
    879a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    879c:	2201      	movs	r2, #1
    879e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                        /* Disable TX interrupt */
                        Base->IER &= ~LPSPI_IER_TDIE_MASK;
    87a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    87a4:	699b      	ldr	r3, [r3, #24]
    87a6:	f023 0201 	bic.w	r2, r3, #1
    87aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    87ac:	619a      	str	r2, [r3, #24]
                        if((FALSE == State->KeepCs) && (0u != (Base->TCR & LPSPI_TCR_CONT_MASK)))
    87ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87b0:	7f1b      	ldrb	r3, [r3, #28]
    87b2:	f083 0301 	eor.w	r3, r3, #1
    87b6:	b2db      	uxtb	r3, r3
    87b8:	2b00      	cmp	r3, #0
    87ba:	d00b      	beq.n	87d4 <Lpspi_Ip_TransferProcess+0x450>
    87bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    87be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    87c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    87c4:	2b00      	cmp	r3, #0
    87c6:	d005      	beq.n	87d4 <Lpspi_Ip_TransferProcess+0x450>
                        {
                            /* Clear CS */
                            Base->TCR &= ~(LPSPI_TCR_CONT_MASK | LPSPI_TCR_CONTC_MASK);
    87c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    87ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    87cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
    87d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    87d2:	661a      	str	r2, [r3, #96]	; 0x60
                }
            }
        }
        
        /* End of transfer */
        if((State->RxIndex == State->ExpectedFifoReads) || (TRUE == ErrorFlag))
    87d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87d6:	8a9a      	ldrh	r2, [r3, #20]
    87d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87da:	8b1b      	ldrh	r3, [r3, #24]
    87dc:	429a      	cmp	r2, r3
    87de:	d003      	beq.n	87e8 <Lpspi_Ip_TransferProcess+0x464>
    87e0:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
    87e4:	2b00      	cmp	r3, #0
    87e6:	d00a      	beq.n	87fe <Lpspi_Ip_TransferProcess+0x47a>
                Base->TCR |= LPSPI_TCR_RXMSK(1);
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12();
            }
            #endif
            /* Disable interrupts */
            Base->IER = 0u;
    87e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    87ea:	2200      	movs	r2, #0
    87ec:	619a      	str	r2, [r3, #24]
            Lpspi_Ip_ChannelFinished(Instance, ErrorFlag);
    87ee:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
    87f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    87f6:	4611      	mov	r1, r2
    87f8:	4618      	mov	r0, r3
    87fa:	f7ff fd91 	bl	8320 <Lpspi_Ip_ChannelFinished>
        }
    }
}
    87fe:	bf00      	nop
    8800:	b012      	add	sp, #72	; 0x48
    8802:	bd10      	pop	{r4, pc}

00008804 <Lpspi_Ip_Init>:
    OsIf_Trusted_Call1param(Lpspi_Ip_SetUserAccess, Instance);
}
#endif /* LPSPI_IP_ENABLE_USER_MODE_SUPPORT */
/*================================================================================================*/
Lpspi_Ip_StatusType Lpspi_Ip_Init(const Lpspi_Ip_ConfigType *PhyUnitConfigPtr)
{
    8804:	b500      	push	{lr}
    8806:	b087      	sub	sp, #28
    8808:	9001      	str	r0, [sp, #4]
    LPSPI_Type* Base;
    Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    880a:	2300      	movs	r3, #0
    880c:	9305      	str	r3, [sp, #20]
    uint8 Instance = 0u;
    880e:	2300      	movs	r3, #0
    8810:	f88d 3013 	strb.w	r3, [sp, #19]

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(PhyUnitConfigPtr != NULL_PTR);
    #endif
    Instance = PhyUnitConfigPtr->Instance;
    8814:	9b01      	ldr	r3, [sp, #4]
    8816:	781b      	ldrb	r3, [r3, #0]
    8818:	f88d 3013 	strb.w	r3, [sp, #19]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    881c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8820:	4a23      	ldr	r2, [pc, #140]	; (88b0 <Lpspi_Ip_Init+0xac>)
    8822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8826:	9303      	str	r3, [sp, #12]
    Base = Lpspi_Ip_apxBases[Instance];
    8828:	f89d 3013 	ldrb.w	r3, [sp, #19]
    882c:	4a21      	ldr	r2, [pc, #132]	; (88b4 <Lpspi_Ip_Init+0xb0>)
    882e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8832:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(State == NULL_PTR);
    #endif
    Lpspi_Ip_apxStateStructureArray[Instance] = &Lpspi_Ip_axStateStructure[PhyUnitConfigPtr->StateIndex];
    8834:	9b01      	ldr	r3, [sp, #4]
    8836:	7c1b      	ldrb	r3, [r3, #16]
    8838:	461a      	mov	r2, r3
    883a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    883e:	0192      	lsls	r2, r2, #6
    8840:	491d      	ldr	r1, [pc, #116]	; (88b8 <Lpspi_Ip_Init+0xb4>)
    8842:	440a      	add	r2, r1
    8844:	491a      	ldr	r1, [pc, #104]	; (88b0 <Lpspi_Ip_Init+0xac>)
    8846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    884a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    884e:	4a18      	ldr	r2, [pc, #96]	; (88b0 <Lpspi_Ip_Init+0xac>)
    8850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8854:	9303      	str	r3, [sp, #12]
    State->PhyUnitConfig = PhyUnitConfigPtr;
    8856:	9b03      	ldr	r3, [sp, #12]
    8858:	9a01      	ldr	r2, [sp, #4]
    885a:	621a      	str	r2, [r3, #32]
    /* enable in debug mode to ensure CS will be kept when CPU halts at breakpoint */
    Base->CR = PhyUnitConfigPtr->Cr | LPSPI_CR_DBGEN_MASK;
    885c:	9b01      	ldr	r3, [sp, #4]
    885e:	685b      	ldr	r3, [r3, #4]
    8860:	f043 0208 	orr.w	r2, r3, #8
    8864:	9b02      	ldr	r3, [sp, #8]
    8866:	611a      	str	r2, [r3, #16]
    Base->CFGR1 = PhyUnitConfigPtr->Cfgr1;
    8868:	9b01      	ldr	r3, [sp, #4]
    886a:	689a      	ldr	r2, [r3, #8]
    886c:	9b02      	ldr	r3, [sp, #8]
    886e:	625a      	str	r2, [r3, #36]	; 0x24
    /* Set TX WATER. it will be set again in DMA mode */
    Base->FCR = LPSPI_FCR_TXWATER((uint32)LPSPI_IP_FIFO_SIZE_U8 - (uint32)1u);
    8870:	9b02      	ldr	r3, [sp, #8]
    8872:	2203      	movs	r2, #3
    8874:	659a      	str	r2, [r3, #88]	; 0x58
    #if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
    State->ClockMode = LPSPI_IP_NORMAL_CLOCK;
    #endif
    State->KeepCs = FALSE;
    8876:	9b03      	ldr	r3, [sp, #12]
    8878:	2200      	movs	r2, #0
    887a:	771a      	strb	r2, [r3, #28]
    State->FirstCmd = TRUE;
    887c:	9b03      	ldr	r3, [sp, #12]
    887e:	2201      	movs	r2, #1
    8880:	775a      	strb	r2, [r3, #29]
    #if ((STD_ON == LPSPI_IP_DMA_USED) && (STD_ON == LPSPI_IP_ENABLE_DMAFASTTRANSFER_SUPPORT))
    Lpspi_Ip_TxDmaTcdSGInit(Instance);
    Lpspi_Ip_RxDmaTcdSGInit(Instance);
    #endif
    /* set State to idle */
    State->Status = LPSPI_IP_IDLE;
    8882:	9b03      	ldr	r3, [sp, #12]
    8884:	2201      	movs	r2, #1
    8886:	605a      	str	r2, [r3, #4]
    (void)Lpspi_Ip_UpdateTransferMode(Instance, PhyUnitConfigPtr->TransferMode);
    8888:	9b01      	ldr	r3, [sp, #4]
    888a:	68da      	ldr	r2, [r3, #12]
    888c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8890:	4611      	mov	r1, r2
    8892:	4618      	mov	r0, r3
    8894:	f000 fd10 	bl	92b8 <Lpspi_Ip_UpdateTransferMode>
    
    /* Enable SPI module */
    Base->CR |= LPSPI_CR_MEN_MASK;
    8898:	9b02      	ldr	r3, [sp, #8]
    889a:	691b      	ldr	r3, [r3, #16]
    889c:	f043 0201 	orr.w	r2, r3, #1
    88a0:	9b02      	ldr	r3, [sp, #8]
    88a2:	611a      	str	r2, [r3, #16]
    return Status;
    88a4:	9b05      	ldr	r3, [sp, #20]
}
    88a6:	4618      	mov	r0, r3
    88a8:	b007      	add	sp, #28
    88aa:	f85d fb04 	ldr.w	pc, [sp], #4
    88ae:	bf00      	nop
    88b0:	1fff8dd8 	.word	0x1fff8dd8
    88b4:	000184d0 	.word	0x000184d0
    88b8:	1fff8d98 	.word	0x1fff8d98

000088bc <Lpspi_Ip_DeInit>:
/*================================================================================================*/
Lpspi_Ip_StatusType Lpspi_Ip_DeInit(uint8 Instance)
{
    88bc:	b086      	sub	sp, #24
    88be:	4603      	mov	r3, r0
    88c0:	f88d 3007 	strb.w	r3, [sp, #7]
    LPSPI_Type* Base;
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    88c4:	2300      	movs	r3, #0
    88c6:	9305      	str	r3, [sp, #20]

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    Base = Lpspi_Ip_apxBases[Instance];
    88c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    88cc:	4a11      	ldr	r2, [pc, #68]	; (8914 <Lpspi_Ip_DeInit+0x58>)
    88ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88d2:	9304      	str	r3, [sp, #16]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    88d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    88d8:	4a0f      	ldr	r2, [pc, #60]	; (8918 <Lpspi_Ip_DeInit+0x5c>)
    88da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88de:	9303      	str	r3, [sp, #12]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    if (LPSPI_IP_BUSY == State->Status)
    88e0:	9b03      	ldr	r3, [sp, #12]
    88e2:	685b      	ldr	r3, [r3, #4]
    88e4:	2b02      	cmp	r3, #2
    88e6:	d102      	bne.n	88ee <Lpspi_Ip_DeInit+0x32>
    {
        Status = LPSPI_IP_STATUS_FAIL;
    88e8:	2301      	movs	r3, #1
    88ea:	9305      	str	r3, [sp, #20]
    88ec:	e00e      	b.n	890c <Lpspi_Ip_DeInit+0x50>
    }
    else
    {
        /* Use reset hardware feature. */
        Base->CR |= LPSPI_CR_RST(1u);
    88ee:	9b04      	ldr	r3, [sp, #16]
    88f0:	691b      	ldr	r3, [r3, #16]
    88f2:	f043 0202 	orr.w	r2, r3, #2
    88f6:	9b04      	ldr	r3, [sp, #16]
    88f8:	611a      	str	r2, [r3, #16]
        Base->CR = 0;
    88fa:	9b04      	ldr	r3, [sp, #16]
    88fc:	2200      	movs	r2, #0
    88fe:	611a      	str	r2, [r3, #16]

        Lpspi_Ip_apxStateStructureArray[Instance] = NULL_PTR;
    8900:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8904:	4a04      	ldr	r2, [pc, #16]	; (8918 <Lpspi_Ip_DeInit+0x5c>)
    8906:	2100      	movs	r1, #0
    8908:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    return Status;
    890c:	9b05      	ldr	r3, [sp, #20]
}
    890e:	4618      	mov	r0, r3
    8910:	b006      	add	sp, #24
    8912:	4770      	bx	lr
    8914:	000184d0 	.word	0x000184d0
    8918:	1fff8dd8 	.word	0x1fff8dd8

0000891c <Lpspi_Ip_SyncTransmit>:
                                            const uint8 *TxBuffer,
                                            uint8 *RxBuffer,
                                            uint16 Length,
                                            uint32 TimeOut
                                         )
{
    891c:	b510      	push	{r4, lr}
    891e:	b09a      	sub	sp, #104	; 0x68
    8920:	9005      	str	r0, [sp, #20]
    8922:	9104      	str	r1, [sp, #16]
    8924:	9203      	str	r2, [sp, #12]
    8926:	f8ad 300a 	strh.w	r3, [sp, #10]
    LPSPI_Type *Base;
    Lpspi_Ip_StateStructureType *State;
    uint8 NumberOfWrites, NumberOfReads;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    892a:	2300      	movs	r3, #0
    892c:	9318      	str	r3, [sp, #96]	; 0x60
    uint32 TimeoutTicks = OsIf_MicrosToTicks(TimeOut, LPSPI_IP_TIMEOUT_METHOD);
    892e:	2100      	movs	r1, #0
    8930:	981c      	ldr	r0, [sp, #112]	; 0x70
    8932:	f7f9 fa89 	bl	1e48 <OsIf_MicrosToTicks>
    8936:	9015      	str	r0, [sp, #84]	; 0x54
    uint32 CurrentTicks = 0u; /* initialize current counter */
    8938:	2300      	movs	r3, #0
    893a:	9307      	str	r3, [sp, #28]
    uint32 ElapsedTicks = 0u; /* elapsed will give timeout */
    893c:	2300      	movs	r3, #0
    893e:	9317      	str	r3, [sp, #92]	; 0x5c
    uint8 Instance = 0u;
    8940:	2300      	movs	r3, #0
    8942:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    uint32 Cfgr1 = 0u;
    8946:	2300      	movs	r3, #0
    8948:	9313      	str	r3, [sp, #76]	; 0x4c
    boolean TxDoneFlag = FALSE;
    894a:	2300      	movs	r3, #0
    894c:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
    DevAssert(ExternalDevice != NULL_PTR);
    DevAssert(0u != Length);
    DevAssert(0u != TimeOut);
    Lpspi_Ip_CheckValidParameters(ExternalDevice, Length);
    #endif
    Instance = ExternalDevice->Instance;
    8950:	9b05      	ldr	r3, [sp, #20]
    8952:	781b      	ldrb	r3, [r3, #0]
    8954:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    8958:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    895c:	4a92      	ldr	r2, [pc, #584]	; (8ba8 <Lpspi_Ip_SyncTransmit+0x28c>)
    895e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8962:	9312      	str	r3, [sp, #72]	; 0x48
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(State != NULL_PTR);
    #endif
    
    Base = Lpspi_Ip_apxBases[Instance];    
    8964:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    8968:	4a90      	ldr	r2, [pc, #576]	; (8bac <Lpspi_Ip_SyncTransmit+0x290>)
    896a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    896e:	9311      	str	r3, [sp, #68]	; 0x44
    SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08();
    8970:	f00d fc88 	bl	16284 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08>
    if (LPSPI_IP_BUSY == State->Status)
    8974:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8976:	685b      	ldr	r3, [r3, #4]
    8978:	2b02      	cmp	r3, #2
    897a:	d104      	bne.n	8986 <Lpspi_Ip_SyncTransmit+0x6a>
    {
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08();
    897c:	f00d fcae 	bl	162dc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08>
        Status = LPSPI_IP_STATUS_FAIL;
    8980:	2301      	movs	r3, #1
    8982:	9318      	str	r3, [sp, #96]	; 0x60
    8984:	e276      	b.n	8e74 <Lpspi_Ip_SyncTransmit+0x558>
        /* Clear some bits which support for half duplex mode at previous transfer */
        Base->CFGR1 &= ~(LPSPI_CFGR1_PCSCFG_MASK | LPSPI_CFGR1_OUTCFG_MASK | LPSPI_CFGR1_PINCFG_MASK);
        #endif
        
        /* Mark the hardware as busy. */
        State->Status = LPSPI_IP_BUSY;
    8986:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8988:	2202      	movs	r2, #2
    898a:	605a      	str	r2, [r3, #4]
        State->ExternalDevice = ExternalDevice;
    898c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    898e:	9a05      	ldr	r2, [sp, #20]
    8990:	625a      	str	r2, [r3, #36]	; 0x24
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08();
    8992:	f00d fca3 	bl	162dc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08>
        
        /* Disable DMA requests and all interrupts */
        Base->DER = 0u;
    8996:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8998:	2200      	movs	r2, #0
    899a:	61da      	str	r2, [r3, #28]
        Base->IER = 0u;
    899c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    899e:	2200      	movs	r2, #0
    89a0:	619a      	str	r2, [r3, #24]
        
        /* Update State structure. */
        State->NextTransferConfigAvailable = State->KeepCs;
    89a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    89a4:	7f1a      	ldrb	r2, [r3, #28]
    89a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    89a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Set clock configuration */
        if(TRUE == State->FirstCmd)
    89ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
    89ae:	7f5b      	ldrb	r3, [r3, #29]
    89b0:	2b00      	cmp	r3, #0
    89b2:	d030      	beq.n	8a16 <Lpspi_Ip_SyncTransmit+0xfa>
            /* Makes sure that FIFOs will be empty before start new transfer session. 
            There is maybe a frame in RX shifter register (previous transfer is broken and CS did not de-assert).
            So use reset FIFO do not prevent the potential issue. So reset module by software reset bit should be used here */
            /* Reset FIFOs using CR[RST] bit */
            /* store CFGR1 and restore after all registers are reset */
            Cfgr1 = Base->CFGR1;
    89b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    89b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    89b8:	9313      	str	r3, [sp, #76]	; 0x4c
            Base->CR |= LPSPI_CR_RST_MASK;
    89ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
    89bc:	691b      	ldr	r3, [r3, #16]
    89be:	f043 0202 	orr.w	r2, r3, #2
    89c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    89c4:	611a      	str	r2, [r3, #16]
            Base->CR &= ~LPSPI_CR_RST_MASK;
    89c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    89c8:	691b      	ldr	r3, [r3, #16]
    89ca:	f023 0202 	bic.w	r2, r3, #2
    89ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
    89d0:	611a      	str	r2, [r3, #16]
            /* restore CFGR1 */
            Base->CFGR1 = Cfgr1;
    89d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    89d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    89d6:	625a      	str	r2, [r3, #36]	; 0x24
            /* clear all flags */
            Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    89d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    89da:	695b      	ldr	r3, [r3, #20]
    89dc:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    89e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    89e2:	615a      	str	r2, [r3, #20]

            #if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
            Base->CCR = ExternalDevice->Ccr[State->ClockMode];
            #else
            Base->CCR = ExternalDevice->Ccr;
    89e4:	9b05      	ldr	r3, [sp, #20]
    89e6:	685a      	ldr	r2, [r3, #4]
    89e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    89ea:	641a      	str	r2, [r3, #64]	; 0x40
            #endif
                /* Reset current FIFO slots are available to fill at beginning of job (HLD).*/
            State->CurrentTxFifoSlot = LPSPI_IP_FIFO_SIZE_U8;
    89ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
    89ee:	2204      	movs	r2, #4
    89f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            Lpspi_TransmitTxInit(Instance, (const uint8*)TxBuffer, State->ExternalDevice->DeviceParams->FrameSize, State->ExternalDevice->DeviceParams->Lsb, Length);
    89f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    89f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    89f8:	68db      	ldr	r3, [r3, #12]
    89fa:	881a      	ldrh	r2, [r3, #0]
    89fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    89fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8a00:	68db      	ldr	r3, [r3, #12]
    8a02:	7899      	ldrb	r1, [r3, #2]
    8a04:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    8a08:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8a0c:	9300      	str	r3, [sp, #0]
    8a0e:	460b      	mov	r3, r1
    8a10:	9904      	ldr	r1, [sp, #16]
    8a12:	f000 fa37 	bl	8e84 <Lpspi_TransmitTxInit>
        }
        Lpspi_TransmitRxInit(Instance, RxBuffer, State->ExternalDevice->DeviceParams->FrameSize, Length);
    8a16:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8a1a:	68db      	ldr	r3, [r3, #12]
    8a1c:	881a      	ldrh	r2, [r3, #0]
    8a1e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8a22:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    8a26:	9903      	ldr	r1, [sp, #12]
    8a28:	f000 facc 	bl	8fc4 <Lpspi_TransmitRxInit>
        /* initialize current counter */
        CurrentTicks = OsIf_GetCounter(LPSPI_IP_TIMEOUT_METHOD);
    8a2c:	2000      	movs	r0, #0
    8a2e:	f7f9 f9bf 	bl	1db0 <OsIf_GetCounter>
    8a32:	4603      	mov	r3, r0
    8a34:	9307      	str	r3, [sp, #28]
        while(State->RxIndex != State->ExpectedFifoReads)
    8a36:	e202      	b.n	8e3e <Lpspi_Ip_SyncTransmit+0x522>
        {
            /* RECEIVE DATA */
            /* The receiving should be performed first because maybe have a last frame in RX FIFO from previous channel
                , it should be read to clear RXFIFO before start a new write to TXFIFO */
            /* Read all Data available in receive HW fifo. */
            NumberOfReads = (uint8)(((Base->FSR) & LPSPI_FSR_RXCOUNT_MASK) >> LPSPI_FSR_RXCOUNT_SHIFT);
    8a38:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    8a3c:	0c1b      	lsrs	r3, r3, #16
    8a3e:	b2db      	uxtb	r3, r3
    8a40:	f003 0307 	and.w	r3, r3, #7
    8a44:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
            /* Limits to remaining frames. */
            
            if (NumberOfReads != 0u)
    8a48:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    8a4c:	2b00      	cmp	r3, #0
    8a4e:	f000 80d2 	beq.w	8bf6 <Lpspi_Ip_SyncTransmit+0x2da>
            {
                if (NumberOfReads > (State->ExpectedFifoReads - State->RxIndex))
    8a52:	f89d 2066 	ldrb.w	r2, [sp, #102]	; 0x66
    8a56:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a58:	8b1b      	ldrh	r3, [r3, #24]
    8a5a:	4619      	mov	r1, r3
    8a5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a5e:	8a9b      	ldrh	r3, [r3, #20]
    8a60:	1acb      	subs	r3, r1, r3
    8a62:	429a      	cmp	r2, r3
    8a64:	dd08      	ble.n	8a78 <Lpspi_Ip_SyncTransmit+0x15c>
                {
                    NumberOfReads = (uint8)(State->ExpectedFifoReads - State->RxIndex);
    8a66:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a68:	8b1b      	ldrh	r3, [r3, #24]
    8a6a:	b2da      	uxtb	r2, r3
    8a6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a6e:	8a9b      	ldrh	r3, [r3, #20]
    8a70:	b2db      	uxtb	r3, r3
    8a72:	1ad3      	subs	r3, r2, r3
    8a74:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
                }
                /* If these are the first frames of this channel. Current TXFIFO slot must be plus 1 because the slot of CMD have moved out */
                if (0u == State->RxIndex)
    8a78:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a7a:	8a9b      	ldrh	r3, [r3, #20]
    8a7c:	2b00      	cmp	r3, #0
    8a7e:	d107      	bne.n	8a90 <Lpspi_Ip_SyncTransmit+0x174>
                {
                    State->CurrentTxFifoSlot += 1u;
    8a80:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8a86:	3301      	adds	r3, #1
    8a88:	b2da      	uxtb	r2, r3
    8a8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    8a90:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    8a94:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    8a98:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    8a9c:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    const LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    8aa0:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    8aa4:	4a41      	ldr	r2, [pc, #260]	; (8bac <Lpspi_Ip_SyncTransmit+0x290>)
    8aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8aaa:	930f      	str	r3, [sp, #60]	; 0x3c
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    8aac:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    8ab0:	4a3d      	ldr	r2, [pc, #244]	; (8ba8 <Lpspi_Ip_SyncTransmit+0x28c>)
    8ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ab6:	930e      	str	r3, [sp, #56]	; 0x38
    uint32 Data = 0u;
    8ab8:	2300      	movs	r3, #0
    8aba:	930d      	str	r3, [sp, #52]	; 0x34
    uint8 Index = 0u;
    8abc:	2300      	movs	r3, #0
    8abe:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    if (NULL_PTR != State->RxBuffer)
    8ac2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8ac4:	689b      	ldr	r3, [r3, #8]
    8ac6:	2b00      	cmp	r3, #0
    8ac8:	d069      	beq.n	8b9e <Lpspi_Ip_SyncTransmit+0x282>
        if (State->ExternalDevice->DeviceParams->FrameSize < 9u)
    8aca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8ace:	68db      	ldr	r3, [r3, #12]
    8ad0:	881b      	ldrh	r3, [r3, #0]
    8ad2:	2b08      	cmp	r3, #8
    8ad4:	d81e      	bhi.n	8b14 <Lpspi_Ip_SyncTransmit+0x1f8>
            for (Index = 0; Index < NumberOfReads; Index++)
    8ad6:	2300      	movs	r3, #0
    8ad8:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8adc:	e013      	b.n	8b06 <Lpspi_Ip_SyncTransmit+0x1ea>
                Data = Base->RDR;
    8ade:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8ae2:	930d      	str	r3, [sp, #52]	; 0x34
                *((uint8*)(&State->RxBuffer[State->RxIndex + Index])) = (uint8)Data;
    8ae4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8ae6:	689b      	ldr	r3, [r3, #8]
    8ae8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8aea:	8a92      	ldrh	r2, [r2, #20]
    8aec:	4611      	mov	r1, r2
    8aee:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
    8af2:	440a      	add	r2, r1
    8af4:	4413      	add	r3, r2
    8af6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8af8:	b2d2      	uxtb	r2, r2
    8afa:	701a      	strb	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    8afc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8b00:	3301      	adds	r3, #1
    8b02:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8b06:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    8b0a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8b0e:	429a      	cmp	r2, r3
    8b10:	d8e5      	bhi.n	8ade <Lpspi_Ip_SyncTransmit+0x1c2>
    8b12:	e05a      	b.n	8bca <Lpspi_Ip_SyncTransmit+0x2ae>
        else if (State->ExternalDevice->DeviceParams->FrameSize < 17u)
    8b14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b18:	68db      	ldr	r3, [r3, #12]
    8b1a:	881b      	ldrh	r3, [r3, #0]
    8b1c:	2b10      	cmp	r3, #16
    8b1e:	d81f      	bhi.n	8b60 <Lpspi_Ip_SyncTransmit+0x244>
            for (Index = 0; Index < NumberOfReads; Index++)
    8b20:	2300      	movs	r3, #0
    8b22:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8b26:	e014      	b.n	8b52 <Lpspi_Ip_SyncTransmit+0x236>
                Data = Base->RDR;
    8b28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8b2c:	930d      	str	r3, [sp, #52]	; 0x34
                *((uint16*)(&State->RxBuffer[2u * (State->RxIndex + Index)])) = (uint16)Data;
    8b2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b30:	689a      	ldr	r2, [r3, #8]
    8b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b34:	8a9b      	ldrh	r3, [r3, #20]
    8b36:	4619      	mov	r1, r3
    8b38:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8b3c:	440b      	add	r3, r1
    8b3e:	005b      	lsls	r3, r3, #1
    8b40:	4413      	add	r3, r2
    8b42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8b44:	b292      	uxth	r2, r2
    8b46:	801a      	strh	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    8b48:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8b4c:	3301      	adds	r3, #1
    8b4e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8b52:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    8b56:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8b5a:	429a      	cmp	r2, r3
    8b5c:	d8e4      	bhi.n	8b28 <Lpspi_Ip_SyncTransmit+0x20c>
    8b5e:	e034      	b.n	8bca <Lpspi_Ip_SyncTransmit+0x2ae>
            for (Index = 0; Index < NumberOfReads; Index++)
    8b60:	2300      	movs	r3, #0
    8b62:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8b66:	e013      	b.n	8b90 <Lpspi_Ip_SyncTransmit+0x274>
                Data = Base->RDR;
    8b68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8b6c:	930d      	str	r3, [sp, #52]	; 0x34
                *((uint32*)(&State->RxBuffer[4u * (State->RxIndex + Index)])) = (uint32)Data;
    8b6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b70:	689a      	ldr	r2, [r3, #8]
    8b72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b74:	8a9b      	ldrh	r3, [r3, #20]
    8b76:	4619      	mov	r1, r3
    8b78:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8b7c:	440b      	add	r3, r1
    8b7e:	009b      	lsls	r3, r3, #2
    8b80:	4413      	add	r3, r2
    8b82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8b84:	601a      	str	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    8b86:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8b8a:	3301      	adds	r3, #1
    8b8c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8b90:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    8b94:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8b98:	429a      	cmp	r2, r3
    8b9a:	d8e5      	bhi.n	8b68 <Lpspi_Ip_SyncTransmit+0x24c>
    8b9c:	e015      	b.n	8bca <Lpspi_Ip_SyncTransmit+0x2ae>
        for (Index = 0; Index < NumberOfReads; Index++)
    8b9e:	2300      	movs	r3, #0
    8ba0:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8ba4:	e00b      	b.n	8bbe <Lpspi_Ip_SyncTransmit+0x2a2>
    8ba6:	bf00      	nop
    8ba8:	1fff8dd8 	.word	0x1fff8dd8
    8bac:	000184d0 	.word	0x000184d0
            (void)Base->RDR;
    8bb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        for (Index = 0; Index < NumberOfReads; Index++)
    8bb4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8bb8:	3301      	adds	r3, #1
    8bba:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    8bbe:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    8bc2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8bc6:	429a      	cmp	r2, r3
    8bc8:	d8f2      	bhi.n	8bb0 <Lpspi_Ip_SyncTransmit+0x294>
    State->RxIndex += NumberOfReads;
    8bca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8bcc:	8a9a      	ldrh	r2, [r3, #20]
    8bce:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    8bd2:	b29b      	uxth	r3, r3
    8bd4:	4413      	add	r3, r2
    8bd6:	b29a      	uxth	r2, r3
    8bd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8bda:	829a      	strh	r2, [r3, #20]
}
    8bdc:	bf00      	nop
                }
                /* Read Data from RX FIFO */
                Lpspi_Ip_ReadDataFromFifo(Instance, NumberOfReads);
                /* Update current FIFO slots are available to fill .*/
                State->CurrentTxFifoSlot += NumberOfReads;
    8bde:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8be0:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    8be4:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    8be8:	4413      	add	r3, r2
    8bea:	b2da      	uxtb	r2, r3
    8bec:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                ElapsedTicks = 0u;
    8bf2:	2300      	movs	r3, #0
    8bf4:	9317      	str	r3, [sp, #92]	; 0x5c
            /* After driver code read all frames in RX FIFO, if there are still some frames in TX FIFO, at the time before driver code check number of frames available in TX FIFO 
            to prepare to fill TX FIFO. At that time, interrupt occurred, and the time to process interrupt is longer than the time to transfer all frames in TX FIFO. 
            So TX FIFO will be empty and some frames received in RX FIFO, then the program is returned from interrupt and fill TX FIFO until full. 
            And there is a interrupt occurred after that before read all frames in RX FIFO, and the time to process interrupt is longer than the time to transfer all frames in TX FIFO.
            State->CurrentTxFifoSlot variable is used to hanlde number of frames are "on bus transfer". They are always less than FIFO size */
            if((State->CurrentTxFifoSlot != 0u) && (TxDoneFlag != TRUE))
    8bf6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8bfc:	2b00      	cmp	r3, #0
    8bfe:	f000 810e 	beq.w	8e1e <Lpspi_Ip_SyncTransmit+0x502>
    8c02:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
    8c06:	f083 0301 	eor.w	r3, r3, #1
    8c0a:	b2db      	uxtb	r3, r3
    8c0c:	2b00      	cmp	r3, #0
    8c0e:	f000 8106 	beq.w	8e1e <Lpspi_Ip_SyncTransmit+0x502>
            {
                if(State->ExpectedFifoWrites != State->TxIndex)
    8c12:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c14:	8b5a      	ldrh	r2, [r3, #26]
    8c16:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c18:	8adb      	ldrh	r3, [r3, #22]
    8c1a:	429a      	cmp	r2, r3
    8c1c:	f000 80c7 	beq.w	8dae <Lpspi_Ip_SyncTransmit+0x492>
                {
                    NumberOfWrites = State->CurrentTxFifoSlot;
    8c20:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8c26:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
                    /* Limits to remaining frames. */
                    if (NumberOfWrites > (State->ExpectedFifoWrites - State->TxIndex))
    8c2a:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
    8c2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c30:	8b5b      	ldrh	r3, [r3, #26]
    8c32:	4619      	mov	r1, r3
    8c34:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c36:	8adb      	ldrh	r3, [r3, #22]
    8c38:	1acb      	subs	r3, r1, r3
    8c3a:	429a      	cmp	r2, r3
    8c3c:	dd08      	ble.n	8c50 <Lpspi_Ip_SyncTransmit+0x334>
                    {
                        NumberOfWrites = (uint8)(State->ExpectedFifoWrites - State->TxIndex);
    8c3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c40:	8b5b      	ldrh	r3, [r3, #26]
    8c42:	b2da      	uxtb	r2, r3
    8c44:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c46:	8adb      	ldrh	r3, [r3, #22]
    8c48:	b2db      	uxtb	r3, r3
    8c4a:	1ad3      	subs	r3, r2, r3
    8c4c:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    8c50:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    8c54:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    8c58:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    8c5c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    8c60:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    8c64:	4a85      	ldr	r2, [pc, #532]	; (8e7c <Lpspi_Ip_SyncTransmit+0x560>)
    8c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c6a:	930b      	str	r3, [sp, #44]	; 0x2c
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    8c6c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    8c70:	4a83      	ldr	r2, [pc, #524]	; (8e80 <Lpspi_Ip_SyncTransmit+0x564>)
    8c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c76:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 Data = 0u;
    8c78:	2300      	movs	r3, #0
    8c7a:	9309      	str	r3, [sp, #36]	; 0x24
    uint8 Index = 0u;
    8c7c:	2300      	movs	r3, #0
    8c7e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Data = State->ExternalDevice->DeviceParams->DefaultData;
    8c82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c86:	68db      	ldr	r3, [r3, #12]
    8c88:	685b      	ldr	r3, [r3, #4]
    8c8a:	9309      	str	r3, [sp, #36]	; 0x24
    if (NULL_PTR != State->TxBuffer)
    8c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8c8e:	68db      	ldr	r3, [r3, #12]
    8c90:	2b00      	cmp	r3, #0
    8c92:	d063      	beq.n	8d5c <Lpspi_Ip_SyncTransmit+0x440>
        if (State->TxFrameSize < 9u)
    8c94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8c98:	2b08      	cmp	r3, #8
    8c9a:	d81d      	bhi.n	8cd8 <Lpspi_Ip_SyncTransmit+0x3bc>
            for (Index = 0; Index < NumberOfWrites; Index++)
    8c9c:	2300      	movs	r3, #0
    8c9e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8ca2:	e012      	b.n	8cca <Lpspi_Ip_SyncTransmit+0x3ae>
                Data = *((const uint8*)(&State->TxBuffer[State->TxIndex + Index]));
    8ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8ca6:	68db      	ldr	r3, [r3, #12]
    8ca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8caa:	8ad2      	ldrh	r2, [r2, #22]
    8cac:	4611      	mov	r1, r2
    8cae:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    8cb2:	440a      	add	r2, r1
    8cb4:	4413      	add	r3, r2
    8cb6:	781b      	ldrb	r3, [r3, #0]
    8cb8:	9309      	str	r3, [sp, #36]	; 0x24
                Base->TDR = Data;
    8cba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8cbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8cbe:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    8cc0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8cc4:	3301      	adds	r3, #1
    8cc6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8cca:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    8cce:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8cd2:	429a      	cmp	r2, r3
    8cd4:	d8e6      	bhi.n	8ca4 <Lpspi_Ip_SyncTransmit+0x388>
    8cd6:	e053      	b.n	8d80 <Lpspi_Ip_SyncTransmit+0x464>
        else if (State->TxFrameSize < 17u)
    8cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8cdc:	2b10      	cmp	r3, #16
    8cde:	d81e      	bhi.n	8d1e <Lpspi_Ip_SyncTransmit+0x402>
            for (Index = 0; Index < NumberOfWrites; Index++)
    8ce0:	2300      	movs	r3, #0
    8ce2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8ce6:	e013      	b.n	8d10 <Lpspi_Ip_SyncTransmit+0x3f4>
                Data = *((const uint16*)(&State->TxBuffer[2u * (State->TxIndex + Index)]));
    8ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8cea:	68da      	ldr	r2, [r3, #12]
    8cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8cee:	8adb      	ldrh	r3, [r3, #22]
    8cf0:	4619      	mov	r1, r3
    8cf2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8cf6:	440b      	add	r3, r1
    8cf8:	005b      	lsls	r3, r3, #1
    8cfa:	4413      	add	r3, r2
    8cfc:	881b      	ldrh	r3, [r3, #0]
    8cfe:	9309      	str	r3, [sp, #36]	; 0x24
                Base->TDR = Data;
    8d00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8d02:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8d04:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    8d06:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8d0a:	3301      	adds	r3, #1
    8d0c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8d10:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    8d14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8d18:	429a      	cmp	r2, r3
    8d1a:	d8e5      	bhi.n	8ce8 <Lpspi_Ip_SyncTransmit+0x3cc>
    8d1c:	e030      	b.n	8d80 <Lpspi_Ip_SyncTransmit+0x464>
            for (Index = 0; Index < NumberOfWrites; Index++)
    8d1e:	2300      	movs	r3, #0
    8d20:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8d24:	e013      	b.n	8d4e <Lpspi_Ip_SyncTransmit+0x432>
                Data = *((const uint32*)(&State->TxBuffer[4u * (State->TxIndex + Index)]));
    8d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d28:	68da      	ldr	r2, [r3, #12]
    8d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d2c:	8adb      	ldrh	r3, [r3, #22]
    8d2e:	4619      	mov	r1, r3
    8d30:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8d34:	440b      	add	r3, r1
    8d36:	009b      	lsls	r3, r3, #2
    8d38:	4413      	add	r3, r2
    8d3a:	681b      	ldr	r3, [r3, #0]
    8d3c:	9309      	str	r3, [sp, #36]	; 0x24
                Base->TDR = Data;
    8d3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8d40:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8d42:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    8d44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8d48:	3301      	adds	r3, #1
    8d4a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8d4e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    8d52:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8d56:	429a      	cmp	r2, r3
    8d58:	d8e5      	bhi.n	8d26 <Lpspi_Ip_SyncTransmit+0x40a>
    8d5a:	e011      	b.n	8d80 <Lpspi_Ip_SyncTransmit+0x464>
        for (Index = 0; Index < NumberOfWrites; Index++)
    8d5c:	2300      	movs	r3, #0
    8d5e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8d62:	e007      	b.n	8d74 <Lpspi_Ip_SyncTransmit+0x458>
            Base->TDR = Data;
    8d64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8d66:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8d68:	665a      	str	r2, [r3, #100]	; 0x64
        for (Index = 0; Index < NumberOfWrites; Index++)
    8d6a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8d6e:	3301      	adds	r3, #1
    8d70:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    8d74:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    8d78:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8d7c:	429a      	cmp	r2, r3
    8d7e:	d8f1      	bhi.n	8d64 <Lpspi_Ip_SyncTransmit+0x448>
    State->TxIndex += NumberOfWrites;
    8d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d82:	8ada      	ldrh	r2, [r3, #22]
    8d84:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    8d88:	b29b      	uxth	r3, r3
    8d8a:	4413      	add	r3, r2
    8d8c:	b29a      	uxth	r2, r3
    8d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d90:	82da      	strh	r2, [r3, #22]
}
    8d92:	bf00      	nop
                    }
                    /* Push Data into TX FIFO */
                    Lpspi_Ip_PushDataToFifo(Instance, NumberOfWrites);
                    State->CurrentTxFifoSlot -= NumberOfWrites;
    8d94:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8d96:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    8d9a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    8d9e:	1ad3      	subs	r3, r2, r3
    8da0:	b2da      	uxtb	r2, r3
    8da2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                    ElapsedTicks = 0u;
    8da8:	2300      	movs	r3, #0
    8daa:	9317      	str	r3, [sp, #92]	; 0x5c
    8dac:	e037      	b.n	8e1e <Lpspi_Ip_SyncTransmit+0x502>
                }
                else
                {
                    if(TRUE == State->NextTransferConfigAvailable)
    8dae:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8db0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    8db4:	2b00      	cmp	r3, #0
    8db6:	d01c      	beq.n	8df2 <Lpspi_Ip_SyncTransmit+0x4d6>
                    {
                        /* Initialize next transfer */
                        State->ExternalDevice->DeviceParams->DefaultData = State->DefaultDataNext;
    8db8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8dbc:	68db      	ldr	r3, [r3, #12]
    8dbe:	9a12      	ldr	r2, [sp, #72]	; 0x48
    8dc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
    8dc2:	605a      	str	r2, [r3, #4]
                        State->FirstCmd = FALSE;
    8dc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8dc6:	2200      	movs	r2, #0
    8dc8:	775a      	strb	r2, [r3, #29]
                        Lpspi_TransmitTxInit(Instance, State->TxBufferNext, State->FrameSizeNext, State->LsbNext, State->LengthNext);
    8dca:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8dcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    8dce:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8dd0:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    8dd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8dd4:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
    8dd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8dda:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    8ddc:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    8de0:	9300      	str	r3, [sp, #0]
    8de2:	4623      	mov	r3, r4
    8de4:	f000 f84e 	bl	8e84 <Lpspi_TransmitTxInit>
                        State->NextTransferConfigAvailable = FALSE;
    8de8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8dea:	2200      	movs	r2, #0
    8dec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    8df0:	e015      	b.n	8e1e <Lpspi_Ip_SyncTransmit+0x502>
                    }
                    else
                    {
                        TxDoneFlag = TRUE;
    8df2:	2301      	movs	r3, #1
    8df4:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
                        if((FALSE == State->KeepCs) && (0u != (Base->TCR & LPSPI_TCR_CONT_MASK)))
    8df8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8dfa:	7f1b      	ldrb	r3, [r3, #28]
    8dfc:	f083 0301 	eor.w	r3, r3, #1
    8e00:	b2db      	uxtb	r3, r3
    8e02:	2b00      	cmp	r3, #0
    8e04:	d00b      	beq.n	8e1e <Lpspi_Ip_SyncTransmit+0x502>
    8e06:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    8e0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    8e0e:	2b00      	cmp	r3, #0
    8e10:	d005      	beq.n	8e1e <Lpspi_Ip_SyncTransmit+0x502>
                        {
                            /* Clear CS */
                            Base->TCR &= ~(LPSPI_TCR_CONT_MASK | LPSPI_TCR_CONTC_MASK);
    8e12:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    8e16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
    8e1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8e1c:	661a      	str	r2, [r3, #96]	; 0x60
                        }
                    }
                }
            }
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, LPSPI_IP_TIMEOUT_METHOD);
    8e1e:	ab07      	add	r3, sp, #28
    8e20:	2100      	movs	r1, #0
    8e22:	4618      	mov	r0, r3
    8e24:	f7f8 ffdd 	bl	1de2 <OsIf_GetElapsed>
    8e28:	4602      	mov	r2, r0
    8e2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    8e2c:	4413      	add	r3, r2
    8e2e:	9317      	str	r3, [sp, #92]	; 0x5c
            if (ElapsedTicks >= TimeoutTicks)
    8e30:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    8e32:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8e34:	429a      	cmp	r2, r3
    8e36:	d302      	bcc.n	8e3e <Lpspi_Ip_SyncTransmit+0x522>
            {
                Status = LPSPI_IP_TIMEOUT;
    8e38:	2303      	movs	r3, #3
    8e3a:	9318      	str	r3, [sp, #96]	; 0x60
                break;
    8e3c:	e006      	b.n	8e4c <Lpspi_Ip_SyncTransmit+0x530>
        while(State->RxIndex != State->ExpectedFifoReads)
    8e3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e40:	8a9a      	ldrh	r2, [r3, #20]
    8e42:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e44:	8b1b      	ldrh	r3, [r3, #24]
    8e46:	429a      	cmp	r2, r3
    8e48:	f47f adf6 	bne.w	8a38 <Lpspi_Ip_SyncTransmit+0x11c>
            }
        }
        if ((LPSPI_IP_STATUS_SUCCESS != Status) || (0u == Length))
    8e4c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8e4e:	2b00      	cmp	r3, #0
    8e50:	d103      	bne.n	8e5a <Lpspi_Ip_SyncTransmit+0x53e>
    8e52:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8e56:	2b00      	cmp	r3, #0
    8e58:	d109      	bne.n	8e6e <Lpspi_Ip_SyncTransmit+0x552>
        {
#if (STD_OFF == LPSPI_IP_DEV_ERROR_DETECT)
            /* Return Fail status if length is 0. Error Detect is enabled, nothing need to be done here */
            if (0u == Length)
    8e5a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8e5e:	2b00      	cmp	r3, #0
    8e60:	d101      	bne.n	8e66 <Lpspi_Ip_SyncTransmit+0x54a>
            {
                Status = LPSPI_IP_STATUS_FAIL;
    8e62:	2301      	movs	r3, #1
    8e64:	9318      	str	r3, [sp, #96]	; 0x60
            }
#endif
            State->Status = LPSPI_IP_FAULT;
    8e66:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e68:	2203      	movs	r2, #3
    8e6a:	605a      	str	r2, [r3, #4]
    8e6c:	e002      	b.n	8e74 <Lpspi_Ip_SyncTransmit+0x558>
        }
        else
        {
            State->Status = LPSPI_IP_IDLE;
    8e6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e70:	2201      	movs	r2, #1
    8e72:	605a      	str	r2, [r3, #4]
        }
    }
    return Status;
    8e74:	9b18      	ldr	r3, [sp, #96]	; 0x60
}
    8e76:	4618      	mov	r0, r3
    8e78:	b01a      	add	sp, #104	; 0x68
    8e7a:	bd10      	pop	{r4, pc}
    8e7c:	000184d0 	.word	0x000184d0
    8e80:	1fff8dd8 	.word	0x1fff8dd8

00008e84 <Lpspi_TransmitTxInit>:
                                 const uint8* TxBuffer,
                                 uint16 TxFrameSize,
                                 boolean TxLsb,
                                 uint16 BufLen
                                )
{
    8e84:	b088      	sub	sp, #32
    8e86:	9100      	str	r1, [sp, #0]
    8e88:	4611      	mov	r1, r2
    8e8a:	461a      	mov	r2, r3
    8e8c:	4603      	mov	r3, r0
    8e8e:	f88d 3007 	strb.w	r3, [sp, #7]
    8e92:	460b      	mov	r3, r1
    8e94:	f8ad 3004 	strh.w	r3, [sp, #4]
    8e98:	4613      	mov	r3, r2
    8e9a:	f88d 3006 	strb.w	r3, [sp, #6]
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    8e9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8ea2:	4a46      	ldr	r2, [pc, #280]	; (8fbc <Lpspi_TransmitTxInit+0x138>)
    8ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ea8:	9307      	str	r3, [sp, #28]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    8eaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8eae:	4a44      	ldr	r2, [pc, #272]	; (8fc0 <Lpspi_TransmitTxInit+0x13c>)
    8eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8eb4:	9306      	str	r3, [sp, #24]
    uint32 TransferCommand = 0u;
    8eb6:	2300      	movs	r3, #0
    8eb8:	9305      	str	r3, [sp, #20]
    uint8 LsbWriteValue = TxLsb ? 1U : 0U;
    8eba:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8ebe:	2b00      	cmp	r3, #0
    8ec0:	d001      	beq.n	8ec6 <Lpspi_TransmitTxInit+0x42>
    8ec2:	2301      	movs	r3, #1
    8ec4:	e000      	b.n	8ec8 <Lpspi_TransmitTxInit+0x44>
    8ec6:	2300      	movs	r3, #0
    8ec8:	f88d 3013 	strb.w	r3, [sp, #19]

    State->TxFrameSize = TxFrameSize;
    8ecc:	9b06      	ldr	r3, [sp, #24]
    8ece:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8ed2:	851a      	strh	r2, [r3, #40]	; 0x28
    State->TxLsb = TxLsb;
    8ed4:	9b06      	ldr	r3, [sp, #24]
    8ed6:	f89d 2006 	ldrb.w	r2, [sp, #6]
    8eda:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    /* Get transfer command */
#if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
    TransferCommand = State->ExternalDevice->Tcr[State->ClockMode] | LPSPI_TCR_FRAMESZ((uint32)TxFrameSize - 1u) | LPSPI_TCR_LSBF(LsbWriteValue);
#else
    TransferCommand = State->ExternalDevice->Tcr | LPSPI_TCR_FRAMESZ((uint32)TxFrameSize - 1u) | LPSPI_TCR_LSBF(LsbWriteValue);
    8ede:	9b06      	ldr	r3, [sp, #24]
    8ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8ee2:	689a      	ldr	r2, [r3, #8]
    8ee4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8ee8:	3b01      	subs	r3, #1
    8eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8eee:	431a      	orrs	r2, r3
    8ef0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8ef4:	05db      	lsls	r3, r3, #23
    8ef6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    8efa:	4313      	orrs	r3, r2
    8efc:	9305      	str	r3, [sp, #20]
        {
            TransferCommand &= ~LPSPI_TCR_CONT_MASK;
        }
        #endif
        
        if(TRUE == State->FirstCmd)
    8efe:	9b06      	ldr	r3, [sp, #24]
    8f00:	7f5b      	ldrb	r3, [r3, #29]
    8f02:	2b00      	cmp	r3, #0
    8f04:	d003      	beq.n	8f0e <Lpspi_TransmitTxInit+0x8a>
        {
            /* Set transfer command */
            Base->TCR = TransferCommand;
    8f06:	9b07      	ldr	r3, [sp, #28]
    8f08:	9a05      	ldr	r2, [sp, #20]
    8f0a:	661a      	str	r2, [r3, #96]	; 0x60
    8f0c:	e00d      	b.n	8f2a <Lpspi_TransmitTxInit+0xa6>
        }
        else
        {
            if (0u != (TransferCommand & LPSPI_TCR_CONT_MASK))
    8f0e:	9b05      	ldr	r3, [sp, #20]
    8f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    8f14:	2b00      	cmp	r3, #0
    8f16:	d005      	beq.n	8f24 <Lpspi_TransmitTxInit+0xa0>
            {
                Base->TCR = TransferCommand | LPSPI_TCR_CONTC_MASK;
    8f18:	9b05      	ldr	r3, [sp, #20]
    8f1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
    8f1e:	9b07      	ldr	r3, [sp, #28]
    8f20:	661a      	str	r2, [r3, #96]	; 0x60
    8f22:	e002      	b.n	8f2a <Lpspi_TransmitTxInit+0xa6>
            }
            else
            {
                Base->TCR = TransferCommand;
    8f24:	9b07      	ldr	r3, [sp, #28]
    8f26:	9a05      	ldr	r2, [sp, #20]
    8f28:	661a      	str	r2, [r3, #96]	; 0x60
        #if (STD_ON == LPSPI_IP_HALF_DUPLEX_MODE_SUPPORT)
        if (LPSPI_IP_FULL_DUPLEX == State->ExternalDevice->DeviceParams->TransferType)
        #endif
        {
            /* CMD will take 1 slot in TXFIFO, update current TX FIFO slot. it will be plus 1 when the first frames of channel have recieved */
            State->CurrentTxFifoSlot -= 1u;
    8f2a:	9b06      	ldr	r3, [sp, #24]
    8f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8f30:	3b01      	subs	r3, #1
    8f32:	b2da      	uxtb	r2, r3
    8f34:	9b06      	ldr	r3, [sp, #24]
    8f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        }
    }
    
    /* Update State structure. */
    State->TxIndex = 0u;
    8f3a:	9b06      	ldr	r3, [sp, #24]
    8f3c:	2200      	movs	r2, #0
    8f3e:	82da      	strh	r2, [r3, #22]
        (void)TxBuffer;
    }
    else
    #endif
    {
        State->TxBuffer = TxBuffer;
    8f40:	9b06      	ldr	r3, [sp, #24]
    8f42:	9a00      	ldr	r2, [sp, #0]
    8f44:	60da      	str	r2, [r3, #12]
    8f46:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    8f4a:	f8ad 3010 	strh.w	r3, [sp, #16]
    8f4e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8f52:	f8ad 300e 	strh.w	r3, [sp, #14]
    if (FrameSize < 9u)
    8f56:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8f5a:	2b08      	cmp	r3, #8
    8f5c:	d804      	bhi.n	8f68 <Lpspi_TransmitTxInit+0xe4>
        Ret = Length;
    8f5e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    8f62:	f8ad 300c 	strh.w	r3, [sp, #12]
    8f66:	e022      	b.n	8fae <Lpspi_TransmitTxInit+0x12a>
    else if (FrameSize < 17u)
    8f68:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8f6c:	2b10      	cmp	r3, #16
    8f6e:	d80c      	bhi.n	8f8a <Lpspi_TransmitTxInit+0x106>
        Ret = (uint16)(Length / 2u) + (uint16)(Length % 2U);
    8f70:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    8f74:	085b      	lsrs	r3, r3, #1
    8f76:	b29a      	uxth	r2, r3
    8f78:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    8f7c:	f003 0301 	and.w	r3, r3, #1
    8f80:	b29b      	uxth	r3, r3
    8f82:	4413      	add	r3, r2
    8f84:	f8ad 300c 	strh.w	r3, [sp, #12]
    8f88:	e011      	b.n	8fae <Lpspi_TransmitTxInit+0x12a>
        Ret = (uint16)(Length / 4u) + (uint16)(((Length % 4U) == 0U) ? 0U : 1U);
    8f8a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    8f8e:	089b      	lsrs	r3, r3, #2
    8f90:	b29a      	uxth	r2, r3
    8f92:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    8f96:	f003 0303 	and.w	r3, r3, #3
    8f9a:	b29b      	uxth	r3, r3
    8f9c:	2b00      	cmp	r3, #0
    8f9e:	bf14      	ite	ne
    8fa0:	2301      	movne	r3, #1
    8fa2:	2300      	moveq	r3, #0
    8fa4:	b2db      	uxtb	r3, r3
    8fa6:	b29b      	uxth	r3, r3
    8fa8:	4413      	add	r3, r2
    8faa:	f8ad 300c 	strh.w	r3, [sp, #12]
    return Ret;
    8fae:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    }

    State->ExpectedFifoWrites = Lpspi_Ip_GetWordsFromLength(BufLen, TxFrameSize);
    8fb2:	9b06      	ldr	r3, [sp, #24]
    8fb4:	835a      	strh	r2, [r3, #26]
}
    8fb6:	bf00      	nop
    8fb8:	b008      	add	sp, #32
    8fba:	4770      	bx	lr
    8fbc:	000184d0 	.word	0x000184d0
    8fc0:	1fff8dd8 	.word	0x1fff8dd8

00008fc4 <Lpspi_TransmitRxInit>:
static void Lpspi_TransmitRxInit(uint8 Instance,
                                      uint8* RxBuffer,
                                      uint16 RxFrameSize,
                                      uint16 BufLen
                                     )
{
    8fc4:	b088      	sub	sp, #32
    8fc6:	9102      	str	r1, [sp, #8]
    8fc8:	4611      	mov	r1, r2
    8fca:	461a      	mov	r2, r3
    8fcc:	4603      	mov	r3, r0
    8fce:	f88d 300f 	strb.w	r3, [sp, #15]
    8fd2:	460b      	mov	r3, r1
    8fd4:	f8ad 300c 	strh.w	r3, [sp, #12]
    8fd8:	4613      	mov	r3, r2
    8fda:	f8ad 3006 	strh.w	r3, [sp, #6]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    8fde:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8fe2:	4a22      	ldr	r2, [pc, #136]	; (906c <Lpspi_TransmitRxInit+0xa8>)
    8fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fe8:	9307      	str	r3, [sp, #28]
    
    /* Update State structure. */
    State->RxIndex = 0u;
    8fea:	9b07      	ldr	r3, [sp, #28]
    8fec:	2200      	movs	r2, #0
    8fee:	829a      	strh	r2, [r3, #20]
        (void)RxBuffer; 
    }
    else
    #endif        
    {
        State->RxBuffer = RxBuffer; 
    8ff0:	9b07      	ldr	r3, [sp, #28]
    8ff2:	9a02      	ldr	r2, [sp, #8]
    8ff4:	609a      	str	r2, [r3, #8]
    8ff6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8ffa:	f8ad 301a 	strh.w	r3, [sp, #26]
    8ffe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9002:	f8ad 3018 	strh.w	r3, [sp, #24]
    if (FrameSize < 9u)
    9006:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    900a:	2b08      	cmp	r3, #8
    900c:	d804      	bhi.n	9018 <Lpspi_TransmitRxInit+0x54>
        Ret = Length;
    900e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9012:	f8ad 3016 	strh.w	r3, [sp, #22]
    9016:	e022      	b.n	905e <Lpspi_TransmitRxInit+0x9a>
    else if (FrameSize < 17u)
    9018:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    901c:	2b10      	cmp	r3, #16
    901e:	d80c      	bhi.n	903a <Lpspi_TransmitRxInit+0x76>
        Ret = (uint16)(Length / 2u) + (uint16)(Length % 2U);
    9020:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9024:	085b      	lsrs	r3, r3, #1
    9026:	b29a      	uxth	r2, r3
    9028:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    902c:	f003 0301 	and.w	r3, r3, #1
    9030:	b29b      	uxth	r3, r3
    9032:	4413      	add	r3, r2
    9034:	f8ad 3016 	strh.w	r3, [sp, #22]
    9038:	e011      	b.n	905e <Lpspi_TransmitRxInit+0x9a>
        Ret = (uint16)(Length / 4u) + (uint16)(((Length % 4U) == 0U) ? 0U : 1U);
    903a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    903e:	089b      	lsrs	r3, r3, #2
    9040:	b29a      	uxth	r2, r3
    9042:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9046:	f003 0303 	and.w	r3, r3, #3
    904a:	b29b      	uxth	r3, r3
    904c:	2b00      	cmp	r3, #0
    904e:	bf14      	ite	ne
    9050:	2301      	movne	r3, #1
    9052:	2300      	moveq	r3, #0
    9054:	b2db      	uxtb	r3, r3
    9056:	b29b      	uxth	r3, r3
    9058:	4413      	add	r3, r2
    905a:	f8ad 3016 	strh.w	r3, [sp, #22]
    return Ret;
    905e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    }

    State->ExpectedFifoReads = Lpspi_Ip_GetWordsFromLength(BufLen, RxFrameSize);
    9062:	9b07      	ldr	r3, [sp, #28]
    9064:	831a      	strh	r2, [r3, #24]
}
    9066:	bf00      	nop
    9068:	b008      	add	sp, #32
    906a:	4770      	bx	lr
    906c:	1fff8dd8 	.word	0x1fff8dd8

00009070 <Lpspi_Ip_AsyncTransmit>:
                                            const uint8 *TxBuffer,
                                            uint8 *RxBuffer,
                                            uint16 Length,
                                            Lpspi_Ip_CallbackType EndCallback
                                          )
{
    9070:	b500      	push	{lr}
    9072:	b08b      	sub	sp, #44	; 0x2c
    9074:	9005      	str	r0, [sp, #20]
    9076:	9104      	str	r1, [sp, #16]
    9078:	9203      	str	r2, [sp, #12]
    907a:	f8ad 300a 	strh.w	r3, [sp, #10]
    LPSPI_Type* Base;
    Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    907e:	2300      	movs	r3, #0
    9080:	9309      	str	r3, [sp, #36]	; 0x24
    uint8 Instance = 0u;
    9082:	2300      	movs	r3, #0
    9084:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(ExternalDevice != NULL_PTR);
    DevAssert(0u != Length);
    Lpspi_Ip_CheckValidParameters(ExternalDevice, Length);
    #endif
    Instance = ExternalDevice->Instance;
    9088:	9b05      	ldr	r3, [sp, #20]
    908a:	781b      	ldrb	r3, [r3, #0]
    908c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    9090:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9094:	4a3d      	ldr	r2, [pc, #244]	; (918c <Lpspi_Ip_AsyncTransmit+0x11c>)
    9096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    909a:	9307      	str	r3, [sp, #28]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(State != NULL_PTR);
    #endif
    
    Base = Lpspi_Ip_apxBases[Instance];
    909c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    90a0:	4a3b      	ldr	r2, [pc, #236]	; (9190 <Lpspi_Ip_AsyncTransmit+0x120>)
    90a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90a6:	9306      	str	r3, [sp, #24]
    SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09();
    90a8:	f00d f93e 	bl	16328 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09>
    if (LPSPI_IP_BUSY == State->Status)
    90ac:	9b07      	ldr	r3, [sp, #28]
    90ae:	685b      	ldr	r3, [r3, #4]
    90b0:	2b02      	cmp	r3, #2
    90b2:	d104      	bne.n	90be <Lpspi_Ip_AsyncTransmit+0x4e>
    {
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09();
    90b4:	f00d f964 	bl	16380 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09>
        Status = LPSPI_IP_STATUS_FAIL;
    90b8:	2301      	movs	r3, #1
    90ba:	9309      	str	r3, [sp, #36]	; 0x24
    90bc:	e061      	b.n	9182 <Lpspi_Ip_AsyncTransmit+0x112>
        #if (STD_ON == LPSPI_IP_HALF_DUPLEX_MODE_SUPPORT)
        /* Clear some bits which support for half duplex mode at previous transfer */
        Base->CFGR1 &= ~(LPSPI_CFGR1_PCSCFG_MASK | LPSPI_CFGR1_OUTCFG_MASK | LPSPI_CFGR1_PINCFG_MASK);
        #endif
        /* Mark the hardware as busy. */
        State->Status = LPSPI_IP_BUSY;
    90be:	9b07      	ldr	r3, [sp, #28]
    90c0:	2202      	movs	r2, #2
    90c2:	605a      	str	r2, [r3, #4]
        State->ExternalDevice = ExternalDevice;
    90c4:	9b07      	ldr	r3, [sp, #28]
    90c6:	9a05      	ldr	r2, [sp, #20]
    90c8:	625a      	str	r2, [r3, #36]	; 0x24
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09();
    90ca:	f00d f959 	bl	16380 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09>
        
        /* Update State structure. */
        State->Callback = EndCallback;
    90ce:	9b07      	ldr	r3, [sp, #28]
    90d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    90d2:	611a      	str	r2, [r3, #16]
        State->NextTransferConfigAvailable = State->KeepCs;
    90d4:	9b07      	ldr	r3, [sp, #28]
    90d6:	7f1a      	ldrb	r2, [r3, #28]
    90d8:	9b07      	ldr	r3, [sp, #28]
    90da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Reset TX done flag */
        State->TxDoneFlag = FALSE;
    90de:	9b07      	ldr	r3, [sp, #28]
    90e0:	2200      	movs	r2, #0
    90e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        
        /* Set clock configuration */
        if(TRUE == State->FirstCmd)
    90e6:	9b07      	ldr	r3, [sp, #28]
    90e8:	7f5b      	ldrb	r3, [r3, #29]
    90ea:	2b00      	cmp	r3, #0
    90ec:	d028      	beq.n	9140 <Lpspi_Ip_AsyncTransmit+0xd0>
        {
            SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11();
    90ee:	f00d f9bf 	bl	16470 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11>
            /* Make sure that FIFOs will be empty before start new transfer session */
            Base->CR |= LPSPI_CR_RTF_MASK|LPSPI_CR_RRF_MASK;
    90f2:	9b06      	ldr	r3, [sp, #24]
    90f4:	691b      	ldr	r3, [r3, #16]
    90f6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
    90fa:	9b06      	ldr	r3, [sp, #24]
    90fc:	611a      	str	r2, [r3, #16]
            /* clear all flags */
            Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    90fe:	9b06      	ldr	r3, [sp, #24]
    9100:	695b      	ldr	r3, [r3, #20]
    9102:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    9106:	9b06      	ldr	r3, [sp, #24]
    9108:	615a      	str	r2, [r3, #20]
            #endif
            {
                #if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
                Base->CCR = ExternalDevice->Ccr[State->ClockMode];
                #else
                Base->CCR = ExternalDevice->Ccr;
    910a:	9b05      	ldr	r3, [sp, #20]
    910c:	685a      	ldr	r2, [r3, #4]
    910e:	9b06      	ldr	r3, [sp, #24]
    9110:	641a      	str	r2, [r3, #64]	; 0x40
                #endif
            }
            /* Update current FIFO slots are available to fill .*/
            State->CurrentTxFifoSlot = LPSPI_IP_FIFO_SIZE_U8;
    9112:	9b07      	ldr	r3, [sp, #28]
    9114:	2204      	movs	r2, #4
    9116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            /* In setting up Transmit command register, the RXMSK is also cleared */
            Lpspi_TransmitTxInit(Instance, (const uint8*)TxBuffer, State->ExternalDevice->DeviceParams->FrameSize, State->ExternalDevice->DeviceParams->Lsb, Length);
    911a:	9b07      	ldr	r3, [sp, #28]
    911c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    911e:	68db      	ldr	r3, [r3, #12]
    9120:	881a      	ldrh	r2, [r3, #0]
    9122:	9b07      	ldr	r3, [sp, #28]
    9124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9126:	68db      	ldr	r3, [r3, #12]
    9128:	7899      	ldrb	r1, [r3, #2]
    912a:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    912e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    9132:	9300      	str	r3, [sp, #0]
    9134:	460b      	mov	r3, r1
    9136:	9904      	ldr	r1, [sp, #16]
    9138:	f7ff fea4 	bl	8e84 <Lpspi_TransmitTxInit>
            SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11();
    913c:	f00d f9c4 	bl	164c8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11>
        }
        Lpspi_TransmitRxInit(Instance, RxBuffer, State->ExternalDevice->DeviceParams->FrameSize, Length);
    9140:	9b07      	ldr	r3, [sp, #28]
    9142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9144:	68db      	ldr	r3, [r3, #12]
    9146:	881a      	ldrh	r2, [r3, #0]
    9148:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    914c:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    9150:	9903      	ldr	r1, [sp, #12]
    9152:	f7ff ff37 	bl	8fc4 <Lpspi_TransmitRxInit>
            }
            else
            #endif
            {
                /* Set TX water */
                Base->FCR = LPSPI_FCR_TXWATER((uint32)LPSPI_IP_FIFO_SIZE_U8 - (uint32)1u);
    9156:	9b06      	ldr	r3, [sp, #24]
    9158:	2203      	movs	r2, #3
    915a:	659a      	str	r2, [r3, #88]	; 0x58
            }
            
            /* Disable DMA requests */
            Base->DER = 0u;
    915c:	9b06      	ldr	r3, [sp, #24]
    915e:	2200      	movs	r2, #0
    9160:	61da      	str	r2, [r3, #28]
            switch (State->TransferMode)
    9162:	9b07      	ldr	r3, [sp, #28]
    9164:	681b      	ldr	r3, [r3, #0]
    9166:	2b00      	cmp	r3, #0
    9168:	d002      	beq.n	9170 <Lpspi_Ip_AsyncTransmit+0x100>
    916a:	2b01      	cmp	r3, #1
    916c:	d004      	beq.n	9178 <Lpspi_Ip_AsyncTransmit+0x108>
                case LPSPI_IP_INTERRUPT:
                    Base->IER = LPSPI_IER_RDIE_MASK | LPSPI_IER_TDIE_MASK | LPSPI_IER_REIE_MASK | LPSPI_IER_TEIE_MASK;
                    break;
                default:
                    /* Nothing to do */
                    break;
    916e:	e008      	b.n	9182 <Lpspi_Ip_AsyncTransmit+0x112>
                    Base->IER = 0u;
    9170:	9b06      	ldr	r3, [sp, #24]
    9172:	2200      	movs	r2, #0
    9174:	619a      	str	r2, [r3, #24]
                    break;
    9176:	e004      	b.n	9182 <Lpspi_Ip_AsyncTransmit+0x112>
                    Base->IER = LPSPI_IER_RDIE_MASK | LPSPI_IER_TDIE_MASK | LPSPI_IER_REIE_MASK | LPSPI_IER_TEIE_MASK;
    9178:	9b06      	ldr	r3, [sp, #24]
    917a:	f641 0203 	movw	r2, #6147	; 0x1803
    917e:	619a      	str	r2, [r3, #24]
                    break;
    9180:	bf00      	nop
            /* Enable DMA request. */
            Base->DER = LPSPI_DER_RDDE_MASK | LPSPI_DER_TDDE_MASK;
        }
        #endif
    }
    return Status;
    9182:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    9184:	4618      	mov	r0, r3
    9186:	b00b      	add	sp, #44	; 0x2c
    9188:	f85d fb04 	ldr.w	pc, [sp], #4
    918c:	1fff8dd8 	.word	0x1fff8dd8
    9190:	000184d0 	.word	0x000184d0

00009194 <Lpspi_Ip_ManageBuffers>:
}
#endif
#endif

void Lpspi_Ip_ManageBuffers(uint8 Instance)
{
    9194:	b500      	push	{lr}
    9196:	b085      	sub	sp, #20
    9198:	4603      	mov	r3, r0
    919a:	f88d 3007 	strb.w	r3, [sp, #7]
    #endif

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    Base = Lpspi_Ip_apxBases[Instance];
    919e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    91a2:	4a14      	ldr	r2, [pc, #80]	; (91f4 <Lpspi_Ip_ManageBuffers+0x60>)
    91a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91a8:	9303      	str	r3, [sp, #12]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    91aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    91ae:	4a12      	ldr	r2, [pc, #72]	; (91f8 <Lpspi_Ip_ManageBuffers+0x64>)
    91b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91b4:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    if (LPSPI_IP_POLLING == State->TransferMode)
    91b6:	9b02      	ldr	r3, [sp, #8]
    91b8:	681b      	ldr	r3, [r3, #0]
    91ba:	2b00      	cmp	r3, #0
    91bc:	d115      	bne.n	91ea <Lpspi_Ip_ManageBuffers+0x56>
                - Receive: Both TDF (push CDM) and DRF (receive data) are set.
               In half duplex Slave mode:
                - Transmit: TDF is set only, RDF will never be set by RX FIFO have masked.
                - Receive: Both TDF and RDF are set. But only process for RDF to receive data. In this case, State->CurrentTxFifoSlot will be set to 0 */
            if(
                (0u != (Base->SR & LPSPI_SR_RDF_MASK)) ||
    91be:	9b03      	ldr	r3, [sp, #12]
    91c0:	695b      	ldr	r3, [r3, #20]
    91c2:	f003 0302 	and.w	r3, r3, #2
            if(
    91c6:	2b00      	cmp	r3, #0
    91c8:	d10a      	bne.n	91e0 <Lpspi_Ip_ManageBuffers+0x4c>
                ((0u != (Base->SR & LPSPI_SR_TDF_MASK)) && (0u!= State->CurrentTxFifoSlot))
    91ca:	9b03      	ldr	r3, [sp, #12]
    91cc:	695b      	ldr	r3, [r3, #20]
    91ce:	f003 0301 	and.w	r3, r3, #1
                (0u != (Base->SR & LPSPI_SR_RDF_MASK)) ||
    91d2:	2b00      	cmp	r3, #0
    91d4:	d009      	beq.n	91ea <Lpspi_Ip_ManageBuffers+0x56>
                ((0u != (Base->SR & LPSPI_SR_TDF_MASK)) && (0u!= State->CurrentTxFifoSlot))
    91d6:	9b02      	ldr	r3, [sp, #8]
    91d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    91dc:	2b00      	cmp	r3, #0
    91de:	d004      	beq.n	91ea <Lpspi_Ip_ManageBuffers+0x56>
                    Lpspi_Ip_TransferProcessHalfDuplex(Instance);
                }
                else
                #endif
                {
                    Lpspi_Ip_TransferProcess(Instance); 
    91e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    91e4:	4618      	mov	r0, r3
    91e6:	f7ff f8cd 	bl	8384 <Lpspi_Ip_TransferProcess>
                Lpspi_Ip_IrqTxDmaHandler(Instance);
            }
        }
        #endif
    }
}
    91ea:	bf00      	nop
    91ec:	b005      	add	sp, #20
    91ee:	f85d fb04 	ldr.w	pc, [sp], #4
    91f2:	bf00      	nop
    91f4:	000184d0 	.word	0x000184d0
    91f8:	1fff8dd8 	.word	0x1fff8dd8

000091fc <Lpspi_Ip_UpdateFrameSize>:
/*================================================================================================*/
Lpspi_Ip_StatusType Lpspi_Ip_UpdateFrameSize(const Lpspi_Ip_ExternalDeviceType *ExternalDevice, uint16 FrameSize)
{
    91fc:	b084      	sub	sp, #16
    91fe:	9001      	str	r0, [sp, #4]
    9200:	460b      	mov	r3, r1
    9202:	f8ad 3002 	strh.w	r3, [sp, #2]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    9206:	2300      	movs	r3, #0
    9208:	9303      	str	r3, [sp, #12]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != ExternalDevice);
    DevAssert(LPSPI_IP_FRAMESIZE_MAX_U16 >= FrameSize);
    DevAssert(LPSPI_IP_FRAMESIZE_MIN_U16 <= FrameSize);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[ExternalDevice->Instance];
    920a:	9b01      	ldr	r3, [sp, #4]
    920c:	781b      	ldrb	r3, [r3, #0]
    920e:	461a      	mov	r2, r3
    9210:	4b09      	ldr	r3, [pc, #36]	; (9238 <Lpspi_Ip_UpdateFrameSize+0x3c>)
    9212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9216:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Frame size can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    9218:	9b02      	ldr	r3, [sp, #8]
    921a:	685b      	ldr	r3, [r3, #4]
    921c:	2b02      	cmp	r3, #2
    921e:	d005      	beq.n	922c <Lpspi_Ip_UpdateFrameSize+0x30>
    {
        ExternalDevice->DeviceParams->FrameSize = FrameSize;
    9220:	9b01      	ldr	r3, [sp, #4]
    9222:	68db      	ldr	r3, [r3, #12]
    9224:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    9228:	801a      	strh	r2, [r3, #0]
    922a:	e001      	b.n	9230 <Lpspi_Ip_UpdateFrameSize+0x34>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    922c:	2301      	movs	r3, #1
    922e:	9303      	str	r3, [sp, #12]
    }
    return Status;
    9230:	9b03      	ldr	r3, [sp, #12]
}
    9232:	4618      	mov	r0, r3
    9234:	b004      	add	sp, #16
    9236:	4770      	bx	lr
    9238:	1fff8dd8 	.word	0x1fff8dd8

0000923c <Lpspi_Ip_UpdateLsb>:

Lpspi_Ip_StatusType Lpspi_Ip_UpdateLsb(const Lpspi_Ip_ExternalDeviceType *ExternalDevice, boolean Lsb)
{
    923c:	b084      	sub	sp, #16
    923e:	9001      	str	r0, [sp, #4]
    9240:	460b      	mov	r3, r1
    9242:	f88d 3003 	strb.w	r3, [sp, #3]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    9246:	2300      	movs	r3, #0
    9248:	9303      	str	r3, [sp, #12]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != ExternalDevice);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[ExternalDevice->Instance];
    924a:	9b01      	ldr	r3, [sp, #4]
    924c:	781b      	ldrb	r3, [r3, #0]
    924e:	461a      	mov	r2, r3
    9250:	4b09      	ldr	r3, [pc, #36]	; (9278 <Lpspi_Ip_UpdateLsb+0x3c>)
    9252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9256:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Bite order can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    9258:	9b02      	ldr	r3, [sp, #8]
    925a:	685b      	ldr	r3, [r3, #4]
    925c:	2b02      	cmp	r3, #2
    925e:	d005      	beq.n	926c <Lpspi_Ip_UpdateLsb+0x30>
    {
        ExternalDevice->DeviceParams->Lsb = Lsb;
    9260:	9b01      	ldr	r3, [sp, #4]
    9262:	68db      	ldr	r3, [r3, #12]
    9264:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9268:	709a      	strb	r2, [r3, #2]
    926a:	e001      	b.n	9270 <Lpspi_Ip_UpdateLsb+0x34>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    926c:	2301      	movs	r3, #1
    926e:	9303      	str	r3, [sp, #12]
    }
    return Status;
    9270:	9b03      	ldr	r3, [sp, #12]
}
    9272:	4618      	mov	r0, r3
    9274:	b004      	add	sp, #16
    9276:	4770      	bx	lr
    9278:	1fff8dd8 	.word	0x1fff8dd8

0000927c <Lpspi_Ip_UpdateDefaultTransmitData>:

Lpspi_Ip_StatusType Lpspi_Ip_UpdateDefaultTransmitData(const Lpspi_Ip_ExternalDeviceType *ExternalDevice, uint32 DefaultData)
{
    927c:	b084      	sub	sp, #16
    927e:	9001      	str	r0, [sp, #4]
    9280:	9100      	str	r1, [sp, #0]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    9282:	2300      	movs	r3, #0
    9284:	9303      	str	r3, [sp, #12]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != ExternalDevice);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[ExternalDevice->Instance];
    9286:	9b01      	ldr	r3, [sp, #4]
    9288:	781b      	ldrb	r3, [r3, #0]
    928a:	461a      	mov	r2, r3
    928c:	4b09      	ldr	r3, [pc, #36]	; (92b4 <Lpspi_Ip_UpdateDefaultTransmitData+0x38>)
    928e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9292:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Bite order can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    9294:	9b02      	ldr	r3, [sp, #8]
    9296:	685b      	ldr	r3, [r3, #4]
    9298:	2b02      	cmp	r3, #2
    929a:	d004      	beq.n	92a6 <Lpspi_Ip_UpdateDefaultTransmitData+0x2a>
    {
        ExternalDevice->DeviceParams->DefaultData = DefaultData;
    929c:	9b01      	ldr	r3, [sp, #4]
    929e:	68db      	ldr	r3, [r3, #12]
    92a0:	9a00      	ldr	r2, [sp, #0]
    92a2:	605a      	str	r2, [r3, #4]
    92a4:	e001      	b.n	92aa <Lpspi_Ip_UpdateDefaultTransmitData+0x2e>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    92a6:	2301      	movs	r3, #1
    92a8:	9303      	str	r3, [sp, #12]
    }
    return Status;
    92aa:	9b03      	ldr	r3, [sp, #12]
}
    92ac:	4618      	mov	r0, r3
    92ae:	b004      	add	sp, #16
    92b0:	4770      	bx	lr
    92b2:	bf00      	nop
    92b4:	1fff8dd8 	.word	0x1fff8dd8

000092b8 <Lpspi_Ip_UpdateTransferMode>:

Lpspi_Ip_StatusType Lpspi_Ip_UpdateTransferMode(uint8 Instance, Lpspi_Ip_ModeType Mode)
{
    92b8:	b084      	sub	sp, #16
    92ba:	4603      	mov	r3, r0
    92bc:	9100      	str	r1, [sp, #0]
    92be:	f88d 3007 	strb.w	r3, [sp, #7]
    Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    92c2:	2300      	movs	r3, #0
    92c4:	9303      	str	r3, [sp, #12]

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    92c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    92ca:	4a09      	ldr	r2, [pc, #36]	; (92f0 <Lpspi_Ip_UpdateTransferMode+0x38>)
    92cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92d0:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Transfer mode can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    92d2:	9b02      	ldr	r3, [sp, #8]
    92d4:	685b      	ldr	r3, [r3, #4]
    92d6:	2b02      	cmp	r3, #2
    92d8:	d003      	beq.n	92e2 <Lpspi_Ip_UpdateTransferMode+0x2a>
    {
        State->TransferMode = Mode;
    92da:	9b02      	ldr	r3, [sp, #8]
    92dc:	9a00      	ldr	r2, [sp, #0]
    92de:	601a      	str	r2, [r3, #0]
    92e0:	e001      	b.n	92e6 <Lpspi_Ip_UpdateTransferMode+0x2e>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    92e2:	2301      	movs	r3, #1
    92e4:	9303      	str	r3, [sp, #12]
    }
    return Status;
    92e6:	9b03      	ldr	r3, [sp, #12]
}
    92e8:	4618      	mov	r0, r3
    92ea:	b004      	add	sp, #16
    92ec:	4770      	bx	lr
    92ee:	bf00      	nop
    92f0:	1fff8dd8 	.word	0x1fff8dd8

000092f4 <Lpspi_Ip_Cancel>:

void Lpspi_Ip_Cancel(uint8 Instance)
{
    92f4:	b500      	push	{lr}
    92f6:	b087      	sub	sp, #28
    92f8:	4603      	mov	r3, r0
    92fa:	f88d 3007 	strb.w	r3, [sp, #7]
    LPSPI_Type* Base;
    Lpspi_Ip_StateStructureType* State;
    uint32 Cfgr1 = 0u;
    92fe:	2300      	movs	r3, #0
    9300:	9305      	str	r3, [sp, #20]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    Base = Lpspi_Ip_apxBases[Instance];
    9302:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9306:	4a18      	ldr	r2, [pc, #96]	; (9368 <Lpspi_Ip_Cancel+0x74>)
    9308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    930c:	9304      	str	r3, [sp, #16]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    930e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9312:	4a16      	ldr	r2, [pc, #88]	; (936c <Lpspi_Ip_Cancel+0x78>)
    9314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9318:	9303      	str	r3, [sp, #12]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10();
    931a:	f00d f857 	bl	163cc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10>
    if (LPSPI_IP_BUSY == State->Status)
    931e:	9b03      	ldr	r3, [sp, #12]
    9320:	685b      	ldr	r3, [r3, #4]
    9322:	2b02      	cmp	r3, #2
    9324:	d11a      	bne.n	935c <Lpspi_Ip_Cancel+0x68>
    {
        /* Mask Rx to discard received data */
        Base->TCR |= LPSPI_TCR_RXMSK(1);
    9326:	9b04      	ldr	r3, [sp, #16]
    9328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    932a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
    932e:	9b04      	ldr	r3, [sp, #16]
    9330:	661a      	str	r2, [r3, #96]	; 0x60
        /* store CFGR1 and restore after all registers are reset */
        Cfgr1 = Base->CFGR1;
    9332:	9b04      	ldr	r3, [sp, #16]
    9334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9336:	9305      	str	r3, [sp, #20]
        /* Disable interrupts and DMA requests. */
        /* Clear FIFO */
        /* RTF and RRF will not clear shifter, so RST must be used to ensure old Data in shifter will also be cleared. */
        Base->CR |= LPSPI_CR_RST_MASK;
    9338:	9b04      	ldr	r3, [sp, #16]
    933a:	691b      	ldr	r3, [r3, #16]
    933c:	f043 0202 	orr.w	r2, r3, #2
    9340:	9b04      	ldr	r3, [sp, #16]
    9342:	611a      	str	r2, [r3, #16]
        Base->CR &= ~LPSPI_CR_RST_MASK;
    9344:	9b04      	ldr	r3, [sp, #16]
    9346:	691b      	ldr	r3, [r3, #16]
    9348:	f023 0202 	bic.w	r2, r3, #2
    934c:	9b04      	ldr	r3, [sp, #16]
    934e:	611a      	str	r2, [r3, #16]
        /* restore CFGR1 */
        Base->CFGR1 = Cfgr1;
    9350:	9b04      	ldr	r3, [sp, #16]
    9352:	9a05      	ldr	r2, [sp, #20]
    9354:	625a      	str	r2, [r3, #36]	; 0x24
            (void)Dma_Ip_SetLogicChannelCommand(State->PhyUnitConfig->RxDmaChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
            (void)Dma_Ip_SetLogicChannelCommand(State->PhyUnitConfig->TxDmaChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
        #endif
        /* set State to idle */
        State->Status = LPSPI_IP_IDLE;
    9356:	9b03      	ldr	r3, [sp, #12]
    9358:	2201      	movs	r2, #1
    935a:	605a      	str	r2, [r3, #4]
    }
    SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10();
    935c:	f00d f862 	bl	16424 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10>
}
    9360:	bf00      	nop
    9362:	b007      	add	sp, #28
    9364:	f85d fb04 	ldr.w	pc, [sp], #4
    9368:	000184d0 	.word	0x000184d0
    936c:	1fff8dd8 	.word	0x1fff8dd8

00009370 <Lpspi_Ip_IrqHandler>:
* @param[in]     Instance            Instance of the hardware unit.
*
* @implements Lpspi_Ip_IrqHandler_Activity
*/
void Lpspi_Ip_IrqHandler(uint8 Instance)
{
    9370:	b500      	push	{lr}
    9372:	b087      	sub	sp, #28
    9374:	4603      	mov	r3, r0
    9376:	f88d 3007 	strb.w	r3, [sp, #7]
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    937a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    937e:	4a18      	ldr	r2, [pc, #96]	; (93e0 <Lpspi_Ip_IrqHandler+0x70>)
    9380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9384:	9305      	str	r3, [sp, #20]
    const Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    9386:	f89d 3007 	ldrb.w	r3, [sp, #7]
    938a:	4a16      	ldr	r2, [pc, #88]	; (93e4 <Lpspi_Ip_IrqHandler+0x74>)
    938c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9390:	9304      	str	r3, [sp, #16]
    uint32 IrqFlags = 0u;
    9392:	2300      	movs	r3, #0
    9394:	9303      	str	r3, [sp, #12]

    if (NULL_PTR != State)
    9396:	9b04      	ldr	r3, [sp, #16]
    9398:	2b00      	cmp	r3, #0
    939a:	d016      	beq.n	93ca <Lpspi_Ip_IrqHandler+0x5a>
    {
        /* the driver has been initialized */
        IrqFlags = Base->SR & (LPSPI_SR_TDF_MASK | LPSPI_SR_RDF_MASK | LPSPI_SR_TEF_MASK | LPSPI_SR_REF_MASK);
    939c:	9b05      	ldr	r3, [sp, #20]
    939e:	695a      	ldr	r2, [r3, #20]
    93a0:	f641 0303 	movw	r3, #6147	; 0x1803
    93a4:	4013      	ands	r3, r2
    93a6:	9303      	str	r3, [sp, #12]
        IrqFlags &= Base->IER & (LPSPI_IER_TDIE_MASK | LPSPI_IER_RDIE_MASK | LPSPI_IER_TEIE_MASK | LPSPI_IER_REIE_MASK);
    93a8:	9b05      	ldr	r3, [sp, #20]
    93aa:	699a      	ldr	r2, [r3, #24]
    93ac:	f641 0303 	movw	r3, #6147	; 0x1803
    93b0:	4013      	ands	r3, r2
    93b2:	9a03      	ldr	r2, [sp, #12]
    93b4:	4013      	ands	r3, r2
    93b6:	9303      	str	r3, [sp, #12]
        if (0u != IrqFlags)
    93b8:	9b03      	ldr	r3, [sp, #12]
    93ba:	2b00      	cmp	r3, #0
    93bc:	d00b      	beq.n	93d6 <Lpspi_Ip_IrqHandler+0x66>
                Lpspi_Ip_TransferProcessHalfDuplex(Instance);    
            }
            else
            #endif
            {
                Lpspi_Ip_TransferProcess(Instance); 
    93be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    93c2:	4618      	mov	r0, r3
    93c4:	f7fe ffde 	bl	8384 <Lpspi_Ip_TransferProcess>
    {
        /* the driver has not been initialized */
        /* clear all flags */
        Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    }
}
    93c8:	e005      	b.n	93d6 <Lpspi_Ip_IrqHandler+0x66>
        Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    93ca:	9b05      	ldr	r3, [sp, #20]
    93cc:	695b      	ldr	r3, [r3, #20]
    93ce:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    93d2:	9b05      	ldr	r3, [sp, #20]
    93d4:	615a      	str	r2, [r3, #20]
}
    93d6:	bf00      	nop
    93d8:	b007      	add	sp, #28
    93da:	f85d fb04 	ldr.w	pc, [sp], #4
    93de:	bf00      	nop
    93e0:	000184d0 	.word	0x000184d0
    93e4:	1fff8dd8 	.word	0x1fff8dd8

000093e8 <Lpspi_Ip_GetStatus>:
* @param[in]        Instance - SPI peripheral instance number.
*
* @return           Lpspi_Ip_HwStatusType
*/
Lpspi_Ip_HwStatusType Lpspi_Ip_GetStatus(uint8 Instance)
{
    93e8:	b084      	sub	sp, #16
    93ea:	4603      	mov	r3, r0
    93ec:	f88d 3007 	strb.w	r3, [sp, #7]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_HwStatusType Status = LPSPI_IP_UNINIT;
    93f0:	2300      	movs	r3, #0
    93f2:	9303      	str	r3, [sp, #12]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    93f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    93f8:	4a06      	ldr	r2, [pc, #24]	; (9414 <Lpspi_Ip_GetStatus+0x2c>)
    93fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93fe:	9302      	str	r3, [sp, #8]
    if (State != NULL_PTR)
    9400:	9b02      	ldr	r3, [sp, #8]
    9402:	2b00      	cmp	r3, #0
    9404:	d002      	beq.n	940c <Lpspi_Ip_GetStatus+0x24>
    {
        Status = State->Status;
    9406:	9b02      	ldr	r3, [sp, #8]
    9408:	685b      	ldr	r3, [r3, #4]
    940a:	9303      	str	r3, [sp, #12]
    }
    
    return Status;
    940c:	9b03      	ldr	r3, [sp, #12]
}
    940e:	4618      	mov	r0, r3
    9410:	b004      	add	sp, #16
    9412:	4770      	bx	lr
    9414:	1fff8dd8 	.word	0x1fff8dd8

00009418 <Spi_CheckInit>:
static inline Std_ReturnType Spi_CheckInit
    ( 
        const Spi_ConfigType *ConfigPtr,
        uint32 SpiCoreID
    )
{
    9418:	b086      	sub	sp, #24
    941a:	9001      	str	r0, [sp, #4]
    941c:	9100      	str	r1, [sp, #0]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    941e:	2300      	movs	r3, #0
    9420:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 Sequence;
#endif

#if (SPI_PRECOMPILE_SUPPORT == STD_OFF)
    /* Configuration sizes must be checked for Post Build & Link Time configurations */
    Channel  = (uint32)(ConfigPtr->SpiMaxChannel);
    9424:	9b01      	ldr	r3, [sp, #4]
    9426:	789b      	ldrb	r3, [r3, #2]
    9428:	9304      	str	r3, [sp, #16]
    Job      = (uint32)(ConfigPtr->SpiMaxJob);
    942a:	9b01      	ldr	r3, [sp, #4]
    942c:	889b      	ldrh	r3, [r3, #4]
    942e:	9303      	str	r3, [sp, #12]
    Sequence = (uint32)(ConfigPtr->SpiMaxSequence);
    9430:	9b01      	ldr	r3, [sp, #4]
    9432:	799b      	ldrb	r3, [r3, #6]
    9434:	9302      	str	r3, [sp, #8]

    if ((Channel >= SPI_MAX_CHANNEL) || (Job >= SPI_MAX_JOB) || (Sequence >= SPI_MAX_SEQUENCE))
    9436:	9b04      	ldr	r3, [sp, #16]
    9438:	2b01      	cmp	r3, #1
    943a:	d805      	bhi.n	9448 <Spi_CheckInit+0x30>
    943c:	9b03      	ldr	r3, [sp, #12]
    943e:	2b00      	cmp	r3, #0
    9440:	d102      	bne.n	9448 <Spi_CheckInit+0x30>
    9442:	9b02      	ldr	r3, [sp, #8]
    9444:	2b00      	cmp	r3, #0
    9446:	d002      	beq.n	944e <Spi_CheckInit+0x36>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    9448:	2301      	movs	r3, #1
    944a:	f88d 3017 	strb.w	r3, [sp, #23]
#if (SPI_DEV_ERROR_DETECT == STD_ON)
        /* Call Det_ReportError */
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_INIT_ID,SPI_E_CONFIG_OUT_OF_RANGE);
#endif
    }
    if (SpiCoreID != ConfigPtr->SpiCoreUse)
    944e:	9b01      	ldr	r3, [sp, #4]
    9450:	689b      	ldr	r3, [r3, #8]
    9452:	9a00      	ldr	r2, [sp, #0]
    9454:	429a      	cmp	r2, r3
    9456:	d002      	beq.n	945e <Spi_CheckInit+0x46>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    9458:	2301      	movs	r3, #1
    945a:	f88d 3017 	strb.w	r3, [sp, #23]
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_INIT_ID,SPI_E_INVALID_POINTER);
#endif
    }
#endif /* (SPI_PRECOMPILE_SUPPORT == STD_OFF) */

    return CheckStatus;
    945e:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    9462:	4618      	mov	r0, r3
    9464:	b006      	add	sp, #24
    9466:	4770      	bx	lr

00009468 <Spi_SyncJobsTranfer>:
static Std_ReturnType Spi_SyncJobsTranfer
    (
        const Spi_SequenceConfigType *SequenceConfig,
        uint32 SpiCoreID
    )
{
    9468:	b500      	push	{lr}
    946a:	b089      	sub	sp, #36	; 0x24
    946c:	9001      	str	r0, [sp, #4]
    946e:	9100      	str	r1, [sp, #0]
    Spi_JobType JobsCount;
    const Spi_JobType *JobIndexList;
    Spi_JobType Job;
    Spi_JobStateType *JobState;
    const Spi_JobConfigType *JobConfig;
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    9470:	2300      	movs	r3, #0
    9472:	f88d 3017 	strb.w	r3, [sp, #23]
    
    /* Get the number of jobs in the sequence */
    JobsCount = SequenceConfig->NumJobs;
    9476:	9b01      	ldr	r3, [sp, #4]
    9478:	881b      	ldrh	r3, [r3, #0]
    947a:	f8ad 301e 	strh.w	r3, [sp, #30]
    JobIndexList = SequenceConfig->JobIndexList;
    947e:	9b01      	ldr	r3, [sp, #4]
    9480:	689b      	ldr	r3, [r3, #8]
    9482:	9306      	str	r3, [sp, #24]
    while (0u < JobsCount)
    9484:	e072      	b.n	956c <Spi_SyncJobsTranfer+0x104>
    {
        /* Get the job id */
        Job = *JobIndexList;
    9486:	9b06      	ldr	r3, [sp, #24]
    9488:	881b      	ldrh	r3, [r3, #0]
    948a:	f8ad 3014 	strh.w	r3, [sp, #20]
        /* Set the job status as pending */
        JobState = &Spi_axSpiJobState[Job];
    948e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9492:	009b      	lsls	r3, r3, #2
    9494:	4a3a      	ldr	r2, [pc, #232]	; (9580 <Spi_SyncJobsTranfer+0x118>)
    9496:	4413      	add	r3, r2
    9498:	9304      	str	r3, [sp, #16]
        JobState->Result = SPI_JOB_PENDING;
    949a:	9b04      	ldr	r3, [sp, #16]
    949c:	2201      	movs	r2, #1
    949e:	601a      	str	r2, [r3, #0]
        JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    94a0:	4a38      	ldr	r2, [pc, #224]	; (9584 <Spi_SyncJobsTranfer+0x11c>)
    94a2:	9b00      	ldr	r3, [sp, #0]
    94a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94a8:	691a      	ldr	r2, [r3, #16]
    94aa:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    94ae:	009b      	lsls	r3, r3, #2
    94b0:	4413      	add	r3, r2
    94b2:	681b      	ldr	r3, [r3, #0]
    94b4:	9303      	str	r3, [sp, #12]
        
        /* start job notification to assert the non-cs pin,
        when non-cs pin is used as chipselect*/
        if (NULL_PTR != JobConfig->StartNotification)
    94b6:	9b03      	ldr	r3, [sp, #12]
    94b8:	68db      	ldr	r3, [r3, #12]
    94ba:	2b00      	cmp	r3, #0
    94bc:	d002      	beq.n	94c4 <Spi_SyncJobsTranfer+0x5c>
        {
            JobConfig->StartNotification();
    94be:	9b03      	ldr	r3, [sp, #12]
    94c0:	68db      	ldr	r3, [r3, #12]
    94c2:	4798      	blx	r3
        else
        {
            /* Do nothing */
        }
        /* Mark HWUnit as busy */
        Spi_axSpiHwUnitQueueArray[JobConfig->HWUnit].Status = SPI_BUSY;
    94c4:	9b03      	ldr	r3, [sp, #12]
    94c6:	7f1b      	ldrb	r3, [r3, #28]
    94c8:	4619      	mov	r1, r3
    94ca:	4b2f      	ldr	r3, [pc, #188]	; (9588 <Spi_SyncJobsTranfer+0x120>)
    94cc:	2202      	movs	r2, #2
    94ce:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        
        Status = Spi_Ipw_SyncTransmit(JobConfig, SpiCoreID);
    94d2:	9900      	ldr	r1, [sp, #0]
    94d4:	9803      	ldr	r0, [sp, #12]
    94d6:	f000 fc5f 	bl	9d98 <Spi_Ipw_SyncTransmit>
    94da:	4603      	mov	r3, r0
    94dc:	f88d 3017 	strb.w	r3, [sp, #23]
        
        /* release HWUnit */
        Spi_axSpiHwUnitQueueArray[JobConfig->HWUnit].Status = SPI_IDLE;
    94e0:	9b03      	ldr	r3, [sp, #12]
    94e2:	7f1b      	ldrb	r3, [r3, #28]
    94e4:	4619      	mov	r1, r3
    94e6:	4b28      	ldr	r3, [pc, #160]	; (9588 <Spi_SyncJobsTranfer+0x120>)
    94e8:	2201      	movs	r2, #1
    94ea:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        
        if ((Std_ReturnType)E_OK == Status)
    94ee:	f89d 3017 	ldrb.w	r3, [sp, #23]
    94f2:	2b00      	cmp	r3, #0
    94f4:	d10a      	bne.n	950c <Spi_SyncJobsTranfer+0xa4>
        {
            /* Job is done set the status as OK */
            JobState->Result = SPI_JOB_OK;
    94f6:	9b04      	ldr	r3, [sp, #16]
    94f8:	2200      	movs	r2, #0
    94fa:	601a      	str	r2, [r3, #0]
            /* Perform job EndNotification (if there is one) */
            if (NULL_PTR != JobConfig->EndNotification)
    94fc:	9b03      	ldr	r3, [sp, #12]
    94fe:	689b      	ldr	r3, [r3, #8]
    9500:	2b00      	cmp	r3, #0
    9502:	d02b      	beq.n	955c <Spi_SyncJobsTranfer+0xf4>
            {
                JobConfig->EndNotification();
    9504:	9b03      	ldr	r3, [sp, #12]
    9506:	689b      	ldr	r3, [r3, #8]
    9508:	4798      	blx	r3
    950a:	e027      	b.n	955c <Spi_SyncJobsTranfer+0xf4>
            /* transmission failed */
            /* set the remaining job status (including the current one) as FAILED */
            do
            {
                /* Set the job status as FAILED */
                Spi_axSpiJobState[*JobIndexList].Result = SPI_JOB_FAILED;
    950c:	9b06      	ldr	r3, [sp, #24]
    950e:	881b      	ldrh	r3, [r3, #0]
    9510:	4619      	mov	r1, r3
    9512:	4b1b      	ldr	r3, [pc, #108]	; (9580 <Spi_SyncJobsTranfer+0x118>)
    9514:	2202      	movs	r2, #2
    9516:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                /* Update pointer position for JobConfig */
                JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[*JobIndexList].JobCfg;
    951a:	4a1a      	ldr	r2, [pc, #104]	; (9584 <Spi_SyncJobsTranfer+0x11c>)
    951c:	9b00      	ldr	r3, [sp, #0]
    951e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9522:	691a      	ldr	r2, [r3, #16]
    9524:	9b06      	ldr	r3, [sp, #24]
    9526:	881b      	ldrh	r3, [r3, #0]
    9528:	009b      	lsls	r3, r3, #2
    952a:	4413      	add	r3, r2
    952c:	681b      	ldr	r3, [r3, #0]
    952e:	9303      	str	r3, [sp, #12]
                /* Perform job EndNotification (if there is one) */
                if (NULL_PTR != JobConfig->EndNotification)
    9530:	9b03      	ldr	r3, [sp, #12]
    9532:	689b      	ldr	r3, [r3, #8]
    9534:	2b00      	cmp	r3, #0
    9536:	d002      	beq.n	953e <Spi_SyncJobsTranfer+0xd6>
                {
                    JobConfig->EndNotification();
    9538:	9b03      	ldr	r3, [sp, #12]
    953a:	689b      	ldr	r3, [r3, #8]
    953c:	4798      	blx	r3
                }
                else
                {
                    /* Do nothing */
                }
                JobIndexList++;
    953e:	9b06      	ldr	r3, [sp, #24]
    9540:	3302      	adds	r3, #2
    9542:	9306      	str	r3, [sp, #24]
                JobsCount--;
    9544:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    9548:	3b01      	subs	r3, #1
    954a:	f8ad 301e 	strh.w	r3, [sp, #30]
            } while (0u < JobsCount);
    954e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    9552:	2b00      	cmp	r3, #0
    9554:	d1da      	bne.n	950c <Spi_SyncJobsTranfer+0xa4>
            JobsCount = 1u;  /* needed to end correctly the outer loop */
    9556:	2301      	movs	r3, #1
    9558:	f8ad 301e 	strh.w	r3, [sp, #30]
        }
        /* iterate to next job in sequence */
        JobIndexList++;
    955c:	9b06      	ldr	r3, [sp, #24]
    955e:	3302      	adds	r3, #2
    9560:	9306      	str	r3, [sp, #24]
        JobsCount--;
    9562:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    9566:	3b01      	subs	r3, #1
    9568:	f8ad 301e 	strh.w	r3, [sp, #30]
    while (0u < JobsCount)
    956c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    9570:	2b00      	cmp	r3, #0
    9572:	d188      	bne.n	9486 <Spi_SyncJobsTranfer+0x1e>
    } /* while (JobsCount > 0u) */
    return Status;
    9574:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    9578:	4618      	mov	r0, r3
    957a:	b009      	add	sp, #36	; 0x24
    957c:	f85d fb04 	ldr.w	pc, [sp], #4
    9580:	1fff8df4 	.word	0x1fff8df4
    9584:	1fff8dec 	.word	0x1fff8dec
    9588:	1fff8de4 	.word	0x1fff8de4

0000958c <Spi_InitChannelsJobsSeqsState>:
*/
static void Spi_InitChannelsJobsSeqsState
    (
        uint32 SpiCoreID      
    )
{
    958c:	b088      	sub	sp, #32
    958e:	9001      	str	r0, [sp, #4]
#endif
    const Spi_ChannelConfigType *ChannelConfig;
    const Spi_JobConfigType *JobConfig;
    const Spi_SequenceConfigType *SequenceConfig;
    
    for (Channel = 0u;
    9590:	2300      	movs	r3, #0
    9592:	9307      	str	r3, [sp, #28]
    9594:	e034      	b.n	9600 <Spi_InitChannelsJobsSeqsState+0x74>
        Channel <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxChannel);
        Channel++)
    {
        ChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[Channel].ChannelCfg;
    9596:	4a4a      	ldr	r2, [pc, #296]	; (96c0 <Spi_InitChannelsJobsSeqsState+0x134>)
    9598:	9b01      	ldr	r3, [sp, #4]
    959a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    959e:	68da      	ldr	r2, [r3, #12]
    95a0:	9b07      	ldr	r3, [sp, #28]
    95a2:	009b      	lsls	r3, r3, #2
    95a4:	4413      	add	r3, r2
    95a6:	681b      	ldr	r3, [r3, #0]
    95a8:	9302      	str	r3, [sp, #8]
        /* Check which channel has assigned for current core */
        if((NULL_PTR != ChannelConfig) && (SpiCoreID == ChannelConfig->SpiCoreUse))
    95aa:	9b02      	ldr	r3, [sp, #8]
    95ac:	2b00      	cmp	r3, #0
    95ae:	d024      	beq.n	95fa <Spi_InitChannelsJobsSeqsState+0x6e>
    95b0:	9b02      	ldr	r3, [sp, #8]
    95b2:	695b      	ldr	r3, [r3, #20]
    95b4:	9a01      	ldr	r2, [sp, #4]
    95b6:	429a      	cmp	r2, r3
    95b8:	d11f      	bne.n	95fa <Spi_InitChannelsJobsSeqsState+0x6e>
        {
            /* Check if configured buffers are External (EB) */
            if (EB == ChannelConfig->BufferType)
    95ba:	9b02      	ldr	r3, [sp, #8]
    95bc:	681b      	ldr	r3, [r3, #0]
    95be:	2b01      	cmp	r3, #1
    95c0:	d10e      	bne.n	95e0 <Spi_InitChannelsJobsSeqsState+0x54>
            {
                /* Initialize all buffers */
                ChannelConfig->BufferDescriptor->ExternalBufferTX = NULL_PTR;
    95c2:	9b02      	ldr	r3, [sp, #8]
    95c4:	691b      	ldr	r3, [r3, #16]
    95c6:	2200      	movs	r2, #0
    95c8:	601a      	str	r2, [r3, #0]
                ChannelConfig->BufferDescriptor->BufferRX = NULL_PTR;
    95ca:	9b02      	ldr	r3, [sp, #8]
    95cc:	691b      	ldr	r3, [r3, #16]
    95ce:	2200      	movs	r2, #0
    95d0:	609a      	str	r2, [r3, #8]
    
                /* Channel length is zero for unconfigured external buffers */
                Spi_axSpiChannelState[Channel].Length = (Spi_NumberOfDataType) 0;
    95d2:	4a3c      	ldr	r2, [pc, #240]	; (96c4 <Spi_InitChannelsJobsSeqsState+0x138>)
    95d4:	9b07      	ldr	r3, [sp, #28]
    95d6:	009b      	lsls	r3, r3, #2
    95d8:	4413      	add	r3, r2
    95da:	2200      	movs	r2, #0
    95dc:	805a      	strh	r2, [r3, #2]
    95de:	e007      	b.n	95f0 <Spi_InitChannelsJobsSeqsState+0x64>
            }
            else
            {
                /* Setup channel length according to configuration */
                Spi_axSpiChannelState[Channel].Length = ChannelConfig->Length;
    95e0:	9b02      	ldr	r3, [sp, #8]
    95e2:	8999      	ldrh	r1, [r3, #12]
    95e4:	4a37      	ldr	r2, [pc, #220]	; (96c4 <Spi_InitChannelsJobsSeqsState+0x138>)
    95e6:	9b07      	ldr	r3, [sp, #28]
    95e8:	009b      	lsls	r3, r3, #2
    95ea:	4413      	add	r3, r2
    95ec:	460a      	mov	r2, r1
    95ee:	805a      	strh	r2, [r3, #2]
            }
            Spi_axSpiChannelState[Channel].Flags = SPI_CHANNEL_FLAG_TX_DEFAULT_U8;
    95f0:	4a34      	ldr	r2, [pc, #208]	; (96c4 <Spi_InitChannelsJobsSeqsState+0x138>)
    95f2:	9b07      	ldr	r3, [sp, #28]
    95f4:	2101      	movs	r1, #1
    95f6:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        Channel++)
    95fa:	9b07      	ldr	r3, [sp, #28]
    95fc:	3301      	adds	r3, #1
    95fe:	9307      	str	r3, [sp, #28]
        Channel <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxChannel);
    9600:	4a2f      	ldr	r2, [pc, #188]	; (96c0 <Spi_InitChannelsJobsSeqsState+0x134>)
    9602:	9b01      	ldr	r3, [sp, #4]
    9604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9608:	789b      	ldrb	r3, [r3, #2]
    960a:	461a      	mov	r2, r3
    for (Channel = 0u;
    960c:	9b07      	ldr	r3, [sp, #28]
    960e:	4293      	cmp	r3, r2
    9610:	d9c1      	bls.n	9596 <Spi_InitChannelsJobsSeqsState+0xa>
        }
    }
    
    /* initialize job results */
    for (Job = 0u;
    9612:	2300      	movs	r3, #0
    9614:	9306      	str	r3, [sp, #24]
    9616:	e019      	b.n	964c <Spi_InitChannelsJobsSeqsState+0xc0>
        Job <= (uint32)( Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxJob);
        Job++)
    {
        JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    9618:	4a29      	ldr	r2, [pc, #164]	; (96c0 <Spi_InitChannelsJobsSeqsState+0x134>)
    961a:	9b01      	ldr	r3, [sp, #4]
    961c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9620:	691a      	ldr	r2, [r3, #16]
    9622:	9b06      	ldr	r3, [sp, #24]
    9624:	009b      	lsls	r3, r3, #2
    9626:	4413      	add	r3, r2
    9628:	681b      	ldr	r3, [r3, #0]
    962a:	9303      	str	r3, [sp, #12]
        if((NULL_PTR != JobConfig) && (SpiCoreID == JobConfig->SpiCoreUse))
    962c:	9b03      	ldr	r3, [sp, #12]
    962e:	2b00      	cmp	r3, #0
    9630:	d009      	beq.n	9646 <Spi_InitChannelsJobsSeqsState+0xba>
    9632:	9b03      	ldr	r3, [sp, #12]
    9634:	695b      	ldr	r3, [r3, #20]
    9636:	9a01      	ldr	r2, [sp, #4]
    9638:	429a      	cmp	r2, r3
    963a:	d104      	bne.n	9646 <Spi_InitChannelsJobsSeqsState+0xba>
        {
            Spi_axSpiJobState[Job].Result = SPI_JOB_OK;
    963c:	4a22      	ldr	r2, [pc, #136]	; (96c8 <Spi_InitChannelsJobsSeqsState+0x13c>)
    963e:	9b06      	ldr	r3, [sp, #24]
    9640:	2100      	movs	r1, #0
    9642:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        Job++)
    9646:	9b06      	ldr	r3, [sp, #24]
    9648:	3301      	adds	r3, #1
    964a:	9306      	str	r3, [sp, #24]
        Job <= (uint32)( Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxJob);
    964c:	4a1c      	ldr	r2, [pc, #112]	; (96c0 <Spi_InitChannelsJobsSeqsState+0x134>)
    964e:	9b01      	ldr	r3, [sp, #4]
    9650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9654:	889b      	ldrh	r3, [r3, #4]
    9656:	461a      	mov	r2, r3
    for (Job = 0u;
    9658:	9b06      	ldr	r3, [sp, #24]
    965a:	4293      	cmp	r3, r2
    965c:	d9dc      	bls.n	9618 <Spi_InitChannelsJobsSeqsState+0x8c>
            Spi_axSpiJobState[Job].AsyncCrtSequenceState = NULL_PTR;
        #endif
        }
    }
    
    for (Sequence = 0u;
    965e:	2300      	movs	r3, #0
    9660:	9305      	str	r3, [sp, #20]
    9662:	e01f      	b.n	96a4 <Spi_InitChannelsJobsSeqsState+0x118>
        Sequence <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxSequence);
        Sequence++)
    {
        SequenceConfig = Spi_apxSpiConfigPtr[SpiCoreID]->SequenceConfig[Sequence].SeqConfig;
    9664:	4a16      	ldr	r2, [pc, #88]	; (96c0 <Spi_InitChannelsJobsSeqsState+0x134>)
    9666:	9b01      	ldr	r3, [sp, #4]
    9668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    966c:	695a      	ldr	r2, [r3, #20]
    966e:	9b05      	ldr	r3, [sp, #20]
    9670:	009b      	lsls	r3, r3, #2
    9672:	4413      	add	r3, r2
    9674:	681b      	ldr	r3, [r3, #0]
    9676:	9304      	str	r3, [sp, #16]
        if ((NULL_PTR != SequenceConfig) && (SpiCoreID == SequenceConfig->SpiCoreUse))
    9678:	9b04      	ldr	r3, [sp, #16]
    967a:	2b00      	cmp	r3, #0
    967c:	d00f      	beq.n	969e <Spi_InitChannelsJobsSeqsState+0x112>
    967e:	9b04      	ldr	r3, [sp, #16]
    9680:	685b      	ldr	r3, [r3, #4]
    9682:	9a01      	ldr	r2, [sp, #4]
    9684:	429a      	cmp	r2, r3
    9686:	d10a      	bne.n	969e <Spi_InitChannelsJobsSeqsState+0x112>
            SequenceConfig = Spi_apxSpiConfigPtr[SpiCoreID]->SequenceConfig[Sequence].SeqConfig;
            Spi_axSpiSequenceState[Sequence].Sequence = SequenceConfig;
            #endif
    
            /* initialize sequence results */
            Spi_axSpiSequenceState[Sequence].Result = SPI_SEQ_OK;
    9688:	4a10      	ldr	r2, [pc, #64]	; (96cc <Spi_InitChannelsJobsSeqsState+0x140>)
    968a:	9b05      	ldr	r3, [sp, #20]
    968c:	2100      	movs	r1, #0
    968e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* SPI135: Spi_SyncTransmit() must fail if an other sync transmission
                    is ongoing.*/
            /* mark all HW units as used by the sync transmission, in order to
                force the mutual exclusion of Spi_SyncTransmit() calls */
    
            Spi_au32SpiSeqUsedHWUnits[Sequence] = 0xFFFFFFFFU;
    9692:	4a0f      	ldr	r2, [pc, #60]	; (96d0 <Spi_InitChannelsJobsSeqsState+0x144>)
    9694:	9b05      	ldr	r3, [sp, #20]
    9696:	f04f 31ff 	mov.w	r1, #4294967295
    969a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        Sequence++)
    969e:	9b05      	ldr	r3, [sp, #20]
    96a0:	3301      	adds	r3, #1
    96a2:	9305      	str	r3, [sp, #20]
        Sequence <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxSequence);
    96a4:	4a06      	ldr	r2, [pc, #24]	; (96c0 <Spi_InitChannelsJobsSeqsState+0x134>)
    96a6:	9b01      	ldr	r3, [sp, #4]
    96a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96ac:	799b      	ldrb	r3, [r3, #6]
    96ae:	461a      	mov	r2, r3
    for (Sequence = 0u;
    96b0:	9b05      	ldr	r3, [sp, #20]
    96b2:	4293      	cmp	r3, r2
    96b4:	d9d6      	bls.n	9664 <Spi_InitChannelsJobsSeqsState+0xd8>
        else
        {
            /* Do nothing */
        }
    }
}
    96b6:	bf00      	nop
    96b8:	bf00      	nop
    96ba:	b008      	add	sp, #32
    96bc:	4770      	bx	lr
    96be:	bf00      	nop
    96c0:	1fff8dec 	.word	0x1fff8dec
    96c4:	1fff8df8 	.word	0x1fff8df8
    96c8:	1fff8df4 	.word	0x1fff8df4
    96cc:	1fff8df0 	.word	0x1fff8df0
    96d0:	1fff8e00 	.word	0x1fff8e00

000096d4 <Spi_GetStatusAsyncCheckHwBusy>:
*/
static Spi_StatusType Spi_GetStatusAsyncCheckHwBusy
    (
        uint32 SpiCoreID
    )
{
    96d4:	b084      	sub	sp, #16
    96d6:	9001      	str	r0, [sp, #4]
    Spi_StatusType StatusFlag = SPI_IDLE;
    96d8:	2301      	movs	r3, #1
    96da:	9303      	str	r3, [sp, #12]
    Spi_HWUnitType HWUnit;
    
    for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    96dc:	2300      	movs	r3, #0
    96de:	f88d 300b 	strb.w	r3, [sp, #11]
    96e2:	e028      	b.n	9736 <Spi_GetStatusAsyncCheckHwBusy+0x62>
    {
        if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    96e4:	4a18      	ldr	r2, [pc, #96]	; (9748 <Spi_GetStatusAsyncCheckHwBusy+0x74>)
    96e6:	9b01      	ldr	r3, [sp, #4]
    96e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96ec:	69da      	ldr	r2, [r3, #28]
    96ee:	f89d 300b 	ldrb.w	r3, [sp, #11]
    96f2:	009b      	lsls	r3, r3, #2
    96f4:	4413      	add	r3, r2
    96f6:	681b      	ldr	r3, [r3, #0]
    96f8:	2b00      	cmp	r3, #0
    96fa:	d017      	beq.n	972c <Spi_GetStatusAsyncCheckHwBusy+0x58>
            (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    96fc:	4a12      	ldr	r2, [pc, #72]	; (9748 <Spi_GetStatusAsyncCheckHwBusy+0x74>)
    96fe:	9b01      	ldr	r3, [sp, #4]
    9700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9704:	69da      	ldr	r2, [r3, #28]
    9706:	f89d 300b 	ldrb.w	r3, [sp, #11]
    970a:	009b      	lsls	r3, r3, #2
    970c:	4413      	add	r3, r2
    970e:	681b      	ldr	r3, [r3, #0]
    9710:	689b      	ldr	r3, [r3, #8]
        if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    9712:	9a01      	ldr	r2, [sp, #4]
    9714:	429a      	cmp	r2, r3
    9716:	d109      	bne.n	972c <Spi_GetStatusAsyncCheckHwBusy+0x58>
           )
        {
            if (SPI_BUSY == Spi_axSpiHwUnitQueueArray[HWUnit].Status)
    9718:	f89d 300b 	ldrb.w	r3, [sp, #11]
    971c:	4a0b      	ldr	r2, [pc, #44]	; (974c <Spi_GetStatusAsyncCheckHwBusy+0x78>)
    971e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    9722:	2b02      	cmp	r3, #2
    9724:	d102      	bne.n	972c <Spi_GetStatusAsyncCheckHwBusy+0x58>
            {
                StatusFlag = SPI_BUSY;
    9726:	2302      	movs	r3, #2
    9728:	9303      	str	r3, [sp, #12]
                break;
    972a:	e008      	b.n	973e <Spi_GetStatusAsyncCheckHwBusy+0x6a>
    for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    972c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9730:	3301      	adds	r3, #1
    9732:	f88d 300b 	strb.w	r3, [sp, #11]
    9736:	f89d 300b 	ldrb.w	r3, [sp, #11]
    973a:	2b00      	cmp	r3, #0
    973c:	d0d2      	beq.n	96e4 <Spi_GetStatusAsyncCheckHwBusy+0x10>
        else
        {
            /* Do nothing */
        }
    }
    return StatusFlag;
    973e:	9b03      	ldr	r3, [sp, #12]
}
    9740:	4618      	mov	r0, r3
    9742:	b004      	add	sp, #16
    9744:	4770      	bx	lr
    9746:	bf00      	nop
    9748:	1fff8dec 	.word	0x1fff8dec
    974c:	1fff8de4 	.word	0x1fff8de4

00009750 <Spi_GetVersionInfo>:
/** @implements Spi_GetVersionInfo_Activity */
void Spi_GetVersionInfo 
    (
        Std_VersionInfoType *versioninfo
    )
{
    9750:	b082      	sub	sp, #8
    9752:	9001      	str	r0, [sp, #4]
        (void)Det_ReportError((uint16)SPI_MODULE_ID,(uint8)0,SPI_GETVERSIONINFO_ID,SPI_E_PARAM_POINTER);
    }
    else
    {
#endif /* SPI_DEV_ERROR_DETECT == STD_ON */
    versioninfo->vendorID = (uint16)SPI_VENDOR_ID;
    9754:	9b01      	ldr	r3, [sp, #4]
    9756:	222b      	movs	r2, #43	; 0x2b
    9758:	801a      	strh	r2, [r3, #0]
    versioninfo->moduleID = (uint8)SPI_MODULE_ID;
    975a:	9b01      	ldr	r3, [sp, #4]
    975c:	2253      	movs	r2, #83	; 0x53
    975e:	805a      	strh	r2, [r3, #2]
    versioninfo->sw_major_version = (uint8)SPI_SW_MAJOR_VERSION;
    9760:	9b01      	ldr	r3, [sp, #4]
    9762:	2202      	movs	r2, #2
    9764:	711a      	strb	r2, [r3, #4]
    versioninfo->sw_minor_version = (uint8)SPI_SW_MINOR_VERSION;
    9766:	9b01      	ldr	r3, [sp, #4]
    9768:	2200      	movs	r2, #0
    976a:	715a      	strb	r2, [r3, #5]
    versioninfo->sw_patch_version = (uint8)SPI_SW_PATCH_VERSION;
    976c:	9b01      	ldr	r3, [sp, #4]
    976e:	2200      	movs	r2, #0
    9770:	719a      	strb	r2, [r3, #6]
#if(SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif /* SPI_DEV_ERROR_DETECT == STD_ON */
}
    9772:	bf00      	nop
    9774:	b002      	add	sp, #8
    9776:	4770      	bx	lr

00009778 <Spi_Init>:
/** @implements Spi_Init_Activity */
void Spi_Init
    (
        const Spi_ConfigType *ConfigPtr
    )
{
    9778:	b500      	push	{lr}
    977a:	b085      	sub	sp, #20
    977c:	9001      	str	r0, [sp, #4]
    Spi_HWUnitType HWUnit;
    uint32 SpiCoreID;
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    977e:	2300      	movs	r3, #0
    9780:	f88d 300e 	strb.w	r3, [sp, #14]

    SpiCoreID = Spi_GetCoreID;
    9784:	2300      	movs	r3, #0
    9786:	9302      	str	r3, [sp, #8]
    CheckStatus = Spi_InitCheckDemError(SpiCoreID, ConfigPtr);
    if ((Std_ReturnType)E_OK == CheckStatus) 
    {
#endif /*(SPI_DEV_ERROR_DETECT == STD_ON)*/

    CheckStatus = Spi_CheckInit(ConfigPtr, SpiCoreID);
    9788:	9902      	ldr	r1, [sp, #8]
    978a:	9801      	ldr	r0, [sp, #4]
    978c:	f7ff fe44 	bl	9418 <Spi_CheckInit>
    9790:	4603      	mov	r3, r0
    9792:	f88d 300e 	strb.w	r3, [sp, #14]

    if((Std_ReturnType)E_OK == CheckStatus )
    9796:	f89d 300e 	ldrb.w	r3, [sp, #14]
    979a:	2b00      	cmp	r3, #0
    979c:	d144      	bne.n	9828 <Spi_Init+0xb0>
    {
    #if (SPI_PRECOMPILE_SUPPORT == STD_OFF)
        Spi_apxSpiConfigPtr[SpiCoreID] = ConfigPtr;
    979e:	4924      	ldr	r1, [pc, #144]	; (9830 <Spi_Init+0xb8>)
    97a0:	9b02      	ldr	r3, [sp, #8]
    97a2:	9a01      	ldr	r2, [sp, #4]
    97a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    #else /* (SPI_CONFIG_VARIANT == SPI_VARIANT_PRECOMPILE) */
        Spi_apxSpiConfigPtr[SpiCoreID] = Spi_PBCfgVariantPredefined[SpiCoreID];
    #endif /* (SPI_PRECOMPILE_SUPPORT == STD_OFF) */
    /* Initiate Channels, Jobs, Sequences state */
    Spi_InitChannelsJobsSeqsState(SpiCoreID);
    97a8:	9802      	ldr	r0, [sp, #8]
    97aa:	f7ff feef 	bl	958c <Spi_InitChannelsJobsSeqsState>
        
        /* initialize all physical HWUnits */
        for (HWUnit = (Spi_HWUnitType) 0;
    97ae:	2300      	movs	r3, #0
    97b0:	f88d 300f 	strb.w	r3, [sp, #15]
    97b4:	e034      	b.n	9820 <Spi_Init+0xa8>
            HWUnit < (Spi_HWUnitType) SPI_MAX_HWUNIT;
            HWUnit++)
        {
            if((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    97b6:	4a1e      	ldr	r2, [pc, #120]	; (9830 <Spi_Init+0xb8>)
    97b8:	9b02      	ldr	r3, [sp, #8]
    97ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97be:	69da      	ldr	r2, [r3, #28]
    97c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    97c4:	009b      	lsls	r3, r3, #2
    97c6:	4413      	add	r3, r2
    97c8:	681b      	ldr	r3, [r3, #0]
    97ca:	2b00      	cmp	r3, #0
    97cc:	d023      	beq.n	9816 <Spi_Init+0x9e>
               (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    97ce:	4a18      	ldr	r2, [pc, #96]	; (9830 <Spi_Init+0xb8>)
    97d0:	9b02      	ldr	r3, [sp, #8]
    97d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97d6:	69da      	ldr	r2, [r3, #28]
    97d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    97dc:	009b      	lsls	r3, r3, #2
    97de:	4413      	add	r3, r2
    97e0:	681b      	ldr	r3, [r3, #0]
    97e2:	689b      	ldr	r3, [r3, #8]
            if((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    97e4:	9a02      	ldr	r2, [sp, #8]
    97e6:	429a      	cmp	r2, r3
    97e8:	d115      	bne.n	9816 <Spi_Init+0x9e>
              )
            {
                Spi_Ipw_Init(HWUnit, Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig);
    97ea:	4a11      	ldr	r2, [pc, #68]	; (9830 <Spi_Init+0xb8>)
    97ec:	9b02      	ldr	r3, [sp, #8]
    97ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97f2:	69da      	ldr	r2, [r3, #28]
    97f4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    97f8:	009b      	lsls	r3, r3, #2
    97fa:	4413      	add	r3, r2
    97fc:	681a      	ldr	r2, [r3, #0]
    97fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9802:	4611      	mov	r1, r2
    9804:	4618      	mov	r0, r3
    9806:	f000 fa8c 	bl	9d22 <Spi_Ipw_Init>

#if ((SPI_LEVEL_DELIVERED == SPI_LEVEL1) || (SPI_LEVEL_DELIVERED == SPI_LEVEL2))
                /* initialize the Job lists => no scheduled job for the unit */
                Spi_InitJobsList(HWUnit);
#endif
                Spi_axSpiHwUnitQueueArray[HWUnit].Status = SPI_IDLE;
    980a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    980e:	4a09      	ldr	r2, [pc, #36]	; (9834 <Spi_Init+0xbc>)
    9810:	2101      	movs	r1, #1
    9812:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
            HWUnit++)
    9816:	f89d 300f 	ldrb.w	r3, [sp, #15]
    981a:	3301      	adds	r3, #1
    981c:	f88d 300f 	strb.w	r3, [sp, #15]
        for (HWUnit = (Spi_HWUnitType) 0;
    9820:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9824:	2b00      	cmp	r3, #0
    9826:	d0c6      	beq.n	97b6 <Spi_Init+0x3e>
    }

#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif /*(SPI_DEV_ERROR_DETECT == STD_ON)*/
}
    9828:	bf00      	nop
    982a:	b005      	add	sp, #20
    982c:	f85d fb04 	ldr.w	pc, [sp], #4
    9830:	1fff8dec 	.word	0x1fff8dec
    9834:	1fff8de4 	.word	0x1fff8de4

00009838 <Spi_DeInit>:
*       if SPI_DEV_ERROR_DETECT is STD_ON.
*
* @implements Spi_DeInit_Activity
*/
Std_ReturnType Spi_DeInit(void)
{
    9838:	b500      	push	{lr}
    983a:	b083      	sub	sp, #12
    Std_ReturnType TempExit = (Std_ReturnType)E_OK;
    983c:	2300      	movs	r3, #0
    983e:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_HWUnitType HWUnit;
    uint32 SpiCoreID;

    SpiCoreID = Spi_GetCoreID;
    9842:	2300      	movs	r3, #0
    9844:	9300      	str	r3, [sp, #0]
    }
    else
    {
#endif
        /* Check if Spi Status is Busy */
        if (SPI_BUSY == Spi_GetStatus())
    9846:	f000 f8b1 	bl	99ac <Spi_GetStatus>
    984a:	4603      	mov	r3, r0
    984c:	2b02      	cmp	r3, #2
    984e:	d103      	bne.n	9858 <Spi_DeInit+0x20>
        {
            TempExit = E_NOT_OK;
    9850:	2301      	movs	r3, #1
    9852:	f88d 3007 	strb.w	r3, [sp, #7]
    9856:	e037      	b.n	98c8 <Spi_DeInit+0x90>
        }
        else
        {
            /* De-initialize all physical HWUnits */
            for (HWUnit = (Spi_HWUnitType) 0;
    9858:	2300      	movs	r3, #0
    985a:	f88d 3006 	strb.w	r3, [sp, #6]
    985e:	e02a      	b.n	98b6 <Spi_DeInit+0x7e>
                 HWUnit < (Spi_HWUnitType) SPI_MAX_HWUNIT;
                 HWUnit++)
            {
                if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    9860:	4a1c      	ldr	r2, [pc, #112]	; (98d4 <Spi_DeInit+0x9c>)
    9862:	9b00      	ldr	r3, [sp, #0]
    9864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9868:	69da      	ldr	r2, [r3, #28]
    986a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    986e:	009b      	lsls	r3, r3, #2
    9870:	4413      	add	r3, r2
    9872:	681b      	ldr	r3, [r3, #0]
    9874:	2b00      	cmp	r3, #0
    9876:	d019      	beq.n	98ac <Spi_DeInit+0x74>
                    (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    9878:	4a16      	ldr	r2, [pc, #88]	; (98d4 <Spi_DeInit+0x9c>)
    987a:	9b00      	ldr	r3, [sp, #0]
    987c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9880:	69da      	ldr	r2, [r3, #28]
    9882:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9886:	009b      	lsls	r3, r3, #2
    9888:	4413      	add	r3, r2
    988a:	681b      	ldr	r3, [r3, #0]
    988c:	689b      	ldr	r3, [r3, #8]
                if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    988e:	9a00      	ldr	r2, [sp, #0]
    9890:	429a      	cmp	r2, r3
    9892:	d10b      	bne.n	98ac <Spi_DeInit+0x74>
                   )
                {
                    Spi_Ipw_DeInit(HWUnit, SpiCoreID);
    9894:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9898:	9900      	ldr	r1, [sp, #0]
    989a:	4618      	mov	r0, r3
    989c:	f000 fa54 	bl	9d48 <Spi_Ipw_DeInit>
    
                    Spi_axSpiHwUnitQueueArray[HWUnit].Status = SPI_UNINIT;
    98a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    98a4:	4a0c      	ldr	r2, [pc, #48]	; (98d8 <Spi_DeInit+0xa0>)
    98a6:	2100      	movs	r1, #0
    98a8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
                 HWUnit++)
    98ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
    98b0:	3301      	adds	r3, #1
    98b2:	f88d 3006 	strb.w	r3, [sp, #6]
            for (HWUnit = (Spi_HWUnitType) 0;
    98b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    98ba:	2b00      	cmp	r3, #0
    98bc:	d0d0      	beq.n	9860 <Spi_DeInit+0x28>
                {
                    /* Do nothing */
                }
            }
            /* Reset configuration pointer */
            Spi_apxSpiConfigPtr[SpiCoreID] = NULL_PTR;
    98be:	4a05      	ldr	r2, [pc, #20]	; (98d4 <Spi_DeInit+0x9c>)
    98c0:	9b00      	ldr	r3, [sp, #0]
    98c2:	2100      	movs	r1, #0
    98c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif

    return TempExit;
    98c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
}
    98cc:	4618      	mov	r0, r3
    98ce:	b003      	add	sp, #12
    98d0:	f85d fb04 	ldr.w	pc, [sp], #4
    98d4:	1fff8dec 	.word	0x1fff8dec
    98d8:	1fff8de4 	.word	0x1fff8de4

000098dc <Spi_SetupEB>:
        Spi_ChannelType Channel,
        const Spi_DataBufferType  *SrcDataBufferPtr,
        Spi_DataBufferType *DesDataBufferPtr,
        Spi_NumberOfDataType Length
    )
{
    98dc:	b500      	push	{lr}
    98de:	b089      	sub	sp, #36	; 0x24
    98e0:	9102      	str	r1, [sp, #8]
    98e2:	9201      	str	r2, [sp, #4]
    98e4:	461a      	mov	r2, r3
    98e6:	4603      	mov	r3, r0
    98e8:	f88d 300f 	strb.w	r3, [sp, #15]
    98ec:	4613      	mov	r3, r2
    98ee:	f8ad 300c 	strh.w	r3, [sp, #12]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    98f2:	2300      	movs	r3, #0
    98f4:	f88d 301f 	strb.w	r3, [sp, #31]
    Spi_ChannelStateType *ChannelState;
    const Spi_ChannelConfigType *ChannelConfig;
    uint32 SpiCoreID;

    /* get current coreID */
    SpiCoreID = Spi_GetCoreID;
    98f8:	2300      	movs	r3, #0
    98fa:	9306      	str	r3, [sp, #24]
        Status = (Std_ReturnType)E_NOT_OK;
    }
    else
    {
#endif
        ChannelState = &Spi_axSpiChannelState[Channel];
    98fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9900:	009b      	lsls	r3, r3, #2
    9902:	4a28      	ldr	r2, [pc, #160]	; (99a4 <Spi_SetupEB+0xc8>)
    9904:	4413      	add	r3, r2
    9906:	9305      	str	r3, [sp, #20]
        ChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[Channel].ChannelCfg;
    9908:	4a27      	ldr	r2, [pc, #156]	; (99a8 <Spi_SetupEB+0xcc>)
    990a:	9b06      	ldr	r3, [sp, #24]
    990c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9910:	68da      	ldr	r2, [r3, #12]
    9912:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9916:	009b      	lsls	r3, r3, #2
    9918:	4413      	add	r3, r2
    991a:	681b      	ldr	r3, [r3, #0]
    991c:	9304      	str	r3, [sp, #16]
        /* exit early if this is the wrong buffer type */
        if (IB == ChannelConfig->BufferType)
    991e:	9b04      	ldr	r3, [sp, #16]
    9920:	681b      	ldr	r3, [r3, #0]
    9922:	2b00      	cmp	r3, #0
    9924:	d103      	bne.n	992e <Spi_SetupEB+0x52>
        {
            /* Call Det_ReportError */
#if (SPI_DEV_ERROR_DETECT == STD_ON)
            (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_SETUPEB_ID,SPI_E_PARAM_CHANNEL);
#endif
            Status = (Std_ReturnType)E_NOT_OK;
    9926:	2301      	movs	r3, #1
    9928:	f88d 301f 	strb.w	r3, [sp, #31]
    992c:	e033      	b.n	9996 <Spi_SetupEB+0xba>
            /* Length and Framesize - aren't compatible */
            /* If 8 < Framesize =< 16: Length must be divisible by 2 */
            /* If 16 < Framesize =< 32: Length must be divisible by 4 */
            Status = Spi_SetupEbCheckLength(ChannelConfig, Length);
#endif
            SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05();
    992e:	f00c fbb3 	bl	16098 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05>
            /* save the new parameters */
            ChannelConfig->BufferDescriptor->ExternalBufferTX = SrcDataBufferPtr;
    9932:	9b04      	ldr	r3, [sp, #16]
    9934:	691b      	ldr	r3, [r3, #16]
    9936:	9a02      	ldr	r2, [sp, #8]
    9938:	601a      	str	r2, [r3, #0]
            ChannelConfig->BufferDescriptor->BufferRX = DesDataBufferPtr;
    993a:	9b04      	ldr	r3, [sp, #16]
    993c:	691b      	ldr	r3, [r3, #16]
    993e:	9a01      	ldr	r2, [sp, #4]
    9940:	609a      	str	r2, [r3, #8]

            ChannelState->Length = Length;
    9942:	9b05      	ldr	r3, [sp, #20]
    9944:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9948:	805a      	strh	r2, [r3, #2]

            /* if source data pointer is zero, transmit default value */
            if (NULL_PTR == SrcDataBufferPtr)
    994a:	9b02      	ldr	r3, [sp, #8]
    994c:	2b00      	cmp	r3, #0
    994e:	d107      	bne.n	9960 <Spi_SetupEB+0x84>
            {
                ChannelState->Flags |= SPI_CHANNEL_FLAG_TX_DEFAULT_U8;
    9950:	9b05      	ldr	r3, [sp, #20]
    9952:	781b      	ldrb	r3, [r3, #0]
    9954:	f043 0301 	orr.w	r3, r3, #1
    9958:	b2da      	uxtb	r2, r3
    995a:	9b05      	ldr	r3, [sp, #20]
    995c:	701a      	strb	r2, [r3, #0]
    995e:	e006      	b.n	996e <Spi_SetupEB+0x92>
            }
            else
            {
                ChannelState->Flags &= (uint8) (~SPI_CHANNEL_FLAG_TX_DEFAULT_U8);
    9960:	9b05      	ldr	r3, [sp, #20]
    9962:	781b      	ldrb	r3, [r3, #0]
    9964:	f023 0301 	bic.w	r3, r3, #1
    9968:	b2da      	uxtb	r2, r3
    996a:	9b05      	ldr	r3, [sp, #20]
    996c:	701a      	strb	r2, [r3, #0]
            }

            /* if destination data pointer is zero, discard receiving data */
            if (NULL_PTR == DesDataBufferPtr)
    996e:	9b01      	ldr	r3, [sp, #4]
    9970:	2b00      	cmp	r3, #0
    9972:	d107      	bne.n	9984 <Spi_SetupEB+0xa8>
            {
                ChannelState->Flags |= SPI_CHANNEL_FLAG_RX_DISCARD_U8;
    9974:	9b05      	ldr	r3, [sp, #20]
    9976:	781b      	ldrb	r3, [r3, #0]
    9978:	f043 0302 	orr.w	r3, r3, #2
    997c:	b2da      	uxtb	r2, r3
    997e:	9b05      	ldr	r3, [sp, #20]
    9980:	701a      	strb	r2, [r3, #0]
    9982:	e006      	b.n	9992 <Spi_SetupEB+0xb6>
            }
            else
            {
                ChannelState->Flags &= (uint8) (~SPI_CHANNEL_FLAG_RX_DISCARD_U8);
    9984:	9b05      	ldr	r3, [sp, #20]
    9986:	781b      	ldrb	r3, [r3, #0]
    9988:	f023 0302 	bic.w	r3, r3, #2
    998c:	b2da      	uxtb	r2, r3
    998e:	9b05      	ldr	r3, [sp, #20]
    9990:	701a      	strb	r2, [r3, #0]
            }
            SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05();
    9992:	f00c fbad 	bl	160f0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05>
        }
#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif

    return Status;
    9996:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    999a:	4618      	mov	r0, r3
    999c:	b009      	add	sp, #36	; 0x24
    999e:	f85d fb04 	ldr.w	pc, [sp], #4
    99a2:	bf00      	nop
    99a4:	1fff8df8 	.word	0x1fff8df8
    99a8:	1fff8dec 	.word	0x1fff8dec

000099ac <Spi_GetStatus>:
*       if SPI_DEV_ERROR_DETECT is STD_ON.
*
* @implements Spi_GetStatus_Activity
*/
Spi_StatusType Spi_GetStatus(void)
{
    99ac:	b500      	push	{lr}
    99ae:	b085      	sub	sp, #20
    Spi_StatusType StatusFlag = SPI_IDLE;
    99b0:	2301      	movs	r3, #1
    99b2:	9303      	str	r3, [sp, #12]
    Spi_HWUnitType HWUnit;
    uint32 SpiCoreID;
    
    /* Get current coreID */
    SpiCoreID = Spi_GetCoreID;
    99b4:	2300      	movs	r3, #0
    99b6:	9301      	str	r3, [sp, #4]

    if (NULL_PTR == Spi_apxSpiConfigPtr[SpiCoreID])
    99b8:	4a22      	ldr	r2, [pc, #136]	; (9a44 <Spi_GetStatus+0x98>)
    99ba:	9b01      	ldr	r3, [sp, #4]
    99bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99c0:	2b00      	cmp	r3, #0
    99c2:	d102      	bne.n	99ca <Spi_GetStatus+0x1e>
        /* If Development Error Detection is enabled, report error if not */
        /* initialized */
        /* Call Det_ReportError */
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_GETSTATUS_ID,SPI_E_UNINIT);
#endif
        StatusFlag = SPI_UNINIT;
    99c4:	2300      	movs	r3, #0
    99c6:	9303      	str	r3, [sp, #12]
    99c8:	e037      	b.n	9a3a <Spi_GetStatus+0x8e>
    }
    else
    {
        /* The SPI Handler Driver software module shall be busy when any
           HWUnit is busy */
        for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    99ca:	2300      	movs	r3, #0
    99cc:	f88d 300b 	strb.w	r3, [sp, #11]
    99d0:	e028      	b.n	9a24 <Spi_GetStatus+0x78>
        {
            if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    99d2:	4a1c      	ldr	r2, [pc, #112]	; (9a44 <Spi_GetStatus+0x98>)
    99d4:	9b01      	ldr	r3, [sp, #4]
    99d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99da:	69da      	ldr	r2, [r3, #28]
    99dc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    99e0:	009b      	lsls	r3, r3, #2
    99e2:	4413      	add	r3, r2
    99e4:	681b      	ldr	r3, [r3, #0]
    99e6:	2b00      	cmp	r3, #0
    99e8:	d017      	beq.n	9a1a <Spi_GetStatus+0x6e>
                (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    99ea:	4a16      	ldr	r2, [pc, #88]	; (9a44 <Spi_GetStatus+0x98>)
    99ec:	9b01      	ldr	r3, [sp, #4]
    99ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99f2:	69da      	ldr	r2, [r3, #28]
    99f4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    99f8:	009b      	lsls	r3, r3, #2
    99fa:	4413      	add	r3, r2
    99fc:	681b      	ldr	r3, [r3, #0]
    99fe:	689b      	ldr	r3, [r3, #8]
            if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    9a00:	9a01      	ldr	r2, [sp, #4]
    9a02:	429a      	cmp	r2, r3
    9a04:	d109      	bne.n	9a1a <Spi_GetStatus+0x6e>
               )
            {
                if (1u == Spi_au32SpiBusySyncHWUnitsStatus[HWUnit])
    9a06:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9a0a:	4a0f      	ldr	r2, [pc, #60]	; (9a48 <Spi_GetStatus+0x9c>)
    9a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a10:	2b01      	cmp	r3, #1
    9a12:	d102      	bne.n	9a1a <Spi_GetStatus+0x6e>
                {
                    StatusFlag = SPI_BUSY;
    9a14:	2302      	movs	r3, #2
    9a16:	9303      	str	r3, [sp, #12]
                    break;
    9a18:	e008      	b.n	9a2c <Spi_GetStatus+0x80>
        for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9a1a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9a1e:	3301      	adds	r3, #1
    9a20:	f88d 300b 	strb.w	r3, [sp, #11]
    9a24:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9a28:	2b00      	cmp	r3, #0
    9a2a:	d0d2      	beq.n	99d2 <Spi_GetStatus+0x26>
            {
                /* Do nothing */
            }
        }
        /* check for busy HWUnit in async transmissions */
        if (SPI_BUSY != StatusFlag)
    9a2c:	9b03      	ldr	r3, [sp, #12]
    9a2e:	2b02      	cmp	r3, #2
    9a30:	d003      	beq.n	9a3a <Spi_GetStatus+0x8e>
        {
            /* Note: Checking for IsSync attribute for HWUnit is not really needed
                 It is preferable to skip this check in order to have a more compact code
            */
            StatusFlag = Spi_GetStatusAsyncCheckHwBusy(SpiCoreID);
    9a32:	9801      	ldr	r0, [sp, #4]
    9a34:	f7ff fe4e 	bl	96d4 <Spi_GetStatusAsyncCheckHwBusy>
    9a38:	9003      	str	r0, [sp, #12]
        else
        {
            /* Do notthing */
        }
    }
    return StatusFlag;
    9a3a:	9b03      	ldr	r3, [sp, #12]
}
    9a3c:	4618      	mov	r0, r3
    9a3e:	b005      	add	sp, #20
    9a40:	f85d fb04 	ldr.w	pc, [sp], #4
    9a44:	1fff8dec 	.word	0x1fff8dec
    9a48:	1fff8e04 	.word	0x1fff8e04

00009a4c <Spi_GetJobResult>:
/** @implements Spi_GetJobResult_Activity */
Spi_JobResultType Spi_GetJobResult
    (
        Spi_JobType Job
    )
{
    9a4c:	b084      	sub	sp, #16
    9a4e:	4603      	mov	r3, r0
    9a50:	f8ad 3006 	strh.w	r3, [sp, #6]
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_GETJOBRESULT_ID,SPI_E_PARAM_CONFIG);
    }
    else
    {
#endif
        JobResult = Spi_axSpiJobState[Job].Result;
    9a54:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9a58:	4a03      	ldr	r2, [pc, #12]	; (9a68 <Spi_GetJobResult+0x1c>)
    9a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a5e:	9303      	str	r3, [sp, #12]
#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif

    return JobResult;
    9a60:	9b03      	ldr	r3, [sp, #12]
}
    9a62:	4618      	mov	r0, r3
    9a64:	b004      	add	sp, #16
    9a66:	4770      	bx	lr
    9a68:	1fff8df4 	.word	0x1fff8df4

00009a6c <Spi_GetSequenceResult>:
/** @implements Spi_GetSequenceResult_Activity */
Spi_SeqResultType Spi_GetSequenceResult
    (
        Spi_SequenceType Sequence
    )
{
    9a6c:	b084      	sub	sp, #16
    9a6e:	4603      	mov	r3, r0
    9a70:	f88d 3007 	strb.w	r3, [sp, #7]
            (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_GETSEQUENCERESULT_ID,SPI_E_PARAM_CONFIG);
        }
        else
        {
#endif
           SequenceResult = Spi_axSpiSequenceState[Sequence].Result;
    9a74:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9a78:	4a03      	ldr	r2, [pc, #12]	; (9a88 <Spi_GetSequenceResult+0x1c>)
    9a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a7e:	9303      	str	r3, [sp, #12]
#if (SPI_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif

    return SequenceResult;
    9a80:	9b03      	ldr	r3, [sp, #12]
}
    9a82:	4618      	mov	r0, r3
    9a84:	b004      	add	sp, #16
    9a86:	4770      	bx	lr
    9a88:	1fff8df0 	.word	0x1fff8df0

00009a8c <Spi_SyncTransmit>:
/** @implements Spi_SyncTransmit_Activity */
Std_ReturnType Spi_SyncTransmit
    (
        Spi_SequenceType Sequence
    )
{
    9a8c:	b500      	push	{lr}
    9a8e:	b08b      	sub	sp, #44	; 0x2c
    9a90:	4603      	mov	r3, r0
    9a92:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_SequenceStateType *SequenceState;
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    9a96:	2300      	movs	r3, #0
    9a98:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    Spi_JobType Job;
    const Spi_JobConfigType *JobConfig;
    uint32 SpiCoreID;

    /* Get current coreID */
    SpiCoreID = Spi_GetCoreID;
    9a9c:	2300      	movs	r3, #0
    9a9e:	9308      	str	r3, [sp, #32]
        Status = Spi_SynctransmitCheckJobsIsValid(SequenceConfig, SpiCoreID);

        if ((Std_ReturnType)E_NOT_OK != Status)
        {
#endif /* (SPI_DEV_ERROR_DETECT == STD_ON) */
            SequenceConfig = Spi_apxSpiConfigPtr[SpiCoreID]->SequenceConfig[Sequence].SeqConfig;
    9aa0:	4a60      	ldr	r2, [pc, #384]	; (9c24 <Spi_SyncTransmit+0x198>)
    9aa2:	9b08      	ldr	r3, [sp, #32]
    9aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9aa8:	695a      	ldr	r2, [r3, #20]
    9aaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9aae:	009b      	lsls	r3, r3, #2
    9ab0:	4413      	add	r3, r2
    9ab2:	681b      	ldr	r3, [r3, #0]
    9ab4:	9307      	str	r3, [sp, #28]
            /* Get the number of jobs in the sequence */
            NumJobsInSequence = SequenceConfig->NumJobs;
    9ab6:	9b07      	ldr	r3, [sp, #28]
    9ab8:	881b      	ldrh	r3, [r3, #0]
    9aba:	f8ad 301a 	strh.w	r3, [sp, #26]

            SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06();
    9abe:	f00c fb3d 	bl	1613c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06>
            /* check if there are HW units already running */
            for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9ac2:	2300      	movs	r3, #0
    9ac4:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    9ac8:	e017      	b.n	9afa <Spi_SyncTransmit+0x6e>
            {
                if (0u != ((Spi_au32SpiBusySyncHWUnitsStatus[HWUnit] << HWUnit) & Spi_au32SpiSeqUsedHWUnits[Sequence]))
    9aca:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9ace:	4a56      	ldr	r2, [pc, #344]	; (9c28 <Spi_SyncTransmit+0x19c>)
    9ad0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    9ad4:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9ad8:	409a      	lsls	r2, r3
    9ada:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9ade:	4953      	ldr	r1, [pc, #332]	; (9c2c <Spi_SyncTransmit+0x1a0>)
    9ae0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    9ae4:	4013      	ands	r3, r2
    9ae6:	2b00      	cmp	r3, #0
    9ae8:	d002      	beq.n	9af0 <Spi_SyncTransmit+0x64>
                {
                    Status = (Std_ReturnType)E_NOT_OK;
    9aea:	2301      	movs	r3, #1
    9aec:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
            for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    9af0:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9af4:	3301      	adds	r3, #1
    9af6:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    9afa:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9afe:	2b00      	cmp	r3, #0
    9b00:	d0e3      	beq.n	9aca <Spi_SyncTransmit+0x3e>
                {
                    /* Do notthing */
                }
            }
            
            if ((Std_ReturnType)E_NOT_OK != Status)
    9b02:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9b06:	2b01      	cmp	r3, #1
    9b08:	f000 8083 	beq.w	9c12 <Spi_SyncTransmit+0x186>
            {
                /* Set the sequence as pending */
                SequenceState = &Spi_axSpiSequenceState[Sequence];
    9b0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9b10:	009b      	lsls	r3, r3, #2
    9b12:	4a47      	ldr	r2, [pc, #284]	; (9c30 <Spi_SyncTransmit+0x1a4>)
    9b14:	4413      	add	r3, r2
    9b16:	9305      	str	r3, [sp, #20]
                SequenceState->Result = SPI_SEQ_PENDING;
    9b18:	9b05      	ldr	r3, [sp, #20]
    9b1a:	2201      	movs	r2, #1
    9b1c:	601a      	str	r2, [r3, #0]
                /* set used HW units as busy */
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    9b1e:	2300      	movs	r3, #0
    9b20:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    9b24:	e022      	b.n	9b6c <Spi_SyncTransmit+0xe0>
                {
                    /* Get the job id */
                    Job = SequenceConfig->JobIndexList[JobIndex];
    9b26:	9b07      	ldr	r3, [sp, #28]
    9b28:	689a      	ldr	r2, [r3, #8]
    9b2a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9b2e:	005b      	lsls	r3, r3, #1
    9b30:	4413      	add	r3, r2
    9b32:	881b      	ldrh	r3, [r3, #0]
    9b34:	f8ad 3012 	strh.w	r3, [sp, #18]
                    JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    9b38:	4a3a      	ldr	r2, [pc, #232]	; (9c24 <Spi_SyncTransmit+0x198>)
    9b3a:	9b08      	ldr	r3, [sp, #32]
    9b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b40:	691a      	ldr	r2, [r3, #16]
    9b42:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    9b46:	009b      	lsls	r3, r3, #2
    9b48:	4413      	add	r3, r2
    9b4a:	681b      	ldr	r3, [r3, #0]
    9b4c:	9303      	str	r3, [sp, #12]
                    /* Logical Spi HWUnit */
                    HWUnit = JobConfig->HWUnit;
    9b4e:	9b03      	ldr	r3, [sp, #12]
    9b50:	7f1b      	ldrb	r3, [r3, #28]
    9b52:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    Spi_au32SpiBusySyncHWUnitsStatus[HWUnit] = 1u;
    9b56:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9b5a:	4a33      	ldr	r2, [pc, #204]	; (9c28 <Spi_SyncTransmit+0x19c>)
    9b5c:	2101      	movs	r1, #1
    9b5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    9b62:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9b66:	3301      	adds	r3, #1
    9b68:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    9b6c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    9b70:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9b74:	429a      	cmp	r2, r3
    9b76:	d3d6      	bcc.n	9b26 <Spi_SyncTransmit+0x9a>
                }
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06();
    9b78:	f00c fb0c 	bl	16194 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06>
                /* Transmit Jobs */
                Status = Spi_SyncJobsTranfer(SequenceConfig, SpiCoreID);
    9b7c:	9908      	ldr	r1, [sp, #32]
    9b7e:	9807      	ldr	r0, [sp, #28]
    9b80:	f7ff fc72 	bl	9468 <Spi_SyncJobsTranfer>
    9b84:	4603      	mov	r3, r0
    9b86:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                
                if ((Std_ReturnType)E_OK == Status)
    9b8a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9b8e:	2b00      	cmp	r3, #0
    9b90:	d103      	bne.n	9b9a <Spi_SyncTransmit+0x10e>
                {
                    /* Set the sequence as OK */
                    SequenceState->Result = SPI_SEQ_OK;
    9b92:	9b05      	ldr	r3, [sp, #20]
    9b94:	2200      	movs	r2, #0
    9b96:	601a      	str	r2, [r3, #0]
    9b98:	e002      	b.n	9ba0 <Spi_SyncTransmit+0x114>
#endif
                }
                else
                {
                    /* Set the sequence as FAILED */
                    SequenceState->Result = SPI_SEQ_FAILED;
    9b9a:	9b05      	ldr	r3, [sp, #20]
    9b9c:	2202      	movs	r2, #2
    9b9e:	601a      	str	r2, [r3, #0]
                    /* Report to DEM */
                    Spi_DemReportStatus(SpiCoreID, DEM_EVENT_STATUS_FAILED);
#endif
                }
                
                SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07();
    9ba0:	f00c fb1e 	bl	161e0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07>
                /* set used HW units as idle */
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    9ba4:	2300      	movs	r3, #0
    9ba6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    9baa:	e022      	b.n	9bf2 <Spi_SyncTransmit+0x166>
                {
                    /* Get the job id */
                    Job = SequenceConfig->JobIndexList[JobIndex];
    9bac:	9b07      	ldr	r3, [sp, #28]
    9bae:	689a      	ldr	r2, [r3, #8]
    9bb0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9bb4:	005b      	lsls	r3, r3, #1
    9bb6:	4413      	add	r3, r2
    9bb8:	881b      	ldrh	r3, [r3, #0]
    9bba:	f8ad 3012 	strh.w	r3, [sp, #18]
                    JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    9bbe:	4a19      	ldr	r2, [pc, #100]	; (9c24 <Spi_SyncTransmit+0x198>)
    9bc0:	9b08      	ldr	r3, [sp, #32]
    9bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bc6:	691a      	ldr	r2, [r3, #16]
    9bc8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    9bcc:	009b      	lsls	r3, r3, #2
    9bce:	4413      	add	r3, r2
    9bd0:	681b      	ldr	r3, [r3, #0]
    9bd2:	9303      	str	r3, [sp, #12]
                    /* Logical Spi HWUnit */
                    HWUnit = JobConfig->HWUnit;
    9bd4:	9b03      	ldr	r3, [sp, #12]
    9bd6:	7f1b      	ldrb	r3, [r3, #28]
    9bd8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    Spi_au32SpiBusySyncHWUnitsStatus[HWUnit] = 0u;
    9bdc:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9be0:	4a11      	ldr	r2, [pc, #68]	; (9c28 <Spi_SyncTransmit+0x19c>)
    9be2:	2100      	movs	r1, #0
    9be4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    9be8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9bec:	3301      	adds	r3, #1
    9bee:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    9bf2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    9bf6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9bfa:	429a      	cmp	r2, r3
    9bfc:	d3d6      	bcc.n	9bac <Spi_SyncTransmit+0x120>
                }
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07();
    9bfe:	f00c fb1b 	bl	16238 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07>
                
                /* End Sequence Notification */
                if (NULL_PTR != SequenceConfig->EndNotification)
    9c02:	9b07      	ldr	r3, [sp, #28]
    9c04:	68db      	ldr	r3, [r3, #12]
    9c06:	2b00      	cmp	r3, #0
    9c08:	d005      	beq.n	9c16 <Spi_SyncTransmit+0x18a>
                {
                    SequenceConfig->EndNotification();
    9c0a:	9b07      	ldr	r3, [sp, #28]
    9c0c:	68db      	ldr	r3, [r3, #12]
    9c0e:	4798      	blx	r3
    9c10:	e001      	b.n	9c16 <Spi_SyncTransmit+0x18a>
                    /* Do nothing */
                }
            }
            else
            {
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06();
    9c12:	f00c fabf 	bl	16194 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06>
            /* Do nothing */
        }
    }
#endif

    return Status;
    9c16:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    9c1a:	4618      	mov	r0, r3
    9c1c:	b00b      	add	sp, #44	; 0x2c
    9c1e:	f85d fb04 	ldr.w	pc, [sp], #4
    9c22:	bf00      	nop
    9c24:	1fff8dec 	.word	0x1fff8dec
    9c28:	1fff8e04 	.word	0x1fff8e04
    9c2c:	1fff8e00 	.word	0x1fff8e00
    9c30:	1fff8df0 	.word	0x1fff8df0

00009c34 <Spi_GetHWUnitStatus>:
/** @implements Spi_GetHWUnitStatus_Activity */
Spi_StatusType Spi_GetHWUnitStatus
    (
        Spi_HWUnitType HWUnit
    )
{
    9c34:	b084      	sub	sp, #16
    9c36:	4603      	mov	r3, r0
    9c38:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_StatusType Status = SPI_UNINIT;
    9c3c:	2300      	movs	r3, #0
    9c3e:	9303      	str	r3, [sp, #12]
        /* Do nothing */
    }
    else
    {
#endif
        Status = Spi_axSpiHwUnitQueueArray[HWUnit].Status;
    9c40:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c44:	4a03      	ldr	r2, [pc, #12]	; (9c54 <Spi_GetHWUnitStatus+0x20>)
    9c46:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    9c4a:	9303      	str	r3, [sp, #12]

#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return Status;
    9c4c:	9b03      	ldr	r3, [sp, #12]
}
    9c4e:	4618      	mov	r0, r3
    9c50:	b004      	add	sp, #16
    9c52:	4770      	bx	lr
    9c54:	1fff8de4 	.word	0x1fff8de4

00009c58 <Spi_Cancel>:
*       undefined state due to cancelling a sequence transmission.
*
*/
/**  @implements Spi_Cancel_Activity */
void Spi_Cancel(Spi_SequenceType Sequence)
{
    9c58:	b082      	sub	sp, #8
    9c5a:	4603      	mov	r3, r0
    9c5c:	f88d 3007 	strb.w	r3, [sp, #7]
        }
        else
        {
#endif
            /* Set sequence state to Cancel */
            Spi_axSpiSequenceState[Sequence].Result = SPI_SEQ_CANCELLED;
    9c60:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c64:	4a03      	ldr	r2, [pc, #12]	; (9c74 <Spi_Cancel+0x1c>)
    9c66:	2103      	movs	r1, #3
    9c68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            #endif
#if (SPI_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif
}
    9c6c:	bf00      	nop
    9c6e:	b002      	add	sp, #8
    9c70:	4770      	bx	lr
    9c72:	bf00      	nop
    9c74:	1fff8df0 	.word	0x1fff8df0

00009c78 <Spi_MainFunction_Handling>:
                /*Do nothing */
            }
        }
    }
#endif /* #if ( (SPI_LEVEL_DELIVERED == SPI_LEVEL1) || (SPI_LEVEL_DELIVERED == SPI_LEVEL2) ) */
}
    9c78:	bf00      	nop
    9c7a:	4770      	bx	lr

00009c7c <Spi_Ipw_SyncTransmitProcess>:
        const Spi_JobConfigType *JobConfig,
        const Spi_ChannelConfigType *ChannelConfig,
        Spi_DataBufferType *RxBuffer,
        const Spi_DataBufferType *TxBuffer
    )
{
    9c7c:	b500      	push	{lr}
    9c7e:	b08d      	sub	sp, #52	; 0x34
    9c80:	9005      	str	r0, [sp, #20]
    9c82:	9104      	str	r1, [sp, #16]
    9c84:	9203      	str	r2, [sp, #12]
    9c86:	9302      	str	r3, [sp, #8]
    Lpspi_Ip_StatusType Lpspi_spiStatus = LPSPI_IP_STATUS_SUCCESS;
    9c88:	2300      	movs	r3, #0
    9c8a:	930b      	str	r3, [sp, #44]	; 0x2c
    const Lpspi_Ip_ExternalDeviceType* LpspiExternalDevice;
#if (SPI_IPW_SPI_FLEXIO_ENABLE == STD_ON)
    Flexio_Spi_Ip_StatusType Flexio_spiStatus = FLEXIO_SPI_IP_STATUS_SUCCESS;
    const Flexio_Spi_Ip_ExternalDeviceType* Flexio_SpiExternalDevice;
#endif
    Std_ReturnType Ipw_Status = (Std_ReturnType)E_OK;
    9c8c:	2300      	movs	r3, #0
    9c8e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    Spi_NumberOfDataType NumberOfBytes;
    Spi_Ipw_SupportedIpsType IpType = JobConfig->ExternalDeviceConfig->ExDeviceConfig->IpType;
    9c92:	9b05      	ldr	r3, [sp, #20]
    9c94:	6a1b      	ldr	r3, [r3, #32]
    9c96:	681b      	ldr	r3, [r3, #0]
    9c98:	681b      	ldr	r3, [r3, #0]
    9c9a:	9309      	str	r3, [sp, #36]	; 0x24
        HalfDuplexMode = LPSPI_IP_FULL_DUPLEX;
        HalfDuplexModeSupport = FALSE;
    }
#endif
    
    NumberOfBytes = ChannelConfig->ChannelState->Length;
    9c9c:	9b04      	ldr	r3, [sp, #16]
    9c9e:	699b      	ldr	r3, [r3, #24]
    9ca0:	885b      	ldrh	r3, [r3, #2]
    9ca2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    if (SPI_OVER_LPSPI == IpType)
    9ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9ca8:	2b00      	cmp	r3, #0
    9caa:	d12e      	bne.n	9d0a <Spi_Ipw_SyncTransmitProcess+0x8e>
    {
        LpspiExternalDevice = JobConfig->ExternalDeviceConfig->ExDeviceConfig->ExternalDeviceConfig.LpspiExternalDeviceConfig;
    9cac:	9b05      	ldr	r3, [sp, #20]
    9cae:	6a1b      	ldr	r3, [r3, #32]
    9cb0:	681b      	ldr	r3, [r3, #0]
    9cb2:	689b      	ldr	r3, [r3, #8]
    9cb4:	9307      	str	r3, [sp, #28]
        Lpspi_spiStatus = Lpspi_Ip_UpdateDefaultTransmitData(LpspiExternalDevice, ChannelConfig->DefaultTransmitValue);
    9cb6:	9b04      	ldr	r3, [sp, #16]
    9cb8:	689b      	ldr	r3, [r3, #8]
    9cba:	4619      	mov	r1, r3
    9cbc:	9807      	ldr	r0, [sp, #28]
    9cbe:	f7ff fadd 	bl	927c <Lpspi_Ip_UpdateDefaultTransmitData>
    9cc2:	900b      	str	r0, [sp, #44]	; 0x2c
        if (LPSPI_IP_STATUS_SUCCESS == Lpspi_spiStatus)
    9cc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9cc6:	2b00      	cmp	r3, #0
    9cc8:	d11f      	bne.n	9d0a <Spi_Ipw_SyncTransmitProcess+0x8e>
        {
            Lpspi_spiStatus = Lpspi_Ip_UpdateFrameSize(LpspiExternalDevice, ChannelConfig->FrameSize);
    9cca:	9b04      	ldr	r3, [sp, #16]
    9ccc:	791b      	ldrb	r3, [r3, #4]
    9cce:	b29b      	uxth	r3, r3
    9cd0:	4619      	mov	r1, r3
    9cd2:	9807      	ldr	r0, [sp, #28]
    9cd4:	f7ff fa92 	bl	91fc <Lpspi_Ip_UpdateFrameSize>
    9cd8:	900b      	str	r0, [sp, #44]	; 0x2c
            if (LPSPI_IP_STATUS_SUCCESS == Lpspi_spiStatus)
    9cda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9cdc:	2b00      	cmp	r3, #0
    9cde:	d114      	bne.n	9d0a <Spi_Ipw_SyncTransmitProcess+0x8e>
            {
                Lpspi_spiStatus = Lpspi_Ip_UpdateLsb(LpspiExternalDevice, ChannelConfig->Lsb);
    9ce0:	9b04      	ldr	r3, [sp, #16]
    9ce2:	795b      	ldrb	r3, [r3, #5]
    9ce4:	4619      	mov	r1, r3
    9ce6:	9807      	ldr	r0, [sp, #28]
    9ce8:	f7ff faa8 	bl	923c <Lpspi_Ip_UpdateLsb>
    9cec:	900b      	str	r0, [sp, #44]	; 0x2c
                if (LPSPI_IP_STATUS_SUCCESS == Lpspi_spiStatus)
    9cee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9cf0:	2b00      	cmp	r3, #0
    9cf2:	d10a      	bne.n	9d0a <Spi_Ipw_SyncTransmitProcess+0x8e>
                        Lpspi_spiStatus = Lpspi_Ip_SyncTransmitHalfDuplex(LpspiExternalDevice, Buffer, NumberOfBytes, HalfDuplexMode, SPI_TIMEOUT_COUNTER_U32);
                    }
                    else
                    #endif
                    {
                        Lpspi_spiStatus = Lpspi_Ip_SyncTransmit(LpspiExternalDevice, (const uint8*)TxBuffer, RxBuffer, NumberOfBytes, SPI_TIMEOUT_COUNTER_U32);
    9cf4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    9cf8:	f24c 3250 	movw	r2, #50000	; 0xc350
    9cfc:	9200      	str	r2, [sp, #0]
    9cfe:	9a03      	ldr	r2, [sp, #12]
    9d00:	9902      	ldr	r1, [sp, #8]
    9d02:	9807      	ldr	r0, [sp, #28]
    9d04:	f7fe fe0a 	bl	891c <Lpspi_Ip_SyncTransmit>
    9d08:	900b      	str	r0, [sp, #44]	; 0x2c
            }
        }
    }
    if( (LPSPI_IP_STATUS_SUCCESS != Lpspi_spiStatus) || (FLEXIO_SPI_IP_STATUS_SUCCESS != Flexio_spiStatus))
#else
    if(LPSPI_IP_STATUS_SUCCESS != Lpspi_spiStatus)
    9d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9d0c:	2b00      	cmp	r3, #0
    9d0e:	d002      	beq.n	9d16 <Spi_Ipw_SyncTransmitProcess+0x9a>
#endif /*(SPI_IPW_SPI_FLEXIO_ENABLE == STD_ON)*/
    {
        Ipw_Status = (Std_ReturnType)E_NOT_OK;
    9d10:	2301      	movs	r3, #1
    9d12:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    }
    return Ipw_Status;
    9d16:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
}
    9d1a:	4618      	mov	r0, r3
    9d1c:	b00d      	add	sp, #52	; 0x34
    9d1e:	f85d fb04 	ldr.w	pc, [sp], #4

00009d22 <Spi_Ipw_Init>:
/*==================================================================================================
*                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* Spi_Ipw_Init */
void Spi_Ipw_Init(const Spi_HWUnitType HWUnitId, const Spi_HWUnitConfigType *HWUnit)
{
    9d22:	b500      	push	{lr}
    9d24:	b083      	sub	sp, #12
    9d26:	4603      	mov	r3, r0
    9d28:	9100      	str	r1, [sp, #0]
    9d2a:	f88d 3007 	strb.w	r3, [sp, #7]
    if (SPI_OVER_LPSPI == HWUnit->IpType)
    9d2e:	9b00      	ldr	r3, [sp, #0]
    9d30:	681b      	ldr	r3, [r3, #0]
    9d32:	2b00      	cmp	r3, #0
    9d34:	d104      	bne.n	9d40 <Spi_Ipw_Init+0x1e>
    #if ((SPI_LEVEL_DELIVERED == SPI_LEVEL1) || (SPI_LEVEL_DELIVERED == SPI_LEVEL2))
        Spi_Ipw_au8LpspiHWUnitMapping[HWUnit->Instance] = HWUnitId;
    #else
        (void)HWUnitId;
    #endif
        (void)Lpspi_Ip_Init(HWUnit->IpConfig.LpspiIpConfig);
    9d36:	9b00      	ldr	r3, [sp, #0]
    9d38:	68db      	ldr	r3, [r3, #12]
    9d3a:	4618      	mov	r0, r3
    9d3c:	f7fe fd62 	bl	8804 <Lpspi_Ip_Init>
        (void)HWUnitId;
    #endif
        (void)Flexio_Spi_Ip_Init(HWUnit->IpConfig.FlexioSpiIpConfig);
    }
#endif
}
    9d40:	bf00      	nop
    9d42:	b003      	add	sp, #12
    9d44:	f85d fb04 	ldr.w	pc, [sp], #4

00009d48 <Spi_Ipw_DeInit>:

/* Spi_Ipw_DeInit */
void Spi_Ipw_DeInit(Spi_HWUnitType HWUnit, uint32 SpiCoreID)
{
    9d48:	b500      	push	{lr}
    9d4a:	b083      	sub	sp, #12
    9d4c:	4603      	mov	r3, r0
    9d4e:	9100      	str	r1, [sp, #0]
    9d50:	f88d 3007 	strb.w	r3, [sp, #7]
    if (SPI_OVER_LPSPI == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->IpType)
    9d54:	4a0f      	ldr	r2, [pc, #60]	; (9d94 <Spi_Ipw_DeInit+0x4c>)
    9d56:	9b00      	ldr	r3, [sp, #0]
    9d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d5c:	69da      	ldr	r2, [r3, #28]
    9d5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9d62:	009b      	lsls	r3, r3, #2
    9d64:	4413      	add	r3, r2
    9d66:	681b      	ldr	r3, [r3, #0]
    9d68:	681b      	ldr	r3, [r3, #0]
    9d6a:	2b00      	cmp	r3, #0
    9d6c:	d10d      	bne.n	9d8a <Spi_Ipw_DeInit+0x42>
    {
        (void)Lpspi_Ip_DeInit(Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->Instance);
    9d6e:	4a09      	ldr	r2, [pc, #36]	; (9d94 <Spi_Ipw_DeInit+0x4c>)
    9d70:	9b00      	ldr	r3, [sp, #0]
    9d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d76:	69da      	ldr	r2, [r3, #28]
    9d78:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9d7c:	009b      	lsls	r3, r3, #2
    9d7e:	4413      	add	r3, r2
    9d80:	681b      	ldr	r3, [r3, #0]
    9d82:	791b      	ldrb	r3, [r3, #4]
    9d84:	4618      	mov	r0, r3
    9d86:	f7fe fd99 	bl	88bc <Lpspi_Ip_DeInit>
    else
    {
        (void)Flexio_Spi_Ip_DeInit(Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->Instance);
    }
#endif
}
    9d8a:	bf00      	nop
    9d8c:	b003      	add	sp, #12
    9d8e:	f85d fb04 	ldr.w	pc, [sp], #4
    9d92:	bf00      	nop
    9d94:	1fff8dec 	.word	0x1fff8dec

00009d98 <Spi_Ipw_SyncTransmit>:

/* Spi_Ipw_SyncTransmit */
#if ( (SPI_LEVEL_DELIVERED == SPI_LEVEL2) || (SPI_LEVEL_DELIVERED == SPI_LEVEL0) )
Std_ReturnType Spi_Ipw_SyncTransmit(const Spi_JobConfigType *JobConfig, uint32 SpiCoreID)
{
    9d98:	b500      	push	{lr}
    9d9a:	b08b      	sub	sp, #44	; 0x2c
    9d9c:	9001      	str	r0, [sp, #4]
    9d9e:	9100      	str	r1, [sp, #0]

    Std_ReturnType Ipw_Status = (Std_ReturnType)E_OK;
    9da0:	2300      	movs	r3, #0
    9da2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    const Spi_ChannelConfigType *ChannelConfig;
    const Spi_ChannelConfigType *NextChannelConfig;
    Spi_ChannelType ChannelID;
    Spi_ChannelType NumChannelsInJob;
    Spi_ChannelType ChannelIndex;
    Spi_Ipw_SupportedIpsType IpType = JobConfig->ExternalDeviceConfig->ExDeviceConfig->IpType;
    9da6:	9b01      	ldr	r3, [sp, #4]
    9da8:	6a1b      	ldr	r3, [r3, #32]
    9daa:	681b      	ldr	r3, [r3, #0]
    9dac:	681b      	ldr	r3, [r3, #0]
    9dae:	9306      	str	r3, [sp, #24]
    
    NumChannelsInJob = JobConfig->NumChannels;
    9db0:	9b01      	ldr	r3, [sp, #4]
    9db2:	781b      	ldrb	r3, [r3, #0]
    9db4:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChannelIndex = (Spi_ChannelType)0; ChannelIndex < NumChannelsInJob; ChannelIndex++)
    9db8:	2300      	movs	r3, #0
    9dba:	f88d 301f 	strb.w	r3, [sp, #31]
    9dbe:	e0e6      	b.n	9f8e <Spi_Ipw_SyncTransmit+0x1f6>
    {
        ChannelID = JobConfig->ChannelIndexList[ChannelIndex];
    9dc0:	9b01      	ldr	r3, [sp, #4]
    9dc2:	685a      	ldr	r2, [r3, #4]
    9dc4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9dc8:	4413      	add	r3, r2
    9dca:	781b      	ldrb	r3, [r3, #0]
    9dcc:	f88d 3016 	strb.w	r3, [sp, #22]
        ChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[ChannelID].ChannelCfg;
    9dd0:	4a75      	ldr	r2, [pc, #468]	; (9fa8 <Spi_Ipw_SyncTransmit+0x210>)
    9dd2:	9b00      	ldr	r3, [sp, #0]
    9dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dd8:	68da      	ldr	r2, [r3, #12]
    9dda:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9dde:	009b      	lsls	r3, r3, #2
    9de0:	4413      	add	r3, r2
    9de2:	681b      	ldr	r3, [r3, #0]
    9de4:	9304      	str	r3, [sp, #16]
        RxBuffer = ChannelConfig->BufferDescriptor->BufferRX;
    9de6:	9b04      	ldr	r3, [sp, #16]
    9de8:	691b      	ldr	r3, [r3, #16]
    9dea:	689b      	ldr	r3, [r3, #8]
    9dec:	9303      	str	r3, [sp, #12]
        if(0u != (ChannelConfig->ChannelState->Flags & SPI_CHANNEL_FLAG_TX_DEFAULT_U8))
    9dee:	9b04      	ldr	r3, [sp, #16]
    9df0:	699b      	ldr	r3, [r3, #24]
    9df2:	781b      	ldrb	r3, [r3, #0]
    9df4:	f003 0301 	and.w	r3, r3, #1
    9df8:	2b00      	cmp	r3, #0
    9dfa:	d002      	beq.n	9e02 <Spi_Ipw_SyncTransmit+0x6a>
        {
            TxBuffer = NULL_PTR;
    9dfc:	2300      	movs	r3, #0
    9dfe:	9308      	str	r3, [sp, #32]
    9e00:	e00c      	b.n	9e1c <Spi_Ipw_SyncTransmit+0x84>
        }
        else
        {
            if(EB == ChannelConfig->BufferType)
    9e02:	9b04      	ldr	r3, [sp, #16]
    9e04:	681b      	ldr	r3, [r3, #0]
    9e06:	2b01      	cmp	r3, #1
    9e08:	d104      	bne.n	9e14 <Spi_Ipw_SyncTransmit+0x7c>
            {
                TxBuffer = ChannelConfig->BufferDescriptor->ExternalBufferTX;
    9e0a:	9b04      	ldr	r3, [sp, #16]
    9e0c:	691b      	ldr	r3, [r3, #16]
    9e0e:	681b      	ldr	r3, [r3, #0]
    9e10:	9308      	str	r3, [sp, #32]
    9e12:	e003      	b.n	9e1c <Spi_Ipw_SyncTransmit+0x84>
            }
            else
            {
                TxBuffer = (const uint8*)(ChannelConfig->BufferDescriptor->InternalBufferTX);
    9e14:	9b04      	ldr	r3, [sp, #16]
    9e16:	691b      	ldr	r3, [r3, #16]
    9e18:	685b      	ldr	r3, [r3, #4]
    9e1a:	9308      	str	r3, [sp, #32]
            }
        }
        
        if (SPI_OVER_LPSPI == IpType)
    9e1c:	9b06      	ldr	r3, [sp, #24]
    9e1e:	2b00      	cmp	r3, #0
    9e20:	f040 80a7 	bne.w	9f72 <Spi_Ipw_SyncTransmit+0x1da>
        {
            if(ChannelIndex == (NumChannelsInJob - 1u))
    9e24:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9e28:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9e2c:	3b01      	subs	r3, #1
    9e2e:	429a      	cmp	r2, r3
    9e30:	d10a      	bne.n	9e48 <Spi_Ipw_SyncTransmit+0xb0>
            {
                /* Clear CS after current channel */
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->KeepCs = FALSE;
    9e32:	9b01      	ldr	r3, [sp, #4]
    9e34:	6a1b      	ldr	r3, [r3, #32]
    9e36:	681b      	ldr	r3, [r3, #0]
    9e38:	791b      	ldrb	r3, [r3, #4]
    9e3a:	461a      	mov	r2, r3
    9e3c:	4b5b      	ldr	r3, [pc, #364]	; (9fac <Spi_Ipw_SyncTransmit+0x214>)
    9e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9e42:	2200      	movs	r2, #0
    9e44:	771a      	strb	r2, [r3, #28]
    9e46:	e07b      	b.n	9f40 <Spi_Ipw_SyncTransmit+0x1a8>
            }
            else
            {
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->KeepCs = TRUE;
    9e48:	9b01      	ldr	r3, [sp, #4]
    9e4a:	6a1b      	ldr	r3, [r3, #32]
    9e4c:	681b      	ldr	r3, [r3, #0]
    9e4e:	791b      	ldrb	r3, [r3, #4]
    9e50:	461a      	mov	r2, r3
    9e52:	4b56      	ldr	r3, [pc, #344]	; (9fac <Spi_Ipw_SyncTransmit+0x214>)
    9e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9e58:	2201      	movs	r2, #1
    9e5a:	771a      	strb	r2, [r3, #28]
                MCAL_DATA_SYNC_BARRIER();
    9e5c:	f3bf 8f4f 	dsb	sy
                /* update data for next transfer */
                NextChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[JobConfig->ChannelIndexList[ChannelIndex + 1u]].ChannelCfg;
    9e60:	4a51      	ldr	r2, [pc, #324]	; (9fa8 <Spi_Ipw_SyncTransmit+0x210>)
    9e62:	9b00      	ldr	r3, [sp, #0]
    9e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e68:	68da      	ldr	r2, [r3, #12]
    9e6a:	9b01      	ldr	r3, [sp, #4]
    9e6c:	6859      	ldr	r1, [r3, #4]
    9e6e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9e72:	3301      	adds	r3, #1
    9e74:	440b      	add	r3, r1
    9e76:	781b      	ldrb	r3, [r3, #0]
    9e78:	009b      	lsls	r3, r3, #2
    9e7a:	4413      	add	r3, r2
    9e7c:	681b      	ldr	r3, [r3, #0]
    9e7e:	9302      	str	r3, [sp, #8]
                MCAL_DATA_SYNC_BARRIER();
    9e80:	f3bf 8f4f 	dsb	sy
                if(0u != (NextChannelConfig->ChannelState->Flags & SPI_CHANNEL_FLAG_TX_DEFAULT_U8))
    9e84:	9b02      	ldr	r3, [sp, #8]
    9e86:	699b      	ldr	r3, [r3, #24]
    9e88:	781b      	ldrb	r3, [r3, #0]
    9e8a:	f003 0301 	and.w	r3, r3, #1
    9e8e:	2b00      	cmp	r3, #0
    9e90:	d00a      	beq.n	9ea8 <Spi_Ipw_SyncTransmit+0x110>
                {
                    Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->TxBufferNext = NULL_PTR;
    9e92:	9b01      	ldr	r3, [sp, #4]
    9e94:	6a1b      	ldr	r3, [r3, #32]
    9e96:	681b      	ldr	r3, [r3, #0]
    9e98:	791b      	ldrb	r3, [r3, #4]
    9e9a:	461a      	mov	r2, r3
    9e9c:	4b43      	ldr	r3, [pc, #268]	; (9fac <Spi_Ipw_SyncTransmit+0x214>)
    9e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9ea2:	2200      	movs	r2, #0
    9ea4:	62da      	str	r2, [r3, #44]	; 0x2c
    9ea6:	e01c      	b.n	9ee2 <Spi_Ipw_SyncTransmit+0x14a>
                }
                else
                {
                    if(EB == NextChannelConfig->BufferType)
    9ea8:	9b02      	ldr	r3, [sp, #8]
    9eaa:	681b      	ldr	r3, [r3, #0]
    9eac:	2b01      	cmp	r3, #1
    9eae:	d10c      	bne.n	9eca <Spi_Ipw_SyncTransmit+0x132>
                    {
                        Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->TxBufferNext = NextChannelConfig->BufferDescriptor->ExternalBufferTX;
    9eb0:	9b02      	ldr	r3, [sp, #8]
    9eb2:	691a      	ldr	r2, [r3, #16]
    9eb4:	9b01      	ldr	r3, [sp, #4]
    9eb6:	6a1b      	ldr	r3, [r3, #32]
    9eb8:	681b      	ldr	r3, [r3, #0]
    9eba:	791b      	ldrb	r3, [r3, #4]
    9ebc:	4619      	mov	r1, r3
    9ebe:	4b3b      	ldr	r3, [pc, #236]	; (9fac <Spi_Ipw_SyncTransmit+0x214>)
    9ec0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    9ec4:	6812      	ldr	r2, [r2, #0]
    9ec6:	62da      	str	r2, [r3, #44]	; 0x2c
    9ec8:	e00b      	b.n	9ee2 <Spi_Ipw_SyncTransmit+0x14a>
                    }
                    else
                    {
                        Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->TxBufferNext = NextChannelConfig->BufferDescriptor->InternalBufferTX;
    9eca:	9b02      	ldr	r3, [sp, #8]
    9ecc:	691a      	ldr	r2, [r3, #16]
    9ece:	9b01      	ldr	r3, [sp, #4]
    9ed0:	6a1b      	ldr	r3, [r3, #32]
    9ed2:	681b      	ldr	r3, [r3, #0]
    9ed4:	791b      	ldrb	r3, [r3, #4]
    9ed6:	4619      	mov	r1, r3
    9ed8:	4b34      	ldr	r3, [pc, #208]	; (9fac <Spi_Ipw_SyncTransmit+0x214>)
    9eda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    9ede:	6852      	ldr	r2, [r2, #4]
    9ee0:	62da      	str	r2, [r3, #44]	; 0x2c
                    }
                }
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->FrameSizeNext = NextChannelConfig->FrameSize;
    9ee2:	9b02      	ldr	r3, [sp, #8]
    9ee4:	791a      	ldrb	r2, [r3, #4]
    9ee6:	9b01      	ldr	r3, [sp, #4]
    9ee8:	6a1b      	ldr	r3, [r3, #32]
    9eea:	681b      	ldr	r3, [r3, #0]
    9eec:	791b      	ldrb	r3, [r3, #4]
    9eee:	4619      	mov	r1, r3
    9ef0:	4b2e      	ldr	r3, [pc, #184]	; (9fac <Spi_Ipw_SyncTransmit+0x214>)
    9ef2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    9ef6:	b292      	uxth	r2, r2
    9ef8:	861a      	strh	r2, [r3, #48]	; 0x30
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->LsbNext = NextChannelConfig->Lsb;
    9efa:	9b01      	ldr	r3, [sp, #4]
    9efc:	6a1b      	ldr	r3, [r3, #32]
    9efe:	681b      	ldr	r3, [r3, #0]
    9f00:	791b      	ldrb	r3, [r3, #4]
    9f02:	461a      	mov	r2, r3
    9f04:	4b29      	ldr	r3, [pc, #164]	; (9fac <Spi_Ipw_SyncTransmit+0x214>)
    9f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9f0a:	9a02      	ldr	r2, [sp, #8]
    9f0c:	7952      	ldrb	r2, [r2, #5]
    9f0e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->DefaultDataNext = NextChannelConfig->DefaultTransmitValue;
    9f12:	9b01      	ldr	r3, [sp, #4]
    9f14:	6a1b      	ldr	r3, [r3, #32]
    9f16:	681b      	ldr	r3, [r3, #0]
    9f18:	791b      	ldrb	r3, [r3, #4]
    9f1a:	461a      	mov	r2, r3
    9f1c:	4b23      	ldr	r3, [pc, #140]	; (9fac <Spi_Ipw_SyncTransmit+0x214>)
    9f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9f22:	9a02      	ldr	r2, [sp, #8]
    9f24:	6892      	ldr	r2, [r2, #8]
    9f26:	635a      	str	r2, [r3, #52]	; 0x34
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->LengthNext = NextChannelConfig->ChannelState->Length;
    9f28:	9b02      	ldr	r3, [sp, #8]
    9f2a:	699a      	ldr	r2, [r3, #24]
    9f2c:	9b01      	ldr	r3, [sp, #4]
    9f2e:	6a1b      	ldr	r3, [r3, #32]
    9f30:	681b      	ldr	r3, [r3, #0]
    9f32:	791b      	ldrb	r3, [r3, #4]
    9f34:	4619      	mov	r1, r3
    9f36:	4b1d      	ldr	r3, [pc, #116]	; (9fac <Spi_Ipw_SyncTransmit+0x214>)
    9f38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    9f3c:	8852      	ldrh	r2, [r2, #2]
    9f3e:	871a      	strh	r2, [r3, #56]	; 0x38
                    Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->NextChannelIsRX = FALSE;
                }
                #endif
            }
            
            if(0u == ChannelIndex)
    9f40:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9f44:	2b00      	cmp	r3, #0
    9f46:	d10a      	bne.n	9f5e <Spi_Ipw_SyncTransmit+0x1c6>
            {
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->FirstCmd = TRUE;
    9f48:	9b01      	ldr	r3, [sp, #4]
    9f4a:	6a1b      	ldr	r3, [r3, #32]
    9f4c:	681b      	ldr	r3, [r3, #0]
    9f4e:	791b      	ldrb	r3, [r3, #4]
    9f50:	461a      	mov	r2, r3
    9f52:	4b16      	ldr	r3, [pc, #88]	; (9fac <Spi_Ipw_SyncTransmit+0x214>)
    9f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9f58:	2201      	movs	r2, #1
    9f5a:	775a      	strb	r2, [r3, #29]
    9f5c:	e009      	b.n	9f72 <Spi_Ipw_SyncTransmit+0x1da>
            }
            else
            {
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->FirstCmd = FALSE;
    9f5e:	9b01      	ldr	r3, [sp, #4]
    9f60:	6a1b      	ldr	r3, [r3, #32]
    9f62:	681b      	ldr	r3, [r3, #0]
    9f64:	791b      	ldrb	r3, [r3, #4]
    9f66:	461a      	mov	r2, r3
    9f68:	4b10      	ldr	r3, [pc, #64]	; (9fac <Spi_Ipw_SyncTransmit+0x214>)
    9f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9f6e:	2200      	movs	r2, #0
    9f70:	775a      	strb	r2, [r3, #29]
            }
        }
        Ipw_Status = Spi_Ipw_SyncTransmitProcess(JobConfig, ChannelConfig, RxBuffer, (const uint8*)TxBuffer);
    9f72:	9b08      	ldr	r3, [sp, #32]
    9f74:	9a03      	ldr	r2, [sp, #12]
    9f76:	9904      	ldr	r1, [sp, #16]
    9f78:	9801      	ldr	r0, [sp, #4]
    9f7a:	f7ff fe7f 	bl	9c7c <Spi_Ipw_SyncTransmitProcess>
    9f7e:	4603      	mov	r3, r0
    9f80:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    for (ChannelIndex = (Spi_ChannelType)0; ChannelIndex < NumChannelsInJob; ChannelIndex++)
    9f84:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9f88:	3301      	adds	r3, #1
    9f8a:	f88d 301f 	strb.w	r3, [sp, #31]
    9f8e:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9f92:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9f96:	429a      	cmp	r2, r3
    9f98:	f4ff af12 	bcc.w	9dc0 <Spi_Ipw_SyncTransmit+0x28>
    }
    return Ipw_Status;
    9f9c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    9fa0:	4618      	mov	r0, r3
    9fa2:	b00b      	add	sp, #44	; 0x2c
    9fa4:	f85d fb04 	ldr.w	pc, [sp], #4
    9fa8:	1fff8dec 	.word	0x1fff8dec
    9fac:	1fff8dd8 	.word	0x1fff8dd8

00009fb0 <Can_IsControllersBusy>:
        }
    }
#endif /* CAN_43_FLEXCAN_MAINFUNCTION_MULTIPLE_READ == STD_ON */

static boolean Can_IsControllersBusy(uint32 u32CoreId)
{
    9fb0:	b084      	sub	sp, #16
    9fb2:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    9fb4:	2300      	movs	r3, #0
    9fb6:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    9fba:	2300      	movs	r3, #0
    9fbc:	f88d 300e 	strb.w	r3, [sp, #14]

    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    9fc0:	2300      	movs	r3, #0
    9fc2:	f88d 300e 	strb.w	r3, [sp, #14]
    9fc6:	e01b      	b.n	a000 <Can_IsControllersBusy+0x50>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    9fc8:	4a12      	ldr	r2, [pc, #72]	; (a014 <Can_IsControllersBusy+0x64>)
    9fca:	9b01      	ldr	r3, [sp, #4]
    9fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fd0:	695a      	ldr	r2, [r3, #20]
    9fd2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9fd6:	009b      	lsls	r3, r3, #2
    9fd8:	4413      	add	r3, r2
    9fda:	681b      	ldr	r3, [r3, #0]
    9fdc:	2b00      	cmp	r3, #0
    9fde:	d00a      	beq.n	9ff6 <Can_IsControllersBusy+0x46>
        {
            if (CAN_CS_UNINIT != Can_eControllerState[u8ControllerID])
    9fe0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9fe4:	4a0c      	ldr	r2, [pc, #48]	; (a018 <Can_IsControllersBusy+0x68>)
    9fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fea:	2b00      	cmp	r3, #0
    9fec:	d003      	beq.n	9ff6 <Can_IsControllersBusy+0x46>
                *   The function Can_Init shall raise the error CAN_E_TRANSITION if the CAN
                *   controllers are not in state UNINIT.
                */
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_TRANSITION);
            #endif
                bCtrlBusy = TRUE;
    9fee:	2301      	movs	r3, #1
    9ff0:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    9ff4:	e008      	b.n	a008 <Can_IsControllersBusy+0x58>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    9ff6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9ffa:	3301      	adds	r3, #1
    9ffc:	f88d 300e 	strb.w	r3, [sp, #14]
    a000:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a004:	2b01      	cmp	r3, #1
    a006:	d9df      	bls.n	9fc8 <Can_IsControllersBusy+0x18>
            }
        }
    }

    return bCtrlBusy;
    a008:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a00c:	4618      	mov	r0, r3
    a00e:	b004      	add	sp, #16
    a010:	4770      	bx	lr
    a012:	bf00      	nop
    a014:	1fff8e14 	.word	0x1fff8e14
    a018:	1fff8e0c 	.word	0x1fff8e0c

0000a01c <Can_InitControllers>:

static void Can_InitControllers(uint32 u32CoreId)
{
    a01c:	b500      	push	{lr}
    a01e:	b085      	sub	sp, #20
    a020:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    a022:	2300      	movs	r3, #0
    a024:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    a028:	2300      	movs	r3, #0
    a02a:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a02e:	2300      	movs	r3, #0
    a030:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a032:	2300      	movs	r3, #0
    a034:	f88d 300e 	strb.w	r3, [sp, #14]
    a038:	e035      	b.n	a0a6 <Can_InitControllers+0x8a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a03a:	4a30      	ldr	r2, [pc, #192]	; (a0fc <Can_InitControllers+0xe0>)
    a03c:	9b01      	ldr	r3, [sp, #4]
    a03e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a042:	695a      	ldr	r2, [r3, #20]
    a044:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a048:	009b      	lsls	r3, r3, #2
    a04a:	4413      	add	r3, r2
    a04c:	681b      	ldr	r3, [r3, #0]
    a04e:	2b00      	cmp	r3, #0
    a050:	d024      	beq.n	a09c <Can_InitControllers+0x80>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a052:	4a2a      	ldr	r2, [pc, #168]	; (a0fc <Can_InitControllers+0xe0>)
    a054:	9b01      	ldr	r3, [sp, #4]
    a056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a05a:	695a      	ldr	r2, [r3, #20]
    a05c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a060:	009b      	lsls	r3, r3, #2
    a062:	4413      	add	r3, r2
    a064:	681b      	ldr	r3, [r3, #0]
    a066:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    a068:	9b02      	ldr	r3, [sp, #8]
    a06a:	7a1b      	ldrb	r3, [r3, #8]
    a06c:	2b00      	cmp	r3, #0
    a06e:	d015      	beq.n	a09c <Can_InitControllers+0x80>
                */
            #if ((CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) || (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON))
                Can_au16BaudrateIDConfig[u8ControllerID] = Can_pController->Can_u16DefaultBaudrateID;
            #endif
                /* Reset interrupt level to default value after re-init */
                Can_au8DisableInterruptLevel[u8ControllerID] = 0U;
    a070:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a074:	4a22      	ldr	r2, [pc, #136]	; (a100 <Can_InitControllers+0xe4>)
    a076:	2100      	movs	r1, #0
    a078:	54d1      	strb	r1, [r2, r3]
            #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
                Can_apxCtrlConfigIcomIndex[u8ControllerID] = NULL_PTR;
            #endif
                /* Init the controller */
                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_Init(Can_pController))
    a07a:	9802      	ldr	r0, [sp, #8]
    a07c:	f000 ff82 	bl	af84 <Can_43_FLEXCAN_Ipw_Init>
    a080:	4603      	mov	r3, r0
    a082:	2b00      	cmp	r3, #0
    a084:	d106      	bne.n	a094 <Can_InitControllers+0x78>
                {
                    Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    a086:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a08a:	4a1e      	ldr	r2, [pc, #120]	; (a104 <Can_InitControllers+0xe8>)
    a08c:	2102      	movs	r1, #2
    a08e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    a092:	e003      	b.n	a09c <Can_InitControllers+0x80>
                else
                {
                    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_INIT_FAILED);
                    #endif
                    bCtrlBusy = TRUE;
    a094:	2301      	movs	r3, #1
    a096:	f88d 300f 	strb.w	r3, [sp, #15]
                    break;
    a09a:	e008      	b.n	a0ae <Can_InitControllers+0x92>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a09c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0a0:	3301      	adds	r3, #1
    a0a2:	f88d 300e 	strb.w	r3, [sp, #14]
    a0a6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0aa:	2b01      	cmp	r3, #1
    a0ac:	d9c5      	bls.n	a03a <Can_InitControllers+0x1e>
    }
    /*
    *  [SWS_Can_00246] After initializing all controllers inside the HW Unit, the function Can_Init
    *   shall change the module state to CAN_READY.
    */
    if (TRUE == bCtrlBusy)
    a0ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a0b2:	2b00      	cmp	r3, #0
    a0b4:	d01e      	beq.n	a0f4 <Can_InitControllers+0xd8>
    {
        /* Init failed due to one or more controllers failed, reset status of all  core's current controllers */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a0b6:	2300      	movs	r3, #0
    a0b8:	f88d 300e 	strb.w	r3, [sp, #14]
    a0bc:	e016      	b.n	a0ec <Can_InitControllers+0xd0>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a0be:	4a0f      	ldr	r2, [pc, #60]	; (a0fc <Can_InitControllers+0xe0>)
    a0c0:	9b01      	ldr	r3, [sp, #4]
    a0c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0c6:	695a      	ldr	r2, [r3, #20]
    a0c8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0cc:	009b      	lsls	r3, r3, #2
    a0ce:	4413      	add	r3, r2
    a0d0:	681b      	ldr	r3, [r3, #0]
    a0d2:	2b00      	cmp	r3, #0
    a0d4:	d005      	beq.n	a0e2 <Can_InitControllers+0xc6>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    a0d6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0da:	4a0a      	ldr	r2, [pc, #40]	; (a104 <Can_InitControllers+0xe8>)
    a0dc:	2100      	movs	r1, #0
    a0de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a0e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0e6:	3301      	adds	r3, #1
    a0e8:	f88d 300e 	strb.w	r3, [sp, #14]
    a0ec:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0f0:	2b01      	cmp	r3, #1
    a0f2:	d9e4      	bls.n	a0be <Can_InitControllers+0xa2>
    else
    {
        Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_READY;
    }
#endif
}
    a0f4:	bf00      	nop
    a0f6:	b005      	add	sp, #20
    a0f8:	f85d fb04 	ldr.w	pc, [sp], #4
    a0fc:	1fff8e14 	.word	0x1fff8e14
    a100:	1fff8e08 	.word	0x1fff8e08
    a104:	1fff8e0c 	.word	0x1fff8e0c

0000a108 <Can_DeInitControllers>:
    return bResult;
}
#endif

static void Can_DeInitControllers(uint32 u32CoreId)
{
    a108:	b500      	push	{lr}
    a10a:	b085      	sub	sp, #20
    a10c:	9001      	str	r0, [sp, #4]
    uint8 u8ControllerID = 0U;
    a10e:	2300      	movs	r3, #0
    a110:	f88d 300f 	strb.w	r3, [sp, #15]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a114:	2300      	movs	r3, #0
    a116:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a118:	2300      	movs	r3, #0
    a11a:	f88d 300f 	strb.w	r3, [sp, #15]
    a11e:	e028      	b.n	a172 <Can_DeInitControllers+0x6a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a120:	4a18      	ldr	r2, [pc, #96]	; (a184 <Can_DeInitControllers+0x7c>)
    a122:	9b01      	ldr	r3, [sp, #4]
    a124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a128:	695a      	ldr	r2, [r3, #20]
    a12a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a12e:	009b      	lsls	r3, r3, #2
    a130:	4413      	add	r3, r2
    a132:	681b      	ldr	r3, [r3, #0]
    a134:	2b00      	cmp	r3, #0
    a136:	d017      	beq.n	a168 <Can_DeInitControllers+0x60>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a138:	4a12      	ldr	r2, [pc, #72]	; (a184 <Can_DeInitControllers+0x7c>)
    a13a:	9b01      	ldr	r3, [sp, #4]
    a13c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a140:	695a      	ldr	r2, [r3, #20]
    a142:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a146:	009b      	lsls	r3, r3, #2
    a148:	4413      	add	r3, r2
    a14a:	681b      	ldr	r3, [r3, #0]
    a14c:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    a14e:	9b02      	ldr	r3, [sp, #8]
    a150:	7a1b      	ldrb	r3, [r3, #8]
    a152:	2b00      	cmp	r3, #0
    a154:	d008      	beq.n	a168 <Can_DeInitControllers+0x60>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    a156:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a15a:	4a0b      	ldr	r2, [pc, #44]	; (a188 <Can_DeInitControllers+0x80>)
    a15c:	2100      	movs	r1, #0
    a15e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                Can_43_FLEXCAN_Ipw_DeInit(Can_pController);
    a162:	9802      	ldr	r0, [sp, #8]
    a164:	f001 f81a 	bl	b19c <Can_43_FLEXCAN_Ipw_DeInit>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a168:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a16c:	3301      	adds	r3, #1
    a16e:	f88d 300f 	strb.w	r3, [sp, #15]
    a172:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a176:	2b01      	cmp	r3, #1
    a178:	d9d2      	bls.n	a120 <Can_DeInitControllers+0x18>
            }
        }
    }
}
    a17a:	bf00      	nop
    a17c:	bf00      	nop
    a17e:	b005      	add	sp, #20
    a180:	f85d fb04 	ldr.w	pc, [sp], #4
    a184:	1fff8e14 	.word	0x1fff8e14
    a188:	1fff8e0c 	.word	0x1fff8e0c

0000a18c <Can_43_FLEXCAN_Init>:
* @api
*/

/* implements     Can_Init_Activity */
void Can_43_FLEXCAN_Init(const Can_43_FLEXCAN_ConfigType * Config)
{
    a18c:	b500      	push	{lr}
    a18e:	b085      	sub	sp, #20
    a190:	9001      	str	r0, [sp, #4]
    uint32 u32CoreId = 0U;
    a192:	2300      	movs	r3, #0
    a194:	9303      	str	r3, [sp, #12]
    boolean bCtrlBusy = FALSE;
    a196:	2300      	movs	r3, #0
    a198:	f88d 300b 	strb.w	r3, [sp, #11]
#if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
    boolean bValidCoreID = FALSE;
#endif

    u32CoreId = Can_GetCoreID();
    a19c:	2300      	movs	r3, #0
    a19e:	9303      	str	r3, [sp, #12]
        #if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
            if (u32CoreId == Config->Can_u32CoreID)
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Copy pointer to current Can Driver configuration. */
                Can_apxConfig[u32CoreId] = Config;
    a1a0:	490c      	ldr	r1, [pc, #48]	; (a1d4 <Can_43_FLEXCAN_Init+0x48>)
    a1a2:	9b03      	ldr	r3, [sp, #12]
    a1a4:	9a01      	ldr	r2, [sp, #4]
    a1a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (TRUE == bValidCoreID)
            {
#endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Fault Injection point to allow to test SWS_Can_00408 */
                MCAL_FAULT_INJECTION_POINT(CAN_FIP_1_CHANGE_DRIVER_TO_UNINITIALIZED);
                bCtrlBusy = Can_IsControllersBusy(u32CoreId);
    a1aa:	9803      	ldr	r0, [sp, #12]
    a1ac:	f7ff ff00 	bl	9fb0 <Can_IsControllersBusy>
    a1b0:	4603      	mov	r3, r0
    a1b2:	f88d 300b 	strb.w	r3, [sp, #11]
                if (FALSE == bCtrlBusy)
    a1b6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a1ba:	f083 0301 	eor.w	r3, r3, #1
    a1be:	b2db      	uxtb	r3, r3
    a1c0:	2b00      	cmp	r3, #0
    a1c2:	d002      	beq.n	a1ca <Can_43_FLEXCAN_Init+0x3e>
                {
                    Can_InitControllers(u32CoreId);
    a1c4:	9803      	ldr	r0, [sp, #12]
    a1c6:	f7ff ff29 	bl	a01c <Can_InitControllers>

#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif /* (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) */
}
    a1ca:	bf00      	nop
    a1cc:	b005      	add	sp, #20
    a1ce:	f85d fb04 	ldr.w	pc, [sp], #4
    a1d2:	bf00      	nop
    a1d4:	1fff8e14 	.word	0x1fff8e14

0000a1d8 <Can_43_FLEXCAN_DeInit>:
* @post           Can_DeInit shall de-initialize all the controllers and set the driver in UNINIT state.
*
*/
/* implements     Can_DeInit_Activity */
void Can_43_FLEXCAN_DeInit(void)
{
    a1d8:	b500      	push	{lr}
    a1da:	b083      	sub	sp, #12
    /* Variable for indexing the controllers. */
    uint8 u8ControllerID = 0U;
    a1dc:	2300      	movs	r3, #0
    a1de:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean bCtrlBusy = FALSE;
    a1e2:	2300      	movs	r3, #0
    a1e4:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 u32CoreId = 0U;
    a1e8:	2300      	movs	r3, #0
    a1ea:	9300      	str	r3, [sp, #0]

    u32CoreId = Can_GetCoreID();
    a1ec:	2300      	movs	r3, #0
    a1ee:	9300      	str	r3, [sp, #0]
    }
    else
    {
#endif
        /* Loop through all Can controllers configured based CanControllerId parameter. */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a1f0:	2300      	movs	r3, #0
    a1f2:	f88d 3007 	strb.w	r3, [sp, #7]
    a1f6:	e01b      	b.n	a230 <Can_43_FLEXCAN_DeInit+0x58>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    a1f8:	4a19      	ldr	r2, [pc, #100]	; (a260 <Can_43_FLEXCAN_DeInit+0x88>)
    a1fa:	9b00      	ldr	r3, [sp, #0]
    a1fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a200:	695a      	ldr	r2, [r3, #20]
    a202:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a206:	009b      	lsls	r3, r3, #2
    a208:	4413      	add	r3, r2
    a20a:	681b      	ldr	r3, [r3, #0]
    a20c:	2b00      	cmp	r3, #0
    a20e:	d00a      	beq.n	a226 <Can_43_FLEXCAN_DeInit+0x4e>
            {
                if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    a210:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a214:	4a13      	ldr	r2, [pc, #76]	; (a264 <Can_43_FLEXCAN_DeInit+0x8c>)
    a216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a21a:	2b01      	cmp	r3, #1
    a21c:	d103      	bne.n	a226 <Can_43_FLEXCAN_DeInit+0x4e>
                    *   if any of the CAN controllers is in state STARTED.
                    */
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_DEINIT, (uint8)CAN_43_FLEXCAN_E_TRANSITION);
                #endif
                    /* Controller is busy */
                    bCtrlBusy =  TRUE;
    a21e:	2301      	movs	r3, #1
    a220:	f88d 3006 	strb.w	r3, [sp, #6]
                    /* Skipping the loop if any of Can Controller is in state STARTED */
                    break;
    a224:	e008      	b.n	a238 <Can_43_FLEXCAN_DeInit+0x60>
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    a226:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a22a:	3301      	adds	r3, #1
    a22c:	f88d 3007 	strb.w	r3, [sp, #7]
    a230:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a234:	2b01      	cmp	r3, #1
    a236:	d9df      	bls.n	a1f8 <Can_43_FLEXCAN_DeInit+0x20>
                }
            }
        }
        /* All Controllers are not busy */
        if (FALSE == bCtrlBusy)
    a238:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a23c:	f083 0301 	eor.w	r3, r3, #1
    a240:	b2db      	uxtb	r3, r3
    a242:	2b00      	cmp	r3, #0
    a244:	d007      	beq.n	a256 <Can_43_FLEXCAN_DeInit+0x7e>
            *   [SWS_Can_91010] The function Can_DeInit shall change the module state to
            *   CAN_UNINIT before de-initializing all controllers inside the HW unit
            */
            Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_UNINIT;
        #endif
            Can_DeInitControllers(u32CoreId);
    a246:	9800      	ldr	r0, [sp, #0]
    a248:	f7ff ff5e 	bl	a108 <Can_DeInitControllers>
            Can_apxConfig[u32CoreId] = NULL_PTR;
    a24c:	4a04      	ldr	r2, [pc, #16]	; (a260 <Can_43_FLEXCAN_DeInit+0x88>)
    a24e:	9b00      	ldr	r3, [sp, #0]
    a250:	2100      	movs	r1, #0
    a252:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
}
    a256:	bf00      	nop
    a258:	b003      	add	sp, #12
    a25a:	f85d fb04 	ldr.w	pc, [sp], #4
    a25e:	bf00      	nop
    a260:	1fff8e14 	.word	0x1fff8e14
    a264:	1fff8e0c 	.word	0x1fff8e0c

0000a268 <Can_43_FLEXCAN_SetControllerMode>:
*
* @api
*/
/* implements     Can_SetControllerMode_Activity */
Std_ReturnType Can_43_FLEXCAN_SetControllerMode(uint8 Controller, Can_ControllerStateType Transition)
{
    a268:	b500      	push	{lr}
    a26a:	b087      	sub	sp, #28
    a26c:	4603      	mov	r3, r0
    a26e:	9100      	str	r1, [sp, #0]
    a270:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a274:	2301      	movs	r3, #1
    a276:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a27a:	2300      	movs	r3, #0
    a27c:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a27e:	2300      	movs	r3, #0
    a280:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a282:	2300      	movs	r3, #0
    a284:	9304      	str	r3, [sp, #16]
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    if (TRUE == Can_ValidateController(u32CoreId, Controller, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE))
    {
#endif
                Can_pController = (const Can_43_FLEXCAN_ControllerConfigType *)(Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    a286:	4a47      	ldr	r2, [pc, #284]	; (a3a4 <Can_43_FLEXCAN_SetControllerMode+0x13c>)
    a288:	9b04      	ldr	r3, [sp, #16]
    a28a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a28e:	695a      	ldr	r2, [r3, #20]
    a290:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a294:	009b      	lsls	r3, r3, #2
    a296:	4413      	add	r3, r2
    a298:	681b      	ldr	r3, [r3, #0]
    a29a:	9303      	str	r3, [sp, #12]
                /*
                *   [SWS_Can_00017] The function Can_SetControllerMode shall perform software
                *   triggered state transitions of the CAN controller State machine.
                */
                switch (Transition)
    a29c:	9b00      	ldr	r3, [sp, #0]
    a29e:	2b03      	cmp	r3, #3
    a2a0:	d05d      	beq.n	a35e <Can_43_FLEXCAN_SetControllerMode+0xf6>
    a2a2:	9b00      	ldr	r3, [sp, #0]
    a2a4:	2b03      	cmp	r3, #3
    a2a6:	d874      	bhi.n	a392 <Can_43_FLEXCAN_SetControllerMode+0x12a>
    a2a8:	9b00      	ldr	r3, [sp, #0]
    a2aa:	2b01      	cmp	r3, #1
    a2ac:	d003      	beq.n	a2b6 <Can_43_FLEXCAN_SetControllerMode+0x4e>
    a2ae:	9b00      	ldr	r3, [sp, #0]
    a2b0:	2b02      	cmp	r3, #2
    a2b2:	d01d      	beq.n	a2f0 <Can_43_FLEXCAN_SetControllerMode+0x88>
                        *   has been requested, the function Can_SetControllerMode shall raise the error CAN_E_TRANSITION and
                        *   return E_NOT_OK
                        */
                        (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_TRANSITION);
                    #endif
                        break;
    a2b4:	e06d      	b.n	a392 <Can_43_FLEXCAN_SetControllerMode+0x12a>
                        if (CAN_CS_STOPPED == Can_eControllerState[Controller])
    a2b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a2ba:	4a3b      	ldr	r2, [pc, #236]	; (a3a8 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a2bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2c0:	2b02      	cmp	r3, #2
    a2c2:	d168      	bne.n	a396 <Can_43_FLEXCAN_SetControllerMode+0x12e>
                            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStartMode(Can_pController))
    a2c4:	9803      	ldr	r0, [sp, #12]
    a2c6:	f000 ffa3 	bl	b210 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>
    a2ca:	4603      	mov	r3, r0
    a2cc:	2b00      	cmp	r3, #0
    a2ce:	d162      	bne.n	a396 <Can_43_FLEXCAN_SetControllerMode+0x12e>
                                Can_eControllerState[Controller] = CAN_CS_STARTED;
    a2d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a2d4:	4a34      	ldr	r2, [pc, #208]	; (a3a8 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a2d6:	2101      	movs	r1, #1
    a2d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STARTED);
    a2dc:	9b03      	ldr	r3, [sp, #12]
    a2de:	781b      	ldrb	r3, [r3, #0]
    a2e0:	2101      	movs	r1, #1
    a2e2:	4618      	mov	r0, r3
    a2e4:	f00c fe94 	bl	17010 <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    a2e8:	2300      	movs	r3, #0
    a2ea:	f88d 3017 	strb.w	r3, [sp, #23]
                        break;
    a2ee:	e052      	b.n	a396 <Can_43_FLEXCAN_SetControllerMode+0x12e>
                        switch (Can_eControllerState[Controller])
    a2f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a2f4:	4a2c      	ldr	r2, [pc, #176]	; (a3a8 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a2f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2fa:	2b01      	cmp	r3, #1
    a2fc:	d005      	beq.n	a30a <Can_43_FLEXCAN_SetControllerMode+0xa2>
    a2fe:	2b00      	cmp	r3, #0
    a300:	d029      	beq.n	a356 <Can_43_FLEXCAN_SetControllerMode+0xee>
    a302:	3b02      	subs	r3, #2
    a304:	2b01      	cmp	r3, #1
    a306:	d826      	bhi.n	a356 <Can_43_FLEXCAN_SetControllerMode+0xee>
    a308:	e015      	b.n	a336 <Can_43_FLEXCAN_SetControllerMode+0xce>
                                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    a30a:	9803      	ldr	r0, [sp, #12]
    a30c:	f000 fff2 	bl	b2f4 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    a310:	4603      	mov	r3, r0
    a312:	2b00      	cmp	r3, #0
    a314:	d121      	bne.n	a35a <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                    Can_eControllerState[Controller] = CAN_CS_STOPPED;
    a316:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a31a:	4a23      	ldr	r2, [pc, #140]	; (a3a8 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a31c:	2102      	movs	r1, #2
    a31e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                    CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    a322:	9b03      	ldr	r3, [sp, #12]
    a324:	781b      	ldrb	r3, [r3, #0]
    a326:	2102      	movs	r1, #2
    a328:	4618      	mov	r0, r3
    a32a:	f00c fe71 	bl	17010 <CanIf_ControllerModeIndication>
                                    eRetVal = E_OK;
    a32e:	2300      	movs	r3, #0
    a330:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    a334:	e011      	b.n	a35a <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                Can_eControllerState[Controller] = CAN_CS_STOPPED;
    a336:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a33a:	4a1b      	ldr	r2, [pc, #108]	; (a3a8 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a33c:	2102      	movs	r1, #2
    a33e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    a342:	9b03      	ldr	r3, [sp, #12]
    a344:	781b      	ldrb	r3, [r3, #0]
    a346:	2102      	movs	r1, #2
    a348:	4618      	mov	r0, r3
    a34a:	f00c fe61 	bl	17010 <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    a34e:	2300      	movs	r3, #0
    a350:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    a354:	e002      	b.n	a35c <Can_43_FLEXCAN_SetControllerMode+0xf4>
                                break;
    a356:	bf00      	nop
    a358:	e01e      	b.n	a398 <Can_43_FLEXCAN_SetControllerMode+0x130>
                                break;
    a35a:	bf00      	nop
                        break;
    a35c:	e01c      	b.n	a398 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        switch (Can_eControllerState[Controller])
    a35e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a362:	4a11      	ldr	r2, [pc, #68]	; (a3a8 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a368:	3b02      	subs	r3, #2
    a36a:	2b01      	cmp	r3, #1
    a36c:	d80f      	bhi.n	a38e <Can_43_FLEXCAN_SetControllerMode+0x126>
                                Can_eControllerState[Controller] = CAN_CS_SLEEP;
    a36e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a372:	4a0d      	ldr	r2, [pc, #52]	; (a3a8 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    a374:	2103      	movs	r1, #3
    a376:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_SLEEP);
    a37a:	9b03      	ldr	r3, [sp, #12]
    a37c:	781b      	ldrb	r3, [r3, #0]
    a37e:	2103      	movs	r1, #3
    a380:	4618      	mov	r0, r3
    a382:	f00c fe45 	bl	17010 <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    a386:	2300      	movs	r3, #0
    a388:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    a38c:	e000      	b.n	a390 <Can_43_FLEXCAN_SetControllerMode+0x128>
                                break;
    a38e:	bf00      	nop
                        break;
    a390:	e002      	b.n	a398 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    a392:	bf00      	nop
    a394:	e000      	b.n	a398 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    a396:	bf00      	nop
                    }
                }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eRetVal;
    a398:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a39c:	4618      	mov	r0, r3
    a39e:	b007      	add	sp, #28
    a3a0:	f85d fb04 	ldr.w	pc, [sp], #4
    a3a4:	1fff8e14 	.word	0x1fff8e14
    a3a8:	1fff8e0c 	.word	0x1fff8e0c

0000a3ac <Can_43_FLEXCAN_DisableControllerInterrupts>:
*
* @api
*/
/* implements     Can_DisableControllerInterrupts_Activity */
void Can_43_FLEXCAN_DisableControllerInterrupts(uint8 Controller)
{
    a3ac:	b500      	push	{lr}
    a3ae:	b085      	sub	sp, #20
    a3b0:	4603      	mov	r3, r0
    a3b2:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    a3b6:	2300      	movs	r3, #0
    a3b8:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a3ba:	2300      	movs	r3, #0
    a3bc:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    a3be:	2300      	movs	r3, #0
    a3c0:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    a3c2:	4a10      	ldr	r2, [pc, #64]	; (a404 <Can_43_FLEXCAN_DisableControllerInterrupts+0x58>)
    a3c4:	9b03      	ldr	r3, [sp, #12]
    a3c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3ca:	695a      	ldr	r2, [r3, #20]
    a3cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3d0:	009b      	lsls	r3, r3, #2
    a3d2:	4413      	add	r3, r2
    a3d4:	681b      	ldr	r3, [r3, #0]
    a3d6:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    a3d8:	f009 fc1c 	bl	13c14 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_au8DisableInterruptLevel[Controller] += 1U;
    a3dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3e0:	4a09      	ldr	r2, [pc, #36]	; (a408 <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    a3e2:	5cd2      	ldrb	r2, [r2, r3]
    a3e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3e8:	3201      	adds	r2, #1
    a3ea:	b2d1      	uxtb	r1, r2
    a3ec:	4a06      	ldr	r2, [pc, #24]	; (a408 <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    a3ee:	54d1      	strb	r1, [r2, r3]
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    a3f0:	f009 fc3c 	bl	13c6c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(Can_pController);
    a3f4:	9802      	ldr	r0, [sp, #8]
    a3f6:	f000 fffb 	bl	b3f0 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    a3fa:	bf00      	nop
    a3fc:	b005      	add	sp, #20
    a3fe:	f85d fb04 	ldr.w	pc, [sp], #4
    a402:	bf00      	nop
    a404:	1fff8e14 	.word	0x1fff8e14
    a408:	1fff8e08 	.word	0x1fff8e08

0000a40c <Can_43_FLEXCAN_EnableControllerInterrupts>:
*
* @api
*/
/* implements     Can_EnableControllerInterrupts_Activity */
void Can_43_FLEXCAN_EnableControllerInterrupts(uint8 Controller)
{
    a40c:	b500      	push	{lr}
    a40e:	b085      	sub	sp, #20
    a410:	4603      	mov	r3, r0
    a412:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    a416:	2300      	movs	r3, #0
    a418:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a41a:	2300      	movs	r3, #0
    a41c:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    a41e:	2300      	movs	r3, #0
    a420:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    a422:	4a16      	ldr	r2, [pc, #88]	; (a47c <Can_43_FLEXCAN_EnableControllerInterrupts+0x70>)
    a424:	9b03      	ldr	r3, [sp, #12]
    a426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a42a:	695a      	ldr	r2, [r3, #20]
    a42c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a430:	009b      	lsls	r3, r3, #2
    a432:	4413      	add	r3, r2
    a434:	681b      	ldr	r3, [r3, #0]
    a436:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    a438:	f009 fc3e 	bl	13cb8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>
                if (Can_au8DisableInterruptLevel[Controller] > 0U)
    a43c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a440:	4a0f      	ldr	r2, [pc, #60]	; (a480 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    a442:	5cd3      	ldrb	r3, [r2, r3]
    a444:	2b00      	cmp	r3, #0
    a446:	d009      	beq.n	a45c <Can_43_FLEXCAN_EnableControllerInterrupts+0x50>
                {
                    Can_au8DisableInterruptLevel[Controller] -= 1U;
    a448:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a44c:	4a0c      	ldr	r2, [pc, #48]	; (a480 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    a44e:	5cd2      	ldrb	r2, [r2, r3]
    a450:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a454:	3a01      	subs	r2, #1
    a456:	b2d1      	uxtb	r1, r2
    a458:	4a09      	ldr	r2, [pc, #36]	; (a480 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    a45a:	54d1      	strb	r1, [r2, r3]
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    a45c:	f009 fc58 	bl	13d10 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>

                if (0U == Can_au8DisableInterruptLevel[Controller])
    a460:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a464:	4a06      	ldr	r2, [pc, #24]	; (a480 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    a466:	5cd3      	ldrb	r3, [r2, r3]
    a468:	2b00      	cmp	r3, #0
    a46a:	d102      	bne.n	a472 <Can_43_FLEXCAN_EnableControllerInterrupts+0x66>
                {
                    Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(Can_pController);
    a46c:	9802      	ldr	r0, [sp, #8]
    a46e:	f000 ffe9 	bl	b444 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    a472:	bf00      	nop
    a474:	b005      	add	sp, #20
    a476:	f85d fb04 	ldr.w	pc, [sp], #4
    a47a:	bf00      	nop
    a47c:	1fff8e14 	.word	0x1fff8e14
    a480:	1fff8e08 	.word	0x1fff8e08

0000a484 <Can_43_FLEXCAN_GetControllerErrorState>:
Std_ReturnType Can_43_FLEXCAN_GetControllerErrorState
(
    uint8 ControllerId,
    Can_ErrorStateType * ErrorStatePtr
)
{
    a484:	b500      	push	{lr}
    a486:	b087      	sub	sp, #28
    a488:	4603      	mov	r3, r0
    a48a:	9100      	str	r1, [sp, #0]
    a48c:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a490:	2301      	movs	r3, #1
    a492:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 errorState = 0U;
    a496:	2300      	movs	r3, #0
    a498:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 u32CoreId = 0U;
    a49c:	2300      	movs	r3, #0
    a49e:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a4a0:	2300      	movs	r3, #0
    a4a2:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a4a4:	2300      	movs	r3, #0
    a4a6:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_ERROR_STATE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    a4a8:	4a18      	ldr	r2, [pc, #96]	; (a50c <Can_43_FLEXCAN_GetControllerErrorState+0x88>)
    a4aa:	9b04      	ldr	r3, [sp, #16]
    a4ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4b0:	695a      	ldr	r2, [r3, #20]
    a4b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a4b6:	009b      	lsls	r3, r3, #2
    a4b8:	4413      	add	r3, r2
    a4ba:	681b      	ldr	r3, [r3, #0]
    a4bc:	9303      	str	r3, [sp, #12]
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerErrorState(Can_pController, &errorState);
    a4be:	f10d 030b 	add.w	r3, sp, #11
    a4c2:	4619      	mov	r1, r3
    a4c4:	9803      	ldr	r0, [sp, #12]
    a4c6:	f000 ffe9 	bl	b49c <Can_43_FLEXCAN_Ipw_GetControllerErrorState>
    a4ca:	4603      	mov	r3, r0
    a4cc:	f88d 3017 	strb.w	r3, [sp, #23]
                    if(eRetVal == (Std_ReturnType)E_OK)
    a4d0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a4d4:	2b00      	cmp	r3, #0
    a4d6:	d112      	bne.n	a4fe <Can_43_FLEXCAN_GetControllerErrorState+0x7a>
                    {
                        switch (errorState)
    a4d8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a4dc:	2b00      	cmp	r3, #0
    a4de:	d002      	beq.n	a4e6 <Can_43_FLEXCAN_GetControllerErrorState+0x62>
    a4e0:	2b01      	cmp	r3, #1
    a4e2:	d004      	beq.n	a4ee <Can_43_FLEXCAN_GetControllerErrorState+0x6a>
    a4e4:	e007      	b.n	a4f6 <Can_43_FLEXCAN_GetControllerErrorState+0x72>
                        {
                            case 0x00U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_ACTIVE;
    a4e6:	9b00      	ldr	r3, [sp, #0]
    a4e8:	2200      	movs	r2, #0
    a4ea:	601a      	str	r2, [r3, #0]
                                break;
    a4ec:	e008      	b.n	a500 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            case 0x01U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_PASSIVE;
    a4ee:	9b00      	ldr	r3, [sp, #0]
    a4f0:	2201      	movs	r2, #1
    a4f2:	601a      	str	r2, [r3, #0]
                                break;
    a4f4:	e004      	b.n	a500 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            default:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_BUSOFF;
    a4f6:	9b00      	ldr	r3, [sp, #0]
    a4f8:	2202      	movs	r2, #2
    a4fa:	601a      	str	r2, [r3, #0]
                                break;
    a4fc:	e000      	b.n	a500 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                        }
                    }
    a4fe:	bf00      	nop
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                }
    }
#endif
    return eRetVal;
    a500:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a504:	4618      	mov	r0, r3
    a506:	b007      	add	sp, #28
    a508:	f85d fb04 	ldr.w	pc, [sp], #4
    a50c:	1fff8e14 	.word	0x1fff8e14

0000a510 <Can_43_FLEXCAN_GetControllerMode>:
Std_ReturnType Can_43_FLEXCAN_GetControllerMode
(
    uint8 Controller,
    Can_ControllerStateType * ControllerModePtr
)
{
    a510:	b084      	sub	sp, #16
    a512:	4603      	mov	r3, r0
    a514:	9100      	str	r1, [sp, #0]
    a516:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a51a:	2301      	movs	r3, #1
    a51c:	f88d 300f 	strb.w	r3, [sp, #15]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    *ControllerModePtr = Can_eControllerState[Controller];
    a520:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a524:	4a06      	ldr	r2, [pc, #24]	; (a540 <Can_43_FLEXCAN_GetControllerMode+0x30>)
    a526:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    a52a:	9b00      	ldr	r3, [sp, #0]
    a52c:	601a      	str	r2, [r3, #0]
                    eRetVal = E_OK;
    a52e:	2300      	movs	r3, #0
    a530:	f88d 300f 	strb.w	r3, [sp, #15]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    a534:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a538:	4618      	mov	r0, r3
    a53a:	b004      	add	sp, #16
    a53c:	4770      	bx	lr
    a53e:	bf00      	nop
    a540:	1fff8e0c 	.word	0x1fff8e0c

0000a544 <Can_43_FLEXCAN_GetControllerRxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerRxErrorCounter
(
    uint8 ControllerId,
    uint8 * RxErrorCounterPtr
)
{
    a544:	b500      	push	{lr}
    a546:	b087      	sub	sp, #28
    a548:	4603      	mov	r3, r0
    a54a:	9100      	str	r1, [sp, #0]
    a54c:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a550:	2301      	movs	r3, #1
    a552:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a556:	2300      	movs	r3, #0
    a558:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a55a:	2300      	movs	r3, #0
    a55c:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a55e:	2300      	movs	r3, #0
    a560:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_RX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    a562:	4a0c      	ldr	r2, [pc, #48]	; (a594 <Can_43_FLEXCAN_GetControllerRxErrorCounter+0x50>)
    a564:	9b04      	ldr	r3, [sp, #16]
    a566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a56a:	695a      	ldr	r2, [r3, #20]
    a56c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a570:	009b      	lsls	r3, r3, #2
    a572:	4413      	add	r3, r2
    a574:	681b      	ldr	r3, [r3, #0]
    a576:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00515]: When the API Can_GetControllerRxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Rx error counter
                    *   register of Can Controller and shall return the Rx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(Can_pController, RxErrorCounterPtr);
    a578:	9900      	ldr	r1, [sp, #0]
    a57a:	9803      	ldr	r0, [sp, #12]
    a57c:	f000 ffb9 	bl	b4f2 <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>
    a580:	4603      	mov	r3, r0
    a582:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    a586:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a58a:	4618      	mov	r0, r3
    a58c:	b007      	add	sp, #28
    a58e:	f85d fb04 	ldr.w	pc, [sp], #4
    a592:	bf00      	nop
    a594:	1fff8e14 	.word	0x1fff8e14

0000a598 <Can_43_FLEXCAN_GetControllerTxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerTxErrorCounter
(
    uint8 ControllerId,
    uint8 * TxErrorCounterPtr
)
{
    a598:	b500      	push	{lr}
    a59a:	b087      	sub	sp, #28
    a59c:	4603      	mov	r3, r0
    a59e:	9100      	str	r1, [sp, #0]
    a5a0:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    a5a4:	2301      	movs	r3, #1
    a5a6:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a5aa:	2300      	movs	r3, #0
    a5ac:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a5ae:	2300      	movs	r3, #0
    a5b0:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a5b2:	2300      	movs	r3, #0
    a5b4:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_TX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    a5b6:	4a0c      	ldr	r2, [pc, #48]	; (a5e8 <Can_43_FLEXCAN_GetControllerTxErrorCounter+0x50>)
    a5b8:	9b04      	ldr	r3, [sp, #16]
    a5ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5be:	695a      	ldr	r2, [r3, #20]
    a5c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a5c4:	009b      	lsls	r3, r3, #2
    a5c6:	4413      	add	r3, r2
    a5c8:	681b      	ldr	r3, [r3, #0]
    a5ca:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00520]: When the API Can_GetControllerTxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Tx error counter
                    *   register of Can Controller and shall return the Tx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(Can_pController, TxErrorCounterPtr);
    a5cc:	9900      	ldr	r1, [sp, #0]
    a5ce:	9803      	ldr	r0, [sp, #12]
    a5d0:	f000 ff7d 	bl	b4ce <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>
    a5d4:	4603      	mov	r3, r0
    a5d6:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    a5da:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a5de:	4618      	mov	r0, r3
    a5e0:	b007      	add	sp, #28
    a5e2:	f85d fb04 	ldr.w	pc, [sp], #4
    a5e6:	bf00      	nop
    a5e8:	1fff8e14 	.word	0x1fff8e14

0000a5ec <Can_43_FLEXCAN_Write>:
Std_ReturnType Can_43_FLEXCAN_Write
(
    Can_HwHandleType Hth,
    const Can_PduType * PduInfo
)
{
    a5ec:	b500      	push	{lr}
    a5ee:	b089      	sub	sp, #36	; 0x24
    a5f0:	4603      	mov	r3, r0
    a5f2:	9100      	str	r1, [sp, #0]
    a5f4:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType eRetVal = E_NOT_OK;
    a5f8:	2301      	movs	r3, #1
    a5fa:	f88d 301f 	strb.w	r3, [sp, #31]
    uint8 u8ControllerID = 0U;
    a5fe:	2300      	movs	r3, #0
    a600:	f88d 301e 	strb.w	r3, [sp, #30]
    uint32 u32CoreId = 0U;
    a604:	2300      	movs	r3, #0
    a606:	9306      	str	r3, [sp, #24]
    Can_HwHandleType HwObjectID = 0U;
    a608:	2300      	movs	r3, #0
    a60a:	f8ad 3016 	strh.w	r3, [sp, #22]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a60e:	2300      	movs	r3, #0
    a610:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    a612:	2300      	movs	r3, #0
    a614:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a616:	2300      	movs	r3, #0
    a618:	9306      	str	r3, [sp, #24]
    HwObjectID = Hth;
    a61a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a61e:	f8ad 3016 	strh.w	r3, [sp, #22]
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_WRITE, CAN_43_FLEXCAN_E_PARAM_POINTER);
            }
            else
            {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pHwObjIDToCtrlIDMap[HwObjectID];
    a622:	4a1d      	ldr	r2, [pc, #116]	; (a698 <Can_43_FLEXCAN_Write+0xac>)
    a624:	9b06      	ldr	r3, [sp, #24]
    a626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a62a:	68da      	ldr	r2, [r3, #12]
    a62c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    a630:	4413      	add	r3, r2
    a632:	781b      	ldrb	r3, [r3, #0]
    a634:	f88d 301e 	strb.w	r3, [sp, #30]
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a638:	4a17      	ldr	r2, [pc, #92]	; (a698 <Can_43_FLEXCAN_Write+0xac>)
    a63a:	9b06      	ldr	r3, [sp, #24]
    a63c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a640:	695a      	ldr	r2, [r3, #20]
    a642:	f89d 301e 	ldrb.w	r3, [sp, #30]
    a646:	009b      	lsls	r3, r3, #2
    a648:	4413      	add	r3, r2
    a64a:	681b      	ldr	r3, [r3, #0]
    a64c:	9304      	str	r3, [sp, #16]
                if (NULL_PTR != Can_pController)
    a64e:	9b04      	ldr	r3, [sp, #16]
    a650:	2b00      	cmp	r3, #0
    a652:	d01b      	beq.n	a68c <Can_43_FLEXCAN_Write+0xa0>
                {
                    Can_pHwObject = &((Can_apxConfig[u32CoreId])->Can_pHwObjectConfig[HwObjectID]);
    a654:	4a10      	ldr	r2, [pc, #64]	; (a698 <Can_43_FLEXCAN_Write+0xac>)
    a656:	9b06      	ldr	r3, [sp, #24]
    a658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a65c:	6919      	ldr	r1, [r3, #16]
    a65e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    a662:	4613      	mov	r3, r2
    a664:	00db      	lsls	r3, r3, #3
    a666:	4413      	add	r3, r2
    a668:	009b      	lsls	r3, r3, #2
    a66a:	440b      	add	r3, r1
    a66c:	9303      	str	r3, [sp, #12]
                #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    if ((TRUE == Can_ValidatePdu(Can_pController, Can_pHwObject, PduInfo)) && (CAN_CS_STARTED == Can_eControllerState[u8ControllerID]))
                #else
                    /* avoid unexpected behaviour when accessing to RAM */
                    if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    a66e:	f89d 301e 	ldrb.w	r3, [sp, #30]
    a672:	4a0a      	ldr	r2, [pc, #40]	; (a69c <Can_43_FLEXCAN_Write+0xb0>)
    a674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a678:	2b01      	cmp	r3, #1
    a67a:	d107      	bne.n	a68c <Can_43_FLEXCAN_Write+0xa0>
                            eRetVal = CAN_BUSY;
                        }
                        else
                        {
                    #endif
                            eRetVal = Can_43_FLEXCAN_Ipw_Write(Can_pController, Can_pHwObject, PduInfo);
    a67c:	9a00      	ldr	r2, [sp, #0]
    a67e:	9903      	ldr	r1, [sp, #12]
    a680:	9804      	ldr	r0, [sp, #16]
    a682:	f000 ff48 	bl	b516 <Can_43_FLEXCAN_Ipw_Write>
    a686:	4603      	mov	r3, r0
    a688:	f88d 301f 	strb.w	r3, [sp, #31]
                }
            #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
            }
    }
#endif
    return eRetVal;
    a68c:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    a690:	4618      	mov	r0, r3
    a692:	b009      	add	sp, #36	; 0x24
    a694:	f85d fb04 	ldr.w	pc, [sp], #4
    a698:	1fff8e14 	.word	0x1fff8e14
    a69c:	1fff8e0c 	.word	0x1fff8e0c

0000a6a0 <Can_43_FLEXCAN_MainFunction_Write>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON */
    }
    a6a0:	bf00      	nop
    a6a2:	4770      	bx	lr

0000a6a4 <Can_43_FLEXCAN_MainFunction_Read>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON */
    }
    a6a4:	bf00      	nop
    a6a6:	4770      	bx	lr

0000a6a8 <Can_43_FLEXCAN_MainFunction_BusOff>:
            }
            u8ControllerID++;
        }
    }
#endif /* CAN_43_FLEXCAN_BUSOFF_POLLING_SUPPORT == STD_ON */
}
    a6a8:	bf00      	nop
    a6aa:	4770      	bx	lr

0000a6ac <Can_43_FLEXCAN_MainFunction_Mode>:
*
* @api
*/
/* implements     Can_MainFunction_Mode_Activity */
void Can_43_FLEXCAN_MainFunction_Mode(void)
{
    a6ac:	b500      	push	{lr}
    a6ae:	b085      	sub	sp, #20
    uint8 u8ControllerID = 0U;
    a6b0:	2300      	movs	r3, #0
    a6b2:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32CoreId = 0U;
    a6b6:	2300      	movs	r3, #0
    a6b8:	9302      	str	r3, [sp, #8]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a6ba:	2300      	movs	r3, #0
    a6bc:	9301      	str	r3, [sp, #4]

    u32CoreId = Can_GetCoreID();
    a6be:	2300      	movs	r3, #0
    a6c0:	9302      	str	r3, [sp, #8]
    if (NULL_PTR != (Can_apxConfig[u32CoreId]))
    a6c2:	4a17      	ldr	r2, [pc, #92]	; (a720 <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    a6c4:	9b02      	ldr	r3, [sp, #8]
    a6c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6ca:	2b00      	cmp	r3, #0
    a6cc:	d024      	beq.n	a718 <Can_43_FLEXCAN_MainFunction_Mode+0x6c>
    {
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    a6ce:	e01f      	b.n	a710 <Can_43_FLEXCAN_MainFunction_Mode+0x64>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a6d0:	4a13      	ldr	r2, [pc, #76]	; (a720 <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    a6d2:	9b02      	ldr	r3, [sp, #8]
    a6d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6d8:	695a      	ldr	r2, [r3, #20]
    a6da:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a6de:	009b      	lsls	r3, r3, #2
    a6e0:	4413      	add	r3, r2
    a6e2:	681b      	ldr	r3, [r3, #0]
    a6e4:	9301      	str	r3, [sp, #4]
            if (NULL_PTR != Can_pController)
    a6e6:	9b01      	ldr	r3, [sp, #4]
    a6e8:	2b00      	cmp	r3, #0
    a6ea:	d00c      	beq.n	a706 <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
            {
                if (TRUE == Can_pController->Can_bActivation)
    a6ec:	9b01      	ldr	r3, [sp, #4]
    a6ee:	7a1b      	ldrb	r3, [r3, #8]
    a6f0:	2b00      	cmp	r3, #0
    a6f2:	d008      	beq.n	a706 <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
                {
                    Can_43_FLEXCAN_Ipw_MainFunction_Mode(Can_pController, &Can_eControllerState[u8ControllerID]);
    a6f4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a6f8:	009b      	lsls	r3, r3, #2
    a6fa:	4a0a      	ldr	r2, [pc, #40]	; (a724 <Can_43_FLEXCAN_MainFunction_Mode+0x78>)
    a6fc:	4413      	add	r3, r2
    a6fe:	4619      	mov	r1, r3
    a700:	9801      	ldr	r0, [sp, #4]
    a702:	f001 f808 	bl	b716 <Can_43_FLEXCAN_Ipw_MainFunction_Mode>
                }
            }
            u8ControllerID++;
    a706:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a70a:	3301      	adds	r3, #1
    a70c:	f88d 300f 	strb.w	r3, [sp, #15]
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    a710:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a714:	2b01      	cmp	r3, #1
    a716:	d9db      	bls.n	a6d0 <Can_43_FLEXCAN_MainFunction_Mode+0x24>
        }
    }
}
    a718:	bf00      	nop
    a71a:	b005      	add	sp, #20
    a71c:	f85d fb04 	ldr.w	pc, [sp], #4
    a720:	1fff8e14 	.word	0x1fff8e14
    a724:	1fff8e0c 	.word	0x1fff8e0c

0000a728 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>:
(
    uint8 u8CtrlOffset,
    uint8 u8MbIdx,
    Can_43_FLEXCAN_MbType mbType
)
{
    a728:	b500      	push	{lr}
    a72a:	b087      	sub	sp, #28
    a72c:	4603      	mov	r3, r0
    a72e:	9200      	str	r2, [sp, #0]
    a730:	f88d 3007 	strb.w	r3, [sp, #7]
    a734:	460b      	mov	r3, r1
    a736:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 u8ControllerID = 0U;
    a73a:	2300      	movs	r3, #0
    a73c:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a740:	2300      	movs	r3, #0
    a742:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a744:	2300      	movs	r3, #0
    a746:	9303      	str	r3, [sp, #12]

    MCAL_FAULT_INJECTION_POINT(CAN_FIP_2_CHANGE_DRIVER_TO_UNINITIALIZED);
    u32CoreId = Can_GetCoreID();
    a748:	2300      	movs	r3, #0
    a74a:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    a74c:	4a16      	ldr	r2, [pc, #88]	; (a7a8 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    a74e:	9b04      	ldr	r3, [sp, #16]
    a750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a754:	2b00      	cmp	r3, #0
    a756:	d022      	beq.n	a79e <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    a758:	4a13      	ldr	r2, [pc, #76]	; (a7a8 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    a75a:	9b04      	ldr	r3, [sp, #16]
    a75c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a760:	689a      	ldr	r2, [r3, #8]
    a762:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a766:	4413      	add	r3, r2
    a768:	781b      	ldrb	r3, [r3, #0]
    a76a:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a76e:	4a0e      	ldr	r2, [pc, #56]	; (a7a8 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    a770:	9b04      	ldr	r3, [sp, #16]
    a772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a776:	695a      	ldr	r2, [r3, #20]
    a778:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a77c:	009b      	lsls	r3, r3, #2
    a77e:	4413      	add	r3, r2
    a780:	681b      	ldr	r3, [r3, #0]
    a782:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    a784:	9b03      	ldr	r3, [sp, #12]
    a786:	2b00      	cmp	r3, #0
    a788:	d009      	beq.n	a79e <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
        {
            Can_43_FLEXCAN_Ipw_ProcessHwObject(Can_pController, (Can_apxConfig[u32CoreId]), u8MbIdx, mbType);
    a78a:	4a07      	ldr	r2, [pc, #28]	; (a7a8 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    a78c:	9b04      	ldr	r3, [sp, #16]
    a78e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    a792:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a796:	9b00      	ldr	r3, [sp, #0]
    a798:	9803      	ldr	r0, [sp, #12]
    a79a:	f000 fff2 	bl	b782 <Can_43_FLEXCAN_Ipw_ProcessHwObject>
        }

    }
}
    a79e:	bf00      	nop
    a7a0:	b007      	add	sp, #28
    a7a2:	f85d fb04 	ldr.w	pc, [sp], #4
    a7a6:	bf00      	nop
    a7a8:	1fff8e14 	.word	0x1fff8e14

0000a7ac <Can_43_FLEXCAN_ProcessBusOffInterrupt>:
*/
void Can_43_FLEXCAN_ProcessBusOffInterrupt
(
    uint8 u8CtrlOffset
)
{
    a7ac:	b500      	push	{lr}
    a7ae:	b087      	sub	sp, #28
    a7b0:	4603      	mov	r3, r0
    a7b2:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 u8ControllerID = 0U;
    a7b6:	2300      	movs	r3, #0
    a7b8:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    a7bc:	2300      	movs	r3, #0
    a7be:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    a7c0:	2300      	movs	r3, #0
    a7c2:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    a7c4:	2300      	movs	r3, #0
    a7c6:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    a7c8:	4a19      	ldr	r2, [pc, #100]	; (a830 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    a7ca:	9b04      	ldr	r3, [sp, #16]
    a7cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7d0:	2b00      	cmp	r3, #0
    a7d2:	d029      	beq.n	a828 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    a7d4:	4a16      	ldr	r2, [pc, #88]	; (a830 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    a7d6:	9b04      	ldr	r3, [sp, #16]
    a7d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7dc:	689a      	ldr	r2, [r3, #8]
    a7de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a7e2:	4413      	add	r3, r2
    a7e4:	781b      	ldrb	r3, [r3, #0]
    a7e6:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    a7ea:	4a11      	ldr	r2, [pc, #68]	; (a830 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    a7ec:	9b04      	ldr	r3, [sp, #16]
    a7ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7f2:	695a      	ldr	r2, [r3, #20]
    a7f4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a7f8:	009b      	lsls	r3, r3, #2
    a7fa:	4413      	add	r3, r2
    a7fc:	681b      	ldr	r3, [r3, #0]
    a7fe:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    a800:	9b03      	ldr	r3, [sp, #12]
    a802:	2b00      	cmp	r3, #0
    a804:	d010      	beq.n	a828 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
        {
            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    a806:	9803      	ldr	r0, [sp, #12]
    a808:	f000 fd74 	bl	b2f4 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    a80c:	4603      	mov	r3, r0
    a80e:	2b00      	cmp	r3, #0
    a810:	d10a      	bne.n	a828 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    a812:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a816:	4a07      	ldr	r2, [pc, #28]	; (a834 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x88>)
    a818:	2102      	movs	r1, #2
    a81a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                CanIf_ControllerBusOff(Can_pController->Can_u8AbstControllerID);
    a81e:	9b03      	ldr	r3, [sp, #12]
    a820:	781b      	ldrb	r3, [r3, #0]
    a822:	4618      	mov	r0, r3
    a824:	f00c fbfc 	bl	17020 <CanIf_ControllerBusOff>
            }
        }
    }
}
    a828:	bf00      	nop
    a82a:	b007      	add	sp, #28
    a82c:	f85d fb04 	ldr.w	pc, [sp], #4
    a830:	1fff8e14 	.word	0x1fff8e14
    a834:	1fff8e0c 	.word	0x1fff8e0c

0000a838 <Can_Ipw_ParseData>:
    PduInfoType * CanIf_PduInfo,
    Flexcan_Ip_MsgBuffType * pReceivedDataBuffer,
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig
)
{
    a838:	b500      	push	{lr}
    a83a:	b085      	sub	sp, #20
    a83c:	9003      	str	r0, [sp, #12]
    a83e:	9102      	str	r1, [sp, #8]
    a840:	9201      	str	r2, [sp, #4]
    a842:	9300      	str	r3, [sp, #0]
    CanIf_Mailbox->CanId = pReceivedDataBuffer->msgId;
    a844:	9b01      	ldr	r3, [sp, #4]
    a846:	685a      	ldr	r2, [r3, #4]
    a848:	9b03      	ldr	r3, [sp, #12]
    a84a:	601a      	str	r2, [r3, #0]
    * convert the ID to a standardized format since the Upper layer (CANIF) does not know
    * whether the received CAN frame is a Standard CAN frame or Extended CAN frame.
    * In case of an Extended CAN frame, MSB of a received CAN frame ID needs to be
    * made as ‘1’ to mark the received CAN frame as Extended.⌋
    */
    if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_IDE_MASK) != 0U)
    a84c:	9b01      	ldr	r3, [sp, #4]
    a84e:	681b      	ldr	r3, [r3, #0]
    a850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    a854:	2b00      	cmp	r3, #0
    a856:	d005      	beq.n	a864 <Can_Ipw_ParseData+0x2c>
    {
        CanIf_Mailbox->CanId |= (uint32)0x80000000U;
    a858:	9b03      	ldr	r3, [sp, #12]
    a85a:	681b      	ldr	r3, [r3, #0]
    a85c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    a860:	9b03      	ldr	r3, [sp, #12]
    a862:	601a      	str	r2, [r3, #0]
    }

    if (CAN_RX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    a864:	9b06      	ldr	r3, [sp, #24]
    a866:	699b      	ldr	r3, [r3, #24]
    a868:	2b00      	cmp	r3, #0
    a86a:	d10c      	bne.n	a886 <Can_Ipw_ParseData+0x4e>
    {
        /* Check if Mb Overrun */
        if ((uint32)(0x06000000U) == (pReceivedDataBuffer->cs & CAN_IPW_CS_CODE_MASK))
    a86c:	9b01      	ldr	r3, [sp, #4]
    a86e:	681b      	ldr	r3, [r3, #0]
    a870:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    a874:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    a878:	d105      	bne.n	a886 <Can_Ipw_ParseData+0x4e>
        {
            (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    a87a:	2301      	movs	r3, #1
    a87c:	2208      	movs	r2, #8
    a87e:	2100      	movs	r1, #0
    a880:	2050      	movs	r0, #80	; 0x50
    a882:	f00c fa2d 	bl	16ce0 <Det_ReportRuntimeError>
        }
    }

    /* when legacy fifo enabled, FD must be disabled */
    if (CAN_RX_LEGACY_FIFO != Can_pHwObjectConfig->Can_eReceiveType)
    a886:	9b06      	ldr	r3, [sp, #24]
    a888:	699b      	ldr	r3, [r3, #24]
    a88a:	2b01      	cmp	r3, #1
    a88c:	d009      	beq.n	a8a2 <Can_Ipw_ParseData+0x6a>
    {
        /*
        * [SWS_Can_00501] ⌈ CanDrv shall indicate whether the received message is a
        * conventional CAN frame or a CAN FD frame as described in Can_IdType.⌋
        */
        if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_EDL_MASK) != 0U)
    a88e:	9b01      	ldr	r3, [sp, #4]
    a890:	681b      	ldr	r3, [r3, #0]
    a892:	2b00      	cmp	r3, #0
    a894:	da05      	bge.n	a8a2 <Can_Ipw_ParseData+0x6a>
        {
            CanIf_Mailbox->CanId |= (uint32)0x40000000U;
    a896:	9b03      	ldr	r3, [sp, #12]
    a898:	681b      	ldr	r3, [r3, #0]
    a89a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a89e:	9b03      	ldr	r3, [sp, #12]
    a8a0:	601a      	str	r2, [r3, #0]
        }
    }

    if (Can_pHwObjectConfig->Can_u8PayloadLength <= pReceivedDataBuffer->dataLen)
    a8a2:	9b06      	ldr	r3, [sp, #24]
    a8a4:	7c1a      	ldrb	r2, [r3, #16]
    a8a6:	9b01      	ldr	r3, [sp, #4]
    a8a8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    a8ac:	429a      	cmp	r2, r3
    a8ae:	d805      	bhi.n	a8bc <Can_Ipw_ParseData+0x84>
    {
        CanIf_PduInfo->SduLength = Can_pHwObjectConfig->Can_u8PayloadLength;
    a8b0:	9b06      	ldr	r3, [sp, #24]
    a8b2:	7c1b      	ldrb	r3, [r3, #16]
    a8b4:	461a      	mov	r2, r3
    a8b6:	9b02      	ldr	r3, [sp, #8]
    a8b8:	609a      	str	r2, [r3, #8]
    a8ba:	e005      	b.n	a8c8 <Can_Ipw_ParseData+0x90>
    }
    else
    {
        CanIf_PduInfo->SduLength = pReceivedDataBuffer->dataLen;
    a8bc:	9b01      	ldr	r3, [sp, #4]
    a8be:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    a8c2:	461a      	mov	r2, r3
    a8c4:	9b02      	ldr	r3, [sp, #8]
    a8c6:	609a      	str	r2, [r3, #8]
                                                      CanIf_PduInfo->SduLength, \
                                                      &pReceivedDataBuffer->data[0]) \
                                                     )
    {
#endif
    CanIf_Mailbox->Hoh = Can_pHwObjectConfig->Can_HwObjectID;
    a8c8:	9b06      	ldr	r3, [sp, #24]
    a8ca:	881a      	ldrh	r2, [r3, #0]
    a8cc:	9b03      	ldr	r3, [sp, #12]
    a8ce:	809a      	strh	r2, [r3, #4]
    CanIf_Mailbox->ControllerId = Can_pControllerConfig->Can_u8AbstControllerID;
    a8d0:	9b00      	ldr	r3, [sp, #0]
    a8d2:	781a      	ldrb	r2, [r3, #0]
    a8d4:	9b03      	ldr	r3, [sp, #12]
    a8d6:	719a      	strb	r2, [r3, #6]
    CanIf_PduInfo->SduDataPtr = &pReceivedDataBuffer->data[0];
    a8d8:	9b01      	ldr	r3, [sp, #4]
    a8da:	f103 0208 	add.w	r2, r3, #8
    a8de:	9b02      	ldr	r3, [sp, #8]
    a8e0:	601a      	str	r2, [r3, #0]
    CanIf_RxIndication(CanIf_Mailbox, CanIf_PduInfo);
    a8e2:	9902      	ldr	r1, [sp, #8]
    a8e4:	9803      	ldr	r0, [sp, #12]
    a8e6:	f00c fb29 	bl	16f3c <CanIf_RxIndication>
#if (CAN_43_FLEXCAN_LPDU_CALLOUT_SUPPORT == STD_ON)
    }
#endif
}
    a8ea:	bf00      	nop
    a8ec:	b005      	add	sp, #20
    a8ee:	f85d fb04 	ldr.w	pc, [sp], #4

0000a8f2 <Can_Ipw_InitLegacyFifoFilter>:

static void Can_Ipw_InitLegacyFifoFilter(const Can_43_FLEXCAN_ControllerConfigType * Can_pController, const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject)
{
    a8f2:	b500      	push	{lr}
    a8f4:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
    a8f8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    a8fc:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    a900:	6018      	str	r0, [r3, #0]
    a902:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    a906:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    a90a:	6019      	str	r1, [r3, #0]
    uint8 u8FilterIdx=0U;
    a90c:	2300      	movs	r3, #0
    a90e:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    uint8 u8HwFilterCount = 0U;
    a912:	2300      	movs	r3, #0
    a914:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
    uint32 u32HwFilterMask = (uint32)0x00000000U;
    a918:	2300      	movs	r3, #0
    a91a:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    /* The max FIFO id filter affected by Rx individual masks*/
    uint8 u8FiFoFilterIndvCount = 0U;
    a91e:	2300      	movs	r3, #0
    a920:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    Flexcan_Ip_RxFifoIdElementFormatType eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    a924:	2300      	movs	r3, #0
    a926:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
    /* Need to alocate a filter array with elemnets no as defined in HwObject */
    Flexcan_Ip_IdTableType RxFifoFilters[128];

    if (((Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U) <= 32U)
    a92a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    a92e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    a932:	681b      	ldr	r3, [r3, #0]
    a934:	7c9b      	ldrb	r3, [r3, #18]
    a936:	089b      	lsrs	r3, r3, #2
    a938:	b2db      	uxtb	r3, r3
    a93a:	3306      	adds	r3, #6
    a93c:	2b20      	cmp	r3, #32
    a93e:	d80b      	bhi.n	a958 <Can_Ipw_InitLegacyFifoFilter+0x66>
    {
        u8FiFoFilterIndvCount = (Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U;
    a940:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    a944:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    a948:	681b      	ldr	r3, [r3, #0]
    a94a:	7c9b      	ldrb	r3, [r3, #18]
    a94c:	089b      	lsrs	r3, r3, #2
    a94e:	b2db      	uxtb	r3, r3
    a950:	3306      	adds	r3, #6
    a952:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    a956:	e002      	b.n	a95e <Can_Ipw_InitLegacyFifoFilter+0x6c>
    }
    else
    {
        u8FiFoFilterIndvCount = 32U;
    a958:	2320      	movs	r3, #32
    a95a:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    }
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    a95e:	2300      	movs	r3, #0
    a960:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    a964:	e169      	b.n	ac3a <Can_Ipw_InitLegacyFifoFilter+0x348>
    {
            if (CAN_LEGACY_FIFO_FORMAT_A == Can_pController->Can_eLegacyAcceptanceMode)
    a966:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    a96a:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    a96e:	681b      	ldr	r3, [r3, #0]
    a970:	691b      	ldr	r3, [r3, #16]
    a972:	2b00      	cmp	r3, #0
    a974:	d13a      	bne.n	a9ec <Can_Ipw_InitLegacyFifoFilter+0xfa>
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount;
    a976:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    a97a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    a97e:	681b      	ldr	r3, [r3, #0]
    a980:	7c9b      	ldrb	r3, [r3, #18]
    a982:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC0000000U;
    a986:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    a98a:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    a98e:	2300      	movs	r3, #0
    a990:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    a994:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    a998:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    a99c:	681b      	ldr	r3, [r3, #0]
    a99e:	689b      	ldr	r3, [r3, #8]
    a9a0:	2b00      	cmp	r3, #0
    a9a2:	d011      	beq.n	a9c8 <Can_Ipw_InitLegacyFifoFilter+0xd6>
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_EXT_SHIFT;
    a9a4:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    a9a8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    a9ac:	681b      	ldr	r3, [r3, #0]
    a9ae:	695a      	ldr	r2, [r3, #20]
    a9b0:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    a9b4:	00db      	lsls	r3, r3, #3
    a9b6:	4413      	add	r3, r2
    a9b8:	685b      	ldr	r3, [r3, #4]
    a9ba:	005b      	lsls	r3, r3, #1
    a9bc:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    a9c0:	4313      	orrs	r3, r2
    a9c2:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    a9c6:	e126      	b.n	ac16 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_STD_SHIFT;
    a9c8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    a9cc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    a9d0:	681b      	ldr	r3, [r3, #0]
    a9d2:	695a      	ldr	r2, [r3, #20]
    a9d4:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    a9d8:	00db      	lsls	r3, r3, #3
    a9da:	4413      	add	r3, r2
    a9dc:	685b      	ldr	r3, [r3, #4]
    a9de:	04db      	lsls	r3, r3, #19
    a9e0:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    a9e4:	4313      	orrs	r3, r2
    a9e6:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    a9ea:	e114      	b.n	ac16 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else if (CAN_LEGACY_FIFO_FORMAT_B == Can_pController->Can_eLegacyAcceptanceMode)
    a9ec:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    a9f0:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    a9f4:	681b      	ldr	r3, [r3, #0]
    a9f6:	691b      	ldr	r3, [r3, #16]
    a9f8:	2b01      	cmp	r3, #1
    a9fa:	d160      	bne.n	aabe <Can_Ipw_InitLegacyFifoFilter+0x1cc>
            {
                u8HwFilterCount = Can_pHwObject->Can_u8HwFilterCount * 2U ;
    a9fc:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa00:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aa04:	681b      	ldr	r3, [r3, #0]
    aa06:	7c9b      	ldrb	r3, [r3, #18]
    aa08:	005b      	lsls	r3, r3, #1
    aa0a:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC000C000U;
    aa0e:	f04f 23c0 	mov.w	r3, #3221274624	; 0xc000c000
    aa12:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_B;
    aa16:	2301      	movs	r3, #1
    aa18:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    aa1c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa20:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aa24:	681b      	ldr	r3, [r3, #0]
    aa26:	689b      	ldr	r3, [r3, #8]
    aa28:	2b00      	cmp	r3, #0
    aa2a:	d024      	beq.n	aa76 <Can_Ipw_InitLegacyFifoFilter+0x184>
                {
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT1;
    aa2c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa30:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aa34:	681b      	ldr	r3, [r3, #0]
    aa36:	695a      	ldr	r2, [r3, #20]
    aa38:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    aa3c:	011b      	lsls	r3, r3, #4
    aa3e:	4413      	add	r3, r2
    aa40:	685b      	ldr	r3, [r3, #4]
    aa42:	0bdb      	lsrs	r3, r3, #15
    aa44:	041b      	lsls	r3, r3, #16
    aa46:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    aa4a:	4313      	orrs	r3, r2
    aa4c:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT2;
    aa50:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa54:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aa58:	681b      	ldr	r3, [r3, #0]
    aa5a:	695a      	ldr	r2, [r3, #20]
    aa5c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    aa60:	011b      	lsls	r3, r3, #4
    aa62:	3308      	adds	r3, #8
    aa64:	4413      	add	r3, r2
    aa66:	685b      	ldr	r3, [r3, #4]
    aa68:	0bdb      	lsrs	r3, r3, #15
    aa6a:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    aa6e:	4313      	orrs	r3, r2
    aa70:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    aa74:	e0cf      	b.n	ac16 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT1;
    aa76:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa7a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aa7e:	681b      	ldr	r3, [r3, #0]
    aa80:	695a      	ldr	r2, [r3, #20]
    aa82:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    aa86:	011b      	lsls	r3, r3, #4
    aa88:	4413      	add	r3, r2
    aa8a:	685b      	ldr	r3, [r3, #4]
    aa8c:	04db      	lsls	r3, r3, #19
    aa8e:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    aa92:	4313      	orrs	r3, r2
    aa94:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT2;
    aa98:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aa9c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aaa0:	681b      	ldr	r3, [r3, #0]
    aaa2:	695a      	ldr	r2, [r3, #20]
    aaa4:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    aaa8:	011b      	lsls	r3, r3, #4
    aaaa:	3308      	adds	r3, #8
    aaac:	4413      	add	r3, r2
    aaae:	685b      	ldr	r3, [r3, #4]
    aab0:	00db      	lsls	r3, r3, #3
    aab2:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    aab6:	4313      	orrs	r3, r2
    aab8:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    aabc:	e0ab      	b.n	ac16 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else /*CAN_LEGACY_FIFO_FORMAT_C == Can_pController->Can_eLegacyAcceptanceMode */
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount * 4U ;
    aabe:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aac2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aac6:	681b      	ldr	r3, [r3, #0]
    aac8:	7c9b      	ldrb	r3, [r3, #18]
    aaca:	009b      	lsls	r3, r3, #2
    aacc:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0x00000000U;
    aad0:	2300      	movs	r3, #0
    aad2:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_C;
    aad6:	2302      	movs	r3, #2
    aad8:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    aadc:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aae0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aae4:	681b      	ldr	r3, [r3, #0]
    aae6:	689b      	ldr	r3, [r3, #8]
    aae8:	2b00      	cmp	r3, #0
    aaea:	d04a      	beq.n	ab82 <Can_Ipw_InitLegacyFifoFilter+0x290>
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    aaec:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    aaf0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    aaf4:	681b      	ldr	r3, [r3, #0]
    aaf6:	695a      	ldr	r2, [r3, #20]
    aaf8:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    aafc:	015b      	lsls	r3, r3, #5
    aafe:	4413      	add	r3, r2
    ab00:	685b      	ldr	r3, [r3, #4]
    ab02:	0d5b      	lsrs	r3, r3, #21
    ab04:	061b      	lsls	r3, r3, #24
    ab06:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ab0a:	4313      	orrs	r3, r2
    ab0c:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    ab10:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab14:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab18:	681b      	ldr	r3, [r3, #0]
    ab1a:	695a      	ldr	r2, [r3, #20]
    ab1c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ab20:	015b      	lsls	r3, r3, #5
    ab22:	3308      	adds	r3, #8
    ab24:	4413      	add	r3, r2
    ab26:	685b      	ldr	r3, [r3, #4]
    ab28:	0d5b      	lsrs	r3, r3, #21
    ab2a:	041b      	lsls	r3, r3, #16
    ab2c:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ab30:	4313      	orrs	r3, r2
    ab32:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    ab36:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab3a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab3e:	681b      	ldr	r3, [r3, #0]
    ab40:	695a      	ldr	r2, [r3, #20]
    ab42:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ab46:	015b      	lsls	r3, r3, #5
    ab48:	3310      	adds	r3, #16
    ab4a:	4413      	add	r3, r2
    ab4c:	685b      	ldr	r3, [r3, #4]
    ab4e:	0d5b      	lsrs	r3, r3, #21
    ab50:	021b      	lsls	r3, r3, #8
    ab52:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ab56:	4313      	orrs	r3, r2
    ab58:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    ab5c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab60:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab64:	681b      	ldr	r3, [r3, #0]
    ab66:	695a      	ldr	r2, [r3, #20]
    ab68:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ab6c:	015b      	lsls	r3, r3, #5
    ab6e:	3318      	adds	r3, #24
    ab70:	4413      	add	r3, r2
    ab72:	685b      	ldr	r3, [r3, #4]
    ab74:	0d5b      	lsrs	r3, r3, #21
    ab76:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ab7a:	4313      	orrs	r3, r2
    ab7c:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    ab80:	e049      	b.n	ac16 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    ab82:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ab86:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ab8a:	681b      	ldr	r3, [r3, #0]
    ab8c:	695a      	ldr	r2, [r3, #20]
    ab8e:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ab92:	015b      	lsls	r3, r3, #5
    ab94:	4413      	add	r3, r2
    ab96:	685b      	ldr	r3, [r3, #4]
    ab98:	08db      	lsrs	r3, r3, #3
    ab9a:	061b      	lsls	r3, r3, #24
    ab9c:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    aba0:	4313      	orrs	r3, r2
    aba2:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    aba6:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    abaa:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    abae:	681b      	ldr	r3, [r3, #0]
    abb0:	695a      	ldr	r2, [r3, #20]
    abb2:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    abb6:	015b      	lsls	r3, r3, #5
    abb8:	3308      	adds	r3, #8
    abba:	4413      	add	r3, r2
    abbc:	685b      	ldr	r3, [r3, #4]
    abbe:	08db      	lsrs	r3, r3, #3
    abc0:	041b      	lsls	r3, r3, #16
    abc2:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    abc6:	4313      	orrs	r3, r2
    abc8:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    abcc:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    abd0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    abd4:	681b      	ldr	r3, [r3, #0]
    abd6:	695a      	ldr	r2, [r3, #20]
    abd8:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    abdc:	015b      	lsls	r3, r3, #5
    abde:	3310      	adds	r3, #16
    abe0:	4413      	add	r3, r2
    abe2:	685b      	ldr	r3, [r3, #4]
    abe4:	08db      	lsrs	r3, r3, #3
    abe6:	021b      	lsls	r3, r3, #8
    abe8:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    abec:	4313      	orrs	r3, r2
    abee:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    abf2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    abf6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    abfa:	681b      	ldr	r3, [r3, #0]
    abfc:	695a      	ldr	r2, [r3, #20]
    abfe:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ac02:	015b      	lsls	r3, r3, #5
    ac04:	3318      	adds	r3, #24
    ac06:	4413      	add	r3, r2
    ac08:	685b      	ldr	r3, [r3, #4]
    ac0a:	08db      	lsrs	r3, r3, #3
    ac0c:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ac10:	4313      	orrs	r3, r2
    ac12:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                }
            }
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, u8FilterIdx, u32HwFilterMask);
    ac16:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ac1a:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    ac1e:	681b      	ldr	r3, [r3, #0]
    ac20:	789b      	ldrb	r3, [r3, #2]
    ac22:	f89d 1417 	ldrb.w	r1, [sp, #1047]	; 0x417
    ac26:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    ac2a:	4618      	mov	r0, r3
    ac2c:	f002 fd22 	bl	d674 <FlexCAN_Ip_SetRxIndividualMask_Privileged>
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    ac30:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ac34:	3301      	adds	r3, #1
    ac36:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    ac3a:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    ac3e:	f89d 340f 	ldrb.w	r3, [sp, #1039]	; 0x40f
    ac42:	429a      	cmp	r2, r3
    ac44:	d20a      	bcs.n	ac5c <Can_Ipw_InitLegacyFifoFilter+0x36a>
    ac46:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ac4a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ac4e:	681b      	ldr	r3, [r3, #0]
    ac50:	7c9b      	ldrb	r3, [r3, #18]
    ac52:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    ac56:	429a      	cmp	r2, r3
    ac58:	f4ff ae85 	bcc.w	a966 <Can_Ipw_InitLegacyFifoFilter+0x74>
    }

    (void)FlexCAN_Ip_SetRxFifoGlobalMask(Can_pController->Can_u8ControllerOffset, Can_pController->Can_u32LegacyGlobalMask);
    ac5c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ac60:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    ac64:	681b      	ldr	r3, [r3, #0]
    ac66:	789a      	ldrb	r2, [r3, #2]
    ac68:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ac6c:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    ac70:	681b      	ldr	r3, [r3, #0]
    ac72:	68db      	ldr	r3, [r3, #12]
    ac74:	4619      	mov	r1, r3
    ac76:	4610      	mov	r0, r2
    ac78:	f002 fd4a 	bl	d710 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>
    
    if (u8HwFilterCount != 0U)
    ac7c:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    ac80:	2b00      	cmp	r3, #0
    ac82:	d054      	beq.n	ad2e <Can_Ipw_InitLegacyFifoFilter+0x43c>
    {
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    ac84:	2300      	movs	r3, #0
    ac86:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    ac8a:	e03e      	b.n	ad0a <Can_Ipw_InitLegacyFifoFilter+0x418>
        {
            RxFifoFilters[u8FilterIdx].id = Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterCode;
    ac8c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ac90:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    ac94:	681b      	ldr	r3, [r3, #0]
    ac96:	695a      	ldr	r2, [r3, #20]
    ac98:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ac9c:	00db      	lsls	r3, r3, #3
    ac9e:	441a      	add	r2, r3
    aca0:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    aca4:	6812      	ldr	r2, [r2, #0]
    aca6:	f50d 6183 	add.w	r1, sp, #1048	; 0x418
    acaa:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
    acae:	00db      	lsls	r3, r3, #3
    acb0:	440b      	add	r3, r1
    acb2:	605a      	str	r2, [r3, #4]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    acb4:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    acb8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    acbc:	681b      	ldr	r3, [r3, #0]
    acbe:	689b      	ldr	r3, [r3, #8]
    acc0:	2b00      	cmp	r3, #0
    acc2:	d00a      	beq.n	acda <Can_Ipw_InitLegacyFifoFilter+0x3e8>
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = TRUE;
    acc4:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    acc8:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    accc:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    acd0:	00db      	lsls	r3, r3, #3
    acd2:	4413      	add	r3, r2
    acd4:	2201      	movs	r2, #1
    acd6:	705a      	strb	r2, [r3, #1]
    acd8:	e009      	b.n	acee <Can_Ipw_InitLegacyFifoFilter+0x3fc>
            }
            else
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = FALSE;
    acda:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    acde:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    ace2:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    ace6:	00db      	lsls	r3, r3, #3
    ace8:	4413      	add	r3, r2
    acea:	2200      	movs	r2, #0
    acec:	705a      	strb	r2, [r3, #1]
            }
            RxFifoFilters[u8FilterIdx].isRemoteFrame = FALSE;
    acee:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    acf2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    acf6:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
    acfa:	2100      	movs	r1, #0
    acfc:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    ad00:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    ad04:	3301      	adds	r3, #1
    ad06:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    ad0a:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    ad0e:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    ad12:	429a      	cmp	r2, r3
    ad14:	d3ba      	bcc.n	ac8c <Can_Ipw_InitLegacyFifoFilter+0x39a>
        }

        (void)FlexCAN_Ip_ConfigRxFifo(Can_pController->Can_u8ControllerOffset, eElementFormat, RxFifoFilters);
    ad16:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    ad1a:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    ad1e:	681b      	ldr	r3, [r3, #0]
    ad20:	789b      	ldrb	r3, [r3, #2]
    ad22:	aa02      	add	r2, sp, #8
    ad24:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    ad28:	4618      	mov	r0, r3
    ad2a:	f002 f886 	bl	ce3a <FlexCAN_Ip_ConfigRxFifo_Privileged>
    }
    
}
    ad2e:	bf00      	nop
    ad30:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    ad34:	f85d fb04 	ldr.w	pc, [sp], #4

0000ad38 <Can_Ipw_InitBaudrate>:

#endif /* (CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON) */

/* Init baudrate for controller */
static void Can_Ipw_InitBaudrate(const Can_43_FLEXCAN_ControllerConfigType * ControllerConfig)
{
    ad38:	b510      	push	{r4, lr}
    ad3a:	b084      	sub	sp, #16
    ad3c:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
    uint16 BaudRateConfigID = Can_au16ControllerBaudRateSel[ControllerConfig->Can_u8ControllerID];
#else
    uint16 BaudRateConfigID = ControllerConfig->Can_u16DefaultBaudrateID;
    ad3e:	9b01      	ldr	r3, [sp, #4]
    ad40:	8b9b      	ldrh	r3, [r3, #28]
    ad42:	f8ad 300e 	strh.w	r3, [sp, #14]
        FlexCANTimeSeg.phaseSeg1  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg1;
        FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg2;
        FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8ResyncJumpWidth;
        (void)FlexCAN_Ip_SetBitrate(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, FALSE);
#endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
        if (TRUE == ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bFDFrame)
    ad46:	9b01      	ldr	r3, [sp, #4]
    ad48:	6a1a      	ldr	r2, [r3, #32]
    ad4a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ad4e:	2116      	movs	r1, #22
    ad50:	fb01 f303 	mul.w	r3, r1, r3
    ad54:	4413      	add	r3, r2
    ad56:	785b      	ldrb	r3, [r3, #1]
    ad58:	2b00      	cmp	r3, #0
    ad5a:	d016      	beq.n	ad8a <Can_Ipw_InitBaudrate+0x52>
            FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg2;
            FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8ResyncJumpWidth;

            (void)FlexCAN_Ip_SetBitrateCbt(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bBitRateSwitch);
    #endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
            (void)FlexCAN_Ip_SetTDCOffset(ControllerConfig->Can_u8ControllerOffset, \
    ad5c:	9b01      	ldr	r3, [sp, #4]
    ad5e:	7898      	ldrb	r0, [r3, #2]
    ad60:	9b01      	ldr	r3, [sp, #4]
    ad62:	6a1a      	ldr	r2, [r3, #32]
    ad64:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ad68:	2116      	movs	r1, #22
    ad6a:	fb01 f303 	mul.w	r3, r1, r3
    ad6e:	4413      	add	r3, r2
    ad70:	7cd9      	ldrb	r1, [r3, #19]
    ad72:	9b01      	ldr	r3, [sp, #4]
    ad74:	6a1a      	ldr	r2, [r3, #32]
    ad76:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ad7a:	2416      	movs	r4, #22
    ad7c:	fb04 f303 	mul.w	r3, r4, r3
    ad80:	4413      	add	r3, r2
    ad82:	7d1b      	ldrb	r3, [r3, #20]
    ad84:	461a      	mov	r2, r3
    ad86:	f003 f83d 	bl	de04 <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bTrcvDelayEnable, \
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(ControllerConfig->Can_u8ControllerOffset, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TxArbitrationStartDelay);
    ad8a:	9b01      	ldr	r3, [sp, #4]
    ad8c:	7898      	ldrb	r0, [r3, #2]
    ad8e:	9b01      	ldr	r3, [sp, #4]
    ad90:	6a1a      	ldr	r2, [r3, #32]
    ad92:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ad96:	2116      	movs	r1, #22
    ad98:	fb01 f303 	mul.w	r3, r1, r3
    ad9c:	4413      	add	r3, r2
    ad9e:	7c9b      	ldrb	r3, [r3, #18]
    ada0:	4619      	mov	r1, r3
    ada2:	f003 f883 	bl	deac <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
}
    ada6:	bf00      	nop
    ada8:	b004      	add	sp, #16
    adaa:	bd10      	pop	{r4, pc}

0000adac <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    adac:	b500      	push	{lr}
    adae:	b087      	sub	sp, #28
    adb0:	9003      	str	r0, [sp, #12]
    adb2:	9102      	str	r1, [sp, #8]
    adb4:	4613      	mov	r3, r2
    adb6:	f88d 3007 	strb.w	r3, [sp, #7]
        Can_HwHandleType u8HwObjectID = 0U;
    adba:	2300      	movs	r3, #0
    adbc:	f8ad 3016 	strh.w	r3, [sp, #22]

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    adc0:	9b03      	ldr	r3, [sp, #12]
    adc2:	785b      	ldrb	r3, [r3, #1]
    adc4:	461a      	mov	r2, r3
    adc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    adca:	491c      	ldr	r1, [pc, #112]	; (ae3c <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x90>)
    adcc:	0152      	lsls	r2, r2, #5
    adce:	4413      	add	r3, r2
    add0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    add4:	f8ad 3016 	strh.w	r3, [sp, #22]
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    add8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    addc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ade0:	4293      	cmp	r3, r2
    ade2:	d027      	beq.n	ae34 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
    ade4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    ade8:	4613      	mov	r3, r2
    adea:	00db      	lsls	r3, r3, #3
    adec:	4413      	add	r3, r2
    adee:	009b      	lsls	r3, r3, #2
    adf0:	461a      	mov	r2, r3
    adf2:	9b02      	ldr	r3, [sp, #8]
    adf4:	4413      	add	r3, r2
    adf6:	7b1b      	ldrb	r3, [r3, #12]
    adf8:	f083 0301 	eor.w	r3, r3, #1
    adfc:	b2db      	uxtb	r3, r3
    adfe:	2b00      	cmp	r3, #0
    ae00:	d018      	beq.n	ae34 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
        {
            if (CAN_TX_NORMAL == Can_pHwObjectConfig[u8HwObjectID].Can_eReceiveType)
    ae02:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    ae06:	4613      	mov	r3, r2
    ae08:	00db      	lsls	r3, r3, #3
    ae0a:	4413      	add	r3, r2
    ae0c:	009b      	lsls	r3, r3, #2
    ae0e:	461a      	mov	r2, r3
    ae10:	9b02      	ldr	r3, [sp, #8]
    ae12:	4413      	add	r3, r2
    ae14:	699b      	ldr	r3, [r3, #24]
    ae16:	2b03      	cmp	r3, #3
    ae18:	d10c      	bne.n	ae34 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
            {
                CanIf_TxConfirmation(Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx]);
    ae1a:	9b03      	ldr	r3, [sp, #12]
    ae1c:	785b      	ldrb	r3, [r3, #1]
    ae1e:	461a      	mov	r2, r3
    ae20:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae24:	4906      	ldr	r1, [pc, #24]	; (ae40 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x94>)
    ae26:	0152      	lsls	r2, r2, #5
    ae28:	4413      	add	r3, r2
    ae2a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    ae2e:	4618      	mov	r0, r3
    ae30:	f00c f850 	bl	16ed4 <CanIf_TxConfirmation>
            }
        }
    }
    ae34:	bf00      	nop
    ae36:	b007      	add	sp, #28
    ae38:	f85d fb04 	ldr.w	pc, [sp], #4
    ae3c:	1fff92d8 	.word	0x1fff92d8
    ae40:	1fff9258 	.word	0x1fff9258

0000ae44 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    ae44:	b500      	push	{lr}
    ae46:	b08f      	sub	sp, #60	; 0x3c
    ae48:	9005      	str	r0, [sp, #20]
    ae4a:	9104      	str	r1, [sp, #16]
    ae4c:	4613      	mov	r3, r2
    ae4e:	f88d 300f 	strb.w	r3, [sp, #15]
        Can_HwHandleType u8HwObjectID = 0U;
    ae52:	2300      	movs	r3, #0
    ae54:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        Can_HwType CanIf_Mailbox;
        PduInfoType CanIf_PduInfo;
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    ae58:	2300      	movs	r3, #0
    ae5a:	930c      	str	r3, [sp, #48]	; 0x30
        Flexcan_Ip_MsgBuffType * pReceivedDataBuffer = NULL_PTR;
    ae5c:	2300      	movs	r3, #0
    ae5e:	930b      	str	r3, [sp, #44]	; 0x2c

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    ae60:	9b05      	ldr	r3, [sp, #20]
    ae62:	785b      	ldrb	r3, [r3, #1]
    ae64:	461a      	mov	r2, r3
    ae66:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ae6a:	4944      	ldr	r1, [pc, #272]	; (af7c <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x138>)
    ae6c:	0152      	lsls	r2, r2, #5
    ae6e:	4413      	add	r3, r2
    ae70:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    ae74:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    ae78:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    ae7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ae80:	4293      	cmp	r3, r2
    ae82:	d076      	beq.n	af72 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
    ae84:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    ae88:	4613      	mov	r3, r2
    ae8a:	00db      	lsls	r3, r3, #3
    ae8c:	4413      	add	r3, r2
    ae8e:	009b      	lsls	r3, r3, #2
    ae90:	461a      	mov	r2, r3
    ae92:	9b04      	ldr	r3, [sp, #16]
    ae94:	4413      	add	r3, r2
    ae96:	7b1b      	ldrb	r3, [r3, #12]
    ae98:	f083 0301 	eor.w	r3, r3, #1
    ae9c:	b2db      	uxtb	r3, r3
    ae9e:	2b00      	cmp	r3, #0
    aea0:	d067      	beq.n	af72 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
        {
            Can_pHwObject = &Can_pHwObjectConfig[u8HwObjectID];
    aea2:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    aea6:	4613      	mov	r3, r2
    aea8:	00db      	lsls	r3, r3, #3
    aeaa:	4413      	add	r3, r2
    aeac:	009b      	lsls	r3, r3, #2
    aeae:	461a      	mov	r2, r3
    aeb0:	9b04      	ldr	r3, [sp, #16]
    aeb2:	4413      	add	r3, r2
    aeb4:	930c      	str	r3, [sp, #48]	; 0x30

            if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    aeb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    aeb8:	699b      	ldr	r3, [r3, #24]
    aeba:	2b00      	cmp	r3, #0
    aebc:	d11d      	bne.n	aefa <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xb6>
            {
                pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    aebe:	9b05      	ldr	r3, [sp, #20]
    aec0:	785b      	ldrb	r3, [r3, #1]
    aec2:	461a      	mov	r2, r3
    aec4:	4b2e      	ldr	r3, [pc, #184]	; (af80 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x13c>)
    aec6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    aeca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    aecc:	7f1b      	ldrb	r3, [r3, #28]
    aece:	011b      	lsls	r3, r3, #4
    aed0:	4413      	add	r3, r2
    aed2:	681b      	ldr	r3, [r3, #0]
    aed4:	930b      	str	r3, [sp, #44]	; 0x2c
                Can_Ipw_ParseData(&CanIf_Mailbox, \
    aed6:	a906      	add	r1, sp, #24
    aed8:	a809      	add	r0, sp, #36	; 0x24
    aeda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    aedc:	9300      	str	r3, [sp, #0]
    aede:	9b05      	ldr	r3, [sp, #20]
    aee0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    aee2:	f7ff fca9 	bl	a838 <Can_Ipw_ParseData>
                                  pReceivedDataBuffer, \
                                  Can_pControllerConfig, \
                                  Can_pHwObject \
                                 );
                /* ready to receive in next time */
                (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    aee6:	9b05      	ldr	r3, [sp, #20]
    aee8:	7898      	ldrb	r0, [r3, #2]
    aeea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    aeec:	7f19      	ldrb	r1, [r3, #28]
    aeee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    aef0:	7b1b      	ldrb	r3, [r3, #12]
    aef2:	2200      	movs	r2, #0
    aef4:	f001 fe70 	bl	cbd8 <FlexCAN_Ip_Receive>
            else
            {
                /* prevent misra */
            }
        }
    }
    aef8:	e03b      	b.n	af72 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
            else if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    aefa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    aefc:	699b      	ldr	r3, [r3, #24]
    aefe:	2b01      	cmp	r3, #1
    af00:	d137      	bne.n	af72 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                if ((uint8)7U == u8MbIdx)
    af02:	f89d 300f 	ldrb.w	r3, [sp, #15]
    af06:	2b07      	cmp	r3, #7
    af08:	d10d      	bne.n	af26 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xe2>
                    (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    af0a:	2301      	movs	r3, #1
    af0c:	2208      	movs	r2, #8
    af0e:	2100      	movs	r1, #0
    af10:	2050      	movs	r0, #80	; 0x50
    af12:	f00b fee5 	bl	16ce0 <Det_ReportRuntimeError>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoOvfNotif)
    af16:	9b05      	ldr	r3, [sp, #20]
    af18:	699b      	ldr	r3, [r3, #24]
    af1a:	2b00      	cmp	r3, #0
    af1c:	d029      	beq.n	af72 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                        Can_pControllerConfig->Can_pLegacyFiFoOvfNotif();
    af1e:	9b05      	ldr	r3, [sp, #20]
    af20:	699b      	ldr	r3, [r3, #24]
    af22:	4798      	blx	r3
    }
    af24:	e025      	b.n	af72 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                else if ((uint8)6U == u8MbIdx)
    af26:	f89d 300f 	ldrb.w	r3, [sp, #15]
    af2a:	2b06      	cmp	r3, #6
    af2c:	d107      	bne.n	af3e <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xfa>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoWarnNotif)
    af2e:	9b05      	ldr	r3, [sp, #20]
    af30:	695b      	ldr	r3, [r3, #20]
    af32:	2b00      	cmp	r3, #0
    af34:	d01d      	beq.n	af72 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                        Can_pControllerConfig->Can_pLegacyFiFoWarnNotif();
    af36:	9b05      	ldr	r3, [sp, #20]
    af38:	695b      	ldr	r3, [r3, #20]
    af3a:	4798      	blx	r3
    }
    af3c:	e019      	b.n	af72 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x12e>
                    pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    af3e:	9b05      	ldr	r3, [sp, #20]
    af40:	785b      	ldrb	r3, [r3, #1]
    af42:	461a      	mov	r2, r3
    af44:	4b0e      	ldr	r3, [pc, #56]	; (af80 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x13c>)
    af46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    af4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    af4c:	7f1b      	ldrb	r3, [r3, #28]
    af4e:	011b      	lsls	r3, r3, #4
    af50:	4413      	add	r3, r2
    af52:	681b      	ldr	r3, [r3, #0]
    af54:	930b      	str	r3, [sp, #44]	; 0x2c
                    Can_Ipw_ParseData(&CanIf_Mailbox, \
    af56:	a906      	add	r1, sp, #24
    af58:	a809      	add	r0, sp, #36	; 0x24
    af5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    af5c:	9300      	str	r3, [sp, #0]
    af5e:	9b05      	ldr	r3, [sp, #20]
    af60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    af62:	f7ff fc69 	bl	a838 <Can_Ipw_ParseData>
                    (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    af66:	9b05      	ldr	r3, [sp, #20]
    af68:	789b      	ldrb	r3, [r3, #2]
    af6a:	2100      	movs	r1, #0
    af6c:	4618      	mov	r0, r3
    af6e:	f001 ff31 	bl	cdd4 <FlexCAN_Ip_RxFifo>
    }
    af72:	bf00      	nop
    af74:	b00f      	add	sp, #60	; 0x3c
    af76:	f85d fb04 	ldr.w	pc, [sp], #4
    af7a:	bf00      	nop
    af7c:	1fff92d8 	.word	0x1fff92d8
    af80:	000184dc 	.word	0x000184dc

0000af84 <Can_43_FLEXCAN_Ipw_Init>:
#endif /* (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON) */
/*==================================================================================================
*                                       GLOBAL FUNCTIONS
==================================================================================================*/
Std_ReturnType Can_43_FLEXCAN_Ipw_Init(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    af84:	b510      	push	{r4, lr}
    af86:	b084      	sub	sp, #16
    af88:	9001      	str	r0, [sp, #4]
    Std_ReturnType eRetVal = (Std_ReturnType)FLEXCAN_STATUS_ERROR;
    af8a:	2301      	movs	r3, #1
    af8c:	f88d 300c 	strb.w	r3, [sp, #12]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    /* The Index of Hoh in a group that refer to a controller */
    uint8 u8HwObjRefIdx = 0U;
    af90:	2300      	movs	r3, #0
    af92:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ObjIdx = 0U;
    af96:	2300      	movs	r3, #0
    af98:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    af9c:	2300      	movs	r3, #0
    af9e:	9302      	str	r3, [sp, #8]
    uint8 u8HwBufferCount = 0U;
    afa0:	2300      	movs	r3, #0
    afa2:	f88d 300d 	strb.w	r3, [sp, #13]
    {
        Can_Ipw_u32Seconds = 0U;
    }
#endif
    /* @violates @ref Can_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    eRetVal = (Std_ReturnType)Call_Can_FlexCan_Init(Can_pControllerConfig->Can_u8ControllerOffset, Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);
    afa6:	9b01      	ldr	r3, [sp, #4]
    afa8:	7898      	ldrb	r0, [r3, #2]
    afaa:	9b01      	ldr	r3, [sp, #4]
    afac:	785b      	ldrb	r3, [r3, #1]
    afae:	461a      	mov	r2, r3
    afb0:	4b77      	ldr	r3, [pc, #476]	; (b190 <Can_43_FLEXCAN_Ipw_Init+0x20c>)
    afb2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    afb6:	9b01      	ldr	r3, [sp, #4]
    afb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    afba:	681b      	ldr	r3, [r3, #0]
    afbc:	461a      	mov	r2, r3
    afbe:	f001 fcff 	bl	c9c0 <FlexCAN_Ip_Init_Privileged>
    afc2:	4603      	mov	r3, r0
    afc4:	f88d 300c 	strb.w	r3, [sp, #12]
    
    /* by defaut, enable interrupt when setcontroller to start */
    Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    afc8:	9b01      	ldr	r3, [sp, #4]
    afca:	785b      	ldrb	r3, [r3, #1]
    afcc:	461a      	mov	r2, r3
    afce:	4b71      	ldr	r3, [pc, #452]	; (b194 <Can_43_FLEXCAN_Ipw_Init+0x210>)
    afd0:	2101      	movs	r1, #1
    afd2:	5499      	strb	r1, [r3, r2]
    if ((Std_ReturnType)FLEXCAN_STATUS_SUCCESS == eRetVal)
    afd4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    afd8:	2b00      	cmp	r3, #0
    afda:	d13b      	bne.n	b054 <Can_43_FLEXCAN_Ipw_Init+0xd0>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    afdc:	9b01      	ldr	r3, [sp, #4]
    afde:	789b      	ldrb	r3, [r3, #2]
    afe0:	4618      	mov	r0, r3
    afe2:	f003 f821 	bl	e028 <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* If the FlexCAN_Init retuns SUCCESS then the module is already in freezemode, and FlexCAN_Ip_SetTDCOffset and FlexCAN_Ip_SetTxArbitrationStartDelay will always retun success */
        if (Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bFDFrame)
    afe6:	9b01      	ldr	r3, [sp, #4]
    afe8:	6a1a      	ldr	r2, [r3, #32]
    afea:	9b01      	ldr	r3, [sp, #4]
    afec:	8b9b      	ldrh	r3, [r3, #28]
    afee:	4619      	mov	r1, r3
    aff0:	2316      	movs	r3, #22
    aff2:	fb01 f303 	mul.w	r3, r1, r3
    aff6:	4413      	add	r3, r2
    aff8:	785b      	ldrb	r3, [r3, #1]
    affa:	2b00      	cmp	r3, #0
    affc:	d018      	beq.n	b030 <Can_43_FLEXCAN_Ipw_Init+0xac>
        {
            (void)FlexCAN_Ip_SetTDCOffset(Can_pControllerConfig->Can_u8ControllerOffset, \
    affe:	9b01      	ldr	r3, [sp, #4]
    b000:	7898      	ldrb	r0, [r3, #2]
    b002:	9b01      	ldr	r3, [sp, #4]
    b004:	6a1a      	ldr	r2, [r3, #32]
    b006:	9b01      	ldr	r3, [sp, #4]
    b008:	8b9b      	ldrh	r3, [r3, #28]
    b00a:	4619      	mov	r1, r3
    b00c:	2316      	movs	r3, #22
    b00e:	fb01 f303 	mul.w	r3, r1, r3
    b012:	4413      	add	r3, r2
    b014:	7cd9      	ldrb	r1, [r3, #19]
    b016:	9b01      	ldr	r3, [sp, #4]
    b018:	6a1a      	ldr	r2, [r3, #32]
    b01a:	9b01      	ldr	r3, [sp, #4]
    b01c:	8b9b      	ldrh	r3, [r3, #28]
    b01e:	461c      	mov	r4, r3
    b020:	2316      	movs	r3, #22
    b022:	fb04 f303 	mul.w	r3, r4, r3
    b026:	4413      	add	r3, r2
    b028:	7d1b      	ldrb	r3, [r3, #20]
    b02a:	461a      	mov	r2, r3
    b02c:	f002 feea 	bl	de04 <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bTrcvDelayEnable, \
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(Can_pControllerConfig->Can_u8ControllerOffset, \
    b030:	9b01      	ldr	r3, [sp, #4]
    b032:	7898      	ldrb	r0, [r3, #2]
    b034:	9b01      	ldr	r3, [sp, #4]
    b036:	6a1a      	ldr	r2, [r3, #32]
    b038:	9b01      	ldr	r3, [sp, #4]
    b03a:	8b9b      	ldrh	r3, [r3, #28]
    b03c:	4619      	mov	r1, r3
    b03e:	2316      	movs	r3, #22
    b040:	fb01 f303 	mul.w	r3, r1, r3
    b044:	4413      	add	r3, r2
    b046:	7c9b      	ldrb	r3, [r3, #18]
    b048:	4619      	mov	r1, r3
    b04a:	f002 ff2f 	bl	deac <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
                                                    Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TxArbitrationStartDelay);
        
        /* Init all Rx objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    b04e:	9801      	ldr	r0, [sp, #4]
    b050:	f000 fb0a 	bl	b668 <Can_Ipw_InitRx>
    }

#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    b054:	2300      	movs	r3, #0
    b056:	f88d 300d 	strb.w	r3, [sp, #13]
    b05a:	e010      	b.n	b07e <Can_43_FLEXCAN_Ipw_Init+0xfa>
    {
        Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8HwBufferCount] = CAN_43_FLEXCAN_HWOBJ_UNMAPPED;
    b05c:	9b01      	ldr	r3, [sp, #4]
    b05e:	785b      	ldrb	r3, [r3, #1]
    b060:	461a      	mov	r2, r3
    b062:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b066:	494c      	ldr	r1, [pc, #304]	; (b198 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b068:	0152      	lsls	r2, r2, #5
    b06a:	4413      	add	r3, r2
    b06c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    b070:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    b074:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b078:	3301      	adds	r3, #1
    b07a:	f88d 300d 	strb.w	r3, [sp, #13]
    b07e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b082:	2b1f      	cmp	r3, #31
    b084:	d9ea      	bls.n	b05c <Can_43_FLEXCAN_Ipw_Init+0xd8>
    }
    /* Map MB index to hardware object ID */
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b086:	2300      	movs	r3, #0
    b088:	f88d 300f 	strb.w	r3, [sp, #15]
    b08c:	e06b      	b.n	b166 <Can_43_FLEXCAN_Ipw_Init+0x1e2>
    {
        Can_pHwObject = Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    b08e:	9b01      	ldr	r3, [sp, #4]
    b090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b092:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b096:	009b      	lsls	r3, r3, #2
    b098:	4413      	add	r3, r2
    b09a:	681b      	ldr	r3, [r3, #0]
    b09c:	9302      	str	r3, [sp, #8]
        switch (Can_pHwObject->Can_eReceiveType)
    b09e:	9b02      	ldr	r3, [sp, #8]
    b0a0:	699b      	ldr	r3, [r3, #24]
    b0a2:	2b03      	cmp	r3, #3
    b0a4:	d006      	beq.n	b0b4 <Can_43_FLEXCAN_Ipw_Init+0x130>
    b0a6:	2b03      	cmp	r3, #3
    b0a8:	d857      	bhi.n	b15a <Can_43_FLEXCAN_Ipw_Init+0x1d6>
    b0aa:	2b00      	cmp	r3, #0
    b0ac:	d023      	beq.n	b0f6 <Can_43_FLEXCAN_Ipw_Init+0x172>
    b0ae:	2b01      	cmp	r3, #1
    b0b0:	d02f      	beq.n	b112 <Can_43_FLEXCAN_Ipw_Init+0x18e>
                break;
            }
            default:
            {
                /* don't map for enhance fifo object because of out of message buffer memory */
                break;
    b0b2:	e052      	b.n	b15a <Can_43_FLEXCAN_Ipw_Init+0x1d6>
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    b0b4:	2300      	movs	r3, #0
    b0b6:	f88d 300e 	strb.w	r3, [sp, #14]
    b0ba:	e015      	b.n	b0e8 <Can_43_FLEXCAN_Ipw_Init+0x164>
                    Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex + u8ObjIdx] = Can_pHwObject->Can_HwObjectID;
    b0bc:	9b01      	ldr	r3, [sp, #4]
    b0be:	785b      	ldrb	r3, [r3, #1]
    b0c0:	461c      	mov	r4, r3
    b0c2:	9b02      	ldr	r3, [sp, #8]
    b0c4:	7f1b      	ldrb	r3, [r3, #28]
    b0c6:	461a      	mov	r2, r3
    b0c8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b0cc:	4413      	add	r3, r2
    b0ce:	9a02      	ldr	r2, [sp, #8]
    b0d0:	8810      	ldrh	r0, [r2, #0]
    b0d2:	4931      	ldr	r1, [pc, #196]	; (b198 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b0d4:	0162      	lsls	r2, r4, #5
    b0d6:	4413      	add	r3, r2
    b0d8:	4602      	mov	r2, r0
    b0da:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    b0de:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b0e2:	3301      	adds	r3, #1
    b0e4:	f88d 300e 	strb.w	r3, [sp, #14]
    b0e8:	9b02      	ldr	r3, [sp, #8]
    b0ea:	7b9b      	ldrb	r3, [r3, #14]
    b0ec:	f89d 200e 	ldrb.w	r2, [sp, #14]
    b0f0:	429a      	cmp	r2, r3
    b0f2:	d3e3      	bcc.n	b0bc <Can_43_FLEXCAN_Ipw_Init+0x138>
                break;
    b0f4:	e032      	b.n	b15c <Can_43_FLEXCAN_Ipw_Init+0x1d8>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    b0f6:	9b01      	ldr	r3, [sp, #4]
    b0f8:	785b      	ldrb	r3, [r3, #1]
    b0fa:	461c      	mov	r4, r3
    b0fc:	9b02      	ldr	r3, [sp, #8]
    b0fe:	7f1b      	ldrb	r3, [r3, #28]
    b100:	4618      	mov	r0, r3
    b102:	9b02      	ldr	r3, [sp, #8]
    b104:	8819      	ldrh	r1, [r3, #0]
    b106:	4a24      	ldr	r2, [pc, #144]	; (b198 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b108:	0163      	lsls	r3, r4, #5
    b10a:	4403      	add	r3, r0
    b10c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                break;
    b110:	e024      	b.n	b15c <Can_43_FLEXCAN_Ipw_Init+0x1d8>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    b112:	9b01      	ldr	r3, [sp, #4]
    b114:	785b      	ldrb	r3, [r3, #1]
    b116:	461c      	mov	r4, r3
    b118:	9b02      	ldr	r3, [sp, #8]
    b11a:	7f1b      	ldrb	r3, [r3, #28]
    b11c:	4618      	mov	r0, r3
    b11e:	9b02      	ldr	r3, [sp, #8]
    b120:	8819      	ldrh	r1, [r3, #0]
    b122:	4a1d      	ldr	r2, [pc, #116]	; (b198 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b124:	0163      	lsls	r3, r4, #5
    b126:	4403      	add	r3, r0
    b128:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][6U] = Can_pHwObject->Can_HwObjectID;
    b12c:	9b01      	ldr	r3, [sp, #4]
    b12e:	785b      	ldrb	r3, [r3, #1]
    b130:	4618      	mov	r0, r3
    b132:	9b02      	ldr	r3, [sp, #8]
    b134:	8819      	ldrh	r1, [r3, #0]
    b136:	4a18      	ldr	r2, [pc, #96]	; (b198 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b138:	0183      	lsls	r3, r0, #6
    b13a:	4413      	add	r3, r2
    b13c:	330c      	adds	r3, #12
    b13e:	460a      	mov	r2, r1
    b140:	801a      	strh	r2, [r3, #0]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][7U] = Can_pHwObject->Can_HwObjectID;
    b142:	9b01      	ldr	r3, [sp, #4]
    b144:	785b      	ldrb	r3, [r3, #1]
    b146:	4618      	mov	r0, r3
    b148:	9b02      	ldr	r3, [sp, #8]
    b14a:	8819      	ldrh	r1, [r3, #0]
    b14c:	4a12      	ldr	r2, [pc, #72]	; (b198 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    b14e:	0183      	lsls	r3, r0, #6
    b150:	4413      	add	r3, r2
    b152:	330e      	adds	r3, #14
    b154:	460a      	mov	r2, r1
    b156:	801a      	strh	r2, [r3, #0]
                break;
    b158:	e000      	b.n	b15c <Can_43_FLEXCAN_Ipw_Init+0x1d8>
                break;
    b15a:	bf00      	nop
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b15c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b160:	3301      	adds	r3, #1
    b162:	f88d 300f 	strb.w	r3, [sp, #15]
    b166:	9b01      	ldr	r3, [sp, #4]
    b168:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    b16c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    b170:	429a      	cmp	r2, r3
    b172:	d38c      	bcc.n	b08e <Can_43_FLEXCAN_Ipw_Init+0x10a>
            }
        }
    }
#endif /* MB_INTERRUPT_SUPPORT */
    eRetVal = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    b174:	9b01      	ldr	r3, [sp, #4]
    b176:	789b      	ldrb	r3, [r3, #2]
    b178:	4618      	mov	r0, r3
    b17a:	f002 fca5 	bl	dac8 <FlexCAN_Ip_SetStopMode_Privileged>
    b17e:	4603      	mov	r3, r0
    b180:	f88d 300c 	strb.w	r3, [sp, #12]

    return (Std_ReturnType)eRetVal;
    b184:	f89d 300c 	ldrb.w	r3, [sp, #12]
}
    b188:	4618      	mov	r0, r3
    b18a:	b004      	add	sp, #16
    b18c:	bd10      	pop	{r4, pc}
    b18e:	bf00      	nop
    b190:	000184dc 	.word	0x000184dc
    b194:	1fff9358 	.word	0x1fff9358
    b198:	1fff92d8 	.word	0x1fff92d8

0000b19c <Can_43_FLEXCAN_Ipw_DeInit>:

/**
*   @brief      De-Initialize Controller
*/
void Can_43_FLEXCAN_Ipw_DeInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b19c:	b500      	push	{lr}
    b19e:	b083      	sub	sp, #12
    b1a0:	9001      	str	r0, [sp, #4]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    (void)FlexCAN_Ip_Deinit(Can_pControllerConfig->Can_u8ControllerOffset);
    b1a2:	9b01      	ldr	r3, [sp, #4]
    b1a4:	789b      	ldrb	r3, [r3, #2]
    b1a6:	4618      	mov	r0, r3
    b1a8:	f002 fafa 	bl	d7a0 <FlexCAN_Ip_Deinit_Privileged>
}
    b1ac:	bf00      	nop
    b1ae:	b003      	add	sp, #12
    b1b0:	f85d fb04 	ldr.w	pc, [sp], #4

0000b1b4 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>:

/**
*   @brief      Set Error Initialization and set Controller to start Mode.
*/
static Std_ReturnType Can_43_FLEXCAN_Ipw_SetControlerErrorInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b1b4:	b500      	push	{lr}
    b1b6:	b085      	sub	sp, #20
    b1b8:	9001      	str	r0, [sp, #4]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_SUCCESS;
    b1ba:	2300      	movs	r3, #0
    b1bc:	9303      	str	r3, [sp, #12]

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    b1be:	9b01      	ldr	r3, [sp, #4]
    b1c0:	785b      	ldrb	r3, [r3, #1]
    b1c2:	461a      	mov	r2, r3
    b1c4:	4b11      	ldr	r3, [pc, #68]	; (b20c <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x58>)
    b1c6:	5c9b      	ldrb	r3, [r3, r2]
    b1c8:	2b00      	cmp	r3, #0
    b1ca:	d012      	beq.n	b1f2 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x3e>
    {
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    b1cc:	9b01      	ldr	r3, [sp, #4]
    b1ce:	7a5b      	ldrb	r3, [r3, #9]
    b1d0:	f083 0301 	eor.w	r3, r3, #1
    b1d4:	b2db      	uxtb	r3, r3
    b1d6:	2b00      	cmp	r3, #0
    b1d8:	d006      	beq.n	b1e8 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x34>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    b1da:	9b01      	ldr	r3, [sp, #4]
    b1dc:	789b      	ldrb	r3, [r3, #2]
    b1de:	2201      	movs	r2, #1
    b1e0:	2104      	movs	r1, #4
    b1e2:	4618      	mov	r0, r3
    b1e4:	f002 ff4c 	bl	e080 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b1e8:	9b01      	ldr	r3, [sp, #4]
    b1ea:	789b      	ldrb	r3, [r3, #2]
    b1ec:	4618      	mov	r0, r3
    b1ee:	f002 feed 	bl	dfcc <FlexCAN_Ip_EnableInterrupts_Privileged>
    }
    eRetVal = FlexCAN_Ip_SetStartMode(Can_pControllerConfig->Can_u8ControllerOffset);
    b1f2:	9b01      	ldr	r3, [sp, #4]
    b1f4:	789b      	ldrb	r3, [r3, #2]
    b1f6:	4618      	mov	r0, r3
    b1f8:	f002 fc46 	bl	da88 <FlexCAN_Ip_SetStartMode_Privileged>
    b1fc:	9003      	str	r0, [sp, #12]

    return (Std_ReturnType)eRetVal;
    b1fe:	9b03      	ldr	r3, [sp, #12]
    b200:	b2db      	uxtb	r3, r3
}
    b202:	4618      	mov	r0, r3
    b204:	b005      	add	sp, #20
    b206:	f85d fb04 	ldr.w	pc, [sp], #4
    b20a:	bf00      	nop
    b20c:	1fff9358 	.word	0x1fff9358

0000b210 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>:

/**
*   @brief      Set Controller to participate the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStartMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b210:	b500      	push	{lr}
    b212:	b087      	sub	sp, #28
    b214:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    uint8 u8HwObjRefIdx = 0U;
    b216:	2300      	movs	r3, #0
    b218:	f88d 3017 	strb.w	r3, [sp, #23]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    b21c:	2300      	movs	r3, #0
    b21e:	9303      	str	r3, [sp, #12]
        {
            Can_Ipw_u32CurrentCompareVal = Stm_Ip_GetCompareValue(CAN_43_FLEXCAN_TS_STM_INSTANCE, CAN_43_FLEXCAN_TS_STM_CHANNEL);
        }
    }
#endif
    eRetVal = FlexCAN_Ip_Init(Can_pControllerConfig->Can_u8ControllerOffset, \
    b220:	9b01      	ldr	r3, [sp, #4]
    b222:	7898      	ldrb	r0, [r3, #2]
    b224:	9b01      	ldr	r3, [sp, #4]
    b226:	785b      	ldrb	r3, [r3, #1]
    b228:	461a      	mov	r2, r3
    b22a:	4b31      	ldr	r3, [pc, #196]	; (b2f0 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xe0>)
    b22c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    b230:	9b01      	ldr	r3, [sp, #4]
    b232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b234:	681b      	ldr	r3, [r3, #0]
    b236:	461a      	mov	r2, r3
    b238:	f001 fbc2 	bl	c9c0 <FlexCAN_Ip_Init_Privileged>
    b23c:	9004      	str	r0, [sp, #16]
                                                    Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], \
                                                    Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);

    if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    b23e:	9b04      	ldr	r3, [sp, #16]
    b240:	2b00      	cmp	r3, #0
    b242:	d14f      	bne.n	b2e4 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xd4>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b244:	9b01      	ldr	r3, [sp, #4]
    b246:	789b      	ldrb	r3, [r3, #2]
    b248:	4618      	mov	r0, r3
    b24a:	f002 feed 	bl	e028 <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* Re-Init baudrate */
        Can_Ipw_InitBaudrate(Can_pControllerConfig);
    b24e:	9801      	ldr	r0, [sp, #4]
    b250:	f7ff fd72 	bl	ad38 <Can_Ipw_InitBaudrate>

        /* Re-Init all Rx Objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    b254:	9801      	ldr	r0, [sp, #4]
    b256:	f000 fa07 	bl	b668 <Can_Ipw_InitRx>
            Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][MbIdx] = FALSE;
        }
    #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */

    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b25a:	2300      	movs	r3, #0
    b25c:	f88d 3017 	strb.w	r3, [sp, #23]
    b260:	e02f      	b.n	b2c2 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xb2>
        {
            Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    b262:	9b01      	ldr	r3, [sp, #4]
    b264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b266:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b26a:	009b      	lsls	r3, r3, #2
    b26c:	4413      	add	r3, r2
    b26e:	681b      	ldr	r3, [r3, #0]
    b270:	9303      	str	r3, [sp, #12]

            if (FALSE == Can_pHwObject->Can_bHwObjectUsesPolling)
    b272:	9b03      	ldr	r3, [sp, #12]
    b274:	7b1b      	ldrb	r3, [r3, #12]
    b276:	f083 0301 	eor.w	r3, r3, #1
    b27a:	b2db      	uxtb	r3, r3
    b27c:	2b00      	cmp	r3, #0
    b27e:	d018      	beq.n	b2b2 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa2>
            {
                switch (Can_pHwObject->Can_eReceiveType)
    b280:	9b03      	ldr	r3, [sp, #12]
    b282:	699b      	ldr	r3, [r3, #24]
    b284:	2b00      	cmp	r3, #0
    b286:	d003      	beq.n	b290 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x80>
    b288:	3b01      	subs	r3, #1
    b28a:	2b01      	cmp	r3, #1
    b28c:	d813      	bhi.n	b2b6 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa6>
    b28e:	e009      	b.n	b2a4 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x94>
                {
                    case CAN_RX_NORMAL:
                    {
                        (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    b290:	9b01      	ldr	r3, [sp, #4]
    b292:	7898      	ldrb	r0, [r3, #2]
    b294:	9b03      	ldr	r3, [sp, #12]
    b296:	7f19      	ldrb	r1, [r3, #28]
    b298:	9b03      	ldr	r3, [sp, #12]
    b29a:	7b1b      	ldrb	r3, [r3, #12]
    b29c:	2200      	movs	r2, #0
    b29e:	f001 fc9b 	bl	cbd8 <FlexCAN_Ip_Receive>
                                                 Can_pHwObject->Can_u8HwBufferIndex, \
                                                 NULL_PTR, \
                                                 Can_pHwObject->Can_bHwObjectUsesPolling \
                                                );
                        break;
    b2a2:	e009      	b.n	b2b8 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa8>
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, Can_pControllerConfig->pDmaDstAddr);
                        }
                        else
                    #endif
                        {
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    b2a4:	9b01      	ldr	r3, [sp, #4]
    b2a6:	789b      	ldrb	r3, [r3, #2]
    b2a8:	2100      	movs	r1, #0
    b2aa:	4618      	mov	r0, r3
    b2ac:	f001 fd92 	bl	cdd4 <FlexCAN_Ip_RxFifo>
                        }
                        break;
    b2b0:	e002      	b.n	b2b8 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa8>
                    {
                        /* nothing to do(TX object) */
                        break;
                    }
                }
            }
    b2b2:	bf00      	nop
    b2b4:	e000      	b.n	b2b8 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa8>
                        break;
    b2b6:	bf00      	nop
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b2b8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b2bc:	3301      	adds	r3, #1
    b2be:	f88d 3017 	strb.w	r3, [sp, #23]
    b2c2:	9b01      	ldr	r3, [sp, #4]
    b2c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    b2c8:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b2cc:	429a      	cmp	r2, r3
    b2ce:	d3c8      	bcc.n	b262 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x52>
        }
    #endif /* CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON */
        eRetVal = ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControlerErrorInit(Can_pControllerConfig)) ? (FLEXCAN_STATUS_SUCCESS) : (FLEXCAN_STATUS_ERROR);
    b2d0:	9801      	ldr	r0, [sp, #4]
    b2d2:	f7ff ff6f 	bl	b1b4 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>
    b2d6:	4603      	mov	r3, r0
    b2d8:	2b00      	cmp	r3, #0
    b2da:	bf14      	ite	ne
    b2dc:	2301      	movne	r3, #1
    b2de:	2300      	moveq	r3, #0
    b2e0:	b2db      	uxtb	r3, r3
    b2e2:	9304      	str	r3, [sp, #16]
    }
    return (Std_ReturnType)eRetVal;
    b2e4:	9b04      	ldr	r3, [sp, #16]
    b2e6:	b2db      	uxtb	r3, r3
}
    b2e8:	4618      	mov	r0, r3
    b2ea:	b007      	add	sp, #28
    b2ec:	f85d fb04 	ldr.w	pc, [sp], #4
    b2f0:	000184dc 	.word	0x000184dc

0000b2f4 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>:

/**
*   @brief      Set Controller to stop participating the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStopMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b2f4:	b500      	push	{lr}
    b2f6:	b085      	sub	sp, #20
    b2f8:	9001      	str	r0, [sp, #4]
    * that are not allowed in the new state. ⌋
    * [SWS_Can_00426] ⌈ Disabling of CAN interrupts shall not be executed, when CAN
    * interrupts have been disabled by function Can_DisableControllerInterrupts.⌋
    */
    Std_ReturnType eReturnValue;
    uint8 u8HwObjRefIdx = 0U;
    b2fa:	2300      	movs	r3, #0
    b2fc:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    uint8 u8Idx = 0U;
    b300:	2300      	movs	r3, #0
    b302:	f88d 300d 	strb.w	r3, [sp, #13]

    if (FLEXCAN_STATUS_SUCCESS == FlexCAN_Ip_EnterFreezeMode(Can_pControllerConfig->Can_u8ControllerOffset))
    b306:	9b01      	ldr	r3, [sp, #4]
    b308:	789b      	ldrb	r3, [r3, #2]
    b30a:	4618      	mov	r0, r3
    b30c:	f002 f986 	bl	d61c <FlexCAN_Ip_EnterFreezeMode_Privileged>
    b310:	4603      	mov	r3, r0
    b312:	2b00      	cmp	r3, #0
    b314:	d160      	bne.n	b3d8 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xe4>
    {
    #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_ConfigPN(Can_pControllerConfig->Can_u8ControllerOffset, FALSE, NULL_PTR);
    #endif

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    b316:	9b01      	ldr	r3, [sp, #4]
    b318:	785b      	ldrb	r3, [r3, #1]
    b31a:	461a      	mov	r2, r3
    b31c:	4b33      	ldr	r3, [pc, #204]	; (b3ec <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xf8>)
    b31e:	5c9b      	ldrb	r3, [r3, r2]
    b320:	2b00      	cmp	r3, #0
    b322:	d012      	beq.n	b34a <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
    {
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b324:	9b01      	ldr	r3, [sp, #4]
    b326:	789b      	ldrb	r3, [r3, #2]
    b328:	4618      	mov	r0, r3
    b32a:	f002 fe7d 	bl	e028 <FlexCAN_Ip_DisableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    b32e:	9b01      	ldr	r3, [sp, #4]
    b330:	7a5b      	ldrb	r3, [r3, #9]
    b332:	f083 0301 	eor.w	r3, r3, #1
    b336:	b2db      	uxtb	r3, r3
    b338:	2b00      	cmp	r3, #0
    b33a:	d006      	beq.n	b34a <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    b33c:	9b01      	ldr	r3, [sp, #4]
    b33e:	789b      	ldrb	r3, [r3, #2]
    b340:	2200      	movs	r2, #0
    b342:	2104      	movs	r1, #4
    b344:	4618      	mov	r0, r3
    b346:	f002 fe9b 	bl	e080 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b34a:	2300      	movs	r3, #0
    b34c:	f88d 300e 	strb.w	r3, [sp, #14]
    b350:	e032      	b.n	b3b8 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xc4>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    b352:	9b01      	ldr	r3, [sp, #4]
    b354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b356:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b35a:	009b      	lsls	r3, r3, #2
    b35c:	4413      	add	r3, r2
    b35e:	681b      	ldr	r3, [r3, #0]
    b360:	9302      	str	r3, [sp, #8]

        if (CAN_TX_NORMAL == Can_pHwObject->Can_eReceiveType)
    b362:	9b02      	ldr	r3, [sp, #8]
    b364:	699b      	ldr	r3, [r3, #24]
    b366:	2b03      	cmp	r3, #3
    b368:	d119      	bne.n	b39e <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xaa>
        {
            u8Idx = 0U;
    b36a:	2300      	movs	r3, #0
    b36c:	f88d 300d 	strb.w	r3, [sp, #13]
            do
            {
                (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex + u8Idx);
    b370:	9b01      	ldr	r3, [sp, #4]
    b372:	7898      	ldrb	r0, [r3, #2]
    b374:	9b02      	ldr	r3, [sp, #8]
    b376:	7f1a      	ldrb	r2, [r3, #28]
    b378:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b37c:	4413      	add	r3, r2
    b37e:	b2db      	uxtb	r3, r3
    b380:	4619      	mov	r1, r3
    b382:	f002 ff03 	bl	e18c <FlexCAN_Ip_AbortTransfer>
                u8Idx++;
    b386:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b38a:	3301      	adds	r3, #1
    b38c:	f88d 300d 	strb.w	r3, [sp, #13]
            }while (u8Idx < Can_pHwObject->Can_u8ObjectCount);
    b390:	9b02      	ldr	r3, [sp, #8]
    b392:	7b9b      	ldrb	r3, [r3, #14]
    b394:	f89d 200d 	ldrb.w	r2, [sp, #13]
    b398:	429a      	cmp	r2, r3
    b39a:	d3e9      	bcc.n	b370 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x7c>
    b39c:	e007      	b.n	b3ae <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xba>
        }
        else
        {
            (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex);
    b39e:	9b01      	ldr	r3, [sp, #4]
    b3a0:	789a      	ldrb	r2, [r3, #2]
    b3a2:	9b02      	ldr	r3, [sp, #8]
    b3a4:	7f1b      	ldrb	r3, [r3, #28]
    b3a6:	4619      	mov	r1, r3
    b3a8:	4610      	mov	r0, r2
    b3aa:	f002 feef 	bl	e18c <FlexCAN_Ip_AbortTransfer>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b3ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b3b2:	3301      	adds	r3, #1
    b3b4:	f88d 300e 	strb.w	r3, [sp, #14]
    b3b8:	9b01      	ldr	r3, [sp, #4]
    b3ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    b3be:	f89d 200e 	ldrb.w	r2, [sp, #14]
    b3c2:	429a      	cmp	r2, r3
    b3c4:	d3c5      	bcc.n	b352 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x5e>
        }
    }
    eReturnValue = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    b3c6:	9b01      	ldr	r3, [sp, #4]
    b3c8:	789b      	ldrb	r3, [r3, #2]
    b3ca:	4618      	mov	r0, r3
    b3cc:	f002 fb7c 	bl	dac8 <FlexCAN_Ip_SetStopMode_Privileged>
    b3d0:	4603      	mov	r3, r0
    b3d2:	f88d 300f 	strb.w	r3, [sp, #15]
    b3d6:	e002      	b.n	b3de <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xea>
    }
    else
    {
        eReturnValue = E_NOT_OK;
    b3d8:	2301      	movs	r3, #1
    b3da:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return eReturnValue;
    b3de:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    b3e2:	4618      	mov	r0, r3
    b3e4:	b005      	add	sp, #20
    b3e6:	f85d fb04 	ldr.w	pc, [sp], #4
    b3ea:	bf00      	nop
    b3ec:	1fff9358 	.word	0x1fff9358

0000b3f0 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>:
/**
*   @brief      Disable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b3f0:	b500      	push	{lr}
    b3f2:	b083      	sub	sp, #12
    b3f4:	9001      	str	r0, [sp, #4]
    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    b3f6:	9b01      	ldr	r3, [sp, #4]
    b3f8:	785b      	ldrb	r3, [r3, #1]
    b3fa:	461a      	mov	r2, r3
    b3fc:	4b10      	ldr	r3, [pc, #64]	; (b440 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    b3fe:	5c9b      	ldrb	r3, [r3, r2]
    b400:	2b00      	cmp	r3, #0
    b402:	d018      	beq.n	b436 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b404:	9b01      	ldr	r3, [sp, #4]
    b406:	789b      	ldrb	r3, [r3, #2]
    b408:	4618      	mov	r0, r3
    b40a:	f002 fe0d 	bl	e028 <FlexCAN_Ip_DisableInterrupts_Privileged>
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = FALSE;
    b40e:	9b01      	ldr	r3, [sp, #4]
    b410:	785b      	ldrb	r3, [r3, #1]
    b412:	461a      	mov	r2, r3
    b414:	4b0a      	ldr	r3, [pc, #40]	; (b440 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    b416:	2100      	movs	r1, #0
    b418:	5499      	strb	r1, [r3, r2]
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    b41a:	9b01      	ldr	r3, [sp, #4]
    b41c:	7a5b      	ldrb	r3, [r3, #9]
    b41e:	f083 0301 	eor.w	r3, r3, #1
    b422:	b2db      	uxtb	r3, r3
    b424:	2b00      	cmp	r3, #0
    b426:	d006      	beq.n	b436 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    b428:	9b01      	ldr	r3, [sp, #4]
    b42a:	789b      	ldrb	r3, [r3, #2]
    b42c:	2200      	movs	r2, #0
    b42e:	2104      	movs	r1, #4
    b430:	4618      	mov	r0, r3
    b432:	f002 fe25 	bl	e080 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
}
    b436:	bf00      	nop
    b438:	b003      	add	sp, #12
    b43a:	f85d fb04 	ldr.w	pc, [sp], #4
    b43e:	bf00      	nop
    b440:	1fff9358 	.word	0x1fff9358

0000b444 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>:

/**
*   @brief      Enable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    b444:	b500      	push	{lr}
    b446:	b083      	sub	sp, #12
    b448:	9001      	str	r0, [sp, #4]
    /*
    * [SWS_Can_00208] ⌈ The function Can_EnableControllerInterrupts shall perform no
    * action when Can_DisableControllerInterrupts has not been called before.⌋
    */
    if (FALSE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    b44a:	9b01      	ldr	r3, [sp, #4]
    b44c:	785b      	ldrb	r3, [r3, #1]
    b44e:	461a      	mov	r2, r3
    b450:	4b11      	ldr	r3, [pc, #68]	; (b498 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    b452:	5c9b      	ldrb	r3, [r3, r2]
    b454:	f083 0301 	eor.w	r3, r3, #1
    b458:	b2db      	uxtb	r3, r3
    b45a:	2b00      	cmp	r3, #0
    b45c:	d018      	beq.n	b490 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x4c>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    b45e:	9b01      	ldr	r3, [sp, #4]
    b460:	789b      	ldrb	r3, [r3, #2]
    b462:	4618      	mov	r0, r3
    b464:	f002 fdb2 	bl	dfcc <FlexCAN_Ip_EnableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    b468:	9b01      	ldr	r3, [sp, #4]
    b46a:	7a5b      	ldrb	r3, [r3, #9]
    b46c:	f083 0301 	eor.w	r3, r3, #1
    b470:	b2db      	uxtb	r3, r3
    b472:	2b00      	cmp	r3, #0
    b474:	d006      	beq.n	b484 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x40>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    b476:	9b01      	ldr	r3, [sp, #4]
    b478:	789b      	ldrb	r3, [r3, #2]
    b47a:	2201      	movs	r2, #1
    b47c:	2104      	movs	r1, #4
    b47e:	4618      	mov	r0, r3
    b480:	f002 fdfe 	bl	e080 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        /* update status */
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    b484:	9b01      	ldr	r3, [sp, #4]
    b486:	785b      	ldrb	r3, [r3, #1]
    b488:	461a      	mov	r2, r3
    b48a:	4b03      	ldr	r3, [pc, #12]	; (b498 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    b48c:	2101      	movs	r1, #1
    b48e:	5499      	strb	r1, [r3, r2]
    }
}
    b490:	bf00      	nop
    b492:	b003      	add	sp, #12
    b494:	f85d fb04 	ldr.w	pc, [sp], #4
    b498:	1fff9358 	.word	0x1fff9358

0000b49c <Can_43_FLEXCAN_Ipw_GetControllerErrorState>:

/**
*   @brief      Get Controller Error State
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerErrorState(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    b49c:	b500      	push	{lr}
    b49e:	b085      	sub	sp, #20
    b4a0:	9001      	str	r0, [sp, #4]
    b4a2:	9100      	str	r1, [sp, #0]
    uint32 Error = 0U;
    b4a4:	2300      	movs	r3, #0
    b4a6:	9303      	str	r3, [sp, #12]

    Error = FlexCAN_Ip_GetErrorStatus(Can_pControllerConfig->Can_u8ControllerOffset);
    b4a8:	9b01      	ldr	r3, [sp, #4]
    b4aa:	789b      	ldrb	r3, [r3, #2]
    b4ac:	4618      	mov	r0, r3
    b4ae:	f001 fe81 	bl	d1b4 <FlexCAN_Ip_GetErrorStatus>
    b4b2:	9003      	str	r0, [sp, #12]

    *pValue = (uint8)((Error & FLEXCAN_ESR1_FLTCONF_MASK)>>FLEXCAN_ESR1_FLTCONF_SHIFT);
    b4b4:	9b03      	ldr	r3, [sp, #12]
    b4b6:	091b      	lsrs	r3, r3, #4
    b4b8:	b2db      	uxtb	r3, r3
    b4ba:	f003 0303 	and.w	r3, r3, #3
    b4be:	b2da      	uxtb	r2, r3
    b4c0:	9b00      	ldr	r3, [sp, #0]
    b4c2:	701a      	strb	r2, [r3, #0]
    return E_OK;
    b4c4:	2300      	movs	r3, #0
}
    b4c6:	4618      	mov	r0, r3
    b4c8:	b005      	add	sp, #20
    b4ca:	f85d fb04 	ldr.w	pc, [sp], #4

0000b4ce <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>:

/**
*   @brief      Get Controller Tx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    b4ce:	b500      	push	{lr}
    b4d0:	b083      	sub	sp, #12
    b4d2:	9001      	str	r0, [sp, #4]
    b4d4:	9100      	str	r1, [sp, #0]
     *pValue = FlexCAN_Ip_GetControllerTxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    b4d6:	9b01      	ldr	r3, [sp, #4]
    b4d8:	789b      	ldrb	r3, [r3, #2]
    b4da:	4618      	mov	r0, r3
    b4dc:	f001 fe7c 	bl	d1d8 <FlexCAN_Ip_GetControllerTxErrorCounter>
    b4e0:	4603      	mov	r3, r0
    b4e2:	461a      	mov	r2, r3
    b4e4:	9b00      	ldr	r3, [sp, #0]
    b4e6:	701a      	strb	r2, [r3, #0]
     return E_OK;
    b4e8:	2300      	movs	r3, #0
}
    b4ea:	4618      	mov	r0, r3
    b4ec:	b003      	add	sp, #12
    b4ee:	f85d fb04 	ldr.w	pc, [sp], #4

0000b4f2 <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>:

/**
*   @brief      Get Controller Rx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    b4f2:	b500      	push	{lr}
    b4f4:	b083      	sub	sp, #12
    b4f6:	9001      	str	r0, [sp, #4]
    b4f8:	9100      	str	r1, [sp, #0]

    *pValue = FlexCAN_Ip_GetControllerRxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    b4fa:	9b01      	ldr	r3, [sp, #4]
    b4fc:	789b      	ldrb	r3, [r3, #2]
    b4fe:	4618      	mov	r0, r3
    b500:	f001 fe7c 	bl	d1fc <FlexCAN_Ip_GetControllerRxErrorCounter>
    b504:	4603      	mov	r3, r0
    b506:	461a      	mov	r2, r3
    b508:	9b00      	ldr	r3, [sp, #0]
    b50a:	701a      	strb	r2, [r3, #0]
    return E_OK;
    b50c:	2300      	movs	r3, #0
}
    b50e:	4618      	mov	r0, r3
    b510:	b003      	add	sp, #12
    b512:	f85d fb04 	ldr.w	pc, [sp], #4

0000b516 <Can_43_FLEXCAN_Ipw_Write>:
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
    const Can_PduType * PduInfo
)
{
    b516:	b510      	push	{r4, lr}
    b518:	b08c      	sub	sp, #48	; 0x30
    b51a:	9005      	str	r0, [sp, #20]
    b51c:	9104      	str	r1, [sp, #16]
    b51e:	9203      	str	r2, [sp, #12]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    b520:	2301      	movs	r3, #1
    b522:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_DataInfoType DataInfo;
    uint8 u8ObjIdx = 0U;
    b524:	2300      	movs	r3, #0
    b526:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
#if (CAN_43_FLEXCAN_TRIGGER_TRANSMIT_USED == STD_ON)
    PduInfoType CanIf_PduInfo;
    uint8 Data[64U];
#endif

    DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    b52a:	2300      	movs	r3, #0
    b52c:	9306      	str	r3, [sp, #24]
    DataInfo.data_length = 0U;
    b52e:	2300      	movs	r3, #0
    b530:	9307      	str	r3, [sp, #28]
    DataInfo.fd_padding = 0U;
    b532:	2300      	movs	r3, #0
    b534:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    DataInfo.fd_enable = FALSE;
    b538:	2300      	movs	r3, #0
    b53a:	f88d 3020 	strb.w	r3, [sp, #32]
    DataInfo.enable_brs = FALSE;
    b53e:	2300      	movs	r3, #0
    b540:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    DataInfo.is_remote = FALSE;
    b544:	2300      	movs	r3, #0
    b546:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    DataInfo.is_polling = FALSE;
    b54a:	2300      	movs	r3, #0
    b54c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if (CAN_TX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    b550:	9b04      	ldr	r3, [sp, #16]
    b552:	699b      	ldr	r3, [r3, #24]
    b554:	2b03      	cmp	r3, #3
    b556:	d173      	bne.n	b640 <Can_43_FLEXCAN_Ipw_Write+0x12a>
    {
        DataInfo.msg_id_type = ((PduInfo->id & CAN_43_FLEXCAN_EXTENDED_ID_U32) != 0U) ? FLEXCAN_MSG_ID_EXT : FLEXCAN_MSG_ID_STD;
    b558:	9b03      	ldr	r3, [sp, #12]
    b55a:	681b      	ldr	r3, [r3, #0]
    b55c:	0fdb      	lsrs	r3, r3, #31
    b55e:	9306      	str	r3, [sp, #24]
        if (Can_pHwObjectConfig->Can_u8PayloadLength <=  PduInfo->length)
    b560:	9b04      	ldr	r3, [sp, #16]
    b562:	7c1a      	ldrb	r2, [r3, #16]
    b564:	9b03      	ldr	r3, [sp, #12]
    b566:	799b      	ldrb	r3, [r3, #6]
    b568:	429a      	cmp	r2, r3
    b56a:	d803      	bhi.n	b574 <Can_43_FLEXCAN_Ipw_Write+0x5e>
        {
            DataInfo.data_length = Can_pHwObjectConfig->Can_u8PayloadLength;
    b56c:	9b04      	ldr	r3, [sp, #16]
    b56e:	7c1b      	ldrb	r3, [r3, #16]
    b570:	9307      	str	r3, [sp, #28]
    b572:	e002      	b.n	b57a <Can_43_FLEXCAN_Ipw_Write+0x64>
        }
        else
        {
            DataInfo.data_length = PduInfo->length;
    b574:	9b03      	ldr	r3, [sp, #12]
    b576:	799b      	ldrb	r3, [r3, #6]
    b578:	9307      	str	r3, [sp, #28]
        }
#if (CAN_43_FLEXCAN_FEATURE_HAS_FD == STD_ON)
        DataInfo.fd_padding = Can_pHwObjectConfig->Can_u8PaddingValue;
    b57a:	9b04      	ldr	r3, [sp, #16]
    b57c:	7c5b      	ldrb	r3, [r3, #17]
    b57e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        DataInfo.fd_enable = ((PduInfo->id & CAN_43_FLEXCAN_FD_FRAME_U32) != 0U) ? TRUE : FALSE;
    b582:	9b03      	ldr	r3, [sp, #12]
    b584:	681b      	ldr	r3, [r3, #0]
    b586:	0f9b      	lsrs	r3, r3, #30
    b588:	f003 0301 	and.w	r3, r3, #1
    b58c:	2b00      	cmp	r3, #0
    b58e:	bf14      	ite	ne
    b590:	2301      	movne	r3, #1
    b592:	2300      	moveq	r3, #0
    b594:	b2db      	uxtb	r3, r3
    b596:	f88d 3020 	strb.w	r3, [sp, #32]
    #if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
            DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID]].Can_bBitRateSwitch;
    #else
        DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bBitRateSwitch;
    b59a:	9b05      	ldr	r3, [sp, #20]
    b59c:	6a1a      	ldr	r2, [r3, #32]
    b59e:	9b05      	ldr	r3, [sp, #20]
    b5a0:	8b9b      	ldrh	r3, [r3, #28]
    b5a2:	4619      	mov	r1, r3
    b5a4:	2316      	movs	r3, #22
    b5a6:	fb01 f303 	mul.w	r3, r1, r3
    b5aa:	4413      	add	r3, r2
    b5ac:	781b      	ldrb	r3, [r3, #0]
    b5ae:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    #endif
#endif
        DataInfo.is_remote = FALSE;
    b5b2:	2300      	movs	r3, #0
    b5b4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
        DataInfo.is_polling = Can_pHwObjectConfig->Can_bHwObjectUsesPolling;
    b5b8:	9b04      	ldr	r3, [sp, #16]
    b5ba:	7b1b      	ldrb	r3, [r3, #12]
    b5bc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        do
        {
            eRetVal = FlexCAN_Ip_GetTransferStatus(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx);
    b5c0:	9b05      	ldr	r3, [sp, #20]
    b5c2:	7898      	ldrb	r0, [r3, #2]
    b5c4:	9b04      	ldr	r3, [sp, #16]
    b5c6:	7f1a      	ldrb	r2, [r3, #28]
    b5c8:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    b5cc:	4413      	add	r3, r2
    b5ce:	b2db      	uxtb	r3, r3
    b5d0:	4619      	mov	r1, r3
    b5d2:	f001 fcdd 	bl	cf90 <FlexCAN_Ip_GetTransferStatus>
    b5d6:	900b      	str	r0, [sp, #44]	; 0x2c
            if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    b5d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b5da:	2b00      	cmp	r3, #0
    b5dc:	d122      	bne.n	b624 <Can_43_FLEXCAN_Ipw_Write+0x10e>
            {
                #if ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))
                Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = PduInfo->swPduHandle;
    b5de:	9b05      	ldr	r3, [sp, #20]
    b5e0:	785b      	ldrb	r3, [r3, #1]
    b5e2:	461c      	mov	r4, r3
    b5e4:	9b04      	ldr	r3, [sp, #16]
    b5e6:	7f1b      	ldrb	r3, [r3, #28]
    b5e8:	461a      	mov	r2, r3
    b5ea:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    b5ee:	4413      	add	r3, r2
    b5f0:	9a03      	ldr	r2, [sp, #12]
    b5f2:	8890      	ldrh	r0, [r2, #4]
    b5f4:	491b      	ldr	r1, [pc, #108]	; (b664 <Can_43_FLEXCAN_Ipw_Write+0x14e>)
    b5f6:	0162      	lsls	r2, r4, #5
    b5f8:	4413      	add	r3, r2
    b5fa:	4602      	mov	r2, r0
    b5fc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                    }
                }
                else
                {
            #endif
                    eRetVal = FlexCAN_Ip_Send(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx, &DataInfo, PduInfo->id, PduInfo->sdu);
    b600:	9b05      	ldr	r3, [sp, #20]
    b602:	7898      	ldrb	r0, [r3, #2]
    b604:	9b04      	ldr	r3, [sp, #16]
    b606:	7f1a      	ldrb	r2, [r3, #28]
    b608:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    b60c:	4413      	add	r3, r2
    b60e:	b2d9      	uxtb	r1, r3
    b610:	9b03      	ldr	r3, [sp, #12]
    b612:	681c      	ldr	r4, [r3, #0]
    b614:	9b03      	ldr	r3, [sp, #12]
    b616:	689b      	ldr	r3, [r3, #8]
    b618:	aa06      	add	r2, sp, #24
    b61a:	9300      	str	r3, [sp, #0]
    b61c:	4623      	mov	r3, r4
    b61e:	f001 fa4b 	bl	cab8 <FlexCAN_Ip_Send>
    b622:	900b      	str	r0, [sp, #44]	; 0x2c
                /* Revert to FALSE due to the MB was not transmitted successfully */
                Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = FALSE;
            }
            #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */
            }
            u8ObjIdx++;
    b624:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    b628:	3301      	adds	r3, #1
    b62a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        } while ((u8ObjIdx < Can_pHwObjectConfig->Can_u8ObjectCount) && (FLEXCAN_STATUS_BUSY == eRetVal));
    b62e:	9b04      	ldr	r3, [sp, #16]
    b630:	7b9b      	ldrb	r3, [r3, #14]
    b632:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    b636:	429a      	cmp	r2, r3
    b638:	d202      	bcs.n	b640 <Can_43_FLEXCAN_Ipw_Write+0x12a>
    b63a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b63c:	2b02      	cmp	r3, #2
    b63e:	d0bf      	beq.n	b5c0 <Can_43_FLEXCAN_Ipw_Write+0xaa>
    }

    if ((FLEXCAN_STATUS_SUCCESS != eRetVal) && (FLEXCAN_STATUS_BUSY != eRetVal))
    b640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b642:	2b00      	cmp	r3, #0
    b644:	d004      	beq.n	b650 <Can_43_FLEXCAN_Ipw_Write+0x13a>
    b646:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b648:	2b02      	cmp	r3, #2
    b64a:	d001      	beq.n	b650 <Can_43_FLEXCAN_Ipw_Write+0x13a>
    {
        eRetVal = FLEXCAN_STATUS_ERROR;
    b64c:	2301      	movs	r3, #1
    b64e:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    return ((FLEXCAN_STATUS_BUSY == eRetVal) ? ((Std_ReturnType)CAN_BUSY) : ((Std_ReturnType)eRetVal));
    b650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b652:	2b02      	cmp	r3, #2
    b654:	d002      	beq.n	b65c <Can_43_FLEXCAN_Ipw_Write+0x146>
    b656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b658:	b2db      	uxtb	r3, r3
    b65a:	e000      	b.n	b65e <Can_43_FLEXCAN_Ipw_Write+0x148>
    b65c:	2302      	movs	r3, #2
}
    b65e:	4618      	mov	r0, r3
    b660:	b00c      	add	sp, #48	; 0x30
    b662:	bd10      	pop	{r4, pc}
    b664:	1fff9258 	.word	0x1fff9258

0000b668 <Can_Ipw_InitRx>:

static void Can_Ipw_InitRx(const Can_43_FLEXCAN_ControllerConfigType * Can_pController)
{
    b668:	b500      	push	{lr}
    b66a:	b089      	sub	sp, #36	; 0x24
    b66c:	9001      	str	r0, [sp, #4]
    uint8 u8HwObjRefIdx = 0U;
    b66e:	2300      	movs	r3, #0
    b670:	f88d 301f 	strb.w	r3, [sp, #31]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    Flexcan_Ip_DataInfoType DataInfo;

    /* This function just is called only if controller is in freeze mode */
    /* Always enable individual mask , Already in freeze mode */
    (void)FlexCAN_Ip_SetRxMaskType(Can_pController->Can_u8ControllerOffset, FLEXCAN_RX_MASK_INDIVIDUAL);
    b674:	9b01      	ldr	r3, [sp, #4]
    b676:	789b      	ldrb	r3, [r3, #2]
    b678:	2101      	movs	r1, #1
    b67a:	4618      	mov	r0, r3
    b67c:	f002 fa42 	bl	db04 <FlexCAN_Ip_SetRxMaskType_Privileged>

    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b680:	2300      	movs	r3, #0
    b682:	f88d 301f 	strb.w	r3, [sp, #31]
    b686:	e03a      	b.n	b6fe <Can_Ipw_InitRx+0x96>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pController->Can_ppHwObject[u8HwObjRefIdx];
    b688:	9b01      	ldr	r3, [sp, #4]
    b68a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b68c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b690:	009b      	lsls	r3, r3, #2
    b692:	4413      	add	r3, r2
    b694:	681b      	ldr	r3, [r3, #0]
    b696:	9306      	str	r3, [sp, #24]

        if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    b698:	9b06      	ldr	r3, [sp, #24]
    b69a:	699b      	ldr	r3, [r3, #24]
    b69c:	2b00      	cmp	r3, #0
    b69e:	d121      	bne.n	b6e4 <Can_Ipw_InitRx+0x7c>
        {
            DataInfo.fd_enable = FALSE;
    b6a0:	2300      	movs	r3, #0
    b6a2:	f88d 3010 	strb.w	r3, [sp, #16]
            DataInfo.data_length = 0U;
    b6a6:	2300      	movs	r3, #0
    b6a8:	9303      	str	r3, [sp, #12]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    b6aa:	9b06      	ldr	r3, [sp, #24]
    b6ac:	689b      	ldr	r3, [r3, #8]
    b6ae:	2b00      	cmp	r3, #0
    b6b0:	d002      	beq.n	b6b8 <Can_Ipw_InitRx+0x50>
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_EXT;
    b6b2:	2301      	movs	r3, #1
    b6b4:	9302      	str	r3, [sp, #8]
    b6b6:	e001      	b.n	b6bc <Can_Ipw_InitRx+0x54>
            }
            else
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    b6b8:	2300      	movs	r3, #0
    b6ba:	9302      	str	r3, [sp, #8]
            }
            (void)FlexCAN_Ip_ConfigRxMb(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, &DataInfo, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterCode);
    b6bc:	9b01      	ldr	r3, [sp, #4]
    b6be:	7898      	ldrb	r0, [r3, #2]
    b6c0:	9b06      	ldr	r3, [sp, #24]
    b6c2:	7f19      	ldrb	r1, [r3, #28]
    b6c4:	9b06      	ldr	r3, [sp, #24]
    b6c6:	695b      	ldr	r3, [r3, #20]
    b6c8:	681b      	ldr	r3, [r3, #0]
    b6ca:	aa02      	add	r2, sp, #8
    b6cc:	f001 fa40 	bl	cb50 <FlexCAN_Ip_ConfigRxMb>
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterMask);
    b6d0:	9b01      	ldr	r3, [sp, #4]
    b6d2:	7898      	ldrb	r0, [r3, #2]
    b6d4:	9b06      	ldr	r3, [sp, #24]
    b6d6:	7f19      	ldrb	r1, [r3, #28]
    b6d8:	9b06      	ldr	r3, [sp, #24]
    b6da:	695b      	ldr	r3, [r3, #20]
    b6dc:	685b      	ldr	r3, [r3, #4]
    b6de:	461a      	mov	r2, r3
    b6e0:	f001 ffc8 	bl	d674 <FlexCAN_Ip_SetRxIndividualMask_Privileged>
        }

        if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    b6e4:	9b06      	ldr	r3, [sp, #24]
    b6e6:	699b      	ldr	r3, [r3, #24]
    b6e8:	2b01      	cmp	r3, #1
    b6ea:	d103      	bne.n	b6f4 <Can_Ipw_InitRx+0x8c>
        {
            Can_Ipw_InitLegacyFifoFilter(Can_pController, Can_pHwObject);
    b6ec:	9906      	ldr	r1, [sp, #24]
    b6ee:	9801      	ldr	r0, [sp, #4]
    b6f0:	f7ff f8ff 	bl	a8f2 <Can_Ipw_InitLegacyFifoFilter>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    b6f4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b6f8:	3301      	adds	r3, #1
    b6fa:	f88d 301f 	strb.w	r3, [sp, #31]
    b6fe:	9b01      	ldr	r3, [sp, #4]
    b700:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    b704:	f89d 201f 	ldrb.w	r2, [sp, #31]
    b708:	429a      	cmp	r2, r3
    b70a:	d3bd      	bcc.n	b688 <Can_Ipw_InitRx+0x20>
        }
    }
}
    b70c:	bf00      	nop
    b70e:	bf00      	nop
    b710:	b009      	add	sp, #36	; 0x24
    b712:	f85d fb04 	ldr.w	pc, [sp], #4

0000b716 <Can_43_FLEXCAN_Ipw_MainFunction_Mode>:
void Can_43_FLEXCAN_Ipw_MainFunction_Mode
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    Can_ControllerStateType * Can_pControllerState
)
{
    b716:	b500      	push	{lr}
    b718:	b083      	sub	sp, #12
    b71a:	9001      	str	r0, [sp, #4]
    b71c:	9100      	str	r1, [sp, #0]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    if (CAN_CS_STARTED == *Can_pControllerState)
    b71e:	9b00      	ldr	r3, [sp, #0]
    b720:	681b      	ldr	r3, [r3, #0]
    b722:	2b01      	cmp	r3, #1
    b724:	d114      	bne.n	b750 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x3a>
    {
        if (FALSE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    b726:	9b01      	ldr	r3, [sp, #4]
    b728:	789b      	ldrb	r3, [r3, #2]
    b72a:	4618      	mov	r0, r3
    b72c:	f002 f994 	bl	da58 <FlexCAN_Ip_GetStartMode_Privileged>
    b730:	4603      	mov	r3, r0
    b732:	f083 0301 	eor.w	r3, r3, #1
    b736:	b2db      	uxtb	r3, r3
    b738:	2b00      	cmp	r3, #0
    b73a:	d01e      	beq.n	b77a <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        {
            *Can_pControllerState = CAN_CS_STOPPED;
    b73c:	9b00      	ldr	r3, [sp, #0]
    b73e:	2202      	movs	r2, #2
    b740:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STOPPED);
    b742:	9b01      	ldr	r3, [sp, #4]
    b744:	781b      	ldrb	r3, [r3, #0]
    b746:	2102      	movs	r1, #2
    b748:	4618      	mov	r0, r3
    b74a:	f00b fc61 	bl	17010 <CanIf_ControllerModeIndication>
    }
    else
    {
        /* nothing to do */
    }
}
    b74e:	e014      	b.n	b77a <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
    else if (CAN_CS_STOPPED == *Can_pControllerState)
    b750:	9b00      	ldr	r3, [sp, #0]
    b752:	681b      	ldr	r3, [r3, #0]
    b754:	2b02      	cmp	r3, #2
    b756:	d110      	bne.n	b77a <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        if (TRUE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    b758:	9b01      	ldr	r3, [sp, #4]
    b75a:	789b      	ldrb	r3, [r3, #2]
    b75c:	4618      	mov	r0, r3
    b75e:	f002 f97b 	bl	da58 <FlexCAN_Ip_GetStartMode_Privileged>
    b762:	4603      	mov	r3, r0
    b764:	2b00      	cmp	r3, #0
    b766:	d008      	beq.n	b77a <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
            *Can_pControllerState = CAN_CS_STARTED;
    b768:	9b00      	ldr	r3, [sp, #0]
    b76a:	2201      	movs	r2, #1
    b76c:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STARTED);
    b76e:	9b01      	ldr	r3, [sp, #4]
    b770:	781b      	ldrb	r3, [r3, #0]
    b772:	2101      	movs	r1, #1
    b774:	4618      	mov	r0, r3
    b776:	f00b fc4b 	bl	17010 <CanIf_ControllerModeIndication>
}
    b77a:	bf00      	nop
    b77c:	b003      	add	sp, #12
    b77e:	f85d fb04 	ldr.w	pc, [sp], #4

0000b782 <Can_43_FLEXCAN_Ipw_ProcessHwObject>:
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_ConfigType * Can_pConfig,
        uint8 u8MbIdx,
        Can_43_FLEXCAN_MbType mbType
    )
    {
    b782:	b500      	push	{lr}
    b784:	b085      	sub	sp, #20
    b786:	9003      	str	r0, [sp, #12]
    b788:	9102      	str	r1, [sp, #8]
    b78a:	9300      	str	r3, [sp, #0]
    b78c:	4613      	mov	r3, r2
    b78e:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (mbType)
    b792:	9b00      	ldr	r3, [sp, #0]
    b794:	2b03      	cmp	r3, #3
    b796:	d009      	beq.n	b7ac <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x2a>
    b798:	9b00      	ldr	r3, [sp, #0]
    b79a:	2b03      	cmp	r3, #3
    b79c:	d821      	bhi.n	b7e2 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
    b79e:	9b00      	ldr	r3, [sp, #0]
    b7a0:	2b00      	cmp	r3, #0
    b7a2:	d00c      	beq.n	b7be <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x3c>
    b7a4:	9b00      	ldr	r3, [sp, #0]
    b7a6:	2b01      	cmp	r3, #1
    b7a8:	d012      	beq.n	b7d0 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x4e>
                break;
            }
            default:
            {
                /* prevent misra */
                break;
    b7aa:	e01a      	b.n	b7e2 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
                Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    b7ac:	9b02      	ldr	r3, [sp, #8]
    b7ae:	691b      	ldr	r3, [r3, #16]
    b7b0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    b7b4:	4619      	mov	r1, r3
    b7b6:	9803      	ldr	r0, [sp, #12]
    b7b8:	f7ff faf8 	bl	adac <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>
                break;
    b7bc:	e012      	b.n	b7e4 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    b7be:	9b02      	ldr	r3, [sp, #8]
    b7c0:	691b      	ldr	r3, [r3, #16]
    b7c2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    b7c6:	4619      	mov	r1, r3
    b7c8:	9803      	ldr	r0, [sp, #12]
    b7ca:	f7ff fb3b 	bl	ae44 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    b7ce:	e009      	b.n	b7e4 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                    Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    b7d0:	9b02      	ldr	r3, [sp, #8]
    b7d2:	691b      	ldr	r3, [r3, #16]
    b7d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    b7d8:	4619      	mov	r1, r3
    b7da:	9803      	ldr	r0, [sp, #12]
    b7dc:	f7ff fb32 	bl	ae44 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    b7e0:	e000      	b.n	b7e4 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                break;
    b7e2:	bf00      	nop
            }
        }
    }
    b7e4:	bf00      	nop
    b7e6:	b005      	add	sp, #20
    b7e8:	f85d fb04 	ldr.w	pc, [sp], #4

0000b7ec <Can_43_FLEXCAN_CommonIrqCallback>:
void Can_43_FLEXCAN_CommonIrqCallback(uint8 u8Instance,
                           Flexcan_Ip_EventType event,
                           uint32 u32buffIdx,
                           const Flexcan_Ip_StateType *driverState
                          )
{
    b7ec:	b500      	push	{lr}
    b7ee:	b085      	sub	sp, #20
    b7f0:	9102      	str	r1, [sp, #8]
    b7f2:	9201      	str	r2, [sp, #4]
    b7f4:	9300      	str	r3, [sp, #0]
    b7f6:	4603      	mov	r3, r0
    b7f8:	f88d 300f 	strb.w	r3, [sp, #15]
    else
    {
#endif /* CAN_43_FLEXCAN_FEATURE_HAS_ENHANCED_RX_FIFO */
    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        /* This callback is just used for interrupt buffter */
        if (FALSE == (driverState->mbs[u32buffIdx].isPolling))
    b7fc:	9a00      	ldr	r2, [sp, #0]
    b7fe:	9b01      	ldr	r3, [sp, #4]
    b800:	011b      	lsls	r3, r3, #4
    b802:	4413      	add	r3, r2
    b804:	3308      	adds	r3, #8
    b806:	781b      	ldrb	r3, [r3, #0]
    b808:	f083 0301 	eor.w	r3, r3, #1
    b80c:	b2db      	uxtb	r3, r3
    b80e:	2b00      	cmp	r3, #0
    b810:	d03b      	beq.n	b88a <Can_43_FLEXCAN_CommonIrqCallback+0x9e>
    b812:	9b02      	ldr	r3, [sp, #8]
    b814:	2b04      	cmp	r3, #4
    b816:	d83a      	bhi.n	b88e <Can_43_FLEXCAN_CommonIrqCallback+0xa2>
    b818:	a201      	add	r2, pc, #4	; (adr r2, b820 <Can_43_FLEXCAN_CommonIrqCallback+0x34>)
    b81a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b81e:	bf00      	nop
    b820:	0000b847 	.word	0x0000b847
    b824:	0000b859 	.word	0x0000b859
    b828:	0000b86b 	.word	0x0000b86b
    b82c:	0000b87b 	.word	0x0000b87b
    b830:	0000b835 	.word	0x0000b835
        {
            switch (event)
            {
                case FLEXCAN_EVENT_TX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_TX_NORMAL);
    b834:	9b01      	ldr	r3, [sp, #4]
    b836:	b2d9      	uxtb	r1, r3
    b838:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b83c:	2203      	movs	r2, #3
    b83e:	4618      	mov	r0, r3
    b840:	f7fe ff72 	bl	a728 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b844:	e024      	b.n	b890 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_NORMAL);
    b846:	9b01      	ldr	r3, [sp, #4]
    b848:	b2d9      	uxtb	r1, r3
    b84a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b84e:	2200      	movs	r2, #0
    b850:	4618      	mov	r0, r3
    b852:	f7fe ff69 	bl	a728 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b856:	e01b      	b.n	b890 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_LEGACY_FIFO);
    b858:	9b01      	ldr	r3, [sp, #4]
    b85a:	b2d9      	uxtb	r1, r3
    b85c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b860:	2201      	movs	r2, #1
    b862:	4618      	mov	r0, r3
    b864:	f7fe ff60 	bl	a728 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b868:	e012      	b.n	b890 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_WARNING:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 6U, CAN_RX_LEGACY_FIFO);
    b86a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b86e:	2201      	movs	r2, #1
    b870:	2106      	movs	r1, #6
    b872:	4618      	mov	r0, r3
    b874:	f7fe ff58 	bl	a728 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b878:	e00a      	b.n	b890 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_OVERFLOW:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 7U, CAN_RX_LEGACY_FIFO);
    b87a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b87e:	2201      	movs	r2, #1
    b880:	2107      	movs	r1, #7
    b882:	4618      	mov	r0, r3
    b884:	f7fe ff50 	bl	a728 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    b888:	e002      	b.n	b890 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                {
                    /* nothing to do */
                    break;
                }
            }
        }
    b88a:	bf00      	nop
    b88c:	e000      	b.n	b890 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                    break;
    b88e:	bf00      	nop
        Can_43_FLEXCAN_ProcessPNInterrupt(u8Instance);
    }
#endif /* (CAN_43_FLEXCAN_FEATURE_HAS_PRETENDED_NETWORKING == STD_ON) */
    (void)u32buffIdx;
    (void)driverState;
}
    b890:	bf00      	nop
    b892:	b005      	add	sp, #20
    b894:	f85d fb04 	ldr.w	pc, [sp], #4

0000b898 <Can_43_FLEXCAN_ErrorIrqCallback>:
void Can_43_FLEXCAN_ErrorIrqCallback(uint8 u8Instance,
                          Flexcan_Ip_EventType event,
                          uint32 u32ErrStatus,
                          const Flexcan_Ip_StateType *driverState
                         )
{
    b898:	b500      	push	{lr}
    b89a:	b085      	sub	sp, #20
    b89c:	9102      	str	r1, [sp, #8]
    b89e:	9201      	str	r2, [sp, #4]
    b8a0:	9300      	str	r3, [sp, #0]
    b8a2:	4603      	mov	r3, r0
    b8a4:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) driverState; /* not used yet */
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON)
    (void) u32ErrStatus; /* prevent compiler warning */
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON) */

    switch (event)
    b8a8:	9b02      	ldr	r3, [sp, #8]
    b8aa:	2b07      	cmp	r3, #7
    b8ac:	d105      	bne.n	b8ba <Can_43_FLEXCAN_ErrorIrqCallback+0x22>
        }
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON) */
        /* this function is called for both interrupt & polling */
        case FLEXCAN_EVENT_BUSOFF:
        {
            Can_43_FLEXCAN_ProcessBusOffInterrupt(u8Instance);
    b8ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b8b2:	4618      	mov	r0, r3
    b8b4:	f7fe ff7a 	bl	a7ac <Can_43_FLEXCAN_ProcessBusOffInterrupt>
            break;
    b8b8:	e000      	b.n	b8bc <Can_43_FLEXCAN_ErrorIrqCallback+0x24>
        }
        default:
        {
            /* nothing to do */
            break;
    b8ba:	bf00      	nop
        }
    }
}
    b8bc:	bf00      	nop
    b8be:	b005      	add	sp, #20
    b8c0:	f85d fb04 	ldr.w	pc, [sp], #4

0000b8c4 <FlexCAN_SetRxFifoGlobalMask>:
 *
 * @param[in]   base  The FlexCAN base address
 * @param[in]   Mask     Sets mask
 */
static inline void FlexCAN_SetRxFifoGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    b8c4:	b082      	sub	sp, #8
    b8c6:	9001      	str	r0, [sp, #4]
    b8c8:	9100      	str	r1, [sp, #0]
    (base->RXFGMASK) = Mask;
    b8ca:	9b01      	ldr	r3, [sp, #4]
    b8cc:	9a00      	ldr	r2, [sp, #0]
    b8ce:	649a      	str	r2, [r3, #72]	; 0x48
}
    b8d0:	bf00      	nop
    b8d2:	b002      	add	sp, #8
    b8d4:	4770      	bx	lr

0000b8d6 <FlexCAN_SetTDCOffset>:
 */
static inline void FlexCAN_SetTDCOffset(FLEXCAN_Type * base,
                                        boolean enable,
                                        uint8 offset
                                       )
{
    b8d6:	b084      	sub	sp, #16
    b8d8:	9001      	str	r0, [sp, #4]
    b8da:	460b      	mov	r3, r1
    b8dc:	f88d 3003 	strb.w	r3, [sp, #3]
    b8e0:	4613      	mov	r3, r2
    b8e2:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 tmp;

    tmp = base->FDCTRL;
    b8e6:	9b01      	ldr	r3, [sp, #4]
    b8e8:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    b8ec:	9303      	str	r3, [sp, #12]
    tmp &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    b8ee:	9b03      	ldr	r3, [sp, #12]
    b8f0:	f423 431f 	bic.w	r3, r3, #40704	; 0x9f00
    b8f4:	9303      	str	r3, [sp, #12]

    if (enable)
    b8f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b8fa:	2b00      	cmp	r3, #0
    b8fc:	d00b      	beq.n	b916 <FlexCAN_SetTDCOffset+0x40>
    {
        tmp = tmp | FLEXCAN_FDCTRL_TDCEN_MASK;
    b8fe:	9b03      	ldr	r3, [sp, #12]
    b900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    b904:	9303      	str	r3, [sp, #12]
        tmp = tmp | FLEXCAN_FDCTRL_TDCOFF(offset);
    b906:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b90a:	021b      	lsls	r3, r3, #8
    b90c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    b910:	9a03      	ldr	r2, [sp, #12]
    b912:	4313      	orrs	r3, r2
    b914:	9303      	str	r3, [sp, #12]
    }

    base->FDCTRL = tmp;
    b916:	9b01      	ldr	r3, [sp, #4]
    b918:	9a03      	ldr	r2, [sp, #12]
    b91a:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    b91e:	bf00      	nop
    b920:	b004      	add	sp, #16
    b922:	4770      	bx	lr

0000b924 <FlexCAN_IsEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsEnabled(const FLEXCAN_Type * pBase)
{
    b924:	b082      	sub	sp, #8
    b926:	9001      	str	r0, [sp, #4]
    return (((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U) ? FALSE : TRUE;
    b928:	9b01      	ldr	r3, [sp, #4]
    b92a:	681b      	ldr	r3, [r3, #0]
    b92c:	43db      	mvns	r3, r3
    b92e:	0fdb      	lsrs	r3, r3, #31
    b930:	b2db      	uxtb	r3, r3
}
    b932:	4618      	mov	r0, r3
    b934:	b002      	add	sp, #8
    b936:	4770      	bx	lr

0000b938 <FlexCAN_SetFDEnabled>:
 */
static inline void FlexCAN_SetFDEnabled(FLEXCAN_Type * base,
                                        boolean enableFD,
                                        boolean enableBRS
                                       )
{
    b938:	b082      	sub	sp, #8
    b93a:	9001      	str	r0, [sp, #4]
    b93c:	460b      	mov	r3, r1
    b93e:	f88d 3003 	strb.w	r3, [sp, #3]
    b942:	4613      	mov	r3, r2
    b944:	f88d 3002 	strb.w	r3, [sp, #2]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FDEN_MASK) | FLEXCAN_MCR_FDEN(enableFD ? 1UL : 0UL);
    b948:	9b01      	ldr	r3, [sp, #4]
    b94a:	681b      	ldr	r3, [r3, #0]
    b94c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    b950:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b954:	2a00      	cmp	r2, #0
    b956:	d002      	beq.n	b95e <FlexCAN_SetFDEnabled+0x26>
    b958:	f44f 6200 	mov.w	r2, #2048	; 0x800
    b95c:	e000      	b.n	b960 <FlexCAN_SetFDEnabled+0x28>
    b95e:	2200      	movs	r2, #0
    b960:	431a      	orrs	r2, r3
    b962:	9b01      	ldr	r3, [sp, #4]
    b964:	601a      	str	r2, [r3, #0]

    /* Enable BitRate Switch support from BRS_TX_MB field or ignore it */
    base->FDCTRL = (base->FDCTRL & ~FLEXCAN_FDCTRL_FDRATE_MASK) | FLEXCAN_FDCTRL_FDRATE(enableBRS ? 1UL : 0UL);
    b966:	9b01      	ldr	r3, [sp, #4]
    b968:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    b96c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    b970:	f89d 2002 	ldrb.w	r2, [sp, #2]
    b974:	2a00      	cmp	r2, #0
    b976:	d002      	beq.n	b97e <FlexCAN_SetFDEnabled+0x46>
    b978:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    b97c:	e000      	b.n	b980 <FlexCAN_SetFDEnabled+0x48>
    b97e:	2200      	movs	r2, #0
    b980:	431a      	orrs	r2, r3
    b982:	9b01      	ldr	r3, [sp, #4]
    b984:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00

    /* Disable Transmission Delay Compensation by default */
    base->FDCTRL &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    b988:	9b01      	ldr	r3, [sp, #4]
    b98a:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    b98e:	f423 421f 	bic.w	r2, r3, #40704	; 0x9f00
    b992:	9b01      	ldr	r3, [sp, #4]
    b994:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    b998:	bf00      	nop
    b99a:	b002      	add	sp, #8
    b99c:	4770      	bx	lr

0000b99e <FlexCAN_SetListenOnlyMode>:
 *
 * @param   base    The FlexCAN base address
 * @param   enable  TRUE to enable; FALSE to disable
 */
static inline void FlexCAN_SetListenOnlyMode(FLEXCAN_Type * base, boolean enableListenOnly)
{
    b99e:	b082      	sub	sp, #8
    b9a0:	9001      	str	r0, [sp, #4]
    b9a2:	460b      	mov	r3, r1
    b9a4:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(enableListenOnly ? 1UL : 0UL);
    b9a8:	9b01      	ldr	r3, [sp, #4]
    b9aa:	685b      	ldr	r3, [r3, #4]
    b9ac:	f023 0308 	bic.w	r3, r3, #8
    b9b0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b9b4:	2a00      	cmp	r2, #0
    b9b6:	d001      	beq.n	b9bc <FlexCAN_SetListenOnlyMode+0x1e>
    b9b8:	2208      	movs	r2, #8
    b9ba:	e000      	b.n	b9be <FlexCAN_SetListenOnlyMode+0x20>
    b9bc:	2200      	movs	r2, #0
    b9be:	431a      	orrs	r2, r3
    b9c0:	9b01      	ldr	r3, [sp, #4]
    b9c2:	605a      	str	r2, [r3, #4]
}
    b9c4:	bf00      	nop
    b9c6:	b002      	add	sp, #8
    b9c8:	4770      	bx	lr

0000b9ca <FlexCAN_UnlockRxMsgBuff>:
 * @brief Unlocks the FlexCAN Rx message buffer.
 *
 * @param   base     The FlexCAN base address
 */
static inline void FlexCAN_UnlockRxMsgBuff(const FLEXCAN_Type * base)
{
    b9ca:	b082      	sub	sp, #8
    b9cc:	9001      	str	r0, [sp, #4]
    /* Unlock the mailbox by reading the free running timer */
    (void)base->TIMER;
    b9ce:	9b01      	ldr	r3, [sp, #4]
    b9d0:	689b      	ldr	r3, [r3, #8]
}
    b9d2:	bf00      	nop
    b9d4:	b002      	add	sp, #8
    b9d6:	4770      	bx	lr

0000b9d8 <FlexCAN_ClearMsgBuffIntStatusFlag>:
 *
 * @param   base        The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 */
static inline void FlexCAN_ClearMsgBuffIntStatusFlag(FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    b9d8:	b084      	sub	sp, #16
    b9da:	9001      	str	r0, [sp, #4]
    b9dc:	9100      	str	r1, [sp, #0]
    uint32 flag = ((uint32)1U << (msgBuffIdx % 32U));
    b9de:	9b00      	ldr	r3, [sp, #0]
    b9e0:	f003 031f 	and.w	r3, r3, #31
    b9e4:	2201      	movs	r2, #1
    b9e6:	fa02 f303 	lsl.w	r3, r2, r3
    b9ea:	9303      	str	r3, [sp, #12]

    /* Clear the corresponding message buffer interrupt flag*/
    if (msgBuffIdx < 32U)
    b9ec:	9b00      	ldr	r3, [sp, #0]
    b9ee:	2b1f      	cmp	r3, #31
    b9f0:	d802      	bhi.n	b9f8 <FlexCAN_ClearMsgBuffIntStatusFlag+0x20>
    {
        (base->IFLAG1) = (flag);
    b9f2:	9b01      	ldr	r3, [sp, #4]
    b9f4:	9a03      	ldr	r2, [sp, #12]
    b9f6:	631a      	str	r2, [r3, #48]	; 0x30
    else
    {
        (base->IFLAG4) = (flag);
    }
#endif
}
    b9f8:	bf00      	nop
    b9fa:	b004      	add	sp, #16
    b9fc:	4770      	bx	lr

0000b9fe <FlexCAN_GetBuffStatusFlag>:
 * @param   base                The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 * @return  flag        The value of interrupt flag of the message buffer.
 */
static inline uint8 FlexCAN_GetBuffStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    b9fe:	b084      	sub	sp, #16
    ba00:	9001      	str	r0, [sp, #4]
    ba02:	9100      	str	r1, [sp, #0]
    uint32 flag = 0U;
    ba04:	2300      	movs	r3, #0
    ba06:	9303      	str	r3, [sp, #12]

    if (msgBuffIdx < 32U)
    ba08:	9b00      	ldr	r3, [sp, #0]
    ba0a:	2b1f      	cmp	r3, #31
    ba0c:	d80e      	bhi.n	ba2c <FlexCAN_GetBuffStatusFlag+0x2e>
    {
        flag = ((base->IFLAG1 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    ba0e:	9b01      	ldr	r3, [sp, #4]
    ba10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ba12:	9b00      	ldr	r3, [sp, #0]
    ba14:	f003 031f 	and.w	r3, r3, #31
    ba18:	2101      	movs	r1, #1
    ba1a:	fa01 f303 	lsl.w	r3, r1, r3
    ba1e:	401a      	ands	r2, r3
    ba20:	9b00      	ldr	r3, [sp, #0]
    ba22:	f003 031f 	and.w	r3, r3, #31
    ba26:	fa22 f303 	lsr.w	r3, r2, r3
    ba2a:	9303      	str	r3, [sp, #12]
    {
        flag = ((base->IFLAG4 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    }
#endif

    return (uint8)flag;
    ba2c:	9b03      	ldr	r3, [sp, #12]
    ba2e:	b2db      	uxtb	r3, r3
}
    ba30:	4618      	mov	r0, r3
    ba32:	b004      	add	sp, #16
    ba34:	4770      	bx	lr

0000ba36 <FlexCAN_SetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetFDTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    ba36:	b082      	sub	sp, #8
    ba38:	9001      	str	r0, [sp, #4]
    ba3a:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* Set FlexCAN time segments*/
    (base->FDCBT) = ((base->FDCBT) & ~((FLEXCAN_FDCBT_FPROPSEG_MASK | FLEXCAN_FDCBT_FPSEG2_MASK |
    ba3c:	9b01      	ldr	r3, [sp, #4]
    ba3e:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    ba42:	4b15      	ldr	r3, [pc, #84]	; (ba98 <FlexCAN_SetFDTimeSegments+0x62>)
    ba44:	4013      	ands	r3, r2
    ba46:	9a01      	ldr	r2, [sp, #4]
    ba48:	f8c2 3c04 	str.w	r3, [r2, #3076]	; 0xc04
                                        FLEXCAN_FDCBT_FPSEG1_MASK | FLEXCAN_FDCBT_FPRESDIV_MASK
                                       ) | FLEXCAN_FDCBT_FRJW_MASK
                                      )
                    );

    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    ba4c:	9b01      	ldr	r3, [sp, #4]
    ba4e:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    ba52:	9b00      	ldr	r3, [sp, #0]
    ba54:	681b      	ldr	r3, [r3, #0]
    ba56:	029b      	lsls	r3, r3, #10
    ba58:	f403 41f8 	and.w	r1, r3, #31744	; 0x7c00
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    ba5c:	9b00      	ldr	r3, [sp, #0]
    ba5e:	689b      	ldr	r3, [r3, #8]
    ba60:	f003 0307 	and.w	r3, r3, #7
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    ba64:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    ba66:	9b00      	ldr	r3, [sp, #0]
    ba68:	685b      	ldr	r3, [r3, #4]
    ba6a:	015b      	lsls	r3, r3, #5
    ba6c:	b2db      	uxtb	r3, r3
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    ba6e:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    ba70:	9b00      	ldr	r3, [sp, #0]
    ba72:	68db      	ldr	r3, [r3, #12]
    ba74:	0518      	lsls	r0, r3, #20
    ba76:	4b09      	ldr	r3, [pc, #36]	; (ba9c <FlexCAN_SetFDTimeSegments+0x66>)
    ba78:	4003      	ands	r3, r0
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    ba7a:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FRJW(timeSeg->rJumpwidth)
    ba7c:	9b00      	ldr	r3, [sp, #0]
    ba7e:	691b      	ldr	r3, [r3, #16]
    ba80:	041b      	lsls	r3, r3, #16
    ba82:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    ba86:	430b      	orrs	r3, r1
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    ba88:	431a      	orrs	r2, r3
    ba8a:	9b01      	ldr	r3, [sp, #4]
    ba8c:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
                                     )
                    );
}
    ba90:	bf00      	nop
    ba92:	b002      	add	sp, #8
    ba94:	4770      	bx	lr
    ba96:	bf00      	nop
    ba98:	c0088318 	.word	0xc0088318
    ba9c:	3ff00000 	.word	0x3ff00000

0000baa0 <FlexCAN_SetTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    baa0:	b082      	sub	sp, #8
    baa2:	9001      	str	r0, [sp, #4]
    baa4:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    (base->CTRL1) = ((base->CTRL1) & ~((FLEXCAN_CTRL1_PROPSEG_MASK | FLEXCAN_CTRL1_PSEG2_MASK |
    baa6:	9b01      	ldr	r3, [sp, #4]
    baa8:	685a      	ldr	r2, [r3, #4]
    baaa:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    baae:	4013      	ands	r3, r2
    bab0:	9a01      	ldr	r2, [sp, #4]
    bab2:	6053      	str	r3, [r2, #4]
                                        FLEXCAN_CTRL1_PSEG1_MASK | FLEXCAN_CTRL1_PRESDIV_MASK
                                       ) | FLEXCAN_CTRL1_RJW_MASK
                                      )
                    );

    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    bab4:	9b01      	ldr	r3, [sp, #4]
    bab6:	685a      	ldr	r2, [r3, #4]
    bab8:	9b00      	ldr	r3, [sp, #0]
    baba:	681b      	ldr	r3, [r3, #0]
    babc:	f003 0107 	and.w	r1, r3, #7
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    bac0:	9b00      	ldr	r3, [sp, #0]
    bac2:	689b      	ldr	r3, [r3, #8]
    bac4:	041b      	lsls	r3, r3, #16
    bac6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    baca:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    bacc:	9b00      	ldr	r3, [sp, #0]
    bace:	685b      	ldr	r3, [r3, #4]
    bad0:	04db      	lsls	r3, r3, #19
    bad2:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    bad6:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    bad8:	9b00      	ldr	r3, [sp, #0]
    bada:	68db      	ldr	r3, [r3, #12]
    badc:	061b      	lsls	r3, r3, #24
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    bade:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_RJW(timeSeg->rJumpwidth)
    bae0:	9b00      	ldr	r3, [sp, #0]
    bae2:	691b      	ldr	r3, [r3, #16]
    bae4:	059b      	lsls	r3, r3, #22
    bae6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    baea:	430b      	orrs	r3, r1
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    baec:	431a      	orrs	r2, r3
    baee:	9b01      	ldr	r3, [sp, #4]
    baf0:	605a      	str	r2, [r3, #4]
                                     )
                    );
}
    baf2:	bf00      	nop
    baf4:	b002      	add	sp, #8
    baf6:	4770      	bx	lr

0000baf8 <FlexCAN_SetExtendedTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetExtendedTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    baf8:	b082      	sub	sp, #8
    bafa:	9001      	str	r0, [sp, #4]
    bafc:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* If extended bit time definitions are enabled, use CBT register */
    (base->CBT) = ((base->CBT) & ~((FLEXCAN_CBT_EPROPSEG_MASK | FLEXCAN_CBT_EPSEG2_MASK |
    bafe:	9b01      	ldr	r3, [sp, #4]
    bb00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bb02:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
    bb06:	9b01      	ldr	r3, [sp, #4]
    bb08:	651a      	str	r2, [r3, #80]	; 0x50
                                    FLEXCAN_CBT_EPSEG1_MASK | FLEXCAN_CBT_EPRESDIV_MASK
                                   ) | FLEXCAN_CBT_ERJW_MASK
                                  )
                  );

    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    bb0a:	9b01      	ldr	r3, [sp, #4]
    bb0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    bb0e:	9b00      	ldr	r3, [sp, #0]
    bb10:	681b      	ldr	r3, [r3, #0]
    bb12:	029b      	lsls	r3, r3, #10
    bb14:	b299      	uxth	r1, r3
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    bb16:	9b00      	ldr	r3, [sp, #0]
    bb18:	689b      	ldr	r3, [r3, #8]
    bb1a:	f003 031f 	and.w	r3, r3, #31
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    bb1e:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    bb20:	9b00      	ldr	r3, [sp, #0]
    bb22:	685b      	ldr	r3, [r3, #4]
    bb24:	015b      	lsls	r3, r3, #5
    bb26:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    bb2a:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    bb2c:	9b00      	ldr	r3, [sp, #0]
    bb2e:	68db      	ldr	r3, [r3, #12]
    bb30:	0558      	lsls	r0, r3, #21
    bb32:	4b07      	ldr	r3, [pc, #28]	; (bb50 <FlexCAN_SetExtendedTimeSegments+0x58>)
    bb34:	4003      	ands	r3, r0
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    bb36:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_ERJW(timeSeg->rJumpwidth)
    bb38:	9b00      	ldr	r3, [sp, #0]
    bb3a:	691b      	ldr	r3, [r3, #16]
    bb3c:	041b      	lsls	r3, r3, #16
    bb3e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    bb42:	430b      	orrs	r3, r1
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    bb44:	431a      	orrs	r2, r3
    bb46:	9b01      	ldr	r3, [sp, #4]
    bb48:	651a      	str	r2, [r3, #80]	; 0x50
                                 )
                  );
}
    bb4a:	bf00      	nop
    bb4c:	b002      	add	sp, #8
    bb4e:	4770      	bx	lr
    bb50:	7fe00000 	.word	0x7fe00000

0000bb54 <FlexCAN_GetExtendedTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetExtendedTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bb54:	b082      	sub	sp, #8
    bb56:	9001      	str	r0, [sp, #4]
    bb58:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CBT) & FLEXCAN_CBT_EPRESDIV_MASK) >> FLEXCAN_CBT_EPRESDIV_SHIFT;
    bb5a:	9b01      	ldr	r3, [sp, #4]
    bb5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bb5e:	0d5b      	lsrs	r3, r3, #21
    bb60:	f3c3 0209 	ubfx	r2, r3, #0, #10
    bb64:	9b00      	ldr	r3, [sp, #0]
    bb66:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CBT) & FLEXCAN_CBT_EPROPSEG_MASK) >> FLEXCAN_CBT_EPROPSEG_SHIFT;
    bb68:	9b01      	ldr	r3, [sp, #4]
    bb6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bb6c:	0a9b      	lsrs	r3, r3, #10
    bb6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    bb72:	9b00      	ldr	r3, [sp, #0]
    bb74:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CBT) & FLEXCAN_CBT_EPSEG1_MASK) >> FLEXCAN_CBT_EPSEG1_SHIFT;
    bb76:	9b01      	ldr	r3, [sp, #4]
    bb78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bb7a:	095b      	lsrs	r3, r3, #5
    bb7c:	f003 021f 	and.w	r2, r3, #31
    bb80:	9b00      	ldr	r3, [sp, #0]
    bb82:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CBT) & FLEXCAN_CBT_EPSEG2_MASK) >> FLEXCAN_CBT_EPSEG2_SHIFT;
    bb84:	9b01      	ldr	r3, [sp, #4]
    bb86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bb88:	f003 021f 	and.w	r2, r3, #31
    bb8c:	9b00      	ldr	r3, [sp, #0]
    bb8e:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CBT) & FLEXCAN_CBT_ERJW_MASK) >> FLEXCAN_CBT_ERJW_SHIFT;
    bb90:	9b01      	ldr	r3, [sp, #4]
    bb92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bb94:	0c1b      	lsrs	r3, r3, #16
    bb96:	f003 021f 	and.w	r2, r3, #31
    bb9a:	9b00      	ldr	r3, [sp, #0]
    bb9c:	611a      	str	r2, [r3, #16]
}
    bb9e:	bf00      	nop
    bba0:	b002      	add	sp, #8
    bba2:	4770      	bx	lr

0000bba4 <FlexCAN_GetTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bba4:	b082      	sub	sp, #8
    bba6:	9001      	str	r0, [sp, #4]
    bba8:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CTRL1) & FLEXCAN_CTRL1_PRESDIV_MASK) >> FLEXCAN_CTRL1_PRESDIV_SHIFT;
    bbaa:	9b01      	ldr	r3, [sp, #4]
    bbac:	685b      	ldr	r3, [r3, #4]
    bbae:	0e1b      	lsrs	r3, r3, #24
    bbb0:	b2da      	uxtb	r2, r3
    bbb2:	9b00      	ldr	r3, [sp, #0]
    bbb4:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CTRL1) & FLEXCAN_CTRL1_PROPSEG_MASK) >> FLEXCAN_CTRL1_PROPSEG_SHIFT;
    bbb6:	9b01      	ldr	r3, [sp, #4]
    bbb8:	685b      	ldr	r3, [r3, #4]
    bbba:	f003 0207 	and.w	r2, r3, #7
    bbbe:	9b00      	ldr	r3, [sp, #0]
    bbc0:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG1_MASK) >> FLEXCAN_CTRL1_PSEG1_SHIFT;
    bbc2:	9b01      	ldr	r3, [sp, #4]
    bbc4:	685b      	ldr	r3, [r3, #4]
    bbc6:	0cdb      	lsrs	r3, r3, #19
    bbc8:	f003 0207 	and.w	r2, r3, #7
    bbcc:	9b00      	ldr	r3, [sp, #0]
    bbce:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG2_MASK) >> FLEXCAN_CTRL1_PSEG2_SHIFT;
    bbd0:	9b01      	ldr	r3, [sp, #4]
    bbd2:	685b      	ldr	r3, [r3, #4]
    bbd4:	0c1b      	lsrs	r3, r3, #16
    bbd6:	f003 0207 	and.w	r2, r3, #7
    bbda:	9b00      	ldr	r3, [sp, #0]
    bbdc:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CTRL1) & FLEXCAN_CTRL1_RJW_MASK) >> FLEXCAN_CTRL1_RJW_SHIFT;
    bbde:	9b01      	ldr	r3, [sp, #4]
    bbe0:	685b      	ldr	r3, [r3, #4]
    bbe2:	0d9b      	lsrs	r3, r3, #22
    bbe4:	f003 0203 	and.w	r2, r3, #3
    bbe8:	9b00      	ldr	r3, [sp, #0]
    bbea:	611a      	str	r2, [r3, #16]
}
    bbec:	bf00      	nop
    bbee:	b002      	add	sp, #8
    bbf0:	4770      	bx	lr

0000bbf2 <FlexCAN_GetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetFDTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    bbf2:	b082      	sub	sp, #8
    bbf4:	9001      	str	r0, [sp, #4]
    bbf6:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->FDCBT) & FLEXCAN_FDCBT_FPRESDIV_MASK) >> FLEXCAN_FDCBT_FPRESDIV_SHIFT;
    bbf8:	9b01      	ldr	r3, [sp, #4]
    bbfa:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bbfe:	0d1b      	lsrs	r3, r3, #20
    bc00:	f3c3 0209 	ubfx	r2, r3, #0, #10
    bc04:	9b00      	ldr	r3, [sp, #0]
    bc06:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->FDCBT) & FLEXCAN_FDCBT_FPROPSEG_MASK) >> FLEXCAN_FDCBT_FPROPSEG_SHIFT;
    bc08:	9b01      	ldr	r3, [sp, #4]
    bc0a:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bc0e:	0a9b      	lsrs	r3, r3, #10
    bc10:	f003 021f 	and.w	r2, r3, #31
    bc14:	9b00      	ldr	r3, [sp, #0]
    bc16:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG1_MASK) >> FLEXCAN_FDCBT_FPSEG1_SHIFT;
    bc18:	9b01      	ldr	r3, [sp, #4]
    bc1a:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bc1e:	095b      	lsrs	r3, r3, #5
    bc20:	f003 0207 	and.w	r2, r3, #7
    bc24:	9b00      	ldr	r3, [sp, #0]
    bc26:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG2_MASK) >> FLEXCAN_FDCBT_FPSEG2_SHIFT;
    bc28:	9b01      	ldr	r3, [sp, #4]
    bc2a:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bc2e:	f003 0207 	and.w	r2, r3, #7
    bc32:	9b00      	ldr	r3, [sp, #0]
    bc34:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->FDCBT) & FLEXCAN_FDCBT_FRJW_MASK) >> FLEXCAN_FDCBT_FRJW_SHIFT;
    bc36:	9b01      	ldr	r3, [sp, #4]
    bc38:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    bc3c:	0c1b      	lsrs	r3, r3, #16
    bc3e:	f003 0207 	and.w	r2, r3, #7
    bc42:	9b00      	ldr	r3, [sp, #0]
    bc44:	611a      	str	r2, [r3, #16]
}
    bc46:	bf00      	nop
    bc48:	b002      	add	sp, #8
    bc4a:	4770      	bx	lr

0000bc4c <FlexCAN_IsExCbtEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsExCbtEnabled(const FLEXCAN_Type * pBase)
{
    bc4c:	b082      	sub	sp, #8
    bc4e:	9001      	str	r0, [sp, #4]
    return (0U == ((pBase->CBT & FLEXCAN_CBT_BTF_MASK) >> FLEXCAN_CBT_BTF_SHIFT)) ? FALSE : TRUE;
    bc50:	9b01      	ldr	r3, [sp, #4]
    bc52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bc54:	0fdb      	lsrs	r3, r3, #31
    bc56:	b2db      	uxtb	r3, r3
}
    bc58:	4618      	mov	r0, r3
    bc5a:	b002      	add	sp, #8
    bc5c:	4770      	bx	lr

0000bc5e <FlexCAN_EnableExtCbt>:
 *
 * @param   base    The FlexCAN base address
 * @param   enableCBT Enable/Disable use of Extent Time Segments
 */
static inline void FlexCAN_EnableExtCbt(FLEXCAN_Type * base, boolean enableCBT)
{   /* Enable the use of extended bit time definitions */
    bc5e:	b082      	sub	sp, #8
    bc60:	9001      	str	r0, [sp, #4]
    bc62:	460b      	mov	r3, r1
    bc64:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CBT = (base->CBT & ~FLEXCAN_CBT_BTF_MASK) | FLEXCAN_CBT_BTF(enableCBT ? 1UL : 0UL);
    bc68:	9b01      	ldr	r3, [sp, #4]
    bc6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bc6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    bc70:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bc74:	2a00      	cmp	r2, #0
    bc76:	d002      	beq.n	bc7e <FlexCAN_EnableExtCbt+0x20>
    bc78:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    bc7c:	e000      	b.n	bc80 <FlexCAN_EnableExtCbt+0x22>
    bc7e:	2200      	movs	r2, #0
    bc80:	431a      	orrs	r2, r3
    bc82:	9b01      	ldr	r3, [sp, #4]
    bc84:	651a      	str	r2, [r3, #80]	; 0x50
}
    bc86:	bf00      	nop
    bc88:	b002      	add	sp, #8
    bc8a:	4770      	bx	lr

0000bc8c <FlexCAN_SetSelfReception>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Enable/Disable Self Reception
 */
static inline void FlexCAN_SetSelfReception(FLEXCAN_Type * base, boolean enable)
{
    bc8c:	b082      	sub	sp, #8
    bc8e:	9001      	str	r0, [sp, #4]
    bc90:	460b      	mov	r3, r1
    bc92:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    bc96:	9b01      	ldr	r3, [sp, #4]
    bc98:	681b      	ldr	r3, [r3, #0]
    bc9a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    bc9e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bca2:	2a00      	cmp	r2, #0
    bca4:	d001      	beq.n	bcaa <FlexCAN_SetSelfReception+0x1e>
    bca6:	2200      	movs	r2, #0
    bca8:	e001      	b.n	bcae <FlexCAN_SetSelfReception+0x22>
    bcaa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    bcae:	431a      	orrs	r2, r3
    bcb0:	9b01      	ldr	r3, [sp, #4]
    bcb2:	601a      	str	r2, [r3, #0]
}
    bcb4:	bf00      	nop
    bcb6:	b002      	add	sp, #8
    bcb8:	4770      	bx	lr

0000bcba <FlexCAN_IsFDEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsFDEnabled(const FLEXCAN_Type * base)
{
    bcba:	b082      	sub	sp, #8
    bcbc:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    bcbe:	9b01      	ldr	r3, [sp, #4]
    bcc0:	681b      	ldr	r3, [r3, #0]
    bcc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    bcc6:	2b00      	cmp	r3, #0
    bcc8:	bf14      	ite	ne
    bcca:	2301      	movne	r3, #1
    bccc:	2300      	moveq	r3, #0
    bcce:	b2db      	uxtb	r3, r3
}
    bcd0:	4618      	mov	r0, r3
    bcd2:	b002      	add	sp, #8
    bcd4:	4770      	bx	lr

0000bcd6 <FlexCAN_IsListenOnlyModeEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsListenOnlyModeEnabled(const FLEXCAN_Type * base)
{
    bcd6:	b082      	sub	sp, #8
    bcd8:	9001      	str	r0, [sp, #4]
    return (((base->CTRL1 & (FLEXCAN_CTRL1_LOM_MASK)) != 0U) ? TRUE : FALSE);
    bcda:	9b01      	ldr	r3, [sp, #4]
    bcdc:	685b      	ldr	r3, [r3, #4]
    bcde:	f003 0308 	and.w	r3, r3, #8
    bce2:	2b00      	cmp	r3, #0
    bce4:	bf14      	ite	ne
    bce6:	2301      	movne	r3, #1
    bce8:	2300      	moveq	r3, #0
    bcea:	b2db      	uxtb	r3, r3
}
    bcec:	4618      	mov	r0, r3
    bcee:	b002      	add	sp, #8
    bcf0:	4770      	bx	lr

0000bcf2 <RxFifoOcuppiedLastMsgBuff>:
 *
 * @param   x    Number of Configured RxFIFO Filters
 * @return  number of last MB occupied by RxFIFO
 */
static inline uint32 RxFifoOcuppiedLastMsgBuff(uint8 x)
{
    bcf2:	b082      	sub	sp, #8
    bcf4:	4603      	mov	r3, r0
    bcf6:	f88d 3007 	strb.w	r3, [sp, #7]
    return 5U + (((((uint32)x) + 1U) * 8U) / 4U);
    bcfa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bcfe:	3301      	adds	r3, #1
    bd00:	00db      	lsls	r3, r3, #3
    bd02:	089b      	lsrs	r3, r3, #2
    bd04:	3305      	adds	r3, #5
}
    bd06:	4618      	mov	r0, r3
    bd08:	b002      	add	sp, #8
    bd0a:	4770      	bx	lr

0000bd0c <FlexCAN_SetClkSrc>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Specifies if The CAN engine clock source is the oscillator clock(FALSE) or peripheral clock(TRUE).
 */
static inline void FlexCAN_SetClkSrc(FLEXCAN_Type * base, boolean enable)
{
    bd0c:	b082      	sub	sp, #8
    bd0e:	9001      	str	r0, [sp, #4]
    bd10:	460b      	mov	r3, r1
    bd12:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_CLKSRC_MASK) | FLEXCAN_CTRL1_CLKSRC(enable ? 1UL : 0UL);
    bd16:	9b01      	ldr	r3, [sp, #4]
    bd18:	685b      	ldr	r3, [r3, #4]
    bd1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    bd1e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bd22:	2a00      	cmp	r2, #0
    bd24:	d002      	beq.n	bd2c <FlexCAN_SetClkSrc+0x20>
    bd26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    bd2a:	e000      	b.n	bd2e <FlexCAN_SetClkSrc+0x22>
    bd2c:	2200      	movs	r2, #0
    bd2e:	431a      	orrs	r2, r3
    bd30:	9b01      	ldr	r3, [sp, #4]
    bd32:	605a      	str	r2, [r3, #4]
}
    bd34:	bf00      	nop
    bd36:	b002      	add	sp, #8
    bd38:	4770      	bx	lr

0000bd3a <FlexCAN_GetMsgBuffIntStatusFlag>:
 * @param   base  The FlexCAN base address
 * @param   msgBuffIdx       Index of the message buffer
 * @return  the individual Message Buffer interrupt flag (0 and 1 are the flag value)
 */
static inline uint8 FlexCAN_GetMsgBuffIntStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    bd3a:	b084      	sub	sp, #16
    bd3c:	9001      	str	r0, [sp, #4]
    bd3e:	9100      	str	r1, [sp, #0]
    /* TODO: This need to be protected multithread access*/
    uint8 flag = 0;
    bd40:	2300      	movs	r3, #0
    bd42:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 mask;

    if (msgBuffIdx < 32U)
    bd46:	9b00      	ldr	r3, [sp, #0]
    bd48:	2b1f      	cmp	r3, #31
    bd4a:	d810      	bhi.n	bd6e <FlexCAN_GetMsgBuffIntStatusFlag+0x34>
    {
        mask = base->IMASK1 & FLEXCAN_IMASK1_BUF31TO0M_MASK;
    bd4c:	9b01      	ldr	r3, [sp, #4]
    bd4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bd50:	9302      	str	r3, [sp, #8]
        flag = (uint8)(((base->IFLAG1 & mask) >> (msgBuffIdx % 32U)) & 1U);
    bd52:	9b01      	ldr	r3, [sp, #4]
    bd54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    bd56:	9b02      	ldr	r3, [sp, #8]
    bd58:	401a      	ands	r2, r3
    bd5a:	9b00      	ldr	r3, [sp, #0]
    bd5c:	f003 031f 	and.w	r3, r3, #31
    bd60:	fa22 f303 	lsr.w	r3, r2, r3
    bd64:	b2db      	uxtb	r3, r3
    bd66:	f003 0301 	and.w	r3, r3, #1
    bd6a:	f88d 300f 	strb.w	r3, [sp, #15]
        mask = base->IMASK4 & FLEXCAN_IMASK4_BUF127TO96M_MASK;
        flag = (uint8)(((base->IFLAG4 & mask) >> (msgBuffIdx % 32U)) & 1U);
    }
#endif

    return flag;
    bd6e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    bd72:	4618      	mov	r0, r3
    bd74:	b004      	add	sp, #16
    bd76:	4770      	bx	lr

0000bd78 <FlexCAN_SetRxMsgBuffGlobalMask>:
 *
 * @param   base  The FlexCAN base address
 * @param   Mask  Mask Value
 */
static inline void FlexCAN_SetRxMsgBuffGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    bd78:	b082      	sub	sp, #8
    bd7a:	9001      	str	r0, [sp, #4]
    bd7c:	9100      	str	r1, [sp, #0]
    (base->RXMGMASK) = Mask;
    bd7e:	9b01      	ldr	r3, [sp, #4]
    bd80:	9a00      	ldr	r2, [sp, #0]
    bd82:	611a      	str	r2, [r3, #16]
}
    bd84:	bf00      	nop
    bd86:	b002      	add	sp, #8
    bd88:	4770      	bx	lr

0000bd8a <FlexCAN_SetRxIndividualMask>:
 */
static inline void FlexCAN_SetRxIndividualMask(FLEXCAN_Type * base,
                                               uint32 msgBuffIdx,
                                               uint32 mask
                                              )
{
    bd8a:	b084      	sub	sp, #16
    bd8c:	9003      	str	r0, [sp, #12]
    bd8e:	9102      	str	r1, [sp, #8]
    bd90:	9201      	str	r2, [sp, #4]
    base->RXIMR[msgBuffIdx] = mask;
    bd92:	9b03      	ldr	r3, [sp, #12]
    bd94:	9a02      	ldr	r2, [sp, #8]
    bd96:	f502 7208 	add.w	r2, r2, #544	; 0x220
    bd9a:	9901      	ldr	r1, [sp, #4]
    bd9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    bda0:	bf00      	nop
    bda2:	b004      	add	sp, #16
    bda4:	4770      	bx	lr

0000bda6 <FlexCAN_SetTxArbitrationStartDelay>:
 *
 * @param   base  The FlexCAN base address
 * @param   tasd  The Tx arbitration start delay value
 */
static inline void FlexCAN_SetTxArbitrationStartDelay(FLEXCAN_Type * base, uint8 tasd)
{
    bda6:	b082      	sub	sp, #8
    bda8:	9001      	str	r0, [sp, #4]
    bdaa:	460b      	mov	r3, r1
    bdac:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_TASD_MASK) | FLEXCAN_CTRL2_TASD(tasd);
    bdb0:	9b01      	ldr	r3, [sp, #4]
    bdb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    bdb4:	f423 0278 	bic.w	r2, r3, #16252928	; 0xf80000
    bdb8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bdbc:	04db      	lsls	r3, r3, #19
    bdbe:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
    bdc2:	431a      	orrs	r2, r3
    bdc4:	9b01      	ldr	r3, [sp, #4]
    bdc6:	635a      	str	r2, [r3, #52]	; 0x34
}
    bdc8:	bf00      	nop
    bdca:	b002      	add	sp, #8
    bdcc:	4770      	bx	lr

0000bdce <FlexCAN_SetRxMaskType>:
 *
 * @param   base  The FlexCAN base address
 * @param   type         The FlexCAN Rx mask type
 */
static inline void FlexCAN_SetRxMaskType(FLEXCAN_Type * base, Flexcan_Ip_RxMaskType type)
{
    bdce:	b082      	sub	sp, #8
    bdd0:	9001      	str	r0, [sp, #4]
    bdd2:	9100      	str	r1, [sp, #0]
    /* Set RX masking type (RX global mask or RX individual mask)*/
    if (FLEXCAN_RX_MASK_GLOBAL == type)
    bdd4:	9b00      	ldr	r3, [sp, #0]
    bdd6:	2b00      	cmp	r3, #0
    bdd8:	d106      	bne.n	bde8 <FlexCAN_SetRxMaskType+0x1a>
    {
        /* Enable Global RX masking */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(0U);
    bdda:	9b01      	ldr	r3, [sp, #4]
    bddc:	681b      	ldr	r3, [r3, #0]
    bdde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
    bde2:	9b01      	ldr	r3, [sp, #4]
    bde4:	601a      	str	r2, [r3, #0]
    else
    {
        /* Enable Individual Rx Masking and Queue */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    }
}
    bde6:	e005      	b.n	bdf4 <FlexCAN_SetRxMaskType+0x26>
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    bde8:	9b01      	ldr	r3, [sp, #4]
    bdea:	681b      	ldr	r3, [r3, #0]
    bdec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    bdf0:	9b01      	ldr	r3, [sp, #4]
    bdf2:	601a      	str	r2, [r3, #0]
}
    bdf4:	bf00      	nop
    bdf6:	b002      	add	sp, #8
    bdf8:	4770      	bx	lr

0000bdfa <FlexCAN_SetRegDefaultVal>:
 * @brief Will set Flexcan Peripheral Register to default val.
 *
 * @param   base    The FlexCAN base address
 */
static inline void FlexCAN_SetRegDefaultVal(FLEXCAN_Type * base)
{
    bdfa:	b500      	push	{lr}
    bdfc:	b083      	sub	sp, #12
    bdfe:	9001      	str	r0, [sp, #4]
        base->ERFCR = FLEXCAN_IP_ERFCR_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    be00:	9801      	ldr	r0, [sp, #4]
    be02:	f002 ff85 	bl	ed10 <FlexCAN_IsFDAvailable>
    be06:	4603      	mov	r3, r0
    be08:	2b00      	cmp	r3, #0
    be0a:	d007      	beq.n	be1c <FlexCAN_SetRegDefaultVal+0x22>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    be0c:	9b01      	ldr	r3, [sp, #4]
    be0e:	2200      	movs	r2, #0
    be10:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    be14:	9b01      	ldr	r3, [sp, #4]
    be16:	4a12      	ldr	r2, [pc, #72]	; (be60 <FlexCAN_SetRegDefaultVal+0x66>)
    be18:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    {
        base->IFLAG2 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
        base->IMASK2 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */
    base->IFLAG1 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
    be1c:	9b01      	ldr	r3, [sp, #4]
    be1e:	f04f 32ff 	mov.w	r2, #4294967295
    be22:	631a      	str	r2, [r3, #48]	; 0x30
    base->IMASK1 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    be24:	9b01      	ldr	r3, [sp, #4]
    be26:	2200      	movs	r2, #0
    be28:	629a      	str	r2, [r3, #40]	; 0x28
    base->CBT = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    be2a:	9b01      	ldr	r3, [sp, #4]
    be2c:	2200      	movs	r2, #0
    be2e:	651a      	str	r2, [r3, #80]	; 0x50
    base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    be30:	9b01      	ldr	r3, [sp, #4]
    be32:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    be36:	635a      	str	r2, [r3, #52]	; 0x34
    base->ESR1 = FLEXCAN_IP_ESR1_DEFAULT_VALUE_U32;
    be38:	9b01      	ldr	r3, [sp, #4]
    be3a:	4a0a      	ldr	r2, [pc, #40]	; (be64 <FlexCAN_SetRegDefaultVal+0x6a>)
    be3c:	621a      	str	r2, [r3, #32]
    base->ECR = FLEXCAN_IP_ECR_DEFAULT_VALUE_U32;
    be3e:	9b01      	ldr	r3, [sp, #4]
    be40:	2200      	movs	r2, #0
    be42:	61da      	str	r2, [r3, #28]
    base->TIMER = FLEXCAN_IP_TIMER_DEFAULT_VALUE_U32;
    be44:	9b01      	ldr	r3, [sp, #4]
    be46:	2200      	movs	r2, #0
    be48:	609a      	str	r2, [r3, #8]
    base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    be4a:	9b01      	ldr	r3, [sp, #4]
    be4c:	2200      	movs	r2, #0
    be4e:	605a      	str	r2, [r3, #4]
    base->EPRS  = FLEXCAN_IP_EPRS_DEFAULT_VALUE_U32;
    base->ENCBT = FLEXCAN_IP_ENCBT_DEFAULT_VALUE_U32;
    base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
    base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
    base->MCR = FLEXCAN_IP_MCR_DEFAULT_VALUE_U32;
    be50:	9b01      	ldr	r3, [sp, #4]
    be52:	4a05      	ldr	r2, [pc, #20]	; (be68 <FlexCAN_SetRegDefaultVal+0x6e>)
    be54:	601a      	str	r2, [r3, #0]
}
    be56:	bf00      	nop
    be58:	b003      	add	sp, #12
    be5a:	f85d fb04 	ldr.w	pc, [sp], #4
    be5e:	bf00      	nop
    be60:	80004100 	.word	0x80004100
    be64:	0003b006 	.word	0x0003b006
    be68:	d890000f 	.word	0xd890000f

0000be6c <FlexCAN_InitRxFifo>:
 * Description   : Initialize fifo and dma if requested.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitRxFifo(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    be6c:	b500      	push	{lr}
    be6e:	b085      	sub	sp, #20
    be70:	9001      	str	r0, [sp, #4]
    be72:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    be74:	2300      	movs	r3, #0
    be76:	9303      	str	r3, [sp, #12]

    /* Enable RxFIFO feature, if requested. This might fail if the FD mode is enabled. */
    if (Flexcan_Ip_pData->is_rx_fifo_needed)
    be78:	9b00      	ldr	r3, [sp, #0]
    be7a:	7a1b      	ldrb	r3, [r3, #8]
    be7c:	2b00      	cmp	r3, #0
    be7e:	d006      	beq.n	be8e <FlexCAN_InitRxFifo+0x22>
    {
        eResult = FlexCAN_EnableRxFifo(pBase, (uint32)Flexcan_Ip_pData->num_id_filters);
    be80:	9b00      	ldr	r3, [sp, #0]
    be82:	685b      	ldr	r3, [r3, #4]
    be84:	4619      	mov	r1, r3
    be86:	9801      	ldr	r0, [sp, #4]
    be88:	f002 fefe 	bl	ec88 <FlexCAN_EnableRxFifo>
    be8c:	9003      	str	r0, [sp, #12]
        FlexCAN_SetRxFifoDMA(pBase, FALSE);
    }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    return eResult;
    be8e:	9b03      	ldr	r3, [sp, #12]
}
    be90:	4618      	mov	r0, r3
    be92:	b005      	add	sp, #20
    be94:	f85d fb04 	ldr.w	pc, [sp], #4

0000be98 <FlexCAN_InitCtroll>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitCtroll(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    be98:	b500      	push	{lr}
    be9a:	b085      	sub	sp, #20
    be9c:	9001      	str	r0, [sp, #4]
    be9e:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    bea0:	2300      	movs	r3, #0
    bea2:	9303      	str	r3, [sp, #12]
    /* Disable the self reception feature if FlexCAN is not in loopback mode. */
    if (Flexcan_Ip_pData->flexcanMode != FLEXCAN_LOOPBACK_MODE)
    bea4:	9b00      	ldr	r3, [sp, #0]
    bea6:	68db      	ldr	r3, [r3, #12]
    bea8:	2b02      	cmp	r3, #2
    beaa:	d003      	beq.n	beb4 <FlexCAN_InitCtroll+0x1c>
    {
        FlexCAN_SetSelfReception(pBase, FALSE);
    beac:	2100      	movs	r1, #0
    beae:	9801      	ldr	r0, [sp, #4]
    beb0:	f7ff feec 	bl	bc8c <FlexCAN_SetSelfReception>
    }

    /* Init legacy fifo, enhanced fifo if requested. */
    eResult = FlexCAN_InitRxFifo(pBase, Flexcan_Ip_pData);
    beb4:	9900      	ldr	r1, [sp, #0]
    beb6:	9801      	ldr	r0, [sp, #4]
    beb8:	f7ff ffd8 	bl	be6c <FlexCAN_InitRxFifo>
    bebc:	9003      	str	r0, [sp, #12]
    if (eResult != FLEXCAN_STATUS_SUCCESS)
    bebe:	9b03      	ldr	r3, [sp, #12]
    bec0:	2b00      	cmp	r3, #0
    bec2:	d006      	beq.n	bed2 <FlexCAN_InitCtroll+0x3a>
    {
        /* To enter Disable Mode requires FreezMode first */
        (void)FlexCAN_EnterFreezeMode(pBase);
    bec4:	9801      	ldr	r0, [sp, #4]
    bec6:	f002 fd03 	bl	e8d0 <FlexCAN_EnterFreezeMode>
        (void)FlexCAN_Disable(pBase);
    beca:	9801      	ldr	r0, [sp, #4]
    becc:	f002 fdca 	bl	ea64 <FlexCAN_Disable>
    bed0:	e00b      	b.n	beea <FlexCAN_InitCtroll+0x52>
    }
    else
    {
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set payload size. */
        FlexCAN_SetPayloadSize(pBase, &Flexcan_Ip_pData->payload);
    bed2:	9b00      	ldr	r3, [sp, #0]
    bed4:	3314      	adds	r3, #20
    bed6:	4619      	mov	r1, r3
    bed8:	9801      	ldr	r0, [sp, #4]
    beda:	f002 ff3b 	bl	ed54 <FlexCAN_SetPayloadSize>
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
            (void)FlexCAN_Disable(pBase);
        }
    #else
        (void)FlexCAN_SetMaxMsgBuffNum(pBase, Flexcan_Ip_pData->max_num_mb);
    bede:	9b00      	ldr	r3, [sp, #0]
    bee0:	681b      	ldr	r3, [r3, #0]
    bee2:	4619      	mov	r1, r3
    bee4:	9801      	ldr	r0, [sp, #4]
    bee6:	f003 fab7 	bl	f458 <FlexCAN_SetMaxMsgBuffNum>
    #endif /* FLEXCAN_IP_DEV_ERROR_DETECT */
    }
    return eResult;
    beea:	9b03      	ldr	r3, [sp, #12]
}
    beec:	4618      	mov	r0, r3
    beee:	b005      	add	sp, #20
    bef0:	f85d fb04 	ldr.w	pc, [sp], #4

0000bef4 <FlexCAN_InitController>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitController(uint8 Instance, FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    bef4:	b500      	push	{lr}
    bef6:	b087      	sub	sp, #28
    bef8:	4603      	mov	r3, r0
    befa:	9102      	str	r1, [sp, #8]
    befc:	9201      	str	r2, [sp, #4]
    befe:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    bf02:	2300      	movs	r3, #0
    bf04:	9305      	str	r3, [sp, #20]

    if (FlexCAN_IsEnabled(pBase))
    bf06:	9802      	ldr	r0, [sp, #8]
    bf08:	f7ff fd0c 	bl	b924 <FlexCAN_IsEnabled>
    bf0c:	4603      	mov	r3, r0
    bf0e:	2b00      	cmp	r3, #0
    bf10:	d00a      	beq.n	bf28 <FlexCAN_InitController+0x34>
    {
        /* To enter Disable Mode requires FreezMode first */
        eResult = FlexCAN_EnterFreezeMode(pBase);
    bf12:	9802      	ldr	r0, [sp, #8]
    bf14:	f002 fcdc 	bl	e8d0 <FlexCAN_EnterFreezeMode>
    bf18:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == eResult)
    bf1a:	9b05      	ldr	r3, [sp, #20]
    bf1c:	2b00      	cmp	r3, #0
    bf1e:	d103      	bne.n	bf28 <FlexCAN_InitController+0x34>
        {
            eResult = FlexCAN_Disable(pBase);
    bf20:	9802      	ldr	r0, [sp, #8]
    bf22:	f002 fd9f 	bl	ea64 <FlexCAN_Disable>
    bf26:	9005      	str	r0, [sp, #20]
        }
    }

    if (FLEXCAN_STATUS_SUCCESS == eResult)
    bf28:	9b05      	ldr	r3, [sp, #20]
    bf2a:	2b00      	cmp	r3, #0
    bf2c:	d137      	bne.n	bf9e <FlexCAN_InitController+0xaa>
    {
    #if (FLEXCAN_IP_FEATURE_HAS_PE_CLKSRC_SELECT == STD_ON)
        /* Select a source clock for the FlexCAN engine */
        FlexCAN_SetClkSrc(pBase, Flexcan_Ip_pData->is_pe_clock);
    bf2e:	9b01      	ldr	r3, [sp, #4]
    bf30:	7e5b      	ldrb	r3, [r3, #25]
    bf32:	4619      	mov	r1, r3
    bf34:	9802      	ldr	r0, [sp, #8]
    bf36:	f7ff fee9 	bl	bd0c <FlexCAN_SetClkSrc>
    #endif
        /* Enable FlexCAN Module need to perform SoftReset & ClearRam */
        pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    bf3a:	9b02      	ldr	r3, [sp, #8]
    bf3c:	681b      	ldr	r3, [r3, #0]
    bf3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    bf42:	9b02      	ldr	r3, [sp, #8]
    bf44:	601a      	str	r2, [r3, #0]
        /* Initialize FLEXCAN device */
        eResult = FlexCAN_Init(pBase);
    bf46:	9802      	ldr	r0, [sp, #8]
    bf48:	f002 fe28 	bl	eb9c <FlexCAN_Init>
    bf4c:	9005      	str	r0, [sp, #20]
        if (eResult != FLEXCAN_STATUS_SUCCESS)
    bf4e:	9b05      	ldr	r3, [sp, #20]
    bf50:	2b00      	cmp	r3, #0
    bf52:	d006      	beq.n	bf62 <FlexCAN_InitController+0x6e>
        {
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
    bf54:	9802      	ldr	r0, [sp, #8]
    bf56:	f002 fcbb 	bl	e8d0 <FlexCAN_EnterFreezeMode>
            (void)FlexCAN_Disable(pBase);
    bf5a:	9802      	ldr	r0, [sp, #8]
    bf5c:	f002 fd82 	bl	ea64 <FlexCAN_Disable>
    bf60:	e01d      	b.n	bf9e <FlexCAN_InitController+0xaa>
            /* Disable the Protection again because is enabled by soft reset */
            FlexCAN_DisableMemErrorDetection(pBase);
        #endif

        #if defined(CAN_FEATURE_S32K1XX)
            if (TRUE == FlexCAN_IsFDAvailable(pBase))
    bf62:	9802      	ldr	r0, [sp, #8]
    bf64:	f002 fed4 	bl	ed10 <FlexCAN_IsFDAvailable>
    bf68:	4603      	mov	r3, r0
    bf6a:	2b00      	cmp	r3, #0
    bf6c:	d007      	beq.n	bf7e <FlexCAN_InitController+0x8a>
            {
        #endif /* defined(CAN_FEATURE_S32K1XX) */
                /* Enable/Disable FD and check FD was set as expected. Setting FD as enabled
                 * might fail if the current CAN instance does not support FD. */
                FlexCAN_SetFDEnabled(pBase, Flexcan_Ip_pData->fd_enable, Flexcan_Ip_pData->bitRateSwitch);
    bf6e:	9b01      	ldr	r3, [sp, #4]
    bf70:	7e19      	ldrb	r1, [r3, #24]
    bf72:	9b01      	ldr	r3, [sp, #4]
    bf74:	7edb      	ldrb	r3, [r3, #27]
    bf76:	461a      	mov	r2, r3
    bf78:	9802      	ldr	r0, [sp, #8]
    bf7a:	f7ff fcdd 	bl	b938 <FlexCAN_SetFDEnabled>
                }*/
        #if defined(CAN_FEATURE_S32K1XX)
            }
        #endif /* defined(CAN_FEATURE_S32K1XX) */
            /* configure depends on controller options. */
            FlexCAN_ConfigCtrlOptions(pBase, Flexcan_Ip_pData->ctrlOptions);
    bf7e:	9b01      	ldr	r3, [sp, #4]
    bf80:	691b      	ldr	r3, [r3, #16]
    bf82:	4619      	mov	r1, r3
    bf84:	9802      	ldr	r0, [sp, #8]
    bf86:	f003 fdeb 	bl	fb60 <FlexCAN_ConfigCtrlOptions>
            /* reset Imask buffers */
            FlexCAN_ResetImaskBuff(Instance);
    bf8a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bf8e:	4618      	mov	r0, r3
    bf90:	f003 fe56 	bl	fc40 <FlexCAN_ResetImaskBuff>
            eResult = FlexCAN_InitCtroll(pBase, Flexcan_Ip_pData);
    bf94:	9901      	ldr	r1, [sp, #4]
    bf96:	9802      	ldr	r0, [sp, #8]
    bf98:	f7ff ff7e 	bl	be98 <FlexCAN_InitCtroll>
    bf9c:	9005      	str	r0, [sp, #20]
        }
    }
    return eResult;
    bf9e:	9b05      	ldr	r3, [sp, #20]
}
    bfa0:	4618      	mov	r0, r3
    bfa2:	b007      	add	sp, #28
    bfa4:	f85d fb04 	ldr.w	pc, [sp], #4

0000bfa8 <FlexCAN_InitBaudrate>:
 * Description   : Init baudrate for given controller.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_InitBaudrate(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    bfa8:	b500      	push	{lr}
    bfaa:	b083      	sub	sp, #12
    bfac:	9001      	str	r0, [sp, #4]
    bfae:	9100      	str	r1, [sp, #0]
    /* Enable the use of extended bit time definitions */
    FlexCAN_EnableExtCbt(pBase, Flexcan_Ip_pData->fd_enable);
    bfb0:	9b00      	ldr	r3, [sp, #0]
    bfb2:	7e1b      	ldrb	r3, [r3, #24]
    bfb4:	4619      	mov	r1, r3
    bfb6:	9801      	ldr	r0, [sp, #4]
    bfb8:	f7ff fe51 	bl	bc5e <FlexCAN_EnableExtCbt>
        /* Disable Enhanced CBT time segments */
        pBase->CTRL2 &= ~FLEXCAN_CTRL2_BTE_MASK;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set bit rate. */
        if (Flexcan_Ip_pData->fd_enable)
    bfbc:	9b00      	ldr	r3, [sp, #0]
    bfbe:	7e1b      	ldrb	r3, [r3, #24]
    bfc0:	2b00      	cmp	r3, #0
    bfc2:	d00c      	beq.n	bfde <FlexCAN_InitBaudrate+0x36>
        {
            /* Write Normal bit time configuration to CBT register */
            FlexCAN_SetExtendedTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    bfc4:	9b00      	ldr	r3, [sp, #0]
    bfc6:	331c      	adds	r3, #28
    bfc8:	4619      	mov	r1, r3
    bfca:	9801      	ldr	r0, [sp, #4]
    bfcc:	f7ff fd94 	bl	baf8 <FlexCAN_SetExtendedTimeSegments>
            /* Write Data bit time configuration to FDCBT register */
            FlexCAN_SetFDTimeSegments(pBase, &Flexcan_Ip_pData->bitrate_cbt);
    bfd0:	9b00      	ldr	r3, [sp, #0]
    bfd2:	3330      	adds	r3, #48	; 0x30
    bfd4:	4619      	mov	r1, r3
    bfd6:	9801      	ldr	r0, [sp, #4]
    bfd8:	f7ff fd2d 	bl	ba36 <FlexCAN_SetFDTimeSegments>
            /* Write Normal bit time configuration to CTRL1 register */
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
        }
#endif
    }
}
    bfdc:	e005      	b.n	bfea <FlexCAN_InitBaudrate+0x42>
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    bfde:	9b00      	ldr	r3, [sp, #0]
    bfe0:	331c      	adds	r3, #28
    bfe2:	4619      	mov	r1, r3
    bfe4:	9801      	ldr	r0, [sp, #4]
    bfe6:	f7ff fd5b 	bl	baa0 <FlexCAN_SetTimeSegments>
}
    bfea:	bf00      	nop
    bfec:	b003      	add	sp, #12
    bfee:	f85d fb04 	ldr.w	pc, [sp], #4

0000bff2 <FlexCAN_ProccessLegacyRxFIFO>:
 * Description   : This function will process the enhanced RxFIFO in blocking mode.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_ProccessLegacyRxFIFO(uint8 u8Instance, uint32 u32TimeoutMs)
{
    bff2:	b500      	push	{lr}
    bff4:	b08d      	sub	sp, #52	; 0x34
    bff6:	4603      	mov	r3, r0
    bff8:	9102      	str	r1, [sp, #8]
    bffa:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    bffe:	2300      	movs	r3, #0
    c000:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    c002:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c006:	4a46      	ldr	r2, [pc, #280]	; (c120 <FlexCAN_ProccessLegacyRxFIFO+0x12e>)
    c008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c00c:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    c00e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c012:	4a44      	ldr	r2, [pc, #272]	; (c124 <FlexCAN_ProccessLegacyRxFIFO+0x132>)
    c014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c018:	9307      	str	r3, [sp, #28]
    uint32 timeStart = 0U;
    c01a:	2300      	movs	r3, #0
    c01c:	9305      	str	r3, [sp, #20]
    uint32 timeElapsed = 0U;
    c01e:	2300      	movs	r3, #0
    c020:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c022:	9b02      	ldr	r3, [sp, #8]
    c024:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c028:	fb02 f303 	mul.w	r3, r2, r3
    c02c:	2100      	movs	r1, #0
    c02e:	4618      	mov	r0, r3
    c030:	f7f5 ff0a 	bl	1e48 <OsIf_MicrosToTicks>
    c034:	9006      	str	r0, [sp, #24]
    uint32 u32intType = 0U;
    c036:	2300      	movs	r3, #0
    c038:	9309      	str	r3, [sp, #36]	; 0x24

        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c03a:	2000      	movs	r0, #0
    c03c:	f7f5 feb8 	bl	1db0 <OsIf_GetCounter>
    c040:	4603      	mov	r3, r0
    c042:	9305      	str	r3, [sp, #20]

        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c044:	e02a      	b.n	c09c <FlexCAN_ProccessLegacyRxFIFO+0xaa>
        {
            if (FLEXCAN_RXFIFO_USING_POLLING == pState->transferType)
    c046:	9b08      	ldr	r3, [sp, #32]
    c048:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    c04c:	2b01      	cmp	r3, #1
    c04e:	d115      	bne.n	c07c <FlexCAN_ProccessLegacyRxFIFO+0x8a>
            {
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    c050:	2307      	movs	r3, #7
    c052:	9309      	str	r3, [sp, #36]	; 0x24
    c054:	e00f      	b.n	c076 <FlexCAN_ProccessLegacyRxFIFO+0x84>
                     u32intType >= FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE; \
                     u32intType--)
                {
                    if (FlexCAN_GetBuffStatusFlag(pBase, u32intType) != 0U)
    c056:	9909      	ldr	r1, [sp, #36]	; 0x24
    c058:	9807      	ldr	r0, [sp, #28]
    c05a:	f7ff fcd0 	bl	b9fe <FlexCAN_GetBuffStatusFlag>
    c05e:	4603      	mov	r3, r0
    c060:	2b00      	cmp	r3, #0
    c062:	d005      	beq.n	c070 <FlexCAN_ProccessLegacyRxFIFO+0x7e>
                    {
                        FlexCAN_IRQHandlerRxFIFO(u8Instance, u32intType);
    c064:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c068:	9909      	ldr	r1, [sp, #36]	; 0x24
    c06a:	4618      	mov	r0, r3
    c06c:	f000 fb06 	bl	c67c <FlexCAN_IRQHandlerRxFIFO>
                     u32intType--)
    c070:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c072:	3b01      	subs	r3, #1
    c074:	9309      	str	r3, [sp, #36]	; 0x24
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    c076:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c078:	2b04      	cmp	r3, #4
    c07a:	d8ec      	bhi.n	c056 <FlexCAN_ProccessLegacyRxFIFO+0x64>
                    }
                }
            }

            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c07c:	ab05      	add	r3, sp, #20
    c07e:	2100      	movs	r1, #0
    c080:	4618      	mov	r0, r3
    c082:	f7f5 feae 	bl	1de2 <OsIf_GetElapsed>
    c086:	4602      	mov	r2, r0
    c088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c08a:	4413      	add	r3, r2
    c08c:	930a      	str	r3, [sp, #40]	; 0x28
            if (timeElapsed >= mS2Ticks)
    c08e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c090:	9b06      	ldr	r3, [sp, #24]
    c092:	429a      	cmp	r2, r3
    c094:	d302      	bcc.n	c09c <FlexCAN_ProccessLegacyRxFIFO+0xaa>
            {
                eResult = FLEXCAN_STATUS_TIMEOUT;
    c096:	2303      	movs	r3, #3
    c098:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    c09a:	e003      	b.n	c0a4 <FlexCAN_ProccessLegacyRxFIFO+0xb2>
        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c09c:	9b08      	ldr	r3, [sp, #32]
    c09e:	685b      	ldr	r3, [r3, #4]
    c0a0:	2b01      	cmp	r3, #1
    c0a2:	d0d0      	beq.n	c046 <FlexCAN_ProccessLegacyRxFIFO+0x54>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == eResult) && (FLEXCAN_RXFIFO_USING_POLLING != pState->transferType))
    c0a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c0a6:	2b03      	cmp	r3, #3
    c0a8:	d125      	bne.n	c0f6 <FlexCAN_ProccessLegacyRxFIFO+0x104>
    c0aa:	9b08      	ldr	r3, [sp, #32]
    c0ac:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    c0b0:	2b01      	cmp	r3, #1
    c0b2:	d020      	beq.n	c0f6 <FlexCAN_ProccessLegacyRxFIFO+0x104>
        {
            /* Disable RX FIFO interrupts*/
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, pState->isIntActive);
    c0b4:	9b08      	ldr	r3, [sp, #32]
    c0b6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c0ba:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c0be:	9300      	str	r3, [sp, #0]
    c0c0:	2300      	movs	r3, #0
    c0c2:	2205      	movs	r2, #5
    c0c4:	9807      	ldr	r0, [sp, #28]
    c0c6:	f002 feef 	bl	eea8 <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, pState->isIntActive);
    c0ca:	9b08      	ldr	r3, [sp, #32]
    c0cc:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c0d0:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c0d4:	9300      	str	r3, [sp, #0]
    c0d6:	2300      	movs	r3, #0
    c0d8:	2206      	movs	r2, #6
    c0da:	9807      	ldr	r0, [sp, #28]
    c0dc:	f002 fee4 	bl	eea8 <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, pState->isIntActive);
    c0e0:	9b08      	ldr	r3, [sp, #32]
    c0e2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c0e6:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c0ea:	9300      	str	r3, [sp, #0]
    c0ec:	2300      	movs	r3, #0
    c0ee:	2207      	movs	r2, #7
    c0f0:	9807      	ldr	r0, [sp, #28]
    c0f2:	f002 fed9 	bl	eea8 <FlexCAN_SetMsgBuffIntCmd>
                (void)Dma_Ip_SetLogicChannelCommand(pState->rxFifoDMAChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
            }
#endif
        }

        switch (pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c0f6:	9b08      	ldr	r3, [sp, #32]
    c0f8:	685b      	ldr	r3, [r3, #4]
    c0fa:	2b00      	cmp	r3, #0
    c0fc:	d005      	beq.n	c10a <FlexCAN_ProccessLegacyRxFIFO+0x118>
    c0fe:	2b01      	cmp	r3, #1
    c100:	d106      	bne.n	c110 <FlexCAN_ProccessLegacyRxFIFO+0x11e>
        {
            case FLEXCAN_MB_RX_BUSY:
                pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    c102:	9b08      	ldr	r3, [sp, #32]
    c104:	2200      	movs	r2, #0
    c106:	605a      	str	r2, [r3, #4]
                break;
    c108:	e005      	b.n	c116 <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_IDLE:
                eResult = FLEXCAN_STATUS_SUCCESS;
    c10a:	2300      	movs	r3, #0
    c10c:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    c10e:	e002      	b.n	c116 <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_DMA_ERROR:
                eResult = FLEXCAN_STATUS_ERROR;
                break;
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
            default:
                eResult = FLEXCAN_STATUS_ERROR;
    c110:	2301      	movs	r3, #1
    c112:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    c114:	bf00      	nop
        }

    return eResult;
    c116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    c118:	4618      	mov	r0, r3
    c11a:	b00d      	add	sp, #52	; 0x34
    c11c:	f85d fb04 	ldr.w	pc, [sp], #4
    c120:	1fff935c 	.word	0x1fff935c
    c124:	000184e4 	.word	0x000184e4

0000c128 <FlexCAN_StartRxMessageBufferData>:
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageBufferData(uint8 instance,
                                                              uint8 mb_idx,
                                                              Flexcan_Ip_MsgBuffType * data,
                                                              boolean isPolling
                                                             )
{
    c128:	b084      	sub	sp, #16
    c12a:	9200      	str	r2, [sp, #0]
    c12c:	461a      	mov	r2, r3
    c12e:	4603      	mov	r3, r0
    c130:	f88d 3007 	strb.w	r3, [sp, #7]
    c134:	460b      	mov	r3, r1
    c136:	f88d 3006 	strb.w	r3, [sp, #6]
    c13a:	4613      	mov	r3, r2
    c13c:	f88d 3005 	strb.w	r3, [sp, #5]

    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    c140:	2300      	movs	r3, #0
    c142:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    c144:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c148:	4a15      	ldr	r2, [pc, #84]	; (c1a0 <FlexCAN_StartRxMessageBufferData+0x78>)
    c14a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c14e:	9302      	str	r3, [sp, #8]
    }
    else
    {
#endif
        /* Start receiving mailbox */
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    c150:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c154:	9a02      	ldr	r2, [sp, #8]
    c156:	011b      	lsls	r3, r3, #4
    c158:	4413      	add	r3, r2
    c15a:	3304      	adds	r3, #4
    c15c:	681b      	ldr	r3, [r3, #0]
    c15e:	2b00      	cmp	r3, #0
    c160:	d002      	beq.n	c168 <FlexCAN_StartRxMessageBufferData+0x40>
        {
            result = FLEXCAN_STATUS_BUSY;
    c162:	2302      	movs	r3, #2
    c164:	9303      	str	r3, [sp, #12]
    c166:	e017      	b.n	c198 <FlexCAN_StartRxMessageBufferData+0x70>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_RX_BUSY;
    c168:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c16c:	9a02      	ldr	r2, [sp, #8]
    c16e:	011b      	lsls	r3, r3, #4
    c170:	4413      	add	r3, r2
    c172:	3304      	adds	r3, #4
    c174:	2201      	movs	r2, #1
    c176:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].pMBmessage = data;
    c178:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c17c:	9a02      	ldr	r2, [sp, #8]
    c17e:	011b      	lsls	r3, r3, #4
    c180:	4413      	add	r3, r2
    c182:	9a00      	ldr	r2, [sp, #0]
    c184:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = isPolling;
    c186:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c18a:	9a02      	ldr	r2, [sp, #8]
    c18c:	011b      	lsls	r3, r3, #4
    c18e:	4413      	add	r3, r2
    c190:	3308      	adds	r3, #8
    c192:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c196:	701a      	strb	r2, [r3, #0]
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    c198:	9b03      	ldr	r3, [sp, #12]
}
    c19a:	4618      	mov	r0, r3
    c19c:	b004      	add	sp, #16
    c19e:	4770      	bx	lr
    c1a0:	1fff935c 	.word	0x1fff935c

0000c1a4 <FlexCAN_StartSendData>:
                                                   uint8 mb_idx,
                                                   const Flexcan_Ip_DataInfoType * tx_info,
                                                   uint32 msg_id,
                                                   const uint8 * mb_data
                                                  )
{
    c1a4:	b500      	push	{lr}
    c1a6:	b08f      	sub	sp, #60	; 0x3c
    c1a8:	9204      	str	r2, [sp, #16]
    c1aa:	9303      	str	r3, [sp, #12]
    c1ac:	4603      	mov	r3, r0
    c1ae:	f88d 3017 	strb.w	r3, [sp, #23]
    c1b2:	460b      	mov	r3, r1
    c1b4:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    c1b8:	2300      	movs	r3, #0
    c1ba:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[Flexcan_Ip_u8Instance];
    c1bc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c1c0:	4a38      	ldr	r2, [pc, #224]	; (c2a4 <FlexCAN_StartSendData+0x100>)
    c1c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1c6:	930c      	str	r3, [sp, #48]	; 0x30
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    c1c8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c1cc:	4a36      	ldr	r2, [pc, #216]	; (c2a8 <FlexCAN_StartSendData+0x104>)
    c1ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1d2:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    c1d4:	2300      	movs	r3, #0
    c1d6:	930a      	str	r3, [sp, #40]	; 0x28
        eResult = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
    else
    {
#endif
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    c1d8:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c1dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c1de:	011b      	lsls	r3, r3, #4
    c1e0:	4413      	add	r3, r2
    c1e2:	3304      	adds	r3, #4
    c1e4:	681b      	ldr	r3, [r3, #0]
    c1e6:	2b00      	cmp	r3, #0
    c1e8:	d002      	beq.n	c1f0 <FlexCAN_StartSendData+0x4c>
        {
            eResult = FLEXCAN_STATUS_BUSY;
    c1ea:	2302      	movs	r3, #2
    c1ec:	930d      	str	r3, [sp, #52]	; 0x34
    c1ee:	e053      	b.n	c298 <FlexCAN_StartSendData+0xf4>
        }
        else
        {
            /* Clear message buffer flag */
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c1f0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c1f4:	4619      	mov	r1, r3
    c1f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c1f8:	f7ff fbee 	bl	b9d8 <FlexCAN_ClearMsgBuffIntStatusFlag>

            state->mbs[mb_idx].state = FLEXCAN_MB_TX_BUSY;
    c1fc:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c200:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c202:	011b      	lsls	r3, r3, #4
    c204:	4413      	add	r3, r2
    c206:	3304      	adds	r3, #4
    c208:	2202      	movs	r2, #2
    c20a:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].time_stamp = 0U;
    c20c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c210:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c212:	011b      	lsls	r3, r3, #4
    c214:	4413      	add	r3, r2
    c216:	330c      	adds	r3, #12
    c218:	2200      	movs	r2, #0
    c21a:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = tx_info->is_polling;
    c21c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c220:	9a04      	ldr	r2, [sp, #16]
    c222:	7b11      	ldrb	r1, [r2, #12]
    c224:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c226:	011b      	lsls	r3, r3, #4
    c228:	4413      	add	r3, r2
    c22a:	3308      	adds	r3, #8
    c22c:	460a      	mov	r2, r1
    c22e:	701a      	strb	r2, [r3, #0]
            state->mbs[mb_idx].isRemote = tx_info->is_remote;
    c230:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c234:	9a04      	ldr	r2, [sp, #16]
    c236:	7ad1      	ldrb	r1, [r2, #11]
    c238:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c23a:	011b      	lsls	r3, r3, #4
    c23c:	4413      	add	r3, r2
    c23e:	3309      	adds	r3, #9
    c240:	460a      	mov	r2, r1
    c242:	701a      	strb	r2, [r3, #0]

            cs.dataLen = tx_info->data_length;
    c244:	9b04      	ldr	r3, [sp, #16]
    c246:	685b      	ldr	r3, [r3, #4]
    c248:	9308      	str	r3, [sp, #32]

            cs.msgIdType = tx_info->msg_id_type;
    c24a:	9b04      	ldr	r3, [sp, #16]
    c24c:	681b      	ldr	r3, [r3, #0]
    c24e:	9307      	str	r3, [sp, #28]

        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            cs.fd_enable = tx_info->fd_enable;
    c250:	9b04      	ldr	r3, [sp, #16]
    c252:	7a1b      	ldrb	r3, [r3, #8]
    c254:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            cs.fd_padding = tx_info->fd_padding;
    c258:	9b04      	ldr	r3, [sp, #16]
    c25a:	7a5b      	ldrb	r3, [r3, #9]
    c25c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
            cs.enable_brs = tx_info->enable_brs;
    c260:	9b04      	ldr	r3, [sp, #16]
    c262:	7a9b      	ldrb	r3, [r3, #10]
    c264:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        #endif

            if (tx_info->is_remote)
    c268:	9b04      	ldr	r3, [sp, #16]
    c26a:	7adb      	ldrb	r3, [r3, #11]
    c26c:	2b00      	cmp	r3, #0
    c26e:	d002      	beq.n	c276 <FlexCAN_StartSendData+0xd2>
            {
                cs.code = (uint32)FLEXCAN_TX_REMOTE;
    c270:	231c      	movs	r3, #28
    c272:	9306      	str	r3, [sp, #24]
    c274:	e001      	b.n	c27a <FlexCAN_StartSendData+0xd6>
            }
            else
            {
                cs.code = (uint32)FLEXCAN_TX_DATA;
    c276:	230c      	movs	r3, #12
    c278:	9306      	str	r3, [sp, #24]
            }
            pMbAddr = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    c27a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c27e:	4619      	mov	r1, r3
    c280:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c282:	f002 fa89 	bl	e798 <FlexCAN_GetMsgBuffRegion>
    c286:	900a      	str	r0, [sp, #40]	; 0x28
            FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, FALSE);
    c288:	a906      	add	r1, sp, #24
    c28a:	2300      	movs	r3, #0
    c28c:	9300      	str	r3, [sp, #0]
    c28e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c290:	9a03      	ldr	r2, [sp, #12]
    c292:	980a      	ldr	r0, [sp, #40]	; 0x28
    c294:	f002 ffd2 	bl	f23c <FlexCAN_SetTxMsgBuff>
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    c298:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    c29a:	4618      	mov	r0, r3
    c29c:	b00f      	add	sp, #60	; 0x3c
    c29e:	f85d fb04 	ldr.w	pc, [sp], #4
    c2a2:	bf00      	nop
    c2a4:	1fff935c 	.word	0x1fff935c
    c2a8:	000184e4 	.word	0x000184e4

0000c2ac <FlexCAN_StartRxMessageFifoData>:
 * receiving data and enabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageFifoData(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    c2ac:	b500      	push	{lr}
    c2ae:	b089      	sub	sp, #36	; 0x24
    c2b0:	4603      	mov	r3, r0
    c2b2:	9102      	str	r1, [sp, #8]
    c2b4:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = NULL_PTR;
    c2b8:	2300      	movs	r3, #0
    c2ba:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StateType * state = NULL_PTR;
    c2bc:	2300      	movs	r3, #0
    c2be:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    c2c0:	2300      	movs	r3, #0
    c2c2:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base = Flexcan_Ip_apxBase[instance];
    c2c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c2c8:	4a26      	ldr	r2, [pc, #152]	; (c364 <FlexCAN_StartRxMessageFifoData+0xb8>)
    c2ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2ce:	9306      	str	r3, [sp, #24]
    state = Flexcan_Ip_apxState[instance];
    c2d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c2d4:	4a24      	ldr	r2, [pc, #144]	; (c368 <FlexCAN_StartRxMessageFifoData+0xbc>)
    c2d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2da:	9305      	str	r3, [sp, #20]
    #endif
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    /* Start receiving fifo */
    if (state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state == FLEXCAN_MB_RX_BUSY)
    c2dc:	9b05      	ldr	r3, [sp, #20]
    c2de:	685b      	ldr	r3, [r3, #4]
    c2e0:	2b01      	cmp	r3, #1
    c2e2:	d102      	bne.n	c2ea <FlexCAN_StartRxMessageFifoData+0x3e>
    {
        eResult = FLEXCAN_STATUS_BUSY;
    c2e4:	2302      	movs	r3, #2
    c2e6:	9307      	str	r3, [sp, #28]
    c2e8:	e036      	b.n	c358 <FlexCAN_StartRxMessageFifoData+0xac>
    }
    else
    {
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_RX_BUSY;
    c2ea:	9b05      	ldr	r3, [sp, #20]
    c2ec:	2201      	movs	r2, #1
    c2ee:	605a      	str	r2, [r3, #4]
    if (FLEXCAN_RXFIFO_USING_POLLING == state->transferType)
    c2f0:	9b05      	ldr	r3, [sp, #20]
    c2f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    c2f6:	2b01      	cmp	r3, #1
    c2f8:	d102      	bne.n	c300 <FlexCAN_StartRxMessageFifoData+0x54>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    c2fa:	9b05      	ldr	r3, [sp, #20]
    c2fc:	2201      	movs	r2, #1
    c2fe:	721a      	strb	r2, [r3, #8]
    }

    /* This will get filled by the interrupt handler */
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = data;
    c300:	9b05      	ldr	r3, [sp, #20]
    c302:	9a02      	ldr	r2, [sp, #8]
    c304:	601a      	str	r2, [r3, #0]

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    c306:	9b05      	ldr	r3, [sp, #20]
    c308:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    c30c:	2b00      	cmp	r3, #0
    c30e:	d123      	bne.n	c358 <FlexCAN_StartRxMessageFifoData+0xac>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = FALSE;
    c310:	9b05      	ldr	r3, [sp, #20]
    c312:	2200      	movs	r2, #0
    c314:	721a      	strb	r2, [r3, #8]
        /* Enable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, TRUE, state->isIntActive);
    c316:	9b05      	ldr	r3, [sp, #20]
    c318:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c31c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c320:	9300      	str	r3, [sp, #0]
    c322:	2301      	movs	r3, #1
    c324:	2206      	movs	r2, #6
    c326:	9806      	ldr	r0, [sp, #24]
    c328:	f002 fdbe 	bl	eea8 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, TRUE, state->isIntActive);
    c32c:	9b05      	ldr	r3, [sp, #20]
    c32e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c332:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c336:	9300      	str	r3, [sp, #0]
    c338:	2301      	movs	r3, #1
    c33a:	2207      	movs	r2, #7
    c33c:	9806      	ldr	r0, [sp, #24]
    c33e:	f002 fdb3 	bl	eea8 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, TRUE, state->isIntActive);
    c342:	9b05      	ldr	r3, [sp, #20]
    c344:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c348:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c34c:	9300      	str	r3, [sp, #0]
    c34e:	2301      	movs	r3, #1
    c350:	2205      	movs	r2, #5
    c352:	9806      	ldr	r0, [sp, #24]
    c354:	f002 fda8 	bl	eea8 <FlexCAN_SetMsgBuffIntCmd>
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    c358:	9b07      	ldr	r3, [sp, #28]
}
    c35a:	4618      	mov	r0, r3
    c35c:	b009      	add	sp, #36	; 0x24
    c35e:	f85d fb04 	ldr.w	pc, [sp], #4
    c362:	bf00      	nop
    c364:	000184e4 	.word	0x000184e4
    c368:	1fff935c 	.word	0x1fff935c

0000c36c <FlexCAN_IRQHandlerRxMB>:
 *
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerRxMB(uint8 instance, uint32 mb_idx)
{
    c36c:	b510      	push	{r4, lr}
    c36e:	b09e      	sub	sp, #120	; 0x78
    c370:	4603      	mov	r3, r0
    c372:	9102      	str	r1, [sp, #8]
    c374:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    c378:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c37c:	4a70      	ldr	r2, [pc, #448]	; (c540 <FlexCAN_IRQHandlerRxMB+0x1d4>)
    c37e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c382:	931c      	str	r3, [sp, #112]	; 0x70
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    c384:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c388:	4a6e      	ldr	r2, [pc, #440]	; (c544 <FlexCAN_IRQHandlerRxMB+0x1d8>)
    c38a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c38e:	931b      	str	r3, [sp, #108]	; 0x6c
    Flexcan_Ip_MsgBuffType data;
    boolean bCurrentIntStat = FALSE;
    c390:	2300      	movs	r3, #0
    c392:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[mb_idx].pMBmessage  */
    if (NULL_PTR == state->mbs[mb_idx].pMBmessage)
    c396:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c398:	9b02      	ldr	r3, [sp, #8]
    c39a:	011b      	lsls	r3, r3, #4
    c39c:	4413      	add	r3, r2
    c39e:	681b      	ldr	r3, [r3, #0]
    c3a0:	2b00      	cmp	r3, #0
    c3a2:	d105      	bne.n	c3b0 <FlexCAN_IRQHandlerRxMB+0x44>
    {
        state->mbs[mb_idx].pMBmessage = &data;
    c3a4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c3a6:	9b02      	ldr	r3, [sp, #8]
    c3a8:	011b      	lsls	r3, r3, #4
    c3aa:	4413      	add	r3, r2
    c3ac:	aa05      	add	r2, sp, #20
    c3ae:	601a      	str	r2, [r3, #0]
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    boolean bIsCriticalSectionNeeded = FALSE;
    c3b0:	2300      	movs	r3, #0
    c3b2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77

    /* Expectation: the sequence will not be interrupted when it already in interupt context */
    if (TRUE == state->mbs[mb_idx].isPolling)
    c3b6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c3b8:	9b02      	ldr	r3, [sp, #8]
    c3ba:	011b      	lsls	r3, r3, #4
    c3bc:	4413      	add	r3, r2
    c3be:	3308      	adds	r3, #8
    c3c0:	781b      	ldrb	r3, [r3, #0]
    c3c2:	2b00      	cmp	r3, #0
    c3c4:	d008      	beq.n	c3d8 <FlexCAN_IRQHandlerRxMB+0x6c>
        if ((state->bIsLegacyFifoEn ||  state->bIsEnhancedFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #else
        if ((state->bIsLegacyFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    #elif defined (ERR_IPV_FLEXCAN_E050246)
        if (state->bIsLegacyFifoEn)
    c3c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c3c8:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    c3cc:	2b00      	cmp	r3, #0
    c3ce:	d003      	beq.n	c3d8 <FlexCAN_IRQHandlerRxMB+0x6c>
    #endif
        {
            bIsCriticalSectionNeeded = TRUE;
    c3d0:	2301      	movs	r3, #1
    c3d2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
            /* Disable all IRQs */
            OsIf_SuspendAllInterrupts();
    c3d6:	b672      	cpsid	i
        }
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    /* Lock RX message buffer and RX FIFO*/
    FlexCAN_LockRxMsgBuff(base, mb_idx);
    c3d8:	9902      	ldr	r1, [sp, #8]
    c3da:	981c      	ldr	r0, [sp, #112]	; 0x70
    c3dc:	f002 fd55 	bl	ee8a <FlexCAN_LockRxMsgBuff>

    /* Get RX MB field values*/
    FlexCAN_GetMsgBuff(base, mb_idx, state->mbs[mb_idx].pMBmessage);
    c3e0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c3e2:	9b02      	ldr	r3, [sp, #8]
    c3e4:	011b      	lsls	r3, r3, #4
    c3e6:	4413      	add	r3, r2
    c3e8:	681b      	ldr	r3, [r3, #0]
    c3ea:	461a      	mov	r2, r3
    c3ec:	9902      	ldr	r1, [sp, #8]
    c3ee:	981c      	ldr	r0, [sp, #112]	; 0x70
    c3f0:	f002 fe7a 	bl	f0e8 <FlexCAN_GetMsgBuff>

    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c3f4:	9902      	ldr	r1, [sp, #8]
    c3f6:	981c      	ldr	r0, [sp, #112]	; 0x70
    c3f8:	f7ff faee 	bl	b9d8 <FlexCAN_ClearMsgBuffIntStatusFlag>

#if defined (ERR_IPV_FLEXCAN_E050246)
    /* the CODE field is updated with an incorrect value when MBx is locked by software for more than 20 CAN bit times and FIFO enable.
    When the CODE field is corrupted, it's probably updated with any value that is invalid. Except EMPTY, FULL and OVERRUN other values can not make MB unlocked and move-in process. */
    if ((state->bIsLegacyFifoEn) && \
    c3fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c3fe:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    c402:	2b00      	cmp	r3, #0
    c404:	d032      	beq.n	c46c <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    c406:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c408:	9b02      	ldr	r3, [sp, #8]
    c40a:	011b      	lsls	r3, r3, #4
    c40c:	4413      	add	r3, r2
    c40e:	681b      	ldr	r3, [r3, #0]
    c410:	681b      	ldr	r3, [r3, #0]
    c412:	0e1b      	lsrs	r3, r3, #24
    c414:	f003 030f 	and.w	r3, r3, #15
    if ((state->bIsLegacyFifoEn) && \
    c418:	2b02      	cmp	r3, #2
    c41a:	d027      	beq.n	c46c <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    c41c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c41e:	9b02      	ldr	r3, [sp, #8]
    c420:	011b      	lsls	r3, r3, #4
    c422:	4413      	add	r3, r2
    c424:	681b      	ldr	r3, [r3, #0]
    c426:	681b      	ldr	r3, [r3, #0]
    c428:	0e1b      	lsrs	r3, r3, #24
    c42a:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    c42e:	2b04      	cmp	r3, #4
    c430:	d01c      	beq.n	c46c <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_OVERRUN != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)))
    c432:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c434:	9b02      	ldr	r3, [sp, #8]
    c436:	011b      	lsls	r3, r3, #4
    c438:	4413      	add	r3, r2
    c43a:	681b      	ldr	r3, [r3, #0]
    c43c:	681b      	ldr	r3, [r3, #0]
    c43e:	0e1b      	lsrs	r3, r3, #24
    c440:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    c444:	2b06      	cmp	r3, #6
    c446:	d011      	beq.n	c46c <FlexCAN_IRQHandlerRxMB+0x100>
    {
        /* Update the cs code for next sequence move in MB.
        A CPU write into the C/S word also unlocks the MB */
        volatile uint32 *flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    c448:	9902      	ldr	r1, [sp, #8]
    c44a:	981c      	ldr	r0, [sp, #112]	; 0x70
    c44c:	f002 f9a4 	bl	e798 <FlexCAN_GetMsgBuffRegion>
    c450:	9019      	str	r0, [sp, #100]	; 0x64
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    c452:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c454:	681b      	ldr	r3, [r3, #0]
    c456:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    c45a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c45c:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (((uint32)FLEXCAN_RX_EMPTY) << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    c45e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c460:	681b      	ldr	r3, [r3, #0]
    c462:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
    c466:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c468:	601a      	str	r2, [r3, #0]
    {
    c46a:	e002      	b.n	c472 <FlexCAN_IRQHandlerRxMB+0x106>
    }
    else
#endif
    {
    /* Unlock RX message buffer and RX FIFO*/
    FlexCAN_UnlockRxMsgBuff(base);
    c46c:	981c      	ldr	r0, [sp, #112]	; 0x70
    c46e:	f7ff faac 	bl	b9ca <FlexCAN_UnlockRxMsgBuff>
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    /* To ensure that interrupts are resumed when they are suspended */
    if (TRUE == bIsCriticalSectionNeeded)
    c472:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
    c476:	2b00      	cmp	r3, #0
    c478:	d000      	beq.n	c47c <FlexCAN_IRQHandlerRxMB+0x110>
    {
        /* Enable all IRQs */
        OsIf_ResumeAllInterrupts();
    c47a:	b662      	cpsie	i
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    c47c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c47e:	9b02      	ldr	r3, [sp, #8]
    c480:	011b      	lsls	r3, r3, #4
    c482:	4413      	add	r3, r2
    c484:	3304      	adds	r3, #4
    c486:	2200      	movs	r2, #0
    c488:	601a      	str	r2, [r3, #0]

    bCurrentIntStat = state->mbs[mb_idx].isPolling;
    c48a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c48c:	9b02      	ldr	r3, [sp, #8]
    c48e:	011b      	lsls	r3, r3, #4
    c490:	4413      	add	r3, r2
    c492:	3308      	adds	r3, #8
    c494:	781b      	ldrb	r3, [r3, #0]
    c496:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* Invoke callback */
    if (state->callback != NULL_PTR)
    c49a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c49c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c4a0:	2b00      	cmp	r3, #0
    c4a2:	d008      	beq.n	c4b6 <FlexCAN_IRQHandlerRxMB+0x14a>
    {
        state->callback(instance, FLEXCAN_EVENT_RX_COMPLETE, mb_idx, state);
    c4a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c4a6:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c4aa:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c4ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c4b0:	9a02      	ldr	r2, [sp, #8]
    c4b2:	2100      	movs	r1, #0
    c4b4:	47a0      	blx	r4
    }

    if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state) && (FALSE == state->mbs[mb_idx].isPolling))
    c4b6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c4b8:	9b02      	ldr	r3, [sp, #8]
    c4ba:	011b      	lsls	r3, r3, #4
    c4bc:	4413      	add	r3, r2
    c4be:	3304      	adds	r3, #4
    c4c0:	681b      	ldr	r3, [r3, #0]
    c4c2:	2b00      	cmp	r3, #0
    c4c4:	d11e      	bne.n	c504 <FlexCAN_IRQHandlerRxMB+0x198>
    c4c6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c4c8:	9b02      	ldr	r3, [sp, #8]
    c4ca:	011b      	lsls	r3, r3, #4
    c4cc:	4413      	add	r3, r2
    c4ce:	3308      	adds	r3, #8
    c4d0:	781b      	ldrb	r3, [r3, #0]
    c4d2:	f083 0301 	eor.w	r3, r3, #1
    c4d6:	b2db      	uxtb	r3, r3
    c4d8:	2b00      	cmp	r3, #0
    c4da:	d013      	beq.n	c504 <FlexCAN_IRQHandlerRxMB+0x198>
    {
        /* callback is not called, need to reset to default value */
        state->mbs[mb_idx].isPolling = TRUE;
    c4dc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c4de:	9b02      	ldr	r3, [sp, #8]
    c4e0:	011b      	lsls	r3, r3, #4
    c4e2:	4413      	add	r3, r2
    c4e4:	3308      	adds	r3, #8
    c4e6:	2201      	movs	r2, #1
    c4e8:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    c4ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c4ec:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c4f0:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c4f4:	9300      	str	r3, [sp, #0]
    c4f6:	2300      	movs	r3, #0
    c4f8:	9a02      	ldr	r2, [sp, #8]
    c4fa:	981c      	ldr	r0, [sp, #112]	; 0x70
    c4fc:	f002 fcd4 	bl	eea8 <FlexCAN_SetMsgBuffIntCmd>
    c500:	bf00      	nop
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    c502:	e019      	b.n	c538 <FlexCAN_IRQHandlerRxMB+0x1cc>
    else if ((FALSE == bCurrentIntStat) && (TRUE == state->mbs[mb_idx].isPolling))
    c504:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
    c508:	f083 0301 	eor.w	r3, r3, #1
    c50c:	b2db      	uxtb	r3, r3
    c50e:	2b00      	cmp	r3, #0
    c510:	d012      	beq.n	c538 <FlexCAN_IRQHandlerRxMB+0x1cc>
    c512:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c514:	9b02      	ldr	r3, [sp, #8]
    c516:	011b      	lsls	r3, r3, #4
    c518:	4413      	add	r3, r2
    c51a:	3308      	adds	r3, #8
    c51c:	781b      	ldrb	r3, [r3, #0]
    c51e:	2b00      	cmp	r3, #0
    c520:	d00a      	beq.n	c538 <FlexCAN_IRQHandlerRxMB+0x1cc>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    c522:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c524:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c528:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c52c:	9300      	str	r3, [sp, #0]
    c52e:	2300      	movs	r3, #0
    c530:	9a02      	ldr	r2, [sp, #8]
    c532:	981c      	ldr	r0, [sp, #112]	; 0x70
    c534:	f002 fcb8 	bl	eea8 <FlexCAN_SetMsgBuffIntCmd>
}
    c538:	bf00      	nop
    c53a:	b01e      	add	sp, #120	; 0x78
    c53c:	bd10      	pop	{r4, pc}
    c53e:	bf00      	nop
    c540:	000184e4 	.word	0x000184e4
    c544:	1fff935c 	.word	0x1fff935c

0000c548 <FlexCAN_IRQHandlerTxMB>:
 * note: just using in interrupt mode
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerTxMB(uint8 u8Instance, uint32 u32MbIdx)
{
    c548:	b510      	push	{r4, lr}
    c54a:	b09a      	sub	sp, #104	; 0x68
    c54c:	4603      	mov	r3, r0
    c54e:	9102      	str	r1, [sp, #8]
    c550:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    c554:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c558:	4a46      	ldr	r2, [pc, #280]	; (c674 <FlexCAN_IRQHandlerTxMB+0x12c>)
    c55a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c55e:	9319      	str	r3, [sp, #100]	; 0x64
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    c560:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c564:	4a44      	ldr	r2, [pc, #272]	; (c678 <FlexCAN_IRQHandlerTxMB+0x130>)
    c566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c56a:	9318      	str	r3, [sp, #96]	; 0x60
    Flexcan_Ip_MsgBuffType mb;
    mb.cs = 0U;
    c56c:	2300      	movs	r3, #0
    c56e:	9304      	str	r3, [sp, #16]
    mb.time_stamp = 0U;
    c570:	2300      	movs	r3, #0
    c572:	9317      	str	r3, [sp, #92]	; 0x5c
    if (pState->mbs[u32MbIdx].isRemote)
    c574:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c576:	9b02      	ldr	r3, [sp, #8]
    c578:	011b      	lsls	r3, r3, #4
    c57a:	4413      	add	r3, r2
    c57c:	3309      	adds	r3, #9
    c57e:	781b      	ldrb	r3, [r3, #0]
    c580:	2b00      	cmp	r3, #0
    c582:	d01e      	beq.n	c5c2 <FlexCAN_IRQHandlerTxMB+0x7a>
    {
        FlexCAN_LockRxMsgBuff(pBase, u32MbIdx);
    c584:	9902      	ldr	r1, [sp, #8]
    c586:	9819      	ldr	r0, [sp, #100]	; 0x64
    c588:	f002 fc7f 	bl	ee8a <FlexCAN_LockRxMsgBuff>
        FlexCAN_GetMsgBuff(pBase, u32MbIdx, &mb);
    c58c:	ab04      	add	r3, sp, #16
    c58e:	461a      	mov	r2, r3
    c590:	9902      	ldr	r1, [sp, #8]
    c592:	9819      	ldr	r0, [sp, #100]	; 0x64
    c594:	f002 fda8 	bl	f0e8 <FlexCAN_GetMsgBuff>
        FlexCAN_UnlockRxMsgBuff(pBase);
    c598:	9819      	ldr	r0, [sp, #100]	; 0x64
    c59a:	f7ff fa16 	bl	b9ca <FlexCAN_UnlockRxMsgBuff>
        pState->mbs[u32MbIdx].time_stamp = mb.time_stamp;
    c59e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    c5a0:	9918      	ldr	r1, [sp, #96]	; 0x60
    c5a2:	9b02      	ldr	r3, [sp, #8]
    c5a4:	011b      	lsls	r3, r3, #4
    c5a6:	440b      	add	r3, r1
    c5a8:	330c      	adds	r3, #12
    c5aa:	601a      	str	r2, [r3, #0]
        /* If the frame was a remote frame, clear the flag only if the response was
        * not received yet. If the response was received, leave the flag set in order
        * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
        if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    c5ac:	9b04      	ldr	r3, [sp, #16]
    c5ae:	0e1b      	lsrs	r3, r3, #24
    c5b0:	f003 030f 	and.w	r3, r3, #15
    c5b4:	2b04      	cmp	r3, #4
    c5b6:	d116      	bne.n	c5e6 <FlexCAN_IRQHandlerTxMB+0x9e>
        {
            FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    c5b8:	9902      	ldr	r1, [sp, #8]
    c5ba:	9819      	ldr	r0, [sp, #100]	; 0x64
    c5bc:	f7ff fa0c 	bl	b9d8 <FlexCAN_ClearMsgBuffIntStatusFlag>
    c5c0:	e011      	b.n	c5e6 <FlexCAN_IRQHandlerTxMB+0x9e>
        }
    }
    else
    {
        pState->mbs[u32MbIdx].time_stamp = FlexCAN_GetMsgBuffTimestamp(pBase, u32MbIdx);
    c5c2:	9902      	ldr	r1, [sp, #8]
    c5c4:	9819      	ldr	r0, [sp, #100]	; 0x64
    c5c6:	f002 fd7b 	bl	f0c0 <FlexCAN_GetMsgBuffTimestamp>
    c5ca:	4601      	mov	r1, r0
    c5cc:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c5ce:	9b02      	ldr	r3, [sp, #8]
    c5d0:	011b      	lsls	r3, r3, #4
    c5d2:	4413      	add	r3, r2
    c5d4:	330c      	adds	r3, #12
    c5d6:	6019      	str	r1, [r3, #0]
        FlexCAN_UnlockRxMsgBuff(pBase);
    c5d8:	9819      	ldr	r0, [sp, #100]	; 0x64
    c5da:	f7ff f9f6 	bl	b9ca <FlexCAN_UnlockRxMsgBuff>
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    c5de:	9902      	ldr	r1, [sp, #8]
    c5e0:	9819      	ldr	r0, [sp, #100]	; 0x64
    c5e2:	f7ff f9f9 	bl	b9d8 <FlexCAN_ClearMsgBuffIntStatusFlag>
    }

    pState->mbs[u32MbIdx].state = FLEXCAN_MB_IDLE;
    c5e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c5e8:	9b02      	ldr	r3, [sp, #8]
    c5ea:	011b      	lsls	r3, r3, #4
    c5ec:	4413      	add	r3, r2
    c5ee:	3304      	adds	r3, #4
    c5f0:	2200      	movs	r2, #0
    c5f2:	601a      	str	r2, [r3, #0]

    /* Invoke callback */
    if (pState->callback != NULL_PTR)
    c5f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c5f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c5fa:	2b00      	cmp	r3, #0
    c5fc:	d008      	beq.n	c610 <FlexCAN_IRQHandlerTxMB+0xc8>
    {
        pState->callback(u8Instance, FLEXCAN_EVENT_TX_COMPLETE, u32MbIdx, pState);
    c5fe:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c600:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c604:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c608:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c60a:	9a02      	ldr	r2, [sp, #8]
    c60c:	2104      	movs	r1, #4
    c60e:	47a0      	blx	r4
    }

    if (FLEXCAN_MB_IDLE == pState->mbs[u32MbIdx].state)
    c610:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c612:	9b02      	ldr	r3, [sp, #8]
    c614:	011b      	lsls	r3, r3, #4
    c616:	4413      	add	r3, r2
    c618:	3304      	adds	r3, #4
    c61a:	681b      	ldr	r3, [r3, #0]
    c61c:	2b00      	cmp	r3, #0
    c61e:	d112      	bne.n	c646 <FlexCAN_IRQHandlerTxMB+0xfe>
    {
        /* callback is not called, need to reset to default value */
        pState->mbs[u32MbIdx].isPolling = TRUE;
    c620:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c622:	9b02      	ldr	r3, [sp, #8]
    c624:	011b      	lsls	r3, r3, #4
    c626:	4413      	add	r3, r2
    c628:	3308      	adds	r3, #8
    c62a:	2201      	movs	r2, #1
    c62c:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    c62e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c630:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c634:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c638:	9300      	str	r3, [sp, #0]
    c63a:	2300      	movs	r3, #0
    c63c:	9a02      	ldr	r2, [sp, #8]
    c63e:	9819      	ldr	r0, [sp, #100]	; 0x64
    c640:	f002 fc32 	bl	eea8 <FlexCAN_SetMsgBuffIntCmd>
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    c644:	e012      	b.n	c66c <FlexCAN_IRQHandlerTxMB+0x124>
    else if (TRUE == pState->mbs[u32MbIdx].isPolling)
    c646:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c648:	9b02      	ldr	r3, [sp, #8]
    c64a:	011b      	lsls	r3, r3, #4
    c64c:	4413      	add	r3, r2
    c64e:	3308      	adds	r3, #8
    c650:	781b      	ldrb	r3, [r3, #0]
    c652:	2b00      	cmp	r3, #0
    c654:	d00a      	beq.n	c66c <FlexCAN_IRQHandlerTxMB+0x124>
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    c656:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c658:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c65c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c660:	9300      	str	r3, [sp, #0]
    c662:	2300      	movs	r3, #0
    c664:	9a02      	ldr	r2, [sp, #8]
    c666:	9819      	ldr	r0, [sp, #100]	; 0x64
    c668:	f002 fc1e 	bl	eea8 <FlexCAN_SetMsgBuffIntCmd>
}
    c66c:	bf00      	nop
    c66e:	b01a      	add	sp, #104	; 0x68
    c670:	bd10      	pop	{r4, pc}
    c672:	bf00      	nop
    c674:	000184e4 	.word	0x000184e4
    c678:	1fff935c 	.word	0x1fff935c

0000c67c <FlexCAN_IRQHandlerRxFIFO>:
 * Function Name : FlexCAN_IRQHandlerRxFIFO
 * Description   : Process IRQHandler in case of RxFIFO mode selection for CAN interface.
 *
 *END**************************************************************************/
static inline void FlexCAN_IRQHandlerRxFIFO(uint8 instance, uint32 mb_idx)
{
    c67c:	b510      	push	{r4, lr}
    c67e:	b098      	sub	sp, #96	; 0x60
    c680:	4603      	mov	r3, r0
    c682:	9100      	str	r1, [sp, #0]
    c684:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    c688:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c68c:	4a3c      	ldr	r2, [pc, #240]	; (c780 <FlexCAN_IRQHandlerRxFIFO+0x104>)
    c68e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c692:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    c694:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c698:	4a3a      	ldr	r2, [pc, #232]	; (c784 <FlexCAN_IRQHandlerRxFIFO+0x108>)
    c69a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c69e:	9316      	str	r3, [sp, #88]	; 0x58
    Flexcan_Ip_MsgBuffType data;

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage  */
    if (NULL_PTR == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage)
    c6a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c6a2:	681b      	ldr	r3, [r3, #0]
    c6a4:	2b00      	cmp	r3, #0
    c6a6:	d102      	bne.n	c6ae <FlexCAN_IRQHandlerRxFIFO+0x32>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = &data;
    c6a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c6aa:	aa02      	add	r2, sp, #8
    c6ac:	601a      	str	r2, [r3, #0]
    }
    switch (mb_idx)
    c6ae:	9b00      	ldr	r3, [sp, #0]
    c6b0:	2b07      	cmp	r3, #7
    c6b2:	d048      	beq.n	c746 <FlexCAN_IRQHandlerRxFIFO+0xca>
    c6b4:	9b00      	ldr	r3, [sp, #0]
    c6b6:	2b07      	cmp	r3, #7
    c6b8:	d858      	bhi.n	c76c <FlexCAN_IRQHandlerRxFIFO+0xf0>
    c6ba:	9b00      	ldr	r3, [sp, #0]
    c6bc:	2b05      	cmp	r3, #5
    c6be:	d003      	beq.n	c6c8 <FlexCAN_IRQHandlerRxFIFO+0x4c>
    c6c0:	9b00      	ldr	r3, [sp, #0]
    c6c2:	2b06      	cmp	r3, #6
    c6c4:	d02c      	beq.n	c720 <FlexCAN_IRQHandlerRxFIFO+0xa4>
            }

            break;
        default:
            /* Do Nothing */
            break;
    c6c6:	e051      	b.n	c76c <FlexCAN_IRQHandlerRxFIFO+0xf0>
            if (FLEXCAN_MB_RX_BUSY == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c6c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c6ca:	685b      	ldr	r3, [r3, #4]
    c6cc:	2b01      	cmp	r3, #1
    c6ce:	d14f      	bne.n	c770 <FlexCAN_IRQHandlerRxFIFO+0xf4>
                FlexCAN_ReadRxFifo(base, state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage);
    c6d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c6d2:	681b      	ldr	r3, [r3, #0]
    c6d4:	4619      	mov	r1, r3
    c6d6:	9817      	ldr	r0, [sp, #92]	; 0x5c
    c6d8:	f003 f98d 	bl	f9f6 <FlexCAN_ReadRxFifo>
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c6dc:	9900      	ldr	r1, [sp, #0]
    c6de:	9817      	ldr	r0, [sp, #92]	; 0x5c
    c6e0:	f7ff f97a 	bl	b9d8 <FlexCAN_ClearMsgBuffIntStatusFlag>
                state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    c6e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c6e6:	2200      	movs	r2, #0
    c6e8:	605a      	str	r2, [r3, #4]
                if (state->callback != NULL_PTR)
    c6ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c6ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c6f0:	2b00      	cmp	r3, #0
    c6f2:	d008      	beq.n	c706 <FlexCAN_IRQHandlerRxFIFO+0x8a>
                    state->callback(instance, FLEXCAN_EVENT_RXFIFO_COMPLETE, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    c6f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c6f6:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c6fa:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c6fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c700:	2200      	movs	r2, #0
    c702:	2101      	movs	r1, #1
    c704:	47a0      	blx	r4
                if (FLEXCAN_MB_IDLE == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    c706:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c708:	685b      	ldr	r3, [r3, #4]
    c70a:	2b00      	cmp	r3, #0
    c70c:	d130      	bne.n	c770 <FlexCAN_IRQHandlerRxFIFO+0xf4>
                    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    c70e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c710:	2201      	movs	r2, #1
    c712:	721a      	strb	r2, [r3, #8]
                    FlexCAN_CompleteRxMessageFifoData(instance);
    c714:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c718:	4618      	mov	r0, r3
    c71a:	f000 fc61 	bl	cfe0 <FlexCAN_CompleteRxMessageFifoData>
            break;
    c71e:	e027      	b.n	c770 <FlexCAN_IRQHandlerRxFIFO+0xf4>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c720:	9900      	ldr	r1, [sp, #0]
    c722:	9817      	ldr	r0, [sp, #92]	; 0x5c
    c724:	f7ff f958 	bl	b9d8 <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    c728:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c72a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c72e:	2b00      	cmp	r3, #0
    c730:	d020      	beq.n	c774 <FlexCAN_IRQHandlerRxFIFO+0xf8>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_WARNING, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    c732:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c734:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c738:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c73c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c73e:	2200      	movs	r2, #0
    c740:	2102      	movs	r1, #2
    c742:	47a0      	blx	r4
            break;
    c744:	e016      	b.n	c774 <FlexCAN_IRQHandlerRxFIFO+0xf8>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    c746:	9900      	ldr	r1, [sp, #0]
    c748:	9817      	ldr	r0, [sp, #92]	; 0x5c
    c74a:	f7ff f945 	bl	b9d8 <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    c74e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c750:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    c754:	2b00      	cmp	r3, #0
    c756:	d00f      	beq.n	c778 <FlexCAN_IRQHandlerRxFIFO+0xfc>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_OVERFLOW, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    c758:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c75a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c75e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c762:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c764:	2200      	movs	r2, #0
    c766:	2103      	movs	r1, #3
    c768:	47a0      	blx	r4
            break;
    c76a:	e005      	b.n	c778 <FlexCAN_IRQHandlerRxFIFO+0xfc>
            break;
    c76c:	bf00      	nop
    c76e:	e004      	b.n	c77a <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    c770:	bf00      	nop
    c772:	e002      	b.n	c77a <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    c774:	bf00      	nop
    c776:	e000      	b.n	c77a <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    c778:	bf00      	nop
    }
}
    c77a:	bf00      	nop
    c77c:	b018      	add	sp, #96	; 0x60
    c77e:	bd10      	pop	{r4, pc}
    c780:	000184e4 	.word	0x000184e4
    c784:	1fff935c 	.word	0x1fff935c

0000c788 <FlexCAN_AbortTxTransfer>:
 * Description   : Abort transfer for Tx buffer.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_AbortTxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    c788:	b500      	push	{lr}
    c78a:	b08b      	sub	sp, #44	; 0x2c
    c78c:	4603      	mov	r3, r0
    c78e:	460a      	mov	r2, r1
    c790:	f88d 3007 	strb.w	r3, [sp, #7]
    c794:	4613      	mov	r3, r2
    c796:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    c79a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c79e:	4a3c      	ldr	r2, [pc, #240]	; (c890 <FlexCAN_AbortTxTransfer+0x108>)
    c7a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7a4:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    c7a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c7aa:	4a3a      	ldr	r2, [pc, #232]	; (c894 <FlexCAN_AbortTxTransfer+0x10c>)
    c7ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7b0:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    c7b2:	2300      	movs	r3, #0
    c7b4:	9309      	str	r3, [sp, #36]	; 0x24

    uint32 timeStart = 0U;
    c7b6:	2300      	movs	r3, #0
    c7b8:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    c7ba:	2300      	movs	r3, #0
    c7bc:	9308      	str	r3, [sp, #32]
    uint32 flexcan_mb_config = 0;
    c7be:	2300      	movs	r3, #0
    c7c0:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = 0U;
    c7c2:	2300      	movs	r3, #0
    c7c4:	9304      	str	r3, [sp, #16]
    volatile uint32 * flexcan_mb = NULL_PTR;
    c7c6:	2300      	movs	r3, #0
    c7c8:	9303      	str	r3, [sp, #12]

    flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    c7ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c7ce:	4619      	mov	r1, r3
    c7d0:	9807      	ldr	r0, [sp, #28]
    c7d2:	f001 ffe1 	bl	e798 <FlexCAN_GetMsgBuffRegion>
    c7d6:	9003      	str	r0, [sp, #12]
    flexcan_mb_config = * flexcan_mb;
    c7d8:	9b03      	ldr	r3, [sp, #12]
    c7da:	681b      	ldr	r3, [r3, #0]
    c7dc:	9305      	str	r3, [sp, #20]
    /* Reset the code */
    flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    c7de:	9b05      	ldr	r3, [sp, #20]
    c7e0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    c7e4:	9305      	str	r3, [sp, #20]
    flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    c7e6:	9b05      	ldr	r3, [sp, #20]
    c7e8:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    c7ec:	9305      	str	r3, [sp, #20]
    *flexcan_mb = flexcan_mb_config;
    c7ee:	9b03      	ldr	r3, [sp, #12]
    c7f0:	9a05      	ldr	r2, [sp, #20]
    c7f2:	601a      	str	r2, [r3, #0]

    /* Wait to finish abort operation */
    uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c7f4:	2100      	movs	r1, #0
    c7f6:	4828      	ldr	r0, [pc, #160]	; (c898 <FlexCAN_AbortTxTransfer+0x110>)
    c7f8:	f7f5 fb26 	bl	1e48 <OsIf_MicrosToTicks>
    c7fc:	9004      	str	r0, [sp, #16]
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c7fe:	2000      	movs	r0, #0
    c800:	f7f5 fad6 	bl	1db0 <OsIf_GetCounter>
    c804:	4603      	mov	r3, r0
    c806:	9302      	str	r3, [sp, #8]
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    c808:	e00f      	b.n	c82a <FlexCAN_AbortTxTransfer+0xa2>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c80a:	ab02      	add	r3, sp, #8
    c80c:	2100      	movs	r1, #0
    c80e:	4618      	mov	r0, r3
    c810:	f7f5 fae7 	bl	1de2 <OsIf_GetElapsed>
    c814:	4602      	mov	r2, r0
    c816:	9b08      	ldr	r3, [sp, #32]
    c818:	4413      	add	r3, r2
    c81a:	9308      	str	r3, [sp, #32]
        if (timeElapsed >= uS2Ticks)
    c81c:	9a08      	ldr	r2, [sp, #32]
    c81e:	9b04      	ldr	r3, [sp, #16]
    c820:	429a      	cmp	r2, r3
    c822:	d302      	bcc.n	c82a <FlexCAN_AbortTxTransfer+0xa2>
        {
            result = FLEXCAN_STATUS_TIMEOUT;
    c824:	2303      	movs	r3, #3
    c826:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    c828:	e008      	b.n	c83c <FlexCAN_AbortTxTransfer+0xb4>
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    c82a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c82e:	4619      	mov	r1, r3
    c830:	9807      	ldr	r0, [sp, #28]
    c832:	f7ff f8e4 	bl	b9fe <FlexCAN_GetBuffStatusFlag>
    c836:	4603      	mov	r3, r0
    c838:	2b00      	cmp	r3, #0
    c83a:	d0e6      	beq.n	c80a <FlexCAN_AbortTxTransfer+0x82>
        }
    }
    if (result != FLEXCAN_STATUS_TIMEOUT)
    c83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c83e:	2b03      	cmp	r3, #3
    c840:	d012      	beq.n	c868 <FlexCAN_AbortTxTransfer+0xe0>
    {
        flexcan_mb_config = *flexcan_mb;
    c842:	9b03      	ldr	r3, [sp, #12]
    c844:	681b      	ldr	r3, [r3, #0]
    c846:	9305      	str	r3, [sp, #20]
        /* Check if the MBs have been safely Inactivated */
        if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    c848:	9b05      	ldr	r3, [sp, #20]
    c84a:	0e1b      	lsrs	r3, r3, #24
    c84c:	f003 030f 	and.w	r3, r3, #15
    c850:	2b08      	cmp	r3, #8
    c852:	d101      	bne.n	c858 <FlexCAN_AbortTxTransfer+0xd0>
        {
            /* Transmission have occurred */
            result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    c854:	2305      	movs	r3, #5
    c856:	9309      	str	r3, [sp, #36]	; 0x24
        }

        if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    c858:	9b05      	ldr	r3, [sp, #20]
    c85a:	0e1b      	lsrs	r3, r3, #24
    c85c:	f003 030f 	and.w	r3, r3, #15
    c860:	2b09      	cmp	r3, #9
    c862:	d101      	bne.n	c868 <FlexCAN_AbortTxTransfer+0xe0>
        {
            /* Transmission have been aborted */
            result = FLEXCAN_STATUS_SUCCESS;
    c864:	2300      	movs	r3, #0
    c866:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    c868:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c86c:	4619      	mov	r1, r3
    c86e:	9807      	ldr	r0, [sp, #28]
    c870:	f7ff f8b2 	bl	b9d8 <FlexCAN_ClearMsgBuffIntStatusFlag>
    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    c874:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c878:	9a06      	ldr	r2, [sp, #24]
    c87a:	011b      	lsls	r3, r3, #4
    c87c:	4413      	add	r3, r2
    c87e:	3304      	adds	r3, #4
    c880:	2200      	movs	r2, #0
    c882:	601a      	str	r2, [r3, #0]

    return result;
    c884:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    c886:	4618      	mov	r0, r3
    c888:	b00b      	add	sp, #44	; 0x2c
    c88a:	f85d fb04 	ldr.w	pc, [sp], #4
    c88e:	bf00      	nop
    c890:	000184e4 	.word	0x000184e4
    c894:	1fff935c 	.word	0x1fff935c
    c898:	000f4240 	.word	0x000f4240

0000c89c <FlexCAN_AbortRxTransfer>:
 * Description   : Abort transfer for Rx normal or legacy fifo if enabled.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static void FlexCAN_AbortRxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    c89c:	b500      	push	{lr}
    c89e:	b089      	sub	sp, #36	; 0x24
    c8a0:	4603      	mov	r3, r0
    c8a2:	460a      	mov	r2, r1
    c8a4:	f88d 3007 	strb.w	r3, [sp, #7]
    c8a8:	4613      	mov	r3, r2
    c8aa:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    c8ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c8b2:	4a41      	ldr	r2, [pc, #260]	; (c9b8 <FlexCAN_AbortRxTransfer+0x11c>)
    c8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8b8:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    c8ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c8be:	4a3f      	ldr	r2, [pc, #252]	; (c9bc <FlexCAN_AbortRxTransfer+0x120>)
    c8c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8c4:	9306      	str	r3, [sp, #24]
    uint8 val1 = 0U;
    c8c6:	2300      	movs	r3, #0
    c8c8:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 val2 = 0U;
    c8cc:	2300      	movs	r3, #0
    c8ce:	9304      	str	r3, [sp, #16]
    uint32 flexcan_mb_config = 0;
    c8d0:	2300      	movs	r3, #0
    c8d2:	9303      	str	r3, [sp, #12]
    volatile uint32 * flexcan_mb = NULL_PTR;
    c8d4:	2300      	movs	r3, #0
    c8d6:	9302      	str	r3, [sp, #8]

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    c8d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c8dc:	9a06      	ldr	r2, [sp, #24]
    c8de:	011b      	lsls	r3, r3, #4
    c8e0:	4413      	add	r3, r2
    c8e2:	3304      	adds	r3, #4
    c8e4:	2200      	movs	r2, #0
    c8e6:	601a      	str	r2, [r3, #0]
    /* Check if fifo enabled */
    if (TRUE == state->bIsLegacyFifoEn)
    c8e8:	9b06      	ldr	r3, [sp, #24]
    c8ea:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    c8ee:	2b00      	cmp	r3, #0
    c8f0:	d03c      	beq.n	c96c <FlexCAN_AbortRxTransfer+0xd0>
    {
        /* Get the number of RX FIFO Filters*/
        val1 = (uint8)(((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    c8f2:	9b07      	ldr	r3, [sp, #28]
    c8f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c8f6:	0e1b      	lsrs	r3, r3, #24
    c8f8:	b2db      	uxtb	r3, r3
    c8fa:	f003 030f 	and.w	r3, r3, #15
    c8fe:	f88d 3017 	strb.w	r3, [sp, #23]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        val2 = RxFifoOcuppiedLastMsgBuff(val1);
    c902:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c906:	4618      	mov	r0, r3
    c908:	f7ff f9f3 	bl	bcf2 <RxFifoOcuppiedLastMsgBuff>
    c90c:	9004      	str	r0, [sp, #16]
        if (mb_idx > val2)
    c90e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c912:	9a04      	ldr	r2, [sp, #16]
    c914:	429a      	cmp	r2, r3
    c916:	d21b      	bcs.n	c950 <FlexCAN_AbortRxTransfer+0xb4>
        {
            /* This operation is not allowed for MB that are part of RxFIFO */
            flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    c918:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c91c:	4619      	mov	r1, r3
    c91e:	9807      	ldr	r0, [sp, #28]
    c920:	f001 ff3a 	bl	e798 <FlexCAN_GetMsgBuffRegion>
    c924:	9002      	str	r0, [sp, #8]
            flexcan_mb_config = * flexcan_mb;
    c926:	9b02      	ldr	r3, [sp, #8]
    c928:	681b      	ldr	r3, [r3, #0]
    c92a:	9303      	str	r3, [sp, #12]
            /* Reset the code and unlock the MB */
            flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    c92c:	9b03      	ldr	r3, [sp, #12]
    c92e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    c932:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
            *flexcan_mb = flexcan_mb_config;
    c934:	9b02      	ldr	r3, [sp, #8]
    c936:	9a03      	ldr	r2, [sp, #12]
    c938:	601a      	str	r2, [r3, #0]
            /* Reconfigure The MB as left by RxMBconfig */
            flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    c93a:	9b03      	ldr	r3, [sp, #12]
    c93c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    c940:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    c942:	9b03      	ldr	r3, [sp, #12]
    c944:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    c948:	9303      	str	r3, [sp, #12]
            *flexcan_mb = flexcan_mb_config;
    c94a:	9b02      	ldr	r3, [sp, #8]
    c94c:	9a03      	ldr	r2, [sp, #12]
    c94e:	601a      	str	r2, [r3, #0]
        }
        if (FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    c950:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c954:	2b00      	cmp	r3, #0
    c956:	d125      	bne.n	c9a4 <FlexCAN_AbortRxTransfer+0x108>
        {
            FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, state->isIntActive);
    c958:	9b06      	ldr	r3, [sp, #24]
    c95a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    c95e:	f89d 1007 	ldrb.w	r1, [sp, #7]
    c962:	2205      	movs	r2, #5
    c964:	9807      	ldr	r0, [sp, #28]
    c966:	f002 faf5 	bl	ef54 <FLEXCAN_ClearMsgBuffIntCmd>
    c96a:	e01b      	b.n	c9a4 <FlexCAN_AbortRxTransfer+0x108>
        }
    }
    else
    {
        /* This operation is not allowed for MB that are part of RxFIFO */
        flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    c96c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c970:	4619      	mov	r1, r3
    c972:	9807      	ldr	r0, [sp, #28]
    c974:	f001 ff10 	bl	e798 <FlexCAN_GetMsgBuffRegion>
    c978:	9002      	str	r0, [sp, #8]
        flexcan_mb_config = * flexcan_mb;
    c97a:	9b02      	ldr	r3, [sp, #8]
    c97c:	681b      	ldr	r3, [r3, #0]
    c97e:	9303      	str	r3, [sp, #12]
        /* Reset the code and unlock the MB */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    c980:	9b03      	ldr	r3, [sp, #12]
    c982:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    c986:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
        *flexcan_mb = flexcan_mb_config;
    c988:	9b02      	ldr	r3, [sp, #8]
    c98a:	9a03      	ldr	r2, [sp, #12]
    c98c:	601a      	str	r2, [r3, #0]
        /* Reconfigure The MB as left by RxMBconfig */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    c98e:	9b03      	ldr	r3, [sp, #12]
    c990:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    c994:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    c996:	9b03      	ldr	r3, [sp, #12]
    c998:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    c99c:	9303      	str	r3, [sp, #12]
        *flexcan_mb = flexcan_mb_config;
    c99e:	9b02      	ldr	r3, [sp, #8]
    c9a0:	9a03      	ldr	r2, [sp, #12]
    c9a2:	601a      	str	r2, [r3, #0]
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    c9a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c9a8:	4619      	mov	r1, r3
    c9aa:	9807      	ldr	r0, [sp, #28]
    c9ac:	f7ff f814 	bl	b9d8 <FlexCAN_ClearMsgBuffIntStatusFlag>
}
    c9b0:	bf00      	nop
    c9b2:	b009      	add	sp, #36	; 0x24
    c9b4:	f85d fb04 	ldr.w	pc, [sp], #4
    c9b8:	000184e4 	.word	0x000184e4
    c9bc:	1fff935c 	.word	0x1fff935c

0000c9c0 <FlexCAN_Ip_Init_Privileged>:
/* implements FlexCAN_Ip_Init_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Init_Privileged(uint8 Flexcan_Ip_u8Instance,
                                                 Flexcan_Ip_StateType * Flexcan_Ip_pState,
                                                 const Flexcan_Ip_ConfigType * Flexcan_Ip_pData
                                                )
{
    c9c0:	b500      	push	{lr}
    c9c2:	b089      	sub	sp, #36	; 0x24
    c9c4:	4603      	mov	r3, r0
    c9c6:	9102      	str	r1, [sp, #8]
    c9c8:	9201      	str	r2, [sp, #4]
    c9ca:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    c9ce:	2300      	movs	r3, #0
    c9d0:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    c9d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c9d6:	4a36      	ldr	r2, [pc, #216]	; (cab0 <FlexCAN_Ip_Init_Privileged+0xf0>)
    c9d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9dc:	9305      	str	r3, [sp, #20]
    {
        OsIf_Trusted_Call1param(FlexCAN_SetUserAccessAllowed, pBase);
    }
#endif

    eResult = FlexCAN_InitController(Flexcan_Ip_u8Instance, pBase, Flexcan_Ip_pData);
    c9de:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c9e2:	9a01      	ldr	r2, [sp, #4]
    c9e4:	9905      	ldr	r1, [sp, #20]
    c9e6:	4618      	mov	r0, r3
    c9e8:	f7ff fa84 	bl	bef4 <FlexCAN_InitController>
    c9ec:	9006      	str	r0, [sp, #24]
    if (FLEXCAN_STATUS_SUCCESS == eResult)
    c9ee:	9b06      	ldr	r3, [sp, #24]
    c9f0:	2b00      	cmp	r3, #0
    c9f2:	d158      	bne.n	caa6 <FlexCAN_Ip_Init_Privileged+0xe6>
    {
        /* Init Baudrate */
        FlexCAN_InitBaudrate(pBase, Flexcan_Ip_pData);
    c9f4:	9901      	ldr	r1, [sp, #4]
    c9f6:	9805      	ldr	r0, [sp, #20]
    c9f8:	f7ff fad6 	bl	bfa8 <FlexCAN_InitBaudrate>
        /* Select mode */
        FlexCAN_SetOperationMode(pBase, Flexcan_Ip_pData->flexcanMode);
    c9fc:	9b01      	ldr	r3, [sp, #4]
    c9fe:	68db      	ldr	r3, [r3, #12]
    ca00:	4619      	mov	r1, r3
    ca02:	9805      	ldr	r0, [sp, #20]
    ca04:	f002 fdb8 	bl	f578 <FlexCAN_SetOperationMode>

#if (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON)
        FlexCAN_ConfigTimestamp(Flexcan_Ip_u8Instance, pBase, (const Flexcan_Ip_TimeStampConfigType *)(&Flexcan_Ip_pData->time_stamp));
#endif   /* (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON) */

        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    ca08:	2300      	movs	r3, #0
    ca0a:	9307      	str	r3, [sp, #28]
    ca0c:	e01d      	b.n	ca4a <FlexCAN_Ip_Init_Privileged+0x8a>
        {
            /* Check if blocking need to be any more present in sync\async discussions */
            /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
            Flexcan_Ip_pState->mbs[i].isPolling = TRUE;
    ca0e:	9a02      	ldr	r2, [sp, #8]
    ca10:	9b07      	ldr	r3, [sp, #28]
    ca12:	011b      	lsls	r3, r3, #4
    ca14:	4413      	add	r3, r2
    ca16:	3308      	adds	r3, #8
    ca18:	2201      	movs	r2, #1
    ca1a:	701a      	strb	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].pMBmessage = NULL_PTR;
    ca1c:	9a02      	ldr	r2, [sp, #8]
    ca1e:	9b07      	ldr	r3, [sp, #28]
    ca20:	011b      	lsls	r3, r3, #4
    ca22:	4413      	add	r3, r2
    ca24:	2200      	movs	r2, #0
    ca26:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].state = FLEXCAN_MB_IDLE;
    ca28:	9a02      	ldr	r2, [sp, #8]
    ca2a:	9b07      	ldr	r3, [sp, #28]
    ca2c:	011b      	lsls	r3, r3, #4
    ca2e:	4413      	add	r3, r2
    ca30:	3304      	adds	r3, #4
    ca32:	2200      	movs	r2, #0
    ca34:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].time_stamp = 0U;
    ca36:	9a02      	ldr	r2, [sp, #8]
    ca38:	9b07      	ldr	r3, [sp, #28]
    ca3a:	011b      	lsls	r3, r3, #4
    ca3c:	4413      	add	r3, r2
    ca3e:	330c      	adds	r3, #12
    ca40:	2200      	movs	r2, #0
    ca42:	601a      	str	r2, [r3, #0]
        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    ca44:	9b07      	ldr	r3, [sp, #28]
    ca46:	3301      	adds	r3, #1
    ca48:	9307      	str	r3, [sp, #28]
    ca4a:	9b07      	ldr	r3, [sp, #28]
    ca4c:	2b1f      	cmp	r3, #31
    ca4e:	d9de      	bls.n	ca0e <FlexCAN_Ip_Init_Privileged+0x4e>
        /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
        Flexcan_Ip_pState->enhancedFifoOutput.isPolling = TRUE;
        Flexcan_Ip_pState->enhancedFifoOutput.state = FLEXCAN_MB_IDLE;
#endif

        Flexcan_Ip_pState->transferType = Flexcan_Ip_pData->transfer_type;
    ca50:	9b01      	ldr	r3, [sp, #4]
    ca52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    ca54:	9b02      	ldr	r3, [sp, #8]
    ca56:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        Flexcan_Ip_pState->u32NumOfMbTransferByDMA = Flexcan_Ip_pData->num_enhanced_watermark;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

        /* Clear Callbacks in case of autovariables garbage */
        Flexcan_Ip_pState->callback = Flexcan_Ip_pData->Callback;
    ca5a:	9b01      	ldr	r3, [sp, #4]
    ca5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    ca5e:	9b02      	ldr	r3, [sp, #8]
    ca60:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        Flexcan_Ip_pState->callbackParam = NULL_PTR;
    ca64:	9b02      	ldr	r3, [sp, #8]
    ca66:	2200      	movs	r2, #0
    ca68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
        Flexcan_Ip_pState->error_callback = Flexcan_Ip_pData->ErrorCallback;
    ca6c:	9b01      	ldr	r3, [sp, #4]
    ca6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    ca70:	9b02      	ldr	r3, [sp, #8]
    ca72:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        Flexcan_Ip_pState->errorCallbackParam = NULL_PTR;
    ca76:	9b02      	ldr	r3, [sp, #8]
    ca78:	2200      	movs	r2, #0
    ca7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
        Flexcan_Ip_pState->bIsLegacyFifoEn = Flexcan_Ip_pData->is_rx_fifo_needed;
    ca7e:	9b01      	ldr	r3, [sp, #4]
    ca80:	7a1a      	ldrb	r2, [r3, #8]
    ca82:	9b02      	ldr	r3, [sp, #8]
    ca84:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
        Flexcan_Ip_pState->bIsEnhancedFifoEn = Flexcan_Ip_pData->is_enhanced_rx_fifo_needed;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
        Flexcan_Ip_pState->u32MaxMbNum = Flexcan_Ip_pData->max_num_mb;
    ca88:	9b01      	ldr	r3, [sp, #4]
    ca8a:	681a      	ldr	r2, [r3, #0]
    ca8c:	9b02      	ldr	r3, [sp, #8]
    ca8e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
        Flexcan_Ip_pState->isIntActive = TRUE;
    ca92:	9b02      	ldr	r3, [sp, #8]
    ca94:	2201      	movs	r2, #1
    ca96:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        /* Save runtime structure pointers so irq handler can point to the correct state structure */
        Flexcan_Ip_apxState[Flexcan_Ip_u8Instance] = Flexcan_Ip_pState;
    ca9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ca9e:	4905      	ldr	r1, [pc, #20]	; (cab4 <FlexCAN_Ip_Init_Privileged+0xf4>)
    caa0:	9a02      	ldr	r2, [sp, #8]
    caa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    return eResult;
    caa6:	9b06      	ldr	r3, [sp, #24]
}
    caa8:	4618      	mov	r0, r3
    caaa:	b009      	add	sp, #36	; 0x24
    caac:	f85d fb04 	ldr.w	pc, [sp], #4
    cab0:	000184e4 	.word	0x000184e4
    cab4:	1fff935c 	.word	0x1fff935c

0000cab8 <FlexCAN_Ip_Send>:
                                      uint8 mb_idx,
                                      const Flexcan_Ip_DataInfoType * tx_info,
                                      uint32 msg_id,
                                      const uint8 * mb_data
                                     )
{
    cab8:	b500      	push	{lr}
    caba:	b08b      	sub	sp, #44	; 0x2c
    cabc:	9204      	str	r2, [sp, #16]
    cabe:	9303      	str	r3, [sp, #12]
    cac0:	4603      	mov	r3, r0
    cac2:	f88d 3017 	strb.w	r3, [sp, #23]
    cac6:	460b      	mov	r3, r1
    cac8:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    cacc:	2301      	movs	r3, #1
    cace:	9309      	str	r3, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    cad0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cad4:	4a1c      	ldr	r2, [pc, #112]	; (cb48 <FlexCAN_Ip_Send+0x90>)
    cad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cada:	9308      	str	r3, [sp, #32]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    cadc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cae0:	4a1a      	ldr	r2, [pc, #104]	; (cb4c <FlexCAN_Ip_Send+0x94>)
    cae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cae6:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif
    if (!FlexCAN_IsListenOnlyModeEnabled(base))
    cae8:	9808      	ldr	r0, [sp, #32]
    caea:	f7ff f8f4 	bl	bcd6 <FlexCAN_IsListenOnlyModeEnabled>
    caee:	4603      	mov	r3, r0
    caf0:	f083 0301 	eor.w	r3, r3, #1
    caf4:	b2db      	uxtb	r3, r3
    caf6:	2b00      	cmp	r3, #0
    caf8:	d021      	beq.n	cb3e <FlexCAN_Ip_Send+0x86>
    {
        result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    cafa:	f89d 1016 	ldrb.w	r1, [sp, #22]
    cafe:	f89d 0017 	ldrb.w	r0, [sp, #23]
    cb02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cb04:	9300      	str	r3, [sp, #0]
    cb06:	9b03      	ldr	r3, [sp, #12]
    cb08:	9a04      	ldr	r2, [sp, #16]
    cb0a:	f7ff fb4b 	bl	c1a4 <FlexCAN_StartSendData>
    cb0e:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        if ((FLEXCAN_STATUS_SUCCESS ==  result) && (FALSE == tx_info->is_polling))
    cb10:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cb12:	2b00      	cmp	r3, #0
    cb14:	d113      	bne.n	cb3e <FlexCAN_Ip_Send+0x86>
    cb16:	9b04      	ldr	r3, [sp, #16]
    cb18:	7b1b      	ldrb	r3, [r3, #12]
    cb1a:	f083 0301 	eor.w	r3, r3, #1
    cb1e:	b2db      	uxtb	r3, r3
    cb20:	2b00      	cmp	r3, #0
    cb22:	d00c      	beq.n	cb3e <FlexCAN_Ip_Send+0x86>
        {
            /* Enable message buffer interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    cb24:	f89d 2016 	ldrb.w	r2, [sp, #22]
    cb28:	9b07      	ldr	r3, [sp, #28]
    cb2a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    cb2e:	f89d 1017 	ldrb.w	r1, [sp, #23]
    cb32:	9300      	str	r3, [sp, #0]
    cb34:	2301      	movs	r3, #1
    cb36:	9808      	ldr	r0, [sp, #32]
    cb38:	f002 f9b6 	bl	eea8 <FlexCAN_SetMsgBuffIntCmd>
    cb3c:	9009      	str	r0, [sp, #36]	; 0x24
        }
#endif
    }
    return result;
    cb3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    cb40:	4618      	mov	r0, r3
    cb42:	b00b      	add	sp, #44	; 0x2c
    cb44:	f85d fb04 	ldr.w	pc, [sp], #4
    cb48:	000184e4 	.word	0x000184e4
    cb4c:	1fff935c 	.word	0x1fff935c

0000cb50 <FlexCAN_Ip_ConfigRxMb>:
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxMb(uint8 instance,
                                            uint8 mb_idx,
                                            const Flexcan_Ip_DataInfoType * rx_info,
                                            uint32 msg_id
                                           )
{
    cb50:	b500      	push	{lr}
    cb52:	b08b      	sub	sp, #44	; 0x2c
    cb54:	9202      	str	r2, [sp, #8]
    cb56:	9301      	str	r3, [sp, #4]
    cb58:	4603      	mov	r3, r0
    cb5a:	f88d 300f 	strb.w	r3, [sp, #15]
    cb5e:	460b      	mov	r3, r1
    cb60:	f88d 300e 	strb.w	r3, [sp, #14]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    cb64:	2300      	movs	r3, #0
    cb66:	9309      	str	r3, [sp, #36]	; 0x24
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    cb68:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cb6c:	4a19      	ldr	r2, [pc, #100]	; (cbd4 <FlexCAN_Ip_ConfigRxMb+0x84>)
    cb6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb72:	9308      	str	r3, [sp, #32]
    }
    else
    {
#endif
        /* Clear the message buffer flag if previous remained triggered */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    cb74:	f89d 300e 	ldrb.w	r3, [sp, #14]
    cb78:	4619      	mov	r1, r3
    cb7a:	9808      	ldr	r0, [sp, #32]
    cb7c:	f7fe ff2c 	bl	b9d8 <FlexCAN_ClearMsgBuffIntStatusFlag>

        cs.dataLen = rx_info->data_length;
    cb80:	9b02      	ldr	r3, [sp, #8]
    cb82:	685b      	ldr	r3, [r3, #4]
    cb84:	9306      	str	r3, [sp, #24]
        cs.msgIdType = rx_info->msg_id_type;
    cb86:	9b02      	ldr	r3, [sp, #8]
    cb88:	681b      	ldr	r3, [r3, #0]
    cb8a:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = rx_info->fd_enable;
    cb8c:	9b02      	ldr	r3, [sp, #8]
    cb8e:	7a1b      	ldrb	r3, [r3, #8]
    cb90:	f88d 301c 	strb.w	r3, [sp, #28]
    #endif

        /* Initialize rx mb*/
        cs.code = (uint32)FLEXCAN_RX_NOT_USED;
    cb94:	230f      	movs	r3, #15
    cb96:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    cb98:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cb9c:	aa04      	add	r2, sp, #16
    cb9e:	9b01      	ldr	r3, [sp, #4]
    cba0:	9808      	ldr	r0, [sp, #32]
    cba2:	f002 fa25 	bl	eff0 <FlexCAN_SetRxMsgBuff>

        /* Initialize receive MB*/
        cs.code = (uint32)FLEXCAN_RX_INACTIVE;
    cba6:	2300      	movs	r3, #0
    cba8:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    cbaa:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cbae:	aa04      	add	r2, sp, #16
    cbb0:	9b01      	ldr	r3, [sp, #4]
    cbb2:	9808      	ldr	r0, [sp, #32]
    cbb4:	f002 fa1c 	bl	eff0 <FlexCAN_SetRxMsgBuff>

        /* Set up FlexCAN message buffer fields for receiving data*/
        cs.code = (uint32)FLEXCAN_RX_EMPTY;
    cbb8:	2304      	movs	r3, #4
    cbba:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    cbbc:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cbc0:	aa04      	add	r2, sp, #16
    cbc2:	9b01      	ldr	r3, [sp, #4]
    cbc4:	9808      	ldr	r0, [sp, #32]
    cbc6:	f002 fa13 	bl	eff0 <FlexCAN_SetRxMsgBuff>
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    cbca:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    cbcc:	4618      	mov	r0, r3
    cbce:	b00b      	add	sp, #44	; 0x2c
    cbd0:	f85d fb04 	ldr.w	pc, [sp], #4
    cbd4:	000184e4 	.word	0x000184e4

0000cbd8 <FlexCAN_Ip_Receive>:
Flexcan_Ip_StatusType FlexCAN_Ip_Receive(uint8 instance,
                                         uint8 mb_idx,
                                         Flexcan_Ip_MsgBuffType * data,
                                         boolean isPolling
                                        )
{
    cbd8:	b500      	push	{lr}
    cbda:	b089      	sub	sp, #36	; 0x24
    cbdc:	9202      	str	r2, [sp, #8]
    cbde:	461a      	mov	r2, r3
    cbe0:	4603      	mov	r3, r0
    cbe2:	f88d 300f 	strb.w	r3, [sp, #15]
    cbe6:	460b      	mov	r3, r1
    cbe8:	f88d 300e 	strb.w	r3, [sp, #14]
    cbec:	4613      	mov	r3, r2
    cbee:	f88d 300d 	strb.w	r3, [sp, #13]

    Flexcan_Ip_StatusType result;
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    cbf2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cbf6:	4a18      	ldr	r2, [pc, #96]	; (cc58 <FlexCAN_Ip_Receive+0x80>)
    cbf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbfc:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    cbfe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc02:	4a16      	ldr	r2, [pc, #88]	; (cc5c <FlexCAN_Ip_Receive+0x84>)
    cc04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc08:	9305      	str	r3, [sp, #20]
#endif
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    #endif

    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    cc0a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cc0e:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cc12:	f89d 000f 	ldrb.w	r0, [sp, #15]
    cc16:	9a02      	ldr	r2, [sp, #8]
    cc18:	f7ff fa86 	bl	c128 <FlexCAN_StartRxMessageBufferData>
    cc1c:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    cc1e:	9b07      	ldr	r3, [sp, #28]
    cc20:	2b00      	cmp	r3, #0
    cc22:	d113      	bne.n	cc4c <FlexCAN_Ip_Receive+0x74>
    cc24:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cc28:	f083 0301 	eor.w	r3, r3, #1
    cc2c:	b2db      	uxtb	r3, r3
    cc2e:	2b00      	cmp	r3, #0
    cc30:	d00c      	beq.n	cc4c <FlexCAN_Ip_Receive+0x74>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    cc32:	f89d 200e 	ldrb.w	r2, [sp, #14]
    cc36:	9b05      	ldr	r3, [sp, #20]
    cc38:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    cc3c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    cc40:	9300      	str	r3, [sp, #0]
    cc42:	2301      	movs	r3, #1
    cc44:	9806      	ldr	r0, [sp, #24]
    cc46:	f002 f92f 	bl	eea8 <FlexCAN_SetMsgBuffIntCmd>
    cc4a:	9007      	str	r0, [sp, #28]
    }
#endif
    return result;
    cc4c:	9b07      	ldr	r3, [sp, #28]
}
    cc4e:	4618      	mov	r0, r3
    cc50:	b009      	add	sp, #36	; 0x24
    cc52:	f85d fb04 	ldr.w	pc, [sp], #4
    cc56:	bf00      	nop
    cc58:	000184e4 	.word	0x000184e4
    cc5c:	1fff935c 	.word	0x1fff935c

0000cc60 <FlexCAN_Ip_ReceiveBlocking>:
                                                 uint8 mb_idx,
                                                 Flexcan_Ip_MsgBuffType * data,
                                                 boolean isPolling,
                                                 uint32 u32TimeoutMs
                                                )
{
    cc60:	b500      	push	{lr}
    cc62:	b08b      	sub	sp, #44	; 0x2c
    cc64:	9202      	str	r2, [sp, #8]
    cc66:	461a      	mov	r2, r3
    cc68:	4603      	mov	r3, r0
    cc6a:	f88d 300f 	strb.w	r3, [sp, #15]
    cc6e:	460b      	mov	r3, r1
    cc70:	f88d 300e 	strb.w	r3, [sp, #14]
    cc74:	4613      	mov	r3, r2
    cc76:	f88d 300d 	strb.w	r3, [sp, #13]
    Flexcan_Ip_StatusType result;
    uint32 timeStart = 0U;
    cc7a:	2300      	movs	r3, #0
    cc7c:	9304      	str	r3, [sp, #16]
    uint32 timeElapsed = 0U;
    cc7e:	2300      	movs	r3, #0
    cc80:	9308      	str	r3, [sp, #32]
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    cc82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cc84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cc88:	fb02 f303 	mul.w	r3, r2, r3
    cc8c:	2100      	movs	r1, #0
    cc8e:	4618      	mov	r0, r3
    cc90:	f7f5 f8da 	bl	1e48 <OsIf_MicrosToTicks>
    cc94:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    cc96:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc9a:	4a4c      	ldr	r2, [pc, #304]	; (cdcc <FlexCAN_Ip_ReceiveBlocking+0x16c>)
    cc9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cca0:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    cca2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cca6:	4a4a      	ldr	r2, [pc, #296]	; (cdd0 <FlexCAN_Ip_ReceiveBlocking+0x170>)
    cca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccac:	9305      	str	r3, [sp, #20]
#else
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    ccae:	f89d 300d 	ldrb.w	r3, [sp, #13]
    ccb2:	f89d 100e 	ldrb.w	r1, [sp, #14]
    ccb6:	f89d 000f 	ldrb.w	r0, [sp, #15]
    ccba:	9a02      	ldr	r2, [sp, #8]
    ccbc:	f7ff fa34 	bl	c128 <FlexCAN_StartRxMessageBufferData>
    ccc0:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    ccc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ccc4:	2b00      	cmp	r3, #0
    ccc6:	d113      	bne.n	ccf0 <FlexCAN_Ip_ReceiveBlocking+0x90>
    ccc8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cccc:	f083 0301 	eor.w	r3, r3, #1
    ccd0:	b2db      	uxtb	r3, r3
    ccd2:	2b00      	cmp	r3, #0
    ccd4:	d00c      	beq.n	ccf0 <FlexCAN_Ip_ReceiveBlocking+0x90>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    ccd6:	f89d 200e 	ldrb.w	r2, [sp, #14]
    ccda:	9b06      	ldr	r3, [sp, #24]
    ccdc:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    cce0:	f89d 100f 	ldrb.w	r1, [sp, #15]
    cce4:	9300      	str	r3, [sp, #0]
    cce6:	2301      	movs	r3, #1
    cce8:	9805      	ldr	r0, [sp, #20]
    ccea:	f002 f8dd 	bl	eea8 <FlexCAN_SetMsgBuffIntCmd>
    ccee:	9009      	str	r0, [sp, #36]	; 0x24
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    ccf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ccf2:	2b00      	cmp	r3, #0
    ccf4:	d133      	bne.n	cd5e <FlexCAN_Ip_ReceiveBlocking+0xfe>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ccf6:	2000      	movs	r0, #0
    ccf8:	f7f5 f85a 	bl	1db0 <OsIf_GetCounter>
    ccfc:	4603      	mov	r3, r0
    ccfe:	9304      	str	r3, [sp, #16]
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    cd00:	e024      	b.n	cd4c <FlexCAN_Ip_ReceiveBlocking+0xec>
        {
            if (TRUE == isPolling)
    cd02:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cd06:	2b00      	cmp	r3, #0
    cd08:	d010      	beq.n	cd2c <FlexCAN_Ip_ReceiveBlocking+0xcc>
            {
                if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    cd0a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    cd0e:	4619      	mov	r1, r3
    cd10:	9805      	ldr	r0, [sp, #20]
    cd12:	f7fe fe74 	bl	b9fe <FlexCAN_GetBuffStatusFlag>
    cd16:	4603      	mov	r3, r0
    cd18:	2b00      	cmp	r3, #0
    cd1a:	d007      	beq.n	cd2c <FlexCAN_Ip_ReceiveBlocking+0xcc>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    cd1c:	f89d 200e 	ldrb.w	r2, [sp, #14]
    cd20:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cd24:	4611      	mov	r1, r2
    cd26:	4618      	mov	r0, r3
    cd28:	f7ff fb20 	bl	c36c <FlexCAN_IRQHandlerRxMB>
                }
            }
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    cd2c:	ab04      	add	r3, sp, #16
    cd2e:	2100      	movs	r1, #0
    cd30:	4618      	mov	r0, r3
    cd32:	f7f5 f856 	bl	1de2 <OsIf_GetElapsed>
    cd36:	4602      	mov	r2, r0
    cd38:	9b08      	ldr	r3, [sp, #32]
    cd3a:	4413      	add	r3, r2
    cd3c:	9308      	str	r3, [sp, #32]
            if (timeElapsed >= mS2Ticks)
    cd3e:	9a08      	ldr	r2, [sp, #32]
    cd40:	9b07      	ldr	r3, [sp, #28]
    cd42:	429a      	cmp	r2, r3
    cd44:	d302      	bcc.n	cd4c <FlexCAN_Ip_ReceiveBlocking+0xec>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    cd46:	2303      	movs	r3, #3
    cd48:	9309      	str	r3, [sp, #36]	; 0x24
                break;
    cd4a:	e008      	b.n	cd5e <FlexCAN_Ip_ReceiveBlocking+0xfe>
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    cd4c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    cd50:	9a06      	ldr	r2, [sp, #24]
    cd52:	011b      	lsls	r3, r3, #4
    cd54:	4413      	add	r3, r2
    cd56:	3304      	adds	r3, #4
    cd58:	681b      	ldr	r3, [r3, #0]
    cd5a:	2b01      	cmp	r3, #1
    cd5c:	d0d1      	beq.n	cd02 <FlexCAN_Ip_ReceiveBlocking+0xa2>
            }
        }
    }

    if ((FLEXCAN_STATUS_TIMEOUT == result) && (FALSE == isPolling))
    cd5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cd60:	2b03      	cmp	r3, #3
    cd62:	d112      	bne.n	cd8a <FlexCAN_Ip_ReceiveBlocking+0x12a>
    cd64:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cd68:	f083 0301 	eor.w	r3, r3, #1
    cd6c:	b2db      	uxtb	r3, r3
    cd6e:	2b00      	cmp	r3, #0
    cd70:	d00b      	beq.n	cd8a <FlexCAN_Ip_ReceiveBlocking+0x12a>
    {
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        /* Disable Mb interrupt*/
       (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    cd72:	f89d 200e 	ldrb.w	r2, [sp, #14]
    cd76:	9b06      	ldr	r3, [sp, #24]
    cd78:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    cd7c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    cd80:	9300      	str	r3, [sp, #0]
    cd82:	2300      	movs	r3, #0
    cd84:	9805      	ldr	r0, [sp, #20]
    cd86:	f002 f88f 	bl	eea8 <FlexCAN_SetMsgBuffIntCmd>
#endif
    }

    if ((FLEXCAN_STATUS_BUFF_OUT_OF_RANGE != result) && (FLEXCAN_STATUS_BUSY != result))
    cd8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cd8c:	2b04      	cmp	r3, #4
    cd8e:	d018      	beq.n	cdc2 <FlexCAN_Ip_ReceiveBlocking+0x162>
    cd90:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cd92:	2b02      	cmp	r3, #2
    cd94:	d015      	beq.n	cdc2 <FlexCAN_Ip_ReceiveBlocking+0x162>
    {
        if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state))
    cd96:	f89d 300e 	ldrb.w	r3, [sp, #14]
    cd9a:	9a06      	ldr	r2, [sp, #24]
    cd9c:	011b      	lsls	r3, r3, #4
    cd9e:	4413      	add	r3, r2
    cda0:	3304      	adds	r3, #4
    cda2:	681b      	ldr	r3, [r3, #0]
    cda4:	2b00      	cmp	r3, #0
    cda6:	d102      	bne.n	cdae <FlexCAN_Ip_ReceiveBlocking+0x14e>
        {
            result = FLEXCAN_STATUS_SUCCESS;
    cda8:	2300      	movs	r3, #0
    cdaa:	9309      	str	r3, [sp, #36]	; 0x24
    cdac:	e009      	b.n	cdc2 <FlexCAN_Ip_ReceiveBlocking+0x162>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    cdae:	f89d 300e 	ldrb.w	r3, [sp, #14]
    cdb2:	9a06      	ldr	r2, [sp, #24]
    cdb4:	011b      	lsls	r3, r3, #4
    cdb6:	4413      	add	r3, r2
    cdb8:	3304      	adds	r3, #4
    cdba:	2200      	movs	r2, #0
    cdbc:	601a      	str	r2, [r3, #0]
            result = FLEXCAN_STATUS_TIMEOUT;
    cdbe:	2303      	movs	r3, #3
    cdc0:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    return result;
    cdc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    cdc4:	4618      	mov	r0, r3
    cdc6:	b00b      	add	sp, #44	; 0x2c
    cdc8:	f85d fb04 	ldr.w	pc, [sp], #4
    cdcc:	1fff935c 	.word	0x1fff935c
    cdd0:	000184e4 	.word	0x000184e4

0000cdd4 <FlexCAN_Ip_RxFifo>:
 * after the frame was received and read into the specified buffer.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_RxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifo(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    cdd4:	b500      	push	{lr}
    cdd6:	b085      	sub	sp, #20
    cdd8:	4603      	mov	r3, r0
    cdda:	9100      	str	r1, [sp, #0]
    cddc:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    cde0:	2300      	movs	r3, #0
    cde2:	9303      	str	r3, [sp, #12]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    cde4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cde8:	9900      	ldr	r1, [sp, #0]
    cdea:	4618      	mov	r0, r3
    cdec:	f7ff fa5e 	bl	c2ac <FlexCAN_StartRxMessageFifoData>
    cdf0:	9003      	str	r0, [sp, #12]
    }
    return result;
    cdf2:	9b03      	ldr	r3, [sp, #12]
}
    cdf4:	4618      	mov	r0, r3
    cdf6:	b005      	add	sp, #20
    cdf8:	f85d fb04 	ldr.w	pc, [sp], #4

0000cdfc <FlexCAN_Ip_RxFifoBlocking>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_RxFifoBlocking_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifoBlocking(uint8 instance, Flexcan_Ip_MsgBuffType *data, uint32 timeout)
{
    cdfc:	b500      	push	{lr}
    cdfe:	b087      	sub	sp, #28
    ce00:	4603      	mov	r3, r0
    ce02:	9102      	str	r1, [sp, #8]
    ce04:	9201      	str	r2, [sp, #4]
    ce06:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    ce0a:	2300      	movs	r3, #0
    ce0c:	9305      	str	r3, [sp, #20]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    ce0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ce12:	9902      	ldr	r1, [sp, #8]
    ce14:	4618      	mov	r0, r3
    ce16:	f7ff fa49 	bl	c2ac <FlexCAN_StartRxMessageFifoData>
    ce1a:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == result)
    ce1c:	9b05      	ldr	r3, [sp, #20]
    ce1e:	2b00      	cmp	r3, #0
    ce20:	d106      	bne.n	ce30 <FlexCAN_Ip_RxFifoBlocking+0x34>
        {
            result = FlexCAN_ProccessLegacyRxFIFO(instance, timeout);
    ce22:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ce26:	9901      	ldr	r1, [sp, #4]
    ce28:	4618      	mov	r0, r3
    ce2a:	f7ff f8e2 	bl	bff2 <FlexCAN_ProccessLegacyRxFIFO>
    ce2e:	9005      	str	r0, [sp, #20]
        }
    }
    return result;
    ce30:	9b05      	ldr	r3, [sp, #20]
}
    ce32:	4618      	mov	r0, r3
    ce34:	b007      	add	sp, #28
    ce36:	f85d fb04 	ldr.w	pc, [sp], #4

0000ce3a <FlexCAN_Ip_ConfigRxFifo_Privileged>:
/* implements FlexCAN_Ip_ConfigRxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxFifo_Privileged(uint8 instance,
                                                         Flexcan_Ip_RxFifoIdElementFormatType id_format,
                                                         const Flexcan_Ip_IdTableType * id_filter_table
                                                        )
{
    ce3a:	b500      	push	{lr}
    ce3c:	b089      	sub	sp, #36	; 0x24
    ce3e:	4603      	mov	r3, r0
    ce40:	9102      	str	r1, [sp, #8]
    ce42:	9201      	str	r2, [sp, #4]
    ce44:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    ce48:	2300      	movs	r3, #0
    ce4a:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    ce4c:	2300      	movs	r3, #0
    ce4e:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    ce50:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ce54:	4a1c      	ldr	r2, [pc, #112]	; (cec8 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x8e>)
    ce56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce5a:	9305      	str	r3, [sp, #20]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    ce5c:	9805      	ldr	r0, [sp, #20]
    ce5e:	f7fe fd61 	bl	b924 <FlexCAN_IsEnabled>
    ce62:	4603      	mov	r3, r0
    ce64:	2b00      	cmp	r3, #0
    ce66:	bf14      	ite	ne
    ce68:	2301      	movne	r3, #1
    ce6a:	2300      	moveq	r3, #0
    ce6c:	b2db      	uxtb	r3, r3
    ce6e:	f083 0301 	eor.w	r3, r3, #1
    ce72:	b2db      	uxtb	r3, r3
    ce74:	f88d 3013 	strb.w	r3, [sp, #19]
    ce78:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ce7c:	f003 0301 	and.w	r3, r3, #1
    ce80:	f88d 3013 	strb.w	r3, [sp, #19]

    if (TRUE == disabled)
    ce84:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ce88:	2b00      	cmp	r3, #0
    ce8a:	d003      	beq.n	ce94 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x5a>
    {
        result = FlexCAN_Enable(pBase);
    ce8c:	9805      	ldr	r0, [sp, #20]
    ce8e:	f001 fd6b 	bl	e968 <FlexCAN_Enable>
    ce92:	9007      	str	r0, [sp, #28]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    ce94:	9b07      	ldr	r3, [sp, #28]
    ce96:	2b00      	cmp	r3, #0
    ce98:	d104      	bne.n	cea4 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x6a>
    {
        /* Initialize rx fifo*/
        FlexCAN_SetRxFifoFilter(pBase, id_format, id_filter_table);
    ce9a:	9a01      	ldr	r2, [sp, #4]
    ce9c:	9902      	ldr	r1, [sp, #8]
    ce9e:	9805      	ldr	r0, [sp, #20]
    cea0:	f002 fba5 	bl	f5ee <FlexCAN_SetRxFifoFilter>
    }

    if (TRUE == disabled)
    cea4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    cea8:	2b00      	cmp	r3, #0
    ceaa:	d008      	beq.n	cebe <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
    {
        status = FlexCAN_Disable(pBase);
    ceac:	9805      	ldr	r0, [sp, #20]
    ceae:	f001 fdd9 	bl	ea64 <FlexCAN_Disable>
    ceb2:	9006      	str	r0, [sp, #24]
        if (FLEXCAN_STATUS_SUCCESS != status)
    ceb4:	9b06      	ldr	r3, [sp, #24]
    ceb6:	2b00      	cmp	r3, #0
    ceb8:	d001      	beq.n	cebe <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
        {
            result = status;
    ceba:	9b06      	ldr	r3, [sp, #24]
    cebc:	9307      	str	r3, [sp, #28]
        }
    }

    return result;
    cebe:	9b07      	ldr	r3, [sp, #28]
}
    cec0:	4618      	mov	r0, r3
    cec2:	b009      	add	sp, #36	; 0x24
    cec4:	f85d fb04 	ldr.w	pc, [sp], #4
    cec8:	000184e4 	.word	0x000184e4

0000cecc <FlexCAN_Ip_ConfigRemoteResponseMb>:
                                                        uint8 mb_idx,
                                                        const Flexcan_Ip_DataInfoType *tx_info,
                                                        uint32 msg_id,
                                                        const uint8 *mb_data
                                                       )
{
    cecc:	b500      	push	{lr}
    cece:	b08f      	sub	sp, #60	; 0x3c
    ced0:	9204      	str	r2, [sp, #16]
    ced2:	9303      	str	r3, [sp, #12]
    ced4:	4603      	mov	r3, r0
    ced6:	f88d 3017 	strb.w	r3, [sp, #23]
    ceda:	460b      	mov	r3, r1
    cedc:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    cee0:	2300      	movs	r3, #0
    cee2:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    cee4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cee8:	4a27      	ldr	r2, [pc, #156]	; (cf88 <FlexCAN_Ip_ConfigRemoteResponseMb+0xbc>)
    ceea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ceee:	930c      	str	r3, [sp, #48]	; 0x30
    const Flexcan_Ip_StateType * const state = Flexcan_Ip_apxState[instance];
    cef0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cef4:	4a25      	ldr	r2, [pc, #148]	; (cf8c <FlexCAN_Ip_ConfigRemoteResponseMb+0xc0>)
    cef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cefa:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    cefc:	2300      	movs	r3, #0
    cefe:	930a      	str	r3, [sp, #40]	; 0x28
    if (TRUE == FlexCAN_IsMbOutOfRange(pBase, mb_idx, state->bIsLegacyFifoEn, state->u32MaxMbNum))
    {
        result = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    cf00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cf02:	2b00      	cmp	r3, #0
    cf04:	d13a      	bne.n	cf7c <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
    {
        /* Initialize transmit mb*/
        cs.dataLen = tx_info->data_length;
    cf06:	9b04      	ldr	r3, [sp, #16]
    cf08:	685b      	ldr	r3, [r3, #4]
    cf0a:	9308      	str	r3, [sp, #32]
        cs.msgIdType = tx_info->msg_id_type;
    cf0c:	9b04      	ldr	r3, [sp, #16]
    cf0e:	681b      	ldr	r3, [r3, #0]
    cf10:	9307      	str	r3, [sp, #28]
        cs.code = (uint32)FLEXCAN_RX_RANSWER;
    cf12:	230a      	movs	r3, #10
    cf14:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = FALSE;
    cf16:	2300      	movs	r3, #0
    cf18:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        cs.enable_brs = FALSE;
    cf1c:	2300      	movs	r3, #0
    cf1e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        cs.fd_padding = 0x00U;
    cf22:	2300      	movs	r3, #0
    cf24:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
#endif
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    cf28:	f89d 3016 	ldrb.w	r3, [sp, #22]
    cf2c:	4619      	mov	r1, r3
    cf2e:	980c      	ldr	r0, [sp, #48]	; 0x30
    cf30:	f7fe fd52 	bl	b9d8 <FlexCAN_ClearMsgBuffIntStatusFlag>
        pMbAddr = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    cf34:	f89d 3016 	ldrb.w	r3, [sp, #22]
    cf38:	4619      	mov	r1, r3
    cf3a:	980c      	ldr	r0, [sp, #48]	; 0x30
    cf3c:	f001 fc2c 	bl	e798 <FlexCAN_GetMsgBuffRegion>
    cf40:	900a      	str	r0, [sp, #40]	; 0x28
        FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, tx_info->is_remote);
    cf42:	9b04      	ldr	r3, [sp, #16]
    cf44:	7adb      	ldrb	r3, [r3, #11]
    cf46:	a906      	add	r1, sp, #24
    cf48:	9300      	str	r3, [sp, #0]
    cf4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf4c:	9a03      	ldr	r2, [sp, #12]
    cf4e:	980a      	ldr	r0, [sp, #40]	; 0x28
    cf50:	f002 f974 	bl	f23c <FlexCAN_SetTxMsgBuff>
        if (FALSE == tx_info->is_polling)
    cf54:	9b04      	ldr	r3, [sp, #16]
    cf56:	7b1b      	ldrb	r3, [r3, #12]
    cf58:	f083 0301 	eor.w	r3, r3, #1
    cf5c:	b2db      	uxtb	r3, r3
    cf5e:	2b00      	cmp	r3, #0
    cf60:	d00c      	beq.n	cf7c <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
        {
            /* Enable MB interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(pBase, instance, mb_idx, TRUE, state->isIntActive);
    cf62:	f89d 2016 	ldrb.w	r2, [sp, #22]
    cf66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf68:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    cf6c:	f89d 1017 	ldrb.w	r1, [sp, #23]
    cf70:	9300      	str	r3, [sp, #0]
    cf72:	2301      	movs	r3, #1
    cf74:	980c      	ldr	r0, [sp, #48]	; 0x30
    cf76:	f001 ff97 	bl	eea8 <FlexCAN_SetMsgBuffIntCmd>
    cf7a:	900d      	str	r0, [sp, #52]	; 0x34
        }
    }
    return result;
    cf7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    cf7e:	4618      	mov	r0, r3
    cf80:	b00f      	add	sp, #60	; 0x3c
    cf82:	f85d fb04 	ldr.w	pc, [sp], #4
    cf86:	bf00      	nop
    cf88:	000184e4 	.word	0x000184e4
    cf8c:	1fff935c 	.word	0x1fff935c

0000cf90 <FlexCAN_Ip_GetTransferStatus>:
 * or complete (success). In case Enhanced Rx Fifo, mb_idx will be 255.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetTransferStatus_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_GetTransferStatus(uint8 instance, uint8 mb_idx)
{
    cf90:	b084      	sub	sp, #16
    cf92:	4603      	mov	r3, r0
    cf94:	460a      	mov	r2, r1
    cf96:	f88d 3007 	strb.w	r3, [sp, #7]
    cf9a:	4613      	mov	r3, r2
    cf9c:	f88d 3006 	strb.w	r3, [sp, #6]

    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    cfa0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cfa4:	4a0d      	ldr	r2, [pc, #52]	; (cfdc <FlexCAN_Ip_GetTransferStatus+0x4c>)
    cfa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfaa:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_ERROR;
    cfac:	2301      	movs	r3, #1
    cfae:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
#endif

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    cfb0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    cfb4:	2b1f      	cmp	r3, #31
    cfb6:	d80d      	bhi.n	cfd4 <FlexCAN_Ip_GetTransferStatus+0x44>
    {
        if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    cfb8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    cfbc:	9a02      	ldr	r2, [sp, #8]
    cfbe:	011b      	lsls	r3, r3, #4
    cfc0:	4413      	add	r3, r2
    cfc2:	3304      	adds	r3, #4
    cfc4:	681b      	ldr	r3, [r3, #0]
    cfc6:	2b00      	cmp	r3, #0
    cfc8:	d102      	bne.n	cfd0 <FlexCAN_Ip_GetTransferStatus+0x40>
        {
            status = FLEXCAN_STATUS_SUCCESS;
    cfca:	2300      	movs	r3, #0
    cfcc:	9303      	str	r3, [sp, #12]
    cfce:	e001      	b.n	cfd4 <FlexCAN_Ip_GetTransferStatus+0x44>
            status = FLEXCAN_STATUS_ERROR;
        }
#endif
        else
        {
            status = FLEXCAN_STATUS_BUSY;
    cfd0:	2302      	movs	r3, #2
    cfd2:	9303      	str	r3, [sp, #12]
            status = FLEXCAN_STATUS_BUSY;
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return status;
    cfd4:	9b03      	ldr	r3, [sp, #12]
}
    cfd6:	4618      	mov	r0, r3
    cfd8:	b004      	add	sp, #16
    cfda:	4770      	bx	lr
    cfdc:	1fff935c 	.word	0x1fff935c

0000cfe0 <FlexCAN_CompleteRxMessageFifoData>:
 * data and disabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_CompleteRxMessageFifoData(uint8 instance)
{
    cfe0:	b500      	push	{lr}
    cfe2:	b087      	sub	sp, #28
    cfe4:	4603      	mov	r3, r0
    cfe6:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    cfea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cfee:	4a1d      	ldr	r2, [pc, #116]	; (d064 <FlexCAN_CompleteRxMessageFifoData+0x84>)
    cff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cff4:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    cff6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cffa:	4a1b      	ldr	r2, [pc, #108]	; (d068 <FlexCAN_CompleteRxMessageFifoData+0x88>)
    cffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d000:	9304      	str	r3, [sp, #16]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    d002:	9b04      	ldr	r3, [sp, #16]
    d004:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    d008:	2b00      	cmp	r3, #0
    d00a:	d120      	bne.n	d04e <FlexCAN_CompleteRxMessageFifoData+0x6e>
    {
        /* Disable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, state->isIntActive);
    d00c:	9b04      	ldr	r3, [sp, #16]
    d00e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    d012:	f89d 100f 	ldrb.w	r1, [sp, #15]
    d016:	9300      	str	r3, [sp, #0]
    d018:	2300      	movs	r3, #0
    d01a:	2205      	movs	r2, #5
    d01c:	9805      	ldr	r0, [sp, #20]
    d01e:	f001 ff43 	bl	eea8 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, state->isIntActive);
    d022:	9b04      	ldr	r3, [sp, #16]
    d024:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    d028:	f89d 100f 	ldrb.w	r1, [sp, #15]
    d02c:	9300      	str	r3, [sp, #0]
    d02e:	2300      	movs	r3, #0
    d030:	2206      	movs	r2, #6
    d032:	9805      	ldr	r0, [sp, #20]
    d034:	f001 ff38 	bl	eea8 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, state->isIntActive);
    d038:	9b04      	ldr	r3, [sp, #16]
    d03a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    d03e:	f89d 100f 	ldrb.w	r1, [sp, #15]
    d042:	9300      	str	r3, [sp, #0]
    d044:	2300      	movs	r3, #0
    d046:	2207      	movs	r2, #7
    d048:	9805      	ldr	r0, [sp, #20]
    d04a:	f001 ff2d 	bl	eea8 <FlexCAN_SetMsgBuffIntCmd>
    {
        /* do nothing when transferType is POLLING */
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    /* Clear fifo message*/
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = NULL_PTR;
    d04e:	9b04      	ldr	r3, [sp, #16]
    d050:	2200      	movs	r2, #0
    d052:	601a      	str	r2, [r3, #0]
            state->callback(instance, FLEXCAN_EVENT_DMA_ERROR, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
        }
    }

#else
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    d054:	9b04      	ldr	r3, [sp, #16]
    d056:	2200      	movs	r2, #0
    d058:	605a      	str	r2, [r3, #4]
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
}
    d05a:	bf00      	nop
    d05c:	b007      	add	sp, #28
    d05e:	f85d fb04 	ldr.w	pc, [sp], #4
    d062:	bf00      	nop
    d064:	000184e4 	.word	0x000184e4
    d068:	1fff935c 	.word	0x1fff935c

0000d06c <FlexCAN_IRQHandler>:
    uint32 endMbIdx
    #if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    ,boolean bEnhancedFifoExisted
    #endif
)
{
    d06c:	b500      	push	{lr}
    d06e:	b08b      	sub	sp, #44	; 0x2c
    d070:	4603      	mov	r3, r0
    d072:	9102      	str	r1, [sp, #8]
    d074:	9201      	str	r2, [sp, #4]
    d076:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32MbHandle = 0U;
    d07a:	2300      	movs	r3, #0
    d07c:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 flag_reg = 0;
    d07e:	2300      	movs	r3, #0
    d080:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d082:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d086:	4a3f      	ldr	r2, [pc, #252]	; (d184 <FlexCAN_IRQHandler+0x118>)
    d088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d08c:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d08e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d092:	4a3d      	ldr	r2, [pc, #244]	; (d188 <FlexCAN_IRQHandler+0x11c>)
    d094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d098:	9305      	str	r3, [sp, #20]

    /* Get the interrupts that are enabled and ready */
    uint32 mb_idx = endMbIdx;
    d09a:	9b01      	ldr	r3, [sp, #4]
    d09c:	9307      	str	r3, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(endMbIdx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM);
#endif
    /* Check if instance initialized */
    if (NULL_PTR != state)
    d09e:	9b05      	ldr	r3, [sp, #20]
    d0a0:	2b00      	cmp	r3, #0
    d0a2:	d05c      	beq.n	d15e <FlexCAN_IRQHandler+0xf2>
    {
        flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    d0a4:	9907      	ldr	r1, [sp, #28]
    d0a6:	9806      	ldr	r0, [sp, #24]
    d0a8:	f7fe fe47 	bl	bd3a <FlexCAN_GetMsgBuffIntStatusFlag>
    d0ac:	4603      	mov	r3, r0
    d0ae:	9308      	str	r3, [sp, #32]

        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    d0b0:	e008      	b.n	d0c4 <FlexCAN_IRQHandler+0x58>
        {
            mb_idx--;
    d0b2:	9b07      	ldr	r3, [sp, #28]
    d0b4:	3b01      	subs	r3, #1
    d0b6:	9307      	str	r3, [sp, #28]
            flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    d0b8:	9907      	ldr	r1, [sp, #28]
    d0ba:	9806      	ldr	r0, [sp, #24]
    d0bc:	f7fe fe3d 	bl	bd3a <FlexCAN_GetMsgBuffIntStatusFlag>
    d0c0:	4603      	mov	r3, r0
    d0c2:	9308      	str	r3, [sp, #32]
        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    d0c4:	9b08      	ldr	r3, [sp, #32]
    d0c6:	2b00      	cmp	r3, #0
    d0c8:	d103      	bne.n	d0d2 <FlexCAN_IRQHandler+0x66>
    d0ca:	9a07      	ldr	r2, [sp, #28]
    d0cc:	9b02      	ldr	r3, [sp, #8]
    d0ce:	429a      	cmp	r2, r3
    d0d0:	d8ef      	bhi.n	d0b2 <FlexCAN_IRQHandler+0x46>
        }

        /* Check Tx/Rx interrupt flag and clear the interrupt */
        if (flag_reg != 0U)
    d0d2:	9b08      	ldr	r3, [sp, #32]
    d0d4:	2b00      	cmp	r3, #0
    d0d6:	d050      	beq.n	d17a <FlexCAN_IRQHandler+0x10e>
        {
            /* For legacy fifo, mb handler is FLEXCAN_IP_MB_HANDLE_RXFIFO(0) */
            u32MbHandle = mb_idx;
    d0d8:	9b07      	ldr	r3, [sp, #28]
    d0da:	9309      	str	r3, [sp, #36]	; 0x24

            if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    d0dc:	9b05      	ldr	r3, [sp, #20]
    d0de:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    d0e2:	2b00      	cmp	r3, #0
    d0e4:	d00b      	beq.n	d0fe <FlexCAN_IRQHandler+0x92>
    d0e6:	9b07      	ldr	r3, [sp, #28]
    d0e8:	2b07      	cmp	r3, #7
    d0ea:	d808      	bhi.n	d0fe <FlexCAN_IRQHandler+0x92>
            {
                FlexCAN_IRQHandlerRxFIFO(instance, mb_idx);
    d0ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d0f0:	9907      	ldr	r1, [sp, #28]
    d0f2:	4618      	mov	r0, r3
    d0f4:	f7ff fac2 	bl	c67c <FlexCAN_IRQHandlerRxFIFO>
                u32MbHandle = (uint32)FLEXCAN_IP_MB_HANDLE_RXFIFO;
    d0f8:	2300      	movs	r3, #0
    d0fa:	9309      	str	r3, [sp, #36]	; 0x24
    d0fc:	e00d      	b.n	d11a <FlexCAN_IRQHandler+0xae>
            }
            else
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[u32MbHandle].state)
    d0fe:	9a05      	ldr	r2, [sp, #20]
    d100:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d102:	011b      	lsls	r3, r3, #4
    d104:	4413      	add	r3, r2
    d106:	3304      	adds	r3, #4
    d108:	681b      	ldr	r3, [r3, #0]
    d10a:	2b01      	cmp	r3, #1
    d10c:	d105      	bne.n	d11a <FlexCAN_IRQHandler+0xae>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    d10e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d112:	9907      	ldr	r1, [sp, #28]
    d114:	4618      	mov	r0, r3
    d116:	f7ff f929 	bl	c36c <FlexCAN_IRQHandlerRxMB>
                }
            }

            /* Check mailbox completed transmission */
            if (FLEXCAN_MB_TX_BUSY == state->mbs[u32MbHandle].state)
    d11a:	9a05      	ldr	r2, [sp, #20]
    d11c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d11e:	011b      	lsls	r3, r3, #4
    d120:	4413      	add	r3, r2
    d122:	3304      	adds	r3, #4
    d124:	681b      	ldr	r3, [r3, #0]
    d126:	2b02      	cmp	r3, #2
    d128:	d105      	bne.n	d136 <FlexCAN_IRQHandler+0xca>
            {
                FlexCAN_IRQHandlerTxMB(instance, mb_idx);
    d12a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d12e:	9907      	ldr	r1, [sp, #28]
    d130:	4618      	mov	r0, r3
    d132:	f7ff fa09 	bl	c548 <FlexCAN_IRQHandlerTxMB>
            }

            /* Check for spurious interrupt */
            if (FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx) != 0U)
    d136:	9907      	ldr	r1, [sp, #28]
    d138:	9806      	ldr	r0, [sp, #24]
    d13a:	f7fe fdfe 	bl	bd3a <FlexCAN_GetMsgBuffIntStatusFlag>
    d13e:	4603      	mov	r3, r0
    d140:	2b00      	cmp	r3, #0
    d142:	d01a      	beq.n	d17a <FlexCAN_IRQHandler+0x10e>
            {
                if (state->mbs[u32MbHandle].state == FLEXCAN_MB_IDLE)
    d144:	9a05      	ldr	r2, [sp, #20]
    d146:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d148:	011b      	lsls	r3, r3, #4
    d14a:	4413      	add	r3, r2
    d14c:	3304      	adds	r3, #4
    d14e:	681b      	ldr	r3, [r3, #0]
    d150:	2b00      	cmp	r3, #0
    d152:	d112      	bne.n	d17a <FlexCAN_IRQHandler+0x10e>
                {
                    /* In case of desynchronized status of the MB to avoid trapping in ISR
                    * clear the MB flag */
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    d154:	9907      	ldr	r1, [sp, #28]
    d156:	9806      	ldr	r0, [sp, #24]
    d158:	f7fe fc3e 	bl	b9d8 <FlexCAN_ClearMsgBuffIntStatusFlag>
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_UNDERFLOW);
        }
    #endif /* End of (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    }
}
    d15c:	e00d      	b.n	d17a <FlexCAN_IRQHandler+0x10e>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    d15e:	9b02      	ldr	r3, [sp, #8]
    d160:	9307      	str	r3, [sp, #28]
    d162:	e006      	b.n	d172 <FlexCAN_IRQHandler+0x106>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    d164:	9907      	ldr	r1, [sp, #28]
    d166:	9806      	ldr	r0, [sp, #24]
    d168:	f7fe fc36 	bl	b9d8 <FlexCAN_ClearMsgBuffIntStatusFlag>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    d16c:	9b07      	ldr	r3, [sp, #28]
    d16e:	3301      	adds	r3, #1
    d170:	9307      	str	r3, [sp, #28]
    d172:	9a07      	ldr	r2, [sp, #28]
    d174:	9b01      	ldr	r3, [sp, #4]
    d176:	429a      	cmp	r2, r3
    d178:	d9f4      	bls.n	d164 <FlexCAN_IRQHandler+0xf8>
}
    d17a:	bf00      	nop
    d17c:	b00b      	add	sp, #44	; 0x2c
    d17e:	f85d fb04 	ldr.w	pc, [sp], #4
    d182:	bf00      	nop
    d184:	000184e4 	.word	0x000184e4
    d188:	1fff935c 	.word	0x1fff935c

0000d18c <FlexCAN_Ip_ClearErrorStatus>:
 *                 transmission of a CAN frame.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearErrorStatus_Activity */
void FlexCAN_Ip_ClearErrorStatus(uint8 instance, uint32 error)
{
    d18c:	b084      	sub	sp, #16
    d18e:	4603      	mov	r3, r0
    d190:	9100      	str	r1, [sp, #0]
    d192:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d196:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d19a:	4a05      	ldr	r2, [pc, #20]	; (d1b0 <FlexCAN_Ip_ClearErrorStatus+0x24>)
    d19c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1a0:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base->ESR1 = error;
    d1a2:	9b03      	ldr	r3, [sp, #12]
    d1a4:	9a00      	ldr	r2, [sp, #0]
    d1a6:	621a      	str	r2, [r3, #32]
}
    d1a8:	bf00      	nop
    d1aa:	b004      	add	sp, #16
    d1ac:	4770      	bx	lr
    d1ae:	bf00      	nop
    d1b0:	000184e4 	.word	0x000184e4

0000d1b4 <FlexCAN_Ip_GetErrorStatus>:
 *                 transmission of a CAN frame and some general status of the device.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetErrorStatus_Activity */
uint32 FlexCAN_Ip_GetErrorStatus(uint8 instance)
{
    d1b4:	b084      	sub	sp, #16
    d1b6:	4603      	mov	r3, r0
    d1b8:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d1bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d1c0:	4a04      	ldr	r2, [pc, #16]	; (d1d4 <FlexCAN_Ip_GetErrorStatus+0x20>)
    d1c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1c6:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint32)(base->ESR1);
    d1c8:	9b03      	ldr	r3, [sp, #12]
    d1ca:	6a1b      	ldr	r3, [r3, #32]
}
    d1cc:	4618      	mov	r0, r3
    d1ce:	b004      	add	sp, #16
    d1d0:	4770      	bx	lr
    d1d2:	bf00      	nop
    d1d4:	000184e4 	.word	0x000184e4

0000d1d8 <FlexCAN_Ip_GetControllerTxErrorCounter>:
 *                 transmitted messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerTxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerTxErrorCounter(uint8 instance)
{
    d1d8:	b084      	sub	sp, #16
    d1da:	4603      	mov	r3, r0
    d1dc:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d1e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d1e4:	4a04      	ldr	r2, [pc, #16]	; (d1f8 <FlexCAN_Ip_GetControllerTxErrorCounter+0x20>)
    d1e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1ea:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_TXERRCNT_MASK) >> FLEXCAN_ECR_TXERRCNT_SHIFT);
    d1ec:	9b03      	ldr	r3, [sp, #12]
    d1ee:	69db      	ldr	r3, [r3, #28]
    d1f0:	b2db      	uxtb	r3, r3
}
    d1f2:	4618      	mov	r0, r3
    d1f4:	b004      	add	sp, #16
    d1f6:	4770      	bx	lr
    d1f8:	000184e4 	.word	0x000184e4

0000d1fc <FlexCAN_Ip_GetControllerRxErrorCounter>:
 *                 received messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerRxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerRxErrorCounter(uint8 instance)
{
    d1fc:	b084      	sub	sp, #16
    d1fe:	4603      	mov	r3, r0
    d200:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d204:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d208:	4a05      	ldr	r2, [pc, #20]	; (d220 <FlexCAN_Ip_GetControllerRxErrorCounter+0x24>)
    d20a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d20e:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_RXERRCNT_MASK) >> FLEXCAN_ECR_RXERRCNT_SHIFT);
    d210:	9b03      	ldr	r3, [sp, #12]
    d212:	69db      	ldr	r3, [r3, #28]
    d214:	0a1b      	lsrs	r3, r3, #8
    d216:	b2db      	uxtb	r3, r3
}
    d218:	4618      	mov	r0, r3
    d21a:	b004      	add	sp, #16
    d21c:	4770      	bx	lr
    d21e:	bf00      	nop
    d220:	000184e4 	.word	0x000184e4

0000d224 <FlexCAN_Error_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements  CAN_X_ERROR_ISR_Activity */
void FlexCAN_Error_IRQHandler(uint8 instance)
{
    d224:	b510      	push	{r4, lr}
    d226:	b086      	sub	sp, #24
    d228:	4603      	mov	r3, r0
    d22a:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    d22e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d232:	4a29      	ldr	r2, [pc, #164]	; (d2d8 <FlexCAN_Error_IRQHandler+0xb4>)
    d234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d238:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d23a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d23e:	4a27      	ldr	r2, [pc, #156]	; (d2dc <FlexCAN_Error_IRQHandler+0xb8>)
    d240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d244:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    d246:	2300      	movs	r3, #0
    d248:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check if the instance initialized */
    if (NULL_PTR != state)
    d24a:	9b03      	ldr	r3, [sp, #12]
    d24c:	2b00      	cmp	r3, #0
    d24e:	d03d      	beq.n	d2cc <FlexCAN_Error_IRQHandler+0xa8>
    {
        /* Get error status to get value updated */
        u32ErrStatus = pBase->ESR1;
    d250:	9b04      	ldr	r3, [sp, #16]
    d252:	6a1b      	ldr	r3, [r3, #32]
    d254:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_MASK))) && ((uint32)0U != (pBase->CTRL1 & ((uint32)FLEXCAN_CTRL1_ERRMSK_MASK))))
    d256:	9b05      	ldr	r3, [sp, #20]
    d258:	f003 0302 	and.w	r3, r3, #2
    d25c:	2b00      	cmp	r3, #0
    d25e:	d019      	beq.n	d294 <FlexCAN_Error_IRQHandler+0x70>
    d260:	9b04      	ldr	r3, [sp, #16]
    d262:	685b      	ldr	r3, [r3, #4]
    d264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    d268:	2b00      	cmp	r3, #0
    d26a:	d013      	beq.n	d294 <FlexCAN_Error_IRQHandler+0x70>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_MASK;
    d26c:	9b04      	ldr	r3, [sp, #16]
    d26e:	2202      	movs	r2, #2
    d270:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d272:	9b03      	ldr	r3, [sp, #12]
    d274:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d278:	2b00      	cmp	r3, #0
    d27a:	d00b      	beq.n	d294 <FlexCAN_Error_IRQHandler+0x70>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR, u32ErrStatus, state);
    d27c:	9b03      	ldr	r3, [sp, #12]
    d27e:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d282:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d286:	9b03      	ldr	r3, [sp, #12]
    d288:	9a05      	ldr	r2, [sp, #20]
    d28a:	2105      	movs	r1, #5
    d28c:	47a0      	blx	r4
            #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = pBase->ESR1;
    d28e:	9b04      	ldr	r3, [sp, #16]
    d290:	6a1b      	ldr	r3, [r3, #32]
    d292:	9305      	str	r3, [sp, #20]
            }
        }

    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Check if this is spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_FAST_MASK))) && ((uint32)0U != (pBase->CTRL2 & ((uint32)FLEXCAN_CTRL2_ERRMSK_FAST_MASK))))
    d294:	9b05      	ldr	r3, [sp, #20]
    d296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    d29a:	2b00      	cmp	r3, #0
    d29c:	d019      	beq.n	d2d2 <FlexCAN_Error_IRQHandler+0xae>
    d29e:	9b04      	ldr	r3, [sp, #16]
    d2a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d2a2:	2b00      	cmp	r3, #0
    d2a4:	da15      	bge.n	d2d2 <FlexCAN_Error_IRQHandler+0xae>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_FAST_MASK;
    d2a6:	9b04      	ldr	r3, [sp, #16]
    d2a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    d2ac:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d2ae:	9b03      	ldr	r3, [sp, #12]
    d2b0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d2b4:	2b00      	cmp	r3, #0
    d2b6:	d00c      	beq.n	d2d2 <FlexCAN_Error_IRQHandler+0xae>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR_FAST, u32ErrStatus, state);
    d2b8:	9b03      	ldr	r3, [sp, #12]
    d2ba:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d2be:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d2c2:	9b03      	ldr	r3, [sp, #12]
    d2c4:	9a05      	ldr	r2, [sp, #20]
    d2c6:	2106      	movs	r1, #6
    d2c8:	47a0      	blx	r4
    }
    else
    {
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    }
}
    d2ca:	e002      	b.n	d2d2 <FlexCAN_Error_IRQHandler+0xae>
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    d2cc:	9b04      	ldr	r3, [sp, #16]
    d2ce:	4a04      	ldr	r2, [pc, #16]	; (d2e0 <FlexCAN_Error_IRQHandler+0xbc>)
    d2d0:	621a      	str	r2, [r3, #32]
}
    d2d2:	bf00      	nop
    d2d4:	b006      	add	sp, #24
    d2d6:	bd10      	pop	{r4, pc}
    d2d8:	000184e4 	.word	0x000184e4
    d2dc:	1fff935c 	.word	0x1fff935c
    d2e0:	00300002 	.word	0x00300002

0000d2e4 <FlexCAN_BusOff_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements CAN_X_BUSOFF_ISR_Activity */
void FlexCAN_BusOff_IRQHandler(uint8 instance)
{
    d2e4:	b510      	push	{r4, lr}
    d2e6:	b086      	sub	sp, #24
    d2e8:	4603      	mov	r3, r0
    d2ea:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d2ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d2f2:	4a3a      	ldr	r2, [pc, #232]	; (d3dc <FlexCAN_BusOff_IRQHandler+0xf8>)
    d2f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2f8:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d2fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d2fe:	4a38      	ldr	r2, [pc, #224]	; (d3e0 <FlexCAN_BusOff_IRQHandler+0xfc>)
    d300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d304:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    d306:	2300      	movs	r3, #0
    d308:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check If Driver initialized */
    if (NULL_PTR != state)
    d30a:	9b03      	ldr	r3, [sp, #12]
    d30c:	2b00      	cmp	r3, #0
    d30e:	d05f      	beq.n	d3d0 <FlexCAN_BusOff_IRQHandler+0xec>
    {
        /* Get error status to get value updated */
        u32ErrStatus = base->ESR1;
    d310:	9b04      	ldr	r3, [sp, #16]
    d312:	6a1b      	ldr	r3, [r3, #32]
    d314:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_TWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_TWRNMSK_MASK))))
    d316:	9b05      	ldr	r3, [sp, #20]
    d318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    d31c:	2b00      	cmp	r3, #0
    d31e:	d01a      	beq.n	d356 <FlexCAN_BusOff_IRQHandler+0x72>
    d320:	9b04      	ldr	r3, [sp, #16]
    d322:	685b      	ldr	r3, [r3, #4]
    d324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    d328:	2b00      	cmp	r3, #0
    d32a:	d014      	beq.n	d356 <FlexCAN_BusOff_IRQHandler+0x72>
        {
            base->ESR1 = FLEXCAN_ESR1_TWRNINT_MASK;
    d32c:	9b04      	ldr	r3, [sp, #16]
    d32e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    d332:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d334:	9b03      	ldr	r3, [sp, #12]
    d336:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d33a:	2b00      	cmp	r3, #0
    d33c:	d00b      	beq.n	d356 <FlexCAN_BusOff_IRQHandler+0x72>
            {
                state->error_callback(instance, FLEXCAN_EVENT_TX_WARNING, u32ErrStatus, state);
    d33e:	9b03      	ldr	r3, [sp, #12]
    d340:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d344:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d348:	9b03      	ldr	r3, [sp, #12]
    d34a:	9a05      	ldr	r2, [sp, #20]
    d34c:	2109      	movs	r1, #9
    d34e:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    d350:	9b04      	ldr	r3, [sp, #16]
    d352:	6a1b      	ldr	r3, [r3, #32]
    d354:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_RWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_RWRNMSK_MASK))))
    d356:	9b05      	ldr	r3, [sp, #20]
    d358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    d35c:	2b00      	cmp	r3, #0
    d35e:	d01a      	beq.n	d396 <FlexCAN_BusOff_IRQHandler+0xb2>
    d360:	9b04      	ldr	r3, [sp, #16]
    d362:	685b      	ldr	r3, [r3, #4]
    d364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    d368:	2b00      	cmp	r3, #0
    d36a:	d014      	beq.n	d396 <FlexCAN_BusOff_IRQHandler+0xb2>
        {
            base->ESR1 = FLEXCAN_ESR1_RWRNINT_MASK;
    d36c:	9b04      	ldr	r3, [sp, #16]
    d36e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    d372:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d374:	9b03      	ldr	r3, [sp, #12]
    d376:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d37a:	2b00      	cmp	r3, #0
    d37c:	d00b      	beq.n	d396 <FlexCAN_BusOff_IRQHandler+0xb2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_RX_WARNING, u32ErrStatus, state);
    d37e:	9b03      	ldr	r3, [sp, #12]
    d380:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d384:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d388:	9b03      	ldr	r3, [sp, #12]
    d38a:	9a05      	ldr	r2, [sp, #20]
    d38c:	2108      	movs	r1, #8
    d38e:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    d390:	9b04      	ldr	r3, [sp, #16]
    d392:	6a1b      	ldr	r3, [r3, #32]
    d394:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_BOFFINT_MASK))) && ((uint32)0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_BOFFMSK_MASK))))
    d396:	9b05      	ldr	r3, [sp, #20]
    d398:	f003 0304 	and.w	r3, r3, #4
    d39c:	2b00      	cmp	r3, #0
    d39e:	d01a      	beq.n	d3d6 <FlexCAN_BusOff_IRQHandler+0xf2>
    d3a0:	9b04      	ldr	r3, [sp, #16]
    d3a2:	685b      	ldr	r3, [r3, #4]
    d3a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    d3a8:	2b00      	cmp	r3, #0
    d3aa:	d014      	beq.n	d3d6 <FlexCAN_BusOff_IRQHandler+0xf2>
        {
            base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    d3ac:	9b04      	ldr	r3, [sp, #16]
    d3ae:	2204      	movs	r2, #4
    d3b0:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    d3b2:	9b03      	ldr	r3, [sp, #12]
    d3b4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d3b8:	2b00      	cmp	r3, #0
    d3ba:	d00c      	beq.n	d3d6 <FlexCAN_BusOff_IRQHandler+0xf2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    d3bc:	9b03      	ldr	r3, [sp, #12]
    d3be:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d3c2:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d3c6:	9b03      	ldr	r3, [sp, #12]
    d3c8:	9a05      	ldr	r2, [sp, #20]
    d3ca:	2107      	movs	r1, #7
    d3cc:	47a0      	blx	r4
    }
    else
    {
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    }
}
    d3ce:	e002      	b.n	d3d6 <FlexCAN_BusOff_IRQHandler+0xf2>
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    d3d0:	9b04      	ldr	r3, [sp, #16]
    d3d2:	4a04      	ldr	r2, [pc, #16]	; (d3e4 <FlexCAN_BusOff_IRQHandler+0x100>)
    d3d4:	621a      	str	r2, [r3, #32]
}
    d3d6:	bf00      	nop
    d3d8:	b006      	add	sp, #24
    d3da:	bd10      	pop	{r4, pc}
    d3dc:	000184e4 	.word	0x000184e4
    d3e0:	1fff935c 	.word	0x1fff935c
    d3e4:	000b0004 	.word	0x000b0004

0000d3e8 <FlexCAN_Ip_SendBlocking>:
                                              const Flexcan_Ip_DataInfoType * tx_info,
                                              uint32 msg_id,
                                              const uint8 * mb_data,
                                              uint32 timeout_ms
                                             )
{
    d3e8:	b500      	push	{lr}
    d3ea:	b091      	sub	sp, #68	; 0x44
    d3ec:	9204      	str	r2, [sp, #16]
    d3ee:	9303      	str	r3, [sp, #12]
    d3f0:	4603      	mov	r3, r0
    d3f2:	f88d 3017 	strb.w	r3, [sp, #23]
    d3f6:	460b      	mov	r3, r1
    d3f8:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d3fc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d400:	4a5f      	ldr	r2, [pc, #380]	; (d580 <FlexCAN_Ip_SendBlocking+0x198>)
    d402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d406:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d408:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d40c:	4a5d      	ldr	r2, [pc, #372]	; (d584 <FlexCAN_Ip_SendBlocking+0x19c>)
    d40e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d412:	930c      	str	r3, [sp, #48]	; 0x30

    uint32 timeStart = 0U;
    d414:	2300      	movs	r3, #0
    d416:	9307      	str	r3, [sp, #28]
    uint32 timeElapsed = 0U;
    d418:	2300      	movs	r3, #0
    d41a:	930e      	str	r3, [sp, #56]	; 0x38
    uint32 mS2Ticks = OsIf_MicrosToTicks((timeout_ms * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d41c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d41e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d422:	fb02 f303 	mul.w	r3, r2, r3
    d426:	2100      	movs	r1, #0
    d428:	4618      	mov	r0, r3
    d42a:	f7f4 fd0d 	bl	1e48 <OsIf_MicrosToTicks>
    d42e:	900b      	str	r0, [sp, #44]	; 0x2c
    uint32 uS2Ticks = 0U;
    d430:	2300      	movs	r3, #0
    d432:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 flexcan_mb_config = 0;
    d434:	2300      	movs	r3, #0
    d436:	9309      	str	r3, [sp, #36]	; 0x24

    volatile uint32 * flexcan_mb = NULL_PTR;
    d438:	2300      	movs	r3, #0
    d43a:	9308      	str	r3, [sp, #32]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif

    result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    d43c:	f89d 1016 	ldrb.w	r1, [sp, #22]
    d440:	f89d 0017 	ldrb.w	r0, [sp, #23]
    d444:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d446:	9300      	str	r3, [sp, #0]
    d448:	9b03      	ldr	r3, [sp, #12]
    d44a:	9a04      	ldr	r2, [sp, #16]
    d44c:	f7fe feaa 	bl	c1a4 <FlexCAN_StartSendData>
    d450:	900f      	str	r0, [sp, #60]	; 0x3c

    if (FLEXCAN_STATUS_SUCCESS == result)
    d452:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d454:	2b00      	cmp	r3, #0
    d456:	f040 808d 	bne.w	d574 <FlexCAN_Ip_SendBlocking+0x18c>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d45a:	2000      	movs	r0, #0
    d45c:	f7f4 fca8 	bl	1db0 <OsIf_GetCounter>
    d460:	4603      	mov	r3, r0
    d462:	9307      	str	r3, [sp, #28]
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    d464:	e00f      	b.n	d486 <FlexCAN_Ip_SendBlocking+0x9e>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d466:	ab07      	add	r3, sp, #28
    d468:	2100      	movs	r1, #0
    d46a:	4618      	mov	r0, r3
    d46c:	f7f4 fcb9 	bl	1de2 <OsIf_GetElapsed>
    d470:	4602      	mov	r2, r0
    d472:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d474:	4413      	add	r3, r2
    d476:	930e      	str	r3, [sp, #56]	; 0x38
            if (timeElapsed >= mS2Ticks)
    d478:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d47a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d47c:	429a      	cmp	r2, r3
    d47e:	d302      	bcc.n	d486 <FlexCAN_Ip_SendBlocking+0x9e>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    d480:	2303      	movs	r3, #3
    d482:	930f      	str	r3, [sp, #60]	; 0x3c
                break;
    d484:	e008      	b.n	d498 <FlexCAN_Ip_SendBlocking+0xb0>
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    d486:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d48a:	4619      	mov	r1, r3
    d48c:	980d      	ldr	r0, [sp, #52]	; 0x34
    d48e:	f7fe fab6 	bl	b9fe <FlexCAN_GetBuffStatusFlag>
    d492:	4603      	mov	r3, r0
    d494:	2b01      	cmp	r3, #1
    d496:	d1e6      	bne.n	d466 <FlexCAN_Ip_SendBlocking+0x7e>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == result) && (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE))
    d498:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d49a:	2b03      	cmp	r3, #3
    d49c:	d15c      	bne.n	d558 <FlexCAN_Ip_SendBlocking+0x170>
    d49e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d4a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d4a4:	011b      	lsls	r3, r3, #4
    d4a6:	4413      	add	r3, r2
    d4a8:	3304      	adds	r3, #4
    d4aa:	681b      	ldr	r3, [r3, #0]
    d4ac:	2b00      	cmp	r3, #0
    d4ae:	d053      	beq.n	d558 <FlexCAN_Ip_SendBlocking+0x170>
        {
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    d4b0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d4b4:	4619      	mov	r1, r3
    d4b6:	980d      	ldr	r0, [sp, #52]	; 0x34
    d4b8:	f7fe fa8e 	bl	b9d8 <FlexCAN_ClearMsgBuffIntStatusFlag>
                flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    d4bc:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d4c0:	4619      	mov	r1, r3
    d4c2:	980d      	ldr	r0, [sp, #52]	; 0x34
    d4c4:	f001 f968 	bl	e798 <FlexCAN_GetMsgBuffRegion>
    d4c8:	9008      	str	r0, [sp, #32]
                flexcan_mb_config = * flexcan_mb;
    d4ca:	9b08      	ldr	r3, [sp, #32]
    d4cc:	681b      	ldr	r3, [r3, #0]
    d4ce:	9309      	str	r3, [sp, #36]	; 0x24
                /* Reset the code */
                flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    d4d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d4d2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    d4d6:	9309      	str	r3, [sp, #36]	; 0x24
                flexcan_mb_config |= ((uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    d4d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d4da:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    d4de:	9309      	str	r3, [sp, #36]	; 0x24
                *flexcan_mb = flexcan_mb_config;
    d4e0:	9b08      	ldr	r3, [sp, #32]
    d4e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d4e4:	601a      	str	r2, [r3, #0]

                /* Wait to finish abort operation */
                uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d4e6:	2100      	movs	r1, #0
    d4e8:	4827      	ldr	r0, [pc, #156]	; (d588 <FlexCAN_Ip_SendBlocking+0x1a0>)
    d4ea:	f7f4 fcad 	bl	1e48 <OsIf_MicrosToTicks>
    d4ee:	900a      	str	r0, [sp, #40]	; 0x28
                timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d4f0:	2000      	movs	r0, #0
    d4f2:	f7f4 fc5d 	bl	1db0 <OsIf_GetCounter>
    d4f6:	4603      	mov	r3, r0
    d4f8:	9307      	str	r3, [sp, #28]
                 timeElapsed = 0U;
    d4fa:	2300      	movs	r3, #0
    d4fc:	930e      	str	r3, [sp, #56]	; 0x38
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    d4fe:	e00f      	b.n	d520 <FlexCAN_Ip_SendBlocking+0x138>
                {
                    timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    d500:	ab07      	add	r3, sp, #28
    d502:	2100      	movs	r1, #0
    d504:	4618      	mov	r0, r3
    d506:	f7f4 fc6c 	bl	1de2 <OsIf_GetElapsed>
    d50a:	4602      	mov	r2, r0
    d50c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d50e:	4413      	add	r3, r2
    d510:	930e      	str	r3, [sp, #56]	; 0x38
                    if (timeElapsed >= uS2Ticks)
    d512:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d516:	429a      	cmp	r2, r3
    d518:	d302      	bcc.n	d520 <FlexCAN_Ip_SendBlocking+0x138>
                    {
                        result = FLEXCAN_STATUS_TIMEOUT;
    d51a:	2303      	movs	r3, #3
    d51c:	930f      	str	r3, [sp, #60]	; 0x3c
                        break;
    d51e:	e008      	b.n	d532 <FlexCAN_Ip_SendBlocking+0x14a>
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    d520:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d524:	4619      	mov	r1, r3
    d526:	980d      	ldr	r0, [sp, #52]	; 0x34
    d528:	f7fe fa69 	bl	b9fe <FlexCAN_GetBuffStatusFlag>
    d52c:	4603      	mov	r3, r0
    d52e:	2b00      	cmp	r3, #0
    d530:	d0e6      	beq.n	d500 <FlexCAN_Ip_SendBlocking+0x118>
                    }
                }

                flexcan_mb_config = *flexcan_mb;
    d532:	9b08      	ldr	r3, [sp, #32]
    d534:	681b      	ldr	r3, [r3, #0]
    d536:	9309      	str	r3, [sp, #36]	; 0x24
                /* Check if the MBs have been safely Inactivated */
                if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    d538:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d53a:	0e1b      	lsrs	r3, r3, #24
    d53c:	f003 030f 	and.w	r3, r3, #15
    d540:	2b08      	cmp	r3, #8
    d542:	d101      	bne.n	d548 <FlexCAN_Ip_SendBlocking+0x160>
                {
                    /* Transmission have occurred */
                    result = FLEXCAN_STATUS_SUCCESS;
    d544:	2300      	movs	r3, #0
    d546:	930f      	str	r3, [sp, #60]	; 0x3c
                }

                if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    d548:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d54a:	0e1b      	lsrs	r3, r3, #24
    d54c:	f003 030f 	and.w	r3, r3, #15
    d550:	2b09      	cmp	r3, #9
    d552:	d101      	bne.n	d558 <FlexCAN_Ip_SendBlocking+0x170>
                {
                    /* Transmission have been aborted */
                    result = FLEXCAN_STATUS_TIMEOUT;
    d554:	2303      	movs	r3, #3
    d556:	930f      	str	r3, [sp, #60]	; 0x3c
                }
        }

        /* Clear message buffer flag */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    d558:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d55c:	4619      	mov	r1, r3
    d55e:	980d      	ldr	r0, [sp, #52]	; 0x34
    d560:	f7fe fa3a 	bl	b9d8 <FlexCAN_ClearMsgBuffIntStatusFlag>

        state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    d564:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d568:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d56a:	011b      	lsls	r3, r3, #4
    d56c:	4413      	add	r3, r2
    d56e:	3304      	adds	r3, #4
    d570:	2200      	movs	r2, #0
    d572:	601a      	str	r2, [r3, #0]
    }
    return result;
    d574:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
}
    d576:	4618      	mov	r0, r3
    d578:	b011      	add	sp, #68	; 0x44
    d57a:	f85d fb04 	ldr.w	pc, [sp], #4
    d57e:	bf00      	nop
    d580:	000184e4 	.word	0x000184e4
    d584:	1fff935c 	.word	0x1fff935c
    d588:	000f4240 	.word	0x000f4240

0000d58c <FlexCAN_Ip_SetRxMbGlobalMask_Privileged>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_SetRxMbGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMbGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    d58c:	b500      	push	{lr}
    d58e:	b087      	sub	sp, #28
    d590:	4603      	mov	r3, r0
    d592:	9100      	str	r1, [sp, #0]
    d594:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    d598:	2300      	movs	r3, #0
    d59a:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    d59c:	2300      	movs	r3, #0
    d59e:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    d5a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d5a4:	4a1c      	ldr	r2, [pc, #112]	; (d618 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x8c>)
    d5a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5aa:	9303      	str	r3, [sp, #12]
#endif

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    d5ac:	9803      	ldr	r0, [sp, #12]
    d5ae:	f7fe f9b9 	bl	b924 <FlexCAN_IsEnabled>
    d5b2:	4603      	mov	r3, r0
    d5b4:	2b00      	cmp	r3, #0
    d5b6:	bf14      	ite	ne
    d5b8:	2301      	movne	r3, #1
    d5ba:	2300      	moveq	r3, #0
    d5bc:	b2db      	uxtb	r3, r3
    d5be:	f083 0301 	eor.w	r3, r3, #1
    d5c2:	b2db      	uxtb	r3, r3
    d5c4:	f88d 300b 	strb.w	r3, [sp, #11]
    d5c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d5cc:	f003 0301 	and.w	r3, r3, #1
    d5d0:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    d5d4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d5d8:	2b00      	cmp	r3, #0
    d5da:	d003      	beq.n	d5e4 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    d5dc:	9803      	ldr	r0, [sp, #12]
    d5de:	f001 f9c3 	bl	e968 <FlexCAN_Enable>
    d5e2:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    d5e4:	9b05      	ldr	r3, [sp, #20]
    d5e6:	2b00      	cmp	r3, #0
    d5e8:	d103      	bne.n	d5f2 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxMsgBuffGlobalMask(pBase, mask);
    d5ea:	9900      	ldr	r1, [sp, #0]
    d5ec:	9803      	ldr	r0, [sp, #12]
    d5ee:	f7fe fbc3 	bl	bd78 <FlexCAN_SetRxMsgBuffGlobalMask>
    }

    if (TRUE == disabled)
    d5f2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d5f6:	2b00      	cmp	r3, #0
    d5f8:	d008      	beq.n	d60c <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    d5fa:	9803      	ldr	r0, [sp, #12]
    d5fc:	f001 fa32 	bl	ea64 <FlexCAN_Disable>
    d600:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    d602:	9b04      	ldr	r3, [sp, #16]
    d604:	2b00      	cmp	r3, #0
    d606:	d001      	beq.n	d60c <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
        {
            result = status;
    d608:	9b04      	ldr	r3, [sp, #16]
    d60a:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    d60c:	9b05      	ldr	r3, [sp, #20]
}
    d60e:	4618      	mov	r0, r3
    d610:	b007      	add	sp, #28
    d612:	f85d fb04 	ldr.w	pc, [sp], #4
    d616:	bf00      	nop
    d618:	000184e4 	.word	0x000184e4

0000d61c <FlexCAN_Ip_EnterFreezeMode_Privileged>:
 * Description   : Enter Driver In freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnterFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnterFreezeMode_Privileged(uint8 instance)
{
    d61c:	b500      	push	{lr}
    d61e:	b085      	sub	sp, #20
    d620:	4603      	mov	r3, r0
    d622:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d626:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d62a:	4a06      	ldr	r2, [pc, #24]	; (d644 <FlexCAN_Ip_EnterFreezeMode_Privileged+0x28>)
    d62c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d630:	9303      	str	r3, [sp, #12]
        return FlexCAN_EnterFreezeMode(base);
    d632:	9803      	ldr	r0, [sp, #12]
    d634:	f001 f94c 	bl	e8d0 <FlexCAN_EnterFreezeMode>
    d638:	4603      	mov	r3, r0
}
    d63a:	4618      	mov	r0, r3
    d63c:	b005      	add	sp, #20
    d63e:	f85d fb04 	ldr.w	pc, [sp], #4
    d642:	bf00      	nop
    d644:	000184e4 	.word	0x000184e4

0000d648 <FlexCAN_Ip_ExitFreezeMode_Privileged>:
 * Description   : Exit Driver from freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ExitFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ExitFreezeMode_Privileged(uint8 instance)
{
    d648:	b500      	push	{lr}
    d64a:	b085      	sub	sp, #20
    d64c:	4603      	mov	r3, r0
    d64e:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d652:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d656:	4a06      	ldr	r2, [pc, #24]	; (d670 <FlexCAN_Ip_ExitFreezeMode_Privileged+0x28>)
    d658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d65c:	9303      	str	r3, [sp, #12]
        return FlexCAN_ExitFreezeMode(base);
    d65e:	9803      	ldr	r0, [sp, #12]
    d660:	f001 f9be 	bl	e9e0 <FlexCAN_ExitFreezeMode>
    d664:	4603      	mov	r3, r0
}
    d666:	4618      	mov	r0, r3
    d668:	b005      	add	sp, #20
    d66a:	f85d fb04 	ldr.w	pc, [sp], #4
    d66e:	bf00      	nop
    d670:	000184e4 	.word	0x000184e4

0000d674 <FlexCAN_Ip_SetRxIndividualMask_Privileged>:
 * Description   : Set Rx individual mask as absolute value provided by mask parameter
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxIndividualMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxIndividualMask_Privileged(uint8 instance, uint8 mb_idx, uint32 mask)
{
    d674:	b500      	push	{lr}
    d676:	b087      	sub	sp, #28
    d678:	4603      	mov	r3, r0
    d67a:	9200      	str	r2, [sp, #0]
    d67c:	f88d 3007 	strb.w	r3, [sp, #7]
    d680:	460b      	mov	r3, r1
    d682:	f88d 3006 	strb.w	r3, [sp, #6]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    d686:	2300      	movs	r3, #0
    d688:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    d68a:	2300      	movs	r3, #0
    d68c:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    d68e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d692:	4a1e      	ldr	r2, [pc, #120]	; (d70c <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x98>)
    d694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d698:	9303      	str	r3, [sp, #12]
    }
    else
    {
#endif

    boolean disabled = !FlexCAN_IsEnabled(pBase);
    d69a:	9803      	ldr	r0, [sp, #12]
    d69c:	f7fe f942 	bl	b924 <FlexCAN_IsEnabled>
    d6a0:	4603      	mov	r3, r0
    d6a2:	2b00      	cmp	r3, #0
    d6a4:	bf14      	ite	ne
    d6a6:	2301      	movne	r3, #1
    d6a8:	2300      	moveq	r3, #0
    d6aa:	b2db      	uxtb	r3, r3
    d6ac:	f083 0301 	eor.w	r3, r3, #1
    d6b0:	b2db      	uxtb	r3, r3
    d6b2:	f88d 300b 	strb.w	r3, [sp, #11]
    d6b6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d6ba:	f003 0301 	and.w	r3, r3, #1
    d6be:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    d6c2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d6c6:	2b00      	cmp	r3, #0
    d6c8:	d003      	beq.n	d6d2 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    d6ca:	9803      	ldr	r0, [sp, #12]
    d6cc:	f001 f94c 	bl	e968 <FlexCAN_Enable>
    d6d0:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    d6d2:	9b05      	ldr	r3, [sp, #20]
    d6d4:	2b00      	cmp	r3, #0
    d6d6:	d106      	bne.n	d6e6 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x72>
    {
        FlexCAN_SetRxIndividualMask(pBase, mb_idx, mask);
    d6d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d6dc:	9a00      	ldr	r2, [sp, #0]
    d6de:	4619      	mov	r1, r3
    d6e0:	9803      	ldr	r0, [sp, #12]
    d6e2:	f7fe fb52 	bl	bd8a <FlexCAN_SetRxIndividualMask>
    }

    if (TRUE == disabled)
    d6e6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d6ea:	2b00      	cmp	r3, #0
    d6ec:	d008      	beq.n	d700 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    d6ee:	9803      	ldr	r0, [sp, #12]
    d6f0:	f001 f9b8 	bl	ea64 <FlexCAN_Disable>
    d6f4:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    d6f6:	9b04      	ldr	r3, [sp, #16]
    d6f8:	2b00      	cmp	r3, #0
    d6fa:	d001      	beq.n	d700 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
        {
            result = status;
    d6fc:	9b04      	ldr	r3, [sp, #16]
    d6fe:	9305      	str	r3, [sp, #20]
        }
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    d700:	9b05      	ldr	r3, [sp, #20]
}
    d702:	4618      	mov	r0, r3
    d704:	b007      	add	sp, #28
    d706:	f85d fb04 	ldr.w	pc, [sp], #4
    d70a:	bf00      	nop
    d70c:	000184e4 	.word	0x000184e4

0000d710 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>:
 * Description   : Set RxFifo Global Mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxFifoGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxFifoGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    d710:	b500      	push	{lr}
    d712:	b087      	sub	sp, #28
    d714:	4603      	mov	r3, r0
    d716:	9100      	str	r1, [sp, #0]
    d718:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    d71c:	2300      	movs	r3, #0
    d71e:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    d720:	2300      	movs	r3, #0
    d722:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    d724:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d728:	4a1c      	ldr	r2, [pc, #112]	; (d79c <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x8c>)
    d72a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d72e:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    d730:	9803      	ldr	r0, [sp, #12]
    d732:	f7fe f8f7 	bl	b924 <FlexCAN_IsEnabled>
    d736:	4603      	mov	r3, r0
    d738:	2b00      	cmp	r3, #0
    d73a:	bf14      	ite	ne
    d73c:	2301      	movne	r3, #1
    d73e:	2300      	moveq	r3, #0
    d740:	b2db      	uxtb	r3, r3
    d742:	f083 0301 	eor.w	r3, r3, #1
    d746:	b2db      	uxtb	r3, r3
    d748:	f88d 300b 	strb.w	r3, [sp, #11]
    d74c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d750:	f003 0301 	and.w	r3, r3, #1
    d754:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    d758:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d75c:	2b00      	cmp	r3, #0
    d75e:	d003      	beq.n	d768 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    d760:	9803      	ldr	r0, [sp, #12]
    d762:	f001 f901 	bl	e968 <FlexCAN_Enable>
    d766:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    d768:	9b05      	ldr	r3, [sp, #20]
    d76a:	2b00      	cmp	r3, #0
    d76c:	d103      	bne.n	d776 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxFifoGlobalMask(pBase, mask);
    d76e:	9900      	ldr	r1, [sp, #0]
    d770:	9803      	ldr	r0, [sp, #12]
    d772:	f7fe f8a7 	bl	b8c4 <FlexCAN_SetRxFifoGlobalMask>
    }

    if (TRUE == disabled)
    d776:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d77a:	2b00      	cmp	r3, #0
    d77c:	d008      	beq.n	d790 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    d77e:	9803      	ldr	r0, [sp, #12]
    d780:	f001 f970 	bl	ea64 <FlexCAN_Disable>
    d784:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    d786:	9b04      	ldr	r3, [sp, #16]
    d788:	2b00      	cmp	r3, #0
    d78a:	d001      	beq.n	d790 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
        {
            result = status;
    d78c:	9b04      	ldr	r3, [sp, #16]
    d78e:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    d790:	9b05      	ldr	r3, [sp, #20]
}
    d792:	4618      	mov	r0, r3
    d794:	b007      	add	sp, #28
    d796:	f85d fb04 	ldr.w	pc, [sp], #4
    d79a:	bf00      	nop
    d79c:	000184e4 	.word	0x000184e4

0000d7a0 <FlexCAN_Ip_Deinit_Privileged>:
 * This function will disable all FlexCAN interrupts, and disable the FlexCAN.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_Deinit_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Deinit_Privileged(uint8 instance)
{
    d7a0:	b500      	push	{lr}
    d7a2:	b085      	sub	sp, #20
    d7a4:	4603      	mov	r3, r0
    d7a6:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d7aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d7ae:	4a0e      	ldr	r2, [pc, #56]	; (d7e8 <FlexCAN_Ip_Deinit_Privileged+0x48>)
    d7b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7b4:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Enter Freeze Mode Required before to enter Disabled Mode */
    result = FlexCAN_EnterFreezeMode(base);
    d7b6:	9803      	ldr	r0, [sp, #12]
    d7b8:	f001 f88a 	bl	e8d0 <FlexCAN_EnterFreezeMode>
    d7bc:	9002      	str	r0, [sp, #8]
    if (FLEXCAN_STATUS_SUCCESS == result)
    d7be:	9b02      	ldr	r3, [sp, #8]
    d7c0:	2b00      	cmp	r3, #0
    d7c2:	d10b      	bne.n	d7dc <FlexCAN_Ip_Deinit_Privileged+0x3c>
    {
        /* Reset registers */
        FlexCAN_SetRegDefaultVal(base);
    d7c4:	9803      	ldr	r0, [sp, #12]
    d7c6:	f7fe fb18 	bl	bdfa <FlexCAN_SetRegDefaultVal>
        /* wait for disable */
        (void)FlexCAN_Disable(base);
    d7ca:	9803      	ldr	r0, [sp, #12]
    d7cc:	f001 f94a 	bl	ea64 <FlexCAN_Disable>
        /* Clear state pointer that is checked by FLEXCAN_DRV_Init */
        Flexcan_Ip_apxState[instance] = NULL_PTR;
    d7d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d7d4:	4a05      	ldr	r2, [pc, #20]	; (d7ec <FlexCAN_Ip_Deinit_Privileged+0x4c>)
    d7d6:	2100      	movs	r1, #0
    d7d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OsIf_Trusted_Call1param(FlexCAN_ClrUserAccessAllowed, base);
        }
    #endif
    }

    return result;
    d7dc:	9b02      	ldr	r3, [sp, #8]
}
    d7de:	4618      	mov	r0, r3
    d7e0:	b005      	add	sp, #20
    d7e2:	f85d fb04 	ldr.w	pc, [sp], #4
    d7e6:	bf00      	nop
    d7e8:	000184e4 	.word	0x000184e4
    d7ec:	1fff935c 	.word	0x1fff935c

0000d7f0 <FlexCAN_Ip_MainFunctionRead>:
 * This function read the messages received as pulling or if the Interrupts are disabled.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionRead_Activity */
void FlexCAN_Ip_MainFunctionRead(uint8 instance, uint8 mb_idx)
{
    d7f0:	b500      	push	{lr}
    d7f2:	b085      	sub	sp, #20
    d7f4:	4603      	mov	r3, r0
    d7f6:	460a      	mov	r2, r1
    d7f8:	f88d 3007 	strb.w	r3, [sp, #7]
    d7fc:	4613      	mov	r3, r2
    d7fe:	f88d 3006 	strb.w	r3, [sp, #6]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d802:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d806:	4a22      	ldr	r2, [pc, #136]	; (d890 <FlexCAN_Ip_MainFunctionRead+0xa0>)
    d808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d80c:	9303      	str	r3, [sp, #12]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d80e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d812:	4a20      	ldr	r2, [pc, #128]	; (d894 <FlexCAN_Ip_MainFunctionRead+0xa4>)
    d814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d818:	9302      	str	r3, [sp, #8]
        }
    }
    else
    {
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
        if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    d81a:	9b02      	ldr	r3, [sp, #8]
    d81c:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    d820:	2b00      	cmp	r3, #0
    d822:	d015      	beq.n	d850 <FlexCAN_Ip_MainFunctionRead+0x60>
    d824:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d828:	2b07      	cmp	r3, #7
    d82a:	d811      	bhi.n	d850 <FlexCAN_Ip_MainFunctionRead+0x60>
        {
            /* just process available legacy fifo event only */
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    d82c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d830:	2b00      	cmp	r3, #0
    d832:	d128      	bne.n	d886 <FlexCAN_Ip_MainFunctionRead+0x96>
            {
                if (FlexCAN_GetBuffStatusFlag(base, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE) != 0U)
    d834:	2105      	movs	r1, #5
    d836:	9803      	ldr	r0, [sp, #12]
    d838:	f7fe f8e1 	bl	b9fe <FlexCAN_GetBuffStatusFlag>
    d83c:	4603      	mov	r3, r0
    d83e:	2b00      	cmp	r3, #0
    d840:	d021      	beq.n	d886 <FlexCAN_Ip_MainFunctionRead+0x96>
                {
                    FlexCAN_IRQHandlerRxFIFO(instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE);
    d842:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d846:	2105      	movs	r1, #5
    d848:	4618      	mov	r0, r3
    d84a:	f7fe ff17 	bl	c67c <FlexCAN_IRQHandlerRxFIFO>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    d84e:	e01a      	b.n	d886 <FlexCAN_Ip_MainFunctionRead+0x96>
                }
            }
        }
        else
        {
            if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    d850:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d854:	4619      	mov	r1, r3
    d856:	9803      	ldr	r0, [sp, #12]
    d858:	f7fe f8d1 	bl	b9fe <FlexCAN_GetBuffStatusFlag>
    d85c:	4603      	mov	r3, r0
    d85e:	2b00      	cmp	r3, #0
    d860:	d012      	beq.n	d888 <FlexCAN_Ip_MainFunctionRead+0x98>
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    d862:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d866:	9a02      	ldr	r2, [sp, #8]
    d868:	011b      	lsls	r3, r3, #4
    d86a:	4413      	add	r3, r2
    d86c:	3304      	adds	r3, #4
    d86e:	681b      	ldr	r3, [r3, #0]
    d870:	2b01      	cmp	r3, #1
    d872:	d109      	bne.n	d888 <FlexCAN_Ip_MainFunctionRead+0x98>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    d874:	f89d 2006 	ldrb.w	r2, [sp, #6]
    d878:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d87c:	4611      	mov	r1, r2
    d87e:	4618      	mov	r0, r3
    d880:	f7fe fd74 	bl	c36c <FlexCAN_IRQHandlerRxMB>
            }
        }
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
}
    d884:	e000      	b.n	d888 <FlexCAN_Ip_MainFunctionRead+0x98>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    d886:	bf00      	nop
}
    d888:	bf00      	nop
    d88a:	b005      	add	sp, #20
    d88c:	f85d fb04 	ldr.w	pc, [sp], #4
    d890:	000184e4 	.word	0x000184e4
    d894:	1fff935c 	.word	0x1fff935c

0000d898 <FlexCAN_Ip_MainFunctionBusOff_Privileged>:
 * This function check the bus off event.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionBusOff_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_MainFunctionBusOff_Privileged(uint8 instance)
{
    d898:	b510      	push	{r4, lr}
    d89a:	b086      	sub	sp, #24
    d89c:	4603      	mov	r3, r0
    d89e:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    d8a2:	2301      	movs	r3, #1
    d8a4:	9305      	str	r3, [sp, #20]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d8a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d8aa:	4a15      	ldr	r2, [pc, #84]	; (d900 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x68>)
    d8ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8b0:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d8b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d8b6:	4a13      	ldr	r2, [pc, #76]	; (d904 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x6c>)
    d8b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8bc:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    d8be:	2300      	movs	r3, #0
    d8c0:	9302      	str	r3, [sp, #8]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Get error status */
    u32ErrStatus = base->ESR1;
    d8c2:	9b04      	ldr	r3, [sp, #16]
    d8c4:	6a1b      	ldr	r3, [r3, #32]
    d8c6:	9302      	str	r3, [sp, #8]

    if (0U != (u32ErrStatus & FLEXCAN_ESR1_BOFFINT_MASK))
    d8c8:	9b02      	ldr	r3, [sp, #8]
    d8ca:	f003 0304 	and.w	r3, r3, #4
    d8ce:	2b00      	cmp	r3, #0
    d8d0:	d012      	beq.n	d8f8 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x60>
    {
        /* Invoke callback */
        if (state->error_callback != NULL_PTR)
    d8d2:	9b03      	ldr	r3, [sp, #12]
    d8d4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d8d8:	2b00      	cmp	r3, #0
    d8da:	d008      	beq.n	d8ee <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x56>
        {
            state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    d8dc:	9b03      	ldr	r3, [sp, #12]
    d8de:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    d8e2:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d8e6:	9b03      	ldr	r3, [sp, #12]
    d8e8:	9a02      	ldr	r2, [sp, #8]
    d8ea:	2107      	movs	r1, #7
    d8ec:	47a0      	blx	r4
        }
        /* Clear BusOff Status Flag */
        base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    d8ee:	9b04      	ldr	r3, [sp, #16]
    d8f0:	2204      	movs	r2, #4
    d8f2:	621a      	str	r2, [r3, #32]
        eRetVal = FLEXCAN_STATUS_SUCCESS;
    d8f4:	2300      	movs	r3, #0
    d8f6:	9305      	str	r3, [sp, #20]
    }
    return eRetVal;
    d8f8:	9b05      	ldr	r3, [sp, #20]
}
    d8fa:	4618      	mov	r0, r3
    d8fc:	b006      	add	sp, #24
    d8fe:	bd10      	pop	{r4, pc}
    d900:	000184e4 	.word	0x000184e4
    d904:	1fff935c 	.word	0x1fff935c

0000d908 <FlexCAN_Ip_MainFunctionWrite>:
 * This function check the message if have been sent.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionWrite_Activity */
void FlexCAN_Ip_MainFunctionWrite(uint8 instance, uint8 mb_idx)
{
    d908:	b510      	push	{r4, lr}
    d90a:	b098      	sub	sp, #96	; 0x60
    d90c:	4603      	mov	r3, r0
    d90e:	460a      	mov	r2, r1
    d910:	f88d 3007 	strb.w	r3, [sp, #7]
    d914:	4613      	mov	r3, r2
    d916:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    d91a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d91e:	4a3f      	ldr	r2, [pc, #252]	; (da1c <FlexCAN_Ip_MainFunctionWrite+0x114>)
    d920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d924:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    d926:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d92a:	4a3d      	ldr	r2, [pc, #244]	; (da20 <FlexCAN_Ip_MainFunctionWrite+0x118>)
    d92c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d930:	9316      	str	r3, [sp, #88]	; 0x58

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    d932:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d936:	4619      	mov	r1, r3
    d938:	9817      	ldr	r0, [sp, #92]	; 0x5c
    d93a:	f7fe f860 	bl	b9fe <FlexCAN_GetBuffStatusFlag>
    d93e:	4603      	mov	r3, r0
    d940:	2b00      	cmp	r3, #0
    d942:	d068      	beq.n	da16 <FlexCAN_Ip_MainFunctionWrite+0x10e>
    {
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    d944:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d948:	9a16      	ldr	r2, [sp, #88]	; 0x58
    d94a:	011b      	lsls	r3, r3, #4
    d94c:	4413      	add	r3, r2
    d94e:	3304      	adds	r3, #4
    d950:	681b      	ldr	r3, [r3, #0]
    d952:	2b02      	cmp	r3, #2
    d954:	d15f      	bne.n	da16 <FlexCAN_Ip_MainFunctionWrite+0x10e>
        {
            if (state->mbs[mb_idx].isRemote)
    d956:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d95a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    d95c:	011b      	lsls	r3, r3, #4
    d95e:	4413      	add	r3, r2
    d960:	3309      	adds	r3, #9
    d962:	781b      	ldrb	r3, [r3, #0]
    d964:	2b00      	cmp	r3, #0
    d966:	d028      	beq.n	d9ba <FlexCAN_Ip_MainFunctionWrite+0xb2>
            {
                Flexcan_Ip_MsgBuffType mb;
                mb.cs = 0U;
    d968:	2300      	movs	r3, #0
    d96a:	9302      	str	r3, [sp, #8]
                mb.time_stamp = 0U;
    d96c:	2300      	movs	r3, #0
    d96e:	9315      	str	r3, [sp, #84]	; 0x54
                FlexCAN_LockRxMsgBuff(base, mb_idx);
    d970:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d974:	4619      	mov	r1, r3
    d976:	9817      	ldr	r0, [sp, #92]	; 0x5c
    d978:	f001 fa87 	bl	ee8a <FlexCAN_LockRxMsgBuff>
                FlexCAN_GetMsgBuff(base, mb_idx, &mb);
    d97c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d980:	aa02      	add	r2, sp, #8
    d982:	4619      	mov	r1, r3
    d984:	9817      	ldr	r0, [sp, #92]	; 0x5c
    d986:	f001 fbaf 	bl	f0e8 <FlexCAN_GetMsgBuff>
                FlexCAN_UnlockRxMsgBuff(base);
    d98a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    d98c:	f7fe f81d 	bl	b9ca <FlexCAN_UnlockRxMsgBuff>
                state->mbs[mb_idx].time_stamp = mb.time_stamp;
    d990:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d994:	9a15      	ldr	r2, [sp, #84]	; 0x54
    d996:	9916      	ldr	r1, [sp, #88]	; 0x58
    d998:	011b      	lsls	r3, r3, #4
    d99a:	440b      	add	r3, r1
    d99c:	330c      	adds	r3, #12
    d99e:	601a      	str	r2, [r3, #0]
                /* If the frame was a remote frame, clear the flag only if the response was
                * not received yet. If the response was received, leave the flag set in order
                * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
                if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    d9a0:	9b02      	ldr	r3, [sp, #8]
    d9a2:	0e1b      	lsrs	r3, r3, #24
    d9a4:	f003 030f 	and.w	r3, r3, #15
    d9a8:	2b04      	cmp	r3, #4
    d9aa:	d11d      	bne.n	d9e8 <FlexCAN_Ip_MainFunctionWrite+0xe0>
                {
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    d9ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d9b0:	4619      	mov	r1, r3
    d9b2:	9817      	ldr	r0, [sp, #92]	; 0x5c
    d9b4:	f7fe f810 	bl	b9d8 <FlexCAN_ClearMsgBuffIntStatusFlag>
    d9b8:	e016      	b.n	d9e8 <FlexCAN_Ip_MainFunctionWrite+0xe0>
                }
            }
            else
            {
                state->mbs[mb_idx].time_stamp = FlexCAN_GetMsgBuffTimestamp(base, mb_idx);
    d9ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d9be:	f89d 4006 	ldrb.w	r4, [sp, #6]
    d9c2:	4619      	mov	r1, r3
    d9c4:	9817      	ldr	r0, [sp, #92]	; 0x5c
    d9c6:	f001 fb7b 	bl	f0c0 <FlexCAN_GetMsgBuffTimestamp>
    d9ca:	4601      	mov	r1, r0
    d9cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
    d9ce:	0123      	lsls	r3, r4, #4
    d9d0:	4413      	add	r3, r2
    d9d2:	330c      	adds	r3, #12
    d9d4:	6019      	str	r1, [r3, #0]
                FlexCAN_UnlockRxMsgBuff(base);
    d9d6:	9817      	ldr	r0, [sp, #92]	; 0x5c
    d9d8:	f7fd fff7 	bl	b9ca <FlexCAN_UnlockRxMsgBuff>
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    d9dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d9e0:	4619      	mov	r1, r3
    d9e2:	9817      	ldr	r0, [sp, #92]	; 0x5c
    d9e4:	f7fd fff8 	bl	b9d8 <FlexCAN_ClearMsgBuffIntStatusFlag>
            }

            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    d9e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d9ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
    d9ee:	011b      	lsls	r3, r3, #4
    d9f0:	4413      	add	r3, r2
    d9f2:	3304      	adds	r3, #4
    d9f4:	2200      	movs	r2, #0
    d9f6:	601a      	str	r2, [r3, #0]

            /* Invoke callback */
            if (state->callback != NULL_PTR)
    d9f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d9fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    d9fe:	2b00      	cmp	r3, #0
    da00:	d009      	beq.n	da16 <FlexCAN_Ip_MainFunctionWrite+0x10e>
            {
                state->callback(instance, FLEXCAN_EVENT_TX_COMPLETE, mb_idx, state);
    da02:	9b16      	ldr	r3, [sp, #88]	; 0x58
    da04:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    da08:	f89d 2006 	ldrb.w	r2, [sp, #6]
    da0c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    da10:	9b16      	ldr	r3, [sp, #88]	; 0x58
    da12:	2104      	movs	r1, #4
    da14:	47a0      	blx	r4
            }
        }
    }
}
    da16:	bf00      	nop
    da18:	b018      	add	sp, #96	; 0x60
    da1a:	bd10      	pop	{r4, pc}
    da1c:	000184e4 	.word	0x000184e4
    da20:	1fff935c 	.word	0x1fff935c

0000da24 <FlexCAN_Ip_GetStopMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STOPPED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStopMode_Activity */
boolean FlexCAN_Ip_GetStopMode_Privileged(uint8 instance)
{
    da24:	b084      	sub	sp, #16
    da26:	4603      	mov	r3, r0
    da28:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    da2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    da30:	4a08      	ldr	r2, [pc, #32]	; (da54 <FlexCAN_Ip_GetStopMode_Privileged+0x30>)
    da32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da36:	9303      	str	r3, [sp, #12]
    return ((FLEXCAN_MCR_LPMACK_MASK == (base->MCR & FLEXCAN_MCR_LPMACK_MASK)) ? TRUE : FALSE);
    da38:	9b03      	ldr	r3, [sp, #12]
    da3a:	681b      	ldr	r3, [r3, #0]
    da3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    da40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    da44:	bf0c      	ite	eq
    da46:	2301      	moveq	r3, #1
    da48:	2300      	movne	r3, #0
    da4a:	b2db      	uxtb	r3, r3
}
    da4c:	4618      	mov	r0, r3
    da4e:	b004      	add	sp, #16
    da50:	4770      	bx	lr
    da52:	bf00      	nop
    da54:	000184e4 	.word	0x000184e4

0000da58 <FlexCAN_Ip_GetStartMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STARTED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStartMode_Activity */
boolean FlexCAN_Ip_GetStartMode_Privileged(uint8 instance)
{
    da58:	b084      	sub	sp, #16
    da5a:	4603      	mov	r3, r0
    da5c:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    da60:	f89d 3007 	ldrb.w	r3, [sp, #7]
    da64:	4a07      	ldr	r2, [pc, #28]	; (da84 <FlexCAN_Ip_GetStartMode_Privileged+0x2c>)
    da66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da6a:	9303      	str	r3, [sp, #12]
    return ((0U == (base->MCR & (FLEXCAN_MCR_LPMACK_MASK | FLEXCAN_MCR_FRZACK_MASK))) ? TRUE : FALSE);
    da6c:	9b03      	ldr	r3, [sp, #12]
    da6e:	681b      	ldr	r3, [r3, #0]
    da70:	f003 7388 	and.w	r3, r3, #17825792	; 0x1100000
    da74:	2b00      	cmp	r3, #0
    da76:	bf0c      	ite	eq
    da78:	2301      	moveq	r3, #1
    da7a:	2300      	movne	r3, #0
    da7c:	b2db      	uxtb	r3, r3
}
    da7e:	4618      	mov	r0, r3
    da80:	b004      	add	sp, #16
    da82:	4770      	bx	lr
    da84:	000184e4 	.word	0x000184e4

0000da88 <FlexCAN_Ip_SetStartMode_Privileged>:
 * Description   : Set the FlexCAN instance in START mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStartMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStartMode_Privileged(uint8 instance)
{
    da88:	b500      	push	{lr}
    da8a:	b085      	sub	sp, #20
    da8c:	4603      	mov	r3, r0
    da8e:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    da92:	f89d 3007 	ldrb.w	r3, [sp, #7]
    da96:	4a0b      	ldr	r2, [pc, #44]	; (dac4 <FlexCAN_Ip_SetStartMode_Privileged+0x3c>)
    da98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da9c:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    da9e:	f006 faf7 	bl	14090 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>
    /* Enable Flexcan Module */
    pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    daa2:	9b03      	ldr	r3, [sp, #12]
    daa4:	681b      	ldr	r3, [r3, #0]
    daa6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    daaa:	9b03      	ldr	r3, [sp, #12]
    daac:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    daae:	f006 fb1b 	bl	140e8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>

    return (FlexCAN_ExitFreezeMode(pBase));
    dab2:	9803      	ldr	r0, [sp, #12]
    dab4:	f000 ff94 	bl	e9e0 <FlexCAN_ExitFreezeMode>
    dab8:	4603      	mov	r3, r0
}
    daba:	4618      	mov	r0, r3
    dabc:	b005      	add	sp, #20
    dabe:	f85d fb04 	ldr.w	pc, [sp], #4
    dac2:	bf00      	nop
    dac4:	000184e4 	.word	0x000184e4

0000dac8 <FlexCAN_Ip_SetStopMode_Privileged>:
 * Description   : Set the FlexCAN instance in STOP mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStopMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStopMode_Privileged(uint8 instance)
{
    dac8:	b500      	push	{lr}
    daca:	b085      	sub	sp, #20
    dacc:	4603      	mov	r3, r0
    dace:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dad2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dad6:	4a0a      	ldr	r2, [pc, #40]	; (db00 <FlexCAN_Ip_SetStopMode_Privileged+0x38>)
    dad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dadc:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status;
    status = FlexCAN_EnterFreezeMode(pBase);
    dade:	9802      	ldr	r0, [sp, #8]
    dae0:	f000 fef6 	bl	e8d0 <FlexCAN_EnterFreezeMode>
    dae4:	9003      	str	r0, [sp, #12]
    if (FLEXCAN_STATUS_SUCCESS == status)
    dae6:	9b03      	ldr	r3, [sp, #12]
    dae8:	2b00      	cmp	r3, #0
    daea:	d103      	bne.n	daf4 <FlexCAN_Ip_SetStopMode_Privileged+0x2c>

        /* TODO: reset MB status */

        /* TODO: disable all interrupt */

        status = FlexCAN_Disable(pBase);
    daec:	9802      	ldr	r0, [sp, #8]
    daee:	f000 ffb9 	bl	ea64 <FlexCAN_Disable>
    daf2:	9003      	str	r0, [sp, #12]
    }
    return status;
    daf4:	9b03      	ldr	r3, [sp, #12]
}
    daf6:	4618      	mov	r0, r3
    daf8:	b005      	add	sp, #20
    dafa:	f85d fb04 	ldr.w	pc, [sp], #4
    dafe:	bf00      	nop
    db00:	000184e4 	.word	0x000184e4

0000db04 <FlexCAN_Ip_SetRxMaskType_Privileged>:
 * mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxMaskType_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMaskType_Privileged(uint8 instance, Flexcan_Ip_RxMaskType type)
{
    db04:	b500      	push	{lr}
    db06:	b087      	sub	sp, #28
    db08:	4603      	mov	r3, r0
    db0a:	9100      	str	r1, [sp, #0]
    db0c:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    db10:	2300      	movs	r3, #0
    db12:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    db14:	2300      	movs	r3, #0
    db16:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    db18:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db1c:	4a1e      	ldr	r2, [pc, #120]	; (db98 <FlexCAN_Ip_SetRxMaskType_Privileged+0x94>)
    db1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db22:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    db24:	9803      	ldr	r0, [sp, #12]
    db26:	f7fd fefd 	bl	b924 <FlexCAN_IsEnabled>
    db2a:	4603      	mov	r3, r0
    db2c:	2b00      	cmp	r3, #0
    db2e:	bf14      	ite	ne
    db30:	2301      	movne	r3, #1
    db32:	2300      	moveq	r3, #0
    db34:	b2db      	uxtb	r3, r3
    db36:	f083 0301 	eor.w	r3, r3, #1
    db3a:	b2db      	uxtb	r3, r3
    db3c:	f88d 300b 	strb.w	r3, [sp, #11]
    db40:	f89d 300b 	ldrb.w	r3, [sp, #11]
    db44:	f003 0301 	and.w	r3, r3, #1
    db48:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    db4c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    db50:	2b00      	cmp	r3, #0
    db52:	d003      	beq.n	db5c <FlexCAN_Ip_SetRxMaskType_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    db54:	9803      	ldr	r0, [sp, #12]
    db56:	f000 ff07 	bl	e968 <FlexCAN_Enable>
    db5a:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    db5c:	9b05      	ldr	r3, [sp, #20]
    db5e:	2b00      	cmp	r3, #0
    db60:	d107      	bne.n	db72 <FlexCAN_Ip_SetRxMaskType_Privileged+0x6e>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    db62:	f006 fae7 	bl	14134 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
        FlexCAN_SetRxMaskType(pBase, type);
    db66:	9900      	ldr	r1, [sp, #0]
    db68:	9803      	ldr	r0, [sp, #12]
    db6a:	f7fe f930 	bl	bdce <FlexCAN_SetRxMaskType>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    db6e:	f006 fb0d 	bl	1418c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
    }

    if (TRUE == disabled)
    db72:	f89d 300b 	ldrb.w	r3, [sp, #11]
    db76:	2b00      	cmp	r3, #0
    db78:	d008      	beq.n	db8c <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
    {
        status = FlexCAN_Disable(pBase);
    db7a:	9803      	ldr	r0, [sp, #12]
    db7c:	f000 ff72 	bl	ea64 <FlexCAN_Disable>
    db80:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    db82:	9b04      	ldr	r3, [sp, #16]
    db84:	2b00      	cmp	r3, #0
    db86:	d001      	beq.n	db8c <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
        {
            result = status;
    db88:	9b04      	ldr	r3, [sp, #16]
    db8a:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    db8c:	9b05      	ldr	r3, [sp, #20]
}
    db8e:	4618      	mov	r0, r3
    db90:	b007      	add	sp, #28
    db92:	f85d fb04 	ldr.w	pc, [sp], #4
    db96:	bf00      	nop
    db98:	000184e4 	.word	0x000184e4

0000db9c <FlexCAN_Ip_SetBitrate_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrate_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrate_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean enhExt)
{
    db9c:	b500      	push	{lr}
    db9e:	b087      	sub	sp, #28
    dba0:	4603      	mov	r3, r0
    dba2:	9100      	str	r1, [sp, #0]
    dba4:	f88d 3007 	strb.w	r3, [sp, #7]
    dba8:	4613      	mov	r3, r2
    dbaa:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    dbae:	2300      	movs	r3, #0
    dbb0:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    dbb2:	2300      	movs	r3, #0
    dbb4:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dbb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dbba:	4a1c      	ldr	r2, [pc, #112]	; (dc2c <FlexCAN_Ip_SetBitrate_Privileged+0x90>)
    dbbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbc0:	9303      	str	r3, [sp, #12]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    dbc2:	9b03      	ldr	r3, [sp, #12]
    dbc4:	681b      	ldr	r3, [r3, #0]
    dbc6:	0fdb      	lsrs	r3, r3, #31
    dbc8:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_OFF)
    (void)enhExt;
#endif
    if (TRUE == disabled)
    dbcc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dbd0:	2b00      	cmp	r3, #0
    dbd2:	d003      	beq.n	dbdc <FlexCAN_Ip_SetBitrate_Privileged+0x40>
    {
        result = FlexCAN_Enable(pBase);
    dbd4:	9803      	ldr	r0, [sp, #12]
    dbd6:	f000 fec7 	bl	e968 <FlexCAN_Enable>
    dbda:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    dbdc:	9b05      	ldr	r3, [sp, #20]
    dbde:	2b00      	cmp	r3, #0
    dbe0:	d112      	bne.n	dc08 <FlexCAN_Ip_SetBitrate_Privileged+0x6c>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    dbe2:	f006 fc93 	bl	1450c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
            FlexCAN_SetEnhancedNominalTimeSegments(pBase, bitrate);
        }
        else
#endif
        {
            if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    dbe6:	9803      	ldr	r0, [sp, #12]
    dbe8:	f7fe f830 	bl	bc4c <FlexCAN_IsExCbtEnabled>
    dbec:	4603      	mov	r3, r0
    dbee:	2b00      	cmp	r3, #0
    dbf0:	d004      	beq.n	dbfc <FlexCAN_Ip_SetBitrate_Privileged+0x60>
            {
                FlexCAN_SetExtendedTimeSegments(pBase, bitrate);
    dbf2:	9900      	ldr	r1, [sp, #0]
    dbf4:	9803      	ldr	r0, [sp, #12]
    dbf6:	f7fd ff7f 	bl	baf8 <FlexCAN_SetExtendedTimeSegments>
    dbfa:	e003      	b.n	dc04 <FlexCAN_Ip_SetBitrate_Privileged+0x68>
            }
            else
            {
                FlexCAN_SetTimeSegments(pBase, bitrate);
    dbfc:	9900      	ldr	r1, [sp, #0]
    dbfe:	9803      	ldr	r0, [sp, #12]
    dc00:	f7fd ff4e 	bl	baa0 <FlexCAN_SetTimeSegments>
            }
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    dc04:	f006 fcae 	bl	14564 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
    }

    if (TRUE == disabled)
    dc08:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dc0c:	2b00      	cmp	r3, #0
    dc0e:	d008      	beq.n	dc22 <FlexCAN_Ip_SetBitrate_Privileged+0x86>
    {
        status = FlexCAN_Disable(pBase);
    dc10:	9803      	ldr	r0, [sp, #12]
    dc12:	f000 ff27 	bl	ea64 <FlexCAN_Disable>
    dc16:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    dc18:	9b04      	ldr	r3, [sp, #16]
    dc1a:	2b00      	cmp	r3, #0
    dc1c:	d001      	beq.n	dc22 <FlexCAN_Ip_SetBitrate_Privileged+0x86>
        {
            result = status;
    dc1e:	9b04      	ldr	r3, [sp, #16]
    dc20:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    dc22:	9b05      	ldr	r3, [sp, #20]
}
    dc24:	4618      	mov	r0, r3
    dc26:	b007      	add	sp, #28
    dc28:	f85d fb04 	ldr.w	pc, [sp], #4
    dc2c:	000184e4 	.word	0x000184e4

0000dc30 <FlexCAN_Ip_GetBitrate>:
 * or the arbitration phase of FD frames.
 *
 *END**************************************************************************/
 /* implements   FlexCAN_Ip_GetBitrate_Activity */
boolean FlexCAN_Ip_GetBitrate(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    dc30:	b500      	push	{lr}
    dc32:	b085      	sub	sp, #20
    dc34:	4603      	mov	r3, r0
    dc36:	9100      	str	r1, [sp, #0]
    dc38:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dc3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dc40:	4a0d      	ldr	r2, [pc, #52]	; (dc78 <FlexCAN_Ip_GetBitrate+0x48>)
    dc42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc46:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    dc48:	2300      	movs	r3, #0
    dc4a:	f88d 300b 	strb.w	r3, [sp, #11]
        FlexCAN_GetEnhancedNominalTimeSegments(pBase, bitrate);
    }
    else
#endif
    {
        if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    dc4e:	9803      	ldr	r0, [sp, #12]
    dc50:	f7fd fffc 	bl	bc4c <FlexCAN_IsExCbtEnabled>
    dc54:	4603      	mov	r3, r0
    dc56:	2b00      	cmp	r3, #0
    dc58:	d004      	beq.n	dc64 <FlexCAN_Ip_GetBitrate+0x34>
        {
            /* Get the Extended time segments*/
            FlexCAN_GetExtendedTimeSegments(pBase, bitrate);
    dc5a:	9900      	ldr	r1, [sp, #0]
    dc5c:	9803      	ldr	r0, [sp, #12]
    dc5e:	f7fd ff79 	bl	bb54 <FlexCAN_GetExtendedTimeSegments>
    dc62:	e003      	b.n	dc6c <FlexCAN_Ip_GetBitrate+0x3c>
        }
        else
        {
            /* Get the time segments*/
            FlexCAN_GetTimeSegments(pBase, bitrate);
    dc64:	9900      	ldr	r1, [sp, #0]
    dc66:	9803      	ldr	r0, [sp, #12]
    dc68:	f7fd ff9c 	bl	bba4 <FlexCAN_GetTimeSegments>
        }
    }
    return enhCbt;
    dc6c:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    dc70:	4618      	mov	r0, r3
    dc72:	b005      	add	sp, #20
    dc74:	f85d fb04 	ldr.w	pc, [sp], #4
    dc78:	000184e4 	.word	0x000184e4

0000dc7c <FlexCAN_Ip_ClearTDCFail>:
 * Description   : This function clear the TDC Fail flag.
 *
 *END**************************************************************************/
/* implements   FlexCAN_Ip_ClearTDCFail_Activity */
void FlexCAN_Ip_ClearTDCFail(uint8 u8Instance)
{
    dc7c:	b500      	push	{lr}
    dc7e:	b085      	sub	sp, #20
    dc80:	4603      	mov	r3, r0
    dc82:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    dc86:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dc8a:	4a0a      	ldr	r2, [pc, #40]	; (dcb4 <FlexCAN_Ip_ClearTDCFail+0x38>)
    dc8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc90:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    dc92:	f006 faa1 	bl	141d8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
        pBase->ETDC |=  FLEXCAN_ETDC_ETDCFAIL_MASK;
    }
    else
#endif
    {
        pBase->FDCTRL |= FLEXCAN_FDCTRL_TDCFAIL_MASK;
    dc96:	9b03      	ldr	r3, [sp, #12]
    dc98:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    dc9c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    dca0:	9b03      	ldr	r3, [sp, #12]
    dca2:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    dca6:	f006 fac3 	bl	14230 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
}
    dcaa:	bf00      	nop
    dcac:	b005      	add	sp, #20
    dcae:	f85d fb04 	ldr.w	pc, [sp], #4
    dcb2:	bf00      	nop
    dcb4:	000184e4 	.word	0x000184e4

0000dcb8 <FlexCAN_Ip_GetTDCFail>:
 *
 *END**************************************************************************/

/* implements    FlexCAN_Ip_GetTDCFail_Activity */
boolean FlexCAN_Ip_GetTDCFail(uint8 u8Instance)
{
    dcb8:	b084      	sub	sp, #16
    dcba:	4603      	mov	r3, r0
    dcbc:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean value=FALSE;
    dcc0:	2300      	movs	r3, #0
    dcc2:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    dcc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dcca:	4a0a      	ldr	r2, [pc, #40]	; (dcf4 <FlexCAN_Ip_GetTDCFail+0x3c>)
    dccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcd0:	9302      	str	r3, [sp, #8]
        value = ((pBase->ETDC & FLEXCAN_ETDC_ETDCFAIL_MASK) == FLEXCAN_ETDC_ETDCFAIL_MASK) ? TRUE : FALSE;
    }
    else
#endif
    {
        value = ((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCFAIL_MASK) == FLEXCAN_FDCTRL_TDCFAIL_MASK) ? TRUE : FALSE;
    dcd2:	9b02      	ldr	r3, [sp, #8]
    dcd4:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    dcd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    dcdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    dce0:	bf0c      	ite	eq
    dce2:	2301      	moveq	r3, #1
    dce4:	2300      	movne	r3, #0
    dce6:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    dcea:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    dcee:	4618      	mov	r0, r3
    dcf0:	b004      	add	sp, #16
    dcf2:	4770      	bx	lr
    dcf4:	000184e4 	.word	0x000184e4

0000dcf8 <FlexCAN_Ip_GetTDCValue>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_GetTDCValue_Activity */
uint8 FlexCAN_Ip_GetTDCValue(uint8 u8Instance)
{
    dcf8:	b084      	sub	sp, #16
    dcfa:	4603      	mov	r3, r0
    dcfc:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 value = 0;
    dd00:	2300      	movs	r3, #0
    dd02:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    dd06:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dd0a:	4a08      	ldr	r2, [pc, #32]	; (dd2c <FlexCAN_Ip_GetTDCValue+0x34>)
    dd0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd10:	9302      	str	r3, [sp, #8]
        value = (uint8)((pBase->ETDC& FLEXCAN_ETDC_ETDCVAL_MASK) >> FLEXCAN_ETDC_ETDCVAL_SHIFT);
    }
    else
#endif
    {
        value = (uint8)((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCVAL_MASK) >> FLEXCAN_FDCTRL_TDCVAL_SHIFT);
    dd12:	9b02      	ldr	r3, [sp, #8]
    dd14:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    dd18:	b2db      	uxtb	r3, r3
    dd1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    dd1e:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    dd22:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    dd26:	4618      	mov	r0, r3
    dd28:	b004      	add	sp, #16
    dd2a:	4770      	bx	lr
    dd2c:	000184e4 	.word	0x000184e4

0000dd30 <FlexCAN_Ip_SetBitrateCbt_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrateCbt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrateCbt_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean bitRateSwitch)
{
    dd30:	b500      	push	{lr}
    dd32:	b087      	sub	sp, #28
    dd34:	4603      	mov	r3, r0
    dd36:	9100      	str	r1, [sp, #0]
    dd38:	f88d 3007 	strb.w	r3, [sp, #7]
    dd3c:	4613      	mov	r3, r2
    dd3e:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    dd42:	2300      	movs	r3, #0
    dd44:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    dd46:	2300      	movs	r3, #0
    dd48:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dd4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dd4e:	4a1e      	ldr	r2, [pc, #120]	; (ddc8 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x98>)
    dd50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd54:	9303      	str	r3, [sp, #12]
    boolean fd_enable = FlexCAN_IsFDEnabled(pBase);
    dd56:	9803      	ldr	r0, [sp, #12]
    dd58:	f7fd ffaf 	bl	bcba <FlexCAN_IsFDEnabled>
    dd5c:	4603      	mov	r3, r0
    dd5e:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    dd62:	9b03      	ldr	r3, [sp, #12]
    dd64:	681b      	ldr	r3, [r3, #0]
    dd66:	0fdb      	lsrs	r3, r3, #31
    dd68:	f88d 300a 	strb.w	r3, [sp, #10]

    if (TRUE == disabled)
    dd6c:	f89d 300a 	ldrb.w	r3, [sp, #10]
    dd70:	2b00      	cmp	r3, #0
    dd72:	d003      	beq.n	dd7c <FlexCAN_Ip_SetBitrateCbt_Privileged+0x4c>
    {
        result = FlexCAN_Enable(pBase);
    dd74:	9803      	ldr	r0, [sp, #12]
    dd76:	f000 fdf7 	bl	e968 <FlexCAN_Enable>
    dd7a:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    dd7c:	9b05      	ldr	r3, [sp, #20]
    dd7e:	2b00      	cmp	r3, #0
    dd80:	d10f      	bne.n	dda2 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x72>
    {
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_ON)
        boolean enhCbt = FlexCAN_IsEnhCbtEnabled(pBase);
#endif
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    dd82:	f006 fc15 	bl	145b0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
        FlexCAN_SetFDEnabled(pBase, fd_enable, bitRateSwitch);
    dd86:	f89d 2006 	ldrb.w	r2, [sp, #6]
    dd8a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dd8e:	4619      	mov	r1, r3
    dd90:	9803      	ldr	r0, [sp, #12]
    dd92:	f7fd fdd1 	bl	b938 <FlexCAN_SetFDEnabled>
        }
        else
#endif
        {
            /* Set time segments*/
            FlexCAN_SetFDTimeSegments(pBase, bitrate);
    dd96:	9900      	ldr	r1, [sp, #0]
    dd98:	9803      	ldr	r0, [sp, #12]
    dd9a:	f7fd fe4c 	bl	ba36 <FlexCAN_SetFDTimeSegments>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    dd9e:	f006 fc33 	bl	14608 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
    }

    if (TRUE == disabled)
    dda2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    dda6:	2b00      	cmp	r3, #0
    dda8:	d008      	beq.n	ddbc <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    ddaa:	9803      	ldr	r0, [sp, #12]
    ddac:	f000 fe5a 	bl	ea64 <FlexCAN_Disable>
    ddb0:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    ddb2:	9b04      	ldr	r3, [sp, #16]
    ddb4:	2b00      	cmp	r3, #0
    ddb6:	d001      	beq.n	ddbc <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
        {
            result = status;
    ddb8:	9b04      	ldr	r3, [sp, #16]
    ddba:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    ddbc:	9b05      	ldr	r3, [sp, #20]
}
    ddbe:	4618      	mov	r0, r3
    ddc0:	b007      	add	sp, #28
    ddc2:	f85d fb04 	ldr.w	pc, [sp], #4
    ddc6:	bf00      	nop
    ddc8:	000184e4 	.word	0x000184e4

0000ddcc <FlexCAN_Ip_GetBitrateFD>:
 * of FD frames.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBitrateFD_Activity */
boolean FlexCAN_Ip_GetBitrateFD(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    ddcc:	b500      	push	{lr}
    ddce:	b085      	sub	sp, #20
    ddd0:	4603      	mov	r3, r0
    ddd2:	9100      	str	r1, [sp, #0]
    ddd4:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    ddd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dddc:	4a08      	ldr	r2, [pc, #32]	; (de00 <FlexCAN_Ip_GetBitrateFD+0x34>)
    ddde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dde2:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    dde4:	2300      	movs	r3, #0
    dde6:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    else
#endif
    {
        /* Get the time segments*/
        FlexCAN_GetFDTimeSegments(pBase, bitrate);
    ddea:	9900      	ldr	r1, [sp, #0]
    ddec:	9803      	ldr	r0, [sp, #12]
    ddee:	f7fd ff00 	bl	bbf2 <FlexCAN_GetFDTimeSegments>
    }
    return enhCbt;
    ddf2:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    ddf6:	4618      	mov	r0, r3
    ddf8:	b005      	add	sp, #20
    ddfa:	f85d fb04 	ldr.w	pc, [sp], #4
    ddfe:	bf00      	nop
    de00:	000184e4 	.word	0x000184e4

0000de04 <FlexCAN_Ip_SetTDCOffset_Privileged>:
 * the Transceiver Delay Compensation Offset.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTDCOffset_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTDCOffset_Privileged(uint8 instance, boolean enable, uint8 offset)
{
    de04:	b500      	push	{lr}
    de06:	b087      	sub	sp, #28
    de08:	4603      	mov	r3, r0
    de0a:	f88d 3007 	strb.w	r3, [sp, #7]
    de0e:	460b      	mov	r3, r1
    de10:	f88d 3006 	strb.w	r3, [sp, #6]
    de14:	4613      	mov	r3, r2
    de16:	f88d 3005 	strb.w	r3, [sp, #5]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    de1a:	2300      	movs	r3, #0
    de1c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    de1e:	2300      	movs	r3, #0
    de20:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    de22:	f89d 3007 	ldrb.w	r3, [sp, #7]
    de26:	4a20      	ldr	r2, [pc, #128]	; (dea8 <FlexCAN_Ip_SetTDCOffset_Privileged+0xa4>)
    de28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de2c:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    de2e:	9803      	ldr	r0, [sp, #12]
    de30:	f7fd fd78 	bl	b924 <FlexCAN_IsEnabled>
    de34:	4603      	mov	r3, r0
    de36:	2b00      	cmp	r3, #0
    de38:	bf14      	ite	ne
    de3a:	2301      	movne	r3, #1
    de3c:	2300      	moveq	r3, #0
    de3e:	b2db      	uxtb	r3, r3
    de40:	f083 0301 	eor.w	r3, r3, #1
    de44:	b2db      	uxtb	r3, r3
    de46:	f88d 300b 	strb.w	r3, [sp, #11]
    de4a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    de4e:	f003 0301 	and.w	r3, r3, #1
    de52:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    de56:	f89d 300b 	ldrb.w	r3, [sp, #11]
    de5a:	2b00      	cmp	r3, #0
    de5c:	d003      	beq.n	de66 <FlexCAN_Ip_SetTDCOffset_Privileged+0x62>
    {
        result = FlexCAN_Enable(pBase);
    de5e:	9803      	ldr	r0, [sp, #12]
    de60:	f000 fd82 	bl	e968 <FlexCAN_Enable>
    de64:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    de66:	9b05      	ldr	r3, [sp, #20]
    de68:	2b00      	cmp	r3, #0
    de6a:	d10b      	bne.n	de84 <FlexCAN_Ip_SetTDCOffset_Privileged+0x80>
    {
        /* Check if enhaced CBT is Enabled */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    de6c:	f006 fbf2 	bl	14654 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        }
        else
#endif
        {
            /* Enable/Disable TDC and set the TDC Offset */
            FlexCAN_SetTDCOffset(pBase, enable, offset);
    de70:	f89d 2005 	ldrb.w	r2, [sp, #5]
    de74:	f89d 3006 	ldrb.w	r3, [sp, #6]
    de78:	4619      	mov	r1, r3
    de7a:	9803      	ldr	r0, [sp, #12]
    de7c:	f7fd fd2b 	bl	b8d6 <FlexCAN_SetTDCOffset>
        }
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    de80:	f006 fc14 	bl	146ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        /* Check if enhaced CBT is Enabled */
    }

    if (TRUE == disabled)
    de84:	f89d 300b 	ldrb.w	r3, [sp, #11]
    de88:	2b00      	cmp	r3, #0
    de8a:	d008      	beq.n	de9e <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
    {
        status = FlexCAN_Disable(pBase);
    de8c:	9803      	ldr	r0, [sp, #12]
    de8e:	f000 fde9 	bl	ea64 <FlexCAN_Disable>
    de92:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    de94:	9b04      	ldr	r3, [sp, #16]
    de96:	2b00      	cmp	r3, #0
    de98:	d001      	beq.n	de9e <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
        {
            result = status;
    de9a:	9b04      	ldr	r3, [sp, #16]
    de9c:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    de9e:	9b05      	ldr	r3, [sp, #20]
}
    dea0:	4618      	mov	r0, r3
    dea2:	b007      	add	sp, #28
    dea4:	f85d fb04 	ldr.w	pc, [sp], #4
    dea8:	000184e4 	.word	0x000184e4

0000deac <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>:
 * be delayed from the first bit of CRC field on CAN bus.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTxArbitrationStartDelay_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged(uint8 instance,  uint8 value)
{
    deac:	b500      	push	{lr}
    deae:	b087      	sub	sp, #28
    deb0:	4603      	mov	r3, r0
    deb2:	460a      	mov	r2, r1
    deb4:	f88d 3007 	strb.w	r3, [sp, #7]
    deb8:	4613      	mov	r3, r2
    deba:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    debe:	2300      	movs	r3, #0
    dec0:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    dec2:	2300      	movs	r3, #0
    dec4:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dec6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    deca:	4a1f      	ldr	r2, [pc, #124]	; (df48 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x9c>)
    decc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ded0:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    ded2:	9803      	ldr	r0, [sp, #12]
    ded4:	f7fd fd26 	bl	b924 <FlexCAN_IsEnabled>
    ded8:	4603      	mov	r3, r0
    deda:	2b00      	cmp	r3, #0
    dedc:	bf14      	ite	ne
    dede:	2301      	movne	r3, #1
    dee0:	2300      	moveq	r3, #0
    dee2:	b2db      	uxtb	r3, r3
    dee4:	f083 0301 	eor.w	r3, r3, #1
    dee8:	b2db      	uxtb	r3, r3
    deea:	f88d 300b 	strb.w	r3, [sp, #11]
    deee:	f89d 300b 	ldrb.w	r3, [sp, #11]
    def2:	f003 0301 	and.w	r3, r3, #1
    def6:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    defa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    defe:	2b00      	cmp	r3, #0
    df00:	d003      	beq.n	df0a <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    df02:	9803      	ldr	r0, [sp, #12]
    df04:	f000 fd30 	bl	e968 <FlexCAN_Enable>
    df08:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    df0a:	9b05      	ldr	r3, [sp, #20]
    df0c:	2b00      	cmp	r3, #0
    df0e:	d109      	bne.n	df24 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    df10:	f006 fbf2 	bl	146f8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
        FlexCAN_SetTxArbitrationStartDelay(pBase, value);
    df14:	f89d 3006 	ldrb.w	r3, [sp, #6]
    df18:	4619      	mov	r1, r3
    df1a:	9803      	ldr	r0, [sp, #12]
    df1c:	f7fd ff43 	bl	bda6 <FlexCAN_SetTxArbitrationStartDelay>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    df20:	f006 fc16 	bl	14750 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
    }

    if (TRUE == disabled)
    df24:	f89d 300b 	ldrb.w	r3, [sp, #11]
    df28:	2b00      	cmp	r3, #0
    df2a:	d008      	beq.n	df3e <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    df2c:	9803      	ldr	r0, [sp, #12]
    df2e:	f000 fd99 	bl	ea64 <FlexCAN_Disable>
    df32:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    df34:	9b04      	ldr	r3, [sp, #16]
    df36:	2b00      	cmp	r3, #0
    df38:	d001      	beq.n	df3e <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
        {
            result = status;
    df3a:	9b04      	ldr	r3, [sp, #16]
    df3c:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    df3e:	9b05      	ldr	r3, [sp, #20]
}
    df40:	4618      	mov	r0, r3
    df42:	b007      	add	sp, #28
    df44:	f85d fb04 	ldr.w	pc, [sp], #4
    df48:	000184e4 	.word	0x000184e4

0000df4c <FlexCAN_Ip_GetBuffStatusFlag>:
 * In case of a complete operation this flag is set.
 * In case msgBuff is 255 will return Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBuffStatusFlag_Activity */
boolean FlexCAN_Ip_GetBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    df4c:	b500      	push	{lr}
    df4e:	b085      	sub	sp, #20
    df50:	4603      	mov	r3, r0
    df52:	460a      	mov	r2, r1
    df54:	f88d 3007 	strb.w	r3, [sp, #7]
    df58:	4613      	mov	r3, r2
    df5a:	f88d 3006 	strb.w	r3, [sp, #6]
    boolean returnResult;
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    df5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    df62:	4a0b      	ldr	r2, [pc, #44]	; (df90 <FlexCAN_Ip_GetBuffStatusFlag+0x44>)
    df64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df68:	9303      	str	r3, [sp, #12]
        returnResult = ((1U == FlexCAN_GetEnhancedRxFIFOStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW)) ? TRUE : FALSE);
    }
    else
#endif
    {
        returnResult = ((1U == FlexCAN_GetBuffStatusFlag(pBase, msgBuffIdx)) ? TRUE : FALSE);
    df6a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    df6e:	4619      	mov	r1, r3
    df70:	9803      	ldr	r0, [sp, #12]
    df72:	f7fd fd44 	bl	b9fe <FlexCAN_GetBuffStatusFlag>
    df76:	4603      	mov	r3, r0
    df78:	2b01      	cmp	r3, #1
    df7a:	bf0c      	ite	eq
    df7c:	2301      	moveq	r3, #1
    df7e:	2300      	movne	r3, #0
    df80:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    return returnResult;
    df84:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    df88:	4618      	mov	r0, r3
    df8a:	b005      	add	sp, #20
    df8c:	f85d fb04 	ldr.w	pc, [sp], #4
    df90:	000184e4 	.word	0x000184e4

0000df94 <FlexCAN_Ip_ClearBuffStatusFlag>:
 * Description   : Clear FlexCAN Message Buffer Status Flag.
 * In case msgBuff is 255 will clear Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearBuffStatusFlag_Activity */
void FlexCAN_Ip_ClearBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    df94:	b500      	push	{lr}
    df96:	b085      	sub	sp, #20
    df98:	4603      	mov	r3, r0
    df9a:	460a      	mov	r2, r1
    df9c:	f88d 3007 	strb.w	r3, [sp, #7]
    dfa0:	4613      	mov	r3, r2
    dfa2:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    dfa6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dfaa:	4a07      	ldr	r2, [pc, #28]	; (dfc8 <FlexCAN_Ip_ClearBuffStatusFlag+0x34>)
    dfac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfb0:	9303      	str	r3, [sp, #12]
        FlexCAN_ClearEnhancedRxFifoIntStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
    }
    else
#endif
    {
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, msgBuffIdx);
    dfb2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dfb6:	4619      	mov	r1, r3
    dfb8:	9803      	ldr	r0, [sp, #12]
    dfba:	f7fd fd0d 	bl	b9d8 <FlexCAN_ClearMsgBuffIntStatusFlag>
    }
}
    dfbe:	bf00      	nop
    dfc0:	b005      	add	sp, #20
    dfc2:	f85d fb04 	ldr.w	pc, [sp], #4
    dfc6:	bf00      	nop
    dfc8:	000184e4 	.word	0x000184e4

0000dfcc <FlexCAN_Ip_EnableInterrupts_Privileged>:
 * Description   : Enable all mb interrupts configured.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnableInterrupts_Privileged(uint8 u8Instance)
{
    dfcc:	b500      	push	{lr}
    dfce:	b087      	sub	sp, #28
    dfd0:	4603      	mov	r3, r0
    dfd2:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    dfd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dfda:	4a11      	ldr	r2, [pc, #68]	; (e020 <FlexCAN_Ip_EnableInterrupts_Privileged+0x54>)
    dfdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfe0:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    dfe2:	2301      	movs	r3, #1
    dfe4:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    dfe6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dfea:	4a0e      	ldr	r2, [pc, #56]	; (e024 <FlexCAN_Ip_EnableInterrupts_Privileged+0x58>)
    dfec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dff0:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    dff2:	9804      	ldr	r0, [sp, #16]
    dff4:	f7fd fc96 	bl	b924 <FlexCAN_IsEnabled>
    dff8:	4603      	mov	r3, r0
    dffa:	2b00      	cmp	r3, #0
    dffc:	d00b      	beq.n	e016 <FlexCAN_Ip_EnableInterrupts_Privileged+0x4a>
    {
        FlexCAN_EnableInterrupts(pBase, u8Instance);
    dffe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e002:	4619      	mov	r1, r3
    e004:	9804      	ldr	r0, [sp, #16]
    e006:	f000 ffe1 	bl	efcc <FlexCAN_EnableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, TRUE);
            }
        }
    #endif
        state->isIntActive = TRUE;
    e00a:	9b03      	ldr	r3, [sp, #12]
    e00c:	2201      	movs	r2, #1
    e00e:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    e012:	2300      	movs	r3, #0
    e014:	9305      	str	r3, [sp, #20]
    }

    return result;
    e016:	9b05      	ldr	r3, [sp, #20]
}
    e018:	4618      	mov	r0, r3
    e01a:	b007      	add	sp, #28
    e01c:	f85d fb04 	ldr.w	pc, [sp], #4
    e020:	000184e4 	.word	0x000184e4
    e024:	1fff935c 	.word	0x1fff935c

0000e028 <FlexCAN_Ip_DisableInterrupts_Privileged>:
 * Description   : Enable all interrupts configured.
 *
 *END**************************************************************************/
 /* implements FlexCAN_Ip_DisableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_DisableInterrupts_Privileged(uint8 u8Instance)
{
    e028:	b500      	push	{lr}
    e02a:	b087      	sub	sp, #28
    e02c:	4603      	mov	r3, r0
    e02e:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    e032:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e036:	4a10      	ldr	r2, [pc, #64]	; (e078 <FlexCAN_Ip_DisableInterrupts_Privileged+0x50>)
    e038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e03c:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    e03e:	2301      	movs	r3, #1
    e040:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    e042:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e046:	4a0d      	ldr	r2, [pc, #52]	; (e07c <FlexCAN_Ip_DisableInterrupts_Privileged+0x54>)
    e048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e04c:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    e04e:	9804      	ldr	r0, [sp, #16]
    e050:	f7fd fc68 	bl	b924 <FlexCAN_IsEnabled>
    e054:	4603      	mov	r3, r0
    e056:	2b00      	cmp	r3, #0
    e058:	d008      	beq.n	e06c <FlexCAN_Ip_DisableInterrupts_Privileged+0x44>
    {
        FlexCAN_DisableInterrupts(pBase);
    e05a:	9804      	ldr	r0, [sp, #16]
    e05c:	f000 ffae 	bl	efbc <FlexCAN_DisableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, FALSE);
            }
        }
#endif
        state->isIntActive = FALSE;
    e060:	9b03      	ldr	r3, [sp, #12]
    e062:	2200      	movs	r2, #0
    e064:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    e068:	2300      	movs	r3, #0
    e06a:	9305      	str	r3, [sp, #20]
    }

    return result;
    e06c:	9b05      	ldr	r3, [sp, #20]
}
    e06e:	4618      	mov	r0, r3
    e070:	b007      	add	sp, #28
    e072:	f85d fb04 	ldr.w	pc, [sp], #4
    e076:	bf00      	nop
    e078:	000184e4 	.word	0x000184e4
    e07c:	1fff935c 	.word	0x1fff935c

0000e080 <FlexCAN_Ip_SetErrorInt_Privileged>:
 * Description   : Enable\Disable Error or BusOff Interrupt
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetErrorInt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetErrorInt_Privileged(uint8 u8Instance, Flexcan_Ip_ErrorIntType type, boolean enable)
{
    e080:	b500      	push	{lr}
    e082:	b087      	sub	sp, #28
    e084:	4603      	mov	r3, r0
    e086:	9100      	str	r1, [sp, #0]
    e088:	f88d 3007 	strb.w	r3, [sp, #7]
    e08c:	4613      	mov	r3, r2
    e08e:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e092:	2300      	movs	r3, #0
    e094:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    e096:	2300      	movs	r3, #0
    e098:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    e09a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e09e:	4a3a      	ldr	r2, [pc, #232]	; (e188 <FlexCAN_Ip_SetErrorInt_Privileged+0x108>)
    e0a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0a4:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    e0a6:	9803      	ldr	r0, [sp, #12]
    e0a8:	f7fd fc3c 	bl	b924 <FlexCAN_IsEnabled>
    e0ac:	4603      	mov	r3, r0
    e0ae:	2b00      	cmp	r3, #0
    e0b0:	bf14      	ite	ne
    e0b2:	2301      	movne	r3, #1
    e0b4:	2300      	moveq	r3, #0
    e0b6:	b2db      	uxtb	r3, r3
    e0b8:	f083 0301 	eor.w	r3, r3, #1
    e0bc:	b2db      	uxtb	r3, r3
    e0be:	f88d 300b 	strb.w	r3, [sp, #11]
    e0c2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e0c6:	f003 0301 	and.w	r3, r3, #1
    e0ca:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    e0ce:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e0d2:	2b00      	cmp	r3, #0
    e0d4:	d003      	beq.n	e0de <FlexCAN_Ip_SetErrorInt_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    e0d6:	9803      	ldr	r0, [sp, #12]
    e0d8:	f000 fc46 	bl	e968 <FlexCAN_Enable>
    e0dc:	9005      	str	r0, [sp, #20]
    }

    if (FLEXCAN_STATUS_SUCCESS == result)
    e0de:	9b05      	ldr	r3, [sp, #20]
    e0e0:	2b00      	cmp	r3, #0
    e0e2:	d13c      	bne.n	e15e <FlexCAN_Ip_SetErrorInt_Privileged+0xde>
    e0e4:	9b00      	ldr	r3, [sp, #0]
    e0e6:	2b04      	cmp	r3, #4
    e0e8:	d83b      	bhi.n	e162 <FlexCAN_Ip_SetErrorInt_Privileged+0xe2>
    e0ea:	a201      	add	r2, pc, #4	; (adr r2, e0f0 <FlexCAN_Ip_SetErrorInt_Privileged+0x70>)
    e0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e0f0:	0000e13b 	.word	0x0000e13b
    e0f4:	0000e14d 	.word	0x0000e14d
    e0f8:	0000e117 	.word	0x0000e117
    e0fc:	0000e129 	.word	0x0000e129
    e100:	0000e105 	.word	0x0000e105
    {
        switch (type)
        {
            case FLEXCAN_IP_INT_BUSOFF:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_BUSOFF, enable);
    e104:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e108:	461a      	mov	r2, r3
    e10a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    e10e:	9803      	ldr	r0, [sp, #12]
    e110:	f000 fce8 	bl	eae4 <FlexCAN_SetErrIntCmd>
                break;
    e114:	e026      	b.n	e164 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR, enable);
    e116:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e11a:	461a      	mov	r2, r3
    e11c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    e120:	9803      	ldr	r0, [sp, #12]
    e122:	f000 fcdf 	bl	eae4 <FlexCAN_SetErrIntCmd>
                break;
    e126:	e01d      	b.n	e164 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR_FAST :
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR_FAST, enable);
    e128:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e12c:	461a      	mov	r2, r3
    e12e:	f244 0101 	movw	r1, #16385	; 0x4001
    e132:	9803      	ldr	r0, [sp, #12]
    e134:	f000 fcd6 	bl	eae4 <FlexCAN_SetErrIntCmd>
                break;
    e138:	e014      	b.n	e164 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_RX_WARNING, enable);
    e13a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e13e:	461a      	mov	r2, r3
    e140:	f44f 6180 	mov.w	r1, #1024	; 0x400
    e144:	9803      	ldr	r0, [sp, #12]
    e146:	f000 fccd 	bl	eae4 <FlexCAN_SetErrIntCmd>
                }
                break;
    e14a:	e00b      	b.n	e164 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_TX_WARNING, enable);
    e14c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e150:	461a      	mov	r2, r3
    e152:	f44f 6100 	mov.w	r1, #2048	; 0x800
    e156:	9803      	ldr	r0, [sp, #12]
    e158:	f000 fcc4 	bl	eae4 <FlexCAN_SetErrIntCmd>
                }
                break;
    e15c:	e002      	b.n	e164 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    /* Should not get here */
                #endif
                break;
            }
        }
    }
    e15e:	bf00      	nop
    e160:	e000      	b.n	e164 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                break;
    e162:	bf00      	nop

    if (TRUE == disabled)
    e164:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e168:	2b00      	cmp	r3, #0
    e16a:	d008      	beq.n	e17e <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
    {
        status = FlexCAN_Disable(pBase);
    e16c:	9803      	ldr	r0, [sp, #12]
    e16e:	f000 fc79 	bl	ea64 <FlexCAN_Disable>
    e172:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    e174:	9b04      	ldr	r3, [sp, #16]
    e176:	2b00      	cmp	r3, #0
    e178:	d001      	beq.n	e17e <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
        {
            result = status;
    e17a:	9b04      	ldr	r3, [sp, #16]
    e17c:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    e17e:	9b05      	ldr	r3, [sp, #20]
}
    e180:	4618      	mov	r0, r3
    e182:	b007      	add	sp, #28
    e184:	f85d fb04 	ldr.w	pc, [sp], #4
    e188:	000184e4 	.word	0x000184e4

0000e18c <FlexCAN_Ip_AbortTransfer>:
 * receiver.
 *
 *END**************************************************************************/
/* implements    FlexCAN_Ip_AbortTransfer_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_AbortTransfer(uint8 u8Instance, uint8 mb_idx)
{
    e18c:	b500      	push	{lr}
    e18e:	b087      	sub	sp, #28
    e190:	4603      	mov	r3, r0
    e192:	460a      	mov	r2, r1
    e194:	f88d 3007 	strb.w	r3, [sp, #7]
    e198:	4613      	mov	r3, r2
    e19a:	f88d 3006 	strb.w	r3, [sp, #6]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
        DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
    #endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    e19e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e1a2:	4a27      	ldr	r2, [pc, #156]	; (e240 <FlexCAN_Ip_AbortTransfer+0xb4>)
    e1a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1a8:	9304      	str	r3, [sp, #16]
#if ((FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON))
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
#else
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    e1aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e1ae:	4a25      	ldr	r2, [pc, #148]	; (e244 <FlexCAN_Ip_AbortTransfer+0xb8>)
    e1b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1b4:	9303      	str	r3, [sp, #12]
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON) */
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e1b6:	2300      	movs	r3, #0
    e1b8:	9305      	str	r3, [sp, #20]

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    e1ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e1be:	2b1f      	cmp	r3, #31
    e1c0:	d838      	bhi.n	e234 <FlexCAN_Ip_AbortTransfer+0xa8>
    {

    if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    e1c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e1c6:	9a03      	ldr	r2, [sp, #12]
    e1c8:	011b      	lsls	r3, r3, #4
    e1ca:	4413      	add	r3, r2
    e1cc:	3304      	adds	r3, #4
    e1ce:	681b      	ldr	r3, [r3, #0]
    e1d0:	2b00      	cmp	r3, #0
    e1d2:	d102      	bne.n	e1da <FlexCAN_Ip_AbortTransfer+0x4e>
    {
        result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    e1d4:	2305      	movs	r3, #5
    e1d6:	9305      	str	r3, [sp, #20]
    e1d8:	e02c      	b.n	e234 <FlexCAN_Ip_AbortTransfer+0xa8>
    }
    else
    {
        FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, mb_idx, state->isIntActive);
    e1da:	f89d 2006 	ldrb.w	r2, [sp, #6]
    e1de:	9b03      	ldr	r3, [sp, #12]
    e1e0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    e1e4:	f89d 1007 	ldrb.w	r1, [sp, #7]
    e1e8:	9804      	ldr	r0, [sp, #16]
    e1ea:	f000 feb3 	bl	ef54 <FLEXCAN_ClearMsgBuffIntCmd>
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    e1ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e1f2:	9a03      	ldr	r2, [sp, #12]
    e1f4:	011b      	lsls	r3, r3, #4
    e1f6:	4413      	add	r3, r2
    e1f8:	3304      	adds	r3, #4
    e1fa:	681b      	ldr	r3, [r3, #0]
    e1fc:	2b02      	cmp	r3, #2
    e1fe:	d108      	bne.n	e212 <FlexCAN_Ip_AbortTransfer+0x86>
        {
            result = FlexCAN_AbortTxTransfer(u8Instance, mb_idx);
    e200:	f89d 2006 	ldrb.w	r2, [sp, #6]
    e204:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e208:	4611      	mov	r1, r2
    e20a:	4618      	mov	r0, r3
    e20c:	f7fe fabc 	bl	c788 <FlexCAN_AbortTxTransfer>
    e210:	9005      	str	r0, [sp, #20]
        }

        if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    e212:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e216:	9a03      	ldr	r2, [sp, #12]
    e218:	011b      	lsls	r3, r3, #4
    e21a:	4413      	add	r3, r2
    e21c:	3304      	adds	r3, #4
    e21e:	681b      	ldr	r3, [r3, #0]
    e220:	2b01      	cmp	r3, #1
    e222:	d107      	bne.n	e234 <FlexCAN_Ip_AbortTransfer+0xa8>
        {
            FlexCAN_AbortRxTransfer(u8Instance, mb_idx);
    e224:	f89d 2006 	ldrb.w	r2, [sp, #6]
    e228:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e22c:	4611      	mov	r1, r2
    e22e:	4618      	mov	r0, r3
    e230:	f7fe fb34 	bl	c89c <FlexCAN_AbortRxTransfer>
        }
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
#endif /* if FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return result;
    e234:	9b05      	ldr	r3, [sp, #20]
}
    e236:	4618      	mov	r0, r3
    e238:	b007      	add	sp, #28
    e23a:	f85d fb04 	ldr.w	pc, [sp], #4
    e23e:	bf00      	nop
    e240:	000184e4 	.word	0x000184e4
    e244:	1fff935c 	.word	0x1fff935c

0000e248 <FlexCAN_Ip_SetRxMb14Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb14Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb14Mask_Privileged(uint8 instance, uint32 mask)
{
    e248:	b500      	push	{lr}
    e24a:	b087      	sub	sp, #28
    e24c:	4603      	mov	r3, r0
    e24e:	9100      	str	r1, [sp, #0]
    e250:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e254:	2300      	movs	r3, #0
    e256:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    e258:	2300      	movs	r3, #0
    e25a:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    e25c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e260:	4a1b      	ldr	r2, [pc, #108]	; (e2d0 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x88>)
    e262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e266:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    e268:	9803      	ldr	r0, [sp, #12]
    e26a:	f7fd fb5b 	bl	b924 <FlexCAN_IsEnabled>
    e26e:	4603      	mov	r3, r0
    e270:	2b00      	cmp	r3, #0
    e272:	bf14      	ite	ne
    e274:	2301      	movne	r3, #1
    e276:	2300      	moveq	r3, #0
    e278:	b2db      	uxtb	r3, r3
    e27a:	f083 0301 	eor.w	r3, r3, #1
    e27e:	b2db      	uxtb	r3, r3
    e280:	f88d 300b 	strb.w	r3, [sp, #11]
    e284:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e288:	f003 0301 	and.w	r3, r3, #1
    e28c:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    e290:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e294:	2b00      	cmp	r3, #0
    e296:	d003      	beq.n	e2a0 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    e298:	9803      	ldr	r0, [sp, #12]
    e29a:	f000 fb65 	bl	e968 <FlexCAN_Enable>
    e29e:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    e2a0:	9b05      	ldr	r3, [sp, #20]
    e2a2:	2b00      	cmp	r3, #0
    e2a4:	d102      	bne.n	e2ac <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x64>
    {
        pBase->RX14MASK = mask;
    e2a6:	9b03      	ldr	r3, [sp, #12]
    e2a8:	9a00      	ldr	r2, [sp, #0]
    e2aa:	615a      	str	r2, [r3, #20]
    }
    if (TRUE == disabled)
    e2ac:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e2b0:	2b00      	cmp	r3, #0
    e2b2:	d008      	beq.n	e2c6 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    e2b4:	9803      	ldr	r0, [sp, #12]
    e2b6:	f000 fbd5 	bl	ea64 <FlexCAN_Disable>
    e2ba:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    e2bc:	9b04      	ldr	r3, [sp, #16]
    e2be:	2b00      	cmp	r3, #0
    e2c0:	d001      	beq.n	e2c6 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
        {
            result = status;
    e2c2:	9b04      	ldr	r3, [sp, #16]
    e2c4:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    e2c6:	9b05      	ldr	r3, [sp, #20]
}
    e2c8:	4618      	mov	r0, r3
    e2ca:	b007      	add	sp, #28
    e2cc:	f85d fb04 	ldr.w	pc, [sp], #4
    e2d0:	000184e4 	.word	0x000184e4

0000e2d4 <FlexCAN_Ip_SetRxMb15Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb15Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb15Mask_Privileged(uint8 instance, uint32 mask)
{
    e2d4:	b500      	push	{lr}
    e2d6:	b087      	sub	sp, #28
    e2d8:	4603      	mov	r3, r0
    e2da:	9100      	str	r1, [sp, #0]
    e2dc:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e2e0:	2300      	movs	r3, #0
    e2e2:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    e2e4:	2300      	movs	r3, #0
    e2e6:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    e2e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e2ec:	4a1b      	ldr	r2, [pc, #108]	; (e35c <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x88>)
    e2ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2f2:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    e2f4:	9803      	ldr	r0, [sp, #12]
    e2f6:	f7fd fb15 	bl	b924 <FlexCAN_IsEnabled>
    e2fa:	4603      	mov	r3, r0
    e2fc:	2b00      	cmp	r3, #0
    e2fe:	bf14      	ite	ne
    e300:	2301      	movne	r3, #1
    e302:	2300      	moveq	r3, #0
    e304:	b2db      	uxtb	r3, r3
    e306:	f083 0301 	eor.w	r3, r3, #1
    e30a:	b2db      	uxtb	r3, r3
    e30c:	f88d 300b 	strb.w	r3, [sp, #11]
    e310:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e314:	f003 0301 	and.w	r3, r3, #1
    e318:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    e31c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e320:	2b00      	cmp	r3, #0
    e322:	d003      	beq.n	e32c <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    e324:	9803      	ldr	r0, [sp, #12]
    e326:	f000 fb1f 	bl	e968 <FlexCAN_Enable>
    e32a:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    e32c:	9b05      	ldr	r3, [sp, #20]
    e32e:	2b00      	cmp	r3, #0
    e330:	d102      	bne.n	e338 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x64>
    {
        pBase->RX15MASK = mask;
    e332:	9b03      	ldr	r3, [sp, #12]
    e334:	9a00      	ldr	r2, [sp, #0]
    e336:	619a      	str	r2, [r3, #24]
    }

    if (TRUE == disabled)
    e338:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e33c:	2b00      	cmp	r3, #0
    e33e:	d008      	beq.n	e352 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    e340:	9803      	ldr	r0, [sp, #12]
    e342:	f000 fb8f 	bl	ea64 <FlexCAN_Disable>
    e346:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    e348:	9b04      	ldr	r3, [sp, #16]
    e34a:	2b00      	cmp	r3, #0
    e34c:	d001      	beq.n	e352 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
        {
            result = status;
    e34e:	9b04      	ldr	r3, [sp, #16]
    e350:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    e352:	9b05      	ldr	r3, [sp, #20]
}
    e354:	4618      	mov	r0, r3
    e356:	b007      	add	sp, #28
    e358:	f85d fb04 	ldr.w	pc, [sp], #4
    e35c:	000184e4 	.word	0x000184e4

0000e360 <FlexCAN_Ip_SetListenOnlyMode_Privileged>:
 * This function will enable or disable Listen Only mode.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_SetListenOnlyMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetListenOnlyMode_Privileged(uint8 instance, const boolean enable)
{
    e360:	b500      	push	{lr}
    e362:	b087      	sub	sp, #28
    e364:	4603      	mov	r3, r0
    e366:	460a      	mov	r2, r1
    e368:	f88d 3007 	strb.w	r3, [sp, #7]
    e36c:	4613      	mov	r3, r2
    e36e:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    e372:	2300      	movs	r3, #0
    e374:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    e376:	2300      	movs	r3, #0
    e378:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    e37a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e37e:	4a1f      	ldr	r2, [pc, #124]	; (e3fc <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x9c>)
    e380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e384:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    e386:	9803      	ldr	r0, [sp, #12]
    e388:	f7fd facc 	bl	b924 <FlexCAN_IsEnabled>
    e38c:	4603      	mov	r3, r0
    e38e:	2b00      	cmp	r3, #0
    e390:	bf14      	ite	ne
    e392:	2301      	movne	r3, #1
    e394:	2300      	moveq	r3, #0
    e396:	b2db      	uxtb	r3, r3
    e398:	f083 0301 	eor.w	r3, r3, #1
    e39c:	b2db      	uxtb	r3, r3
    e39e:	f88d 300b 	strb.w	r3, [sp, #11]
    e3a2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e3a6:	f003 0301 	and.w	r3, r3, #1
    e3aa:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    e3ae:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e3b2:	2b00      	cmp	r3, #0
    e3b4:	d003      	beq.n	e3be <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    e3b6:	9803      	ldr	r0, [sp, #12]
    e3b8:	f000 fad6 	bl	e968 <FlexCAN_Enable>
    e3bc:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    e3be:	9b05      	ldr	r3, [sp, #20]
    e3c0:	2b00      	cmp	r3, #0
    e3c2:	d109      	bne.n	e3d8 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    e3c4:	f005 ff5a 	bl	1427c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
        FlexCAN_SetListenOnlyMode(pBase, enable);
    e3c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e3cc:	4619      	mov	r1, r3
    e3ce:	9803      	ldr	r0, [sp, #12]
    e3d0:	f7fd fae5 	bl	b99e <FlexCAN_SetListenOnlyMode>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    e3d4:	f005 ff7e 	bl	142d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
    }

    if (TRUE == disabled)
    e3d8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e3dc:	2b00      	cmp	r3, #0
    e3de:	d008      	beq.n	e3f2 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    e3e0:	9803      	ldr	r0, [sp, #12]
    e3e2:	f000 fb3f 	bl	ea64 <FlexCAN_Disable>
    e3e6:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    e3e8:	9b04      	ldr	r3, [sp, #16]
    e3ea:	2b00      	cmp	r3, #0
    e3ec:	d001      	beq.n	e3f2 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
        {
            result = status;
    e3ee:	9b04      	ldr	r3, [sp, #16]
    e3f0:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    e3f2:	9b05      	ldr	r3, [sp, #20]
}
    e3f4:	4618      	mov	r0, r3
    e3f6:	b007      	add	sp, #28
    e3f8:	f85d fb04 	ldr.w	pc, [sp], #4
    e3fc:	000184e4 	.word	0x000184e4

0000e400 <FlexCAN_Ip_GetListenOnlyMode>:
 * Description   : Check if Listen Only mode is ENABLE.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_GetListenOnlyMode_Activity */
boolean FlexCAN_Ip_GetListenOnlyMode(uint8 instance)
{
    e400:	b500      	push	{lr}
    e402:	b085      	sub	sp, #20
    e404:	4603      	mov	r3, r0
    e406:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    e40a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e40e:	4a06      	ldr	r2, [pc, #24]	; (e428 <FlexCAN_Ip_GetListenOnlyMode+0x28>)
    e410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e414:	9303      	str	r3, [sp, #12]
    return FlexCAN_IsListenOnlyModeEnabled(base);
    e416:	9803      	ldr	r0, [sp, #12]
    e418:	f7fd fc5d 	bl	bcd6 <FlexCAN_IsListenOnlyModeEnabled>
    e41c:	4603      	mov	r3, r0
}
    e41e:	4618      	mov	r0, r3
    e420:	b005      	add	sp, #20
    e422:	f85d fb04 	ldr.w	pc, [sp], #4
    e426:	bf00      	nop
    e428:	000184e4 	.word	0x000184e4

0000e42c <FlexCAN_Ip_ManualBusOffRecovery>:
 * Description   : Recover manually from bus-off if possible.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_ManualBusOffRecovery_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ManualBusOffRecovery(uint8 Instance)
{
    e42c:	b500      	push	{lr}
    e42e:	b089      	sub	sp, #36	; 0x24
    e430:	4603      	mov	r3, r0
    e432:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * Base = Flexcan_Ip_apxBase[Instance];
    e436:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e43a:	4a27      	ldr	r2, [pc, #156]	; (e4d8 <FlexCAN_Ip_ManualBusOffRecovery+0xac>)
    e43c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e440:	9305      	str	r3, [sp, #20]
    uint32 timeStart = 0U;
    e442:	2300      	movs	r3, #0
    e444:	9303      	str	r3, [sp, #12]
    uint32 timeElapsed = 0U;
    e446:	2300      	movs	r3, #0
    e448:	9307      	str	r3, [sp, #28]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e44a:	2100      	movs	r1, #0
    e44c:	4823      	ldr	r0, [pc, #140]	; (e4dc <FlexCAN_Ip_ManualBusOffRecovery+0xb0>)
    e44e:	f7f3 fcfb 	bl	1e48 <OsIf_MicrosToTicks>
    e452:	9004      	str	r0, [sp, #16]
    Flexcan_Ip_StatusType RetVal = FLEXCAN_STATUS_ERROR;
    e454:	2301      	movs	r3, #1
    e456:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Recover from bus-off when Automatic recovering from Bus Off state disabled. */
    if ((Base->CTRL1 & FLEXCAN_CTRL1_BOFFREC_MASK) != 0U)
    e458:	9b05      	ldr	r3, [sp, #20]
    e45a:	685b      	ldr	r3, [r3, #4]
    e45c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e460:	2b00      	cmp	r3, #0
    e462:	d033      	beq.n	e4cc <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
    {
        RetVal = FLEXCAN_STATUS_SUCCESS;
    e464:	2300      	movs	r3, #0
    e466:	9306      	str	r3, [sp, #24]
        /* return success if the controller is not in bus-off */
        if ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    e468:	9b05      	ldr	r3, [sp, #20]
    e46a:	6a1b      	ldr	r3, [r3, #32]
    e46c:	f003 0320 	and.w	r3, r3, #32
    e470:	2b00      	cmp	r3, #0
    e472:	d02b      	beq.n	e4cc <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
        {
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    e474:	f006 fa36 	bl	148e4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* negate to recover from bus-off */
            Base->CTRL1 &= ~FLEXCAN_CTRL1_BOFFREC_MASK;
    e478:	9b05      	ldr	r3, [sp, #20]
    e47a:	685b      	ldr	r3, [r3, #4]
    e47c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    e480:	9b05      	ldr	r3, [sp, #20]
    e482:	605a      	str	r2, [r3, #4]
            /* re-assert to disable bus-off auto reocvery */
            Base->CTRL1 |= FLEXCAN_CTRL1_BOFFREC_MASK;
    e484:	9b05      	ldr	r3, [sp, #20]
    e486:	685b      	ldr	r3, [r3, #4]
    e488:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    e48c:	9b05      	ldr	r3, [sp, #20]
    e48e:	605a      	str	r2, [r3, #4]
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    e490:	f006 fa54 	bl	1493c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* Wait till exit bus-off */
            timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e494:	2000      	movs	r0, #0
    e496:	f7f3 fc8b 	bl	1db0 <OsIf_GetCounter>
    e49a:	4603      	mov	r3, r0
    e49c:	9303      	str	r3, [sp, #12]

            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    e49e:	e00f      	b.n	e4c0 <FlexCAN_Ip_ManualBusOffRecovery+0x94>
            {
                timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e4a0:	ab03      	add	r3, sp, #12
    e4a2:	2100      	movs	r1, #0
    e4a4:	4618      	mov	r0, r3
    e4a6:	f7f3 fc9c 	bl	1de2 <OsIf_GetElapsed>
    e4aa:	4602      	mov	r2, r0
    e4ac:	9b07      	ldr	r3, [sp, #28]
    e4ae:	4413      	add	r3, r2
    e4b0:	9307      	str	r3, [sp, #28]
                if (timeElapsed >= uS2Ticks)
    e4b2:	9a07      	ldr	r2, [sp, #28]
    e4b4:	9b04      	ldr	r3, [sp, #16]
    e4b6:	429a      	cmp	r2, r3
    e4b8:	d302      	bcc.n	e4c0 <FlexCAN_Ip_ManualBusOffRecovery+0x94>
                {
                    RetVal = FLEXCAN_STATUS_TIMEOUT;
    e4ba:	2303      	movs	r3, #3
    e4bc:	9306      	str	r3, [sp, #24]
                    break;
    e4be:	e005      	b.n	e4cc <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    e4c0:	9b05      	ldr	r3, [sp, #20]
    e4c2:	6a1b      	ldr	r3, [r3, #32]
    e4c4:	f003 0320 	and.w	r3, r3, #32
    e4c8:	2b00      	cmp	r3, #0
    e4ca:	d1e9      	bne.n	e4a0 <FlexCAN_Ip_ManualBusOffRecovery+0x74>
                }
            }
        }
    }

    return RetVal;
    e4cc:	9b06      	ldr	r3, [sp, #24]
}
    e4ce:	4618      	mov	r0, r3
    e4d0:	b009      	add	sp, #36	; 0x24
    e4d2:	f85d fb04 	ldr.w	pc, [sp], #4
    e4d6:	bf00      	nop
    e4d8:	000184e4 	.word	0x000184e4
    e4dc:	000f4240 	.word	0x000f4240

0000e4e0 <FlexCAN_SetSelfReception>:
{
    e4e0:	b082      	sub	sp, #8
    e4e2:	9001      	str	r0, [sp, #4]
    e4e4:	460b      	mov	r3, r1
    e4e6:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    e4ea:	9b01      	ldr	r3, [sp, #4]
    e4ec:	681b      	ldr	r3, [r3, #0]
    e4ee:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    e4f2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e4f6:	2a00      	cmp	r2, #0
    e4f8:	d001      	beq.n	e4fe <FlexCAN_SetSelfReception+0x1e>
    e4fa:	2200      	movs	r2, #0
    e4fc:	e001      	b.n	e502 <FlexCAN_SetSelfReception+0x22>
    e4fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e502:	431a      	orrs	r2, r3
    e504:	9b01      	ldr	r3, [sp, #4]
    e506:	601a      	str	r2, [r3, #0]
}
    e508:	bf00      	nop
    e50a:	b002      	add	sp, #8
    e50c:	4770      	bx	lr

0000e50e <FlexCAN_IsFDEnabled>:
{
    e50e:	b082      	sub	sp, #8
    e510:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    e512:	9b01      	ldr	r3, [sp, #4]
    e514:	681b      	ldr	r3, [r3, #0]
    e516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    e51a:	2b00      	cmp	r3, #0
    e51c:	bf14      	ite	ne
    e51e:	2301      	movne	r3, #1
    e520:	2300      	moveq	r3, #0
    e522:	b2db      	uxtb	r3, r3
}
    e524:	4618      	mov	r0, r3
    e526:	b002      	add	sp, #8
    e528:	4770      	bx	lr

0000e52a <FlexCAN_SetIsoCan>:
{
    e52a:	b082      	sub	sp, #8
    e52c:	9001      	str	r0, [sp, #4]
    e52e:	460b      	mov	r3, r1
    e530:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ISOCANFDEN_MASK) | FLEXCAN_CTRL2_ISOCANFDEN(enable ? 1UL : 0UL);
    e534:	9b01      	ldr	r3, [sp, #4]
    e536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e538:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    e53c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e540:	2a00      	cmp	r2, #0
    e542:	d002      	beq.n	e54a <FlexCAN_SetIsoCan+0x20>
    e544:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e548:	e000      	b.n	e54c <FlexCAN_SetIsoCan+0x22>
    e54a:	2200      	movs	r2, #0
    e54c:	431a      	orrs	r2, r3
    e54e:	9b01      	ldr	r3, [sp, #4]
    e550:	635a      	str	r2, [r3, #52]	; 0x34
}
    e552:	bf00      	nop
    e554:	b002      	add	sp, #8
    e556:	4770      	bx	lr

0000e558 <FlexCAN_SetEntireFrameArbitrationFieldComparison>:
{
    e558:	b082      	sub	sp, #8
    e55a:	9001      	str	r0, [sp, #4]
    e55c:	460b      	mov	r3, r1
    e55e:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EACEN_MASK) | FLEXCAN_CTRL2_EACEN(enable ? 1UL : 0UL);
    e562:	9b01      	ldr	r3, [sp, #4]
    e564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    e56a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e56e:	2a00      	cmp	r2, #0
    e570:	d002      	beq.n	e578 <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x20>
    e572:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    e576:	e000      	b.n	e57a <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x22>
    e578:	2200      	movs	r2, #0
    e57a:	431a      	orrs	r2, r3
    e57c:	9b01      	ldr	r3, [sp, #4]
    e57e:	635a      	str	r2, [r3, #52]	; 0x34
}
    e580:	bf00      	nop
    e582:	b002      	add	sp, #8
    e584:	4770      	bx	lr

0000e586 <FlexCAN_SetProtocolException>:
{
    e586:	b082      	sub	sp, #8
    e588:	9001      	str	r0, [sp, #4]
    e58a:	460b      	mov	r3, r1
    e58c:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_PREXCEN_MASK) | FLEXCAN_CTRL2_PREXCEN(enable ? 1UL : 0UL);
    e590:	9b01      	ldr	r3, [sp, #4]
    e592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e594:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    e598:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e59c:	2a00      	cmp	r2, #0
    e59e:	d002      	beq.n	e5a6 <FlexCAN_SetProtocolException+0x20>
    e5a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    e5a4:	e000      	b.n	e5a8 <FlexCAN_SetProtocolException+0x22>
    e5a6:	2200      	movs	r2, #0
    e5a8:	431a      	orrs	r2, r3
    e5aa:	9b01      	ldr	r3, [sp, #4]
    e5ac:	635a      	str	r2, [r3, #52]	; 0x34
}
    e5ae:	bf00      	nop
    e5b0:	b002      	add	sp, #8
    e5b2:	4770      	bx	lr

0000e5b4 <FlexCAN_SetRemoteReqStore>:
{
    e5b4:	b082      	sub	sp, #8
    e5b6:	9001      	str	r0, [sp, #4]
    e5b8:	460b      	mov	r3, r1
    e5ba:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RRS_MASK) | FLEXCAN_CTRL2_RRS(enable ? 1UL : 0UL);
    e5be:	9b01      	ldr	r3, [sp, #4]
    e5c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e5c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    e5c6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e5ca:	2a00      	cmp	r2, #0
    e5cc:	d002      	beq.n	e5d4 <FlexCAN_SetRemoteReqStore+0x20>
    e5ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e5d2:	e000      	b.n	e5d6 <FlexCAN_SetRemoteReqStore+0x22>
    e5d4:	2200      	movs	r2, #0
    e5d6:	431a      	orrs	r2, r3
    e5d8:	9b01      	ldr	r3, [sp, #4]
    e5da:	635a      	str	r2, [r3, #52]	; 0x34
}
    e5dc:	bf00      	nop
    e5de:	b002      	add	sp, #8
    e5e0:	4770      	bx	lr

0000e5e2 <FlexCAN_SetBusOffAutorecovery>:
{
    e5e2:	b082      	sub	sp, #8
    e5e4:	9001      	str	r0, [sp, #4]
    e5e6:	460b      	mov	r3, r1
    e5e8:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_BOFFREC_MASK) | FLEXCAN_CTRL1_BOFFREC(enable ? 0UL : 1UL);
    e5ec:	9b01      	ldr	r3, [sp, #4]
    e5ee:	685b      	ldr	r3, [r3, #4]
    e5f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    e5f4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e5f8:	2a00      	cmp	r2, #0
    e5fa:	d001      	beq.n	e600 <FlexCAN_SetBusOffAutorecovery+0x1e>
    e5fc:	2200      	movs	r2, #0
    e5fe:	e000      	b.n	e602 <FlexCAN_SetBusOffAutorecovery+0x20>
    e600:	2240      	movs	r2, #64	; 0x40
    e602:	431a      	orrs	r2, r3
    e604:	9b01      	ldr	r3, [sp, #4]
    e606:	605a      	str	r2, [r3, #4]
}
    e608:	bf00      	nop
    e60a:	b002      	add	sp, #8
    e60c:	4770      	bx	lr

0000e60e <FlexCAN_SetEdgeFilter>:
{
    e60e:	b082      	sub	sp, #8
    e610:	9001      	str	r0, [sp, #4]
    e612:	460b      	mov	r3, r1
    e614:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EDFLTDIS_MASK) | FLEXCAN_CTRL2_EDFLTDIS(enable ? 0UL : 1UL);
    e618:	9b01      	ldr	r3, [sp, #4]
    e61a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e61c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    e620:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e624:	2a00      	cmp	r2, #0
    e626:	d001      	beq.n	e62c <FlexCAN_SetEdgeFilter+0x1e>
    e628:	2200      	movs	r2, #0
    e62a:	e001      	b.n	e630 <FlexCAN_SetEdgeFilter+0x22>
    e62c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    e630:	431a      	orrs	r2, r3
    e632:	9b01      	ldr	r3, [sp, #4]
    e634:	635a      	str	r2, [r3, #52]	; 0x34
}
    e636:	bf00      	nop
    e638:	b002      	add	sp, #8
    e63a:	4770      	bx	lr

0000e63c <FlexCAN_CanBitSampling>:
{
    e63c:	b082      	sub	sp, #8
    e63e:	9001      	str	r0, [sp, #4]
    e640:	460b      	mov	r3, r1
    e642:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_SMP_MASK) | FLEXCAN_CTRL1_SMP(enable ? 1UL : 0UL);
    e646:	9b01      	ldr	r3, [sp, #4]
    e648:	685b      	ldr	r3, [r3, #4]
    e64a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    e64e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e652:	2a00      	cmp	r2, #0
    e654:	d001      	beq.n	e65a <FlexCAN_CanBitSampling+0x1e>
    e656:	2280      	movs	r2, #128	; 0x80
    e658:	e000      	b.n	e65c <FlexCAN_CanBitSampling+0x20>
    e65a:	2200      	movs	r2, #0
    e65c:	431a      	orrs	r2, r3
    e65e:	9b01      	ldr	r3, [sp, #4]
    e660:	605a      	str	r2, [r3, #4]
}
    e662:	bf00      	nop
    e664:	b002      	add	sp, #8
    e666:	4770      	bx	lr

0000e668 <FlexCAN_ComputeDLCValue>:
 * Function Name: FLEXCAN_ComputeDLCValue
 * Description  : Computes the DLC field value, given a payload size (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_ComputeDLCValue(uint8 payloadSize)
{
    e668:	b084      	sub	sp, #16
    e66a:	4603      	mov	r3, r0
    e66c:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 ret = 0xFFU;                   /* 0,  1,  2,  3,  4,  5,  6,  7,  8, */
    e670:	23ff      	movs	r3, #255	; 0xff
    e672:	9303      	str	r3, [sp, #12]
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES
                                          };

    if (payloadSize <= 64U)
    e674:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e678:	2b40      	cmp	r3, #64	; 0x40
    e67a:	d804      	bhi.n	e686 <FlexCAN_ComputeDLCValue+0x1e>
    {
        ret = payload_code[payloadSize];
    e67c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e680:	4a03      	ldr	r2, [pc, #12]	; (e690 <FlexCAN_ComputeDLCValue+0x28>)
    e682:	5cd3      	ldrb	r3, [r2, r3]
    e684:	9303      	str	r3, [sp, #12]
    else
    {
        /* The argument is not a valid payload size will return 0xFF*/
    }

    return (uint8)ret;
    e686:	9b03      	ldr	r3, [sp, #12]
    e688:	b2db      	uxtb	r3, r3
}
    e68a:	4618      	mov	r0, r3
    e68c:	b004      	add	sp, #16
    e68e:	4770      	bx	lr
    e690:	000184f0 	.word	0x000184f0

0000e694 <FlexCAN_ClearRAM>:
 * Function Name : FLEXCAN_ClearRAM
 * Description   : Clears FlexCAN memory positions that require initialization.
 *
 *END**************************************************************************/
static void FlexCAN_ClearRAM(FLEXCAN_Type * base)
{
    e694:	b500      	push	{lr}
    e696:	b087      	sub	sp, #28
    e698:	9001      	str	r0, [sp, #4]
    uint32 databyte;
    uint32 RAM_size   = FlexCAN_GetMaxMbNum(base) * 4U;
    e69a:	9801      	ldr	r0, [sp, #4]
    e69c:	f000 f8f6 	bl	e88c <FlexCAN_GetMaxMbNum>
    e6a0:	4603      	mov	r3, r0
    e6a2:	009b      	lsls	r3, r3, #2
    e6a4:	9304      	str	r3, [sp, #16]
    uint32 RXIMR_size = FlexCAN_GetMaxMbNum(base);
    e6a6:	9801      	ldr	r0, [sp, #4]
    e6a8:	f000 f8f0 	bl	e88c <FlexCAN_GetMaxMbNum>
    e6ac:	9003      	str	r0, [sp, #12]
    /* Address of base + ram offset to point to MB start address */
    volatile uint32 * RAM = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    e6ae:	9b01      	ldr	r3, [sp, #4]
    e6b0:	3380      	adds	r3, #128	; 0x80
    e6b2:	9302      	str	r3, [sp, #8]
    /* Clear MB region */
    for (databyte = 0U; databyte < RAM_size; databyte++)
    e6b4:	2300      	movs	r3, #0
    e6b6:	9305      	str	r3, [sp, #20]
    e6b8:	e008      	b.n	e6cc <FlexCAN_ClearRAM+0x38>
    {
        RAM[databyte] = 0x0U;
    e6ba:	9b05      	ldr	r3, [sp, #20]
    e6bc:	009b      	lsls	r3, r3, #2
    e6be:	9a02      	ldr	r2, [sp, #8]
    e6c0:	4413      	add	r3, r2
    e6c2:	2200      	movs	r2, #0
    e6c4:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RAM_size; databyte++)
    e6c6:	9b05      	ldr	r3, [sp, #20]
    e6c8:	3301      	adds	r3, #1
    e6ca:	9305      	str	r3, [sp, #20]
    e6cc:	9a05      	ldr	r2, [sp, #20]
    e6ce:	9b04      	ldr	r3, [sp, #16]
    e6d0:	429a      	cmp	r2, r3
    e6d2:	d3f2      	bcc.n	e6ba <FlexCAN_ClearRAM+0x26>
    }
    RAM = (volatile uint32 *)base->RXIMR;
    e6d4:	9b01      	ldr	r3, [sp, #4]
    e6d6:	f503 6308 	add.w	r3, r3, #2176	; 0x880
    e6da:	9302      	str	r3, [sp, #8]
    /* Clear RXIMR region */
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    e6dc:	2300      	movs	r3, #0
    e6de:	9305      	str	r3, [sp, #20]
    e6e0:	e008      	b.n	e6f4 <FlexCAN_ClearRAM+0x60>
    {
        RAM[databyte] = 0x0U;
    e6e2:	9b05      	ldr	r3, [sp, #20]
    e6e4:	009b      	lsls	r3, r3, #2
    e6e6:	9a02      	ldr	r2, [sp, #8]
    e6e8:	4413      	add	r3, r2
    e6ea:	2200      	movs	r2, #0
    e6ec:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    e6ee:	9b05      	ldr	r3, [sp, #20]
    e6f0:	3301      	adds	r3, #1
    e6f2:	9305      	str	r3, [sp, #20]
    e6f4:	9a05      	ldr	r2, [sp, #20]
    e6f6:	9b03      	ldr	r3, [sp, #12]
    e6f8:	429a      	cmp	r2, r3
    e6fa:	d3f2      	bcc.n	e6e2 <FlexCAN_ClearRAM+0x4e>
    }
#endif
    /* Clear WRMFRZ bit in CTRL2 Register to restrict write access to memory */
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_WRMFRZ_MASK) | FLEXCAN_CTRL2_WRMFRZ(0U);
#endif /* if FLEXCAN_IP_FEATURE_HAS_MEM_ERR_DET */
}
    e6fc:	bf00      	nop
    e6fe:	bf00      	nop
    e700:	b007      	add	sp, #28
    e702:	f85d fb04 	ldr.w	pc, [sp], #4

0000e706 <FlexCAN_ComputePayloadSize>:
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#else
static uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
{
    e706:	b084      	sub	sp, #16
    e708:	4603      	mov	r3, r0
    e70a:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ret = 8U;
    e70e:	2308      	movs	r3, #8
    e710:	f88d 300f 	strb.w	r3, [sp, #15]

    if (dlcValue <= 8U)
    e714:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e718:	2b08      	cmp	r3, #8
    e71a:	d804      	bhi.n	e726 <FlexCAN_ComputePayloadSize+0x20>
    {
        ret = dlcValue;
    e71c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e720:	f88d 300f 	strb.w	r3, [sp, #15]
    e724:	e033      	b.n	e78e <FlexCAN_ComputePayloadSize+0x88>
    }
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    else
    {
        switch (dlcValue)
    e726:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e72a:	3b09      	subs	r3, #9
    e72c:	2b06      	cmp	r3, #6
    e72e:	d82d      	bhi.n	e78c <FlexCAN_ComputePayloadSize+0x86>
    e730:	a201      	add	r2, pc, #4	; (adr r2, e738 <FlexCAN_ComputePayloadSize+0x32>)
    e732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e736:	bf00      	nop
    e738:	0000e755 	.word	0x0000e755
    e73c:	0000e75d 	.word	0x0000e75d
    e740:	0000e765 	.word	0x0000e765
    e744:	0000e76d 	.word	0x0000e76d
    e748:	0000e775 	.word	0x0000e775
    e74c:	0000e77d 	.word	0x0000e77d
    e750:	0000e785 	.word	0x0000e785
        {
            case FLEXCAN_IP_DLC_VALUE_12_BYTES:
                ret = 12U;
    e754:	230c      	movs	r3, #12
    e756:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e75a:	e018      	b.n	e78e <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_16_BYTES:
                ret = 16U;
    e75c:	2310      	movs	r3, #16
    e75e:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e762:	e014      	b.n	e78e <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_20_BYTES:
                ret = 20U;
    e764:	2314      	movs	r3, #20
    e766:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e76a:	e010      	b.n	e78e <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_24_BYTES:
                ret = 24U;
    e76c:	2318      	movs	r3, #24
    e76e:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e772:	e00c      	b.n	e78e <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_32_BYTES:
                ret = 32U;
    e774:	2320      	movs	r3, #32
    e776:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e77a:	e008      	b.n	e78e <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_48_BYTES:
                ret = 48U;
    e77c:	2330      	movs	r3, #48	; 0x30
    e77e:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e782:	e004      	b.n	e78e <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_64_BYTES:
                ret = 64U;
    e784:	2340      	movs	r3, #64	; 0x40
    e786:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    e78a:	e000      	b.n	e78e <FlexCAN_ComputePayloadSize+0x88>
            default:
                /* The argument is not a valid DLC size */
                break;
    e78c:	bf00      	nop
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    return ret;
    e78e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    e792:	4618      	mov	r0, r3
    e794:	b004      	add	sp, #16
    e796:	4770      	bx	lr

0000e798 <FlexCAN_GetMsgBuffRegion>:
 * Function Name : FLEXCAN_GetMsgBuffRegion
 * Description   : Returns the start of a MB area, based on its index.
 *
 *END**************************************************************************/
volatile uint32 * FlexCAN_GetMsgBuffRegion(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    e798:	b500      	push	{lr}
    e79a:	b08b      	sub	sp, #44	; 0x2c
    e79c:	9001      	str	r0, [sp, #4]
    e79e:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    e7a0:	2308      	movs	r3, #8
    e7a2:	f88d 3020 	strb.w	r3, [sp, #32]
    uint8 mb_size = 0U;
    e7a6:	2300      	movs	r3, #0
    e7a8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ramBlockSize = 512U;
    e7ac:	f44f 7300 	mov.w	r3, #512	; 0x200
    e7b0:	9307      	str	r3, [sp, #28]
    uint16 ramBlockOffset = 0;
    e7b2:	2300      	movs	r3, #0
    e7b4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    uint8 msgBuffIdxBackup = (uint8)msgBuffIdx;
    e7b8:	9b00      	ldr	r3, [sp, #0]
    e7ba:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint8 i=0U;
    e7be:	2300      	movs	r3, #0
    e7c0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    uint8 maxMbNum=0U;
    e7c4:	2300      	movs	r3, #0
    e7c6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    uint32 mb_index=0U;
    e7ca:	2300      	movs	r3, #0
    e7cc:	9306      	str	r3, [sp, #24]
    uint8 payload_size=0U;
    e7ce:	2300      	movs	r3, #0
    e7d0:	f88d 3017 	strb.w	r3, [sp, #23]
    volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    e7d4:	9b01      	ldr	r3, [sp, #4]
    e7d6:	3380      	adds	r3, #128	; 0x80
    e7d8:	9304      	str	r3, [sp, #16]
    volatile uint32 * pAddressRet = NULL_PTR;
    e7da:	2300      	movs	r3, #0
    e7dc:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY == STD_ON)
    volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    e7de:	2300      	movs	r3, #0
    e7e0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    e7e4:	e02d      	b.n	e842 <FlexCAN_GetMsgBuffRegion+0xaa>
    {
        payload_size = FlexCAN_GetPayloadSize(base, i);
    e7e6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e7ea:	4619      	mov	r1, r3
    e7ec:	9801      	ldr	r0, [sp, #4]
    e7ee:	f000 fad1 	bl	ed94 <FlexCAN_GetPayloadSize>
    e7f2:	4603      	mov	r3, r0
    e7f4:	f88d 3017 	strb.w	r3, [sp, #23]
        mb_size = (uint8)(payload_size + arbitration_field_size);
    e7f8:	f89d 2017 	ldrb.w	r2, [sp, #23]
    e7fc:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e800:	4413      	add	r3, r2
    e802:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        maxMbNum = (uint8)(ramBlockSize / mb_size);
    e806:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    e80a:	9a07      	ldr	r2, [sp, #28]
    e80c:	fbb2 f3f3 	udiv	r3, r2, r3
    e810:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        if (maxMbNum > msgBuffIdxBackup)
    e814:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    e818:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    e81c:	429a      	cmp	r2, r3
    e81e:	d815      	bhi.n	e84c <FlexCAN_GetMsgBuffRegion+0xb4>
        {
            break;
        }
        ramBlockOffset += 128U;
    e820:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    e824:	3380      	adds	r3, #128	; 0x80
    e826:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        msgBuffIdxBackup -= maxMbNum;
    e82a:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    e82e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e832:	1ad3      	subs	r3, r2, r3
    e834:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    e838:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e83c:	3301      	adds	r3, #1
    e83e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    e842:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e846:	2b00      	cmp	r3, #0
    e848:	d0cd      	beq.n	e7e6 <FlexCAN_GetMsgBuffRegion+0x4e>
    e84a:	e000      	b.n	e84e <FlexCAN_GetMsgBuffRegion+0xb6>
            break;
    e84c:	bf00      	nop
    }
    else
#endif
    {
        /* Multiply the MB index by the MB size (in words) */
        mb_index = (uint32)ramBlockOffset + (((uint32)msgBuffIdxBackup % (uint32)maxMbNum) * ((uint32)mb_size >> 2U));
    e84e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    e852:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    e856:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    e85a:	fbb3 f0f2 	udiv	r0, r3, r2
    e85e:	fb00 f202 	mul.w	r2, r0, r2
    e862:	1a9b      	subs	r3, r3, r2
    e864:	b2db      	uxtb	r3, r3
    e866:	461a      	mov	r2, r3
    e868:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    e86c:	089b      	lsrs	r3, r3, #2
    e86e:	b2db      	uxtb	r3, r3
    e870:	fb02 f303 	mul.w	r3, r2, r3
    e874:	440b      	add	r3, r1
    e876:	9306      	str	r3, [sp, #24]
        pAddressRet = &(RAM[mb_index]);
    e878:	9b06      	ldr	r3, [sp, #24]
    e87a:	009b      	lsls	r3, r3, #2
    e87c:	9a04      	ldr	r2, [sp, #16]
    e87e:	4413      	add	r3, r2
    e880:	9303      	str	r3, [sp, #12]
    }

    return pAddressRet;
    e882:	9b03      	ldr	r3, [sp, #12]
}
    e884:	4618      	mov	r0, r3
    e886:	b00b      	add	sp, #44	; 0x2c
    e888:	f85d fb04 	ldr.w	pc, [sp], #4

0000e88c <FlexCAN_GetMaxMbNum>:
 * Function Name : FlexCAN_GetMaxMbNum
 * Description   : Computes the maximum RAM size occupied by MBs.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMaxMbNum(const FLEXCAN_Type * base)
{
    e88c:	b084      	sub	sp, #16
    e88e:	9001      	str	r0, [sp, #4]
    uint32 i, ret = 0u;
    e890:	2300      	movs	r3, #0
    e892:	9302      	str	r3, [sp, #8]
    static FLEXCAN_Type * const flexcanBase[] = IP_FLEXCAN_BASE_PTRS;
    static const uint32 maxMbNum[] = FLEXCAN_IP_FEATURE_MAX_MB_NUM_ARRAY;

    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    e894:	2300      	movs	r3, #0
    e896:	9303      	str	r3, [sp, #12]
    e898:	e00e      	b.n	e8b8 <FlexCAN_GetMaxMbNum+0x2c>
    {
        if (base == flexcanBase[i])
    e89a:	4a0b      	ldr	r2, [pc, #44]	; (e8c8 <FlexCAN_GetMaxMbNum+0x3c>)
    e89c:	9b03      	ldr	r3, [sp, #12]
    e89e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8a2:	9a01      	ldr	r2, [sp, #4]
    e8a4:	429a      	cmp	r2, r3
    e8a6:	d104      	bne.n	e8b2 <FlexCAN_GetMaxMbNum+0x26>
        {
            ret = maxMbNum[i];
    e8a8:	4a08      	ldr	r2, [pc, #32]	; (e8cc <FlexCAN_GetMaxMbNum+0x40>)
    e8aa:	9b03      	ldr	r3, [sp, #12]
    e8ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8b0:	9302      	str	r3, [sp, #8]
    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    e8b2:	9b03      	ldr	r3, [sp, #12]
    e8b4:	3301      	adds	r3, #1
    e8b6:	9303      	str	r3, [sp, #12]
    e8b8:	9b03      	ldr	r3, [sp, #12]
    e8ba:	2b02      	cmp	r3, #2
    e8bc:	d9ed      	bls.n	e89a <FlexCAN_GetMaxMbNum+0xe>
        }
    }
    return ret;
    e8be:	9b02      	ldr	r3, [sp, #8]
}
    e8c0:	4618      	mov	r0, r3
    e8c2:	b004      	add	sp, #16
    e8c4:	4770      	bx	lr
    e8c6:	bf00      	nop
    e8c8:	00018534 	.word	0x00018534
    e8cc:	00018540 	.word	0x00018540

0000e8d0 <FlexCAN_EnterFreezeMode>:
 * Function Name : FLEXCAN_EnterFreezeMode
 * Description   : Enter the freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnterFreezeMode(FLEXCAN_Type * base)
{
    e8d0:	b500      	push	{lr}
    e8d2:	b087      	sub	sp, #28
    e8d4:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    e8d6:	2300      	movs	r3, #0
    e8d8:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    e8da:	2300      	movs	r3, #0
    e8dc:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e8de:	2100      	movs	r1, #0
    e8e0:	4820      	ldr	r0, [pc, #128]	; (e964 <FlexCAN_EnterFreezeMode+0x94>)
    e8e2:	f7f3 fab1 	bl	1e48 <OsIf_MicrosToTicks>
    e8e6:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    e8e8:	2300      	movs	r3, #0
    e8ea:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    e8ec:	f005 fa36 	bl	13d5c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(1U);
    e8f0:	9b01      	ldr	r3, [sp, #4]
    e8f2:	681b      	ldr	r3, [r3, #0]
    e8f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    e8f8:	9b01      	ldr	r3, [sp, #4]
    e8fa:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(1U);
    e8fc:	9b01      	ldr	r3, [sp, #4]
    e8fe:	681b      	ldr	r3, [r3, #0]
    e900:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
    e904:	9b01      	ldr	r3, [sp, #4]
    e906:	601a      	str	r2, [r3, #0]
    if (((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U)
    e908:	9b01      	ldr	r3, [sp, #4]
    e90a:	681b      	ldr	r3, [r3, #0]
    e90c:	2b00      	cmp	r3, #0
    e90e:	da05      	bge.n	e91c <FlexCAN_EnterFreezeMode+0x4c>
    {
        base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    e910:	9b01      	ldr	r3, [sp, #4]
    e912:	681b      	ldr	r3, [r3, #0]
    e914:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    e918:	9b01      	ldr	r3, [sp, #4]
    e91a:	601a      	str	r2, [r3, #0]
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    e91c:	f005 fa4a 	bl	13db4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e920:	2000      	movs	r0, #0
    e922:	f7f3 fa45 	bl	1db0 <OsIf_GetCounter>
    e926:	4603      	mov	r3, r0
    e928:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    e92a:	e00f      	b.n	e94c <FlexCAN_EnterFreezeMode+0x7c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e92c:	ab02      	add	r3, sp, #8
    e92e:	2100      	movs	r1, #0
    e930:	4618      	mov	r0, r3
    e932:	f7f3 fa56 	bl	1de2 <OsIf_GetElapsed>
    e936:	4602      	mov	r2, r0
    e938:	9b05      	ldr	r3, [sp, #20]
    e93a:	4413      	add	r3, r2
    e93c:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    e93e:	9a05      	ldr	r2, [sp, #20]
    e940:	9b03      	ldr	r3, [sp, #12]
    e942:	429a      	cmp	r2, r3
    e944:	d302      	bcc.n	e94c <FlexCAN_EnterFreezeMode+0x7c>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    e946:	2303      	movs	r3, #3
    e948:	9304      	str	r3, [sp, #16]
            break;
    e94a:	e005      	b.n	e958 <FlexCAN_EnterFreezeMode+0x88>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    e94c:	9b01      	ldr	r3, [sp, #4]
    e94e:	681b      	ldr	r3, [r3, #0]
    e950:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    e954:	2b00      	cmp	r3, #0
    e956:	d0e9      	beq.n	e92c <FlexCAN_EnterFreezeMode+0x5c>
        }
    }

    return returnResult;
    e958:	9b04      	ldr	r3, [sp, #16]
}
    e95a:	4618      	mov	r0, r3
    e95c:	b007      	add	sp, #28
    e95e:	f85d fb04 	ldr.w	pc, [sp], #4
    e962:	bf00      	nop
    e964:	000f4240 	.word	0x000f4240

0000e968 <FlexCAN_Enable>:
 * Function Name : FlexCAN_Enable
 * Description   : Enable the clock for FlexCAN Module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Enable(FLEXCAN_Type * base)
{
    e968:	b500      	push	{lr}
    e96a:	b087      	sub	sp, #28
    e96c:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    e96e:	2300      	movs	r3, #0
    e970:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    e972:	2300      	movs	r3, #0
    e974:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e976:	2100      	movs	r1, #0
    e978:	4818      	ldr	r0, [pc, #96]	; (e9dc <FlexCAN_Enable+0x74>)
    e97a:	f7f3 fa65 	bl	1e48 <OsIf_MicrosToTicks>
    e97e:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    e980:	2300      	movs	r3, #0
    e982:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    e984:	f005 fa3c 	bl	13e00 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>

    /* Enable Module */
    base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    e988:	9b01      	ldr	r3, [sp, #4]
    e98a:	681b      	ldr	r3, [r3, #0]
    e98c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    e990:	9b01      	ldr	r3, [sp, #4]
    e992:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    e994:	f005 fa60 	bl	13e58 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e998:	2000      	movs	r0, #0
    e99a:	f7f3 fa09 	bl	1db0 <OsIf_GetCounter>
    e99e:	4603      	mov	r3, r0
    e9a0:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    e9a2:	e00f      	b.n	e9c4 <FlexCAN_Enable+0x5c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e9a4:	ab02      	add	r3, sp, #8
    e9a6:	2100      	movs	r1, #0
    e9a8:	4618      	mov	r0, r3
    e9aa:	f7f3 fa1a 	bl	1de2 <OsIf_GetElapsed>
    e9ae:	4602      	mov	r2, r0
    e9b0:	9b05      	ldr	r3, [sp, #20]
    e9b2:	4413      	add	r3, r2
    e9b4:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    e9b6:	9a05      	ldr	r2, [sp, #20]
    e9b8:	9b03      	ldr	r3, [sp, #12]
    e9ba:	429a      	cmp	r2, r3
    e9bc:	d302      	bcc.n	e9c4 <FlexCAN_Enable+0x5c>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    e9be:	2303      	movs	r3, #3
    e9c0:	9304      	str	r3, [sp, #16]
            break;
    e9c2:	e005      	b.n	e9d0 <FlexCAN_Enable+0x68>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    e9c4:	9b01      	ldr	r3, [sp, #4]
    e9c6:	681b      	ldr	r3, [r3, #0]
    e9c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    e9cc:	2b00      	cmp	r3, #0
    e9ce:	d0e9      	beq.n	e9a4 <FlexCAN_Enable+0x3c>
        }
    }
    return returnValue;
    e9d0:	9b04      	ldr	r3, [sp, #16]
}
    e9d2:	4618      	mov	r0, r3
    e9d4:	b007      	add	sp, #28
    e9d6:	f85d fb04 	ldr.w	pc, [sp], #4
    e9da:	bf00      	nop
    e9dc:	000f4240 	.word	0x000f4240

0000e9e0 <FlexCAN_ExitFreezeMode>:
 * Function Name : FLEXCAN_ExitFreezeMode
 * Description   : Exit of freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_ExitFreezeMode(FLEXCAN_Type * base)
{
    e9e0:	b500      	push	{lr}
    e9e2:	b087      	sub	sp, #28
    e9e4:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    e9e6:	2300      	movs	r3, #0
    e9e8:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    e9ea:	2300      	movs	r3, #0
    e9ec:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    e9ee:	2100      	movs	r1, #0
    e9f0:	481b      	ldr	r0, [pc, #108]	; (ea60 <FlexCAN_ExitFreezeMode+0x80>)
    e9f2:	f7f3 fa29 	bl	1e48 <OsIf_MicrosToTicks>
    e9f6:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    e9f8:	2300      	movs	r3, #0
    e9fa:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    e9fc:	f005 fa52 	bl	13ea4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(0U);
    ea00:	9b01      	ldr	r3, [sp, #4]
    ea02:	681b      	ldr	r3, [r3, #0]
    ea04:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
    ea08:	9b01      	ldr	r3, [sp, #4]
    ea0a:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(0U);
    ea0c:	9b01      	ldr	r3, [sp, #4]
    ea0e:	681b      	ldr	r3, [r3, #0]
    ea10:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    ea14:	9b01      	ldr	r3, [sp, #4]
    ea16:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    ea18:	f005 fa70 	bl	13efc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    /* Wait till exit freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ea1c:	2000      	movs	r0, #0
    ea1e:	f7f3 f9c7 	bl	1db0 <OsIf_GetCounter>
    ea22:	4603      	mov	r3, r0
    ea24:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    ea26:	e00f      	b.n	ea48 <FlexCAN_ExitFreezeMode+0x68>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ea28:	ab02      	add	r3, sp, #8
    ea2a:	2100      	movs	r1, #0
    ea2c:	4618      	mov	r0, r3
    ea2e:	f7f3 f9d8 	bl	1de2 <OsIf_GetElapsed>
    ea32:	4602      	mov	r2, r0
    ea34:	9b05      	ldr	r3, [sp, #20]
    ea36:	4413      	add	r3, r2
    ea38:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    ea3a:	9a05      	ldr	r2, [sp, #20]
    ea3c:	9b03      	ldr	r3, [sp, #12]
    ea3e:	429a      	cmp	r2, r3
    ea40:	d302      	bcc.n	ea48 <FlexCAN_ExitFreezeMode+0x68>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    ea42:	2303      	movs	r3, #3
    ea44:	9304      	str	r3, [sp, #16]
            break;
    ea46:	e005      	b.n	ea54 <FlexCAN_ExitFreezeMode+0x74>
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    ea48:	9b01      	ldr	r3, [sp, #4]
    ea4a:	681b      	ldr	r3, [r3, #0]
    ea4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    ea50:	2b00      	cmp	r3, #0
    ea52:	d1e9      	bne.n	ea28 <FlexCAN_ExitFreezeMode+0x48>
        }
    }
    return returnValue;
    ea54:	9b04      	ldr	r3, [sp, #16]
}
    ea56:	4618      	mov	r0, r3
    ea58:	b007      	add	sp, #28
    ea5a:	f85d fb04 	ldr.w	pc, [sp], #4
    ea5e:	bf00      	nop
    ea60:	000f4240 	.word	0x000f4240

0000ea64 <FlexCAN_Disable>:
 * Description   : Disable FlexCAN module.
 * This function will disable FlexCAN module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Disable(FLEXCAN_Type * base)
{
    ea64:	b500      	push	{lr}
    ea66:	b087      	sub	sp, #28
    ea68:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    ea6a:	2300      	movs	r3, #0
    ea6c:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    ea6e:	2300      	movs	r3, #0
    ea70:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ea72:	2100      	movs	r1, #0
    ea74:	481a      	ldr	r0, [pc, #104]	; (eae0 <FlexCAN_Disable+0x7c>)
    ea76:	f7f3 f9e7 	bl	1e48 <OsIf_MicrosToTicks>
    ea7a:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    ea7c:	2300      	movs	r3, #0
    ea7e:	9304      	str	r3, [sp, #16]

    /* To access the memory mapped registers */
    /* Enter disable mode (hard reset). */
    if (0U == ((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT))
    ea80:	9b01      	ldr	r3, [sp, #4]
    ea82:	681b      	ldr	r3, [r3, #0]
    ea84:	2b00      	cmp	r3, #0
    ea86:	db25      	blt.n	ead4 <FlexCAN_Disable+0x70>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    ea88:	f005 fa5e 	bl	13f48 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Clock disable (module) */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MDIS_MASK) | FLEXCAN_MCR_MDIS(1U);
    ea8c:	9b01      	ldr	r3, [sp, #4]
    ea8e:	681b      	ldr	r3, [r3, #0]
    ea90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    ea94:	9b01      	ldr	r3, [sp, #4]
    ea96:	601a      	str	r2, [r3, #0]
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    ea98:	f005 fa82 	bl	13fa0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Wait until disable mode acknowledged */
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ea9c:	2000      	movs	r0, #0
    ea9e:	f7f3 f987 	bl	1db0 <OsIf_GetCounter>
    eaa2:	4603      	mov	r3, r0
    eaa4:	9302      	str	r3, [sp, #8]
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    eaa6:	e00f      	b.n	eac8 <FlexCAN_Disable+0x64>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    eaa8:	ab02      	add	r3, sp, #8
    eaaa:	2100      	movs	r1, #0
    eaac:	4618      	mov	r0, r3
    eaae:	f7f3 f998 	bl	1de2 <OsIf_GetElapsed>
    eab2:	4602      	mov	r2, r0
    eab4:	9b05      	ldr	r3, [sp, #20]
    eab6:	4413      	add	r3, r2
    eab8:	9305      	str	r3, [sp, #20]
            if (timeElapsed >= uS2Ticks)
    eaba:	9a05      	ldr	r2, [sp, #20]
    eabc:	9b03      	ldr	r3, [sp, #12]
    eabe:	429a      	cmp	r2, r3
    eac0:	d302      	bcc.n	eac8 <FlexCAN_Disable+0x64>
            {
                returnResult = FLEXCAN_STATUS_TIMEOUT;
    eac2:	2303      	movs	r3, #3
    eac4:	9304      	str	r3, [sp, #16]
                break;
    eac6:	e005      	b.n	ead4 <FlexCAN_Disable+0x70>
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    eac8:	9b01      	ldr	r3, [sp, #4]
    eaca:	681b      	ldr	r3, [r3, #0]
    eacc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    ead0:	2b00      	cmp	r3, #0
    ead2:	d0e9      	beq.n	eaa8 <FlexCAN_Disable+0x44>
            }
        }
    }
    return returnResult;
    ead4:	9b04      	ldr	r3, [sp, #16]
}
    ead6:	4618      	mov	r0, r3
    ead8:	b007      	add	sp, #28
    eada:	f85d fb04 	ldr.w	pc, [sp], #4
    eade:	bf00      	nop
    eae0:	000f4240 	.word	0x000f4240

0000eae4 <FlexCAN_SetErrIntCmd>:
 * Description   : Enable the error interrupts.
 * This function will enable Error interrupt.
 *
 *END**************************************************************************/
void FlexCAN_SetErrIntCmd(FLEXCAN_Type * base, flexcan_int_type_t errType, boolean enable)
{
    eae4:	b500      	push	{lr}
    eae6:	b087      	sub	sp, #28
    eae8:	9003      	str	r0, [sp, #12]
    eaea:	9102      	str	r1, [sp, #8]
    eaec:	4613      	mov	r3, r2
    eaee:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 temp = (uint32)errType;
    eaf2:	9b02      	ldr	r3, [sp, #8]
    eaf4:	9305      	str	r3, [sp, #20]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    eaf6:	f005 fa79 	bl	13fec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
    if (enable)
    eafa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    eafe:	2b00      	cmp	r3, #0
    eb00:	d020      	beq.n	eb44 <FlexCAN_SetErrIntCmd+0x60>
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    eb02:	9b02      	ldr	r3, [sp, #8]
    eb04:	f244 0201 	movw	r2, #16385	; 0x4001
    eb08:	4293      	cmp	r3, r2
    eb0a:	d106      	bne.n	eb1a <FlexCAN_SetErrIntCmd+0x36>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(1U);
    eb0c:	9b03      	ldr	r3, [sp, #12]
    eb0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    eb10:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    eb14:	9b03      	ldr	r3, [sp, #12]
    eb16:	635a      	str	r2, [r3, #52]	; 0x34
    eb18:	e03a      	b.n	eb90 <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            if ((FLEXCAN_INT_RX_WARNING == errType) || (FLEXCAN_INT_TX_WARNING == errType))
    eb1a:	9b02      	ldr	r3, [sp, #8]
    eb1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    eb20:	d003      	beq.n	eb2a <FlexCAN_SetErrIntCmd+0x46>
    eb22:	9b02      	ldr	r3, [sp, #8]
    eb24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    eb28:	d105      	bne.n	eb36 <FlexCAN_SetErrIntCmd+0x52>
            {
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(1U);
    eb2a:	9b03      	ldr	r3, [sp, #12]
    eb2c:	681b      	ldr	r3, [r3, #0]
    eb2e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    eb32:	9b03      	ldr	r3, [sp, #12]
    eb34:	601a      	str	r2, [r3, #0]
            }
            (base->CTRL1) = ((base->CTRL1) | (temp));
    eb36:	9b03      	ldr	r3, [sp, #12]
    eb38:	685a      	ldr	r2, [r3, #4]
    eb3a:	9b05      	ldr	r3, [sp, #20]
    eb3c:	431a      	orrs	r2, r3
    eb3e:	9b03      	ldr	r3, [sp, #12]
    eb40:	605a      	str	r2, [r3, #4]
    eb42:	e025      	b.n	eb90 <FlexCAN_SetErrIntCmd+0xac>
        }
    }
    else
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    eb44:	9b02      	ldr	r3, [sp, #8]
    eb46:	f244 0201 	movw	r2, #16385	; 0x4001
    eb4a:	4293      	cmp	r3, r2
    eb4c:	d106      	bne.n	eb5c <FlexCAN_SetErrIntCmd+0x78>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(0U);
    eb4e:	9b03      	ldr	r3, [sp, #12]
    eb50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    eb52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    eb56:	9b03      	ldr	r3, [sp, #12]
    eb58:	635a      	str	r2, [r3, #52]	; 0x34
    eb5a:	e019      	b.n	eb90 <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            (base->CTRL1) = ((base->CTRL1) & ~(temp));
    eb5c:	9b03      	ldr	r3, [sp, #12]
    eb5e:	685a      	ldr	r2, [r3, #4]
    eb60:	9b05      	ldr	r3, [sp, #20]
    eb62:	43db      	mvns	r3, r3
    eb64:	401a      	ands	r2, r3
    eb66:	9b03      	ldr	r3, [sp, #12]
    eb68:	605a      	str	r2, [r3, #4]
            temp = base->CTRL1;
    eb6a:	9b03      	ldr	r3, [sp, #12]
    eb6c:	685b      	ldr	r3, [r3, #4]
    eb6e:	9305      	str	r3, [sp, #20]
            if ((0U == (temp & (uint32)FLEXCAN_INT_RX_WARNING)) && (0U == (temp & (uint32)FLEXCAN_INT_TX_WARNING)))
    eb70:	9b05      	ldr	r3, [sp, #20]
    eb72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    eb76:	2b00      	cmp	r3, #0
    eb78:	d10a      	bne.n	eb90 <FlexCAN_SetErrIntCmd+0xac>
    eb7a:	9b05      	ldr	r3, [sp, #20]
    eb7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    eb80:	2b00      	cmp	r3, #0
    eb82:	d105      	bne.n	eb90 <FlexCAN_SetErrIntCmd+0xac>
            {
                /* If WRNEN disabled then both FLEXCAN_INT_RX_WARNING and FLEXCAN_INT_TX_WARNING will be disabled */
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(0U);
    eb84:	9b03      	ldr	r3, [sp, #12]
    eb86:	681b      	ldr	r3, [r3, #0]
    eb88:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
    eb8c:	9b03      	ldr	r3, [sp, #12]
    eb8e:	601a      	str	r2, [r3, #0]
            }
        }
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    eb90:	f005 fa58 	bl	14044 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
}
    eb94:	bf00      	nop
    eb96:	b007      	add	sp, #28
    eb98:	f85d fb04 	ldr.w	pc, [sp], #4

0000eb9c <FlexCAN_Init>:
 * buffers, initialize all message buffers as inactive, enable RX FIFO
 * if needed, mask all mask bits, and disable all MB interrupts.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Init(FLEXCAN_Type * base)
{
    eb9c:	b500      	push	{lr}
    eb9e:	b087      	sub	sp, #28
    eba0:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    eba2:	2300      	movs	r3, #0
    eba4:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    eba6:	2300      	movs	r3, #0
    eba8:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ebaa:	2100      	movs	r1, #0
    ebac:	4833      	ldr	r0, [pc, #204]	; (ec7c <FlexCAN_Init+0xe0>)
    ebae:	f7f3 f94b 	bl	1e48 <OsIf_MicrosToTicks>
    ebb2:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    ebb4:	2300      	movs	r3, #0
    ebb6:	9304      	str	r3, [sp, #16]

    /* Reset the FLEXCAN */
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SOFTRST_MASK) | FLEXCAN_MCR_SOFTRST(1U);
    ebb8:	9b01      	ldr	r3, [sp, #4]
    ebba:	681b      	ldr	r3, [r3, #0]
    ebbc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
    ebc0:	9b01      	ldr	r3, [sp, #4]
    ebc2:	601a      	str	r2, [r3, #0]
    /* Wait for reset cycle to complete */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ebc4:	2000      	movs	r0, #0
    ebc6:	f7f3 f8f3 	bl	1db0 <OsIf_GetCounter>
    ebca:	4603      	mov	r3, r0
    ebcc:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    ebce:	e00f      	b.n	ebf0 <FlexCAN_Init+0x54>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ebd0:	ab02      	add	r3, sp, #8
    ebd2:	2100      	movs	r1, #0
    ebd4:	4618      	mov	r0, r3
    ebd6:	f7f3 f904 	bl	1de2 <OsIf_GetElapsed>
    ebda:	4602      	mov	r2, r0
    ebdc:	9b05      	ldr	r3, [sp, #20]
    ebde:	4413      	add	r3, r2
    ebe0:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    ebe2:	9a05      	ldr	r2, [sp, #20]
    ebe4:	9b03      	ldr	r3, [sp, #12]
    ebe6:	429a      	cmp	r2, r3
    ebe8:	d302      	bcc.n	ebf0 <FlexCAN_Init+0x54>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    ebea:	2303      	movs	r3, #3
    ebec:	9304      	str	r3, [sp, #16]
            break;
    ebee:	e005      	b.n	ebfc <FlexCAN_Init+0x60>
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    ebf0:	9b01      	ldr	r3, [sp, #4]
    ebf2:	681b      	ldr	r3, [r3, #0]
    ebf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    ebf8:	2b00      	cmp	r3, #0
    ebfa:	d1e9      	bne.n	ebd0 <FlexCAN_Init+0x34>
        }
    }
    if (FLEXCAN_STATUS_SUCCESS == returnResult)
    ebfc:	9b04      	ldr	r3, [sp, #16]
    ebfe:	2b00      	cmp	r3, #0
    ec00:	d136      	bne.n	ec70 <FlexCAN_Init+0xd4>
    {
        /* Avoid Abort Transmission, use Inactive MB */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_AEN_MASK) | FLEXCAN_MCR_AEN(1U);
    ec02:	9b01      	ldr	r3, [sp, #4]
    ec04:	681b      	ldr	r3, [r3, #0]
    ec06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    ec0a:	9b01      	ldr	r3, [sp, #4]
    ec0c:	601a      	str	r2, [r3, #0]
        /* Clear FlexCAN memory */
        FlexCAN_ClearRAM(base);
    ec0e:	9801      	ldr	r0, [sp, #4]
    ec10:	f7ff fd40 	bl	e694 <FlexCAN_ClearRAM>
        /* Rx global mask*/
        (base->RXMGMASK) = (uint32)(FLEXCAN_RXMGMASK_MG_MASK);
    ec14:	9b01      	ldr	r3, [sp, #4]
    ec16:	f04f 32ff 	mov.w	r2, #4294967295
    ec1a:	611a      	str	r2, [r3, #16]
        /* Rx reg 14 mask*/
        (base->RX14MASK) =  (uint32)(FLEXCAN_RX14MASK_RX14M_MASK);
    ec1c:	9b01      	ldr	r3, [sp, #4]
    ec1e:	f04f 32ff 	mov.w	r2, #4294967295
    ec22:	615a      	str	r2, [r3, #20]
        /* Rx reg 15 mask*/
        (base->RX15MASK) = (uint32)(FLEXCAN_RX15MASK_RX15M_MASK);
    ec24:	9b01      	ldr	r3, [sp, #4]
    ec26:	f04f 32ff 	mov.w	r2, #4294967295
    ec2a:	619a      	str	r2, [r3, #24]
        /* Disable all MB interrupts */
        (base->IMASK1) = 0x0;
    ec2c:	9b01      	ldr	r3, [sp, #4]
    ec2e:	2200      	movs	r2, #0
    ec30:	629a      	str	r2, [r3, #40]	; 0x28
        /* Clear all MB interrupt flags */
        (base->IFLAG1) = FLEXCAN_IMASK1_BUF31TO0M_MASK;
    ec32:	9b01      	ldr	r3, [sp, #4]
    ec34:	f04f 32ff 	mov.w	r2, #4294967295
    ec38:	631a      	str	r2, [r3, #48]	; 0x30
            (base->IMASK4) = 0x0;
            (base->IFLAG4) = FLEXCAN_IMASK4_BUF127TO96M_MASK;
        }
#endif
        /* Clear all error interrupt flags */
        (base->ESR1) = FLEXCAN_IP_ALL_INT;
    ec3a:	9b01      	ldr	r3, [sp, #4]
    ec3c:	4a10      	ldr	r2, [pc, #64]	; (ec80 <FlexCAN_Init+0xe4>)
    ec3e:	621a      	str	r2, [r3, #32]
        /* clear registers which are not effected by soft reset */
        base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    ec40:	9b01      	ldr	r3, [sp, #4]
    ec42:	2200      	movs	r2, #0
    ec44:	605a      	str	r2, [r3, #4]
        base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    ec46:	9b01      	ldr	r3, [sp, #4]
    ec48:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    ec4c:	635a      	str	r2, [r3, #52]	; 0x34
        base->CBT   = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    ec4e:	9b01      	ldr	r3, [sp, #4]
    ec50:	2200      	movs	r2, #0
    ec52:	651a      	str	r2, [r3, #80]	; 0x50
        base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
        base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    ec54:	9801      	ldr	r0, [sp, #4]
    ec56:	f000 f85b 	bl	ed10 <FlexCAN_IsFDAvailable>
    ec5a:	4603      	mov	r3, r0
    ec5c:	2b00      	cmp	r3, #0
    ec5e:	d007      	beq.n	ec70 <FlexCAN_Init+0xd4>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    ec60:	9b01      	ldr	r3, [sp, #4]
    ec62:	2200      	movs	r2, #0
    ec64:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    ec68:	9b01      	ldr	r3, [sp, #4]
    ec6a:	4a06      	ldr	r2, [pc, #24]	; (ec84 <FlexCAN_Init+0xe8>)
    ec6c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    #if defined(CAN_FEATURE_S32K1XX)
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
#endif /* (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON) */
    }
    return returnResult;
    ec70:	9b04      	ldr	r3, [sp, #16]
}
    ec72:	4618      	mov	r0, r3
    ec74:	b007      	add	sp, #28
    ec76:	f85d fb04 	ldr.w	pc, [sp], #4
    ec7a:	bf00      	nop
    ec7c:	000f4240 	.word	0x000f4240
    ec80:	003b0006 	.word	0x003b0006
    ec84:	80004100 	.word	0x80004100

0000ec88 <FlexCAN_EnableRxFifo>:
 * This function will enable the Rx FIFO feature.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnableRxFifo(FLEXCAN_Type * base,
                                         uint32 numOfFilters)
{
    ec88:	b500      	push	{lr}
    ec8a:	b087      	sub	sp, #28
    ec8c:	9001      	str	r0, [sp, #4]
    ec8e:	9100      	str	r1, [sp, #0]
    uint32 i;
    uint16 noOfMbx = (uint16)FlexCAN_GetMaxMbNum(base);
    ec90:	9801      	ldr	r0, [sp, #4]
    ec92:	f7ff fdfb 	bl	e88c <FlexCAN_GetMaxMbNum>
    ec96:	4603      	mov	r3, r0
    ec98:	f8ad 300e 	strh.w	r3, [sp, #14]
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    ec9c:	2300      	movs	r3, #0
    ec9e:	9304      	str	r3, [sp, #16]

    /* RxFIFO cannot be enabled if FD is enabled */
    if (((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U)
    eca0:	9b01      	ldr	r3, [sp, #4]
    eca2:	681b      	ldr	r3, [r3, #0]
    eca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    eca8:	2b00      	cmp	r3, #0
    ecaa:	d001      	beq.n	ecb0 <FlexCAN_EnableRxFifo+0x28>
    {
        stat = FLEXCAN_STATUS_ERROR;
    ecac:	2301      	movs	r3, #1
    ecae:	9304      	str	r3, [sp, #16]
    }
    if (FLEXCAN_STATUS_SUCCESS == stat)
    ecb0:	9b04      	ldr	r3, [sp, #16]
    ecb2:	2b00      	cmp	r3, #0
    ecb4:	d127      	bne.n	ed06 <FlexCAN_EnableRxFifo+0x7e>
    {
        /* Enable RX FIFO */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_RFEN_MASK) | FLEXCAN_MCR_RFEN(1U);
    ecb6:	9b01      	ldr	r3, [sp, #4]
    ecb8:	681b      	ldr	r3, [r3, #0]
    ecba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
    ecbe:	9b01      	ldr	r3, [sp, #4]
    ecc0:	601a      	str	r2, [r3, #0]
        /* Set the number of the RX FIFO filters needed */
        base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RFFN_MASK) | ((numOfFilters << FLEXCAN_CTRL2_RFFN_SHIFT) & FLEXCAN_CTRL2_RFFN_MASK);
    ecc2:	9b01      	ldr	r3, [sp, #4]
    ecc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ecc6:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    ecca:	9b00      	ldr	r3, [sp, #0]
    eccc:	061b      	lsls	r3, r3, #24
    ecce:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    ecd2:	431a      	orrs	r2, r3
    ecd4:	9b01      	ldr	r3, [sp, #4]
    ecd6:	635a      	str	r2, [r3, #52]	; 0x34
        /* RX FIFO global mask, take in consideration all filter fields*/
        (base->RXFGMASK) = FLEXCAN_RXFGMASK_FGM_MASK;
    ecd8:	9b01      	ldr	r3, [sp, #4]
    ecda:	f04f 32ff 	mov.w	r2, #4294967295
    ecde:	649a      	str	r2, [r3, #72]	; 0x48

        for (i = 0U; i < noOfMbx; i++)
    ece0:	2300      	movs	r3, #0
    ece2:	9305      	str	r3, [sp, #20]
    ece4:	e00a      	b.n	ecfc <FlexCAN_EnableRxFifo+0x74>
        {
            /* RX individual mask */
            base->RXIMR[i] = (FLEXCAN_RXIMR_MI_MASK << FLEXCAN_IP_ID_EXT_SHIFT) & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    ece6:	9b01      	ldr	r3, [sp, #4]
    ece8:	9a05      	ldr	r2, [sp, #20]
    ecea:	f502 7208 	add.w	r2, r2, #544	; 0x220
    ecee:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    ecf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = 0U; i < noOfMbx; i++)
    ecf6:	9b05      	ldr	r3, [sp, #20]
    ecf8:	3301      	adds	r3, #1
    ecfa:	9305      	str	r3, [sp, #20]
    ecfc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ed00:	9a05      	ldr	r2, [sp, #20]
    ed02:	429a      	cmp	r2, r3
    ed04:	d3ef      	bcc.n	ece6 <FlexCAN_EnableRxFifo+0x5e>
        }
    }
    return stat;
    ed06:	9b04      	ldr	r3, [sp, #16]
}
    ed08:	4618      	mov	r0, r3
    ed0a:	b007      	add	sp, #28
    ed0c:	f85d fb04 	ldr.w	pc, [sp], #4

0000ed10 <FlexCAN_IsFDAvailable>:
 * Description   : Checks if FlexCAN has FD Support.
 * This function is private.
 *
 *END**************************************************************************/
boolean FlexCAN_IsFDAvailable(const FLEXCAN_Type * base)
{
    ed10:	b084      	sub	sp, #16
    ed12:	9001      	str	r0, [sp, #4]
    uint32 i=0U;
    ed14:	2300      	movs	r3, #0
    ed16:	9303      	str	r3, [sp, #12]
    static FLEXCAN_Type * const flexcanBase[] = CAN_BASE_PTRS_HAS_FD;
    boolean returnValue = FALSE;
    ed18:	2300      	movs	r3, #0
    ed1a:	f88d 300b 	strb.w	r3, [sp, #11]
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    ed1e:	2300      	movs	r3, #0
    ed20:	9303      	str	r3, [sp, #12]
    ed22:	e00d      	b.n	ed40 <FlexCAN_IsFDAvailable+0x30>
    {
        if (base == flexcanBase[i])
    ed24:	4a0a      	ldr	r2, [pc, #40]	; (ed50 <FlexCAN_IsFDAvailable+0x40>)
    ed26:	9b03      	ldr	r3, [sp, #12]
    ed28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed2c:	9a01      	ldr	r2, [sp, #4]
    ed2e:	429a      	cmp	r2, r3
    ed30:	d103      	bne.n	ed3a <FlexCAN_IsFDAvailable+0x2a>
        {
            returnValue = TRUE;
    ed32:	2301      	movs	r3, #1
    ed34:	f88d 300b 	strb.w	r3, [sp, #11]
            break;
    ed38:	e005      	b.n	ed46 <FlexCAN_IsFDAvailable+0x36>
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    ed3a:	9b03      	ldr	r3, [sp, #12]
    ed3c:	3301      	adds	r3, #1
    ed3e:	9303      	str	r3, [sp, #12]
    ed40:	9b03      	ldr	r3, [sp, #12]
    ed42:	2b00      	cmp	r3, #0
    ed44:	d0ee      	beq.n	ed24 <FlexCAN_IsFDAvailable+0x14>
        }
    }

    return returnValue;
    ed46:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    ed4a:	4618      	mov	r0, r3
    ed4c:	b004      	add	sp, #16
    ed4e:	4770      	bx	lr
    ed50:	0001854c 	.word	0x0001854c

0000ed54 <FlexCAN_SetPayloadSize>:
 * Description   : Sets the payload size of the MBs.
 *
 *END**************************************************************************/
void FlexCAN_SetPayloadSize(FLEXCAN_Type * base,
                            const Flexcan_Ip_PayloadSizeType * payloadSize)
{
    ed54:	b500      	push	{lr}
    ed56:	b085      	sub	sp, #20
    ed58:	9001      	str	r0, [sp, #4]
    ed5a:	9100      	str	r1, [sp, #0]
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
    DevAssert(FlexCAN_IsFDEnabled(base) || (FLEXCAN_PAYLOAD_SIZE_8 == payloadSize->payloadBlock3));
    #endif
#endif
    /* If FD is not enabled, only 8 bytes payload is supported */
    if (FlexCAN_IsFDEnabled(base))
    ed5c:	9801      	ldr	r0, [sp, #4]
    ed5e:	f7ff fbd6 	bl	e50e <FlexCAN_IsFDEnabled>
    ed62:	4603      	mov	r3, r0
    ed64:	2b00      	cmp	r3, #0
    ed66:	d011      	beq.n	ed8c <FlexCAN_SetPayloadSize+0x38>
    {
        tmp = base->FDCTRL;
    ed68:	9b01      	ldr	r3, [sp, #4]
    ed6a:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    ed6e:	9303      	str	r3, [sp, #12]
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR0_MASK);
    ed70:	9b03      	ldr	r3, [sp, #12]
    ed72:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    ed76:	9303      	str	r3, [sp, #12]
        tmp |= ((uint32)payloadSize->payloadBlock0) << FLEXCAN_FDCTRL_MBDSR0_SHIFT;
    ed78:	9b00      	ldr	r3, [sp, #0]
    ed7a:	681b      	ldr	r3, [r3, #0]
    ed7c:	041b      	lsls	r3, r3, #16
    ed7e:	9a03      	ldr	r2, [sp, #12]
    ed80:	4313      	orrs	r3, r2
    ed82:	9303      	str	r3, [sp, #12]
#endif
#if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR3_MASK);
        tmp |= ((uint32)payloadSize->payloadBlock3) << FLEXCAN_FDCTRL_MBDSR3_SHIFT;
#endif
        base->FDCTRL = tmp;
    ed84:	9b01      	ldr	r3, [sp, #4]
    ed86:	9a03      	ldr	r2, [sp, #12]
    ed88:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
}
    ed8c:	bf00      	nop
    ed8e:	b005      	add	sp, #20
    ed90:	f85d fb04 	ldr.w	pc, [sp], #4

0000ed94 <FlexCAN_GetPayloadSize>:
 * Function Name : FLEXCAN_GetPayloadSize
 * Description   : Returns the payload size of the MBs (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_GetPayloadSize(const FLEXCAN_Type * base, uint8 mbdsrIdx)
{
    ed94:	b500      	push	{lr}
    ed96:	b085      	sub	sp, #20
    ed98:	9001      	str	r0, [sp, #4]
    ed9a:	460b      	mov	r3, r1
    ed9c:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 payloadSize = 0U;
    eda0:	2300      	movs	r3, #0
    eda2:	9303      	str	r3, [sp, #12]

#if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    eda4:	9801      	ldr	r0, [sp, #4]
    eda6:	f7ff ffb3 	bl	ed10 <FlexCAN_IsFDAvailable>
    edaa:	4603      	mov	r3, r0
    edac:	2b00      	cmp	r3, #0
    edae:	d019      	beq.n	ede4 <FlexCAN_GetPayloadSize+0x50>
    {
#endif /* defined(CAN_FEATURE_S32K1XX) */
    switch (mbdsrIdx)
    edb0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    edb4:	2b00      	cmp	r3, #0
    edb6:	d10a      	bne.n	edce <FlexCAN_GetPayloadSize+0x3a>
    {
        case 0 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    edb8:	9b01      	ldr	r3, [sp, #4]
    edba:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    edbe:	0c1b      	lsrs	r3, r3, #16
    edc0:	f003 0303 	and.w	r3, r3, #3
    edc4:	2208      	movs	r2, #8
    edc6:	fa02 f303 	lsl.w	r3, r2, r3
    edca:	9303      	str	r3, [sp, #12]
    edcc:	e00c      	b.n	ede8 <FlexCAN_GetPayloadSize+0x54>
        case 2 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR2_MASK) >> FLEXCAN_FDCTRL_MBDSR2_SHIFT); } break;
    #endif
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        case 3 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR3_MASK) >> FLEXCAN_FDCTRL_MBDSR3_SHIFT); } break;
    #endif
        default :{  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    edce:	9b01      	ldr	r3, [sp, #4]
    edd0:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    edd4:	0c1b      	lsrs	r3, r3, #16
    edd6:	f003 0303 	and.w	r3, r3, #3
    edda:	2208      	movs	r2, #8
    eddc:	fa02 f303 	lsl.w	r3, r2, r3
    ede0:	9303      	str	r3, [sp, #12]
    ede2:	e001      	b.n	ede8 <FlexCAN_GetPayloadSize+0x54>
    }
    #if defined(CAN_FEATURE_S32K1XX)
    }
    else
    {
        payloadSize = 8U;
    ede4:	2308      	movs	r3, #8
    ede6:	9303      	str	r3, [sp, #12]
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
    return (uint8)payloadSize;
    ede8:	9b03      	ldr	r3, [sp, #12]
    edea:	b2db      	uxtb	r3, r3
}
    edec:	4618      	mov	r0, r3
    edee:	b005      	add	sp, #20
    edf0:	f85d fb04 	ldr.w	pc, [sp], #4

0000edf4 <FlexCAN_GetMbPayloadSize>:



uint8 FlexCAN_GetMbPayloadSize(const FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    edf4:	b500      	push	{lr}
    edf6:	b087      	sub	sp, #28
    edf8:	9001      	str	r0, [sp, #4]
    edfa:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    edfc:	2308      	movs	r3, #8
    edfe:	f88d 3014 	strb.w	r3, [sp, #20]
    uint32 ramBlockSize = 512U;
    ee02:	f44f 7300 	mov.w	r3, #512	; 0x200
    ee06:	9304      	str	r3, [sp, #16]
    uint8 can_real_payload = 8U;
    ee08:	2308      	movs	r3, #8
    ee0a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 maxMbBlockNum = 0U;
    ee0e:	2300      	movs	r3, #0
    ee10:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8 i=0U;
    ee14:	2300      	movs	r3, #0
    ee16:	f88d 3015 	strb.w	r3, [sp, #21]
    uint8 mb_size = 0U;
    ee1a:	2300      	movs	r3, #0
    ee1c:	f88d 300f 	strb.w	r3, [sp, #15]

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    ee20:	2300      	movs	r3, #0
    ee22:	f88d 3015 	strb.w	r3, [sp, #21]
    ee26:	e024      	b.n	ee72 <FlexCAN_GetMbPayloadSize+0x7e>
    {
        /* Check that the number of MBs is supported based on the payload size*/
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        can_real_payload = FlexCAN_GetPayloadSize(base, i);
    ee28:	f89d 3015 	ldrb.w	r3, [sp, #21]
    ee2c:	4619      	mov	r1, r3
    ee2e:	9801      	ldr	r0, [sp, #4]
    ee30:	f7ff ffb0 	bl	ed94 <FlexCAN_GetPayloadSize>
    ee34:	4603      	mov	r3, r0
    ee36:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* Else can_real_payload will remain as 8 payload size */
        mb_size = (uint8)(can_real_payload + arbitration_field_size);
    ee3a:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ee3e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ee42:	4413      	add	r3, r2
    ee44:	f88d 300f 	strb.w	r3, [sp, #15]
        maxMbBlockNum += (uint8)(ramBlockSize / mb_size);
    ee48:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ee4c:	9a04      	ldr	r2, [sp, #16]
    ee4e:	fbb2 f3f3 	udiv	r3, r2, r3
    ee52:	b2da      	uxtb	r2, r3
    ee54:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ee58:	4413      	add	r3, r2
    ee5a:	f88d 3016 	strb.w	r3, [sp, #22]
        if (maxMbBlockNum > maxMsgBuffNum)
    ee5e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ee62:	9a00      	ldr	r2, [sp, #0]
    ee64:	429a      	cmp	r2, r3
    ee66:	d309      	bcc.n	ee7c <FlexCAN_GetMbPayloadSize+0x88>
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    ee68:	f89d 3015 	ldrb.w	r3, [sp, #21]
    ee6c:	3301      	adds	r3, #1
    ee6e:	f88d 3015 	strb.w	r3, [sp, #21]
    ee72:	f89d 3015 	ldrb.w	r3, [sp, #21]
    ee76:	2b00      	cmp	r3, #0
    ee78:	d0d6      	beq.n	ee28 <FlexCAN_GetMbPayloadSize+0x34>
    ee7a:	e000      	b.n	ee7e <FlexCAN_GetMbPayloadSize+0x8a>
        {
            break;
    ee7c:	bf00      	nop
    {
        can_real_payload = 64U;
    }
 #endif

    return can_real_payload;
    ee7e:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    ee82:	4618      	mov	r0, r3
    ee84:	b007      	add	sp, #28
    ee86:	f85d fb04 	ldr.w	pc, [sp], #4

0000ee8a <FlexCAN_LockRxMsgBuff>:
 * Description   : Lock the RX message buffer.
 * This function will lock the RX message buffer.
 *
 *END**************************************************************************/
void FlexCAN_LockRxMsgBuff(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    ee8a:	b500      	push	{lr}
    ee8c:	b085      	sub	sp, #20
    ee8e:	9001      	str	r0, [sp, #4]
    ee90:	9100      	str	r1, [sp, #0]
    volatile const uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    ee92:	9900      	ldr	r1, [sp, #0]
    ee94:	9801      	ldr	r0, [sp, #4]
    ee96:	f7ff fc7f 	bl	e798 <FlexCAN_GetMsgBuffRegion>
    ee9a:	9003      	str	r0, [sp, #12]

    /* Lock the mailbox by reading it */
    (void)*flexcan_mb;
    ee9c:	9b03      	ldr	r3, [sp, #12]
    ee9e:	681b      	ldr	r3, [r3, #0]
}
    eea0:	bf00      	nop
    eea2:	b005      	add	sp, #20
    eea4:	f85d fb04 	ldr.w	pc, [sp], #4

0000eea8 <FlexCAN_SetMsgBuffIntCmd>:
                                               uint8 u8Instance,
                                               uint32 msgBuffIdx,
                                               boolean enable,
                                               boolean bIsIntActive
                                              )
{
    eea8:	b500      	push	{lr}
    eeaa:	b087      	sub	sp, #28
    eeac:	9003      	str	r0, [sp, #12]
    eeae:	9201      	str	r2, [sp, #4]
    eeb0:	461a      	mov	r2, r3
    eeb2:	460b      	mov	r3, r1
    eeb4:	f88d 300b 	strb.w	r3, [sp, #11]
    eeb8:	4613      	mov	r3, r2
    eeba:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp;
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    eebe:	2300      	movs	r3, #0
    eec0:	9305      	str	r3, [sp, #20]

        /* Enable the corresponding message buffer Interrupt */
        temp = 1UL << (msgBuffIdx % 32U);
    eec2:	9b01      	ldr	r3, [sp, #4]
    eec4:	f003 031f 	and.w	r3, r3, #31
    eec8:	2201      	movs	r2, #1
    eeca:	fa02 f303 	lsl.w	r3, r2, r3
    eece:	9304      	str	r3, [sp, #16]
        if (msgBuffIdx < 32U)
    eed0:	9b01      	ldr	r3, [sp, #4]
    eed2:	2b1f      	cmp	r3, #31
    eed4:	d837      	bhi.n	ef46 <FlexCAN_SetMsgBuffIntCmd+0x9e>
        {
            if (enable)
    eed6:	f89d 300a 	ldrb.w	r3, [sp, #10]
    eeda:	2b00      	cmp	r3, #0
    eedc:	d01b      	beq.n	ef16 <FlexCAN_SetMsgBuffIntCmd+0x6e>
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    eede:	f005 fc5d 	bl	1479c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) | (temp));
    eee2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    eee6:	4a1a      	ldr	r2, [pc, #104]	; (ef50 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    eee8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    eeec:	f89d 300b 	ldrb.w	r3, [sp, #11]
    eef0:	9a04      	ldr	r2, [sp, #16]
    eef2:	430a      	orrs	r2, r1
    eef4:	4916      	ldr	r1, [pc, #88]	; (ef50 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    eef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (TRUE == bIsIntActive)
    eefa:	f89d 3020 	ldrb.w	r3, [sp, #32]
    eefe:	2b00      	cmp	r3, #0
    ef00:	d006      	beq.n	ef10 <FlexCAN_SetMsgBuffIntCmd+0x68>
                {
                    base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    ef02:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ef06:	4a12      	ldr	r2, [pc, #72]	; (ef50 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    ef08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    ef0c:	9b03      	ldr	r3, [sp, #12]
    ef0e:	629a      	str	r2, [r3, #40]	; 0x28
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    ef10:	f005 fc70 	bl	147f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
    ef14:	e017      	b.n	ef46 <FlexCAN_SetMsgBuffIntCmd+0x9e>
            }
            else
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    ef16:	f005 fc41 	bl	1479c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) & ~(temp));
    ef1a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ef1e:	4a0c      	ldr	r2, [pc, #48]	; (ef50 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    ef20:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    ef24:	9b04      	ldr	r3, [sp, #16]
    ef26:	43da      	mvns	r2, r3
    ef28:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ef2c:	400a      	ands	r2, r1
    ef2e:	4908      	ldr	r1, [pc, #32]	; (ef50 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    ef30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    ef34:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ef38:	4a05      	ldr	r2, [pc, #20]	; (ef50 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    ef3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    ef3e:	9b03      	ldr	r3, [sp, #12]
    ef40:	629a      	str	r2, [r3, #40]	; 0x28
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    ef42:	f005 fc57 	bl	147f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
            }
        }
#endif /* if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */

    return stat;
    ef46:	9b05      	ldr	r3, [sp, #20]
}
    ef48:	4618      	mov	r0, r3
    ef4a:	b007      	add	sp, #28
    ef4c:	f85d fb04 	ldr.w	pc, [sp], #4
    ef50:	1fff9368 	.word	0x1fff9368

0000ef54 <FLEXCAN_ClearMsgBuffIntCmd>:
void FLEXCAN_ClearMsgBuffIntCmd(FLEXCAN_Type * pBase,
                                uint8 u8Instance,
                                uint32 mb_idx,
                                boolean bIsIntActive
                               )
{
    ef54:	b500      	push	{lr}
    ef56:	b087      	sub	sp, #28
    ef58:	9003      	str	r0, [sp, #12]
    ef5a:	9201      	str	r2, [sp, #4]
    ef5c:	461a      	mov	r2, r3
    ef5e:	460b      	mov	r3, r1
    ef60:	f88d 300b 	strb.w	r3, [sp, #11]
    ef64:	4613      	mov	r3, r2
    ef66:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp = (1UL << (mb_idx % 32U));
    ef6a:	9b01      	ldr	r3, [sp, #4]
    ef6c:	f003 031f 	and.w	r3, r3, #31
    ef70:	2201      	movs	r2, #1
    ef72:	fa02 f303 	lsl.w	r3, r2, r3
    ef76:	9305      	str	r3, [sp, #20]

 /* Stop the running transfer. */
    if (mb_idx < 32U)
    ef78:	9b01      	ldr	r3, [sp, #4]
    ef7a:	2b1f      	cmp	r3, #31
    ef7c:	d818      	bhi.n	efb0 <FLEXCAN_ClearMsgBuffIntCmd+0x5c>
    {
          /* Start critical section: implementation depends on integrator */
          SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    ef7e:	f005 f9cf 	bl	14320 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
          FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = (pBase->IMASK1 & (~temp));
    ef82:	9b03      	ldr	r3, [sp, #12]
    ef84:	6a99      	ldr	r1, [r3, #40]	; 0x28
    ef86:	9b05      	ldr	r3, [sp, #20]
    ef88:	43da      	mvns	r2, r3
    ef8a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ef8e:	400a      	ands	r2, r1
    ef90:	4909      	ldr	r1, [pc, #36]	; (efb8 <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    ef92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          if (TRUE == bIsIntActive)
    ef96:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ef9a:	2b00      	cmp	r3, #0
    ef9c:	d006      	beq.n	efac <FLEXCAN_ClearMsgBuffIntCmd+0x58>
          {
              pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    ef9e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    efa2:	4a05      	ldr	r2, [pc, #20]	; (efb8 <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    efa4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    efa8:	9b03      	ldr	r3, [sp, #12]
    efaa:	629a      	str	r2, [r3, #40]	; 0x28
          }
          /* End critical section: implementation depends on integrator */
          SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    efac:	f005 f9e4 	bl	14378 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    }
#endif /* #if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */
}
    efb0:	bf00      	nop
    efb2:	b007      	add	sp, #28
    efb4:	f85d fb04 	ldr.w	pc, [sp], #4
    efb8:	1fff9368 	.word	0x1fff9368

0000efbc <FlexCAN_DisableInterrupts>:


void FlexCAN_DisableInterrupts(FLEXCAN_Type * pBase)
{
    efbc:	b082      	sub	sp, #8
    efbe:	9001      	str	r0, [sp, #4]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = 0U;
    efc0:	9b01      	ldr	r3, [sp, #4]
    efc2:	2200      	movs	r2, #0
    efc4:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = 0U;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    efc6:	bf00      	nop
    efc8:	b002      	add	sp, #8
    efca:	4770      	bx	lr

0000efcc <FlexCAN_EnableInterrupts>:

void FlexCAN_EnableInterrupts(FLEXCAN_Type * pBase, uint8 u8Instance)
{
    efcc:	b082      	sub	sp, #8
    efce:	9001      	str	r0, [sp, #4]
    efd0:	460b      	mov	r3, r1
    efd2:	f88d 3003 	strb.w	r3, [sp, #3]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    efd6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    efda:	4a04      	ldr	r2, [pc, #16]	; (efec <FlexCAN_EnableInterrupts+0x20>)
    efdc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    efe0:	9b01      	ldr	r3, [sp, #4]
    efe2:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = FlexCAN_Ip_au32ImaskBuff[u8Instance][3U];
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    efe4:	bf00      	nop
    efe6:	b002      	add	sp, #8
    efe8:	4770      	bx	lr
    efea:	bf00      	nop
    efec:	1fff9368 	.word	0x1fff9368

0000eff0 <FlexCAN_SetRxMsgBuff>:
void FlexCAN_SetRxMsgBuff(const FLEXCAN_Type * base,
                          uint32 msgBuffIdx,
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId
                         )
{
    eff0:	b500      	push	{lr}
    eff2:	b087      	sub	sp, #28
    eff4:	9003      	str	r0, [sp, #12]
    eff6:	9102      	str	r1, [sp, #8]
    eff8:	9201      	str	r2, [sp, #4]
    effa:	9300      	str	r3, [sp, #0]
    volatile uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    effc:	9902      	ldr	r1, [sp, #8]
    effe:	9803      	ldr	r0, [sp, #12]
    f000:	f7ff fbca 	bl	e798 <FlexCAN_GetMsgBuffRegion>
    f004:	9005      	str	r0, [sp, #20]
    volatile uint32 * flexcan_mb_id = &flexcan_mb[1];
    f006:	9b05      	ldr	r3, [sp, #20]
    f008:	3304      	adds	r3, #4
    f00a:	9304      	str	r3, [sp, #16]
    DevAssert(cs != NULL_PTR);
#endif


    /* Clean up the arbitration field area */
    *flexcan_mb = 0;
    f00c:	9b05      	ldr	r3, [sp, #20]
    f00e:	2200      	movs	r2, #0
    f010:	601a      	str	r2, [r3, #0]
    *flexcan_mb_id = 0;
    f012:	9b04      	ldr	r3, [sp, #16]
    f014:	2200      	movs	r2, #0
    f016:	601a      	str	r2, [r3, #0]

    /* Set the ID according the format structure */
    if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    f018:	9b01      	ldr	r3, [sp, #4]
    f01a:	685b      	ldr	r3, [r3, #4]
    f01c:	2b01      	cmp	r3, #1
    f01e:	d119      	bne.n	f054 <FlexCAN_SetRxMsgBuff+0x64>
    {
        /* Set IDE */
        *flexcan_mb |= FLEXCAN_IP_CS_IDE_MASK;
    f020:	9b05      	ldr	r3, [sp, #20]
    f022:	681b      	ldr	r3, [r3, #0]
    f024:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    f028:	9b05      	ldr	r3, [sp, #20]
    f02a:	601a      	str	r2, [r3, #0]

        /* Clear SRR bit */
        *flexcan_mb &= ~FLEXCAN_IP_CS_SRR_MASK;
    f02c:	9b05      	ldr	r3, [sp, #20]
    f02e:	681b      	ldr	r3, [r3, #0]
    f030:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
    f034:	9b05      	ldr	r3, [sp, #20]
    f036:	601a      	str	r2, [r3, #0]

        /* ID [28-0] */
        *flexcan_mb_id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    f038:	9b04      	ldr	r3, [sp, #16]
    f03a:	681b      	ldr	r3, [r3, #0]
    f03c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    f040:	9b04      	ldr	r3, [sp, #16]
    f042:	601a      	str	r2, [r3, #0]
        *flexcan_mb_id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    f044:	9b04      	ldr	r3, [sp, #16]
    f046:	681a      	ldr	r2, [r3, #0]
    f048:	9b00      	ldr	r3, [sp, #0]
    f04a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    f04e:	431a      	orrs	r2, r3
    f050:	9b04      	ldr	r3, [sp, #16]
    f052:	601a      	str	r2, [r3, #0]
    }

    if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    f054:	9b01      	ldr	r3, [sp, #4]
    f056:	685b      	ldr	r3, [r3, #4]
    f058:	2b00      	cmp	r3, #0
    f05a:	d116      	bne.n	f08a <FlexCAN_SetRxMsgBuff+0x9a>
    {
        /* Make sure IDE and SRR are not set */
        *flexcan_mb &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    f05c:	9b05      	ldr	r3, [sp, #20]
    f05e:	681b      	ldr	r3, [r3, #0]
    f060:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
    f064:	9b05      	ldr	r3, [sp, #20]
    f066:	601a      	str	r2, [r3, #0]

        /* ID[28-18] */
        *flexcan_mb_id &= ~FLEXCAN_IP_ID_STD_MASK;
    f068:	9b04      	ldr	r3, [sp, #16]
    f06a:	681b      	ldr	r3, [r3, #0]
    f06c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    f070:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    f074:	9a04      	ldr	r2, [sp, #16]
    f076:	6013      	str	r3, [r2, #0]
        *flexcan_mb_id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    f078:	9b04      	ldr	r3, [sp, #16]
    f07a:	681a      	ldr	r2, [r3, #0]
    f07c:	9b00      	ldr	r3, [sp, #0]
    f07e:	0499      	lsls	r1, r3, #18
    f080:	4b0e      	ldr	r3, [pc, #56]	; (f0bc <FlexCAN_SetRxMsgBuff+0xcc>)
    f082:	400b      	ands	r3, r1
    f084:	431a      	orrs	r2, r3
    f086:	9b04      	ldr	r3, [sp, #16]
    f088:	601a      	str	r2, [r3, #0]
    }

    /* Set MB CODE */
    if ((uint32)FLEXCAN_RX_NOT_USED != cs->code)
    f08a:	9b01      	ldr	r3, [sp, #4]
    f08c:	681b      	ldr	r3, [r3, #0]
    f08e:	2b0f      	cmp	r3, #15
    f090:	d00f      	beq.n	f0b2 <FlexCAN_SetRxMsgBuff+0xc2>
    {
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    f092:	9b05      	ldr	r3, [sp, #20]
    f094:	681b      	ldr	r3, [r3, #0]
    f096:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    f09a:	9b05      	ldr	r3, [sp, #20]
    f09c:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    f09e:	9b05      	ldr	r3, [sp, #20]
    f0a0:	681a      	ldr	r2, [r3, #0]
    f0a2:	9b01      	ldr	r3, [sp, #4]
    f0a4:	681b      	ldr	r3, [r3, #0]
    f0a6:	061b      	lsls	r3, r3, #24
    f0a8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    f0ac:	431a      	orrs	r2, r3
    f0ae:	9b05      	ldr	r3, [sp, #20]
    f0b0:	601a      	str	r2, [r3, #0]
    }
}
    f0b2:	bf00      	nop
    f0b4:	b007      	add	sp, #28
    f0b6:	f85d fb04 	ldr.w	pc, [sp], #4
    f0ba:	bf00      	nop
    f0bc:	1ffc0000 	.word	0x1ffc0000

0000f0c0 <FlexCAN_GetMsgBuffTimestamp>:
 * Function Name : FlexCAN_GetMsgBuffTimestamp
 * Description   : Get a message buffer timestamp value.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMsgBuffTimestamp(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    f0c0:	b500      	push	{lr}
    f0c2:	b085      	sub	sp, #20
    f0c4:	9001      	str	r0, [sp, #4]
    f0c6:	9100      	str	r1, [sp, #0]
    uint32 TimeStamp = 0U;
    f0c8:	2300      	movs	r3, #0
    f0ca:	9303      	str	r3, [sp, #12]
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    f0cc:	9900      	ldr	r1, [sp, #0]
    f0ce:	9801      	ldr	r0, [sp, #4]
    f0d0:	f7ff fb62 	bl	e798 <FlexCAN_GetMsgBuffRegion>
    f0d4:	9002      	str	r0, [sp, #8]
        TimeStamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        TimeStamp = (uint32)((*Flexcan_Mb & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    f0d6:	9b02      	ldr	r3, [sp, #8]
    f0d8:	681b      	ldr	r3, [r3, #0]
    f0da:	b29b      	uxth	r3, r3
    f0dc:	9303      	str	r3, [sp, #12]
    }
    return TimeStamp;
    f0de:	9b03      	ldr	r3, [sp, #12]
}
    f0e0:	4618      	mov	r0, r3
    f0e2:	b005      	add	sp, #20
    f0e4:	f85d fb04 	ldr.w	pc, [sp], #4

0000f0e8 <FlexCAN_GetMsgBuff>:
 *END**************************************************************************/
void FlexCAN_GetMsgBuff(const FLEXCAN_Type * base,
                        uint32 msgBuffIdx,
                        Flexcan_Ip_MsgBuffType * msgBuff
                       )
{
    f0e8:	b500      	push	{lr}
    f0ea:	b08d      	sub	sp, #52	; 0x34
    f0ec:	9003      	str	r0, [sp, #12]
    f0ee:	9102      	str	r1, [sp, #8]
    f0f0:	9201      	str	r2, [sp, #4]

    uint8 i;
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    f0f2:	9902      	ldr	r1, [sp, #8]
    f0f4:	9803      	ldr	r0, [sp, #12]
    f0f6:	f7ff fb4f 	bl	e798 <FlexCAN_GetMsgBuffRegion>
    f0fa:	900a      	str	r0, [sp, #40]	; 0x28
    volatile const uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    f0fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f0fe:	3304      	adds	r3, #4
    f100:	9309      	str	r3, [sp, #36]	; 0x24
    volatile const uint8 * Flexcan_Mb_Data = (volatile const uint8 *)(&Flexcan_Mb[2]);
    f102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f104:	3308      	adds	r3, #8
    f106:	9308      	str	r3, [sp, #32]
    volatile const uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    f108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f10a:	3308      	adds	r3, #8
    f10c:	9307      	str	r3, [sp, #28]
    uint32 * MsgBuff_Data_32 = NULL_PTR;
    f10e:	2300      	movs	r3, #0
    f110:	9306      	str	r3, [sp, #24]
    uint32 MbWord;

    uint8 Flexcan_Mb_Dlc_Value = (uint8)(((*Flexcan_Mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    f112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f114:	681b      	ldr	r3, [r3, #0]
    f116:	0c1b      	lsrs	r3, r3, #16
    f118:	b2db      	uxtb	r3, r3
    f11a:	f003 030f 	and.w	r3, r3, #15
    f11e:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Payload_Size = FlexCAN_ComputePayloadSize(Flexcan_Mb_Dlc_Value);
    f122:	f89d 3017 	ldrb.w	r3, [sp, #23]
    f126:	4618      	mov	r0, r3
    f128:	f7ff faed 	bl	e706 <FlexCAN_ComputePayloadSize>
    f12c:	4603      	mov	r3, r0
    f12e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(msgBuff != NULL_PTR);
#endif
    /* Asign after NULL Check */
    MsgBuff_Data_32 = (uint32 *)(msgBuff->data);
    f132:	9b01      	ldr	r3, [sp, #4]
    f134:	3308      	adds	r3, #8
    f136:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    /* Payload Size is based on MBDSR for 1 MBDSR corresponds 32 * 8Bytes MBs  */
    if (Payload_Size > FlexCAN_GetMbPayloadSize(base, msgBuffIdx))
    f138:	9902      	ldr	r1, [sp, #8]
    f13a:	9803      	ldr	r0, [sp, #12]
    f13c:	f7ff fe5a 	bl	edf4 <FlexCAN_GetMbPayloadSize>
    f140:	4603      	mov	r3, r0
    f142:	461a      	mov	r2, r3
    f144:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    f148:	4293      	cmp	r3, r2
    f14a:	d906      	bls.n	f15a <FlexCAN_GetMsgBuff+0x72>
    {
        Payload_Size = FlexCAN_GetMbPayloadSize(base, msgBuffIdx);
    f14c:	9902      	ldr	r1, [sp, #8]
    f14e:	9803      	ldr	r0, [sp, #12]
    f150:	f7ff fe50 	bl	edf4 <FlexCAN_GetMbPayloadSize>
    f154:	4603      	mov	r3, r0
    f156:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    msgBuff->dataLen = Payload_Size;
    f15a:	9b01      	ldr	r3, [sp, #4]
    f15c:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    f160:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Get a MB field values */
    msgBuff->cs = *Flexcan_Mb;
    f164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f166:	681a      	ldr	r2, [r3, #0]
    f168:	9b01      	ldr	r3, [sp, #4]
    f16a:	601a      	str	r2, [r3, #0]
    if ((msgBuff->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    f16c:	9b01      	ldr	r3, [sp, #4]
    f16e:	681b      	ldr	r3, [r3, #0]
    f170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    f174:	2b00      	cmp	r3, #0
    f176:	d004      	beq.n	f182 <FlexCAN_GetMsgBuff+0x9a>
    {
        msgBuff->msgId = (*Flexcan_Mb_Id);
    f178:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f17a:	681a      	ldr	r2, [r3, #0]
    f17c:	9b01      	ldr	r3, [sp, #4]
    f17e:	605a      	str	r2, [r3, #4]
    f180:	e004      	b.n	f18c <FlexCAN_GetMsgBuff+0xa4>
    }
    else
    {
        msgBuff->msgId = (*Flexcan_Mb_Id) >> FLEXCAN_IP_ID_STD_SHIFT;
    f182:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f184:	681b      	ldr	r3, [r3, #0]
    f186:	0c9a      	lsrs	r2, r3, #18
    f188:	9b01      	ldr	r3, [sp, #4]
    f18a:	605a      	str	r2, [r3, #4]
        msgBuff->time_stamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        msgBuff->time_stamp = (uint32)((msgBuff->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    f18c:	9b01      	ldr	r3, [sp, #4]
    f18e:	681b      	ldr	r3, [r3, #0]
    f190:	b29a      	uxth	r2, r3
    f192:	9b01      	ldr	r3, [sp, #4]
    f194:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, MsgBuff_Data_32[i >> 2U]);
        }
    }

#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    f196:	2300      	movs	r3, #0
    f198:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    f19c:	e025      	b.n	f1ea <FlexCAN_GetMsgBuff+0x102>
    {
        MbWord = Flexcan_Mb_Data_32[i >> 2U];
    f19e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f1a2:	089b      	lsrs	r3, r3, #2
    f1a4:	b2db      	uxtb	r3, r3
    f1a6:	009b      	lsls	r3, r3, #2
    f1a8:	9a07      	ldr	r2, [sp, #28]
    f1aa:	4413      	add	r3, r2
    f1ac:	681b      	ldr	r3, [r3, #0]
    f1ae:	9304      	str	r3, [sp, #16]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (MsgBuff_Data_32[i >> 2U]));
    f1b0:	9b04      	ldr	r3, [sp, #16]
    f1b2:	0e1a      	lsrs	r2, r3, #24
    f1b4:	9b04      	ldr	r3, [sp, #16]
    f1b6:	0a1b      	lsrs	r3, r3, #8
    f1b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    f1bc:	431a      	orrs	r2, r3
    f1be:	9b04      	ldr	r3, [sp, #16]
    f1c0:	021b      	lsls	r3, r3, #8
    f1c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    f1c6:	ea42 0103 	orr.w	r1, r2, r3
    f1ca:	9b04      	ldr	r3, [sp, #16]
    f1cc:	061a      	lsls	r2, r3, #24
    f1ce:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f1d2:	089b      	lsrs	r3, r3, #2
    f1d4:	b2db      	uxtb	r3, r3
    f1d6:	009b      	lsls	r3, r3, #2
    f1d8:	9806      	ldr	r0, [sp, #24]
    f1da:	4403      	add	r3, r0
    f1dc:	430a      	orrs	r2, r1
    f1de:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    f1e0:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f1e4:	3304      	adds	r3, #4
    f1e6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    f1ea:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    f1ee:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    f1f2:	f023 0303 	bic.w	r3, r3, #3
    f1f6:	429a      	cmp	r2, r3
    f1f8:	d3d1      	bcc.n	f19e <FlexCAN_GetMsgBuff+0xb6>
    }

#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (; i < Payload_Size; i++)
    f1fa:	e014      	b.n	f226 <FlexCAN_GetMsgBuff+0x13e>
    {   /* Max allowed value for index is 63 */
        msgBuff->data[i] = Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(i)];
    f1fc:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f200:	f083 0303 	eor.w	r3, r3, #3
    f204:	b2db      	uxtb	r3, r3
    f206:	461a      	mov	r2, r3
    f208:	9b08      	ldr	r3, [sp, #32]
    f20a:	441a      	add	r2, r3
    f20c:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f210:	7812      	ldrb	r2, [r2, #0]
    f212:	b2d1      	uxtb	r1, r2
    f214:	9a01      	ldr	r2, [sp, #4]
    f216:	4413      	add	r3, r2
    f218:	460a      	mov	r2, r1
    f21a:	721a      	strb	r2, [r3, #8]
    for (; i < Payload_Size; i++)
    f21c:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    f220:	3301      	adds	r3, #1
    f222:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    f226:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    f22a:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    f22e:	429a      	cmp	r2, r3
    f230:	d3e4      	bcc.n	f1fc <FlexCAN_GetMsgBuff+0x114>
    }
}
    f232:	bf00      	nop
    f234:	bf00      	nop
    f236:	b00d      	add	sp, #52	; 0x34
    f238:	f85d fb04 	ldr.w	pc, [sp], #4

0000f23c <FlexCAN_SetTxMsgBuff>:
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId,
                          const uint8 * msgData,
                          const boolean isRemote
                         )
{
    f23c:	b500      	push	{lr}
    f23e:	b08d      	sub	sp, #52	; 0x34
    f240:	9003      	str	r0, [sp, #12]
    f242:	9102      	str	r1, [sp, #8]
    f244:	9201      	str	r2, [sp, #4]
    f246:	9300      	str	r3, [sp, #0]
    uint32 Flexcan_Mb_Config = 0;
    f248:	2300      	movs	r3, #0
    f24a:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 DataByte;
    uint8 Dlc_Value;
    uint8 Payload_Size;
    volatile uint32 * Flexcan_Mb = pMbAddr;
    f24c:	9b03      	ldr	r3, [sp, #12]
    f24e:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    f250:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f252:	3304      	adds	r3, #4
    f254:	9308      	str	r3, [sp, #32]
    volatile uint8 * Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    f256:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f258:	3308      	adds	r3, #8
    f25a:	9307      	str	r3, [sp, #28]
    volatile uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    f25c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f25e:	3308      	adds	r3, #8
    f260:	9306      	str	r3, [sp, #24]
    const uint32 * MsgData_32 = (const uint32*)msgData;
    f262:	9b00      	ldr	r3, [sp, #0]
    f264:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(cs != NULL_PTR);
    #endif

        /* Clean up the arbitration field area and set TxMB Inactive */
        *Flexcan_Mb = (uint32)((((uint32)FLEXCAN_TX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    f266:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f268:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    f26c:	601a      	str	r2, [r3, #0]
        *Flexcan_Mb_Id = 0;
    f26e:	9b08      	ldr	r3, [sp, #32]
    f270:	2200      	movs	r2, #0
    f272:	601a      	str	r2, [r3, #0]

        /* Compute the value of the DLC field */
        Dlc_Value = FlexCAN_ComputeDLCValue((uint8)cs->dataLen);
    f274:	9b02      	ldr	r3, [sp, #8]
    f276:	689b      	ldr	r3, [r3, #8]
    f278:	b2db      	uxtb	r3, r3
    f27a:	4618      	mov	r0, r3
    f27c:	f7ff f9f4 	bl	e668 <FlexCAN_ComputeDLCValue>
    f280:	4603      	mov	r3, r0
    f282:	f88d 3013 	strb.w	r3, [sp, #19]
        /* Copy user's buffer into the message buffer data area */
        if (msgData != NULL_PTR)
    f286:	9b00      	ldr	r3, [sp, #0]
    f288:	2b00      	cmp	r3, #0
    f28a:	d065      	beq.n	f358 <FlexCAN_SetTxMsgBuff+0x11c>
        {
#if (defined(S32K116) || defined (S32K118))
            (void)MsgData_32;
            DataByte = FlexCAN_DataTransferTxMsgBuff(Flexcan_Mb_Data_32, cs, msgData);
#else
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    f28c:	2300      	movs	r3, #0
    f28e:	930a      	str	r3, [sp, #40]	; 0x28
    f290:	e02c      	b.n	f2ec <FlexCAN_SetTxMsgBuff+0xb0>
            {
                FLEXCAN_IP_SWAP_BYTES_IN_WORD((MsgData_32[DataByte >> 2U]), (Flexcan_Mb_Data_32[DataByte >> 2U]));
    f292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f294:	089b      	lsrs	r3, r3, #2
    f296:	009b      	lsls	r3, r3, #2
    f298:	9a05      	ldr	r2, [sp, #20]
    f29a:	4413      	add	r3, r2
    f29c:	681b      	ldr	r3, [r3, #0]
    f29e:	0e1a      	lsrs	r2, r3, #24
    f2a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f2a2:	089b      	lsrs	r3, r3, #2
    f2a4:	009b      	lsls	r3, r3, #2
    f2a6:	9905      	ldr	r1, [sp, #20]
    f2a8:	440b      	add	r3, r1
    f2aa:	681b      	ldr	r3, [r3, #0]
    f2ac:	0a1b      	lsrs	r3, r3, #8
    f2ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    f2b2:	431a      	orrs	r2, r3
    f2b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f2b6:	089b      	lsrs	r3, r3, #2
    f2b8:	009b      	lsls	r3, r3, #2
    f2ba:	9905      	ldr	r1, [sp, #20]
    f2bc:	440b      	add	r3, r1
    f2be:	681b      	ldr	r3, [r3, #0]
    f2c0:	021b      	lsls	r3, r3, #8
    f2c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    f2c6:	ea42 0103 	orr.w	r1, r2, r3
    f2ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f2cc:	089b      	lsrs	r3, r3, #2
    f2ce:	009b      	lsls	r3, r3, #2
    f2d0:	9a05      	ldr	r2, [sp, #20]
    f2d2:	4413      	add	r3, r2
    f2d4:	681b      	ldr	r3, [r3, #0]
    f2d6:	061a      	lsls	r2, r3, #24
    f2d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f2da:	089b      	lsrs	r3, r3, #2
    f2dc:	009b      	lsls	r3, r3, #2
    f2de:	9806      	ldr	r0, [sp, #24]
    f2e0:	4403      	add	r3, r0
    f2e2:	430a      	orrs	r2, r1
    f2e4:	601a      	str	r2, [r3, #0]
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    f2e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f2e8:	3304      	adds	r3, #4
    f2ea:	930a      	str	r3, [sp, #40]	; 0x28
    f2ec:	9b02      	ldr	r3, [sp, #8]
    f2ee:	689b      	ldr	r3, [r3, #8]
    f2f0:	f023 0303 	bic.w	r3, r3, #3
    f2f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f2f6:	429a      	cmp	r2, r3
    f2f8:	d3cb      	bcc.n	f292 <FlexCAN_SetTxMsgBuff+0x56>
            }
#endif /* (defined(S32K116) || defined (S32K118)) */
            for ( ; DataByte < cs->dataLen; DataByte++)
    f2fa:	e00c      	b.n	f316 <FlexCAN_SetTxMsgBuff+0xda>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] =  msgData[DataByte];
    f2fc:	9a00      	ldr	r2, [sp, #0]
    f2fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f300:	441a      	add	r2, r3
    f302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f304:	f083 0303 	eor.w	r3, r3, #3
    f308:	9907      	ldr	r1, [sp, #28]
    f30a:	440b      	add	r3, r1
    f30c:	7812      	ldrb	r2, [r2, #0]
    f30e:	701a      	strb	r2, [r3, #0]
            for ( ; DataByte < cs->dataLen; DataByte++)
    f310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f312:	3301      	adds	r3, #1
    f314:	930a      	str	r3, [sp, #40]	; 0x28
    f316:	9b02      	ldr	r3, [sp, #8]
    f318:	689b      	ldr	r3, [r3, #8]
    f31a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f31c:	429a      	cmp	r2, r3
    f31e:	d3ed      	bcc.n	f2fc <FlexCAN_SetTxMsgBuff+0xc0>
            }
        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            Payload_Size = FlexCAN_ComputePayloadSize(Dlc_Value);
    f320:	f89d 3013 	ldrb.w	r3, [sp, #19]
    f324:	4618      	mov	r0, r3
    f326:	f7ff f9ee 	bl	e706 <FlexCAN_ComputePayloadSize>
    f32a:	4603      	mov	r3, r0
    f32c:	f88d 3012 	strb.w	r3, [sp, #18]
            /* Add padding, if needed */
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    f330:	9b02      	ldr	r3, [sp, #8]
    f332:	689b      	ldr	r3, [r3, #8]
    f334:	930a      	str	r3, [sp, #40]	; 0x28
    f336:	e00a      	b.n	f34e <FlexCAN_SetTxMsgBuff+0x112>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] = cs->fd_padding;
    f338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f33a:	f083 0303 	eor.w	r3, r3, #3
    f33e:	9a07      	ldr	r2, [sp, #28]
    f340:	4413      	add	r3, r2
    f342:	9a02      	ldr	r2, [sp, #8]
    f344:	7b52      	ldrb	r2, [r2, #13]
    f346:	701a      	strb	r2, [r3, #0]
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    f348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f34a:	3301      	adds	r3, #1
    f34c:	930a      	str	r3, [sp, #40]	; 0x28
    f34e:	f89d 3012 	ldrb.w	r3, [sp, #18]
    f352:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f354:	429a      	cmp	r2, r3
    f356:	d3ef      	bcc.n	f338 <FlexCAN_SetTxMsgBuff+0xfc>
            }
        #endif /* FLEXCAN_IP_FEATURE_HAS_FD */
        }
        /* Set the ID according the format structure */
        if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    f358:	9b02      	ldr	r3, [sp, #8]
    f35a:	685b      	ldr	r3, [r3, #4]
    f35c:	2b01      	cmp	r3, #1
    f35e:	d111      	bne.n	f384 <FlexCAN_SetTxMsgBuff+0x148>
        {
            /* ID [28-0] */
            *Flexcan_Mb_Id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    f360:	9b08      	ldr	r3, [sp, #32]
    f362:	681b      	ldr	r3, [r3, #0]
    f364:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    f368:	9b08      	ldr	r3, [sp, #32]
    f36a:	601a      	str	r2, [r3, #0]
            *Flexcan_Mb_Id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    f36c:	9b08      	ldr	r3, [sp, #32]
    f36e:	681a      	ldr	r2, [r3, #0]
    f370:	9b01      	ldr	r3, [sp, #4]
    f372:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    f376:	431a      	orrs	r2, r3
    f378:	9b08      	ldr	r3, [sp, #32]
    f37a:	601a      	str	r2, [r3, #0]
            /* Set IDE and SRR bit*/
            Flexcan_Mb_Config |= (FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    f37c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f37e:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
    f382:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    f384:	9b02      	ldr	r3, [sp, #8]
    f386:	685b      	ldr	r3, [r3, #4]
    f388:	2b00      	cmp	r3, #0
    f38a:	d114      	bne.n	f3b6 <FlexCAN_SetTxMsgBuff+0x17a>
        {
            /* ID[28-18] */
            *Flexcan_Mb_Id &= ~FLEXCAN_IP_ID_STD_MASK;
    f38c:	9b08      	ldr	r3, [sp, #32]
    f38e:	681b      	ldr	r3, [r3, #0]
    f390:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    f394:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    f398:	9a08      	ldr	r2, [sp, #32]
    f39a:	6013      	str	r3, [r2, #0]
            *Flexcan_Mb_Id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    f39c:	9b08      	ldr	r3, [sp, #32]
    f39e:	681a      	ldr	r2, [r3, #0]
    f3a0:	9b01      	ldr	r3, [sp, #4]
    f3a2:	0499      	lsls	r1, r3, #18
    f3a4:	4b2b      	ldr	r3, [pc, #172]	; (f454 <FlexCAN_SetTxMsgBuff+0x218>)
    f3a6:	400b      	ands	r3, r1
    f3a8:	431a      	orrs	r2, r3
    f3aa:	9b08      	ldr	r3, [sp, #32]
    f3ac:	601a      	str	r2, [r3, #0]
            /* make sure IDE and SRR are not set */
            Flexcan_Mb_Config &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    f3ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f3b0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
    f3b4:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        /* Set the length of data in bytes */
        Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_DLC_MASK;
    f3b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f3b8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    f3bc:	930b      	str	r3, [sp, #44]	; 0x2c
        Flexcan_Mb_Config |= ((uint32)Dlc_Value << FLEXCAN_IP_CS_DLC_SHIFT) & FLEXCAN_IP_CS_DLC_MASK;
    f3be:	f89d 3013 	ldrb.w	r3, [sp, #19]
    f3c2:	041b      	lsls	r3, r3, #16
    f3c4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    f3c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f3ca:	4313      	orrs	r3, r2
    f3cc:	930b      	str	r3, [sp, #44]	; 0x2c
        /* Set MB CODE */
        if (cs->code != (uint32)FLEXCAN_TX_NOT_USED)
    f3ce:	9b02      	ldr	r3, [sp, #8]
    f3d0:	681b      	ldr	r3, [r3, #0]
    f3d2:	2b0f      	cmp	r3, #15
    f3d4:	d03a      	beq.n	f44c <FlexCAN_SetTxMsgBuff+0x210>
        {
            if ((uint32)FLEXCAN_TX_REMOTE == cs->code)
    f3d6:	9b02      	ldr	r3, [sp, #8]
    f3d8:	681b      	ldr	r3, [r3, #0]
    f3da:	2b1c      	cmp	r3, #28
    f3dc:	d104      	bne.n	f3e8 <FlexCAN_SetTxMsgBuff+0x1ac>
            {
                /* Set RTR bit */
                Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    f3de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f3e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f3e4:	930b      	str	r3, [sp, #44]	; 0x2c
    f3e6:	e007      	b.n	f3f8 <FlexCAN_SetTxMsgBuff+0x1bc>
            }
            else
            {
                if (TRUE == isRemote)
    f3e8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    f3ec:	2b00      	cmp	r3, #0
    f3ee:	d003      	beq.n	f3f8 <FlexCAN_SetTxMsgBuff+0x1bc>
                {
                    /* Set RTR bit */
                    Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    f3f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f3f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f3f6:	930b      	str	r3, [sp, #44]	; 0x2c
                }
            }
            /* Reset the code */
            Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_CODE_MASK;
    f3f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f3fa:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    f3fe:	930b      	str	r3, [sp, #44]	; 0x2c
            /* Set the code */
            if (cs->fd_enable)
    f400:	9b02      	ldr	r3, [sp, #8]
    f402:	7b1b      	ldrb	r3, [r3, #12]
    f404:	2b00      	cmp	r3, #0
    f406:	d00e      	beq.n	f426 <FlexCAN_SetTxMsgBuff+0x1ea>
            {
                Flexcan_Mb_Config |= ((cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK) | FLEXCAN_IP_MB_EDL_MASK;
    f408:	9b02      	ldr	r3, [sp, #8]
    f40a:	681b      	ldr	r3, [r3, #0]
    f40c:	061b      	lsls	r3, r3, #24
    f40e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
    f412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f414:	4313      	orrs	r3, r2
    f416:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    f41a:	930b      	str	r3, [sp, #44]	; 0x2c
                /* In case of FD frame not supported RTR */
                Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_RTR_MASK;
    f41c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f41e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    f422:	930b      	str	r3, [sp, #44]	; 0x2c
    f424:	e007      	b.n	f436 <FlexCAN_SetTxMsgBuff+0x1fa>
            }
            else
            {
                Flexcan_Mb_Config |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    f426:	9b02      	ldr	r3, [sp, #8]
    f428:	681b      	ldr	r3, [r3, #0]
    f42a:	061b      	lsls	r3, r3, #24
    f42c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    f430:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f432:	4313      	orrs	r3, r2
    f434:	930b      	str	r3, [sp, #44]	; 0x2c
            }

            if (cs->enable_brs)
    f436:	9b02      	ldr	r3, [sp, #8]
    f438:	7b9b      	ldrb	r3, [r3, #14]
    f43a:	2b00      	cmp	r3, #0
    f43c:	d003      	beq.n	f446 <FlexCAN_SetTxMsgBuff+0x20a>
            {
                Flexcan_Mb_Config |= FLEXCAN_IP_MB_BRS_MASK;
    f43e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f440:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    f444:	930b      	str	r3, [sp, #44]	; 0x2c
            }
            *Flexcan_Mb = Flexcan_Mb_Config;
    f446:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f448:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f44a:	601a      	str	r2, [r3, #0]
        }
}
    f44c:	bf00      	nop
    f44e:	b00d      	add	sp, #52	; 0x34
    f450:	f85d fb04 	ldr.w	pc, [sp], #4
    f454:	1ffc0000 	.word	0x1ffc0000

0000f458 <FlexCAN_SetMaxMsgBuffNum>:
 * Description   : Set the number of the last Message Buffers.
 * This function will define the number of the last Message Buffers
 *
 *END***************************************************************************/
Flexcan_Ip_StatusType FlexCAN_SetMaxMsgBuffNum(FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    f458:	b500      	push	{lr}
    f45a:	b08f      	sub	sp, #60	; 0x3c
    f45c:	9001      	str	r0, [sp, #4]
    f45e:	9100      	str	r1, [sp, #0]
    uint32 MsgBuffIdx;
    uint32 DataByte;
    const volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    f460:	9b01      	ldr	r3, [sp, #4]
    f462:	3380      	adds	r3, #128	; 0x80
    f464:	930a      	str	r3, [sp, #40]	; 0x28
#if (STD_ON == FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY)
    const volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */
    const volatile uint32 * ValEndMbPointer = NULL_PTR;
    f466:	2300      	movs	r3, #0
    f468:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 *Flexcan_Mb = NULL_PTR;
    f46a:	2300      	movs	r3, #0
    f46c:	9308      	str	r3, [sp, #32]
    volatile uint32 *Flexcan_Mb_Id   = NULL_PTR ;
    f46e:	2300      	movs	r3, #0
    f470:	9307      	str	r3, [sp, #28]
    volatile uint8  *Flexcan_Mb_Data = NULL_PTR;
    f472:	2300      	movs	r3, #0
    f474:	9306      	str	r3, [sp, #24]
    uint8 Arbitration_Field_Size = 8U;
    f476:	2308      	movs	r3, #8
    f478:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, maxMsgBuffNum - (uint32)1U);
    f47c:	9b00      	ldr	r3, [sp, #0]
    f47e:	3b01      	subs	r3, #1
    f480:	4619      	mov	r1, r3
    f482:	9801      	ldr	r0, [sp, #4]
    f484:	f7ff fcb6 	bl	edf4 <FlexCAN_GetMbPayloadSize>
    f488:	4603      	mov	r3, r0
    f48a:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_PtrSizeType ValEndMb = 0U;
    f48e:	2300      	movs	r3, #0
    f490:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_PtrSizeType ValEndRam = 0U;
    f492:	2300      	movs	r3, #0
    f494:	9303      	str	r3, [sp, #12]
    Flexcan_Ip_StatusType Status = FLEXCAN_STATUS_SUCCESS;
    f496:	2300      	movs	r3, #0
    f498:	930b      	str	r3, [sp, #44]	; 0x2c

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(maxMsgBuffNum>0U);
    #endif

    ValEndMbPointer = FlexCAN_GetMsgBuffRegion(base, (maxMsgBuffNum - (uint32)1U));
    f49a:	9b00      	ldr	r3, [sp, #0]
    f49c:	3b01      	subs	r3, #1
    f49e:	4619      	mov	r1, r3
    f4a0:	9801      	ldr	r0, [sp, #4]
    f4a2:	f7ff f979 	bl	e798 <FlexCAN_GetMsgBuffRegion>
    f4a6:	9009      	str	r0, [sp, #36]	; 0x24

    ValEndMb = (Flexcan_Ip_PtrSizeType)ValEndMbPointer + Can_Real_Payload + Arbitration_Field_Size;
    f4a8:	f89d 2016 	ldrb.w	r2, [sp, #22]
    f4ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f4ae:	441a      	add	r2, r3
    f4b0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    f4b4:	4413      	add	r3, r2
    f4b6:	9304      	str	r3, [sp, #16]
    else
    {
        ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    }
#else
    ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    f4b8:	9801      	ldr	r0, [sp, #4]
    f4ba:	f7ff f9e7 	bl	e88c <FlexCAN_GetMaxMbNum>
    f4be:	4603      	mov	r3, r0
    f4c0:	011b      	lsls	r3, r3, #4
    f4c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f4c4:	4413      	add	r3, r2
    f4c6:	9303      	str	r3, [sp, #12]
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */

    if ((ValEndMb > ValEndRam) || (maxMsgBuffNum > FlexCAN_GetMaxMbNum(base)))
    f4c8:	9a04      	ldr	r2, [sp, #16]
    f4ca:	9b03      	ldr	r3, [sp, #12]
    f4cc:	429a      	cmp	r2, r3
    f4ce:	d806      	bhi.n	f4de <FlexCAN_SetMaxMsgBuffNum+0x86>
    f4d0:	9801      	ldr	r0, [sp, #4]
    f4d2:	f7ff f9db 	bl	e88c <FlexCAN_GetMaxMbNum>
    f4d6:	4602      	mov	r2, r0
    f4d8:	9b00      	ldr	r3, [sp, #0]
    f4da:	4293      	cmp	r3, r2
    f4dc:	d901      	bls.n	f4e2 <FlexCAN_SetMaxMsgBuffNum+0x8a>
    {
        Status = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    f4de:	2304      	movs	r3, #4
    f4e0:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    if (FLEXCAN_STATUS_SUCCESS == Status)
    f4e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f4e4:	2b00      	cmp	r3, #0
    f4e6:	d142      	bne.n	f56e <FlexCAN_SetMaxMsgBuffNum+0x116>
    {
        /* Set the maximum number of MBs*/
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MAXMB_MASK) | (((maxMsgBuffNum-1U) << FLEXCAN_MCR_MAXMB_SHIFT) & FLEXCAN_MCR_MAXMB_MASK);
    f4e8:	9b01      	ldr	r3, [sp, #4]
    f4ea:	681b      	ldr	r3, [r3, #0]
    f4ec:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
    f4f0:	9b00      	ldr	r3, [sp, #0]
    f4f2:	3b01      	subs	r3, #1
    f4f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f4f8:	431a      	orrs	r2, r3
    f4fa:	9b01      	ldr	r3, [sp, #4]
    f4fc:	601a      	str	r2, [r3, #0]
        if (!(((base->MCR & FLEXCAN_MCR_RFEN_MASK) >> FLEXCAN_MCR_RFEN_SHIFT) != 0U))
    f4fe:	9b01      	ldr	r3, [sp, #4]
    f500:	681b      	ldr	r3, [r3, #0]
    f502:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    f506:	2b00      	cmp	r3, #0
    f508:	d131      	bne.n	f56e <FlexCAN_SetMaxMsgBuffNum+0x116>
        {
            /* Initialize all message buffers as inactive */
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    f50a:	2300      	movs	r3, #0
    f50c:	930d      	str	r3, [sp, #52]	; 0x34
    f50e:	e02a      	b.n	f566 <FlexCAN_SetMaxMsgBuffNum+0x10e>
            {
                Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, MsgBuffIdx);
    f510:	990d      	ldr	r1, [sp, #52]	; 0x34
    f512:	9801      	ldr	r0, [sp, #4]
    f514:	f7ff f940 	bl	e798 <FlexCAN_GetMsgBuffRegion>
    f518:	9008      	str	r0, [sp, #32]
                Flexcan_Mb_Id   = &Flexcan_Mb[1];
    f51a:	9b08      	ldr	r3, [sp, #32]
    f51c:	3304      	adds	r3, #4
    f51e:	9307      	str	r3, [sp, #28]
                Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    f520:	9b08      	ldr	r3, [sp, #32]
    f522:	3308      	adds	r3, #8
    f524:	9306      	str	r3, [sp, #24]
                *Flexcan_Mb = 0x0U;
    f526:	9b08      	ldr	r3, [sp, #32]
    f528:	2200      	movs	r2, #0
    f52a:	601a      	str	r2, [r3, #0]
                *Flexcan_Mb_Id = 0x0U;
    f52c:	9b07      	ldr	r3, [sp, #28]
    f52e:	2200      	movs	r2, #0
    f530:	601a      	str	r2, [r3, #0]
                Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, MsgBuffIdx);
    f532:	990d      	ldr	r1, [sp, #52]	; 0x34
    f534:	9801      	ldr	r0, [sp, #4]
    f536:	f7ff fc5d 	bl	edf4 <FlexCAN_GetMbPayloadSize>
    f53a:	4603      	mov	r3, r0
    f53c:	f88d 3016 	strb.w	r3, [sp, #22]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    f540:	2300      	movs	r3, #0
    f542:	930c      	str	r3, [sp, #48]	; 0x30
    f544:	e007      	b.n	f556 <FlexCAN_SetMaxMsgBuffNum+0xfe>
                {
                   Flexcan_Mb_Data[DataByte] = 0x0U;
    f546:	9a06      	ldr	r2, [sp, #24]
    f548:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f54a:	4413      	add	r3, r2
    f54c:	2200      	movs	r2, #0
    f54e:	701a      	strb	r2, [r3, #0]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    f550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f552:	3301      	adds	r3, #1
    f554:	930c      	str	r3, [sp, #48]	; 0x30
    f556:	f89d 3016 	ldrb.w	r3, [sp, #22]
    f55a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f55c:	429a      	cmp	r2, r3
    f55e:	d3f2      	bcc.n	f546 <FlexCAN_SetMaxMsgBuffNum+0xee>
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    f560:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f562:	3301      	adds	r3, #1
    f564:	930d      	str	r3, [sp, #52]	; 0x34
    f566:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f568:	9b00      	ldr	r3, [sp, #0]
    f56a:	429a      	cmp	r2, r3
    f56c:	d3d0      	bcc.n	f510 <FlexCAN_SetMaxMsgBuffNum+0xb8>
                }
            }
        }
    }
    return Status;
    f56e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    f570:	4618      	mov	r0, r3
    f572:	b00f      	add	sp, #60	; 0x3c
    f574:	f85d fb04 	ldr.w	pc, [sp], #4

0000f578 <FlexCAN_SetOperationMode>:
 * Description   : Enable a FlexCAN operation mode.
 * This function will enable one of the modes listed in flexcan_operation_modes_t.
 *
 *END**************************************************************************/
void FlexCAN_SetOperationMode(FLEXCAN_Type * base, Flexcan_Ip_ModesType mode)
{
    f578:	b500      	push	{lr}
    f57a:	b083      	sub	sp, #12
    f57c:	9001      	str	r0, [sp, #4]
    f57e:	9100      	str	r1, [sp, #0]
    switch (mode)
    f580:	9b00      	ldr	r3, [sp, #0]
    f582:	2b02      	cmp	r3, #2
    f584:	d01d      	beq.n	f5c2 <FlexCAN_SetOperationMode+0x4a>
    f586:	9b00      	ldr	r3, [sp, #0]
    f588:	2b02      	cmp	r3, #2
    f58a:	d82b      	bhi.n	f5e4 <FlexCAN_SetOperationMode+0x6c>
    f58c:	9b00      	ldr	r3, [sp, #0]
    f58e:	2b00      	cmp	r3, #0
    f590:	d003      	beq.n	f59a <FlexCAN_SetOperationMode+0x22>
    f592:	9b00      	ldr	r3, [sp, #0]
    f594:	2b01      	cmp	r3, #1
    f596:	d00d      	beq.n	f5b4 <FlexCAN_SetOperationMode+0x3c>
            /* Enable Self Reception */
            FlexCAN_SetSelfReception(base, TRUE);
            break;
        default:
            /* Should not get here */
            break;
    f598:	e024      	b.n	f5e4 <FlexCAN_SetOperationMode+0x6c>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    f59a:	9b01      	ldr	r3, [sp, #4]
    f59c:	685b      	ldr	r3, [r3, #4]
    f59e:	f023 0208 	bic.w	r2, r3, #8
    f5a2:	9b01      	ldr	r3, [sp, #4]
    f5a4:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(0U);
    f5a6:	9b01      	ldr	r3, [sp, #4]
    f5a8:	685b      	ldr	r3, [r3, #4]
    f5aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    f5ae:	9b01      	ldr	r3, [sp, #4]
    f5b0:	605a      	str	r2, [r3, #4]
            break;
    f5b2:	e018      	b.n	f5e6 <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(1U);
    f5b4:	9b01      	ldr	r3, [sp, #4]
    f5b6:	685b      	ldr	r3, [r3, #4]
    f5b8:	f043 0208 	orr.w	r2, r3, #8
    f5bc:	9b01      	ldr	r3, [sp, #4]
    f5be:	605a      	str	r2, [r3, #4]
            break;
    f5c0:	e011      	b.n	f5e6 <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(1U);
    f5c2:	9b01      	ldr	r3, [sp, #4]
    f5c4:	685b      	ldr	r3, [r3, #4]
    f5c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    f5ca:	9b01      	ldr	r3, [sp, #4]
    f5cc:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    f5ce:	9b01      	ldr	r3, [sp, #4]
    f5d0:	685b      	ldr	r3, [r3, #4]
    f5d2:	f023 0208 	bic.w	r2, r3, #8
    f5d6:	9b01      	ldr	r3, [sp, #4]
    f5d8:	605a      	str	r2, [r3, #4]
            FlexCAN_SetSelfReception(base, TRUE);
    f5da:	2101      	movs	r1, #1
    f5dc:	9801      	ldr	r0, [sp, #4]
    f5de:	f7fe ff7f 	bl	e4e0 <FlexCAN_SetSelfReception>
            break;
    f5e2:	e000      	b.n	f5e6 <FlexCAN_SetOperationMode+0x6e>
            break;
    f5e4:	bf00      	nop
    }
}
    f5e6:	bf00      	nop
    f5e8:	b003      	add	sp, #12
    f5ea:	f85d fb04 	ldr.w	pc, [sp], #4

0000f5ee <FlexCAN_SetRxFifoFilter>:
 *END**************************************************************************/
void FlexCAN_SetRxFifoFilter(FLEXCAN_Type * base,
                             Flexcan_Ip_RxFifoIdElementFormatType idFormat,
                             const Flexcan_Ip_IdTableType * idFilterTable
                            )
{
    f5ee:	b500      	push	{lr}
    f5f0:	b08d      	sub	sp, #52	; 0x34
    f5f2:	9003      	str	r0, [sp, #12]
    f5f4:	9102      	str	r1, [sp, #8]
    f5f6:	9201      	str	r2, [sp, #4]

    /* Set RX FIFO ID filter table elements*/
    uint32 i, j, NumOfFilters;
    uint32 Val1 = 0UL, Val2 = 0UL, Val = 0UL;
    f5f8:	2300      	movs	r3, #0
    f5fa:	9309      	str	r3, [sp, #36]	; 0x24
    f5fc:	2300      	movs	r3, #0
    f5fe:	9308      	str	r3, [sp, #32]
    f600:	2300      	movs	r3, #0
    f602:	9307      	str	r3, [sp, #28]
    volatile uint32 * FilterTable = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_RX_FIFO_FILTER_TABLE_OFFSET);
    f604:	9b03      	ldr	r3, [sp, #12]
    f606:	33e0      	adds	r3, #224	; 0xe0
    f608:	9306      	str	r3, [sp, #24]

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert((idFilterTable != NULL_PTR) || (FLEXCAN_RX_FIFO_ID_FORMAT_D == idFormat));
    #endif

    NumOfFilters = (((base->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    f60a:	9b03      	ldr	r3, [sp, #12]
    f60c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f60e:	0e1b      	lsrs	r3, r3, #24
    f610:	f003 030f 	and.w	r3, r3, #15
    f614:	9305      	str	r3, [sp, #20]
    f616:	9b02      	ldr	r3, [sp, #8]
    f618:	2b03      	cmp	r3, #3
    f61a:	f200 81e7 	bhi.w	f9ec <FlexCAN_SetRxFifoFilter+0x3fe>
    f61e:	a201      	add	r2, pc, #4	; (adr r2, f624 <FlexCAN_SetRxFifoFilter+0x36>)
    f620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f624:	0000f635 	.word	0x0000f635
    f628:	0000f6cf 	.word	0x0000f6cf
    f62c:	0000f809 	.word	0x0000f809
    f630:	0000f9d7 	.word	0x0000f9d7
    switch (idFormat)
    {
        case (FLEXCAN_RX_FIFO_ID_FORMAT_A):
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f634:	f004 ff18 	bl	14468 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            /* One full ID (standard and extended) per ID Filter Table element.*/
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    f638:	9b03      	ldr	r3, [sp, #12]
    f63a:	681b      	ldr	r3, [r3, #0]
    f63c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
            (base->MCR) =
    f640:	9b03      	ldr	r3, [sp, #12]
    f642:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_A)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f644:	f004 ff3c 	bl	144c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f648:	2300      	movs	r3, #0
    f64a:	930b      	str	r3, [sp, #44]	; 0x2c
    f64c:	e038      	b.n	f6c0 <FlexCAN_SetRxFifoFilter+0xd2>
            {
                Val = 0UL;
    f64e:	2300      	movs	r3, #0
    f650:	9307      	str	r3, [sp, #28]

                if (idFilterTable[i].isRemoteFrame)
    f652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f654:	00db      	lsls	r3, r3, #3
    f656:	9a01      	ldr	r2, [sp, #4]
    f658:	4413      	add	r3, r2
    f65a:	781b      	ldrb	r3, [r3, #0]
    f65c:	2b00      	cmp	r3, #0
    f65e:	d002      	beq.n	f666 <FlexCAN_SetRxFifoFilter+0x78>
                {
                    Val = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    f660:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    f664:	9307      	str	r3, [sp, #28]
                }

                if (idFilterTable[i].isExtendedFrame)
    f666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f668:	00db      	lsls	r3, r3, #3
    f66a:	9a01      	ldr	r2, [sp, #4]
    f66c:	4413      	add	r3, r2
    f66e:	785b      	ldrb	r3, [r3, #1]
    f670:	2b00      	cmp	r3, #0
    f672:	d013      	beq.n	f69c <FlexCAN_SetRxFifoFilter+0xae>
                {
                    Val |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    f674:	9b07      	ldr	r3, [sp, #28]
    f676:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    f67a:	9307      	str	r3, [sp, #28]
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_SHIFT) &
    f67c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f67e:	00db      	lsls	r3, r3, #3
    f680:	9a01      	ldr	r2, [sp, #4]
    f682:	4413      	add	r3, r2
    f684:	685b      	ldr	r3, [r3, #4]
    f686:	005b      	lsls	r3, r3, #1
    f688:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
    f68c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f68e:	009b      	lsls	r3, r3, #2
    f690:	9a06      	ldr	r2, [sp, #24]
    f692:	4413      	add	r3, r2
    f694:	9a07      	ldr	r2, [sp, #28]
    f696:	440a      	add	r2, r1
    f698:	601a      	str	r2, [r3, #0]
    f69a:	e00e      	b.n	f6ba <FlexCAN_SetRxFifoFilter+0xcc>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_MASK
                                           );
                }
                else
                {
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_SHIFT) &
    f69c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f69e:	00db      	lsls	r3, r3, #3
    f6a0:	9a01      	ldr	r2, [sp, #4]
    f6a2:	4413      	add	r3, r2
    f6a4:	685b      	ldr	r3, [r3, #4]
    f6a6:	04da      	lsls	r2, r3, #19
    f6a8:	4b9d      	ldr	r3, [pc, #628]	; (f920 <FlexCAN_SetRxFifoFilter+0x332>)
    f6aa:	4013      	ands	r3, r2
    f6ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f6ae:	0092      	lsls	r2, r2, #2
    f6b0:	9906      	ldr	r1, [sp, #24]
    f6b2:	440a      	add	r2, r1
    f6b4:	9907      	ldr	r1, [sp, #28]
    f6b6:	440b      	add	r3, r1
    f6b8:	6013      	str	r3, [r2, #0]
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f6ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f6bc:	3301      	adds	r3, #1
    f6be:	930b      	str	r3, [sp, #44]	; 0x2c
    f6c0:	9b05      	ldr	r3, [sp, #20]
    f6c2:	3301      	adds	r3, #1
    f6c4:	00db      	lsls	r3, r3, #3
    f6c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f6c8:	429a      	cmp	r2, r3
    f6ca:	d3c0      	bcc.n	f64e <FlexCAN_SetRxFifoFilter+0x60>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_MASK
                                           );
                }
            }
            break;
    f6cc:	e18f      	b.n	f9ee <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_B):
            /* Two full standard IDs or two partial 14-bit (standard and extended) IDs*/
            /* per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f6ce:	f004 fecb 	bl	14468 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) | ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_B)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
    f6d2:	9b03      	ldr	r3, [sp, #12]
    f6d4:	681b      	ldr	r3, [r3, #0]
    f6d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    f6da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
            (base->MCR) =
    f6de:	9b03      	ldr	r3, [sp, #12]
    f6e0:	601a      	str	r2, [r3, #0]
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f6e2:	f004 feed 	bl	144c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    f6e6:	2300      	movs	r3, #0
    f6e8:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f6ea:	2300      	movs	r3, #0
    f6ec:	930b      	str	r3, [sp, #44]	; 0x2c
    f6ee:	e083      	b.n	f7f8 <FlexCAN_SetRxFifoFilter+0x20a>
            {
                Val1 = 0U;
    f6f0:	2300      	movs	r3, #0
    f6f2:	9309      	str	r3, [sp, #36]	; 0x24
                Val2 = 0U;
    f6f4:	2300      	movs	r3, #0
    f6f6:	9308      	str	r3, [sp, #32]

                if (idFilterTable[j].isRemoteFrame)
    f6f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f6fa:	00db      	lsls	r3, r3, #3
    f6fc:	9a01      	ldr	r2, [sp, #4]
    f6fe:	4413      	add	r3, r2
    f700:	781b      	ldrb	r3, [r3, #0]
    f702:	2b00      	cmp	r3, #0
    f704:	d002      	beq.n	f70c <FlexCAN_SetRxFifoFilter+0x11e>
                {
                    Val1 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    f706:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    f70a:	9309      	str	r3, [sp, #36]	; 0x24
                }

                if (idFilterTable[j + 1U].isRemoteFrame)
    f70c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f70e:	3301      	adds	r3, #1
    f710:	00db      	lsls	r3, r3, #3
    f712:	9a01      	ldr	r2, [sp, #4]
    f714:	4413      	add	r3, r2
    f716:	781b      	ldrb	r3, [r3, #0]
    f718:	2b00      	cmp	r3, #0
    f71a:	d002      	beq.n	f722 <FlexCAN_SetRxFifoFilter+0x134>
                {
                    Val2 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_RTR_SHIFT;
    f71c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    f720:	9308      	str	r3, [sp, #32]
                }

                if (idFilterTable[j].isExtendedFrame)
    f722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f724:	00db      	lsls	r3, r3, #3
    f726:	9a01      	ldr	r2, [sp, #4]
    f728:	4413      	add	r3, r2
    f72a:	785b      	ldrb	r3, [r3, #1]
    f72c:	2b00      	cmp	r3, #0
    f72e:	d014      	beq.n	f75a <FlexCAN_SetRxFifoFilter+0x16c>
                {
                    Val1 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    f730:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f732:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    f736:	9309      	str	r3, [sp, #36]	; 0x24

                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    f738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f73a:	00db      	lsls	r3, r3, #3
    f73c:	9a01      	ldr	r2, [sp, #4]
    f73e:	4413      	add	r3, r2
    f740:	685b      	ldr	r3, [r3, #4]
    f742:	0bdb      	lsrs	r3, r3, #15
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT1
    f744:	041a      	lsls	r2, r3, #16
    f746:	4b77      	ldr	r3, [pc, #476]	; (f924 <FlexCAN_SetRxFifoFilter+0x336>)
    f748:	4013      	ands	r3, r2
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    f74a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f74c:	0092      	lsls	r2, r2, #2
    f74e:	9906      	ldr	r1, [sp, #24]
    f750:	440a      	add	r2, r1
    f752:	9909      	ldr	r1, [sp, #36]	; 0x24
    f754:	440b      	add	r3, r1
    f756:	6013      	str	r3, [r2, #0]
    f758:	e00e      	b.n	f778 <FlexCAN_SetRxFifoFilter+0x18a>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + ((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    f75a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f75c:	00db      	lsls	r3, r3, #3
    f75e:	9a01      	ldr	r2, [sp, #4]
    f760:	4413      	add	r3, r2
    f762:	685b      	ldr	r3, [r3, #4]
    f764:	04da      	lsls	r2, r3, #19
    f766:	4b6e      	ldr	r3, [pc, #440]	; (f920 <FlexCAN_SetRxFifoFilter+0x332>)
    f768:	4013      	ands	r3, r2
    f76a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f76c:	0092      	lsls	r2, r2, #2
    f76e:	9906      	ldr	r1, [sp, #24]
    f770:	440a      	add	r2, r1
    f772:	9909      	ldr	r1, [sp, #36]	; 0x24
    f774:	440b      	add	r3, r1
    f776:	6013      	str	r3, [r2, #0]
                                              FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT1
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    f778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f77a:	3301      	adds	r3, #1
    f77c:	00db      	lsls	r3, r3, #3
    f77e:	9a01      	ldr	r2, [sp, #4]
    f780:	4413      	add	r3, r2
    f782:	785b      	ldrb	r3, [r3, #1]
    f784:	2b00      	cmp	r3, #0
    f786:	d01a      	beq.n	f7be <FlexCAN_SetRxFifoFilter+0x1d0>
                {
                    Val2 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_IDE_SHIFT;
    f788:	9b08      	ldr	r3, [sp, #32]
    f78a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    f78e:	9308      	str	r3, [sp, #32]

                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    f790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f792:	009b      	lsls	r3, r3, #2
    f794:	9a06      	ldr	r2, [sp, #24]
    f796:	4413      	add	r3, r2
    f798:	6819      	ldr	r1, [r3, #0]
    f79a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f79c:	3301      	adds	r3, #1
    f79e:	00db      	lsls	r3, r3, #3
    f7a0:	9a01      	ldr	r2, [sp, #4]
    f7a2:	4413      	add	r3, r2
    f7a4:	685b      	ldr	r3, [r3, #4]
    f7a6:	0bdb      	lsrs	r3, r3, #15
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT2
    f7a8:	f3c3 020d 	ubfx	r2, r3, #0, #14
                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    f7ac:	9b08      	ldr	r3, [sp, #32]
    f7ae:	441a      	add	r2, r3
    f7b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f7b2:	009b      	lsls	r3, r3, #2
    f7b4:	9806      	ldr	r0, [sp, #24]
    f7b6:	4403      	add	r3, r0
    f7b8:	430a      	orrs	r2, r1
    f7ba:	601a      	str	r2, [r3, #0]
    f7bc:	e016      	b.n	f7ec <FlexCAN_SetRxFifoFilter+0x1fe>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val2 + ((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    f7be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f7c0:	009b      	lsls	r3, r3, #2
    f7c2:	9a06      	ldr	r2, [sp, #24]
    f7c4:	4413      	add	r3, r2
    f7c6:	6819      	ldr	r1, [r3, #0]
    f7c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f7ca:	3301      	adds	r3, #1
    f7cc:	00db      	lsls	r3, r3, #3
    f7ce:	9a01      	ldr	r2, [sp, #4]
    f7d0:	4413      	add	r3, r2
    f7d2:	685b      	ldr	r3, [r3, #4]
    f7d4:	00da      	lsls	r2, r3, #3
    f7d6:	f643 73f8 	movw	r3, #16376	; 0x3ff8
    f7da:	4013      	ands	r3, r2
    f7dc:	9a08      	ldr	r2, [sp, #32]
    f7de:	441a      	add	r2, r3
    f7e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f7e2:	009b      	lsls	r3, r3, #2
    f7e4:	9806      	ldr	r0, [sp, #24]
    f7e6:	4403      	add	r3, r0
    f7e8:	430a      	orrs	r2, r1
    f7ea:	601a      	str	r2, [r3, #0]
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT2
                                             );
                }

                j = j + 2U;
    f7ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f7ee:	3302      	adds	r3, #2
    f7f0:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f7f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f7f4:	3301      	adds	r3, #1
    f7f6:	930b      	str	r3, [sp, #44]	; 0x2c
    f7f8:	9b05      	ldr	r3, [sp, #20]
    f7fa:	3301      	adds	r3, #1
    f7fc:	00db      	lsls	r3, r3, #3
    f7fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f800:	429a      	cmp	r2, r3
    f802:	f4ff af75 	bcc.w	f6f0 <FlexCAN_SetRxFifoFilter+0x102>
            }
            break;
    f806:	e0f2      	b.n	f9ee <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_C):
            /* Four partial 8-bit Standard IDs per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f808:	f004 fe2e 	bl	14468 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    f80c:	9b03      	ldr	r3, [sp, #12]
    f80e:	681b      	ldr	r3, [r3, #0]
    f810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    f814:	f443 7200 	orr.w	r2, r3, #512	; 0x200
            (base->MCR) =
    f818:	9b03      	ldr	r3, [sp, #12]
    f81a:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_C)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f81c:	f004 fe50 	bl	144c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    f820:	2300      	movs	r3, #0
    f822:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f824:	2300      	movs	r3, #0
    f826:	930b      	str	r3, [sp, #44]	; 0x2c
    f828:	e0cd      	b.n	f9c6 <FlexCAN_SetRxFifoFilter+0x3d8>
            {
                if (idFilterTable[j].isExtendedFrame)
    f82a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f82c:	00db      	lsls	r3, r3, #3
    f82e:	9a01      	ldr	r2, [sp, #4]
    f830:	4413      	add	r3, r2
    f832:	785b      	ldrb	r3, [r3, #1]
    f834:	2b00      	cmp	r3, #0
    f836:	d00e      	beq.n	f856 <FlexCAN_SetRxFifoFilter+0x268>
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f83a:	00db      	lsls	r3, r3, #3
    f83c:	9a01      	ldr	r2, [sp, #4]
    f83e:	4413      	add	r3, r2
    f840:	685b      	ldr	r3, [r3, #4]
    f842:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    f844:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f848:	009b      	lsls	r3, r3, #2
    f84a:	9a06      	ldr	r2, [sp, #24]
    f84c:	4413      	add	r3, r2
    f84e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f850:	440a      	add	r2, r1
    f852:	601a      	str	r2, [r3, #0]
    f854:	e00d      	b.n	f872 <FlexCAN_SetRxFifoFilter+0x284>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f858:	00db      	lsls	r3, r3, #3
    f85a:	9a01      	ldr	r2, [sp, #4]
    f85c:	4413      	add	r3, r2
    f85e:	685b      	ldr	r3, [r3, #4]
    f860:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    f862:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f866:	009b      	lsls	r3, r3, #2
    f868:	9a06      	ldr	r2, [sp, #24]
    f86a:	4413      	add	r3, r2
    f86c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f86e:	440a      	add	r2, r1
    f870:	601a      	str	r2, [r3, #0]
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    f872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f874:	3301      	adds	r3, #1
    f876:	00db      	lsls	r3, r3, #3
    f878:	9a01      	ldr	r2, [sp, #4]
    f87a:	4413      	add	r3, r2
    f87c:	785b      	ldrb	r3, [r3, #1]
    f87e:	2b00      	cmp	r3, #0
    f880:	d017      	beq.n	f8b2 <FlexCAN_SetRxFifoFilter+0x2c4>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f884:	009b      	lsls	r3, r3, #2
    f886:	9a06      	ldr	r2, [sp, #24]
    f888:	4413      	add	r3, r2
    f88a:	6819      	ldr	r1, [r3, #0]
    f88c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f88e:	3301      	adds	r3, #1
    f890:	00db      	lsls	r3, r3, #3
    f892:	9a01      	ldr	r2, [sp, #4]
    f894:	4413      	add	r3, r2
    f896:	685b      	ldr	r3, [r3, #4]
    f898:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    f89a:	041b      	lsls	r3, r3, #16
    f89c:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f8a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f8a2:	441a      	add	r2, r3
    f8a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8a6:	009b      	lsls	r3, r3, #2
    f8a8:	9806      	ldr	r0, [sp, #24]
    f8aa:	4403      	add	r3, r0
    f8ac:	430a      	orrs	r2, r1
    f8ae:	601a      	str	r2, [r3, #0]
    f8b0:	e016      	b.n	f8e0 <FlexCAN_SetRxFifoFilter+0x2f2>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f8b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8b4:	009b      	lsls	r3, r3, #2
    f8b6:	9a06      	ldr	r2, [sp, #24]
    f8b8:	4413      	add	r3, r2
    f8ba:	6819      	ldr	r1, [r3, #0]
    f8bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f8be:	3301      	adds	r3, #1
    f8c0:	00db      	lsls	r3, r3, #3
    f8c2:	9a01      	ldr	r2, [sp, #4]
    f8c4:	4413      	add	r3, r2
    f8c6:	685b      	ldr	r3, [r3, #4]
    f8c8:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    f8ca:	041b      	lsls	r3, r3, #16
    f8cc:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f8d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f8d2:	441a      	add	r2, r3
    f8d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8d6:	009b      	lsls	r3, r3, #2
    f8d8:	9806      	ldr	r0, [sp, #24]
    f8da:	4403      	add	r3, r0
    f8dc:	430a      	orrs	r2, r1
    f8de:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 2U].isExtendedFrame)
    f8e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f8e2:	3302      	adds	r3, #2
    f8e4:	00db      	lsls	r3, r3, #3
    f8e6:	9a01      	ldr	r2, [sp, #4]
    f8e8:	4413      	add	r3, r2
    f8ea:	785b      	ldrb	r3, [r3, #1]
    f8ec:	2b00      	cmp	r3, #0
    f8ee:	d01b      	beq.n	f928 <FlexCAN_SetRxFifoFilter+0x33a>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f8f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8f2:	009b      	lsls	r3, r3, #2
    f8f4:	9a06      	ldr	r2, [sp, #24]
    f8f6:	4413      	add	r3, r2
    f8f8:	6819      	ldr	r1, [r3, #0]
    f8fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f8fc:	3302      	adds	r3, #2
    f8fe:	00db      	lsls	r3, r3, #3
    f900:	9a01      	ldr	r2, [sp, #4]
    f902:	4413      	add	r3, r2
    f904:	685b      	ldr	r3, [r3, #4]
    f906:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    f908:	021b      	lsls	r3, r3, #8
    f90a:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f90c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f90e:	441a      	add	r2, r3
    f910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f912:	009b      	lsls	r3, r3, #2
    f914:	9806      	ldr	r0, [sp, #24]
    f916:	4403      	add	r3, r0
    f918:	430a      	orrs	r2, r1
    f91a:	601a      	str	r2, [r3, #0]
    f91c:	e01a      	b.n	f954 <FlexCAN_SetRxFifoFilter+0x366>
    f91e:	bf00      	nop
    f920:	3ff80000 	.word	0x3ff80000
    f924:	3fff0000 	.word	0x3fff0000
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f92a:	009b      	lsls	r3, r3, #2
    f92c:	9a06      	ldr	r2, [sp, #24]
    f92e:	4413      	add	r3, r2
    f930:	6819      	ldr	r1, [r3, #0]
    f932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f934:	3302      	adds	r3, #2
    f936:	00db      	lsls	r3, r3, #3
    f938:	9a01      	ldr	r2, [sp, #4]
    f93a:	4413      	add	r3, r2
    f93c:	685b      	ldr	r3, [r3, #4]
    f93e:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    f940:	021b      	lsls	r3, r3, #8
    f942:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f944:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f946:	441a      	add	r2, r3
    f948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f94a:	009b      	lsls	r3, r3, #2
    f94c:	9806      	ldr	r0, [sp, #24]
    f94e:	4403      	add	r3, r0
    f950:	430a      	orrs	r2, r1
    f952:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 3U].isExtendedFrame)
    f954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f956:	3303      	adds	r3, #3
    f958:	00db      	lsls	r3, r3, #3
    f95a:	9a01      	ldr	r2, [sp, #4]
    f95c:	4413      	add	r3, r2
    f95e:	785b      	ldrb	r3, [r3, #1]
    f960:	2b00      	cmp	r3, #0
    f962:	d015      	beq.n	f990 <FlexCAN_SetRxFifoFilter+0x3a2>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f964:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f966:	009b      	lsls	r3, r3, #2
    f968:	9a06      	ldr	r2, [sp, #24]
    f96a:	4413      	add	r3, r2
    f96c:	6819      	ldr	r1, [r3, #0]
    f96e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f970:	3303      	adds	r3, #3
    f972:	00db      	lsls	r3, r3, #3
    f974:	9a01      	ldr	r2, [sp, #4]
    f976:	4413      	add	r3, r2
    f978:	685b      	ldr	r3, [r3, #4]
    f97a:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    f97c:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    f97e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f980:	441a      	add	r2, r3
    f982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f984:	009b      	lsls	r3, r3, #2
    f986:	9806      	ldr	r0, [sp, #24]
    f988:	4403      	add	r3, r0
    f98a:	430a      	orrs	r2, r1
    f98c:	601a      	str	r2, [r3, #0]
    f98e:	e014      	b.n	f9ba <FlexCAN_SetRxFifoFilter+0x3cc>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 +
    f990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f992:	009b      	lsls	r3, r3, #2
    f994:	9a06      	ldr	r2, [sp, #24]
    f996:	4413      	add	r3, r2
    f998:	6819      	ldr	r1, [r3, #0]
                                      (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    f99a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f99c:	3303      	adds	r3, #3
    f99e:	00db      	lsls	r3, r3, #3
    f9a0:	9a01      	ldr	r2, [sp, #4]
    f9a2:	4413      	add	r3, r2
    f9a4:	685b      	ldr	r3, [r3, #4]
    f9a6:	08db      	lsrs	r3, r3, #3
                                        FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                       ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    f9a8:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 +
    f9aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f9ac:	441a      	add	r2, r3
    f9ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f9b0:	009b      	lsls	r3, r3, #2
    f9b2:	9806      	ldr	r0, [sp, #24]
    f9b4:	4403      	add	r3, r0
    f9b6:	430a      	orrs	r2, r1
    f9b8:	601a      	str	r2, [r3, #0]
                                      );
                }

                j = j + 4U;
    f9ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f9bc:	3304      	adds	r3, #4
    f9be:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    f9c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f9c2:	3301      	adds	r3, #1
    f9c4:	930b      	str	r3, [sp, #44]	; 0x2c
    f9c6:	9b05      	ldr	r3, [sp, #20]
    f9c8:	3301      	adds	r3, #1
    f9ca:	00db      	lsls	r3, r3, #3
    f9cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f9ce:	429a      	cmp	r2, r3
    f9d0:	f4ff af2b 	bcc.w	f82a <FlexCAN_SetRxFifoFilter+0x23c>
            }
            break;
    f9d4:	e00b      	b.n	f9ee <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_D):
            /* All frames rejected.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f9d6:	f004 fd47 	bl	14468 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    f9da:	9b03      	ldr	r3, [sp, #12]
    f9dc:	681b      	ldr	r3, [r3, #0]
    f9de:	f443 7240 	orr.w	r2, r3, #768	; 0x300
            (base->MCR) =
    f9e2:	9b03      	ldr	r3, [sp, #12]
    f9e4:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_D)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    f9e6:	f004 fd6b 	bl	144c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            break;
    f9ea:	e000      	b.n	f9ee <FlexCAN_SetRxFifoFilter+0x400>
        default:
            /* Should not get here */
            break;
    f9ec:	bf00      	nop
    }
}
    f9ee:	bf00      	nop
    f9f0:	b00d      	add	sp, #52	; 0x34
    f9f2:	f85d fb04 	ldr.w	pc, [sp], #4

0000f9f6 <FlexCAN_ReadRxFifo>:
 * Description   : Read Rx FIFO data.
 * This function will copy MB[0] data field into user's buffer.
 *
 *END**************************************************************************/
void FlexCAN_ReadRxFifo(const FLEXCAN_Type * base, Flexcan_Ip_MsgBuffType * rxFifo)
{
    f9f6:	b500      	push	{lr}
    f9f8:	b08b      	sub	sp, #44	; 0x2c
    f9fa:	9001      	str	r0, [sp, #4]
    f9fc:	9100      	str	r1, [sp, #0]
    uint32 x;
    uint8 Index;
    const uint8 * p;
    #endif

    volatile const uint32 * flexcan_mb = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    f9fe:	9b01      	ldr	r3, [sp, #4]
    fa00:	3380      	adds	r3, #128	; 0x80
    fa02:	9307      	str	r3, [sp, #28]
    volatile const uint32 * flexcan_mb_id = &flexcan_mb[1];
    fa04:	9b07      	ldr	r3, [sp, #28]
    fa06:	3304      	adds	r3, #4
    fa08:	9306      	str	r3, [sp, #24]
    volatile const uint32 * flexcan_mb_data_32 = &flexcan_mb[2];
    fa0a:	9b07      	ldr	r3, [sp, #28]
    fa0c:	3308      	adds	r3, #8
    fa0e:	9305      	str	r3, [sp, #20]
    uint32 * msgData_32 = NULL_PTR;
    fa10:	2300      	movs	r3, #0
    fa12:	9304      	str	r3, [sp, #16]
    uint8 flexcan_mb_dlc_value = (uint8)(((*flexcan_mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    fa14:	9b07      	ldr	r3, [sp, #28]
    fa16:	681b      	ldr	r3, [r3, #0]
    fa18:	0c1b      	lsrs	r3, r3, #16
    fa1a:	b2db      	uxtb	r3, r3
    fa1c:	f003 030f 	and.w	r3, r3, #15
    fa20:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 can_real_payload = FlexCAN_ComputePayloadSize(flexcan_mb_dlc_value);
    fa24:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fa28:	4618      	mov	r0, r3
    fa2a:	f7fe fe6c 	bl	e706 <FlexCAN_ComputePayloadSize>
    fa2e:	4603      	mov	r3, r0
    fa30:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(rxFifo != NULL_PTR);
    #endif
    msgData_32 = (uint32 *)(rxFifo->data);
    fa34:	9b00      	ldr	r3, [sp, #0]
    fa36:	3308      	adds	r3, #8
    fa38:	9304      	str	r3, [sp, #16]
       Check if the length of received data packet bigger than the maximum length accepted,
       then processing flow shall continue with the maximum length defined by configuration.
       Legacy FIFO just support in normal mode.
    */
    /* no need to check if FD enabled or not because this function just is invoked when legacy fifo enabled only ! */
    if (can_real_payload > 8U)
    fa3a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    fa3e:	2b08      	cmp	r3, #8
    fa40:	d902      	bls.n	fa48 <FlexCAN_ReadRxFifo+0x52>
    {
        can_real_payload = 8U;
    fa42:	2308      	movs	r3, #8
    fa44:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    }

    rxFifo->dataLen = can_real_payload;
    fa48:	9b00      	ldr	r3, [sp, #0]
    fa4a:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    fa4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    rxFifo->cs = *flexcan_mb;
    fa52:	9b07      	ldr	r3, [sp, #28]
    fa54:	681a      	ldr	r2, [r3, #0]
    fa56:	9b00      	ldr	r3, [sp, #0]
    fa58:	601a      	str	r2, [r3, #0]
    if ((rxFifo->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    fa5a:	9b00      	ldr	r3, [sp, #0]
    fa5c:	681b      	ldr	r3, [r3, #0]
    fa5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    fa62:	2b00      	cmp	r3, #0
    fa64:	d004      	beq.n	fa70 <FlexCAN_ReadRxFifo+0x7a>
    {
        rxFifo->msgId = *flexcan_mb_id;
    fa66:	9b06      	ldr	r3, [sp, #24]
    fa68:	681a      	ldr	r2, [r3, #0]
    fa6a:	9b00      	ldr	r3, [sp, #0]
    fa6c:	605a      	str	r2, [r3, #4]
    fa6e:	e004      	b.n	fa7a <FlexCAN_ReadRxFifo+0x84>
    }
    else
    {
        rxFifo->msgId = (*flexcan_mb_id) >> FLEXCAN_IP_ID_STD_SHIFT;
    fa70:	9b06      	ldr	r3, [sp, #24]
    fa72:	681b      	ldr	r3, [r3, #0]
    fa74:	0c9a      	lsrs	r2, r3, #18
    fa76:	9b00      	ldr	r3, [sp, #0]
    fa78:	605a      	str	r2, [r3, #4]
    }
    /* Extract the IDHIT */
    rxFifo->id_hit = (uint8)base->RXFIR;
    fa7a:	9b01      	ldr	r3, [sp, #4]
    fa7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    fa7e:	b2da      	uxtb	r2, r3
    fa80:	9b00      	ldr	r3, [sp, #0]
    fa82:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    /* Extract the Time Stamp */
    rxFifo->time_stamp = (uint32)((rxFifo->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    fa86:	9b00      	ldr	r3, [sp, #0]
    fa88:	681b      	ldr	r3, [r3, #0]
    fa8a:	b29a      	uxth	r2, r3
    fa8c:	9b00      	ldr	r3, [sp, #0]
    fa8e:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, msgData_32[DataByte >> 2U]);
        }
    }
#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
      /* Copy MB[0] data field into user's buffer */
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    fa90:	2300      	movs	r3, #0
    fa92:	9309      	str	r3, [sp, #36]	; 0x24
    fa94:	e01f      	b.n	fad6 <FlexCAN_ReadRxFifo+0xe0>
    {
        MbWord = flexcan_mb_data_32[DataByte >> 2U];
    fa96:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fa98:	089b      	lsrs	r3, r3, #2
    fa9a:	009b      	lsls	r3, r3, #2
    fa9c:	9a05      	ldr	r2, [sp, #20]
    fa9e:	4413      	add	r3, r2
    faa0:	681b      	ldr	r3, [r3, #0]
    faa2:	9302      	str	r3, [sp, #8]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (msgData_32[DataByte >> 2U]));
    faa4:	9b02      	ldr	r3, [sp, #8]
    faa6:	0e1a      	lsrs	r2, r3, #24
    faa8:	9b02      	ldr	r3, [sp, #8]
    faaa:	0a1b      	lsrs	r3, r3, #8
    faac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    fab0:	431a      	orrs	r2, r3
    fab2:	9b02      	ldr	r3, [sp, #8]
    fab4:	021b      	lsls	r3, r3, #8
    fab6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    faba:	ea42 0103 	orr.w	r1, r2, r3
    fabe:	9b02      	ldr	r3, [sp, #8]
    fac0:	061a      	lsls	r2, r3, #24
    fac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fac4:	089b      	lsrs	r3, r3, #2
    fac6:	009b      	lsls	r3, r3, #2
    fac8:	9804      	ldr	r0, [sp, #16]
    faca:	4403      	add	r3, r0
    facc:	430a      	orrs	r2, r1
    face:	601a      	str	r2, [r3, #0]
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    fad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fad2:	3304      	adds	r3, #4
    fad4:	9309      	str	r3, [sp, #36]	; 0x24
    fad6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    fada:	9a09      	ldr	r2, [sp, #36]	; 0x24
    fadc:	429a      	cmp	r2, r3
    fade:	d3da      	bcc.n	fa96 <FlexCAN_ReadRxFifo+0xa0>
    }
#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
}
    fae0:	bf00      	nop
    fae2:	bf00      	nop
    fae4:	b00b      	add	sp, #44	; 0x2c
    fae6:	f85d fb04 	ldr.w	pc, [sp], #4

0000faea <FlexCAN_IsMbOutOfRange>:
    const FLEXCAN_Type * pBase,
    uint8 u8MbIndex,
    boolean bIsLegacyFifoEn,
    uint32 u32MaxMbNum
)
{
    faea:	b088      	sub	sp, #32
    faec:	9003      	str	r0, [sp, #12]
    faee:	9301      	str	r3, [sp, #4]
    faf0:	460b      	mov	r3, r1
    faf2:	f88d 300b 	strb.w	r3, [sp, #11]
    faf6:	4613      	mov	r3, r2
    faf8:	f88d 300a 	strb.w	r3, [sp, #10]
    boolean ReturnValue = FALSE;
    fafc:	2300      	movs	r3, #0
    fafe:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32NumOfFiFoElement = 0U;
    fb02:	2300      	movs	r3, #0
    fb04:	9306      	str	r3, [sp, #24]
    uint32 u32NumOfMbOccupiedByFiFo = 0U;
    fb06:	2300      	movs	r3, #0
    fb08:	9305      	str	r3, [sp, #20]

    if (u8MbIndex >= (uint8)u32MaxMbNum)
    fb0a:	9b01      	ldr	r3, [sp, #4]
    fb0c:	b2db      	uxtb	r3, r3
    fb0e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    fb12:	429a      	cmp	r2, r3
    fb14:	d303      	bcc.n	fb1e <FlexCAN_IsMbOutOfRange+0x34>
    {
       ReturnValue = TRUE;
    fb16:	2301      	movs	r3, #1
    fb18:	f88d 301f 	strb.w	r3, [sp, #31]
    fb1c:	e01b      	b.n	fb56 <FlexCAN_IsMbOutOfRange+0x6c>
    }
    /* Check if RX FIFO is enabled*/
    else if (TRUE == bIsLegacyFifoEn)
    fb1e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    fb22:	2b00      	cmp	r3, #0
    fb24:	d014      	beq.n	fb50 <FlexCAN_IsMbOutOfRange+0x66>
    {
        /* Get the number of RX FIFO Filters*/
        u32NumOfFiFoElement = (((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    fb26:	9b03      	ldr	r3, [sp, #12]
    fb28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    fb2a:	0e1b      	lsrs	r3, r3, #24
    fb2c:	f003 030f 	and.w	r3, r3, #15
    fb30:	9306      	str	r3, [sp, #24]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        u32NumOfMbOccupiedByFiFo = 5U + ((((u32NumOfFiFoElement) + 1U) * 8U) / 4U);
    fb32:	9b06      	ldr	r3, [sp, #24]
    fb34:	3301      	adds	r3, #1
    fb36:	00db      	lsls	r3, r3, #3
    fb38:	089b      	lsrs	r3, r3, #2
    fb3a:	3305      	adds	r3, #5
    fb3c:	9305      	str	r3, [sp, #20]
        if (u8MbIndex <= u32NumOfMbOccupiedByFiFo)
    fb3e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    fb42:	9a05      	ldr	r2, [sp, #20]
    fb44:	429a      	cmp	r2, r3
    fb46:	d306      	bcc.n	fb56 <FlexCAN_IsMbOutOfRange+0x6c>
        {
            ReturnValue = TRUE;
    fb48:	2301      	movs	r3, #1
    fb4a:	f88d 301f 	strb.w	r3, [sp, #31]
    fb4e:	e002      	b.n	fb56 <FlexCAN_IsMbOutOfRange+0x6c>
        }
    }
    else
    {
        ReturnValue = FALSE;
    fb50:	2300      	movs	r3, #0
    fb52:	f88d 301f 	strb.w	r3, [sp, #31]
    }

    return ReturnValue;
    fb56:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    fb5a:	4618      	mov	r0, r3
    fb5c:	b008      	add	sp, #32
    fb5e:	4770      	bx	lr

0000fb60 <FlexCAN_ConfigCtrlOptions>:
 * Description   : configure controller depending on options
 * note: should be call after FD configuration.
 *
 *END**************************************************************************/
void FlexCAN_ConfigCtrlOptions(FLEXCAN_Type * pBase, uint32 u32Options)
{
    fb60:	b500      	push	{lr}
    fb62:	b083      	sub	sp, #12
    fb64:	9001      	str	r0, [sp, #4]
    fb66:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON)
    /* If the FD feature is enabled, in order to be ISO-compliant. */
    if ((u32Options & FLEXCAN_IP_ISO_U32) != 0U)
    fb68:	9b00      	ldr	r3, [sp, #0]
    fb6a:	f003 0320 	and.w	r3, r3, #32
    fb6e:	2b00      	cmp	r3, #0
    fb70:	d004      	beq.n	fb7c <FlexCAN_ConfigCtrlOptions+0x1c>
    {
        FlexCAN_SetIsoCan(pBase, TRUE);
    fb72:	2101      	movs	r1, #1
    fb74:	9801      	ldr	r0, [sp, #4]
    fb76:	f7fe fcd8 	bl	e52a <FlexCAN_SetIsoCan>
    fb7a:	e003      	b.n	fb84 <FlexCAN_ConfigCtrlOptions+0x24>
    }
    else
    {
        /* This maybe don't have sense if the Deinit returns the state of registers at init values */
        FlexCAN_SetIsoCan(pBase, FALSE);
    fb7c:	2100      	movs	r1, #0
    fb7e:	9801      	ldr	r0, [sp, #4]
    fb80:	f7fe fcd3 	bl	e52a <FlexCAN_SetIsoCan>
    }
#endif /*(FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON) */
    /* Set Entire Frame Arbitration Field Comparison. */
    if ((u32Options & FLEXCAN_IP_EACEN_U32) != 0U)
    fb84:	9b00      	ldr	r3, [sp, #0]
    fb86:	f003 0340 	and.w	r3, r3, #64	; 0x40
    fb8a:	2b00      	cmp	r3, #0
    fb8c:	d004      	beq.n	fb98 <FlexCAN_ConfigCtrlOptions+0x38>
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, TRUE);
    fb8e:	2101      	movs	r1, #1
    fb90:	9801      	ldr	r0, [sp, #4]
    fb92:	f7fe fce1 	bl	e558 <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    fb96:	e003      	b.n	fba0 <FlexCAN_ConfigCtrlOptions+0x40>
    }
    else
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, FALSE);
    fb98:	2100      	movs	r1, #0
    fb9a:	9801      	ldr	r0, [sp, #4]
    fb9c:	f7fe fcdc 	bl	e558 <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    }
#if (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)
    /* Set protocol Exception */
    if ((u32Options & FLEXCAN_IP_PROTOCOL_EXCEPTION_U32) != 0U)
    fba0:	9b00      	ldr	r3, [sp, #0]
    fba2:	f003 0308 	and.w	r3, r3, #8
    fba6:	2b00      	cmp	r3, #0
    fba8:	d004      	beq.n	fbb4 <FlexCAN_ConfigCtrlOptions+0x54>
    {
        FlexCAN_SetProtocolException(pBase, TRUE);
    fbaa:	2101      	movs	r1, #1
    fbac:	9801      	ldr	r0, [sp, #4]
    fbae:	f7fe fcea 	bl	e586 <FlexCAN_SetProtocolException>
    fbb2:	e003      	b.n	fbbc <FlexCAN_ConfigCtrlOptions+0x5c>
    }
    else
    {
        FlexCAN_SetProtocolException(pBase, FALSE);
    fbb4:	2100      	movs	r1, #0
    fbb6:	9801      	ldr	r0, [sp, #4]
    fbb8:	f7fe fce5 	bl	e586 <FlexCAN_SetProtocolException>
    }
#endif /* Endif  (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)  */
    /* Set CAN Bit Sampling */
    if (((u32Options & FLEXCAN_IP_THREE_SAMPLES_U32) != 0U) && (0U == (pBase->MCR & FLEXCAN_MCR_FDEN_MASK)))
    fbbc:	9b00      	ldr	r3, [sp, #0]
    fbbe:	f003 0302 	and.w	r3, r3, #2
    fbc2:	2b00      	cmp	r3, #0
    fbc4:	d00a      	beq.n	fbdc <FlexCAN_ConfigCtrlOptions+0x7c>
    fbc6:	9b01      	ldr	r3, [sp, #4]
    fbc8:	681b      	ldr	r3, [r3, #0]
    fbca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    fbce:	2b00      	cmp	r3, #0
    fbd0:	d104      	bne.n	fbdc <FlexCAN_ConfigCtrlOptions+0x7c>
    {
        FlexCAN_CanBitSampling(pBase, TRUE);
    fbd2:	2101      	movs	r1, #1
    fbd4:	9801      	ldr	r0, [sp, #4]
    fbd6:	f7fe fd31 	bl	e63c <FlexCAN_CanBitSampling>
    fbda:	e003      	b.n	fbe4 <FlexCAN_ConfigCtrlOptions+0x84>
    }
    else
    {
        FlexCAN_CanBitSampling(pBase, FALSE);
    fbdc:	2100      	movs	r1, #0
    fbde:	9801      	ldr	r0, [sp, #4]
    fbe0:	f7fe fd2c 	bl	e63c <FlexCAN_CanBitSampling>
    }

    /* Set AutoBusOff Recovery */
    if ((u32Options & FLEXCAN_IP_BUSOFF_RECOVERY_U32) != 0U)
    fbe4:	9b00      	ldr	r3, [sp, #0]
    fbe6:	f003 0304 	and.w	r3, r3, #4
    fbea:	2b00      	cmp	r3, #0
    fbec:	d004      	beq.n	fbf8 <FlexCAN_ConfigCtrlOptions+0x98>
    {
        FlexCAN_SetBusOffAutorecovery(pBase, TRUE);
    fbee:	2101      	movs	r1, #1
    fbf0:	9801      	ldr	r0, [sp, #4]
    fbf2:	f7fe fcf6 	bl	e5e2 <FlexCAN_SetBusOffAutorecovery>
    fbf6:	e003      	b.n	fc00 <FlexCAN_ConfigCtrlOptions+0xa0>
    }
    else
    {
        FlexCAN_SetBusOffAutorecovery(pBase, FALSE);
    fbf8:	2100      	movs	r1, #0
    fbfa:	9801      	ldr	r0, [sp, #4]
    fbfc:	f7fe fcf1 	bl	e5e2 <FlexCAN_SetBusOffAutorecovery>
    }
    /* Set Remote Request Store for received of Remote Request Frames */
    if ((u32Options & FLEXCAN_IP_REM_STORE_U32) != 0U)
    fc00:	9b00      	ldr	r3, [sp, #0]
    fc02:	f003 0301 	and.w	r3, r3, #1
    fc06:	2b00      	cmp	r3, #0
    fc08:	d004      	beq.n	fc14 <FlexCAN_ConfigCtrlOptions+0xb4>
    {
        FlexCAN_SetRemoteReqStore(pBase, TRUE);
    fc0a:	2101      	movs	r1, #1
    fc0c:	9801      	ldr	r0, [sp, #4]
    fc0e:	f7fe fcd1 	bl	e5b4 <FlexCAN_SetRemoteReqStore>
    fc12:	e003      	b.n	fc1c <FlexCAN_ConfigCtrlOptions+0xbc>
    }
    else
    {
        FlexCAN_SetRemoteReqStore(pBase, FALSE);
    fc14:	2100      	movs	r1, #0
    fc16:	9801      	ldr	r0, [sp, #4]
    fc18:	f7fe fccc 	bl	e5b4 <FlexCAN_SetRemoteReqStore>
    }
#if (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)
    /* Set Edge Filter */
    if ((u32Options & FLEXCAN_IP_EDGE_FILTER_U32) != 0U)
    fc1c:	9b00      	ldr	r3, [sp, #0]
    fc1e:	f003 0310 	and.w	r3, r3, #16
    fc22:	2b00      	cmp	r3, #0
    fc24:	d004      	beq.n	fc30 <FlexCAN_ConfigCtrlOptions+0xd0>
    {
        FlexCAN_SetEdgeFilter(pBase, TRUE);
    fc26:	2101      	movs	r1, #1
    fc28:	9801      	ldr	r0, [sp, #4]
    fc2a:	f7fe fcf0 	bl	e60e <FlexCAN_SetEdgeFilter>
    else
    {
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    }
#endif /* End of (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)  */
}
    fc2e:	e003      	b.n	fc38 <FlexCAN_ConfigCtrlOptions+0xd8>
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    fc30:	2100      	movs	r1, #0
    fc32:	9801      	ldr	r0, [sp, #4]
    fc34:	f7fe fceb 	bl	e60e <FlexCAN_SetEdgeFilter>
}
    fc38:	bf00      	nop
    fc3a:	b003      	add	sp, #12
    fc3c:	f85d fb04 	ldr.w	pc, [sp], #4

0000fc40 <FlexCAN_ResetImaskBuff>:
 * Function Name : FlexCAN_ResetImaskBuff (uses in FlexCAN_Ip_Init function only)
 * Description   : Reset Imask Buffers.
 *
 *END**************************************************************************/
void FlexCAN_ResetImaskBuff(uint8 Instance)
{
    fc40:	b084      	sub	sp, #16
    fc42:	4603      	mov	r3, r0
    fc44:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ImaskCnt = 0U;
    fc48:	2300      	movs	r3, #0
    fc4a:	f88d 300f 	strb.w	r3, [sp, #15]

    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    fc4e:	2300      	movs	r3, #0
    fc50:	f88d 300f 	strb.w	r3, [sp, #15]
    fc54:	e00d      	b.n	fc72 <FlexCAN_ResetImaskBuff+0x32>
    {
        FlexCAN_Ip_au32ImaskBuff[Instance][ImaskCnt] = 0U;
    fc56:	f89d 2007 	ldrb.w	r2, [sp, #7]
    fc5a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fc5e:	4909      	ldr	r1, [pc, #36]	; (fc84 <FlexCAN_ResetImaskBuff+0x44>)
    fc60:	4413      	add	r3, r2
    fc62:	2200      	movs	r2, #0
    fc64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    fc68:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fc6c:	3301      	adds	r3, #1
    fc6e:	f88d 300f 	strb.w	r3, [sp, #15]
    fc72:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fc76:	2b00      	cmp	r3, #0
    fc78:	d0ed      	beq.n	fc56 <FlexCAN_ResetImaskBuff+0x16>
    }
}
    fc7a:	bf00      	nop
    fc7c:	bf00      	nop
    fc7e:	b004      	add	sp, #16
    fc80:	4770      	bx	lr
    fc82:	bf00      	nop
    fc84:	1fff9368 	.word	0x1fff9368

0000fc88 <CAN0_ORED_IRQHandler>:

#else

/* Implementation of CAN0 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN0_ORED_IRQHandler)
{
    fc88:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(0U);
    fc8a:	2000      	movs	r0, #0
    fc8c:	f7fd fb2a 	bl	d2e4 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    fc90:	f3bf 8f4f 	dsb	sy
}
    fc94:	bf00      	nop
    fc96:	bd08      	pop	{r3, pc}

0000fc98 <CAN0_Error_IRQHandler>:

/* Implementation of CAN0 handler named in startup code for processing of Errors reporting. */
ISR(CAN0_Error_IRQHandler)
{
    fc98:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(0U);
    fc9a:	2000      	movs	r0, #0
    fc9c:	f7fd fac2 	bl	d224 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    fca0:	f3bf 8f4f 	dsb	sy
}
    fca4:	bf00      	nop
    fca6:	bd08      	pop	{r3, pc}

0000fca8 <CAN0_ORED_0_15_MB_IRQHandler>:
}
#endif
/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN0_ORED_0_15_MB_IRQHandler)
{
    fca8:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 0U, 15U);
    fcaa:	220f      	movs	r2, #15
    fcac:	2100      	movs	r1, #0
    fcae:	2000      	movs	r0, #0
    fcb0:	f7fd f9dc 	bl	d06c <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fcb4:	f3bf 8f4f 	dsb	sy
}
    fcb8:	bf00      	nop
    fcba:	bd08      	pop	{r3, pc}

0000fcbc <CAN0_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN0_ORED_16_31_MB_IRQHandler)
{
    fcbc:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 16U, 31U);
    fcbe:	221f      	movs	r2, #31
    fcc0:	2110      	movs	r1, #16
    fcc2:	2000      	movs	r0, #0
    fcc4:	f7fd f9d2 	bl	d06c <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fcc8:	f3bf 8f4f 	dsb	sy
}
    fccc:	bf00      	nop
    fcce:	bd08      	pop	{r3, pc}

0000fcd0 <CAN1_ORED_IRQHandler>:
#endif /* (defined(S32K142W) || defined(S32K144W) || defined(S32M243) || defined(S32M244)) */

#if (FLEXCAN_INSTANCE_COUNT > 1U)
/* Implementation of CAN1 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN1_ORED_IRQHandler)
{
    fcd0:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(1U);
    fcd2:	2001      	movs	r0, #1
    fcd4:	f7fd fb06 	bl	d2e4 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    fcd8:	f3bf 8f4f 	dsb	sy
}
    fcdc:	bf00      	nop
    fcde:	bd08      	pop	{r3, pc}

0000fce0 <CAN1_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN1_Error_IRQHandler)
{
    fce0:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(1U);
    fce2:	2001      	movs	r0, #1
    fce4:	f7fd fa9e 	bl	d224 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    fce8:	f3bf 8f4f 	dsb	sy
}
    fcec:	bf00      	nop
    fcee:	bd08      	pop	{r3, pc}

0000fcf0 <CAN1_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN1_ORED_0_15_MB_IRQHandler)
{
    fcf0:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 0U, 15U);
    fcf2:	220f      	movs	r2, #15
    fcf4:	2100      	movs	r1, #0
    fcf6:	2001      	movs	r0, #1
    fcf8:	f7fd f9b8 	bl	d06c <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fcfc:	f3bf 8f4f 	dsb	sy
}
    fd00:	bf00      	nop
    fd02:	bd08      	pop	{r3, pc}

0000fd04 <CAN1_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN1_ORED_16_31_MB_IRQHandler)
{
    fd04:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 16U, 31U);
    fd06:	221f      	movs	r2, #31
    fd08:	2110      	movs	r1, #16
    fd0a:	2001      	movs	r0, #1
    fd0c:	f7fd f9ae 	bl	d06c <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fd10:	f3bf 8f4f 	dsb	sy
}
    fd14:	bf00      	nop
    fd16:	bd08      	pop	{r3, pc}

0000fd18 <CAN2_ORED_IRQHandler>:
#endif /* (FLEXCAN_INSTANCE_COUNT > 1U) */

#if (FLEXCAN_INSTANCE_COUNT > 2U)
/* Implementation of CAN2 handler named in startup code for processing of Errors and Bus Off reporting. */
ISR(CAN2_ORED_IRQHandler)
{
    fd18:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(2U);
    fd1a:	2002      	movs	r0, #2
    fd1c:	f7fd fae2 	bl	d2e4 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    fd20:	f3bf 8f4f 	dsb	sy
}
    fd24:	bf00      	nop
    fd26:	bd08      	pop	{r3, pc}

0000fd28 <CAN2_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN2_Error_IRQHandler)
{
    fd28:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(2U);
    fd2a:	2002      	movs	r0, #2
    fd2c:	f7fd fa7a 	bl	d224 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    fd30:	f3bf 8f4f 	dsb	sy
}
    fd34:	bf00      	nop
    fd36:	bd08      	pop	{r3, pc}

0000fd38 <CAN2_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN2 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN2_ORED_0_15_MB_IRQHandler)
{
    fd38:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(2U, 0U, 15U);
    fd3a:	220f      	movs	r2, #15
    fd3c:	2100      	movs	r1, #0
    fd3e:	2002      	movs	r0, #2
    fd40:	f7fd f994 	bl	d06c <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    fd44:	f3bf 8f4f 	dsb	sy
}
    fd48:	bf00      	nop
    fd4a:	bd08      	pop	{r3, pc}

0000fd4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    fd4c:	b500      	push	{lr}
    fd4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd50:	f7f0 ff26 	bl	ba0 <Sys_GetCoreID>
    fd54:	4603      	mov	r3, r0
    fd56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId])
    fd58:	4a10      	ldr	r2, [pc, #64]	; (fd9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    fd5a:	9b01      	ldr	r3, [sp, #4]
    fd5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd60:	2b00      	cmp	r3, #0
    fd62:	d10d      	bne.n	fd80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fd64:	f7f0 fde2 	bl	92c <Adc_schm_read_msr>
    fd68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fd6a:	9b00      	ldr	r3, [sp, #0]
    fd6c:	f003 0301 	and.w	r3, r3, #1
    fd70:	2b00      	cmp	r3, #0
    fd72:	d100      	bne.n	fd76 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fd74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    fd76:	490a      	ldr	r1, [pc, #40]	; (fda0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x54>)
    fd78:	9b01      	ldr	r3, [sp, #4]
    fd7a:	9a00      	ldr	r2, [sp, #0]
    fd7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]++;
    fd80:	4a06      	ldr	r2, [pc, #24]	; (fd9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    fd82:	9b01      	ldr	r3, [sp, #4]
    fd84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd88:	1c5a      	adds	r2, r3, #1
    fd8a:	4904      	ldr	r1, [pc, #16]	; (fd9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    fd8c:	9b01      	ldr	r3, [sp, #4]
    fd8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fd92:	bf00      	nop
    fd94:	b003      	add	sp, #12
    fd96:	f85d fb04 	ldr.w	pc, [sp], #4
    fd9a:	bf00      	nop
    fd9c:	1fff9378 	.word	0x1fff9378
    fda0:	1fff9374 	.word	0x1fff9374

0000fda4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    fda4:	b500      	push	{lr}
    fda6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fda8:	f7f0 fefa 	bl	ba0 <Sys_GetCoreID>
    fdac:	4603      	mov	r3, r0
    fdae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]--;
    fdb0:	4a0d      	ldr	r2, [pc, #52]	; (fde8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    fdb2:	9b01      	ldr	r3, [sp, #4]
    fdb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdb8:	1e5a      	subs	r2, r3, #1
    fdba:	490b      	ldr	r1, [pc, #44]	; (fde8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    fdbc:	9b01      	ldr	r3, [sp, #4]
    fdbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    fdc2:	4a0a      	ldr	r2, [pc, #40]	; (fdec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x48>)
    fdc4:	9b01      	ldr	r3, [sp, #4]
    fdc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdca:	f003 0301 	and.w	r3, r3, #1
    fdce:	2b00      	cmp	r3, #0
    fdd0:	d106      	bne.n	fde0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    fdd2:	4a05      	ldr	r2, [pc, #20]	; (fde8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    fdd4:	9b01      	ldr	r3, [sp, #4]
    fdd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdda:	2b00      	cmp	r3, #0
    fddc:	d100      	bne.n	fde0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fdde:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fde0:	bf00      	nop
    fde2:	b003      	add	sp, #12
    fde4:	f85d fb04 	ldr.w	pc, [sp], #4
    fde8:	1fff9378 	.word	0x1fff9378
    fdec:	1fff9374 	.word	0x1fff9374

0000fdf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    fdf0:	b500      	push	{lr}
    fdf2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fdf4:	f7f0 fed4 	bl	ba0 <Sys_GetCoreID>
    fdf8:	4603      	mov	r3, r0
    fdfa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId])
    fdfc:	4a10      	ldr	r2, [pc, #64]	; (fe40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    fdfe:	9b01      	ldr	r3, [sp, #4]
    fe00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe04:	2b00      	cmp	r3, #0
    fe06:	d10d      	bne.n	fe24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fe08:	f7f0 fd90 	bl	92c <Adc_schm_read_msr>
    fe0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fe0e:	9b00      	ldr	r3, [sp, #0]
    fe10:	f003 0301 	and.w	r3, r3, #1
    fe14:	2b00      	cmp	r3, #0
    fe16:	d100      	bne.n	fe1a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fe18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    fe1a:	490a      	ldr	r1, [pc, #40]	; (fe44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x54>)
    fe1c:	9b01      	ldr	r3, [sp, #4]
    fe1e:	9a00      	ldr	r2, [sp, #0]
    fe20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]++;
    fe24:	4a06      	ldr	r2, [pc, #24]	; (fe40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    fe26:	9b01      	ldr	r3, [sp, #4]
    fe28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe2c:	1c5a      	adds	r2, r3, #1
    fe2e:	4904      	ldr	r1, [pc, #16]	; (fe40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    fe30:	9b01      	ldr	r3, [sp, #4]
    fe32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fe36:	bf00      	nop
    fe38:	b003      	add	sp, #12
    fe3a:	f85d fb04 	ldr.w	pc, [sp], #4
    fe3e:	bf00      	nop
    fe40:	1fff9380 	.word	0x1fff9380
    fe44:	1fff937c 	.word	0x1fff937c

0000fe48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    fe48:	b500      	push	{lr}
    fe4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe4c:	f7f0 fea8 	bl	ba0 <Sys_GetCoreID>
    fe50:	4603      	mov	r3, r0
    fe52:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]--;
    fe54:	4a0d      	ldr	r2, [pc, #52]	; (fe8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    fe56:	9b01      	ldr	r3, [sp, #4]
    fe58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe5c:	1e5a      	subs	r2, r3, #1
    fe5e:	490b      	ldr	r1, [pc, #44]	; (fe8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    fe60:	9b01      	ldr	r3, [sp, #4]
    fe62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    fe66:	4a0a      	ldr	r2, [pc, #40]	; (fe90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x48>)
    fe68:	9b01      	ldr	r3, [sp, #4]
    fe6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe6e:	f003 0301 	and.w	r3, r3, #1
    fe72:	2b00      	cmp	r3, #0
    fe74:	d106      	bne.n	fe84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    fe76:	4a05      	ldr	r2, [pc, #20]	; (fe8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    fe78:	9b01      	ldr	r3, [sp, #4]
    fe7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe7e:	2b00      	cmp	r3, #0
    fe80:	d100      	bne.n	fe84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fe82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fe84:	bf00      	nop
    fe86:	b003      	add	sp, #12
    fe88:	f85d fb04 	ldr.w	pc, [sp], #4
    fe8c:	1fff9380 	.word	0x1fff9380
    fe90:	1fff937c 	.word	0x1fff937c

0000fe94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    fe94:	b500      	push	{lr}
    fe96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe98:	f7f0 fe82 	bl	ba0 <Sys_GetCoreID>
    fe9c:	4603      	mov	r3, r0
    fe9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId])
    fea0:	4a10      	ldr	r2, [pc, #64]	; (fee4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    fea2:	9b01      	ldr	r3, [sp, #4]
    fea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fea8:	2b00      	cmp	r3, #0
    feaa:	d10d      	bne.n	fec8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    feac:	f7f0 fd3e 	bl	92c <Adc_schm_read_msr>
    feb0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    feb2:	9b00      	ldr	r3, [sp, #0]
    feb4:	f003 0301 	and.w	r3, r3, #1
    feb8:	2b00      	cmp	r3, #0
    feba:	d100      	bne.n	febe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    febc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    febe:	490a      	ldr	r1, [pc, #40]	; (fee8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x54>)
    fec0:	9b01      	ldr	r3, [sp, #4]
    fec2:	9a00      	ldr	r2, [sp, #0]
    fec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]++;
    fec8:	4a06      	ldr	r2, [pc, #24]	; (fee4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    feca:	9b01      	ldr	r3, [sp, #4]
    fecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fed0:	1c5a      	adds	r2, r3, #1
    fed2:	4904      	ldr	r1, [pc, #16]	; (fee4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    fed4:	9b01      	ldr	r3, [sp, #4]
    fed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    feda:	bf00      	nop
    fedc:	b003      	add	sp, #12
    fede:	f85d fb04 	ldr.w	pc, [sp], #4
    fee2:	bf00      	nop
    fee4:	1fff9388 	.word	0x1fff9388
    fee8:	1fff9384 	.word	0x1fff9384

0000feec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    feec:	b500      	push	{lr}
    feee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fef0:	f7f0 fe56 	bl	ba0 <Sys_GetCoreID>
    fef4:	4603      	mov	r3, r0
    fef6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]--;
    fef8:	4a0d      	ldr	r2, [pc, #52]	; (ff30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    fefa:	9b01      	ldr	r3, [sp, #4]
    fefc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff00:	1e5a      	subs	r2, r3, #1
    ff02:	490b      	ldr	r1, [pc, #44]	; (ff30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    ff04:	9b01      	ldr	r3, [sp, #4]
    ff06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    ff0a:	4a0a      	ldr	r2, [pc, #40]	; (ff34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x48>)
    ff0c:	9b01      	ldr	r3, [sp, #4]
    ff0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff12:	f003 0301 	and.w	r3, r3, #1
    ff16:	2b00      	cmp	r3, #0
    ff18:	d106      	bne.n	ff28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    ff1a:	4a05      	ldr	r2, [pc, #20]	; (ff30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    ff1c:	9b01      	ldr	r3, [sp, #4]
    ff1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff22:	2b00      	cmp	r3, #0
    ff24:	d100      	bne.n	ff28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ff26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ff28:	bf00      	nop
    ff2a:	b003      	add	sp, #12
    ff2c:	f85d fb04 	ldr.w	pc, [sp], #4
    ff30:	1fff9388 	.word	0x1fff9388
    ff34:	1fff9384 	.word	0x1fff9384

0000ff38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    ff38:	b500      	push	{lr}
    ff3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff3c:	f7f0 fe30 	bl	ba0 <Sys_GetCoreID>
    ff40:	4603      	mov	r3, r0
    ff42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId])
    ff44:	4a10      	ldr	r2, [pc, #64]	; (ff88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    ff46:	9b01      	ldr	r3, [sp, #4]
    ff48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff4c:	2b00      	cmp	r3, #0
    ff4e:	d10d      	bne.n	ff6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ff50:	f7f0 fcec 	bl	92c <Adc_schm_read_msr>
    ff54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ff56:	9b00      	ldr	r3, [sp, #0]
    ff58:	f003 0301 	and.w	r3, r3, #1
    ff5c:	2b00      	cmp	r3, #0
    ff5e:	d100      	bne.n	ff62 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ff60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    ff62:	490a      	ldr	r1, [pc, #40]	; (ff8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x54>)
    ff64:	9b01      	ldr	r3, [sp, #4]
    ff66:	9a00      	ldr	r2, [sp, #0]
    ff68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]++;
    ff6c:	4a06      	ldr	r2, [pc, #24]	; (ff88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    ff6e:	9b01      	ldr	r3, [sp, #4]
    ff70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff74:	1c5a      	adds	r2, r3, #1
    ff76:	4904      	ldr	r1, [pc, #16]	; (ff88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    ff78:	9b01      	ldr	r3, [sp, #4]
    ff7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ff7e:	bf00      	nop
    ff80:	b003      	add	sp, #12
    ff82:	f85d fb04 	ldr.w	pc, [sp], #4
    ff86:	bf00      	nop
    ff88:	1fff9390 	.word	0x1fff9390
    ff8c:	1fff938c 	.word	0x1fff938c

0000ff90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    ff90:	b500      	push	{lr}
    ff92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff94:	f7f0 fe04 	bl	ba0 <Sys_GetCoreID>
    ff98:	4603      	mov	r3, r0
    ff9a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]--;
    ff9c:	4a0d      	ldr	r2, [pc, #52]	; (ffd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    ff9e:	9b01      	ldr	r3, [sp, #4]
    ffa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffa4:	1e5a      	subs	r2, r3, #1
    ffa6:	490b      	ldr	r1, [pc, #44]	; (ffd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    ffa8:	9b01      	ldr	r3, [sp, #4]
    ffaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    ffae:	4a0a      	ldr	r2, [pc, #40]	; (ffd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x48>)
    ffb0:	9b01      	ldr	r3, [sp, #4]
    ffb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffb6:	f003 0301 	and.w	r3, r3, #1
    ffba:	2b00      	cmp	r3, #0
    ffbc:	d106      	bne.n	ffcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    ffbe:	4a05      	ldr	r2, [pc, #20]	; (ffd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    ffc0:	9b01      	ldr	r3, [sp, #4]
    ffc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffc6:	2b00      	cmp	r3, #0
    ffc8:	d100      	bne.n	ffcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ffca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ffcc:	bf00      	nop
    ffce:	b003      	add	sp, #12
    ffd0:	f85d fb04 	ldr.w	pc, [sp], #4
    ffd4:	1fff9390 	.word	0x1fff9390
    ffd8:	1fff938c 	.word	0x1fff938c

0000ffdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    ffdc:	b500      	push	{lr}
    ffde:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ffe0:	f7f0 fdde 	bl	ba0 <Sys_GetCoreID>
    ffe4:	4603      	mov	r3, r0
    ffe6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId])
    ffe8:	4a10      	ldr	r2, [pc, #64]	; (1002c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    ffea:	9b01      	ldr	r3, [sp, #4]
    ffec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fff0:	2b00      	cmp	r3, #0
    fff2:	d10d      	bne.n	10010 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fff4:	f7f0 fc9a 	bl	92c <Adc_schm_read_msr>
    fff8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fffa:	9b00      	ldr	r3, [sp, #0]
    fffc:	f003 0301 	and.w	r3, r3, #1
   10000:	2b00      	cmp	r3, #0
   10002:	d100      	bne.n	10006 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10004:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   10006:	490a      	ldr	r1, [pc, #40]	; (10030 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x54>)
   10008:	9b01      	ldr	r3, [sp, #4]
   1000a:	9a00      	ldr	r2, [sp, #0]
   1000c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]++;
   10010:	4a06      	ldr	r2, [pc, #24]	; (1002c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   10012:	9b01      	ldr	r3, [sp, #4]
   10014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10018:	1c5a      	adds	r2, r3, #1
   1001a:	4904      	ldr	r1, [pc, #16]	; (1002c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   1001c:	9b01      	ldr	r3, [sp, #4]
   1001e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10022:	bf00      	nop
   10024:	b003      	add	sp, #12
   10026:	f85d fb04 	ldr.w	pc, [sp], #4
   1002a:	bf00      	nop
   1002c:	1fff9398 	.word	0x1fff9398
   10030:	1fff9394 	.word	0x1fff9394

00010034 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
   10034:	b500      	push	{lr}
   10036:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10038:	f7f0 fdb2 	bl	ba0 <Sys_GetCoreID>
   1003c:	4603      	mov	r3, r0
   1003e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]--;
   10040:	4a0d      	ldr	r2, [pc, #52]	; (10078 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   10042:	9b01      	ldr	r3, [sp, #4]
   10044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10048:	1e5a      	subs	r2, r3, #1
   1004a:	490b      	ldr	r1, [pc, #44]	; (10078 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   1004c:	9b01      	ldr	r3, [sp, #4]
   1004e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   10052:	4a0a      	ldr	r2, [pc, #40]	; (1007c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x48>)
   10054:	9b01      	ldr	r3, [sp, #4]
   10056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1005a:	f003 0301 	and.w	r3, r3, #1
   1005e:	2b00      	cmp	r3, #0
   10060:	d106      	bne.n	10070 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
   10062:	4a05      	ldr	r2, [pc, #20]	; (10078 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   10064:	9b01      	ldr	r3, [sp, #4]
   10066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1006a:	2b00      	cmp	r3, #0
   1006c:	d100      	bne.n	10070 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1006e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10070:	bf00      	nop
   10072:	b003      	add	sp, #12
   10074:	f85d fb04 	ldr.w	pc, [sp], #4
   10078:	1fff9398 	.word	0x1fff9398
   1007c:	1fff9394 	.word	0x1fff9394

00010080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
   10080:	b500      	push	{lr}
   10082:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10084:	f7f0 fd8c 	bl	ba0 <Sys_GetCoreID>
   10088:	4603      	mov	r3, r0
   1008a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId])
   1008c:	4a10      	ldr	r2, [pc, #64]	; (100d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   1008e:	9b01      	ldr	r3, [sp, #4]
   10090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10094:	2b00      	cmp	r3, #0
   10096:	d10d      	bne.n	100b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10098:	f7f0 fc48 	bl	92c <Adc_schm_read_msr>
   1009c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1009e:	9b00      	ldr	r3, [sp, #0]
   100a0:	f003 0301 	and.w	r3, r3, #1
   100a4:	2b00      	cmp	r3, #0
   100a6:	d100      	bne.n	100aa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   100a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   100aa:	490a      	ldr	r1, [pc, #40]	; (100d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x54>)
   100ac:	9b01      	ldr	r3, [sp, #4]
   100ae:	9a00      	ldr	r2, [sp, #0]
   100b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]++;
   100b4:	4a06      	ldr	r2, [pc, #24]	; (100d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   100b6:	9b01      	ldr	r3, [sp, #4]
   100b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100bc:	1c5a      	adds	r2, r3, #1
   100be:	4904      	ldr	r1, [pc, #16]	; (100d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   100c0:	9b01      	ldr	r3, [sp, #4]
   100c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   100c6:	bf00      	nop
   100c8:	b003      	add	sp, #12
   100ca:	f85d fb04 	ldr.w	pc, [sp], #4
   100ce:	bf00      	nop
   100d0:	1fff93a0 	.word	0x1fff93a0
   100d4:	1fff939c 	.word	0x1fff939c

000100d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
   100d8:	b500      	push	{lr}
   100da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   100dc:	f7f0 fd60 	bl	ba0 <Sys_GetCoreID>
   100e0:	4603      	mov	r3, r0
   100e2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]--;
   100e4:	4a0d      	ldr	r2, [pc, #52]	; (1011c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   100e6:	9b01      	ldr	r3, [sp, #4]
   100e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100ec:	1e5a      	subs	r2, r3, #1
   100ee:	490b      	ldr	r1, [pc, #44]	; (1011c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   100f0:	9b01      	ldr	r3, [sp, #4]
   100f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   100f6:	4a0a      	ldr	r2, [pc, #40]	; (10120 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x48>)
   100f8:	9b01      	ldr	r3, [sp, #4]
   100fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100fe:	f003 0301 	and.w	r3, r3, #1
   10102:	2b00      	cmp	r3, #0
   10104:	d106      	bne.n	10114 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
   10106:	4a05      	ldr	r2, [pc, #20]	; (1011c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   10108:	9b01      	ldr	r3, [sp, #4]
   1010a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1010e:	2b00      	cmp	r3, #0
   10110:	d100      	bne.n	10114 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10112:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10114:	bf00      	nop
   10116:	b003      	add	sp, #12
   10118:	f85d fb04 	ldr.w	pc, [sp], #4
   1011c:	1fff93a0 	.word	0x1fff93a0
   10120:	1fff939c 	.word	0x1fff939c

00010124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
   10124:	b500      	push	{lr}
   10126:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10128:	f7f0 fd3a 	bl	ba0 <Sys_GetCoreID>
   1012c:	4603      	mov	r3, r0
   1012e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId])
   10130:	4a10      	ldr	r2, [pc, #64]	; (10174 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   10132:	9b01      	ldr	r3, [sp, #4]
   10134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10138:	2b00      	cmp	r3, #0
   1013a:	d10d      	bne.n	10158 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1013c:	f7f0 fbf6 	bl	92c <Adc_schm_read_msr>
   10140:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10142:	9b00      	ldr	r3, [sp, #0]
   10144:	f003 0301 	and.w	r3, r3, #1
   10148:	2b00      	cmp	r3, #0
   1014a:	d100      	bne.n	1014e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1014c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   1014e:	490a      	ldr	r1, [pc, #40]	; (10178 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x54>)
   10150:	9b01      	ldr	r3, [sp, #4]
   10152:	9a00      	ldr	r2, [sp, #0]
   10154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]++;
   10158:	4a06      	ldr	r2, [pc, #24]	; (10174 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   1015a:	9b01      	ldr	r3, [sp, #4]
   1015c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10160:	1c5a      	adds	r2, r3, #1
   10162:	4904      	ldr	r1, [pc, #16]	; (10174 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   10164:	9b01      	ldr	r3, [sp, #4]
   10166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1016a:	bf00      	nop
   1016c:	b003      	add	sp, #12
   1016e:	f85d fb04 	ldr.w	pc, [sp], #4
   10172:	bf00      	nop
   10174:	1fff93a8 	.word	0x1fff93a8
   10178:	1fff93a4 	.word	0x1fff93a4

0001017c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
   1017c:	b500      	push	{lr}
   1017e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10180:	f7f0 fd0e 	bl	ba0 <Sys_GetCoreID>
   10184:	4603      	mov	r3, r0
   10186:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]--;
   10188:	4a0d      	ldr	r2, [pc, #52]	; (101c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   1018a:	9b01      	ldr	r3, [sp, #4]
   1018c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10190:	1e5a      	subs	r2, r3, #1
   10192:	490b      	ldr	r1, [pc, #44]	; (101c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   10194:	9b01      	ldr	r3, [sp, #4]
   10196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   1019a:	4a0a      	ldr	r2, [pc, #40]	; (101c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x48>)
   1019c:	9b01      	ldr	r3, [sp, #4]
   1019e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101a2:	f003 0301 	and.w	r3, r3, #1
   101a6:	2b00      	cmp	r3, #0
   101a8:	d106      	bne.n	101b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
   101aa:	4a05      	ldr	r2, [pc, #20]	; (101c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   101ac:	9b01      	ldr	r3, [sp, #4]
   101ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101b2:	2b00      	cmp	r3, #0
   101b4:	d100      	bne.n	101b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   101b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   101b8:	bf00      	nop
   101ba:	b003      	add	sp, #12
   101bc:	f85d fb04 	ldr.w	pc, [sp], #4
   101c0:	1fff93a8 	.word	0x1fff93a8
   101c4:	1fff93a4 	.word	0x1fff93a4

000101c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
   101c8:	b500      	push	{lr}
   101ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   101cc:	f7f0 fce8 	bl	ba0 <Sys_GetCoreID>
   101d0:	4603      	mov	r3, r0
   101d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId])
   101d4:	4a10      	ldr	r2, [pc, #64]	; (10218 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   101d6:	9b01      	ldr	r3, [sp, #4]
   101d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101dc:	2b00      	cmp	r3, #0
   101de:	d10d      	bne.n	101fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   101e0:	f7f0 fba4 	bl	92c <Adc_schm_read_msr>
   101e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   101e6:	9b00      	ldr	r3, [sp, #0]
   101e8:	f003 0301 	and.w	r3, r3, #1
   101ec:	2b00      	cmp	r3, #0
   101ee:	d100      	bne.n	101f2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   101f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_100[u32CoreId] = msr;
   101f2:	490a      	ldr	r1, [pc, #40]	; (1021c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x54>)
   101f4:	9b01      	ldr	r3, [sp, #4]
   101f6:	9a00      	ldr	r2, [sp, #0]
   101f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]++;
   101fc:	4a06      	ldr	r2, [pc, #24]	; (10218 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   101fe:	9b01      	ldr	r3, [sp, #4]
   10200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10204:	1c5a      	adds	r2, r3, #1
   10206:	4904      	ldr	r1, [pc, #16]	; (10218 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   10208:	9b01      	ldr	r3, [sp, #4]
   1020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1020e:	bf00      	nop
   10210:	b003      	add	sp, #12
   10212:	f85d fb04 	ldr.w	pc, [sp], #4
   10216:	bf00      	nop
   10218:	1fff93b0 	.word	0x1fff93b0
   1021c:	1fff93ac 	.word	0x1fff93ac

00010220 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
   10220:	b500      	push	{lr}
   10222:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10224:	f7f0 fcbc 	bl	ba0 <Sys_GetCoreID>
   10228:	4603      	mov	r3, r0
   1022a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]--;
   1022c:	4a0d      	ldr	r2, [pc, #52]	; (10264 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   1022e:	9b01      	ldr	r3, [sp, #4]
   10230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10234:	1e5a      	subs	r2, r3, #1
   10236:	490b      	ldr	r1, [pc, #44]	; (10264 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   10238:	9b01      	ldr	r3, [sp, #4]
   1023a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_100[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]))         /*if interrupts were enabled*/
   1023e:	4a0a      	ldr	r2, [pc, #40]	; (10268 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x48>)
   10240:	9b01      	ldr	r3, [sp, #4]
   10242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10246:	f003 0301 	and.w	r3, r3, #1
   1024a:	2b00      	cmp	r3, #0
   1024c:	d106      	bne.n	1025c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
   1024e:	4a05      	ldr	r2, [pc, #20]	; (10264 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   10250:	9b01      	ldr	r3, [sp, #4]
   10252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10256:	2b00      	cmp	r3, #0
   10258:	d100      	bne.n	1025c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1025a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1025c:	bf00      	nop
   1025e:	b003      	add	sp, #12
   10260:	f85d fb04 	ldr.w	pc, [sp], #4
   10264:	1fff93b0 	.word	0x1fff93b0
   10268:	1fff93ac 	.word	0x1fff93ac

0001026c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
   1026c:	b500      	push	{lr}
   1026e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10270:	f7f0 fc96 	bl	ba0 <Sys_GetCoreID>
   10274:	4603      	mov	r3, r0
   10276:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId])
   10278:	4a10      	ldr	r2, [pc, #64]	; (102bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   1027a:	9b01      	ldr	r3, [sp, #4]
   1027c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10280:	2b00      	cmp	r3, #0
   10282:	d10d      	bne.n	102a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10284:	f7f0 fb52 	bl	92c <Adc_schm_read_msr>
   10288:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1028a:	9b00      	ldr	r3, [sp, #0]
   1028c:	f003 0301 	and.w	r3, r3, #1
   10290:	2b00      	cmp	r3, #0
   10292:	d100      	bne.n	10296 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10294:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_101[u32CoreId] = msr;
   10296:	490a      	ldr	r1, [pc, #40]	; (102c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x54>)
   10298:	9b01      	ldr	r3, [sp, #4]
   1029a:	9a00      	ldr	r2, [sp, #0]
   1029c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]++;
   102a0:	4a06      	ldr	r2, [pc, #24]	; (102bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   102a2:	9b01      	ldr	r3, [sp, #4]
   102a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102a8:	1c5a      	adds	r2, r3, #1
   102aa:	4904      	ldr	r1, [pc, #16]	; (102bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   102ac:	9b01      	ldr	r3, [sp, #4]
   102ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   102b2:	bf00      	nop
   102b4:	b003      	add	sp, #12
   102b6:	f85d fb04 	ldr.w	pc, [sp], #4
   102ba:	bf00      	nop
   102bc:	1fff93b8 	.word	0x1fff93b8
   102c0:	1fff93b4 	.word	0x1fff93b4

000102c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
   102c4:	b500      	push	{lr}
   102c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   102c8:	f7f0 fc6a 	bl	ba0 <Sys_GetCoreID>
   102cc:	4603      	mov	r3, r0
   102ce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]--;
   102d0:	4a0d      	ldr	r2, [pc, #52]	; (10308 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   102d2:	9b01      	ldr	r3, [sp, #4]
   102d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102d8:	1e5a      	subs	r2, r3, #1
   102da:	490b      	ldr	r1, [pc, #44]	; (10308 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   102dc:	9b01      	ldr	r3, [sp, #4]
   102de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_101[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]))         /*if interrupts were enabled*/
   102e2:	4a0a      	ldr	r2, [pc, #40]	; (1030c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x48>)
   102e4:	9b01      	ldr	r3, [sp, #4]
   102e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102ea:	f003 0301 	and.w	r3, r3, #1
   102ee:	2b00      	cmp	r3, #0
   102f0:	d106      	bne.n	10300 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
   102f2:	4a05      	ldr	r2, [pc, #20]	; (10308 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   102f4:	9b01      	ldr	r3, [sp, #4]
   102f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102fa:	2b00      	cmp	r3, #0
   102fc:	d100      	bne.n	10300 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   102fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10300:	bf00      	nop
   10302:	b003      	add	sp, #12
   10304:	f85d fb04 	ldr.w	pc, [sp], #4
   10308:	1fff93b8 	.word	0x1fff93b8
   1030c:	1fff93b4 	.word	0x1fff93b4

00010310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
   10310:	b500      	push	{lr}
   10312:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10314:	f7f0 fc44 	bl	ba0 <Sys_GetCoreID>
   10318:	4603      	mov	r3, r0
   1031a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId])
   1031c:	4a10      	ldr	r2, [pc, #64]	; (10360 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   1031e:	9b01      	ldr	r3, [sp, #4]
   10320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10324:	2b00      	cmp	r3, #0
   10326:	d10d      	bne.n	10344 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10328:	f7f0 fb00 	bl	92c <Adc_schm_read_msr>
   1032c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1032e:	9b00      	ldr	r3, [sp, #0]
   10330:	f003 0301 	and.w	r3, r3, #1
   10334:	2b00      	cmp	r3, #0
   10336:	d100      	bne.n	1033a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10338:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_102[u32CoreId] = msr;
   1033a:	490a      	ldr	r1, [pc, #40]	; (10364 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x54>)
   1033c:	9b01      	ldr	r3, [sp, #4]
   1033e:	9a00      	ldr	r2, [sp, #0]
   10340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]++;
   10344:	4a06      	ldr	r2, [pc, #24]	; (10360 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   10346:	9b01      	ldr	r3, [sp, #4]
   10348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1034c:	1c5a      	adds	r2, r3, #1
   1034e:	4904      	ldr	r1, [pc, #16]	; (10360 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   10350:	9b01      	ldr	r3, [sp, #4]
   10352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10356:	bf00      	nop
   10358:	b003      	add	sp, #12
   1035a:	f85d fb04 	ldr.w	pc, [sp], #4
   1035e:	bf00      	nop
   10360:	1fff93c0 	.word	0x1fff93c0
   10364:	1fff93bc 	.word	0x1fff93bc

00010368 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
   10368:	b500      	push	{lr}
   1036a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1036c:	f7f0 fc18 	bl	ba0 <Sys_GetCoreID>
   10370:	4603      	mov	r3, r0
   10372:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]--;
   10374:	4a0d      	ldr	r2, [pc, #52]	; (103ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   10376:	9b01      	ldr	r3, [sp, #4]
   10378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1037c:	1e5a      	subs	r2, r3, #1
   1037e:	490b      	ldr	r1, [pc, #44]	; (103ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   10380:	9b01      	ldr	r3, [sp, #4]
   10382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_102[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]))         /*if interrupts were enabled*/
   10386:	4a0a      	ldr	r2, [pc, #40]	; (103b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x48>)
   10388:	9b01      	ldr	r3, [sp, #4]
   1038a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1038e:	f003 0301 	and.w	r3, r3, #1
   10392:	2b00      	cmp	r3, #0
   10394:	d106      	bne.n	103a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
   10396:	4a05      	ldr	r2, [pc, #20]	; (103ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   10398:	9b01      	ldr	r3, [sp, #4]
   1039a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1039e:	2b00      	cmp	r3, #0
   103a0:	d100      	bne.n	103a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   103a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   103a4:	bf00      	nop
   103a6:	b003      	add	sp, #12
   103a8:	f85d fb04 	ldr.w	pc, [sp], #4
   103ac:	1fff93c0 	.word	0x1fff93c0
   103b0:	1fff93bc 	.word	0x1fff93bc

000103b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
   103b4:	b500      	push	{lr}
   103b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   103b8:	f7f0 fbf2 	bl	ba0 <Sys_GetCoreID>
   103bc:	4603      	mov	r3, r0
   103be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId])
   103c0:	4a10      	ldr	r2, [pc, #64]	; (10404 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   103c2:	9b01      	ldr	r3, [sp, #4]
   103c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103c8:	2b00      	cmp	r3, #0
   103ca:	d10d      	bne.n	103e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   103cc:	f7f0 faae 	bl	92c <Adc_schm_read_msr>
   103d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   103d2:	9b00      	ldr	r3, [sp, #0]
   103d4:	f003 0301 	and.w	r3, r3, #1
   103d8:	2b00      	cmp	r3, #0
   103da:	d100      	bne.n	103de <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   103dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_103[u32CoreId] = msr;
   103de:	490a      	ldr	r1, [pc, #40]	; (10408 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x54>)
   103e0:	9b01      	ldr	r3, [sp, #4]
   103e2:	9a00      	ldr	r2, [sp, #0]
   103e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]++;
   103e8:	4a06      	ldr	r2, [pc, #24]	; (10404 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   103ea:	9b01      	ldr	r3, [sp, #4]
   103ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103f0:	1c5a      	adds	r2, r3, #1
   103f2:	4904      	ldr	r1, [pc, #16]	; (10404 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   103f4:	9b01      	ldr	r3, [sp, #4]
   103f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   103fa:	bf00      	nop
   103fc:	b003      	add	sp, #12
   103fe:	f85d fb04 	ldr.w	pc, [sp], #4
   10402:	bf00      	nop
   10404:	1fff93c8 	.word	0x1fff93c8
   10408:	1fff93c4 	.word	0x1fff93c4

0001040c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
   1040c:	b500      	push	{lr}
   1040e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10410:	f7f0 fbc6 	bl	ba0 <Sys_GetCoreID>
   10414:	4603      	mov	r3, r0
   10416:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]--;
   10418:	4a0d      	ldr	r2, [pc, #52]	; (10450 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   1041a:	9b01      	ldr	r3, [sp, #4]
   1041c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10420:	1e5a      	subs	r2, r3, #1
   10422:	490b      	ldr	r1, [pc, #44]	; (10450 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   10424:	9b01      	ldr	r3, [sp, #4]
   10426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_103[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]))         /*if interrupts were enabled*/
   1042a:	4a0a      	ldr	r2, [pc, #40]	; (10454 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x48>)
   1042c:	9b01      	ldr	r3, [sp, #4]
   1042e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10432:	f003 0301 	and.w	r3, r3, #1
   10436:	2b00      	cmp	r3, #0
   10438:	d106      	bne.n	10448 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
   1043a:	4a05      	ldr	r2, [pc, #20]	; (10450 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   1043c:	9b01      	ldr	r3, [sp, #4]
   1043e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10442:	2b00      	cmp	r3, #0
   10444:	d100      	bne.n	10448 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10446:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10448:	bf00      	nop
   1044a:	b003      	add	sp, #12
   1044c:	f85d fb04 	ldr.w	pc, [sp], #4
   10450:	1fff93c8 	.word	0x1fff93c8
   10454:	1fff93c4 	.word	0x1fff93c4

00010458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
   10458:	b500      	push	{lr}
   1045a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1045c:	f7f0 fba0 	bl	ba0 <Sys_GetCoreID>
   10460:	4603      	mov	r3, r0
   10462:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId])
   10464:	4a10      	ldr	r2, [pc, #64]	; (104a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   10466:	9b01      	ldr	r3, [sp, #4]
   10468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1046c:	2b00      	cmp	r3, #0
   1046e:	d10d      	bne.n	1048c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10470:	f7f0 fa5c 	bl	92c <Adc_schm_read_msr>
   10474:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10476:	9b00      	ldr	r3, [sp, #0]
   10478:	f003 0301 	and.w	r3, r3, #1
   1047c:	2b00      	cmp	r3, #0
   1047e:	d100      	bne.n	10482 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10480:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   10482:	490a      	ldr	r1, [pc, #40]	; (104ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x54>)
   10484:	9b01      	ldr	r3, [sp, #4]
   10486:	9a00      	ldr	r2, [sp, #0]
   10488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]++;
   1048c:	4a06      	ldr	r2, [pc, #24]	; (104a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   1048e:	9b01      	ldr	r3, [sp, #4]
   10490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10494:	1c5a      	adds	r2, r3, #1
   10496:	4904      	ldr	r1, [pc, #16]	; (104a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   10498:	9b01      	ldr	r3, [sp, #4]
   1049a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1049e:	bf00      	nop
   104a0:	b003      	add	sp, #12
   104a2:	f85d fb04 	ldr.w	pc, [sp], #4
   104a6:	bf00      	nop
   104a8:	1fff93d0 	.word	0x1fff93d0
   104ac:	1fff93cc 	.word	0x1fff93cc

000104b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
   104b0:	b500      	push	{lr}
   104b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   104b4:	f7f0 fb74 	bl	ba0 <Sys_GetCoreID>
   104b8:	4603      	mov	r3, r0
   104ba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]--;
   104bc:	4a0d      	ldr	r2, [pc, #52]	; (104f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   104be:	9b01      	ldr	r3, [sp, #4]
   104c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104c4:	1e5a      	subs	r2, r3, #1
   104c6:	490b      	ldr	r1, [pc, #44]	; (104f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   104c8:	9b01      	ldr	r3, [sp, #4]
   104ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   104ce:	4a0a      	ldr	r2, [pc, #40]	; (104f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x48>)
   104d0:	9b01      	ldr	r3, [sp, #4]
   104d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104d6:	f003 0301 	and.w	r3, r3, #1
   104da:	2b00      	cmp	r3, #0
   104dc:	d106      	bne.n	104ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
   104de:	4a05      	ldr	r2, [pc, #20]	; (104f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   104e0:	9b01      	ldr	r3, [sp, #4]
   104e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104e6:	2b00      	cmp	r3, #0
   104e8:	d100      	bne.n	104ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   104ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   104ec:	bf00      	nop
   104ee:	b003      	add	sp, #12
   104f0:	f85d fb04 	ldr.w	pc, [sp], #4
   104f4:	1fff93d0 	.word	0x1fff93d0
   104f8:	1fff93cc 	.word	0x1fff93cc

000104fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
   104fc:	b500      	push	{lr}
   104fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10500:	f7f0 fb4e 	bl	ba0 <Sys_GetCoreID>
   10504:	4603      	mov	r3, r0
   10506:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId])
   10508:	4a10      	ldr	r2, [pc, #64]	; (1054c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   1050a:	9b01      	ldr	r3, [sp, #4]
   1050c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10510:	2b00      	cmp	r3, #0
   10512:	d10d      	bne.n	10530 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10514:	f7f0 fa0a 	bl	92c <Adc_schm_read_msr>
   10518:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1051a:	9b00      	ldr	r3, [sp, #0]
   1051c:	f003 0301 	and.w	r3, r3, #1
   10520:	2b00      	cmp	r3, #0
   10522:	d100      	bne.n	10526 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10524:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   10526:	490a      	ldr	r1, [pc, #40]	; (10550 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x54>)
   10528:	9b01      	ldr	r3, [sp, #4]
   1052a:	9a00      	ldr	r2, [sp, #0]
   1052c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]++;
   10530:	4a06      	ldr	r2, [pc, #24]	; (1054c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   10532:	9b01      	ldr	r3, [sp, #4]
   10534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10538:	1c5a      	adds	r2, r3, #1
   1053a:	4904      	ldr	r1, [pc, #16]	; (1054c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   1053c:	9b01      	ldr	r3, [sp, #4]
   1053e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10542:	bf00      	nop
   10544:	b003      	add	sp, #12
   10546:	f85d fb04 	ldr.w	pc, [sp], #4
   1054a:	bf00      	nop
   1054c:	1fff93d8 	.word	0x1fff93d8
   10550:	1fff93d4 	.word	0x1fff93d4

00010554 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
   10554:	b500      	push	{lr}
   10556:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10558:	f7f0 fb22 	bl	ba0 <Sys_GetCoreID>
   1055c:	4603      	mov	r3, r0
   1055e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]--;
   10560:	4a0d      	ldr	r2, [pc, #52]	; (10598 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   10562:	9b01      	ldr	r3, [sp, #4]
   10564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10568:	1e5a      	subs	r2, r3, #1
   1056a:	490b      	ldr	r1, [pc, #44]	; (10598 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   1056c:	9b01      	ldr	r3, [sp, #4]
   1056e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   10572:	4a0a      	ldr	r2, [pc, #40]	; (1059c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x48>)
   10574:	9b01      	ldr	r3, [sp, #4]
   10576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1057a:	f003 0301 	and.w	r3, r3, #1
   1057e:	2b00      	cmp	r3, #0
   10580:	d106      	bne.n	10590 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
   10582:	4a05      	ldr	r2, [pc, #20]	; (10598 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   10584:	9b01      	ldr	r3, [sp, #4]
   10586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1058a:	2b00      	cmp	r3, #0
   1058c:	d100      	bne.n	10590 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1058e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10590:	bf00      	nop
   10592:	b003      	add	sp, #12
   10594:	f85d fb04 	ldr.w	pc, [sp], #4
   10598:	1fff93d8 	.word	0x1fff93d8
   1059c:	1fff93d4 	.word	0x1fff93d4

000105a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
   105a0:	b500      	push	{lr}
   105a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   105a4:	f7f0 fafc 	bl	ba0 <Sys_GetCoreID>
   105a8:	4603      	mov	r3, r0
   105aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId])
   105ac:	4a10      	ldr	r2, [pc, #64]	; (105f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   105ae:	9b01      	ldr	r3, [sp, #4]
   105b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105b4:	2b00      	cmp	r3, #0
   105b6:	d10d      	bne.n	105d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   105b8:	f7f0 f9b8 	bl	92c <Adc_schm_read_msr>
   105bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   105be:	9b00      	ldr	r3, [sp, #0]
   105c0:	f003 0301 	and.w	r3, r3, #1
   105c4:	2b00      	cmp	r3, #0
   105c6:	d100      	bne.n	105ca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   105c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   105ca:	490a      	ldr	r1, [pc, #40]	; (105f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x54>)
   105cc:	9b01      	ldr	r3, [sp, #4]
   105ce:	9a00      	ldr	r2, [sp, #0]
   105d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]++;
   105d4:	4a06      	ldr	r2, [pc, #24]	; (105f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   105d6:	9b01      	ldr	r3, [sp, #4]
   105d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105dc:	1c5a      	adds	r2, r3, #1
   105de:	4904      	ldr	r1, [pc, #16]	; (105f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   105e0:	9b01      	ldr	r3, [sp, #4]
   105e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   105e6:	bf00      	nop
   105e8:	b003      	add	sp, #12
   105ea:	f85d fb04 	ldr.w	pc, [sp], #4
   105ee:	bf00      	nop
   105f0:	1fff93e0 	.word	0x1fff93e0
   105f4:	1fff93dc 	.word	0x1fff93dc

000105f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
   105f8:	b500      	push	{lr}
   105fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   105fc:	f7f0 fad0 	bl	ba0 <Sys_GetCoreID>
   10600:	4603      	mov	r3, r0
   10602:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]--;
   10604:	4a0d      	ldr	r2, [pc, #52]	; (1063c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   10606:	9b01      	ldr	r3, [sp, #4]
   10608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1060c:	1e5a      	subs	r2, r3, #1
   1060e:	490b      	ldr	r1, [pc, #44]	; (1063c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   10610:	9b01      	ldr	r3, [sp, #4]
   10612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   10616:	4a0a      	ldr	r2, [pc, #40]	; (10640 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x48>)
   10618:	9b01      	ldr	r3, [sp, #4]
   1061a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1061e:	f003 0301 	and.w	r3, r3, #1
   10622:	2b00      	cmp	r3, #0
   10624:	d106      	bne.n	10634 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
   10626:	4a05      	ldr	r2, [pc, #20]	; (1063c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   10628:	9b01      	ldr	r3, [sp, #4]
   1062a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1062e:	2b00      	cmp	r3, #0
   10630:	d100      	bne.n	10634 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10632:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10634:	bf00      	nop
   10636:	b003      	add	sp, #12
   10638:	f85d fb04 	ldr.w	pc, [sp], #4
   1063c:	1fff93e0 	.word	0x1fff93e0
   10640:	1fff93dc 	.word	0x1fff93dc

00010644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
   10644:	b500      	push	{lr}
   10646:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10648:	f7f0 faaa 	bl	ba0 <Sys_GetCoreID>
   1064c:	4603      	mov	r3, r0
   1064e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId])
   10650:	4a10      	ldr	r2, [pc, #64]	; (10694 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   10652:	9b01      	ldr	r3, [sp, #4]
   10654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10658:	2b00      	cmp	r3, #0
   1065a:	d10d      	bne.n	10678 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1065c:	f7f0 f966 	bl	92c <Adc_schm_read_msr>
   10660:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10662:	9b00      	ldr	r3, [sp, #0]
   10664:	f003 0301 	and.w	r3, r3, #1
   10668:	2b00      	cmp	r3, #0
   1066a:	d100      	bne.n	1066e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1066c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   1066e:	490a      	ldr	r1, [pc, #40]	; (10698 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x54>)
   10670:	9b01      	ldr	r3, [sp, #4]
   10672:	9a00      	ldr	r2, [sp, #0]
   10674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]++;
   10678:	4a06      	ldr	r2, [pc, #24]	; (10694 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   1067a:	9b01      	ldr	r3, [sp, #4]
   1067c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10680:	1c5a      	adds	r2, r3, #1
   10682:	4904      	ldr	r1, [pc, #16]	; (10694 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   10684:	9b01      	ldr	r3, [sp, #4]
   10686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1068a:	bf00      	nop
   1068c:	b003      	add	sp, #12
   1068e:	f85d fb04 	ldr.w	pc, [sp], #4
   10692:	bf00      	nop
   10694:	1fff93e8 	.word	0x1fff93e8
   10698:	1fff93e4 	.word	0x1fff93e4

0001069c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
   1069c:	b500      	push	{lr}
   1069e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   106a0:	f7f0 fa7e 	bl	ba0 <Sys_GetCoreID>
   106a4:	4603      	mov	r3, r0
   106a6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]--;
   106a8:	4a0d      	ldr	r2, [pc, #52]	; (106e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   106aa:	9b01      	ldr	r3, [sp, #4]
   106ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106b0:	1e5a      	subs	r2, r3, #1
   106b2:	490b      	ldr	r1, [pc, #44]	; (106e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   106b4:	9b01      	ldr	r3, [sp, #4]
   106b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   106ba:	4a0a      	ldr	r2, [pc, #40]	; (106e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x48>)
   106bc:	9b01      	ldr	r3, [sp, #4]
   106be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106c2:	f003 0301 	and.w	r3, r3, #1
   106c6:	2b00      	cmp	r3, #0
   106c8:	d106      	bne.n	106d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
   106ca:	4a05      	ldr	r2, [pc, #20]	; (106e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   106cc:	9b01      	ldr	r3, [sp, #4]
   106ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106d2:	2b00      	cmp	r3, #0
   106d4:	d100      	bne.n	106d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   106d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   106d8:	bf00      	nop
   106da:	b003      	add	sp, #12
   106dc:	f85d fb04 	ldr.w	pc, [sp], #4
   106e0:	1fff93e8 	.word	0x1fff93e8
   106e4:	1fff93e4 	.word	0x1fff93e4

000106e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
   106e8:	b500      	push	{lr}
   106ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   106ec:	f7f0 fa58 	bl	ba0 <Sys_GetCoreID>
   106f0:	4603      	mov	r3, r0
   106f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId])
   106f4:	4a10      	ldr	r2, [pc, #64]	; (10738 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   106f6:	9b01      	ldr	r3, [sp, #4]
   106f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106fc:	2b00      	cmp	r3, #0
   106fe:	d10d      	bne.n	1071c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10700:	f7f0 f914 	bl	92c <Adc_schm_read_msr>
   10704:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10706:	9b00      	ldr	r3, [sp, #0]
   10708:	f003 0301 	and.w	r3, r3, #1
   1070c:	2b00      	cmp	r3, #0
   1070e:	d100      	bne.n	10712 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10710:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   10712:	490a      	ldr	r1, [pc, #40]	; (1073c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x54>)
   10714:	9b01      	ldr	r3, [sp, #4]
   10716:	9a00      	ldr	r2, [sp, #0]
   10718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]++;
   1071c:	4a06      	ldr	r2, [pc, #24]	; (10738 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   1071e:	9b01      	ldr	r3, [sp, #4]
   10720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10724:	1c5a      	adds	r2, r3, #1
   10726:	4904      	ldr	r1, [pc, #16]	; (10738 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   10728:	9b01      	ldr	r3, [sp, #4]
   1072a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1072e:	bf00      	nop
   10730:	b003      	add	sp, #12
   10732:	f85d fb04 	ldr.w	pc, [sp], #4
   10736:	bf00      	nop
   10738:	1fff93f0 	.word	0x1fff93f0
   1073c:	1fff93ec 	.word	0x1fff93ec

00010740 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
   10740:	b500      	push	{lr}
   10742:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10744:	f7f0 fa2c 	bl	ba0 <Sys_GetCoreID>
   10748:	4603      	mov	r3, r0
   1074a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]--;
   1074c:	4a0d      	ldr	r2, [pc, #52]	; (10784 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   1074e:	9b01      	ldr	r3, [sp, #4]
   10750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10754:	1e5a      	subs	r2, r3, #1
   10756:	490b      	ldr	r1, [pc, #44]	; (10784 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   10758:	9b01      	ldr	r3, [sp, #4]
   1075a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   1075e:	4a0a      	ldr	r2, [pc, #40]	; (10788 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x48>)
   10760:	9b01      	ldr	r3, [sp, #4]
   10762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10766:	f003 0301 	and.w	r3, r3, #1
   1076a:	2b00      	cmp	r3, #0
   1076c:	d106      	bne.n	1077c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
   1076e:	4a05      	ldr	r2, [pc, #20]	; (10784 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   10770:	9b01      	ldr	r3, [sp, #4]
   10772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10776:	2b00      	cmp	r3, #0
   10778:	d100      	bne.n	1077c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1077a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1077c:	bf00      	nop
   1077e:	b003      	add	sp, #12
   10780:	f85d fb04 	ldr.w	pc, [sp], #4
   10784:	1fff93f0 	.word	0x1fff93f0
   10788:	1fff93ec 	.word	0x1fff93ec

0001078c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
   1078c:	b500      	push	{lr}
   1078e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10790:	f7f0 fa06 	bl	ba0 <Sys_GetCoreID>
   10794:	4603      	mov	r3, r0
   10796:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId])
   10798:	4a10      	ldr	r2, [pc, #64]	; (107dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   1079a:	9b01      	ldr	r3, [sp, #4]
   1079c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107a0:	2b00      	cmp	r3, #0
   107a2:	d10d      	bne.n	107c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   107a4:	f7f0 f8c2 	bl	92c <Adc_schm_read_msr>
   107a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   107aa:	9b00      	ldr	r3, [sp, #0]
   107ac:	f003 0301 	and.w	r3, r3, #1
   107b0:	2b00      	cmp	r3, #0
   107b2:	d100      	bne.n	107b6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   107b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   107b6:	490a      	ldr	r1, [pc, #40]	; (107e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x54>)
   107b8:	9b01      	ldr	r3, [sp, #4]
   107ba:	9a00      	ldr	r2, [sp, #0]
   107bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]++;
   107c0:	4a06      	ldr	r2, [pc, #24]	; (107dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   107c2:	9b01      	ldr	r3, [sp, #4]
   107c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107c8:	1c5a      	adds	r2, r3, #1
   107ca:	4904      	ldr	r1, [pc, #16]	; (107dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   107cc:	9b01      	ldr	r3, [sp, #4]
   107ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   107d2:	bf00      	nop
   107d4:	b003      	add	sp, #12
   107d6:	f85d fb04 	ldr.w	pc, [sp], #4
   107da:	bf00      	nop
   107dc:	1fff93f8 	.word	0x1fff93f8
   107e0:	1fff93f4 	.word	0x1fff93f4

000107e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
   107e4:	b500      	push	{lr}
   107e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   107e8:	f7f0 f9da 	bl	ba0 <Sys_GetCoreID>
   107ec:	4603      	mov	r3, r0
   107ee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]--;
   107f0:	4a0d      	ldr	r2, [pc, #52]	; (10828 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   107f2:	9b01      	ldr	r3, [sp, #4]
   107f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107f8:	1e5a      	subs	r2, r3, #1
   107fa:	490b      	ldr	r1, [pc, #44]	; (10828 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   107fc:	9b01      	ldr	r3, [sp, #4]
   107fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   10802:	4a0a      	ldr	r2, [pc, #40]	; (1082c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x48>)
   10804:	9b01      	ldr	r3, [sp, #4]
   10806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1080a:	f003 0301 	and.w	r3, r3, #1
   1080e:	2b00      	cmp	r3, #0
   10810:	d106      	bne.n	10820 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
   10812:	4a05      	ldr	r2, [pc, #20]	; (10828 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   10814:	9b01      	ldr	r3, [sp, #4]
   10816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1081a:	2b00      	cmp	r3, #0
   1081c:	d100      	bne.n	10820 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1081e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10820:	bf00      	nop
   10822:	b003      	add	sp, #12
   10824:	f85d fb04 	ldr.w	pc, [sp], #4
   10828:	1fff93f8 	.word	0x1fff93f8
   1082c:	1fff93f4 	.word	0x1fff93f4

00010830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
   10830:	b500      	push	{lr}
   10832:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10834:	f7f0 f9b4 	bl	ba0 <Sys_GetCoreID>
   10838:	4603      	mov	r3, r0
   1083a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId])
   1083c:	4a10      	ldr	r2, [pc, #64]	; (10880 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   1083e:	9b01      	ldr	r3, [sp, #4]
   10840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10844:	2b00      	cmp	r3, #0
   10846:	d10d      	bne.n	10864 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10848:	f7f0 f870 	bl	92c <Adc_schm_read_msr>
   1084c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1084e:	9b00      	ldr	r3, [sp, #0]
   10850:	f003 0301 	and.w	r3, r3, #1
   10854:	2b00      	cmp	r3, #0
   10856:	d100      	bne.n	1085a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10858:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   1085a:	490a      	ldr	r1, [pc, #40]	; (10884 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x54>)
   1085c:	9b01      	ldr	r3, [sp, #4]
   1085e:	9a00      	ldr	r2, [sp, #0]
   10860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]++;
   10864:	4a06      	ldr	r2, [pc, #24]	; (10880 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   10866:	9b01      	ldr	r3, [sp, #4]
   10868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1086c:	1c5a      	adds	r2, r3, #1
   1086e:	4904      	ldr	r1, [pc, #16]	; (10880 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   10870:	9b01      	ldr	r3, [sp, #4]
   10872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10876:	bf00      	nop
   10878:	b003      	add	sp, #12
   1087a:	f85d fb04 	ldr.w	pc, [sp], #4
   1087e:	bf00      	nop
   10880:	1fff9400 	.word	0x1fff9400
   10884:	1fff93fc 	.word	0x1fff93fc

00010888 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
   10888:	b500      	push	{lr}
   1088a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1088c:	f7f0 f988 	bl	ba0 <Sys_GetCoreID>
   10890:	4603      	mov	r3, r0
   10892:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]--;
   10894:	4a0d      	ldr	r2, [pc, #52]	; (108cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   10896:	9b01      	ldr	r3, [sp, #4]
   10898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1089c:	1e5a      	subs	r2, r3, #1
   1089e:	490b      	ldr	r1, [pc, #44]	; (108cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   108a0:	9b01      	ldr	r3, [sp, #4]
   108a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   108a6:	4a0a      	ldr	r2, [pc, #40]	; (108d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x48>)
   108a8:	9b01      	ldr	r3, [sp, #4]
   108aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108ae:	f003 0301 	and.w	r3, r3, #1
   108b2:	2b00      	cmp	r3, #0
   108b4:	d106      	bne.n	108c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
   108b6:	4a05      	ldr	r2, [pc, #20]	; (108cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   108b8:	9b01      	ldr	r3, [sp, #4]
   108ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108be:	2b00      	cmp	r3, #0
   108c0:	d100      	bne.n	108c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   108c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   108c4:	bf00      	nop
   108c6:	b003      	add	sp, #12
   108c8:	f85d fb04 	ldr.w	pc, [sp], #4
   108cc:	1fff9400 	.word	0x1fff9400
   108d0:	1fff93fc 	.word	0x1fff93fc

000108d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
   108d4:	b500      	push	{lr}
   108d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   108d8:	f7f0 f962 	bl	ba0 <Sys_GetCoreID>
   108dc:	4603      	mov	r3, r0
   108de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId])
   108e0:	4a10      	ldr	r2, [pc, #64]	; (10924 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   108e2:	9b01      	ldr	r3, [sp, #4]
   108e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108e8:	2b00      	cmp	r3, #0
   108ea:	d10d      	bne.n	10908 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   108ec:	f7f0 f81e 	bl	92c <Adc_schm_read_msr>
   108f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   108f2:	9b00      	ldr	r3, [sp, #0]
   108f4:	f003 0301 	and.w	r3, r3, #1
   108f8:	2b00      	cmp	r3, #0
   108fa:	d100      	bne.n	108fe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   108fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   108fe:	490a      	ldr	r1, [pc, #40]	; (10928 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x54>)
   10900:	9b01      	ldr	r3, [sp, #4]
   10902:	9a00      	ldr	r2, [sp, #0]
   10904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]++;
   10908:	4a06      	ldr	r2, [pc, #24]	; (10924 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   1090a:	9b01      	ldr	r3, [sp, #4]
   1090c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10910:	1c5a      	adds	r2, r3, #1
   10912:	4904      	ldr	r1, [pc, #16]	; (10924 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   10914:	9b01      	ldr	r3, [sp, #4]
   10916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1091a:	bf00      	nop
   1091c:	b003      	add	sp, #12
   1091e:	f85d fb04 	ldr.w	pc, [sp], #4
   10922:	bf00      	nop
   10924:	1fff9408 	.word	0x1fff9408
   10928:	1fff9404 	.word	0x1fff9404

0001092c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
   1092c:	b500      	push	{lr}
   1092e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10930:	f7f0 f936 	bl	ba0 <Sys_GetCoreID>
   10934:	4603      	mov	r3, r0
   10936:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]--;
   10938:	4a0d      	ldr	r2, [pc, #52]	; (10970 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   1093a:	9b01      	ldr	r3, [sp, #4]
   1093c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10940:	1e5a      	subs	r2, r3, #1
   10942:	490b      	ldr	r1, [pc, #44]	; (10970 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   10944:	9b01      	ldr	r3, [sp, #4]
   10946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   1094a:	4a0a      	ldr	r2, [pc, #40]	; (10974 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x48>)
   1094c:	9b01      	ldr	r3, [sp, #4]
   1094e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10952:	f003 0301 	and.w	r3, r3, #1
   10956:	2b00      	cmp	r3, #0
   10958:	d106      	bne.n	10968 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
   1095a:	4a05      	ldr	r2, [pc, #20]	; (10970 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   1095c:	9b01      	ldr	r3, [sp, #4]
   1095e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10962:	2b00      	cmp	r3, #0
   10964:	d100      	bne.n	10968 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10966:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10968:	bf00      	nop
   1096a:	b003      	add	sp, #12
   1096c:	f85d fb04 	ldr.w	pc, [sp], #4
   10970:	1fff9408 	.word	0x1fff9408
   10974:	1fff9404 	.word	0x1fff9404

00010978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
   10978:	b500      	push	{lr}
   1097a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1097c:	f7f0 f910 	bl	ba0 <Sys_GetCoreID>
   10980:	4603      	mov	r3, r0
   10982:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId])
   10984:	4a10      	ldr	r2, [pc, #64]	; (109c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   10986:	9b01      	ldr	r3, [sp, #4]
   10988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1098c:	2b00      	cmp	r3, #0
   1098e:	d10d      	bne.n	109ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10990:	f7ef ffcc 	bl	92c <Adc_schm_read_msr>
   10994:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10996:	9b00      	ldr	r3, [sp, #0]
   10998:	f003 0301 	and.w	r3, r3, #1
   1099c:	2b00      	cmp	r3, #0
   1099e:	d100      	bne.n	109a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   109a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   109a2:	490a      	ldr	r1, [pc, #40]	; (109cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x54>)
   109a4:	9b01      	ldr	r3, [sp, #4]
   109a6:	9a00      	ldr	r2, [sp, #0]
   109a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]++;
   109ac:	4a06      	ldr	r2, [pc, #24]	; (109c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   109ae:	9b01      	ldr	r3, [sp, #4]
   109b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109b4:	1c5a      	adds	r2, r3, #1
   109b6:	4904      	ldr	r1, [pc, #16]	; (109c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   109b8:	9b01      	ldr	r3, [sp, #4]
   109ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   109be:	bf00      	nop
   109c0:	b003      	add	sp, #12
   109c2:	f85d fb04 	ldr.w	pc, [sp], #4
   109c6:	bf00      	nop
   109c8:	1fff9410 	.word	0x1fff9410
   109cc:	1fff940c 	.word	0x1fff940c

000109d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
   109d0:	b500      	push	{lr}
   109d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   109d4:	f7f0 f8e4 	bl	ba0 <Sys_GetCoreID>
   109d8:	4603      	mov	r3, r0
   109da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]--;
   109dc:	4a0d      	ldr	r2, [pc, #52]	; (10a14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   109de:	9b01      	ldr	r3, [sp, #4]
   109e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109e4:	1e5a      	subs	r2, r3, #1
   109e6:	490b      	ldr	r1, [pc, #44]	; (10a14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   109e8:	9b01      	ldr	r3, [sp, #4]
   109ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   109ee:	4a0a      	ldr	r2, [pc, #40]	; (10a18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x48>)
   109f0:	9b01      	ldr	r3, [sp, #4]
   109f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109f6:	f003 0301 	and.w	r3, r3, #1
   109fa:	2b00      	cmp	r3, #0
   109fc:	d106      	bne.n	10a0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
   109fe:	4a05      	ldr	r2, [pc, #20]	; (10a14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   10a00:	9b01      	ldr	r3, [sp, #4]
   10a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a06:	2b00      	cmp	r3, #0
   10a08:	d100      	bne.n	10a0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10a0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10a0c:	bf00      	nop
   10a0e:	b003      	add	sp, #12
   10a10:	f85d fb04 	ldr.w	pc, [sp], #4
   10a14:	1fff9410 	.word	0x1fff9410
   10a18:	1fff940c 	.word	0x1fff940c

00010a1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
   10a1c:	b500      	push	{lr}
   10a1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10a20:	f7f0 f8be 	bl	ba0 <Sys_GetCoreID>
   10a24:	4603      	mov	r3, r0
   10a26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId])
   10a28:	4a10      	ldr	r2, [pc, #64]	; (10a6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   10a2a:	9b01      	ldr	r3, [sp, #4]
   10a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a30:	2b00      	cmp	r3, #0
   10a32:	d10d      	bne.n	10a50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10a34:	f7ef ff7a 	bl	92c <Adc_schm_read_msr>
   10a38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10a3a:	9b00      	ldr	r3, [sp, #0]
   10a3c:	f003 0301 	and.w	r3, r3, #1
   10a40:	2b00      	cmp	r3, #0
   10a42:	d100      	bne.n	10a46 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10a44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   10a46:	490a      	ldr	r1, [pc, #40]	; (10a70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x54>)
   10a48:	9b01      	ldr	r3, [sp, #4]
   10a4a:	9a00      	ldr	r2, [sp, #0]
   10a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]++;
   10a50:	4a06      	ldr	r2, [pc, #24]	; (10a6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   10a52:	9b01      	ldr	r3, [sp, #4]
   10a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a58:	1c5a      	adds	r2, r3, #1
   10a5a:	4904      	ldr	r1, [pc, #16]	; (10a6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   10a5c:	9b01      	ldr	r3, [sp, #4]
   10a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10a62:	bf00      	nop
   10a64:	b003      	add	sp, #12
   10a66:	f85d fb04 	ldr.w	pc, [sp], #4
   10a6a:	bf00      	nop
   10a6c:	1fff9418 	.word	0x1fff9418
   10a70:	1fff9414 	.word	0x1fff9414

00010a74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
   10a74:	b500      	push	{lr}
   10a76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10a78:	f7f0 f892 	bl	ba0 <Sys_GetCoreID>
   10a7c:	4603      	mov	r3, r0
   10a7e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]--;
   10a80:	4a0d      	ldr	r2, [pc, #52]	; (10ab8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   10a82:	9b01      	ldr	r3, [sp, #4]
   10a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a88:	1e5a      	subs	r2, r3, #1
   10a8a:	490b      	ldr	r1, [pc, #44]	; (10ab8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   10a8c:	9b01      	ldr	r3, [sp, #4]
   10a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   10a92:	4a0a      	ldr	r2, [pc, #40]	; (10abc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x48>)
   10a94:	9b01      	ldr	r3, [sp, #4]
   10a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a9a:	f003 0301 	and.w	r3, r3, #1
   10a9e:	2b00      	cmp	r3, #0
   10aa0:	d106      	bne.n	10ab0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
   10aa2:	4a05      	ldr	r2, [pc, #20]	; (10ab8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   10aa4:	9b01      	ldr	r3, [sp, #4]
   10aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10aaa:	2b00      	cmp	r3, #0
   10aac:	d100      	bne.n	10ab0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10aae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10ab0:	bf00      	nop
   10ab2:	b003      	add	sp, #12
   10ab4:	f85d fb04 	ldr.w	pc, [sp], #4
   10ab8:	1fff9418 	.word	0x1fff9418
   10abc:	1fff9414 	.word	0x1fff9414

00010ac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
   10ac0:	b500      	push	{lr}
   10ac2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ac4:	f7f0 f86c 	bl	ba0 <Sys_GetCoreID>
   10ac8:	4603      	mov	r3, r0
   10aca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId])
   10acc:	4a10      	ldr	r2, [pc, #64]	; (10b10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   10ace:	9b01      	ldr	r3, [sp, #4]
   10ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ad4:	2b00      	cmp	r3, #0
   10ad6:	d10d      	bne.n	10af4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10ad8:	f7ef ff28 	bl	92c <Adc_schm_read_msr>
   10adc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10ade:	9b00      	ldr	r3, [sp, #0]
   10ae0:	f003 0301 	and.w	r3, r3, #1
   10ae4:	2b00      	cmp	r3, #0
   10ae6:	d100      	bne.n	10aea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10ae8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   10aea:	490a      	ldr	r1, [pc, #40]	; (10b14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x54>)
   10aec:	9b01      	ldr	r3, [sp, #4]
   10aee:	9a00      	ldr	r2, [sp, #0]
   10af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]++;
   10af4:	4a06      	ldr	r2, [pc, #24]	; (10b10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   10af6:	9b01      	ldr	r3, [sp, #4]
   10af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10afc:	1c5a      	adds	r2, r3, #1
   10afe:	4904      	ldr	r1, [pc, #16]	; (10b10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   10b00:	9b01      	ldr	r3, [sp, #4]
   10b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10b06:	bf00      	nop
   10b08:	b003      	add	sp, #12
   10b0a:	f85d fb04 	ldr.w	pc, [sp], #4
   10b0e:	bf00      	nop
   10b10:	1fff9420 	.word	0x1fff9420
   10b14:	1fff941c 	.word	0x1fff941c

00010b18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
   10b18:	b500      	push	{lr}
   10b1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10b1c:	f7f0 f840 	bl	ba0 <Sys_GetCoreID>
   10b20:	4603      	mov	r3, r0
   10b22:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]--;
   10b24:	4a0d      	ldr	r2, [pc, #52]	; (10b5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   10b26:	9b01      	ldr	r3, [sp, #4]
   10b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b2c:	1e5a      	subs	r2, r3, #1
   10b2e:	490b      	ldr	r1, [pc, #44]	; (10b5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   10b30:	9b01      	ldr	r3, [sp, #4]
   10b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   10b36:	4a0a      	ldr	r2, [pc, #40]	; (10b60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x48>)
   10b38:	9b01      	ldr	r3, [sp, #4]
   10b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b3e:	f003 0301 	and.w	r3, r3, #1
   10b42:	2b00      	cmp	r3, #0
   10b44:	d106      	bne.n	10b54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
   10b46:	4a05      	ldr	r2, [pc, #20]	; (10b5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   10b48:	9b01      	ldr	r3, [sp, #4]
   10b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b4e:	2b00      	cmp	r3, #0
   10b50:	d100      	bne.n	10b54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10b52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10b54:	bf00      	nop
   10b56:	b003      	add	sp, #12
   10b58:	f85d fb04 	ldr.w	pc, [sp], #4
   10b5c:	1fff9420 	.word	0x1fff9420
   10b60:	1fff941c 	.word	0x1fff941c

00010b64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
   10b64:	b500      	push	{lr}
   10b66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10b68:	f7f0 f81a 	bl	ba0 <Sys_GetCoreID>
   10b6c:	4603      	mov	r3, r0
   10b6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId])
   10b70:	4a10      	ldr	r2, [pc, #64]	; (10bb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   10b72:	9b01      	ldr	r3, [sp, #4]
   10b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b78:	2b00      	cmp	r3, #0
   10b7a:	d10d      	bne.n	10b98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10b7c:	f7ef fed6 	bl	92c <Adc_schm_read_msr>
   10b80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10b82:	9b00      	ldr	r3, [sp, #0]
   10b84:	f003 0301 	and.w	r3, r3, #1
   10b88:	2b00      	cmp	r3, #0
   10b8a:	d100      	bne.n	10b8e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10b8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   10b8e:	490a      	ldr	r1, [pc, #40]	; (10bb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x54>)
   10b90:	9b01      	ldr	r3, [sp, #4]
   10b92:	9a00      	ldr	r2, [sp, #0]
   10b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]++;
   10b98:	4a06      	ldr	r2, [pc, #24]	; (10bb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   10b9a:	9b01      	ldr	r3, [sp, #4]
   10b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ba0:	1c5a      	adds	r2, r3, #1
   10ba2:	4904      	ldr	r1, [pc, #16]	; (10bb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   10ba4:	9b01      	ldr	r3, [sp, #4]
   10ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10baa:	bf00      	nop
   10bac:	b003      	add	sp, #12
   10bae:	f85d fb04 	ldr.w	pc, [sp], #4
   10bb2:	bf00      	nop
   10bb4:	1fff9428 	.word	0x1fff9428
   10bb8:	1fff9424 	.word	0x1fff9424

00010bbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
   10bbc:	b500      	push	{lr}
   10bbe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10bc0:	f7ef ffee 	bl	ba0 <Sys_GetCoreID>
   10bc4:	4603      	mov	r3, r0
   10bc6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]--;
   10bc8:	4a0d      	ldr	r2, [pc, #52]	; (10c00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   10bca:	9b01      	ldr	r3, [sp, #4]
   10bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10bd0:	1e5a      	subs	r2, r3, #1
   10bd2:	490b      	ldr	r1, [pc, #44]	; (10c00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   10bd4:	9b01      	ldr	r3, [sp, #4]
   10bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   10bda:	4a0a      	ldr	r2, [pc, #40]	; (10c04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x48>)
   10bdc:	9b01      	ldr	r3, [sp, #4]
   10bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10be2:	f003 0301 	and.w	r3, r3, #1
   10be6:	2b00      	cmp	r3, #0
   10be8:	d106      	bne.n	10bf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
   10bea:	4a05      	ldr	r2, [pc, #20]	; (10c00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   10bec:	9b01      	ldr	r3, [sp, #4]
   10bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10bf2:	2b00      	cmp	r3, #0
   10bf4:	d100      	bne.n	10bf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10bf6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10bf8:	bf00      	nop
   10bfa:	b003      	add	sp, #12
   10bfc:	f85d fb04 	ldr.w	pc, [sp], #4
   10c00:	1fff9428 	.word	0x1fff9428
   10c04:	1fff9424 	.word	0x1fff9424

00010c08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
   10c08:	b500      	push	{lr}
   10c0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10c0c:	f7ef ffc8 	bl	ba0 <Sys_GetCoreID>
   10c10:	4603      	mov	r3, r0
   10c12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId])
   10c14:	4a10      	ldr	r2, [pc, #64]	; (10c58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   10c16:	9b01      	ldr	r3, [sp, #4]
   10c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c1c:	2b00      	cmp	r3, #0
   10c1e:	d10d      	bne.n	10c3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10c20:	f7ef fe84 	bl	92c <Adc_schm_read_msr>
   10c24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10c26:	9b00      	ldr	r3, [sp, #0]
   10c28:	f003 0301 	and.w	r3, r3, #1
   10c2c:	2b00      	cmp	r3, #0
   10c2e:	d100      	bne.n	10c32 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10c30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   10c32:	490a      	ldr	r1, [pc, #40]	; (10c5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x54>)
   10c34:	9b01      	ldr	r3, [sp, #4]
   10c36:	9a00      	ldr	r2, [sp, #0]
   10c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]++;
   10c3c:	4a06      	ldr	r2, [pc, #24]	; (10c58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   10c3e:	9b01      	ldr	r3, [sp, #4]
   10c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c44:	1c5a      	adds	r2, r3, #1
   10c46:	4904      	ldr	r1, [pc, #16]	; (10c58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   10c48:	9b01      	ldr	r3, [sp, #4]
   10c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10c4e:	bf00      	nop
   10c50:	b003      	add	sp, #12
   10c52:	f85d fb04 	ldr.w	pc, [sp], #4
   10c56:	bf00      	nop
   10c58:	1fff9430 	.word	0x1fff9430
   10c5c:	1fff942c 	.word	0x1fff942c

00010c60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
   10c60:	b500      	push	{lr}
   10c62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10c64:	f7ef ff9c 	bl	ba0 <Sys_GetCoreID>
   10c68:	4603      	mov	r3, r0
   10c6a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]--;
   10c6c:	4a0d      	ldr	r2, [pc, #52]	; (10ca4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   10c6e:	9b01      	ldr	r3, [sp, #4]
   10c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c74:	1e5a      	subs	r2, r3, #1
   10c76:	490b      	ldr	r1, [pc, #44]	; (10ca4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   10c78:	9b01      	ldr	r3, [sp, #4]
   10c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   10c7e:	4a0a      	ldr	r2, [pc, #40]	; (10ca8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x48>)
   10c80:	9b01      	ldr	r3, [sp, #4]
   10c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c86:	f003 0301 	and.w	r3, r3, #1
   10c8a:	2b00      	cmp	r3, #0
   10c8c:	d106      	bne.n	10c9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
   10c8e:	4a05      	ldr	r2, [pc, #20]	; (10ca4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   10c90:	9b01      	ldr	r3, [sp, #4]
   10c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c96:	2b00      	cmp	r3, #0
   10c98:	d100      	bne.n	10c9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10c9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10c9c:	bf00      	nop
   10c9e:	b003      	add	sp, #12
   10ca0:	f85d fb04 	ldr.w	pc, [sp], #4
   10ca4:	1fff9430 	.word	0x1fff9430
   10ca8:	1fff942c 	.word	0x1fff942c

00010cac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
   10cac:	b500      	push	{lr}
   10cae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10cb0:	f7ef ff76 	bl	ba0 <Sys_GetCoreID>
   10cb4:	4603      	mov	r3, r0
   10cb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId])
   10cb8:	4a10      	ldr	r2, [pc, #64]	; (10cfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   10cba:	9b01      	ldr	r3, [sp, #4]
   10cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10cc0:	2b00      	cmp	r3, #0
   10cc2:	d10d      	bne.n	10ce0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10cc4:	f7ef fe32 	bl	92c <Adc_schm_read_msr>
   10cc8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10cca:	9b00      	ldr	r3, [sp, #0]
   10ccc:	f003 0301 	and.w	r3, r3, #1
   10cd0:	2b00      	cmp	r3, #0
   10cd2:	d100      	bne.n	10cd6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10cd4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   10cd6:	490a      	ldr	r1, [pc, #40]	; (10d00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x54>)
   10cd8:	9b01      	ldr	r3, [sp, #4]
   10cda:	9a00      	ldr	r2, [sp, #0]
   10cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]++;
   10ce0:	4a06      	ldr	r2, [pc, #24]	; (10cfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   10ce2:	9b01      	ldr	r3, [sp, #4]
   10ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ce8:	1c5a      	adds	r2, r3, #1
   10cea:	4904      	ldr	r1, [pc, #16]	; (10cfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   10cec:	9b01      	ldr	r3, [sp, #4]
   10cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10cf2:	bf00      	nop
   10cf4:	b003      	add	sp, #12
   10cf6:	f85d fb04 	ldr.w	pc, [sp], #4
   10cfa:	bf00      	nop
   10cfc:	1fff9438 	.word	0x1fff9438
   10d00:	1fff9434 	.word	0x1fff9434

00010d04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
   10d04:	b500      	push	{lr}
   10d06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10d08:	f7ef ff4a 	bl	ba0 <Sys_GetCoreID>
   10d0c:	4603      	mov	r3, r0
   10d0e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]--;
   10d10:	4a0d      	ldr	r2, [pc, #52]	; (10d48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   10d12:	9b01      	ldr	r3, [sp, #4]
   10d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d18:	1e5a      	subs	r2, r3, #1
   10d1a:	490b      	ldr	r1, [pc, #44]	; (10d48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   10d1c:	9b01      	ldr	r3, [sp, #4]
   10d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   10d22:	4a0a      	ldr	r2, [pc, #40]	; (10d4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x48>)
   10d24:	9b01      	ldr	r3, [sp, #4]
   10d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d2a:	f003 0301 	and.w	r3, r3, #1
   10d2e:	2b00      	cmp	r3, #0
   10d30:	d106      	bne.n	10d40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
   10d32:	4a05      	ldr	r2, [pc, #20]	; (10d48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   10d34:	9b01      	ldr	r3, [sp, #4]
   10d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d3a:	2b00      	cmp	r3, #0
   10d3c:	d100      	bne.n	10d40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10d3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10d40:	bf00      	nop
   10d42:	b003      	add	sp, #12
   10d44:	f85d fb04 	ldr.w	pc, [sp], #4
   10d48:	1fff9438 	.word	0x1fff9438
   10d4c:	1fff9434 	.word	0x1fff9434

00010d50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
   10d50:	b500      	push	{lr}
   10d52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10d54:	f7ef ff24 	bl	ba0 <Sys_GetCoreID>
   10d58:	4603      	mov	r3, r0
   10d5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId])
   10d5c:	4a10      	ldr	r2, [pc, #64]	; (10da0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   10d5e:	9b01      	ldr	r3, [sp, #4]
   10d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d64:	2b00      	cmp	r3, #0
   10d66:	d10d      	bne.n	10d84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10d68:	f7ef fde0 	bl	92c <Adc_schm_read_msr>
   10d6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10d6e:	9b00      	ldr	r3, [sp, #0]
   10d70:	f003 0301 	and.w	r3, r3, #1
   10d74:	2b00      	cmp	r3, #0
   10d76:	d100      	bne.n	10d7a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10d78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   10d7a:	490a      	ldr	r1, [pc, #40]	; (10da4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x54>)
   10d7c:	9b01      	ldr	r3, [sp, #4]
   10d7e:	9a00      	ldr	r2, [sp, #0]
   10d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]++;
   10d84:	4a06      	ldr	r2, [pc, #24]	; (10da0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   10d86:	9b01      	ldr	r3, [sp, #4]
   10d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d8c:	1c5a      	adds	r2, r3, #1
   10d8e:	4904      	ldr	r1, [pc, #16]	; (10da0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   10d90:	9b01      	ldr	r3, [sp, #4]
   10d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10d96:	bf00      	nop
   10d98:	b003      	add	sp, #12
   10d9a:	f85d fb04 	ldr.w	pc, [sp], #4
   10d9e:	bf00      	nop
   10da0:	1fff9440 	.word	0x1fff9440
   10da4:	1fff943c 	.word	0x1fff943c

00010da8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
   10da8:	b500      	push	{lr}
   10daa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10dac:	f7ef fef8 	bl	ba0 <Sys_GetCoreID>
   10db0:	4603      	mov	r3, r0
   10db2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]--;
   10db4:	4a0d      	ldr	r2, [pc, #52]	; (10dec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   10db6:	9b01      	ldr	r3, [sp, #4]
   10db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dbc:	1e5a      	subs	r2, r3, #1
   10dbe:	490b      	ldr	r1, [pc, #44]	; (10dec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   10dc0:	9b01      	ldr	r3, [sp, #4]
   10dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   10dc6:	4a0a      	ldr	r2, [pc, #40]	; (10df0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x48>)
   10dc8:	9b01      	ldr	r3, [sp, #4]
   10dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dce:	f003 0301 	and.w	r3, r3, #1
   10dd2:	2b00      	cmp	r3, #0
   10dd4:	d106      	bne.n	10de4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
   10dd6:	4a05      	ldr	r2, [pc, #20]	; (10dec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   10dd8:	9b01      	ldr	r3, [sp, #4]
   10dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dde:	2b00      	cmp	r3, #0
   10de0:	d100      	bne.n	10de4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10de2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10de4:	bf00      	nop
   10de6:	b003      	add	sp, #12
   10de8:	f85d fb04 	ldr.w	pc, [sp], #4
   10dec:	1fff9440 	.word	0x1fff9440
   10df0:	1fff943c 	.word	0x1fff943c

00010df4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
   10df4:	b500      	push	{lr}
   10df6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10df8:	f7ef fed2 	bl	ba0 <Sys_GetCoreID>
   10dfc:	4603      	mov	r3, r0
   10dfe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId])
   10e00:	4a10      	ldr	r2, [pc, #64]	; (10e44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   10e02:	9b01      	ldr	r3, [sp, #4]
   10e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e08:	2b00      	cmp	r3, #0
   10e0a:	d10d      	bne.n	10e28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10e0c:	f7ef fd8e 	bl	92c <Adc_schm_read_msr>
   10e10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10e12:	9b00      	ldr	r3, [sp, #0]
   10e14:	f003 0301 	and.w	r3, r3, #1
   10e18:	2b00      	cmp	r3, #0
   10e1a:	d100      	bne.n	10e1e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10e1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   10e1e:	490a      	ldr	r1, [pc, #40]	; (10e48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x54>)
   10e20:	9b01      	ldr	r3, [sp, #4]
   10e22:	9a00      	ldr	r2, [sp, #0]
   10e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]++;
   10e28:	4a06      	ldr	r2, [pc, #24]	; (10e44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   10e2a:	9b01      	ldr	r3, [sp, #4]
   10e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e30:	1c5a      	adds	r2, r3, #1
   10e32:	4904      	ldr	r1, [pc, #16]	; (10e44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   10e34:	9b01      	ldr	r3, [sp, #4]
   10e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10e3a:	bf00      	nop
   10e3c:	b003      	add	sp, #12
   10e3e:	f85d fb04 	ldr.w	pc, [sp], #4
   10e42:	bf00      	nop
   10e44:	1fff9448 	.word	0x1fff9448
   10e48:	1fff9444 	.word	0x1fff9444

00010e4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
   10e4c:	b500      	push	{lr}
   10e4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10e50:	f7ef fea6 	bl	ba0 <Sys_GetCoreID>
   10e54:	4603      	mov	r3, r0
   10e56:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]--;
   10e58:	4a0d      	ldr	r2, [pc, #52]	; (10e90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   10e5a:	9b01      	ldr	r3, [sp, #4]
   10e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e60:	1e5a      	subs	r2, r3, #1
   10e62:	490b      	ldr	r1, [pc, #44]	; (10e90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   10e64:	9b01      	ldr	r3, [sp, #4]
   10e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   10e6a:	4a0a      	ldr	r2, [pc, #40]	; (10e94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x48>)
   10e6c:	9b01      	ldr	r3, [sp, #4]
   10e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e72:	f003 0301 	and.w	r3, r3, #1
   10e76:	2b00      	cmp	r3, #0
   10e78:	d106      	bne.n	10e88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
   10e7a:	4a05      	ldr	r2, [pc, #20]	; (10e90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   10e7c:	9b01      	ldr	r3, [sp, #4]
   10e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e82:	2b00      	cmp	r3, #0
   10e84:	d100      	bne.n	10e88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10e86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10e88:	bf00      	nop
   10e8a:	b003      	add	sp, #12
   10e8c:	f85d fb04 	ldr.w	pc, [sp], #4
   10e90:	1fff9448 	.word	0x1fff9448
   10e94:	1fff9444 	.word	0x1fff9444

00010e98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
   10e98:	b500      	push	{lr}
   10e9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10e9c:	f7ef fe80 	bl	ba0 <Sys_GetCoreID>
   10ea0:	4603      	mov	r3, r0
   10ea2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId])
   10ea4:	4a10      	ldr	r2, [pc, #64]	; (10ee8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   10ea6:	9b01      	ldr	r3, [sp, #4]
   10ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10eac:	2b00      	cmp	r3, #0
   10eae:	d10d      	bne.n	10ecc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10eb0:	f7ef fd3c 	bl	92c <Adc_schm_read_msr>
   10eb4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10eb6:	9b00      	ldr	r3, [sp, #0]
   10eb8:	f003 0301 	and.w	r3, r3, #1
   10ebc:	2b00      	cmp	r3, #0
   10ebe:	d100      	bne.n	10ec2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10ec0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   10ec2:	490a      	ldr	r1, [pc, #40]	; (10eec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x54>)
   10ec4:	9b01      	ldr	r3, [sp, #4]
   10ec6:	9a00      	ldr	r2, [sp, #0]
   10ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]++;
   10ecc:	4a06      	ldr	r2, [pc, #24]	; (10ee8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   10ece:	9b01      	ldr	r3, [sp, #4]
   10ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ed4:	1c5a      	adds	r2, r3, #1
   10ed6:	4904      	ldr	r1, [pc, #16]	; (10ee8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   10ed8:	9b01      	ldr	r3, [sp, #4]
   10eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10ede:	bf00      	nop
   10ee0:	b003      	add	sp, #12
   10ee2:	f85d fb04 	ldr.w	pc, [sp], #4
   10ee6:	bf00      	nop
   10ee8:	1fff9450 	.word	0x1fff9450
   10eec:	1fff944c 	.word	0x1fff944c

00010ef0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
   10ef0:	b500      	push	{lr}
   10ef2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ef4:	f7ef fe54 	bl	ba0 <Sys_GetCoreID>
   10ef8:	4603      	mov	r3, r0
   10efa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]--;
   10efc:	4a0d      	ldr	r2, [pc, #52]	; (10f34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   10efe:	9b01      	ldr	r3, [sp, #4]
   10f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f04:	1e5a      	subs	r2, r3, #1
   10f06:	490b      	ldr	r1, [pc, #44]	; (10f34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   10f08:	9b01      	ldr	r3, [sp, #4]
   10f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   10f0e:	4a0a      	ldr	r2, [pc, #40]	; (10f38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x48>)
   10f10:	9b01      	ldr	r3, [sp, #4]
   10f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f16:	f003 0301 	and.w	r3, r3, #1
   10f1a:	2b00      	cmp	r3, #0
   10f1c:	d106      	bne.n	10f2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
   10f1e:	4a05      	ldr	r2, [pc, #20]	; (10f34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   10f20:	9b01      	ldr	r3, [sp, #4]
   10f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f26:	2b00      	cmp	r3, #0
   10f28:	d100      	bne.n	10f2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10f2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10f2c:	bf00      	nop
   10f2e:	b003      	add	sp, #12
   10f30:	f85d fb04 	ldr.w	pc, [sp], #4
   10f34:	1fff9450 	.word	0x1fff9450
   10f38:	1fff944c 	.word	0x1fff944c

00010f3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   10f3c:	b500      	push	{lr}
   10f3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10f40:	f7ef fe2e 	bl	ba0 <Sys_GetCoreID>
   10f44:	4603      	mov	r3, r0
   10f46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId])
   10f48:	4a10      	ldr	r2, [pc, #64]	; (10f8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   10f4a:	9b01      	ldr	r3, [sp, #4]
   10f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f50:	2b00      	cmp	r3, #0
   10f52:	d10d      	bne.n	10f70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10f54:	f7ef fcea 	bl	92c <Adc_schm_read_msr>
   10f58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10f5a:	9b00      	ldr	r3, [sp, #0]
   10f5c:	f003 0301 	and.w	r3, r3, #1
   10f60:	2b00      	cmp	r3, #0
   10f62:	d100      	bne.n	10f66 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10f64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_28[u32CoreId] = msr;
   10f66:	490a      	ldr	r1, [pc, #40]	; (10f90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x54>)
   10f68:	9b01      	ldr	r3, [sp, #4]
   10f6a:	9a00      	ldr	r2, [sp, #0]
   10f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]++;
   10f70:	4a06      	ldr	r2, [pc, #24]	; (10f8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   10f72:	9b01      	ldr	r3, [sp, #4]
   10f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f78:	1c5a      	adds	r2, r3, #1
   10f7a:	4904      	ldr	r1, [pc, #16]	; (10f8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   10f7c:	9b01      	ldr	r3, [sp, #4]
   10f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10f82:	bf00      	nop
   10f84:	b003      	add	sp, #12
   10f86:	f85d fb04 	ldr.w	pc, [sp], #4
   10f8a:	bf00      	nop
   10f8c:	1fff9458 	.word	0x1fff9458
   10f90:	1fff9454 	.word	0x1fff9454

00010f94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   10f94:	b500      	push	{lr}
   10f96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10f98:	f7ef fe02 	bl	ba0 <Sys_GetCoreID>
   10f9c:	4603      	mov	r3, r0
   10f9e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]--;
   10fa0:	4a0d      	ldr	r2, [pc, #52]	; (10fd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   10fa2:	9b01      	ldr	r3, [sp, #4]
   10fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fa8:	1e5a      	subs	r2, r3, #1
   10faa:	490b      	ldr	r1, [pc, #44]	; (10fd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   10fac:	9b01      	ldr	r3, [sp, #4]
   10fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
   10fb2:	4a0a      	ldr	r2, [pc, #40]	; (10fdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x48>)
   10fb4:	9b01      	ldr	r3, [sp, #4]
   10fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fba:	f003 0301 	and.w	r3, r3, #1
   10fbe:	2b00      	cmp	r3, #0
   10fc0:	d106      	bne.n	10fd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
   10fc2:	4a05      	ldr	r2, [pc, #20]	; (10fd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   10fc4:	9b01      	ldr	r3, [sp, #4]
   10fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fca:	2b00      	cmp	r3, #0
   10fcc:	d100      	bne.n	10fd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10fce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10fd0:	bf00      	nop
   10fd2:	b003      	add	sp, #12
   10fd4:	f85d fb04 	ldr.w	pc, [sp], #4
   10fd8:	1fff9458 	.word	0x1fff9458
   10fdc:	1fff9454 	.word	0x1fff9454

00010fe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   10fe0:	b500      	push	{lr}
   10fe2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10fe4:	f7ef fddc 	bl	ba0 <Sys_GetCoreID>
   10fe8:	4603      	mov	r3, r0
   10fea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId])
   10fec:	4a10      	ldr	r2, [pc, #64]	; (11030 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   10fee:	9b01      	ldr	r3, [sp, #4]
   10ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ff4:	2b00      	cmp	r3, #0
   10ff6:	d10d      	bne.n	11014 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10ff8:	f7ef fc98 	bl	92c <Adc_schm_read_msr>
   10ffc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10ffe:	9b00      	ldr	r3, [sp, #0]
   11000:	f003 0301 	and.w	r3, r3, #1
   11004:	2b00      	cmp	r3, #0
   11006:	d100      	bne.n	1100a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11008:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_29[u32CoreId] = msr;
   1100a:	490a      	ldr	r1, [pc, #40]	; (11034 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x54>)
   1100c:	9b01      	ldr	r3, [sp, #4]
   1100e:	9a00      	ldr	r2, [sp, #0]
   11010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]++;
   11014:	4a06      	ldr	r2, [pc, #24]	; (11030 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   11016:	9b01      	ldr	r3, [sp, #4]
   11018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1101c:	1c5a      	adds	r2, r3, #1
   1101e:	4904      	ldr	r1, [pc, #16]	; (11030 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   11020:	9b01      	ldr	r3, [sp, #4]
   11022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11026:	bf00      	nop
   11028:	b003      	add	sp, #12
   1102a:	f85d fb04 	ldr.w	pc, [sp], #4
   1102e:	bf00      	nop
   11030:	1fff9460 	.word	0x1fff9460
   11034:	1fff945c 	.word	0x1fff945c

00011038 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   11038:	b500      	push	{lr}
   1103a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1103c:	f7ef fdb0 	bl	ba0 <Sys_GetCoreID>
   11040:	4603      	mov	r3, r0
   11042:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]--;
   11044:	4a0d      	ldr	r2, [pc, #52]	; (1107c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   11046:	9b01      	ldr	r3, [sp, #4]
   11048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1104c:	1e5a      	subs	r2, r3, #1
   1104e:	490b      	ldr	r1, [pc, #44]	; (1107c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   11050:	9b01      	ldr	r3, [sp, #4]
   11052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
   11056:	4a0a      	ldr	r2, [pc, #40]	; (11080 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x48>)
   11058:	9b01      	ldr	r3, [sp, #4]
   1105a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1105e:	f003 0301 	and.w	r3, r3, #1
   11062:	2b00      	cmp	r3, #0
   11064:	d106      	bne.n	11074 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
   11066:	4a05      	ldr	r2, [pc, #20]	; (1107c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   11068:	9b01      	ldr	r3, [sp, #4]
   1106a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1106e:	2b00      	cmp	r3, #0
   11070:	d100      	bne.n	11074 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11072:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11074:	bf00      	nop
   11076:	b003      	add	sp, #12
   11078:	f85d fb04 	ldr.w	pc, [sp], #4
   1107c:	1fff9460 	.word	0x1fff9460
   11080:	1fff945c 	.word	0x1fff945c

00011084 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   11084:	b500      	push	{lr}
   11086:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11088:	f7ef fd8a 	bl	ba0 <Sys_GetCoreID>
   1108c:	4603      	mov	r3, r0
   1108e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId])
   11090:	4a10      	ldr	r2, [pc, #64]	; (110d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   11092:	9b01      	ldr	r3, [sp, #4]
   11094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11098:	2b00      	cmp	r3, #0
   1109a:	d10d      	bne.n	110b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1109c:	f7ef fc46 	bl	92c <Adc_schm_read_msr>
   110a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   110a2:	9b00      	ldr	r3, [sp, #0]
   110a4:	f003 0301 	and.w	r3, r3, #1
   110a8:	2b00      	cmp	r3, #0
   110aa:	d100      	bne.n	110ae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   110ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_30[u32CoreId] = msr;
   110ae:	490a      	ldr	r1, [pc, #40]	; (110d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x54>)
   110b0:	9b01      	ldr	r3, [sp, #4]
   110b2:	9a00      	ldr	r2, [sp, #0]
   110b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]++;
   110b8:	4a06      	ldr	r2, [pc, #24]	; (110d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   110ba:	9b01      	ldr	r3, [sp, #4]
   110bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110c0:	1c5a      	adds	r2, r3, #1
   110c2:	4904      	ldr	r1, [pc, #16]	; (110d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   110c4:	9b01      	ldr	r3, [sp, #4]
   110c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   110ca:	bf00      	nop
   110cc:	b003      	add	sp, #12
   110ce:	f85d fb04 	ldr.w	pc, [sp], #4
   110d2:	bf00      	nop
   110d4:	1fff9468 	.word	0x1fff9468
   110d8:	1fff9464 	.word	0x1fff9464

000110dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   110dc:	b500      	push	{lr}
   110de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   110e0:	f7ef fd5e 	bl	ba0 <Sys_GetCoreID>
   110e4:	4603      	mov	r3, r0
   110e6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]--;
   110e8:	4a0d      	ldr	r2, [pc, #52]	; (11120 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   110ea:	9b01      	ldr	r3, [sp, #4]
   110ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110f0:	1e5a      	subs	r2, r3, #1
   110f2:	490b      	ldr	r1, [pc, #44]	; (11120 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   110f4:	9b01      	ldr	r3, [sp, #4]
   110f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
   110fa:	4a0a      	ldr	r2, [pc, #40]	; (11124 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x48>)
   110fc:	9b01      	ldr	r3, [sp, #4]
   110fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11102:	f003 0301 	and.w	r3, r3, #1
   11106:	2b00      	cmp	r3, #0
   11108:	d106      	bne.n	11118 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
   1110a:	4a05      	ldr	r2, [pc, #20]	; (11120 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   1110c:	9b01      	ldr	r3, [sp, #4]
   1110e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11112:	2b00      	cmp	r3, #0
   11114:	d100      	bne.n	11118 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11116:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11118:	bf00      	nop
   1111a:	b003      	add	sp, #12
   1111c:	f85d fb04 	ldr.w	pc, [sp], #4
   11120:	1fff9468 	.word	0x1fff9468
   11124:	1fff9464 	.word	0x1fff9464

00011128 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   11128:	b500      	push	{lr}
   1112a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1112c:	f7ef fd38 	bl	ba0 <Sys_GetCoreID>
   11130:	4603      	mov	r3, r0
   11132:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId])
   11134:	4a10      	ldr	r2, [pc, #64]	; (11178 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   11136:	9b01      	ldr	r3, [sp, #4]
   11138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1113c:	2b00      	cmp	r3, #0
   1113e:	d10d      	bne.n	1115c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11140:	f7ef fbf4 	bl	92c <Adc_schm_read_msr>
   11144:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11146:	9b00      	ldr	r3, [sp, #0]
   11148:	f003 0301 	and.w	r3, r3, #1
   1114c:	2b00      	cmp	r3, #0
   1114e:	d100      	bne.n	11152 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11150:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_31[u32CoreId] = msr;
   11152:	490a      	ldr	r1, [pc, #40]	; (1117c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x54>)
   11154:	9b01      	ldr	r3, [sp, #4]
   11156:	9a00      	ldr	r2, [sp, #0]
   11158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]++;
   1115c:	4a06      	ldr	r2, [pc, #24]	; (11178 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   1115e:	9b01      	ldr	r3, [sp, #4]
   11160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11164:	1c5a      	adds	r2, r3, #1
   11166:	4904      	ldr	r1, [pc, #16]	; (11178 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   11168:	9b01      	ldr	r3, [sp, #4]
   1116a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1116e:	bf00      	nop
   11170:	b003      	add	sp, #12
   11172:	f85d fb04 	ldr.w	pc, [sp], #4
   11176:	bf00      	nop
   11178:	1fff9470 	.word	0x1fff9470
   1117c:	1fff946c 	.word	0x1fff946c

00011180 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   11180:	b500      	push	{lr}
   11182:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11184:	f7ef fd0c 	bl	ba0 <Sys_GetCoreID>
   11188:	4603      	mov	r3, r0
   1118a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]--;
   1118c:	4a0d      	ldr	r2, [pc, #52]	; (111c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   1118e:	9b01      	ldr	r3, [sp, #4]
   11190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11194:	1e5a      	subs	r2, r3, #1
   11196:	490b      	ldr	r1, [pc, #44]	; (111c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   11198:	9b01      	ldr	r3, [sp, #4]
   1119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
   1119e:	4a0a      	ldr	r2, [pc, #40]	; (111c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x48>)
   111a0:	9b01      	ldr	r3, [sp, #4]
   111a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111a6:	f003 0301 	and.w	r3, r3, #1
   111aa:	2b00      	cmp	r3, #0
   111ac:	d106      	bne.n	111bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
   111ae:	4a05      	ldr	r2, [pc, #20]	; (111c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   111b0:	9b01      	ldr	r3, [sp, #4]
   111b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111b6:	2b00      	cmp	r3, #0
   111b8:	d100      	bne.n	111bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   111ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   111bc:	bf00      	nop
   111be:	b003      	add	sp, #12
   111c0:	f85d fb04 	ldr.w	pc, [sp], #4
   111c4:	1fff9470 	.word	0x1fff9470
   111c8:	1fff946c 	.word	0x1fff946c

000111cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   111cc:	b500      	push	{lr}
   111ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   111d0:	f7ef fce6 	bl	ba0 <Sys_GetCoreID>
   111d4:	4603      	mov	r3, r0
   111d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId])
   111d8:	4a10      	ldr	r2, [pc, #64]	; (1121c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   111da:	9b01      	ldr	r3, [sp, #4]
   111dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111e0:	2b00      	cmp	r3, #0
   111e2:	d10d      	bne.n	11200 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   111e4:	f7ef fba2 	bl	92c <Adc_schm_read_msr>
   111e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   111ea:	9b00      	ldr	r3, [sp, #0]
   111ec:	f003 0301 	and.w	r3, r3, #1
   111f0:	2b00      	cmp	r3, #0
   111f2:	d100      	bne.n	111f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   111f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_32[u32CoreId] = msr;
   111f6:	490a      	ldr	r1, [pc, #40]	; (11220 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x54>)
   111f8:	9b01      	ldr	r3, [sp, #4]
   111fa:	9a00      	ldr	r2, [sp, #0]
   111fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]++;
   11200:	4a06      	ldr	r2, [pc, #24]	; (1121c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   11202:	9b01      	ldr	r3, [sp, #4]
   11204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11208:	1c5a      	adds	r2, r3, #1
   1120a:	4904      	ldr	r1, [pc, #16]	; (1121c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   1120c:	9b01      	ldr	r3, [sp, #4]
   1120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11212:	bf00      	nop
   11214:	b003      	add	sp, #12
   11216:	f85d fb04 	ldr.w	pc, [sp], #4
   1121a:	bf00      	nop
   1121c:	1fff9478 	.word	0x1fff9478
   11220:	1fff9474 	.word	0x1fff9474

00011224 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   11224:	b500      	push	{lr}
   11226:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11228:	f7ef fcba 	bl	ba0 <Sys_GetCoreID>
   1122c:	4603      	mov	r3, r0
   1122e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]--;
   11230:	4a0d      	ldr	r2, [pc, #52]	; (11268 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   11232:	9b01      	ldr	r3, [sp, #4]
   11234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11238:	1e5a      	subs	r2, r3, #1
   1123a:	490b      	ldr	r1, [pc, #44]	; (11268 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   1123c:	9b01      	ldr	r3, [sp, #4]
   1123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
   11242:	4a0a      	ldr	r2, [pc, #40]	; (1126c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x48>)
   11244:	9b01      	ldr	r3, [sp, #4]
   11246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1124a:	f003 0301 	and.w	r3, r3, #1
   1124e:	2b00      	cmp	r3, #0
   11250:	d106      	bne.n	11260 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
   11252:	4a05      	ldr	r2, [pc, #20]	; (11268 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   11254:	9b01      	ldr	r3, [sp, #4]
   11256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1125a:	2b00      	cmp	r3, #0
   1125c:	d100      	bne.n	11260 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1125e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11260:	bf00      	nop
   11262:	b003      	add	sp, #12
   11264:	f85d fb04 	ldr.w	pc, [sp], #4
   11268:	1fff9478 	.word	0x1fff9478
   1126c:	1fff9474 	.word	0x1fff9474

00011270 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   11270:	b500      	push	{lr}
   11272:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11274:	f7ef fc94 	bl	ba0 <Sys_GetCoreID>
   11278:	4603      	mov	r3, r0
   1127a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId])
   1127c:	4a10      	ldr	r2, [pc, #64]	; (112c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   1127e:	9b01      	ldr	r3, [sp, #4]
   11280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11284:	2b00      	cmp	r3, #0
   11286:	d10d      	bne.n	112a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11288:	f7ef fb50 	bl	92c <Adc_schm_read_msr>
   1128c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1128e:	9b00      	ldr	r3, [sp, #0]
   11290:	f003 0301 	and.w	r3, r3, #1
   11294:	2b00      	cmp	r3, #0
   11296:	d100      	bne.n	1129a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11298:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_33[u32CoreId] = msr;
   1129a:	490a      	ldr	r1, [pc, #40]	; (112c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x54>)
   1129c:	9b01      	ldr	r3, [sp, #4]
   1129e:	9a00      	ldr	r2, [sp, #0]
   112a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]++;
   112a4:	4a06      	ldr	r2, [pc, #24]	; (112c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   112a6:	9b01      	ldr	r3, [sp, #4]
   112a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112ac:	1c5a      	adds	r2, r3, #1
   112ae:	4904      	ldr	r1, [pc, #16]	; (112c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   112b0:	9b01      	ldr	r3, [sp, #4]
   112b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   112b6:	bf00      	nop
   112b8:	b003      	add	sp, #12
   112ba:	f85d fb04 	ldr.w	pc, [sp], #4
   112be:	bf00      	nop
   112c0:	1fff9480 	.word	0x1fff9480
   112c4:	1fff947c 	.word	0x1fff947c

000112c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   112c8:	b500      	push	{lr}
   112ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   112cc:	f7ef fc68 	bl	ba0 <Sys_GetCoreID>
   112d0:	4603      	mov	r3, r0
   112d2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]--;
   112d4:	4a0d      	ldr	r2, [pc, #52]	; (1130c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   112d6:	9b01      	ldr	r3, [sp, #4]
   112d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112dc:	1e5a      	subs	r2, r3, #1
   112de:	490b      	ldr	r1, [pc, #44]	; (1130c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   112e0:	9b01      	ldr	r3, [sp, #4]
   112e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
   112e6:	4a0a      	ldr	r2, [pc, #40]	; (11310 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x48>)
   112e8:	9b01      	ldr	r3, [sp, #4]
   112ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112ee:	f003 0301 	and.w	r3, r3, #1
   112f2:	2b00      	cmp	r3, #0
   112f4:	d106      	bne.n	11304 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
   112f6:	4a05      	ldr	r2, [pc, #20]	; (1130c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   112f8:	9b01      	ldr	r3, [sp, #4]
   112fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112fe:	2b00      	cmp	r3, #0
   11300:	d100      	bne.n	11304 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11302:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11304:	bf00      	nop
   11306:	b003      	add	sp, #12
   11308:	f85d fb04 	ldr.w	pc, [sp], #4
   1130c:	1fff9480 	.word	0x1fff9480
   11310:	1fff947c 	.word	0x1fff947c

00011314 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   11314:	b500      	push	{lr}
   11316:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11318:	f7ef fc42 	bl	ba0 <Sys_GetCoreID>
   1131c:	4603      	mov	r3, r0
   1131e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId])
   11320:	4a10      	ldr	r2, [pc, #64]	; (11364 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   11322:	9b01      	ldr	r3, [sp, #4]
   11324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11328:	2b00      	cmp	r3, #0
   1132a:	d10d      	bne.n	11348 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1132c:	f7ef fafe 	bl	92c <Adc_schm_read_msr>
   11330:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11332:	9b00      	ldr	r3, [sp, #0]
   11334:	f003 0301 	and.w	r3, r3, #1
   11338:	2b00      	cmp	r3, #0
   1133a:	d100      	bne.n	1133e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1133c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_34[u32CoreId] = msr;
   1133e:	490a      	ldr	r1, [pc, #40]	; (11368 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x54>)
   11340:	9b01      	ldr	r3, [sp, #4]
   11342:	9a00      	ldr	r2, [sp, #0]
   11344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]++;
   11348:	4a06      	ldr	r2, [pc, #24]	; (11364 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   1134a:	9b01      	ldr	r3, [sp, #4]
   1134c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11350:	1c5a      	adds	r2, r3, #1
   11352:	4904      	ldr	r1, [pc, #16]	; (11364 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   11354:	9b01      	ldr	r3, [sp, #4]
   11356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1135a:	bf00      	nop
   1135c:	b003      	add	sp, #12
   1135e:	f85d fb04 	ldr.w	pc, [sp], #4
   11362:	bf00      	nop
   11364:	1fff9488 	.word	0x1fff9488
   11368:	1fff9484 	.word	0x1fff9484

0001136c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   1136c:	b500      	push	{lr}
   1136e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11370:	f7ef fc16 	bl	ba0 <Sys_GetCoreID>
   11374:	4603      	mov	r3, r0
   11376:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]--;
   11378:	4a0d      	ldr	r2, [pc, #52]	; (113b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   1137a:	9b01      	ldr	r3, [sp, #4]
   1137c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11380:	1e5a      	subs	r2, r3, #1
   11382:	490b      	ldr	r1, [pc, #44]	; (113b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   11384:	9b01      	ldr	r3, [sp, #4]
   11386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
   1138a:	4a0a      	ldr	r2, [pc, #40]	; (113b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x48>)
   1138c:	9b01      	ldr	r3, [sp, #4]
   1138e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11392:	f003 0301 	and.w	r3, r3, #1
   11396:	2b00      	cmp	r3, #0
   11398:	d106      	bne.n	113a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
   1139a:	4a05      	ldr	r2, [pc, #20]	; (113b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   1139c:	9b01      	ldr	r3, [sp, #4]
   1139e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113a2:	2b00      	cmp	r3, #0
   113a4:	d100      	bne.n	113a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   113a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   113a8:	bf00      	nop
   113aa:	b003      	add	sp, #12
   113ac:	f85d fb04 	ldr.w	pc, [sp], #4
   113b0:	1fff9488 	.word	0x1fff9488
   113b4:	1fff9484 	.word	0x1fff9484

000113b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   113b8:	b500      	push	{lr}
   113ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   113bc:	f7ef fbf0 	bl	ba0 <Sys_GetCoreID>
   113c0:	4603      	mov	r3, r0
   113c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId])
   113c4:	4a10      	ldr	r2, [pc, #64]	; (11408 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   113c6:	9b01      	ldr	r3, [sp, #4]
   113c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113cc:	2b00      	cmp	r3, #0
   113ce:	d10d      	bne.n	113ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   113d0:	f7ef faac 	bl	92c <Adc_schm_read_msr>
   113d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   113d6:	9b00      	ldr	r3, [sp, #0]
   113d8:	f003 0301 	and.w	r3, r3, #1
   113dc:	2b00      	cmp	r3, #0
   113de:	d100      	bne.n	113e2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   113e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_35[u32CoreId] = msr;
   113e2:	490a      	ldr	r1, [pc, #40]	; (1140c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x54>)
   113e4:	9b01      	ldr	r3, [sp, #4]
   113e6:	9a00      	ldr	r2, [sp, #0]
   113e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]++;
   113ec:	4a06      	ldr	r2, [pc, #24]	; (11408 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   113ee:	9b01      	ldr	r3, [sp, #4]
   113f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113f4:	1c5a      	adds	r2, r3, #1
   113f6:	4904      	ldr	r1, [pc, #16]	; (11408 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   113f8:	9b01      	ldr	r3, [sp, #4]
   113fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   113fe:	bf00      	nop
   11400:	b003      	add	sp, #12
   11402:	f85d fb04 	ldr.w	pc, [sp], #4
   11406:	bf00      	nop
   11408:	1fff9490 	.word	0x1fff9490
   1140c:	1fff948c 	.word	0x1fff948c

00011410 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   11410:	b500      	push	{lr}
   11412:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11414:	f7ef fbc4 	bl	ba0 <Sys_GetCoreID>
   11418:	4603      	mov	r3, r0
   1141a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]--;
   1141c:	4a0d      	ldr	r2, [pc, #52]	; (11454 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   1141e:	9b01      	ldr	r3, [sp, #4]
   11420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11424:	1e5a      	subs	r2, r3, #1
   11426:	490b      	ldr	r1, [pc, #44]	; (11454 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   11428:	9b01      	ldr	r3, [sp, #4]
   1142a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
   1142e:	4a0a      	ldr	r2, [pc, #40]	; (11458 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x48>)
   11430:	9b01      	ldr	r3, [sp, #4]
   11432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11436:	f003 0301 	and.w	r3, r3, #1
   1143a:	2b00      	cmp	r3, #0
   1143c:	d106      	bne.n	1144c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
   1143e:	4a05      	ldr	r2, [pc, #20]	; (11454 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   11440:	9b01      	ldr	r3, [sp, #4]
   11442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11446:	2b00      	cmp	r3, #0
   11448:	d100      	bne.n	1144c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1144a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1144c:	bf00      	nop
   1144e:	b003      	add	sp, #12
   11450:	f85d fb04 	ldr.w	pc, [sp], #4
   11454:	1fff9490 	.word	0x1fff9490
   11458:	1fff948c 	.word	0x1fff948c

0001145c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   1145c:	b500      	push	{lr}
   1145e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11460:	f7ef fb9e 	bl	ba0 <Sys_GetCoreID>
   11464:	4603      	mov	r3, r0
   11466:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId])
   11468:	4a10      	ldr	r2, [pc, #64]	; (114ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   1146a:	9b01      	ldr	r3, [sp, #4]
   1146c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11470:	2b00      	cmp	r3, #0
   11472:	d10d      	bne.n	11490 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11474:	f7ef fa5a 	bl	92c <Adc_schm_read_msr>
   11478:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1147a:	9b00      	ldr	r3, [sp, #0]
   1147c:	f003 0301 	and.w	r3, r3, #1
   11480:	2b00      	cmp	r3, #0
   11482:	d100      	bne.n	11486 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11484:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_36[u32CoreId] = msr;
   11486:	490a      	ldr	r1, [pc, #40]	; (114b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x54>)
   11488:	9b01      	ldr	r3, [sp, #4]
   1148a:	9a00      	ldr	r2, [sp, #0]
   1148c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]++;
   11490:	4a06      	ldr	r2, [pc, #24]	; (114ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   11492:	9b01      	ldr	r3, [sp, #4]
   11494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11498:	1c5a      	adds	r2, r3, #1
   1149a:	4904      	ldr	r1, [pc, #16]	; (114ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   1149c:	9b01      	ldr	r3, [sp, #4]
   1149e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   114a2:	bf00      	nop
   114a4:	b003      	add	sp, #12
   114a6:	f85d fb04 	ldr.w	pc, [sp], #4
   114aa:	bf00      	nop
   114ac:	1fff9498 	.word	0x1fff9498
   114b0:	1fff9494 	.word	0x1fff9494

000114b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   114b4:	b500      	push	{lr}
   114b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   114b8:	f7ef fb72 	bl	ba0 <Sys_GetCoreID>
   114bc:	4603      	mov	r3, r0
   114be:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]--;
   114c0:	4a0d      	ldr	r2, [pc, #52]	; (114f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   114c2:	9b01      	ldr	r3, [sp, #4]
   114c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114c8:	1e5a      	subs	r2, r3, #1
   114ca:	490b      	ldr	r1, [pc, #44]	; (114f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   114cc:	9b01      	ldr	r3, [sp, #4]
   114ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
   114d2:	4a0a      	ldr	r2, [pc, #40]	; (114fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x48>)
   114d4:	9b01      	ldr	r3, [sp, #4]
   114d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114da:	f003 0301 	and.w	r3, r3, #1
   114de:	2b00      	cmp	r3, #0
   114e0:	d106      	bne.n	114f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
   114e2:	4a05      	ldr	r2, [pc, #20]	; (114f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   114e4:	9b01      	ldr	r3, [sp, #4]
   114e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114ea:	2b00      	cmp	r3, #0
   114ec:	d100      	bne.n	114f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   114ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   114f0:	bf00      	nop
   114f2:	b003      	add	sp, #12
   114f4:	f85d fb04 	ldr.w	pc, [sp], #4
   114f8:	1fff9498 	.word	0x1fff9498
   114fc:	1fff9494 	.word	0x1fff9494

00011500 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   11500:	b500      	push	{lr}
   11502:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11504:	f7ef fb4c 	bl	ba0 <Sys_GetCoreID>
   11508:	4603      	mov	r3, r0
   1150a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId])
   1150c:	4a10      	ldr	r2, [pc, #64]	; (11550 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   1150e:	9b01      	ldr	r3, [sp, #4]
   11510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11514:	2b00      	cmp	r3, #0
   11516:	d10d      	bne.n	11534 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11518:	f7ef fa08 	bl	92c <Adc_schm_read_msr>
   1151c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1151e:	9b00      	ldr	r3, [sp, #0]
   11520:	f003 0301 	and.w	r3, r3, #1
   11524:	2b00      	cmp	r3, #0
   11526:	d100      	bne.n	1152a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11528:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_37[u32CoreId] = msr;
   1152a:	490a      	ldr	r1, [pc, #40]	; (11554 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x54>)
   1152c:	9b01      	ldr	r3, [sp, #4]
   1152e:	9a00      	ldr	r2, [sp, #0]
   11530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]++;
   11534:	4a06      	ldr	r2, [pc, #24]	; (11550 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   11536:	9b01      	ldr	r3, [sp, #4]
   11538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1153c:	1c5a      	adds	r2, r3, #1
   1153e:	4904      	ldr	r1, [pc, #16]	; (11550 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   11540:	9b01      	ldr	r3, [sp, #4]
   11542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11546:	bf00      	nop
   11548:	b003      	add	sp, #12
   1154a:	f85d fb04 	ldr.w	pc, [sp], #4
   1154e:	bf00      	nop
   11550:	1fff94a0 	.word	0x1fff94a0
   11554:	1fff949c 	.word	0x1fff949c

00011558 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   11558:	b500      	push	{lr}
   1155a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1155c:	f7ef fb20 	bl	ba0 <Sys_GetCoreID>
   11560:	4603      	mov	r3, r0
   11562:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]--;
   11564:	4a0d      	ldr	r2, [pc, #52]	; (1159c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   11566:	9b01      	ldr	r3, [sp, #4]
   11568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1156c:	1e5a      	subs	r2, r3, #1
   1156e:	490b      	ldr	r1, [pc, #44]	; (1159c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   11570:	9b01      	ldr	r3, [sp, #4]
   11572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_37[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]))         /*if interrupts were enabled*/
   11576:	4a0a      	ldr	r2, [pc, #40]	; (115a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x48>)
   11578:	9b01      	ldr	r3, [sp, #4]
   1157a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1157e:	f003 0301 	and.w	r3, r3, #1
   11582:	2b00      	cmp	r3, #0
   11584:	d106      	bne.n	11594 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
   11586:	4a05      	ldr	r2, [pc, #20]	; (1159c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   11588:	9b01      	ldr	r3, [sp, #4]
   1158a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1158e:	2b00      	cmp	r3, #0
   11590:	d100      	bne.n	11594 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11592:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11594:	bf00      	nop
   11596:	b003      	add	sp, #12
   11598:	f85d fb04 	ldr.w	pc, [sp], #4
   1159c:	1fff94a0 	.word	0x1fff94a0
   115a0:	1fff949c 	.word	0x1fff949c

000115a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   115a4:	b500      	push	{lr}
   115a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   115a8:	f7ef fafa 	bl	ba0 <Sys_GetCoreID>
   115ac:	4603      	mov	r3, r0
   115ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId])
   115b0:	4a10      	ldr	r2, [pc, #64]	; (115f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   115b2:	9b01      	ldr	r3, [sp, #4]
   115b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115b8:	2b00      	cmp	r3, #0
   115ba:	d10d      	bne.n	115d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   115bc:	f7ef f9b6 	bl	92c <Adc_schm_read_msr>
   115c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   115c2:	9b00      	ldr	r3, [sp, #0]
   115c4:	f003 0301 	and.w	r3, r3, #1
   115c8:	2b00      	cmp	r3, #0
   115ca:	d100      	bne.n	115ce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   115cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_38[u32CoreId] = msr;
   115ce:	490a      	ldr	r1, [pc, #40]	; (115f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x54>)
   115d0:	9b01      	ldr	r3, [sp, #4]
   115d2:	9a00      	ldr	r2, [sp, #0]
   115d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]++;
   115d8:	4a06      	ldr	r2, [pc, #24]	; (115f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   115da:	9b01      	ldr	r3, [sp, #4]
   115dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115e0:	1c5a      	adds	r2, r3, #1
   115e2:	4904      	ldr	r1, [pc, #16]	; (115f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   115e4:	9b01      	ldr	r3, [sp, #4]
   115e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   115ea:	bf00      	nop
   115ec:	b003      	add	sp, #12
   115ee:	f85d fb04 	ldr.w	pc, [sp], #4
   115f2:	bf00      	nop
   115f4:	1fff94a8 	.word	0x1fff94a8
   115f8:	1fff94a4 	.word	0x1fff94a4

000115fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   115fc:	b500      	push	{lr}
   115fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11600:	f7ef face 	bl	ba0 <Sys_GetCoreID>
   11604:	4603      	mov	r3, r0
   11606:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]--;
   11608:	4a0d      	ldr	r2, [pc, #52]	; (11640 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   1160a:	9b01      	ldr	r3, [sp, #4]
   1160c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11610:	1e5a      	subs	r2, r3, #1
   11612:	490b      	ldr	r1, [pc, #44]	; (11640 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   11614:	9b01      	ldr	r3, [sp, #4]
   11616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
   1161a:	4a0a      	ldr	r2, [pc, #40]	; (11644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x48>)
   1161c:	9b01      	ldr	r3, [sp, #4]
   1161e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11622:	f003 0301 	and.w	r3, r3, #1
   11626:	2b00      	cmp	r3, #0
   11628:	d106      	bne.n	11638 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
   1162a:	4a05      	ldr	r2, [pc, #20]	; (11640 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   1162c:	9b01      	ldr	r3, [sp, #4]
   1162e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11632:	2b00      	cmp	r3, #0
   11634:	d100      	bne.n	11638 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11636:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11638:	bf00      	nop
   1163a:	b003      	add	sp, #12
   1163c:	f85d fb04 	ldr.w	pc, [sp], #4
   11640:	1fff94a8 	.word	0x1fff94a8
   11644:	1fff94a4 	.word	0x1fff94a4

00011648 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   11648:	b500      	push	{lr}
   1164a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1164c:	f7ef faa8 	bl	ba0 <Sys_GetCoreID>
   11650:	4603      	mov	r3, r0
   11652:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId])
   11654:	4a10      	ldr	r2, [pc, #64]	; (11698 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   11656:	9b01      	ldr	r3, [sp, #4]
   11658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1165c:	2b00      	cmp	r3, #0
   1165e:	d10d      	bne.n	1167c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11660:	f7ef f964 	bl	92c <Adc_schm_read_msr>
   11664:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11666:	9b00      	ldr	r3, [sp, #0]
   11668:	f003 0301 	and.w	r3, r3, #1
   1166c:	2b00      	cmp	r3, #0
   1166e:	d100      	bne.n	11672 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11670:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_39[u32CoreId] = msr;
   11672:	490a      	ldr	r1, [pc, #40]	; (1169c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x54>)
   11674:	9b01      	ldr	r3, [sp, #4]
   11676:	9a00      	ldr	r2, [sp, #0]
   11678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]++;
   1167c:	4a06      	ldr	r2, [pc, #24]	; (11698 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   1167e:	9b01      	ldr	r3, [sp, #4]
   11680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11684:	1c5a      	adds	r2, r3, #1
   11686:	4904      	ldr	r1, [pc, #16]	; (11698 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   11688:	9b01      	ldr	r3, [sp, #4]
   1168a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1168e:	bf00      	nop
   11690:	b003      	add	sp, #12
   11692:	f85d fb04 	ldr.w	pc, [sp], #4
   11696:	bf00      	nop
   11698:	1fff94b0 	.word	0x1fff94b0
   1169c:	1fff94ac 	.word	0x1fff94ac

000116a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   116a0:	b500      	push	{lr}
   116a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   116a4:	f7ef fa7c 	bl	ba0 <Sys_GetCoreID>
   116a8:	4603      	mov	r3, r0
   116aa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]--;
   116ac:	4a0d      	ldr	r2, [pc, #52]	; (116e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   116ae:	9b01      	ldr	r3, [sp, #4]
   116b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116b4:	1e5a      	subs	r2, r3, #1
   116b6:	490b      	ldr	r1, [pc, #44]	; (116e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   116b8:	9b01      	ldr	r3, [sp, #4]
   116ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
   116be:	4a0a      	ldr	r2, [pc, #40]	; (116e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x48>)
   116c0:	9b01      	ldr	r3, [sp, #4]
   116c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116c6:	f003 0301 	and.w	r3, r3, #1
   116ca:	2b00      	cmp	r3, #0
   116cc:	d106      	bne.n	116dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
   116ce:	4a05      	ldr	r2, [pc, #20]	; (116e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   116d0:	9b01      	ldr	r3, [sp, #4]
   116d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116d6:	2b00      	cmp	r3, #0
   116d8:	d100      	bne.n	116dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   116da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   116dc:	bf00      	nop
   116de:	b003      	add	sp, #12
   116e0:	f85d fb04 	ldr.w	pc, [sp], #4
   116e4:	1fff94b0 	.word	0x1fff94b0
   116e8:	1fff94ac 	.word	0x1fff94ac

000116ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   116ec:	b500      	push	{lr}
   116ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   116f0:	f7ef fa56 	bl	ba0 <Sys_GetCoreID>
   116f4:	4603      	mov	r3, r0
   116f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId])
   116f8:	4a10      	ldr	r2, [pc, #64]	; (1173c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   116fa:	9b01      	ldr	r3, [sp, #4]
   116fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11700:	2b00      	cmp	r3, #0
   11702:	d10d      	bne.n	11720 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11704:	f7ef f912 	bl	92c <Adc_schm_read_msr>
   11708:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1170a:	9b00      	ldr	r3, [sp, #0]
   1170c:	f003 0301 	and.w	r3, r3, #1
   11710:	2b00      	cmp	r3, #0
   11712:	d100      	bne.n	11716 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11714:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_40[u32CoreId] = msr;
   11716:	490a      	ldr	r1, [pc, #40]	; (11740 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x54>)
   11718:	9b01      	ldr	r3, [sp, #4]
   1171a:	9a00      	ldr	r2, [sp, #0]
   1171c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]++;
   11720:	4a06      	ldr	r2, [pc, #24]	; (1173c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   11722:	9b01      	ldr	r3, [sp, #4]
   11724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11728:	1c5a      	adds	r2, r3, #1
   1172a:	4904      	ldr	r1, [pc, #16]	; (1173c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   1172c:	9b01      	ldr	r3, [sp, #4]
   1172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11732:	bf00      	nop
   11734:	b003      	add	sp, #12
   11736:	f85d fb04 	ldr.w	pc, [sp], #4
   1173a:	bf00      	nop
   1173c:	1fff94b8 	.word	0x1fff94b8
   11740:	1fff94b4 	.word	0x1fff94b4

00011744 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   11744:	b500      	push	{lr}
   11746:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11748:	f7ef fa2a 	bl	ba0 <Sys_GetCoreID>
   1174c:	4603      	mov	r3, r0
   1174e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]--;
   11750:	4a0d      	ldr	r2, [pc, #52]	; (11788 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   11752:	9b01      	ldr	r3, [sp, #4]
   11754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11758:	1e5a      	subs	r2, r3, #1
   1175a:	490b      	ldr	r1, [pc, #44]	; (11788 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   1175c:	9b01      	ldr	r3, [sp, #4]
   1175e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
   11762:	4a0a      	ldr	r2, [pc, #40]	; (1178c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x48>)
   11764:	9b01      	ldr	r3, [sp, #4]
   11766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1176a:	f003 0301 	and.w	r3, r3, #1
   1176e:	2b00      	cmp	r3, #0
   11770:	d106      	bne.n	11780 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
   11772:	4a05      	ldr	r2, [pc, #20]	; (11788 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   11774:	9b01      	ldr	r3, [sp, #4]
   11776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1177a:	2b00      	cmp	r3, #0
   1177c:	d100      	bne.n	11780 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1177e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11780:	bf00      	nop
   11782:	b003      	add	sp, #12
   11784:	f85d fb04 	ldr.w	pc, [sp], #4
   11788:	1fff94b8 	.word	0x1fff94b8
   1178c:	1fff94b4 	.word	0x1fff94b4

00011790 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   11790:	b500      	push	{lr}
   11792:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11794:	f7ef fa04 	bl	ba0 <Sys_GetCoreID>
   11798:	4603      	mov	r3, r0
   1179a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId])
   1179c:	4a10      	ldr	r2, [pc, #64]	; (117e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   1179e:	9b01      	ldr	r3, [sp, #4]
   117a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117a4:	2b00      	cmp	r3, #0
   117a6:	d10d      	bne.n	117c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   117a8:	f7ef f8c0 	bl	92c <Adc_schm_read_msr>
   117ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   117ae:	9b00      	ldr	r3, [sp, #0]
   117b0:	f003 0301 	and.w	r3, r3, #1
   117b4:	2b00      	cmp	r3, #0
   117b6:	d100      	bne.n	117ba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   117b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_41[u32CoreId] = msr;
   117ba:	490a      	ldr	r1, [pc, #40]	; (117e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x54>)
   117bc:	9b01      	ldr	r3, [sp, #4]
   117be:	9a00      	ldr	r2, [sp, #0]
   117c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]++;
   117c4:	4a06      	ldr	r2, [pc, #24]	; (117e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   117c6:	9b01      	ldr	r3, [sp, #4]
   117c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117cc:	1c5a      	adds	r2, r3, #1
   117ce:	4904      	ldr	r1, [pc, #16]	; (117e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   117d0:	9b01      	ldr	r3, [sp, #4]
   117d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   117d6:	bf00      	nop
   117d8:	b003      	add	sp, #12
   117da:	f85d fb04 	ldr.w	pc, [sp], #4
   117de:	bf00      	nop
   117e0:	1fff94c0 	.word	0x1fff94c0
   117e4:	1fff94bc 	.word	0x1fff94bc

000117e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   117e8:	b500      	push	{lr}
   117ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   117ec:	f7ef f9d8 	bl	ba0 <Sys_GetCoreID>
   117f0:	4603      	mov	r3, r0
   117f2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]--;
   117f4:	4a0d      	ldr	r2, [pc, #52]	; (1182c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   117f6:	9b01      	ldr	r3, [sp, #4]
   117f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117fc:	1e5a      	subs	r2, r3, #1
   117fe:	490b      	ldr	r1, [pc, #44]	; (1182c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   11800:	9b01      	ldr	r3, [sp, #4]
   11802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
   11806:	4a0a      	ldr	r2, [pc, #40]	; (11830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x48>)
   11808:	9b01      	ldr	r3, [sp, #4]
   1180a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1180e:	f003 0301 	and.w	r3, r3, #1
   11812:	2b00      	cmp	r3, #0
   11814:	d106      	bne.n	11824 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
   11816:	4a05      	ldr	r2, [pc, #20]	; (1182c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   11818:	9b01      	ldr	r3, [sp, #4]
   1181a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1181e:	2b00      	cmp	r3, #0
   11820:	d100      	bne.n	11824 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11822:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11824:	bf00      	nop
   11826:	b003      	add	sp, #12
   11828:	f85d fb04 	ldr.w	pc, [sp], #4
   1182c:	1fff94c0 	.word	0x1fff94c0
   11830:	1fff94bc 	.word	0x1fff94bc

00011834 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   11834:	b500      	push	{lr}
   11836:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11838:	f7ef f9b2 	bl	ba0 <Sys_GetCoreID>
   1183c:	4603      	mov	r3, r0
   1183e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId])
   11840:	4a10      	ldr	r2, [pc, #64]	; (11884 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   11842:	9b01      	ldr	r3, [sp, #4]
   11844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11848:	2b00      	cmp	r3, #0
   1184a:	d10d      	bne.n	11868 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1184c:	f7ef f86e 	bl	92c <Adc_schm_read_msr>
   11850:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11852:	9b00      	ldr	r3, [sp, #0]
   11854:	f003 0301 	and.w	r3, r3, #1
   11858:	2b00      	cmp	r3, #0
   1185a:	d100      	bne.n	1185e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1185c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_42[u32CoreId] = msr;
   1185e:	490a      	ldr	r1, [pc, #40]	; (11888 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x54>)
   11860:	9b01      	ldr	r3, [sp, #4]
   11862:	9a00      	ldr	r2, [sp, #0]
   11864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]++;
   11868:	4a06      	ldr	r2, [pc, #24]	; (11884 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   1186a:	9b01      	ldr	r3, [sp, #4]
   1186c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11870:	1c5a      	adds	r2, r3, #1
   11872:	4904      	ldr	r1, [pc, #16]	; (11884 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   11874:	9b01      	ldr	r3, [sp, #4]
   11876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1187a:	bf00      	nop
   1187c:	b003      	add	sp, #12
   1187e:	f85d fb04 	ldr.w	pc, [sp], #4
   11882:	bf00      	nop
   11884:	1fff94c8 	.word	0x1fff94c8
   11888:	1fff94c4 	.word	0x1fff94c4

0001188c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   1188c:	b500      	push	{lr}
   1188e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11890:	f7ef f986 	bl	ba0 <Sys_GetCoreID>
   11894:	4603      	mov	r3, r0
   11896:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]--;
   11898:	4a0d      	ldr	r2, [pc, #52]	; (118d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   1189a:	9b01      	ldr	r3, [sp, #4]
   1189c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118a0:	1e5a      	subs	r2, r3, #1
   118a2:	490b      	ldr	r1, [pc, #44]	; (118d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   118a4:	9b01      	ldr	r3, [sp, #4]
   118a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
   118aa:	4a0a      	ldr	r2, [pc, #40]	; (118d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x48>)
   118ac:	9b01      	ldr	r3, [sp, #4]
   118ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118b2:	f003 0301 	and.w	r3, r3, #1
   118b6:	2b00      	cmp	r3, #0
   118b8:	d106      	bne.n	118c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
   118ba:	4a05      	ldr	r2, [pc, #20]	; (118d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   118bc:	9b01      	ldr	r3, [sp, #4]
   118be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118c2:	2b00      	cmp	r3, #0
   118c4:	d100      	bne.n	118c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   118c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   118c8:	bf00      	nop
   118ca:	b003      	add	sp, #12
   118cc:	f85d fb04 	ldr.w	pc, [sp], #4
   118d0:	1fff94c8 	.word	0x1fff94c8
   118d4:	1fff94c4 	.word	0x1fff94c4

000118d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   118d8:	b500      	push	{lr}
   118da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   118dc:	f7ef f960 	bl	ba0 <Sys_GetCoreID>
   118e0:	4603      	mov	r3, r0
   118e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId])
   118e4:	4a10      	ldr	r2, [pc, #64]	; (11928 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   118e6:	9b01      	ldr	r3, [sp, #4]
   118e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118ec:	2b00      	cmp	r3, #0
   118ee:	d10d      	bne.n	1190c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   118f0:	f7ef f81c 	bl	92c <Adc_schm_read_msr>
   118f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   118f6:	9b00      	ldr	r3, [sp, #0]
   118f8:	f003 0301 	and.w	r3, r3, #1
   118fc:	2b00      	cmp	r3, #0
   118fe:	d100      	bne.n	11902 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11900:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_43[u32CoreId] = msr;
   11902:	490a      	ldr	r1, [pc, #40]	; (1192c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x54>)
   11904:	9b01      	ldr	r3, [sp, #4]
   11906:	9a00      	ldr	r2, [sp, #0]
   11908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]++;
   1190c:	4a06      	ldr	r2, [pc, #24]	; (11928 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   1190e:	9b01      	ldr	r3, [sp, #4]
   11910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11914:	1c5a      	adds	r2, r3, #1
   11916:	4904      	ldr	r1, [pc, #16]	; (11928 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   11918:	9b01      	ldr	r3, [sp, #4]
   1191a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1191e:	bf00      	nop
   11920:	b003      	add	sp, #12
   11922:	f85d fb04 	ldr.w	pc, [sp], #4
   11926:	bf00      	nop
   11928:	1fff94d0 	.word	0x1fff94d0
   1192c:	1fff94cc 	.word	0x1fff94cc

00011930 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   11930:	b500      	push	{lr}
   11932:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11934:	f7ef f934 	bl	ba0 <Sys_GetCoreID>
   11938:	4603      	mov	r3, r0
   1193a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]--;
   1193c:	4a0d      	ldr	r2, [pc, #52]	; (11974 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   1193e:	9b01      	ldr	r3, [sp, #4]
   11940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11944:	1e5a      	subs	r2, r3, #1
   11946:	490b      	ldr	r1, [pc, #44]	; (11974 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   11948:	9b01      	ldr	r3, [sp, #4]
   1194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
   1194e:	4a0a      	ldr	r2, [pc, #40]	; (11978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x48>)
   11950:	9b01      	ldr	r3, [sp, #4]
   11952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11956:	f003 0301 	and.w	r3, r3, #1
   1195a:	2b00      	cmp	r3, #0
   1195c:	d106      	bne.n	1196c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
   1195e:	4a05      	ldr	r2, [pc, #20]	; (11974 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   11960:	9b01      	ldr	r3, [sp, #4]
   11962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11966:	2b00      	cmp	r3, #0
   11968:	d100      	bne.n	1196c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1196a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1196c:	bf00      	nop
   1196e:	b003      	add	sp, #12
   11970:	f85d fb04 	ldr.w	pc, [sp], #4
   11974:	1fff94d0 	.word	0x1fff94d0
   11978:	1fff94cc 	.word	0x1fff94cc

0001197c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   1197c:	b500      	push	{lr}
   1197e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11980:	f7ef f90e 	bl	ba0 <Sys_GetCoreID>
   11984:	4603      	mov	r3, r0
   11986:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId])
   11988:	4a10      	ldr	r2, [pc, #64]	; (119cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   1198a:	9b01      	ldr	r3, [sp, #4]
   1198c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11990:	2b00      	cmp	r3, #0
   11992:	d10d      	bne.n	119b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11994:	f7ee ffca 	bl	92c <Adc_schm_read_msr>
   11998:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1199a:	9b00      	ldr	r3, [sp, #0]
   1199c:	f003 0301 	and.w	r3, r3, #1
   119a0:	2b00      	cmp	r3, #0
   119a2:	d100      	bne.n	119a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   119a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_44[u32CoreId] = msr;
   119a6:	490a      	ldr	r1, [pc, #40]	; (119d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x54>)
   119a8:	9b01      	ldr	r3, [sp, #4]
   119aa:	9a00      	ldr	r2, [sp, #0]
   119ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]++;
   119b0:	4a06      	ldr	r2, [pc, #24]	; (119cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   119b2:	9b01      	ldr	r3, [sp, #4]
   119b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119b8:	1c5a      	adds	r2, r3, #1
   119ba:	4904      	ldr	r1, [pc, #16]	; (119cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   119bc:	9b01      	ldr	r3, [sp, #4]
   119be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   119c2:	bf00      	nop
   119c4:	b003      	add	sp, #12
   119c6:	f85d fb04 	ldr.w	pc, [sp], #4
   119ca:	bf00      	nop
   119cc:	1fff94d8 	.word	0x1fff94d8
   119d0:	1fff94d4 	.word	0x1fff94d4

000119d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   119d4:	b500      	push	{lr}
   119d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   119d8:	f7ef f8e2 	bl	ba0 <Sys_GetCoreID>
   119dc:	4603      	mov	r3, r0
   119de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]--;
   119e0:	4a0d      	ldr	r2, [pc, #52]	; (11a18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   119e2:	9b01      	ldr	r3, [sp, #4]
   119e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119e8:	1e5a      	subs	r2, r3, #1
   119ea:	490b      	ldr	r1, [pc, #44]	; (11a18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   119ec:	9b01      	ldr	r3, [sp, #4]
   119ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
   119f2:	4a0a      	ldr	r2, [pc, #40]	; (11a1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x48>)
   119f4:	9b01      	ldr	r3, [sp, #4]
   119f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119fa:	f003 0301 	and.w	r3, r3, #1
   119fe:	2b00      	cmp	r3, #0
   11a00:	d106      	bne.n	11a10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
   11a02:	4a05      	ldr	r2, [pc, #20]	; (11a18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   11a04:	9b01      	ldr	r3, [sp, #4]
   11a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a0a:	2b00      	cmp	r3, #0
   11a0c:	d100      	bne.n	11a10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11a0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11a10:	bf00      	nop
   11a12:	b003      	add	sp, #12
   11a14:	f85d fb04 	ldr.w	pc, [sp], #4
   11a18:	1fff94d8 	.word	0x1fff94d8
   11a1c:	1fff94d4 	.word	0x1fff94d4

00011a20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   11a20:	b500      	push	{lr}
   11a22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a24:	f7ef f8bc 	bl	ba0 <Sys_GetCoreID>
   11a28:	4603      	mov	r3, r0
   11a2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId])
   11a2c:	4a10      	ldr	r2, [pc, #64]	; (11a70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   11a2e:	9b01      	ldr	r3, [sp, #4]
   11a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a34:	2b00      	cmp	r3, #0
   11a36:	d10d      	bne.n	11a54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11a38:	f7ee ff78 	bl	92c <Adc_schm_read_msr>
   11a3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11a3e:	9b00      	ldr	r3, [sp, #0]
   11a40:	f003 0301 	and.w	r3, r3, #1
   11a44:	2b00      	cmp	r3, #0
   11a46:	d100      	bne.n	11a4a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11a48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_45[u32CoreId] = msr;
   11a4a:	490a      	ldr	r1, [pc, #40]	; (11a74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x54>)
   11a4c:	9b01      	ldr	r3, [sp, #4]
   11a4e:	9a00      	ldr	r2, [sp, #0]
   11a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]++;
   11a54:	4a06      	ldr	r2, [pc, #24]	; (11a70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   11a56:	9b01      	ldr	r3, [sp, #4]
   11a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a5c:	1c5a      	adds	r2, r3, #1
   11a5e:	4904      	ldr	r1, [pc, #16]	; (11a70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   11a60:	9b01      	ldr	r3, [sp, #4]
   11a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11a66:	bf00      	nop
   11a68:	b003      	add	sp, #12
   11a6a:	f85d fb04 	ldr.w	pc, [sp], #4
   11a6e:	bf00      	nop
   11a70:	1fff94e0 	.word	0x1fff94e0
   11a74:	1fff94dc 	.word	0x1fff94dc

00011a78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   11a78:	b500      	push	{lr}
   11a7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a7c:	f7ef f890 	bl	ba0 <Sys_GetCoreID>
   11a80:	4603      	mov	r3, r0
   11a82:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]--;
   11a84:	4a0d      	ldr	r2, [pc, #52]	; (11abc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   11a86:	9b01      	ldr	r3, [sp, #4]
   11a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a8c:	1e5a      	subs	r2, r3, #1
   11a8e:	490b      	ldr	r1, [pc, #44]	; (11abc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   11a90:	9b01      	ldr	r3, [sp, #4]
   11a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
   11a96:	4a0a      	ldr	r2, [pc, #40]	; (11ac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x48>)
   11a98:	9b01      	ldr	r3, [sp, #4]
   11a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a9e:	f003 0301 	and.w	r3, r3, #1
   11aa2:	2b00      	cmp	r3, #0
   11aa4:	d106      	bne.n	11ab4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
   11aa6:	4a05      	ldr	r2, [pc, #20]	; (11abc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   11aa8:	9b01      	ldr	r3, [sp, #4]
   11aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11aae:	2b00      	cmp	r3, #0
   11ab0:	d100      	bne.n	11ab4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11ab2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11ab4:	bf00      	nop
   11ab6:	b003      	add	sp, #12
   11ab8:	f85d fb04 	ldr.w	pc, [sp], #4
   11abc:	1fff94e0 	.word	0x1fff94e0
   11ac0:	1fff94dc 	.word	0x1fff94dc

00011ac4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   11ac4:	b500      	push	{lr}
   11ac6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ac8:	f7ef f86a 	bl	ba0 <Sys_GetCoreID>
   11acc:	4603      	mov	r3, r0
   11ace:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId])
   11ad0:	4a10      	ldr	r2, [pc, #64]	; (11b14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   11ad2:	9b01      	ldr	r3, [sp, #4]
   11ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ad8:	2b00      	cmp	r3, #0
   11ada:	d10d      	bne.n	11af8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11adc:	f7ee ff26 	bl	92c <Adc_schm_read_msr>
   11ae0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11ae2:	9b00      	ldr	r3, [sp, #0]
   11ae4:	f003 0301 	and.w	r3, r3, #1
   11ae8:	2b00      	cmp	r3, #0
   11aea:	d100      	bne.n	11aee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11aec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_46[u32CoreId] = msr;
   11aee:	490a      	ldr	r1, [pc, #40]	; (11b18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x54>)
   11af0:	9b01      	ldr	r3, [sp, #4]
   11af2:	9a00      	ldr	r2, [sp, #0]
   11af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]++;
   11af8:	4a06      	ldr	r2, [pc, #24]	; (11b14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   11afa:	9b01      	ldr	r3, [sp, #4]
   11afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b00:	1c5a      	adds	r2, r3, #1
   11b02:	4904      	ldr	r1, [pc, #16]	; (11b14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   11b04:	9b01      	ldr	r3, [sp, #4]
   11b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11b0a:	bf00      	nop
   11b0c:	b003      	add	sp, #12
   11b0e:	f85d fb04 	ldr.w	pc, [sp], #4
   11b12:	bf00      	nop
   11b14:	1fff94e8 	.word	0x1fff94e8
   11b18:	1fff94e4 	.word	0x1fff94e4

00011b1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   11b1c:	b500      	push	{lr}
   11b1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b20:	f7ef f83e 	bl	ba0 <Sys_GetCoreID>
   11b24:	4603      	mov	r3, r0
   11b26:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]--;
   11b28:	4a0d      	ldr	r2, [pc, #52]	; (11b60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   11b2a:	9b01      	ldr	r3, [sp, #4]
   11b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b30:	1e5a      	subs	r2, r3, #1
   11b32:	490b      	ldr	r1, [pc, #44]	; (11b60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   11b34:	9b01      	ldr	r3, [sp, #4]
   11b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
   11b3a:	4a0a      	ldr	r2, [pc, #40]	; (11b64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x48>)
   11b3c:	9b01      	ldr	r3, [sp, #4]
   11b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b42:	f003 0301 	and.w	r3, r3, #1
   11b46:	2b00      	cmp	r3, #0
   11b48:	d106      	bne.n	11b58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
   11b4a:	4a05      	ldr	r2, [pc, #20]	; (11b60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   11b4c:	9b01      	ldr	r3, [sp, #4]
   11b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b52:	2b00      	cmp	r3, #0
   11b54:	d100      	bne.n	11b58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11b56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11b58:	bf00      	nop
   11b5a:	b003      	add	sp, #12
   11b5c:	f85d fb04 	ldr.w	pc, [sp], #4
   11b60:	1fff94e8 	.word	0x1fff94e8
   11b64:	1fff94e4 	.word	0x1fff94e4

00011b68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   11b68:	b500      	push	{lr}
   11b6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b6c:	f7ef f818 	bl	ba0 <Sys_GetCoreID>
   11b70:	4603      	mov	r3, r0
   11b72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId])
   11b74:	4a10      	ldr	r2, [pc, #64]	; (11bb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   11b76:	9b01      	ldr	r3, [sp, #4]
   11b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b7c:	2b00      	cmp	r3, #0
   11b7e:	d10d      	bne.n	11b9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11b80:	f7ee fed4 	bl	92c <Adc_schm_read_msr>
   11b84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11b86:	9b00      	ldr	r3, [sp, #0]
   11b88:	f003 0301 	and.w	r3, r3, #1
   11b8c:	2b00      	cmp	r3, #0
   11b8e:	d100      	bne.n	11b92 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11b90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_47[u32CoreId] = msr;
   11b92:	490a      	ldr	r1, [pc, #40]	; (11bbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x54>)
   11b94:	9b01      	ldr	r3, [sp, #4]
   11b96:	9a00      	ldr	r2, [sp, #0]
   11b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]++;
   11b9c:	4a06      	ldr	r2, [pc, #24]	; (11bb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   11b9e:	9b01      	ldr	r3, [sp, #4]
   11ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ba4:	1c5a      	adds	r2, r3, #1
   11ba6:	4904      	ldr	r1, [pc, #16]	; (11bb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   11ba8:	9b01      	ldr	r3, [sp, #4]
   11baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11bae:	bf00      	nop
   11bb0:	b003      	add	sp, #12
   11bb2:	f85d fb04 	ldr.w	pc, [sp], #4
   11bb6:	bf00      	nop
   11bb8:	1fff94f0 	.word	0x1fff94f0
   11bbc:	1fff94ec 	.word	0x1fff94ec

00011bc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   11bc0:	b500      	push	{lr}
   11bc2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11bc4:	f7ee ffec 	bl	ba0 <Sys_GetCoreID>
   11bc8:	4603      	mov	r3, r0
   11bca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]--;
   11bcc:	4a0d      	ldr	r2, [pc, #52]	; (11c04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   11bce:	9b01      	ldr	r3, [sp, #4]
   11bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bd4:	1e5a      	subs	r2, r3, #1
   11bd6:	490b      	ldr	r1, [pc, #44]	; (11c04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   11bd8:	9b01      	ldr	r3, [sp, #4]
   11bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_47[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]))         /*if interrupts were enabled*/
   11bde:	4a0a      	ldr	r2, [pc, #40]	; (11c08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x48>)
   11be0:	9b01      	ldr	r3, [sp, #4]
   11be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11be6:	f003 0301 	and.w	r3, r3, #1
   11bea:	2b00      	cmp	r3, #0
   11bec:	d106      	bne.n	11bfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
   11bee:	4a05      	ldr	r2, [pc, #20]	; (11c04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   11bf0:	9b01      	ldr	r3, [sp, #4]
   11bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bf6:	2b00      	cmp	r3, #0
   11bf8:	d100      	bne.n	11bfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11bfa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11bfc:	bf00      	nop
   11bfe:	b003      	add	sp, #12
   11c00:	f85d fb04 	ldr.w	pc, [sp], #4
   11c04:	1fff94f0 	.word	0x1fff94f0
   11c08:	1fff94ec 	.word	0x1fff94ec

00011c0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   11c0c:	b500      	push	{lr}
   11c0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c10:	f7ee ffc6 	bl	ba0 <Sys_GetCoreID>
   11c14:	4603      	mov	r3, r0
   11c16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId])
   11c18:	4a10      	ldr	r2, [pc, #64]	; (11c5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   11c1a:	9b01      	ldr	r3, [sp, #4]
   11c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c20:	2b00      	cmp	r3, #0
   11c22:	d10d      	bne.n	11c40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11c24:	f7ee fe82 	bl	92c <Adc_schm_read_msr>
   11c28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11c2a:	9b00      	ldr	r3, [sp, #0]
   11c2c:	f003 0301 	and.w	r3, r3, #1
   11c30:	2b00      	cmp	r3, #0
   11c32:	d100      	bne.n	11c36 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11c34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_48[u32CoreId] = msr;
   11c36:	490a      	ldr	r1, [pc, #40]	; (11c60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x54>)
   11c38:	9b01      	ldr	r3, [sp, #4]
   11c3a:	9a00      	ldr	r2, [sp, #0]
   11c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]++;
   11c40:	4a06      	ldr	r2, [pc, #24]	; (11c5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   11c42:	9b01      	ldr	r3, [sp, #4]
   11c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c48:	1c5a      	adds	r2, r3, #1
   11c4a:	4904      	ldr	r1, [pc, #16]	; (11c5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   11c4c:	9b01      	ldr	r3, [sp, #4]
   11c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11c52:	bf00      	nop
   11c54:	b003      	add	sp, #12
   11c56:	f85d fb04 	ldr.w	pc, [sp], #4
   11c5a:	bf00      	nop
   11c5c:	1fff94f8 	.word	0x1fff94f8
   11c60:	1fff94f4 	.word	0x1fff94f4

00011c64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   11c64:	b500      	push	{lr}
   11c66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c68:	f7ee ff9a 	bl	ba0 <Sys_GetCoreID>
   11c6c:	4603      	mov	r3, r0
   11c6e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]--;
   11c70:	4a0d      	ldr	r2, [pc, #52]	; (11ca8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   11c72:	9b01      	ldr	r3, [sp, #4]
   11c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c78:	1e5a      	subs	r2, r3, #1
   11c7a:	490b      	ldr	r1, [pc, #44]	; (11ca8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   11c7c:	9b01      	ldr	r3, [sp, #4]
   11c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_48[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]))         /*if interrupts were enabled*/
   11c82:	4a0a      	ldr	r2, [pc, #40]	; (11cac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x48>)
   11c84:	9b01      	ldr	r3, [sp, #4]
   11c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c8a:	f003 0301 	and.w	r3, r3, #1
   11c8e:	2b00      	cmp	r3, #0
   11c90:	d106      	bne.n	11ca0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
   11c92:	4a05      	ldr	r2, [pc, #20]	; (11ca8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   11c94:	9b01      	ldr	r3, [sp, #4]
   11c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c9a:	2b00      	cmp	r3, #0
   11c9c:	d100      	bne.n	11ca0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11c9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11ca0:	bf00      	nop
   11ca2:	b003      	add	sp, #12
   11ca4:	f85d fb04 	ldr.w	pc, [sp], #4
   11ca8:	1fff94f8 	.word	0x1fff94f8
   11cac:	1fff94f4 	.word	0x1fff94f4

00011cb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   11cb0:	b500      	push	{lr}
   11cb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11cb4:	f7ee ff74 	bl	ba0 <Sys_GetCoreID>
   11cb8:	4603      	mov	r3, r0
   11cba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId])
   11cbc:	4a10      	ldr	r2, [pc, #64]	; (11d00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   11cbe:	9b01      	ldr	r3, [sp, #4]
   11cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cc4:	2b00      	cmp	r3, #0
   11cc6:	d10d      	bne.n	11ce4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11cc8:	f7ee fe30 	bl	92c <Adc_schm_read_msr>
   11ccc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11cce:	9b00      	ldr	r3, [sp, #0]
   11cd0:	f003 0301 	and.w	r3, r3, #1
   11cd4:	2b00      	cmp	r3, #0
   11cd6:	d100      	bne.n	11cda <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11cd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_49[u32CoreId] = msr;
   11cda:	490a      	ldr	r1, [pc, #40]	; (11d04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x54>)
   11cdc:	9b01      	ldr	r3, [sp, #4]
   11cde:	9a00      	ldr	r2, [sp, #0]
   11ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]++;
   11ce4:	4a06      	ldr	r2, [pc, #24]	; (11d00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   11ce6:	9b01      	ldr	r3, [sp, #4]
   11ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cec:	1c5a      	adds	r2, r3, #1
   11cee:	4904      	ldr	r1, [pc, #16]	; (11d00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   11cf0:	9b01      	ldr	r3, [sp, #4]
   11cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11cf6:	bf00      	nop
   11cf8:	b003      	add	sp, #12
   11cfa:	f85d fb04 	ldr.w	pc, [sp], #4
   11cfe:	bf00      	nop
   11d00:	1fff9500 	.word	0x1fff9500
   11d04:	1fff94fc 	.word	0x1fff94fc

00011d08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   11d08:	b500      	push	{lr}
   11d0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d0c:	f7ee ff48 	bl	ba0 <Sys_GetCoreID>
   11d10:	4603      	mov	r3, r0
   11d12:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]--;
   11d14:	4a0d      	ldr	r2, [pc, #52]	; (11d4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   11d16:	9b01      	ldr	r3, [sp, #4]
   11d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d1c:	1e5a      	subs	r2, r3, #1
   11d1e:	490b      	ldr	r1, [pc, #44]	; (11d4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   11d20:	9b01      	ldr	r3, [sp, #4]
   11d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_49[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]))         /*if interrupts were enabled*/
   11d26:	4a0a      	ldr	r2, [pc, #40]	; (11d50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x48>)
   11d28:	9b01      	ldr	r3, [sp, #4]
   11d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d2e:	f003 0301 	and.w	r3, r3, #1
   11d32:	2b00      	cmp	r3, #0
   11d34:	d106      	bne.n	11d44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
   11d36:	4a05      	ldr	r2, [pc, #20]	; (11d4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   11d38:	9b01      	ldr	r3, [sp, #4]
   11d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d3e:	2b00      	cmp	r3, #0
   11d40:	d100      	bne.n	11d44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11d42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11d44:	bf00      	nop
   11d46:	b003      	add	sp, #12
   11d48:	f85d fb04 	ldr.w	pc, [sp], #4
   11d4c:	1fff9500 	.word	0x1fff9500
   11d50:	1fff94fc 	.word	0x1fff94fc

00011d54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   11d54:	b500      	push	{lr}
   11d56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d58:	f7ee ff22 	bl	ba0 <Sys_GetCoreID>
   11d5c:	4603      	mov	r3, r0
   11d5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId])
   11d60:	4a10      	ldr	r2, [pc, #64]	; (11da4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   11d62:	9b01      	ldr	r3, [sp, #4]
   11d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d68:	2b00      	cmp	r3, #0
   11d6a:	d10d      	bne.n	11d88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11d6c:	f7ee fdde 	bl	92c <Adc_schm_read_msr>
   11d70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11d72:	9b00      	ldr	r3, [sp, #0]
   11d74:	f003 0301 	and.w	r3, r3, #1
   11d78:	2b00      	cmp	r3, #0
   11d7a:	d100      	bne.n	11d7e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11d7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_50[u32CoreId] = msr;
   11d7e:	490a      	ldr	r1, [pc, #40]	; (11da8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x54>)
   11d80:	9b01      	ldr	r3, [sp, #4]
   11d82:	9a00      	ldr	r2, [sp, #0]
   11d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]++;
   11d88:	4a06      	ldr	r2, [pc, #24]	; (11da4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   11d8a:	9b01      	ldr	r3, [sp, #4]
   11d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d90:	1c5a      	adds	r2, r3, #1
   11d92:	4904      	ldr	r1, [pc, #16]	; (11da4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   11d94:	9b01      	ldr	r3, [sp, #4]
   11d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11d9a:	bf00      	nop
   11d9c:	b003      	add	sp, #12
   11d9e:	f85d fb04 	ldr.w	pc, [sp], #4
   11da2:	bf00      	nop
   11da4:	1fff9508 	.word	0x1fff9508
   11da8:	1fff9504 	.word	0x1fff9504

00011dac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   11dac:	b500      	push	{lr}
   11dae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11db0:	f7ee fef6 	bl	ba0 <Sys_GetCoreID>
   11db4:	4603      	mov	r3, r0
   11db6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]--;
   11db8:	4a0d      	ldr	r2, [pc, #52]	; (11df0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   11dba:	9b01      	ldr	r3, [sp, #4]
   11dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dc0:	1e5a      	subs	r2, r3, #1
   11dc2:	490b      	ldr	r1, [pc, #44]	; (11df0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   11dc4:	9b01      	ldr	r3, [sp, #4]
   11dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
   11dca:	4a0a      	ldr	r2, [pc, #40]	; (11df4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x48>)
   11dcc:	9b01      	ldr	r3, [sp, #4]
   11dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dd2:	f003 0301 	and.w	r3, r3, #1
   11dd6:	2b00      	cmp	r3, #0
   11dd8:	d106      	bne.n	11de8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
   11dda:	4a05      	ldr	r2, [pc, #20]	; (11df0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   11ddc:	9b01      	ldr	r3, [sp, #4]
   11dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11de2:	2b00      	cmp	r3, #0
   11de4:	d100      	bne.n	11de8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11de6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11de8:	bf00      	nop
   11dea:	b003      	add	sp, #12
   11dec:	f85d fb04 	ldr.w	pc, [sp], #4
   11df0:	1fff9508 	.word	0x1fff9508
   11df4:	1fff9504 	.word	0x1fff9504

00011df8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   11df8:	b500      	push	{lr}
   11dfa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11dfc:	f7ee fed0 	bl	ba0 <Sys_GetCoreID>
   11e00:	4603      	mov	r3, r0
   11e02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId])
   11e04:	4a10      	ldr	r2, [pc, #64]	; (11e48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   11e06:	9b01      	ldr	r3, [sp, #4]
   11e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e0c:	2b00      	cmp	r3, #0
   11e0e:	d10d      	bne.n	11e2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11e10:	f7ee fd8c 	bl	92c <Adc_schm_read_msr>
   11e14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11e16:	9b00      	ldr	r3, [sp, #0]
   11e18:	f003 0301 	and.w	r3, r3, #1
   11e1c:	2b00      	cmp	r3, #0
   11e1e:	d100      	bne.n	11e22 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11e20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_51[u32CoreId] = msr;
   11e22:	490a      	ldr	r1, [pc, #40]	; (11e4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x54>)
   11e24:	9b01      	ldr	r3, [sp, #4]
   11e26:	9a00      	ldr	r2, [sp, #0]
   11e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]++;
   11e2c:	4a06      	ldr	r2, [pc, #24]	; (11e48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   11e2e:	9b01      	ldr	r3, [sp, #4]
   11e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e34:	1c5a      	adds	r2, r3, #1
   11e36:	4904      	ldr	r1, [pc, #16]	; (11e48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   11e38:	9b01      	ldr	r3, [sp, #4]
   11e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11e3e:	bf00      	nop
   11e40:	b003      	add	sp, #12
   11e42:	f85d fb04 	ldr.w	pc, [sp], #4
   11e46:	bf00      	nop
   11e48:	1fff9510 	.word	0x1fff9510
   11e4c:	1fff950c 	.word	0x1fff950c

00011e50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   11e50:	b500      	push	{lr}
   11e52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e54:	f7ee fea4 	bl	ba0 <Sys_GetCoreID>
   11e58:	4603      	mov	r3, r0
   11e5a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]--;
   11e5c:	4a0d      	ldr	r2, [pc, #52]	; (11e94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   11e5e:	9b01      	ldr	r3, [sp, #4]
   11e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e64:	1e5a      	subs	r2, r3, #1
   11e66:	490b      	ldr	r1, [pc, #44]	; (11e94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   11e68:	9b01      	ldr	r3, [sp, #4]
   11e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
   11e6e:	4a0a      	ldr	r2, [pc, #40]	; (11e98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x48>)
   11e70:	9b01      	ldr	r3, [sp, #4]
   11e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e76:	f003 0301 	and.w	r3, r3, #1
   11e7a:	2b00      	cmp	r3, #0
   11e7c:	d106      	bne.n	11e8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
   11e7e:	4a05      	ldr	r2, [pc, #20]	; (11e94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   11e80:	9b01      	ldr	r3, [sp, #4]
   11e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e86:	2b00      	cmp	r3, #0
   11e88:	d100      	bne.n	11e8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11e8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11e8c:	bf00      	nop
   11e8e:	b003      	add	sp, #12
   11e90:	f85d fb04 	ldr.w	pc, [sp], #4
   11e94:	1fff9510 	.word	0x1fff9510
   11e98:	1fff950c 	.word	0x1fff950c

00011e9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   11e9c:	b500      	push	{lr}
   11e9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ea0:	f7ee fe7e 	bl	ba0 <Sys_GetCoreID>
   11ea4:	4603      	mov	r3, r0
   11ea6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId])
   11ea8:	4a10      	ldr	r2, [pc, #64]	; (11eec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   11eaa:	9b01      	ldr	r3, [sp, #4]
   11eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11eb0:	2b00      	cmp	r3, #0
   11eb2:	d10d      	bne.n	11ed0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11eb4:	f7ee fd3a 	bl	92c <Adc_schm_read_msr>
   11eb8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11eba:	9b00      	ldr	r3, [sp, #0]
   11ebc:	f003 0301 	and.w	r3, r3, #1
   11ec0:	2b00      	cmp	r3, #0
   11ec2:	d100      	bne.n	11ec6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11ec4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_54[u32CoreId] = msr;
   11ec6:	490a      	ldr	r1, [pc, #40]	; (11ef0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x54>)
   11ec8:	9b01      	ldr	r3, [sp, #4]
   11eca:	9a00      	ldr	r2, [sp, #0]
   11ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]++;
   11ed0:	4a06      	ldr	r2, [pc, #24]	; (11eec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   11ed2:	9b01      	ldr	r3, [sp, #4]
   11ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ed8:	1c5a      	adds	r2, r3, #1
   11eda:	4904      	ldr	r1, [pc, #16]	; (11eec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   11edc:	9b01      	ldr	r3, [sp, #4]
   11ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11ee2:	bf00      	nop
   11ee4:	b003      	add	sp, #12
   11ee6:	f85d fb04 	ldr.w	pc, [sp], #4
   11eea:	bf00      	nop
   11eec:	1fff9518 	.word	0x1fff9518
   11ef0:	1fff9514 	.word	0x1fff9514

00011ef4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   11ef4:	b500      	push	{lr}
   11ef6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ef8:	f7ee fe52 	bl	ba0 <Sys_GetCoreID>
   11efc:	4603      	mov	r3, r0
   11efe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]--;
   11f00:	4a0d      	ldr	r2, [pc, #52]	; (11f38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   11f02:	9b01      	ldr	r3, [sp, #4]
   11f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f08:	1e5a      	subs	r2, r3, #1
   11f0a:	490b      	ldr	r1, [pc, #44]	; (11f38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   11f0c:	9b01      	ldr	r3, [sp, #4]
   11f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
   11f12:	4a0a      	ldr	r2, [pc, #40]	; (11f3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x48>)
   11f14:	9b01      	ldr	r3, [sp, #4]
   11f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f1a:	f003 0301 	and.w	r3, r3, #1
   11f1e:	2b00      	cmp	r3, #0
   11f20:	d106      	bne.n	11f30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
   11f22:	4a05      	ldr	r2, [pc, #20]	; (11f38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   11f24:	9b01      	ldr	r3, [sp, #4]
   11f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f2a:	2b00      	cmp	r3, #0
   11f2c:	d100      	bne.n	11f30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11f2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11f30:	bf00      	nop
   11f32:	b003      	add	sp, #12
   11f34:	f85d fb04 	ldr.w	pc, [sp], #4
   11f38:	1fff9518 	.word	0x1fff9518
   11f3c:	1fff9514 	.word	0x1fff9514

00011f40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   11f40:	b500      	push	{lr}
   11f42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f44:	f7ee fe2c 	bl	ba0 <Sys_GetCoreID>
   11f48:	4603      	mov	r3, r0
   11f4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId])
   11f4c:	4a10      	ldr	r2, [pc, #64]	; (11f90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   11f4e:	9b01      	ldr	r3, [sp, #4]
   11f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f54:	2b00      	cmp	r3, #0
   11f56:	d10d      	bne.n	11f74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11f58:	f7ee fce8 	bl	92c <Adc_schm_read_msr>
   11f5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11f5e:	9b00      	ldr	r3, [sp, #0]
   11f60:	f003 0301 	and.w	r3, r3, #1
   11f64:	2b00      	cmp	r3, #0
   11f66:	d100      	bne.n	11f6a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11f68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_55[u32CoreId] = msr;
   11f6a:	490a      	ldr	r1, [pc, #40]	; (11f94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x54>)
   11f6c:	9b01      	ldr	r3, [sp, #4]
   11f6e:	9a00      	ldr	r2, [sp, #0]
   11f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]++;
   11f74:	4a06      	ldr	r2, [pc, #24]	; (11f90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   11f76:	9b01      	ldr	r3, [sp, #4]
   11f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f7c:	1c5a      	adds	r2, r3, #1
   11f7e:	4904      	ldr	r1, [pc, #16]	; (11f90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   11f80:	9b01      	ldr	r3, [sp, #4]
   11f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11f86:	bf00      	nop
   11f88:	b003      	add	sp, #12
   11f8a:	f85d fb04 	ldr.w	pc, [sp], #4
   11f8e:	bf00      	nop
   11f90:	1fff9520 	.word	0x1fff9520
   11f94:	1fff951c 	.word	0x1fff951c

00011f98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   11f98:	b500      	push	{lr}
   11f9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f9c:	f7ee fe00 	bl	ba0 <Sys_GetCoreID>
   11fa0:	4603      	mov	r3, r0
   11fa2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]--;
   11fa4:	4a0d      	ldr	r2, [pc, #52]	; (11fdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   11fa6:	9b01      	ldr	r3, [sp, #4]
   11fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fac:	1e5a      	subs	r2, r3, #1
   11fae:	490b      	ldr	r1, [pc, #44]	; (11fdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   11fb0:	9b01      	ldr	r3, [sp, #4]
   11fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
   11fb6:	4a0a      	ldr	r2, [pc, #40]	; (11fe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x48>)
   11fb8:	9b01      	ldr	r3, [sp, #4]
   11fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fbe:	f003 0301 	and.w	r3, r3, #1
   11fc2:	2b00      	cmp	r3, #0
   11fc4:	d106      	bne.n	11fd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
   11fc6:	4a05      	ldr	r2, [pc, #20]	; (11fdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   11fc8:	9b01      	ldr	r3, [sp, #4]
   11fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fce:	2b00      	cmp	r3, #0
   11fd0:	d100      	bne.n	11fd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11fd2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11fd4:	bf00      	nop
   11fd6:	b003      	add	sp, #12
   11fd8:	f85d fb04 	ldr.w	pc, [sp], #4
   11fdc:	1fff9520 	.word	0x1fff9520
   11fe0:	1fff951c 	.word	0x1fff951c

00011fe4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   11fe4:	b500      	push	{lr}
   11fe6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11fe8:	f7ee fdda 	bl	ba0 <Sys_GetCoreID>
   11fec:	4603      	mov	r3, r0
   11fee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId])
   11ff0:	4a10      	ldr	r2, [pc, #64]	; (12034 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   11ff2:	9b01      	ldr	r3, [sp, #4]
   11ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ff8:	2b00      	cmp	r3, #0
   11ffa:	d10d      	bne.n	12018 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11ffc:	f7ee fc96 	bl	92c <Adc_schm_read_msr>
   12000:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12002:	9b00      	ldr	r3, [sp, #0]
   12004:	f003 0301 	and.w	r3, r3, #1
   12008:	2b00      	cmp	r3, #0
   1200a:	d100      	bne.n	1200e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1200c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_56[u32CoreId] = msr;
   1200e:	490a      	ldr	r1, [pc, #40]	; (12038 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x54>)
   12010:	9b01      	ldr	r3, [sp, #4]
   12012:	9a00      	ldr	r2, [sp, #0]
   12014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]++;
   12018:	4a06      	ldr	r2, [pc, #24]	; (12034 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   1201a:	9b01      	ldr	r3, [sp, #4]
   1201c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12020:	1c5a      	adds	r2, r3, #1
   12022:	4904      	ldr	r1, [pc, #16]	; (12034 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   12024:	9b01      	ldr	r3, [sp, #4]
   12026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1202a:	bf00      	nop
   1202c:	b003      	add	sp, #12
   1202e:	f85d fb04 	ldr.w	pc, [sp], #4
   12032:	bf00      	nop
   12034:	1fff9528 	.word	0x1fff9528
   12038:	1fff9524 	.word	0x1fff9524

0001203c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   1203c:	b500      	push	{lr}
   1203e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12040:	f7ee fdae 	bl	ba0 <Sys_GetCoreID>
   12044:	4603      	mov	r3, r0
   12046:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]--;
   12048:	4a0d      	ldr	r2, [pc, #52]	; (12080 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   1204a:	9b01      	ldr	r3, [sp, #4]
   1204c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12050:	1e5a      	subs	r2, r3, #1
   12052:	490b      	ldr	r1, [pc, #44]	; (12080 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   12054:	9b01      	ldr	r3, [sp, #4]
   12056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
   1205a:	4a0a      	ldr	r2, [pc, #40]	; (12084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x48>)
   1205c:	9b01      	ldr	r3, [sp, #4]
   1205e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12062:	f003 0301 	and.w	r3, r3, #1
   12066:	2b00      	cmp	r3, #0
   12068:	d106      	bne.n	12078 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
   1206a:	4a05      	ldr	r2, [pc, #20]	; (12080 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   1206c:	9b01      	ldr	r3, [sp, #4]
   1206e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12072:	2b00      	cmp	r3, #0
   12074:	d100      	bne.n	12078 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12076:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12078:	bf00      	nop
   1207a:	b003      	add	sp, #12
   1207c:	f85d fb04 	ldr.w	pc, [sp], #4
   12080:	1fff9528 	.word	0x1fff9528
   12084:	1fff9524 	.word	0x1fff9524

00012088 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   12088:	b500      	push	{lr}
   1208a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1208c:	f7ee fd88 	bl	ba0 <Sys_GetCoreID>
   12090:	4603      	mov	r3, r0
   12092:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId])
   12094:	4a10      	ldr	r2, [pc, #64]	; (120d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   12096:	9b01      	ldr	r3, [sp, #4]
   12098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1209c:	2b00      	cmp	r3, #0
   1209e:	d10d      	bne.n	120bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   120a0:	f7ee fc44 	bl	92c <Adc_schm_read_msr>
   120a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   120a6:	9b00      	ldr	r3, [sp, #0]
   120a8:	f003 0301 	and.w	r3, r3, #1
   120ac:	2b00      	cmp	r3, #0
   120ae:	d100      	bne.n	120b2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   120b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_57[u32CoreId] = msr;
   120b2:	490a      	ldr	r1, [pc, #40]	; (120dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x54>)
   120b4:	9b01      	ldr	r3, [sp, #4]
   120b6:	9a00      	ldr	r2, [sp, #0]
   120b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]++;
   120bc:	4a06      	ldr	r2, [pc, #24]	; (120d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   120be:	9b01      	ldr	r3, [sp, #4]
   120c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120c4:	1c5a      	adds	r2, r3, #1
   120c6:	4904      	ldr	r1, [pc, #16]	; (120d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   120c8:	9b01      	ldr	r3, [sp, #4]
   120ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   120ce:	bf00      	nop
   120d0:	b003      	add	sp, #12
   120d2:	f85d fb04 	ldr.w	pc, [sp], #4
   120d6:	bf00      	nop
   120d8:	1fff9530 	.word	0x1fff9530
   120dc:	1fff952c 	.word	0x1fff952c

000120e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   120e0:	b500      	push	{lr}
   120e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   120e4:	f7ee fd5c 	bl	ba0 <Sys_GetCoreID>
   120e8:	4603      	mov	r3, r0
   120ea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]--;
   120ec:	4a0d      	ldr	r2, [pc, #52]	; (12124 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   120ee:	9b01      	ldr	r3, [sp, #4]
   120f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120f4:	1e5a      	subs	r2, r3, #1
   120f6:	490b      	ldr	r1, [pc, #44]	; (12124 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   120f8:	9b01      	ldr	r3, [sp, #4]
   120fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_57[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]))         /*if interrupts were enabled*/
   120fe:	4a0a      	ldr	r2, [pc, #40]	; (12128 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x48>)
   12100:	9b01      	ldr	r3, [sp, #4]
   12102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12106:	f003 0301 	and.w	r3, r3, #1
   1210a:	2b00      	cmp	r3, #0
   1210c:	d106      	bne.n	1211c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
   1210e:	4a05      	ldr	r2, [pc, #20]	; (12124 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   12110:	9b01      	ldr	r3, [sp, #4]
   12112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12116:	2b00      	cmp	r3, #0
   12118:	d100      	bne.n	1211c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1211a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1211c:	bf00      	nop
   1211e:	b003      	add	sp, #12
   12120:	f85d fb04 	ldr.w	pc, [sp], #4
   12124:	1fff9530 	.word	0x1fff9530
   12128:	1fff952c 	.word	0x1fff952c

0001212c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   1212c:	b500      	push	{lr}
   1212e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12130:	f7ee fd36 	bl	ba0 <Sys_GetCoreID>
   12134:	4603      	mov	r3, r0
   12136:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId])
   12138:	4a10      	ldr	r2, [pc, #64]	; (1217c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   1213a:	9b01      	ldr	r3, [sp, #4]
   1213c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12140:	2b00      	cmp	r3, #0
   12142:	d10d      	bne.n	12160 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12144:	f7ee fbf2 	bl	92c <Adc_schm_read_msr>
   12148:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1214a:	9b00      	ldr	r3, [sp, #0]
   1214c:	f003 0301 	and.w	r3, r3, #1
   12150:	2b00      	cmp	r3, #0
   12152:	d100      	bne.n	12156 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12154:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_58[u32CoreId] = msr;
   12156:	490a      	ldr	r1, [pc, #40]	; (12180 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x54>)
   12158:	9b01      	ldr	r3, [sp, #4]
   1215a:	9a00      	ldr	r2, [sp, #0]
   1215c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]++;
   12160:	4a06      	ldr	r2, [pc, #24]	; (1217c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   12162:	9b01      	ldr	r3, [sp, #4]
   12164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12168:	1c5a      	adds	r2, r3, #1
   1216a:	4904      	ldr	r1, [pc, #16]	; (1217c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   1216c:	9b01      	ldr	r3, [sp, #4]
   1216e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12172:	bf00      	nop
   12174:	b003      	add	sp, #12
   12176:	f85d fb04 	ldr.w	pc, [sp], #4
   1217a:	bf00      	nop
   1217c:	1fff9538 	.word	0x1fff9538
   12180:	1fff9534 	.word	0x1fff9534

00012184 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   12184:	b500      	push	{lr}
   12186:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12188:	f7ee fd0a 	bl	ba0 <Sys_GetCoreID>
   1218c:	4603      	mov	r3, r0
   1218e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]--;
   12190:	4a0d      	ldr	r2, [pc, #52]	; (121c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   12192:	9b01      	ldr	r3, [sp, #4]
   12194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12198:	1e5a      	subs	r2, r3, #1
   1219a:	490b      	ldr	r1, [pc, #44]	; (121c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   1219c:	9b01      	ldr	r3, [sp, #4]
   1219e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_58[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]))         /*if interrupts were enabled*/
   121a2:	4a0a      	ldr	r2, [pc, #40]	; (121cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x48>)
   121a4:	9b01      	ldr	r3, [sp, #4]
   121a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121aa:	f003 0301 	and.w	r3, r3, #1
   121ae:	2b00      	cmp	r3, #0
   121b0:	d106      	bne.n	121c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
   121b2:	4a05      	ldr	r2, [pc, #20]	; (121c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   121b4:	9b01      	ldr	r3, [sp, #4]
   121b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121ba:	2b00      	cmp	r3, #0
   121bc:	d100      	bne.n	121c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   121be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   121c0:	bf00      	nop
   121c2:	b003      	add	sp, #12
   121c4:	f85d fb04 	ldr.w	pc, [sp], #4
   121c8:	1fff9538 	.word	0x1fff9538
   121cc:	1fff9534 	.word	0x1fff9534

000121d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   121d0:	b500      	push	{lr}
   121d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   121d4:	f7ee fce4 	bl	ba0 <Sys_GetCoreID>
   121d8:	4603      	mov	r3, r0
   121da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId])
   121dc:	4a10      	ldr	r2, [pc, #64]	; (12220 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   121de:	9b01      	ldr	r3, [sp, #4]
   121e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121e4:	2b00      	cmp	r3, #0
   121e6:	d10d      	bne.n	12204 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   121e8:	f7ee fba0 	bl	92c <Adc_schm_read_msr>
   121ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   121ee:	9b00      	ldr	r3, [sp, #0]
   121f0:	f003 0301 	and.w	r3, r3, #1
   121f4:	2b00      	cmp	r3, #0
   121f6:	d100      	bne.n	121fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   121f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_59[u32CoreId] = msr;
   121fa:	490a      	ldr	r1, [pc, #40]	; (12224 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x54>)
   121fc:	9b01      	ldr	r3, [sp, #4]
   121fe:	9a00      	ldr	r2, [sp, #0]
   12200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]++;
   12204:	4a06      	ldr	r2, [pc, #24]	; (12220 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   12206:	9b01      	ldr	r3, [sp, #4]
   12208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1220c:	1c5a      	adds	r2, r3, #1
   1220e:	4904      	ldr	r1, [pc, #16]	; (12220 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   12210:	9b01      	ldr	r3, [sp, #4]
   12212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12216:	bf00      	nop
   12218:	b003      	add	sp, #12
   1221a:	f85d fb04 	ldr.w	pc, [sp], #4
   1221e:	bf00      	nop
   12220:	1fff9540 	.word	0x1fff9540
   12224:	1fff953c 	.word	0x1fff953c

00012228 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   12228:	b500      	push	{lr}
   1222a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1222c:	f7ee fcb8 	bl	ba0 <Sys_GetCoreID>
   12230:	4603      	mov	r3, r0
   12232:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]--;
   12234:	4a0d      	ldr	r2, [pc, #52]	; (1226c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   12236:	9b01      	ldr	r3, [sp, #4]
   12238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1223c:	1e5a      	subs	r2, r3, #1
   1223e:	490b      	ldr	r1, [pc, #44]	; (1226c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   12240:	9b01      	ldr	r3, [sp, #4]
   12242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_59[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]))         /*if interrupts were enabled*/
   12246:	4a0a      	ldr	r2, [pc, #40]	; (12270 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x48>)
   12248:	9b01      	ldr	r3, [sp, #4]
   1224a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1224e:	f003 0301 	and.w	r3, r3, #1
   12252:	2b00      	cmp	r3, #0
   12254:	d106      	bne.n	12264 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
   12256:	4a05      	ldr	r2, [pc, #20]	; (1226c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   12258:	9b01      	ldr	r3, [sp, #4]
   1225a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1225e:	2b00      	cmp	r3, #0
   12260:	d100      	bne.n	12264 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12262:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12264:	bf00      	nop
   12266:	b003      	add	sp, #12
   12268:	f85d fb04 	ldr.w	pc, [sp], #4
   1226c:	1fff9540 	.word	0x1fff9540
   12270:	1fff953c 	.word	0x1fff953c

00012274 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   12274:	b500      	push	{lr}
   12276:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12278:	f7ee fc92 	bl	ba0 <Sys_GetCoreID>
   1227c:	4603      	mov	r3, r0
   1227e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId])
   12280:	4a10      	ldr	r2, [pc, #64]	; (122c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   12282:	9b01      	ldr	r3, [sp, #4]
   12284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12288:	2b00      	cmp	r3, #0
   1228a:	d10d      	bne.n	122a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1228c:	f7ee fb4e 	bl	92c <Adc_schm_read_msr>
   12290:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12292:	9b00      	ldr	r3, [sp, #0]
   12294:	f003 0301 	and.w	r3, r3, #1
   12298:	2b00      	cmp	r3, #0
   1229a:	d100      	bne.n	1229e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1229c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_60[u32CoreId] = msr;
   1229e:	490a      	ldr	r1, [pc, #40]	; (122c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x54>)
   122a0:	9b01      	ldr	r3, [sp, #4]
   122a2:	9a00      	ldr	r2, [sp, #0]
   122a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]++;
   122a8:	4a06      	ldr	r2, [pc, #24]	; (122c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   122aa:	9b01      	ldr	r3, [sp, #4]
   122ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122b0:	1c5a      	adds	r2, r3, #1
   122b2:	4904      	ldr	r1, [pc, #16]	; (122c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   122b4:	9b01      	ldr	r3, [sp, #4]
   122b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   122ba:	bf00      	nop
   122bc:	b003      	add	sp, #12
   122be:	f85d fb04 	ldr.w	pc, [sp], #4
   122c2:	bf00      	nop
   122c4:	1fff9548 	.word	0x1fff9548
   122c8:	1fff9544 	.word	0x1fff9544

000122cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   122cc:	b500      	push	{lr}
   122ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   122d0:	f7ee fc66 	bl	ba0 <Sys_GetCoreID>
   122d4:	4603      	mov	r3, r0
   122d6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]--;
   122d8:	4a0d      	ldr	r2, [pc, #52]	; (12310 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   122da:	9b01      	ldr	r3, [sp, #4]
   122dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122e0:	1e5a      	subs	r2, r3, #1
   122e2:	490b      	ldr	r1, [pc, #44]	; (12310 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   122e4:	9b01      	ldr	r3, [sp, #4]
   122e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
   122ea:	4a0a      	ldr	r2, [pc, #40]	; (12314 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x48>)
   122ec:	9b01      	ldr	r3, [sp, #4]
   122ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122f2:	f003 0301 	and.w	r3, r3, #1
   122f6:	2b00      	cmp	r3, #0
   122f8:	d106      	bne.n	12308 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
   122fa:	4a05      	ldr	r2, [pc, #20]	; (12310 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   122fc:	9b01      	ldr	r3, [sp, #4]
   122fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12302:	2b00      	cmp	r3, #0
   12304:	d100      	bne.n	12308 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12306:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12308:	bf00      	nop
   1230a:	b003      	add	sp, #12
   1230c:	f85d fb04 	ldr.w	pc, [sp], #4
   12310:	1fff9548 	.word	0x1fff9548
   12314:	1fff9544 	.word	0x1fff9544

00012318 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   12318:	b500      	push	{lr}
   1231a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1231c:	f7ee fc40 	bl	ba0 <Sys_GetCoreID>
   12320:	4603      	mov	r3, r0
   12322:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId])
   12324:	4a10      	ldr	r2, [pc, #64]	; (12368 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   12326:	9b01      	ldr	r3, [sp, #4]
   12328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1232c:	2b00      	cmp	r3, #0
   1232e:	d10d      	bne.n	1234c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12330:	f7ee fafc 	bl	92c <Adc_schm_read_msr>
   12334:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12336:	9b00      	ldr	r3, [sp, #0]
   12338:	f003 0301 	and.w	r3, r3, #1
   1233c:	2b00      	cmp	r3, #0
   1233e:	d100      	bne.n	12342 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12340:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_61[u32CoreId] = msr;
   12342:	490a      	ldr	r1, [pc, #40]	; (1236c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x54>)
   12344:	9b01      	ldr	r3, [sp, #4]
   12346:	9a00      	ldr	r2, [sp, #0]
   12348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]++;
   1234c:	4a06      	ldr	r2, [pc, #24]	; (12368 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   1234e:	9b01      	ldr	r3, [sp, #4]
   12350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12354:	1c5a      	adds	r2, r3, #1
   12356:	4904      	ldr	r1, [pc, #16]	; (12368 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   12358:	9b01      	ldr	r3, [sp, #4]
   1235a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1235e:	bf00      	nop
   12360:	b003      	add	sp, #12
   12362:	f85d fb04 	ldr.w	pc, [sp], #4
   12366:	bf00      	nop
   12368:	1fff9550 	.word	0x1fff9550
   1236c:	1fff954c 	.word	0x1fff954c

00012370 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   12370:	b500      	push	{lr}
   12372:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12374:	f7ee fc14 	bl	ba0 <Sys_GetCoreID>
   12378:	4603      	mov	r3, r0
   1237a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]--;
   1237c:	4a0d      	ldr	r2, [pc, #52]	; (123b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   1237e:	9b01      	ldr	r3, [sp, #4]
   12380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12384:	1e5a      	subs	r2, r3, #1
   12386:	490b      	ldr	r1, [pc, #44]	; (123b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   12388:	9b01      	ldr	r3, [sp, #4]
   1238a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
   1238e:	4a0a      	ldr	r2, [pc, #40]	; (123b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x48>)
   12390:	9b01      	ldr	r3, [sp, #4]
   12392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12396:	f003 0301 	and.w	r3, r3, #1
   1239a:	2b00      	cmp	r3, #0
   1239c:	d106      	bne.n	123ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
   1239e:	4a05      	ldr	r2, [pc, #20]	; (123b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   123a0:	9b01      	ldr	r3, [sp, #4]
   123a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123a6:	2b00      	cmp	r3, #0
   123a8:	d100      	bne.n	123ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   123aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   123ac:	bf00      	nop
   123ae:	b003      	add	sp, #12
   123b0:	f85d fb04 	ldr.w	pc, [sp], #4
   123b4:	1fff9550 	.word	0x1fff9550
   123b8:	1fff954c 	.word	0x1fff954c

000123bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   123bc:	b500      	push	{lr}
   123be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   123c0:	f7ee fbee 	bl	ba0 <Sys_GetCoreID>
   123c4:	4603      	mov	r3, r0
   123c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId])
   123c8:	4a10      	ldr	r2, [pc, #64]	; (1240c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   123ca:	9b01      	ldr	r3, [sp, #4]
   123cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123d0:	2b00      	cmp	r3, #0
   123d2:	d10d      	bne.n	123f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   123d4:	f7ee faaa 	bl	92c <Adc_schm_read_msr>
   123d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   123da:	9b00      	ldr	r3, [sp, #0]
   123dc:	f003 0301 	and.w	r3, r3, #1
   123e0:	2b00      	cmp	r3, #0
   123e2:	d100      	bne.n	123e6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   123e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_62[u32CoreId] = msr;
   123e6:	490a      	ldr	r1, [pc, #40]	; (12410 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x54>)
   123e8:	9b01      	ldr	r3, [sp, #4]
   123ea:	9a00      	ldr	r2, [sp, #0]
   123ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]++;
   123f0:	4a06      	ldr	r2, [pc, #24]	; (1240c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   123f2:	9b01      	ldr	r3, [sp, #4]
   123f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123f8:	1c5a      	adds	r2, r3, #1
   123fa:	4904      	ldr	r1, [pc, #16]	; (1240c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   123fc:	9b01      	ldr	r3, [sp, #4]
   123fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12402:	bf00      	nop
   12404:	b003      	add	sp, #12
   12406:	f85d fb04 	ldr.w	pc, [sp], #4
   1240a:	bf00      	nop
   1240c:	1fff9558 	.word	0x1fff9558
   12410:	1fff9554 	.word	0x1fff9554

00012414 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   12414:	b500      	push	{lr}
   12416:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12418:	f7ee fbc2 	bl	ba0 <Sys_GetCoreID>
   1241c:	4603      	mov	r3, r0
   1241e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]--;
   12420:	4a0d      	ldr	r2, [pc, #52]	; (12458 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   12422:	9b01      	ldr	r3, [sp, #4]
   12424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12428:	1e5a      	subs	r2, r3, #1
   1242a:	490b      	ldr	r1, [pc, #44]	; (12458 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   1242c:	9b01      	ldr	r3, [sp, #4]
   1242e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
   12432:	4a0a      	ldr	r2, [pc, #40]	; (1245c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x48>)
   12434:	9b01      	ldr	r3, [sp, #4]
   12436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1243a:	f003 0301 	and.w	r3, r3, #1
   1243e:	2b00      	cmp	r3, #0
   12440:	d106      	bne.n	12450 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
   12442:	4a05      	ldr	r2, [pc, #20]	; (12458 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   12444:	9b01      	ldr	r3, [sp, #4]
   12446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1244a:	2b00      	cmp	r3, #0
   1244c:	d100      	bne.n	12450 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1244e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12450:	bf00      	nop
   12452:	b003      	add	sp, #12
   12454:	f85d fb04 	ldr.w	pc, [sp], #4
   12458:	1fff9558 	.word	0x1fff9558
   1245c:	1fff9554 	.word	0x1fff9554

00012460 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   12460:	b500      	push	{lr}
   12462:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12464:	f7ee fb9c 	bl	ba0 <Sys_GetCoreID>
   12468:	4603      	mov	r3, r0
   1246a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId])
   1246c:	4a10      	ldr	r2, [pc, #64]	; (124b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   1246e:	9b01      	ldr	r3, [sp, #4]
   12470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12474:	2b00      	cmp	r3, #0
   12476:	d10d      	bne.n	12494 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12478:	f7ee fa58 	bl	92c <Adc_schm_read_msr>
   1247c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1247e:	9b00      	ldr	r3, [sp, #0]
   12480:	f003 0301 	and.w	r3, r3, #1
   12484:	2b00      	cmp	r3, #0
   12486:	d100      	bne.n	1248a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12488:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_63[u32CoreId] = msr;
   1248a:	490a      	ldr	r1, [pc, #40]	; (124b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x54>)
   1248c:	9b01      	ldr	r3, [sp, #4]
   1248e:	9a00      	ldr	r2, [sp, #0]
   12490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]++;
   12494:	4a06      	ldr	r2, [pc, #24]	; (124b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   12496:	9b01      	ldr	r3, [sp, #4]
   12498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1249c:	1c5a      	adds	r2, r3, #1
   1249e:	4904      	ldr	r1, [pc, #16]	; (124b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   124a0:	9b01      	ldr	r3, [sp, #4]
   124a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   124a6:	bf00      	nop
   124a8:	b003      	add	sp, #12
   124aa:	f85d fb04 	ldr.w	pc, [sp], #4
   124ae:	bf00      	nop
   124b0:	1fff9560 	.word	0x1fff9560
   124b4:	1fff955c 	.word	0x1fff955c

000124b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   124b8:	b500      	push	{lr}
   124ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   124bc:	f7ee fb70 	bl	ba0 <Sys_GetCoreID>
   124c0:	4603      	mov	r3, r0
   124c2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]--;
   124c4:	4a0d      	ldr	r2, [pc, #52]	; (124fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   124c6:	9b01      	ldr	r3, [sp, #4]
   124c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124cc:	1e5a      	subs	r2, r3, #1
   124ce:	490b      	ldr	r1, [pc, #44]	; (124fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   124d0:	9b01      	ldr	r3, [sp, #4]
   124d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
   124d6:	4a0a      	ldr	r2, [pc, #40]	; (12500 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x48>)
   124d8:	9b01      	ldr	r3, [sp, #4]
   124da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124de:	f003 0301 	and.w	r3, r3, #1
   124e2:	2b00      	cmp	r3, #0
   124e4:	d106      	bne.n	124f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
   124e6:	4a05      	ldr	r2, [pc, #20]	; (124fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   124e8:	9b01      	ldr	r3, [sp, #4]
   124ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124ee:	2b00      	cmp	r3, #0
   124f0:	d100      	bne.n	124f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   124f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   124f4:	bf00      	nop
   124f6:	b003      	add	sp, #12
   124f8:	f85d fb04 	ldr.w	pc, [sp], #4
   124fc:	1fff9560 	.word	0x1fff9560
   12500:	1fff955c 	.word	0x1fff955c

00012504 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   12504:	b500      	push	{lr}
   12506:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12508:	f7ee fb4a 	bl	ba0 <Sys_GetCoreID>
   1250c:	4603      	mov	r3, r0
   1250e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId])
   12510:	4a10      	ldr	r2, [pc, #64]	; (12554 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   12512:	9b01      	ldr	r3, [sp, #4]
   12514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12518:	2b00      	cmp	r3, #0
   1251a:	d10d      	bne.n	12538 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1251c:	f7ee fa06 	bl	92c <Adc_schm_read_msr>
   12520:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12522:	9b00      	ldr	r3, [sp, #0]
   12524:	f003 0301 	and.w	r3, r3, #1
   12528:	2b00      	cmp	r3, #0
   1252a:	d100      	bne.n	1252e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1252c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_64[u32CoreId] = msr;
   1252e:	490a      	ldr	r1, [pc, #40]	; (12558 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x54>)
   12530:	9b01      	ldr	r3, [sp, #4]
   12532:	9a00      	ldr	r2, [sp, #0]
   12534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]++;
   12538:	4a06      	ldr	r2, [pc, #24]	; (12554 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   1253a:	9b01      	ldr	r3, [sp, #4]
   1253c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12540:	1c5a      	adds	r2, r3, #1
   12542:	4904      	ldr	r1, [pc, #16]	; (12554 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   12544:	9b01      	ldr	r3, [sp, #4]
   12546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1254a:	bf00      	nop
   1254c:	b003      	add	sp, #12
   1254e:	f85d fb04 	ldr.w	pc, [sp], #4
   12552:	bf00      	nop
   12554:	1fff9568 	.word	0x1fff9568
   12558:	1fff9564 	.word	0x1fff9564

0001255c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   1255c:	b500      	push	{lr}
   1255e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12560:	f7ee fb1e 	bl	ba0 <Sys_GetCoreID>
   12564:	4603      	mov	r3, r0
   12566:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]--;
   12568:	4a0d      	ldr	r2, [pc, #52]	; (125a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   1256a:	9b01      	ldr	r3, [sp, #4]
   1256c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12570:	1e5a      	subs	r2, r3, #1
   12572:	490b      	ldr	r1, [pc, #44]	; (125a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   12574:	9b01      	ldr	r3, [sp, #4]
   12576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
   1257a:	4a0a      	ldr	r2, [pc, #40]	; (125a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x48>)
   1257c:	9b01      	ldr	r3, [sp, #4]
   1257e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12582:	f003 0301 	and.w	r3, r3, #1
   12586:	2b00      	cmp	r3, #0
   12588:	d106      	bne.n	12598 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
   1258a:	4a05      	ldr	r2, [pc, #20]	; (125a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   1258c:	9b01      	ldr	r3, [sp, #4]
   1258e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12592:	2b00      	cmp	r3, #0
   12594:	d100      	bne.n	12598 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12596:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12598:	bf00      	nop
   1259a:	b003      	add	sp, #12
   1259c:	f85d fb04 	ldr.w	pc, [sp], #4
   125a0:	1fff9568 	.word	0x1fff9568
   125a4:	1fff9564 	.word	0x1fff9564

000125a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   125a8:	b500      	push	{lr}
   125aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   125ac:	f7ee faf8 	bl	ba0 <Sys_GetCoreID>
   125b0:	4603      	mov	r3, r0
   125b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId])
   125b4:	4a10      	ldr	r2, [pc, #64]	; (125f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   125b6:	9b01      	ldr	r3, [sp, #4]
   125b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125bc:	2b00      	cmp	r3, #0
   125be:	d10d      	bne.n	125dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   125c0:	f7ee f9b4 	bl	92c <Adc_schm_read_msr>
   125c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   125c6:	9b00      	ldr	r3, [sp, #0]
   125c8:	f003 0301 	and.w	r3, r3, #1
   125cc:	2b00      	cmp	r3, #0
   125ce:	d100      	bne.n	125d2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   125d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_65[u32CoreId] = msr;
   125d2:	490a      	ldr	r1, [pc, #40]	; (125fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x54>)
   125d4:	9b01      	ldr	r3, [sp, #4]
   125d6:	9a00      	ldr	r2, [sp, #0]
   125d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]++;
   125dc:	4a06      	ldr	r2, [pc, #24]	; (125f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   125de:	9b01      	ldr	r3, [sp, #4]
   125e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125e4:	1c5a      	adds	r2, r3, #1
   125e6:	4904      	ldr	r1, [pc, #16]	; (125f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   125e8:	9b01      	ldr	r3, [sp, #4]
   125ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   125ee:	bf00      	nop
   125f0:	b003      	add	sp, #12
   125f2:	f85d fb04 	ldr.w	pc, [sp], #4
   125f6:	bf00      	nop
   125f8:	1fff9570 	.word	0x1fff9570
   125fc:	1fff956c 	.word	0x1fff956c

00012600 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   12600:	b500      	push	{lr}
   12602:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12604:	f7ee facc 	bl	ba0 <Sys_GetCoreID>
   12608:	4603      	mov	r3, r0
   1260a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]--;
   1260c:	4a0d      	ldr	r2, [pc, #52]	; (12644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   1260e:	9b01      	ldr	r3, [sp, #4]
   12610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12614:	1e5a      	subs	r2, r3, #1
   12616:	490b      	ldr	r1, [pc, #44]	; (12644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   12618:	9b01      	ldr	r3, [sp, #4]
   1261a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
   1261e:	4a0a      	ldr	r2, [pc, #40]	; (12648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x48>)
   12620:	9b01      	ldr	r3, [sp, #4]
   12622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12626:	f003 0301 	and.w	r3, r3, #1
   1262a:	2b00      	cmp	r3, #0
   1262c:	d106      	bne.n	1263c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
   1262e:	4a05      	ldr	r2, [pc, #20]	; (12644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   12630:	9b01      	ldr	r3, [sp, #4]
   12632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12636:	2b00      	cmp	r3, #0
   12638:	d100      	bne.n	1263c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1263a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1263c:	bf00      	nop
   1263e:	b003      	add	sp, #12
   12640:	f85d fb04 	ldr.w	pc, [sp], #4
   12644:	1fff9570 	.word	0x1fff9570
   12648:	1fff956c 	.word	0x1fff956c

0001264c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   1264c:	b500      	push	{lr}
   1264e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12650:	f7ee faa6 	bl	ba0 <Sys_GetCoreID>
   12654:	4603      	mov	r3, r0
   12656:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId])
   12658:	4a10      	ldr	r2, [pc, #64]	; (1269c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   1265a:	9b01      	ldr	r3, [sp, #4]
   1265c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12660:	2b00      	cmp	r3, #0
   12662:	d10d      	bne.n	12680 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12664:	f7ee f962 	bl	92c <Adc_schm_read_msr>
   12668:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1266a:	9b00      	ldr	r3, [sp, #0]
   1266c:	f003 0301 	and.w	r3, r3, #1
   12670:	2b00      	cmp	r3, #0
   12672:	d100      	bne.n	12676 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12674:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_66[u32CoreId] = msr;
   12676:	490a      	ldr	r1, [pc, #40]	; (126a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x54>)
   12678:	9b01      	ldr	r3, [sp, #4]
   1267a:	9a00      	ldr	r2, [sp, #0]
   1267c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]++;
   12680:	4a06      	ldr	r2, [pc, #24]	; (1269c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   12682:	9b01      	ldr	r3, [sp, #4]
   12684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12688:	1c5a      	adds	r2, r3, #1
   1268a:	4904      	ldr	r1, [pc, #16]	; (1269c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   1268c:	9b01      	ldr	r3, [sp, #4]
   1268e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12692:	bf00      	nop
   12694:	b003      	add	sp, #12
   12696:	f85d fb04 	ldr.w	pc, [sp], #4
   1269a:	bf00      	nop
   1269c:	1fff9578 	.word	0x1fff9578
   126a0:	1fff9574 	.word	0x1fff9574

000126a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   126a4:	b500      	push	{lr}
   126a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   126a8:	f7ee fa7a 	bl	ba0 <Sys_GetCoreID>
   126ac:	4603      	mov	r3, r0
   126ae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]--;
   126b0:	4a0d      	ldr	r2, [pc, #52]	; (126e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   126b2:	9b01      	ldr	r3, [sp, #4]
   126b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126b8:	1e5a      	subs	r2, r3, #1
   126ba:	490b      	ldr	r1, [pc, #44]	; (126e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   126bc:	9b01      	ldr	r3, [sp, #4]
   126be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
   126c2:	4a0a      	ldr	r2, [pc, #40]	; (126ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x48>)
   126c4:	9b01      	ldr	r3, [sp, #4]
   126c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126ca:	f003 0301 	and.w	r3, r3, #1
   126ce:	2b00      	cmp	r3, #0
   126d0:	d106      	bne.n	126e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
   126d2:	4a05      	ldr	r2, [pc, #20]	; (126e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   126d4:	9b01      	ldr	r3, [sp, #4]
   126d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126da:	2b00      	cmp	r3, #0
   126dc:	d100      	bne.n	126e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   126de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   126e0:	bf00      	nop
   126e2:	b003      	add	sp, #12
   126e4:	f85d fb04 	ldr.w	pc, [sp], #4
   126e8:	1fff9578 	.word	0x1fff9578
   126ec:	1fff9574 	.word	0x1fff9574

000126f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   126f0:	b500      	push	{lr}
   126f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   126f4:	f7ee fa54 	bl	ba0 <Sys_GetCoreID>
   126f8:	4603      	mov	r3, r0
   126fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId])
   126fc:	4a10      	ldr	r2, [pc, #64]	; (12740 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   126fe:	9b01      	ldr	r3, [sp, #4]
   12700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12704:	2b00      	cmp	r3, #0
   12706:	d10d      	bne.n	12724 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12708:	f7ee f910 	bl	92c <Adc_schm_read_msr>
   1270c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1270e:	9b00      	ldr	r3, [sp, #0]
   12710:	f003 0301 	and.w	r3, r3, #1
   12714:	2b00      	cmp	r3, #0
   12716:	d100      	bne.n	1271a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12718:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_67[u32CoreId] = msr;
   1271a:	490a      	ldr	r1, [pc, #40]	; (12744 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x54>)
   1271c:	9b01      	ldr	r3, [sp, #4]
   1271e:	9a00      	ldr	r2, [sp, #0]
   12720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]++;
   12724:	4a06      	ldr	r2, [pc, #24]	; (12740 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   12726:	9b01      	ldr	r3, [sp, #4]
   12728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1272c:	1c5a      	adds	r2, r3, #1
   1272e:	4904      	ldr	r1, [pc, #16]	; (12740 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   12730:	9b01      	ldr	r3, [sp, #4]
   12732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12736:	bf00      	nop
   12738:	b003      	add	sp, #12
   1273a:	f85d fb04 	ldr.w	pc, [sp], #4
   1273e:	bf00      	nop
   12740:	1fff9580 	.word	0x1fff9580
   12744:	1fff957c 	.word	0x1fff957c

00012748 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   12748:	b500      	push	{lr}
   1274a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1274c:	f7ee fa28 	bl	ba0 <Sys_GetCoreID>
   12750:	4603      	mov	r3, r0
   12752:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]--;
   12754:	4a0d      	ldr	r2, [pc, #52]	; (1278c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   12756:	9b01      	ldr	r3, [sp, #4]
   12758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1275c:	1e5a      	subs	r2, r3, #1
   1275e:	490b      	ldr	r1, [pc, #44]	; (1278c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   12760:	9b01      	ldr	r3, [sp, #4]
   12762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
   12766:	4a0a      	ldr	r2, [pc, #40]	; (12790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x48>)
   12768:	9b01      	ldr	r3, [sp, #4]
   1276a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1276e:	f003 0301 	and.w	r3, r3, #1
   12772:	2b00      	cmp	r3, #0
   12774:	d106      	bne.n	12784 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
   12776:	4a05      	ldr	r2, [pc, #20]	; (1278c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   12778:	9b01      	ldr	r3, [sp, #4]
   1277a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1277e:	2b00      	cmp	r3, #0
   12780:	d100      	bne.n	12784 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12782:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12784:	bf00      	nop
   12786:	b003      	add	sp, #12
   12788:	f85d fb04 	ldr.w	pc, [sp], #4
   1278c:	1fff9580 	.word	0x1fff9580
   12790:	1fff957c 	.word	0x1fff957c

00012794 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   12794:	b500      	push	{lr}
   12796:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12798:	f7ee fa02 	bl	ba0 <Sys_GetCoreID>
   1279c:	4603      	mov	r3, r0
   1279e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId])
   127a0:	4a10      	ldr	r2, [pc, #64]	; (127e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   127a2:	9b01      	ldr	r3, [sp, #4]
   127a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127a8:	2b00      	cmp	r3, #0
   127aa:	d10d      	bne.n	127c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   127ac:	f7ee f8be 	bl	92c <Adc_schm_read_msr>
   127b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   127b2:	9b00      	ldr	r3, [sp, #0]
   127b4:	f003 0301 	and.w	r3, r3, #1
   127b8:	2b00      	cmp	r3, #0
   127ba:	d100      	bne.n	127be <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   127bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_68[u32CoreId] = msr;
   127be:	490a      	ldr	r1, [pc, #40]	; (127e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x54>)
   127c0:	9b01      	ldr	r3, [sp, #4]
   127c2:	9a00      	ldr	r2, [sp, #0]
   127c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]++;
   127c8:	4a06      	ldr	r2, [pc, #24]	; (127e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   127ca:	9b01      	ldr	r3, [sp, #4]
   127cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127d0:	1c5a      	adds	r2, r3, #1
   127d2:	4904      	ldr	r1, [pc, #16]	; (127e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   127d4:	9b01      	ldr	r3, [sp, #4]
   127d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   127da:	bf00      	nop
   127dc:	b003      	add	sp, #12
   127de:	f85d fb04 	ldr.w	pc, [sp], #4
   127e2:	bf00      	nop
   127e4:	1fff9588 	.word	0x1fff9588
   127e8:	1fff9584 	.word	0x1fff9584

000127ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   127ec:	b500      	push	{lr}
   127ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   127f0:	f7ee f9d6 	bl	ba0 <Sys_GetCoreID>
   127f4:	4603      	mov	r3, r0
   127f6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]--;
   127f8:	4a0d      	ldr	r2, [pc, #52]	; (12830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   127fa:	9b01      	ldr	r3, [sp, #4]
   127fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12800:	1e5a      	subs	r2, r3, #1
   12802:	490b      	ldr	r1, [pc, #44]	; (12830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   12804:	9b01      	ldr	r3, [sp, #4]
   12806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
   1280a:	4a0a      	ldr	r2, [pc, #40]	; (12834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x48>)
   1280c:	9b01      	ldr	r3, [sp, #4]
   1280e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12812:	f003 0301 	and.w	r3, r3, #1
   12816:	2b00      	cmp	r3, #0
   12818:	d106      	bne.n	12828 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
   1281a:	4a05      	ldr	r2, [pc, #20]	; (12830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   1281c:	9b01      	ldr	r3, [sp, #4]
   1281e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12822:	2b00      	cmp	r3, #0
   12824:	d100      	bne.n	12828 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12826:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12828:	bf00      	nop
   1282a:	b003      	add	sp, #12
   1282c:	f85d fb04 	ldr.w	pc, [sp], #4
   12830:	1fff9588 	.word	0x1fff9588
   12834:	1fff9584 	.word	0x1fff9584

00012838 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   12838:	b500      	push	{lr}
   1283a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1283c:	f7ee f9b0 	bl	ba0 <Sys_GetCoreID>
   12840:	4603      	mov	r3, r0
   12842:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId])
   12844:	4a10      	ldr	r2, [pc, #64]	; (12888 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   12846:	9b01      	ldr	r3, [sp, #4]
   12848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1284c:	2b00      	cmp	r3, #0
   1284e:	d10d      	bne.n	1286c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12850:	f7ee f86c 	bl	92c <Adc_schm_read_msr>
   12854:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12856:	9b00      	ldr	r3, [sp, #0]
   12858:	f003 0301 	and.w	r3, r3, #1
   1285c:	2b00      	cmp	r3, #0
   1285e:	d100      	bne.n	12862 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12860:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_69[u32CoreId] = msr;
   12862:	490a      	ldr	r1, [pc, #40]	; (1288c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x54>)
   12864:	9b01      	ldr	r3, [sp, #4]
   12866:	9a00      	ldr	r2, [sp, #0]
   12868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]++;
   1286c:	4a06      	ldr	r2, [pc, #24]	; (12888 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   1286e:	9b01      	ldr	r3, [sp, #4]
   12870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12874:	1c5a      	adds	r2, r3, #1
   12876:	4904      	ldr	r1, [pc, #16]	; (12888 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   12878:	9b01      	ldr	r3, [sp, #4]
   1287a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1287e:	bf00      	nop
   12880:	b003      	add	sp, #12
   12882:	f85d fb04 	ldr.w	pc, [sp], #4
   12886:	bf00      	nop
   12888:	1fff9590 	.word	0x1fff9590
   1288c:	1fff958c 	.word	0x1fff958c

00012890 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   12890:	b500      	push	{lr}
   12892:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12894:	f7ee f984 	bl	ba0 <Sys_GetCoreID>
   12898:	4603      	mov	r3, r0
   1289a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]--;
   1289c:	4a0d      	ldr	r2, [pc, #52]	; (128d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   1289e:	9b01      	ldr	r3, [sp, #4]
   128a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128a4:	1e5a      	subs	r2, r3, #1
   128a6:	490b      	ldr	r1, [pc, #44]	; (128d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   128a8:	9b01      	ldr	r3, [sp, #4]
   128aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
   128ae:	4a0a      	ldr	r2, [pc, #40]	; (128d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x48>)
   128b0:	9b01      	ldr	r3, [sp, #4]
   128b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128b6:	f003 0301 	and.w	r3, r3, #1
   128ba:	2b00      	cmp	r3, #0
   128bc:	d106      	bne.n	128cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
   128be:	4a05      	ldr	r2, [pc, #20]	; (128d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   128c0:	9b01      	ldr	r3, [sp, #4]
   128c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128c6:	2b00      	cmp	r3, #0
   128c8:	d100      	bne.n	128cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   128ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   128cc:	bf00      	nop
   128ce:	b003      	add	sp, #12
   128d0:	f85d fb04 	ldr.w	pc, [sp], #4
   128d4:	1fff9590 	.word	0x1fff9590
   128d8:	1fff958c 	.word	0x1fff958c

000128dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   128dc:	b500      	push	{lr}
   128de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   128e0:	f7ee f95e 	bl	ba0 <Sys_GetCoreID>
   128e4:	4603      	mov	r3, r0
   128e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId])
   128e8:	4a10      	ldr	r2, [pc, #64]	; (1292c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   128ea:	9b01      	ldr	r3, [sp, #4]
   128ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128f0:	2b00      	cmp	r3, #0
   128f2:	d10d      	bne.n	12910 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   128f4:	f7ee f81a 	bl	92c <Adc_schm_read_msr>
   128f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   128fa:	9b00      	ldr	r3, [sp, #0]
   128fc:	f003 0301 	and.w	r3, r3, #1
   12900:	2b00      	cmp	r3, #0
   12902:	d100      	bne.n	12906 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12904:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_70[u32CoreId] = msr;
   12906:	490a      	ldr	r1, [pc, #40]	; (12930 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x54>)
   12908:	9b01      	ldr	r3, [sp, #4]
   1290a:	9a00      	ldr	r2, [sp, #0]
   1290c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]++;
   12910:	4a06      	ldr	r2, [pc, #24]	; (1292c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   12912:	9b01      	ldr	r3, [sp, #4]
   12914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12918:	1c5a      	adds	r2, r3, #1
   1291a:	4904      	ldr	r1, [pc, #16]	; (1292c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   1291c:	9b01      	ldr	r3, [sp, #4]
   1291e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12922:	bf00      	nop
   12924:	b003      	add	sp, #12
   12926:	f85d fb04 	ldr.w	pc, [sp], #4
   1292a:	bf00      	nop
   1292c:	1fff9598 	.word	0x1fff9598
   12930:	1fff9594 	.word	0x1fff9594

00012934 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   12934:	b500      	push	{lr}
   12936:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12938:	f7ee f932 	bl	ba0 <Sys_GetCoreID>
   1293c:	4603      	mov	r3, r0
   1293e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]--;
   12940:	4a0d      	ldr	r2, [pc, #52]	; (12978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   12942:	9b01      	ldr	r3, [sp, #4]
   12944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12948:	1e5a      	subs	r2, r3, #1
   1294a:	490b      	ldr	r1, [pc, #44]	; (12978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   1294c:	9b01      	ldr	r3, [sp, #4]
   1294e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
   12952:	4a0a      	ldr	r2, [pc, #40]	; (1297c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x48>)
   12954:	9b01      	ldr	r3, [sp, #4]
   12956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1295a:	f003 0301 	and.w	r3, r3, #1
   1295e:	2b00      	cmp	r3, #0
   12960:	d106      	bne.n	12970 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
   12962:	4a05      	ldr	r2, [pc, #20]	; (12978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   12964:	9b01      	ldr	r3, [sp, #4]
   12966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1296a:	2b00      	cmp	r3, #0
   1296c:	d100      	bne.n	12970 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1296e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12970:	bf00      	nop
   12972:	b003      	add	sp, #12
   12974:	f85d fb04 	ldr.w	pc, [sp], #4
   12978:	1fff9598 	.word	0x1fff9598
   1297c:	1fff9594 	.word	0x1fff9594

00012980 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   12980:	b500      	push	{lr}
   12982:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12984:	f7ee f90c 	bl	ba0 <Sys_GetCoreID>
   12988:	4603      	mov	r3, r0
   1298a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId])
   1298c:	4a10      	ldr	r2, [pc, #64]	; (129d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   1298e:	9b01      	ldr	r3, [sp, #4]
   12990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12994:	2b00      	cmp	r3, #0
   12996:	d10d      	bne.n	129b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12998:	f7ed ffc8 	bl	92c <Adc_schm_read_msr>
   1299c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1299e:	9b00      	ldr	r3, [sp, #0]
   129a0:	f003 0301 	and.w	r3, r3, #1
   129a4:	2b00      	cmp	r3, #0
   129a6:	d100      	bne.n	129aa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   129a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_71[u32CoreId] = msr;
   129aa:	490a      	ldr	r1, [pc, #40]	; (129d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x54>)
   129ac:	9b01      	ldr	r3, [sp, #4]
   129ae:	9a00      	ldr	r2, [sp, #0]
   129b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]++;
   129b4:	4a06      	ldr	r2, [pc, #24]	; (129d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   129b6:	9b01      	ldr	r3, [sp, #4]
   129b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129bc:	1c5a      	adds	r2, r3, #1
   129be:	4904      	ldr	r1, [pc, #16]	; (129d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   129c0:	9b01      	ldr	r3, [sp, #4]
   129c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   129c6:	bf00      	nop
   129c8:	b003      	add	sp, #12
   129ca:	f85d fb04 	ldr.w	pc, [sp], #4
   129ce:	bf00      	nop
   129d0:	1fff95a0 	.word	0x1fff95a0
   129d4:	1fff959c 	.word	0x1fff959c

000129d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   129d8:	b500      	push	{lr}
   129da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   129dc:	f7ee f8e0 	bl	ba0 <Sys_GetCoreID>
   129e0:	4603      	mov	r3, r0
   129e2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]--;
   129e4:	4a0d      	ldr	r2, [pc, #52]	; (12a1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   129e6:	9b01      	ldr	r3, [sp, #4]
   129e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129ec:	1e5a      	subs	r2, r3, #1
   129ee:	490b      	ldr	r1, [pc, #44]	; (12a1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   129f0:	9b01      	ldr	r3, [sp, #4]
   129f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
   129f6:	4a0a      	ldr	r2, [pc, #40]	; (12a20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x48>)
   129f8:	9b01      	ldr	r3, [sp, #4]
   129fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129fe:	f003 0301 	and.w	r3, r3, #1
   12a02:	2b00      	cmp	r3, #0
   12a04:	d106      	bne.n	12a14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
   12a06:	4a05      	ldr	r2, [pc, #20]	; (12a1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   12a08:	9b01      	ldr	r3, [sp, #4]
   12a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a0e:	2b00      	cmp	r3, #0
   12a10:	d100      	bne.n	12a14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12a12:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12a14:	bf00      	nop
   12a16:	b003      	add	sp, #12
   12a18:	f85d fb04 	ldr.w	pc, [sp], #4
   12a1c:	1fff95a0 	.word	0x1fff95a0
   12a20:	1fff959c 	.word	0x1fff959c

00012a24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   12a24:	b500      	push	{lr}
   12a26:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a28:	f7ee f8ba 	bl	ba0 <Sys_GetCoreID>
   12a2c:	4603      	mov	r3, r0
   12a2e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId])
   12a30:	4a10      	ldr	r2, [pc, #64]	; (12a74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   12a32:	9b01      	ldr	r3, [sp, #4]
   12a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a38:	2b00      	cmp	r3, #0
   12a3a:	d10d      	bne.n	12a58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12a3c:	f7ed ff76 	bl	92c <Adc_schm_read_msr>
   12a40:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12a42:	9b00      	ldr	r3, [sp, #0]
   12a44:	f003 0301 	and.w	r3, r3, #1
   12a48:	2b00      	cmp	r3, #0
   12a4a:	d100      	bne.n	12a4e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12a4c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_72[u32CoreId] = msr;
   12a4e:	490a      	ldr	r1, [pc, #40]	; (12a78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x54>)
   12a50:	9b01      	ldr	r3, [sp, #4]
   12a52:	9a00      	ldr	r2, [sp, #0]
   12a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]++;
   12a58:	4a06      	ldr	r2, [pc, #24]	; (12a74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   12a5a:	9b01      	ldr	r3, [sp, #4]
   12a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a60:	1c5a      	adds	r2, r3, #1
   12a62:	4904      	ldr	r1, [pc, #16]	; (12a74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   12a64:	9b01      	ldr	r3, [sp, #4]
   12a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12a6a:	bf00      	nop
   12a6c:	b003      	add	sp, #12
   12a6e:	f85d fb04 	ldr.w	pc, [sp], #4
   12a72:	bf00      	nop
   12a74:	1fff95a8 	.word	0x1fff95a8
   12a78:	1fff95a4 	.word	0x1fff95a4

00012a7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   12a7c:	b500      	push	{lr}
   12a7e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a80:	f7ee f88e 	bl	ba0 <Sys_GetCoreID>
   12a84:	4603      	mov	r3, r0
   12a86:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]--;
   12a88:	4a0d      	ldr	r2, [pc, #52]	; (12ac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   12a8a:	9b01      	ldr	r3, [sp, #4]
   12a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a90:	1e5a      	subs	r2, r3, #1
   12a92:	490b      	ldr	r1, [pc, #44]	; (12ac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   12a94:	9b01      	ldr	r3, [sp, #4]
   12a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
   12a9a:	4a0a      	ldr	r2, [pc, #40]	; (12ac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x48>)
   12a9c:	9b01      	ldr	r3, [sp, #4]
   12a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12aa2:	f003 0301 	and.w	r3, r3, #1
   12aa6:	2b00      	cmp	r3, #0
   12aa8:	d106      	bne.n	12ab8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
   12aaa:	4a05      	ldr	r2, [pc, #20]	; (12ac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   12aac:	9b01      	ldr	r3, [sp, #4]
   12aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ab2:	2b00      	cmp	r3, #0
   12ab4:	d100      	bne.n	12ab8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12ab6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12ab8:	bf00      	nop
   12aba:	b003      	add	sp, #12
   12abc:	f85d fb04 	ldr.w	pc, [sp], #4
   12ac0:	1fff95a8 	.word	0x1fff95a8
   12ac4:	1fff95a4 	.word	0x1fff95a4

00012ac8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   12ac8:	b500      	push	{lr}
   12aca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12acc:	f7ee f868 	bl	ba0 <Sys_GetCoreID>
   12ad0:	4603      	mov	r3, r0
   12ad2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId])
   12ad4:	4a10      	ldr	r2, [pc, #64]	; (12b18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   12ad6:	9b01      	ldr	r3, [sp, #4]
   12ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12adc:	2b00      	cmp	r3, #0
   12ade:	d10d      	bne.n	12afc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12ae0:	f7ed ff24 	bl	92c <Adc_schm_read_msr>
   12ae4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12ae6:	9b00      	ldr	r3, [sp, #0]
   12ae8:	f003 0301 	and.w	r3, r3, #1
   12aec:	2b00      	cmp	r3, #0
   12aee:	d100      	bne.n	12af2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12af0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_73[u32CoreId] = msr;
   12af2:	490a      	ldr	r1, [pc, #40]	; (12b1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x54>)
   12af4:	9b01      	ldr	r3, [sp, #4]
   12af6:	9a00      	ldr	r2, [sp, #0]
   12af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]++;
   12afc:	4a06      	ldr	r2, [pc, #24]	; (12b18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   12afe:	9b01      	ldr	r3, [sp, #4]
   12b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b04:	1c5a      	adds	r2, r3, #1
   12b06:	4904      	ldr	r1, [pc, #16]	; (12b18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   12b08:	9b01      	ldr	r3, [sp, #4]
   12b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12b0e:	bf00      	nop
   12b10:	b003      	add	sp, #12
   12b12:	f85d fb04 	ldr.w	pc, [sp], #4
   12b16:	bf00      	nop
   12b18:	1fff95b0 	.word	0x1fff95b0
   12b1c:	1fff95ac 	.word	0x1fff95ac

00012b20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   12b20:	b500      	push	{lr}
   12b22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b24:	f7ee f83c 	bl	ba0 <Sys_GetCoreID>
   12b28:	4603      	mov	r3, r0
   12b2a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]--;
   12b2c:	4a0d      	ldr	r2, [pc, #52]	; (12b64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   12b2e:	9b01      	ldr	r3, [sp, #4]
   12b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b34:	1e5a      	subs	r2, r3, #1
   12b36:	490b      	ldr	r1, [pc, #44]	; (12b64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   12b38:	9b01      	ldr	r3, [sp, #4]
   12b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
   12b3e:	4a0a      	ldr	r2, [pc, #40]	; (12b68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x48>)
   12b40:	9b01      	ldr	r3, [sp, #4]
   12b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b46:	f003 0301 	and.w	r3, r3, #1
   12b4a:	2b00      	cmp	r3, #0
   12b4c:	d106      	bne.n	12b5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
   12b4e:	4a05      	ldr	r2, [pc, #20]	; (12b64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   12b50:	9b01      	ldr	r3, [sp, #4]
   12b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b56:	2b00      	cmp	r3, #0
   12b58:	d100      	bne.n	12b5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12b5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12b5c:	bf00      	nop
   12b5e:	b003      	add	sp, #12
   12b60:	f85d fb04 	ldr.w	pc, [sp], #4
   12b64:	1fff95b0 	.word	0x1fff95b0
   12b68:	1fff95ac 	.word	0x1fff95ac

00012b6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   12b6c:	b500      	push	{lr}
   12b6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b70:	f7ee f816 	bl	ba0 <Sys_GetCoreID>
   12b74:	4603      	mov	r3, r0
   12b76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId])
   12b78:	4a10      	ldr	r2, [pc, #64]	; (12bbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   12b7a:	9b01      	ldr	r3, [sp, #4]
   12b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b80:	2b00      	cmp	r3, #0
   12b82:	d10d      	bne.n	12ba0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12b84:	f7ed fed2 	bl	92c <Adc_schm_read_msr>
   12b88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12b8a:	9b00      	ldr	r3, [sp, #0]
   12b8c:	f003 0301 	and.w	r3, r3, #1
   12b90:	2b00      	cmp	r3, #0
   12b92:	d100      	bne.n	12b96 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12b94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_74[u32CoreId] = msr;
   12b96:	490a      	ldr	r1, [pc, #40]	; (12bc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x54>)
   12b98:	9b01      	ldr	r3, [sp, #4]
   12b9a:	9a00      	ldr	r2, [sp, #0]
   12b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]++;
   12ba0:	4a06      	ldr	r2, [pc, #24]	; (12bbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   12ba2:	9b01      	ldr	r3, [sp, #4]
   12ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ba8:	1c5a      	adds	r2, r3, #1
   12baa:	4904      	ldr	r1, [pc, #16]	; (12bbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   12bac:	9b01      	ldr	r3, [sp, #4]
   12bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12bb2:	bf00      	nop
   12bb4:	b003      	add	sp, #12
   12bb6:	f85d fb04 	ldr.w	pc, [sp], #4
   12bba:	bf00      	nop
   12bbc:	1fff95b8 	.word	0x1fff95b8
   12bc0:	1fff95b4 	.word	0x1fff95b4

00012bc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   12bc4:	b500      	push	{lr}
   12bc6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12bc8:	f7ed ffea 	bl	ba0 <Sys_GetCoreID>
   12bcc:	4603      	mov	r3, r0
   12bce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]--;
   12bd0:	4a0d      	ldr	r2, [pc, #52]	; (12c08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   12bd2:	9b01      	ldr	r3, [sp, #4]
   12bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bd8:	1e5a      	subs	r2, r3, #1
   12bda:	490b      	ldr	r1, [pc, #44]	; (12c08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   12bdc:	9b01      	ldr	r3, [sp, #4]
   12bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_74[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]))         /*if interrupts were enabled*/
   12be2:	4a0a      	ldr	r2, [pc, #40]	; (12c0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x48>)
   12be4:	9b01      	ldr	r3, [sp, #4]
   12be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bea:	f003 0301 	and.w	r3, r3, #1
   12bee:	2b00      	cmp	r3, #0
   12bf0:	d106      	bne.n	12c00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
   12bf2:	4a05      	ldr	r2, [pc, #20]	; (12c08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   12bf4:	9b01      	ldr	r3, [sp, #4]
   12bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bfa:	2b00      	cmp	r3, #0
   12bfc:	d100      	bne.n	12c00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12bfe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12c00:	bf00      	nop
   12c02:	b003      	add	sp, #12
   12c04:	f85d fb04 	ldr.w	pc, [sp], #4
   12c08:	1fff95b8 	.word	0x1fff95b8
   12c0c:	1fff95b4 	.word	0x1fff95b4

00012c10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   12c10:	b500      	push	{lr}
   12c12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c14:	f7ed ffc4 	bl	ba0 <Sys_GetCoreID>
   12c18:	4603      	mov	r3, r0
   12c1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId])
   12c1c:	4a10      	ldr	r2, [pc, #64]	; (12c60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   12c1e:	9b01      	ldr	r3, [sp, #4]
   12c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c24:	2b00      	cmp	r3, #0
   12c26:	d10d      	bne.n	12c44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12c28:	f7ed fe80 	bl	92c <Adc_schm_read_msr>
   12c2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12c2e:	9b00      	ldr	r3, [sp, #0]
   12c30:	f003 0301 	and.w	r3, r3, #1
   12c34:	2b00      	cmp	r3, #0
   12c36:	d100      	bne.n	12c3a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12c38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_75[u32CoreId] = msr;
   12c3a:	490a      	ldr	r1, [pc, #40]	; (12c64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x54>)
   12c3c:	9b01      	ldr	r3, [sp, #4]
   12c3e:	9a00      	ldr	r2, [sp, #0]
   12c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]++;
   12c44:	4a06      	ldr	r2, [pc, #24]	; (12c60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   12c46:	9b01      	ldr	r3, [sp, #4]
   12c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c4c:	1c5a      	adds	r2, r3, #1
   12c4e:	4904      	ldr	r1, [pc, #16]	; (12c60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   12c50:	9b01      	ldr	r3, [sp, #4]
   12c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12c56:	bf00      	nop
   12c58:	b003      	add	sp, #12
   12c5a:	f85d fb04 	ldr.w	pc, [sp], #4
   12c5e:	bf00      	nop
   12c60:	1fff95c0 	.word	0x1fff95c0
   12c64:	1fff95bc 	.word	0x1fff95bc

00012c68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   12c68:	b500      	push	{lr}
   12c6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c6c:	f7ed ff98 	bl	ba0 <Sys_GetCoreID>
   12c70:	4603      	mov	r3, r0
   12c72:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]--;
   12c74:	4a0d      	ldr	r2, [pc, #52]	; (12cac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   12c76:	9b01      	ldr	r3, [sp, #4]
   12c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c7c:	1e5a      	subs	r2, r3, #1
   12c7e:	490b      	ldr	r1, [pc, #44]	; (12cac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   12c80:	9b01      	ldr	r3, [sp, #4]
   12c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_75[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]))         /*if interrupts were enabled*/
   12c86:	4a0a      	ldr	r2, [pc, #40]	; (12cb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x48>)
   12c88:	9b01      	ldr	r3, [sp, #4]
   12c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c8e:	f003 0301 	and.w	r3, r3, #1
   12c92:	2b00      	cmp	r3, #0
   12c94:	d106      	bne.n	12ca4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
   12c96:	4a05      	ldr	r2, [pc, #20]	; (12cac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   12c98:	9b01      	ldr	r3, [sp, #4]
   12c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c9e:	2b00      	cmp	r3, #0
   12ca0:	d100      	bne.n	12ca4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12ca2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12ca4:	bf00      	nop
   12ca6:	b003      	add	sp, #12
   12ca8:	f85d fb04 	ldr.w	pc, [sp], #4
   12cac:	1fff95c0 	.word	0x1fff95c0
   12cb0:	1fff95bc 	.word	0x1fff95bc

00012cb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   12cb4:	b500      	push	{lr}
   12cb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12cb8:	f7ed ff72 	bl	ba0 <Sys_GetCoreID>
   12cbc:	4603      	mov	r3, r0
   12cbe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId])
   12cc0:	4a10      	ldr	r2, [pc, #64]	; (12d04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   12cc2:	9b01      	ldr	r3, [sp, #4]
   12cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cc8:	2b00      	cmp	r3, #0
   12cca:	d10d      	bne.n	12ce8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12ccc:	f7ed fe2e 	bl	92c <Adc_schm_read_msr>
   12cd0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12cd2:	9b00      	ldr	r3, [sp, #0]
   12cd4:	f003 0301 	and.w	r3, r3, #1
   12cd8:	2b00      	cmp	r3, #0
   12cda:	d100      	bne.n	12cde <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12cdc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_76[u32CoreId] = msr;
   12cde:	490a      	ldr	r1, [pc, #40]	; (12d08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x54>)
   12ce0:	9b01      	ldr	r3, [sp, #4]
   12ce2:	9a00      	ldr	r2, [sp, #0]
   12ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]++;
   12ce8:	4a06      	ldr	r2, [pc, #24]	; (12d04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   12cea:	9b01      	ldr	r3, [sp, #4]
   12cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cf0:	1c5a      	adds	r2, r3, #1
   12cf2:	4904      	ldr	r1, [pc, #16]	; (12d04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   12cf4:	9b01      	ldr	r3, [sp, #4]
   12cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12cfa:	bf00      	nop
   12cfc:	b003      	add	sp, #12
   12cfe:	f85d fb04 	ldr.w	pc, [sp], #4
   12d02:	bf00      	nop
   12d04:	1fff95c8 	.word	0x1fff95c8
   12d08:	1fff95c4 	.word	0x1fff95c4

00012d0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   12d0c:	b500      	push	{lr}
   12d0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d10:	f7ed ff46 	bl	ba0 <Sys_GetCoreID>
   12d14:	4603      	mov	r3, r0
   12d16:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]--;
   12d18:	4a0d      	ldr	r2, [pc, #52]	; (12d50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   12d1a:	9b01      	ldr	r3, [sp, #4]
   12d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d20:	1e5a      	subs	r2, r3, #1
   12d22:	490b      	ldr	r1, [pc, #44]	; (12d50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   12d24:	9b01      	ldr	r3, [sp, #4]
   12d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_76[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]))         /*if interrupts were enabled*/
   12d2a:	4a0a      	ldr	r2, [pc, #40]	; (12d54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x48>)
   12d2c:	9b01      	ldr	r3, [sp, #4]
   12d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d32:	f003 0301 	and.w	r3, r3, #1
   12d36:	2b00      	cmp	r3, #0
   12d38:	d106      	bne.n	12d48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
   12d3a:	4a05      	ldr	r2, [pc, #20]	; (12d50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   12d3c:	9b01      	ldr	r3, [sp, #4]
   12d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d42:	2b00      	cmp	r3, #0
   12d44:	d100      	bne.n	12d48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12d46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12d48:	bf00      	nop
   12d4a:	b003      	add	sp, #12
   12d4c:	f85d fb04 	ldr.w	pc, [sp], #4
   12d50:	1fff95c8 	.word	0x1fff95c8
   12d54:	1fff95c4 	.word	0x1fff95c4

00012d58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   12d58:	b500      	push	{lr}
   12d5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d5c:	f7ed ff20 	bl	ba0 <Sys_GetCoreID>
   12d60:	4603      	mov	r3, r0
   12d62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId])
   12d64:	4a10      	ldr	r2, [pc, #64]	; (12da8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   12d66:	9b01      	ldr	r3, [sp, #4]
   12d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d6c:	2b00      	cmp	r3, #0
   12d6e:	d10d      	bne.n	12d8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12d70:	f7ed fddc 	bl	92c <Adc_schm_read_msr>
   12d74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12d76:	9b00      	ldr	r3, [sp, #0]
   12d78:	f003 0301 	and.w	r3, r3, #1
   12d7c:	2b00      	cmp	r3, #0
   12d7e:	d100      	bne.n	12d82 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12d80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_77[u32CoreId] = msr;
   12d82:	490a      	ldr	r1, [pc, #40]	; (12dac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x54>)
   12d84:	9b01      	ldr	r3, [sp, #4]
   12d86:	9a00      	ldr	r2, [sp, #0]
   12d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]++;
   12d8c:	4a06      	ldr	r2, [pc, #24]	; (12da8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   12d8e:	9b01      	ldr	r3, [sp, #4]
   12d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d94:	1c5a      	adds	r2, r3, #1
   12d96:	4904      	ldr	r1, [pc, #16]	; (12da8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   12d98:	9b01      	ldr	r3, [sp, #4]
   12d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12d9e:	bf00      	nop
   12da0:	b003      	add	sp, #12
   12da2:	f85d fb04 	ldr.w	pc, [sp], #4
   12da6:	bf00      	nop
   12da8:	1fff95d0 	.word	0x1fff95d0
   12dac:	1fff95cc 	.word	0x1fff95cc

00012db0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   12db0:	b500      	push	{lr}
   12db2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12db4:	f7ed fef4 	bl	ba0 <Sys_GetCoreID>
   12db8:	4603      	mov	r3, r0
   12dba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]--;
   12dbc:	4a0d      	ldr	r2, [pc, #52]	; (12df4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   12dbe:	9b01      	ldr	r3, [sp, #4]
   12dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12dc4:	1e5a      	subs	r2, r3, #1
   12dc6:	490b      	ldr	r1, [pc, #44]	; (12df4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   12dc8:	9b01      	ldr	r3, [sp, #4]
   12dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_77[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]))         /*if interrupts were enabled*/
   12dce:	4a0a      	ldr	r2, [pc, #40]	; (12df8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x48>)
   12dd0:	9b01      	ldr	r3, [sp, #4]
   12dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12dd6:	f003 0301 	and.w	r3, r3, #1
   12dda:	2b00      	cmp	r3, #0
   12ddc:	d106      	bne.n	12dec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
   12dde:	4a05      	ldr	r2, [pc, #20]	; (12df4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   12de0:	9b01      	ldr	r3, [sp, #4]
   12de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12de6:	2b00      	cmp	r3, #0
   12de8:	d100      	bne.n	12dec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12dea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12dec:	bf00      	nop
   12dee:	b003      	add	sp, #12
   12df0:	f85d fb04 	ldr.w	pc, [sp], #4
   12df4:	1fff95d0 	.word	0x1fff95d0
   12df8:	1fff95cc 	.word	0x1fff95cc

00012dfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   12dfc:	b500      	push	{lr}
   12dfe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e00:	f7ed fece 	bl	ba0 <Sys_GetCoreID>
   12e04:	4603      	mov	r3, r0
   12e06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId])
   12e08:	4a10      	ldr	r2, [pc, #64]	; (12e4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   12e0a:	9b01      	ldr	r3, [sp, #4]
   12e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e10:	2b00      	cmp	r3, #0
   12e12:	d10d      	bne.n	12e30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12e14:	f7ed fd8a 	bl	92c <Adc_schm_read_msr>
   12e18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12e1a:	9b00      	ldr	r3, [sp, #0]
   12e1c:	f003 0301 	and.w	r3, r3, #1
   12e20:	2b00      	cmp	r3, #0
   12e22:	d100      	bne.n	12e26 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12e24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_78[u32CoreId] = msr;
   12e26:	490a      	ldr	r1, [pc, #40]	; (12e50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x54>)
   12e28:	9b01      	ldr	r3, [sp, #4]
   12e2a:	9a00      	ldr	r2, [sp, #0]
   12e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]++;
   12e30:	4a06      	ldr	r2, [pc, #24]	; (12e4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   12e32:	9b01      	ldr	r3, [sp, #4]
   12e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e38:	1c5a      	adds	r2, r3, #1
   12e3a:	4904      	ldr	r1, [pc, #16]	; (12e4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   12e3c:	9b01      	ldr	r3, [sp, #4]
   12e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12e42:	bf00      	nop
   12e44:	b003      	add	sp, #12
   12e46:	f85d fb04 	ldr.w	pc, [sp], #4
   12e4a:	bf00      	nop
   12e4c:	1fff95d8 	.word	0x1fff95d8
   12e50:	1fff95d4 	.word	0x1fff95d4

00012e54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   12e54:	b500      	push	{lr}
   12e56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e58:	f7ed fea2 	bl	ba0 <Sys_GetCoreID>
   12e5c:	4603      	mov	r3, r0
   12e5e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]--;
   12e60:	4a0d      	ldr	r2, [pc, #52]	; (12e98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   12e62:	9b01      	ldr	r3, [sp, #4]
   12e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e68:	1e5a      	subs	r2, r3, #1
   12e6a:	490b      	ldr	r1, [pc, #44]	; (12e98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   12e6c:	9b01      	ldr	r3, [sp, #4]
   12e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_78[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]))         /*if interrupts were enabled*/
   12e72:	4a0a      	ldr	r2, [pc, #40]	; (12e9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x48>)
   12e74:	9b01      	ldr	r3, [sp, #4]
   12e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e7a:	f003 0301 	and.w	r3, r3, #1
   12e7e:	2b00      	cmp	r3, #0
   12e80:	d106      	bne.n	12e90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
   12e82:	4a05      	ldr	r2, [pc, #20]	; (12e98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   12e84:	9b01      	ldr	r3, [sp, #4]
   12e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e8a:	2b00      	cmp	r3, #0
   12e8c:	d100      	bne.n	12e90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12e8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12e90:	bf00      	nop
   12e92:	b003      	add	sp, #12
   12e94:	f85d fb04 	ldr.w	pc, [sp], #4
   12e98:	1fff95d8 	.word	0x1fff95d8
   12e9c:	1fff95d4 	.word	0x1fff95d4

00012ea0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   12ea0:	b500      	push	{lr}
   12ea2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ea4:	f7ed fe7c 	bl	ba0 <Sys_GetCoreID>
   12ea8:	4603      	mov	r3, r0
   12eaa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId])
   12eac:	4a10      	ldr	r2, [pc, #64]	; (12ef0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   12eae:	9b01      	ldr	r3, [sp, #4]
   12eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12eb4:	2b00      	cmp	r3, #0
   12eb6:	d10d      	bne.n	12ed4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12eb8:	f7ed fd38 	bl	92c <Adc_schm_read_msr>
   12ebc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12ebe:	9b00      	ldr	r3, [sp, #0]
   12ec0:	f003 0301 	and.w	r3, r3, #1
   12ec4:	2b00      	cmp	r3, #0
   12ec6:	d100      	bne.n	12eca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12ec8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_79[u32CoreId] = msr;
   12eca:	490a      	ldr	r1, [pc, #40]	; (12ef4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x54>)
   12ecc:	9b01      	ldr	r3, [sp, #4]
   12ece:	9a00      	ldr	r2, [sp, #0]
   12ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]++;
   12ed4:	4a06      	ldr	r2, [pc, #24]	; (12ef0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   12ed6:	9b01      	ldr	r3, [sp, #4]
   12ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12edc:	1c5a      	adds	r2, r3, #1
   12ede:	4904      	ldr	r1, [pc, #16]	; (12ef0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   12ee0:	9b01      	ldr	r3, [sp, #4]
   12ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12ee6:	bf00      	nop
   12ee8:	b003      	add	sp, #12
   12eea:	f85d fb04 	ldr.w	pc, [sp], #4
   12eee:	bf00      	nop
   12ef0:	1fff95e0 	.word	0x1fff95e0
   12ef4:	1fff95dc 	.word	0x1fff95dc

00012ef8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   12ef8:	b500      	push	{lr}
   12efa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12efc:	f7ed fe50 	bl	ba0 <Sys_GetCoreID>
   12f00:	4603      	mov	r3, r0
   12f02:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]--;
   12f04:	4a0d      	ldr	r2, [pc, #52]	; (12f3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   12f06:	9b01      	ldr	r3, [sp, #4]
   12f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f0c:	1e5a      	subs	r2, r3, #1
   12f0e:	490b      	ldr	r1, [pc, #44]	; (12f3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   12f10:	9b01      	ldr	r3, [sp, #4]
   12f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_79[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]))         /*if interrupts were enabled*/
   12f16:	4a0a      	ldr	r2, [pc, #40]	; (12f40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x48>)
   12f18:	9b01      	ldr	r3, [sp, #4]
   12f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f1e:	f003 0301 	and.w	r3, r3, #1
   12f22:	2b00      	cmp	r3, #0
   12f24:	d106      	bne.n	12f34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
   12f26:	4a05      	ldr	r2, [pc, #20]	; (12f3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   12f28:	9b01      	ldr	r3, [sp, #4]
   12f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f2e:	2b00      	cmp	r3, #0
   12f30:	d100      	bne.n	12f34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12f32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12f34:	bf00      	nop
   12f36:	b003      	add	sp, #12
   12f38:	f85d fb04 	ldr.w	pc, [sp], #4
   12f3c:	1fff95e0 	.word	0x1fff95e0
   12f40:	1fff95dc 	.word	0x1fff95dc

00012f44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   12f44:	b500      	push	{lr}
   12f46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f48:	f7ed fe2a 	bl	ba0 <Sys_GetCoreID>
   12f4c:	4603      	mov	r3, r0
   12f4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId])
   12f50:	4a10      	ldr	r2, [pc, #64]	; (12f94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   12f52:	9b01      	ldr	r3, [sp, #4]
   12f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f58:	2b00      	cmp	r3, #0
   12f5a:	d10d      	bne.n	12f78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12f5c:	f7ed fce6 	bl	92c <Adc_schm_read_msr>
   12f60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12f62:	9b00      	ldr	r3, [sp, #0]
   12f64:	f003 0301 	and.w	r3, r3, #1
   12f68:	2b00      	cmp	r3, #0
   12f6a:	d100      	bne.n	12f6e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12f6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_80[u32CoreId] = msr;
   12f6e:	490a      	ldr	r1, [pc, #40]	; (12f98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x54>)
   12f70:	9b01      	ldr	r3, [sp, #4]
   12f72:	9a00      	ldr	r2, [sp, #0]
   12f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]++;
   12f78:	4a06      	ldr	r2, [pc, #24]	; (12f94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   12f7a:	9b01      	ldr	r3, [sp, #4]
   12f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f80:	1c5a      	adds	r2, r3, #1
   12f82:	4904      	ldr	r1, [pc, #16]	; (12f94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   12f84:	9b01      	ldr	r3, [sp, #4]
   12f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12f8a:	bf00      	nop
   12f8c:	b003      	add	sp, #12
   12f8e:	f85d fb04 	ldr.w	pc, [sp], #4
   12f92:	bf00      	nop
   12f94:	1fff95e8 	.word	0x1fff95e8
   12f98:	1fff95e4 	.word	0x1fff95e4

00012f9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   12f9c:	b500      	push	{lr}
   12f9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12fa0:	f7ed fdfe 	bl	ba0 <Sys_GetCoreID>
   12fa4:	4603      	mov	r3, r0
   12fa6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]--;
   12fa8:	4a0d      	ldr	r2, [pc, #52]	; (12fe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   12faa:	9b01      	ldr	r3, [sp, #4]
   12fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fb0:	1e5a      	subs	r2, r3, #1
   12fb2:	490b      	ldr	r1, [pc, #44]	; (12fe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   12fb4:	9b01      	ldr	r3, [sp, #4]
   12fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_80[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]))         /*if interrupts were enabled*/
   12fba:	4a0a      	ldr	r2, [pc, #40]	; (12fe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x48>)
   12fbc:	9b01      	ldr	r3, [sp, #4]
   12fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fc2:	f003 0301 	and.w	r3, r3, #1
   12fc6:	2b00      	cmp	r3, #0
   12fc8:	d106      	bne.n	12fd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
   12fca:	4a05      	ldr	r2, [pc, #20]	; (12fe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   12fcc:	9b01      	ldr	r3, [sp, #4]
   12fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fd2:	2b00      	cmp	r3, #0
   12fd4:	d100      	bne.n	12fd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12fd6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12fd8:	bf00      	nop
   12fda:	b003      	add	sp, #12
   12fdc:	f85d fb04 	ldr.w	pc, [sp], #4
   12fe0:	1fff95e8 	.word	0x1fff95e8
   12fe4:	1fff95e4 	.word	0x1fff95e4

00012fe8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   12fe8:	b500      	push	{lr}
   12fea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12fec:	f7ed fdd8 	bl	ba0 <Sys_GetCoreID>
   12ff0:	4603      	mov	r3, r0
   12ff2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId])
   12ff4:	4a10      	ldr	r2, [pc, #64]	; (13038 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   12ff6:	9b01      	ldr	r3, [sp, #4]
   12ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ffc:	2b00      	cmp	r3, #0
   12ffe:	d10d      	bne.n	1301c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13000:	f7ed fc94 	bl	92c <Adc_schm_read_msr>
   13004:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13006:	9b00      	ldr	r3, [sp, #0]
   13008:	f003 0301 	and.w	r3, r3, #1
   1300c:	2b00      	cmp	r3, #0
   1300e:	d100      	bne.n	13012 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13010:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_81[u32CoreId] = msr;
   13012:	490a      	ldr	r1, [pc, #40]	; (1303c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x54>)
   13014:	9b01      	ldr	r3, [sp, #4]
   13016:	9a00      	ldr	r2, [sp, #0]
   13018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]++;
   1301c:	4a06      	ldr	r2, [pc, #24]	; (13038 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   1301e:	9b01      	ldr	r3, [sp, #4]
   13020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13024:	1c5a      	adds	r2, r3, #1
   13026:	4904      	ldr	r1, [pc, #16]	; (13038 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   13028:	9b01      	ldr	r3, [sp, #4]
   1302a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1302e:	bf00      	nop
   13030:	b003      	add	sp, #12
   13032:	f85d fb04 	ldr.w	pc, [sp], #4
   13036:	bf00      	nop
   13038:	1fff95f0 	.word	0x1fff95f0
   1303c:	1fff95ec 	.word	0x1fff95ec

00013040 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   13040:	b500      	push	{lr}
   13042:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13044:	f7ed fdac 	bl	ba0 <Sys_GetCoreID>
   13048:	4603      	mov	r3, r0
   1304a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]--;
   1304c:	4a0d      	ldr	r2, [pc, #52]	; (13084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   1304e:	9b01      	ldr	r3, [sp, #4]
   13050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13054:	1e5a      	subs	r2, r3, #1
   13056:	490b      	ldr	r1, [pc, #44]	; (13084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   13058:	9b01      	ldr	r3, [sp, #4]
   1305a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_81[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]))         /*if interrupts were enabled*/
   1305e:	4a0a      	ldr	r2, [pc, #40]	; (13088 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x48>)
   13060:	9b01      	ldr	r3, [sp, #4]
   13062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13066:	f003 0301 	and.w	r3, r3, #1
   1306a:	2b00      	cmp	r3, #0
   1306c:	d106      	bne.n	1307c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
   1306e:	4a05      	ldr	r2, [pc, #20]	; (13084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   13070:	9b01      	ldr	r3, [sp, #4]
   13072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13076:	2b00      	cmp	r3, #0
   13078:	d100      	bne.n	1307c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1307a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1307c:	bf00      	nop
   1307e:	b003      	add	sp, #12
   13080:	f85d fb04 	ldr.w	pc, [sp], #4
   13084:	1fff95f0 	.word	0x1fff95f0
   13088:	1fff95ec 	.word	0x1fff95ec

0001308c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   1308c:	b500      	push	{lr}
   1308e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13090:	f7ed fd86 	bl	ba0 <Sys_GetCoreID>
   13094:	4603      	mov	r3, r0
   13096:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId])
   13098:	4a10      	ldr	r2, [pc, #64]	; (130dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   1309a:	9b01      	ldr	r3, [sp, #4]
   1309c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130a0:	2b00      	cmp	r3, #0
   130a2:	d10d      	bne.n	130c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   130a4:	f7ed fc42 	bl	92c <Adc_schm_read_msr>
   130a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   130aa:	9b00      	ldr	r3, [sp, #0]
   130ac:	f003 0301 	and.w	r3, r3, #1
   130b0:	2b00      	cmp	r3, #0
   130b2:	d100      	bne.n	130b6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   130b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_82[u32CoreId] = msr;
   130b6:	490a      	ldr	r1, [pc, #40]	; (130e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x54>)
   130b8:	9b01      	ldr	r3, [sp, #4]
   130ba:	9a00      	ldr	r2, [sp, #0]
   130bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]++;
   130c0:	4a06      	ldr	r2, [pc, #24]	; (130dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   130c2:	9b01      	ldr	r3, [sp, #4]
   130c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130c8:	1c5a      	adds	r2, r3, #1
   130ca:	4904      	ldr	r1, [pc, #16]	; (130dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   130cc:	9b01      	ldr	r3, [sp, #4]
   130ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   130d2:	bf00      	nop
   130d4:	b003      	add	sp, #12
   130d6:	f85d fb04 	ldr.w	pc, [sp], #4
   130da:	bf00      	nop
   130dc:	1fff95f8 	.word	0x1fff95f8
   130e0:	1fff95f4 	.word	0x1fff95f4

000130e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   130e4:	b500      	push	{lr}
   130e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   130e8:	f7ed fd5a 	bl	ba0 <Sys_GetCoreID>
   130ec:	4603      	mov	r3, r0
   130ee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]--;
   130f0:	4a0d      	ldr	r2, [pc, #52]	; (13128 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   130f2:	9b01      	ldr	r3, [sp, #4]
   130f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130f8:	1e5a      	subs	r2, r3, #1
   130fa:	490b      	ldr	r1, [pc, #44]	; (13128 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   130fc:	9b01      	ldr	r3, [sp, #4]
   130fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_82[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]))         /*if interrupts were enabled*/
   13102:	4a0a      	ldr	r2, [pc, #40]	; (1312c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x48>)
   13104:	9b01      	ldr	r3, [sp, #4]
   13106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1310a:	f003 0301 	and.w	r3, r3, #1
   1310e:	2b00      	cmp	r3, #0
   13110:	d106      	bne.n	13120 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
   13112:	4a05      	ldr	r2, [pc, #20]	; (13128 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   13114:	9b01      	ldr	r3, [sp, #4]
   13116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1311a:	2b00      	cmp	r3, #0
   1311c:	d100      	bne.n	13120 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1311e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13120:	bf00      	nop
   13122:	b003      	add	sp, #12
   13124:	f85d fb04 	ldr.w	pc, [sp], #4
   13128:	1fff95f8 	.word	0x1fff95f8
   1312c:	1fff95f4 	.word	0x1fff95f4

00013130 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   13130:	b500      	push	{lr}
   13132:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13134:	f7ed fd34 	bl	ba0 <Sys_GetCoreID>
   13138:	4603      	mov	r3, r0
   1313a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId])
   1313c:	4a10      	ldr	r2, [pc, #64]	; (13180 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   1313e:	9b01      	ldr	r3, [sp, #4]
   13140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13144:	2b00      	cmp	r3, #0
   13146:	d10d      	bne.n	13164 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13148:	f7ed fbf0 	bl	92c <Adc_schm_read_msr>
   1314c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1314e:	9b00      	ldr	r3, [sp, #0]
   13150:	f003 0301 	and.w	r3, r3, #1
   13154:	2b00      	cmp	r3, #0
   13156:	d100      	bne.n	1315a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13158:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_83[u32CoreId] = msr;
   1315a:	490a      	ldr	r1, [pc, #40]	; (13184 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x54>)
   1315c:	9b01      	ldr	r3, [sp, #4]
   1315e:	9a00      	ldr	r2, [sp, #0]
   13160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]++;
   13164:	4a06      	ldr	r2, [pc, #24]	; (13180 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   13166:	9b01      	ldr	r3, [sp, #4]
   13168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1316c:	1c5a      	adds	r2, r3, #1
   1316e:	4904      	ldr	r1, [pc, #16]	; (13180 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   13170:	9b01      	ldr	r3, [sp, #4]
   13172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13176:	bf00      	nop
   13178:	b003      	add	sp, #12
   1317a:	f85d fb04 	ldr.w	pc, [sp], #4
   1317e:	bf00      	nop
   13180:	1fff9600 	.word	0x1fff9600
   13184:	1fff95fc 	.word	0x1fff95fc

00013188 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   13188:	b500      	push	{lr}
   1318a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1318c:	f7ed fd08 	bl	ba0 <Sys_GetCoreID>
   13190:	4603      	mov	r3, r0
   13192:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]--;
   13194:	4a0d      	ldr	r2, [pc, #52]	; (131cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   13196:	9b01      	ldr	r3, [sp, #4]
   13198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1319c:	1e5a      	subs	r2, r3, #1
   1319e:	490b      	ldr	r1, [pc, #44]	; (131cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   131a0:	9b01      	ldr	r3, [sp, #4]
   131a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_83[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]))         /*if interrupts were enabled*/
   131a6:	4a0a      	ldr	r2, [pc, #40]	; (131d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x48>)
   131a8:	9b01      	ldr	r3, [sp, #4]
   131aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131ae:	f003 0301 	and.w	r3, r3, #1
   131b2:	2b00      	cmp	r3, #0
   131b4:	d106      	bne.n	131c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
   131b6:	4a05      	ldr	r2, [pc, #20]	; (131cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   131b8:	9b01      	ldr	r3, [sp, #4]
   131ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131be:	2b00      	cmp	r3, #0
   131c0:	d100      	bne.n	131c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   131c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   131c4:	bf00      	nop
   131c6:	b003      	add	sp, #12
   131c8:	f85d fb04 	ldr.w	pc, [sp], #4
   131cc:	1fff9600 	.word	0x1fff9600
   131d0:	1fff95fc 	.word	0x1fff95fc

000131d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   131d4:	b500      	push	{lr}
   131d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   131d8:	f7ed fce2 	bl	ba0 <Sys_GetCoreID>
   131dc:	4603      	mov	r3, r0
   131de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId])
   131e0:	4a10      	ldr	r2, [pc, #64]	; (13224 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   131e2:	9b01      	ldr	r3, [sp, #4]
   131e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131e8:	2b00      	cmp	r3, #0
   131ea:	d10d      	bne.n	13208 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   131ec:	f7ed fb9e 	bl	92c <Adc_schm_read_msr>
   131f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   131f2:	9b00      	ldr	r3, [sp, #0]
   131f4:	f003 0301 	and.w	r3, r3, #1
   131f8:	2b00      	cmp	r3, #0
   131fa:	d100      	bne.n	131fe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   131fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_84[u32CoreId] = msr;
   131fe:	490a      	ldr	r1, [pc, #40]	; (13228 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x54>)
   13200:	9b01      	ldr	r3, [sp, #4]
   13202:	9a00      	ldr	r2, [sp, #0]
   13204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]++;
   13208:	4a06      	ldr	r2, [pc, #24]	; (13224 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   1320a:	9b01      	ldr	r3, [sp, #4]
   1320c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13210:	1c5a      	adds	r2, r3, #1
   13212:	4904      	ldr	r1, [pc, #16]	; (13224 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   13214:	9b01      	ldr	r3, [sp, #4]
   13216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1321a:	bf00      	nop
   1321c:	b003      	add	sp, #12
   1321e:	f85d fb04 	ldr.w	pc, [sp], #4
   13222:	bf00      	nop
   13224:	1fff9608 	.word	0x1fff9608
   13228:	1fff9604 	.word	0x1fff9604

0001322c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   1322c:	b500      	push	{lr}
   1322e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13230:	f7ed fcb6 	bl	ba0 <Sys_GetCoreID>
   13234:	4603      	mov	r3, r0
   13236:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]--;
   13238:	4a0d      	ldr	r2, [pc, #52]	; (13270 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   1323a:	9b01      	ldr	r3, [sp, #4]
   1323c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13240:	1e5a      	subs	r2, r3, #1
   13242:	490b      	ldr	r1, [pc, #44]	; (13270 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   13244:	9b01      	ldr	r3, [sp, #4]
   13246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_84[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]))         /*if interrupts were enabled*/
   1324a:	4a0a      	ldr	r2, [pc, #40]	; (13274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x48>)
   1324c:	9b01      	ldr	r3, [sp, #4]
   1324e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13252:	f003 0301 	and.w	r3, r3, #1
   13256:	2b00      	cmp	r3, #0
   13258:	d106      	bne.n	13268 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
   1325a:	4a05      	ldr	r2, [pc, #20]	; (13270 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   1325c:	9b01      	ldr	r3, [sp, #4]
   1325e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13262:	2b00      	cmp	r3, #0
   13264:	d100      	bne.n	13268 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13266:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13268:	bf00      	nop
   1326a:	b003      	add	sp, #12
   1326c:	f85d fb04 	ldr.w	pc, [sp], #4
   13270:	1fff9608 	.word	0x1fff9608
   13274:	1fff9604 	.word	0x1fff9604

00013278 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   13278:	b500      	push	{lr}
   1327a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1327c:	f7ed fc90 	bl	ba0 <Sys_GetCoreID>
   13280:	4603      	mov	r3, r0
   13282:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId])
   13284:	4a10      	ldr	r2, [pc, #64]	; (132c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   13286:	9b01      	ldr	r3, [sp, #4]
   13288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1328c:	2b00      	cmp	r3, #0
   1328e:	d10d      	bne.n	132ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13290:	f7ed fb4c 	bl	92c <Adc_schm_read_msr>
   13294:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13296:	9b00      	ldr	r3, [sp, #0]
   13298:	f003 0301 	and.w	r3, r3, #1
   1329c:	2b00      	cmp	r3, #0
   1329e:	d100      	bne.n	132a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   132a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_85[u32CoreId] = msr;
   132a2:	490a      	ldr	r1, [pc, #40]	; (132cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x54>)
   132a4:	9b01      	ldr	r3, [sp, #4]
   132a6:	9a00      	ldr	r2, [sp, #0]
   132a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]++;
   132ac:	4a06      	ldr	r2, [pc, #24]	; (132c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   132ae:	9b01      	ldr	r3, [sp, #4]
   132b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132b4:	1c5a      	adds	r2, r3, #1
   132b6:	4904      	ldr	r1, [pc, #16]	; (132c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   132b8:	9b01      	ldr	r3, [sp, #4]
   132ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   132be:	bf00      	nop
   132c0:	b003      	add	sp, #12
   132c2:	f85d fb04 	ldr.w	pc, [sp], #4
   132c6:	bf00      	nop
   132c8:	1fff9610 	.word	0x1fff9610
   132cc:	1fff960c 	.word	0x1fff960c

000132d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   132d0:	b500      	push	{lr}
   132d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   132d4:	f7ed fc64 	bl	ba0 <Sys_GetCoreID>
   132d8:	4603      	mov	r3, r0
   132da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]--;
   132dc:	4a0d      	ldr	r2, [pc, #52]	; (13314 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   132de:	9b01      	ldr	r3, [sp, #4]
   132e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132e4:	1e5a      	subs	r2, r3, #1
   132e6:	490b      	ldr	r1, [pc, #44]	; (13314 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   132e8:	9b01      	ldr	r3, [sp, #4]
   132ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_85[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]))         /*if interrupts were enabled*/
   132ee:	4a0a      	ldr	r2, [pc, #40]	; (13318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x48>)
   132f0:	9b01      	ldr	r3, [sp, #4]
   132f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132f6:	f003 0301 	and.w	r3, r3, #1
   132fa:	2b00      	cmp	r3, #0
   132fc:	d106      	bne.n	1330c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
   132fe:	4a05      	ldr	r2, [pc, #20]	; (13314 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   13300:	9b01      	ldr	r3, [sp, #4]
   13302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13306:	2b00      	cmp	r3, #0
   13308:	d100      	bne.n	1330c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1330a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1330c:	bf00      	nop
   1330e:	b003      	add	sp, #12
   13310:	f85d fb04 	ldr.w	pc, [sp], #4
   13314:	1fff9610 	.word	0x1fff9610
   13318:	1fff960c 	.word	0x1fff960c

0001331c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   1331c:	b500      	push	{lr}
   1331e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13320:	f7ed fc3e 	bl	ba0 <Sys_GetCoreID>
   13324:	4603      	mov	r3, r0
   13326:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId])
   13328:	4a10      	ldr	r2, [pc, #64]	; (1336c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   1332a:	9b01      	ldr	r3, [sp, #4]
   1332c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13330:	2b00      	cmp	r3, #0
   13332:	d10d      	bne.n	13350 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13334:	f7ed fafa 	bl	92c <Adc_schm_read_msr>
   13338:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1333a:	9b00      	ldr	r3, [sp, #0]
   1333c:	f003 0301 	and.w	r3, r3, #1
   13340:	2b00      	cmp	r3, #0
   13342:	d100      	bne.n	13346 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13344:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_86[u32CoreId] = msr;
   13346:	490a      	ldr	r1, [pc, #40]	; (13370 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x54>)
   13348:	9b01      	ldr	r3, [sp, #4]
   1334a:	9a00      	ldr	r2, [sp, #0]
   1334c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]++;
   13350:	4a06      	ldr	r2, [pc, #24]	; (1336c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   13352:	9b01      	ldr	r3, [sp, #4]
   13354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13358:	1c5a      	adds	r2, r3, #1
   1335a:	4904      	ldr	r1, [pc, #16]	; (1336c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   1335c:	9b01      	ldr	r3, [sp, #4]
   1335e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13362:	bf00      	nop
   13364:	b003      	add	sp, #12
   13366:	f85d fb04 	ldr.w	pc, [sp], #4
   1336a:	bf00      	nop
   1336c:	1fff9618 	.word	0x1fff9618
   13370:	1fff9614 	.word	0x1fff9614

00013374 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   13374:	b500      	push	{lr}
   13376:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13378:	f7ed fc12 	bl	ba0 <Sys_GetCoreID>
   1337c:	4603      	mov	r3, r0
   1337e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]--;
   13380:	4a0d      	ldr	r2, [pc, #52]	; (133b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   13382:	9b01      	ldr	r3, [sp, #4]
   13384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13388:	1e5a      	subs	r2, r3, #1
   1338a:	490b      	ldr	r1, [pc, #44]	; (133b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   1338c:	9b01      	ldr	r3, [sp, #4]
   1338e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_86[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]))         /*if interrupts were enabled*/
   13392:	4a0a      	ldr	r2, [pc, #40]	; (133bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x48>)
   13394:	9b01      	ldr	r3, [sp, #4]
   13396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1339a:	f003 0301 	and.w	r3, r3, #1
   1339e:	2b00      	cmp	r3, #0
   133a0:	d106      	bne.n	133b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
   133a2:	4a05      	ldr	r2, [pc, #20]	; (133b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   133a4:	9b01      	ldr	r3, [sp, #4]
   133a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133aa:	2b00      	cmp	r3, #0
   133ac:	d100      	bne.n	133b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   133ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   133b0:	bf00      	nop
   133b2:	b003      	add	sp, #12
   133b4:	f85d fb04 	ldr.w	pc, [sp], #4
   133b8:	1fff9618 	.word	0x1fff9618
   133bc:	1fff9614 	.word	0x1fff9614

000133c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   133c0:	b500      	push	{lr}
   133c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   133c4:	f7ed fbec 	bl	ba0 <Sys_GetCoreID>
   133c8:	4603      	mov	r3, r0
   133ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId])
   133cc:	4a10      	ldr	r2, [pc, #64]	; (13410 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   133ce:	9b01      	ldr	r3, [sp, #4]
   133d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133d4:	2b00      	cmp	r3, #0
   133d6:	d10d      	bne.n	133f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   133d8:	f7ed faa8 	bl	92c <Adc_schm_read_msr>
   133dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   133de:	9b00      	ldr	r3, [sp, #0]
   133e0:	f003 0301 	and.w	r3, r3, #1
   133e4:	2b00      	cmp	r3, #0
   133e6:	d100      	bne.n	133ea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   133e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_87[u32CoreId] = msr;
   133ea:	490a      	ldr	r1, [pc, #40]	; (13414 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x54>)
   133ec:	9b01      	ldr	r3, [sp, #4]
   133ee:	9a00      	ldr	r2, [sp, #0]
   133f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]++;
   133f4:	4a06      	ldr	r2, [pc, #24]	; (13410 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   133f6:	9b01      	ldr	r3, [sp, #4]
   133f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133fc:	1c5a      	adds	r2, r3, #1
   133fe:	4904      	ldr	r1, [pc, #16]	; (13410 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   13400:	9b01      	ldr	r3, [sp, #4]
   13402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13406:	bf00      	nop
   13408:	b003      	add	sp, #12
   1340a:	f85d fb04 	ldr.w	pc, [sp], #4
   1340e:	bf00      	nop
   13410:	1fff9620 	.word	0x1fff9620
   13414:	1fff961c 	.word	0x1fff961c

00013418 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   13418:	b500      	push	{lr}
   1341a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1341c:	f7ed fbc0 	bl	ba0 <Sys_GetCoreID>
   13420:	4603      	mov	r3, r0
   13422:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]--;
   13424:	4a0d      	ldr	r2, [pc, #52]	; (1345c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   13426:	9b01      	ldr	r3, [sp, #4]
   13428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1342c:	1e5a      	subs	r2, r3, #1
   1342e:	490b      	ldr	r1, [pc, #44]	; (1345c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   13430:	9b01      	ldr	r3, [sp, #4]
   13432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_87[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]))         /*if interrupts were enabled*/
   13436:	4a0a      	ldr	r2, [pc, #40]	; (13460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x48>)
   13438:	9b01      	ldr	r3, [sp, #4]
   1343a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1343e:	f003 0301 	and.w	r3, r3, #1
   13442:	2b00      	cmp	r3, #0
   13444:	d106      	bne.n	13454 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
   13446:	4a05      	ldr	r2, [pc, #20]	; (1345c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   13448:	9b01      	ldr	r3, [sp, #4]
   1344a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1344e:	2b00      	cmp	r3, #0
   13450:	d100      	bne.n	13454 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13452:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13454:	bf00      	nop
   13456:	b003      	add	sp, #12
   13458:	f85d fb04 	ldr.w	pc, [sp], #4
   1345c:	1fff9620 	.word	0x1fff9620
   13460:	1fff961c 	.word	0x1fff961c

00013464 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   13464:	b500      	push	{lr}
   13466:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13468:	f7ed fb9a 	bl	ba0 <Sys_GetCoreID>
   1346c:	4603      	mov	r3, r0
   1346e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId])
   13470:	4a10      	ldr	r2, [pc, #64]	; (134b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   13472:	9b01      	ldr	r3, [sp, #4]
   13474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13478:	2b00      	cmp	r3, #0
   1347a:	d10d      	bne.n	13498 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1347c:	f7ed fa56 	bl	92c <Adc_schm_read_msr>
   13480:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13482:	9b00      	ldr	r3, [sp, #0]
   13484:	f003 0301 	and.w	r3, r3, #1
   13488:	2b00      	cmp	r3, #0
   1348a:	d100      	bne.n	1348e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1348c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_88[u32CoreId] = msr;
   1348e:	490a      	ldr	r1, [pc, #40]	; (134b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x54>)
   13490:	9b01      	ldr	r3, [sp, #4]
   13492:	9a00      	ldr	r2, [sp, #0]
   13494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]++;
   13498:	4a06      	ldr	r2, [pc, #24]	; (134b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   1349a:	9b01      	ldr	r3, [sp, #4]
   1349c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134a0:	1c5a      	adds	r2, r3, #1
   134a2:	4904      	ldr	r1, [pc, #16]	; (134b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   134a4:	9b01      	ldr	r3, [sp, #4]
   134a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   134aa:	bf00      	nop
   134ac:	b003      	add	sp, #12
   134ae:	f85d fb04 	ldr.w	pc, [sp], #4
   134b2:	bf00      	nop
   134b4:	1fff9628 	.word	0x1fff9628
   134b8:	1fff9624 	.word	0x1fff9624

000134bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   134bc:	b500      	push	{lr}
   134be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   134c0:	f7ed fb6e 	bl	ba0 <Sys_GetCoreID>
   134c4:	4603      	mov	r3, r0
   134c6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]--;
   134c8:	4a0d      	ldr	r2, [pc, #52]	; (13500 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   134ca:	9b01      	ldr	r3, [sp, #4]
   134cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134d0:	1e5a      	subs	r2, r3, #1
   134d2:	490b      	ldr	r1, [pc, #44]	; (13500 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   134d4:	9b01      	ldr	r3, [sp, #4]
   134d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_88[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]))         /*if interrupts were enabled*/
   134da:	4a0a      	ldr	r2, [pc, #40]	; (13504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x48>)
   134dc:	9b01      	ldr	r3, [sp, #4]
   134de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134e2:	f003 0301 	and.w	r3, r3, #1
   134e6:	2b00      	cmp	r3, #0
   134e8:	d106      	bne.n	134f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
   134ea:	4a05      	ldr	r2, [pc, #20]	; (13500 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   134ec:	9b01      	ldr	r3, [sp, #4]
   134ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134f2:	2b00      	cmp	r3, #0
   134f4:	d100      	bne.n	134f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   134f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   134f8:	bf00      	nop
   134fa:	b003      	add	sp, #12
   134fc:	f85d fb04 	ldr.w	pc, [sp], #4
   13500:	1fff9628 	.word	0x1fff9628
   13504:	1fff9624 	.word	0x1fff9624

00013508 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   13508:	b500      	push	{lr}
   1350a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1350c:	f7ed fb48 	bl	ba0 <Sys_GetCoreID>
   13510:	4603      	mov	r3, r0
   13512:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId])
   13514:	4a10      	ldr	r2, [pc, #64]	; (13558 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   13516:	9b01      	ldr	r3, [sp, #4]
   13518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1351c:	2b00      	cmp	r3, #0
   1351e:	d10d      	bne.n	1353c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13520:	f7ed fa04 	bl	92c <Adc_schm_read_msr>
   13524:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13526:	9b00      	ldr	r3, [sp, #0]
   13528:	f003 0301 	and.w	r3, r3, #1
   1352c:	2b00      	cmp	r3, #0
   1352e:	d100      	bne.n	13532 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13530:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_89[u32CoreId] = msr;
   13532:	490a      	ldr	r1, [pc, #40]	; (1355c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x54>)
   13534:	9b01      	ldr	r3, [sp, #4]
   13536:	9a00      	ldr	r2, [sp, #0]
   13538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]++;
   1353c:	4a06      	ldr	r2, [pc, #24]	; (13558 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   1353e:	9b01      	ldr	r3, [sp, #4]
   13540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13544:	1c5a      	adds	r2, r3, #1
   13546:	4904      	ldr	r1, [pc, #16]	; (13558 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   13548:	9b01      	ldr	r3, [sp, #4]
   1354a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1354e:	bf00      	nop
   13550:	b003      	add	sp, #12
   13552:	f85d fb04 	ldr.w	pc, [sp], #4
   13556:	bf00      	nop
   13558:	1fff9630 	.word	0x1fff9630
   1355c:	1fff962c 	.word	0x1fff962c

00013560 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   13560:	b500      	push	{lr}
   13562:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13564:	f7ed fb1c 	bl	ba0 <Sys_GetCoreID>
   13568:	4603      	mov	r3, r0
   1356a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]--;
   1356c:	4a0d      	ldr	r2, [pc, #52]	; (135a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   1356e:	9b01      	ldr	r3, [sp, #4]
   13570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13574:	1e5a      	subs	r2, r3, #1
   13576:	490b      	ldr	r1, [pc, #44]	; (135a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   13578:	9b01      	ldr	r3, [sp, #4]
   1357a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_89[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]))         /*if interrupts were enabled*/
   1357e:	4a0a      	ldr	r2, [pc, #40]	; (135a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x48>)
   13580:	9b01      	ldr	r3, [sp, #4]
   13582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13586:	f003 0301 	and.w	r3, r3, #1
   1358a:	2b00      	cmp	r3, #0
   1358c:	d106      	bne.n	1359c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
   1358e:	4a05      	ldr	r2, [pc, #20]	; (135a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   13590:	9b01      	ldr	r3, [sp, #4]
   13592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13596:	2b00      	cmp	r3, #0
   13598:	d100      	bne.n	1359c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1359a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1359c:	bf00      	nop
   1359e:	b003      	add	sp, #12
   135a0:	f85d fb04 	ldr.w	pc, [sp], #4
   135a4:	1fff9630 	.word	0x1fff9630
   135a8:	1fff962c 	.word	0x1fff962c

000135ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   135ac:	b500      	push	{lr}
   135ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   135b0:	f7ed faf6 	bl	ba0 <Sys_GetCoreID>
   135b4:	4603      	mov	r3, r0
   135b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId])
   135b8:	4a10      	ldr	r2, [pc, #64]	; (135fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   135ba:	9b01      	ldr	r3, [sp, #4]
   135bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135c0:	2b00      	cmp	r3, #0
   135c2:	d10d      	bne.n	135e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   135c4:	f7ed f9b2 	bl	92c <Adc_schm_read_msr>
   135c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   135ca:	9b00      	ldr	r3, [sp, #0]
   135cc:	f003 0301 	and.w	r3, r3, #1
   135d0:	2b00      	cmp	r3, #0
   135d2:	d100      	bne.n	135d6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   135d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_90[u32CoreId] = msr;
   135d6:	490a      	ldr	r1, [pc, #40]	; (13600 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x54>)
   135d8:	9b01      	ldr	r3, [sp, #4]
   135da:	9a00      	ldr	r2, [sp, #0]
   135dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]++;
   135e0:	4a06      	ldr	r2, [pc, #24]	; (135fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   135e2:	9b01      	ldr	r3, [sp, #4]
   135e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135e8:	1c5a      	adds	r2, r3, #1
   135ea:	4904      	ldr	r1, [pc, #16]	; (135fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   135ec:	9b01      	ldr	r3, [sp, #4]
   135ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   135f2:	bf00      	nop
   135f4:	b003      	add	sp, #12
   135f6:	f85d fb04 	ldr.w	pc, [sp], #4
   135fa:	bf00      	nop
   135fc:	1fff9638 	.word	0x1fff9638
   13600:	1fff9634 	.word	0x1fff9634

00013604 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   13604:	b500      	push	{lr}
   13606:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13608:	f7ed faca 	bl	ba0 <Sys_GetCoreID>
   1360c:	4603      	mov	r3, r0
   1360e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]--;
   13610:	4a0d      	ldr	r2, [pc, #52]	; (13648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   13612:	9b01      	ldr	r3, [sp, #4]
   13614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13618:	1e5a      	subs	r2, r3, #1
   1361a:	490b      	ldr	r1, [pc, #44]	; (13648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   1361c:	9b01      	ldr	r3, [sp, #4]
   1361e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_90[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]))         /*if interrupts were enabled*/
   13622:	4a0a      	ldr	r2, [pc, #40]	; (1364c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x48>)
   13624:	9b01      	ldr	r3, [sp, #4]
   13626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1362a:	f003 0301 	and.w	r3, r3, #1
   1362e:	2b00      	cmp	r3, #0
   13630:	d106      	bne.n	13640 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
   13632:	4a05      	ldr	r2, [pc, #20]	; (13648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   13634:	9b01      	ldr	r3, [sp, #4]
   13636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1363a:	2b00      	cmp	r3, #0
   1363c:	d100      	bne.n	13640 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1363e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13640:	bf00      	nop
   13642:	b003      	add	sp, #12
   13644:	f85d fb04 	ldr.w	pc, [sp], #4
   13648:	1fff9638 	.word	0x1fff9638
   1364c:	1fff9634 	.word	0x1fff9634

00013650 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   13650:	b500      	push	{lr}
   13652:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13654:	f7ed faa4 	bl	ba0 <Sys_GetCoreID>
   13658:	4603      	mov	r3, r0
   1365a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId])
   1365c:	4a10      	ldr	r2, [pc, #64]	; (136a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   1365e:	9b01      	ldr	r3, [sp, #4]
   13660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13664:	2b00      	cmp	r3, #0
   13666:	d10d      	bne.n	13684 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13668:	f7ed f960 	bl	92c <Adc_schm_read_msr>
   1366c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1366e:	9b00      	ldr	r3, [sp, #0]
   13670:	f003 0301 	and.w	r3, r3, #1
   13674:	2b00      	cmp	r3, #0
   13676:	d100      	bne.n	1367a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13678:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_91[u32CoreId] = msr;
   1367a:	490a      	ldr	r1, [pc, #40]	; (136a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x54>)
   1367c:	9b01      	ldr	r3, [sp, #4]
   1367e:	9a00      	ldr	r2, [sp, #0]
   13680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]++;
   13684:	4a06      	ldr	r2, [pc, #24]	; (136a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   13686:	9b01      	ldr	r3, [sp, #4]
   13688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1368c:	1c5a      	adds	r2, r3, #1
   1368e:	4904      	ldr	r1, [pc, #16]	; (136a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   13690:	9b01      	ldr	r3, [sp, #4]
   13692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13696:	bf00      	nop
   13698:	b003      	add	sp, #12
   1369a:	f85d fb04 	ldr.w	pc, [sp], #4
   1369e:	bf00      	nop
   136a0:	1fff9640 	.word	0x1fff9640
   136a4:	1fff963c 	.word	0x1fff963c

000136a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   136a8:	b500      	push	{lr}
   136aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   136ac:	f7ed fa78 	bl	ba0 <Sys_GetCoreID>
   136b0:	4603      	mov	r3, r0
   136b2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]--;
   136b4:	4a0d      	ldr	r2, [pc, #52]	; (136ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   136b6:	9b01      	ldr	r3, [sp, #4]
   136b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136bc:	1e5a      	subs	r2, r3, #1
   136be:	490b      	ldr	r1, [pc, #44]	; (136ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   136c0:	9b01      	ldr	r3, [sp, #4]
   136c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_91[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]))         /*if interrupts were enabled*/
   136c6:	4a0a      	ldr	r2, [pc, #40]	; (136f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x48>)
   136c8:	9b01      	ldr	r3, [sp, #4]
   136ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136ce:	f003 0301 	and.w	r3, r3, #1
   136d2:	2b00      	cmp	r3, #0
   136d4:	d106      	bne.n	136e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
   136d6:	4a05      	ldr	r2, [pc, #20]	; (136ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   136d8:	9b01      	ldr	r3, [sp, #4]
   136da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136de:	2b00      	cmp	r3, #0
   136e0:	d100      	bne.n	136e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   136e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   136e4:	bf00      	nop
   136e6:	b003      	add	sp, #12
   136e8:	f85d fb04 	ldr.w	pc, [sp], #4
   136ec:	1fff9640 	.word	0x1fff9640
   136f0:	1fff963c 	.word	0x1fff963c

000136f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   136f4:	b500      	push	{lr}
   136f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   136f8:	f7ed fa52 	bl	ba0 <Sys_GetCoreID>
   136fc:	4603      	mov	r3, r0
   136fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId])
   13700:	4a10      	ldr	r2, [pc, #64]	; (13744 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   13702:	9b01      	ldr	r3, [sp, #4]
   13704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13708:	2b00      	cmp	r3, #0
   1370a:	d10d      	bne.n	13728 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1370c:	f7ed f90e 	bl	92c <Adc_schm_read_msr>
   13710:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13712:	9b00      	ldr	r3, [sp, #0]
   13714:	f003 0301 	and.w	r3, r3, #1
   13718:	2b00      	cmp	r3, #0
   1371a:	d100      	bne.n	1371e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1371c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_92[u32CoreId] = msr;
   1371e:	490a      	ldr	r1, [pc, #40]	; (13748 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x54>)
   13720:	9b01      	ldr	r3, [sp, #4]
   13722:	9a00      	ldr	r2, [sp, #0]
   13724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]++;
   13728:	4a06      	ldr	r2, [pc, #24]	; (13744 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   1372a:	9b01      	ldr	r3, [sp, #4]
   1372c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13730:	1c5a      	adds	r2, r3, #1
   13732:	4904      	ldr	r1, [pc, #16]	; (13744 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   13734:	9b01      	ldr	r3, [sp, #4]
   13736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1373a:	bf00      	nop
   1373c:	b003      	add	sp, #12
   1373e:	f85d fb04 	ldr.w	pc, [sp], #4
   13742:	bf00      	nop
   13744:	1fff9648 	.word	0x1fff9648
   13748:	1fff9644 	.word	0x1fff9644

0001374c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   1374c:	b500      	push	{lr}
   1374e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13750:	f7ed fa26 	bl	ba0 <Sys_GetCoreID>
   13754:	4603      	mov	r3, r0
   13756:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]--;
   13758:	4a0d      	ldr	r2, [pc, #52]	; (13790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   1375a:	9b01      	ldr	r3, [sp, #4]
   1375c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13760:	1e5a      	subs	r2, r3, #1
   13762:	490b      	ldr	r1, [pc, #44]	; (13790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   13764:	9b01      	ldr	r3, [sp, #4]
   13766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_92[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]))         /*if interrupts were enabled*/
   1376a:	4a0a      	ldr	r2, [pc, #40]	; (13794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x48>)
   1376c:	9b01      	ldr	r3, [sp, #4]
   1376e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13772:	f003 0301 	and.w	r3, r3, #1
   13776:	2b00      	cmp	r3, #0
   13778:	d106      	bne.n	13788 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
   1377a:	4a05      	ldr	r2, [pc, #20]	; (13790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   1377c:	9b01      	ldr	r3, [sp, #4]
   1377e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13782:	2b00      	cmp	r3, #0
   13784:	d100      	bne.n	13788 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13786:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13788:	bf00      	nop
   1378a:	b003      	add	sp, #12
   1378c:	f85d fb04 	ldr.w	pc, [sp], #4
   13790:	1fff9648 	.word	0x1fff9648
   13794:	1fff9644 	.word	0x1fff9644

00013798 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   13798:	b500      	push	{lr}
   1379a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1379c:	f7ed fa00 	bl	ba0 <Sys_GetCoreID>
   137a0:	4603      	mov	r3, r0
   137a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId])
   137a4:	4a10      	ldr	r2, [pc, #64]	; (137e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   137a6:	9b01      	ldr	r3, [sp, #4]
   137a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137ac:	2b00      	cmp	r3, #0
   137ae:	d10d      	bne.n	137cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   137b0:	f7ed f8bc 	bl	92c <Adc_schm_read_msr>
   137b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   137b6:	9b00      	ldr	r3, [sp, #0]
   137b8:	f003 0301 	and.w	r3, r3, #1
   137bc:	2b00      	cmp	r3, #0
   137be:	d100      	bne.n	137c2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   137c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_93[u32CoreId] = msr;
   137c2:	490a      	ldr	r1, [pc, #40]	; (137ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x54>)
   137c4:	9b01      	ldr	r3, [sp, #4]
   137c6:	9a00      	ldr	r2, [sp, #0]
   137c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]++;
   137cc:	4a06      	ldr	r2, [pc, #24]	; (137e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   137ce:	9b01      	ldr	r3, [sp, #4]
   137d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137d4:	1c5a      	adds	r2, r3, #1
   137d6:	4904      	ldr	r1, [pc, #16]	; (137e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   137d8:	9b01      	ldr	r3, [sp, #4]
   137da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   137de:	bf00      	nop
   137e0:	b003      	add	sp, #12
   137e2:	f85d fb04 	ldr.w	pc, [sp], #4
   137e6:	bf00      	nop
   137e8:	1fff9650 	.word	0x1fff9650
   137ec:	1fff964c 	.word	0x1fff964c

000137f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   137f0:	b500      	push	{lr}
   137f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   137f4:	f7ed f9d4 	bl	ba0 <Sys_GetCoreID>
   137f8:	4603      	mov	r3, r0
   137fa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]--;
   137fc:	4a0d      	ldr	r2, [pc, #52]	; (13834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   137fe:	9b01      	ldr	r3, [sp, #4]
   13800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13804:	1e5a      	subs	r2, r3, #1
   13806:	490b      	ldr	r1, [pc, #44]	; (13834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   13808:	9b01      	ldr	r3, [sp, #4]
   1380a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_93[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]))         /*if interrupts were enabled*/
   1380e:	4a0a      	ldr	r2, [pc, #40]	; (13838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x48>)
   13810:	9b01      	ldr	r3, [sp, #4]
   13812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13816:	f003 0301 	and.w	r3, r3, #1
   1381a:	2b00      	cmp	r3, #0
   1381c:	d106      	bne.n	1382c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
   1381e:	4a05      	ldr	r2, [pc, #20]	; (13834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   13820:	9b01      	ldr	r3, [sp, #4]
   13822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13826:	2b00      	cmp	r3, #0
   13828:	d100      	bne.n	1382c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1382a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1382c:	bf00      	nop
   1382e:	b003      	add	sp, #12
   13830:	f85d fb04 	ldr.w	pc, [sp], #4
   13834:	1fff9650 	.word	0x1fff9650
   13838:	1fff964c 	.word	0x1fff964c

0001383c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   1383c:	b500      	push	{lr}
   1383e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13840:	f7ed f9ae 	bl	ba0 <Sys_GetCoreID>
   13844:	4603      	mov	r3, r0
   13846:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId])
   13848:	4a10      	ldr	r2, [pc, #64]	; (1388c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   1384a:	9b01      	ldr	r3, [sp, #4]
   1384c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13850:	2b00      	cmp	r3, #0
   13852:	d10d      	bne.n	13870 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13854:	f7ed f86a 	bl	92c <Adc_schm_read_msr>
   13858:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1385a:	9b00      	ldr	r3, [sp, #0]
   1385c:	f003 0301 	and.w	r3, r3, #1
   13860:	2b00      	cmp	r3, #0
   13862:	d100      	bne.n	13866 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13864:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_94[u32CoreId] = msr;
   13866:	490a      	ldr	r1, [pc, #40]	; (13890 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x54>)
   13868:	9b01      	ldr	r3, [sp, #4]
   1386a:	9a00      	ldr	r2, [sp, #0]
   1386c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]++;
   13870:	4a06      	ldr	r2, [pc, #24]	; (1388c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   13872:	9b01      	ldr	r3, [sp, #4]
   13874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13878:	1c5a      	adds	r2, r3, #1
   1387a:	4904      	ldr	r1, [pc, #16]	; (1388c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   1387c:	9b01      	ldr	r3, [sp, #4]
   1387e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13882:	bf00      	nop
   13884:	b003      	add	sp, #12
   13886:	f85d fb04 	ldr.w	pc, [sp], #4
   1388a:	bf00      	nop
   1388c:	1fff9658 	.word	0x1fff9658
   13890:	1fff9654 	.word	0x1fff9654

00013894 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   13894:	b500      	push	{lr}
   13896:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13898:	f7ed f982 	bl	ba0 <Sys_GetCoreID>
   1389c:	4603      	mov	r3, r0
   1389e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]--;
   138a0:	4a0d      	ldr	r2, [pc, #52]	; (138d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   138a2:	9b01      	ldr	r3, [sp, #4]
   138a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138a8:	1e5a      	subs	r2, r3, #1
   138aa:	490b      	ldr	r1, [pc, #44]	; (138d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   138ac:	9b01      	ldr	r3, [sp, #4]
   138ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_94[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]))         /*if interrupts were enabled*/
   138b2:	4a0a      	ldr	r2, [pc, #40]	; (138dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x48>)
   138b4:	9b01      	ldr	r3, [sp, #4]
   138b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138ba:	f003 0301 	and.w	r3, r3, #1
   138be:	2b00      	cmp	r3, #0
   138c0:	d106      	bne.n	138d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
   138c2:	4a05      	ldr	r2, [pc, #20]	; (138d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   138c4:	9b01      	ldr	r3, [sp, #4]
   138c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138ca:	2b00      	cmp	r3, #0
   138cc:	d100      	bne.n	138d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   138ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   138d0:	bf00      	nop
   138d2:	b003      	add	sp, #12
   138d4:	f85d fb04 	ldr.w	pc, [sp], #4
   138d8:	1fff9658 	.word	0x1fff9658
   138dc:	1fff9654 	.word	0x1fff9654

000138e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   138e0:	b500      	push	{lr}
   138e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   138e4:	f7ed f95c 	bl	ba0 <Sys_GetCoreID>
   138e8:	4603      	mov	r3, r0
   138ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId])
   138ec:	4a10      	ldr	r2, [pc, #64]	; (13930 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   138ee:	9b01      	ldr	r3, [sp, #4]
   138f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138f4:	2b00      	cmp	r3, #0
   138f6:	d10d      	bne.n	13914 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   138f8:	f7ed f818 	bl	92c <Adc_schm_read_msr>
   138fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   138fe:	9b00      	ldr	r3, [sp, #0]
   13900:	f003 0301 	and.w	r3, r3, #1
   13904:	2b00      	cmp	r3, #0
   13906:	d100      	bne.n	1390a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13908:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_95[u32CoreId] = msr;
   1390a:	490a      	ldr	r1, [pc, #40]	; (13934 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x54>)
   1390c:	9b01      	ldr	r3, [sp, #4]
   1390e:	9a00      	ldr	r2, [sp, #0]
   13910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]++;
   13914:	4a06      	ldr	r2, [pc, #24]	; (13930 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   13916:	9b01      	ldr	r3, [sp, #4]
   13918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1391c:	1c5a      	adds	r2, r3, #1
   1391e:	4904      	ldr	r1, [pc, #16]	; (13930 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   13920:	9b01      	ldr	r3, [sp, #4]
   13922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13926:	bf00      	nop
   13928:	b003      	add	sp, #12
   1392a:	f85d fb04 	ldr.w	pc, [sp], #4
   1392e:	bf00      	nop
   13930:	1fff9660 	.word	0x1fff9660
   13934:	1fff965c 	.word	0x1fff965c

00013938 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   13938:	b500      	push	{lr}
   1393a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1393c:	f7ed f930 	bl	ba0 <Sys_GetCoreID>
   13940:	4603      	mov	r3, r0
   13942:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]--;
   13944:	4a0d      	ldr	r2, [pc, #52]	; (1397c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   13946:	9b01      	ldr	r3, [sp, #4]
   13948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1394c:	1e5a      	subs	r2, r3, #1
   1394e:	490b      	ldr	r1, [pc, #44]	; (1397c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   13950:	9b01      	ldr	r3, [sp, #4]
   13952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_95[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]))         /*if interrupts were enabled*/
   13956:	4a0a      	ldr	r2, [pc, #40]	; (13980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x48>)
   13958:	9b01      	ldr	r3, [sp, #4]
   1395a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1395e:	f003 0301 	and.w	r3, r3, #1
   13962:	2b00      	cmp	r3, #0
   13964:	d106      	bne.n	13974 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
   13966:	4a05      	ldr	r2, [pc, #20]	; (1397c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   13968:	9b01      	ldr	r3, [sp, #4]
   1396a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1396e:	2b00      	cmp	r3, #0
   13970:	d100      	bne.n	13974 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13972:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13974:	bf00      	nop
   13976:	b003      	add	sp, #12
   13978:	f85d fb04 	ldr.w	pc, [sp], #4
   1397c:	1fff9660 	.word	0x1fff9660
   13980:	1fff965c 	.word	0x1fff965c

00013984 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   13984:	b500      	push	{lr}
   13986:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13988:	f7ed f90a 	bl	ba0 <Sys_GetCoreID>
   1398c:	4603      	mov	r3, r0
   1398e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId])
   13990:	4a10      	ldr	r2, [pc, #64]	; (139d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   13992:	9b01      	ldr	r3, [sp, #4]
   13994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13998:	2b00      	cmp	r3, #0
   1399a:	d10d      	bne.n	139b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1399c:	f7ec ffc6 	bl	92c <Adc_schm_read_msr>
   139a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   139a2:	9b00      	ldr	r3, [sp, #0]
   139a4:	f003 0301 	and.w	r3, r3, #1
   139a8:	2b00      	cmp	r3, #0
   139aa:	d100      	bne.n	139ae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   139ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_96[u32CoreId] = msr;
   139ae:	490a      	ldr	r1, [pc, #40]	; (139d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x54>)
   139b0:	9b01      	ldr	r3, [sp, #4]
   139b2:	9a00      	ldr	r2, [sp, #0]
   139b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]++;
   139b8:	4a06      	ldr	r2, [pc, #24]	; (139d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   139ba:	9b01      	ldr	r3, [sp, #4]
   139bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139c0:	1c5a      	adds	r2, r3, #1
   139c2:	4904      	ldr	r1, [pc, #16]	; (139d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   139c4:	9b01      	ldr	r3, [sp, #4]
   139c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   139ca:	bf00      	nop
   139cc:	b003      	add	sp, #12
   139ce:	f85d fb04 	ldr.w	pc, [sp], #4
   139d2:	bf00      	nop
   139d4:	1fff9668 	.word	0x1fff9668
   139d8:	1fff9664 	.word	0x1fff9664

000139dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   139dc:	b500      	push	{lr}
   139de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   139e0:	f7ed f8de 	bl	ba0 <Sys_GetCoreID>
   139e4:	4603      	mov	r3, r0
   139e6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]--;
   139e8:	4a0d      	ldr	r2, [pc, #52]	; (13a20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   139ea:	9b01      	ldr	r3, [sp, #4]
   139ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139f0:	1e5a      	subs	r2, r3, #1
   139f2:	490b      	ldr	r1, [pc, #44]	; (13a20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   139f4:	9b01      	ldr	r3, [sp, #4]
   139f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_96[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]))         /*if interrupts were enabled*/
   139fa:	4a0a      	ldr	r2, [pc, #40]	; (13a24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x48>)
   139fc:	9b01      	ldr	r3, [sp, #4]
   139fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a02:	f003 0301 	and.w	r3, r3, #1
   13a06:	2b00      	cmp	r3, #0
   13a08:	d106      	bne.n	13a18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
   13a0a:	4a05      	ldr	r2, [pc, #20]	; (13a20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   13a0c:	9b01      	ldr	r3, [sp, #4]
   13a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a12:	2b00      	cmp	r3, #0
   13a14:	d100      	bne.n	13a18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13a16:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13a18:	bf00      	nop
   13a1a:	b003      	add	sp, #12
   13a1c:	f85d fb04 	ldr.w	pc, [sp], #4
   13a20:	1fff9668 	.word	0x1fff9668
   13a24:	1fff9664 	.word	0x1fff9664

00013a28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   13a28:	b500      	push	{lr}
   13a2a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a2c:	f7ed f8b8 	bl	ba0 <Sys_GetCoreID>
   13a30:	4603      	mov	r3, r0
   13a32:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId])
   13a34:	4a10      	ldr	r2, [pc, #64]	; (13a78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   13a36:	9b01      	ldr	r3, [sp, #4]
   13a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a3c:	2b00      	cmp	r3, #0
   13a3e:	d10d      	bne.n	13a5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13a40:	f7ec ff74 	bl	92c <Adc_schm_read_msr>
   13a44:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13a46:	9b00      	ldr	r3, [sp, #0]
   13a48:	f003 0301 	and.w	r3, r3, #1
   13a4c:	2b00      	cmp	r3, #0
   13a4e:	d100      	bne.n	13a52 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13a50:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_97[u32CoreId] = msr;
   13a52:	490a      	ldr	r1, [pc, #40]	; (13a7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x54>)
   13a54:	9b01      	ldr	r3, [sp, #4]
   13a56:	9a00      	ldr	r2, [sp, #0]
   13a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]++;
   13a5c:	4a06      	ldr	r2, [pc, #24]	; (13a78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   13a5e:	9b01      	ldr	r3, [sp, #4]
   13a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a64:	1c5a      	adds	r2, r3, #1
   13a66:	4904      	ldr	r1, [pc, #16]	; (13a78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   13a68:	9b01      	ldr	r3, [sp, #4]
   13a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13a6e:	bf00      	nop
   13a70:	b003      	add	sp, #12
   13a72:	f85d fb04 	ldr.w	pc, [sp], #4
   13a76:	bf00      	nop
   13a78:	1fff9670 	.word	0x1fff9670
   13a7c:	1fff966c 	.word	0x1fff966c

00013a80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   13a80:	b500      	push	{lr}
   13a82:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a84:	f7ed f88c 	bl	ba0 <Sys_GetCoreID>
   13a88:	4603      	mov	r3, r0
   13a8a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]--;
   13a8c:	4a0d      	ldr	r2, [pc, #52]	; (13ac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   13a8e:	9b01      	ldr	r3, [sp, #4]
   13a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a94:	1e5a      	subs	r2, r3, #1
   13a96:	490b      	ldr	r1, [pc, #44]	; (13ac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   13a98:	9b01      	ldr	r3, [sp, #4]
   13a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_97[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]))         /*if interrupts were enabled*/
   13a9e:	4a0a      	ldr	r2, [pc, #40]	; (13ac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x48>)
   13aa0:	9b01      	ldr	r3, [sp, #4]
   13aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13aa6:	f003 0301 	and.w	r3, r3, #1
   13aaa:	2b00      	cmp	r3, #0
   13aac:	d106      	bne.n	13abc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
   13aae:	4a05      	ldr	r2, [pc, #20]	; (13ac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   13ab0:	9b01      	ldr	r3, [sp, #4]
   13ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ab6:	2b00      	cmp	r3, #0
   13ab8:	d100      	bne.n	13abc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13aba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13abc:	bf00      	nop
   13abe:	b003      	add	sp, #12
   13ac0:	f85d fb04 	ldr.w	pc, [sp], #4
   13ac4:	1fff9670 	.word	0x1fff9670
   13ac8:	1fff966c 	.word	0x1fff966c

00013acc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   13acc:	b500      	push	{lr}
   13ace:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ad0:	f7ed f866 	bl	ba0 <Sys_GetCoreID>
   13ad4:	4603      	mov	r3, r0
   13ad6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId])
   13ad8:	4a10      	ldr	r2, [pc, #64]	; (13b1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   13ada:	9b01      	ldr	r3, [sp, #4]
   13adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ae0:	2b00      	cmp	r3, #0
   13ae2:	d10d      	bne.n	13b00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13ae4:	f7ec ff22 	bl	92c <Adc_schm_read_msr>
   13ae8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13aea:	9b00      	ldr	r3, [sp, #0]
   13aec:	f003 0301 	and.w	r3, r3, #1
   13af0:	2b00      	cmp	r3, #0
   13af2:	d100      	bne.n	13af6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13af4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_98[u32CoreId] = msr;
   13af6:	490a      	ldr	r1, [pc, #40]	; (13b20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x54>)
   13af8:	9b01      	ldr	r3, [sp, #4]
   13afa:	9a00      	ldr	r2, [sp, #0]
   13afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]++;
   13b00:	4a06      	ldr	r2, [pc, #24]	; (13b1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   13b02:	9b01      	ldr	r3, [sp, #4]
   13b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b08:	1c5a      	adds	r2, r3, #1
   13b0a:	4904      	ldr	r1, [pc, #16]	; (13b1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   13b0c:	9b01      	ldr	r3, [sp, #4]
   13b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13b12:	bf00      	nop
   13b14:	b003      	add	sp, #12
   13b16:	f85d fb04 	ldr.w	pc, [sp], #4
   13b1a:	bf00      	nop
   13b1c:	1fff9678 	.word	0x1fff9678
   13b20:	1fff9674 	.word	0x1fff9674

00013b24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   13b24:	b500      	push	{lr}
   13b26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b28:	f7ed f83a 	bl	ba0 <Sys_GetCoreID>
   13b2c:	4603      	mov	r3, r0
   13b2e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]--;
   13b30:	4a0d      	ldr	r2, [pc, #52]	; (13b68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   13b32:	9b01      	ldr	r3, [sp, #4]
   13b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b38:	1e5a      	subs	r2, r3, #1
   13b3a:	490b      	ldr	r1, [pc, #44]	; (13b68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   13b3c:	9b01      	ldr	r3, [sp, #4]
   13b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_98[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]))         /*if interrupts were enabled*/
   13b42:	4a0a      	ldr	r2, [pc, #40]	; (13b6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x48>)
   13b44:	9b01      	ldr	r3, [sp, #4]
   13b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b4a:	f003 0301 	and.w	r3, r3, #1
   13b4e:	2b00      	cmp	r3, #0
   13b50:	d106      	bne.n	13b60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
   13b52:	4a05      	ldr	r2, [pc, #20]	; (13b68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   13b54:	9b01      	ldr	r3, [sp, #4]
   13b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b5a:	2b00      	cmp	r3, #0
   13b5c:	d100      	bne.n	13b60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13b5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13b60:	bf00      	nop
   13b62:	b003      	add	sp, #12
   13b64:	f85d fb04 	ldr.w	pc, [sp], #4
   13b68:	1fff9678 	.word	0x1fff9678
   13b6c:	1fff9674 	.word	0x1fff9674

00013b70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   13b70:	b500      	push	{lr}
   13b72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b74:	f7ed f814 	bl	ba0 <Sys_GetCoreID>
   13b78:	4603      	mov	r3, r0
   13b7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId])
   13b7c:	4a10      	ldr	r2, [pc, #64]	; (13bc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   13b7e:	9b01      	ldr	r3, [sp, #4]
   13b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b84:	2b00      	cmp	r3, #0
   13b86:	d10d      	bne.n	13ba4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13b88:	f7ec fed0 	bl	92c <Adc_schm_read_msr>
   13b8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13b8e:	9b00      	ldr	r3, [sp, #0]
   13b90:	f003 0301 	and.w	r3, r3, #1
   13b94:	2b00      	cmp	r3, #0
   13b96:	d100      	bne.n	13b9a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13b98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_99[u32CoreId] = msr;
   13b9a:	490a      	ldr	r1, [pc, #40]	; (13bc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x54>)
   13b9c:	9b01      	ldr	r3, [sp, #4]
   13b9e:	9a00      	ldr	r2, [sp, #0]
   13ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]++;
   13ba4:	4a06      	ldr	r2, [pc, #24]	; (13bc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   13ba6:	9b01      	ldr	r3, [sp, #4]
   13ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bac:	1c5a      	adds	r2, r3, #1
   13bae:	4904      	ldr	r1, [pc, #16]	; (13bc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   13bb0:	9b01      	ldr	r3, [sp, #4]
   13bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13bb6:	bf00      	nop
   13bb8:	b003      	add	sp, #12
   13bba:	f85d fb04 	ldr.w	pc, [sp], #4
   13bbe:	bf00      	nop
   13bc0:	1fff9680 	.word	0x1fff9680
   13bc4:	1fff967c 	.word	0x1fff967c

00013bc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   13bc8:	b500      	push	{lr}
   13bca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13bcc:	f7ec ffe8 	bl	ba0 <Sys_GetCoreID>
   13bd0:	4603      	mov	r3, r0
   13bd2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]--;
   13bd4:	4a0d      	ldr	r2, [pc, #52]	; (13c0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   13bd6:	9b01      	ldr	r3, [sp, #4]
   13bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bdc:	1e5a      	subs	r2, r3, #1
   13bde:	490b      	ldr	r1, [pc, #44]	; (13c0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   13be0:	9b01      	ldr	r3, [sp, #4]
   13be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_99[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]))         /*if interrupts were enabled*/
   13be6:	4a0a      	ldr	r2, [pc, #40]	; (13c10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x48>)
   13be8:	9b01      	ldr	r3, [sp, #4]
   13bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bee:	f003 0301 	and.w	r3, r3, #1
   13bf2:	2b00      	cmp	r3, #0
   13bf4:	d106      	bne.n	13c04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
   13bf6:	4a05      	ldr	r2, [pc, #20]	; (13c0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   13bf8:	9b01      	ldr	r3, [sp, #4]
   13bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bfe:	2b00      	cmp	r3, #0
   13c00:	d100      	bne.n	13c04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13c02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13c04:	bf00      	nop
   13c06:	b003      	add	sp, #12
   13c08:	f85d fb04 	ldr.w	pc, [sp], #4
   13c0c:	1fff9680 	.word	0x1fff9680
   13c10:	1fff967c 	.word	0x1fff967c

00013c14 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
   13c14:	b500      	push	{lr}
   13c16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c18:	f7ec ffc2 	bl	ba0 <Sys_GetCoreID>
   13c1c:	4603      	mov	r3, r0
   13c1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId])
   13c20:	4a10      	ldr	r2, [pc, #64]	; (13c64 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
   13c22:	9b01      	ldr	r3, [sp, #4]
   13c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c28:	2b00      	cmp	r3, #0
   13c2a:	d10d      	bne.n	13c48 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13c2c:	f7ec fe87 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   13c30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13c32:	9b00      	ldr	r3, [sp, #0]
   13c34:	f003 0301 	and.w	r3, r3, #1
   13c38:	2b00      	cmp	r3, #0
   13c3a:	d100      	bne.n	13c3e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13c3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   13c3e:	490a      	ldr	r1, [pc, #40]	; (13c68 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x54>)
   13c40:	9b01      	ldr	r3, [sp, #4]
   13c42:	9a00      	ldr	r2, [sp, #0]
   13c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]++;
   13c48:	4a06      	ldr	r2, [pc, #24]	; (13c64 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
   13c4a:	9b01      	ldr	r3, [sp, #4]
   13c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c50:	1c5a      	adds	r2, r3, #1
   13c52:	4904      	ldr	r1, [pc, #16]	; (13c64 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
   13c54:	9b01      	ldr	r3, [sp, #4]
   13c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13c5a:	bf00      	nop
   13c5c:	b003      	add	sp, #12
   13c5e:	f85d fb04 	ldr.w	pc, [sp], #4
   13c62:	bf00      	nop
   13c64:	1fff9688 	.word	0x1fff9688
   13c68:	1fff9684 	.word	0x1fff9684

00013c6c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
   13c6c:	b500      	push	{lr}
   13c6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c70:	f7ec ff96 	bl	ba0 <Sys_GetCoreID>
   13c74:	4603      	mov	r3, r0
   13c76:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]--;
   13c78:	4a0d      	ldr	r2, [pc, #52]	; (13cb0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
   13c7a:	9b01      	ldr	r3, [sp, #4]
   13c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c80:	1e5a      	subs	r2, r3, #1
   13c82:	490b      	ldr	r1, [pc, #44]	; (13cb0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
   13c84:	9b01      	ldr	r3, [sp, #4]
   13c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   13c8a:	4a0a      	ldr	r2, [pc, #40]	; (13cb4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x48>)
   13c8c:	9b01      	ldr	r3, [sp, #4]
   13c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c92:	f003 0301 	and.w	r3, r3, #1
   13c96:	2b00      	cmp	r3, #0
   13c98:	d106      	bne.n	13ca8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
   13c9a:	4a05      	ldr	r2, [pc, #20]	; (13cb0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
   13c9c:	9b01      	ldr	r3, [sp, #4]
   13c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ca2:	2b00      	cmp	r3, #0
   13ca4:	d100      	bne.n	13ca8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13ca6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13ca8:	bf00      	nop
   13caa:	b003      	add	sp, #12
   13cac:	f85d fb04 	ldr.w	pc, [sp], #4
   13cb0:	1fff9688 	.word	0x1fff9688
   13cb4:	1fff9684 	.word	0x1fff9684

00013cb8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
   13cb8:	b500      	push	{lr}
   13cba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13cbc:	f7ec ff70 	bl	ba0 <Sys_GetCoreID>
   13cc0:	4603      	mov	r3, r0
   13cc2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId])
   13cc4:	4a10      	ldr	r2, [pc, #64]	; (13d08 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
   13cc6:	9b01      	ldr	r3, [sp, #4]
   13cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ccc:	2b00      	cmp	r3, #0
   13cce:	d10d      	bne.n	13cec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13cd0:	f7ec fe35 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   13cd4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13cd6:	9b00      	ldr	r3, [sp, #0]
   13cd8:	f003 0301 	and.w	r3, r3, #1
   13cdc:	2b00      	cmp	r3, #0
   13cde:	d100      	bne.n	13ce2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13ce0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   13ce2:	490a      	ldr	r1, [pc, #40]	; (13d0c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x54>)
   13ce4:	9b01      	ldr	r3, [sp, #4]
   13ce6:	9a00      	ldr	r2, [sp, #0]
   13ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]++;
   13cec:	4a06      	ldr	r2, [pc, #24]	; (13d08 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
   13cee:	9b01      	ldr	r3, [sp, #4]
   13cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cf4:	1c5a      	adds	r2, r3, #1
   13cf6:	4904      	ldr	r1, [pc, #16]	; (13d08 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
   13cf8:	9b01      	ldr	r3, [sp, #4]
   13cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13cfe:	bf00      	nop
   13d00:	b003      	add	sp, #12
   13d02:	f85d fb04 	ldr.w	pc, [sp], #4
   13d06:	bf00      	nop
   13d08:	1fff9690 	.word	0x1fff9690
   13d0c:	1fff968c 	.word	0x1fff968c

00013d10 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
   13d10:	b500      	push	{lr}
   13d12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d14:	f7ec ff44 	bl	ba0 <Sys_GetCoreID>
   13d18:	4603      	mov	r3, r0
   13d1a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]--;
   13d1c:	4a0d      	ldr	r2, [pc, #52]	; (13d54 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
   13d1e:	9b01      	ldr	r3, [sp, #4]
   13d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d24:	1e5a      	subs	r2, r3, #1
   13d26:	490b      	ldr	r1, [pc, #44]	; (13d54 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
   13d28:	9b01      	ldr	r3, [sp, #4]
   13d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   13d2e:	4a0a      	ldr	r2, [pc, #40]	; (13d58 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x48>)
   13d30:	9b01      	ldr	r3, [sp, #4]
   13d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d36:	f003 0301 	and.w	r3, r3, #1
   13d3a:	2b00      	cmp	r3, #0
   13d3c:	d106      	bne.n	13d4c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
   13d3e:	4a05      	ldr	r2, [pc, #20]	; (13d54 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
   13d40:	9b01      	ldr	r3, [sp, #4]
   13d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d46:	2b00      	cmp	r3, #0
   13d48:	d100      	bne.n	13d4c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13d4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13d4c:	bf00      	nop
   13d4e:	b003      	add	sp, #12
   13d50:	f85d fb04 	ldr.w	pc, [sp], #4
   13d54:	1fff9690 	.word	0x1fff9690
   13d58:	1fff968c 	.word	0x1fff968c

00013d5c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
   13d5c:	b500      	push	{lr}
   13d5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d60:	f7ec ff1e 	bl	ba0 <Sys_GetCoreID>
   13d64:	4603      	mov	r3, r0
   13d66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId])
   13d68:	4a10      	ldr	r2, [pc, #64]	; (13dac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
   13d6a:	9b01      	ldr	r3, [sp, #4]
   13d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d70:	2b00      	cmp	r3, #0
   13d72:	d10d      	bne.n	13d90 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13d74:	f7ec fde3 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   13d78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13d7a:	9b00      	ldr	r3, [sp, #0]
   13d7c:	f003 0301 	and.w	r3, r3, #1
   13d80:	2b00      	cmp	r3, #0
   13d82:	d100      	bne.n	13d86 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13d84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   13d86:	490a      	ldr	r1, [pc, #40]	; (13db0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x54>)
   13d88:	9b01      	ldr	r3, [sp, #4]
   13d8a:	9a00      	ldr	r2, [sp, #0]
   13d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]++;
   13d90:	4a06      	ldr	r2, [pc, #24]	; (13dac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
   13d92:	9b01      	ldr	r3, [sp, #4]
   13d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d98:	1c5a      	adds	r2, r3, #1
   13d9a:	4904      	ldr	r1, [pc, #16]	; (13dac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
   13d9c:	9b01      	ldr	r3, [sp, #4]
   13d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13da2:	bf00      	nop
   13da4:	b003      	add	sp, #12
   13da6:	f85d fb04 	ldr.w	pc, [sp], #4
   13daa:	bf00      	nop
   13dac:	1fff9698 	.word	0x1fff9698
   13db0:	1fff9694 	.word	0x1fff9694

00013db4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
   13db4:	b500      	push	{lr}
   13db6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13db8:	f7ec fef2 	bl	ba0 <Sys_GetCoreID>
   13dbc:	4603      	mov	r3, r0
   13dbe:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]--;
   13dc0:	4a0d      	ldr	r2, [pc, #52]	; (13df8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
   13dc2:	9b01      	ldr	r3, [sp, #4]
   13dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13dc8:	1e5a      	subs	r2, r3, #1
   13dca:	490b      	ldr	r1, [pc, #44]	; (13df8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
   13dcc:	9b01      	ldr	r3, [sp, #4]
   13dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   13dd2:	4a0a      	ldr	r2, [pc, #40]	; (13dfc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x48>)
   13dd4:	9b01      	ldr	r3, [sp, #4]
   13dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13dda:	f003 0301 	and.w	r3, r3, #1
   13dde:	2b00      	cmp	r3, #0
   13de0:	d106      	bne.n	13df0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
   13de2:	4a05      	ldr	r2, [pc, #20]	; (13df8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
   13de4:	9b01      	ldr	r3, [sp, #4]
   13de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13dea:	2b00      	cmp	r3, #0
   13dec:	d100      	bne.n	13df0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13dee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13df0:	bf00      	nop
   13df2:	b003      	add	sp, #12
   13df4:	f85d fb04 	ldr.w	pc, [sp], #4
   13df8:	1fff9698 	.word	0x1fff9698
   13dfc:	1fff9694 	.word	0x1fff9694

00013e00 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
   13e00:	b500      	push	{lr}
   13e02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e04:	f7ec fecc 	bl	ba0 <Sys_GetCoreID>
   13e08:	4603      	mov	r3, r0
   13e0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId])
   13e0c:	4a10      	ldr	r2, [pc, #64]	; (13e50 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
   13e0e:	9b01      	ldr	r3, [sp, #4]
   13e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e14:	2b00      	cmp	r3, #0
   13e16:	d10d      	bne.n	13e34 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13e18:	f7ec fd91 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   13e1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13e1e:	9b00      	ldr	r3, [sp, #0]
   13e20:	f003 0301 	and.w	r3, r3, #1
   13e24:	2b00      	cmp	r3, #0
   13e26:	d100      	bne.n	13e2a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13e28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   13e2a:	490a      	ldr	r1, [pc, #40]	; (13e54 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x54>)
   13e2c:	9b01      	ldr	r3, [sp, #4]
   13e2e:	9a00      	ldr	r2, [sp, #0]
   13e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]++;
   13e34:	4a06      	ldr	r2, [pc, #24]	; (13e50 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
   13e36:	9b01      	ldr	r3, [sp, #4]
   13e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e3c:	1c5a      	adds	r2, r3, #1
   13e3e:	4904      	ldr	r1, [pc, #16]	; (13e50 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
   13e40:	9b01      	ldr	r3, [sp, #4]
   13e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13e46:	bf00      	nop
   13e48:	b003      	add	sp, #12
   13e4a:	f85d fb04 	ldr.w	pc, [sp], #4
   13e4e:	bf00      	nop
   13e50:	1fff96a0 	.word	0x1fff96a0
   13e54:	1fff969c 	.word	0x1fff969c

00013e58 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
   13e58:	b500      	push	{lr}
   13e5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e5c:	f7ec fea0 	bl	ba0 <Sys_GetCoreID>
   13e60:	4603      	mov	r3, r0
   13e62:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]--;
   13e64:	4a0d      	ldr	r2, [pc, #52]	; (13e9c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
   13e66:	9b01      	ldr	r3, [sp, #4]
   13e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e6c:	1e5a      	subs	r2, r3, #1
   13e6e:	490b      	ldr	r1, [pc, #44]	; (13e9c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
   13e70:	9b01      	ldr	r3, [sp, #4]
   13e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   13e76:	4a0a      	ldr	r2, [pc, #40]	; (13ea0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x48>)
   13e78:	9b01      	ldr	r3, [sp, #4]
   13e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e7e:	f003 0301 	and.w	r3, r3, #1
   13e82:	2b00      	cmp	r3, #0
   13e84:	d106      	bne.n	13e94 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
   13e86:	4a05      	ldr	r2, [pc, #20]	; (13e9c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
   13e88:	9b01      	ldr	r3, [sp, #4]
   13e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e8e:	2b00      	cmp	r3, #0
   13e90:	d100      	bne.n	13e94 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13e92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13e94:	bf00      	nop
   13e96:	b003      	add	sp, #12
   13e98:	f85d fb04 	ldr.w	pc, [sp], #4
   13e9c:	1fff96a0 	.word	0x1fff96a0
   13ea0:	1fff969c 	.word	0x1fff969c

00013ea4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
   13ea4:	b500      	push	{lr}
   13ea6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ea8:	f7ec fe7a 	bl	ba0 <Sys_GetCoreID>
   13eac:	4603      	mov	r3, r0
   13eae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId])
   13eb0:	4a10      	ldr	r2, [pc, #64]	; (13ef4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
   13eb2:	9b01      	ldr	r3, [sp, #4]
   13eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13eb8:	2b00      	cmp	r3, #0
   13eba:	d10d      	bne.n	13ed8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13ebc:	f7ec fd3f 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   13ec0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13ec2:	9b00      	ldr	r3, [sp, #0]
   13ec4:	f003 0301 	and.w	r3, r3, #1
   13ec8:	2b00      	cmp	r3, #0
   13eca:	d100      	bne.n	13ece <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13ecc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   13ece:	490a      	ldr	r1, [pc, #40]	; (13ef8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x54>)
   13ed0:	9b01      	ldr	r3, [sp, #4]
   13ed2:	9a00      	ldr	r2, [sp, #0]
   13ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]++;
   13ed8:	4a06      	ldr	r2, [pc, #24]	; (13ef4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
   13eda:	9b01      	ldr	r3, [sp, #4]
   13edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ee0:	1c5a      	adds	r2, r3, #1
   13ee2:	4904      	ldr	r1, [pc, #16]	; (13ef4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
   13ee4:	9b01      	ldr	r3, [sp, #4]
   13ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13eea:	bf00      	nop
   13eec:	b003      	add	sp, #12
   13eee:	f85d fb04 	ldr.w	pc, [sp], #4
   13ef2:	bf00      	nop
   13ef4:	1fff96a8 	.word	0x1fff96a8
   13ef8:	1fff96a4 	.word	0x1fff96a4

00013efc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
   13efc:	b500      	push	{lr}
   13efe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f00:	f7ec fe4e 	bl	ba0 <Sys_GetCoreID>
   13f04:	4603      	mov	r3, r0
   13f06:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]--;
   13f08:	4a0d      	ldr	r2, [pc, #52]	; (13f40 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
   13f0a:	9b01      	ldr	r3, [sp, #4]
   13f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f10:	1e5a      	subs	r2, r3, #1
   13f12:	490b      	ldr	r1, [pc, #44]	; (13f40 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
   13f14:	9b01      	ldr	r3, [sp, #4]
   13f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   13f1a:	4a0a      	ldr	r2, [pc, #40]	; (13f44 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x48>)
   13f1c:	9b01      	ldr	r3, [sp, #4]
   13f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f22:	f003 0301 	and.w	r3, r3, #1
   13f26:	2b00      	cmp	r3, #0
   13f28:	d106      	bne.n	13f38 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
   13f2a:	4a05      	ldr	r2, [pc, #20]	; (13f40 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
   13f2c:	9b01      	ldr	r3, [sp, #4]
   13f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f32:	2b00      	cmp	r3, #0
   13f34:	d100      	bne.n	13f38 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13f36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13f38:	bf00      	nop
   13f3a:	b003      	add	sp, #12
   13f3c:	f85d fb04 	ldr.w	pc, [sp], #4
   13f40:	1fff96a8 	.word	0x1fff96a8
   13f44:	1fff96a4 	.word	0x1fff96a4

00013f48 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
   13f48:	b500      	push	{lr}
   13f4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f4c:	f7ec fe28 	bl	ba0 <Sys_GetCoreID>
   13f50:	4603      	mov	r3, r0
   13f52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId])
   13f54:	4a10      	ldr	r2, [pc, #64]	; (13f98 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
   13f56:	9b01      	ldr	r3, [sp, #4]
   13f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f5c:	2b00      	cmp	r3, #0
   13f5e:	d10d      	bne.n	13f7c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13f60:	f7ec fced 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   13f64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13f66:	9b00      	ldr	r3, [sp, #0]
   13f68:	f003 0301 	and.w	r3, r3, #1
   13f6c:	2b00      	cmp	r3, #0
   13f6e:	d100      	bne.n	13f72 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13f70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   13f72:	490a      	ldr	r1, [pc, #40]	; (13f9c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x54>)
   13f74:	9b01      	ldr	r3, [sp, #4]
   13f76:	9a00      	ldr	r2, [sp, #0]
   13f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]++;
   13f7c:	4a06      	ldr	r2, [pc, #24]	; (13f98 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
   13f7e:	9b01      	ldr	r3, [sp, #4]
   13f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f84:	1c5a      	adds	r2, r3, #1
   13f86:	4904      	ldr	r1, [pc, #16]	; (13f98 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
   13f88:	9b01      	ldr	r3, [sp, #4]
   13f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13f8e:	bf00      	nop
   13f90:	b003      	add	sp, #12
   13f92:	f85d fb04 	ldr.w	pc, [sp], #4
   13f96:	bf00      	nop
   13f98:	1fff96b0 	.word	0x1fff96b0
   13f9c:	1fff96ac 	.word	0x1fff96ac

00013fa0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
   13fa0:	b500      	push	{lr}
   13fa2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13fa4:	f7ec fdfc 	bl	ba0 <Sys_GetCoreID>
   13fa8:	4603      	mov	r3, r0
   13faa:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]--;
   13fac:	4a0d      	ldr	r2, [pc, #52]	; (13fe4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
   13fae:	9b01      	ldr	r3, [sp, #4]
   13fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fb4:	1e5a      	subs	r2, r3, #1
   13fb6:	490b      	ldr	r1, [pc, #44]	; (13fe4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
   13fb8:	9b01      	ldr	r3, [sp, #4]
   13fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   13fbe:	4a0a      	ldr	r2, [pc, #40]	; (13fe8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x48>)
   13fc0:	9b01      	ldr	r3, [sp, #4]
   13fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fc6:	f003 0301 	and.w	r3, r3, #1
   13fca:	2b00      	cmp	r3, #0
   13fcc:	d106      	bne.n	13fdc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
   13fce:	4a05      	ldr	r2, [pc, #20]	; (13fe4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
   13fd0:	9b01      	ldr	r3, [sp, #4]
   13fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fd6:	2b00      	cmp	r3, #0
   13fd8:	d100      	bne.n	13fdc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13fda:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13fdc:	bf00      	nop
   13fde:	b003      	add	sp, #12
   13fe0:	f85d fb04 	ldr.w	pc, [sp], #4
   13fe4:	1fff96b0 	.word	0x1fff96b0
   13fe8:	1fff96ac 	.word	0x1fff96ac

00013fec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
   13fec:	b500      	push	{lr}
   13fee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ff0:	f7ec fdd6 	bl	ba0 <Sys_GetCoreID>
   13ff4:	4603      	mov	r3, r0
   13ff6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId])
   13ff8:	4a10      	ldr	r2, [pc, #64]	; (1403c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
   13ffa:	9b01      	ldr	r3, [sp, #4]
   13ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14000:	2b00      	cmp	r3, #0
   14002:	d10d      	bne.n	14020 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14004:	f7ec fc9b 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   14008:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1400a:	9b00      	ldr	r3, [sp, #0]
   1400c:	f003 0301 	and.w	r3, r3, #1
   14010:	2b00      	cmp	r3, #0
   14012:	d100      	bne.n	14016 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14014:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   14016:	490a      	ldr	r1, [pc, #40]	; (14040 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x54>)
   14018:	9b01      	ldr	r3, [sp, #4]
   1401a:	9a00      	ldr	r2, [sp, #0]
   1401c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]++;
   14020:	4a06      	ldr	r2, [pc, #24]	; (1403c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
   14022:	9b01      	ldr	r3, [sp, #4]
   14024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14028:	1c5a      	adds	r2, r3, #1
   1402a:	4904      	ldr	r1, [pc, #16]	; (1403c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
   1402c:	9b01      	ldr	r3, [sp, #4]
   1402e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14032:	bf00      	nop
   14034:	b003      	add	sp, #12
   14036:	f85d fb04 	ldr.w	pc, [sp], #4
   1403a:	bf00      	nop
   1403c:	1fff96b8 	.word	0x1fff96b8
   14040:	1fff96b4 	.word	0x1fff96b4

00014044 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
   14044:	b500      	push	{lr}
   14046:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14048:	f7ec fdaa 	bl	ba0 <Sys_GetCoreID>
   1404c:	4603      	mov	r3, r0
   1404e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]--;
   14050:	4a0d      	ldr	r2, [pc, #52]	; (14088 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
   14052:	9b01      	ldr	r3, [sp, #4]
   14054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14058:	1e5a      	subs	r2, r3, #1
   1405a:	490b      	ldr	r1, [pc, #44]	; (14088 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
   1405c:	9b01      	ldr	r3, [sp, #4]
   1405e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   14062:	4a0a      	ldr	r2, [pc, #40]	; (1408c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x48>)
   14064:	9b01      	ldr	r3, [sp, #4]
   14066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1406a:	f003 0301 	and.w	r3, r3, #1
   1406e:	2b00      	cmp	r3, #0
   14070:	d106      	bne.n	14080 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
   14072:	4a05      	ldr	r2, [pc, #20]	; (14088 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
   14074:	9b01      	ldr	r3, [sp, #4]
   14076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1407a:	2b00      	cmp	r3, #0
   1407c:	d100      	bne.n	14080 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1407e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14080:	bf00      	nop
   14082:	b003      	add	sp, #12
   14084:	f85d fb04 	ldr.w	pc, [sp], #4
   14088:	1fff96b8 	.word	0x1fff96b8
   1408c:	1fff96b4 	.word	0x1fff96b4

00014090 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
   14090:	b500      	push	{lr}
   14092:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14094:	f7ec fd84 	bl	ba0 <Sys_GetCoreID>
   14098:	4603      	mov	r3, r0
   1409a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId])
   1409c:	4a10      	ldr	r2, [pc, #64]	; (140e0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
   1409e:	9b01      	ldr	r3, [sp, #4]
   140a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140a4:	2b00      	cmp	r3, #0
   140a6:	d10d      	bne.n	140c4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   140a8:	f7ec fc49 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   140ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   140ae:	9b00      	ldr	r3, [sp, #0]
   140b0:	f003 0301 	and.w	r3, r3, #1
   140b4:	2b00      	cmp	r3, #0
   140b6:	d100      	bne.n	140ba <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   140b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   140ba:	490a      	ldr	r1, [pc, #40]	; (140e4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x54>)
   140bc:	9b01      	ldr	r3, [sp, #4]
   140be:	9a00      	ldr	r2, [sp, #0]
   140c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]++;
   140c4:	4a06      	ldr	r2, [pc, #24]	; (140e0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
   140c6:	9b01      	ldr	r3, [sp, #4]
   140c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140cc:	1c5a      	adds	r2, r3, #1
   140ce:	4904      	ldr	r1, [pc, #16]	; (140e0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
   140d0:	9b01      	ldr	r3, [sp, #4]
   140d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   140d6:	bf00      	nop
   140d8:	b003      	add	sp, #12
   140da:	f85d fb04 	ldr.w	pc, [sp], #4
   140de:	bf00      	nop
   140e0:	1fff96c0 	.word	0x1fff96c0
   140e4:	1fff96bc 	.word	0x1fff96bc

000140e8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
   140e8:	b500      	push	{lr}
   140ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   140ec:	f7ec fd58 	bl	ba0 <Sys_GetCoreID>
   140f0:	4603      	mov	r3, r0
   140f2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]--;
   140f4:	4a0d      	ldr	r2, [pc, #52]	; (1412c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
   140f6:	9b01      	ldr	r3, [sp, #4]
   140f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140fc:	1e5a      	subs	r2, r3, #1
   140fe:	490b      	ldr	r1, [pc, #44]	; (1412c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
   14100:	9b01      	ldr	r3, [sp, #4]
   14102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   14106:	4a0a      	ldr	r2, [pc, #40]	; (14130 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x48>)
   14108:	9b01      	ldr	r3, [sp, #4]
   1410a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1410e:	f003 0301 	and.w	r3, r3, #1
   14112:	2b00      	cmp	r3, #0
   14114:	d106      	bne.n	14124 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
   14116:	4a05      	ldr	r2, [pc, #20]	; (1412c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
   14118:	9b01      	ldr	r3, [sp, #4]
   1411a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1411e:	2b00      	cmp	r3, #0
   14120:	d100      	bne.n	14124 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14122:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14124:	bf00      	nop
   14126:	b003      	add	sp, #12
   14128:	f85d fb04 	ldr.w	pc, [sp], #4
   1412c:	1fff96c0 	.word	0x1fff96c0
   14130:	1fff96bc 	.word	0x1fff96bc

00014134 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
   14134:	b500      	push	{lr}
   14136:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14138:	f7ec fd32 	bl	ba0 <Sys_GetCoreID>
   1413c:	4603      	mov	r3, r0
   1413e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId])
   14140:	4a10      	ldr	r2, [pc, #64]	; (14184 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
   14142:	9b01      	ldr	r3, [sp, #4]
   14144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14148:	2b00      	cmp	r3, #0
   1414a:	d10d      	bne.n	14168 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1414c:	f7ec fbf7 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   14150:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14152:	9b00      	ldr	r3, [sp, #0]
   14154:	f003 0301 	and.w	r3, r3, #1
   14158:	2b00      	cmp	r3, #0
   1415a:	d100      	bne.n	1415e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1415c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   1415e:	490a      	ldr	r1, [pc, #40]	; (14188 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x54>)
   14160:	9b01      	ldr	r3, [sp, #4]
   14162:	9a00      	ldr	r2, [sp, #0]
   14164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]++;
   14168:	4a06      	ldr	r2, [pc, #24]	; (14184 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
   1416a:	9b01      	ldr	r3, [sp, #4]
   1416c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14170:	1c5a      	adds	r2, r3, #1
   14172:	4904      	ldr	r1, [pc, #16]	; (14184 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
   14174:	9b01      	ldr	r3, [sp, #4]
   14176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1417a:	bf00      	nop
   1417c:	b003      	add	sp, #12
   1417e:	f85d fb04 	ldr.w	pc, [sp], #4
   14182:	bf00      	nop
   14184:	1fff96c8 	.word	0x1fff96c8
   14188:	1fff96c4 	.word	0x1fff96c4

0001418c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
   1418c:	b500      	push	{lr}
   1418e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14190:	f7ec fd06 	bl	ba0 <Sys_GetCoreID>
   14194:	4603      	mov	r3, r0
   14196:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]--;
   14198:	4a0d      	ldr	r2, [pc, #52]	; (141d0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
   1419a:	9b01      	ldr	r3, [sp, #4]
   1419c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141a0:	1e5a      	subs	r2, r3, #1
   141a2:	490b      	ldr	r1, [pc, #44]	; (141d0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
   141a4:	9b01      	ldr	r3, [sp, #4]
   141a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   141aa:	4a0a      	ldr	r2, [pc, #40]	; (141d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x48>)
   141ac:	9b01      	ldr	r3, [sp, #4]
   141ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141b2:	f003 0301 	and.w	r3, r3, #1
   141b6:	2b00      	cmp	r3, #0
   141b8:	d106      	bne.n	141c8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
   141ba:	4a05      	ldr	r2, [pc, #20]	; (141d0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
   141bc:	9b01      	ldr	r3, [sp, #4]
   141be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141c2:	2b00      	cmp	r3, #0
   141c4:	d100      	bne.n	141c8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   141c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   141c8:	bf00      	nop
   141ca:	b003      	add	sp, #12
   141cc:	f85d fb04 	ldr.w	pc, [sp], #4
   141d0:	1fff96c8 	.word	0x1fff96c8
   141d4:	1fff96c4 	.word	0x1fff96c4

000141d8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
   141d8:	b500      	push	{lr}
   141da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   141dc:	f7ec fce0 	bl	ba0 <Sys_GetCoreID>
   141e0:	4603      	mov	r3, r0
   141e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId])
   141e4:	4a10      	ldr	r2, [pc, #64]	; (14228 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
   141e6:	9b01      	ldr	r3, [sp, #4]
   141e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141ec:	2b00      	cmp	r3, #0
   141ee:	d10d      	bne.n	1420c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   141f0:	f7ec fba5 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   141f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   141f6:	9b00      	ldr	r3, [sp, #0]
   141f8:	f003 0301 	and.w	r3, r3, #1
   141fc:	2b00      	cmp	r3, #0
   141fe:	d100      	bne.n	14202 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14200:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   14202:	490a      	ldr	r1, [pc, #40]	; (1422c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x54>)
   14204:	9b01      	ldr	r3, [sp, #4]
   14206:	9a00      	ldr	r2, [sp, #0]
   14208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]++;
   1420c:	4a06      	ldr	r2, [pc, #24]	; (14228 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
   1420e:	9b01      	ldr	r3, [sp, #4]
   14210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14214:	1c5a      	adds	r2, r3, #1
   14216:	4904      	ldr	r1, [pc, #16]	; (14228 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
   14218:	9b01      	ldr	r3, [sp, #4]
   1421a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1421e:	bf00      	nop
   14220:	b003      	add	sp, #12
   14222:	f85d fb04 	ldr.w	pc, [sp], #4
   14226:	bf00      	nop
   14228:	1fff96d0 	.word	0x1fff96d0
   1422c:	1fff96cc 	.word	0x1fff96cc

00014230 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
   14230:	b500      	push	{lr}
   14232:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14234:	f7ec fcb4 	bl	ba0 <Sys_GetCoreID>
   14238:	4603      	mov	r3, r0
   1423a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]--;
   1423c:	4a0d      	ldr	r2, [pc, #52]	; (14274 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
   1423e:	9b01      	ldr	r3, [sp, #4]
   14240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14244:	1e5a      	subs	r2, r3, #1
   14246:	490b      	ldr	r1, [pc, #44]	; (14274 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
   14248:	9b01      	ldr	r3, [sp, #4]
   1424a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   1424e:	4a0a      	ldr	r2, [pc, #40]	; (14278 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x48>)
   14250:	9b01      	ldr	r3, [sp, #4]
   14252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14256:	f003 0301 	and.w	r3, r3, #1
   1425a:	2b00      	cmp	r3, #0
   1425c:	d106      	bne.n	1426c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
   1425e:	4a05      	ldr	r2, [pc, #20]	; (14274 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
   14260:	9b01      	ldr	r3, [sp, #4]
   14262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14266:	2b00      	cmp	r3, #0
   14268:	d100      	bne.n	1426c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1426a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1426c:	bf00      	nop
   1426e:	b003      	add	sp, #12
   14270:	f85d fb04 	ldr.w	pc, [sp], #4
   14274:	1fff96d0 	.word	0x1fff96d0
   14278:	1fff96cc 	.word	0x1fff96cc

0001427c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
   1427c:	b500      	push	{lr}
   1427e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14280:	f7ec fc8e 	bl	ba0 <Sys_GetCoreID>
   14284:	4603      	mov	r3, r0
   14286:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId])
   14288:	4a10      	ldr	r2, [pc, #64]	; (142cc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
   1428a:	9b01      	ldr	r3, [sp, #4]
   1428c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14290:	2b00      	cmp	r3, #0
   14292:	d10d      	bne.n	142b0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14294:	f7ec fb53 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   14298:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1429a:	9b00      	ldr	r3, [sp, #0]
   1429c:	f003 0301 	and.w	r3, r3, #1
   142a0:	2b00      	cmp	r3, #0
   142a2:	d100      	bne.n	142a6 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   142a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   142a6:	490a      	ldr	r1, [pc, #40]	; (142d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x54>)
   142a8:	9b01      	ldr	r3, [sp, #4]
   142aa:	9a00      	ldr	r2, [sp, #0]
   142ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]++;
   142b0:	4a06      	ldr	r2, [pc, #24]	; (142cc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
   142b2:	9b01      	ldr	r3, [sp, #4]
   142b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142b8:	1c5a      	adds	r2, r3, #1
   142ba:	4904      	ldr	r1, [pc, #16]	; (142cc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
   142bc:	9b01      	ldr	r3, [sp, #4]
   142be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   142c2:	bf00      	nop
   142c4:	b003      	add	sp, #12
   142c6:	f85d fb04 	ldr.w	pc, [sp], #4
   142ca:	bf00      	nop
   142cc:	1fff96d8 	.word	0x1fff96d8
   142d0:	1fff96d4 	.word	0x1fff96d4

000142d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
   142d4:	b500      	push	{lr}
   142d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   142d8:	f7ec fc62 	bl	ba0 <Sys_GetCoreID>
   142dc:	4603      	mov	r3, r0
   142de:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]--;
   142e0:	4a0d      	ldr	r2, [pc, #52]	; (14318 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
   142e2:	9b01      	ldr	r3, [sp, #4]
   142e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142e8:	1e5a      	subs	r2, r3, #1
   142ea:	490b      	ldr	r1, [pc, #44]	; (14318 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
   142ec:	9b01      	ldr	r3, [sp, #4]
   142ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   142f2:	4a0a      	ldr	r2, [pc, #40]	; (1431c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x48>)
   142f4:	9b01      	ldr	r3, [sp, #4]
   142f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142fa:	f003 0301 	and.w	r3, r3, #1
   142fe:	2b00      	cmp	r3, #0
   14300:	d106      	bne.n	14310 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
   14302:	4a05      	ldr	r2, [pc, #20]	; (14318 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
   14304:	9b01      	ldr	r3, [sp, #4]
   14306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1430a:	2b00      	cmp	r3, #0
   1430c:	d100      	bne.n	14310 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1430e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14310:	bf00      	nop
   14312:	b003      	add	sp, #12
   14314:	f85d fb04 	ldr.w	pc, [sp], #4
   14318:	1fff96d8 	.word	0x1fff96d8
   1431c:	1fff96d4 	.word	0x1fff96d4

00014320 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
   14320:	b500      	push	{lr}
   14322:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14324:	f7ec fc3c 	bl	ba0 <Sys_GetCoreID>
   14328:	4603      	mov	r3, r0
   1432a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId])
   1432c:	4a10      	ldr	r2, [pc, #64]	; (14370 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
   1432e:	9b01      	ldr	r3, [sp, #4]
   14330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14334:	2b00      	cmp	r3, #0
   14336:	d10d      	bne.n	14354 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14338:	f7ec fb01 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   1433c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1433e:	9b00      	ldr	r3, [sp, #0]
   14340:	f003 0301 	and.w	r3, r3, #1
   14344:	2b00      	cmp	r3, #0
   14346:	d100      	bne.n	1434a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14348:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   1434a:	490a      	ldr	r1, [pc, #40]	; (14374 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x54>)
   1434c:	9b01      	ldr	r3, [sp, #4]
   1434e:	9a00      	ldr	r2, [sp, #0]
   14350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]++;
   14354:	4a06      	ldr	r2, [pc, #24]	; (14370 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
   14356:	9b01      	ldr	r3, [sp, #4]
   14358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1435c:	1c5a      	adds	r2, r3, #1
   1435e:	4904      	ldr	r1, [pc, #16]	; (14370 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
   14360:	9b01      	ldr	r3, [sp, #4]
   14362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14366:	bf00      	nop
   14368:	b003      	add	sp, #12
   1436a:	f85d fb04 	ldr.w	pc, [sp], #4
   1436e:	bf00      	nop
   14370:	1fff96e0 	.word	0x1fff96e0
   14374:	1fff96dc 	.word	0x1fff96dc

00014378 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
   14378:	b500      	push	{lr}
   1437a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1437c:	f7ec fc10 	bl	ba0 <Sys_GetCoreID>
   14380:	4603      	mov	r3, r0
   14382:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]--;
   14384:	4a0d      	ldr	r2, [pc, #52]	; (143bc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
   14386:	9b01      	ldr	r3, [sp, #4]
   14388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1438c:	1e5a      	subs	r2, r3, #1
   1438e:	490b      	ldr	r1, [pc, #44]	; (143bc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
   14390:	9b01      	ldr	r3, [sp, #4]
   14392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   14396:	4a0a      	ldr	r2, [pc, #40]	; (143c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x48>)
   14398:	9b01      	ldr	r3, [sp, #4]
   1439a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1439e:	f003 0301 	and.w	r3, r3, #1
   143a2:	2b00      	cmp	r3, #0
   143a4:	d106      	bne.n	143b4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
   143a6:	4a05      	ldr	r2, [pc, #20]	; (143bc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
   143a8:	9b01      	ldr	r3, [sp, #4]
   143aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143ae:	2b00      	cmp	r3, #0
   143b0:	d100      	bne.n	143b4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   143b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   143b4:	bf00      	nop
   143b6:	b003      	add	sp, #12
   143b8:	f85d fb04 	ldr.w	pc, [sp], #4
   143bc:	1fff96e0 	.word	0x1fff96e0
   143c0:	1fff96dc 	.word	0x1fff96dc

000143c4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
   143c4:	b500      	push	{lr}
   143c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   143c8:	f7ec fbea 	bl	ba0 <Sys_GetCoreID>
   143cc:	4603      	mov	r3, r0
   143ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId])
   143d0:	4a10      	ldr	r2, [pc, #64]	; (14414 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
   143d2:	9b01      	ldr	r3, [sp, #4]
   143d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143d8:	2b00      	cmp	r3, #0
   143da:	d10d      	bne.n	143f8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   143dc:	f7ec faaf 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   143e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   143e2:	9b00      	ldr	r3, [sp, #0]
   143e4:	f003 0301 	and.w	r3, r3, #1
   143e8:	2b00      	cmp	r3, #0
   143ea:	d100      	bne.n	143ee <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   143ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   143ee:	490a      	ldr	r1, [pc, #40]	; (14418 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x54>)
   143f0:	9b01      	ldr	r3, [sp, #4]
   143f2:	9a00      	ldr	r2, [sp, #0]
   143f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]++;
   143f8:	4a06      	ldr	r2, [pc, #24]	; (14414 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
   143fa:	9b01      	ldr	r3, [sp, #4]
   143fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14400:	1c5a      	adds	r2, r3, #1
   14402:	4904      	ldr	r1, [pc, #16]	; (14414 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
   14404:	9b01      	ldr	r3, [sp, #4]
   14406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1440a:	bf00      	nop
   1440c:	b003      	add	sp, #12
   1440e:	f85d fb04 	ldr.w	pc, [sp], #4
   14412:	bf00      	nop
   14414:	1fff96e8 	.word	0x1fff96e8
   14418:	1fff96e4 	.word	0x1fff96e4

0001441c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
   1441c:	b500      	push	{lr}
   1441e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14420:	f7ec fbbe 	bl	ba0 <Sys_GetCoreID>
   14424:	4603      	mov	r3, r0
   14426:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]--;
   14428:	4a0d      	ldr	r2, [pc, #52]	; (14460 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
   1442a:	9b01      	ldr	r3, [sp, #4]
   1442c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14430:	1e5a      	subs	r2, r3, #1
   14432:	490b      	ldr	r1, [pc, #44]	; (14460 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
   14434:	9b01      	ldr	r3, [sp, #4]
   14436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   1443a:	4a0a      	ldr	r2, [pc, #40]	; (14464 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x48>)
   1443c:	9b01      	ldr	r3, [sp, #4]
   1443e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14442:	f003 0301 	and.w	r3, r3, #1
   14446:	2b00      	cmp	r3, #0
   14448:	d106      	bne.n	14458 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
   1444a:	4a05      	ldr	r2, [pc, #20]	; (14460 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
   1444c:	9b01      	ldr	r3, [sp, #4]
   1444e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14452:	2b00      	cmp	r3, #0
   14454:	d100      	bne.n	14458 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14456:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14458:	bf00      	nop
   1445a:	b003      	add	sp, #12
   1445c:	f85d fb04 	ldr.w	pc, [sp], #4
   14460:	1fff96e8 	.word	0x1fff96e8
   14464:	1fff96e4 	.word	0x1fff96e4

00014468 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
   14468:	b500      	push	{lr}
   1446a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1446c:	f7ec fb98 	bl	ba0 <Sys_GetCoreID>
   14470:	4603      	mov	r3, r0
   14472:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId])
   14474:	4a10      	ldr	r2, [pc, #64]	; (144b8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
   14476:	9b01      	ldr	r3, [sp, #4]
   14478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1447c:	2b00      	cmp	r3, #0
   1447e:	d10d      	bne.n	1449c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14480:	f7ec fa5d 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   14484:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14486:	9b00      	ldr	r3, [sp, #0]
   14488:	f003 0301 	and.w	r3, r3, #1
   1448c:	2b00      	cmp	r3, #0
   1448e:	d100      	bne.n	14492 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14490:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   14492:	490a      	ldr	r1, [pc, #40]	; (144bc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x54>)
   14494:	9b01      	ldr	r3, [sp, #4]
   14496:	9a00      	ldr	r2, [sp, #0]
   14498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]++;
   1449c:	4a06      	ldr	r2, [pc, #24]	; (144b8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
   1449e:	9b01      	ldr	r3, [sp, #4]
   144a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144a4:	1c5a      	adds	r2, r3, #1
   144a6:	4904      	ldr	r1, [pc, #16]	; (144b8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
   144a8:	9b01      	ldr	r3, [sp, #4]
   144aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   144ae:	bf00      	nop
   144b0:	b003      	add	sp, #12
   144b2:	f85d fb04 	ldr.w	pc, [sp], #4
   144b6:	bf00      	nop
   144b8:	1fff96f0 	.word	0x1fff96f0
   144bc:	1fff96ec 	.word	0x1fff96ec

000144c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
   144c0:	b500      	push	{lr}
   144c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   144c4:	f7ec fb6c 	bl	ba0 <Sys_GetCoreID>
   144c8:	4603      	mov	r3, r0
   144ca:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]--;
   144cc:	4a0d      	ldr	r2, [pc, #52]	; (14504 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
   144ce:	9b01      	ldr	r3, [sp, #4]
   144d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144d4:	1e5a      	subs	r2, r3, #1
   144d6:	490b      	ldr	r1, [pc, #44]	; (14504 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
   144d8:	9b01      	ldr	r3, [sp, #4]
   144da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   144de:	4a0a      	ldr	r2, [pc, #40]	; (14508 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x48>)
   144e0:	9b01      	ldr	r3, [sp, #4]
   144e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144e6:	f003 0301 	and.w	r3, r3, #1
   144ea:	2b00      	cmp	r3, #0
   144ec:	d106      	bne.n	144fc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
   144ee:	4a05      	ldr	r2, [pc, #20]	; (14504 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
   144f0:	9b01      	ldr	r3, [sp, #4]
   144f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144f6:	2b00      	cmp	r3, #0
   144f8:	d100      	bne.n	144fc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   144fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   144fc:	bf00      	nop
   144fe:	b003      	add	sp, #12
   14500:	f85d fb04 	ldr.w	pc, [sp], #4
   14504:	1fff96f0 	.word	0x1fff96f0
   14508:	1fff96ec 	.word	0x1fff96ec

0001450c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
   1450c:	b500      	push	{lr}
   1450e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14510:	f7ec fb46 	bl	ba0 <Sys_GetCoreID>
   14514:	4603      	mov	r3, r0
   14516:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId])
   14518:	4a10      	ldr	r2, [pc, #64]	; (1455c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
   1451a:	9b01      	ldr	r3, [sp, #4]
   1451c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14520:	2b00      	cmp	r3, #0
   14522:	d10d      	bne.n	14540 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14524:	f7ec fa0b 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   14528:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1452a:	9b00      	ldr	r3, [sp, #0]
   1452c:	f003 0301 	and.w	r3, r3, #1
   14530:	2b00      	cmp	r3, #0
   14532:	d100      	bne.n	14536 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14534:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   14536:	490a      	ldr	r1, [pc, #40]	; (14560 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x54>)
   14538:	9b01      	ldr	r3, [sp, #4]
   1453a:	9a00      	ldr	r2, [sp, #0]
   1453c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]++;
   14540:	4a06      	ldr	r2, [pc, #24]	; (1455c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
   14542:	9b01      	ldr	r3, [sp, #4]
   14544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14548:	1c5a      	adds	r2, r3, #1
   1454a:	4904      	ldr	r1, [pc, #16]	; (1455c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
   1454c:	9b01      	ldr	r3, [sp, #4]
   1454e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14552:	bf00      	nop
   14554:	b003      	add	sp, #12
   14556:	f85d fb04 	ldr.w	pc, [sp], #4
   1455a:	bf00      	nop
   1455c:	1fff96f8 	.word	0x1fff96f8
   14560:	1fff96f4 	.word	0x1fff96f4

00014564 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
   14564:	b500      	push	{lr}
   14566:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14568:	f7ec fb1a 	bl	ba0 <Sys_GetCoreID>
   1456c:	4603      	mov	r3, r0
   1456e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]--;
   14570:	4a0d      	ldr	r2, [pc, #52]	; (145a8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
   14572:	9b01      	ldr	r3, [sp, #4]
   14574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14578:	1e5a      	subs	r2, r3, #1
   1457a:	490b      	ldr	r1, [pc, #44]	; (145a8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
   1457c:	9b01      	ldr	r3, [sp, #4]
   1457e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   14582:	4a0a      	ldr	r2, [pc, #40]	; (145ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x48>)
   14584:	9b01      	ldr	r3, [sp, #4]
   14586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1458a:	f003 0301 	and.w	r3, r3, #1
   1458e:	2b00      	cmp	r3, #0
   14590:	d106      	bne.n	145a0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
   14592:	4a05      	ldr	r2, [pc, #20]	; (145a8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
   14594:	9b01      	ldr	r3, [sp, #4]
   14596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1459a:	2b00      	cmp	r3, #0
   1459c:	d100      	bne.n	145a0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1459e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   145a0:	bf00      	nop
   145a2:	b003      	add	sp, #12
   145a4:	f85d fb04 	ldr.w	pc, [sp], #4
   145a8:	1fff96f8 	.word	0x1fff96f8
   145ac:	1fff96f4 	.word	0x1fff96f4

000145b0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
   145b0:	b500      	push	{lr}
   145b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   145b4:	f7ec faf4 	bl	ba0 <Sys_GetCoreID>
   145b8:	4603      	mov	r3, r0
   145ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId])
   145bc:	4a10      	ldr	r2, [pc, #64]	; (14600 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
   145be:	9b01      	ldr	r3, [sp, #4]
   145c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145c4:	2b00      	cmp	r3, #0
   145c6:	d10d      	bne.n	145e4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   145c8:	f7ec f9b9 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   145cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   145ce:	9b00      	ldr	r3, [sp, #0]
   145d0:	f003 0301 	and.w	r3, r3, #1
   145d4:	2b00      	cmp	r3, #0
   145d6:	d100      	bne.n	145da <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   145d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   145da:	490a      	ldr	r1, [pc, #40]	; (14604 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x54>)
   145dc:	9b01      	ldr	r3, [sp, #4]
   145de:	9a00      	ldr	r2, [sp, #0]
   145e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]++;
   145e4:	4a06      	ldr	r2, [pc, #24]	; (14600 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
   145e6:	9b01      	ldr	r3, [sp, #4]
   145e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145ec:	1c5a      	adds	r2, r3, #1
   145ee:	4904      	ldr	r1, [pc, #16]	; (14600 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
   145f0:	9b01      	ldr	r3, [sp, #4]
   145f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   145f6:	bf00      	nop
   145f8:	b003      	add	sp, #12
   145fa:	f85d fb04 	ldr.w	pc, [sp], #4
   145fe:	bf00      	nop
   14600:	1fff9700 	.word	0x1fff9700
   14604:	1fff96fc 	.word	0x1fff96fc

00014608 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
   14608:	b500      	push	{lr}
   1460a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1460c:	f7ec fac8 	bl	ba0 <Sys_GetCoreID>
   14610:	4603      	mov	r3, r0
   14612:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]--;
   14614:	4a0d      	ldr	r2, [pc, #52]	; (1464c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
   14616:	9b01      	ldr	r3, [sp, #4]
   14618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1461c:	1e5a      	subs	r2, r3, #1
   1461e:	490b      	ldr	r1, [pc, #44]	; (1464c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
   14620:	9b01      	ldr	r3, [sp, #4]
   14622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   14626:	4a0a      	ldr	r2, [pc, #40]	; (14650 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x48>)
   14628:	9b01      	ldr	r3, [sp, #4]
   1462a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1462e:	f003 0301 	and.w	r3, r3, #1
   14632:	2b00      	cmp	r3, #0
   14634:	d106      	bne.n	14644 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
   14636:	4a05      	ldr	r2, [pc, #20]	; (1464c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
   14638:	9b01      	ldr	r3, [sp, #4]
   1463a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1463e:	2b00      	cmp	r3, #0
   14640:	d100      	bne.n	14644 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14642:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14644:	bf00      	nop
   14646:	b003      	add	sp, #12
   14648:	f85d fb04 	ldr.w	pc, [sp], #4
   1464c:	1fff9700 	.word	0x1fff9700
   14650:	1fff96fc 	.word	0x1fff96fc

00014654 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
   14654:	b500      	push	{lr}
   14656:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14658:	f7ec faa2 	bl	ba0 <Sys_GetCoreID>
   1465c:	4603      	mov	r3, r0
   1465e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId])
   14660:	4a10      	ldr	r2, [pc, #64]	; (146a4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
   14662:	9b01      	ldr	r3, [sp, #4]
   14664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14668:	2b00      	cmp	r3, #0
   1466a:	d10d      	bne.n	14688 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1466c:	f7ec f967 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   14670:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14672:	9b00      	ldr	r3, [sp, #0]
   14674:	f003 0301 	and.w	r3, r3, #1
   14678:	2b00      	cmp	r3, #0
   1467a:	d100      	bne.n	1467e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1467c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   1467e:	490a      	ldr	r1, [pc, #40]	; (146a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x54>)
   14680:	9b01      	ldr	r3, [sp, #4]
   14682:	9a00      	ldr	r2, [sp, #0]
   14684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]++;
   14688:	4a06      	ldr	r2, [pc, #24]	; (146a4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
   1468a:	9b01      	ldr	r3, [sp, #4]
   1468c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14690:	1c5a      	adds	r2, r3, #1
   14692:	4904      	ldr	r1, [pc, #16]	; (146a4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
   14694:	9b01      	ldr	r3, [sp, #4]
   14696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1469a:	bf00      	nop
   1469c:	b003      	add	sp, #12
   1469e:	f85d fb04 	ldr.w	pc, [sp], #4
   146a2:	bf00      	nop
   146a4:	1fff9708 	.word	0x1fff9708
   146a8:	1fff9704 	.word	0x1fff9704

000146ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
   146ac:	b500      	push	{lr}
   146ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   146b0:	f7ec fa76 	bl	ba0 <Sys_GetCoreID>
   146b4:	4603      	mov	r3, r0
   146b6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]--;
   146b8:	4a0d      	ldr	r2, [pc, #52]	; (146f0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
   146ba:	9b01      	ldr	r3, [sp, #4]
   146bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146c0:	1e5a      	subs	r2, r3, #1
   146c2:	490b      	ldr	r1, [pc, #44]	; (146f0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
   146c4:	9b01      	ldr	r3, [sp, #4]
   146c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   146ca:	4a0a      	ldr	r2, [pc, #40]	; (146f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x48>)
   146cc:	9b01      	ldr	r3, [sp, #4]
   146ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146d2:	f003 0301 	and.w	r3, r3, #1
   146d6:	2b00      	cmp	r3, #0
   146d8:	d106      	bne.n	146e8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
   146da:	4a05      	ldr	r2, [pc, #20]	; (146f0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
   146dc:	9b01      	ldr	r3, [sp, #4]
   146de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146e2:	2b00      	cmp	r3, #0
   146e4:	d100      	bne.n	146e8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   146e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   146e8:	bf00      	nop
   146ea:	b003      	add	sp, #12
   146ec:	f85d fb04 	ldr.w	pc, [sp], #4
   146f0:	1fff9708 	.word	0x1fff9708
   146f4:	1fff9704 	.word	0x1fff9704

000146f8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
   146f8:	b500      	push	{lr}
   146fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   146fc:	f7ec fa50 	bl	ba0 <Sys_GetCoreID>
   14700:	4603      	mov	r3, r0
   14702:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId])
   14704:	4a10      	ldr	r2, [pc, #64]	; (14748 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
   14706:	9b01      	ldr	r3, [sp, #4]
   14708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1470c:	2b00      	cmp	r3, #0
   1470e:	d10d      	bne.n	1472c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14710:	f7ec f915 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   14714:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14716:	9b00      	ldr	r3, [sp, #0]
   14718:	f003 0301 	and.w	r3, r3, #1
   1471c:	2b00      	cmp	r3, #0
   1471e:	d100      	bne.n	14722 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14720:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   14722:	490a      	ldr	r1, [pc, #40]	; (1474c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x54>)
   14724:	9b01      	ldr	r3, [sp, #4]
   14726:	9a00      	ldr	r2, [sp, #0]
   14728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]++;
   1472c:	4a06      	ldr	r2, [pc, #24]	; (14748 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
   1472e:	9b01      	ldr	r3, [sp, #4]
   14730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14734:	1c5a      	adds	r2, r3, #1
   14736:	4904      	ldr	r1, [pc, #16]	; (14748 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
   14738:	9b01      	ldr	r3, [sp, #4]
   1473a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1473e:	bf00      	nop
   14740:	b003      	add	sp, #12
   14742:	f85d fb04 	ldr.w	pc, [sp], #4
   14746:	bf00      	nop
   14748:	1fff9710 	.word	0x1fff9710
   1474c:	1fff970c 	.word	0x1fff970c

00014750 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
   14750:	b500      	push	{lr}
   14752:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14754:	f7ec fa24 	bl	ba0 <Sys_GetCoreID>
   14758:	4603      	mov	r3, r0
   1475a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]--;
   1475c:	4a0d      	ldr	r2, [pc, #52]	; (14794 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
   1475e:	9b01      	ldr	r3, [sp, #4]
   14760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14764:	1e5a      	subs	r2, r3, #1
   14766:	490b      	ldr	r1, [pc, #44]	; (14794 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
   14768:	9b01      	ldr	r3, [sp, #4]
   1476a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   1476e:	4a0a      	ldr	r2, [pc, #40]	; (14798 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x48>)
   14770:	9b01      	ldr	r3, [sp, #4]
   14772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14776:	f003 0301 	and.w	r3, r3, #1
   1477a:	2b00      	cmp	r3, #0
   1477c:	d106      	bne.n	1478c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
   1477e:	4a05      	ldr	r2, [pc, #20]	; (14794 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
   14780:	9b01      	ldr	r3, [sp, #4]
   14782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14786:	2b00      	cmp	r3, #0
   14788:	d100      	bne.n	1478c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1478a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1478c:	bf00      	nop
   1478e:	b003      	add	sp, #12
   14790:	f85d fb04 	ldr.w	pc, [sp], #4
   14794:	1fff9710 	.word	0x1fff9710
   14798:	1fff970c 	.word	0x1fff970c

0001479c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
   1479c:	b500      	push	{lr}
   1479e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   147a0:	f7ec f9fe 	bl	ba0 <Sys_GetCoreID>
   147a4:	4603      	mov	r3, r0
   147a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId])
   147a8:	4a10      	ldr	r2, [pc, #64]	; (147ec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
   147aa:	9b01      	ldr	r3, [sp, #4]
   147ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147b0:	2b00      	cmp	r3, #0
   147b2:	d10d      	bne.n	147d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   147b4:	f7ec f8c3 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   147b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   147ba:	9b00      	ldr	r3, [sp, #0]
   147bc:	f003 0301 	and.w	r3, r3, #1
   147c0:	2b00      	cmp	r3, #0
   147c2:	d100      	bne.n	147c6 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   147c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   147c6:	490a      	ldr	r1, [pc, #40]	; (147f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x54>)
   147c8:	9b01      	ldr	r3, [sp, #4]
   147ca:	9a00      	ldr	r2, [sp, #0]
   147cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]++;
   147d0:	4a06      	ldr	r2, [pc, #24]	; (147ec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
   147d2:	9b01      	ldr	r3, [sp, #4]
   147d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147d8:	1c5a      	adds	r2, r3, #1
   147da:	4904      	ldr	r1, [pc, #16]	; (147ec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
   147dc:	9b01      	ldr	r3, [sp, #4]
   147de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   147e2:	bf00      	nop
   147e4:	b003      	add	sp, #12
   147e6:	f85d fb04 	ldr.w	pc, [sp], #4
   147ea:	bf00      	nop
   147ec:	1fff9718 	.word	0x1fff9718
   147f0:	1fff9714 	.word	0x1fff9714

000147f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
   147f4:	b500      	push	{lr}
   147f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   147f8:	f7ec f9d2 	bl	ba0 <Sys_GetCoreID>
   147fc:	4603      	mov	r3, r0
   147fe:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]--;
   14800:	4a0d      	ldr	r2, [pc, #52]	; (14838 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
   14802:	9b01      	ldr	r3, [sp, #4]
   14804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14808:	1e5a      	subs	r2, r3, #1
   1480a:	490b      	ldr	r1, [pc, #44]	; (14838 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
   1480c:	9b01      	ldr	r3, [sp, #4]
   1480e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   14812:	4a0a      	ldr	r2, [pc, #40]	; (1483c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x48>)
   14814:	9b01      	ldr	r3, [sp, #4]
   14816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1481a:	f003 0301 	and.w	r3, r3, #1
   1481e:	2b00      	cmp	r3, #0
   14820:	d106      	bne.n	14830 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
   14822:	4a05      	ldr	r2, [pc, #20]	; (14838 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
   14824:	9b01      	ldr	r3, [sp, #4]
   14826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1482a:	2b00      	cmp	r3, #0
   1482c:	d100      	bne.n	14830 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1482e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14830:	bf00      	nop
   14832:	b003      	add	sp, #12
   14834:	f85d fb04 	ldr.w	pc, [sp], #4
   14838:	1fff9718 	.word	0x1fff9718
   1483c:	1fff9714 	.word	0x1fff9714

00014840 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
   14840:	b500      	push	{lr}
   14842:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14844:	f7ec f9ac 	bl	ba0 <Sys_GetCoreID>
   14848:	4603      	mov	r3, r0
   1484a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId])
   1484c:	4a10      	ldr	r2, [pc, #64]	; (14890 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
   1484e:	9b01      	ldr	r3, [sp, #4]
   14850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14854:	2b00      	cmp	r3, #0
   14856:	d10d      	bne.n	14874 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14858:	f7ec f871 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   1485c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1485e:	9b00      	ldr	r3, [sp, #0]
   14860:	f003 0301 	and.w	r3, r3, #1
   14864:	2b00      	cmp	r3, #0
   14866:	d100      	bne.n	1486a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14868:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   1486a:	490a      	ldr	r1, [pc, #40]	; (14894 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x54>)
   1486c:	9b01      	ldr	r3, [sp, #4]
   1486e:	9a00      	ldr	r2, [sp, #0]
   14870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]++;
   14874:	4a06      	ldr	r2, [pc, #24]	; (14890 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
   14876:	9b01      	ldr	r3, [sp, #4]
   14878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1487c:	1c5a      	adds	r2, r3, #1
   1487e:	4904      	ldr	r1, [pc, #16]	; (14890 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
   14880:	9b01      	ldr	r3, [sp, #4]
   14882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14886:	bf00      	nop
   14888:	b003      	add	sp, #12
   1488a:	f85d fb04 	ldr.w	pc, [sp], #4
   1488e:	bf00      	nop
   14890:	1fff9720 	.word	0x1fff9720
   14894:	1fff971c 	.word	0x1fff971c

00014898 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
   14898:	b500      	push	{lr}
   1489a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1489c:	f7ec f980 	bl	ba0 <Sys_GetCoreID>
   148a0:	4603      	mov	r3, r0
   148a2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]--;
   148a4:	4a0d      	ldr	r2, [pc, #52]	; (148dc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
   148a6:	9b01      	ldr	r3, [sp, #4]
   148a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148ac:	1e5a      	subs	r2, r3, #1
   148ae:	490b      	ldr	r1, [pc, #44]	; (148dc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
   148b0:	9b01      	ldr	r3, [sp, #4]
   148b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   148b6:	4a0a      	ldr	r2, [pc, #40]	; (148e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x48>)
   148b8:	9b01      	ldr	r3, [sp, #4]
   148ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148be:	f003 0301 	and.w	r3, r3, #1
   148c2:	2b00      	cmp	r3, #0
   148c4:	d106      	bne.n	148d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
   148c6:	4a05      	ldr	r2, [pc, #20]	; (148dc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
   148c8:	9b01      	ldr	r3, [sp, #4]
   148ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148ce:	2b00      	cmp	r3, #0
   148d0:	d100      	bne.n	148d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   148d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   148d4:	bf00      	nop
   148d6:	b003      	add	sp, #12
   148d8:	f85d fb04 	ldr.w	pc, [sp], #4
   148dc:	1fff9720 	.word	0x1fff9720
   148e0:	1fff971c 	.word	0x1fff971c

000148e4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
   148e4:	b500      	push	{lr}
   148e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   148e8:	f7ec f95a 	bl	ba0 <Sys_GetCoreID>
   148ec:	4603      	mov	r3, r0
   148ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId])
   148f0:	4a10      	ldr	r2, [pc, #64]	; (14934 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
   148f2:	9b01      	ldr	r3, [sp, #4]
   148f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148f8:	2b00      	cmp	r3, #0
   148fa:	d10d      	bne.n	14918 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
   148fc:	f7ec f81f 	bl	93e <Can_43_FLEXCAN_schm_read_msr>
   14900:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14902:	9b00      	ldr	r3, [sp, #0]
   14904:	f003 0301 	and.w	r3, r3, #1
   14908:	2b00      	cmp	r3, #0
   1490a:	d100      	bne.n	1490e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1490c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   1490e:	490a      	ldr	r1, [pc, #40]	; (14938 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x54>)
   14910:	9b01      	ldr	r3, [sp, #4]
   14912:	9a00      	ldr	r2, [sp, #0]
   14914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]++;
   14918:	4a06      	ldr	r2, [pc, #24]	; (14934 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
   1491a:	9b01      	ldr	r3, [sp, #4]
   1491c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14920:	1c5a      	adds	r2, r3, #1
   14922:	4904      	ldr	r1, [pc, #16]	; (14934 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
   14924:	9b01      	ldr	r3, [sp, #4]
   14926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1492a:	bf00      	nop
   1492c:	b003      	add	sp, #12
   1492e:	f85d fb04 	ldr.w	pc, [sp], #4
   14932:	bf00      	nop
   14934:	1fff9728 	.word	0x1fff9728
   14938:	1fff9724 	.word	0x1fff9724

0001493c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
   1493c:	b500      	push	{lr}
   1493e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14940:	f7ec f92e 	bl	ba0 <Sys_GetCoreID>
   14944:	4603      	mov	r3, r0
   14946:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]--;
   14948:	4a0d      	ldr	r2, [pc, #52]	; (14980 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
   1494a:	9b01      	ldr	r3, [sp, #4]
   1494c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14950:	1e5a      	subs	r2, r3, #1
   14952:	490b      	ldr	r1, [pc, #44]	; (14980 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
   14954:	9b01      	ldr	r3, [sp, #4]
   14956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   1495a:	4a0a      	ldr	r2, [pc, #40]	; (14984 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x48>)
   1495c:	9b01      	ldr	r3, [sp, #4]
   1495e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14962:	f003 0301 	and.w	r3, r3, #1
   14966:	2b00      	cmp	r3, #0
   14968:	d106      	bne.n	14978 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
   1496a:	4a05      	ldr	r2, [pc, #20]	; (14980 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
   1496c:	9b01      	ldr	r3, [sp, #4]
   1496e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14972:	2b00      	cmp	r3, #0
   14974:	d100      	bne.n	14978 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14976:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14978:	bf00      	nop
   1497a:	b003      	add	sp, #12
   1497c:	f85d fb04 	ldr.w	pc, [sp], #4
   14980:	1fff9728 	.word	0x1fff9728
   14984:	1fff9724 	.word	0x1fff9724

00014988 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   14988:	b500      	push	{lr}
   1498a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1498c:	f7ec f908 	bl	ba0 <Sys_GetCoreID>
   14990:	4603      	mov	r3, r0
   14992:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
   14994:	4a10      	ldr	r2, [pc, #64]	; (149d8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   14996:	9b01      	ldr	r3, [sp, #4]
   14998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1499c:	2b00      	cmp	r3, #0
   1499e:	d10d      	bne.n	149bc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   149a0:	f7eb ffd6 	bl	950 <Mcu_schm_read_msr>
   149a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   149a6:	9b00      	ldr	r3, [sp, #0]
   149a8:	f003 0301 	and.w	r3, r3, #1
   149ac:	2b00      	cmp	r3, #0
   149ae:	d100      	bne.n	149b2 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   149b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   149b2:	490a      	ldr	r1, [pc, #40]	; (149dc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
   149b4:	9b01      	ldr	r3, [sp, #4]
   149b6:	9a00      	ldr	r2, [sp, #0]
   149b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
   149bc:	4a06      	ldr	r2, [pc, #24]	; (149d8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   149be:	9b01      	ldr	r3, [sp, #4]
   149c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149c4:	1c5a      	adds	r2, r3, #1
   149c6:	4904      	ldr	r1, [pc, #16]	; (149d8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   149c8:	9b01      	ldr	r3, [sp, #4]
   149ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   149ce:	bf00      	nop
   149d0:	b003      	add	sp, #12
   149d2:	f85d fb04 	ldr.w	pc, [sp], #4
   149d6:	bf00      	nop
   149d8:	1fff9730 	.word	0x1fff9730
   149dc:	1fff972c 	.word	0x1fff972c

000149e0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   149e0:	b500      	push	{lr}
   149e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   149e4:	f7ec f8dc 	bl	ba0 <Sys_GetCoreID>
   149e8:	4603      	mov	r3, r0
   149ea:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
   149ec:	4a0d      	ldr	r2, [pc, #52]	; (14a24 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   149ee:	9b01      	ldr	r3, [sp, #4]
   149f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149f4:	1e5a      	subs	r2, r3, #1
   149f6:	490b      	ldr	r1, [pc, #44]	; (14a24 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   149f8:	9b01      	ldr	r3, [sp, #4]
   149fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   149fe:	4a0a      	ldr	r2, [pc, #40]	; (14a28 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
   14a00:	9b01      	ldr	r3, [sp, #4]
   14a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a06:	f003 0301 	and.w	r3, r3, #1
   14a0a:	2b00      	cmp	r3, #0
   14a0c:	d106      	bne.n	14a1c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
   14a0e:	4a05      	ldr	r2, [pc, #20]	; (14a24 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   14a10:	9b01      	ldr	r3, [sp, #4]
   14a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a16:	2b00      	cmp	r3, #0
   14a18:	d100      	bne.n	14a1c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14a1a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14a1c:	bf00      	nop
   14a1e:	b003      	add	sp, #12
   14a20:	f85d fb04 	ldr.w	pc, [sp], #4
   14a24:	1fff9730 	.word	0x1fff9730
   14a28:	1fff972c 	.word	0x1fff972c

00014a2c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   14a2c:	b500      	push	{lr}
   14a2e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a30:	f7ec f8b6 	bl	ba0 <Sys_GetCoreID>
   14a34:	4603      	mov	r3, r0
   14a36:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
   14a38:	4a10      	ldr	r2, [pc, #64]	; (14a7c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   14a3a:	9b01      	ldr	r3, [sp, #4]
   14a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a40:	2b00      	cmp	r3, #0
   14a42:	d10d      	bne.n	14a60 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14a44:	f7eb ff84 	bl	950 <Mcu_schm_read_msr>
   14a48:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14a4a:	9b00      	ldr	r3, [sp, #0]
   14a4c:	f003 0301 	and.w	r3, r3, #1
   14a50:	2b00      	cmp	r3, #0
   14a52:	d100      	bne.n	14a56 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14a54:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   14a56:	490a      	ldr	r1, [pc, #40]	; (14a80 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
   14a58:	9b01      	ldr	r3, [sp, #4]
   14a5a:	9a00      	ldr	r2, [sp, #0]
   14a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
   14a60:	4a06      	ldr	r2, [pc, #24]	; (14a7c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   14a62:	9b01      	ldr	r3, [sp, #4]
   14a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a68:	1c5a      	adds	r2, r3, #1
   14a6a:	4904      	ldr	r1, [pc, #16]	; (14a7c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   14a6c:	9b01      	ldr	r3, [sp, #4]
   14a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14a72:	bf00      	nop
   14a74:	b003      	add	sp, #12
   14a76:	f85d fb04 	ldr.w	pc, [sp], #4
   14a7a:	bf00      	nop
   14a7c:	1fff9738 	.word	0x1fff9738
   14a80:	1fff9734 	.word	0x1fff9734

00014a84 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   14a84:	b500      	push	{lr}
   14a86:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a88:	f7ec f88a 	bl	ba0 <Sys_GetCoreID>
   14a8c:	4603      	mov	r3, r0
   14a8e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
   14a90:	4a0d      	ldr	r2, [pc, #52]	; (14ac8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   14a92:	9b01      	ldr	r3, [sp, #4]
   14a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a98:	1e5a      	subs	r2, r3, #1
   14a9a:	490b      	ldr	r1, [pc, #44]	; (14ac8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   14a9c:	9b01      	ldr	r3, [sp, #4]
   14a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   14aa2:	4a0a      	ldr	r2, [pc, #40]	; (14acc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
   14aa4:	9b01      	ldr	r3, [sp, #4]
   14aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14aaa:	f003 0301 	and.w	r3, r3, #1
   14aae:	2b00      	cmp	r3, #0
   14ab0:	d106      	bne.n	14ac0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
   14ab2:	4a05      	ldr	r2, [pc, #20]	; (14ac8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   14ab4:	9b01      	ldr	r3, [sp, #4]
   14ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14aba:	2b00      	cmp	r3, #0
   14abc:	d100      	bne.n	14ac0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14abe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14ac0:	bf00      	nop
   14ac2:	b003      	add	sp, #12
   14ac4:	f85d fb04 	ldr.w	pc, [sp], #4
   14ac8:	1fff9738 	.word	0x1fff9738
   14acc:	1fff9734 	.word	0x1fff9734

00014ad0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   14ad0:	b500      	push	{lr}
   14ad2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ad4:	f7ec f864 	bl	ba0 <Sys_GetCoreID>
   14ad8:	4603      	mov	r3, r0
   14ada:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
   14adc:	4a10      	ldr	r2, [pc, #64]	; (14b20 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   14ade:	9b01      	ldr	r3, [sp, #4]
   14ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ae4:	2b00      	cmp	r3, #0
   14ae6:	d10d      	bne.n	14b04 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14ae8:	f7eb ff32 	bl	950 <Mcu_schm_read_msr>
   14aec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14aee:	9b00      	ldr	r3, [sp, #0]
   14af0:	f003 0301 	and.w	r3, r3, #1
   14af4:	2b00      	cmp	r3, #0
   14af6:	d100      	bne.n	14afa <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14af8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   14afa:	490a      	ldr	r1, [pc, #40]	; (14b24 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
   14afc:	9b01      	ldr	r3, [sp, #4]
   14afe:	9a00      	ldr	r2, [sp, #0]
   14b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
   14b04:	4a06      	ldr	r2, [pc, #24]	; (14b20 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   14b06:	9b01      	ldr	r3, [sp, #4]
   14b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b0c:	1c5a      	adds	r2, r3, #1
   14b0e:	4904      	ldr	r1, [pc, #16]	; (14b20 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   14b10:	9b01      	ldr	r3, [sp, #4]
   14b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14b16:	bf00      	nop
   14b18:	b003      	add	sp, #12
   14b1a:	f85d fb04 	ldr.w	pc, [sp], #4
   14b1e:	bf00      	nop
   14b20:	1fff9740 	.word	0x1fff9740
   14b24:	1fff973c 	.word	0x1fff973c

00014b28 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   14b28:	b500      	push	{lr}
   14b2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b2c:	f7ec f838 	bl	ba0 <Sys_GetCoreID>
   14b30:	4603      	mov	r3, r0
   14b32:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
   14b34:	4a0d      	ldr	r2, [pc, #52]	; (14b6c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   14b36:	9b01      	ldr	r3, [sp, #4]
   14b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b3c:	1e5a      	subs	r2, r3, #1
   14b3e:	490b      	ldr	r1, [pc, #44]	; (14b6c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   14b40:	9b01      	ldr	r3, [sp, #4]
   14b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   14b46:	4a0a      	ldr	r2, [pc, #40]	; (14b70 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
   14b48:	9b01      	ldr	r3, [sp, #4]
   14b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b4e:	f003 0301 	and.w	r3, r3, #1
   14b52:	2b00      	cmp	r3, #0
   14b54:	d106      	bne.n	14b64 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
   14b56:	4a05      	ldr	r2, [pc, #20]	; (14b6c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   14b58:	9b01      	ldr	r3, [sp, #4]
   14b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b5e:	2b00      	cmp	r3, #0
   14b60:	d100      	bne.n	14b64 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14b62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14b64:	bf00      	nop
   14b66:	b003      	add	sp, #12
   14b68:	f85d fb04 	ldr.w	pc, [sp], #4
   14b6c:	1fff9740 	.word	0x1fff9740
   14b70:	1fff973c 	.word	0x1fff973c

00014b74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   14b74:	b500      	push	{lr}
   14b76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b78:	f7ec f812 	bl	ba0 <Sys_GetCoreID>
   14b7c:	4603      	mov	r3, r0
   14b7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
   14b80:	4a10      	ldr	r2, [pc, #64]	; (14bc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   14b82:	9b01      	ldr	r3, [sp, #4]
   14b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b88:	2b00      	cmp	r3, #0
   14b8a:	d10d      	bne.n	14ba8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14b8c:	f7eb fee9 	bl	962 <Port_schm_read_msr>
   14b90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14b92:	9b00      	ldr	r3, [sp, #0]
   14b94:	f003 0301 	and.w	r3, r3, #1
   14b98:	2b00      	cmp	r3, #0
   14b9a:	d100      	bne.n	14b9e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14b9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   14b9e:	490a      	ldr	r1, [pc, #40]	; (14bc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
   14ba0:	9b01      	ldr	r3, [sp, #4]
   14ba2:	9a00      	ldr	r2, [sp, #0]
   14ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
   14ba8:	4a06      	ldr	r2, [pc, #24]	; (14bc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   14baa:	9b01      	ldr	r3, [sp, #4]
   14bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bb0:	1c5a      	adds	r2, r3, #1
   14bb2:	4904      	ldr	r1, [pc, #16]	; (14bc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   14bb4:	9b01      	ldr	r3, [sp, #4]
   14bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14bba:	bf00      	nop
   14bbc:	b003      	add	sp, #12
   14bbe:	f85d fb04 	ldr.w	pc, [sp], #4
   14bc2:	bf00      	nop
   14bc4:	1fff9748 	.word	0x1fff9748
   14bc8:	1fff9744 	.word	0x1fff9744

00014bcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   14bcc:	b500      	push	{lr}
   14bce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14bd0:	f7eb ffe6 	bl	ba0 <Sys_GetCoreID>
   14bd4:	4603      	mov	r3, r0
   14bd6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
   14bd8:	4a0d      	ldr	r2, [pc, #52]	; (14c10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   14bda:	9b01      	ldr	r3, [sp, #4]
   14bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14be0:	1e5a      	subs	r2, r3, #1
   14be2:	490b      	ldr	r1, [pc, #44]	; (14c10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   14be4:	9b01      	ldr	r3, [sp, #4]
   14be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   14bea:	4a0a      	ldr	r2, [pc, #40]	; (14c14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
   14bec:	9b01      	ldr	r3, [sp, #4]
   14bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bf2:	f003 0301 	and.w	r3, r3, #1
   14bf6:	2b00      	cmp	r3, #0
   14bf8:	d106      	bne.n	14c08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
   14bfa:	4a05      	ldr	r2, [pc, #20]	; (14c10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   14bfc:	9b01      	ldr	r3, [sp, #4]
   14bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c02:	2b00      	cmp	r3, #0
   14c04:	d100      	bne.n	14c08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14c06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14c08:	bf00      	nop
   14c0a:	b003      	add	sp, #12
   14c0c:	f85d fb04 	ldr.w	pc, [sp], #4
   14c10:	1fff9748 	.word	0x1fff9748
   14c14:	1fff9744 	.word	0x1fff9744

00014c18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   14c18:	b500      	push	{lr}
   14c1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c1c:	f7eb ffc0 	bl	ba0 <Sys_GetCoreID>
   14c20:	4603      	mov	r3, r0
   14c22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
   14c24:	4a10      	ldr	r2, [pc, #64]	; (14c68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   14c26:	9b01      	ldr	r3, [sp, #4]
   14c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c2c:	2b00      	cmp	r3, #0
   14c2e:	d10d      	bne.n	14c4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14c30:	f7eb fe97 	bl	962 <Port_schm_read_msr>
   14c34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14c36:	9b00      	ldr	r3, [sp, #0]
   14c38:	f003 0301 	and.w	r3, r3, #1
   14c3c:	2b00      	cmp	r3, #0
   14c3e:	d100      	bne.n	14c42 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14c40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   14c42:	490a      	ldr	r1, [pc, #40]	; (14c6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
   14c44:	9b01      	ldr	r3, [sp, #4]
   14c46:	9a00      	ldr	r2, [sp, #0]
   14c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
   14c4c:	4a06      	ldr	r2, [pc, #24]	; (14c68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   14c4e:	9b01      	ldr	r3, [sp, #4]
   14c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c54:	1c5a      	adds	r2, r3, #1
   14c56:	4904      	ldr	r1, [pc, #16]	; (14c68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   14c58:	9b01      	ldr	r3, [sp, #4]
   14c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14c5e:	bf00      	nop
   14c60:	b003      	add	sp, #12
   14c62:	f85d fb04 	ldr.w	pc, [sp], #4
   14c66:	bf00      	nop
   14c68:	1fff9750 	.word	0x1fff9750
   14c6c:	1fff974c 	.word	0x1fff974c

00014c70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   14c70:	b500      	push	{lr}
   14c72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c74:	f7eb ff94 	bl	ba0 <Sys_GetCoreID>
   14c78:	4603      	mov	r3, r0
   14c7a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
   14c7c:	4a0d      	ldr	r2, [pc, #52]	; (14cb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   14c7e:	9b01      	ldr	r3, [sp, #4]
   14c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c84:	1e5a      	subs	r2, r3, #1
   14c86:	490b      	ldr	r1, [pc, #44]	; (14cb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   14c88:	9b01      	ldr	r3, [sp, #4]
   14c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   14c8e:	4a0a      	ldr	r2, [pc, #40]	; (14cb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
   14c90:	9b01      	ldr	r3, [sp, #4]
   14c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c96:	f003 0301 	and.w	r3, r3, #1
   14c9a:	2b00      	cmp	r3, #0
   14c9c:	d106      	bne.n	14cac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
   14c9e:	4a05      	ldr	r2, [pc, #20]	; (14cb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   14ca0:	9b01      	ldr	r3, [sp, #4]
   14ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ca6:	2b00      	cmp	r3, #0
   14ca8:	d100      	bne.n	14cac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14caa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14cac:	bf00      	nop
   14cae:	b003      	add	sp, #12
   14cb0:	f85d fb04 	ldr.w	pc, [sp], #4
   14cb4:	1fff9750 	.word	0x1fff9750
   14cb8:	1fff974c 	.word	0x1fff974c

00014cbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   14cbc:	b500      	push	{lr}
   14cbe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14cc0:	f7eb ff6e 	bl	ba0 <Sys_GetCoreID>
   14cc4:	4603      	mov	r3, r0
   14cc6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
   14cc8:	4a10      	ldr	r2, [pc, #64]	; (14d0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   14cca:	9b01      	ldr	r3, [sp, #4]
   14ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cd0:	2b00      	cmp	r3, #0
   14cd2:	d10d      	bne.n	14cf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14cd4:	f7eb fe45 	bl	962 <Port_schm_read_msr>
   14cd8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14cda:	9b00      	ldr	r3, [sp, #0]
   14cdc:	f003 0301 	and.w	r3, r3, #1
   14ce0:	2b00      	cmp	r3, #0
   14ce2:	d100      	bne.n	14ce6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14ce4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   14ce6:	490a      	ldr	r1, [pc, #40]	; (14d10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
   14ce8:	9b01      	ldr	r3, [sp, #4]
   14cea:	9a00      	ldr	r2, [sp, #0]
   14cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
   14cf0:	4a06      	ldr	r2, [pc, #24]	; (14d0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   14cf2:	9b01      	ldr	r3, [sp, #4]
   14cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cf8:	1c5a      	adds	r2, r3, #1
   14cfa:	4904      	ldr	r1, [pc, #16]	; (14d0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   14cfc:	9b01      	ldr	r3, [sp, #4]
   14cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14d02:	bf00      	nop
   14d04:	b003      	add	sp, #12
   14d06:	f85d fb04 	ldr.w	pc, [sp], #4
   14d0a:	bf00      	nop
   14d0c:	1fff9758 	.word	0x1fff9758
   14d10:	1fff9754 	.word	0x1fff9754

00014d14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   14d14:	b500      	push	{lr}
   14d16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d18:	f7eb ff42 	bl	ba0 <Sys_GetCoreID>
   14d1c:	4603      	mov	r3, r0
   14d1e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
   14d20:	4a0d      	ldr	r2, [pc, #52]	; (14d58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   14d22:	9b01      	ldr	r3, [sp, #4]
   14d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d28:	1e5a      	subs	r2, r3, #1
   14d2a:	490b      	ldr	r1, [pc, #44]	; (14d58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   14d2c:	9b01      	ldr	r3, [sp, #4]
   14d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   14d32:	4a0a      	ldr	r2, [pc, #40]	; (14d5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
   14d34:	9b01      	ldr	r3, [sp, #4]
   14d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d3a:	f003 0301 	and.w	r3, r3, #1
   14d3e:	2b00      	cmp	r3, #0
   14d40:	d106      	bne.n	14d50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
   14d42:	4a05      	ldr	r2, [pc, #20]	; (14d58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   14d44:	9b01      	ldr	r3, [sp, #4]
   14d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d4a:	2b00      	cmp	r3, #0
   14d4c:	d100      	bne.n	14d50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14d4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14d50:	bf00      	nop
   14d52:	b003      	add	sp, #12
   14d54:	f85d fb04 	ldr.w	pc, [sp], #4
   14d58:	1fff9758 	.word	0x1fff9758
   14d5c:	1fff9754 	.word	0x1fff9754

00014d60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   14d60:	b500      	push	{lr}
   14d62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d64:	f7eb ff1c 	bl	ba0 <Sys_GetCoreID>
   14d68:	4603      	mov	r3, r0
   14d6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
   14d6c:	4a10      	ldr	r2, [pc, #64]	; (14db0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   14d6e:	9b01      	ldr	r3, [sp, #4]
   14d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d74:	2b00      	cmp	r3, #0
   14d76:	d10d      	bne.n	14d94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14d78:	f7eb fdf3 	bl	962 <Port_schm_read_msr>
   14d7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14d7e:	9b00      	ldr	r3, [sp, #0]
   14d80:	f003 0301 	and.w	r3, r3, #1
   14d84:	2b00      	cmp	r3, #0
   14d86:	d100      	bne.n	14d8a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14d88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   14d8a:	490a      	ldr	r1, [pc, #40]	; (14db4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
   14d8c:	9b01      	ldr	r3, [sp, #4]
   14d8e:	9a00      	ldr	r2, [sp, #0]
   14d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
   14d94:	4a06      	ldr	r2, [pc, #24]	; (14db0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   14d96:	9b01      	ldr	r3, [sp, #4]
   14d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d9c:	1c5a      	adds	r2, r3, #1
   14d9e:	4904      	ldr	r1, [pc, #16]	; (14db0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   14da0:	9b01      	ldr	r3, [sp, #4]
   14da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14da6:	bf00      	nop
   14da8:	b003      	add	sp, #12
   14daa:	f85d fb04 	ldr.w	pc, [sp], #4
   14dae:	bf00      	nop
   14db0:	1fff9760 	.word	0x1fff9760
   14db4:	1fff975c 	.word	0x1fff975c

00014db8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   14db8:	b500      	push	{lr}
   14dba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14dbc:	f7eb fef0 	bl	ba0 <Sys_GetCoreID>
   14dc0:	4603      	mov	r3, r0
   14dc2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
   14dc4:	4a0d      	ldr	r2, [pc, #52]	; (14dfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   14dc6:	9b01      	ldr	r3, [sp, #4]
   14dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14dcc:	1e5a      	subs	r2, r3, #1
   14dce:	490b      	ldr	r1, [pc, #44]	; (14dfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   14dd0:	9b01      	ldr	r3, [sp, #4]
   14dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   14dd6:	4a0a      	ldr	r2, [pc, #40]	; (14e00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
   14dd8:	9b01      	ldr	r3, [sp, #4]
   14dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14dde:	f003 0301 	and.w	r3, r3, #1
   14de2:	2b00      	cmp	r3, #0
   14de4:	d106      	bne.n	14df4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
   14de6:	4a05      	ldr	r2, [pc, #20]	; (14dfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   14de8:	9b01      	ldr	r3, [sp, #4]
   14dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14dee:	2b00      	cmp	r3, #0
   14df0:	d100      	bne.n	14df4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14df2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14df4:	bf00      	nop
   14df6:	b003      	add	sp, #12
   14df8:	f85d fb04 	ldr.w	pc, [sp], #4
   14dfc:	1fff9760 	.word	0x1fff9760
   14e00:	1fff975c 	.word	0x1fff975c

00014e04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   14e04:	b500      	push	{lr}
   14e06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e08:	f7eb feca 	bl	ba0 <Sys_GetCoreID>
   14e0c:	4603      	mov	r3, r0
   14e0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
   14e10:	4a10      	ldr	r2, [pc, #64]	; (14e54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   14e12:	9b01      	ldr	r3, [sp, #4]
   14e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e18:	2b00      	cmp	r3, #0
   14e1a:	d10d      	bne.n	14e38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14e1c:	f7eb fda1 	bl	962 <Port_schm_read_msr>
   14e20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14e22:	9b00      	ldr	r3, [sp, #0]
   14e24:	f003 0301 	and.w	r3, r3, #1
   14e28:	2b00      	cmp	r3, #0
   14e2a:	d100      	bne.n	14e2e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14e2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   14e2e:	490a      	ldr	r1, [pc, #40]	; (14e58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
   14e30:	9b01      	ldr	r3, [sp, #4]
   14e32:	9a00      	ldr	r2, [sp, #0]
   14e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
   14e38:	4a06      	ldr	r2, [pc, #24]	; (14e54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   14e3a:	9b01      	ldr	r3, [sp, #4]
   14e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e40:	1c5a      	adds	r2, r3, #1
   14e42:	4904      	ldr	r1, [pc, #16]	; (14e54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   14e44:	9b01      	ldr	r3, [sp, #4]
   14e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14e4a:	bf00      	nop
   14e4c:	b003      	add	sp, #12
   14e4e:	f85d fb04 	ldr.w	pc, [sp], #4
   14e52:	bf00      	nop
   14e54:	1fff9768 	.word	0x1fff9768
   14e58:	1fff9764 	.word	0x1fff9764

00014e5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   14e5c:	b500      	push	{lr}
   14e5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e60:	f7eb fe9e 	bl	ba0 <Sys_GetCoreID>
   14e64:	4603      	mov	r3, r0
   14e66:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
   14e68:	4a0d      	ldr	r2, [pc, #52]	; (14ea0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   14e6a:	9b01      	ldr	r3, [sp, #4]
   14e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e70:	1e5a      	subs	r2, r3, #1
   14e72:	490b      	ldr	r1, [pc, #44]	; (14ea0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   14e74:	9b01      	ldr	r3, [sp, #4]
   14e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   14e7a:	4a0a      	ldr	r2, [pc, #40]	; (14ea4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
   14e7c:	9b01      	ldr	r3, [sp, #4]
   14e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e82:	f003 0301 	and.w	r3, r3, #1
   14e86:	2b00      	cmp	r3, #0
   14e88:	d106      	bne.n	14e98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
   14e8a:	4a05      	ldr	r2, [pc, #20]	; (14ea0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   14e8c:	9b01      	ldr	r3, [sp, #4]
   14e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e92:	2b00      	cmp	r3, #0
   14e94:	d100      	bne.n	14e98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14e96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14e98:	bf00      	nop
   14e9a:	b003      	add	sp, #12
   14e9c:	f85d fb04 	ldr.w	pc, [sp], #4
   14ea0:	1fff9768 	.word	0x1fff9768
   14ea4:	1fff9764 	.word	0x1fff9764

00014ea8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   14ea8:	b500      	push	{lr}
   14eaa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14eac:	f7eb fe78 	bl	ba0 <Sys_GetCoreID>
   14eb0:	4603      	mov	r3, r0
   14eb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
   14eb4:	4a10      	ldr	r2, [pc, #64]	; (14ef8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   14eb6:	9b01      	ldr	r3, [sp, #4]
   14eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ebc:	2b00      	cmp	r3, #0
   14ebe:	d10d      	bne.n	14edc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14ec0:	f7eb fd4f 	bl	962 <Port_schm_read_msr>
   14ec4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14ec6:	9b00      	ldr	r3, [sp, #0]
   14ec8:	f003 0301 	and.w	r3, r3, #1
   14ecc:	2b00      	cmp	r3, #0
   14ece:	d100      	bne.n	14ed2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14ed0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   14ed2:	490a      	ldr	r1, [pc, #40]	; (14efc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
   14ed4:	9b01      	ldr	r3, [sp, #4]
   14ed6:	9a00      	ldr	r2, [sp, #0]
   14ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
   14edc:	4a06      	ldr	r2, [pc, #24]	; (14ef8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   14ede:	9b01      	ldr	r3, [sp, #4]
   14ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ee4:	1c5a      	adds	r2, r3, #1
   14ee6:	4904      	ldr	r1, [pc, #16]	; (14ef8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   14ee8:	9b01      	ldr	r3, [sp, #4]
   14eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14eee:	bf00      	nop
   14ef0:	b003      	add	sp, #12
   14ef2:	f85d fb04 	ldr.w	pc, [sp], #4
   14ef6:	bf00      	nop
   14ef8:	1fff9770 	.word	0x1fff9770
   14efc:	1fff976c 	.word	0x1fff976c

00014f00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   14f00:	b500      	push	{lr}
   14f02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14f04:	f7eb fe4c 	bl	ba0 <Sys_GetCoreID>
   14f08:	4603      	mov	r3, r0
   14f0a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
   14f0c:	4a0d      	ldr	r2, [pc, #52]	; (14f44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   14f0e:	9b01      	ldr	r3, [sp, #4]
   14f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f14:	1e5a      	subs	r2, r3, #1
   14f16:	490b      	ldr	r1, [pc, #44]	; (14f44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   14f18:	9b01      	ldr	r3, [sp, #4]
   14f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   14f1e:	4a0a      	ldr	r2, [pc, #40]	; (14f48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
   14f20:	9b01      	ldr	r3, [sp, #4]
   14f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f26:	f003 0301 	and.w	r3, r3, #1
   14f2a:	2b00      	cmp	r3, #0
   14f2c:	d106      	bne.n	14f3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
   14f2e:	4a05      	ldr	r2, [pc, #20]	; (14f44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   14f30:	9b01      	ldr	r3, [sp, #4]
   14f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f36:	2b00      	cmp	r3, #0
   14f38:	d100      	bne.n	14f3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14f3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14f3c:	bf00      	nop
   14f3e:	b003      	add	sp, #12
   14f40:	f85d fb04 	ldr.w	pc, [sp], #4
   14f44:	1fff9770 	.word	0x1fff9770
   14f48:	1fff976c 	.word	0x1fff976c

00014f4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   14f4c:	b500      	push	{lr}
   14f4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14f50:	f7eb fe26 	bl	ba0 <Sys_GetCoreID>
   14f54:	4603      	mov	r3, r0
   14f56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
   14f58:	4a10      	ldr	r2, [pc, #64]	; (14f9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   14f5a:	9b01      	ldr	r3, [sp, #4]
   14f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f60:	2b00      	cmp	r3, #0
   14f62:	d10d      	bne.n	14f80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14f64:	f7eb fcfd 	bl	962 <Port_schm_read_msr>
   14f68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14f6a:	9b00      	ldr	r3, [sp, #0]
   14f6c:	f003 0301 	and.w	r3, r3, #1
   14f70:	2b00      	cmp	r3, #0
   14f72:	d100      	bne.n	14f76 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14f74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   14f76:	490a      	ldr	r1, [pc, #40]	; (14fa0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
   14f78:	9b01      	ldr	r3, [sp, #4]
   14f7a:	9a00      	ldr	r2, [sp, #0]
   14f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
   14f80:	4a06      	ldr	r2, [pc, #24]	; (14f9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   14f82:	9b01      	ldr	r3, [sp, #4]
   14f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f88:	1c5a      	adds	r2, r3, #1
   14f8a:	4904      	ldr	r1, [pc, #16]	; (14f9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   14f8c:	9b01      	ldr	r3, [sp, #4]
   14f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14f92:	bf00      	nop
   14f94:	b003      	add	sp, #12
   14f96:	f85d fb04 	ldr.w	pc, [sp], #4
   14f9a:	bf00      	nop
   14f9c:	1fff9778 	.word	0x1fff9778
   14fa0:	1fff9774 	.word	0x1fff9774

00014fa4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   14fa4:	b500      	push	{lr}
   14fa6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14fa8:	f7eb fdfa 	bl	ba0 <Sys_GetCoreID>
   14fac:	4603      	mov	r3, r0
   14fae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
   14fb0:	4a0d      	ldr	r2, [pc, #52]	; (14fe8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   14fb2:	9b01      	ldr	r3, [sp, #4]
   14fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fb8:	1e5a      	subs	r2, r3, #1
   14fba:	490b      	ldr	r1, [pc, #44]	; (14fe8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   14fbc:	9b01      	ldr	r3, [sp, #4]
   14fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   14fc2:	4a0a      	ldr	r2, [pc, #40]	; (14fec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
   14fc4:	9b01      	ldr	r3, [sp, #4]
   14fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fca:	f003 0301 	and.w	r3, r3, #1
   14fce:	2b00      	cmp	r3, #0
   14fd0:	d106      	bne.n	14fe0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
   14fd2:	4a05      	ldr	r2, [pc, #20]	; (14fe8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   14fd4:	9b01      	ldr	r3, [sp, #4]
   14fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fda:	2b00      	cmp	r3, #0
   14fdc:	d100      	bne.n	14fe0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14fde:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14fe0:	bf00      	nop
   14fe2:	b003      	add	sp, #12
   14fe4:	f85d fb04 	ldr.w	pc, [sp], #4
   14fe8:	1fff9778 	.word	0x1fff9778
   14fec:	1fff9774 	.word	0x1fff9774

00014ff0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   14ff0:	b500      	push	{lr}
   14ff2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ff4:	f7eb fdd4 	bl	ba0 <Sys_GetCoreID>
   14ff8:	4603      	mov	r3, r0
   14ffa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
   14ffc:	4a10      	ldr	r2, [pc, #64]	; (15040 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   14ffe:	9b01      	ldr	r3, [sp, #4]
   15000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15004:	2b00      	cmp	r3, #0
   15006:	d10d      	bne.n	15024 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15008:	f7eb fcab 	bl	962 <Port_schm_read_msr>
   1500c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1500e:	9b00      	ldr	r3, [sp, #0]
   15010:	f003 0301 	and.w	r3, r3, #1
   15014:	2b00      	cmp	r3, #0
   15016:	d100      	bne.n	1501a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15018:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   1501a:	490a      	ldr	r1, [pc, #40]	; (15044 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
   1501c:	9b01      	ldr	r3, [sp, #4]
   1501e:	9a00      	ldr	r2, [sp, #0]
   15020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
   15024:	4a06      	ldr	r2, [pc, #24]	; (15040 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   15026:	9b01      	ldr	r3, [sp, #4]
   15028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1502c:	1c5a      	adds	r2, r3, #1
   1502e:	4904      	ldr	r1, [pc, #16]	; (15040 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   15030:	9b01      	ldr	r3, [sp, #4]
   15032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15036:	bf00      	nop
   15038:	b003      	add	sp, #12
   1503a:	f85d fb04 	ldr.w	pc, [sp], #4
   1503e:	bf00      	nop
   15040:	1fff9780 	.word	0x1fff9780
   15044:	1fff977c 	.word	0x1fff977c

00015048 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   15048:	b500      	push	{lr}
   1504a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1504c:	f7eb fda8 	bl	ba0 <Sys_GetCoreID>
   15050:	4603      	mov	r3, r0
   15052:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
   15054:	4a0d      	ldr	r2, [pc, #52]	; (1508c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   15056:	9b01      	ldr	r3, [sp, #4]
   15058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1505c:	1e5a      	subs	r2, r3, #1
   1505e:	490b      	ldr	r1, [pc, #44]	; (1508c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   15060:	9b01      	ldr	r3, [sp, #4]
   15062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   15066:	4a0a      	ldr	r2, [pc, #40]	; (15090 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
   15068:	9b01      	ldr	r3, [sp, #4]
   1506a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1506e:	f003 0301 	and.w	r3, r3, #1
   15072:	2b00      	cmp	r3, #0
   15074:	d106      	bne.n	15084 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
   15076:	4a05      	ldr	r2, [pc, #20]	; (1508c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   15078:	9b01      	ldr	r3, [sp, #4]
   1507a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1507e:	2b00      	cmp	r3, #0
   15080:	d100      	bne.n	15084 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15082:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15084:	bf00      	nop
   15086:	b003      	add	sp, #12
   15088:	f85d fb04 	ldr.w	pc, [sp], #4
   1508c:	1fff9780 	.word	0x1fff9780
   15090:	1fff977c 	.word	0x1fff977c

00015094 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   15094:	b500      	push	{lr}
   15096:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15098:	f7eb fd82 	bl	ba0 <Sys_GetCoreID>
   1509c:	4603      	mov	r3, r0
   1509e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
   150a0:	4a10      	ldr	r2, [pc, #64]	; (150e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   150a2:	9b01      	ldr	r3, [sp, #4]
   150a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150a8:	2b00      	cmp	r3, #0
   150aa:	d10d      	bne.n	150c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   150ac:	f7eb fc59 	bl	962 <Port_schm_read_msr>
   150b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   150b2:	9b00      	ldr	r3, [sp, #0]
   150b4:	f003 0301 	and.w	r3, r3, #1
   150b8:	2b00      	cmp	r3, #0
   150ba:	d100      	bne.n	150be <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   150bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   150be:	490a      	ldr	r1, [pc, #40]	; (150e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
   150c0:	9b01      	ldr	r3, [sp, #4]
   150c2:	9a00      	ldr	r2, [sp, #0]
   150c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
   150c8:	4a06      	ldr	r2, [pc, #24]	; (150e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   150ca:	9b01      	ldr	r3, [sp, #4]
   150cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150d0:	1c5a      	adds	r2, r3, #1
   150d2:	4904      	ldr	r1, [pc, #16]	; (150e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   150d4:	9b01      	ldr	r3, [sp, #4]
   150d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   150da:	bf00      	nop
   150dc:	b003      	add	sp, #12
   150de:	f85d fb04 	ldr.w	pc, [sp], #4
   150e2:	bf00      	nop
   150e4:	1fff9788 	.word	0x1fff9788
   150e8:	1fff9784 	.word	0x1fff9784

000150ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   150ec:	b500      	push	{lr}
   150ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   150f0:	f7eb fd56 	bl	ba0 <Sys_GetCoreID>
   150f4:	4603      	mov	r3, r0
   150f6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
   150f8:	4a0d      	ldr	r2, [pc, #52]	; (15130 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   150fa:	9b01      	ldr	r3, [sp, #4]
   150fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15100:	1e5a      	subs	r2, r3, #1
   15102:	490b      	ldr	r1, [pc, #44]	; (15130 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   15104:	9b01      	ldr	r3, [sp, #4]
   15106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   1510a:	4a0a      	ldr	r2, [pc, #40]	; (15134 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
   1510c:	9b01      	ldr	r3, [sp, #4]
   1510e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15112:	f003 0301 	and.w	r3, r3, #1
   15116:	2b00      	cmp	r3, #0
   15118:	d106      	bne.n	15128 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
   1511a:	4a05      	ldr	r2, [pc, #20]	; (15130 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   1511c:	9b01      	ldr	r3, [sp, #4]
   1511e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15122:	2b00      	cmp	r3, #0
   15124:	d100      	bne.n	15128 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15126:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15128:	bf00      	nop
   1512a:	b003      	add	sp, #12
   1512c:	f85d fb04 	ldr.w	pc, [sp], #4
   15130:	1fff9788 	.word	0x1fff9788
   15134:	1fff9784 	.word	0x1fff9784

00015138 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   15138:	b500      	push	{lr}
   1513a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1513c:	f7eb fd30 	bl	ba0 <Sys_GetCoreID>
   15140:	4603      	mov	r3, r0
   15142:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
   15144:	4a10      	ldr	r2, [pc, #64]	; (15188 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   15146:	9b01      	ldr	r3, [sp, #4]
   15148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1514c:	2b00      	cmp	r3, #0
   1514e:	d10d      	bne.n	1516c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15150:	f7eb fc07 	bl	962 <Port_schm_read_msr>
   15154:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15156:	9b00      	ldr	r3, [sp, #0]
   15158:	f003 0301 	and.w	r3, r3, #1
   1515c:	2b00      	cmp	r3, #0
   1515e:	d100      	bne.n	15162 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15160:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   15162:	490a      	ldr	r1, [pc, #40]	; (1518c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
   15164:	9b01      	ldr	r3, [sp, #4]
   15166:	9a00      	ldr	r2, [sp, #0]
   15168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
   1516c:	4a06      	ldr	r2, [pc, #24]	; (15188 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   1516e:	9b01      	ldr	r3, [sp, #4]
   15170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15174:	1c5a      	adds	r2, r3, #1
   15176:	4904      	ldr	r1, [pc, #16]	; (15188 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   15178:	9b01      	ldr	r3, [sp, #4]
   1517a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1517e:	bf00      	nop
   15180:	b003      	add	sp, #12
   15182:	f85d fb04 	ldr.w	pc, [sp], #4
   15186:	bf00      	nop
   15188:	1fff9790 	.word	0x1fff9790
   1518c:	1fff978c 	.word	0x1fff978c

00015190 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   15190:	b500      	push	{lr}
   15192:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15194:	f7eb fd04 	bl	ba0 <Sys_GetCoreID>
   15198:	4603      	mov	r3, r0
   1519a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
   1519c:	4a0d      	ldr	r2, [pc, #52]	; (151d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   1519e:	9b01      	ldr	r3, [sp, #4]
   151a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151a4:	1e5a      	subs	r2, r3, #1
   151a6:	490b      	ldr	r1, [pc, #44]	; (151d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   151a8:	9b01      	ldr	r3, [sp, #4]
   151aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   151ae:	4a0a      	ldr	r2, [pc, #40]	; (151d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
   151b0:	9b01      	ldr	r3, [sp, #4]
   151b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151b6:	f003 0301 	and.w	r3, r3, #1
   151ba:	2b00      	cmp	r3, #0
   151bc:	d106      	bne.n	151cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
   151be:	4a05      	ldr	r2, [pc, #20]	; (151d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   151c0:	9b01      	ldr	r3, [sp, #4]
   151c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151c6:	2b00      	cmp	r3, #0
   151c8:	d100      	bne.n	151cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   151ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   151cc:	bf00      	nop
   151ce:	b003      	add	sp, #12
   151d0:	f85d fb04 	ldr.w	pc, [sp], #4
   151d4:	1fff9790 	.word	0x1fff9790
   151d8:	1fff978c 	.word	0x1fff978c

000151dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   151dc:	b500      	push	{lr}
   151de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   151e0:	f7eb fcde 	bl	ba0 <Sys_GetCoreID>
   151e4:	4603      	mov	r3, r0
   151e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
   151e8:	4a10      	ldr	r2, [pc, #64]	; (1522c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   151ea:	9b01      	ldr	r3, [sp, #4]
   151ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151f0:	2b00      	cmp	r3, #0
   151f2:	d10d      	bne.n	15210 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   151f4:	f7eb fbb5 	bl	962 <Port_schm_read_msr>
   151f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   151fa:	9b00      	ldr	r3, [sp, #0]
   151fc:	f003 0301 	and.w	r3, r3, #1
   15200:	2b00      	cmp	r3, #0
   15202:	d100      	bne.n	15206 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15204:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   15206:	490a      	ldr	r1, [pc, #40]	; (15230 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
   15208:	9b01      	ldr	r3, [sp, #4]
   1520a:	9a00      	ldr	r2, [sp, #0]
   1520c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
   15210:	4a06      	ldr	r2, [pc, #24]	; (1522c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   15212:	9b01      	ldr	r3, [sp, #4]
   15214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15218:	1c5a      	adds	r2, r3, #1
   1521a:	4904      	ldr	r1, [pc, #16]	; (1522c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   1521c:	9b01      	ldr	r3, [sp, #4]
   1521e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15222:	bf00      	nop
   15224:	b003      	add	sp, #12
   15226:	f85d fb04 	ldr.w	pc, [sp], #4
   1522a:	bf00      	nop
   1522c:	1fff9798 	.word	0x1fff9798
   15230:	1fff9794 	.word	0x1fff9794

00015234 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   15234:	b500      	push	{lr}
   15236:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15238:	f7eb fcb2 	bl	ba0 <Sys_GetCoreID>
   1523c:	4603      	mov	r3, r0
   1523e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
   15240:	4a0d      	ldr	r2, [pc, #52]	; (15278 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   15242:	9b01      	ldr	r3, [sp, #4]
   15244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15248:	1e5a      	subs	r2, r3, #1
   1524a:	490b      	ldr	r1, [pc, #44]	; (15278 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   1524c:	9b01      	ldr	r3, [sp, #4]
   1524e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   15252:	4a0a      	ldr	r2, [pc, #40]	; (1527c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
   15254:	9b01      	ldr	r3, [sp, #4]
   15256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1525a:	f003 0301 	and.w	r3, r3, #1
   1525e:	2b00      	cmp	r3, #0
   15260:	d106      	bne.n	15270 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
   15262:	4a05      	ldr	r2, [pc, #20]	; (15278 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   15264:	9b01      	ldr	r3, [sp, #4]
   15266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1526a:	2b00      	cmp	r3, #0
   1526c:	d100      	bne.n	15270 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1526e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15270:	bf00      	nop
   15272:	b003      	add	sp, #12
   15274:	f85d fb04 	ldr.w	pc, [sp], #4
   15278:	1fff9798 	.word	0x1fff9798
   1527c:	1fff9794 	.word	0x1fff9794

00015280 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   15280:	b500      	push	{lr}
   15282:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15284:	f7eb fc8c 	bl	ba0 <Sys_GetCoreID>
   15288:	4603      	mov	r3, r0
   1528a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
   1528c:	4a10      	ldr	r2, [pc, #64]	; (152d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   1528e:	9b01      	ldr	r3, [sp, #4]
   15290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15294:	2b00      	cmp	r3, #0
   15296:	d10d      	bne.n	152b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15298:	f7eb fb63 	bl	962 <Port_schm_read_msr>
   1529c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1529e:	9b00      	ldr	r3, [sp, #0]
   152a0:	f003 0301 	and.w	r3, r3, #1
   152a4:	2b00      	cmp	r3, #0
   152a6:	d100      	bne.n	152aa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   152a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   152aa:	490a      	ldr	r1, [pc, #40]	; (152d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
   152ac:	9b01      	ldr	r3, [sp, #4]
   152ae:	9a00      	ldr	r2, [sp, #0]
   152b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
   152b4:	4a06      	ldr	r2, [pc, #24]	; (152d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   152b6:	9b01      	ldr	r3, [sp, #4]
   152b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152bc:	1c5a      	adds	r2, r3, #1
   152be:	4904      	ldr	r1, [pc, #16]	; (152d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   152c0:	9b01      	ldr	r3, [sp, #4]
   152c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   152c6:	bf00      	nop
   152c8:	b003      	add	sp, #12
   152ca:	f85d fb04 	ldr.w	pc, [sp], #4
   152ce:	bf00      	nop
   152d0:	1fff97a0 	.word	0x1fff97a0
   152d4:	1fff979c 	.word	0x1fff979c

000152d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   152d8:	b500      	push	{lr}
   152da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   152dc:	f7eb fc60 	bl	ba0 <Sys_GetCoreID>
   152e0:	4603      	mov	r3, r0
   152e2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
   152e4:	4a0d      	ldr	r2, [pc, #52]	; (1531c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   152e6:	9b01      	ldr	r3, [sp, #4]
   152e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152ec:	1e5a      	subs	r2, r3, #1
   152ee:	490b      	ldr	r1, [pc, #44]	; (1531c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   152f0:	9b01      	ldr	r3, [sp, #4]
   152f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   152f6:	4a0a      	ldr	r2, [pc, #40]	; (15320 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
   152f8:	9b01      	ldr	r3, [sp, #4]
   152fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152fe:	f003 0301 	and.w	r3, r3, #1
   15302:	2b00      	cmp	r3, #0
   15304:	d106      	bne.n	15314 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
   15306:	4a05      	ldr	r2, [pc, #20]	; (1531c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   15308:	9b01      	ldr	r3, [sp, #4]
   1530a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1530e:	2b00      	cmp	r3, #0
   15310:	d100      	bne.n	15314 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15312:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15314:	bf00      	nop
   15316:	b003      	add	sp, #12
   15318:	f85d fb04 	ldr.w	pc, [sp], #4
   1531c:	1fff97a0 	.word	0x1fff97a0
   15320:	1fff979c 	.word	0x1fff979c

00015324 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   15324:	b500      	push	{lr}
   15326:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15328:	f7eb fc3a 	bl	ba0 <Sys_GetCoreID>
   1532c:	4603      	mov	r3, r0
   1532e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
   15330:	4a10      	ldr	r2, [pc, #64]	; (15374 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   15332:	9b01      	ldr	r3, [sp, #4]
   15334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15338:	2b00      	cmp	r3, #0
   1533a:	d10d      	bne.n	15358 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1533c:	f7eb fb11 	bl	962 <Port_schm_read_msr>
   15340:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15342:	9b00      	ldr	r3, [sp, #0]
   15344:	f003 0301 	and.w	r3, r3, #1
   15348:	2b00      	cmp	r3, #0
   1534a:	d100      	bne.n	1534e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1534c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   1534e:	490a      	ldr	r1, [pc, #40]	; (15378 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
   15350:	9b01      	ldr	r3, [sp, #4]
   15352:	9a00      	ldr	r2, [sp, #0]
   15354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
   15358:	4a06      	ldr	r2, [pc, #24]	; (15374 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   1535a:	9b01      	ldr	r3, [sp, #4]
   1535c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15360:	1c5a      	adds	r2, r3, #1
   15362:	4904      	ldr	r1, [pc, #16]	; (15374 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   15364:	9b01      	ldr	r3, [sp, #4]
   15366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1536a:	bf00      	nop
   1536c:	b003      	add	sp, #12
   1536e:	f85d fb04 	ldr.w	pc, [sp], #4
   15372:	bf00      	nop
   15374:	1fff97a8 	.word	0x1fff97a8
   15378:	1fff97a4 	.word	0x1fff97a4

0001537c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   1537c:	b500      	push	{lr}
   1537e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15380:	f7eb fc0e 	bl	ba0 <Sys_GetCoreID>
   15384:	4603      	mov	r3, r0
   15386:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
   15388:	4a0d      	ldr	r2, [pc, #52]	; (153c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   1538a:	9b01      	ldr	r3, [sp, #4]
   1538c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15390:	1e5a      	subs	r2, r3, #1
   15392:	490b      	ldr	r1, [pc, #44]	; (153c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   15394:	9b01      	ldr	r3, [sp, #4]
   15396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   1539a:	4a0a      	ldr	r2, [pc, #40]	; (153c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
   1539c:	9b01      	ldr	r3, [sp, #4]
   1539e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153a2:	f003 0301 	and.w	r3, r3, #1
   153a6:	2b00      	cmp	r3, #0
   153a8:	d106      	bne.n	153b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
   153aa:	4a05      	ldr	r2, [pc, #20]	; (153c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   153ac:	9b01      	ldr	r3, [sp, #4]
   153ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153b2:	2b00      	cmp	r3, #0
   153b4:	d100      	bne.n	153b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   153b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   153b8:	bf00      	nop
   153ba:	b003      	add	sp, #12
   153bc:	f85d fb04 	ldr.w	pc, [sp], #4
   153c0:	1fff97a8 	.word	0x1fff97a8
   153c4:	1fff97a4 	.word	0x1fff97a4

000153c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   153c8:	b500      	push	{lr}
   153ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   153cc:	f7eb fbe8 	bl	ba0 <Sys_GetCoreID>
   153d0:	4603      	mov	r3, r0
   153d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
   153d4:	4a10      	ldr	r2, [pc, #64]	; (15418 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   153d6:	9b01      	ldr	r3, [sp, #4]
   153d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153dc:	2b00      	cmp	r3, #0
   153de:	d10d      	bne.n	153fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   153e0:	f7eb fabf 	bl	962 <Port_schm_read_msr>
   153e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   153e6:	9b00      	ldr	r3, [sp, #0]
   153e8:	f003 0301 	and.w	r3, r3, #1
   153ec:	2b00      	cmp	r3, #0
   153ee:	d100      	bne.n	153f2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   153f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   153f2:	490a      	ldr	r1, [pc, #40]	; (1541c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
   153f4:	9b01      	ldr	r3, [sp, #4]
   153f6:	9a00      	ldr	r2, [sp, #0]
   153f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
   153fc:	4a06      	ldr	r2, [pc, #24]	; (15418 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   153fe:	9b01      	ldr	r3, [sp, #4]
   15400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15404:	1c5a      	adds	r2, r3, #1
   15406:	4904      	ldr	r1, [pc, #16]	; (15418 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   15408:	9b01      	ldr	r3, [sp, #4]
   1540a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1540e:	bf00      	nop
   15410:	b003      	add	sp, #12
   15412:	f85d fb04 	ldr.w	pc, [sp], #4
   15416:	bf00      	nop
   15418:	1fff97b0 	.word	0x1fff97b0
   1541c:	1fff97ac 	.word	0x1fff97ac

00015420 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   15420:	b500      	push	{lr}
   15422:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15424:	f7eb fbbc 	bl	ba0 <Sys_GetCoreID>
   15428:	4603      	mov	r3, r0
   1542a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
   1542c:	4a0d      	ldr	r2, [pc, #52]	; (15464 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   1542e:	9b01      	ldr	r3, [sp, #4]
   15430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15434:	1e5a      	subs	r2, r3, #1
   15436:	490b      	ldr	r1, [pc, #44]	; (15464 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   15438:	9b01      	ldr	r3, [sp, #4]
   1543a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   1543e:	4a0a      	ldr	r2, [pc, #40]	; (15468 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
   15440:	9b01      	ldr	r3, [sp, #4]
   15442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15446:	f003 0301 	and.w	r3, r3, #1
   1544a:	2b00      	cmp	r3, #0
   1544c:	d106      	bne.n	1545c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
   1544e:	4a05      	ldr	r2, [pc, #20]	; (15464 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   15450:	9b01      	ldr	r3, [sp, #4]
   15452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15456:	2b00      	cmp	r3, #0
   15458:	d100      	bne.n	1545c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1545a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1545c:	bf00      	nop
   1545e:	b003      	add	sp, #12
   15460:	f85d fb04 	ldr.w	pc, [sp], #4
   15464:	1fff97b0 	.word	0x1fff97b0
   15468:	1fff97ac 	.word	0x1fff97ac

0001546c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   1546c:	b500      	push	{lr}
   1546e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15470:	f7eb fb96 	bl	ba0 <Sys_GetCoreID>
   15474:	4603      	mov	r3, r0
   15476:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
   15478:	4a10      	ldr	r2, [pc, #64]	; (154bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   1547a:	9b01      	ldr	r3, [sp, #4]
   1547c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15480:	2b00      	cmp	r3, #0
   15482:	d10d      	bne.n	154a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15484:	f7eb fa6d 	bl	962 <Port_schm_read_msr>
   15488:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1548a:	9b00      	ldr	r3, [sp, #0]
   1548c:	f003 0301 	and.w	r3, r3, #1
   15490:	2b00      	cmp	r3, #0
   15492:	d100      	bne.n	15496 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15494:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   15496:	490a      	ldr	r1, [pc, #40]	; (154c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
   15498:	9b01      	ldr	r3, [sp, #4]
   1549a:	9a00      	ldr	r2, [sp, #0]
   1549c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
   154a0:	4a06      	ldr	r2, [pc, #24]	; (154bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   154a2:	9b01      	ldr	r3, [sp, #4]
   154a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154a8:	1c5a      	adds	r2, r3, #1
   154aa:	4904      	ldr	r1, [pc, #16]	; (154bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   154ac:	9b01      	ldr	r3, [sp, #4]
   154ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   154b2:	bf00      	nop
   154b4:	b003      	add	sp, #12
   154b6:	f85d fb04 	ldr.w	pc, [sp], #4
   154ba:	bf00      	nop
   154bc:	1fff97b8 	.word	0x1fff97b8
   154c0:	1fff97b4 	.word	0x1fff97b4

000154c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   154c4:	b500      	push	{lr}
   154c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   154c8:	f7eb fb6a 	bl	ba0 <Sys_GetCoreID>
   154cc:	4603      	mov	r3, r0
   154ce:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
   154d0:	4a0d      	ldr	r2, [pc, #52]	; (15508 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   154d2:	9b01      	ldr	r3, [sp, #4]
   154d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154d8:	1e5a      	subs	r2, r3, #1
   154da:	490b      	ldr	r1, [pc, #44]	; (15508 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   154dc:	9b01      	ldr	r3, [sp, #4]
   154de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   154e2:	4a0a      	ldr	r2, [pc, #40]	; (1550c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
   154e4:	9b01      	ldr	r3, [sp, #4]
   154e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154ea:	f003 0301 	and.w	r3, r3, #1
   154ee:	2b00      	cmp	r3, #0
   154f0:	d106      	bne.n	15500 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
   154f2:	4a05      	ldr	r2, [pc, #20]	; (15508 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   154f4:	9b01      	ldr	r3, [sp, #4]
   154f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154fa:	2b00      	cmp	r3, #0
   154fc:	d100      	bne.n	15500 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   154fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15500:	bf00      	nop
   15502:	b003      	add	sp, #12
   15504:	f85d fb04 	ldr.w	pc, [sp], #4
   15508:	1fff97b8 	.word	0x1fff97b8
   1550c:	1fff97b4 	.word	0x1fff97b4

00015510 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   15510:	b500      	push	{lr}
   15512:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15514:	f7eb fb44 	bl	ba0 <Sys_GetCoreID>
   15518:	4603      	mov	r3, r0
   1551a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
   1551c:	4a10      	ldr	r2, [pc, #64]	; (15560 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   1551e:	9b01      	ldr	r3, [sp, #4]
   15520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15524:	2b00      	cmp	r3, #0
   15526:	d10d      	bne.n	15544 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15528:	f7eb fa1b 	bl	962 <Port_schm_read_msr>
   1552c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1552e:	9b00      	ldr	r3, [sp, #0]
   15530:	f003 0301 	and.w	r3, r3, #1
   15534:	2b00      	cmp	r3, #0
   15536:	d100      	bne.n	1553a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15538:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   1553a:	490a      	ldr	r1, [pc, #40]	; (15564 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
   1553c:	9b01      	ldr	r3, [sp, #4]
   1553e:	9a00      	ldr	r2, [sp, #0]
   15540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
   15544:	4a06      	ldr	r2, [pc, #24]	; (15560 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   15546:	9b01      	ldr	r3, [sp, #4]
   15548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1554c:	1c5a      	adds	r2, r3, #1
   1554e:	4904      	ldr	r1, [pc, #16]	; (15560 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   15550:	9b01      	ldr	r3, [sp, #4]
   15552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15556:	bf00      	nop
   15558:	b003      	add	sp, #12
   1555a:	f85d fb04 	ldr.w	pc, [sp], #4
   1555e:	bf00      	nop
   15560:	1fff97c0 	.word	0x1fff97c0
   15564:	1fff97bc 	.word	0x1fff97bc

00015568 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   15568:	b500      	push	{lr}
   1556a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1556c:	f7eb fb18 	bl	ba0 <Sys_GetCoreID>
   15570:	4603      	mov	r3, r0
   15572:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
   15574:	4a0d      	ldr	r2, [pc, #52]	; (155ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   15576:	9b01      	ldr	r3, [sp, #4]
   15578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1557c:	1e5a      	subs	r2, r3, #1
   1557e:	490b      	ldr	r1, [pc, #44]	; (155ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   15580:	9b01      	ldr	r3, [sp, #4]
   15582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   15586:	4a0a      	ldr	r2, [pc, #40]	; (155b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
   15588:	9b01      	ldr	r3, [sp, #4]
   1558a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1558e:	f003 0301 	and.w	r3, r3, #1
   15592:	2b00      	cmp	r3, #0
   15594:	d106      	bne.n	155a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
   15596:	4a05      	ldr	r2, [pc, #20]	; (155ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   15598:	9b01      	ldr	r3, [sp, #4]
   1559a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1559e:	2b00      	cmp	r3, #0
   155a0:	d100      	bne.n	155a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   155a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   155a4:	bf00      	nop
   155a6:	b003      	add	sp, #12
   155a8:	f85d fb04 	ldr.w	pc, [sp], #4
   155ac:	1fff97c0 	.word	0x1fff97c0
   155b0:	1fff97bc 	.word	0x1fff97bc

000155b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   155b4:	b500      	push	{lr}
   155b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   155b8:	f7eb faf2 	bl	ba0 <Sys_GetCoreID>
   155bc:	4603      	mov	r3, r0
   155be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
   155c0:	4a10      	ldr	r2, [pc, #64]	; (15604 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   155c2:	9b01      	ldr	r3, [sp, #4]
   155c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155c8:	2b00      	cmp	r3, #0
   155ca:	d10d      	bne.n	155e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   155cc:	f7eb f9c9 	bl	962 <Port_schm_read_msr>
   155d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   155d2:	9b00      	ldr	r3, [sp, #0]
   155d4:	f003 0301 	and.w	r3, r3, #1
   155d8:	2b00      	cmp	r3, #0
   155da:	d100      	bne.n	155de <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   155dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   155de:	490a      	ldr	r1, [pc, #40]	; (15608 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
   155e0:	9b01      	ldr	r3, [sp, #4]
   155e2:	9a00      	ldr	r2, [sp, #0]
   155e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
   155e8:	4a06      	ldr	r2, [pc, #24]	; (15604 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   155ea:	9b01      	ldr	r3, [sp, #4]
   155ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155f0:	1c5a      	adds	r2, r3, #1
   155f2:	4904      	ldr	r1, [pc, #16]	; (15604 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   155f4:	9b01      	ldr	r3, [sp, #4]
   155f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   155fa:	bf00      	nop
   155fc:	b003      	add	sp, #12
   155fe:	f85d fb04 	ldr.w	pc, [sp], #4
   15602:	bf00      	nop
   15604:	1fff97c8 	.word	0x1fff97c8
   15608:	1fff97c4 	.word	0x1fff97c4

0001560c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   1560c:	b500      	push	{lr}
   1560e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15610:	f7eb fac6 	bl	ba0 <Sys_GetCoreID>
   15614:	4603      	mov	r3, r0
   15616:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
   15618:	4a0d      	ldr	r2, [pc, #52]	; (15650 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   1561a:	9b01      	ldr	r3, [sp, #4]
   1561c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15620:	1e5a      	subs	r2, r3, #1
   15622:	490b      	ldr	r1, [pc, #44]	; (15650 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   15624:	9b01      	ldr	r3, [sp, #4]
   15626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   1562a:	4a0a      	ldr	r2, [pc, #40]	; (15654 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
   1562c:	9b01      	ldr	r3, [sp, #4]
   1562e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15632:	f003 0301 	and.w	r3, r3, #1
   15636:	2b00      	cmp	r3, #0
   15638:	d106      	bne.n	15648 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
   1563a:	4a05      	ldr	r2, [pc, #20]	; (15650 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   1563c:	9b01      	ldr	r3, [sp, #4]
   1563e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15642:	2b00      	cmp	r3, #0
   15644:	d100      	bne.n	15648 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15646:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15648:	bf00      	nop
   1564a:	b003      	add	sp, #12
   1564c:	f85d fb04 	ldr.w	pc, [sp], #4
   15650:	1fff97c8 	.word	0x1fff97c8
   15654:	1fff97c4 	.word	0x1fff97c4

00015658 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   15658:	b500      	push	{lr}
   1565a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1565c:	f7eb faa0 	bl	ba0 <Sys_GetCoreID>
   15660:	4603      	mov	r3, r0
   15662:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
   15664:	4a10      	ldr	r2, [pc, #64]	; (156a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   15666:	9b01      	ldr	r3, [sp, #4]
   15668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1566c:	2b00      	cmp	r3, #0
   1566e:	d10d      	bne.n	1568c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15670:	f7eb f977 	bl	962 <Port_schm_read_msr>
   15674:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15676:	9b00      	ldr	r3, [sp, #0]
   15678:	f003 0301 	and.w	r3, r3, #1
   1567c:	2b00      	cmp	r3, #0
   1567e:	d100      	bne.n	15682 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15680:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   15682:	490a      	ldr	r1, [pc, #40]	; (156ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
   15684:	9b01      	ldr	r3, [sp, #4]
   15686:	9a00      	ldr	r2, [sp, #0]
   15688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
   1568c:	4a06      	ldr	r2, [pc, #24]	; (156a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   1568e:	9b01      	ldr	r3, [sp, #4]
   15690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15694:	1c5a      	adds	r2, r3, #1
   15696:	4904      	ldr	r1, [pc, #16]	; (156a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   15698:	9b01      	ldr	r3, [sp, #4]
   1569a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1569e:	bf00      	nop
   156a0:	b003      	add	sp, #12
   156a2:	f85d fb04 	ldr.w	pc, [sp], #4
   156a6:	bf00      	nop
   156a8:	1fff97d0 	.word	0x1fff97d0
   156ac:	1fff97cc 	.word	0x1fff97cc

000156b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   156b0:	b500      	push	{lr}
   156b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   156b4:	f7eb fa74 	bl	ba0 <Sys_GetCoreID>
   156b8:	4603      	mov	r3, r0
   156ba:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
   156bc:	4a0d      	ldr	r2, [pc, #52]	; (156f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   156be:	9b01      	ldr	r3, [sp, #4]
   156c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156c4:	1e5a      	subs	r2, r3, #1
   156c6:	490b      	ldr	r1, [pc, #44]	; (156f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   156c8:	9b01      	ldr	r3, [sp, #4]
   156ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   156ce:	4a0a      	ldr	r2, [pc, #40]	; (156f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
   156d0:	9b01      	ldr	r3, [sp, #4]
   156d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156d6:	f003 0301 	and.w	r3, r3, #1
   156da:	2b00      	cmp	r3, #0
   156dc:	d106      	bne.n	156ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
   156de:	4a05      	ldr	r2, [pc, #20]	; (156f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   156e0:	9b01      	ldr	r3, [sp, #4]
   156e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156e6:	2b00      	cmp	r3, #0
   156e8:	d100      	bne.n	156ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   156ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   156ec:	bf00      	nop
   156ee:	b003      	add	sp, #12
   156f0:	f85d fb04 	ldr.w	pc, [sp], #4
   156f4:	1fff97d0 	.word	0x1fff97d0
   156f8:	1fff97cc 	.word	0x1fff97cc

000156fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   156fc:	b500      	push	{lr}
   156fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15700:	f7eb fa4e 	bl	ba0 <Sys_GetCoreID>
   15704:	4603      	mov	r3, r0
   15706:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
   15708:	4a10      	ldr	r2, [pc, #64]	; (1574c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   1570a:	9b01      	ldr	r3, [sp, #4]
   1570c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15710:	2b00      	cmp	r3, #0
   15712:	d10d      	bne.n	15730 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15714:	f7eb f925 	bl	962 <Port_schm_read_msr>
   15718:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1571a:	9b00      	ldr	r3, [sp, #0]
   1571c:	f003 0301 	and.w	r3, r3, #1
   15720:	2b00      	cmp	r3, #0
   15722:	d100      	bne.n	15726 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15724:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   15726:	490a      	ldr	r1, [pc, #40]	; (15750 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
   15728:	9b01      	ldr	r3, [sp, #4]
   1572a:	9a00      	ldr	r2, [sp, #0]
   1572c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
   15730:	4a06      	ldr	r2, [pc, #24]	; (1574c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   15732:	9b01      	ldr	r3, [sp, #4]
   15734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15738:	1c5a      	adds	r2, r3, #1
   1573a:	4904      	ldr	r1, [pc, #16]	; (1574c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   1573c:	9b01      	ldr	r3, [sp, #4]
   1573e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15742:	bf00      	nop
   15744:	b003      	add	sp, #12
   15746:	f85d fb04 	ldr.w	pc, [sp], #4
   1574a:	bf00      	nop
   1574c:	1fff97d8 	.word	0x1fff97d8
   15750:	1fff97d4 	.word	0x1fff97d4

00015754 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   15754:	b500      	push	{lr}
   15756:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15758:	f7eb fa22 	bl	ba0 <Sys_GetCoreID>
   1575c:	4603      	mov	r3, r0
   1575e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
   15760:	4a0d      	ldr	r2, [pc, #52]	; (15798 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   15762:	9b01      	ldr	r3, [sp, #4]
   15764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15768:	1e5a      	subs	r2, r3, #1
   1576a:	490b      	ldr	r1, [pc, #44]	; (15798 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   1576c:	9b01      	ldr	r3, [sp, #4]
   1576e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   15772:	4a0a      	ldr	r2, [pc, #40]	; (1579c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
   15774:	9b01      	ldr	r3, [sp, #4]
   15776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1577a:	f003 0301 	and.w	r3, r3, #1
   1577e:	2b00      	cmp	r3, #0
   15780:	d106      	bne.n	15790 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
   15782:	4a05      	ldr	r2, [pc, #20]	; (15798 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   15784:	9b01      	ldr	r3, [sp, #4]
   15786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1578a:	2b00      	cmp	r3, #0
   1578c:	d100      	bne.n	15790 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1578e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15790:	bf00      	nop
   15792:	b003      	add	sp, #12
   15794:	f85d fb04 	ldr.w	pc, [sp], #4
   15798:	1fff97d8 	.word	0x1fff97d8
   1579c:	1fff97d4 	.word	0x1fff97d4

000157a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   157a0:	b500      	push	{lr}
   157a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   157a4:	f7eb f9fc 	bl	ba0 <Sys_GetCoreID>
   157a8:	4603      	mov	r3, r0
   157aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
   157ac:	4a10      	ldr	r2, [pc, #64]	; (157f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   157ae:	9b01      	ldr	r3, [sp, #4]
   157b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157b4:	2b00      	cmp	r3, #0
   157b6:	d10d      	bne.n	157d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   157b8:	f7eb f8d3 	bl	962 <Port_schm_read_msr>
   157bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   157be:	9b00      	ldr	r3, [sp, #0]
   157c0:	f003 0301 	and.w	r3, r3, #1
   157c4:	2b00      	cmp	r3, #0
   157c6:	d100      	bne.n	157ca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   157c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   157ca:	490a      	ldr	r1, [pc, #40]	; (157f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
   157cc:	9b01      	ldr	r3, [sp, #4]
   157ce:	9a00      	ldr	r2, [sp, #0]
   157d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
   157d4:	4a06      	ldr	r2, [pc, #24]	; (157f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   157d6:	9b01      	ldr	r3, [sp, #4]
   157d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157dc:	1c5a      	adds	r2, r3, #1
   157de:	4904      	ldr	r1, [pc, #16]	; (157f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   157e0:	9b01      	ldr	r3, [sp, #4]
   157e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   157e6:	bf00      	nop
   157e8:	b003      	add	sp, #12
   157ea:	f85d fb04 	ldr.w	pc, [sp], #4
   157ee:	bf00      	nop
   157f0:	1fff97e0 	.word	0x1fff97e0
   157f4:	1fff97dc 	.word	0x1fff97dc

000157f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   157f8:	b500      	push	{lr}
   157fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   157fc:	f7eb f9d0 	bl	ba0 <Sys_GetCoreID>
   15800:	4603      	mov	r3, r0
   15802:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
   15804:	4a0d      	ldr	r2, [pc, #52]	; (1583c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   15806:	9b01      	ldr	r3, [sp, #4]
   15808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1580c:	1e5a      	subs	r2, r3, #1
   1580e:	490b      	ldr	r1, [pc, #44]	; (1583c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   15810:	9b01      	ldr	r3, [sp, #4]
   15812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   15816:	4a0a      	ldr	r2, [pc, #40]	; (15840 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
   15818:	9b01      	ldr	r3, [sp, #4]
   1581a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1581e:	f003 0301 	and.w	r3, r3, #1
   15822:	2b00      	cmp	r3, #0
   15824:	d106      	bne.n	15834 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
   15826:	4a05      	ldr	r2, [pc, #20]	; (1583c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   15828:	9b01      	ldr	r3, [sp, #4]
   1582a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1582e:	2b00      	cmp	r3, #0
   15830:	d100      	bne.n	15834 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15832:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15834:	bf00      	nop
   15836:	b003      	add	sp, #12
   15838:	f85d fb04 	ldr.w	pc, [sp], #4
   1583c:	1fff97e0 	.word	0x1fff97e0
   15840:	1fff97dc 	.word	0x1fff97dc

00015844 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   15844:	b500      	push	{lr}
   15846:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15848:	f7eb f9aa 	bl	ba0 <Sys_GetCoreID>
   1584c:	4603      	mov	r3, r0
   1584e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
   15850:	4a10      	ldr	r2, [pc, #64]	; (15894 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   15852:	9b01      	ldr	r3, [sp, #4]
   15854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15858:	2b00      	cmp	r3, #0
   1585a:	d10d      	bne.n	15878 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1585c:	f7eb f881 	bl	962 <Port_schm_read_msr>
   15860:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15862:	9b00      	ldr	r3, [sp, #0]
   15864:	f003 0301 	and.w	r3, r3, #1
   15868:	2b00      	cmp	r3, #0
   1586a:	d100      	bne.n	1586e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1586c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   1586e:	490a      	ldr	r1, [pc, #40]	; (15898 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
   15870:	9b01      	ldr	r3, [sp, #4]
   15872:	9a00      	ldr	r2, [sp, #0]
   15874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
   15878:	4a06      	ldr	r2, [pc, #24]	; (15894 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   1587a:	9b01      	ldr	r3, [sp, #4]
   1587c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15880:	1c5a      	adds	r2, r3, #1
   15882:	4904      	ldr	r1, [pc, #16]	; (15894 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   15884:	9b01      	ldr	r3, [sp, #4]
   15886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1588a:	bf00      	nop
   1588c:	b003      	add	sp, #12
   1588e:	f85d fb04 	ldr.w	pc, [sp], #4
   15892:	bf00      	nop
   15894:	1fff97e8 	.word	0x1fff97e8
   15898:	1fff97e4 	.word	0x1fff97e4

0001589c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   1589c:	b500      	push	{lr}
   1589e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   158a0:	f7eb f97e 	bl	ba0 <Sys_GetCoreID>
   158a4:	4603      	mov	r3, r0
   158a6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
   158a8:	4a0d      	ldr	r2, [pc, #52]	; (158e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   158aa:	9b01      	ldr	r3, [sp, #4]
   158ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158b0:	1e5a      	subs	r2, r3, #1
   158b2:	490b      	ldr	r1, [pc, #44]	; (158e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   158b4:	9b01      	ldr	r3, [sp, #4]
   158b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   158ba:	4a0a      	ldr	r2, [pc, #40]	; (158e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
   158bc:	9b01      	ldr	r3, [sp, #4]
   158be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158c2:	f003 0301 	and.w	r3, r3, #1
   158c6:	2b00      	cmp	r3, #0
   158c8:	d106      	bne.n	158d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
   158ca:	4a05      	ldr	r2, [pc, #20]	; (158e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   158cc:	9b01      	ldr	r3, [sp, #4]
   158ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158d2:	2b00      	cmp	r3, #0
   158d4:	d100      	bne.n	158d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   158d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   158d8:	bf00      	nop
   158da:	b003      	add	sp, #12
   158dc:	f85d fb04 	ldr.w	pc, [sp], #4
   158e0:	1fff97e8 	.word	0x1fff97e8
   158e4:	1fff97e4 	.word	0x1fff97e4

000158e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   158e8:	b500      	push	{lr}
   158ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   158ec:	f7eb f958 	bl	ba0 <Sys_GetCoreID>
   158f0:	4603      	mov	r3, r0
   158f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
   158f4:	4a10      	ldr	r2, [pc, #64]	; (15938 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   158f6:	9b01      	ldr	r3, [sp, #4]
   158f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158fc:	2b00      	cmp	r3, #0
   158fe:	d10d      	bne.n	1591c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15900:	f7eb f82f 	bl	962 <Port_schm_read_msr>
   15904:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15906:	9b00      	ldr	r3, [sp, #0]
   15908:	f003 0301 	and.w	r3, r3, #1
   1590c:	2b00      	cmp	r3, #0
   1590e:	d100      	bne.n	15912 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15910:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   15912:	490a      	ldr	r1, [pc, #40]	; (1593c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
   15914:	9b01      	ldr	r3, [sp, #4]
   15916:	9a00      	ldr	r2, [sp, #0]
   15918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
   1591c:	4a06      	ldr	r2, [pc, #24]	; (15938 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   1591e:	9b01      	ldr	r3, [sp, #4]
   15920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15924:	1c5a      	adds	r2, r3, #1
   15926:	4904      	ldr	r1, [pc, #16]	; (15938 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   15928:	9b01      	ldr	r3, [sp, #4]
   1592a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1592e:	bf00      	nop
   15930:	b003      	add	sp, #12
   15932:	f85d fb04 	ldr.w	pc, [sp], #4
   15936:	bf00      	nop
   15938:	1fff97f0 	.word	0x1fff97f0
   1593c:	1fff97ec 	.word	0x1fff97ec

00015940 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   15940:	b500      	push	{lr}
   15942:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15944:	f7eb f92c 	bl	ba0 <Sys_GetCoreID>
   15948:	4603      	mov	r3, r0
   1594a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
   1594c:	4a0d      	ldr	r2, [pc, #52]	; (15984 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   1594e:	9b01      	ldr	r3, [sp, #4]
   15950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15954:	1e5a      	subs	r2, r3, #1
   15956:	490b      	ldr	r1, [pc, #44]	; (15984 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   15958:	9b01      	ldr	r3, [sp, #4]
   1595a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   1595e:	4a0a      	ldr	r2, [pc, #40]	; (15988 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
   15960:	9b01      	ldr	r3, [sp, #4]
   15962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15966:	f003 0301 	and.w	r3, r3, #1
   1596a:	2b00      	cmp	r3, #0
   1596c:	d106      	bne.n	1597c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
   1596e:	4a05      	ldr	r2, [pc, #20]	; (15984 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   15970:	9b01      	ldr	r3, [sp, #4]
   15972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15976:	2b00      	cmp	r3, #0
   15978:	d100      	bne.n	1597c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1597a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1597c:	bf00      	nop
   1597e:	b003      	add	sp, #12
   15980:	f85d fb04 	ldr.w	pc, [sp], #4
   15984:	1fff97f0 	.word	0x1fff97f0
   15988:	1fff97ec 	.word	0x1fff97ec

0001598c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   1598c:	b500      	push	{lr}
   1598e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15990:	f7eb f906 	bl	ba0 <Sys_GetCoreID>
   15994:	4603      	mov	r3, r0
   15996:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
   15998:	4a10      	ldr	r2, [pc, #64]	; (159dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   1599a:	9b01      	ldr	r3, [sp, #4]
   1599c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159a0:	2b00      	cmp	r3, #0
   159a2:	d10d      	bne.n	159c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   159a4:	f7ea ffdd 	bl	962 <Port_schm_read_msr>
   159a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   159aa:	9b00      	ldr	r3, [sp, #0]
   159ac:	f003 0301 	and.w	r3, r3, #1
   159b0:	2b00      	cmp	r3, #0
   159b2:	d100      	bne.n	159b6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   159b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   159b6:	490a      	ldr	r1, [pc, #40]	; (159e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
   159b8:	9b01      	ldr	r3, [sp, #4]
   159ba:	9a00      	ldr	r2, [sp, #0]
   159bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
   159c0:	4a06      	ldr	r2, [pc, #24]	; (159dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   159c2:	9b01      	ldr	r3, [sp, #4]
   159c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159c8:	1c5a      	adds	r2, r3, #1
   159ca:	4904      	ldr	r1, [pc, #16]	; (159dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   159cc:	9b01      	ldr	r3, [sp, #4]
   159ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   159d2:	bf00      	nop
   159d4:	b003      	add	sp, #12
   159d6:	f85d fb04 	ldr.w	pc, [sp], #4
   159da:	bf00      	nop
   159dc:	1fff97f8 	.word	0x1fff97f8
   159e0:	1fff97f4 	.word	0x1fff97f4

000159e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   159e4:	b500      	push	{lr}
   159e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   159e8:	f7eb f8da 	bl	ba0 <Sys_GetCoreID>
   159ec:	4603      	mov	r3, r0
   159ee:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
   159f0:	4a0d      	ldr	r2, [pc, #52]	; (15a28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   159f2:	9b01      	ldr	r3, [sp, #4]
   159f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159f8:	1e5a      	subs	r2, r3, #1
   159fa:	490b      	ldr	r1, [pc, #44]	; (15a28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   159fc:	9b01      	ldr	r3, [sp, #4]
   159fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   15a02:	4a0a      	ldr	r2, [pc, #40]	; (15a2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
   15a04:	9b01      	ldr	r3, [sp, #4]
   15a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a0a:	f003 0301 	and.w	r3, r3, #1
   15a0e:	2b00      	cmp	r3, #0
   15a10:	d106      	bne.n	15a20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
   15a12:	4a05      	ldr	r2, [pc, #20]	; (15a28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   15a14:	9b01      	ldr	r3, [sp, #4]
   15a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a1a:	2b00      	cmp	r3, #0
   15a1c:	d100      	bne.n	15a20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15a1e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15a20:	bf00      	nop
   15a22:	b003      	add	sp, #12
   15a24:	f85d fb04 	ldr.w	pc, [sp], #4
   15a28:	1fff97f8 	.word	0x1fff97f8
   15a2c:	1fff97f4 	.word	0x1fff97f4

00015a30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   15a30:	b500      	push	{lr}
   15a32:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15a34:	f7eb f8b4 	bl	ba0 <Sys_GetCoreID>
   15a38:	4603      	mov	r3, r0
   15a3a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
   15a3c:	4a10      	ldr	r2, [pc, #64]	; (15a80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   15a3e:	9b01      	ldr	r3, [sp, #4]
   15a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a44:	2b00      	cmp	r3, #0
   15a46:	d10d      	bne.n	15a64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15a48:	f7ea ff8b 	bl	962 <Port_schm_read_msr>
   15a4c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15a4e:	9b00      	ldr	r3, [sp, #0]
   15a50:	f003 0301 	and.w	r3, r3, #1
   15a54:	2b00      	cmp	r3, #0
   15a56:	d100      	bne.n	15a5a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15a58:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   15a5a:	490a      	ldr	r1, [pc, #40]	; (15a84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
   15a5c:	9b01      	ldr	r3, [sp, #4]
   15a5e:	9a00      	ldr	r2, [sp, #0]
   15a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
   15a64:	4a06      	ldr	r2, [pc, #24]	; (15a80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   15a66:	9b01      	ldr	r3, [sp, #4]
   15a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a6c:	1c5a      	adds	r2, r3, #1
   15a6e:	4904      	ldr	r1, [pc, #16]	; (15a80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   15a70:	9b01      	ldr	r3, [sp, #4]
   15a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15a76:	bf00      	nop
   15a78:	b003      	add	sp, #12
   15a7a:	f85d fb04 	ldr.w	pc, [sp], #4
   15a7e:	bf00      	nop
   15a80:	1fff9800 	.word	0x1fff9800
   15a84:	1fff97fc 	.word	0x1fff97fc

00015a88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   15a88:	b500      	push	{lr}
   15a8a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15a8c:	f7eb f888 	bl	ba0 <Sys_GetCoreID>
   15a90:	4603      	mov	r3, r0
   15a92:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
   15a94:	4a0d      	ldr	r2, [pc, #52]	; (15acc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   15a96:	9b01      	ldr	r3, [sp, #4]
   15a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a9c:	1e5a      	subs	r2, r3, #1
   15a9e:	490b      	ldr	r1, [pc, #44]	; (15acc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   15aa0:	9b01      	ldr	r3, [sp, #4]
   15aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   15aa6:	4a0a      	ldr	r2, [pc, #40]	; (15ad0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
   15aa8:	9b01      	ldr	r3, [sp, #4]
   15aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15aae:	f003 0301 	and.w	r3, r3, #1
   15ab2:	2b00      	cmp	r3, #0
   15ab4:	d106      	bne.n	15ac4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
   15ab6:	4a05      	ldr	r2, [pc, #20]	; (15acc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   15ab8:	9b01      	ldr	r3, [sp, #4]
   15aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15abe:	2b00      	cmp	r3, #0
   15ac0:	d100      	bne.n	15ac4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15ac2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15ac4:	bf00      	nop
   15ac6:	b003      	add	sp, #12
   15ac8:	f85d fb04 	ldr.w	pc, [sp], #4
   15acc:	1fff9800 	.word	0x1fff9800
   15ad0:	1fff97fc 	.word	0x1fff97fc

00015ad4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   15ad4:	b500      	push	{lr}
   15ad6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15ad8:	f7eb f862 	bl	ba0 <Sys_GetCoreID>
   15adc:	4603      	mov	r3, r0
   15ade:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
   15ae0:	4a10      	ldr	r2, [pc, #64]	; (15b24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   15ae2:	9b01      	ldr	r3, [sp, #4]
   15ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ae8:	2b00      	cmp	r3, #0
   15aea:	d10d      	bne.n	15b08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15aec:	f7ea ff39 	bl	962 <Port_schm_read_msr>
   15af0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15af2:	9b00      	ldr	r3, [sp, #0]
   15af4:	f003 0301 	and.w	r3, r3, #1
   15af8:	2b00      	cmp	r3, #0
   15afa:	d100      	bne.n	15afe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15afc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   15afe:	490a      	ldr	r1, [pc, #40]	; (15b28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
   15b00:	9b01      	ldr	r3, [sp, #4]
   15b02:	9a00      	ldr	r2, [sp, #0]
   15b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
   15b08:	4a06      	ldr	r2, [pc, #24]	; (15b24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   15b0a:	9b01      	ldr	r3, [sp, #4]
   15b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b10:	1c5a      	adds	r2, r3, #1
   15b12:	4904      	ldr	r1, [pc, #16]	; (15b24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   15b14:	9b01      	ldr	r3, [sp, #4]
   15b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15b1a:	bf00      	nop
   15b1c:	b003      	add	sp, #12
   15b1e:	f85d fb04 	ldr.w	pc, [sp], #4
   15b22:	bf00      	nop
   15b24:	1fff9808 	.word	0x1fff9808
   15b28:	1fff9804 	.word	0x1fff9804

00015b2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   15b2c:	b500      	push	{lr}
   15b2e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15b30:	f7eb f836 	bl	ba0 <Sys_GetCoreID>
   15b34:	4603      	mov	r3, r0
   15b36:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
   15b38:	4a0d      	ldr	r2, [pc, #52]	; (15b70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   15b3a:	9b01      	ldr	r3, [sp, #4]
   15b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b40:	1e5a      	subs	r2, r3, #1
   15b42:	490b      	ldr	r1, [pc, #44]	; (15b70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   15b44:	9b01      	ldr	r3, [sp, #4]
   15b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   15b4a:	4a0a      	ldr	r2, [pc, #40]	; (15b74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
   15b4c:	9b01      	ldr	r3, [sp, #4]
   15b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b52:	f003 0301 	and.w	r3, r3, #1
   15b56:	2b00      	cmp	r3, #0
   15b58:	d106      	bne.n	15b68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
   15b5a:	4a05      	ldr	r2, [pc, #20]	; (15b70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   15b5c:	9b01      	ldr	r3, [sp, #4]
   15b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b62:	2b00      	cmp	r3, #0
   15b64:	d100      	bne.n	15b68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15b66:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15b68:	bf00      	nop
   15b6a:	b003      	add	sp, #12
   15b6c:	f85d fb04 	ldr.w	pc, [sp], #4
   15b70:	1fff9808 	.word	0x1fff9808
   15b74:	1fff9804 	.word	0x1fff9804

00015b78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   15b78:	b500      	push	{lr}
   15b7a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15b7c:	f7eb f810 	bl	ba0 <Sys_GetCoreID>
   15b80:	4603      	mov	r3, r0
   15b82:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
   15b84:	4a10      	ldr	r2, [pc, #64]	; (15bc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   15b86:	9b01      	ldr	r3, [sp, #4]
   15b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b8c:	2b00      	cmp	r3, #0
   15b8e:	d10d      	bne.n	15bac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15b90:	f7ea fee7 	bl	962 <Port_schm_read_msr>
   15b94:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15b96:	9b00      	ldr	r3, [sp, #0]
   15b98:	f003 0301 	and.w	r3, r3, #1
   15b9c:	2b00      	cmp	r3, #0
   15b9e:	d100      	bne.n	15ba2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15ba0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   15ba2:	490a      	ldr	r1, [pc, #40]	; (15bcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
   15ba4:	9b01      	ldr	r3, [sp, #4]
   15ba6:	9a00      	ldr	r2, [sp, #0]
   15ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
   15bac:	4a06      	ldr	r2, [pc, #24]	; (15bc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   15bae:	9b01      	ldr	r3, [sp, #4]
   15bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bb4:	1c5a      	adds	r2, r3, #1
   15bb6:	4904      	ldr	r1, [pc, #16]	; (15bc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   15bb8:	9b01      	ldr	r3, [sp, #4]
   15bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15bbe:	bf00      	nop
   15bc0:	b003      	add	sp, #12
   15bc2:	f85d fb04 	ldr.w	pc, [sp], #4
   15bc6:	bf00      	nop
   15bc8:	1fff9810 	.word	0x1fff9810
   15bcc:	1fff980c 	.word	0x1fff980c

00015bd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   15bd0:	b500      	push	{lr}
   15bd2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15bd4:	f7ea ffe4 	bl	ba0 <Sys_GetCoreID>
   15bd8:	4603      	mov	r3, r0
   15bda:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
   15bdc:	4a0d      	ldr	r2, [pc, #52]	; (15c14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   15bde:	9b01      	ldr	r3, [sp, #4]
   15be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15be4:	1e5a      	subs	r2, r3, #1
   15be6:	490b      	ldr	r1, [pc, #44]	; (15c14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   15be8:	9b01      	ldr	r3, [sp, #4]
   15bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   15bee:	4a0a      	ldr	r2, [pc, #40]	; (15c18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
   15bf0:	9b01      	ldr	r3, [sp, #4]
   15bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bf6:	f003 0301 	and.w	r3, r3, #1
   15bfa:	2b00      	cmp	r3, #0
   15bfc:	d106      	bne.n	15c0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
   15bfe:	4a05      	ldr	r2, [pc, #20]	; (15c14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   15c00:	9b01      	ldr	r3, [sp, #4]
   15c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c06:	2b00      	cmp	r3, #0
   15c08:	d100      	bne.n	15c0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15c0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15c0c:	bf00      	nop
   15c0e:	b003      	add	sp, #12
   15c10:	f85d fb04 	ldr.w	pc, [sp], #4
   15c14:	1fff9810 	.word	0x1fff9810
   15c18:	1fff980c 	.word	0x1fff980c

00015c1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   15c1c:	b500      	push	{lr}
   15c1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15c20:	f7ea ffbe 	bl	ba0 <Sys_GetCoreID>
   15c24:	4603      	mov	r3, r0
   15c26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
   15c28:	4a10      	ldr	r2, [pc, #64]	; (15c6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   15c2a:	9b01      	ldr	r3, [sp, #4]
   15c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c30:	2b00      	cmp	r3, #0
   15c32:	d10d      	bne.n	15c50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15c34:	f7ea fe95 	bl	962 <Port_schm_read_msr>
   15c38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15c3a:	9b00      	ldr	r3, [sp, #0]
   15c3c:	f003 0301 	and.w	r3, r3, #1
   15c40:	2b00      	cmp	r3, #0
   15c42:	d100      	bne.n	15c46 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15c44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   15c46:	490a      	ldr	r1, [pc, #40]	; (15c70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
   15c48:	9b01      	ldr	r3, [sp, #4]
   15c4a:	9a00      	ldr	r2, [sp, #0]
   15c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
   15c50:	4a06      	ldr	r2, [pc, #24]	; (15c6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   15c52:	9b01      	ldr	r3, [sp, #4]
   15c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c58:	1c5a      	adds	r2, r3, #1
   15c5a:	4904      	ldr	r1, [pc, #16]	; (15c6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   15c5c:	9b01      	ldr	r3, [sp, #4]
   15c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15c62:	bf00      	nop
   15c64:	b003      	add	sp, #12
   15c66:	f85d fb04 	ldr.w	pc, [sp], #4
   15c6a:	bf00      	nop
   15c6c:	1fff9818 	.word	0x1fff9818
   15c70:	1fff9814 	.word	0x1fff9814

00015c74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   15c74:	b500      	push	{lr}
   15c76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15c78:	f7ea ff92 	bl	ba0 <Sys_GetCoreID>
   15c7c:	4603      	mov	r3, r0
   15c7e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
   15c80:	4a0d      	ldr	r2, [pc, #52]	; (15cb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   15c82:	9b01      	ldr	r3, [sp, #4]
   15c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c88:	1e5a      	subs	r2, r3, #1
   15c8a:	490b      	ldr	r1, [pc, #44]	; (15cb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   15c8c:	9b01      	ldr	r3, [sp, #4]
   15c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   15c92:	4a0a      	ldr	r2, [pc, #40]	; (15cbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
   15c94:	9b01      	ldr	r3, [sp, #4]
   15c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c9a:	f003 0301 	and.w	r3, r3, #1
   15c9e:	2b00      	cmp	r3, #0
   15ca0:	d106      	bne.n	15cb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
   15ca2:	4a05      	ldr	r2, [pc, #20]	; (15cb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   15ca4:	9b01      	ldr	r3, [sp, #4]
   15ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15caa:	2b00      	cmp	r3, #0
   15cac:	d100      	bne.n	15cb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15cae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15cb0:	bf00      	nop
   15cb2:	b003      	add	sp, #12
   15cb4:	f85d fb04 	ldr.w	pc, [sp], #4
   15cb8:	1fff9818 	.word	0x1fff9818
   15cbc:	1fff9814 	.word	0x1fff9814

00015cc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   15cc0:	b500      	push	{lr}
   15cc2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15cc4:	f7ea ff6c 	bl	ba0 <Sys_GetCoreID>
   15cc8:	4603      	mov	r3, r0
   15cca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
   15ccc:	4a10      	ldr	r2, [pc, #64]	; (15d10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   15cce:	9b01      	ldr	r3, [sp, #4]
   15cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15cd4:	2b00      	cmp	r3, #0
   15cd6:	d10d      	bne.n	15cf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15cd8:	f7ea fe43 	bl	962 <Port_schm_read_msr>
   15cdc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15cde:	9b00      	ldr	r3, [sp, #0]
   15ce0:	f003 0301 	and.w	r3, r3, #1
   15ce4:	2b00      	cmp	r3, #0
   15ce6:	d100      	bne.n	15cea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15ce8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   15cea:	490a      	ldr	r1, [pc, #40]	; (15d14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
   15cec:	9b01      	ldr	r3, [sp, #4]
   15cee:	9a00      	ldr	r2, [sp, #0]
   15cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
   15cf4:	4a06      	ldr	r2, [pc, #24]	; (15d10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   15cf6:	9b01      	ldr	r3, [sp, #4]
   15cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15cfc:	1c5a      	adds	r2, r3, #1
   15cfe:	4904      	ldr	r1, [pc, #16]	; (15d10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   15d00:	9b01      	ldr	r3, [sp, #4]
   15d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15d06:	bf00      	nop
   15d08:	b003      	add	sp, #12
   15d0a:	f85d fb04 	ldr.w	pc, [sp], #4
   15d0e:	bf00      	nop
   15d10:	1fff9820 	.word	0x1fff9820
   15d14:	1fff981c 	.word	0x1fff981c

00015d18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   15d18:	b500      	push	{lr}
   15d1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15d1c:	f7ea ff40 	bl	ba0 <Sys_GetCoreID>
   15d20:	4603      	mov	r3, r0
   15d22:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
   15d24:	4a0d      	ldr	r2, [pc, #52]	; (15d5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   15d26:	9b01      	ldr	r3, [sp, #4]
   15d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d2c:	1e5a      	subs	r2, r3, #1
   15d2e:	490b      	ldr	r1, [pc, #44]	; (15d5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   15d30:	9b01      	ldr	r3, [sp, #4]
   15d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   15d36:	4a0a      	ldr	r2, [pc, #40]	; (15d60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
   15d38:	9b01      	ldr	r3, [sp, #4]
   15d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d3e:	f003 0301 	and.w	r3, r3, #1
   15d42:	2b00      	cmp	r3, #0
   15d44:	d106      	bne.n	15d54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
   15d46:	4a05      	ldr	r2, [pc, #20]	; (15d5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   15d48:	9b01      	ldr	r3, [sp, #4]
   15d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d4e:	2b00      	cmp	r3, #0
   15d50:	d100      	bne.n	15d54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15d52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15d54:	bf00      	nop
   15d56:	b003      	add	sp, #12
   15d58:	f85d fb04 	ldr.w	pc, [sp], #4
   15d5c:	1fff9820 	.word	0x1fff9820
   15d60:	1fff981c 	.word	0x1fff981c

00015d64 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00(void)
{
   15d64:	b500      	push	{lr}
   15d66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15d68:	f7ea ff1a 	bl	ba0 <Sys_GetCoreID>
   15d6c:	4603      	mov	r3, r0
   15d6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId])
   15d70:	4a10      	ldr	r2, [pc, #64]	; (15db4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x50>)
   15d72:	9b01      	ldr	r3, [sp, #4]
   15d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d78:	2b00      	cmp	r3, #0
   15d7a:	d10d      	bne.n	15d98 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15d7c:	f7ea fdfa 	bl	974 <Spi_schm_read_msr>
   15d80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15d82:	9b00      	ldr	r3, [sp, #0]
   15d84:	f003 0301 	and.w	r3, r3, #1
   15d88:	2b00      	cmp	r3, #0
   15d8a:	d100      	bne.n	15d8e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15d8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   15d8e:	490a      	ldr	r1, [pc, #40]	; (15db8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x54>)
   15d90:	9b01      	ldr	r3, [sp, #4]
   15d92:	9a00      	ldr	r2, [sp, #0]
   15d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId]++;
   15d98:	4a06      	ldr	r2, [pc, #24]	; (15db4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x50>)
   15d9a:	9b01      	ldr	r3, [sp, #4]
   15d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15da0:	1c5a      	adds	r2, r3, #1
   15da2:	4904      	ldr	r1, [pc, #16]	; (15db4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x50>)
   15da4:	9b01      	ldr	r3, [sp, #4]
   15da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15daa:	bf00      	nop
   15dac:	b003      	add	sp, #12
   15dae:	f85d fb04 	ldr.w	pc, [sp], #4
   15db2:	bf00      	nop
   15db4:	1fff9828 	.word	0x1fff9828
   15db8:	1fff9824 	.word	0x1fff9824

00015dbc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00(void)
{
   15dbc:	b500      	push	{lr}
   15dbe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15dc0:	f7ea feee 	bl	ba0 <Sys_GetCoreID>
   15dc4:	4603      	mov	r3, r0
   15dc6:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId]--;
   15dc8:	4a0d      	ldr	r2, [pc, #52]	; (15e00 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x44>)
   15dca:	9b01      	ldr	r3, [sp, #4]
   15dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15dd0:	1e5a      	subs	r2, r3, #1
   15dd2:	490b      	ldr	r1, [pc, #44]	; (15e00 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x44>)
   15dd4:	9b01      	ldr	r3, [sp, #4]
   15dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   15dda:	4a0a      	ldr	r2, [pc, #40]	; (15e04 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x48>)
   15ddc:	9b01      	ldr	r3, [sp, #4]
   15dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15de2:	f003 0301 	and.w	r3, r3, #1
   15de6:	2b00      	cmp	r3, #0
   15de8:	d106      	bne.n	15df8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x3c>
   15dea:	4a05      	ldr	r2, [pc, #20]	; (15e00 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x44>)
   15dec:	9b01      	ldr	r3, [sp, #4]
   15dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15df2:	2b00      	cmp	r3, #0
   15df4:	d100      	bne.n	15df8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15df6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15df8:	bf00      	nop
   15dfa:	b003      	add	sp, #12
   15dfc:	f85d fb04 	ldr.w	pc, [sp], #4
   15e00:	1fff9828 	.word	0x1fff9828
   15e04:	1fff9824 	.word	0x1fff9824

00015e08 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01(void)
{
   15e08:	b500      	push	{lr}
   15e0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15e0c:	f7ea fec8 	bl	ba0 <Sys_GetCoreID>
   15e10:	4603      	mov	r3, r0
   15e12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId])
   15e14:	4a10      	ldr	r2, [pc, #64]	; (15e58 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x50>)
   15e16:	9b01      	ldr	r3, [sp, #4]
   15e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e1c:	2b00      	cmp	r3, #0
   15e1e:	d10d      	bne.n	15e3c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15e20:	f7ea fda8 	bl	974 <Spi_schm_read_msr>
   15e24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15e26:	9b00      	ldr	r3, [sp, #0]
   15e28:	f003 0301 	and.w	r3, r3, #1
   15e2c:	2b00      	cmp	r3, #0
   15e2e:	d100      	bne.n	15e32 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15e30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   15e32:	490a      	ldr	r1, [pc, #40]	; (15e5c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x54>)
   15e34:	9b01      	ldr	r3, [sp, #4]
   15e36:	9a00      	ldr	r2, [sp, #0]
   15e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId]++;
   15e3c:	4a06      	ldr	r2, [pc, #24]	; (15e58 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x50>)
   15e3e:	9b01      	ldr	r3, [sp, #4]
   15e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e44:	1c5a      	adds	r2, r3, #1
   15e46:	4904      	ldr	r1, [pc, #16]	; (15e58 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x50>)
   15e48:	9b01      	ldr	r3, [sp, #4]
   15e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15e4e:	bf00      	nop
   15e50:	b003      	add	sp, #12
   15e52:	f85d fb04 	ldr.w	pc, [sp], #4
   15e56:	bf00      	nop
   15e58:	1fff9830 	.word	0x1fff9830
   15e5c:	1fff982c 	.word	0x1fff982c

00015e60 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01(void)
{
   15e60:	b500      	push	{lr}
   15e62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15e64:	f7ea fe9c 	bl	ba0 <Sys_GetCoreID>
   15e68:	4603      	mov	r3, r0
   15e6a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId]--;
   15e6c:	4a0d      	ldr	r2, [pc, #52]	; (15ea4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x44>)
   15e6e:	9b01      	ldr	r3, [sp, #4]
   15e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e74:	1e5a      	subs	r2, r3, #1
   15e76:	490b      	ldr	r1, [pc, #44]	; (15ea4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x44>)
   15e78:	9b01      	ldr	r3, [sp, #4]
   15e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   15e7e:	4a0a      	ldr	r2, [pc, #40]	; (15ea8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x48>)
   15e80:	9b01      	ldr	r3, [sp, #4]
   15e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e86:	f003 0301 	and.w	r3, r3, #1
   15e8a:	2b00      	cmp	r3, #0
   15e8c:	d106      	bne.n	15e9c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x3c>
   15e8e:	4a05      	ldr	r2, [pc, #20]	; (15ea4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x44>)
   15e90:	9b01      	ldr	r3, [sp, #4]
   15e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e96:	2b00      	cmp	r3, #0
   15e98:	d100      	bne.n	15e9c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15e9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15e9c:	bf00      	nop
   15e9e:	b003      	add	sp, #12
   15ea0:	f85d fb04 	ldr.w	pc, [sp], #4
   15ea4:	1fff9830 	.word	0x1fff9830
   15ea8:	1fff982c 	.word	0x1fff982c

00015eac <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02(void)
{
   15eac:	b500      	push	{lr}
   15eae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15eb0:	f7ea fe76 	bl	ba0 <Sys_GetCoreID>
   15eb4:	4603      	mov	r3, r0
   15eb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId])
   15eb8:	4a10      	ldr	r2, [pc, #64]	; (15efc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x50>)
   15eba:	9b01      	ldr	r3, [sp, #4]
   15ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ec0:	2b00      	cmp	r3, #0
   15ec2:	d10d      	bne.n	15ee0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15ec4:	f7ea fd56 	bl	974 <Spi_schm_read_msr>
   15ec8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15eca:	9b00      	ldr	r3, [sp, #0]
   15ecc:	f003 0301 	and.w	r3, r3, #1
   15ed0:	2b00      	cmp	r3, #0
   15ed2:	d100      	bne.n	15ed6 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15ed4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   15ed6:	490a      	ldr	r1, [pc, #40]	; (15f00 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x54>)
   15ed8:	9b01      	ldr	r3, [sp, #4]
   15eda:	9a00      	ldr	r2, [sp, #0]
   15edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId]++;
   15ee0:	4a06      	ldr	r2, [pc, #24]	; (15efc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x50>)
   15ee2:	9b01      	ldr	r3, [sp, #4]
   15ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ee8:	1c5a      	adds	r2, r3, #1
   15eea:	4904      	ldr	r1, [pc, #16]	; (15efc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x50>)
   15eec:	9b01      	ldr	r3, [sp, #4]
   15eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15ef2:	bf00      	nop
   15ef4:	b003      	add	sp, #12
   15ef6:	f85d fb04 	ldr.w	pc, [sp], #4
   15efa:	bf00      	nop
   15efc:	1fff9838 	.word	0x1fff9838
   15f00:	1fff9834 	.word	0x1fff9834

00015f04 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02(void)
{
   15f04:	b500      	push	{lr}
   15f06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15f08:	f7ea fe4a 	bl	ba0 <Sys_GetCoreID>
   15f0c:	4603      	mov	r3, r0
   15f0e:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId]--;
   15f10:	4a0d      	ldr	r2, [pc, #52]	; (15f48 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x44>)
   15f12:	9b01      	ldr	r3, [sp, #4]
   15f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f18:	1e5a      	subs	r2, r3, #1
   15f1a:	490b      	ldr	r1, [pc, #44]	; (15f48 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x44>)
   15f1c:	9b01      	ldr	r3, [sp, #4]
   15f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   15f22:	4a0a      	ldr	r2, [pc, #40]	; (15f4c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x48>)
   15f24:	9b01      	ldr	r3, [sp, #4]
   15f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f2a:	f003 0301 	and.w	r3, r3, #1
   15f2e:	2b00      	cmp	r3, #0
   15f30:	d106      	bne.n	15f40 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x3c>
   15f32:	4a05      	ldr	r2, [pc, #20]	; (15f48 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x44>)
   15f34:	9b01      	ldr	r3, [sp, #4]
   15f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f3a:	2b00      	cmp	r3, #0
   15f3c:	d100      	bne.n	15f40 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15f3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15f40:	bf00      	nop
   15f42:	b003      	add	sp, #12
   15f44:	f85d fb04 	ldr.w	pc, [sp], #4
   15f48:	1fff9838 	.word	0x1fff9838
   15f4c:	1fff9834 	.word	0x1fff9834

00015f50 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03(void)
{
   15f50:	b500      	push	{lr}
   15f52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15f54:	f7ea fe24 	bl	ba0 <Sys_GetCoreID>
   15f58:	4603      	mov	r3, r0
   15f5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId])
   15f5c:	4a10      	ldr	r2, [pc, #64]	; (15fa0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x50>)
   15f5e:	9b01      	ldr	r3, [sp, #4]
   15f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f64:	2b00      	cmp	r3, #0
   15f66:	d10d      	bne.n	15f84 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15f68:	f7ea fd04 	bl	974 <Spi_schm_read_msr>
   15f6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15f6e:	9b00      	ldr	r3, [sp, #0]
   15f70:	f003 0301 	and.w	r3, r3, #1
   15f74:	2b00      	cmp	r3, #0
   15f76:	d100      	bne.n	15f7a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15f78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   15f7a:	490a      	ldr	r1, [pc, #40]	; (15fa4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x54>)
   15f7c:	9b01      	ldr	r3, [sp, #4]
   15f7e:	9a00      	ldr	r2, [sp, #0]
   15f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId]++;
   15f84:	4a06      	ldr	r2, [pc, #24]	; (15fa0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x50>)
   15f86:	9b01      	ldr	r3, [sp, #4]
   15f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f8c:	1c5a      	adds	r2, r3, #1
   15f8e:	4904      	ldr	r1, [pc, #16]	; (15fa0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x50>)
   15f90:	9b01      	ldr	r3, [sp, #4]
   15f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15f96:	bf00      	nop
   15f98:	b003      	add	sp, #12
   15f9a:	f85d fb04 	ldr.w	pc, [sp], #4
   15f9e:	bf00      	nop
   15fa0:	1fff9840 	.word	0x1fff9840
   15fa4:	1fff983c 	.word	0x1fff983c

00015fa8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03(void)
{
   15fa8:	b500      	push	{lr}
   15faa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15fac:	f7ea fdf8 	bl	ba0 <Sys_GetCoreID>
   15fb0:	4603      	mov	r3, r0
   15fb2:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId]--;
   15fb4:	4a0d      	ldr	r2, [pc, #52]	; (15fec <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x44>)
   15fb6:	9b01      	ldr	r3, [sp, #4]
   15fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15fbc:	1e5a      	subs	r2, r3, #1
   15fbe:	490b      	ldr	r1, [pc, #44]	; (15fec <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x44>)
   15fc0:	9b01      	ldr	r3, [sp, #4]
   15fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   15fc6:	4a0a      	ldr	r2, [pc, #40]	; (15ff0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x48>)
   15fc8:	9b01      	ldr	r3, [sp, #4]
   15fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15fce:	f003 0301 	and.w	r3, r3, #1
   15fd2:	2b00      	cmp	r3, #0
   15fd4:	d106      	bne.n	15fe4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x3c>
   15fd6:	4a05      	ldr	r2, [pc, #20]	; (15fec <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x44>)
   15fd8:	9b01      	ldr	r3, [sp, #4]
   15fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15fde:	2b00      	cmp	r3, #0
   15fe0:	d100      	bne.n	15fe4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15fe2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15fe4:	bf00      	nop
   15fe6:	b003      	add	sp, #12
   15fe8:	f85d fb04 	ldr.w	pc, [sp], #4
   15fec:	1fff9840 	.word	0x1fff9840
   15ff0:	1fff983c 	.word	0x1fff983c

00015ff4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04(void)
{
   15ff4:	b500      	push	{lr}
   15ff6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15ff8:	f7ea fdd2 	bl	ba0 <Sys_GetCoreID>
   15ffc:	4603      	mov	r3, r0
   15ffe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId])
   16000:	4a10      	ldr	r2, [pc, #64]	; (16044 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x50>)
   16002:	9b01      	ldr	r3, [sp, #4]
   16004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16008:	2b00      	cmp	r3, #0
   1600a:	d10d      	bne.n	16028 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1600c:	f7ea fcb2 	bl	974 <Spi_schm_read_msr>
   16010:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16012:	9b00      	ldr	r3, [sp, #0]
   16014:	f003 0301 	and.w	r3, r3, #1
   16018:	2b00      	cmp	r3, #0
   1601a:	d100      	bne.n	1601e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1601c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   1601e:	490a      	ldr	r1, [pc, #40]	; (16048 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x54>)
   16020:	9b01      	ldr	r3, [sp, #4]
   16022:	9a00      	ldr	r2, [sp, #0]
   16024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId]++;
   16028:	4a06      	ldr	r2, [pc, #24]	; (16044 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x50>)
   1602a:	9b01      	ldr	r3, [sp, #4]
   1602c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16030:	1c5a      	adds	r2, r3, #1
   16032:	4904      	ldr	r1, [pc, #16]	; (16044 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x50>)
   16034:	9b01      	ldr	r3, [sp, #4]
   16036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1603a:	bf00      	nop
   1603c:	b003      	add	sp, #12
   1603e:	f85d fb04 	ldr.w	pc, [sp], #4
   16042:	bf00      	nop
   16044:	1fff9848 	.word	0x1fff9848
   16048:	1fff9844 	.word	0x1fff9844

0001604c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04(void)
{
   1604c:	b500      	push	{lr}
   1604e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16050:	f7ea fda6 	bl	ba0 <Sys_GetCoreID>
   16054:	4603      	mov	r3, r0
   16056:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId]--;
   16058:	4a0d      	ldr	r2, [pc, #52]	; (16090 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x44>)
   1605a:	9b01      	ldr	r3, [sp, #4]
   1605c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16060:	1e5a      	subs	r2, r3, #1
   16062:	490b      	ldr	r1, [pc, #44]	; (16090 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x44>)
   16064:	9b01      	ldr	r3, [sp, #4]
   16066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   1606a:	4a0a      	ldr	r2, [pc, #40]	; (16094 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x48>)
   1606c:	9b01      	ldr	r3, [sp, #4]
   1606e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16072:	f003 0301 	and.w	r3, r3, #1
   16076:	2b00      	cmp	r3, #0
   16078:	d106      	bne.n	16088 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x3c>
   1607a:	4a05      	ldr	r2, [pc, #20]	; (16090 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x44>)
   1607c:	9b01      	ldr	r3, [sp, #4]
   1607e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16082:	2b00      	cmp	r3, #0
   16084:	d100      	bne.n	16088 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16086:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16088:	bf00      	nop
   1608a:	b003      	add	sp, #12
   1608c:	f85d fb04 	ldr.w	pc, [sp], #4
   16090:	1fff9848 	.word	0x1fff9848
   16094:	1fff9844 	.word	0x1fff9844

00016098 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05(void)
{
   16098:	b500      	push	{lr}
   1609a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1609c:	f7ea fd80 	bl	ba0 <Sys_GetCoreID>
   160a0:	4603      	mov	r3, r0
   160a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId])
   160a4:	4a10      	ldr	r2, [pc, #64]	; (160e8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x50>)
   160a6:	9b01      	ldr	r3, [sp, #4]
   160a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160ac:	2b00      	cmp	r3, #0
   160ae:	d10d      	bne.n	160cc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   160b0:	f7ea fc60 	bl	974 <Spi_schm_read_msr>
   160b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   160b6:	9b00      	ldr	r3, [sp, #0]
   160b8:	f003 0301 	and.w	r3, r3, #1
   160bc:	2b00      	cmp	r3, #0
   160be:	d100      	bne.n	160c2 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   160c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   160c2:	490a      	ldr	r1, [pc, #40]	; (160ec <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x54>)
   160c4:	9b01      	ldr	r3, [sp, #4]
   160c6:	9a00      	ldr	r2, [sp, #0]
   160c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId]++;
   160cc:	4a06      	ldr	r2, [pc, #24]	; (160e8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x50>)
   160ce:	9b01      	ldr	r3, [sp, #4]
   160d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160d4:	1c5a      	adds	r2, r3, #1
   160d6:	4904      	ldr	r1, [pc, #16]	; (160e8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x50>)
   160d8:	9b01      	ldr	r3, [sp, #4]
   160da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   160de:	bf00      	nop
   160e0:	b003      	add	sp, #12
   160e2:	f85d fb04 	ldr.w	pc, [sp], #4
   160e6:	bf00      	nop
   160e8:	1fff9850 	.word	0x1fff9850
   160ec:	1fff984c 	.word	0x1fff984c

000160f0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05(void)
{
   160f0:	b500      	push	{lr}
   160f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   160f4:	f7ea fd54 	bl	ba0 <Sys_GetCoreID>
   160f8:	4603      	mov	r3, r0
   160fa:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId]--;
   160fc:	4a0d      	ldr	r2, [pc, #52]	; (16134 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x44>)
   160fe:	9b01      	ldr	r3, [sp, #4]
   16100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16104:	1e5a      	subs	r2, r3, #1
   16106:	490b      	ldr	r1, [pc, #44]	; (16134 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x44>)
   16108:	9b01      	ldr	r3, [sp, #4]
   1610a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   1610e:	4a0a      	ldr	r2, [pc, #40]	; (16138 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x48>)
   16110:	9b01      	ldr	r3, [sp, #4]
   16112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16116:	f003 0301 	and.w	r3, r3, #1
   1611a:	2b00      	cmp	r3, #0
   1611c:	d106      	bne.n	1612c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x3c>
   1611e:	4a05      	ldr	r2, [pc, #20]	; (16134 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x44>)
   16120:	9b01      	ldr	r3, [sp, #4]
   16122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16126:	2b00      	cmp	r3, #0
   16128:	d100      	bne.n	1612c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1612a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1612c:	bf00      	nop
   1612e:	b003      	add	sp, #12
   16130:	f85d fb04 	ldr.w	pc, [sp], #4
   16134:	1fff9850 	.word	0x1fff9850
   16138:	1fff984c 	.word	0x1fff984c

0001613c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06(void)
{
   1613c:	b500      	push	{lr}
   1613e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16140:	f7ea fd2e 	bl	ba0 <Sys_GetCoreID>
   16144:	4603      	mov	r3, r0
   16146:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId])
   16148:	4a10      	ldr	r2, [pc, #64]	; (1618c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x50>)
   1614a:	9b01      	ldr	r3, [sp, #4]
   1614c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16150:	2b00      	cmp	r3, #0
   16152:	d10d      	bne.n	16170 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16154:	f7ea fc0e 	bl	974 <Spi_schm_read_msr>
   16158:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1615a:	9b00      	ldr	r3, [sp, #0]
   1615c:	f003 0301 	and.w	r3, r3, #1
   16160:	2b00      	cmp	r3, #0
   16162:	d100      	bne.n	16166 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16164:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   16166:	490a      	ldr	r1, [pc, #40]	; (16190 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x54>)
   16168:	9b01      	ldr	r3, [sp, #4]
   1616a:	9a00      	ldr	r2, [sp, #0]
   1616c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId]++;
   16170:	4a06      	ldr	r2, [pc, #24]	; (1618c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x50>)
   16172:	9b01      	ldr	r3, [sp, #4]
   16174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16178:	1c5a      	adds	r2, r3, #1
   1617a:	4904      	ldr	r1, [pc, #16]	; (1618c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x50>)
   1617c:	9b01      	ldr	r3, [sp, #4]
   1617e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16182:	bf00      	nop
   16184:	b003      	add	sp, #12
   16186:	f85d fb04 	ldr.w	pc, [sp], #4
   1618a:	bf00      	nop
   1618c:	1fff9858 	.word	0x1fff9858
   16190:	1fff9854 	.word	0x1fff9854

00016194 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06(void)
{
   16194:	b500      	push	{lr}
   16196:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16198:	f7ea fd02 	bl	ba0 <Sys_GetCoreID>
   1619c:	4603      	mov	r3, r0
   1619e:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId]--;
   161a0:	4a0d      	ldr	r2, [pc, #52]	; (161d8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x44>)
   161a2:	9b01      	ldr	r3, [sp, #4]
   161a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161a8:	1e5a      	subs	r2, r3, #1
   161aa:	490b      	ldr	r1, [pc, #44]	; (161d8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x44>)
   161ac:	9b01      	ldr	r3, [sp, #4]
   161ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   161b2:	4a0a      	ldr	r2, [pc, #40]	; (161dc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x48>)
   161b4:	9b01      	ldr	r3, [sp, #4]
   161b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161ba:	f003 0301 	and.w	r3, r3, #1
   161be:	2b00      	cmp	r3, #0
   161c0:	d106      	bne.n	161d0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x3c>
   161c2:	4a05      	ldr	r2, [pc, #20]	; (161d8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x44>)
   161c4:	9b01      	ldr	r3, [sp, #4]
   161c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161ca:	2b00      	cmp	r3, #0
   161cc:	d100      	bne.n	161d0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   161ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   161d0:	bf00      	nop
   161d2:	b003      	add	sp, #12
   161d4:	f85d fb04 	ldr.w	pc, [sp], #4
   161d8:	1fff9858 	.word	0x1fff9858
   161dc:	1fff9854 	.word	0x1fff9854

000161e0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07(void)
{
   161e0:	b500      	push	{lr}
   161e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   161e4:	f7ea fcdc 	bl	ba0 <Sys_GetCoreID>
   161e8:	4603      	mov	r3, r0
   161ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId])
   161ec:	4a10      	ldr	r2, [pc, #64]	; (16230 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x50>)
   161ee:	9b01      	ldr	r3, [sp, #4]
   161f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161f4:	2b00      	cmp	r3, #0
   161f6:	d10d      	bne.n	16214 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   161f8:	f7ea fbbc 	bl	974 <Spi_schm_read_msr>
   161fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   161fe:	9b00      	ldr	r3, [sp, #0]
   16200:	f003 0301 	and.w	r3, r3, #1
   16204:	2b00      	cmp	r3, #0
   16206:	d100      	bne.n	1620a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16208:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   1620a:	490a      	ldr	r1, [pc, #40]	; (16234 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x54>)
   1620c:	9b01      	ldr	r3, [sp, #4]
   1620e:	9a00      	ldr	r2, [sp, #0]
   16210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId]++;
   16214:	4a06      	ldr	r2, [pc, #24]	; (16230 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x50>)
   16216:	9b01      	ldr	r3, [sp, #4]
   16218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1621c:	1c5a      	adds	r2, r3, #1
   1621e:	4904      	ldr	r1, [pc, #16]	; (16230 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x50>)
   16220:	9b01      	ldr	r3, [sp, #4]
   16222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16226:	bf00      	nop
   16228:	b003      	add	sp, #12
   1622a:	f85d fb04 	ldr.w	pc, [sp], #4
   1622e:	bf00      	nop
   16230:	1fff9860 	.word	0x1fff9860
   16234:	1fff985c 	.word	0x1fff985c

00016238 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07(void)
{
   16238:	b500      	push	{lr}
   1623a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1623c:	f7ea fcb0 	bl	ba0 <Sys_GetCoreID>
   16240:	4603      	mov	r3, r0
   16242:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId]--;
   16244:	4a0d      	ldr	r2, [pc, #52]	; (1627c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x44>)
   16246:	9b01      	ldr	r3, [sp, #4]
   16248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1624c:	1e5a      	subs	r2, r3, #1
   1624e:	490b      	ldr	r1, [pc, #44]	; (1627c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x44>)
   16250:	9b01      	ldr	r3, [sp, #4]
   16252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   16256:	4a0a      	ldr	r2, [pc, #40]	; (16280 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x48>)
   16258:	9b01      	ldr	r3, [sp, #4]
   1625a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1625e:	f003 0301 	and.w	r3, r3, #1
   16262:	2b00      	cmp	r3, #0
   16264:	d106      	bne.n	16274 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x3c>
   16266:	4a05      	ldr	r2, [pc, #20]	; (1627c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x44>)
   16268:	9b01      	ldr	r3, [sp, #4]
   1626a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1626e:	2b00      	cmp	r3, #0
   16270:	d100      	bne.n	16274 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16272:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16274:	bf00      	nop
   16276:	b003      	add	sp, #12
   16278:	f85d fb04 	ldr.w	pc, [sp], #4
   1627c:	1fff9860 	.word	0x1fff9860
   16280:	1fff985c 	.word	0x1fff985c

00016284 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08(void)
{
   16284:	b500      	push	{lr}
   16286:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16288:	f7ea fc8a 	bl	ba0 <Sys_GetCoreID>
   1628c:	4603      	mov	r3, r0
   1628e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId])
   16290:	4a10      	ldr	r2, [pc, #64]	; (162d4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x50>)
   16292:	9b01      	ldr	r3, [sp, #4]
   16294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16298:	2b00      	cmp	r3, #0
   1629a:	d10d      	bne.n	162b8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1629c:	f7ea fb6a 	bl	974 <Spi_schm_read_msr>
   162a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   162a2:	9b00      	ldr	r3, [sp, #0]
   162a4:	f003 0301 	and.w	r3, r3, #1
   162a8:	2b00      	cmp	r3, #0
   162aa:	d100      	bne.n	162ae <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   162ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   162ae:	490a      	ldr	r1, [pc, #40]	; (162d8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x54>)
   162b0:	9b01      	ldr	r3, [sp, #4]
   162b2:	9a00      	ldr	r2, [sp, #0]
   162b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId]++;
   162b8:	4a06      	ldr	r2, [pc, #24]	; (162d4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x50>)
   162ba:	9b01      	ldr	r3, [sp, #4]
   162bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162c0:	1c5a      	adds	r2, r3, #1
   162c2:	4904      	ldr	r1, [pc, #16]	; (162d4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x50>)
   162c4:	9b01      	ldr	r3, [sp, #4]
   162c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   162ca:	bf00      	nop
   162cc:	b003      	add	sp, #12
   162ce:	f85d fb04 	ldr.w	pc, [sp], #4
   162d2:	bf00      	nop
   162d4:	1fff9868 	.word	0x1fff9868
   162d8:	1fff9864 	.word	0x1fff9864

000162dc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08(void)
{
   162dc:	b500      	push	{lr}
   162de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   162e0:	f7ea fc5e 	bl	ba0 <Sys_GetCoreID>
   162e4:	4603      	mov	r3, r0
   162e6:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId]--;
   162e8:	4a0d      	ldr	r2, [pc, #52]	; (16320 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x44>)
   162ea:	9b01      	ldr	r3, [sp, #4]
   162ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162f0:	1e5a      	subs	r2, r3, #1
   162f2:	490b      	ldr	r1, [pc, #44]	; (16320 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x44>)
   162f4:	9b01      	ldr	r3, [sp, #4]
   162f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   162fa:	4a0a      	ldr	r2, [pc, #40]	; (16324 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x48>)
   162fc:	9b01      	ldr	r3, [sp, #4]
   162fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16302:	f003 0301 	and.w	r3, r3, #1
   16306:	2b00      	cmp	r3, #0
   16308:	d106      	bne.n	16318 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x3c>
   1630a:	4a05      	ldr	r2, [pc, #20]	; (16320 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x44>)
   1630c:	9b01      	ldr	r3, [sp, #4]
   1630e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16312:	2b00      	cmp	r3, #0
   16314:	d100      	bne.n	16318 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16316:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16318:	bf00      	nop
   1631a:	b003      	add	sp, #12
   1631c:	f85d fb04 	ldr.w	pc, [sp], #4
   16320:	1fff9868 	.word	0x1fff9868
   16324:	1fff9864 	.word	0x1fff9864

00016328 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09(void)
{
   16328:	b500      	push	{lr}
   1632a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1632c:	f7ea fc38 	bl	ba0 <Sys_GetCoreID>
   16330:	4603      	mov	r3, r0
   16332:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId])
   16334:	4a10      	ldr	r2, [pc, #64]	; (16378 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x50>)
   16336:	9b01      	ldr	r3, [sp, #4]
   16338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1633c:	2b00      	cmp	r3, #0
   1633e:	d10d      	bne.n	1635c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16340:	f7ea fb18 	bl	974 <Spi_schm_read_msr>
   16344:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16346:	9b00      	ldr	r3, [sp, #0]
   16348:	f003 0301 	and.w	r3, r3, #1
   1634c:	2b00      	cmp	r3, #0
   1634e:	d100      	bne.n	16352 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16350:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   16352:	490a      	ldr	r1, [pc, #40]	; (1637c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x54>)
   16354:	9b01      	ldr	r3, [sp, #4]
   16356:	9a00      	ldr	r2, [sp, #0]
   16358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId]++;
   1635c:	4a06      	ldr	r2, [pc, #24]	; (16378 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x50>)
   1635e:	9b01      	ldr	r3, [sp, #4]
   16360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16364:	1c5a      	adds	r2, r3, #1
   16366:	4904      	ldr	r1, [pc, #16]	; (16378 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x50>)
   16368:	9b01      	ldr	r3, [sp, #4]
   1636a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1636e:	bf00      	nop
   16370:	b003      	add	sp, #12
   16372:	f85d fb04 	ldr.w	pc, [sp], #4
   16376:	bf00      	nop
   16378:	1fff9870 	.word	0x1fff9870
   1637c:	1fff986c 	.word	0x1fff986c

00016380 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09(void)
{
   16380:	b500      	push	{lr}
   16382:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16384:	f7ea fc0c 	bl	ba0 <Sys_GetCoreID>
   16388:	4603      	mov	r3, r0
   1638a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId]--;
   1638c:	4a0d      	ldr	r2, [pc, #52]	; (163c4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x44>)
   1638e:	9b01      	ldr	r3, [sp, #4]
   16390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16394:	1e5a      	subs	r2, r3, #1
   16396:	490b      	ldr	r1, [pc, #44]	; (163c4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x44>)
   16398:	9b01      	ldr	r3, [sp, #4]
   1639a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   1639e:	4a0a      	ldr	r2, [pc, #40]	; (163c8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x48>)
   163a0:	9b01      	ldr	r3, [sp, #4]
   163a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163a6:	f003 0301 	and.w	r3, r3, #1
   163aa:	2b00      	cmp	r3, #0
   163ac:	d106      	bne.n	163bc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x3c>
   163ae:	4a05      	ldr	r2, [pc, #20]	; (163c4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x44>)
   163b0:	9b01      	ldr	r3, [sp, #4]
   163b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163b6:	2b00      	cmp	r3, #0
   163b8:	d100      	bne.n	163bc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   163ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   163bc:	bf00      	nop
   163be:	b003      	add	sp, #12
   163c0:	f85d fb04 	ldr.w	pc, [sp], #4
   163c4:	1fff9870 	.word	0x1fff9870
   163c8:	1fff986c 	.word	0x1fff986c

000163cc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10(void)
{
   163cc:	b500      	push	{lr}
   163ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   163d0:	f7ea fbe6 	bl	ba0 <Sys_GetCoreID>
   163d4:	4603      	mov	r3, r0
   163d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId])
   163d8:	4a10      	ldr	r2, [pc, #64]	; (1641c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x50>)
   163da:	9b01      	ldr	r3, [sp, #4]
   163dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163e0:	2b00      	cmp	r3, #0
   163e2:	d10d      	bne.n	16400 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   163e4:	f7ea fac6 	bl	974 <Spi_schm_read_msr>
   163e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   163ea:	9b00      	ldr	r3, [sp, #0]
   163ec:	f003 0301 	and.w	r3, r3, #1
   163f0:	2b00      	cmp	r3, #0
   163f2:	d100      	bne.n	163f6 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   163f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   163f6:	490a      	ldr	r1, [pc, #40]	; (16420 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x54>)
   163f8:	9b01      	ldr	r3, [sp, #4]
   163fa:	9a00      	ldr	r2, [sp, #0]
   163fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId]++;
   16400:	4a06      	ldr	r2, [pc, #24]	; (1641c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x50>)
   16402:	9b01      	ldr	r3, [sp, #4]
   16404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16408:	1c5a      	adds	r2, r3, #1
   1640a:	4904      	ldr	r1, [pc, #16]	; (1641c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x50>)
   1640c:	9b01      	ldr	r3, [sp, #4]
   1640e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16412:	bf00      	nop
   16414:	b003      	add	sp, #12
   16416:	f85d fb04 	ldr.w	pc, [sp], #4
   1641a:	bf00      	nop
   1641c:	1fff9878 	.word	0x1fff9878
   16420:	1fff9874 	.word	0x1fff9874

00016424 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10(void)
{
   16424:	b500      	push	{lr}
   16426:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16428:	f7ea fbba 	bl	ba0 <Sys_GetCoreID>
   1642c:	4603      	mov	r3, r0
   1642e:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId]--;
   16430:	4a0d      	ldr	r2, [pc, #52]	; (16468 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x44>)
   16432:	9b01      	ldr	r3, [sp, #4]
   16434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16438:	1e5a      	subs	r2, r3, #1
   1643a:	490b      	ldr	r1, [pc, #44]	; (16468 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x44>)
   1643c:	9b01      	ldr	r3, [sp, #4]
   1643e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   16442:	4a0a      	ldr	r2, [pc, #40]	; (1646c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x48>)
   16444:	9b01      	ldr	r3, [sp, #4]
   16446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1644a:	f003 0301 	and.w	r3, r3, #1
   1644e:	2b00      	cmp	r3, #0
   16450:	d106      	bne.n	16460 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x3c>
   16452:	4a05      	ldr	r2, [pc, #20]	; (16468 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x44>)
   16454:	9b01      	ldr	r3, [sp, #4]
   16456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1645a:	2b00      	cmp	r3, #0
   1645c:	d100      	bne.n	16460 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1645e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16460:	bf00      	nop
   16462:	b003      	add	sp, #12
   16464:	f85d fb04 	ldr.w	pc, [sp], #4
   16468:	1fff9878 	.word	0x1fff9878
   1646c:	1fff9874 	.word	0x1fff9874

00016470 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11(void)
{
   16470:	b500      	push	{lr}
   16472:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16474:	f7ea fb94 	bl	ba0 <Sys_GetCoreID>
   16478:	4603      	mov	r3, r0
   1647a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId])
   1647c:	4a10      	ldr	r2, [pc, #64]	; (164c0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x50>)
   1647e:	9b01      	ldr	r3, [sp, #4]
   16480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16484:	2b00      	cmp	r3, #0
   16486:	d10d      	bne.n	164a4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16488:	f7ea fa74 	bl	974 <Spi_schm_read_msr>
   1648c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1648e:	9b00      	ldr	r3, [sp, #0]
   16490:	f003 0301 	and.w	r3, r3, #1
   16494:	2b00      	cmp	r3, #0
   16496:	d100      	bne.n	1649a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16498:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   1649a:	490a      	ldr	r1, [pc, #40]	; (164c4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x54>)
   1649c:	9b01      	ldr	r3, [sp, #4]
   1649e:	9a00      	ldr	r2, [sp, #0]
   164a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId]++;
   164a4:	4a06      	ldr	r2, [pc, #24]	; (164c0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x50>)
   164a6:	9b01      	ldr	r3, [sp, #4]
   164a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164ac:	1c5a      	adds	r2, r3, #1
   164ae:	4904      	ldr	r1, [pc, #16]	; (164c0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x50>)
   164b0:	9b01      	ldr	r3, [sp, #4]
   164b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   164b6:	bf00      	nop
   164b8:	b003      	add	sp, #12
   164ba:	f85d fb04 	ldr.w	pc, [sp], #4
   164be:	bf00      	nop
   164c0:	1fff9880 	.word	0x1fff9880
   164c4:	1fff987c 	.word	0x1fff987c

000164c8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11(void)
{
   164c8:	b500      	push	{lr}
   164ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   164cc:	f7ea fb68 	bl	ba0 <Sys_GetCoreID>
   164d0:	4603      	mov	r3, r0
   164d2:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId]--;
   164d4:	4a0d      	ldr	r2, [pc, #52]	; (1650c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x44>)
   164d6:	9b01      	ldr	r3, [sp, #4]
   164d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164dc:	1e5a      	subs	r2, r3, #1
   164de:	490b      	ldr	r1, [pc, #44]	; (1650c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x44>)
   164e0:	9b01      	ldr	r3, [sp, #4]
   164e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   164e6:	4a0a      	ldr	r2, [pc, #40]	; (16510 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x48>)
   164e8:	9b01      	ldr	r3, [sp, #4]
   164ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164ee:	f003 0301 	and.w	r3, r3, #1
   164f2:	2b00      	cmp	r3, #0
   164f4:	d106      	bne.n	16504 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x3c>
   164f6:	4a05      	ldr	r2, [pc, #20]	; (1650c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x44>)
   164f8:	9b01      	ldr	r3, [sp, #4]
   164fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164fe:	2b00      	cmp	r3, #0
   16500:	d100      	bne.n	16504 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16502:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16504:	bf00      	nop
   16506:	b003      	add	sp, #12
   16508:	f85d fb04 	ldr.w	pc, [sp], #4
   1650c:	1fff9880 	.word	0x1fff9880
   16510:	1fff987c 	.word	0x1fff987c

00016514 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12(void)
{
   16514:	b500      	push	{lr}
   16516:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16518:	f7ea fb42 	bl	ba0 <Sys_GetCoreID>
   1651c:	4603      	mov	r3, r0
   1651e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId])
   16520:	4a10      	ldr	r2, [pc, #64]	; (16564 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x50>)
   16522:	9b01      	ldr	r3, [sp, #4]
   16524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16528:	2b00      	cmp	r3, #0
   1652a:	d10d      	bne.n	16548 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1652c:	f7ea fa22 	bl	974 <Spi_schm_read_msr>
   16530:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16532:	9b00      	ldr	r3, [sp, #0]
   16534:	f003 0301 	and.w	r3, r3, #1
   16538:	2b00      	cmp	r3, #0
   1653a:	d100      	bne.n	1653e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1653c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   1653e:	490a      	ldr	r1, [pc, #40]	; (16568 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x54>)
   16540:	9b01      	ldr	r3, [sp, #4]
   16542:	9a00      	ldr	r2, [sp, #0]
   16544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId]++;
   16548:	4a06      	ldr	r2, [pc, #24]	; (16564 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x50>)
   1654a:	9b01      	ldr	r3, [sp, #4]
   1654c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16550:	1c5a      	adds	r2, r3, #1
   16552:	4904      	ldr	r1, [pc, #16]	; (16564 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x50>)
   16554:	9b01      	ldr	r3, [sp, #4]
   16556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1655a:	bf00      	nop
   1655c:	b003      	add	sp, #12
   1655e:	f85d fb04 	ldr.w	pc, [sp], #4
   16562:	bf00      	nop
   16564:	1fff9888 	.word	0x1fff9888
   16568:	1fff9884 	.word	0x1fff9884

0001656c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12(void)
{
   1656c:	b500      	push	{lr}
   1656e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16570:	f7ea fb16 	bl	ba0 <Sys_GetCoreID>
   16574:	4603      	mov	r3, r0
   16576:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId]--;
   16578:	4a0d      	ldr	r2, [pc, #52]	; (165b0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x44>)
   1657a:	9b01      	ldr	r3, [sp, #4]
   1657c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16580:	1e5a      	subs	r2, r3, #1
   16582:	490b      	ldr	r1, [pc, #44]	; (165b0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x44>)
   16584:	9b01      	ldr	r3, [sp, #4]
   16586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   1658a:	4a0a      	ldr	r2, [pc, #40]	; (165b4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x48>)
   1658c:	9b01      	ldr	r3, [sp, #4]
   1658e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16592:	f003 0301 	and.w	r3, r3, #1
   16596:	2b00      	cmp	r3, #0
   16598:	d106      	bne.n	165a8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x3c>
   1659a:	4a05      	ldr	r2, [pc, #20]	; (165b0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x44>)
   1659c:	9b01      	ldr	r3, [sp, #4]
   1659e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165a2:	2b00      	cmp	r3, #0
   165a4:	d100      	bne.n	165a8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   165a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   165a8:	bf00      	nop
   165aa:	b003      	add	sp, #12
   165ac:	f85d fb04 	ldr.w	pc, [sp], #4
   165b0:	1fff9888 	.word	0x1fff9888
   165b4:	1fff9884 	.word	0x1fff9884

000165b8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13(void)
{
   165b8:	b500      	push	{lr}
   165ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   165bc:	f7ea faf0 	bl	ba0 <Sys_GetCoreID>
   165c0:	4603      	mov	r3, r0
   165c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId])
   165c4:	4a10      	ldr	r2, [pc, #64]	; (16608 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x50>)
   165c6:	9b01      	ldr	r3, [sp, #4]
   165c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165cc:	2b00      	cmp	r3, #0
   165ce:	d10d      	bne.n	165ec <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   165d0:	f7ea f9d0 	bl	974 <Spi_schm_read_msr>
   165d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   165d6:	9b00      	ldr	r3, [sp, #0]
   165d8:	f003 0301 	and.w	r3, r3, #1
   165dc:	2b00      	cmp	r3, #0
   165de:	d100      	bne.n	165e2 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   165e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   165e2:	490a      	ldr	r1, [pc, #40]	; (1660c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x54>)
   165e4:	9b01      	ldr	r3, [sp, #4]
   165e6:	9a00      	ldr	r2, [sp, #0]
   165e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId]++;
   165ec:	4a06      	ldr	r2, [pc, #24]	; (16608 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x50>)
   165ee:	9b01      	ldr	r3, [sp, #4]
   165f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165f4:	1c5a      	adds	r2, r3, #1
   165f6:	4904      	ldr	r1, [pc, #16]	; (16608 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x50>)
   165f8:	9b01      	ldr	r3, [sp, #4]
   165fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   165fe:	bf00      	nop
   16600:	b003      	add	sp, #12
   16602:	f85d fb04 	ldr.w	pc, [sp], #4
   16606:	bf00      	nop
   16608:	1fff9890 	.word	0x1fff9890
   1660c:	1fff988c 	.word	0x1fff988c

00016610 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13(void)
{
   16610:	b500      	push	{lr}
   16612:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16614:	f7ea fac4 	bl	ba0 <Sys_GetCoreID>
   16618:	4603      	mov	r3, r0
   1661a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId]--;
   1661c:	4a0d      	ldr	r2, [pc, #52]	; (16654 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x44>)
   1661e:	9b01      	ldr	r3, [sp, #4]
   16620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16624:	1e5a      	subs	r2, r3, #1
   16626:	490b      	ldr	r1, [pc, #44]	; (16654 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x44>)
   16628:	9b01      	ldr	r3, [sp, #4]
   1662a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   1662e:	4a0a      	ldr	r2, [pc, #40]	; (16658 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x48>)
   16630:	9b01      	ldr	r3, [sp, #4]
   16632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16636:	f003 0301 	and.w	r3, r3, #1
   1663a:	2b00      	cmp	r3, #0
   1663c:	d106      	bne.n	1664c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x3c>
   1663e:	4a05      	ldr	r2, [pc, #20]	; (16654 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x44>)
   16640:	9b01      	ldr	r3, [sp, #4]
   16642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16646:	2b00      	cmp	r3, #0
   16648:	d100      	bne.n	1664c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1664a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1664c:	bf00      	nop
   1664e:	b003      	add	sp, #12
   16650:	f85d fb04 	ldr.w	pc, [sp], #4
   16654:	1fff9890 	.word	0x1fff9890
   16658:	1fff988c 	.word	0x1fff988c

0001665c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14(void)
{
   1665c:	b500      	push	{lr}
   1665e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16660:	f7ea fa9e 	bl	ba0 <Sys_GetCoreID>
   16664:	4603      	mov	r3, r0
   16666:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId])
   16668:	4a10      	ldr	r2, [pc, #64]	; (166ac <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x50>)
   1666a:	9b01      	ldr	r3, [sp, #4]
   1666c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16670:	2b00      	cmp	r3, #0
   16672:	d10d      	bne.n	16690 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16674:	f7ea f97e 	bl	974 <Spi_schm_read_msr>
   16678:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1667a:	9b00      	ldr	r3, [sp, #0]
   1667c:	f003 0301 	and.w	r3, r3, #1
   16680:	2b00      	cmp	r3, #0
   16682:	d100      	bne.n	16686 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16684:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   16686:	490a      	ldr	r1, [pc, #40]	; (166b0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x54>)
   16688:	9b01      	ldr	r3, [sp, #4]
   1668a:	9a00      	ldr	r2, [sp, #0]
   1668c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId]++;
   16690:	4a06      	ldr	r2, [pc, #24]	; (166ac <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x50>)
   16692:	9b01      	ldr	r3, [sp, #4]
   16694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16698:	1c5a      	adds	r2, r3, #1
   1669a:	4904      	ldr	r1, [pc, #16]	; (166ac <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x50>)
   1669c:	9b01      	ldr	r3, [sp, #4]
   1669e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   166a2:	bf00      	nop
   166a4:	b003      	add	sp, #12
   166a6:	f85d fb04 	ldr.w	pc, [sp], #4
   166aa:	bf00      	nop
   166ac:	1fff9898 	.word	0x1fff9898
   166b0:	1fff9894 	.word	0x1fff9894

000166b4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14(void)
{
   166b4:	b500      	push	{lr}
   166b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   166b8:	f7ea fa72 	bl	ba0 <Sys_GetCoreID>
   166bc:	4603      	mov	r3, r0
   166be:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId]--;
   166c0:	4a0d      	ldr	r2, [pc, #52]	; (166f8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x44>)
   166c2:	9b01      	ldr	r3, [sp, #4]
   166c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166c8:	1e5a      	subs	r2, r3, #1
   166ca:	490b      	ldr	r1, [pc, #44]	; (166f8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x44>)
   166cc:	9b01      	ldr	r3, [sp, #4]
   166ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   166d2:	4a0a      	ldr	r2, [pc, #40]	; (166fc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x48>)
   166d4:	9b01      	ldr	r3, [sp, #4]
   166d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166da:	f003 0301 	and.w	r3, r3, #1
   166de:	2b00      	cmp	r3, #0
   166e0:	d106      	bne.n	166f0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x3c>
   166e2:	4a05      	ldr	r2, [pc, #20]	; (166f8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x44>)
   166e4:	9b01      	ldr	r3, [sp, #4]
   166e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166ea:	2b00      	cmp	r3, #0
   166ec:	d100      	bne.n	166f0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   166ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   166f0:	bf00      	nop
   166f2:	b003      	add	sp, #12
   166f4:	f85d fb04 	ldr.w	pc, [sp], #4
   166f8:	1fff9898 	.word	0x1fff9898
   166fc:	1fff9894 	.word	0x1fff9894

00016700 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15(void)
{
   16700:	b500      	push	{lr}
   16702:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16704:	f7ea fa4c 	bl	ba0 <Sys_GetCoreID>
   16708:	4603      	mov	r3, r0
   1670a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId])
   1670c:	4a10      	ldr	r2, [pc, #64]	; (16750 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x50>)
   1670e:	9b01      	ldr	r3, [sp, #4]
   16710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16714:	2b00      	cmp	r3, #0
   16716:	d10d      	bne.n	16734 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16718:	f7ea f92c 	bl	974 <Spi_schm_read_msr>
   1671c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1671e:	9b00      	ldr	r3, [sp, #0]
   16720:	f003 0301 	and.w	r3, r3, #1
   16724:	2b00      	cmp	r3, #0
   16726:	d100      	bne.n	1672a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16728:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   1672a:	490a      	ldr	r1, [pc, #40]	; (16754 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x54>)
   1672c:	9b01      	ldr	r3, [sp, #4]
   1672e:	9a00      	ldr	r2, [sp, #0]
   16730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId]++;
   16734:	4a06      	ldr	r2, [pc, #24]	; (16750 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x50>)
   16736:	9b01      	ldr	r3, [sp, #4]
   16738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1673c:	1c5a      	adds	r2, r3, #1
   1673e:	4904      	ldr	r1, [pc, #16]	; (16750 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x50>)
   16740:	9b01      	ldr	r3, [sp, #4]
   16742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16746:	bf00      	nop
   16748:	b003      	add	sp, #12
   1674a:	f85d fb04 	ldr.w	pc, [sp], #4
   1674e:	bf00      	nop
   16750:	1fff98a0 	.word	0x1fff98a0
   16754:	1fff989c 	.word	0x1fff989c

00016758 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15(void)
{
   16758:	b500      	push	{lr}
   1675a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1675c:	f7ea fa20 	bl	ba0 <Sys_GetCoreID>
   16760:	4603      	mov	r3, r0
   16762:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId]--;
   16764:	4a0d      	ldr	r2, [pc, #52]	; (1679c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x44>)
   16766:	9b01      	ldr	r3, [sp, #4]
   16768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1676c:	1e5a      	subs	r2, r3, #1
   1676e:	490b      	ldr	r1, [pc, #44]	; (1679c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x44>)
   16770:	9b01      	ldr	r3, [sp, #4]
   16772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   16776:	4a0a      	ldr	r2, [pc, #40]	; (167a0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x48>)
   16778:	9b01      	ldr	r3, [sp, #4]
   1677a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1677e:	f003 0301 	and.w	r3, r3, #1
   16782:	2b00      	cmp	r3, #0
   16784:	d106      	bne.n	16794 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x3c>
   16786:	4a05      	ldr	r2, [pc, #20]	; (1679c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x44>)
   16788:	9b01      	ldr	r3, [sp, #4]
   1678a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1678e:	2b00      	cmp	r3, #0
   16790:	d100      	bne.n	16794 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16792:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16794:	bf00      	nop
   16796:	b003      	add	sp, #12
   16798:	f85d fb04 	ldr.w	pc, [sp], #4
   1679c:	1fff98a0 	.word	0x1fff98a0
   167a0:	1fff989c 	.word	0x1fff989c

000167a4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16(void)
{
   167a4:	b500      	push	{lr}
   167a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   167a8:	f7ea f9fa 	bl	ba0 <Sys_GetCoreID>
   167ac:	4603      	mov	r3, r0
   167ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId])
   167b0:	4a10      	ldr	r2, [pc, #64]	; (167f4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x50>)
   167b2:	9b01      	ldr	r3, [sp, #4]
   167b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167b8:	2b00      	cmp	r3, #0
   167ba:	d10d      	bne.n	167d8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   167bc:	f7ea f8da 	bl	974 <Spi_schm_read_msr>
   167c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   167c2:	9b00      	ldr	r3, [sp, #0]
   167c4:	f003 0301 	and.w	r3, r3, #1
   167c8:	2b00      	cmp	r3, #0
   167ca:	d100      	bne.n	167ce <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   167cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   167ce:	490a      	ldr	r1, [pc, #40]	; (167f8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x54>)
   167d0:	9b01      	ldr	r3, [sp, #4]
   167d2:	9a00      	ldr	r2, [sp, #0]
   167d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId]++;
   167d8:	4a06      	ldr	r2, [pc, #24]	; (167f4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x50>)
   167da:	9b01      	ldr	r3, [sp, #4]
   167dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167e0:	1c5a      	adds	r2, r3, #1
   167e2:	4904      	ldr	r1, [pc, #16]	; (167f4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x50>)
   167e4:	9b01      	ldr	r3, [sp, #4]
   167e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   167ea:	bf00      	nop
   167ec:	b003      	add	sp, #12
   167ee:	f85d fb04 	ldr.w	pc, [sp], #4
   167f2:	bf00      	nop
   167f4:	1fff98a8 	.word	0x1fff98a8
   167f8:	1fff98a4 	.word	0x1fff98a4

000167fc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16(void)
{
   167fc:	b500      	push	{lr}
   167fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16800:	f7ea f9ce 	bl	ba0 <Sys_GetCoreID>
   16804:	4603      	mov	r3, r0
   16806:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId]--;
   16808:	4a0d      	ldr	r2, [pc, #52]	; (16840 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x44>)
   1680a:	9b01      	ldr	r3, [sp, #4]
   1680c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16810:	1e5a      	subs	r2, r3, #1
   16812:	490b      	ldr	r1, [pc, #44]	; (16840 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x44>)
   16814:	9b01      	ldr	r3, [sp, #4]
   16816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   1681a:	4a0a      	ldr	r2, [pc, #40]	; (16844 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x48>)
   1681c:	9b01      	ldr	r3, [sp, #4]
   1681e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16822:	f003 0301 	and.w	r3, r3, #1
   16826:	2b00      	cmp	r3, #0
   16828:	d106      	bne.n	16838 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x3c>
   1682a:	4a05      	ldr	r2, [pc, #20]	; (16840 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x44>)
   1682c:	9b01      	ldr	r3, [sp, #4]
   1682e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16832:	2b00      	cmp	r3, #0
   16834:	d100      	bne.n	16838 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16836:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16838:	bf00      	nop
   1683a:	b003      	add	sp, #12
   1683c:	f85d fb04 	ldr.w	pc, [sp], #4
   16840:	1fff98a8 	.word	0x1fff98a8
   16844:	1fff98a4 	.word	0x1fff98a4

00016848 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17(void)
{
   16848:	b500      	push	{lr}
   1684a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1684c:	f7ea f9a8 	bl	ba0 <Sys_GetCoreID>
   16850:	4603      	mov	r3, r0
   16852:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId])
   16854:	4a10      	ldr	r2, [pc, #64]	; (16898 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x50>)
   16856:	9b01      	ldr	r3, [sp, #4]
   16858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1685c:	2b00      	cmp	r3, #0
   1685e:	d10d      	bne.n	1687c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16860:	f7ea f888 	bl	974 <Spi_schm_read_msr>
   16864:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16866:	9b00      	ldr	r3, [sp, #0]
   16868:	f003 0301 	and.w	r3, r3, #1
   1686c:	2b00      	cmp	r3, #0
   1686e:	d100      	bne.n	16872 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16870:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   16872:	490a      	ldr	r1, [pc, #40]	; (1689c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x54>)
   16874:	9b01      	ldr	r3, [sp, #4]
   16876:	9a00      	ldr	r2, [sp, #0]
   16878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId]++;
   1687c:	4a06      	ldr	r2, [pc, #24]	; (16898 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x50>)
   1687e:	9b01      	ldr	r3, [sp, #4]
   16880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16884:	1c5a      	adds	r2, r3, #1
   16886:	4904      	ldr	r1, [pc, #16]	; (16898 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x50>)
   16888:	9b01      	ldr	r3, [sp, #4]
   1688a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1688e:	bf00      	nop
   16890:	b003      	add	sp, #12
   16892:	f85d fb04 	ldr.w	pc, [sp], #4
   16896:	bf00      	nop
   16898:	1fff98b0 	.word	0x1fff98b0
   1689c:	1fff98ac 	.word	0x1fff98ac

000168a0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17(void)
{
   168a0:	b500      	push	{lr}
   168a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   168a4:	f7ea f97c 	bl	ba0 <Sys_GetCoreID>
   168a8:	4603      	mov	r3, r0
   168aa:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId]--;
   168ac:	4a0d      	ldr	r2, [pc, #52]	; (168e4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x44>)
   168ae:	9b01      	ldr	r3, [sp, #4]
   168b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   168b4:	1e5a      	subs	r2, r3, #1
   168b6:	490b      	ldr	r1, [pc, #44]	; (168e4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x44>)
   168b8:	9b01      	ldr	r3, [sp, #4]
   168ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   168be:	4a0a      	ldr	r2, [pc, #40]	; (168e8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x48>)
   168c0:	9b01      	ldr	r3, [sp, #4]
   168c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   168c6:	f003 0301 	and.w	r3, r3, #1
   168ca:	2b00      	cmp	r3, #0
   168cc:	d106      	bne.n	168dc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x3c>
   168ce:	4a05      	ldr	r2, [pc, #20]	; (168e4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x44>)
   168d0:	9b01      	ldr	r3, [sp, #4]
   168d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   168d6:	2b00      	cmp	r3, #0
   168d8:	d100      	bne.n	168dc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   168da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   168dc:	bf00      	nop
   168de:	b003      	add	sp, #12
   168e0:	f85d fb04 	ldr.w	pc, [sp], #4
   168e4:	1fff98b0 	.word	0x1fff98b0
   168e8:	1fff98ac 	.word	0x1fff98ac

000168ec <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18(void)
{
   168ec:	b500      	push	{lr}
   168ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   168f0:	f7ea f956 	bl	ba0 <Sys_GetCoreID>
   168f4:	4603      	mov	r3, r0
   168f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId])
   168f8:	4a10      	ldr	r2, [pc, #64]	; (1693c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x50>)
   168fa:	9b01      	ldr	r3, [sp, #4]
   168fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16900:	2b00      	cmp	r3, #0
   16902:	d10d      	bne.n	16920 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16904:	f7ea f836 	bl	974 <Spi_schm_read_msr>
   16908:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1690a:	9b00      	ldr	r3, [sp, #0]
   1690c:	f003 0301 	and.w	r3, r3, #1
   16910:	2b00      	cmp	r3, #0
   16912:	d100      	bne.n	16916 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16914:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   16916:	490a      	ldr	r1, [pc, #40]	; (16940 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x54>)
   16918:	9b01      	ldr	r3, [sp, #4]
   1691a:	9a00      	ldr	r2, [sp, #0]
   1691c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId]++;
   16920:	4a06      	ldr	r2, [pc, #24]	; (1693c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x50>)
   16922:	9b01      	ldr	r3, [sp, #4]
   16924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16928:	1c5a      	adds	r2, r3, #1
   1692a:	4904      	ldr	r1, [pc, #16]	; (1693c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x50>)
   1692c:	9b01      	ldr	r3, [sp, #4]
   1692e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16932:	bf00      	nop
   16934:	b003      	add	sp, #12
   16936:	f85d fb04 	ldr.w	pc, [sp], #4
   1693a:	bf00      	nop
   1693c:	1fff98b8 	.word	0x1fff98b8
   16940:	1fff98b4 	.word	0x1fff98b4

00016944 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18(void)
{
   16944:	b500      	push	{lr}
   16946:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16948:	f7ea f92a 	bl	ba0 <Sys_GetCoreID>
   1694c:	4603      	mov	r3, r0
   1694e:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId]--;
   16950:	4a0d      	ldr	r2, [pc, #52]	; (16988 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x44>)
   16952:	9b01      	ldr	r3, [sp, #4]
   16954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16958:	1e5a      	subs	r2, r3, #1
   1695a:	490b      	ldr	r1, [pc, #44]	; (16988 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x44>)
   1695c:	9b01      	ldr	r3, [sp, #4]
   1695e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   16962:	4a0a      	ldr	r2, [pc, #40]	; (1698c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x48>)
   16964:	9b01      	ldr	r3, [sp, #4]
   16966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1696a:	f003 0301 	and.w	r3, r3, #1
   1696e:	2b00      	cmp	r3, #0
   16970:	d106      	bne.n	16980 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x3c>
   16972:	4a05      	ldr	r2, [pc, #20]	; (16988 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x44>)
   16974:	9b01      	ldr	r3, [sp, #4]
   16976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1697a:	2b00      	cmp	r3, #0
   1697c:	d100      	bne.n	16980 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1697e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16980:	bf00      	nop
   16982:	b003      	add	sp, #12
   16984:	f85d fb04 	ldr.w	pc, [sp], #4
   16988:	1fff98b8 	.word	0x1fff98b8
   1698c:	1fff98b4 	.word	0x1fff98b4

00016990 <Det_Init>:
*
* @requirements   DET008
*
*/
void Det_Init(void)
{
   16990:	b508      	push	{r3, lr}
    SEGGER_RTT_Init();  //Initializing RTT library.
   16992:	f7ea faa3 	bl	edc <SEGGER_RTT_Init>
}
   16996:	bf00      	nop
   16998:	bd08      	pop	{r3, pc}

0001699a <Det_SearchApi>:
 * @param[in] ApiId Api id where error was detected.
 * @return StringPtr Ptr to string of api name.
 * 
 * @note If the Api Id isn´t registered in the hash table it will return NULL; 
 */
const char* Det_SearchApi( uint8 ModuleIndex, uint8 ApiId ) {
   1699a:	b084      	sub	sp, #16
   1699c:	4603      	mov	r3, r0
   1699e:	460a      	mov	r2, r1
   169a0:	f88d 3007 	strb.w	r3, [sp, #7]
   169a4:	4613      	mov	r3, r2
   169a6:	f88d 3006 	strb.w	r3, [sp, #6]
    //local data.
    uint8 i = 0;
   169aa:	2300      	movs	r3, #0
   169ac:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   169b0:	2300      	movs	r3, #0
   169b2:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Apis; i++ ) { //Searching for api.
   169b4:	2300      	movs	r3, #0
   169b6:	f88d 300f 	strb.w	r3, [sp, #15]
   169ba:	e026      	b.n	16a0a <Det_SearchApi+0x70>
        if ( ModuleStrings_Ptr[ ModuleIndex ].ApiNames[i].ApiId == ApiId ) {
   169bc:	491b      	ldr	r1, [pc, #108]	; (16a2c <Det_SearchApi+0x92>)
   169be:	f89d 2007 	ldrb.w	r2, [sp, #7]
   169c2:	4613      	mov	r3, r2
   169c4:	005b      	lsls	r3, r3, #1
   169c6:	4413      	add	r3, r2
   169c8:	00db      	lsls	r3, r3, #3
   169ca:	440b      	add	r3, r1
   169cc:	68da      	ldr	r2, [r3, #12]
   169ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
   169d2:	00db      	lsls	r3, r3, #3
   169d4:	4413      	add	r3, r2
   169d6:	781b      	ldrb	r3, [r3, #0]
   169d8:	f89d 2006 	ldrb.w	r2, [sp, #6]
   169dc:	429a      	cmp	r2, r3
   169de:	d10f      	bne.n	16a00 <Det_SearchApi+0x66>
            StringPtr = ModuleStrings_Ptr[ ModuleIndex ].ApiNames[i].ApiName;
   169e0:	4912      	ldr	r1, [pc, #72]	; (16a2c <Det_SearchApi+0x92>)
   169e2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   169e6:	4613      	mov	r3, r2
   169e8:	005b      	lsls	r3, r3, #1
   169ea:	4413      	add	r3, r2
   169ec:	00db      	lsls	r3, r3, #3
   169ee:	440b      	add	r3, r1
   169f0:	68da      	ldr	r2, [r3, #12]
   169f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   169f6:	00db      	lsls	r3, r3, #3
   169f8:	4413      	add	r3, r2
   169fa:	685b      	ldr	r3, [r3, #4]
   169fc:	9302      	str	r3, [sp, #8]
            break;
   169fe:	e011      	b.n	16a24 <Det_SearchApi+0x8a>
    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Apis; i++ ) { //Searching for api.
   16a00:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16a04:	3301      	adds	r3, #1
   16a06:	f88d 300f 	strb.w	r3, [sp, #15]
   16a0a:	4908      	ldr	r1, [pc, #32]	; (16a2c <Det_SearchApi+0x92>)
   16a0c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16a10:	4613      	mov	r3, r2
   16a12:	005b      	lsls	r3, r3, #1
   16a14:	4413      	add	r3, r2
   16a16:	00db      	lsls	r3, r3, #3
   16a18:	440b      	add	r3, r1
   16a1a:	7a1b      	ldrb	r3, [r3, #8]
   16a1c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16a20:	429a      	cmp	r2, r3
   16a22:	d3cb      	bcc.n	169bc <Det_SearchApi+0x22>
        }
    }

    return StringPtr;
   16a24:	9b02      	ldr	r3, [sp, #8]
}
   16a26:	4618      	mov	r0, r3
   16a28:	b004      	add	sp, #16
   16a2a:	4770      	bx	lr
   16a2c:	000188e0 	.word	0x000188e0

00016a30 <Det_SearchError>:
 * @param[in] ErrorId Error id reported.
 * @return StringPtr Ptr to string of error meaning.
 * 
 * @note If the Error Id isn´t registered in the hash table it will return NULL; 
 */
const char* Det_SearchError( uint8 ModuleIndex, uint8 ErrorId ) {
   16a30:	b084      	sub	sp, #16
   16a32:	4603      	mov	r3, r0
   16a34:	460a      	mov	r2, r1
   16a36:	f88d 3007 	strb.w	r3, [sp, #7]
   16a3a:	4613      	mov	r3, r2
   16a3c:	f88d 3006 	strb.w	r3, [sp, #6]
    //local data.
    uint8 i = 0;
   16a40:	2300      	movs	r3, #0
   16a42:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   16a46:	2300      	movs	r3, #0
   16a48:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Errors; i++ ) { //Searching for api.
   16a4a:	2300      	movs	r3, #0
   16a4c:	f88d 300f 	strb.w	r3, [sp, #15]
   16a50:	e026      	b.n	16aa0 <Det_SearchError+0x70>
        if ( ModuleStrings_Ptr[ ModuleIndex ].ErrorMeanings[i].ErrorId == ErrorId ) {
   16a52:	491c      	ldr	r1, [pc, #112]	; (16ac4 <Det_SearchError+0x94>)
   16a54:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16a58:	4613      	mov	r3, r2
   16a5a:	005b      	lsls	r3, r3, #1
   16a5c:	4413      	add	r3, r2
   16a5e:	00db      	lsls	r3, r3, #3
   16a60:	440b      	add	r3, r1
   16a62:	695a      	ldr	r2, [r3, #20]
   16a64:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16a68:	00db      	lsls	r3, r3, #3
   16a6a:	4413      	add	r3, r2
   16a6c:	781b      	ldrb	r3, [r3, #0]
   16a6e:	f89d 2006 	ldrb.w	r2, [sp, #6]
   16a72:	429a      	cmp	r2, r3
   16a74:	d10f      	bne.n	16a96 <Det_SearchError+0x66>
            StringPtr = ModuleStrings_Ptr[ ModuleIndex ].ErrorMeanings[i].ErrorMeaning;
   16a76:	4913      	ldr	r1, [pc, #76]	; (16ac4 <Det_SearchError+0x94>)
   16a78:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16a7c:	4613      	mov	r3, r2
   16a7e:	005b      	lsls	r3, r3, #1
   16a80:	4413      	add	r3, r2
   16a82:	00db      	lsls	r3, r3, #3
   16a84:	440b      	add	r3, r1
   16a86:	695a      	ldr	r2, [r3, #20]
   16a88:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16a8c:	00db      	lsls	r3, r3, #3
   16a8e:	4413      	add	r3, r2
   16a90:	685b      	ldr	r3, [r3, #4]
   16a92:	9302      	str	r3, [sp, #8]
            break;
   16a94:	e011      	b.n	16aba <Det_SearchError+0x8a>
    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Errors; i++ ) { //Searching for api.
   16a96:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16a9a:	3301      	adds	r3, #1
   16a9c:	f88d 300f 	strb.w	r3, [sp, #15]
   16aa0:	4908      	ldr	r1, [pc, #32]	; (16ac4 <Det_SearchError+0x94>)
   16aa2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16aa6:	4613      	mov	r3, r2
   16aa8:	005b      	lsls	r3, r3, #1
   16aaa:	4413      	add	r3, r2
   16aac:	00db      	lsls	r3, r3, #3
   16aae:	440b      	add	r3, r1
   16ab0:	7c1b      	ldrb	r3, [r3, #16]
   16ab2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16ab6:	429a      	cmp	r2, r3
   16ab8:	d3cb      	bcc.n	16a52 <Det_SearchError+0x22>
        }
    }

    return StringPtr;
   16aba:	9b02      	ldr	r3, [sp, #8]
}
   16abc:	4618      	mov	r0, r3
   16abe:	b004      	add	sp, #16
   16ac0:	4770      	bx	lr
   16ac2:	bf00      	nop
   16ac4:	000188e0 	.word	0x000188e0

00016ac8 <Det_GetModuleName>:
 * @param[in] ModuleId Module Id where error was detected.
 * @return StringPtr Pointer to string module name.
 * 
 * @note If the module Id isn´t registered it will return NULL;
 */
const char* Det_GetModuleName( uint16 ModuleId ) {
   16ac8:	b084      	sub	sp, #16
   16aca:	4603      	mov	r3, r0
   16acc:	f8ad 3006 	strh.w	r3, [sp, #6]
    //local data 
    uint8 i = 0;
   16ad0:	2300      	movs	r3, #0
   16ad2:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   16ad6:	2300      	movs	r3, #0
   16ad8:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching module name.
   16ada:	2300      	movs	r3, #0
   16adc:	f88d 300f 	strb.w	r3, [sp, #15]
   16ae0:	e01c      	b.n	16b1c <Det_GetModuleName+0x54>
        if ( ModuleStrings_Ptr[i].ModuleId == ModuleId ) {
   16ae2:	4912      	ldr	r1, [pc, #72]	; (16b2c <Det_GetModuleName+0x64>)
   16ae4:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16ae8:	4613      	mov	r3, r2
   16aea:	005b      	lsls	r3, r3, #1
   16aec:	4413      	add	r3, r2
   16aee:	00db      	lsls	r3, r3, #3
   16af0:	440b      	add	r3, r1
   16af2:	881b      	ldrh	r3, [r3, #0]
   16af4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16af8:	429a      	cmp	r2, r3
   16afa:	d10a      	bne.n	16b12 <Det_GetModuleName+0x4a>
            StringPtr = ModuleStrings_Ptr[i].ModuleName;
   16afc:	490b      	ldr	r1, [pc, #44]	; (16b2c <Det_GetModuleName+0x64>)
   16afe:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16b02:	4613      	mov	r3, r2
   16b04:	005b      	lsls	r3, r3, #1
   16b06:	4413      	add	r3, r2
   16b08:	00db      	lsls	r3, r3, #3
   16b0a:	440b      	add	r3, r1
   16b0c:	685b      	ldr	r3, [r3, #4]
   16b0e:	9302      	str	r3, [sp, #8]
            break;
   16b10:	e008      	b.n	16b24 <Det_GetModuleName+0x5c>
    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching module name.
   16b12:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16b16:	3301      	adds	r3, #1
   16b18:	f88d 300f 	strb.w	r3, [sp, #15]
   16b1c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16b20:	2b0a      	cmp	r3, #10
   16b22:	d9de      	bls.n	16ae2 <Det_GetModuleName+0x1a>
        }
    }

    return StringPtr;
   16b24:	9b02      	ldr	r3, [sp, #8]
}
   16b26:	4618      	mov	r0, r3
   16b28:	b004      	add	sp, #16
   16b2a:	4770      	bx	lr
   16b2c:	000188e0 	.word	0x000188e0

00016b30 <Det_GetApiName>:
 * @param[in] ApiId Api Id where error was detected 
 * @return StringPtr Pointer to string Api name.
 * 
 * @note If the Api Id isn´t registered in the hash table it will return NULL;
 */
const char* Det_GetApiName( uint16 ModuleId, uint8 ApiId ) {
   16b30:	b500      	push	{lr}
   16b32:	b085      	sub	sp, #20
   16b34:	4603      	mov	r3, r0
   16b36:	460a      	mov	r2, r1
   16b38:	f8ad 3006 	strh.w	r3, [sp, #6]
   16b3c:	4613      	mov	r3, r2
   16b3e:	f88d 3005 	strb.w	r3, [sp, #5]
    //local data.
    uint8 i = 0;
   16b42:	2300      	movs	r3, #0
   16b44:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   16b48:	2300      	movs	r3, #0
   16b4a:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   16b4c:	2300      	movs	r3, #0
   16b4e:	f88d 300f 	strb.w	r3, [sp, #15]
   16b52:	e01b      	b.n	16b8c <Det_GetApiName+0x5c>
        if ( ModuleStrings_Ptr[i].ModuleId == ModuleId ) {
   16b54:	4912      	ldr	r1, [pc, #72]	; (16ba0 <Det_GetApiName+0x70>)
   16b56:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16b5a:	4613      	mov	r3, r2
   16b5c:	005b      	lsls	r3, r3, #1
   16b5e:	4413      	add	r3, r2
   16b60:	00db      	lsls	r3, r3, #3
   16b62:	440b      	add	r3, r1
   16b64:	881b      	ldrh	r3, [r3, #0]
   16b66:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16b6a:	429a      	cmp	r2, r3
   16b6c:	d109      	bne.n	16b82 <Det_GetApiName+0x52>
            StringPtr = Det_SearchApi( i , ApiId ); //Searching Api.
   16b6e:	f89d 2005 	ldrb.w	r2, [sp, #5]
   16b72:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16b76:	4611      	mov	r1, r2
   16b78:	4618      	mov	r0, r3
   16b7a:	f7ff ff0e 	bl	1699a <Det_SearchApi>
   16b7e:	9002      	str	r0, [sp, #8]
            break;
   16b80:	e008      	b.n	16b94 <Det_GetApiName+0x64>
    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   16b82:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16b86:	3301      	adds	r3, #1
   16b88:	f88d 300f 	strb.w	r3, [sp, #15]
   16b8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16b90:	2b0a      	cmp	r3, #10
   16b92:	d9df      	bls.n	16b54 <Det_GetApiName+0x24>
        }
    }

    return StringPtr;
   16b94:	9b02      	ldr	r3, [sp, #8]
}
   16b96:	4618      	mov	r0, r3
   16b98:	b005      	add	sp, #20
   16b9a:	f85d fb04 	ldr.w	pc, [sp], #4
   16b9e:	bf00      	nop
   16ba0:	000188e0 	.word	0x000188e0

00016ba4 <Det_GetErrorMeaning>:
 * @param[in] ErrorId Error Id reported. 
 * @return StringPtr Pointer to string Error meaning.
 * 
 * @note If the Error Id isn´t registered in the hash table it will return NULL;
 */
const char* Det_GetErrorMeaning( uint16 ModuleId, uint8 ErrorId ) {
   16ba4:	b500      	push	{lr}
   16ba6:	b085      	sub	sp, #20
   16ba8:	4603      	mov	r3, r0
   16baa:	460a      	mov	r2, r1
   16bac:	f8ad 3006 	strh.w	r3, [sp, #6]
   16bb0:	4613      	mov	r3, r2
   16bb2:	f88d 3005 	strb.w	r3, [sp, #5]
    //local data.
    uint8 i = 0;
   16bb6:	2300      	movs	r3, #0
   16bb8:	f88d 300f 	strb.w	r3, [sp, #15]
    const char * StringPtr = NULL_PTR;
   16bbc:	2300      	movs	r3, #0
   16bbe:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   16bc0:	2300      	movs	r3, #0
   16bc2:	f88d 300f 	strb.w	r3, [sp, #15]
   16bc6:	e01b      	b.n	16c00 <Det_GetErrorMeaning+0x5c>
        if ( ModuleStrings_Ptr[i].ModuleId == ModuleId ) {
   16bc8:	4912      	ldr	r1, [pc, #72]	; (16c14 <Det_GetErrorMeaning+0x70>)
   16bca:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16bce:	4613      	mov	r3, r2
   16bd0:	005b      	lsls	r3, r3, #1
   16bd2:	4413      	add	r3, r2
   16bd4:	00db      	lsls	r3, r3, #3
   16bd6:	440b      	add	r3, r1
   16bd8:	881b      	ldrh	r3, [r3, #0]
   16bda:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16bde:	429a      	cmp	r2, r3
   16be0:	d109      	bne.n	16bf6 <Det_GetErrorMeaning+0x52>
            StringPtr = Det_SearchError( i, ErrorId );
   16be2:	f89d 2005 	ldrb.w	r2, [sp, #5]
   16be6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16bea:	4611      	mov	r1, r2
   16bec:	4618      	mov	r0, r3
   16bee:	f7ff ff1f 	bl	16a30 <Det_SearchError>
   16bf2:	9002      	str	r0, [sp, #8]
            break;
   16bf4:	e008      	b.n	16c08 <Det_GetErrorMeaning+0x64>
    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   16bf6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16bfa:	3301      	adds	r3, #1
   16bfc:	f88d 300f 	strb.w	r3, [sp, #15]
   16c00:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16c04:	2b0a      	cmp	r3, #10
   16c06:	d9df      	bls.n	16bc8 <Det_GetErrorMeaning+0x24>
        }
    }

    return StringPtr;
   16c08:	9b02      	ldr	r3, [sp, #8]
}
   16c0a:	4618      	mov	r0, r3
   16c0c:	b005      	add	sp, #20
   16c0e:	f85d fb04 	ldr.w	pc, [sp], #4
   16c12:	bf00      	nop
   16c14:	000188e0 	.word	0x000188e0

00016c18 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
   16c18:	b510      	push	{r4, lr}
   16c1a:	b088      	sub	sp, #32
   16c1c:	4604      	mov	r4, r0
   16c1e:	4608      	mov	r0, r1
   16c20:	4611      	mov	r1, r2
   16c22:	461a      	mov	r2, r3
   16c24:	4623      	mov	r3, r4
   16c26:	f8ad 300e 	strh.w	r3, [sp, #14]
   16c2a:	4603      	mov	r3, r0
   16c2c:	f88d 300d 	strb.w	r3, [sp, #13]
   16c30:	460b      	mov	r3, r1
   16c32:	f88d 300c 	strb.w	r3, [sp, #12]
   16c36:	4613      	mov	r3, r2
   16c38:	f88d 300b 	strb.w	r3, [sp, #11]
    //local data.
    const char* Strings_error[3]; //Pointer to strings for the error message.

    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16c3c:	f7e9 ffb0 	bl	ba0 <Sys_GetCoreID>
   16c40:	4603      	mov	r3, r0
   16c42:	9307      	str	r3, [sp, #28]

    Det_ModuleId[u32CoreId] = ModuleId;
   16c44:	4921      	ldr	r1, [pc, #132]	; (16ccc <Det_ReportError+0xb4>)
   16c46:	9b07      	ldr	r3, [sp, #28]
   16c48:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   16c4c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
   16c50:	4a1f      	ldr	r2, [pc, #124]	; (16cd0 <Det_ReportError+0xb8>)
   16c52:	9b07      	ldr	r3, [sp, #28]
   16c54:	4413      	add	r3, r2
   16c56:	f89d 200d 	ldrb.w	r2, [sp, #13]
   16c5a:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
   16c5c:	4a1d      	ldr	r2, [pc, #116]	; (16cd4 <Det_ReportError+0xbc>)
   16c5e:	9b07      	ldr	r3, [sp, #28]
   16c60:	4413      	add	r3, r2
   16c62:	f89d 200c 	ldrb.w	r2, [sp, #12]
   16c66:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
   16c68:	4a1b      	ldr	r2, [pc, #108]	; (16cd8 <Det_ReportError+0xc0>)
   16c6a:	9b07      	ldr	r3, [sp, #28]
   16c6c:	4413      	add	r3, r2
   16c6e:	f89d 200b 	ldrb.w	r2, [sp, #11]
   16c72:	701a      	strb	r2, [r3, #0]

    //Obtaining strings for error message.
    Strings_error[0] = Det_GetModuleName( ModuleId );
   16c74:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   16c78:	4618      	mov	r0, r3
   16c7a:	f7ff ff25 	bl	16ac8 <Det_GetModuleName>
   16c7e:	4603      	mov	r3, r0
   16c80:	9304      	str	r3, [sp, #16]
    Strings_error[1] = Det_GetApiName( ModuleId, ApiId );
   16c82:	f89d 200c 	ldrb.w	r2, [sp, #12]
   16c86:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   16c8a:	4611      	mov	r1, r2
   16c8c:	4618      	mov	r0, r3
   16c8e:	f7ff ff4f 	bl	16b30 <Det_GetApiName>
   16c92:	4603      	mov	r3, r0
   16c94:	9305      	str	r3, [sp, #20]
    Strings_error[2] = Det_GetErrorMeaning( ModuleId, ErrorId );
   16c96:	f89d 200b 	ldrb.w	r2, [sp, #11]
   16c9a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   16c9e:	4611      	mov	r1, r2
   16ca0:	4618      	mov	r0, r3
   16ca2:	f7ff ff7f 	bl	16ba4 <Det_GetErrorMeaning>
   16ca6:	4603      	mov	r3, r0
   16ca8:	9306      	str	r3, [sp, #24]

    SEGGER_RTT_printf( 0, "Error: Error in %s in function %s with the instance %d, %s\n", 
   16caa:	9904      	ldr	r1, [sp, #16]
   16cac:	9805      	ldr	r0, [sp, #20]
   16cae:	f89d 300d 	ldrb.w	r3, [sp, #13]
   16cb2:	9a06      	ldr	r2, [sp, #24]
   16cb4:	9201      	str	r2, [sp, #4]
   16cb6:	9300      	str	r3, [sp, #0]
   16cb8:	4603      	mov	r3, r0
   16cba:	460a      	mov	r2, r1
   16cbc:	4907      	ldr	r1, [pc, #28]	; (16cdc <Det_ReportError+0xc4>)
   16cbe:	2000      	movs	r0, #0
   16cc0:	f7ea fc74 	bl	15ac <SEGGER_RTT_printf>
    Strings_error[0], Strings_error[1], InstanceId, Strings_error[2] );

    return E_OK;
   16cc4:	2300      	movs	r3, #0
}
   16cc6:	4618      	mov	r0, r3
   16cc8:	b008      	add	sp, #32
   16cca:	bd10      	pop	{r4, pc}
   16ccc:	1fff98e4 	.word	0x1fff98e4
   16cd0:	1fff98bc 	.word	0x1fff98bc
   16cd4:	1fff98c0 	.word	0x1fff98c0
   16cd8:	1fff98c4 	.word	0x1fff98c4
   16cdc:	00017cc8 	.word	0x00017cc8

00016ce0 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
   16ce0:	b510      	push	{r4, lr}
   16ce2:	b084      	sub	sp, #16
   16ce4:	4604      	mov	r4, r0
   16ce6:	4608      	mov	r0, r1
   16ce8:	4611      	mov	r1, r2
   16cea:	461a      	mov	r2, r3
   16cec:	4623      	mov	r3, r4
   16cee:	f8ad 3006 	strh.w	r3, [sp, #6]
   16cf2:	4603      	mov	r3, r0
   16cf4:	f88d 3005 	strb.w	r3, [sp, #5]
   16cf8:	460b      	mov	r3, r1
   16cfa:	f88d 3004 	strb.w	r3, [sp, #4]
   16cfe:	4613      	mov	r3, r2
   16d00:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16d04:	f7e9 ff4c 	bl	ba0 <Sys_GetCoreID>
   16d08:	4603      	mov	r3, r0
   16d0a:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
   16d0c:	490d      	ldr	r1, [pc, #52]	; (16d44 <Det_ReportRuntimeError+0x64>)
   16d0e:	9b03      	ldr	r3, [sp, #12]
   16d10:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16d14:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
   16d18:	4a0b      	ldr	r2, [pc, #44]	; (16d48 <Det_ReportRuntimeError+0x68>)
   16d1a:	9b03      	ldr	r3, [sp, #12]
   16d1c:	4413      	add	r3, r2
   16d1e:	f89d 2005 	ldrb.w	r2, [sp, #5]
   16d22:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
   16d24:	4a09      	ldr	r2, [pc, #36]	; (16d4c <Det_ReportRuntimeError+0x6c>)
   16d26:	9b03      	ldr	r3, [sp, #12]
   16d28:	4413      	add	r3, r2
   16d2a:	f89d 2004 	ldrb.w	r2, [sp, #4]
   16d2e:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
   16d30:	4a07      	ldr	r2, [pc, #28]	; (16d50 <Det_ReportRuntimeError+0x70>)
   16d32:	9b03      	ldr	r3, [sp, #12]
   16d34:	4413      	add	r3, r2
   16d36:	f89d 2003 	ldrb.w	r2, [sp, #3]
   16d3a:	701a      	strb	r2, [r3, #0]

    return E_OK;
   16d3c:	2300      	movs	r3, #0
}
   16d3e:	4618      	mov	r0, r3
   16d40:	b004      	add	sp, #16
   16d42:	bd10      	pop	{r4, pc}
   16d44:	1fff98e8 	.word	0x1fff98e8
   16d48:	1fff98c8 	.word	0x1fff98c8
   16d4c:	1fff98cc 	.word	0x1fff98cc
   16d50:	1fff98d0 	.word	0x1fff98d0

00016d54 <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
   16d54:	b510      	push	{r4, lr}
   16d56:	b084      	sub	sp, #16
   16d58:	4604      	mov	r4, r0
   16d5a:	4608      	mov	r0, r1
   16d5c:	4611      	mov	r1, r2
   16d5e:	461a      	mov	r2, r3
   16d60:	4623      	mov	r3, r4
   16d62:	f8ad 3006 	strh.w	r3, [sp, #6]
   16d66:	4603      	mov	r3, r0
   16d68:	f88d 3005 	strb.w	r3, [sp, #5]
   16d6c:	460b      	mov	r3, r1
   16d6e:	f88d 3004 	strb.w	r3, [sp, #4]
   16d72:	4613      	mov	r3, r2
   16d74:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16d78:	f7e9 ff12 	bl	ba0 <Sys_GetCoreID>
   16d7c:	4603      	mov	r3, r0
   16d7e:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
   16d80:	490d      	ldr	r1, [pc, #52]	; (16db8 <Det_ReportTransientFault+0x64>)
   16d82:	9b03      	ldr	r3, [sp, #12]
   16d84:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16d88:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
   16d8c:	4a0b      	ldr	r2, [pc, #44]	; (16dbc <Det_ReportTransientFault+0x68>)
   16d8e:	9b03      	ldr	r3, [sp, #12]
   16d90:	4413      	add	r3, r2
   16d92:	f89d 2005 	ldrb.w	r2, [sp, #5]
   16d96:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
   16d98:	4a09      	ldr	r2, [pc, #36]	; (16dc0 <Det_ReportTransientFault+0x6c>)
   16d9a:	9b03      	ldr	r3, [sp, #12]
   16d9c:	4413      	add	r3, r2
   16d9e:	f89d 2004 	ldrb.w	r2, [sp, #4]
   16da2:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
   16da4:	4a07      	ldr	r2, [pc, #28]	; (16dc4 <Det_ReportTransientFault+0x70>)
   16da6:	9b03      	ldr	r3, [sp, #12]
   16da8:	4413      	add	r3, r2
   16daa:	f89d 2003 	ldrb.w	r2, [sp, #3]
   16dae:	701a      	strb	r2, [r3, #0]

    return E_OK;
   16db0:	2300      	movs	r3, #0
}
   16db2:	4618      	mov	r0, r3
   16db4:	b004      	add	sp, #16
   16db6:	bd10      	pop	{r4, pc}
   16db8:	1fff98e0 	.word	0x1fff98e0
   16dbc:	1fff98d4 	.word	0x1fff98d4
   16dc0:	1fff98d8 	.word	0x1fff98d8
   16dc4:	1fff98dc 	.word	0x1fff98dc

00016dc8 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
   16dc8:	bf00      	nop
   16dca:	4770      	bx	lr

00016dcc <CanIf_Init>:
 * @brief This function initialices the CanIf Driver.
 * 
 * @param ConfigPtr Pointer to driver control structure. 
 */
void CanIf_Init(const CanIf_ConfigType * ConfigPtr)
{
   16dcc:	b082      	sub	sp, #8
   16dce:	9001      	str	r0, [sp, #4]
    #if (STD_ON == CANIF_PRECOMPILE_SUPPORT)
    CanIf_ConfigPtr = &CanIf_Config;
    (void)ConfigPtr;
    #else
    CanIf_ConfigPtr = ConfigPtr;
   16dd0:	4a02      	ldr	r2, [pc, #8]	; (16ddc <CanIf_Init+0x10>)
   16dd2:	9b01      	ldr	r3, [sp, #4]
   16dd4:	6013      	str	r3, [r2, #0]
    #endif
}
   16dd6:	bf00      	nop
   16dd8:	b002      	add	sp, #8
   16dda:	4770      	bx	lr
   16ddc:	1fff98ec 	.word	0x1fff98ec

00016de0 <CanIf_Transmit>:
Std_ReturnType CanIf_Transmit
(
    PduIdType CanTxPduId,
    const PduInfoType * PduInfoPtr
)
{
   16de0:	b500      	push	{lr}
   16de2:	b08b      	sub	sp, #44	; 0x2c
   16de4:	4603      	mov	r3, r0
   16de6:	9100      	str	r1, [sp, #0]
   16de8:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType RetVal = E_NOT_OK;
   16dec:	2301      	movs	r3, #1
   16dee:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    Can_HwHandleType CanHth = 0U;
   16df2:	2300      	movs	r3, #0
   16df4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    Can_PduType PduInfo;
    const CanIf_TxPduType * TxPduInfo = NULL_PTR;
   16df8:	2300      	movs	r3, #0
   16dfa:	9308      	str	r3, [sp, #32]
    uint8 CanIfControllerId = 0U;
   16dfc:	2300      	movs	r3, #0
   16dfe:	f88d 301f 	strb.w	r3, [sp, #31]
    const CanIf_CtrlPCConfigType * CanIfController = NULL_PTR;
   16e02:	2300      	movs	r3, #0
   16e04:	9306      	str	r3, [sp, #24]

    if (NULL_PTR != CanIf_ConfigPtr)
   16e06:	4b31      	ldr	r3, [pc, #196]	; (16ecc <CanIf_Transmit+0xec>)
   16e08:	681b      	ldr	r3, [r3, #0]
   16e0a:	2b00      	cmp	r3, #0
   16e0c:	d057      	beq.n	16ebe <CanIf_Transmit+0xde>
    {
        if (CanTxPduId < (CanIf_ConfigPtr->NumTxPdu))
   16e0e:	4b2f      	ldr	r3, [pc, #188]	; (16ecc <CanIf_Transmit+0xec>)
   16e10:	681b      	ldr	r3, [r3, #0]
   16e12:	785b      	ldrb	r3, [r3, #1]
   16e14:	b29b      	uxth	r3, r3
   16e16:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16e1a:	429a      	cmp	r2, r3
   16e1c:	d24f      	bcs.n	16ebe <CanIf_Transmit+0xde>
        {
            TxPduInfo = &CanIf_ConfigPtr->CanIf_TxPduConfigPtr[CanTxPduId];
   16e1e:	4b2b      	ldr	r3, [pc, #172]	; (16ecc <CanIf_Transmit+0xec>)
   16e20:	681b      	ldr	r3, [r3, #0]
   16e22:	68d9      	ldr	r1, [r3, #12]
   16e24:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16e28:	4613      	mov	r3, r2
   16e2a:	009b      	lsls	r3, r3, #2
   16e2c:	4413      	add	r3, r2
   16e2e:	009b      	lsls	r3, r3, #2
   16e30:	440b      	add	r3, r1
   16e32:	9308      	str	r3, [sp, #32]
            CanIfControllerId = TxPduInfo->CanIfCtrlId;
   16e34:	9b08      	ldr	r3, [sp, #32]
   16e36:	7b9b      	ldrb	r3, [r3, #14]
   16e38:	f88d 301f 	strb.w	r3, [sp, #31]
            CanIfController = &CanIf_PCConfig.CanIfCtrlConfigPtr[CanIfControllerId];
   16e3c:	4b24      	ldr	r3, [pc, #144]	; (16ed0 <CanIf_Transmit+0xf0>)
   16e3e:	685a      	ldr	r2, [r3, #4]
   16e40:	f89d 301f 	ldrb.w	r3, [sp, #31]
   16e44:	00db      	lsls	r3, r3, #3
   16e46:	4413      	add	r3, r2
   16e48:	9306      	str	r3, [sp, #24]

            CanHth = TxPduInfo->CanHth;
   16e4a:	9b08      	ldr	r3, [sp, #32]
   16e4c:	899b      	ldrh	r3, [r3, #12]
   16e4e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24

            PduInfo.id = TxPduInfo->CanId;
   16e52:	9b08      	ldr	r3, [sp, #32]
   16e54:	685b      	ldr	r3, [r3, #4]
   16e56:	9303      	str	r3, [sp, #12]
            /* Convert Id by adding two most significant bits specify the frame type */
            switch (TxPduInfo->CanFrameType)
   16e58:	9b08      	ldr	r3, [sp, #32]
   16e5a:	689b      	ldr	r3, [r3, #8]
   16e5c:	2b03      	cmp	r3, #3
   16e5e:	d010      	beq.n	16e82 <CanIf_Transmit+0xa2>
   16e60:	2b03      	cmp	r3, #3
   16e62:	d813      	bhi.n	16e8c <CanIf_Transmit+0xac>
   16e64:	2b00      	cmp	r3, #0
   16e66:	d002      	beq.n	16e6e <CanIf_Transmit+0x8e>
   16e68:	2b01      	cmp	r3, #1
   16e6a:	d005      	beq.n	16e78 <CanIf_Transmit+0x98>
                    PduInfo.id |= 0x40000000U;
                    break;
                }
                default:
                {
                    break;
   16e6c:	e00e      	b.n	16e8c <CanIf_Transmit+0xac>
                    PduInfo.id |= 0x80000000U;
   16e6e:	9b03      	ldr	r3, [sp, #12]
   16e70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   16e74:	9303      	str	r3, [sp, #12]
                    break;
   16e76:	e00a      	b.n	16e8e <CanIf_Transmit+0xae>
                    PduInfo.id |= 0xC0000000U;
   16e78:	9b03      	ldr	r3, [sp, #12]
   16e7a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   16e7e:	9303      	str	r3, [sp, #12]
                    break;
   16e80:	e005      	b.n	16e8e <CanIf_Transmit+0xae>
                    PduInfo.id |= 0x40000000U;
   16e82:	9b03      	ldr	r3, [sp, #12]
   16e84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   16e88:	9303      	str	r3, [sp, #12]
                    break;
   16e8a:	e000      	b.n	16e8e <CanIf_Transmit+0xae>
                    break;
   16e8c:	bf00      	nop
                }
            }
            
            PduInfo.length = (uint8)(PduInfoPtr->SduLength);
   16e8e:	9b00      	ldr	r3, [sp, #0]
   16e90:	689b      	ldr	r3, [r3, #8]
   16e92:	b2db      	uxtb	r3, r3
   16e94:	f88d 3012 	strb.w	r3, [sp, #18]
            PduInfo.sdu = PduInfoPtr->SduDataPtr;
   16e98:	9b00      	ldr	r3, [sp, #0]
   16e9a:	681b      	ldr	r3, [r3, #0]
   16e9c:	9305      	str	r3, [sp, #20]
            PduInfo.swPduHandle = CanTxPduId;
   16e9e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   16ea2:	f8ad 3010 	strh.w	r3, [sp, #16]

            RetVal = CanIfController->CanDrvConfigPtr->CanApi->CanWrite(CanHth, &PduInfo); 
   16ea6:	9b06      	ldr	r3, [sp, #24]
   16ea8:	685b      	ldr	r3, [r3, #4]
   16eaa:	685b      	ldr	r3, [r3, #4]
   16eac:	681b      	ldr	r3, [r3, #0]
   16eae:	a903      	add	r1, sp, #12
   16eb0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   16eb4:	4610      	mov	r0, r2
   16eb6:	4798      	blx	r3
   16eb8:	4603      	mov	r3, r0
   16eba:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
    }
    return RetVal;
   16ebe:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
   16ec2:	4618      	mov	r0, r3
   16ec4:	b00b      	add	sp, #44	; 0x2c
   16ec6:	f85d fb04 	ldr.w	pc, [sp], #4
   16eca:	bf00      	nop
   16ecc:	1fff98ec 	.word	0x1fff98ec
   16ed0:	00018a20 	.word	0x00018a20

00016ed4 <CanIf_TxConfirmation>:

void CanIf_TxConfirmation
(
    PduIdType CanTxPduId
)
{
   16ed4:	b500      	push	{lr}
   16ed6:	b085      	sub	sp, #20
   16ed8:	4603      	mov	r3, r0
   16eda:	f8ad 3006 	strh.w	r3, [sp, #6]
    PduIdType UserPduId;
    const CanIf_TxPduType * TxPduInfo = NULL_PTR;
   16ede:	2300      	movs	r3, #0
   16ee0:	9303      	str	r3, [sp, #12]

    if (NULL_PTR != CanIf_ConfigPtr)
   16ee2:	4b15      	ldr	r3, [pc, #84]	; (16f38 <CanIf_TxConfirmation+0x64>)
   16ee4:	681b      	ldr	r3, [r3, #0]
   16ee6:	2b00      	cmp	r3, #0
   16ee8:	d021      	beq.n	16f2e <CanIf_TxConfirmation+0x5a>
    {
        if (CanTxPduId < (CanIf_ConfigPtr->NumTxPdu))
   16eea:	4b13      	ldr	r3, [pc, #76]	; (16f38 <CanIf_TxConfirmation+0x64>)
   16eec:	681b      	ldr	r3, [r3, #0]
   16eee:	785b      	ldrb	r3, [r3, #1]
   16ef0:	b29b      	uxth	r3, r3
   16ef2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16ef6:	429a      	cmp	r2, r3
   16ef8:	d219      	bcs.n	16f2e <CanIf_TxConfirmation+0x5a>
        {
            TxPduInfo = &CanIf_ConfigPtr->CanIf_TxPduConfigPtr[CanTxPduId];
   16efa:	4b0f      	ldr	r3, [pc, #60]	; (16f38 <CanIf_TxConfirmation+0x64>)
   16efc:	681b      	ldr	r3, [r3, #0]
   16efe:	68d9      	ldr	r1, [r3, #12]
   16f00:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16f04:	4613      	mov	r3, r2
   16f06:	009b      	lsls	r3, r3, #2
   16f08:	4413      	add	r3, r2
   16f0a:	009b      	lsls	r3, r3, #2
   16f0c:	440b      	add	r3, r1
   16f0e:	9303      	str	r3, [sp, #12]

            if (NULL_PTR != TxPduInfo->UserTxConfirmation)
   16f10:	9b03      	ldr	r3, [sp, #12]
   16f12:	691b      	ldr	r3, [r3, #16]
   16f14:	2b00      	cmp	r3, #0
   16f16:	d00a      	beq.n	16f2e <CanIf_TxConfirmation+0x5a>
            {
                UserPduId = TxPduInfo->PduId;
   16f18:	9b03      	ldr	r3, [sp, #12]
   16f1a:	881b      	ldrh	r3, [r3, #0]
   16f1c:	f8ad 300a 	strh.w	r3, [sp, #10]
                TxPduInfo->UserTxConfirmation(UserPduId, E_OK);
   16f20:	9b03      	ldr	r3, [sp, #12]
   16f22:	691b      	ldr	r3, [r3, #16]
   16f24:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   16f28:	2100      	movs	r1, #0
   16f2a:	4610      	mov	r0, r2
   16f2c:	4798      	blx	r3
            }
        }
    }
}
   16f2e:	bf00      	nop
   16f30:	b005      	add	sp, #20
   16f32:	f85d fb04 	ldr.w	pc, [sp], #4
   16f36:	bf00      	nop
   16f38:	1fff98ec 	.word	0x1fff98ec

00016f3c <CanIf_RxIndication>:
void CanIf_RxIndication
(
    const Can_HwType * Mailbox,
    const PduInfoType * PduInfoPtr
)
{
   16f3c:	b500      	push	{lr}
   16f3e:	b089      	sub	sp, #36	; 0x24
   16f40:	9001      	str	r0, [sp, #4]
   16f42:	9100      	str	r1, [sp, #0]
    PduIdType UserPduId = 0U;
   16f44:	2300      	movs	r3, #0
   16f46:	f8ad 301e 	strh.w	r3, [sp, #30]
    PduInfoType PduInfo;
    const CanIf_RxPduType * RxPduInfo = NULL_PTR;
   16f4a:	2300      	movs	r3, #0
   16f4c:	9306      	str	r3, [sp, #24]
    uint8 CanDrvId = 0U;
   16f4e:	2300      	movs	r3, #0
   16f50:	f88d 3017 	strb.w	r3, [sp, #23]

    if (NULL_PTR != CanIf_ConfigPtr)
   16f54:	4b2c      	ldr	r3, [pc, #176]	; (17008 <CanIf_RxIndication+0xcc>)
   16f56:	681b      	ldr	r3, [r3, #0]
   16f58:	2b00      	cmp	r3, #0
   16f5a:	d050      	beq.n	16ffe <CanIf_RxIndication+0xc2>
    {
        if ((Mailbox->ControllerId) < (CanIf_PCConfig.NumOfCtrl))
   16f5c:	9b01      	ldr	r3, [sp, #4]
   16f5e:	799a      	ldrb	r2, [r3, #6]
   16f60:	4b2a      	ldr	r3, [pc, #168]	; (1700c <CanIf_RxIndication+0xd0>)
   16f62:	781b      	ldrb	r3, [r3, #0]
   16f64:	429a      	cmp	r2, r3
   16f66:	d24a      	bcs.n	16ffe <CanIf_RxIndication+0xc2>
        {
            if ((Mailbox->Hoh) < (CanIf_PCConfig.CanIfCtrlConfigPtr[Mailbox->ControllerId].CanDrvConfigPtr->NumCanHoh))
   16f68:	9b01      	ldr	r3, [sp, #4]
   16f6a:	889a      	ldrh	r2, [r3, #4]
   16f6c:	4b27      	ldr	r3, [pc, #156]	; (1700c <CanIf_RxIndication+0xd0>)
   16f6e:	6859      	ldr	r1, [r3, #4]
   16f70:	9b01      	ldr	r3, [sp, #4]
   16f72:	799b      	ldrb	r3, [r3, #6]
   16f74:	00db      	lsls	r3, r3, #3
   16f76:	440b      	add	r3, r1
   16f78:	685b      	ldr	r3, [r3, #4]
   16f7a:	885b      	ldrh	r3, [r3, #2]
   16f7c:	429a      	cmp	r2, r3
   16f7e:	d23e      	bcs.n	16ffe <CanIf_RxIndication+0xc2>
            {
                CanDrvId = CanIf_PCConfig.CanIfCtrlConfigPtr[Mailbox->ControllerId].CanDrvConfigPtr->CanDrvId;
   16f80:	4b22      	ldr	r3, [pc, #136]	; (1700c <CanIf_RxIndication+0xd0>)
   16f82:	685a      	ldr	r2, [r3, #4]
   16f84:	9b01      	ldr	r3, [sp, #4]
   16f86:	799b      	ldrb	r3, [r3, #6]
   16f88:	00db      	lsls	r3, r3, #3
   16f8a:	4413      	add	r3, r2
   16f8c:	685b      	ldr	r3, [r3, #4]
   16f8e:	781b      	ldrb	r3, [r3, #0]
   16f90:	f88d 3017 	strb.w	r3, [sp, #23]
                RxPduInfo = CanIf_ConfigPtr->CanDrvConfigPtr[CanDrvId]->HohToRxPduMappingPtr[Mailbox->Hoh];
   16f94:	4b1c      	ldr	r3, [pc, #112]	; (17008 <CanIf_RxIndication+0xcc>)
   16f96:	681b      	ldr	r3, [r3, #0]
   16f98:	685a      	ldr	r2, [r3, #4]
   16f9a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   16f9e:	009b      	lsls	r3, r3, #2
   16fa0:	4413      	add	r3, r2
   16fa2:	681b      	ldr	r3, [r3, #0]
   16fa4:	681a      	ldr	r2, [r3, #0]
   16fa6:	9b01      	ldr	r3, [sp, #4]
   16fa8:	889b      	ldrh	r3, [r3, #4]
   16faa:	009b      	lsls	r3, r3, #2
   16fac:	4413      	add	r3, r2
   16fae:	681b      	ldr	r3, [r3, #0]
   16fb0:	9306      	str	r3, [sp, #24]
                
                /* Will discard the Can HOH if it was not referred by any CanIf RxPDU */
                if (NULL_PTR != RxPduInfo)
   16fb2:	9b06      	ldr	r3, [sp, #24]
   16fb4:	2b00      	cmp	r3, #0
   16fb6:	d022      	beq.n	16ffe <CanIf_RxIndication+0xc2>
                {
                    if (NULL_PTR != RxPduInfo->UserRxIndication)
   16fb8:	9b06      	ldr	r3, [sp, #24]
   16fba:	689b      	ldr	r3, [r3, #8]
   16fbc:	2b00      	cmp	r3, #0
   16fbe:	d01e      	beq.n	16ffe <CanIf_RxIndication+0xc2>
                    {
                        UserPduId = RxPduInfo->PduId;
   16fc0:	9b06      	ldr	r3, [sp, #24]
   16fc2:	881b      	ldrh	r3, [r3, #0]
   16fc4:	f8ad 301e 	strh.w	r3, [sp, #30]
                        if ((TRUE == RxPduInfo->PduLengthCheck) && (PduInfoPtr->SduLength > (RxPduInfo->PduLength)))
   16fc8:	9b06      	ldr	r3, [sp, #24]
   16fca:	789b      	ldrb	r3, [r3, #2]
   16fcc:	2b00      	cmp	r3, #0
   16fce:	d009      	beq.n	16fe4 <CanIf_RxIndication+0xa8>
   16fd0:	9b00      	ldr	r3, [sp, #0]
   16fd2:	689b      	ldr	r3, [r3, #8]
   16fd4:	9a06      	ldr	r2, [sp, #24]
   16fd6:	8892      	ldrh	r2, [r2, #4]
   16fd8:	4293      	cmp	r3, r2
   16fda:	d903      	bls.n	16fe4 <CanIf_RxIndication+0xa8>
                        {
                            PduInfo.SduLength = RxPduInfo->PduLength; /* Truncates exceeded data as configured on GUI */
   16fdc:	9b06      	ldr	r3, [sp, #24]
   16fde:	889b      	ldrh	r3, [r3, #4]
   16fe0:	9304      	str	r3, [sp, #16]
   16fe2:	e002      	b.n	16fea <CanIf_RxIndication+0xae>
                        }
                        else
                        {
                            PduInfo.SduLength = PduInfoPtr->SduLength;
   16fe4:	9b00      	ldr	r3, [sp, #0]
   16fe6:	689b      	ldr	r3, [r3, #8]
   16fe8:	9304      	str	r3, [sp, #16]
                        }
                        PduInfo.SduDataPtr = PduInfoPtr->SduDataPtr;
   16fea:	9b00      	ldr	r3, [sp, #0]
   16fec:	681b      	ldr	r3, [r3, #0]
   16fee:	9302      	str	r3, [sp, #8]
                        RxPduInfo->UserRxIndication(UserPduId, &PduInfo);
   16ff0:	9b06      	ldr	r3, [sp, #24]
   16ff2:	689b      	ldr	r3, [r3, #8]
   16ff4:	a902      	add	r1, sp, #8
   16ff6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   16ffa:	4610      	mov	r0, r2
   16ffc:	4798      	blx	r3
                    }
                }
            }
        }
    }
}
   16ffe:	bf00      	nop
   17000:	b009      	add	sp, #36	; 0x24
   17002:	f85d fb04 	ldr.w	pc, [sp], #4
   17006:	bf00      	nop
   17008:	1fff98ec 	.word	0x1fff98ec
   1700c:	00018a20 	.word	0x00018a20

00017010 <CanIf_ControllerModeIndication>:
void CanIf_ControllerModeIndication
( 
    uint8 ControllerId, 
    Can_ControllerStateType ControllerMode 
)
{
   17010:	b082      	sub	sp, #8
   17012:	4603      	mov	r3, r0
   17014:	9100      	str	r1, [sp, #0]
   17016:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId; 
    (void)ControllerMode;
}
   1701a:	bf00      	nop
   1701c:	b002      	add	sp, #8
   1701e:	4770      	bx	lr

00017020 <CanIf_ControllerBusOff>:

void CanIf_ControllerBusOff
(
    uint8 ControllerId
)
{
   17020:	b082      	sub	sp, #8
   17022:	4603      	mov	r3, r0
   17024:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
}
   17028:	bf00      	nop
   1702a:	b002      	add	sp, #8
   1702c:	4770      	bx	lr

0001702e <CanIf_SetControllerMode>:
 * 
 * @param Controller CanIf controller ID.
 * @param Transition Desired state.
 * @return RetVal Status of the operation.
 */
Std_ReturnType CanIf_SetControllerMode( uint8 Controller, Can_ControllerStateType Transition ) {
   1702e:	b500      	push	{lr}
   17030:	b087      	sub	sp, #28
   17032:	4603      	mov	r3, r0
   17034:	9100      	str	r1, [sp, #0]
   17036:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   1703a:	2301      	movs	r3, #1
   1703c:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   17040:	2300      	movs	r3, #0
   17042:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   17044:	2300      	movs	r3, #0
   17046:	f88d 300f 	strb.w	r3, [sp, #15]


    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   1704a:	4b13      	ldr	r3, [pc, #76]	; (17098 <CanIf_SetControllerMode+0x6a>)
   1704c:	681b      	ldr	r3, [r3, #0]
   1704e:	2b00      	cmp	r3, #0
   17050:	d01c      	beq.n	1708c <CanIf_SetControllerMode+0x5e>
        if ( Controller < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   17052:	4b12      	ldr	r3, [pc, #72]	; (1709c <CanIf_SetControllerMode+0x6e>)
   17054:	781b      	ldrb	r3, [r3, #0]
   17056:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1705a:	429a      	cmp	r2, r3
   1705c:	d216      	bcs.n	1708c <CanIf_SetControllerMode+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ Controller ];
   1705e:	4b0f      	ldr	r3, [pc, #60]	; (1709c <CanIf_SetControllerMode+0x6e>)
   17060:	685a      	ldr	r2, [r3, #4]
   17062:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17066:	00db      	lsls	r3, r3, #3
   17068:	4413      	add	r3, r2
   1706a:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   1706c:	9b04      	ldr	r3, [sp, #16]
   1706e:	785b      	ldrb	r3, [r3, #1]
   17070:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanSetMode( CanController_ID, Transition );   //Calling Can Driver Api.
   17074:	9b04      	ldr	r3, [sp, #16]
   17076:	685b      	ldr	r3, [r3, #4]
   17078:	685b      	ldr	r3, [r3, #4]
   1707a:	685b      	ldr	r3, [r3, #4]
   1707c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   17080:	9900      	ldr	r1, [sp, #0]
   17082:	4610      	mov	r0, r2
   17084:	4798      	blx	r3
   17086:	4603      	mov	r3, r0
   17088:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   1708c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   17090:	4618      	mov	r0, r3
   17092:	b007      	add	sp, #28
   17094:	f85d fb04 	ldr.w	pc, [sp], #4
   17098:	1fff98ec 	.word	0x1fff98ec
   1709c:	00018a20 	.word	0x00018a20

000170a0 <CanIf_EnableControllerInterrupts>:
/**
 * @brief This function enables the interrupts of a given CanIf controller.
 * 
 * @param Controller CanIf controller ID.
 */
void CanIf_EnableControllerInterrupts( uint8 Controller ) {
   170a0:	b500      	push	{lr}
   170a2:	b085      	sub	sp, #20
   170a4:	4603      	mov	r3, r0
   170a6:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data.
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   170aa:	2300      	movs	r3, #0
   170ac:	9303      	str	r3, [sp, #12]
    uint8 CanController_ID = 0; //Can controller ID.
   170ae:	2300      	movs	r3, #0
   170b0:	f88d 300b 	strb.w	r3, [sp, #11]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   170b4:	4b10      	ldr	r3, [pc, #64]	; (170f8 <CanIf_EnableControllerInterrupts+0x58>)
   170b6:	681b      	ldr	r3, [r3, #0]
   170b8:	2b00      	cmp	r3, #0
   170ba:	d018      	beq.n	170ee <CanIf_EnableControllerInterrupts+0x4e>
        if ( Controller < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   170bc:	4b0f      	ldr	r3, [pc, #60]	; (170fc <CanIf_EnableControllerInterrupts+0x5c>)
   170be:	781b      	ldrb	r3, [r3, #0]
   170c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   170c4:	429a      	cmp	r2, r3
   170c6:	d212      	bcs.n	170ee <CanIf_EnableControllerInterrupts+0x4e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ Controller ];
   170c8:	4b0c      	ldr	r3, [pc, #48]	; (170fc <CanIf_EnableControllerInterrupts+0x5c>)
   170ca:	685a      	ldr	r2, [r3, #4]
   170cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   170d0:	00db      	lsls	r3, r3, #3
   170d2:	4413      	add	r3, r2
   170d4:	9303      	str	r3, [sp, #12]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   170d6:	9b03      	ldr	r3, [sp, #12]
   170d8:	785b      	ldrb	r3, [r3, #1]
   170da:	f88d 300b 	strb.w	r3, [sp, #11]
            CanIfControllerConf->CanDrvConfigPtr->CanApi->CanEnableInterrupts( CanController_ID );   //Calling Can Driver Api.
   170de:	9b03      	ldr	r3, [sp, #12]
   170e0:	685b      	ldr	r3, [r3, #4]
   170e2:	685b      	ldr	r3, [r3, #4]
   170e4:	689b      	ldr	r3, [r3, #8]
   170e6:	f89d 200b 	ldrb.w	r2, [sp, #11]
   170ea:	4610      	mov	r0, r2
   170ec:	4798      	blx	r3
        }
    }
}
   170ee:	bf00      	nop
   170f0:	b005      	add	sp, #20
   170f2:	f85d fb04 	ldr.w	pc, [sp], #4
   170f6:	bf00      	nop
   170f8:	1fff98ec 	.word	0x1fff98ec
   170fc:	00018a20 	.word	0x00018a20

00017100 <CanIf_DisableControllerInterrupts>:
/**
 * @brief This function disables the interrupts of a given CanIf controller.
 * 
 * @param Controller CanIf controller ID.
 */
void CanIf_DisableControllerInterrupts( uint8 Controller ) {
   17100:	b500      	push	{lr}
   17102:	b085      	sub	sp, #20
   17104:	4603      	mov	r3, r0
   17106:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data.
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   1710a:	2300      	movs	r3, #0
   1710c:	9303      	str	r3, [sp, #12]
    uint8 CanController_ID = 0; //Can controller ID.
   1710e:	2300      	movs	r3, #0
   17110:	f88d 300b 	strb.w	r3, [sp, #11]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   17114:	4b10      	ldr	r3, [pc, #64]	; (17158 <CanIf_DisableControllerInterrupts+0x58>)
   17116:	681b      	ldr	r3, [r3, #0]
   17118:	2b00      	cmp	r3, #0
   1711a:	d018      	beq.n	1714e <CanIf_DisableControllerInterrupts+0x4e>
        if ( Controller < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   1711c:	4b0f      	ldr	r3, [pc, #60]	; (1715c <CanIf_DisableControllerInterrupts+0x5c>)
   1711e:	781b      	ldrb	r3, [r3, #0]
   17120:	f89d 2007 	ldrb.w	r2, [sp, #7]
   17124:	429a      	cmp	r2, r3
   17126:	d212      	bcs.n	1714e <CanIf_DisableControllerInterrupts+0x4e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ Controller ];
   17128:	4b0c      	ldr	r3, [pc, #48]	; (1715c <CanIf_DisableControllerInterrupts+0x5c>)
   1712a:	685a      	ldr	r2, [r3, #4]
   1712c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17130:	00db      	lsls	r3, r3, #3
   17132:	4413      	add	r3, r2
   17134:	9303      	str	r3, [sp, #12]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   17136:	9b03      	ldr	r3, [sp, #12]
   17138:	785b      	ldrb	r3, [r3, #1]
   1713a:	f88d 300b 	strb.w	r3, [sp, #11]
            CanIfControllerConf->CanDrvConfigPtr->CanApi->CanDisableInterrupts( CanController_ID );   //Calling Can Driver Api.
   1713e:	9b03      	ldr	r3, [sp, #12]
   17140:	685b      	ldr	r3, [r3, #4]
   17142:	685b      	ldr	r3, [r3, #4]
   17144:	68db      	ldr	r3, [r3, #12]
   17146:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1714a:	4610      	mov	r0, r2
   1714c:	4798      	blx	r3
        }
    }
}
   1714e:	bf00      	nop
   17150:	b005      	add	sp, #20
   17152:	f85d fb04 	ldr.w	pc, [sp], #4
   17156:	bf00      	nop
   17158:	1fff98ec 	.word	0x1fff98ec
   1715c:	00018a20 	.word	0x00018a20

00017160 <CanIf_GetControllerErrorState>:
 * 
 * @param ControllerId CanIf controller ID.
 * @param ErrorStatePtr Pointer to variable to store the actual error state of the controller.
 * @return RetVal Status of the operation. 
 */
Std_ReturnType CanIf_GetControllerErrorState( uint8 ControllerId, Can_ErrorStateType *ErrorStatePtr) {
   17160:	b500      	push	{lr}
   17162:	b087      	sub	sp, #28
   17164:	4603      	mov	r3, r0
   17166:	9100      	str	r1, [sp, #0]
   17168:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   1716c:	2301      	movs	r3, #1
   1716e:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   17172:	2300      	movs	r3, #0
   17174:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   17176:	2300      	movs	r3, #0
   17178:	f88d 300f 	strb.w	r3, [sp, #15]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   1717c:	4b13      	ldr	r3, [pc, #76]	; (171cc <CanIf_GetControllerErrorState+0x6c>)
   1717e:	681b      	ldr	r3, [r3, #0]
   17180:	2b00      	cmp	r3, #0
   17182:	d01c      	beq.n	171be <CanIf_GetControllerErrorState+0x5e>
        if ( ControllerId < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   17184:	4b12      	ldr	r3, [pc, #72]	; (171d0 <CanIf_GetControllerErrorState+0x70>)
   17186:	781b      	ldrb	r3, [r3, #0]
   17188:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1718c:	429a      	cmp	r2, r3
   1718e:	d216      	bcs.n	171be <CanIf_GetControllerErrorState+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ ControllerId ];
   17190:	4b0f      	ldr	r3, [pc, #60]	; (171d0 <CanIf_GetControllerErrorState+0x70>)
   17192:	685a      	ldr	r2, [r3, #4]
   17194:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17198:	00db      	lsls	r3, r3, #3
   1719a:	4413      	add	r3, r2
   1719c:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   1719e:	9b04      	ldr	r3, [sp, #16]
   171a0:	785b      	ldrb	r3, [r3, #1]
   171a2:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanGetErrorState( CanController_ID, ErrorStatePtr );   //Calling Can Driver Api.
   171a6:	9b04      	ldr	r3, [sp, #16]
   171a8:	685b      	ldr	r3, [r3, #4]
   171aa:	685b      	ldr	r3, [r3, #4]
   171ac:	691b      	ldr	r3, [r3, #16]
   171ae:	f89d 200f 	ldrb.w	r2, [sp, #15]
   171b2:	9900      	ldr	r1, [sp, #0]
   171b4:	4610      	mov	r0, r2
   171b6:	4798      	blx	r3
   171b8:	4603      	mov	r3, r0
   171ba:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   171be:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   171c2:	4618      	mov	r0, r3
   171c4:	b007      	add	sp, #28
   171c6:	f85d fb04 	ldr.w	pc, [sp], #4
   171ca:	bf00      	nop
   171cc:	1fff98ec 	.word	0x1fff98ec
   171d0:	00018a20 	.word	0x00018a20

000171d4 <CanIf_GetControllerMode>:
 * 
 * @param Controller CanIf controller ID.
 * @param ControllerModePtr Pointer to variable to store the actual state of the controller.
 * @return RetVal Status of the operation.
 */
Std_ReturnType CanIf_GetControllerMode( uint8 Controller, Can_ControllerStateType *ControllerModePtr ) {
   171d4:	b500      	push	{lr}
   171d6:	b087      	sub	sp, #28
   171d8:	4603      	mov	r3, r0
   171da:	9100      	str	r1, [sp, #0]
   171dc:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   171e0:	2301      	movs	r3, #1
   171e2:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   171e6:	2300      	movs	r3, #0
   171e8:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   171ea:	2300      	movs	r3, #0
   171ec:	f88d 300f 	strb.w	r3, [sp, #15]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   171f0:	4b13      	ldr	r3, [pc, #76]	; (17240 <CanIf_GetControllerMode+0x6c>)
   171f2:	681b      	ldr	r3, [r3, #0]
   171f4:	2b00      	cmp	r3, #0
   171f6:	d01c      	beq.n	17232 <CanIf_GetControllerMode+0x5e>
        if ( Controller < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   171f8:	4b12      	ldr	r3, [pc, #72]	; (17244 <CanIf_GetControllerMode+0x70>)
   171fa:	781b      	ldrb	r3, [r3, #0]
   171fc:	f89d 2007 	ldrb.w	r2, [sp, #7]
   17200:	429a      	cmp	r2, r3
   17202:	d216      	bcs.n	17232 <CanIf_GetControllerMode+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ Controller ];
   17204:	4b0f      	ldr	r3, [pc, #60]	; (17244 <CanIf_GetControllerMode+0x70>)
   17206:	685a      	ldr	r2, [r3, #4]
   17208:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1720c:	00db      	lsls	r3, r3, #3
   1720e:	4413      	add	r3, r2
   17210:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   17212:	9b04      	ldr	r3, [sp, #16]
   17214:	785b      	ldrb	r3, [r3, #1]
   17216:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanGetMode( CanController_ID, ControllerModePtr );   //Calling Can Driver Api.
   1721a:	9b04      	ldr	r3, [sp, #16]
   1721c:	685b      	ldr	r3, [r3, #4]
   1721e:	685b      	ldr	r3, [r3, #4]
   17220:	695b      	ldr	r3, [r3, #20]
   17222:	f89d 200f 	ldrb.w	r2, [sp, #15]
   17226:	9900      	ldr	r1, [sp, #0]
   17228:	4610      	mov	r0, r2
   1722a:	4798      	blx	r3
   1722c:	4603      	mov	r3, r0
   1722e:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   17232:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   17236:	4618      	mov	r0, r3
   17238:	b007      	add	sp, #28
   1723a:	f85d fb04 	ldr.w	pc, [sp], #4
   1723e:	bf00      	nop
   17240:	1fff98ec 	.word	0x1fff98ec
   17244:	00018a20 	.word	0x00018a20

00017248 <CanIf_GetControllerRxErrorCounter>:
 * 
 * @param ControllerId CanIf controller ID.
 * @param RxErrorCounterPtr Pointer to variable to store the actual value of the rx error counter of the controller.
 * @return RetVal Status of the operation.
 */
Std_ReturnType CanIf_GetControllerRxErrorCounter( uint8 ControllerId, uint8 *RxErrorCounterPtr ) {
   17248:	b500      	push	{lr}
   1724a:	b087      	sub	sp, #28
   1724c:	4603      	mov	r3, r0
   1724e:	9100      	str	r1, [sp, #0]
   17250:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   17254:	2301      	movs	r3, #1
   17256:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   1725a:	2300      	movs	r3, #0
   1725c:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   1725e:	2300      	movs	r3, #0
   17260:	f88d 300f 	strb.w	r3, [sp, #15]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   17264:	4b13      	ldr	r3, [pc, #76]	; (172b4 <CanIf_GetControllerRxErrorCounter+0x6c>)
   17266:	681b      	ldr	r3, [r3, #0]
   17268:	2b00      	cmp	r3, #0
   1726a:	d01c      	beq.n	172a6 <CanIf_GetControllerRxErrorCounter+0x5e>
        if ( ControllerId < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   1726c:	4b12      	ldr	r3, [pc, #72]	; (172b8 <CanIf_GetControllerRxErrorCounter+0x70>)
   1726e:	781b      	ldrb	r3, [r3, #0]
   17270:	f89d 2007 	ldrb.w	r2, [sp, #7]
   17274:	429a      	cmp	r2, r3
   17276:	d216      	bcs.n	172a6 <CanIf_GetControllerRxErrorCounter+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ ControllerId ];
   17278:	4b0f      	ldr	r3, [pc, #60]	; (172b8 <CanIf_GetControllerRxErrorCounter+0x70>)
   1727a:	685a      	ldr	r2, [r3, #4]
   1727c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17280:	00db      	lsls	r3, r3, #3
   17282:	4413      	add	r3, r2
   17284:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   17286:	9b04      	ldr	r3, [sp, #16]
   17288:	785b      	ldrb	r3, [r3, #1]
   1728a:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanGetRxErrorCounter( CanController_ID, RxErrorCounterPtr );   //Calling Can Driver Api.
   1728e:	9b04      	ldr	r3, [sp, #16]
   17290:	685b      	ldr	r3, [r3, #4]
   17292:	685b      	ldr	r3, [r3, #4]
   17294:	699b      	ldr	r3, [r3, #24]
   17296:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1729a:	9900      	ldr	r1, [sp, #0]
   1729c:	4610      	mov	r0, r2
   1729e:	4798      	blx	r3
   172a0:	4603      	mov	r3, r0
   172a2:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   172a6:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   172aa:	4618      	mov	r0, r3
   172ac:	b007      	add	sp, #28
   172ae:	f85d fb04 	ldr.w	pc, [sp], #4
   172b2:	bf00      	nop
   172b4:	1fff98ec 	.word	0x1fff98ec
   172b8:	00018a20 	.word	0x00018a20

000172bc <CanIf_GetControllerTxErrorCounter>:
 * 
 * @param ControllerId CanIf controller ID.
 * @param TxErrorCounterPtr Pointer to variable to store the actual value of the tx error counter of the controller.
 * @return RetVal Status of the operation. 
 */
Std_ReturnType CanIf_GetControllerTxErrorCounter( uint8 ControllerId, uint8 *TxErrorCounterPtr ) {
   172bc:	b500      	push	{lr}
   172be:	b087      	sub	sp, #28
   172c0:	4603      	mov	r3, r0
   172c2:	9100      	str	r1, [sp, #0]
   172c4:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data.
    Std_ReturnType RetVal = E_NOT_OK;
   172c8:	2301      	movs	r3, #1
   172ca:	f88d 3017 	strb.w	r3, [sp, #23]
    const CanIf_CtrlPCConfigType * CanIfControllerConf = NULL_PTR;    //Pointer to CanIf controller configuration.
   172ce:	2300      	movs	r3, #0
   172d0:	9304      	str	r3, [sp, #16]
    uint8 CanController_ID = 0; //Can controller ID.
   172d2:	2300      	movs	r3, #0
   172d4:	f88d 300f 	strb.w	r3, [sp, #15]

    if ( CanIf_ConfigPtr != NULL_PTR ) { 
   172d8:	4b13      	ldr	r3, [pc, #76]	; (17328 <CanIf_GetControllerTxErrorCounter+0x6c>)
   172da:	681b      	ldr	r3, [r3, #0]
   172dc:	2b00      	cmp	r3, #0
   172de:	d01c      	beq.n	1731a <CanIf_GetControllerTxErrorCounter+0x5e>
        if ( ControllerId < CanIf_PCConfig.NumOfCtrl ) { //Operation can be done as normal.
   172e0:	4b12      	ldr	r3, [pc, #72]	; (1732c <CanIf_GetControllerTxErrorCounter+0x70>)
   172e2:	781b      	ldrb	r3, [r3, #0]
   172e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   172e8:	429a      	cmp	r2, r3
   172ea:	d216      	bcs.n	1731a <CanIf_GetControllerTxErrorCounter+0x5e>
            CanIfControllerConf = &CanIf_PCConfig.CanIfCtrlConfigPtr[ ControllerId ];
   172ec:	4b0f      	ldr	r3, [pc, #60]	; (1732c <CanIf_GetControllerTxErrorCounter+0x70>)
   172ee:	685a      	ldr	r2, [r3, #4]
   172f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   172f4:	00db      	lsls	r3, r3, #3
   172f6:	4413      	add	r3, r2
   172f8:	9304      	str	r3, [sp, #16]
            CanController_ID = CanIfControllerConf->CanCtrlId;
   172fa:	9b04      	ldr	r3, [sp, #16]
   172fc:	785b      	ldrb	r3, [r3, #1]
   172fe:	f88d 300f 	strb.w	r3, [sp, #15]
            RetVal = CanIfControllerConf->CanDrvConfigPtr->CanApi->CanGetTxErrorCounter( CanController_ID, TxErrorCounterPtr );   //Calling Can Driver Api.
   17302:	9b04      	ldr	r3, [sp, #16]
   17304:	685b      	ldr	r3, [r3, #4]
   17306:	685b      	ldr	r3, [r3, #4]
   17308:	69db      	ldr	r3, [r3, #28]
   1730a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1730e:	9900      	ldr	r1, [sp, #0]
   17310:	4610      	mov	r0, r2
   17312:	4798      	blx	r3
   17314:	4603      	mov	r3, r0
   17316:	f88d 3017 	strb.w	r3, [sp, #23]
        }
    }

    return RetVal;
   1731a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   1731e:	4618      	mov	r0, r3
   17320:	b007      	add	sp, #28
   17322:	f85d fb04 	ldr.w	pc, [sp], #4
   17326:	bf00      	nop
   17328:	1fff98ec 	.word	0x1fff98ec
   1732c:	00018a20 	.word	0x00018a20

00017330 <Fls_ACEraseRomEnd>:
   17330:	5f75634d 	.word	0x5f75634d
   17334:	74696e49 	.word	0x74696e49
   17338:	00002928 	.word	0x00002928
   1733c:	5f75634d 	.word	0x5f75634d
   17340:	74696e49 	.word	0x74696e49
   17344:	636f6c43 	.word	0x636f6c43
   17348:	0029286b 	.word	0x0029286b
   1734c:	5f75634d 	.word	0x5f75634d
   17350:	4d746553 	.word	0x4d746553
   17354:	2865646f 	.word	0x2865646f
   17358:	00000029 	.word	0x00000029
   1735c:	5f75634d 	.word	0x5f75634d
   17360:	56746547 	.word	0x56746547
   17364:	69737265 	.word	0x69737265
   17368:	6e496e6f 	.word	0x6e496e6f
   1736c:	29286f66 	.word	0x29286f66
   17370:	00000000 	.word	0x00000000
   17374:	61766e49 	.word	0x61766e49
   17378:	2064696c 	.word	0x2064696c
   1737c:	666e6f63 	.word	0x666e6f63
   17380:	696f7020 	.word	0x696f7020
   17384:	7265746e 	.word	0x7265746e
   17388:	00000000 	.word	0x00000000
   1738c:	76697244 	.word	0x76697244
   17390:	75207265 	.word	0x75207265
   17394:	696e696e 	.word	0x696e696e
   17398:	6c616974 	.word	0x6c616974
   1739c:	64657a69 	.word	0x64657a69
   173a0:	00000000 	.word	0x00000000
   173a4:	76697244 	.word	0x76697244
   173a8:	61207265 	.word	0x61207265
   173ac:	6165726c 	.word	0x6165726c
   173b0:	69207964 	.word	0x69207964
   173b4:	6974696e 	.word	0x6974696e
   173b8:	7a696c61 	.word	0x7a696c61
   173bc:	00006465 	.word	0x00006465
   173c0:	61766e49 	.word	0x61766e49
   173c4:	2064696c 	.word	0x2064696c
   173c8:	75706e69 	.word	0x75706e69
   173cc:	61702074 	.word	0x61702074
   173d0:	656d6172 	.word	0x656d6172
   173d4:	00726574 	.word	0x00726574
   173d8:	74616c50 	.word	0x74616c50
   173dc:	6d726f66 	.word	0x6d726f66
   173e0:	696e495f 	.word	0x696e495f
   173e4:	00292874 	.word	0x00292874
   173e8:	74616c50 	.word	0x74616c50
   173ec:	6d726f66 	.word	0x6d726f66
   173f0:	7465535f 	.word	0x7465535f
   173f4:	28717249 	.word	0x28717249
   173f8:	00000029 	.word	0x00000029
   173fc:	74616c50 	.word	0x74616c50
   17400:	6d726f66 	.word	0x6d726f66
   17404:	7465535f 	.word	0x7465535f
   17408:	50717249 	.word	0x50717249
   1740c:	726f6972 	.word	0x726f6972
   17410:	28797469 	.word	0x28797469
   17414:	00000029 	.word	0x00000029
   17418:	74616c50 	.word	0x74616c50
   1741c:	6d726f66 	.word	0x6d726f66
   17420:	7465475f 	.word	0x7465475f
   17424:	50717249 	.word	0x50717249
   17428:	726f6972 	.word	0x726f6972
   1742c:	28797469 	.word	0x28797469
   17430:	00000029 	.word	0x00000029
   17434:	74616c50 	.word	0x74616c50
   17438:	6d726f66 	.word	0x6d726f66
   1743c:	736e495f 	.word	0x736e495f
   17440:	6c6c6174 	.word	0x6c6c6174
   17444:	48717249 	.word	0x48717249
   17448:	6c646e61 	.word	0x6c646e61
   1744c:	29287265 	.word	0x29287265
   17450:	00000000 	.word	0x00000000
   17454:	61766e49 	.word	0x61766e49
   17458:	2064696c 	.word	0x2064696c
   1745c:	6e696f70 	.word	0x6e696f70
   17460:	00726574 	.word	0x00726574
   17464:	6c6c6143 	.word	0x6c6c6143
   17468:	6f726620 	.word	0x6f726620
   1746c:	7277206d 	.word	0x7277206d
   17470:	20676e6f 	.word	0x20676e6f
   17474:	7070616d 	.word	0x7070616d
   17478:	70206465 	.word	0x70206465
   1747c:	69747261 	.word	0x69747261
   17480:	6e6f6974 	.word	0x6e6f6974
   17484:	00000000 	.word	0x00000000
   17488:	61726150 	.word	0x61726150
   1748c:	6574656d 	.word	0x6574656d
   17490:	756f2072 	.word	0x756f2072
   17494:	666f2074 	.word	0x666f2074
   17498:	6e617220 	.word	0x6e617220
   1749c:	00006567 	.word	0x00006567
   174a0:	74726f50 	.word	0x74726f50
   174a4:	696e495f 	.word	0x696e495f
   174a8:	00292874 	.word	0x00292874
   174ac:	74726f50 	.word	0x74726f50
   174b0:	7465535f 	.word	0x7465535f
   174b4:	446e6950 	.word	0x446e6950
   174b8:	63657269 	.word	0x63657269
   174bc:	6e6f6974 	.word	0x6e6f6974
   174c0:	00002928 	.word	0x00002928
   174c4:	74726f50 	.word	0x74726f50
   174c8:	7465535f 	.word	0x7465535f
   174cc:	4d6e6950 	.word	0x4d6e6950
   174d0:	2865646f 	.word	0x2865646f
   174d4:	00000029 	.word	0x00000029
   174d8:	74726f50 	.word	0x74726f50
   174dc:	6665525f 	.word	0x6665525f
   174e0:	68736572 	.word	0x68736572
   174e4:	74726f50 	.word	0x74726f50
   174e8:	65726944 	.word	0x65726944
   174ec:	6f697463 	.word	0x6f697463
   174f0:	0029286e 	.word	0x0029286e
   174f4:	74726f50 	.word	0x74726f50
   174f8:	7465475f 	.word	0x7465475f
   174fc:	73726556 	.word	0x73726556
   17500:	496e6f69 	.word	0x496e6f69
   17504:	286f666e 	.word	0x286f666e
   17508:	00000029 	.word	0x00000029
   1750c:	61766e49 	.word	0x61766e49
   17510:	2064696c 	.word	0x2064696c
   17514:	74726f50 	.word	0x74726f50
   17518:	6e695020 	.word	0x6e695020
   1751c:	00444920 	.word	0x00444920
   17520:	74726f50 	.word	0x74726f50
   17524:	6e697020 	.word	0x6e697020
   17528:	646f6d20 	.word	0x646f6d20
   1752c:	73692065 	.word	0x73692065
   17530:	636e7520 	.word	0x636e7520
   17534:	676e6168 	.word	0x676e6168
   17538:	6c626165 	.word	0x6c626165
   1753c:	00000065 	.word	0x00000065
   17540:	61766e49 	.word	0x61766e49
   17544:	2064696c 	.word	0x2064696c
   17548:	74726f70 	.word	0x74726f70
   1754c:	6e697020 	.word	0x6e697020
   17550:	646f6d20 	.word	0x646f6d20
   17554:	00000065 	.word	0x00000065
   17558:	5f6f6944 	.word	0x5f6f6944
   1755c:	74697257 	.word	0x74697257
   17560:	61684365 	.word	0x61684365
   17564:	6c656e6e 	.word	0x6c656e6e
   17568:	00002928 	.word	0x00002928
   1756c:	5f6f6944 	.word	0x5f6f6944
   17570:	64616552 	.word	0x64616552
   17574:	6e616843 	.word	0x6e616843
   17578:	286c656e 	.word	0x286c656e
   1757c:	00000029 	.word	0x00000029
   17580:	5f6f6944 	.word	0x5f6f6944
   17584:	70696c46 	.word	0x70696c46
   17588:	6e616843 	.word	0x6e616843
   1758c:	286c656e 	.word	0x286c656e
   17590:	00000029 	.word	0x00000029
   17594:	5f6f6944 	.word	0x5f6f6944
   17598:	74697257 	.word	0x74697257
   1759c:	61684365 	.word	0x61684365
   175a0:	6c656e6e 	.word	0x6c656e6e
   175a4:	756f7247 	.word	0x756f7247
   175a8:	00292870 	.word	0x00292870
   175ac:	5f6f6944 	.word	0x5f6f6944
   175b0:	64616552 	.word	0x64616552
   175b4:	6e616843 	.word	0x6e616843
   175b8:	476c656e 	.word	0x476c656e
   175bc:	70756f72 	.word	0x70756f72
   175c0:	00002928 	.word	0x00002928
   175c4:	5f6f6944 	.word	0x5f6f6944
   175c8:	74697257 	.word	0x74697257
   175cc:	726f5065 	.word	0x726f5065
   175d0:	00292874 	.word	0x00292874
   175d4:	5f6f6944 	.word	0x5f6f6944
   175d8:	64616552 	.word	0x64616552
   175dc:	74726f50 	.word	0x74726f50
   175e0:	00002928 	.word	0x00002928
   175e4:	5f6f6944 	.word	0x5f6f6944
   175e8:	56746547 	.word	0x56746547
   175ec:	69737265 	.word	0x69737265
   175f0:	6e496e6f 	.word	0x6e496e6f
   175f4:	29286f66 	.word	0x29286f66
   175f8:	00000000 	.word	0x00000000
   175fc:	61766e49 	.word	0x61766e49
   17600:	2064696c 	.word	0x2064696c
   17604:	206f6964 	.word	0x206f6964
   17608:	6e616863 	.word	0x6e616863
   1760c:	206c656e 	.word	0x206c656e
   17610:	6576656c 	.word	0x6576656c
   17614:	0000006c 	.word	0x0000006c
   17618:	61766e49 	.word	0x61766e49
   1761c:	2064696c 	.word	0x2064696c
   17620:	206f6964 	.word	0x206f6964
   17624:	6e616863 	.word	0x6e616863
   17628:	206c656e 	.word	0x206c656e
   1762c:	00006469 	.word	0x00006469
   17630:	61766e49 	.word	0x61766e49
   17634:	2064696c 	.word	0x2064696c
   17638:	74726f70 	.word	0x74726f70
   1763c:	00646920 	.word	0x00646920
   17640:	61766e49 	.word	0x61766e49
   17644:	2064696c 	.word	0x2064696c
   17648:	6e616863 	.word	0x6e616863
   1764c:	206c656e 	.word	0x206c656e
   17650:	756f7267 	.word	0x756f7267
   17654:	64692070 	.word	0x64692070
   17658:	00000000 	.word	0x00000000
   1765c:	61766e49 	.word	0x61766e49
   17660:	2064696c 	.word	0x2064696c
   17664:	666e6f63 	.word	0x666e6f63
   17668:	70206769 	.word	0x70206769
   1766c:	6d617261 	.word	0x6d617261
   17670:	72657465 	.word	0x72657465
   17674:	00000000 	.word	0x00000000
   17678:	5f6d7750 	.word	0x5f6d7750
   1767c:	74696e49 	.word	0x74696e49
   17680:	00002928 	.word	0x00002928
   17684:	5f6d7750 	.word	0x5f6d7750
   17688:	6e496544 	.word	0x6e496544
   1768c:	29287469 	.word	0x29287469
   17690:	00000000 	.word	0x00000000
   17694:	5f6d7750 	.word	0x5f6d7750
   17698:	44746553 	.word	0x44746553
   1769c:	43797475 	.word	0x43797475
   176a0:	656c6379 	.word	0x656c6379
   176a4:	00002928 	.word	0x00002928
   176a8:	5f6d7750 	.word	0x5f6d7750
   176ac:	50746553 	.word	0x50746553
   176b0:	6f697265 	.word	0x6f697265
   176b4:	646e4164 	.word	0x646e4164
   176b8:	79747544 	.word	0x79747544
   176bc:	00002928 	.word	0x00002928
   176c0:	5f6d7750 	.word	0x5f6d7750
   176c4:	4f746553 	.word	0x4f746553
   176c8:	75707475 	.word	0x75707475
   176cc:	496f5474 	.word	0x496f5474
   176d0:	28656c64 	.word	0x28656c64
   176d4:	00000029 	.word	0x00000029
   176d8:	5f6d7750 	.word	0x5f6d7750
   176dc:	56746547 	.word	0x56746547
   176e0:	69737265 	.word	0x69737265
   176e4:	6e496e6f 	.word	0x6e496e6f
   176e8:	29286f66 	.word	0x29286f66
   176ec:	00000000 	.word	0x00000000
   176f0:	61766e49 	.word	0x61766e49
   176f4:	2064696c 	.word	0x2064696c
   176f8:	666e6f63 	.word	0x666e6f63
   176fc:	70206769 	.word	0x70206769
   17700:	746e696f 	.word	0x746e696f
   17704:	00007265 	.word	0x00007265
   17708:	61766e49 	.word	0x61766e49
   1770c:	2064696c 	.word	0x2064696c
   17710:	206d7770 	.word	0x206d7770
   17714:	6e616863 	.word	0x6e616863
   17718:	006c656e 	.word	0x006c656e
   1771c:	206d7750 	.word	0x206d7750
   17720:	6e616863 	.word	0x6e616863
   17724:	206c656e 	.word	0x206c656e
   17728:	69726570 	.word	0x69726570
   1772c:	6920646f 	.word	0x6920646f
   17730:	6e752073 	.word	0x6e752073
   17734:	6e616863 	.word	0x6e616863
   17738:	62616567 	.word	0x62616567
   1773c:	0000656c 	.word	0x0000656c
   17740:	5f636441 	.word	0x5f636441
   17744:	74696e49 	.word	0x74696e49
   17748:	00002928 	.word	0x00002928
   1774c:	5f636441 	.word	0x5f636441
   17750:	6e496544 	.word	0x6e496544
   17754:	29287469 	.word	0x29287469
   17758:	00000000 	.word	0x00000000
   1775c:	5f636441 	.word	0x5f636441
   17760:	72617453 	.word	0x72617453
   17764:	6f724774 	.word	0x6f724774
   17768:	6f437075 	.word	0x6f437075
   1776c:	7265766e 	.word	0x7265766e
   17770:	6e6f6973 	.word	0x6e6f6973
   17774:	00002928 	.word	0x00002928
   17778:	5f636441 	.word	0x5f636441
   1777c:	706f7453 	.word	0x706f7453
   17780:	756f7247 	.word	0x756f7247
   17784:	6e6f4370 	.word	0x6e6f4370
   17788:	73726576 	.word	0x73726576
   1778c:	286e6f69 	.word	0x286e6f69
   17790:	00000029 	.word	0x00000029
   17794:	5f636441 	.word	0x5f636441
   17798:	64616552 	.word	0x64616552
   1779c:	756f7247 	.word	0x756f7247
   177a0:	00292870 	.word	0x00292870
   177a4:	5f636441 	.word	0x5f636441
   177a8:	47746547 	.word	0x47746547
   177ac:	70756f72 	.word	0x70756f72
   177b0:	74617453 	.word	0x74617453
   177b4:	29287375 	.word	0x29287375
   177b8:	00000000 	.word	0x00000000
   177bc:	5f636441 	.word	0x5f636441
   177c0:	696c6143 	.word	0x696c6143
   177c4:	74617262 	.word	0x74617262
   177c8:	00292865 	.word	0x00292865
   177cc:	5f636441 	.word	0x5f636441
   177d0:	75746553 	.word	0x75746553
   177d4:	73655270 	.word	0x73655270
   177d8:	42746c75 	.word	0x42746c75
   177dc:	65666675 	.word	0x65666675
   177e0:	00292872 	.word	0x00292872
   177e4:	5f636441 	.word	0x5f636441
   177e8:	56746547 	.word	0x56746547
   177ec:	69737265 	.word	0x69737265
   177f0:	6e496e6f 	.word	0x6e496e6f
   177f4:	29286f66 	.word	0x29286f66
   177f8:	00000000 	.word	0x00000000
   177fc:	61766e49 	.word	0x61766e49
   17800:	2064696c 	.word	0x2064696c
   17804:	20636461 	.word	0x20636461
   17808:	756f7267 	.word	0x756f7267
   1780c:	00000070 	.word	0x00000070
   17810:	66667542 	.word	0x66667542
   17814:	70207265 	.word	0x70207265
   17818:	746e696f 	.word	0x746e696f
   1781c:	6e207265 	.word	0x6e207265
   17820:	6920746f 	.word	0x6920746f
   17824:	6974696e 	.word	0x6974696e
   17828:	7a696c61 	.word	0x7a696c61
   1782c:	00006465 	.word	0x00006465
   17830:	696c6143 	.word	0x696c6143
   17834:	74617262 	.word	0x74617262
   17838:	206e6f69 	.word	0x206e6f69
   1783c:	7265706f 	.word	0x7265706f
   17840:	6f697461 	.word	0x6f697461
   17844:	6974206e 	.word	0x6974206e
   17848:	2064656d 	.word	0x2064656d
   1784c:	0074756f 	.word	0x0074756f
   17850:	65686353 	.word	0x65686353
   17854:	656c7564 	.word	0x656c7564
   17858:	6e495f72 	.word	0x6e495f72
   1785c:	29287469 	.word	0x29287469
   17860:	00000000 	.word	0x00000000
   17864:	65686353 	.word	0x65686353
   17868:	656c7564 	.word	0x656c7564
   1786c:	65475f72 	.word	0x65475f72
   17870:	61745374 	.word	0x61745374
   17874:	51737574 	.word	0x51737574
   17878:	65756575 	.word	0x65756575
   1787c:	00002928 	.word	0x00002928
   17880:	65686353 	.word	0x65686353
   17884:	656c7564 	.word	0x656c7564
   17888:	6c465f72 	.word	0x6c465f72
   1788c:	51687375 	.word	0x51687375
   17890:	65756575 	.word	0x65756575
   17894:	00002928 	.word	0x00002928
   17898:	65686353 	.word	0x65686353
   1789c:	656c7564 	.word	0x656c7564
   178a0:	72575f72 	.word	0x72575f72
   178a4:	51657469 	.word	0x51657469
   178a8:	65756575 	.word	0x65756575
   178ac:	00002928 	.word	0x00002928
   178b0:	65686353 	.word	0x65686353
   178b4:	656c7564 	.word	0x656c7564
   178b8:	65525f72 	.word	0x65525f72
   178bc:	75516461 	.word	0x75516461
   178c0:	28657565 	.word	0x28657565
   178c4:	00000029 	.word	0x00000029
   178c8:	65686353 	.word	0x65686353
   178cc:	656c7564 	.word	0x656c7564
   178d0:	74535f72 	.word	0x74535f72
   178d4:	54747261 	.word	0x54747261
   178d8:	286b7361 	.word	0x286b7361
   178dc:	00000029 	.word	0x00000029
   178e0:	65686353 	.word	0x65686353
   178e4:	656c7564 	.word	0x656c7564
   178e8:	74535f72 	.word	0x74535f72
   178ec:	6154706f 	.word	0x6154706f
   178f0:	29286b73 	.word	0x29286b73
   178f4:	00000000 	.word	0x00000000
   178f8:	65686353 	.word	0x65686353
   178fc:	656c7564 	.word	0x656c7564
   17900:	65505f72 	.word	0x65505f72
   17904:	646f6972 	.word	0x646f6972
   17908:	6b736154 	.word	0x6b736154
   1790c:	00002928 	.word	0x00002928
   17910:	65686353 	.word	0x65686353
   17914:	656c7564 	.word	0x656c7564
   17918:	74535f72 	.word	0x74535f72
   1791c:	54747261 	.word	0x54747261
   17920:	72656d69 	.word	0x72656d69
   17924:	00002928 	.word	0x00002928
   17928:	65686353 	.word	0x65686353
   1792c:	656c7564 	.word	0x656c7564
   17930:	74535f72 	.word	0x74535f72
   17934:	6954706f 	.word	0x6954706f
   17938:	2872656d 	.word	0x2872656d
   1793c:	00000029 	.word	0x00000029
   17940:	65686353 	.word	0x65686353
   17944:	656c7564 	.word	0x656c7564
   17948:	65475f72 	.word	0x65475f72
   1794c:	6d695474 	.word	0x6d695474
   17950:	29287265 	.word	0x29287265
   17954:	00000000 	.word	0x00000000
   17958:	65686353 	.word	0x65686353
   1795c:	656c7564 	.word	0x656c7564
   17960:	65525f72 	.word	0x65525f72
   17964:	64616f6c 	.word	0x64616f6c
   17968:	656d6954 	.word	0x656d6954
   1796c:	00292872 	.word	0x00292872
   17970:	65686353 	.word	0x65686353
   17974:	656c7564 	.word	0x656c7564
   17978:	614d5f72 	.word	0x614d5f72
   1797c:	75466e69 	.word	0x75466e69
   17980:	6974636e 	.word	0x6974636e
   17984:	29286e6f 	.word	0x29286e6f
   17988:	00000000 	.word	0x00000000
   1798c:	75657551 	.word	0x75657551
   17990:	64692065 	.word	0x64692065
   17994:	74756f20 	.word	0x74756f20
   17998:	20666f20 	.word	0x20666f20
   1799c:	676e6172 	.word	0x676e6172
   179a0:	00000065 	.word	0x00000065
   179a4:	61766e49 	.word	0x61766e49
   179a8:	2064696c 	.word	0x2064696c
   179ac:	75657571 	.word	0x75657571
   179b0:	74732065 	.word	0x74732065
   179b4:	73757461 	.word	0x73757461
   179b8:	616c6620 	.word	0x616c6620
   179bc:	00000067 	.word	0x00000067
   179c0:	6b736154 	.word	0x6b736154
   179c4:	20646920 	.word	0x20646920
   179c8:	2074756f 	.word	0x2074756f
   179cc:	7220666f 	.word	0x7220666f
   179d0:	65676e61 	.word	0x65676e61
   179d4:	00000000 	.word	0x00000000
   179d8:	61766e49 	.word	0x61766e49
   179dc:	2064696c 	.word	0x2064696c
   179e0:	6b736174 	.word	0x6b736174
   179e4:	20726f20 	.word	0x20726f20
   179e8:	656d6974 	.word	0x656d6974
   179ec:	65702072 	.word	0x65702072
   179f0:	646f6972 	.word	0x646f6972
   179f4:	74696369 	.word	0x74696369
   179f8:	00000079 	.word	0x00000079
   179fc:	656d6954 	.word	0x656d6954
   17a00:	64692072 	.word	0x64692072
   17a04:	74756f20 	.word	0x74756f20
   17a08:	20666f20 	.word	0x20666f20
   17a0c:	676e6172 	.word	0x676e6172
   17a10:	00000065 	.word	0x00000065
   17a14:	65686353 	.word	0x65686353
   17a18:	656c7564 	.word	0x656c7564
   17a1c:	6e752072 	.word	0x6e752072
   17a20:	74696e69 	.word	0x74696e69
   17a24:	696c6169 	.word	0x696c6169
   17a28:	0064657a 	.word	0x0064657a
   17a2c:	6f497748 	.word	0x6f497748
   17a30:	425f6241 	.word	0x425f6241
   17a34:	6f747475 	.word	0x6f747475
   17a38:	495f736e 	.word	0x495f736e
   17a3c:	2874696e 	.word	0x2874696e
   17a40:	00000029 	.word	0x00000029
   17a44:	6f497748 	.word	0x6f497748
   17a48:	425f6241 	.word	0x425f6241
   17a4c:	6f747475 	.word	0x6f747475
   17a50:	475f736e 	.word	0x475f736e
   17a54:	76457465 	.word	0x76457465
   17a58:	28746e65 	.word	0x28746e65
   17a5c:	00000029 	.word	0x00000029
   17a60:	6f497748 	.word	0x6f497748
   17a64:	425f6241 	.word	0x425f6241
   17a68:	6f747475 	.word	0x6f747475
   17a6c:	4d5f736e 	.word	0x4d5f736e
   17a70:	466e6961 	.word	0x466e6961
   17a74:	74636e75 	.word	0x74636e75
   17a78:	286e6f69 	.word	0x286e6f69
   17a7c:	00000029 	.word	0x00000029
   17a80:	61766e49 	.word	0x61766e49
   17a84:	2064696c 	.word	0x2064696c
   17a88:	74747562 	.word	0x74747562
   17a8c:	69206e6f 	.word	0x69206e6f
   17a90:	00000064 	.word	0x00000064
   17a94:	61766e49 	.word	0x61766e49
   17a98:	2064696c 	.word	0x2064696c
   17a9c:	74747562 	.word	0x74747562
   17aa0:	73206e6f 	.word	0x73206e6f
   17aa4:	65746174 	.word	0x65746174
   17aa8:	00000000 	.word	0x00000000
   17aac:	75646f4d 	.word	0x75646f4d
   17ab0:	7520656c 	.word	0x7520656c
   17ab4:	696e696e 	.word	0x696e696e
   17ab8:	6c616974 	.word	0x6c616974
   17abc:	64657a69 	.word	0x64657a69
   17ac0:	00000000 	.word	0x00000000
   17ac4:	6f497748 	.word	0x6f497748
   17ac8:	4c5f6241 	.word	0x4c5f6241
   17acc:	5f736465 	.word	0x5f736465
   17ad0:	74696e49 	.word	0x74696e49
   17ad4:	00002928 	.word	0x00002928
   17ad8:	6f497748 	.word	0x6f497748
   17adc:	4c5f6241 	.word	0x4c5f6241
   17ae0:	5f736465 	.word	0x5f736465
   17ae4:	6e727554 	.word	0x6e727554
   17ae8:	29286e4f 	.word	0x29286e4f
   17aec:	00000000 	.word	0x00000000
   17af0:	6f497748 	.word	0x6f497748
   17af4:	4c5f6241 	.word	0x4c5f6241
   17af8:	5f736465 	.word	0x5f736465
   17afc:	6e727554 	.word	0x6e727554
   17b00:	2866664f 	.word	0x2866664f
   17b04:	00000029 	.word	0x00000029
   17b08:	6f497748 	.word	0x6f497748
   17b0c:	4c5f6241 	.word	0x4c5f6241
   17b10:	5f736465 	.word	0x5f736465
   17b14:	6e727554 	.word	0x6e727554
   17b18:	67676f54 	.word	0x67676f54
   17b1c:	2928656c 	.word	0x2928656c
   17b20:	00000000 	.word	0x00000000
   17b24:	61766e49 	.word	0x61766e49
   17b28:	2064696c 	.word	0x2064696c
   17b2c:	2064656c 	.word	0x2064656c
   17b30:	00006469 	.word	0x00006469
   17b34:	6f497748 	.word	0x6f497748
   17b38:	505f6241 	.word	0x505f6241
   17b3c:	5f73746f 	.word	0x5f73746f
   17b40:	74696e49 	.word	0x74696e49
   17b44:	00002928 	.word	0x00002928
   17b48:	6f497748 	.word	0x6f497748
   17b4c:	505f6241 	.word	0x505f6241
   17b50:	5f73746f 	.word	0x5f73746f
   17b54:	56746547 	.word	0x56746547
   17b58:	65756c61 	.word	0x65756c61
   17b5c:	00002928 	.word	0x00002928
   17b60:	6f497748 	.word	0x6f497748
   17b64:	505f6241 	.word	0x505f6241
   17b68:	5f73746f 	.word	0x5f73746f
   17b6c:	41746547 	.word	0x41746547
   17b70:	6156746c 	.word	0x6156746c
   17b74:	2865756c 	.word	0x2865756c
   17b78:	00000029 	.word	0x00000029
   17b7c:	61766e49 	.word	0x61766e49
   17b80:	2064696c 	.word	0x2064696c
   17b84:	75706e69 	.word	0x75706e69
   17b88:	6f702074 	.word	0x6f702074
   17b8c:	65746e69 	.word	0x65746e69
   17b90:	00000072 	.word	0x00000072
   17b94:	6f497748 	.word	0x6f497748
   17b98:	425f6241 	.word	0x425f6241
   17b9c:	657a7a75 	.word	0x657a7a75
   17ba0:	6e495f72 	.word	0x6e495f72
   17ba4:	29287469 	.word	0x29287469
   17ba8:	00000000 	.word	0x00000000
   17bac:	6f497748 	.word	0x6f497748
   17bb0:	425f6241 	.word	0x425f6241
   17bb4:	657a7a75 	.word	0x657a7a75
   17bb8:	65425f72 	.word	0x65425f72
   17bbc:	29287065 	.word	0x29287065
   17bc0:	00000000 	.word	0x00000000
   17bc4:	6f497748 	.word	0x6f497748
   17bc8:	425f6241 	.word	0x425f6241
   17bcc:	657a7a75 	.word	0x657a7a75
   17bd0:	74535f72 	.word	0x74535f72
   17bd4:	2928706f 	.word	0x2928706f
   17bd8:	00000000 	.word	0x00000000
   17bdc:	61766e49 	.word	0x61766e49
   17be0:	2064696c 	.word	0x2064696c
   17be4:	7a7a7562 	.word	0x7a7a7562
   17be8:	74207265 	.word	0x74207265
   17bec:	00656e6f 	.word	0x00656e6f
   17bf0:	2075634d 	.word	0x2075634d
   17bf4:	75646f6d 	.word	0x75646f6d
   17bf8:	0000656c 	.word	0x0000656c
   17bfc:	74616c50 	.word	0x74616c50
   17c00:	6d726f66 	.word	0x6d726f66
   17c04:	646f6d20 	.word	0x646f6d20
   17c08:	00656c75 	.word	0x00656c75
   17c0c:	74726f50 	.word	0x74726f50
   17c10:	646f6d20 	.word	0x646f6d20
   17c14:	00656c75 	.word	0x00656c75
   17c18:	206f6944 	.word	0x206f6944
   17c1c:	75646f6d 	.word	0x75646f6d
   17c20:	0000656c 	.word	0x0000656c
   17c24:	206d7750 	.word	0x206d7750
   17c28:	75646f6d 	.word	0x75646f6d
   17c2c:	0000656c 	.word	0x0000656c
   17c30:	20636441 	.word	0x20636441
   17c34:	75646f6d 	.word	0x75646f6d
   17c38:	0000656c 	.word	0x0000656c
   17c3c:	65686353 	.word	0x65686353
   17c40:	656c7564 	.word	0x656c7564
   17c44:	6f6d2072 	.word	0x6f6d2072
   17c48:	656c7564 	.word	0x656c7564
   17c4c:	00000000 	.word	0x00000000
   17c50:	74747542 	.word	0x74747542
   17c54:	20736e6f 	.word	0x20736e6f
   17c58:	61204f49 	.word	0x61204f49
   17c5c:	72747362 	.word	0x72747362
   17c60:	69746361 	.word	0x69746361
   17c64:	6d206e6f 	.word	0x6d206e6f
   17c68:	6c75646f 	.word	0x6c75646f
   17c6c:	00000065 	.word	0x00000065
   17c70:	7364654c 	.word	0x7364654c
   17c74:	204f4920 	.word	0x204f4920
   17c78:	74736261 	.word	0x74736261
   17c7c:	74636172 	.word	0x74636172
   17c80:	206e6f69 	.word	0x206e6f69
   17c84:	75646f6d 	.word	0x75646f6d
   17c88:	0000656c 	.word	0x0000656c
   17c8c:	73746f50 	.word	0x73746f50
   17c90:	204f4920 	.word	0x204f4920
   17c94:	74736261 	.word	0x74736261
   17c98:	74636172 	.word	0x74636172
   17c9c:	206e6f69 	.word	0x206e6f69
   17ca0:	75646f6d 	.word	0x75646f6d
   17ca4:	0000656c 	.word	0x0000656c
   17ca8:	7a7a7542 	.word	0x7a7a7542
   17cac:	49207265 	.word	0x49207265
   17cb0:	6261204f 	.word	0x6261204f
   17cb4:	61727473 	.word	0x61727473
   17cb8:	6f697463 	.word	0x6f697463
   17cbc:	6f6d206e 	.word	0x6f6d206e
   17cc0:	656c7564 	.word	0x656c7564
   17cc4:	00000000 	.word	0x00000000
   17cc8:	6f727245 	.word	0x6f727245
   17ccc:	45203a72 	.word	0x45203a72
   17cd0:	726f7272 	.word	0x726f7272
   17cd4:	206e6920 	.word	0x206e6920
   17cd8:	69207325 	.word	0x69207325
   17cdc:	7566206e 	.word	0x7566206e
   17ce0:	6974636e 	.word	0x6974636e
   17ce4:	25206e6f 	.word	0x25206e6f
   17ce8:	69772073 	.word	0x69772073
   17cec:	74206874 	.word	0x74206874
   17cf0:	69206568 	.word	0x69206568
   17cf4:	6174736e 	.word	0x6174736e
   17cf8:	2065636e 	.word	0x2065636e
   17cfc:	202c6425 	.word	0x202c6425
   17d00:	000a7325 	.word	0x000a7325
   17d04:	6d726554 	.word	0x6d726554
   17d08:	6c616e69 	.word	0x6c616e69
   17d0c:	00000000 	.word	0x00000000
   17d10:	4c554e28 	.word	0x4c554e28
   17d14:	0000294c 	.word	0x0000294c

00017d18 <Clock_Ip_au8DividerCallbackIndex>:
   17d18:	0e0d0c00 06030201 0a070409 000b0805     ................

00017d28 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

00017d38 <Clock_Ip_au8XoscCallbackIndex>:
   17d38:	00000100 00000000 00000000 00000000     ................

00017d48 <Clock_Ip_au8IrcoscCallbackIndex>:
   17d48:	03020100 00000004 00000000 00000000     ................

00017d58 <Clock_Ip_au8GateCallbackIndex>:
   17d58:	06010200 01040301 00000500 00000000     ................

00017d68 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

00017d78 <Clock_Ip_au8PllCallbackIndex>:
   17d78:	00000100 00000000 00000000 00000000     ................

00017d88 <Clock_Ip_au8SelectorCallbackIndex>:
   17d88:	0a090800 03020109 07060504 00000000     ................

00017d98 <Clock_Ip_au8PcfsCallbackIndex>:
	...

00017da8 <Clock_Ip_au8CmuCallbackIndex>:
	...

00017db8 <Clock_Ip_au8ClockFeatures>:
	...
   17dc8:	01000000 00000000 00000000 00000002     ................
   17dd8:	00000000 00000300 00000000 00040000     ................
   17de8:	00000000 05000000 00000000 00000000     ................
   17df8:	00000006 00000000 00000100 00000000     ................
   17e08:	00010000 00000000 04000000 00000000     ................
   17e18:	00000000 00000005 00000001 00000401     ................
   17e28:	00000200 00050100 00030000 04020000     ................
   17e38:	04000000 02000000 00000005 00000005     ................
   17e48:	00000403 00000600 00050300 00070000     ................
   17e58:	05000000 00000000 00000000 00000006     ................
	...
   17e98:	00050000 00000000 06000000 00000100     ................
   17ea8:	00000000 00030007 00000000 00000000     ................
   17eb8:	00000000 00060000 00000000 07000000     ................
   17ec8:	00000100 00000000 00030008 00000000     ................
	...
   17ee0:	00090000 00000000 0a000000 00000100     ................
   17ef0:	00000000 0003000b 00000000 00000000     ................
   17f00:	00000000 000c0000 00000000 0d000000     ................
   17f10:	00000100 00000000 0003000e 00000000     ................
   17f20:	00000800 00000000 00090000 00000000     ................
   17f30:	0a000000 00000000 00000000 0000000b     ................
   17f40:	00000000 00000b01 00000000 000b0200     ................
   17f50:	00000000 0b030000 00000000 00000000     ................
	...
   17f68:	00000400 003b003b 00040000 27002700     ....;.;......'.'
   17f78:	01000000 00000000 00000000 00000007     ................
   17f88:	00007300 00000700 00320000 00090000     .s........2.....
   17f98:	02000000 07000000 00000000 00000021     ............!...
   17fa8:	00000009 00000400 00000900 00030000     ................
   17fb8:	00070000 61000000 07000000 00000000     .......a........
   17fc8:	00000024 00000007 00002500 00000700     $........%......
   17fd8:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
   17fe8:	00000000 00000020 38000004 00003800     .... ......8.8..
   17ff8:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
   18008:	04000000 00260000 00000026 66000004     ......&.&......f
   18018:	00006600 00000400 00370037 00040000     .f......7.7.....
   18028:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
   18038:	2e000004 00002e00 00000200 00404040     ............@@@.
   18048:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
   18058:	0000006b 6c000004 00006c00 00000900     k......l.l......
   18068:	00010000 00090000 00000000 07000000     ................
   18078:	00000000 00000036 00000007 00003100     ....6........1..
   18088:	00000700 00490000 00070000 4a000000     ......I........J
   18098:	07000000 00000000 0000004b 00000007     ........K.......
   180a8:	00004c00 00000700 004d0000 00070000     .L........M.....
   180b8:	3d000000 03000000 00000000 00000000     ...=............

000180c8 <Clock_Ip_au16SelectorEntryHardwareValue>:
   180c8:	01010a03 01010001 04040002 02000603     ................
   180d8:	00010810 02020100 00000000 00000007     ................
   180e8:	00000009 00000000 00000c0e 00000000     ................
	...

00018120 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
   18120:	00020000 00000300 00000601 00000000     ................
	...

00018150 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
   18150:	00000700 00000000 02020000 01010303     ................
   18160:	03020606 00000000 00000000 00000000     ................
	...

00018180 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
   18180:	00000001 00000000 02020000 01010303     ................
   18190:	03020606 00000000 00000000 00000000     ................
	...

000181b0 <Clock_Ip_au8DividerValueHardwareValue>:
   181b0:	00020100 00000003 00000004 00000000     ................
   181c0:	00000005 00000000 00000000 00000000     ................
   181d0:	00000006 00000000 00000000 00000000     ................
	...
   181f0:	00000007                                ....

000181f4 <Clock_Ip_apxScgPeriphAsyncDivs>:
   181f4:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

00018204 <Clock_Ip_aeSourceTypeClockName>:
   18204:	00000000 00000001 00000001 00000001     ................
   18214:	00000001 00000001 00000001 00000001     ................
   18224:	00000002 00000003 00000001 00000001     ................
   18234:	00000001 00000001 00000002 00000002     ................
   18244:	00000003 00000003 00000001 00000001     ................
   18254:	00000004 00000004 00000004 00000004     ................
	...

000182c0 <Clock_Ip_aeHwPllName>:
   182c0:	00000009                                ....

000182c4 <Clock_Ip_aeHwDfsName>:
   182c4:	00000057                                W...

000182c8 <Clock_Ip_axDividerCallbacks>:
   182c8:	00002e71 00002e7b 00002e95 00002eaf     q...{...........
   182d8:	00002ec9 00002ee3 00002efd 00002f17     ............./..
   182e8:	00002f31 00002f4b 00002f65 00002f7f     1/..K/..e/.../..
   182f8:	00002f99 00002fb3 00002fcd              ./.../.../..

00018304 <Clock_Ip_axDividerTriggerCallbacks>:
   18304:	00003341 00003341                       A3..A3..

0001830c <Clock_Ip_axExtOscCallbacks>:
   1830c:	0000334d 0000334d 0000334d 00003357     M3..M3..M3..W3..
   1831c:	0000334d 00003361 0000337b 00003395     M3..a3..{3...3..
   1832c:	00003419 0000342d                       .4..-4..

00018334 <Clock_Ip_axFracDivCallbacks>:
   18334:	000035ed 000035ed 000035f7              .5...5...5..

00018340 <Clock_Ip_axGateCallbacks>:
   18340:	00003611 0000361b 0000371b 00003735     .6...6...7..57..
   18350:	000036cb 000036e5 0000367b 00003695     .6...6..{6...6..
   18360:	0000362b 00003645 0000376b 00003785     +6..E6..k7...7..
   18370:	000037bb 000037d5                       .7...7..

00018378 <Clock_Ip_axIntOscCallbacks>:
   18378:	00003981 00003981 0000398b 00003995     .9...9...9...9..
   18388:	000039af 000039c9 000039dd 000039f7     .9...9...9...9..
   18398:	00003a11 00003a25 00003a3f 00003a59     .:..%:..?:..Y:..
   183a8:	00003b01 00003b1b 00003b35              .;...;..5;..

000183b4 <Clock_Ip_axCmuCallbacks>:
   183b4:	000040d1 000040db 000040e7 000040d1     .@...@...@...@..

000183c4 <Clock_Ip_axPllCallbacks>:
   183c4:	000040f1 000040f1 000040fb 000040f1     .@...@...@...@..
   183d4:	00004107 00004111 0000412b 00004145     .A...A..+A..EA..
   183e4:	000041e9 000041d5                       .A...A..

000183ec <Clock_Ip_axPcfsCallbacks>:
   183ec:	00004345                                EC..

000183f0 <Clock_Ip_axSelectorCallbacks>:
   183f0:	00004351 00004351 0000435b 00004375     QC..QC..[C..uC..
   18400:	00004351 0000438f 000043a9 000043c3     QC...C...C...C..
   18410:	000043dd 000043f7 00004411 0000442b     .C...C...D..+D..
   18420:	00004445 0000445f 00004479 00004493     ED.._D..yD...D..
   18430:	000044ad 000044c7 000044e1 000044fb     .D...D...D...D..
   18440:	00004515 0000452f                       .E../E..

00018448 <ClockSource>:
   18448:	00000000 00000008 00000002 00000005     ................
	...
   18460:	00000009                                ....

00018464 <ResetReasonArray>:
   18464:	00000000 00000001 00000002 00000003     ................
   18474:	00000004 00000005 00000006 00000007     ................
   18484:	00000008 00000009 0000000a 0000000b     ................
   18494:	0000000c 0000000d 0000000e              ............

000184a0 <Port_au32PortCiPortBaseAddr>:
   184a0:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
   184b0:	4004d000                                ...@

000184b4 <Port_au32PortCiGpioBaseAddr>:
   184b4:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
   184c4:	400ff100                                ...@

000184c8 <Adc_Ip_apxBase>:
   184c8:	4003b000 40027000                       ...@.p.@

000184d0 <Lpspi_Ip_apxBases>:
   184d0:	4002c000 4002d000 4002e000              ...@...@...@

000184dc <Can_Ipw_apxStatus>:
   184dc:	1fff8e18 1fff9038                       ....8...

000184e4 <Flexcan_Ip_apxBase>:
   184e4:	40024000 40025000 4002b000              .@.@.P.@...@

000184f0 <payload_code.3>:
   184f0:	03020100 07060504 09090908 0a0a0a09     ................
   18500:	0b0b0b0a 0c0c0c0b 0d0d0d0c 0d0d0d0d     ................
   18510:	0e0e0e0d 0e0e0e0e 0e0e0e0e 0e0e0e0e     ................
   18520:	0f0f0f0e 0f0f0f0f 0f0f0f0f 0f0f0f0f     ................
   18530:	0000000f                                ....

00018534 <flexcanBase.2>:
   18534:	40024000 40025000 4002b000              .@.@.P.@...@

00018540 <maxMbNum.1>:
   18540:	00000020 00000010 00000010               ...........

0001854c <flexcanBase.0>:
   1854c:	40024000                                .@.@

00018550 <McuApis>:
   18550:	00000000 00017330 00000002 0001733c     ....0s......<s..
   18560:	00000008 0001734c 00000009 0001735c     ....Ls......\s..

00018570 <McuErrors>:
   18570:	00000011 00017374 0000000f 0001738c     ....ts.......s..
   18580:	00000013 000173a4 0000000b 000173c0     .....s.......s..
   18590:	0000000c 000173c0 00000010 000173c0     .....s.......s..

000185a0 <PlatformApis>:
   185a0:	00000020 000173d8 00000021 000173e8      ....s..!....s..
   185b0:	00000022 000173fc 00000023 00017418     "....s..#....t..
   185c0:	00000024 00017434                       $...4t..

000185c8 <PlatformErrors>:
   185c8:	00000001 00017454 00000004 00017464     ....Tt......dt..
   185d8:	00000002 00017488                       .....t..

000185e0 <PortApis>:
   185e0:	00000000 000174a0 00000001 000174ac     .....t.......t..
   185f0:	00000004 000174c4 00000002 000174d8     .....t.......t..
   18600:	00000003 000174f4                       .....t..

00018608 <PortErrors>:
   18608:	0000000a 0001750c 0000000e 00017520     .....u...... u..
   18618:	0000000c 00017374 000000f0 00017374     ....ts......ts..
   18628:	0000000d 00017540 0000000f 0001738c     ....@u.......s..
   18638:	00000010 000173c0                       .....s..

00018640 <DioApis>:
   18640:	00000001 00017558 00000000 0001756c     ....Xu......lu..
   18650:	00000011 00017580 00000005 00017594     .....u.......u..
   18660:	00000004 000175ac 00000003 000175c4     .....u.......u..
   18670:	00000002 000175d4 00000012 000175e4     .....u.......u..

00018680 <DioErrors>:
   18680:	00000021 000175fc 00000020 000173c0     !....u.. ....s..
   18690:	0000000a 00017618 00000014 00017630     .....v......0v..
   186a0:	0000001f 00017640 000000f0 0001765c     ....@v......\v..

000186b0 <PwmApis>:
   186b0:	00000000 00017678 00000001 00017684     ....xv.......v..
   186c0:	00000002 00017694 00000003 000176a8     .....v.......v..
   186d0:	00000004 000176c0 00000008 000176d8     .....v.......v..

000186e0 <PwmErrors>:
   186e0:	00000010 000176f0 00000011 0001738c     .....v.......s..
   186f0:	00000014 000173a4 00000012 00017708     .....s.......w..
   18700:	00000013 0001771c 00000015 000173c0     .....w.......s..

00018710 <AdcApis>:
   18710:	00000000 00017740 00000001 0001774c     ....@w......Lw..
   18720:	00000002 0001775c 00000003 00017778     ....\w......xw..
   18730:	00000004 00017794 00000009 000177a4     .....w.......w..
   18740:	00000029 000177bc 0000000c 000177cc     )....w.......w..
   18750:	0000000a 000177e4                       .....w..

00018758 <AdcErrors>:
   18758:	0000000a 0001738c 0000000d 000173a4     .....s.......s..
   18768:	00000014 00017454 00000015 000177fc     ....Tt.......w..
   18778:	00000019 00017810 0000002b 00017830     .....x..+...0x..

00018788 <SchedulerApis>:
   18788:	00000000 00017850 00000002 00017864     ....Px......dx..
   18798:	00000003 00017880 00000004 00017898     .....x.......x..
   187a8:	00000005 000178b0 00000006 000178c8     .....x.......x..
   187b8:	00000007 000178e0 00000008 000178f8     .....x.......x..
   187c8:	00000009 00017910 0000000a 00017928     .....y......(y..
   187d8:	0000000b 00017940 0000000c 00017958     ....@y......Xy..
   187e8:	0000000d 00017970                       ....py..

000187f0 <SchedulerErrors>:
   187f0:	00000000 000176f0 00000001 0001798c     .....v.......y..
   18800:	00000002 000179a4 00000003 000179c0     .....y.......y..
   18810:	00000004 000179d8 00000005 000179fc     .....y.......y..
   18820:	00000006 00017a14                       .....z..

00018828 <HwIoAb_ButtonsApis>:
   18828:	00000000 00017a2c 00000001 00017a44     ....,z......Dz..
   18838:	00000002 00017a60                       ....`z..

00018840 <HwIoAb_ButtonsErrors>:
   18840:	00000000 000176f0 00000001 00017a80     .....v.......z..
   18850:	00000002 00017a94 00000003 00017aac     .....z.......z..

00018860 <HwIoAb_LedsApis>:
   18860:	00000000 00017ac4 00000001 00017ad8     .....z.......z..
   18870:	00000002 00017af0 00000003 00017b08     .....z.......{..

00018880 <HwIoAb_LedsErrors>:
   18880:	00000000 000176f0 00000001 00017b24     .....v......${..
   18890:	00000002 00017aac                       .....z..

00018898 <HwIoAb_PotsApis>:
   18898:	00000000 00017b34 00000001 00017b48     ....4{......H{..
   188a8:	00000002 00017b60                       ....`{..

000188b0 <HwIoAb_PotsErrors>:
   188b0:	00000000 00017b7c 00000001 00017aac     ....|{.......z..

000188c0 <HwIoAb_BuzzerApis>:
   188c0:	00000000 00017b94 00000001 00017bac     .....{.......{..
   188d0:	00000002 00017bc4                       .....{..

000188d8 <HwIoAb_BuzzerErrors>:
   188d8:	00000000 00017bdc                       .....{..

000188e0 <ModuleStrings>:
   188e0:	00000065 00017bf0 00000004 00018550     e....{......P...
   188f0:	00000006 00018570 000000ff 00017bfc     ....p........{..
   18900:	00000005 000185a0 00000003 000185c8     ................
   18910:	0000007c 00017c0c 00000005 000185e0     |....|..........
   18920:	00000007 00018608 00000078 00017c18     ........x....|..
   18930:	00000008 00018640 00000006 00018680     ....@...........
   18940:	00000079 00017c24 00000006 000186b0     y...$|..........
   18950:	00000006 000186e0 0000007b 00017c30     ........{...0|..
   18960:	00000009 00018710 00000006 00018758     ............X...
   18970:	0000012c 00017c3c 0000000d 00018788     ,...<|..........
   18980:	00000007 000187f0 0000012d 00017c50     ........-...P|..
   18990:	00000003 00018828 00000004 00018840     ....(.......@...
   189a0:	0000012e 00017c70 00000004 00018860     ....p|......`...
   189b0:	00000003 00018880 0000012f 00017c8c     ......../....|..
   189c0:	00000003 00018898 00000002 000188b0     ................
   189d0:	00000130 00017ca8 00000003 000188c0     0....|..........
   189e0:	00000001 000188d8                       ........

000189e8 <Can_43_FLEXCAN_Driver_P2Func>:
   189e8:	0000a5ed 0000a269 0000a40d 0000a3ad     ....i...........
   189f8:	0000a485 0000a511 0000a545 0000a599     ........E.......

00018a08 <Can_43_FLEXCAN_Driver_Config>:
   18a08:	00030000 000189e8                       ........

00018a10 <CanIf_CtrlPCConfig>:
   18a10:	00000000 00018a08 00000101 00018a08     ................

00018a20 <CanIf_PCConfig>:
   18a20:	00000002 00018a10                       ........

00018a28 <CanIf_TxPdu>:
   18a28:	00000000 00000123 00000002 00000001     ....#...........
   18a38:	000009dd 00000001 00000124 00000002     ........$.......
   18a48:	00000001 000009dd 00000002 00000100     ................
   18a58:	00000002 00010002 00000989              ............

00018a64 <CanIf_RxPdu>:
   18a64:	00010000 00010001 000009c1              ............

00018a70 <CanIf_Can_43_FLEXCAN_HohToRxPduMapping>:
   18a70:	00018a64 00000000 00000000              d...........

00018a7c <CanIf_Can_43_FLEXCAN_DrvConfig>:
   18a7c:	00018a70                                p...

00018a80 <CanIf_CanDrvConfig>:
   18a80:	00018a7c                                |...

00018a84 <CanIf_Config>:
   18a84:	00000301 00018a80 00018a64 00018a28     ........d...(...

00018a94 <Can_43_FLEXCANIpwHwChannelConfig0>:
   18a94:	00018fdc                                ....

00018a98 <Can_43_FLEXCANIpwHwChannelConfig1>:
   18a98:	0001902c                                ,...

00018a9c <Can_au32HwBufferAddr_Ctrl0>:
   18a9c:	4002b080 4002b090                       ...@...@

00018aa4 <Can_au32HwBufferAddr_Ctrl1>:
   18aa4:	40024080 40024090                       .@.@.@.@

00018aac <Can_aHwFilter_Object0>:
   18aac:	00000200 dffc0000                       ........

00018ab4 <Can_aCtrlOffsetToCtrlIDMap>:
   18ab4:	0000ff01                                ....

00018ab8 <Can_aHwObjIDToCtrlIDMap>:
   18ab8:	00010001                                ....

00018abc <Can_aHwObjectConfig>:
	...
   18ac8:	ff010000 00010008 00018aac 00000000     ................
   18ad8:	00000000 00018aa4 00000001 00000001     ................
   18ae8:	00000000 ff020000 00000008 00000000     ................
   18af8:	00000003 00000000 00018a9c 00000002     ................
   18b08:	00000001 00000000 ff010000 00000008     ................
   18b18:	00000000 00000003 00000001 00018aa8     ................

00018b28 <Can_aBaudrateConfig_Ctrl0>:
   18b28:	06030000 001d0003 00000000 00000000     ................
	...

00018b40 <Can_apHwObject_Ctrl0>:
   18b40:	00018ae0                                ....

00018b44 <Can_aBaudrateConfig_Ctrl1>:
   18b44:	06030000 001d0003 00000000 00000000     ................
	...

00018b5c <Can_apHwObject_Ctrl1>:
   18b5c:	00018abc 00018b04                       ........

00018b64 <Can_aControllerConfig>:
   18b64:	00020000 4002b000 00000001 ffffffff     .......@........
	...
   18b80:	00010000 00018b28 00018a94 00000001     ....(...........
   18b90:	00018b40 00000101 40024000 00000001     @........@.@....
   18ba0:	ffffffff 00000000 00000000 00000000     ................
   18bb0:	00010000 00018b44 00018a98 00000002     ....D...........
   18bc0:	00018b5c                                \...

00018bc4 <Can_apController>:
   18bc4:	00018b64 00018b94                       d.......

00018bcc <Can_43_FLEXCAN_Config>:
   18bcc:	00000000 00000001 00018ab4 00018ab8     ................
   18bdc:	00018abc 00018bc4                       ........

00018be4 <Mcu_aClockConfigPB>:
	...
   18bec:	14000002 0400000e 01000020 00000002     ........ .......
   18bfc:	01000001 00000001 00000005 00000001     ................
   18c0c:	00000000 00000057 00000000 00000000     ....W...........
	...
   18c24:	00000057 00000000 00000057 00000000     W.......W.......
	...
   18c4c:	00000019 00000005 0000001a 00000002     ................
   18c5c:	0000001b 00000005 0000002a 00000002     ........*.......
   18c6c:	0000003f 0000000a 00000040 0000000a     ?.......@.......
   18c7c:	00000041 00000000 00000042 00000000     A.......B.......
   18c8c:	00000031 0000000b 00000045 00000000     1.......E.......
   18c9c:	00000046 0000000b 00000047 00000000     F.......G.......
   18cac:	00000044 00000000 00000030 0000000b     D.......0.......
   18cbc:	0000003d 00000000 00000043 00000000     =.......C.......
   18ccc:	00000049 00000000 0000004a 00000000     I.......J.......
   18cdc:	0000004b 00000000 00000048 00000000     K.......H.......
   18cec:	00000057 00000057 00000057 00000057     W...W...W...W...
   18cfc:	00000057 00000057 00000057 00000057     W...W...W...W...
   18d0c:	00000057 00000057 00000057 00000057     W...W...W...W...
   18d1c:	00000057 00000057 00000057 00000057     W...W...W...W...
   18d2c:	0000000a 00000001 00000000 0000000b     ................
   18d3c:	00000001 00000000 0000000c 00000001     ................
   18d4c:	00000000 0000000d 00000002 00000000     ................
   18d5c:	0000001d 00000001 00000000 0000001e     ................
   18d6c:	00000002 00000000 0000001f 00000001     ................
   18d7c:	00000000 00000021 00000001 00000000     ....!...........
   18d8c:	00000022 00000002 00000000 00000023     "...........#...
   18d9c:	00000001 00000000 00000025 00000002     ........%.......
   18dac:	00000000 00000026 00000004 00000000     ....&...........
   18dbc:	00000027 00000002 00000000 00000048     '...........H...
   18dcc:	00000001 00000001 00000057 00000000     ........W.......
   18ddc:	00000000 00000057 00000000 00000000     ....W...........
   18dec:	00000057 00000000 00000000 00000057     W...........W...
	...
   18e04:	00000057 00000000 00000000 00000057     W...........W...
	...
   18e1c:	00000057 00000000 00000057 00000057     W.......W...W...
	...
   18e38:	00000014 00007d00 00000015 00007d00     .....}.......}..
   18e48:	00000016 00007d00 00000017 00008000     .....}..........
   18e58:	00000030 00000001 00000031 00000001     0.......1.......
   18e68:	00000033 00000000 00000034 00000000     3.......4.......
   18e78:	00000036 00000000 00000039 00000000     6.......9.......
   18e88:	0000003a 00000001 0000003b 00000000     :.......;.......
   18e98:	0000003c 00000001 0000003d 00000000     <.......=.......
   18ea8:	0000003e 00000000 0000003f 00000000     >.......?.......
   18eb8:	00000040 00000001 00000041 00000000     @.......A.......
   18ec8:	00000042 00000000 00000043 00000000     B.......C.......
   18ed8:	00000044 00000000 00000045 00000000     D.......E.......
   18ee8:	00000046 00000001 00000047 00000000     F.......G.......
   18ef8:	00000048 00000000 00000049 00000000     H.......I.......
   18f08:	0000004a 00000000 0000004b 00000000     J.......K.......
   18f18:	0000004e 00000001 0000004f 00000001     N.......O.......
   18f28:	00000050 00000001 00000051 00000001     P.......Q.......
   18f38:	00000052 00000001 00000053 00000001     R.......S.......
   18f48:	00000054 00000001 00000055 00000000     T.......U.......
   18f58:	00000057 00000000 00000057 00000000     W.......W.......
   18f68:	00000057 00000000 00000057 00000000     W.......W.......
   18f78:	00000057 00000000 00000057 00000000     W.......W.......
   18f88:	00000057 00000000 00000057 00000000     W.......W.......
   18f98:	00000057 00000000 00000057 00000000     W.......W.......
   18fa8:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00018fdc <Flexcan_aCtrlConfigPB>:
   18fdc:	00000002 00000000 00000000 00000000     ................
   18fec:	00000040 00000000 00000100 00000003     @...............
   18ffc:	00000006 00000003 0000001d 00000000     ................
   1900c:	00000004 00000006 00000003 0000001d     ................
	...
   19024:	0000b7ed 0000b899 00000002 00000000     ................
	...
   1903c:	00000040 00000000 00000100 00000003     @...............
   1904c:	00000006 00000003 0000001d 00000000     ................
   1905c:	00000004 00000006 00000003 0000001d     ................
	...
   19074:	0000b7ed 0000b899                       ........

0001907c <aIrqConfiguration>:
   1907c:	00000027 00000000 00008301 00000028     '...........(...
   1908c:	00000000 00008311 0000005c 00000f01     ........\.......
   1909c:	0000fd19 0000005d 00000f01 0000fd29     ....].......)...
   190ac:	0000005f 00000f01 0000fd39 0000004e     _.......9...N...
   190bc:	00000f01 0000fc89 0000004f 00000f01     ........O.......
   190cc:	0000fc99 00000051 00000f01 0000fca9     ....Q...........

000190dc <intCtrlConfig>:
   190dc:	00000008 0001907c                       ....|...

000190e4 <Lpspi_Ip_DeviceAttributes_Conf0Spi1Cs3>:
   190e4:	00000001 07070606 43200000 1fff8b28     .......... C(...

000190f4 <Lpspi_Ip_PhyUnitConfig_SPI1>:
   190f4:	00000001 00000000 00000001 00000000     ................
   19104:	00000000                                ....

00019108 <Mcu_Config>:
   19108:	0000005a 00000000 00000001 00000001     Z...............
   19118:	000197a4 00018be4 000197b0              ............

00019124 <OsIf_xPredefinedConfig>:
   19124:	00000000 02dc6c00                       .....l..

0001912c <OsIf_apxPredefinedConfig>:
   1912c:	00019124                                $...

00019130 <Platform_uConfiguration>:
   19130:	00019138                                8...

00019134 <Platform_Config>:
   19134:	00019130                                0...

00019138 <ipwConfig>:
   19138:	000190dc 00000000                       ........

00019140 <Port_au16PinDescription>:
   19140:	0003ffff 0003ffff 0003ffff 0003ffff     ................
   19150:	0001ffff 0003ffff 0003ffff 0003ffff     ................
   19160:	0003ffff 0001ffff 0003ffcf 0003ffff     ................
   19170:	0003ffff 0003fcff 0001dfef 0003f36f     ............o...
   19180:	0003fe3f 0003f3ff 00026e3f 0001bebf     ?.......?n......
   19190:	0002cf9f 0000302f 000030cc 000183ef     ..../0...0......
   191a0:	0001ec7c 00000b1f 00000023 00000010     |.......#.......
   191b0:	0001010c 00000033 000072cf 0000003c     ....3....r..<...
   191c0:	0000cff3 00001b2f 00018c7f 00000433     ..../.......3...
   191d0:	00000000 00000030 0000600b 00018c38     ....0....`..8...

000191e0 <g_pin_mux_InitConfigArr>:
   191e0:	4004b000 400ff080 00000008 00000002     ...@...@........
   191f0:	00000001 00000002 00000000 00000000     ................
	...
   19208:	4004b000 400ff080 00000009 00000002     ...@...@........
   19218:	00000001 00000002 00000000 00000000     ................
	...
   19230:	4004b000 400ff080 0000000a 00000002     ...@...@........
   19240:	00000001 00000002 00000000 00000000     ................
	...
   19258:	4004b000 400ff080 0000000b 00000002     ...@...@........
   19268:	00000001 00000002 00000000 00000000     ................
	...
   19280:	4004b000 400ff080 0000000d 00000002     ...@...@........
   19290:	00000001 00000002 00000000 00000000     ................
	...
   192a8:	4004b000 400ff080 0000000e 00000002     ...@...@........
   192b8:	00000001 00000002 00000000 00000000     ................
	...
   192d0:	4004b000 00000000 00000010 00000002     ...@............
   192e0:	00000003 00000001 00000000 00000000     ................
	...
   192f8:	4004b000 00000000 00000011 00000002     ...@............
   19308:	00000003 00000002 00000000 00000000     ................
	...
   19320:	4004d000 400ff100 0000000c 00000002     ...@...@........
   19330:	00000001 00000001 00000000 00000000     ................
	...
   19348:	4004d000 00000000 00000004 00000002     ...@............
   19358:	00000005 00000001 00000000 00000000     ................
	...
   19370:	4004d000 00000000 00000005 00000002     ...@............
   19380:	00000005 00000002 00000000 00000000     ................
	...
   19398:	4004c000 400ff0c0 00000011 00000002     ...@...@........
   193a8:	00000001 00000001 00000000 00000000     ................
	...
   193c0:	40049000 400ff000 0000000c 00000002     ...@...@........
   193d0:	00000001 00000001 00000000 00000000     ................
	...
   193e8:	40049000 00000000 0000000d 00000002     ...@............
   193f8:	00000002 00000002 00000000 00000000     ................
	...
   19410:	4004a000 00000000 00000001 00000002     ...@............
   19420:	00000000 00000001 00000000 00000000     ................
	...
   19438:	4004a000 00000000 0000000d 00000002     ...@............
   19448:	00000000 00000001 00000000 00000000     ................
	...
   19460:	4004a000 00000000 0000000e 00000002     ...@............
   19470:	00000003 00000002 00000000 00000000     ................
	...
   19488:	4004a000 00000000 0000000f 00000002     ...@............
   19498:	00000003 00000001 00000000 00000000     ................
	...
   194b0:	4004a000 00000000 00000010 00000002     ...@............
   194c0:	00000003 00000002 00000000 00000000     ................
	...
   194d8:	4004a000 00000000 00000011 00000002     ...@............
   194e8:	00000003 00000002 00000000 00000000     ................
	...

00019500 <au8Port_PartitionList>:
   19500:	00000001                                ....

00019504 <au32Port_PinToPartitionMap>:
   19504:	00000001 00000001 00000001 00000001     ................
   19514:	00000001 00000001 00000001 00000001     ................
   19524:	00000001 00000001 00000001 00000001     ................
   19534:	00000001 00000001 00000001 00000001     ................
   19544:	00000001 00000001 00000001 00000001     ................

00019554 <Port_au16NoUnUsedPadsArrayDefault>:
   19554:	00010000 00030002 00070006 00090008     ................
   19564:	000e000b 0010000f 00200011 00230022     .......... .".#.
   19574:	00250024 00270026 00290028 002b002a     $.%.&.'.(.).*.+.
   19584:	0040002c 00420041 00460043 004c0047     ,.@.A.B.C.F.G.L.
   19594:	0060004f 00620061 00640063 00660065     O.`.a.b.c.d.e.f.
   195a4:	00680067 006a0069 006c006b 006e006d     g.h.i.j.k.l.m.n.
   195b4:	0070006f 00810080 00830082 00870086     o.p.............
   195c4:	00890088 008b008a 008e008d 0090008f     ................

000195d4 <Port_UnUsedPin>:
   195d4:	00000000 00000001 00000000              ............

000195e0 <Port_aPinConfigDefault>:
   195e0:	00000048 00000100 00000000 00000002     H...............
   195f0:	00010001 00000049 00000100 00000000     ....I...........
   19600:	00000002 00010101 0000004a 00000100     ........J.......
   19610:	00000000 00000002 00010101 0000008c     ................
   19620:	00000100 00000000 00000001 00010101     ................
   19630:	0000004b 00000100 00000000 00000002     K...............
   19640:	00010101 0000004d 00000100 00000000     ....M...........
   19650:	00000002 00010101 0000004e 00000100     ........N.......
   19660:	00000000 00000002 00010101 00000071     ............q...
   19670:	00000100 00000000 00000001 00010101     ................
   19680:	0000000c 00000100 00000000 00000001     ................
   19690:	00010101 00000021 00000000 00000002     ....!...........
   196a0:	00000000 00010000 0000002d 00000000     ........-.......
   196b0:	00000002 00000000 00010000 0000000d     ................
   196c0:	00000200 00000000 00000002 00010000     ................
   196d0:	00000050 00000300 00000000 00000001     P...............
   196e0:	00010000 00000051 00000300 00000000     ....Q...........
   196f0:	00000002 00010000 0000002e 00000300     ................
   19700:	00000000 00000002 00010000 0000002f     ............/...
   19710:	00000300 00000000 00000001 00010000     ................
   19720:	00000030 00000300 00000000 00000002     0...............
   19730:	00010000 00000031 00000300 00000000     ....1...........
   19740:	00000002 00010000 00000084 00000500     ................
   19750:	00000000 00000001 00010000 00000085     ................
   19760:	00000500 00000000 00000002 00010000     ................

00019770 <Port_Config>:
   19770:	00400014 00019554 000195d4 000195e0     ..@.T...........
	...
   19788:	00019504 00019500 000191e0              ............

00019794 <Power_Ip_RCM_ConfigPB>:
	...

0001979c <Power_Ip_PMC_ConfigPB>:
   1979c:	00000000                                ....

000197a0 <Power_Ip_SMC_ConfigPB>:
   197a0:	00000000                                ....

000197a4 <Power_Ip_aModeConfigPB>:
	...

000197b0 <Power_Ip_HwIPsConfigPB>:
   197b0:	00019794 0001979c 000197a0              ............

000197bc <Spi_ExternalDeviceConfig_Conf0Spi1Cs3>:
   197bc:	00000000 00000001 000190e4 00000000     ................

000197cc <Spi_aExternalDeviceConfigList>:
   197cc:	000197bc                                ....

000197d0 <Spi_HwUnitConfig_SPI1>:
   197d0:	00000000 00000001 00000000 000190f4     ................
   197e0:	00000001                                ....

000197e4 <Spi_aHwUnitConfigList>:
   197e4:	000197d0                                ....

000197e8 <Spi_ChannelConfig_Spi1Cs3_Control>:
   197e8:	00000001 00000008 00000001 00000004     ................
   197f8:	1fff98f8 00000000 1fff8df8              ............

00019804 <Spi_ChannelConfig_Spi1Cs3_Data>:
   19804:	00000001 00000008 00000001 00000004     ................
   19814:	1fff9904 00000000 1fff8dfc              ............

00019820 <Spi_aChannelConfigList>:
   19820:	000197e8 00019804                       ........

00019828 <Spi_Spi1Cs3_W_R_Job_ChannelAssignment>:
   19828:	00000100                                ....

0001982c <Spi_JobConfig_Spi1Cs3_W_R_Job>:
   1982c:	00000002 00019828 00000000 00000000     ....(...........
	...
   19844:	1fff8df4 00000000 000197cc              ............

00019850 <Spi_aJobConfigList>:
   19850:	0001982c                                ,...

00019854 <Spi_Spi1Cs3_Sequence_W_R_JobAssignment>:
   19854:	00000000                                ....

00019858 <Spi_SequenceConfig_Spi1Cs3_Sequence_W_R>:
   19858:	00000001 00000000 00019854 00000000     ........T.......
   19868:	00000000                                ....

0001986c <Spi_aSequenceConfigList>:
   1986c:	00019858                                X...

00019870 <Spi_Config>:
   19870:	00010001 00000000 00000000 00019820     ............ ...
   19880:	00019850 0001986c 000197cc 000197e4     P...l...........

00019890 <_aInitStr.0>:
   19890:	00000000 54540000 45522052 53454747     ......TTR REGGES
   198a0:	00000000                                ....

000198a4 <_aV2C.0>:
   198a4:	33323130 37363534 42413938 46454443     0123456789ABCDEF

000198b4 <__INIT_TABLE>:
   198b4:	00000002 	.word	0x00000002
   198b8:	1fff8b10 	.word	0x1fff8b10
   198bc:	000198dc 	.word	0x000198dc
   198c0:	000198fc 	.word	0x000198fc
   198c4:	1fff8800 	.word	0x1fff8800
   198c8:	00000000 	.word	0x00000000
   198cc:	00000310 	.word	0x00000310

000198d0 <__ZERO_TABLE>:
   198d0:	00000001 	.word	0x00000001
   198d4:	1fff8b30 	.word	0x1fff8b30
   198d8:	1fff9dd0 	.word	0x1fff9dd0
