
Marking local functions:


Marking externally visible functions: CanIf_GetControllerTxErrorCounter/13 CanIf_GetControllerRxErrorCounter/12 CanIf_GetControllerMode/11 CanIf_GetControllerErrorState/10 CanIf_DisableControllerInterrupts/9 CanIf_EnableControllerInterrupts/8 CanIf_SetControllerMode/7 CanIf_ControllerBusOff/6 CanIf_ControllerModeIndication/5 CanIf_RxIndication/4 CanIf_TxConfirmation/3 CanIf_Transmit/2 CanIf_Init/1


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

CanIf_Can0_BusOff_Count/17 (CanIf_Can0_BusOff_Count) @068eecf0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: CanIf_ControllerBusOff/6 (read) CanIf_ControllerBusOff/6 (write) 
  Availability: not_available
  Varpool flags:
CanIf_Can0_bTxFlag/16 (CanIf_Can0_bTxFlag) @068eeca8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: CanIf_ControllerBusOff/6 (write) 
  Availability: not_available
  Varpool flags:
CanIf_Can2_BusOff_Count/15 (CanIf_Can2_BusOff_Count) @068eebd0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: CanIf_ControllerBusOff/6 (read) CanIf_ControllerBusOff/6 (write) 
  Availability: not_available
  Varpool flags:
CanIf_PCConfig/14 (CanIf_PCConfig) @068c5480
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: CanIf_Transmit/2 (read) CanIf_RxIndication/4 (read) CanIf_RxIndication/4 (read) CanIf_RxIndication/4 (read) CanIf_SetControllerMode/7 (read) CanIf_SetControllerMode/7 (read) CanIf_EnableControllerInterrupts/8 (read) CanIf_EnableControllerInterrupts/8 (read) CanIf_DisableControllerInterrupts/9 (read) CanIf_DisableControllerInterrupts/9 (read) CanIf_GetControllerErrorState/10 (read) CanIf_GetControllerErrorState/10 (read) CanIf_GetControllerMode/11 (read) CanIf_GetControllerMode/11 (read) CanIf_GetControllerRxErrorCounter/12 (read) CanIf_GetControllerRxErrorCounter/12 (read) CanIf_GetControllerTxErrorCounter/13 (read) CanIf_GetControllerTxErrorCounter/13 (read) 
  Availability: not_available
  Varpool flags: read-only
CanIf_GetControllerTxErrorCounter/13 (CanIf_GetControllerTxErrorCounter) @068e3d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: CanIf_ConfigPtr/0 (read) CanIf_PCConfig/14 (read) CanIf_PCConfig/14 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
CanIf_GetControllerRxErrorCounter/12 (CanIf_GetControllerRxErrorCounter) @068e3a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: CanIf_ConfigPtr/0 (read) CanIf_PCConfig/14 (read) CanIf_PCConfig/14 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
CanIf_GetControllerMode/11 (CanIf_GetControllerMode) @068e37e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: CanIf_ConfigPtr/0 (read) CanIf_PCConfig/14 (read) CanIf_PCConfig/14 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
CanIf_GetControllerErrorState/10 (CanIf_GetControllerErrorState) @068e3540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: CanIf_ConfigPtr/0 (read) CanIf_PCConfig/14 (read) CanIf_PCConfig/14 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
CanIf_DisableControllerInterrupts/9 (CanIf_DisableControllerInterrupts) @068e32a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: CanIf_ConfigPtr/0 (read) CanIf_PCConfig/14 (read) CanIf_PCConfig/14 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
CanIf_EnableControllerInterrupts/8 (CanIf_EnableControllerInterrupts) @068e3000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: CanIf_ConfigPtr/0 (read) CanIf_PCConfig/14 (read) CanIf_PCConfig/14 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
CanIf_SetControllerMode/7 (CanIf_SetControllerMode) @068c6b60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: CanIf_ConfigPtr/0 (read) CanIf_PCConfig/14 (read) CanIf_PCConfig/14 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: CanIf_ControllerBusOff/6 CanIf_ControllerBusOff/6 
  Calls: 
   Indirect call Num speculative call targets: 0
CanIf_ControllerBusOff/6 (CanIf_ControllerBusOff) @068c6620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: CanIf_Can2_BusOff_Count/15 (read) CanIf_Can2_BusOff_Count/15 (write) CanIf_Can0_bTxFlag/16 (write) CanIf_Can0_BusOff_Count/17 (read) CanIf_Can0_BusOff_Count/17 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: CanIf_SetControllerMode/7 CanIf_SetControllerMode/7 
CanIf_ControllerModeIndication/5 (CanIf_ControllerModeIndication) @068c6000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
CanIf_RxIndication/4 (CanIf_RxIndication) @068c6d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: CanIf_ConfigPtr/0 (read) CanIf_PCConfig/14 (read) CanIf_PCConfig/14 (read) CanIf_PCConfig/14 (read) CanIf_ConfigPtr/0 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
CanIf_TxConfirmation/3 (CanIf_TxConfirmation) @068c6a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: CanIf_ConfigPtr/0 (read) CanIf_ConfigPtr/0 (read) CanIf_ConfigPtr/0 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
CanIf_Transmit/2 (CanIf_Transmit) @068c67e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: CanIf_ConfigPtr/0 (read) CanIf_ConfigPtr/0 (read) CanIf_ConfigPtr/0 (read) CanIf_PCConfig/14 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
CanIf_Init/1 (CanIf_Init) @068c6540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: CanIf_ConfigPtr/0 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
CanIf_ConfigPtr/0 (CanIf_ConfigPtr) @068c5240
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: CanIf_Init/1 (write) CanIf_Transmit/2 (read) CanIf_Transmit/2 (read) CanIf_Transmit/2 (read) CanIf_TxConfirmation/3 (read) CanIf_TxConfirmation/3 (read) CanIf_TxConfirmation/3 (read) CanIf_RxIndication/4 (read) CanIf_RxIndication/4 (read) CanIf_SetControllerMode/7 (read) CanIf_EnableControllerInterrupts/8 (read) CanIf_DisableControllerInterrupts/9 (read) CanIf_GetControllerErrorState/10 (read) CanIf_GetControllerMode/11 (read) CanIf_GetControllerRxErrorCounter/12 (read) CanIf_GetControllerTxErrorCounter/13 (read) 
  Availability: available
  Varpool flags:
CanIf_GetControllerTxErrorCounter (uint8 ControllerId, uint8 * TxErrorCounterPtr)
{
  uint8 CanController_ID;
  const struct CanIf_CtrlPCConfigType * CanIfControllerConf;
  Std_ReturnType RetVal;
  Std_ReturnType D.5660;

  <bb 2> :
  RetVal = 1;
  CanIfControllerConf = 0B;
  CanController_ID = 0;
  CanIf_ConfigPtr.18_1 = CanIf_ConfigPtr;
  if (CanIf_ConfigPtr.18_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _2 = CanIf_PCConfig.NumOfCtrl;
  if (ControllerId < _2)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = CanIf_PCConfig.CanIfCtrlConfigPtr;
  _4 = (unsigned int) ControllerId;
  _5 = _4 * 8;
  CanIfControllerConf = _3 + _5;
  CanController_ID = CanIfControllerConf->CanCtrlId;
  _6 = CanIfControllerConf->CanDrvConfigPtr;
  _7 = _6->CanApi;
  _8 = _7->CanGetTxErrorCounter;
  RetVal = _8 (CanController_ID, TxErrorCounterPtr);

  <bb 5> :
  D.5660 = RetVal;

  <bb 6> :
<L4>:
  return D.5660;

}


CanIf_GetControllerRxErrorCounter (uint8 ControllerId, uint8 * RxErrorCounterPtr)
{
  uint8 CanController_ID;
  const struct CanIf_CtrlPCConfigType * CanIfControllerConf;
  Std_ReturnType RetVal;
  Std_ReturnType D.5654;

  <bb 2> :
  RetVal = 1;
  CanIfControllerConf = 0B;
  CanController_ID = 0;
  CanIf_ConfigPtr.17_1 = CanIf_ConfigPtr;
  if (CanIf_ConfigPtr.17_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _2 = CanIf_PCConfig.NumOfCtrl;
  if (ControllerId < _2)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = CanIf_PCConfig.CanIfCtrlConfigPtr;
  _4 = (unsigned int) ControllerId;
  _5 = _4 * 8;
  CanIfControllerConf = _3 + _5;
  CanController_ID = CanIfControllerConf->CanCtrlId;
  _6 = CanIfControllerConf->CanDrvConfigPtr;
  _7 = _6->CanApi;
  _8 = _7->CanGetRxErrorCounter;
  RetVal = _8 (CanController_ID, RxErrorCounterPtr);

  <bb 5> :
  D.5654 = RetVal;

  <bb 6> :
<L4>:
  return D.5654;

}


CanIf_GetControllerMode (uint8 Controller, Can_ControllerStateType * ControllerModePtr)
{
  uint8 CanController_ID;
  const struct CanIf_CtrlPCConfigType * CanIfControllerConf;
  Std_ReturnType RetVal;
  Std_ReturnType D.5648;

  <bb 2> :
  RetVal = 1;
  CanIfControllerConf = 0B;
  CanController_ID = 0;
  CanIf_ConfigPtr.16_1 = CanIf_ConfigPtr;
  if (CanIf_ConfigPtr.16_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _2 = CanIf_PCConfig.NumOfCtrl;
  if (Controller < _2)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = CanIf_PCConfig.CanIfCtrlConfigPtr;
  _4 = (unsigned int) Controller;
  _5 = _4 * 8;
  CanIfControllerConf = _3 + _5;
  CanController_ID = CanIfControllerConf->CanCtrlId;
  _6 = CanIfControllerConf->CanDrvConfigPtr;
  _7 = _6->CanApi;
  _8 = _7->CanGetMode;
  RetVal = _8 (CanController_ID, ControllerModePtr);

  <bb 5> :
  D.5648 = RetVal;

  <bb 6> :
<L4>:
  return D.5648;

}


CanIf_GetControllerErrorState (uint8 ControllerId, Can_ErrorStateType * ErrorStatePtr)
{
  uint8 CanController_ID;
  const struct CanIf_CtrlPCConfigType * CanIfControllerConf;
  Std_ReturnType RetVal;
  Std_ReturnType D.5642;

  <bb 2> :
  RetVal = 1;
  CanIfControllerConf = 0B;
  CanController_ID = 0;
  CanIf_ConfigPtr.15_1 = CanIf_ConfigPtr;
  if (CanIf_ConfigPtr.15_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _2 = CanIf_PCConfig.NumOfCtrl;
  if (ControllerId < _2)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = CanIf_PCConfig.CanIfCtrlConfigPtr;
  _4 = (unsigned int) ControllerId;
  _5 = _4 * 8;
  CanIfControllerConf = _3 + _5;
  CanController_ID = CanIfControllerConf->CanCtrlId;
  _6 = CanIfControllerConf->CanDrvConfigPtr;
  _7 = _6->CanApi;
  _8 = _7->CanGetErrorState;
  RetVal = _8 (CanController_ID, ErrorStatePtr);

  <bb 5> :
  D.5642 = RetVal;

  <bb 6> :
<L4>:
  return D.5642;

}


CanIf_DisableControllerInterrupts (uint8 Controller)
{
  uint8 CanController_ID;
  const struct CanIf_CtrlPCConfigType * CanIfControllerConf;

  <bb 2> :
  CanIfControllerConf = 0B;
  CanController_ID = 0;
  CanIf_ConfigPtr.14_1 = CanIf_ConfigPtr;
  if (CanIf_ConfigPtr.14_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _2 = CanIf_PCConfig.NumOfCtrl;
  if (Controller < _2)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = CanIf_PCConfig.CanIfCtrlConfigPtr;
  _4 = (unsigned int) Controller;
  _5 = _4 * 8;
  CanIfControllerConf = _3 + _5;
  CanController_ID = CanIfControllerConf->CanCtrlId;
  _6 = CanIfControllerConf->CanDrvConfigPtr;
  _7 = _6->CanApi;
  _8 = _7->CanDisableInterrupts;
  _8 (CanController_ID);

  <bb 5> :
  return;

}


CanIf_EnableControllerInterrupts (uint8 Controller)
{
  uint8 CanController_ID;
  const struct CanIf_CtrlPCConfigType * CanIfControllerConf;

  <bb 2> :
  CanIfControllerConf = 0B;
  CanController_ID = 0;
  CanIf_ConfigPtr.13_1 = CanIf_ConfigPtr;
  if (CanIf_ConfigPtr.13_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _2 = CanIf_PCConfig.NumOfCtrl;
  if (Controller < _2)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = CanIf_PCConfig.CanIfCtrlConfigPtr;
  _4 = (unsigned int) Controller;
  _5 = _4 * 8;
  CanIfControllerConf = _3 + _5;
  CanController_ID = CanIfControllerConf->CanCtrlId;
  _6 = CanIfControllerConf->CanDrvConfigPtr;
  _7 = _6->CanApi;
  _8 = _7->CanEnableInterrupts;
  _8 (CanController_ID);

  <bb 5> :
  return;

}


CanIf_SetControllerMode (uint8 Controller, Can_ControllerStateType Transition)
{
  uint8 CanController_ID;
  const struct CanIf_CtrlPCConfigType * CanIfControllerConf;
  Std_ReturnType RetVal;
  Std_ReturnType D.5628;

  <bb 2> :
  RetVal = 1;
  CanIfControllerConf = 0B;
  CanController_ID = 0;
  CanIf_ConfigPtr.12_1 = CanIf_ConfigPtr;
  if (CanIf_ConfigPtr.12_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _2 = CanIf_PCConfig.NumOfCtrl;
  if (Controller < _2)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = CanIf_PCConfig.CanIfCtrlConfigPtr;
  _4 = (unsigned int) Controller;
  _5 = _4 * 8;
  CanIfControllerConf = _3 + _5;
  CanController_ID = CanIfControllerConf->CanCtrlId;
  _6 = CanIfControllerConf->CanDrvConfigPtr;
  _7 = _6->CanApi;
  _8 = _7->CanSetMode;
  RetVal = _8 (CanController_ID, Transition);

  <bb 5> :
  D.5628 = RetVal;

  <bb 6> :
<L4>:
  return D.5628;

}


CanIf_ControllerBusOff (uint8 ControllerId)
{
  <bb 2> :
  _1 = (int) ControllerId;
  switch (_1) <default: <L2> [INV], case 0: <L0> [INV], case 1: <L1> [INV]>

  <bb 3> :
<L0>:
  CanIf_Can2_BusOff_Count.8_2 = CanIf_Can2_BusOff_Count;
  CanIf_Can2_BusOff_Count.9_3 = CanIf_Can2_BusOff_Count.8_2;
  _4 = CanIf_Can2_BusOff_Count.9_3 + 1;
  CanIf_Can2_BusOff_Count = _4;
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  CanIf_SetControllerMode (1, 2);
  CanIf_SetControllerMode (1, 1);
  CanIf_Can0_bTxFlag = 1;
  CanIf_Can0_BusOff_Count.10_5 = CanIf_Can0_BusOff_Count;
  CanIf_Can0_BusOff_Count.11_6 = CanIf_Can0_BusOff_Count.10_5;
  _7 = CanIf_Can0_BusOff_Count.11_6 + 1;
  CanIf_Can0_BusOff_Count = _7;
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:

  <bb 6> :
  return;

}


CanIf_ControllerModeIndication (uint8 ControllerId, Can_ControllerStateType ControllerMode)
{
  <bb 2> :
  return;

}


CanIf_RxIndication (const struct Can_HwType * Mailbox, const struct PduInfoType * PduInfoPtr)
{
  uint8 CanDrvId;
  const struct CanIf_RxPduType * RxPduInfo;
  struct PduInfoType PduInfo;
  PduIdType UserPduId;

  <bb 2> :
  UserPduId = 0;
  RxPduInfo = 0B;
  CanDrvId = 0;
  CanIf_ConfigPtr.6_1 = CanIf_ConfigPtr;
  if (CanIf_ConfigPtr.6_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 3> :
  _2 = Mailbox->ControllerId;
  _3 = CanIf_PCConfig.NumOfCtrl;
  if (_2 < _3)
    goto <bb 4>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 4> :
  _4 = Mailbox->Hoh;
  _5 = CanIf_PCConfig.CanIfCtrlConfigPtr;
  _6 = Mailbox->ControllerId;
  _7 = (unsigned int) _6;
  _8 = _7 * 8;
  _9 = _5 + _8;
  _10 = _9->CanDrvConfigPtr;
  _11 = _10->NumCanHoh;
  if (_4 < _11)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 5> :
  _12 = CanIf_PCConfig.CanIfCtrlConfigPtr;
  _13 = Mailbox->ControllerId;
  _14 = (unsigned int) _13;
  _15 = _14 * 8;
  _16 = _12 + _15;
  _17 = _16->CanDrvConfigPtr;
  CanDrvId = _17->CanDrvId;
  CanIf_ConfigPtr.7_18 = CanIf_ConfigPtr;
  _19 = CanIf_ConfigPtr.7_18->CanDrvConfigPtr;
  _20 = (unsigned int) CanDrvId;
  _21 = _20 * 4;
  _22 = _19 + _21;
  _23 = *_22;
  _24 = _23->HohToRxPduMappingPtr;
  _25 = Mailbox->Hoh;
  _26 = (unsigned int) _25;
  _27 = _26 * 4;
  _28 = _24 + _27;
  RxPduInfo = *_28;
  if (RxPduInfo != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 6> :
  _29 = RxPduInfo->UserRxIndication;
  if (_29 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 7> :
  UserPduId = RxPduInfo->PduId;
  _30 = RxPduInfo->PduLengthCheck;
  if (_30 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  _31 = PduInfoPtr->SduLength;
  _32 = RxPduInfo->PduLength;
  _33 = (long unsigned int) _32;
  if (_31 > _33)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _34 = RxPduInfo->PduLength;
  _35 = (long unsigned int) _34;
  PduInfo.SduLength = _35;
  goto <bb 11>; [INV]

  <bb 10> :
  _36 = PduInfoPtr->SduLength;
  PduInfo.SduLength = _36;

  <bb 11> :
  _37 = PduInfoPtr->SduDataPtr;
  PduInfo.SduDataPtr = _37;
  _38 = RxPduInfo->UserRxIndication;
  _38 (UserPduId, &PduInfo);

  <bb 12> :
  PduInfo = {CLOBBER};
  return;

}


CanIf_TxConfirmation (PduIdType CanTxPduId)
{
  const struct CanIf_TxPduType * TxPduInfo;
  PduIdType UserPduId;

  <bb 2> :
  TxPduInfo = 0B;
  CanIf_ConfigPtr.3_1 = CanIf_ConfigPtr;
  if (CanIf_ConfigPtr.3_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  CanIf_ConfigPtr.4_2 = CanIf_ConfigPtr;
  _3 = CanIf_ConfigPtr.4_2->NumTxPdu;
  _4 = (short unsigned int) _3;
  if (CanTxPduId < _4)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  CanIf_ConfigPtr.5_5 = CanIf_ConfigPtr;
  _6 = CanIf_ConfigPtr.5_5->CanIf_TxPduConfigPtr;
  _7 = (unsigned int) CanTxPduId;
  _8 = _7 * 20;
  TxPduInfo = _6 + _8;
  _9 = TxPduInfo->UserTxConfirmation;
  if (_9 != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  UserPduId = TxPduInfo->PduId;
  _10 = TxPduInfo->UserTxConfirmation;
  _10 (UserPduId, 0);

  <bb 6> :
  return;

}


CanIf_Transmit (PduIdType CanTxPduId, const struct PduInfoType * PduInfoPtr)
{
  const struct CanIf_CtrlPCConfigType * CanIfController;
  uint8 CanIfControllerId;
  const struct CanIf_TxPduType * TxPduInfo;
  struct Can_PduType PduInfo;
  Can_HwHandleType CanHth;
  Std_ReturnType RetVal;
  Std_ReturnType D.5601;

  <bb 2> :
  RetVal = 1;
  CanHth = 0;
  TxPduInfo = 0B;
  CanIfControllerId = 0;
  CanIfController = 0B;
  CanIf_ConfigPtr.0_1 = CanIf_ConfigPtr;
  if (CanIf_ConfigPtr.0_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  CanIf_ConfigPtr.1_2 = CanIf_ConfigPtr;
  _3 = CanIf_ConfigPtr.1_2->NumTxPdu;
  _4 = (short unsigned int) _3;
  if (CanTxPduId < _4)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  CanIf_ConfigPtr.2_5 = CanIf_ConfigPtr;
  _6 = CanIf_ConfigPtr.2_5->CanIf_TxPduConfigPtr;
  _7 = (unsigned int) CanTxPduId;
  _8 = _7 * 20;
  TxPduInfo = _6 + _8;
  CanIfControllerId = TxPduInfo->CanIfCtrlId;
  _9 = CanIf_PCConfig.CanIfCtrlConfigPtr;
  _10 = (unsigned int) CanIfControllerId;
  _11 = _10 * 8;
  CanIfController = _9 + _11;
  CanHth = TxPduInfo->CanHth;
  _12 = TxPduInfo->CanId;
  PduInfo.id = _12;
  _13 = TxPduInfo->CanFrameType;
  switch (_13) <default: <L5> [INV], case 0: <L2> [INV], case 1: <L3> [INV], case 3: <L4> [INV]>

  <bb 5> :
<L2>:
  _14 = PduInfo.id;
  _15 = _14 | 2147483648;
  PduInfo.id = _15;
  goto <bb 9>; [INV]

  <bb 6> :
<L3>:
  _16 = PduInfo.id;
  _17 = _16 | 3221225472;
  PduInfo.id = _17;
  goto <bb 9>; [INV]

  <bb 7> :
<L4>:
  _18 = PduInfo.id;
  _19 = _18 | 1073741824;
  PduInfo.id = _19;
  goto <bb 9>; [INV]

  <bb 8> :
<L5>:

  <bb 9> :
  _20 = PduInfoPtr->SduLength;
  _21 = (unsigned char) _20;
  PduInfo.length = _21;
  _22 = PduInfoPtr->SduDataPtr;
  PduInfo.sdu = _22;
  PduInfo.swPduHandle = CanTxPduId;
  _23 = CanIfController->CanDrvConfigPtr;
  _24 = _23->CanApi;
  _25 = _24->CanWrite;
  RetVal = _25 (CanHth, &PduInfo);

  <bb 10> :
  D.5601 = RetVal;
  PduInfo = {CLOBBER};

  <bb 11> :
<L10>:
  return D.5601;

}


CanIf_Init (const struct CanIf_ConfigType * ConfigPtr)
{
  <bb 2> :
  CanIf_ConfigPtr = ConfigPtr;
  return;

}


